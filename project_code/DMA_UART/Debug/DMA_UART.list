
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c1cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d8  0801c360  0801c360  0002c360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cd38  0801cd38  00030b84  2**0
                  CONTENTS
  4 .ARM          00000008  0801cd38  0801cd38  0002cd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cd40  0801cd40  00030b84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cd40  0801cd40  0002cd40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cd44  0801cd44  0002cd44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b84  20000000  0801cd48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bdfc  20000b88  0801d8cc  00030b88  2**3
                  ALLOC
 10 ._user_heap_stack 000063c4  2000c984  0801d8cc  0003c984  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030b84  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034dac  00000000  00000000  00030bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007133  00000000  00000000  00065960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e78  00000000  00000000  0006ca98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c20  00000000  00000000  0006e910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002af13  00000000  00000000  00070530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000296ec  00000000  00000000  0009b443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000defcd  00000000  00000000  000c4b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a3afc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000964c  00000000  00000000  001a3b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000b88 	.word	0x20000b88
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801c344 	.word	0x0801c344

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000b8c 	.word	0x20000b8c
 80001cc:	0801c344 	.word	0x0801c344

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <packetRead>:
//												"OKAY"};

Position_DataType position_type;
SCARA_Gcode_Cor_TypeDef		Gcode_Cor[1000];
uint16_t point_counter = 0;
Robot_CommandTypedef 	packetRead	(uint8_t *message, int32_t length, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	; 0x30
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
	Transfer_Protocol protocol_id = message[0];
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    duty_cmd->id_command = message[1];
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3301      	adds	r3, #1
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	609a      	str	r2, [r3, #8]
	int32_t temp_pointer = 2;
 8001012:	2302      	movs	r3, #2
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch(protocol_id) 
 8001016:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <packetRead+0x38>
 800101e:	2b01      	cmp	r3, #1
 8001020:	f000 813b 	beq.w	800129a <packetRead+0x2aa>
 8001024:	f000 be52 	b.w	8001ccc <packetRead+0xcdc>
    {
        // reserved for Gcode file transfer
        case FILE_TRANSMISION:
        {
        	temp_pointer = 1;
 8001028:	2301      	movs	r3, #1
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c

        	do {
        		Gcode_Packet_Command_TypeDef move_type 	 = message[temp_pointer] & 0x0f;
 800102c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	4413      	add	r3, r2
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	f003 030f 	and.w	r3, r3, #15
 8001038:	743b      	strb	r3, [r7, #16]
				switch (move_type){
 800103a:	7c3b      	ldrb	r3, [r7, #16]
 800103c:	2b03      	cmp	r3, #3
 800103e:	f300 8124 	bgt.w	800128a <packetRead+0x29a>
 8001042:	2b02      	cmp	r3, #2
 8001044:	f280 809d 	bge.w	8001182 <packetRead+0x192>
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <packetRead+0x62>
 800104c:	2b01      	cmp	r3, #1
 800104e:	d038      	beq.n	80010c2 <packetRead+0xd2>
 8001050:	e11b      	b.n	800128a <packetRead+0x29a>
				case FIRST_PACKET:{
					temp_pointer++;
 8001052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001054:	3301      	adds	r3, #1
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
					down_z_height = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 8001058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	4413      	add	r3, r2
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fa5f 	bl	8000524 <__aeabi_i2d>
 8001066:	a3b4      	add	r3, pc, #720	; (adr r3, 8001338 <packetRead+0x348>)
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	f7ff fac4 	bl	80005f8 <__aeabi_dmul>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	49b2      	ldr	r1, [pc, #712]	; (8001340 <packetRead+0x350>)
 8001076:	e9c1 2300 	strd	r2, r3, [r1]
 800107a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107c:	3304      	adds	r3, #4
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
					up_z_height   = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 8001080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	4413      	add	r3, r2
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa4b 	bl	8000524 <__aeabi_i2d>
 800108e:	a3aa      	add	r3, pc, #680	; (adr r3, 8001338 <packetRead+0x348>)
 8001090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001094:	f7ff fab0 	bl	80005f8 <__aeabi_dmul>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	49a9      	ldr	r1, [pc, #676]	; (8001344 <packetRead+0x354>)
 800109e:	e9c1 2300 	strd	r2, r3, [r1]
 80010a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a4:	3304      	adds	r3, #4
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					total_num_of_point = B2I(temp_pointer);						 temp_pointer+=4;
 80010a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4aa5      	ldr	r2, [pc, #660]	; (8001348 <packetRead+0x358>)
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b6:	3304      	adds	r3, #4
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter = 0;
 80010ba:	4ba4      	ldr	r3, [pc, #656]	; (800134c <packetRead+0x35c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	801a      	strh	r2, [r3, #0]
				}
				break;
 80010c0:	e0e3      	b.n	800128a <packetRead+0x29a>
				case LINEAR_TYPE:{
					Gcode_Cor[point_counter].type_define[0] = move_type;
 80010c2:	4ba2      	ldr	r3, [pc, #648]	; (800134c <packetRead+0x35c>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	4619      	mov	r1, r3
 80010c8:	4aa1      	ldr	r2, [pc, #644]	; (8001350 <packetRead+0x360>)
 80010ca:	460b      	mov	r3, r1
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	440b      	add	r3, r1
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	4413      	add	r3, r2
 80010d4:	3314      	adds	r3, #20
 80010d6:	7c3a      	ldrb	r2, [r7, #16]
 80010d8:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].type_define[1]	= message[temp_pointer++] >> 4 & 0x0f;
 80010da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010dc:	1c5a      	adds	r2, r3, #1
 80010de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80010e0:	461a      	mov	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4413      	add	r3, r2
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	091b      	lsrs	r3, r3, #4
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	4a97      	ldr	r2, [pc, #604]	; (800134c <packetRead+0x35c>)
 80010ee:	8812      	ldrh	r2, [r2, #0]
 80010f0:	4611      	mov	r1, r2
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	b2d8      	uxtb	r0, r3
 80010f8:	4a95      	ldr	r2, [pc, #596]	; (8001350 <packetRead+0x360>)
 80010fa:	460b      	mov	r3, r1
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	440b      	add	r3, r1
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	4413      	add	r3, r2
 8001104:	3315      	adds	r3, #21
 8001106:	4602      	mov	r2, r0
 8001108:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 800110a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	4a8e      	ldr	r2, [pc, #568]	; (800134c <packetRead+0x35c>)
 8001112:	8812      	ldrh	r2, [r2, #0]
 8001114:	4610      	mov	r0, r2
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	498d      	ldr	r1, [pc, #564]	; (8001350 <packetRead+0x360>)
 800111a:	4603      	mov	r3, r0
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4403      	add	r3, r0
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	440b      	add	r3, r1
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001128:	3304      	adds	r3, #4
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 800112c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	4413      	add	r3, r2
 8001132:	4a86      	ldr	r2, [pc, #536]	; (800134c <packetRead+0x35c>)
 8001134:	8812      	ldrh	r2, [r2, #0]
 8001136:	4610      	mov	r0, r2
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	4985      	ldr	r1, [pc, #532]	; (8001350 <packetRead+0x360>)
 800113c:	4603      	mov	r3, r0
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4403      	add	r3, r0
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	440b      	add	r3, r1
 8001146:	3304      	adds	r3, #4
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800114c:	3304      	adds	r3, #4
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 8001150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	4413      	add	r3, r2
 8001156:	4a7d      	ldr	r2, [pc, #500]	; (800134c <packetRead+0x35c>)
 8001158:	8812      	ldrh	r2, [r2, #0]
 800115a:	4610      	mov	r0, r2
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	497c      	ldr	r1, [pc, #496]	; (8001350 <packetRead+0x360>)
 8001160:	4603      	mov	r3, r0
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4403      	add	r3, r0
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	440b      	add	r3, r1
 800116a:	3308      	adds	r3, #8
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001170:	3304      	adds	r3, #4
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter++;
 8001174:	4b75      	ldr	r3, [pc, #468]	; (800134c <packetRead+0x35c>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	b29a      	uxth	r2, r3
 800117c:	4b73      	ldr	r3, [pc, #460]	; (800134c <packetRead+0x35c>)
 800117e:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001180:	e083      	b.n	800128a <packetRead+0x29a>
				case ARC_CW_TYPE:
				case ARC_AW_TYPE:{
					Gcode_Cor[point_counter].type_define[0] = move_type;
 8001182:	4b72      	ldr	r3, [pc, #456]	; (800134c <packetRead+0x35c>)
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	4619      	mov	r1, r3
 8001188:	4a71      	ldr	r2, [pc, #452]	; (8001350 <packetRead+0x360>)
 800118a:	460b      	mov	r3, r1
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	440b      	add	r3, r1
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	4413      	add	r3, r2
 8001194:	3314      	adds	r3, #20
 8001196:	7c3a      	ldrb	r2, [r7, #16]
 8001198:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].type_define[1]	= message[temp_pointer++] >> 4 & 0x0f;
 800119a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800119c:	1c5a      	adds	r2, r3, #1
 800119e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80011a0:	461a      	mov	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4413      	add	r3, r2
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	091b      	lsrs	r3, r3, #4
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4a67      	ldr	r2, [pc, #412]	; (800134c <packetRead+0x35c>)
 80011ae:	8812      	ldrh	r2, [r2, #0]
 80011b0:	4611      	mov	r1, r2
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	b2d8      	uxtb	r0, r3
 80011b8:	4a65      	ldr	r2, [pc, #404]	; (8001350 <packetRead+0x360>)
 80011ba:	460b      	mov	r3, r1
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	440b      	add	r3, r1
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	4413      	add	r3, r2
 80011c4:	3315      	adds	r3, #21
 80011c6:	4602      	mov	r2, r0
 80011c8:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 80011ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a5e      	ldr	r2, [pc, #376]	; (800134c <packetRead+0x35c>)
 80011d2:	8812      	ldrh	r2, [r2, #0]
 80011d4:	4610      	mov	r0, r2
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	495d      	ldr	r1, [pc, #372]	; (8001350 <packetRead+0x360>)
 80011da:	4603      	mov	r3, r0
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4403      	add	r3, r0
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	440b      	add	r3, r1
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e8:	3304      	adds	r3, #4
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 80011ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	4413      	add	r3, r2
 80011f2:	4a56      	ldr	r2, [pc, #344]	; (800134c <packetRead+0x35c>)
 80011f4:	8812      	ldrh	r2, [r2, #0]
 80011f6:	4610      	mov	r0, r2
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4955      	ldr	r1, [pc, #340]	; (8001350 <packetRead+0x360>)
 80011fc:	4603      	mov	r3, r0
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4403      	add	r3, r0
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	440b      	add	r3, r1
 8001206:	3304      	adds	r3, #4
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120c:	3304      	adds	r3, #4
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 8001210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	4413      	add	r3, r2
 8001216:	4a4d      	ldr	r2, [pc, #308]	; (800134c <packetRead+0x35c>)
 8001218:	8812      	ldrh	r2, [r2, #0]
 800121a:	4610      	mov	r0, r2
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	494c      	ldr	r1, [pc, #304]	; (8001350 <packetRead+0x360>)
 8001220:	4603      	mov	r3, r0
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4403      	add	r3, r0
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	440b      	add	r3, r1
 800122a:	3308      	adds	r3, #8
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001230:	3304      	adds	r3, #4
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].I = B2I(temp_pointer);	temp_pointer+=4;
 8001234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	4413      	add	r3, r2
 800123a:	4a44      	ldr	r2, [pc, #272]	; (800134c <packetRead+0x35c>)
 800123c:	8812      	ldrh	r2, [r2, #0]
 800123e:	4610      	mov	r0, r2
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	4943      	ldr	r1, [pc, #268]	; (8001350 <packetRead+0x360>)
 8001244:	4603      	mov	r3, r0
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4403      	add	r3, r0
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	440b      	add	r3, r1
 800124e:	330c      	adds	r3, #12
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001254:	3304      	adds	r3, #4
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].J = B2I(temp_pointer);	temp_pointer+=4;
 8001258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	4413      	add	r3, r2
 800125e:	4a3b      	ldr	r2, [pc, #236]	; (800134c <packetRead+0x35c>)
 8001260:	8812      	ldrh	r2, [r2, #0]
 8001262:	4610      	mov	r0, r2
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	493a      	ldr	r1, [pc, #232]	; (8001350 <packetRead+0x360>)
 8001268:	4603      	mov	r3, r0
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4403      	add	r3, r0
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	440b      	add	r3, r1
 8001272:	3310      	adds	r3, #16
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001278:	3304      	adds	r3, #4
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter++;
 800127c:	4b33      	ldr	r3, [pc, #204]	; (800134c <packetRead+0x35c>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	3301      	adds	r3, #1
 8001282:	b29a      	uxth	r2, r3
 8001284:	4b31      	ldr	r3, [pc, #196]	; (800134c <packetRead+0x35c>)
 8001286:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001288:	bf00      	nop
				}
        	}while(temp_pointer < length);
 800128a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	429a      	cmp	r2, r3
 8001290:	f6ff aecc 	blt.w	800102c <packetRead+0x3c>
        	return CMD_GCODE;
 8001294:	231a      	movs	r3, #26
 8001296:	f000 bd1a 	b.w	8001cce <packetRead+0xcde>
        break;

        // command control from pc
        case COMMAND_TRANSMISION:
        {
        	Robot_CommandTypedef command_id = message[1];
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	785b      	ldrb	r3, [r3, #1]
 800129e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            switch(command_id)
 80012a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80012a6:	2b19      	cmp	r3, #25
 80012a8:	f200 850e 	bhi.w	8001cc8 <packetRead+0xcd8>
 80012ac:	a201      	add	r2, pc, #4	; (adr r2, 80012b4 <packetRead+0x2c4>)
 80012ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b2:	bf00      	nop
 80012b4:	0800131d 	.word	0x0800131d
 80012b8:	08001359 	.word	0x08001359
 80012bc:	08001371 	.word	0x08001371
 80012c0:	08001439 	.word	0x08001439
 80012c4:	08001685 	.word	0x08001685
 80012c8:	08001439 	.word	0x08001439
 80012cc:	080018f7 	.word	0x080018f7
 80012d0:	080018fb 	.word	0x080018fb
 80012d4:	08001cc9 	.word	0x08001cc9
 80012d8:	0800191b 	.word	0x0800191b
 80012dc:	08001939 	.word	0x08001939
 80012e0:	080019a5 	.word	0x080019a5
 80012e4:	08001a73 	.word	0x08001a73
 80012e8:	08001c99 	.word	0x08001c99
 80012ec:	08001ca9 	.word	0x08001ca9
 80012f0:	08001cc9 	.word	0x08001cc9
 80012f4:	08001cc9 	.word	0x08001cc9
 80012f8:	08001bd5 	.word	0x08001bd5
 80012fc:	08001cb9 	.word	0x08001cb9
 8001300:	08001c89 	.word	0x08001c89
 8001304:	08001a11 	.word	0x08001a11
 8001308:	08001a3b 	.word	0x08001a3b
 800130c:	08001cc9 	.word	0x08001cc9
 8001310:	08001cc9 	.word	0x08001cc9
 8001314:	08001aad 	.word	0x08001aad
 8001318:	08001b8d 	.word	0x08001b8d
            {
                // Stop now
                case CMD_STOPNOW:
                {
                    duty_cmd->robot_mode = SCARA_MODE_STOP;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	2200      	movs	r2, #0
 8001320:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	2201      	movs	r2, #1
 8001326:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
                    return CMD_STOPNOW;
 800132e:	2300      	movs	r3, #0
 8001330:	f000 bccd 	b.w	8001cce <packetRead+0xcde>
 8001334:	f3af 8000 	nop.w
 8001338:	a0000000 	.word	0xa0000000
 800133c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001340:	20004d70 	.word	0x20004d70
 8001344:	20004d68 	.word	0x20004d68
 8001348:	20004d88 	.word	0x20004d88
 800134c:	20000ba4 	.word	0x20000ba4
 8001350:	20004d8c 	.word	0x20004d8c
 8001354:	358637bd 	.word	0x358637bd
                break;

                // Scan limit
                case CMD_SCAN_LIMIT:
                {
                    duty_cmd->robot_mode = SCARA_MODE_SCAN;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	2201      	movs	r2, #1
 800135c:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	2201      	movs	r2, #1
 8001362:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
                    return CMD_SCAN_LIMIT;
 800136a:	2301      	movs	r3, #1
 800136c:	f000 bcaf 	b.w	8001cce <packetRead+0xcde>
                break;

                // Move home
                case CMD_MOVE_HOME:
                {
                    if (length == 10){ // 2 int32_t number + 2 define byte
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	2b0a      	cmp	r3, #10
 8001374:	d15d      	bne.n	8001432 <packetRead+0x442>
                        // memcpy(&duty_cmd->v_factor, &message[temp_pointer+=8], 8);
						// memcpy(&duty_cmd->a_factor, &message[temp_pointer], 8); 
						temp_pointer = -2;
 8001376:	f06f 0301 	mvn.w	r3, #1
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->v_factor = (*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 800137c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800137e:	3304      	adds	r3, #4
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	4413      	add	r3, r2
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	ee07 3a90 	vmov	s15, r3
 800138e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001392:	ed1f 7a10 	vldr	s14, [pc, #-64]	; 8001354 <packetRead+0x364>
 8001396:	ee67 7a87 	vmul.f32	s15, s15, s14
 800139a:	ee17 0a90 	vmov	r0, s15
 800139e:	f7ff f8d3 	bl	8000548 <__aeabi_f2d>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	6839      	ldr	r1, [r7, #0]
 80013a8:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
						duty_cmd->a_factor = (*(int32_t*)(&message[temp_pointer]))*COR_INVERSE_SCALE;
 80013ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4413      	add	r3, r2
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013bc:	ed1f 7a1b 	vldr	s14, [pc, #-108]	; 8001354 <packetRead+0x364>
 80013c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c4:	ee17 0a90 	vmov	r0, s15
 80013c8:	f7ff f8be 	bl	8000548 <__aeabi_f2d>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	6839      	ldr	r1, [r7, #0]
 80013d2:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
                    }else{
                        return CMD_ERROR;
                    }
                    duty_cmd->target_point.x = 250;
 80013d6:	6839      	ldr	r1, [r7, #0]
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	4ba6      	ldr	r3, [pc, #664]	; (8001678 <packetRead+0x688>)
 80013de:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
                    duty_cmd->target_point.y = -200;
 80013e2:	6839      	ldr	r1, [r7, #0]
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	4ba4      	ldr	r3, [pc, #656]	; (800167c <packetRead+0x68c>)
 80013ea:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
                    duty_cmd->target_point.z = 120;
 80013ee:	6839      	ldr	r1, [r7, #0]
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	4ba2      	ldr	r3, [pc, #648]	; (8001680 <packetRead+0x690>)
 80013f6:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
                    duty_cmd->target_point.roll = 0;
 80013fa:	6839      	ldr	r1, [r7, #0]
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

                    duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2200      	movs	r2, #0
 800140c:	745a      	strb	r2, [r3, #17]
                    duty_cmd->space_type = DUTY_SPACE_JOINT;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	2201      	movs	r2, #1
 8001412:	735a      	strb	r2, [r3, #13]
                    duty_cmd->joint_type = DUTY_JOINT_4DOF;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	2201      	movs	r2, #1
 8001418:	73da      	strb	r2, [r3, #15]
                    duty_cmd->robot_mode = SCARA_MODE_DUTY;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	2202      	movs	r2, #2
 800141e:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	2201      	movs	r2, #1
 8001424:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
                    return CMD_MOVE_HOME;
 800142c:	2302      	movs	r3, #2
 800142e:	f000 bc4e 	b.w	8001cce <packetRead+0xcde>
                        return CMD_ERROR;
 8001432:	2316      	movs	r3, #22
 8001434:	f000 bc4b 	b.w	8001cce <packetRead+0xcde>

                case CMD_MOVE_JOINT:
                // Move line
                case CMD_MOVE_LINE:
                {
                    if (length == 29){ // 6 int32_t number + 3 byte number + 2 define byte
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	2b1d      	cmp	r3, #29
 800143c:	f040 8107 	bne.w	800164e <packetRead+0x65e>
						//scaraSetScanFlag();
						uint8_t mode_init;
						temp_pointer = -2;
 8001440:	f06f 0301 	mvn.w	r3, #1
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c

						duty_cmd->target_point.x = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001448:	3304      	adds	r3, #4
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800144c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	4413      	add	r3, r2
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f865 	bl	8000524 <__aeabi_i2d>
 800145a:	a385      	add	r3, pc, #532	; (adr r3, 8001670 <packetRead+0x680>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f7ff f8ca 	bl	80005f8 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	6839      	ldr	r1, [r7, #0]
 800146a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
						duty_cmd->target_point.y = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 800146e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001470:	3304      	adds	r3, #4
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4413      	add	r3, r2
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f851 	bl	8000524 <__aeabi_i2d>
 8001482:	a37b      	add	r3, pc, #492	; (adr r3, 8001670 <packetRead+0x680>)
 8001484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001488:	f7ff f8b6 	bl	80005f8 <__aeabi_dmul>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	6839      	ldr	r1, [r7, #0]
 8001492:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
						duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001498:	3304      	adds	r3, #4
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800149c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	4413      	add	r3, r2
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f83d 	bl	8000524 <__aeabi_i2d>
 80014aa:	a371      	add	r3, pc, #452	; (adr r3, 8001670 <packetRead+0x680>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f8a2 	bl	80005f8 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	6839      	ldr	r1, [r7, #0]
 80014ba:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
						duty_cmd->target_point.roll = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 80014be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c0:	3304      	adds	r3, #4
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	4413      	add	r3, r2
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff f829 	bl	8000524 <__aeabi_i2d>
 80014d2:	a367      	add	r3, pc, #412	; (adr r3, 8001670 <packetRead+0x680>)
 80014d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d8:	f7ff f88e 	bl	80005f8 <__aeabi_dmul>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	6839      	ldr	r1, [r7, #0]
 80014e2:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
						duty_cmd->v_factor = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 80014e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e8:	3304      	adds	r3, #4
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	4413      	add	r3, r2
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f815 	bl	8000524 <__aeabi_i2d>
 80014fa:	a35d      	add	r3, pc, #372	; (adr r3, 8001670 <packetRead+0x680>)
 80014fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001500:	f7ff f87a 	bl	80005f8 <__aeabi_dmul>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	6839      	ldr	r1, [r7, #0]
 800150a:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
						mode_init = message[temp_pointer+=4];
 800150e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001510:	3304      	adds	r3, #4
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	4413      	add	r3, r2
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	747b      	strb	r3, [r7, #17]

						if(mode_init == DUTY_MODE_INIT_QVA){
 800151e:	7c7b      	ldrb	r3, [r7, #17]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d117      	bne.n	8001554 <packetRead+0x564>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	2200      	movs	r2, #0
 8001528:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 800152a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152c:	3301      	adds	r3, #1
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	4413      	add	r3, r2
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe fff3 	bl	8000524 <__aeabi_i2d>
 800153e:	a34c      	add	r3, pc, #304	; (adr r3, 8001670 <packetRead+0x680>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	f7ff f858 	bl	80005f8 <__aeabi_dmul>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	6839      	ldr	r1, [r7, #0]
 800154e:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
 8001552:	e052      	b.n	80015fa <packetRead+0x60a>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 8001554:	7c7b      	ldrb	r3, [r7, #17]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d117      	bne.n	800158a <packetRead+0x59a>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	2201      	movs	r2, #1
 800155e:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 8001560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001562:	3301      	adds	r3, #1
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	4413      	add	r3, r2
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ffd8 	bl	8000524 <__aeabi_i2d>
 8001574:	a33e      	add	r3, pc, #248	; (adr r3, 8001670 <packetRead+0x680>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f7ff f83d 	bl	80005f8 <__aeabi_dmul>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	6839      	ldr	r1, [r7, #0]
 8001584:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001588:	e037      	b.n	80015fa <packetRead+0x60a>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 800158a:	7c7b      	ldrb	r3, [r7, #17]
 800158c:	2b03      	cmp	r3, #3
 800158e:	d117      	bne.n	80015c0 <packetRead+0x5d0>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	2203      	movs	r2, #3
 8001594:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 8001596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001598:	3301      	adds	r3, #1
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800159c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4413      	add	r3, r2
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ffbd 	bl	8000524 <__aeabi_i2d>
 80015aa:	a331      	add	r3, pc, #196	; (adr r3, 8001670 <packetRead+0x680>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f7ff f822 	bl	80005f8 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	6839      	ldr	r1, [r7, #0]
 80015ba:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80015be:	e01c      	b.n	80015fa <packetRead+0x60a>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 80015c0:	7c7b      	ldrb	r3, [r7, #17]
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d117      	bne.n	80015f6 <packetRead+0x606>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2202      	movs	r2, #2
 80015ca:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 80015cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ce:	3301      	adds	r3, #1
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ffa2 	bl	8000524 <__aeabi_i2d>
 80015e0:	a323      	add	r3, pc, #140	; (adr r3, 8001670 <packetRead+0x680>)
 80015e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e6:	f7ff f807 	bl	80005f8 <__aeabi_dmul>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	6839      	ldr	r1, [r7, #0]
 80015f0:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
 80015f4:	e001      	b.n	80015fa <packetRead+0x60a>
						}else{
							return CMD_ERROR;
 80015f6:	2316      	movs	r3, #22
 80015f8:	e369      	b.n	8001cce <packetRead+0xcde>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 80015fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fc:	3304      	adds	r3, #4
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	4413      	add	r3, r2
 8001606:	781a      	ldrb	r2, [r3, #0]
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 800160c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160e:	3301      	adds	r3, #1
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	4413      	add	r3, r2
 8001618:	781a      	ldrb	r2, [r3, #0]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	741a      	strb	r2, [r3, #16]
						if(command_id == CMD_MOVE_LINE){
 800161e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001622:	2b03      	cmp	r3, #3
 8001624:	d106      	bne.n	8001634 <packetRead+0x644>
							duty_cmd->path_type = DUTY_PATH_LINE;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	2200      	movs	r2, #0
 800162a:	739a      	strb	r2, [r3, #14]
							duty_cmd->space_type = DUTY_SPACE_TASK;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	2200      	movs	r2, #0
 8001630:	735a      	strb	r2, [r3, #13]
 8001632:	e00e      	b.n	8001652 <packetRead+0x662>
						}else if(command_id == CMD_MOVE_JOINT){
 8001634:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001638:	2b05      	cmp	r3, #5
 800163a:	d106      	bne.n	800164a <packetRead+0x65a>
							duty_cmd->joint_type = DUTY_JOINT_4DOF;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	2201      	movs	r2, #1
 8001640:	73da      	strb	r2, [r3, #15]
							duty_cmd->space_type = DUTY_SPACE_JOINT;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	2201      	movs	r2, #1
 8001646:	735a      	strb	r2, [r3, #13]
 8001648:	e003      	b.n	8001652 <packetRead+0x662>
						}else{
							return CMD_ERROR;
 800164a:	2316      	movs	r3, #22
 800164c:	e33f      	b.n	8001cce <packetRead+0xcde>
						}

					}else{
						return CMD_ERROR;
 800164e:	2316      	movs	r3, #22
 8001650:	e33d      	b.n	8001cce <packetRead+0xcde>
					}
					duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	2202      	movs	r2, #2
 8001656:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	2201      	movs	r2, #1
 800165c:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
					return command_id;
 8001664:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001668:	e331      	b.n	8001cce <packetRead+0xcde>
 800166a:	bf00      	nop
 800166c:	f3af 8000 	nop.w
 8001670:	a0000000 	.word	0xa0000000
 8001674:	3eb0c6f7 	.word	0x3eb0c6f7
 8001678:	406f4000 	.word	0x406f4000
 800167c:	c0690000 	.word	0xc0690000
 8001680:	405e0000 	.word	0x405e0000
				break;


				// Move circle
                case CMD_MOVE_CIRCLE:{
                	if(length == 34){ // 7 int32_t number + 4 byte number + 2 define byte
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	2b22      	cmp	r3, #34	; 0x22
 8001688:	f040 8133 	bne.w	80018f2 <packetRead+0x902>
                		uint8_t mode_init, arc_type;
                		temp_pointer = -2;
 800168c:	f06f 0301 	mvn.w	r3, #1
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
                		duty_cmd->target_point.x      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001694:	3304      	adds	r3, #4
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	4413      	add	r3, r2
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe ff3f 	bl	8000524 <__aeabi_i2d>
 80016a6:	f20f 5318 	addw	r3, pc, #1304	; 0x518
 80016aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ae:	f7fe ffa3 	bl	80005f8 <__aeabi_dmul>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	6839      	ldr	r1, [r7, #0]
 80016b8:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
                		duty_cmd->target_point.y      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80016bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016be:	3304      	adds	r3, #4
 80016c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	4413      	add	r3, r2
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe ff2a 	bl	8000524 <__aeabi_i2d>
 80016d0:	f20f 43ec 	addw	r3, pc, #1260	; 0x4ec
 80016d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d8:	f7fe ff8e 	bl	80005f8 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	6839      	ldr	r1, [r7, #0]
 80016e2:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
                		duty_cmd->sub_point.x 	      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80016e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e8:	3304      	adds	r3, #4
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	4413      	add	r3, r2
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe ff15 	bl	8000524 <__aeabi_i2d>
 80016fa:	f20f 43c4 	addw	r3, pc, #1220	; 0x4c4
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	f7fe ff79 	bl	80005f8 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	6839      	ldr	r1, [r7, #0]
 800170c:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
                		duty_cmd->sub_point.y         = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001712:	3304      	adds	r3, #4
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	4413      	add	r3, r2
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe ff00 	bl	8000524 <__aeabi_i2d>
 8001724:	f20f 4398 	addw	r3, pc, #1176	; 0x498
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7fe ff64 	bl	80005f8 <__aeabi_dmul>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	6839      	ldr	r1, [r7, #0]
 8001736:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
                		duty_cmd->v_factor			  = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800173a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173c:	3304      	adds	r3, #4
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	4413      	add	r3, r2
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe feeb 	bl	8000524 <__aeabi_i2d>
 800174e:	f20f 4370 	addw	r3, pc, #1136	; 0x470
 8001752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001756:	f7fe ff4f 	bl	80005f8 <__aeabi_dmul>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	6839      	ldr	r1, [r7, #0]
 8001760:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
                		duty_cmd->target_point.roll   = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001766:	3304      	adds	r3, #4
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800176a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	4413      	add	r3, r2
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fed6 	bl	8000524 <__aeabi_i2d>
 8001778:	f20f 4344 	addw	r3, pc, #1092	; 0x444
 800177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001780:	f7fe ff3a 	bl	80005f8 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	6839      	ldr	r1, [r7, #0]
 800178a:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
                		arc_type = message[temp_pointer+=4];
 800178e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001790:	3304      	adds	r3, #4
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	4413      	add	r3, r2
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	74fb      	strb	r3, [r7, #19]
                		if(arc_type == ARC_AW_TYPE){
 800179e:	7cfb      	ldrb	r3, [r7, #19]
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d103      	bne.n	80017ac <packetRead+0x7bc>
                			duty_cmd->arc_dir = 1;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	2201      	movs	r2, #1
 80017a8:	615a      	str	r2, [r3, #20]
 80017aa:	e009      	b.n	80017c0 <packetRead+0x7d0>
                		}else if(arc_type == ARC_CW_TYPE){
 80017ac:	7cfb      	ldrb	r3, [r7, #19]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d104      	bne.n	80017bc <packetRead+0x7cc>
                			duty_cmd->arc_dir = -1;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	615a      	str	r2, [r3, #20]
 80017ba:	e001      	b.n	80017c0 <packetRead+0x7d0>
                		}else{
                			return CMD_ERROR;
 80017bc:	2316      	movs	r3, #22
 80017be:	e286      	b.n	8001cce <packetRead+0xcde>
                		}
                		mode_init = message[temp_pointer+=1];
 80017c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c2:	3301      	adds	r3, #1
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	4413      	add	r3, r2
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	74bb      	strb	r3, [r7, #18]
						if(mode_init == DUTY_MODE_INIT_QVA){
 80017d0:	7cbb      	ldrb	r3, [r7, #18]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d117      	bne.n	8001806 <packetRead+0x816>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	2200      	movs	r2, #0
 80017da:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 80017dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017de:	3301      	adds	r3, #1
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe fe9a 	bl	8000524 <__aeabi_i2d>
 80017f0:	a3f3      	add	r3, pc, #972	; (adr r3, 8001bc0 <packetRead+0xbd0>)
 80017f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f6:	f7fe feff 	bl	80005f8 <__aeabi_dmul>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	6839      	ldr	r1, [r7, #0]
 8001800:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
 8001804:	e052      	b.n	80018ac <packetRead+0x8bc>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 8001806:	7cbb      	ldrb	r3, [r7, #18]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d117      	bne.n	800183c <packetRead+0x84c>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	2201      	movs	r2, #1
 8001810:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 8001812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001814:	3301      	adds	r3, #1
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	4413      	add	r3, r2
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fe7f 	bl	8000524 <__aeabi_i2d>
 8001826:	a3e6      	add	r3, pc, #920	; (adr r3, 8001bc0 <packetRead+0xbd0>)
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	f7fe fee4 	bl	80005f8 <__aeabi_dmul>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	6839      	ldr	r1, [r7, #0]
 8001836:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800183a:	e037      	b.n	80018ac <packetRead+0x8bc>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 800183c:	7cbb      	ldrb	r3, [r7, #18]
 800183e:	2b03      	cmp	r3, #3
 8001840:	d117      	bne.n	8001872 <packetRead+0x882>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	2203      	movs	r2, #3
 8001846:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 8001848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184a:	3301      	adds	r3, #1
 800184c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800184e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	4413      	add	r3, r2
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe64 	bl	8000524 <__aeabi_i2d>
 800185c:	a3d8      	add	r3, pc, #864	; (adr r3, 8001bc0 <packetRead+0xbd0>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7fe fec9 	bl	80005f8 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	6839      	ldr	r1, [r7, #0]
 800186c:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001870:	e01c      	b.n	80018ac <packetRead+0x8bc>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 8001872:	7cbb      	ldrb	r3, [r7, #18]
 8001874:	2b02      	cmp	r3, #2
 8001876:	d117      	bne.n	80018a8 <packetRead+0x8b8>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	2202      	movs	r2, #2
 800187c:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 800187e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001880:	3301      	adds	r3, #1
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	4413      	add	r3, r2
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe49 	bl	8000524 <__aeabi_i2d>
 8001892:	a3cb      	add	r3, pc, #812	; (adr r3, 8001bc0 <packetRead+0xbd0>)
 8001894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001898:	f7fe feae 	bl	80005f8 <__aeabi_dmul>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	6839      	ldr	r1, [r7, #0]
 80018a2:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
 80018a6:	e001      	b.n	80018ac <packetRead+0x8bc>
						}else{
							return CMD_ERROR;
 80018a8:	2316      	movs	r3, #22
 80018aa:	e210      	b.n	8001cce <packetRead+0xcde>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 80018ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ae:	3304      	adds	r3, #4
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	4413      	add	r3, r2
 80018b8:	781a      	ldrb	r2, [r3, #0]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 80018be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c0:	3301      	adds	r3, #1
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	4413      	add	r3, r2
 80018ca:	781a      	ldrb	r2, [r3, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	741a      	strb	r2, [r3, #16]
						duty_cmd->path_type = DUTY_PATH_CIRCLE;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	2201      	movs	r2, #1
 80018d4:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	2200      	movs	r2, #0
 80018da:	735a      	strb	r2, [r3, #13]
                	}else{
                		return CMD_ERROR;
                	}
                	duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	2202      	movs	r2, #2
 80018e0:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	2201      	movs	r2, #1
 80018e6:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
					return CMD_MOVE_CIRCLE;
 80018ee:	2304      	movs	r3, #4
 80018f0:	e1ed      	b.n	8001cce <packetRead+0xcde>
                		return CMD_ERROR;
 80018f2:	2316      	movs	r3, #22
 80018f4:	e1eb      	b.n	8001cce <packetRead+0xcde>
                break;

				// Rotate Single
				case CMD_ROTATE_SINGLE:
				{
					return CMD_ROTATE_SINGLE;
 80018f6:	2306      	movs	r3, #6
 80018f8:	e1e9      	b.n	8001cce <packetRead+0xcde>
				break;

				// Set output
				case CMD_OUTPUT:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d10a      	bne.n	8001916 <packetRead+0x926>
						temp_pointer = 2;
 8001900:	2302      	movs	r3, #2
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->arc_dir = message[temp_pointer];
 8001904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	4413      	add	r3, r2
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	615a      	str	r2, [r3, #20]
						return CMD_OUTPUT;
 8001912:	2307      	movs	r3, #7
 8001914:	e1db      	b.n	8001cce <packetRead+0xcde>
					}else{
						return CMD_ERROR;
 8001916:	2316      	movs	r3, #22
 8001918:	e1d9      	b.n	8001cce <packetRead+0xcde>
				break;

				// Read position
				case CMD_READ_POSITION:
				{
					if(length == 3){ // 1 byte categorize read type + 2 byte define
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	2b03      	cmp	r3, #3
 800191e:	d109      	bne.n	8001934 <packetRead+0x944>
						temp_pointer = 2;
 8001920:	2302      	movs	r3, #2
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
						position_type = message[temp_pointer];
 8001924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	4413      	add	r3, r2
 800192a:	781a      	ldrb	r2, [r3, #0]
 800192c:	4ba6      	ldr	r3, [pc, #664]	; (8001bc8 <packetRead+0xbd8>)
 800192e:	701a      	strb	r2, [r3, #0]
						return CMD_READ_POSITION;
 8001930:	2309      	movs	r3, #9
 8001932:	e1cc      	b.n	8001cce <packetRead+0xcde>
					}else{
						return CMD_ERROR;
 8001934:	2316      	movs	r3, #22
 8001936:	e1ca      	b.n	8001cce <packetRead+0xcde>
				break;			

				// Setting
				case CMD_SETTING:
				{
					if (length == 4){ // 2 byte configure + 2 byte define
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2b04      	cmp	r3, #4
 800193c:	d130      	bne.n	80019a0 <packetRead+0x9b0>
						uint8_t mode_traject;
						uint8_t mode_coordinate;
						temp_pointer = 2;
 800193e:	2302      	movs	r3, #2
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
						mode_coordinate = message[temp_pointer++];
 8001942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001948:	461a      	mov	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4413      	add	r3, r2
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	757b      	strb	r3, [r7, #21]
						mode_traject = message[temp_pointer];
 8001952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	753b      	strb	r3, [r7, #20]

						if (mode_coordinate == DUTY_COORDINATES_ABS) {
 800195c:	7d7b      	ldrb	r3, [r7, #21]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d103      	bne.n	800196a <packetRead+0x97a>
							duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	2200      	movs	r2, #0
 8001966:	731a      	strb	r2, [r3, #12]
 8001968:	e008      	b.n	800197c <packetRead+0x98c>
						} else if (mode_coordinate == DUTY_COORDINATES_REL) {
 800196a:	7d7b      	ldrb	r3, [r7, #21]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d103      	bne.n	8001978 <packetRead+0x988>
							duty_cmd->coordinate_type = DUTY_COORDINATES_REL;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	2201      	movs	r2, #1
 8001974:	731a      	strb	r2, [r3, #12]
 8001976:	e001      	b.n	800197c <packetRead+0x98c>
						} else {
							return CMD_ERROR;
 8001978:	2316      	movs	r3, #22
 800197a:	e1a8      	b.n	8001cce <packetRead+0xcde>
						}

						if (mode_traject == DUTY_TRAJECTORY_LSPB) {
 800197c:	7d3b      	ldrb	r3, [r7, #20]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d103      	bne.n	800198a <packetRead+0x99a>
							duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	2200      	movs	r2, #0
 8001986:	741a      	strb	r2, [r3, #16]
 8001988:	e008      	b.n	800199c <packetRead+0x9ac>
						} else if (mode_traject == DUTY_TRAJECTORY_SCURVE) {
 800198a:	7d3b      	ldrb	r3, [r7, #20]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d103      	bne.n	8001998 <packetRead+0x9a8>
							duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	2201      	movs	r2, #1
 8001994:	741a      	strb	r2, [r3, #16]
 8001996:	e001      	b.n	800199c <packetRead+0x9ac>
						} else {
							return CMD_ERROR;
 8001998:	2316      	movs	r3, #22
 800199a:	e198      	b.n	8001cce <packetRead+0xcde>
						}
						return CMD_SETTING;
 800199c:	230a      	movs	r3, #10
 800199e:	e196      	b.n	8001cce <packetRead+0xcde>
					}else{
						return CMD_ERROR;
 80019a0:	2316      	movs	r3, #22
 80019a2:	e194      	b.n	8001cce <packetRead+0xcde>
				break;

				// Change method
				case CMD_METHOD_CHANGE:
				{
					if(length == 3){ // 1 byte configure + 2 byte define
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d130      	bne.n	8001a0c <packetRead+0xa1c>
						uint8_t method;
						temp_pointer = 2;
 80019aa:	2302      	movs	r3, #2
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
						method = message[temp_pointer];
 80019ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	4413      	add	r3, r2
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	75bb      	strb	r3, [r7, #22]
						if (SCARA_METHOD_MANUAL == method) {
 80019b8:	7dbb      	ldrb	r3, [r7, #22]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d103      	bne.n	80019c6 <packetRead+0x9d6>
							duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	2200      	movs	r2, #0
 80019c2:	705a      	strb	r2, [r3, #1]
 80019c4:	e01d      	b.n	8001a02 <packetRead+0xa12>
						} else if (SCARA_METHOD_SEMI_AUTO == method) {
 80019c6:	7dbb      	ldrb	r3, [r7, #22]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d103      	bne.n	80019d4 <packetRead+0x9e4>
							duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	2201      	movs	r2, #1
 80019d0:	705a      	strb	r2, [r3, #1]
 80019d2:	e016      	b.n	8001a02 <packetRead+0xa12>
						} else if (SCARA_METHOD_GCODE == method) {
 80019d4:	7dbb      	ldrb	r3, [r7, #22]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d103      	bne.n	80019e2 <packetRead+0x9f2>
							duty_cmd->robot_method = SCARA_METHOD_GCODE;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	2202      	movs	r2, #2
 80019de:	705a      	strb	r2, [r3, #1]
 80019e0:	e00f      	b.n	8001a02 <packetRead+0xa12>
						}else if(SCARA_METHOD_TEST == method){
 80019e2:	7dbb      	ldrb	r3, [r7, #22]
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d103      	bne.n	80019f0 <packetRead+0xa00>
							duty_cmd->robot_method = SCARA_METHOD_TEST;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	2203      	movs	r2, #3
 80019ec:	705a      	strb	r2, [r3, #1]
 80019ee:	e008      	b.n	8001a02 <packetRead+0xa12>
						}else if(SCARA_METHOD_PICK_AND_PLACE == method){
 80019f0:	7dbb      	ldrb	r3, [r7, #22]
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d103      	bne.n	80019fe <packetRead+0xa0e>
							duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	2204      	movs	r2, #4
 80019fa:	705a      	strb	r2, [r3, #1]
 80019fc:	e001      	b.n	8001a02 <packetRead+0xa12>
						}else {
							return CMD_ERROR;
 80019fe:	2316      	movs	r3, #22
 8001a00:	e165      	b.n	8001cce <packetRead+0xcde>
						}
						duty_cmd->change_method = TRUE;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]
						return CMD_METHOD_CHANGE;
 8001a08:	230b      	movs	r3, #11
 8001a0a:	e160      	b.n	8001cce <packetRead+0xcde>
					}else{
						return CMD_ERROR;
 8001a0c:	2316      	movs	r3, #22
 8001a0e:	e15e      	b.n	8001cce <packetRead+0xcde>
				break;

				// Set manual key
				case CMD_KEYBOARD:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d10f      	bne.n	8001a36 <packetRead+0xa46>
						int temp_pointer = 2;
 8001a16:	2302      	movs	r3, #2
 8001a18:	61fb      	str	r3, [r7, #28]
						duty_cmd->keyboard = (SCARA_KeyTypeDef)message[temp_pointer];
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	4413      	add	r3, r2
 8001a20:	781a      	ldrb	r2, [r3, #0]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	70da      	strb	r2, [r3, #3]
						duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
						return CMD_KEYBOARD;
 8001a32:	2314      	movs	r3, #20
 8001a34:	e14b      	b.n	8001cce <packetRead+0xcde>
					}else{
						return CMD_ERROR;
 8001a36:	2316      	movs	r3, #22
 8001a38:	e149      	b.n	8001cce <packetRead+0xcde>
				break;

				// Set manual key speed
				case CMD_KEY_SPEED:
				{
					if(length == 3){ // 1 byte key value + 2 byte define
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d116      	bne.n	8001a6e <packetRead+0xa7e>
						int temp_pointer = 2;
 8001a40:	2302      	movs	r3, #2
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
						int32_t speed = (int32_t)message[temp_pointer];
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	4413      	add	r3, r2
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	623b      	str	r3, [r7, #32]
						// check limit
						if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPEED_MAX)) {
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	dd02      	ble.n	8001a5a <packetRead+0xa6a>
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	2b0e      	cmp	r3, #14
 8001a58:	dd01      	ble.n	8001a5e <packetRead+0xa6e>
							return CMD_ERROR;
 8001a5a:	2316      	movs	r3, #22
 8001a5c:	e137      	b.n	8001cce <packetRead+0xcde>
						}
						duty_cmd->key_speed = speed;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	6a3a      	ldr	r2, [r7, #32]
 8001a62:	605a      	str	r2, [r3, #4]
						current_key_speed1 = speed;
 8001a64:	4a59      	ldr	r2, [pc, #356]	; (8001bcc <packetRead+0xbdc>)
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	6013      	str	r3, [r2, #0]
						return CMD_KEY_SPEED;
 8001a6a:	2315      	movs	r3, #21
 8001a6c:	e12f      	b.n	8001cce <packetRead+0xcde>
					}else{
						return CMD_ERROR;
 8001a6e:	2316      	movs	r3, #22
 8001a70:	e12d      	b.n	8001cce <packetRead+0xcde>
				break;

				// Set test mode
				case CMD_MOTOR_TEST:
				{
					if(length == 3){ // 1byte key mode + 2 byte define
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d117      	bne.n	8001aa8 <packetRead+0xab8>
						int temp_pointer = 2;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	61bb      	str	r3, [r7, #24]
						uint8_t test_key = message[temp_pointer];
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	4413      	add	r3, r2
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	75fb      	strb	r3, [r7, #23]
						if(test_key < 0 || test_key > 8){
 8001a86:	7dfb      	ldrb	r3, [r7, #23]
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d901      	bls.n	8001a90 <packetRead+0xaa0>
							return CMD_ERROR;
 8001a8c:	2316      	movs	r3, #22
 8001a8e:	e11e      	b.n	8001cce <packetRead+0xcde>
						}
						duty_cmd->test_key = test_key;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	7dfa      	ldrb	r2, [r7, #23]
 8001a94:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
						duty_cmd->robot_method = SCARA_METHOD_TEST;	
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
						return CMD_MOTOR_TEST;
 8001aa4:	230c      	movs	r3, #12
 8001aa6:	e112      	b.n	8001cce <packetRead+0xcde>
					}else{
						return CMD_ERROR;
 8001aa8:	2316      	movs	r3, #22
 8001aaa:	e110      	b.n	8001cce <packetRead+0xcde>
				}
				break;

				case CMD_OBJECT_DETECTED:
				{
					if (length == 15){ // 3 int32_t number + 1 byte object type + 2 define byte
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	2b0f      	cmp	r3, #15
 8001ab0:	d16a      	bne.n	8001b88 <packetRead+0xb98>
						temp_pointer = -2;
 8001ab2:	f06f 0301 	mvn.w	r3, #1
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->target_point.x = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aba:	3304      	adds	r3, #4
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fd2c 	bl	8000524 <__aeabi_i2d>
 8001acc:	a33c      	add	r3, pc, #240	; (adr r3, 8001bc0 <packetRead+0xbd0>)
 8001ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad2:	f7fe fd91 	bl	80005f8 <__aeabi_dmul>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	6839      	ldr	r1, [r7, #0]
 8001adc:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
						duty_cmd->target_point.y = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fd18 	bl	8000524 <__aeabi_i2d>
 8001af4:	a332      	add	r3, pc, #200	; (adr r3, 8001bc0 <packetRead+0xbd0>)
 8001af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afa:	f7fe fd7d 	bl	80005f8 <__aeabi_dmul>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	6839      	ldr	r1, [r7, #0]
 8001b04:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
						//duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
						duty_cmd->target_point.roll = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	4413      	add	r3, r2
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd04 	bl	8000524 <__aeabi_i2d>
 8001b1c:	a328      	add	r3, pc, #160	; (adr r3, 8001bc0 <packetRead+0xbd0>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe fd69 	bl	80005f8 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	6839      	ldr	r1, [r7, #0]
 8001b2c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
						duty_cmd->target_point.object_type = message[temp_pointer+=4];
 8001b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b32:	3304      	adds	r3, #4
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	781a      	ldrb	r2, [r3, #0]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
						duty_cmd->target_point.t = (double)(TIM2->CNT);
 8001b44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fcda 	bl	8000504 <__aeabi_ui2d>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	6839      	ldr	r1, [r7, #0]
 8001b56:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
						duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	745a      	strb	r2, [r3, #17]
						duty_cmd->path_type = DUTY_PATH_LINE;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	2200      	movs	r2, #0
 8001b64:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	735a      	strb	r2, [r3, #13]
						duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	2200      	movs	r2, #0
 8001b76:	741a      	strb	r2, [r3, #16]
					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
					return CMD_OBJECT_DETECTED;
 8001b84:	2318      	movs	r3, #24
 8001b86:	e0a2      	b.n	8001cce <packetRead+0xcde>
						return CMD_ERROR;
 8001b88:	2316      	movs	r3, #22
 8001b8a:	e0a0      	b.n	8001cce <packetRead+0xcde>
				}
				break;

				case CMD_SETUP_CONVEYOR_SPEED:
				{
					if (length == 6) { // 1 int32_t number + 2 define byte
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d114      	bne.n	8001bbc <packetRead+0xbcc>
						temp_pointer = 2;
 8001b92:	2302      	movs	r3, #2
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
						conveyor_speed = (double)(*(int32_t*)(&message[temp_pointer]))*COR_INVERSE_SCALE;
 8001b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fcc0 	bl	8000524 <__aeabi_i2d>
 8001ba4:	a306      	add	r3, pc, #24	; (adr r3, 8001bc0 <packetRead+0xbd0>)
 8001ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001baa:	f7fe fd25 	bl	80005f8 <__aeabi_dmul>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4907      	ldr	r1, [pc, #28]	; (8001bd0 <packetRead+0xbe0>)
 8001bb4:	e9c1 2300 	strd	r2, r3, [r1]
						return CMD_SETUP_CONVEYOR_SPEED;
 8001bb8:	2319      	movs	r3, #25
 8001bba:	e088      	b.n	8001cce <packetRead+0xcde>
					}else{
						return CMD_ERROR;
 8001bbc:	2316      	movs	r3, #22
 8001bbe:	e086      	b.n	8001cce <packetRead+0xcde>
 8001bc0:	a0000000 	.word	0xa0000000
 8001bc4:	3eb0c6f7 	.word	0x3eb0c6f7
 8001bc8:	2000ab4c 	.word	0x2000ab4c
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	20000ba8 	.word	0x20000ba8
					}
				}
				break;
				case CMD_GCODE_CONFIGURE:
				{
					if(length == 18) { // 4 int32_t number + 2 define byte
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2b12      	cmp	r3, #18
 8001bd8:	d154      	bne.n	8001c84 <packetRead+0xc94>
						temp_pointer = -2;
 8001bda:	f06f 0301 	mvn.w	r3, #1
 8001bde:	62fb      	str	r3, [r7, #44]	; 0x2c
						offset_x = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be2:	3304      	adds	r3, #4
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fc98 	bl	8000524 <__aeabi_i2d>
 8001bf4:	a338      	add	r3, pc, #224	; (adr r3, 8001cd8 <packetRead+0xce8>)
 8001bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfa:	f7fe fcfd 	bl	80005f8 <__aeabi_dmul>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4937      	ldr	r1, [pc, #220]	; (8001ce0 <packetRead+0xcf0>)
 8001c04:	e9c1 2300 	strd	r2, r3, [r1]
						offset_y = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fc84 	bl	8000524 <__aeabi_i2d>
 8001c1c:	a32e      	add	r3, pc, #184	; (adr r3, 8001cd8 <packetRead+0xce8>)
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	f7fe fce9 	bl	80005f8 <__aeabi_dmul>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	492e      	ldr	r1, [pc, #184]	; (8001ce4 <packetRead+0xcf4>)
 8001c2c:	e9c1 2300 	strd	r2, r3, [r1]
						offset_z = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c32:	3304      	adds	r3, #4
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fc70 	bl	8000524 <__aeabi_i2d>
 8001c44:	a324      	add	r3, pc, #144	; (adr r3, 8001cd8 <packetRead+0xce8>)
 8001c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4a:	f7fe fcd5 	bl	80005f8 <__aeabi_dmul>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4925      	ldr	r1, [pc, #148]	; (8001ce8 <packetRead+0xcf8>)
 8001c54:	e9c1 2300 	strd	r2, r3, [r1]
						roll_angle =(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	4413      	add	r3, r2
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fc5c 	bl	8000524 <__aeabi_i2d>
 8001c6c:	a31a      	add	r3, pc, #104	; (adr r3, 8001cd8 <packetRead+0xce8>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	f7fe fcc1 	bl	80005f8 <__aeabi_dmul>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	491c      	ldr	r1, [pc, #112]	; (8001cec <packetRead+0xcfc>)
 8001c7c:	e9c1 2300 	strd	r2, r3, [r1]
						return CMD_GCODE_CONFIGURE;
 8001c80:	2311      	movs	r3, #17
 8001c82:	e024      	b.n	8001cce <packetRead+0xcde>
					}else{
						return CMD_ERROR;
 8001c84:	2316      	movs	r3, #22
 8001c86:	e022      	b.n	8001cce <packetRead+0xcde>
					}
				}
				break;
				case CMD_GCODE_RUN:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RUN;
 8001c94:	2313      	movs	r3, #19
 8001c96:	e01a      	b.n	8001cce <packetRead+0xcde>
				}
				break;
				case CMD_GCODE_STOP:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_STOP;
 8001ca4:	230d      	movs	r3, #13
 8001ca6:	e012      	b.n	8001cce <packetRead+0xcde>
				}
				break;
				case CMD_GCODE_PAUSE:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	2202      	movs	r2, #2
 8001cac:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_PAUSE;
 8001cb4:	230e      	movs	r3, #14
 8001cb6:	e00a      	b.n	8001cce <packetRead+0xcde>
				}
				break;
				case CMD_GCODE_RESUME:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RESUME;
 8001cc4:	2312      	movs	r3, #18
 8001cc6:	e002      	b.n	8001cce <packetRead+0xcde>
				}
				break;
				//Unknow command id
				default:
				{
					return CMD_ERROR;
 8001cc8:	2316      	movs	r3, #22
 8001cca:	e000      	b.n	8001cce <packetRead+0xcde>
        break;

        //unknow protocol id
        default:
        {
            return PROTOCOL_ERROR;
 8001ccc:	2317      	movs	r3, #23
        }
    }
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3730      	adds	r7, #48	; 0x30
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	a0000000 	.word	0xa0000000
 8001cdc:	3eb0c6f7 	.word	0x3eb0c6f7
 8001ce0:	20004d80 	.word	0x20004d80
 8001ce4:	2000ab58 	.word	0x2000ab58
 8001ce8:	2000ab50 	.word	0x2000ab50
 8001cec:	20004d78 	.word	0x20004d78

08001cf0 <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail, int32_t *detail_length) {
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b0e2      	sub	sp, #392	; 0x188
 8001cf6:	af2e      	add	r7, sp, #184	; 0xb8
 8001cf8:	4601      	mov	r1, r0
 8001cfa:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8001cfe:	e880 000c 	stmia.w	r0, {r2, r3}
 8001d02:	460b      	mov	r3, r1
 8001d04:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	2b1a      	cmp	r3, #26
 8001d0a:	f200 81b7 	bhi.w	800207c <commandReply+0x38c>
 8001d0e:	a201      	add	r2, pc, #4	; (adr r2, 8001d14 <commandReply+0x24>)
 8001d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d14:	08001d81 	.word	0x08001d81
 8001d18:	08001d81 	.word	0x08001d81
 8001d1c:	08001d81 	.word	0x08001d81
 8001d20:	08001d81 	.word	0x08001d81
 8001d24:	08001d81 	.word	0x08001d81
 8001d28:	08001d81 	.word	0x08001d81
 8001d2c:	08001d81 	.word	0x08001d81
 8001d30:	08001d89 	.word	0x08001d89
 8001d34:	08001e03 	.word	0x08001e03
 8001d38:	08001e37 	.word	0x08001e37
 8001d3c:	08001ecd 	.word	0x08001ecd
 8001d40:	08001fa9 	.word	0x08001fa9
 8001d44:	08001d81 	.word	0x08001d81
 8001d48:	0800200b 	.word	0x0800200b
 8001d4c:	0800200b 	.word	0x0800200b
 8001d50:	0800200b 	.word	0x0800200b
 8001d54:	0800200b 	.word	0x0800200b
 8001d58:	08001fe9 	.word	0x08001fe9
 8001d5c:	0800200b 	.word	0x0800200b
 8001d60:	0800200b 	.word	0x0800200b
 8001d64:	08002013 	.word	0x08002013
 8001d68:	0800201b 	.word	0x0800201b
 8001d6c:	0800205b 	.word	0x0800205b
 8001d70:	0800207d 	.word	0x0800207d
 8001d74:	08001d81 	.word	0x08001d81
 8001d78:	08001fa1 	.word	0x08001fa1
 8001d7c:	08001fb1 	.word	0x08001fb1
	case CMD_MOTOR_TEST:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_OBJECT_DETECTED:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 8001d80:	2309      	movs	r3, #9
 8001d82:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001d86:	e189      	b.n	800209c <commandReply+0x3ac>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.arc_dir) {
 8001d88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d110      	bne.n	8001db2 <commandReply+0xc2>
				scaraSetOutput(1);
 8001d90:	2001      	movs	r0, #1
 8001d92:	f008 fcd9 	bl	800a748 <scaraSetOutput>
				// strcpy( (char *)detail, "Output ON");
				// detail_length += 9;
				detail[(*detail_length)++] = OUTPUT_ON;
 8001d96:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	1c59      	adds	r1, r3, #1
 8001d9e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001da2:	6011      	str	r1, [r2, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001daa:	4413      	add	r3, r2
 8001dac:	220d      	movs	r2, #13
 8001dae:	701a      	strb	r2, [r3, #0]
 8001db0:	e023      	b.n	8001dfa <commandReply+0x10a>
			} else if (0 == duty_cmd.arc_dir) {
 8001db2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d110      	bne.n	8001ddc <commandReply+0xec>
				scaraSetOutput(0);
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f008 fcc4 	bl	800a748 <scaraSetOutput>
				detail[(*detail_length)++] = OUTPUT_OFF;
 8001dc0:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	1c59      	adds	r1, r3, #1
 8001dc8:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001dcc:	6011      	str	r1, [r2, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001dd4:	4413      	add	r3, r2
 8001dd6:	220e      	movs	r2, #14
 8001dd8:	701a      	strb	r2, [r3, #0]
 8001dda:	e00e      	b.n	8001dfa <commandReply+0x10a>
			} else {
				// strcpy( (char *)detail, "Wrong Value");
				// detail_length += 11;
				detail[(*detail_length)++] = WRONG_OUTPUT_VALUE ;
 8001ddc:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	1c59      	adds	r1, r3, #1
 8001de4:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001de8:	6011      	str	r1, [r2, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001df0:	4413      	add	r3, r2
 8001df2:	220f      	movs	r2, #15
 8001df4:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 8001df6:	2307      	movs	r3, #7
 8001df8:	e152      	b.n	80020a0 <commandReply+0x3b0>
			}
			ret = RPD_OK;
 8001dfa:	2308      	movs	r3, #8
 8001dfc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 8001e00:	e14c      	b.n	800209c <commandReply+0x3ac>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 8001e02:	f008 fd03 	bl	800a80c <scaraGetMode>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			current_state	 = scaraGetDutyState();
 8001e0c:	f008 fd16 	bl	800a83c <scaraGetDutyState>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 8001e16:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d107      	bne.n	8001e2e <commandReply+0x13e>
 8001e1e:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d103      	bne.n	8001e2e <commandReply+0x13e>
				ret = RPD_IDLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 8001e2c:	e136      	b.n	800209c <commandReply+0x3ac>
				ret = RPD_BUSY;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001e34:	e132      	b.n	800209c <commandReply+0x3ac>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			if(position_type == REAL_POSITION_DATA || position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8001e36:	4b9e      	ldr	r3, [pc, #632]	; (80020b0 <commandReply+0x3c0>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <commandReply+0x156>
 8001e3e:	4b9c      	ldr	r3, [pc, #624]	; (80020b0 <commandReply+0x3c0>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d113      	bne.n	8001e6e <commandReply+0x17e>
				lowlayer_readTruePosition(&position);
 8001e46:	f107 0308 	add.w	r3, r7, #8
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 f898 	bl	8004f80 <lowlayer_readTruePosition>
				kinematicForward(&position);
 8001e50:	f107 0308 	add.w	r3, r7, #8
 8001e54:	4618      	mov	r0, r3
 8001e56:	f002 f98f 	bl	8004178 <kinematicForward>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8001e5a:	4b95      	ldr	r3, [pc, #596]	; (80020b0 <commandReply+0x3c0>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d11e      	bne.n	8001ea0 <commandReply+0x1b0>
					scaraUpdatePosition(&position);
 8001e62:	f107 0308 	add.w	r3, r7, #8
 8001e66:	4618      	mov	r0, r3
 8001e68:	f008 fcc0 	bl	800a7ec <scaraUpdatePosition>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8001e6c:	e018      	b.n	8001ea0 <commandReply+0x1b0>
				}
			}else if(position_type == ESTIMATE_POSITION_DATA){
 8001e6e:	4b90      	ldr	r3, [pc, #576]	; (80020b0 <commandReply+0x3c0>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d105      	bne.n	8001e82 <commandReply+0x192>
				scaraGetPosition(&position);
 8001e76:	f107 0308 	add.w	r3, r7, #8
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f008 fca6 	bl	800a7cc <scaraGetPosition>
 8001e80:	e00e      	b.n	8001ea0 <commandReply+0x1b0>
			}else{
				detail[(*detail_length)++] = WRONG_READ_POSITION_TYPE;
 8001e82:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	1c59      	adds	r1, r3, #1
 8001e8a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001e8e:	6011      	str	r1, [r2, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001e96:	4413      	add	r3, r2
 8001e98:	2210      	movs	r2, #16
 8001e9a:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 8001e9c:	2307      	movs	r3, #7
 8001e9e:	e0ff      	b.n	80020a0 <commandReply+0x3b0>
			}
			*detail_length = scaraPosition_packaging(detail, position);
 8001ea0:	4668      	mov	r0, sp
 8001ea2:	f107 0310 	add.w	r3, r7, #16
 8001ea6:	22b8      	movs	r2, #184	; 0xb8
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f014 f901 	bl	80160b0 <memcpy>
 8001eae:	f107 0308 	add.w	r3, r7, #8
 8001eb2:	cb0c      	ldmia	r3, {r2, r3}
 8001eb4:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 8001eb8:	f008 fcf2 	bl	800a8a0 <scaraPosition_packaging>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001ec2:	601a      	str	r2, [r3, #0]
			ret =  RPD_POSITION;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 8001eca:	e0e7      	b.n	800209c <commandReply+0x3ac>
	case CMD_SETTING:
		if ( DUTY_COORDINATES_ABS == duty_cmd.coordinate_type) {
 8001ecc:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10d      	bne.n	8001ef0 <commandReply+0x200>
			// strcpy( (char *)detail, "ABSOLUTE.");
			// detail_length += 9;
			detail[(*detail_length)++] = ABSOLUTE;
 8001ed4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	1c59      	adds	r1, r3, #1
 8001edc:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001ee0:	6011      	str	r1, [r2, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001ee8:	4413      	add	r3, r2
 8001eea:	2211      	movs	r2, #17
 8001eec:	701a      	strb	r2, [r3, #0]
 8001eee:	e020      	b.n	8001f32 <commandReply+0x242>
		} else if ( DUTY_COORDINATES_REL == duty_cmd.coordinate_type) {
 8001ef0:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d10d      	bne.n	8001f14 <commandReply+0x224>
			detail[(*detail_length)++] = RELATIVE;
 8001ef8:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	1c59      	adds	r1, r3, #1
 8001f00:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001f04:	6011      	str	r1, [r2, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001f0c:	4413      	add	r3, r2
 8001f0e:	2212      	movs	r2, #18
 8001f10:	701a      	strb	r2, [r3, #0]
 8001f12:	e00e      	b.n	8001f32 <commandReply+0x242>
		} else {
			detail[(*detail_length)++] = WRONG_COORDINATE;
 8001f14:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	1c59      	adds	r1, r3, #1
 8001f1c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001f20:	6011      	str	r1, [r2, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001f28:	4413      	add	r3, r2
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	701a      	strb	r2, [r3, #0]
			return RPD_ERROR;
 8001f2e:	2307      	movs	r3, #7
 8001f30:	e0b6      	b.n	80020a0 <commandReply+0x3b0>
		}

		if ( DUTY_TRAJECTORY_LSPB == duty_cmd.trajec_type) {
 8001f32:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10d      	bne.n	8001f56 <commandReply+0x266>
			detail[(*detail_length)++] = LSPB;
 8001f3a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	1c59      	adds	r1, r3, #1
 8001f42:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001f46:	6011      	str	r1, [r2, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001f4e:	4413      	add	r3, r2
 8001f50:	2213      	movs	r2, #19
 8001f52:	701a      	strb	r2, [r3, #0]
 8001f54:	e020      	b.n	8001f98 <commandReply+0x2a8>
		} else if ( DUTY_TRAJECTORY_SCURVE == duty_cmd.trajec_type) {
 8001f56:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d10d      	bne.n	8001f7a <commandReply+0x28a>
			detail[(*detail_length)++] = S_CURVE;
 8001f5e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	1c59      	adds	r1, r3, #1
 8001f66:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001f6a:	6011      	str	r1, [r2, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001f72:	4413      	add	r3, r2
 8001f74:	2214      	movs	r2, #20
 8001f76:	701a      	strb	r2, [r3, #0]
 8001f78:	e00e      	b.n	8001f98 <commandReply+0x2a8>
		} else {
			detail[(*detail_length)++] = WRONG_TRAJECTORY_TYPE;
 8001f7a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	1c59      	adds	r1, r3, #1
 8001f82:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001f86:	6011      	str	r1, [r2, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001f8e:	4413      	add	r3, r2
 8001f90:	2205      	movs	r2, #5
 8001f92:	701a      	strb	r2, [r3, #0]
			return RPD_ERROR;
 8001f94:	2307      	movs	r3, #7
 8001f96:	e083      	b.n	80020a0 <commandReply+0x3b0>
		}		
		ret = RPD_OK;
 8001f98:	2308      	movs	r3, #8
 8001f9a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001f9e:	e07d      	b.n	800209c <commandReply+0x3ac>
	case CMD_SETUP_CONVEYOR_SPEED:
		ret = RPD_OK;
 8001fa0:	2308      	movs	r3, #8
 8001fa2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001fa6:	e079      	b.n	800209c <commandReply+0x3ac>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 8001fa8:	2309      	movs	r3, #9
 8001faa:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001fae:	e075      	b.n	800209c <commandReply+0x3ac>
	case CMD_GCODE:{
		if(point_counter == total_num_of_point){
 8001fb0:	4b40      	ldr	r3, [pc, #256]	; (80020b4 <commandReply+0x3c4>)
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b40      	ldr	r3, [pc, #256]	; (80020b8 <commandReply+0x3c8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d110      	bne.n	8001fe0 <commandReply+0x2f0>
			detail[(*detail_length)++] = GCODE_TRANSFER_FINISH;
 8001fbe:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	1c59      	adds	r1, r3, #1
 8001fc6:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001fca:	6011      	str	r1, [r2, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001fd2:	4413      	add	r3, r2
 8001fd4:	221e      	movs	r2, #30
 8001fd6:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 8001fd8:	2308      	movs	r3, #8
 8001fda:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}else{
			ret = RPD_TRANSFER;
		}
	}
	break;
 8001fde:	e05d      	b.n	800209c <commandReply+0x3ac>
			ret = RPD_TRANSFER;
 8001fe0:	230a      	movs	r3, #10
 8001fe2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	break;
 8001fe6:	e059      	b.n	800209c <commandReply+0x3ac>
	case CMD_GCODE_CONFIGURE:
	{
		detail[(*detail_length)++] = GCODE_OFFSET_CONFIGURE;
 8001fe8:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	1c59      	adds	r1, r3, #1
 8001ff0:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001ff4:	6011      	str	r1, [r2, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001ffc:	4413      	add	r3, r2
 8001ffe:	221f      	movs	r2, #31
 8002000:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8002002:	2308      	movs	r3, #8
 8002004:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	break;
 8002008:	e048      	b.n	800209c <commandReply+0x3ac>
	case CMD_GCODE_PAUSE:
	case CMD_JOB_PUSH_MOVE_LINE:
	case CMD_JOB_PUSH_MOVE_JOINT:
	case CMD_GCODE_RESUME:
	case CMD_GCODE_RUN:
		ret = RPD_DUTY;
 800200a:	2309      	movs	r3, #9
 800200c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002010:	e044      	b.n	800209c <commandReply+0x3ac>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 8002012:	2309      	movs	r3, #9
 8002014:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002018:	e040      	b.n	800209c <commandReply+0x3ac>
	case CMD_KEY_SPEED:
		// sprintf((char*) detail, "MANUAL SPEED = %d", duty_cmd.key_speed);
		detail[(*detail_length)++] = MANUAL_SPEED;
 800201a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	1c59      	adds	r1, r3, #1
 8002022:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002026:	6011      	str	r1, [r2, #0]
 8002028:	461a      	mov	r2, r3
 800202a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800202e:	4413      	add	r3, r2
 8002030:	2216      	movs	r2, #22
 8002032:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = (uint8_t)(duty_cmd.key_speed);
 8002034:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002038:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	1c59      	adds	r1, r3, #1
 8002040:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002044:	6011      	str	r1, [r2, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800204c:	4413      	add	r3, r2
 800204e:	b2c2      	uxtb	r2, r0
 8002050:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8002052:	2308      	movs	r3, #8
 8002054:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002058:	e020      	b.n	800209c <commandReply+0x3ac>
	case CMD_ERROR:
		// strcpy( (char *)detail, "Check parameters");
		detail[(*detail_length)++] = CHECK_PARAMETER;
 800205a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	1c59      	adds	r1, r3, #1
 8002062:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002066:	6011      	str	r1, [r2, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800206e:	4413      	add	r3, r2
 8002070:	2215      	movs	r2, #21
 8002072:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 8002074:	2307      	movs	r3, #7
 8002076:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 800207a:	e00f      	b.n	800209c <commandReply+0x3ac>
	default:
		// strcpy( (char *)detail, "Unknown command");
		detail[(*detail_length)++] = UNKNOW_COMMAND;
 800207c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	1c59      	adds	r1, r3, #1
 8002084:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002088:	6011      	str	r1, [r2, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002090:	4413      	add	r3, r2
 8002092:	2217      	movs	r2, #23
 8002094:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 8002096:	2307      	movs	r3, #7
 8002098:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	return ret;
 800209c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	37d0      	adds	r7, #208	; 0xd0
 80020a4:	46bd      	mov	sp, r7
 80020a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020aa:	b002      	add	sp, #8
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	2000ab4c 	.word	0x2000ab4c
 80020b4:	20000ba4 	.word	0x20000ba4
 80020b8:	20004d88 	.word	0x20004d88

080020bc <commandRespond1>:

int32_t				commandRespond1	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										int32_t detail_length,
										char *respond) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	4603      	mov	r3, r0
 80020ca:	73fb      	strb	r3, [r7, #15]
	int32_t out_length = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
	respond[out_length++] = 0x28;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	617a      	str	r2, [r7, #20]
 80020d6:	461a      	mov	r2, r3
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	4413      	add	r3, r2
 80020dc:	2228      	movs	r2, #40	; 0x28
 80020de:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	617a      	str	r2, [r7, #20]
 80020e6:	461a      	mov	r2, r3
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	4413      	add	r3, r2
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = RESPONSE_TRANSMISION;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	617a      	str	r2, [r7, #20]
 80020f6:	461a      	mov	r2, r3
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	4413      	add	r3, r2
 80020fc:	2202      	movs	r2, #2
 80020fe:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = rpd;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	617a      	str	r2, [r7, #20]
 8002106:	461a      	mov	r2, r3
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	4413      	add	r3, r2
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = id_command;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	617a      	str	r2, [r7, #20]
 8002116:	461a      	mov	r2, r3
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	4413      	add	r3, r2
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	701a      	strb	r2, [r3, #0]
	if(detail_length != 0){
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00c      	beq.n	8002142 <commandRespond1+0x86>
		memcpy(&respond[out_length], detail, detail_length);
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	6a3a      	ldr	r2, [r7, #32]
 800212c:	4413      	add	r3, r2
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4618      	mov	r0, r3
 8002134:	f013 ffbc 	bl	80160b0 <memcpy>
		out_length += detail_length;
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	4413      	add	r3, r2
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	e007      	b.n	8002152 <commandRespond1+0x96>
	}else{
		respond[out_length++] = NONE;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	1c5a      	adds	r2, r3, #1
 8002146:	617a      	str	r2, [r7, #20]
 8002148:	461a      	mov	r2, r3
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	4413      	add	r3, r2
 800214e:	2225      	movs	r2, #37	; 0x25
 8002150:	701a      	strb	r2, [r3, #0]
	}
	respond[out_length++] = 0x7d;
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	617a      	str	r2, [r7, #20]
 8002158:	461a      	mov	r2, r3
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	4413      	add	r3, r2
 800215e:	227d      	movs	r2, #125	; 0x7d
 8002160:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0x29;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	617a      	str	r2, [r7, #20]
 8002168:	461a      	mov	r2, r3
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	4413      	add	r3, r2
 800216e:	2229      	movs	r2, #41	; 0x29
 8002170:	701a      	strb	r2, [r3, #0]
	respond[1] = out_length - 2;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	3301      	adds	r3, #1
 800217a:	3a02      	subs	r2, #2
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	701a      	strb	r2, [r3, #0]
	return out_length;
 8002180:	697b      	ldr	r3, [r7, #20]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 800218c:	b580      	push	{r7, lr}
 800218e:	b096      	sub	sp, #88	; 0x58
 8002190:	af02      	add	r7, sp, #8
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 8002198:	887a      	ldrh	r2, [r7, #2]
 800219a:	f107 0008 	add.w	r0, r7, #8
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	4613      	mov	r3, r2
 80021a4:	4a17      	ldr	r2, [pc, #92]	; (8002204 <LOG_REPORT+0x78>)
 80021a6:	213f      	movs	r1, #63	; 0x3f
 80021a8:	f014 feec 	bl	8016f84 <sniprintf>
 80021ac:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 80021ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b4:	d101      	bne.n	80021ba <LOG_REPORT+0x2e>
		return FALSE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e01f      	b.n	80021fa <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 80021ba:	f107 0308 	add.w	r3, r7, #8
 80021be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021c0:	4619      	mov	r1, r3
 80021c2:	4811      	ldr	r0, [pc, #68]	; (8002208 <LOG_REPORT+0x7c>)
 80021c4:	f002 fc01 	bl	80049ca <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 80021c8:	4810      	ldr	r0, [pc, #64]	; (800220c <LOG_REPORT+0x80>)
 80021ca:	f009 fec7 	bl	800bf5c <HAL_DMA_GetState>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d101      	bne.n	80021d8 <LOG_REPORT+0x4c>
		return TRUE;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e010      	b.n	80021fa <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 80021d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021dc:	490c      	ldr	r1, [pc, #48]	; (8002210 <LOG_REPORT+0x84>)
 80021de:	480a      	ldr	r0, [pc, #40]	; (8002208 <LOG_REPORT+0x7c>)
 80021e0:	f002 fc1b 	bl	8004a1a <ringBuff_PopArray>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 80021ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80021ee:	461a      	mov	r2, r3
 80021f0:	4907      	ldr	r1, [pc, #28]	; (8002210 <LOG_REPORT+0x84>)
 80021f2:	4808      	ldr	r0, [pc, #32]	; (8002214 <LOG_REPORT+0x88>)
 80021f4:	f00c fc4e 	bl	800ea94 <HAL_UART_Transmit_DMA>
	return TRUE;
 80021f8:	2301      	movs	r3, #1
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3750      	adds	r7, #80	; 0x50
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	0801c360 	.word	0x0801c360
 8002208:	20000410 	.word	0x20000410
 800220c:	2000bc30 	.word	0x2000bc30
 8002210:	2000ab60 	.word	0x2000ab60
 8002214:	2000bbf0 	.word	0x2000bbf0

08002218 <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_length, uint8_t*data_packet) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]

	int32_t data_length = in_length - 2;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	3b02      	subs	r3, #2
 8002228:	617b      	str	r3, [r7, #20]
	//check packet length
	if(message_buff[1] == data_length && backup_available == 0){
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	3301      	adds	r3, #1
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4293      	cmp	r3, r2
 8002236:	d119      	bne.n	800226c <unPackPayload+0x54>
 8002238:	4b2e      	ldr	r3, [pc, #184]	; (80022f4 <unPackPayload+0xdc>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d115      	bne.n	800226c <unPackPayload+0x54>
		// check minimum lenght
		if (in_length < MIN_MESSAGE_LENGHT) {
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b03      	cmp	r3, #3
 8002244:	dc02      	bgt.n	800224c <unPackPayload+0x34>
			return -1;
 8002246:	f04f 33ff 	mov.w	r3, #4294967295
 800224a:	e04f      	b.n	80022ec <unPackPayload+0xd4>
		}

		// check start char
		if(message_buff[0] != START_CHAR){
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b28      	cmp	r3, #40	; 0x28
 8002252:	d002      	beq.n	800225a <unPackPayload+0x42>
			return -1;
 8002254:	f04f 33ff 	mov.w	r3, #4294967295
 8002258:	e048      	b.n	80022ec <unPackPayload+0xd4>
		}
		memcpy(data_packet, &message_buff[2], data_length - RECEIVE_END_LENGTH);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1c99      	adds	r1, r3, #2
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	3b02      	subs	r3, #2
 8002262:	461a      	mov	r2, r3
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f013 ff23 	bl	80160b0 <memcpy>
 800226a:	e03d      	b.n	80022e8 <unPackPayload+0xd0>
	}else if(message_buff[1] != data_length && backup_available == 0){
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	3301      	adds	r3, #1
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	4293      	cmp	r3, r2
 8002278:	d01b      	beq.n	80022b2 <unPackPayload+0x9a>
 800227a:	4b1e      	ldr	r3, [pc, #120]	; (80022f4 <unPackPayload+0xdc>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d117      	bne.n	80022b2 <unPackPayload+0x9a>
		backup_available = 1;
 8002282:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <unPackPayload+0xdc>)
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]
		// check start char
		if(message_buff[0] != START_CHAR){
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b28      	cmp	r3, #40	; 0x28
 800228e:	d002      	beq.n	8002296 <unPackPayload+0x7e>
			return -1;
 8002290:	f04f 33ff 	mov.w	r3, #4294967295
 8002294:	e02a      	b.n	80022ec <unPackPayload+0xd4>
		}
		memcpy(data_packet, &message_buff[2], data_length);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3302      	adds	r3, #2
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4619      	mov	r1, r3
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f013 ff06 	bl	80160b0 <memcpy>
		backup_length = data_length;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <unPackPayload+0xe0>)
 80022aa:	701a      	strb	r2, [r3, #0]
		return - 1;
 80022ac:	f04f 33ff 	mov.w	r3, #4294967295
 80022b0:	e01c      	b.n	80022ec <unPackPayload+0xd4>
	}else if(backup_available == 1){
 80022b2:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <unPackPayload+0xdc>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d113      	bne.n	80022e2 <unPackPayload+0xca>
		backup_available = 0;
 80022ba:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <unPackPayload+0xdc>)
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
		memcpy(&data_packet[backup_length], message_buff, in_length);
 80022c0:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <unPackPayload+0xe0>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	68f9      	ldr	r1, [r7, #12]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f013 feee 	bl	80160b0 <memcpy>
		data_length = backup_length + in_length;
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <unPackPayload+0xe0>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	4413      	add	r3, r2
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	e002      	b.n	80022e8 <unPackPayload+0xd0>
	}else{
		return - 1;
 80022e2:	f04f 33ff 	mov.w	r3, #4294967295
 80022e6:	e001      	b.n	80022ec <unPackPayload+0xd4>
	}


	return data_length - RECEIVE_END_LENGTH;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	3b02      	subs	r3, #2
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	2000ac60 	.word	0x2000ac60
 80022f8:	2000ac61 	.word	0x2000ac61

080022fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	607b      	str	r3, [r7, #4]
 8002306:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <MX_DMA_Init+0x3c>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a0b      	ldr	r2, [pc, #44]	; (8002338 <MX_DMA_Init+0x3c>)
 800230c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b09      	ldr	r3, [pc, #36]	; (8002338 <MX_DMA_Init+0x3c>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800231a:	607b      	str	r3, [r7, #4]
 800231c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	2105      	movs	r1, #5
 8002322:	200f      	movs	r0, #15
 8002324:	f009 fb3e 	bl	800b9a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002328:	200f      	movs	r0, #15
 800232a:	f009 fb57 	bl	800b9dc <HAL_NVIC_EnableIRQ>

}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800

0800233c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4a07      	ldr	r2, [pc, #28]	; (8002368 <vApplicationGetIdleTaskMemory+0x2c>)
 800234c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	4a06      	ldr	r2, [pc, #24]	; (800236c <vApplicationGetIdleTaskMemory+0x30>)
 8002352:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f44f 7280 	mov.w	r2, #256	; 0x100
 800235a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	20000bb0 	.word	0x20000bb0
 800236c:	20000c04 	.word	0x20000c04

08002370 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002370:	b5b0      	push	{r4, r5, r7, lr}
 8002372:	b094      	sub	sp, #80	; 0x50
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 8002376:	2300      	movs	r3, #0
 8002378:	64bb      	str	r3, [r7, #72]	; 0x48
 800237a:	2300      	movs	r3, #0
 800237c:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 800237e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002382:	4618      	mov	r0, r3
 8002384:	f010 fb92 	bl	8012aac <osMutexCreate>
 8002388:	4603      	mov	r3, r0
 800238a:	4a1d      	ldr	r2, [pc, #116]	; (8002400 <MX_FREERTOS_Init+0x90>)
 800238c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 800238e:	2301      	movs	r3, #1
 8002390:	63bb      	str	r3, [r7, #56]	; 0x38
 8002392:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002398:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800239c:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 800239e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023a2:	2100      	movs	r1, #0
 80023a4:	4618      	mov	r0, r3
 80023a6:	f010 fc99 	bl	8012cdc <osMailCreate>
 80023aa:	4603      	mov	r3, r0
 80023ac:	4a15      	ldr	r2, [pc, #84]	; (8002404 <MX_FREERTOS_Init+0x94>)
 80023ae:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2048);
 80023b0:	4b15      	ldr	r3, [pc, #84]	; (8002408 <MX_FREERTOS_Init+0x98>)
 80023b2:	f107 041c 	add.w	r4, r7, #28
 80023b6:	461d      	mov	r5, r3
 80023b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80023c4:	f107 031c 	add.w	r3, r7, #28
 80023c8:	2100      	movs	r1, #0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f010 fa81 	bl	80128d2 <osThreadCreate>
 80023d0:	4603      	mov	r3, r0
 80023d2:	4a0e      	ldr	r2, [pc, #56]	; (800240c <MX_FREERTOS_Init+0x9c>)
 80023d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 80023d6:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <MX_FREERTOS_Init+0xa0>)
 80023d8:	463c      	mov	r4, r7
 80023da:	461d      	mov	r5, r3
 80023dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 80023e8:	463b      	mov	r3, r7
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f010 fa70 	bl	80128d2 <osThreadCreate>
 80023f2:	4603      	mov	r3, r0
 80023f4:	4a07      	ldr	r2, [pc, #28]	; (8002414 <MX_FREERTOS_Init+0xa4>)
 80023f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80023f8:	bf00      	nop
 80023fa:	3750      	adds	r7, #80	; 0x50
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002400:	2000ac68 	.word	0x2000ac68
 8002404:	2000ac6c 	.word	0x2000ac6c
 8002408:	0801c38c 	.word	0x0801c38c
 800240c:	2000ac64 	.word	0x2000ac64
 8002410:	0801c3a8 	.word	0x0801c3a8
 8002414:	2000ac70 	.word	0x2000ac70

08002418 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800241a:	f6ad 3d14 	subw	sp, sp, #2836	; 0xb14
 800241e:	af6c      	add	r7, sp, #432	; 0x1b0
 8002420:	f107 031c 	add.w	r3, r7, #28
 8002424:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002426:	f013 f8b9 	bl	801559c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 800242a:	2201      	movs	r2, #1
 800242c:	2110      	movs	r1, #16
 800242e:	48d0      	ldr	r0, [pc, #832]	; (8002770 <StartDefaultTask+0x358>)
 8002430:	f00a f81e 	bl	800c470 <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 8002434:	2300      	movs	r3, #0
 8002436:	f887 395f 	strb.w	r3, [r7, #2399]	; 0x95f
  int32_t					current_key_speed;
  double						run_time;

  SCARA_Pick_And_Place_Package Object[8];
  SCARA_Pick_And_Place_State  operation_state;
  uint8_t object_tail_pointer = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	f887 393e 	strb.w	r3, [r7, #2366]	; 0x93e
  uint8_t object_head_pointer = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	f887 393d 	strb.w	r3, [r7, #2365]	; 0x93d
  double state_time = 0;
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8002452:	e9c1 2300 	strd	r2, r3, [r1]
  int run_point = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
  const SCARA_Slot_TypeDef SLot_Cordinate[NUM_OF_OBJECT] = {
 800245c:	f107 0320 	add.w	r3, r7, #32
 8002460:	4ac4      	ldr	r2, [pc, #784]	; (8002774 <StartDefaultTask+0x35c>)
 8002462:	4618      	mov	r0, r3
 8002464:	4611      	mov	r1, r2
 8002466:	2390      	movs	r3, #144	; 0x90
 8002468:	461a      	mov	r2, r3
 800246a:	f013 fe21 	bl	80160b0 <memcpy>
  		{203.859f, -101.616f, 0.0f} ,
		{203.859f, -101.616f, 0.0f} ,
		{203.859f, -101.616f, 0.0f}
  };

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 800246e:	21e7      	movs	r1, #231	; 0xe7
 8002470:	48c1      	ldr	r0, [pc, #772]	; (8002778 <StartDefaultTask+0x360>)
 8002472:	f7ff fe8b 	bl	800218c <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 8002476:	f008 f9d5 	bl	800a824 <scaraGetMethod>
 800247a:	4603      	mov	r3, r0
 800247c:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
  current_mode	 = scaraGetMode();
 8002480:	f008 f9c4 	bl	800a80c <scaraGetMode>
 8002484:	4603      	mov	r3, r0
 8002486:	f887 3956 	strb.w	r3, [r7, #2390]	; 0x956
  current_duty_state	 = scaraGetDutyState();
 800248a:	f008 f9d7 	bl	800a83c <scaraGetDutyState>
 800248e:	4603      	mov	r3, r0
 8002490:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955

  // Start up robot
  scaraStartup();
 8002494:	f003 fa90 	bl	80059b8 <scaraStartup>
  osDelay(10);
 8002498:	200a      	movs	r0, #10
 800249a:	f010 fa66 	bl	801296a <osDelay>
//   positionNext.Theta2 = PI/3;
//   positionNext.D3 = 10;
//   positionNext.Theta4 = 0;
//   positionNext.t = 0;

  positionNext.Theta1 = -1.48267f;
 800249e:	49b7      	ldr	r1, [pc, #732]	; (800277c <StartDefaultTask+0x364>)
 80024a0:	a3ab      	add	r3, pc, #684	; (adr r3, 8002750 <StartDefaultTask+0x338>)
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
  positionNext.Theta2 = 2.35575f;
 80024aa:	49b4      	ldr	r1, [pc, #720]	; (800277c <StartDefaultTask+0x364>)
 80024ac:	a3aa      	add	r3, pc, #680	; (adr r3, 8002758 <StartDefaultTask+0x340>)
 80024ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b2:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
  positionNext.D3 = 0.034999;
 80024b6:	49b1      	ldr	r1, [pc, #708]	; (800277c <StartDefaultTask+0x364>)
 80024b8:	a3a9      	add	r3, pc, #676	; (adr r3, 8002760 <StartDefaultTask+0x348>)
 80024ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024be:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
  positionNext.Theta4 = 2.96586;
 80024c2:	49ae      	ldr	r1, [pc, #696]	; (800277c <StartDefaultTask+0x364>)
 80024c4:	a3a8      	add	r3, pc, #672	; (adr r3, 8002768 <StartDefaultTask+0x350>)
 80024c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ca:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
  positionNext.t = 0;
 80024ce:	49ab      	ldr	r1, [pc, #684]	; (800277c <StartDefaultTask+0x364>)
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

  kinematicForward(&positionNext);
 80024dc:	48a7      	ldr	r0, [pc, #668]	; (800277c <StartDefaultTask+0x364>)
 80024de:	f001 fe4b 	bl	8004178 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 80024e2:	48a7      	ldr	r0, [pc, #668]	; (8002780 <StartDefaultTask+0x368>)
 80024e4:	f00b fea5 	bl	800e232 <HAL_TIM_Base_Start_IT>

  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 80024e8:	f107 0308 	add.w	r3, r7, #8
 80024ec:	f04f 32ff 	mov.w	r2, #4294967295
 80024f0:	2101      	movs	r1, #1
 80024f2:	4618      	mov	r0, r3
 80024f4:	f010 fa8e 	bl	8012a14 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
	  respond_packed_lenght = 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
	  infor_lenght			= 0;
 8002504:	2300      	movs	r3, #0
 8002506:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
	  infor_packed_lenght	= 0;
 800250a:	2300      	movs	r3, #0
 800250c:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
	  task_usb_lenght		= 0;
 8002510:	2300      	movs	r3, #0
 8002512:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
	  usb_lenght			= 0;
 8002516:	2300      	movs	r3, #0
 8002518:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
	  total_respond_length  = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
	  detail_ptr 			= 0;
 8002522:	2300      	movs	r3, #0
 8002524:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8002528:	4a96      	ldr	r2, [pc, #600]	; (8002784 <StartDefaultTask+0x36c>)
 800252a:	4b97      	ldr	r3, [pc, #604]	; (8002788 <StartDefaultTask+0x370>)
 800252c:	4610      	mov	r0, r2
 800252e:	4619      	mov	r1, r3
 8002530:	23c0      	movs	r3, #192	; 0xc0
 8002532:	461a      	mov	r2, r3
 8002534:	f013 fdbc 	bl	80160b0 <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 8002538:	4a93      	ldr	r2, [pc, #588]	; (8002788 <StartDefaultTask+0x370>)
 800253a:	4b90      	ldr	r3, [pc, #576]	; (800277c <StartDefaultTask+0x364>)
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
 8002540:	23c0      	movs	r3, #192	; 0xc0
 8002542:	461a      	mov	r2, r3
 8002544:	f013 fdb4 	bl	80160b0 <memcpy>
//		  positionTrue.q = positionCurrent.q;
//	  }
//#endif
	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 8002548:	4b90      	ldr	r3, [pc, #576]	; (800278c <StartDefaultTask+0x374>)
 800254a:	6819      	ldr	r1, [r3, #0]
 800254c:	f607 03ec 	addw	r3, r7, #2284	; 0x8ec
 8002550:	2200      	movs	r2, #0
 8002552:	4618      	mov	r0, r3
 8002554:	f010 fc6e 	bl	8012e34 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 8002558:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 800255c:	2b20      	cmp	r3, #32
 800255e:	d116      	bne.n	800258e <StartDefaultTask+0x176>
		   dataMail = ret_mail.value.p;
 8002560:	f8d7 38f0 	ldr.w	r3, [r7, #2288]	; 0x8f0
 8002564:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 8002568:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800256c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8002570:	f8d7 1908 	ldr.w	r1, [r7, #2312]	; 0x908
 8002574:	4618      	mov	r0, r3
 8002576:	f013 fd9b 	bl	80160b0 <memcpy>
		   isNewDuty = TRUE;
 800257a:	2301      	movs	r3, #1
 800257c:	f887 395f 	strb.w	r3, [r7, #2399]	; 0x95f
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 8002580:	4b82      	ldr	r3, [pc, #520]	; (800278c <StartDefaultTask+0x374>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f8d7 1908 	ldr.w	r1, [r7, #2312]	; 0x908
 8002588:	4618      	mov	r0, r3
 800258a:	f010 fcc7 	bl	8012f1c <osMailFree>
	  }
	  if(isNewDuty) {
 800258e:	f897 395f 	ldrb.w	r3, [r7, #2399]	; 0x95f
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 836a 	beq.w	8002c6c <StartDefaultTask+0x854>
		  //memset(respond, 0, 40);
		  // Check change method
		  if (duty_cmd.change_method == TRUE) {
 8002598:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	f040 80f6 	bne.w	8002790 <StartDefaultTask+0x378>
			  //free(Object);
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 80025a4:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80025a8:	785b      	ldrb	r3, [r3, #1]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d122      	bne.n	80025f4 <StartDefaultTask+0x1dc>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
				  current_duty_state = SCARA_DUTY_STATE_READY;
 80025b4:	2300      	movs	r3, #0
 80025b6:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed MANUAL Method",
				// 								(char *)respond);
				detail_array[0] = MANUAL_METHOD;
 80025ba:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80025be:	2218      	movs	r2, #24
 80025c0:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80025c2:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80025c6:	6899      	ldr	r1, [r3, #8]
 80025c8:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80025cc:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80025d0:	4413      	add	r3, r2
 80025d2:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	2301      	movs	r3, #1
 80025da:	2008      	movs	r0, #8
 80025dc:	f7ff fd6e 	bl	80020bc <commandRespond1>
 80025e0:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				total_respond_length += respond_lenght;
 80025e4:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 80025e8:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80025ec:	4413      	add	r3, r2
 80025ee:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 80025f2:	e338      	b.n	8002c66 <StartDefaultTask+0x84e>
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 80025f4:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80025f8:	785b      	ldrb	r3, [r3, #1]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d122      	bne.n	8002644 <StartDefaultTask+0x22c>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 80025fe:	2301      	movs	r3, #1
 8002600:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002604:	2300      	movs	r3, #0
 8002606:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed SEMI AUTO Method",
				// 								(char *)respond);
				detail_array[0] = SEMI_AUTO_METHOD;
 800260a:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800260e:	2219      	movs	r2, #25
 8002610:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002612:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002616:	6899      	ldr	r1, [r3, #8]
 8002618:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 800261c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002620:	4413      	add	r3, r2
 8002622:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	2301      	movs	r3, #1
 800262a:	2008      	movs	r0, #8
 800262c:	f7ff fd46 	bl	80020bc <commandRespond1>
 8002630:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				total_respond_length += respond_lenght;
 8002634:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002638:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800263c:	4413      	add	r3, r2
 800263e:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 8002642:	e310      	b.n	8002c66 <StartDefaultTask+0x84e>
			  } else if (SCARA_METHOD_GCODE == duty_cmd.robot_method) {
 8002644:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002648:	785b      	ldrb	r3, [r3, #1]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d122      	bne.n	8002694 <StartDefaultTask+0x27c>
//				  }
//				  testing_array = (double*)malloc(2*sizeof(double));
//				  if(testing_array == NULL){
//					  int t = 2;
//				  }
				  current_duty_state = SCARA_DUTY_STATE_READY;
 800264e:	2300      	movs	r3, #0
 8002650:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  current_method = SCARA_METHOD_GCODE;
 8002654:	2302      	movs	r3, #2
 8002656:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed AUTO Method",
				// 								(char *)respond);
				detail_array[0] = AUTO_METHOD;
 800265a:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800265e:	221a      	movs	r2, #26
 8002660:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002662:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002666:	6899      	ldr	r1, [r3, #8]
 8002668:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 800266c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002670:	4413      	add	r3, r2
 8002672:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	2301      	movs	r3, #1
 800267a:	2008      	movs	r0, #8
 800267c:	f7ff fd1e 	bl	80020bc <commandRespond1>
 8002680:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				total_respond_length += respond_lenght;
 8002684:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002688:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800268c:	4413      	add	r3, r2
 800268e:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 8002692:	e2e8      	b.n	8002c66 <StartDefaultTask+0x84e>
			  }else if(SCARA_METHOD_TEST == duty_cmd.robot_method){
 8002694:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002698:	785b      	ldrb	r3, [r3, #1]
 800269a:	2b03      	cmp	r3, #3
 800269c:	d12f      	bne.n	80026fe <StartDefaultTask+0x2e6>
				  test_value[0] = 0;
 800269e:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
				  test_value[1] = 0;
 80026a6:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80026aa:	2200      	movs	r2, #0
 80026ac:	705a      	strb	r2, [r3, #1]
				  test_value[2] = 0;
 80026ae:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80026b2:	2200      	movs	r2, #0
 80026b4:	709a      	strb	r2, [r3, #2]
				  test_value[3] = 0;
 80026b6:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80026ba:	2200      	movs	r2, #0
 80026bc:	70da      	strb	r2, [r3, #3]
				  current_method = SCARA_METHOD_TEST;
 80026be:	2303      	movs	r3, #3
 80026c0:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
				  detail_array[0] = TEST_METHOD;
 80026c4:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80026c8:	221b      	movs	r2, #27
 80026ca:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80026cc:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80026d0:	6899      	ldr	r1, [r3, #8]
 80026d2:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80026d6:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80026da:	4413      	add	r3, r2
 80026dc:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	2301      	movs	r3, #1
 80026e4:	2008      	movs	r0, #8
 80026e6:	f7ff fce9 	bl	80020bc <commandRespond1>
 80026ea:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				  total_respond_length += respond_lenght;
 80026ee:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 80026f2:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80026f6:	4413      	add	r3, r2
 80026f8:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 80026fc:	e2b3      	b.n	8002c66 <StartDefaultTask+0x84e>
			  }else if(SCARA_METHOD_PICK_AND_PLACE == duty_cmd.robot_method){
 80026fe:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002702:	785b      	ldrb	r3, [r3, #1]
 8002704:	2b04      	cmp	r3, #4
 8002706:	f040 82ae 	bne.w	8002c66 <StartDefaultTask+0x84e>
				  current_method = SCARA_METHOD_PICK_AND_PLACE;
 800270a:	2304      	movs	r3, #4
 800270c:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
				  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002710:	2301      	movs	r3, #1
 8002712:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  detail_array[0] = PICK_AND_PLACE_METHOD;
 8002716:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800271a:	221c      	movs	r2, #28
 800271c:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800271e:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002722:	6899      	ldr	r1, [r3, #8]
 8002724:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002728:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800272c:	4413      	add	r3, r2
 800272e:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	2301      	movs	r3, #1
 8002736:	2008      	movs	r0, #8
 8002738:	f7ff fcc0 	bl	80020bc <commandRespond1>
 800273c:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				  total_respond_length += respond_lenght;
 8002740:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002744:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002748:	4413      	add	r3, r2
 800274a:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 800274e:	e28a      	b.n	8002c66 <StartDefaultTask+0x84e>
 8002750:	20000000 	.word	0x20000000
 8002754:	bff7b904 	.word	0xbff7b904
 8002758:	80000000 	.word	0x80000000
 800275c:	4002d893 	.word	0x4002d893
 8002760:	90c91080 	.word	0x90c91080
 8002764:	3fa1eb63 	.word	0x3fa1eb63
 8002768:	cec41dd2 	.word	0xcec41dd2
 800276c:	4007ba14 	.word	0x4007ba14
 8002770:	40020400 	.word	0x40020400
 8002774:	0801c4a8 	.word	0x0801c4a8
 8002778:	0801c3c4 	.word	0x0801c3c4
 800277c:	2000ba70 	.word	0x2000ba70
 8002780:	2000bbb0 	.word	0x2000bbb0
 8002784:	2000b770 	.word	0x2000b770
 8002788:	2000b8f0 	.word	0x2000b8f0
 800278c:	2000ac6c 	.word	0x2000ac6c
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 8002790:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002794:	785b      	ldrb	r3, [r3, #1]
 8002796:	f897 2957 	ldrb.w	r2, [r7, #2391]	; 0x957
 800279a:	429a      	cmp	r2, r3
 800279c:	f040 8243 	bne.w	8002c26 <StartDefaultTask+0x80e>
				  	  switch( duty_cmd.robot_method) {
 80027a0:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80027a4:	785b      	ldrb	r3, [r3, #1]
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	f200 8237 	bhi.w	8002c1a <StartDefaultTask+0x802>
 80027ac:	a201      	add	r2, pc, #4	; (adr r2, 80027b4 <StartDefaultTask+0x39c>)
 80027ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b2:	bf00      	nop
 80027b4:	080027c9 	.word	0x080027c9
 80027b8:	0800281f 	.word	0x0800281f
 80027bc:	08002af9 	.word	0x08002af9
 80027c0:	080029e1 	.word	0x080029e1
 80027c4:	08002b81 	.word	0x08002b81
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 80027c8:	f897 3953 	ldrb.w	r3, [r7, #2387]	; 0x953
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10d      	bne.n	80027ec <StartDefaultTask+0x3d4>
				  			  current_key = duty_cmd.keyboard;
 80027d0:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80027d4:	78db      	ldrb	r3, [r3, #3]
 80027d6:	f887 3952 	strb.w	r3, [r7, #2386]	; 0x952
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 80027da:	2301      	movs	r3, #1
 80027dc:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
				  			  current_key_speed = duty_cmd.key_speed;
 80027e0:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 80027ea:	e239      	b.n	8002c60 <StartDefaultTask+0x848>
				  		  } else if (current_key == duty_cmd.keyboard
 80027ec:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80027f0:	78db      	ldrb	r3, [r3, #3]
 80027f2:	f897 2952 	ldrb.w	r2, [r7, #2386]	; 0x952
 80027f6:	429a      	cmp	r2, r3
 80027f8:	f040 8232 	bne.w	8002c60 <StartDefaultTask+0x848>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 80027fc:	f897 3953 	ldrb.w	r3, [r7, #2387]	; 0x953
 8002800:	2b02      	cmp	r3, #2
 8002802:	f040 822d 	bne.w	8002c60 <StartDefaultTask+0x848>
									  && current_key_speed == duty_cmd.key_speed) {
 8002806:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f8d7 294c 	ldr.w	r2, [r7, #2380]	; 0x94c
 8002810:	429a      	cmp	r2, r3
 8002812:	f040 8225 	bne.w	8002c60 <StartDefaultTask+0x848>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 8002816:	2301      	movs	r3, #1
 8002818:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
				  	  break;
 800281c:	e220      	b.n	8002c60 <StartDefaultTask+0x848>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 800281e:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002822:	789b      	ldrb	r3, [r3, #2]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d079      	beq.n	800291c <StartDefaultTask+0x504>
 8002828:	2b02      	cmp	r3, #2
 800282a:	f300 80d2 	bgt.w	80029d2 <StartDefaultTask+0x5ba>
 800282e:	2b00      	cmp	r3, #0
 8002830:	d002      	beq.n	8002838 <StartDefaultTask+0x420>
 8002832:	2b01      	cmp	r3, #1
 8002834:	d025      	beq.n	8002882 <StartDefaultTask+0x46a>
 8002836:	e0cc      	b.n	80029d2 <StartDefaultTask+0x5ba>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 8002838:	2300      	movs	r3, #0
 800283a:	f887 3956 	strb.w	r3, [r7, #2390]	; 0x956
								//   respond_lenght = commandRespond(RPD_OK,
								// 								  duty_cmd.id_command,
								// 								  "Stop Now",
								// 								  (char *)respond);
								detail_array[0] = STOP_NOW;
 800283e:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002842:	2220      	movs	r2, #32
 8002844:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002846:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800284a:	6899      	ldr	r1, [r3, #8]
 800284c:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002850:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002854:	4413      	add	r3, r2
 8002856:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	2301      	movs	r3, #1
 800285e:	2008      	movs	r0, #8
 8002860:	f7ff fc2c 	bl	80020bc <commandRespond1>
 8002864:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
								total_respond_length += respond_lenght;
 8002868:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 800286c:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002870:	4413      	add	r3, r2
 8002872:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 8002876:	f240 117f 	movw	r1, #383	; 0x17f
 800287a:	48bb      	ldr	r0, [pc, #748]	; (8002b68 <StartDefaultTask+0x750>)
 800287c:	f7ff fc86 	bl	800218c <LOG_REPORT>
							  }
							  break;
 8002880:	e0ad      	b.n	80029de <StartDefaultTask+0x5c6>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002882:	f897 3956 	ldrb.w	r3, [r7, #2390]	; 0x956
 8002886:	2b02      	cmp	r3, #2
 8002888:	d126      	bne.n	80028d8 <StartDefaultTask+0x4c0>
 800288a:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 800288e:	2b00      	cmp	r3, #0
 8002890:	d122      	bne.n	80028d8 <StartDefaultTask+0x4c0>
									  current_mode = SCARA_MODE_SCAN;
 8002892:	2301      	movs	r3, #1
 8002894:	f887 3956 	strb.w	r3, [r7, #2390]	; 0x956
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 8002898:	2300      	movs	r3, #0
 800289a:	f887 3954 	strb.w	r3, [r7, #2388]	; 0x954
									//   respond_lenght = commandRespond(RPD_OK,
									// 								  duty_cmd.id_command,
									// 								  "Start Scan",
									// 								  (char *)respond);
									detail_array[0] = START_SCAN;
 800289e:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80028a2:	2221      	movs	r2, #33	; 0x21
 80028a4:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80028a6:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80028aa:	6899      	ldr	r1, [r3, #8]
 80028ac:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80028b0:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80028b4:	4413      	add	r3, r2
 80028b6:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	2301      	movs	r3, #1
 80028be:	2008      	movs	r0, #8
 80028c0:	f7ff fbfc 	bl	80020bc <commandRespond1>
 80028c4:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
									total_respond_length += respond_lenght;
 80028c8:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 80028cc:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80028d0:	4413      	add	r3, r2
 80028d2:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
									total_respond_length += respond_lenght;
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 80028d6:	e082      	b.n	80029de <StartDefaultTask+0x5c6>
									detail_array[0] = BUSY;
 80028d8:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80028dc:	2222      	movs	r2, #34	; 0x22
 80028de:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80028e0:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80028e4:	6899      	ldr	r1, [r3, #8]
 80028e6:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80028ea:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80028ee:	4413      	add	r3, r2
 80028f0:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	2301      	movs	r3, #1
 80028f8:	2007      	movs	r0, #7
 80028fa:	f7ff fbdf 	bl	80020bc <commandRespond1>
 80028fe:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
									total_respond_length += respond_lenght;
 8002902:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002906:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800290a:	4413      	add	r3, r2
 800290c:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 8002910:	f240 1197 	movw	r1, #407	; 0x197
 8002914:	4895      	ldr	r0, [pc, #596]	; (8002b6c <StartDefaultTask+0x754>)
 8002916:	f7ff fc39 	bl	800218c <LOG_REPORT>
							  break;
 800291a:	e060      	b.n	80029de <StartDefaultTask+0x5c6>

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 800291c:	f897 3956 	ldrb.w	r3, [r7, #2390]	; 0x956
 8002920:	2b02      	cmp	r3, #2
 8002922:	d133      	bne.n	800298c <StartDefaultTask+0x574>
 8002924:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 8002928:	2b00      	cmp	r3, #0
 800292a:	d12f      	bne.n	800298c <StartDefaultTask+0x574>
									  scaraSetScanFlag();
 800292c:	f007 ff00 	bl	800a730 <scaraSetScanFlag>
//									  if(duty_cmd.modeInit_type == DUTY_MODE_INIT_LINEAR){
//										  current_method = SCARA_METHOD_AUTO;
//									  }
									  if (scaraIsScanLimit()) {
 8002930:	f007 ff90 	bl	800a854 <scaraIsScanLimit>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d006      	beq.n	8002948 <StartDefaultTask+0x530>
										  current_mode	 = SCARA_MODE_DUTY;
 800293a:	2302      	movs	r3, #2
 800293c:	f887 3956 	strb.w	r3, [r7, #2390]	; 0x956
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 8002940:	2301      	movs	r3, #1
 8002942:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
									  if (scaraIsScanLimit()) {
 8002946:	e043      	b.n	80029d0 <StartDefaultTask+0x5b8>
									  } else {
										//   respond_lenght = commandRespond(RPD_ERROR,
										// 								  duty_cmd.id_command,
										// 								  "Has Not Scan Yet.",
										// 								  (char *)respond);
										detail_array[0] = NOT_SCAN;
 8002948:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800294c:	2223      	movs	r2, #35	; 0x23
 800294e:	701a      	strb	r2, [r3, #0]
										respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002950:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002954:	6899      	ldr	r1, [r3, #8]
 8002956:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 800295a:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800295e:	4413      	add	r3, r2
 8002960:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	2301      	movs	r3, #1
 8002968:	2007      	movs	r0, #7
 800296a:	f7ff fba7 	bl	80020bc <commandRespond1>
 800296e:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
										total_respond_length += respond_lenght;
 8002972:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002976:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800297a:	4413      	add	r3, r2
 800297c:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 8002980:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8002984:	487a      	ldr	r0, [pc, #488]	; (8002b70 <StartDefaultTask+0x758>)
 8002986:	f7ff fc01 	bl	800218c <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 800298a:	e021      	b.n	80029d0 <StartDefaultTask+0x5b8>
								  } else {
									//   respond_lenght	= commandRespond(RPD_ERROR,
									// 									  duty_cmd.id_command,
									// 									  "Busy.",
									// 									  (char *)respond);
									detail_array[0] = BUSY;
 800298c:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002990:	2222      	movs	r2, #34	; 0x22
 8002992:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002994:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002998:	6899      	ldr	r1, [r3, #8]
 800299a:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 800299e:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80029a2:	4413      	add	r3, r2
 80029a4:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	2301      	movs	r3, #1
 80029ac:	2007      	movs	r0, #7
 80029ae:	f7ff fb85 	bl	80020bc <commandRespond1>
 80029b2:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
									total_respond_length += respond_lenght;
 80029b6:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 80029ba:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80029be:	4413      	add	r3, r2
 80029c0:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 80029c4:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80029c8:	486a      	ldr	r0, [pc, #424]	; (8002b74 <StartDefaultTask+0x75c>)
 80029ca:	f7ff fbdf 	bl	800218c <LOG_REPORT>
								  }
							  }
							  break;
 80029ce:	e006      	b.n	80029de <StartDefaultTask+0x5c6>
 80029d0:	e005      	b.n	80029de <StartDefaultTask+0x5c6>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 80029d2:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80029d6:	4868      	ldr	r0, [pc, #416]	; (8002b78 <StartDefaultTask+0x760>)
 80029d8:	f7ff fbd8 	bl	800218c <LOG_REPORT>
							  }
						  }
					  }
					  break;
 80029dc:	e143      	b.n	8002c66 <StartDefaultTask+0x84e>
 80029de:	e142      	b.n	8002c66 <StartDefaultTask+0x84e>
					  case SCARA_METHOD_TEST:
					  {
						  test_value[0] = 0;
 80029e0:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]
						  test_value[1] = 0;
 80029e8:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80029ec:	2200      	movs	r2, #0
 80029ee:	705a      	strb	r2, [r3, #1]
						  test_value[2] = 0;
 80029f0:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80029f4:	2200      	movs	r2, #0
 80029f6:	709a      	strb	r2, [r3, #2]
						  test_value[3] = 0;
 80029f8:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80029fc:	2200      	movs	r2, #0
 80029fe:	70da      	strb	r2, [r3, #3]
						  switch (duty_cmd.test_key)
 8002a00:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002a04:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002a08:	2b07      	cmp	r3, #7
 8002a0a:	d873      	bhi.n	8002af4 <StartDefaultTask+0x6dc>
 8002a0c:	a201      	add	r2, pc, #4	; (adr r2, 8002a14 <StartDefaultTask+0x5fc>)
 8002a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a12:	bf00      	nop
 8002a14:	08002a35 	.word	0x08002a35
 8002a18:	08002a4d 	.word	0x08002a4d
 8002a1c:	08002a65 	.word	0x08002a65
 8002a20:	08002a7d 	.word	0x08002a7d
 8002a24:	08002a95 	.word	0x08002a95
 8002a28:	08002aad 	.word	0x08002aad
 8002a2c:	08002ac5 	.word	0x08002ac5
 8002a30:	08002add 	.word	0x08002add
						  {
						  case SCARA_TEST_MOTOR1_POS:
							 test_value[duty_cmd.test_key/2] = 5;
 8002a34:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002a38:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002a3c:	085b      	lsrs	r3, r3, #1
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	461a      	mov	r2, r3
 8002a42:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002a46:	2105      	movs	r1, #5
 8002a48:	5499      	strb	r1, [r3, r2]
						  break;
 8002a4a:	e054      	b.n	8002af6 <StartDefaultTask+0x6de>
						  case SCARA_TEST_MOTOR1_NEG:
							 test_value[duty_cmd.test_key/2] = -5;
 8002a4c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002a50:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002a54:	085b      	lsrs	r3, r3, #1
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002a5e:	21fb      	movs	r1, #251	; 0xfb
 8002a60:	5499      	strb	r1, [r3, r2]
						  break;
 8002a62:	e048      	b.n	8002af6 <StartDefaultTask+0x6de>
						  case SCARA_TEST_MOTOR2_POS:
							 test_value[duty_cmd.test_key/2] = 5;
 8002a64:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002a68:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002a6c:	085b      	lsrs	r3, r3, #1
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	461a      	mov	r2, r3
 8002a72:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002a76:	2105      	movs	r1, #5
 8002a78:	5499      	strb	r1, [r3, r2]
						  break;
 8002a7a:	e03c      	b.n	8002af6 <StartDefaultTask+0x6de>
						  case SCARA_TEST_MOTOR2_NEG:
							 test_value[duty_cmd.test_key/2] = -5;
 8002a7c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002a80:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002a84:	085b      	lsrs	r3, r3, #1
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002a8e:	21fb      	movs	r1, #251	; 0xfb
 8002a90:	5499      	strb	r1, [r3, r2]
						  break;
 8002a92:	e030      	b.n	8002af6 <StartDefaultTask+0x6de>
						  case SCARA_TEST_MOTOR3_POS:
							 test_value[duty_cmd.test_key/2] = 5;
 8002a94:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002a98:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002a9c:	085b      	lsrs	r3, r3, #1
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002aa6:	2105      	movs	r1, #5
 8002aa8:	5499      	strb	r1, [r3, r2]
						  break;
 8002aaa:	e024      	b.n	8002af6 <StartDefaultTask+0x6de>
						  case SCARA_TEST_MOTOR3_NEG:
							 test_value[duty_cmd.test_key/2] = -5;
 8002aac:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002ab0:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002ab4:	085b      	lsrs	r3, r3, #1
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002abe:	21fb      	movs	r1, #251	; 0xfb
 8002ac0:	5499      	strb	r1, [r3, r2]
						  break;
 8002ac2:	e018      	b.n	8002af6 <StartDefaultTask+0x6de>
						  case SCARA_TEST_MOTOR4_POS:
							 test_value[duty_cmd.test_key/2] = 10;
 8002ac4:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002ac8:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002acc:	085b      	lsrs	r3, r3, #1
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002ad6:	210a      	movs	r1, #10
 8002ad8:	5499      	strb	r1, [r3, r2]
						  break;
 8002ada:	e00c      	b.n	8002af6 <StartDefaultTask+0x6de>
						  case SCARA_TEST_MOTOR4_NEG:
							 test_value[duty_cmd.test_key/2] = -10;
 8002adc:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002ae0:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002ae4:	085b      	lsrs	r3, r3, #1
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002aee:	21f6      	movs	r1, #246	; 0xf6
 8002af0:	5499      	strb	r1, [r3, r2]
						  break;						  
 8002af2:	e000      	b.n	8002af6 <StartDefaultTask+0x6de>
						  default:
							  break;
 8002af4:	bf00      	nop
						  }
					  }
					  break;
 8002af6:	e0b6      	b.n	8002c66 <StartDefaultTask+0x84e>
				  	  case SCARA_METHOD_GCODE:
				  	  {
				  		  if(current_duty_state == SCARA_DUTY_STATE_READY && duty_cmd.id_command == CMD_GCODE_RUN){
 8002af8:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10b      	bne.n	8002b18 <StartDefaultTask+0x700>
 8002b00:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b13      	cmp	r3, #19
 8002b08:	d106      	bne.n	8002b18 <StartDefaultTask+0x700>
				  			  run_point = 1;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
				  			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8002b10:	2304      	movs	r3, #4
 8002b12:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
 8002b16:	e025      	b.n	8002b64 <StartDefaultTask+0x74c>
				  		  }else if(current_duty_state == SCARA_DUTY_STATE_INIT && duty_cmd.id_command == CMD_GCODE_RESUME){
 8002b18:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d10e      	bne.n	8002b3e <StartDefaultTask+0x726>
 8002b20:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b12      	cmp	r3, #18
 8002b28:	d109      	bne.n	8002b3e <StartDefaultTask+0x726>
				  			  lowlayer_readTruePosition(&positionCurrent);
 8002b2a:	4814      	ldr	r0, [pc, #80]	; (8002b7c <StartDefaultTask+0x764>)
 8002b2c:	f002 fa28 	bl	8004f80 <lowlayer_readTruePosition>
				  			  kinematicForward(&positionCurrent);
 8002b30:	4812      	ldr	r0, [pc, #72]	; (8002b7c <StartDefaultTask+0x764>)
 8002b32:	f001 fb21 	bl	8004178 <kinematicForward>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002b36:	2301      	movs	r3, #1
 8002b38:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
 8002b3c:	e012      	b.n	8002b64 <StartDefaultTask+0x74c>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_STOP){
 8002b3e:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b0d      	cmp	r3, #13
 8002b46:	d103      	bne.n	8002b50 <StartDefaultTask+0x738>
				  			  current_duty_state = SCARA_DUTY_STATE_READY;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
				  		  }
				  	  }
				  	  break;
 8002b4e:	e089      	b.n	8002c64 <StartDefaultTask+0x84c>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
 8002b50:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b0e      	cmp	r3, #14
 8002b58:	f040 8084 	bne.w	8002c64 <StartDefaultTask+0x84c>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  	  break;
 8002b62:	e07f      	b.n	8002c64 <StartDefaultTask+0x84c>
 8002b64:	e07e      	b.n	8002c64 <StartDefaultTask+0x84c>
 8002b66:	bf00      	nop
 8002b68:	0801c3e4 	.word	0x0801c3e4
 8002b6c:	0801c3f4 	.word	0x0801c3f4
 8002b70:	0801c404 	.word	0x0801c404
 8002b74:	0801c418 	.word	0x0801c418
 8002b78:	0801c428 	.word	0x0801c428
 8002b7c:	2000b8f0 	.word	0x2000b8f0
				  	  case SCARA_METHOD_PICK_AND_PLACE:{
				  		  memcpy(&Object[object_head_pointer].object_position, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 8002b80:	f897 393d 	ldrb.w	r3, [r7, #2365]	; 0x93d
 8002b84:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002b88:	21c8      	movs	r1, #200	; 0xc8
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	18d0      	adds	r0, r2, r3
 8002b90:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002b94:	3328      	adds	r3, #40	; 0x28
 8002b96:	22c0      	movs	r2, #192	; 0xc0
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f013 fa89 	bl	80160b0 <memcpy>
				  		  Object[object_head_pointer].timer_value = (uint16_t)duty_cmd.target_point.t;
 8002b9e:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002ba2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002ba6:	f897 493d 	ldrb.w	r4, [r7, #2365]	; 0x93d
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	f7fd fffb 	bl	8000ba8 <__aeabi_d2uiz>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	b299      	uxth	r1, r3
 8002bb6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002bba:	23c8      	movs	r3, #200	; 0xc8
 8002bbc:	fb03 f304 	mul.w	r3, r3, r4
 8002bc0:	4413      	add	r3, r2
 8002bc2:	33c0      	adds	r3, #192	; 0xc0
 8002bc4:	460a      	mov	r2, r1
 8002bc6:	801a      	strh	r2, [r3, #0]
				  		  object_head_pointer = (object_head_pointer+1)%8;
 8002bc8:	f897 393d 	ldrb.w	r3, [r7, #2365]	; 0x93d
 8002bcc:	3301      	adds	r3, #1
 8002bce:	425a      	negs	r2, r3
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	f002 0207 	and.w	r2, r2, #7
 8002bd8:	bf58      	it	pl
 8002bda:	4253      	negpl	r3, r2
 8002bdc:	f887 393d 	strb.w	r3, [r7, #2365]	; 0x93d
				  		  detail_array[0] = OBJECT_DETECTED;
 8002be0:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002be4:	221d      	movs	r2, #29
 8002be6:	701a      	strb	r2, [r3, #0]
						  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002be8:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002bec:	6899      	ldr	r1, [r3, #8]
 8002bee:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002bf2:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	2301      	movs	r3, #1
 8002c00:	2008      	movs	r0, #8
 8002c02:	f7ff fa5b 	bl	80020bc <commandRespond1>
 8002c06:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
						  total_respond_length += respond_lenght;
 8002c0a:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002c0e:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002c12:	4413      	add	r3, r2
 8002c14:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
				  	  }
				  	  break;
 8002c18:	e025      	b.n	8002c66 <StartDefaultTask+0x84e>
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 8002c1a:	f240 2103 	movw	r1, #515	; 0x203
 8002c1e:	48ca      	ldr	r0, [pc, #808]	; (8002f48 <StartDefaultTask+0xb30>)
 8002c20:	f7ff fab4 	bl	800218c <LOG_REPORT>
 8002c24:	e01f      	b.n	8002c66 <StartDefaultTask+0x84e>
			  	  } else {
					//   respond_lenght = commandRespond(RPD_ERROR,
					// 								duty_cmd.id_command,
					// 								"METHOD isn't correct",
					// 								(char *)respond);
					detail_array[0] = INCORRECT_METHOD;
 8002c26:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002c2a:	2224      	movs	r2, #36	; 0x24
 8002c2c:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002c2e:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002c32:	6899      	ldr	r1, [r3, #8]
 8002c34:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002c38:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	2301      	movs	r3, #1
 8002c46:	2007      	movs	r0, #7
 8002c48:	f7ff fa38 	bl	80020bc <commandRespond1>
 8002c4c:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					total_respond_length += respond_lenght;
 8002c50:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002c54:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002c58:	4413      	add	r3, r2
 8002c5a:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 8002c5e:	e002      	b.n	8002c66 <StartDefaultTask+0x84e>
				  	  break;
 8002c60:	bf00      	nop
 8002c62:	e000      	b.n	8002c66 <StartDefaultTask+0x84e>
				  	  break;
 8002c64:	bf00      	nop
			  	  }

			  }
		  isNewDuty = FALSE;
 8002c66:	2300      	movs	r3, #0
 8002c68:	f887 395f 	strb.w	r3, [r7, #2399]	; 0x95f
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 8002c6c:	f897 3957 	ldrb.w	r3, [r7, #2391]	; 0x957
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	f200 8726 	bhi.w	8003ac2 <StartDefaultTask+0x16aa>
 8002c76:	a201      	add	r2, pc, #4	; (adr r2, 8002c7c <StartDefaultTask+0x864>)
 8002c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7c:	08002c91 	.word	0x08002c91
 8002c80:	08002e3f 	.word	0x08002e3f
 8002c84:	08003231 	.word	0x08003231
 8002c88:	080034ab 	.word	0x080034ab
 8002c8c:	080034d1 	.word	0x080034d1
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 8002c90:	f897 3953 	ldrb.w	r3, [r7, #2387]	; 0x953
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	f200 8711 	bhi.w	8003abc <StartDefaultTask+0x16a4>
 8002c9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ca0 <StartDefaultTask+0x888>)
 8002c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca0:	08002e39 	.word	0x08002e39
 8002ca4:	08002cb1 	.word	0x08002cb1
 8002ca8:	08002d1f 	.word	0x08002d1f
 8002cac:	08002dfb 	.word	0x08002dfb
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit1(current_key, current_key_speed1) == SCARA_STATUS_OK) {
 8002cb0:	4ba6      	ldr	r3, [pc, #664]	; (8002f4c <StartDefaultTask+0xb34>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	f897 3952 	ldrb.w	r3, [r7, #2386]	; 0x952
 8002cb8:	4611      	mov	r1, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f007 fee0 	bl	800aa80 <scaraKeyInit1>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d127      	bne.n	8002d16 <StartDefaultTask+0x8fe>
				  run_time = 0;
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8002cd2:	e9c1 2300 	strd	r2, r3, [r1]
				  current_key_state = SCARA_KEY_STATE_FLOW;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
// #endif
// 				  infor_lenght 		= commandRespond(RPD_START,
// 													  0,
// 													  (char *)position,
// 													  (char *)infor);
					detail_array[0] = NONE;
 8002cdc:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002ce0:	2225      	movs	r2, #37	; 0x25
 8002ce2:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002ce4:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002ce8:	6899      	ldr	r1, [r3, #8]
 8002cea:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002cee:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	2003      	movs	r0, #3
 8002cfe:	f7ff f9dd 	bl	80020bc <commandRespond1>
 8002d02:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					total_respond_length += respond_lenght;
 8002d06:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002d0a:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002d0e:	4413      	add	r3, r2
 8002d10:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 8002d14:	e091      	b.n	8002e3a <StartDefaultTask+0xa22>
				  current_key_state = SCARA_KEY_STATE_READY;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
		  break;
 8002d1c:	e08d      	b.n	8002e3a <StartDefaultTask+0xa22>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8002d1e:	a388      	add	r3, pc, #544	; (adr r3, 8002f40 <StartDefaultTask+0xb28>)
 8002d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d24:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8002d28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d2c:	f7fd faae 	bl	800028c <__adddf3>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8002d38:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8002d3c:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8002d40:	ed93 0b00 	vldr	d0, [r3]
 8002d44:	f007 fd92 	bl	800a86c <scaraIsFinish>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <StartDefaultTask+0x93e>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 8002d4e:	2303      	movs	r3, #3
 8002d50:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
					total_respond_length += respond_lenght;
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 8002d54:	e071      	b.n	8002e3a <StartDefaultTask+0xa22>
				  status = scaraFlowDuty(run_time, &positionNext, positionCurrent);
 8002d56:	4c7e      	ldr	r4, [pc, #504]	; (8002f50 <StartDefaultTask+0xb38>)
 8002d58:	4668      	mov	r0, sp
 8002d5a:	f104 0308 	add.w	r3, r4, #8
 8002d5e:	22b8      	movs	r2, #184	; 0xb8
 8002d60:	4619      	mov	r1, r3
 8002d62:	f013 f9a5 	bl	80160b0 <memcpy>
 8002d66:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002d6a:	487a      	ldr	r0, [pc, #488]	; (8002f54 <StartDefaultTask+0xb3c>)
 8002d6c:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8002d70:	ed91 0b00 	vldr	d0, [r1]
 8002d74:	f005 fe46 	bl	8008a04 <scaraFlowDuty>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f887 38f9 	strb.w	r3, [r7, #2297]	; 0x8f9
				  if ( SCARA_STATUS_OK == status) {
 8002d7e:	f897 38f9 	ldrb.w	r3, [r7, #2297]	; 0x8f9
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d113      	bne.n	8002dae <StartDefaultTask+0x996>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8002d86:	4c72      	ldr	r4, [pc, #456]	; (8002f50 <StartDefaultTask+0xb38>)
 8002d88:	4a72      	ldr	r2, [pc, #456]	; (8002f54 <StartDefaultTask+0xb3c>)
 8002d8a:	ab2c      	add	r3, sp, #176	; 0xb0
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	22c0      	movs	r2, #192	; 0xc0
 8002d90:	4618      	mov	r0, r3
 8002d92:	f013 f98d 	bl	80160b0 <memcpy>
 8002d96:	4668      	mov	r0, sp
 8002d98:	f104 0310 	add.w	r3, r4, #16
 8002d9c:	22b0      	movs	r2, #176	; 0xb0
 8002d9e:	4619      	mov	r1, r3
 8002da0:	f013 f986 	bl	80160b0 <memcpy>
 8002da4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002da8:	f002 fa7a 	bl	80052a0 <lowlayer_computeAndWritePulse>
		  break;
 8002dac:	e045      	b.n	8002e3a <StartDefaultTask+0xa22>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 8002dae:	2303      	movs	r3, #3
 8002db0:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
					detail_array[0] = status;
 8002db4:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002db8:	f897 28f9 	ldrb.w	r2, [r7, #2297]	; 0x8f9
 8002dbc:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002dbe:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002dc2:	6899      	ldr	r1, [r3, #8]
 8002dc4:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002dc8:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002dcc:	4413      	add	r3, r2
 8002dce:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	2006      	movs	r0, #6
 8002dd8:	f7ff f970 	bl	80020bc <commandRespond1>
 8002ddc:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					total_respond_length += respond_lenght;
 8002de0:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002de4:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002de8:	4413      	add	r3, r2
 8002dea:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
					  LOG_REPORT("STOP KEY", __LINE__);
 8002dee:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002df2:	4859      	ldr	r0, [pc, #356]	; (8002f58 <StartDefaultTask+0xb40>)
 8002df4:	f7ff f9ca 	bl	800218c <LOG_REPORT>
		  break;
 8002df8:	e01f      	b.n	8002e3a <StartDefaultTask+0xa22>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  lowlayer_readTruePosition(&positionNext);
 8002dfa:	4856      	ldr	r0, [pc, #344]	; (8002f54 <StartDefaultTask+0xb3c>)
 8002dfc:	f002 f8c0 	bl	8004f80 <lowlayer_readTruePosition>
			  kinematicForward(&positionNext);
 8002e00:	4854      	ldr	r0, [pc, #336]	; (8002f54 <StartDefaultTask+0xb3c>)
 8002e02:	f001 f9b9 	bl	8004178 <kinematicForward>
			  current_key_state = SCARA_KEY_STATE_READY;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
			  positionNext.t = 0;
 8002e0c:	4951      	ldr	r1, [pc, #324]	; (8002f54 <StartDefaultTask+0xb3c>)
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			  positionNext.total_time = 0;
 8002e1a:	494e      	ldr	r1, [pc, #312]	; (8002f54 <StartDefaultTask+0xb3c>)
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			  positionNext.q = 0;
 8002e28:	494a      	ldr	r1, [pc, #296]	; (8002f54 <StartDefaultTask+0xb3c>)
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  break;
 8002e36:	e000      	b.n	8002e3a <StartDefaultTask+0xa22>
		  break;
 8002e38:	bf00      	nop
		  }
	  }
	  break;
 8002e3a:	f000 be3f 	b.w	8003abc <StartDefaultTask+0x16a4>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 8002e3e:	f897 3956 	ldrb.w	r3, [r7, #2390]	; 0x956
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d06c      	beq.n	8002f20 <StartDefaultTask+0xb08>
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	f300 81ea 	bgt.w	8003220 <StartDefaultTask+0xe08>
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <StartDefaultTask+0xa3e>
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d007      	beq.n	8002e64 <StartDefaultTask+0xa4c>
 8002e54:	e1e4      	b.n	8003220 <StartDefaultTask+0xe08>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 8002e56:	2302      	movs	r3, #2
 8002e58:	f887 3956 	strb.w	r3, [r7, #2390]	; 0x956
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
			  }
			  break;
 8002e62:	e1e3      	b.n	800322c <StartDefaultTask+0xe14>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 8002e64:	f897 3954 	ldrb.w	r3, [r7, #2388]	; 0x954
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d84f      	bhi.n	8002f0c <StartDefaultTask+0xaf4>
 8002e6c:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <StartDefaultTask+0xa5c>)
 8002e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e72:	bf00      	nop
 8002e74:	08002e85 	.word	0x08002e85
 8002e78:	08002e91 	.word	0x08002e91
 8002e7c:	08002ea3 	.word	0x08002ea3
 8002e80:	08002eb7 	.word	0x08002eb7
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 8002e84:	f001 fe76 	bl	8004b74 <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	f887 3954 	strb.w	r3, [r7, #2388]	; 0x954
					  }
					  break;
 8002e8e:	e046      	b.n	8002f1e <StartDefaultTask+0xb06>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 8002e90:	f001 fea2 	bl	8004bd8 <lowlayer_scanFlow>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d03e      	beq.n	8002f18 <StartDefaultTask+0xb00>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	f887 3954 	strb.w	r3, [r7, #2388]	; 0x954
						  }
					  }
					  break;
 8002ea0:	e03a      	b.n	8002f18 <StartDefaultTask+0xb00>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 8002ea2:	482c      	ldr	r0, [pc, #176]	; (8002f54 <StartDefaultTask+0xb3c>)
 8002ea4:	f001 fff0 	bl	8004e88 <lowlayer_goToSoftLimit>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d036      	beq.n	8002f1c <StartDefaultTask+0xb04>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	f887 3954 	strb.w	r3, [r7, #2388]	; 0x954
							}
					  }
					  break;
 8002eb4:	e032      	b.n	8002f1c <StartDefaultTask+0xb04>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  //lowlayer_readSetPosition(&positionNext);
						  lowlayer_readTruePosition(&positionNext);
 8002eb6:	4827      	ldr	r0, [pc, #156]	; (8002f54 <StartDefaultTask+0xb3c>)
 8002eb8:	f002 f862 	bl	8004f80 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 8002ebc:	4825      	ldr	r0, [pc, #148]	; (8002f54 <StartDefaultTask+0xb3c>)
 8002ebe:	f001 f95b 	bl	8004178 <kinematicForward>
						  current_mode 	= SCARA_MODE_DUTY;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	f887 3956 	strb.w	r3, [r7, #2390]	; 0x956
						  current_duty_state = SCARA_DUTY_STATE_READY;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
						  scaraSetScanFlag();
 8002ece:	f007 fc2f 	bl	800a730 <scaraSetScanFlag>
						//   scaraPosition2String((char *)position, positionNext);
						//   infor_lenght 		= commandRespond(RPD_DONE,
						// 									 0,
						// 									(char *)position,
						// 									(char *)infor);
						detail_array[0] = NONE;
 8002ed2:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002ed6:	2225      	movs	r2, #37	; 0x25
 8002ed8:	701a      	strb	r2, [r3, #0]
						respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002eda:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002ede:	6899      	ldr	r1, [r3, #8]
 8002ee0:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002ee4:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002ee8:	4413      	add	r3, r2
 8002eea:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	2005      	movs	r0, #5
 8002ef4:	f7ff f8e2 	bl	80020bc <commandRespond1>
 8002ef8:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
						total_respond_length += respond_lenght;
 8002efc:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002f00:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002f04:	4413      	add	r3, r2
 8002f06:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
					  }
					  break;
 8002f0a:	e008      	b.n	8002f1e <StartDefaultTask+0xb06>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002f0c:	f240 21a1 	movw	r1, #673	; 0x2a1
 8002f10:	4812      	ldr	r0, [pc, #72]	; (8002f5c <StartDefaultTask+0xb44>)
 8002f12:	f7ff f93b 	bl	800218c <LOG_REPORT>
						  while(1);
 8002f16:	e7fe      	b.n	8002f16 <StartDefaultTask+0xafe>
					  break;
 8002f18:	bf00      	nop
 8002f1a:	e187      	b.n	800322c <StartDefaultTask+0xe14>
					  break;
 8002f1c:	bf00      	nop
					  }
				  }

			  }
			  break;
 8002f1e:	e185      	b.n	800322c <StartDefaultTask+0xe14>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 8002f20:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 8002f24:	2b03      	cmp	r3, #3
 8002f26:	f200 8173 	bhi.w	8003210 <StartDefaultTask+0xdf8>
 8002f2a:	a201      	add	r2, pc, #4	; (adr r2, 8002f30 <StartDefaultTask+0xb18>)
 8002f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f30:	0800321d 	.word	0x0800321d
 8002f34:	08002f61 	.word	0x08002f61
 8002f38:	080030bf 	.word	0x080030bf
 8002f3c:	0800319b 	.word	0x0800319b
 8002f40:	40000000 	.word	0x40000000
 8002f44:	3f847ae1 	.word	0x3f847ae1
 8002f48:	0801c43c 	.word	0x0801c43c
 8002f4c:	20000000 	.word	0x20000000
 8002f50:	2000b8f0 	.word	0x2000b8f0
 8002f54:	2000ba70 	.word	0x2000ba70
 8002f58:	0801c454 	.word	0x0801c454
 8002f5c:	0801c460 	.word	0x0801c460

				  case SCARA_DUTY_STATE_INIT:
					  {

						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 8002f60:	f507 64e5 	add.w	r4, r7, #1832	; 0x728
 8002f64:	4668      	mov	r0, sp
 8002f66:	f104 0310 	add.w	r3, r4, #16
 8002f6a:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f013 f89e 	bl	80160b0 <memcpy>
 8002f74:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002f78:	f002 fd2a 	bl	80059d0 <scaraInitDuty>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f887 38fb 	strb.w	r3, [r7, #2299]	; 0x8fb
						  if ( SCARA_STATUS_OK == status1) {
 8002f82:	f897 38fb 	ldrb.w	r3, [r7, #2299]	; 0x8fb
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d173      	bne.n	8003072 <StartDefaultTask+0xc5a>
							  status2 = scaraTestDuty();
 8002f8a:	f007 fb55 	bl	800a638 <scaraTestDuty>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f887 38fa 	strb.w	r3, [r7, #2298]	; 0x8fa
							  if (SCARA_STATUS_OK == status2) {
 8002f94:	f897 38fa 	ldrb.w	r3, [r7, #2298]	; 0x8fa
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d144      	bne.n	8003026 <StartDefaultTask+0xc0e>
							  current_duty_state = SCARA_DUTY_STATE_FLOW;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
							  //current_duty_state = SCARA_DUTY_STATE_FINISH;
							  run_time			= 0;
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8002fae:	e9c1 2300 	strd	r2, r3, [r1]
							  // Respond
							  detail_array[0] = status1;
 8002fb2:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002fb6:	f897 28fb 	ldrb.w	r2, [r7, #2299]	; 0x8fb
 8002fba:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002fbc:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002fc0:	6899      	ldr	r1, [r3, #8]
 8002fc2:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002fc6:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002fca:	4413      	add	r3, r2
 8002fcc:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	2008      	movs	r0, #8
 8002fd6:	f7ff f871 	bl	80020bc <commandRespond1>
 8002fda:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
							  total_respond_length += respond_lenght;
 8002fde:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002fe2:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
							  detail_array[0] = NONE;
 8002fec:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002ff0:	2225      	movs	r2, #37	; 0x25
 8002ff2:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002ff4:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002ff8:	6899      	ldr	r1, [r3, #8]
 8002ffa:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002ffe:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8003002:	4413      	add	r3, r2
 8003004:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	2301      	movs	r3, #1
 800300c:	2003      	movs	r0, #3
 800300e:	f7ff f855 	bl	80020bc <commandRespond1>
 8003012:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
							  total_respond_length += respond_lenght;
 8003016:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 800301a:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800301e:	4413      	add	r3, r2
 8003020:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
							total_respond_length += respond_lenght;
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 8003024:	e0fb      	b.n	800321e <StartDefaultTask+0xe06>
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8003026:	2300      	movs	r3, #0
 8003028:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
								  LOG_REPORT("TEST FAIL", __LINE__);
 800302c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8003030:	48cf      	ldr	r0, [pc, #828]	; (8003370 <StartDefaultTask+0xf58>)
 8003032:	f7ff f8ab 	bl	800218c <LOG_REPORT>
								detail_array[0] = status2;
 8003036:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800303a:	f897 28fa 	ldrb.w	r2, [r7, #2298]	; 0x8fa
 800303e:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003040:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003044:	6899      	ldr	r1, [r3, #8]
 8003046:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 800304a:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800304e:	4413      	add	r3, r2
 8003050:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	2301      	movs	r3, #1
 8003058:	2007      	movs	r0, #7
 800305a:	f7ff f82f 	bl	80020bc <commandRespond1>
 800305e:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
								total_respond_length += respond_lenght;
 8003062:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8003066:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800306a:	4413      	add	r3, r2
 800306c:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
				  break;
 8003070:	e0d5      	b.n	800321e <StartDefaultTask+0xe06>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8003072:	2300      	movs	r3, #0
 8003074:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
							detail_array[0] = status1;
 8003078:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800307c:	f897 28fb 	ldrb.w	r2, [r7, #2299]	; 0x8fb
 8003080:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003082:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003086:	6899      	ldr	r1, [r3, #8]
 8003088:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 800308c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8003090:	4413      	add	r3, r2
 8003092:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	2301      	movs	r3, #1
 800309a:	2007      	movs	r0, #7
 800309c:	f7ff f80e 	bl	80020bc <commandRespond1>
 80030a0:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
							total_respond_length += respond_lenght;
 80030a4:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 80030a8:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80030ac:	4413      	add	r3, r2
 80030ae:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
							  LOG_REPORT("INIT FAIL", __LINE__);
 80030b2:	f240 21d7 	movw	r1, #727	; 0x2d7
 80030b6:	48af      	ldr	r0, [pc, #700]	; (8003374 <StartDefaultTask+0xf5c>)
 80030b8:	f7ff f868 	bl	800218c <LOG_REPORT>
				  break;
 80030bc:	e0af      	b.n	800321e <StartDefaultTask+0xe06>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 80030be:	a3aa      	add	r3, pc, #680	; (adr r3, 8003368 <StartDefaultTask+0xf50>)
 80030c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c4:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 80030c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030cc:	f7fd f8de 	bl	800028c <__adddf3>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 80030d8:	e9c1 2300 	strd	r2, r3, [r1]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 80030dc:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80030e0:	ed93 0b00 	vldr	d0, [r3]
 80030e4:	f007 fbc2 	bl	800a86c <scaraIsFinish>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <StartDefaultTask+0xcde>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 80030ee:	2303      	movs	r3, #3
 80030f0:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
								total_respond_length += respond_lenght;
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 80030f4:	e093      	b.n	800321e <StartDefaultTask+0xe06>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 80030f6:	4ca0      	ldr	r4, [pc, #640]	; (8003378 <StartDefaultTask+0xf60>)
 80030f8:	4668      	mov	r0, sp
 80030fa:	f104 0308 	add.w	r3, r4, #8
 80030fe:	22b8      	movs	r2, #184	; 0xb8
 8003100:	4619      	mov	r1, r3
 8003102:	f012 ffd5 	bl	80160b0 <memcpy>
 8003106:	e894 000c 	ldmia.w	r4, {r2, r3}
 800310a:	489c      	ldr	r0, [pc, #624]	; (800337c <StartDefaultTask+0xf64>)
 800310c:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8003110:	ed91 0b00 	vldr	d0, [r1]
 8003114:	f005 fc76 	bl	8008a04 <scaraFlowDuty>
 8003118:	4603      	mov	r3, r0
 800311a:	f887 38fc 	strb.w	r3, [r7, #2300]	; 0x8fc
							  if ( SCARA_STATUS_OK == status) {
 800311e:	f897 38fc 	ldrb.w	r3, [r7, #2300]	; 0x8fc
 8003122:	2b00      	cmp	r3, #0
 8003124:	d113      	bne.n	800314e <StartDefaultTask+0xd36>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003126:	4c94      	ldr	r4, [pc, #592]	; (8003378 <StartDefaultTask+0xf60>)
 8003128:	4a94      	ldr	r2, [pc, #592]	; (800337c <StartDefaultTask+0xf64>)
 800312a:	ab2c      	add	r3, sp, #176	; 0xb0
 800312c:	4611      	mov	r1, r2
 800312e:	22c0      	movs	r2, #192	; 0xc0
 8003130:	4618      	mov	r0, r3
 8003132:	f012 ffbd 	bl	80160b0 <memcpy>
 8003136:	4668      	mov	r0, sp
 8003138:	f104 0310 	add.w	r3, r4, #16
 800313c:	22b0      	movs	r2, #176	; 0xb0
 800313e:	4619      	mov	r1, r3
 8003140:	f012 ffb6 	bl	80160b0 <memcpy>
 8003144:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003148:	f002 f8aa 	bl	80052a0 <lowlayer_computeAndWritePulse>
				  break;
 800314c:	e067      	b.n	800321e <StartDefaultTask+0xe06>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 800314e:	2303      	movs	r3, #3
 8003150:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
								detail_array[0] = status;
 8003154:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8003158:	f897 28fc 	ldrb.w	r2, [r7, #2300]	; 0x8fc
 800315c:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800315e:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003162:	6899      	ldr	r1, [r3, #8]
 8003164:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8003168:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800316c:	4413      	add	r3, r2
 800316e:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	2301      	movs	r3, #1
 8003176:	2006      	movs	r0, #6
 8003178:	f7fe ffa0 	bl	80020bc <commandRespond1>
 800317c:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
								total_respond_length += respond_lenght;
 8003180:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8003184:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8003188:	4413      	add	r3, r2
 800318a:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
								  LOG_REPORT("STOP DUTY", __LINE__);
 800318e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8003192:	487b      	ldr	r0, [pc, #492]	; (8003380 <StartDefaultTask+0xf68>)
 8003194:	f7fe fffa 	bl	800218c <LOG_REPORT>
				  break;
 8003198:	e041      	b.n	800321e <StartDefaultTask+0xe06>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  lowlayer_readTruePosition(&positionNext);
 800319a:	4878      	ldr	r0, [pc, #480]	; (800337c <StartDefaultTask+0xf64>)
 800319c:	f001 fef0 	bl	8004f80 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 80031a0:	4876      	ldr	r0, [pc, #472]	; (800337c <StartDefaultTask+0xf64>)
 80031a2:	f000 ffe9 	bl	8004178 <kinematicForward>
						  current_duty_state = SCARA_DUTY_STATE_READY;
 80031a6:	2300      	movs	r3, #0
 80031a8:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
						  positionNext.t = 0;
 80031ac:	4973      	ldr	r1, [pc, #460]	; (800337c <StartDefaultTask+0xf64>)
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
						  positionNext.total_time = 0;
 80031ba:	4970      	ldr	r1, [pc, #448]	; (800337c <StartDefaultTask+0xf64>)
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
						  positionNext.q = 0;
 80031c8:	496c      	ldr	r1, [pc, #432]	; (800337c <StartDefaultTask+0xf64>)
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	e9c1 2300 	strd	r2, r3, [r1]
						  // Done Inform

					detail_array[0] = NONE;
 80031d6:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80031da:	2225      	movs	r2, #37	; 0x25
 80031dc:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80031de:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80031e2:	6899      	ldr	r1, [r3, #8]
 80031e4:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80031e8:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80031ec:	4413      	add	r3, r2
 80031ee:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	2301      	movs	r3, #1
 80031f6:	2005      	movs	r0, #5
 80031f8:	f7fe ff60 	bl	80020bc <commandRespond1>
 80031fc:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					total_respond_length += respond_lenght;
 8003200:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8003204:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8003208:	4413      	add	r3, r2
 800320a:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
					  }
				  break;
 800320e:	e006      	b.n	800321e <StartDefaultTask+0xe06>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8003210:	f240 3107 	movw	r1, #775	; 0x307
 8003214:	485b      	ldr	r0, [pc, #364]	; (8003384 <StartDefaultTask+0xf6c>)
 8003216:	f7fe ffb9 	bl	800218c <LOG_REPORT>
						  while(1);
 800321a:	e7fe      	b.n	800321a <StartDefaultTask+0xe02>
				  break;
 800321c:	bf00      	nop
					  }
				  }

			  }
			  break;
 800321e:	e005      	b.n	800322c <StartDefaultTask+0xe14>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 8003220:	f240 3111 	movw	r1, #785	; 0x311
 8003224:	4858      	ldr	r0, [pc, #352]	; (8003388 <StartDefaultTask+0xf70>)
 8003226:	f7fe ffb1 	bl	800218c <LOG_REPORT>
				  while(1);
 800322a:	e7fe      	b.n	800322a <StartDefaultTask+0xe12>
			  }
		  }
	  }
	  break;
 800322c:	f000 bc49 	b.w	8003ac2 <StartDefaultTask+0x16aa>

	  case SCARA_METHOD_GCODE:
	  {
		  switch (current_duty_state)
 8003230:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 8003234:	2b04      	cmp	r3, #4
 8003236:	f200 8136 	bhi.w	80034a6 <StartDefaultTask+0x108e>
 800323a:	a201      	add	r2, pc, #4	; (adr r2, 8003240 <StartDefaultTask+0xe28>)
 800323c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003240:	080034a7 	.word	0x080034a7
 8003244:	080034a7 	.word	0x080034a7
 8003248:	08003399 	.word	0x08003399
 800324c:	080034a7 	.word	0x080034a7
 8003250:	08003255 	.word	0x08003255
		  case SCARA_DUTY_STATE_INIT:{

		  }
		  break;
		  case SCARA_DUTY_STATE_OPERATION:{
			  update_gcode_point(&duty_cmd, Gcode_Cor[run_point]);
 8003254:	494d      	ldr	r1, [pc, #308]	; (800338c <StartDefaultTask+0xf74>)
 8003256:	f8d7 292c 	ldr.w	r2, [r7, #2348]	; 0x92c
 800325a:	4613      	mov	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	4413      	add	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	440b      	add	r3, r1
 8003264:	f507 65e5 	add.w	r5, r7, #1832	; 0x728
 8003268:	466c      	mov	r4, sp
 800326a:	f103 020c 	add.w	r2, r3, #12
 800326e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003270:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003274:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003276:	4628      	mov	r0, r5
 8003278:	f000 fe1e 	bl	8003eb8 <update_gcode_point>
			  SCARA_StatusTypeDef status;
			  status = scaraInitDuty(duty_cmd);
 800327c:	f507 64e5 	add.w	r4, r7, #1832	; 0x728
 8003280:	4668      	mov	r0, sp
 8003282:	f104 0310 	add.w	r3, r4, #16
 8003286:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800328a:	4619      	mov	r1, r3
 800328c:	f012 ff10 	bl	80160b0 <memcpy>
 8003290:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003294:	f002 fb9c 	bl	80059d0 <scaraInitDuty>
 8003298:	4603      	mov	r3, r0
 800329a:	f887 38fe 	strb.w	r3, [r7, #2302]	; 0x8fe
			  if(status == SCARA_STATUS_OK){
 800329e:	f897 38fe 	ldrb.w	r3, [r7, #2302]	; 0x8fe
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d13e      	bne.n	8003324 <StartDefaultTask+0xf0c>
				  run_time = 0;
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 80032b2:	e9c1 2300 	strd	r2, r3, [r1]
				  current_duty_state = SCARA_DUTY_STATE_FLOW;
 80032b6:	2302      	movs	r3, #2
 80032b8:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  detail_array[0] = (uint8_t)(run_point * 100.0f / total_num_of_point );
 80032bc:	f8d7 392c 	ldr.w	r3, [r7, #2348]	; 0x92c
 80032c0:	ee07 3a90 	vmov	s15, r3
 80032c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032c8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003390 <StartDefaultTask+0xf78>
 80032cc:	ee67 6a87 	vmul.f32	s13, s15, s14
 80032d0:	4b30      	ldr	r3, [pc, #192]	; (8003394 <StartDefaultTask+0xf7c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	ee07 3a90 	vmov	s15, r3
 80032d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032e4:	edc7 7a01 	vstr	s15, [r7, #4]
 80032e8:	793b      	ldrb	r3, [r7, #4]
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80032f0:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RDP_GCODE_PROCESS, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80032f2:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80032f6:	6899      	ldr	r1, [r3, #8]
 80032f8:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80032fc:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8003300:	4413      	add	r3, r2
 8003302:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	2301      	movs	r3, #1
 800330a:	200b      	movs	r0, #11
 800330c:	f7fe fed6 	bl	80020bc <commandRespond1>
 8003310:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				  total_respond_length += respond_lenght;
 8003314:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8003318:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800331c:	4413      	add	r3, r2
 800331e:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 8003322:	e039      	b.n	8003398 <StartDefaultTask+0xf80>
			  }else{
				  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003324:	2303      	movs	r3, #3
 8003326:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  detail_array[0] = status;
 800332a:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800332e:	f897 28fe 	ldrb.w	r2, [r7, #2302]	; 0x8fe
 8003332:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003334:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003338:	6899      	ldr	r1, [r3, #8]
 800333a:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 800333e:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8003342:	4413      	add	r3, r2
 8003344:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	2301      	movs	r3, #1
 800334c:	2007      	movs	r0, #7
 800334e:	f7fe feb5 	bl	80020bc <commandRespond1>
 8003352:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				  total_respond_length += respond_lenght;
 8003356:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 800335a:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800335e:	4413      	add	r3, r2
 8003360:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
				  break;
 8003364:	e0a0      	b.n	80034a8 <StartDefaultTask+0x1090>
 8003366:	bf00      	nop
 8003368:	40000000 	.word	0x40000000
 800336c:	3f847ae1 	.word	0x3f847ae1
 8003370:	0801c470 	.word	0x0801c470
 8003374:	0801c47c 	.word	0x0801c47c
 8003378:	2000b8f0 	.word	0x2000b8f0
 800337c:	2000ba70 	.word	0x2000ba70
 8003380:	0801c488 	.word	0x0801c488
 8003384:	0801c460 	.word	0x0801c460
 8003388:	0801c494 	.word	0x0801c494
 800338c:	20004d8c 	.word	0x20004d8c
 8003390:	42c80000 	.word	0x42c80000
 8003394:	20004d88 	.word	0x20004d88
			  }
		  }
		  //break;

		  case SCARA_DUTY_STATE_FLOW:{
			  run_time += T_SAMPLING;
 8003398:	a3cb      	add	r3, pc, #812	; (adr r3, 80036c8 <StartDefaultTask+0x12b0>)
 800339a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339e:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 80033a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033a6:	f7fc ff71 	bl	800028c <__adddf3>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 80033b2:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 80033b6:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80033ba:	ed93 0b00 	vldr	d0, [r3]
 80033be:	f007 fa55 	bl	800a86c <scaraIsFinish>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d021      	beq.n	800340c <StartDefaultTask+0xff4>
				if(run_point >= total_num_of_point){
 80033c8:	4bc1      	ldr	r3, [pc, #772]	; (80036d0 <StartDefaultTask+0x12b8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f8d7 292c 	ldr.w	r2, [r7, #2348]	; 0x92c
 80033d0:	429a      	cmp	r2, r3
 80033d2:	db09      	blt.n	80033e8 <StartDefaultTask+0xfd0>
					current_duty_state = SCARA_DUTY_STATE_READY;
 80033d4:	2300      	movs	r3, #0
 80033d6:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
					lowlayer_readTruePosition(&positionNext);
 80033da:	48be      	ldr	r0, [pc, #760]	; (80036d4 <StartDefaultTask+0x12bc>)
 80033dc:	f001 fdd0 	bl	8004f80 <lowlayer_readTruePosition>
				    kinematicForward(&positionNext);
 80033e0:	48bc      	ldr	r0, [pc, #752]	; (80036d4 <StartDefaultTask+0x12bc>)
 80033e2:	f000 fec9 	bl	8004178 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 80033e6:	e05f      	b.n	80034a8 <StartDefaultTask+0x1090>
					current_duty_state = SCARA_DUTY_STATE_OPERATION;
 80033e8:	2304      	movs	r3, #4
 80033ea:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
					run_point++;
 80033ee:	f8d7 392c 	ldr.w	r3, [r7, #2348]	; 0x92c
 80033f2:	3301      	adds	r3, #1
 80033f4:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
					memcpy(&positionNext, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 80033f8:	4ab6      	ldr	r2, [pc, #728]	; (80036d4 <StartDefaultTask+0x12bc>)
 80033fa:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80033fe:	4610      	mov	r0, r2
 8003400:	3328      	adds	r3, #40	; 0x28
 8003402:	22c0      	movs	r2, #192	; 0xc0
 8003404:	4619      	mov	r1, r3
 8003406:	f012 fe53 	bl	80160b0 <memcpy>
		  break;
 800340a:	e04d      	b.n	80034a8 <StartDefaultTask+0x1090>
				SCARA_StatusTypeDef status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 800340c:	4cb2      	ldr	r4, [pc, #712]	; (80036d8 <StartDefaultTask+0x12c0>)
 800340e:	4668      	mov	r0, sp
 8003410:	f104 0308 	add.w	r3, r4, #8
 8003414:	22b8      	movs	r2, #184	; 0xb8
 8003416:	4619      	mov	r1, r3
 8003418:	f012 fe4a 	bl	80160b0 <memcpy>
 800341c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003420:	48ac      	ldr	r0, [pc, #688]	; (80036d4 <StartDefaultTask+0x12bc>)
 8003422:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8003426:	ed91 0b00 	vldr	d0, [r1]
 800342a:	f005 faeb 	bl	8008a04 <scaraFlowDuty>
 800342e:	4603      	mov	r3, r0
 8003430:	f887 38fd 	strb.w	r3, [r7, #2301]	; 0x8fd
				if ( SCARA_STATUS_OK == status) {
 8003434:	f897 38fd 	ldrb.w	r3, [r7, #2301]	; 0x8fd
 8003438:	2b00      	cmp	r3, #0
 800343a:	d113      	bne.n	8003464 <StartDefaultTask+0x104c>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 800343c:	4ca6      	ldr	r4, [pc, #664]	; (80036d8 <StartDefaultTask+0x12c0>)
 800343e:	4aa5      	ldr	r2, [pc, #660]	; (80036d4 <StartDefaultTask+0x12bc>)
 8003440:	ab2c      	add	r3, sp, #176	; 0xb0
 8003442:	4611      	mov	r1, r2
 8003444:	22c0      	movs	r2, #192	; 0xc0
 8003446:	4618      	mov	r0, r3
 8003448:	f012 fe32 	bl	80160b0 <memcpy>
 800344c:	4668      	mov	r0, sp
 800344e:	f104 0310 	add.w	r3, r4, #16
 8003452:	22b0      	movs	r2, #176	; 0xb0
 8003454:	4619      	mov	r1, r3
 8003456:	f012 fe2b 	bl	80160b0 <memcpy>
 800345a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800345e:	f001 ff1f 	bl	80052a0 <lowlayer_computeAndWritePulse>
		  break;
 8003462:	e021      	b.n	80034a8 <StartDefaultTask+0x1090>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003464:	2303      	movs	r3, #3
 8003466:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
					  detail_array[0] = status;
 800346a:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800346e:	f897 28fd 	ldrb.w	r2, [r7, #2301]	; 0x8fd
 8003472:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003474:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003478:	6899      	ldr	r1, [r3, #8]
 800347a:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 800347e:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8003482:	4413      	add	r3, r2
 8003484:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	2301      	movs	r3, #1
 800348c:	2007      	movs	r0, #7
 800348e:	f7fe fe15 	bl	80020bc <commandRespond1>
 8003492:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					  total_respond_length += respond_lenght;
 8003496:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 800349a:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800349e:	4413      	add	r3, r2
 80034a0:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
		  break;
 80034a4:	e000      	b.n	80034a8 <StartDefaultTask+0x1090>

		  }
		  break;
		  
		  default:
			  break;
 80034a6:	bf00      	nop
		  }
	  }

	  break;
 80034a8:	e30b      	b.n	8003ac2 <StartDefaultTask+0x16aa>
	  case SCARA_METHOD_TEST:
	  {
		  lowlayer_writePulse(test_value[0], test_value[1], test_value[2], test_value[3]);
 80034aa:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80034ae:	f993 0000 	ldrsb.w	r0, [r3]
 80034b2:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80034b6:	f993 1001 	ldrsb.w	r1, [r3, #1]
 80034ba:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80034be:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80034c2:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80034c6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80034ca:	f002 f891 	bl	80055f0 <lowlayer_writePulse>
	  }
	  break;
 80034ce:	e2f8      	b.n	8003ac2 <StartDefaultTask+0x16aa>


	  case SCARA_METHOD_PICK_AND_PLACE:
	  {
		  switch(current_duty_state) {
 80034d0:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 80034d4:	3b01      	subs	r3, #1
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	f200 82f2 	bhi.w	8003ac0 <StartDefaultTask+0x16a8>
 80034dc:	a201      	add	r2, pc, #4	; (adr r2, 80034e4 <StartDefaultTask+0x10cc>)
 80034de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e2:	bf00      	nop
 80034e4:	080034f5 	.word	0x080034f5
 80034e8:	08003991 	.word	0x08003991
 80034ec:	08003ab1 	.word	0x08003ab1
 80034f0:	0800352d 	.word	0x0800352d
		  case SCARA_DUTY_STATE_INIT:{
			  //Object = calloc(8, sizeof(SCARA_Pick_And_Place_Package));
			  HAL_TIM_Base_Start(&htim2);
 80034f4:	4879      	ldr	r0, [pc, #484]	; (80036dc <StartDefaultTask+0x12c4>)
 80034f6:	f00a fe78 	bl	800e1ea <HAL_TIM_Base_Start>
			  object_tail_pointer = 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	f887 393e 	strb.w	r3, [r7, #2366]	; 0x93e
			  object_head_pointer = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	f887 393d 	strb.w	r3, [r7, #2365]	; 0x93d
			  operation_state = SCARA_MOVE_TO_TARGET;
 8003506:	2300      	movs	r3, #0
 8003508:	f887 393f 	strb.w	r3, [r7, #2367]	; 0x93f
			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 800350c:	2304      	movs	r3, #4
 800350e:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
			  duty_cmd.robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8003512:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003516:	2204      	movs	r2, #4
 8003518:	705a      	strb	r2, [r3, #1]
			  duty_cmd.path_type = DUTY_PATH_LINE;
 800351a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800351e:	2200      	movs	r2, #0
 8003520:	739a      	strb	r2, [r3, #14]
			  duty_cmd.space_type = DUTY_SPACE_TASK;
 8003522:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003526:	2200      	movs	r2, #0
 8003528:	735a      	strb	r2, [r3, #13]
		  }
		  break;
 800352a:	e2c6      	b.n	8003aba <StartDefaultTask+0x16a2>

		  case SCARA_DUTY_STATE_OPERATION:{
			  if(object_tail_pointer != object_head_pointer){
 800352c:	f897 293e 	ldrb.w	r2, [r7, #2366]	; 0x93e
 8003530:	f897 393d 	ldrb.w	r3, [r7, #2365]	; 0x93d
 8003534:	429a      	cmp	r2, r3
 8003536:	f000 82bd 	beq.w	8003ab4 <StartDefaultTask+0x169c>
				  switch(operation_state){
 800353a:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 800353e:	2b07      	cmp	r3, #7
 8003540:	f200 8187 	bhi.w	8003852 <StartDefaultTask+0x143a>
 8003544:	a201      	add	r2, pc, #4	; (adr r2, 800354c <StartDefaultTask+0x1134>)
 8003546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354a:	bf00      	nop
 800354c:	0800356d 	.word	0x0800356d
 8003550:	0800363d 	.word	0x0800363d
 8003554:	0800366b 	.word	0x0800366b
 8003558:	08003681 	.word	0x08003681
 800355c:	080036f5 	.word	0x080036f5
 8003560:	080037e1 	.word	0x080037e1
 8003564:	0800380f 	.word	0x0800380f
 8003568:	08003825 	.word	0x08003825
					  case SCARA_MOVE_TO_TARGET:{
						  double wait_time = TIMER_SCALE*((uint16_t)(TIM2->CNT - Object[object_tail_pointer].timer_value)) + MOVE_TIME + PUT_DOWN_TIME_ON_OBJECT;
 800356c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	b29a      	uxth	r2, r3
 8003574:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 8003578:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800357c:	20c8      	movs	r0, #200	; 0xc8
 800357e:	fb00 f303 	mul.w	r3, r0, r3
 8003582:	440b      	add	r3, r1
 8003584:	33c0      	adds	r3, #192	; 0xc0
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	b29b      	uxth	r3, r3
 800358c:	ee07 3a90 	vmov	s15, r3
 8003590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003594:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80036e0 <StartDefaultTask+0x12c8>
 8003598:	ee67 7a87 	vmul.f32	s15, s15, s14
 800359c:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80036e4 <StartDefaultTask+0x12cc>
 80035a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035a4:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80036e8 <StartDefaultTask+0x12d0>
 80035a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035ac:	ee17 0a90 	vmov	r0, s15
 80035b0:	f7fc ffca 	bl	8000548 <__aeabi_f2d>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 80035bc:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.y -= wait_time*conveyor_speed;
 80035c0:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 80035c4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80035c8:	21c8      	movs	r1, #200	; 0xc8
 80035ca:	fb01 f303 	mul.w	r3, r1, r3
 80035ce:	4413      	add	r3, r2
 80035d0:	3350      	adds	r3, #80	; 0x50
 80035d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80035d6:	4b45      	ldr	r3, [pc, #276]	; (80036ec <StartDefaultTask+0x12d4>)
 80035d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035dc:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	f7fd f808 	bl	80005f8 <__aeabi_dmul>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	f897 693e 	ldrb.w	r6, [r7, #2366]	; 0x93e
 80035f0:	4620      	mov	r0, r4
 80035f2:	4629      	mov	r1, r5
 80035f4:	f7fc fe48 	bl	8000288 <__aeabi_dsub>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003600:	21c8      	movs	r1, #200	; 0xc8
 8003602:	fb01 f106 	mul.w	r1, r1, r6
 8003606:	4401      	add	r1, r0
 8003608:	3150      	adds	r1, #80	; 0x50
 800360a:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 800360e:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 8003612:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003616:	21c8      	movs	r1, #200	; 0xc8
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	4413      	add	r3, r2
 800361e:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8003622:	a323      	add	r3, pc, #140	; (adr r3, 80036b0 <StartDefaultTask+0x1298>)
 8003624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003628:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = MOVE_TIME;
 800362c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003630:	4b2f      	ldr	r3, [pc, #188]	; (80036f0 <StartDefaultTask+0x12d8>)
 8003632:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8003636:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 800363a:	e10a      	b.n	8003852 <StartDefaultTask+0x143a>

					  case SCARA_MOVE_DOWN_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_OBJECT;
 800363c:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 8003640:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003644:	21c8      	movs	r1, #200	; 0xc8
 8003646:	fb01 f303 	mul.w	r3, r1, r3
 800364a:	4413      	add	r3, r2
 800364c:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8003650:	a319      	add	r3, pc, #100	; (adr r3, 80036b8 <StartDefaultTask+0x12a0>)
 8003652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003656:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PUT_DOWN_TIME_ON_OBJECT;
 800365a:	a319      	add	r3, pc, #100	; (adr r3, 80036c0 <StartDefaultTask+0x12a8>)
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8003664:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003668:	e0f3      	b.n	8003852 <StartDefaultTask+0x143a>
					  case SCARA_ATTACH:{
						  state_time = ATTACH_TIME;
 800366a:	a317      	add	r3, pc, #92	; (adr r3, 80036c8 <StartDefaultTask+0x12b0>)
 800366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003670:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8003674:	e9c1 2300 	strd	r2, r3, [r1]
						  scaraSetOutput(1);
 8003678:	2001      	movs	r0, #1
 800367a:	f007 f865 	bl	800a748 <scaraSetOutput>
					  }
					  break;
 800367e:	e0e8      	b.n	8003852 <StartDefaultTask+0x143a>
					  case SCARA_MOVE_UP_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003680:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 8003684:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003688:	21c8      	movs	r1, #200	; 0xc8
 800368a:	fb01 f303 	mul.w	r3, r1, r3
 800368e:	4413      	add	r3, r2
 8003690:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8003694:	a306      	add	r3, pc, #24	; (adr r3, 80036b0 <StartDefaultTask+0x1298>)
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PICK_UP_TIME_ON_OBJECT;
 800369e:	a308      	add	r3, pc, #32	; (adr r3, 80036c0 <StartDefaultTask+0x12a8>)
 80036a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a4:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 80036a8:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 80036ac:	e0d1      	b.n	8003852 <StartDefaultTask+0x143a>
 80036ae:	bf00      	nop
 80036b0:	00000000 	.word	0x00000000
 80036b4:	40606000 	.word	0x40606000
 80036b8:	00000000 	.word	0x00000000
 80036bc:	405fa000 	.word	0x405fa000
 80036c0:	40000000 	.word	0x40000000
 80036c4:	3fd33333 	.word	0x3fd33333
 80036c8:	40000000 	.word	0x40000000
 80036cc:	3f847ae1 	.word	0x3f847ae1
 80036d0:	20004d88 	.word	0x20004d88
 80036d4:	2000ba70 	.word	0x2000ba70
 80036d8:	2000b8f0 	.word	0x2000b8f0
 80036dc:	2000bb70 	.word	0x2000bb70
 80036e0:	399c09bf 	.word	0x399c09bf
 80036e4:	3f99999a 	.word	0x3f99999a
 80036e8:	3e99999a 	.word	0x3e99999a
 80036ec:	20000ba8 	.word	0x20000ba8
 80036f0:	3ff33333 	.word	0x3ff33333
					  case SCARA_MOVE_TO_SLOT :{

						  Object[object_tail_pointer].object_position.x = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posx;
 80036f4:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 80036f8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80036fc:	21c8      	movs	r1, #200	; 0xc8
 80036fe:	fb01 f303 	mul.w	r3, r1, r3
 8003702:	4413      	add	r3, r2
 8003704:	33b8      	adds	r3, #184	; 0xb8
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f897 193e 	ldrb.w	r1, [r7, #2366]	; 0x93e
 800370e:	f107 0220 	add.w	r2, r7, #32
 8003712:	4603      	mov	r3, r0
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	4403      	add	r3, r0
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4413      	add	r3, r2
 800371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003720:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003724:	24c8      	movs	r4, #200	; 0xc8
 8003726:	fb04 f101 	mul.w	r1, r4, r1
 800372a:	4401      	add	r1, r0
 800372c:	3148      	adds	r1, #72	; 0x48
 800372e:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.y = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posy;
 8003732:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 8003736:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800373a:	21c8      	movs	r1, #200	; 0xc8
 800373c:	fb01 f303 	mul.w	r3, r1, r3
 8003740:	4413      	add	r3, r2
 8003742:	33b8      	adds	r3, #184	; 0xb8
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f897 193e 	ldrb.w	r1, [r7, #2366]	; 0x93e
 800374c:	f107 0220 	add.w	r2, r7, #32
 8003750:	4603      	mov	r3, r0
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	4403      	add	r3, r0
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4413      	add	r3, r2
 800375a:	3308      	adds	r3, #8
 800375c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003760:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003764:	24c8      	movs	r4, #200	; 0xc8
 8003766:	fb04 f101 	mul.w	r1, r4, r1
 800376a:	4401      	add	r1, r0
 800376c:	3150      	adds	r1, #80	; 0x50
 800376e:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.roll = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].roll;
 8003772:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 8003776:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800377a:	21c8      	movs	r1, #200	; 0xc8
 800377c:	fb01 f303 	mul.w	r3, r1, r3
 8003780:	4413      	add	r3, r2
 8003782:	33b8      	adds	r3, #184	; 0xb8
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f897 193e 	ldrb.w	r1, [r7, #2366]	; 0x93e
 800378c:	f107 0220 	add.w	r2, r7, #32
 8003790:	4603      	mov	r3, r0
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	4403      	add	r3, r0
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4413      	add	r3, r2
 800379a:	3310      	adds	r3, #16
 800379c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a0:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80037a4:	24c8      	movs	r4, #200	; 0xc8
 80037a6:	fb04 f101 	mul.w	r1, r4, r1
 80037aa:	4401      	add	r1, r0
 80037ac:	3160      	adds	r1, #96	; 0x60
 80037ae:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 80037b2:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 80037b6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80037ba:	21c8      	movs	r1, #200	; 0xc8
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	4413      	add	r3, r2
 80037c2:	f103 0158 	add.w	r1, r3, #88	; 0x58
 80037c6:	a3d6      	add	r3, pc, #856	; (adr r3, 8003b20 <StartDefaultTask+0x1708>)
 80037c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037cc:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = MOVE_TIME;
 80037d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037d4:	4bd4      	ldr	r3, [pc, #848]	; (8003b28 <StartDefaultTask+0x1710>)
 80037d6:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 80037da:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 80037de:	e038      	b.n	8003852 <StartDefaultTask+0x143a>
					  case SCARA_MOVE_DOWN_ON_SLOT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_SLOT;
 80037e0:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 80037e4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80037e8:	21c8      	movs	r1, #200	; 0xc8
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	4413      	add	r3, r2
 80037f0:	f103 0158 	add.w	r1, r3, #88	; 0x58
 80037f4:	a3c4      	add	r3, pc, #784	; (adr r3, 8003b08 <StartDefaultTask+0x16f0>)
 80037f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fa:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PUT_DOWN_TIME_ON_SLOT;
 80037fe:	a3c4      	add	r3, pc, #784	; (adr r3, 8003b10 <StartDefaultTask+0x16f8>)
 8003800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003804:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8003808:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 800380c:	e021      	b.n	8003852 <StartDefaultTask+0x143a>
					  case SCARA_RELEASE:{
						  state_time = DETACH_TIME;
 800380e:	a3c2      	add	r3, pc, #776	; (adr r3, 8003b18 <StartDefaultTask+0x1700>)
 8003810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003814:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8003818:	e9c1 2300 	strd	r2, r3, [r1]
						  scaraSetOutput(0);
 800381c:	2000      	movs	r0, #0
 800381e:	f006 ff93 	bl	800a748 <scaraSetOutput>
					  }
					  break;
 8003822:	e016      	b.n	8003852 <StartDefaultTask+0x143a>
					  case SCARA_MOVE_UP_ON_SLOT:{
						  state_time = PICK_UP_TIME_ON_SLOT;
 8003824:	a3ba      	add	r3, pc, #744	; (adr r3, 8003b10 <StartDefaultTask+0x16f8>)
 8003826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382a:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 800382e:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003832:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 8003836:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800383a:	21c8      	movs	r1, #200	; 0xc8
 800383c:	fb01 f303 	mul.w	r3, r1, r3
 8003840:	4413      	add	r3, r2
 8003842:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8003846:	a3b6      	add	r3, pc, #728	; (adr r3, 8003b20 <StartDefaultTask+0x1708>)
 8003848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384c:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003850:	bf00      	nop
				  }
				  memcpy(&duty_cmd.target_point, &Object[object_tail_pointer].object_position, sizeof(SCARA_PositionTypeDef));
 8003852:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 8003856:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800385a:	21c8      	movs	r1, #200	; 0xc8
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	18d1      	adds	r1, r2, r3
 8003862:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003866:	3328      	adds	r3, #40	; 0x28
 8003868:	22c0      	movs	r2, #192	; 0xc0
 800386a:	4618      	mov	r0, r3
 800386c:	f012 fc20 	bl	80160b0 <memcpy>
				  duty_cmd.time_total = state_time;
 8003870:	f507 61e5 	add.w	r1, r7, #1832	; 0x728
 8003874:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8003878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387c:	e9c1 2308 	strd	r2, r3, [r1, #32]
				  SCARA_StatusTypeDef status1;
				  duty_cmd.v_factor = 0;
 8003880:	f507 61e5 	add.w	r1, r7, #1832	; 0x728
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
				  if(operation_state == SCARA_ATTACH || operation_state == SCARA_RELEASE){
 8003890:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 8003894:	2b02      	cmp	r3, #2
 8003896:	d003      	beq.n	80038a0 <StartDefaultTask+0x1488>
 8003898:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 800389c:	2b06      	cmp	r3, #6
 800389e:	d103      	bne.n	80038a8 <StartDefaultTask+0x1490>
					  status1 = SCARA_STATUS_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	f887 392b 	strb.w	r3, [r7, #2347]	; 0x92b
 80038a6:	e031      	b.n	800390c <StartDefaultTask+0x14f4>
				  }else{
					  if(operation_state == SCARA_MOVE_DOWN_ON_OBJECT || operation_state == SCARA_MOVE_DOWN_ON_SLOT || operation_state == SCARA_MOVE_UP_ON_OBJECT || operation_state == SCARA_MOVE_UP_ON_SLOT){
 80038a8:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d00b      	beq.n	80038c8 <StartDefaultTask+0x14b0>
 80038b0:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 80038b4:	2b05      	cmp	r3, #5
 80038b6:	d007      	beq.n	80038c8 <StartDefaultTask+0x14b0>
 80038b8:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d003      	beq.n	80038c8 <StartDefaultTask+0x14b0>
 80038c0:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 80038c4:	2b07      	cmp	r3, #7
 80038c6:	d108      	bne.n	80038da <StartDefaultTask+0x14c2>
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LINEAR;
 80038c8:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80038cc:	2202      	movs	r2, #2
 80038ce:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QT;
 80038d0:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80038d4:	2203      	movs	r2, #3
 80038d6:	745a      	strb	r2, [r3, #17]
 80038d8:	e007      	b.n	80038ea <StartDefaultTask+0x14d2>
					  }else{
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 80038da:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80038de:	2200      	movs	r2, #0
 80038e0:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 80038e2:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80038e6:	2201      	movs	r2, #1
 80038e8:	745a      	strb	r2, [r3, #17]
					  }
					  status1 = scaraInitDuty(duty_cmd);
 80038ea:	f507 64e5 	add.w	r4, r7, #1832	; 0x728
 80038ee:	4668      	mov	r0, sp
 80038f0:	f104 0310 	add.w	r3, r4, #16
 80038f4:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80038f8:	4619      	mov	r1, r3
 80038fa:	f012 fbd9 	bl	80160b0 <memcpy>
 80038fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003902:	f002 f865 	bl	80059d0 <scaraInitDuty>
 8003906:	4603      	mov	r3, r0
 8003908:	f887 392b 	strb.w	r3, [r7, #2347]	; 0x92b
				  }
				  if ( SCARA_STATUS_OK == status1) {
 800390c:	f897 392b 	ldrb.w	r3, [r7, #2347]	; 0x92b
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10b      	bne.n	800392c <StartDefaultTask+0x1514>
				  	current_duty_state = SCARA_DUTY_STATE_FLOW;
 8003914:	2302      	movs	r3, #2
 8003916:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  	run_time = 0;
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8003926:	e9c1 2300 	strd	r2, r3, [r1]
 800392a:	e031      	b.n	8003990 <StartDefaultTask+0x1578>
				  } else {
					object_tail_pointer = (object_tail_pointer+1)%8;
 800392c:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 8003930:	3301      	adds	r3, #1
 8003932:	425a      	negs	r2, r3
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	f002 0207 	and.w	r2, r2, #7
 800393c:	bf58      	it	pl
 800393e:	4253      	negpl	r3, r2
 8003940:	f887 393e 	strb.w	r3, [r7, #2366]	; 0x93e
					operation_state = SCARA_MOVE_TO_TARGET;
 8003944:	2300      	movs	r3, #0
 8003946:	f887 393f 	strb.w	r3, [r7, #2367]	; 0x93f
					detail_array[0] = status1;
 800394a:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800394e:	f897 292b 	ldrb.w	r2, [r7, #2347]	; 0x92b
 8003952:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003954:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003958:	6899      	ldr	r1, [r3, #8]
 800395a:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 800395e:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8003962:	4413      	add	r3, r2
 8003964:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	2301      	movs	r3, #1
 800396c:	2007      	movs	r0, #7
 800396e:	f7fe fba5 	bl	80020bc <commandRespond1>
 8003972:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					total_respond_length += respond_lenght;
 8003976:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 800397a:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800397e:	4413      	add	r3, r2
 8003980:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
					LOG_REPORT("INIT FAIL", __LINE__);
 8003984:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 8003988:	4868      	ldr	r0, [pc, #416]	; (8003b2c <StartDefaultTask+0x1714>)
 800398a:	f7fe fbff 	bl	800218c <LOG_REPORT>
					break;
 800398e:	e094      	b.n	8003aba <StartDefaultTask+0x16a2>


		  case SCARA_DUTY_STATE_FLOW:{
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8003990:	a361      	add	r3, pc, #388	; (adr r3, 8003b18 <StartDefaultTask+0x1700>)
 8003992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003996:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 800399a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800399e:	f7fc fc75 	bl	800028c <__adddf3>
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 80039aa:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 80039ae:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80039b2:	ed93 0b00 	vldr	d0, [r3]
 80039b6:	f006 ff59 	bl	800a86c <scaraIsFinish>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d022      	beq.n	8003a06 <StartDefaultTask+0x15ee>
				current_duty_state = SCARA_DUTY_STATE_OPERATION;
 80039c0:	2304      	movs	r3, #4
 80039c2:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				if(operation_state == SCARA_MOVE_UP_ON_SLOT){
 80039c6:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 80039ca:	2b07      	cmp	r3, #7
 80039cc:	d10f      	bne.n	80039ee <StartDefaultTask+0x15d6>
					operation_state = SCARA_MOVE_TO_TARGET;
 80039ce:	2300      	movs	r3, #0
 80039d0:	f887 393f 	strb.w	r3, [r7, #2367]	; 0x93f
					object_tail_pointer = (object_tail_pointer+1)%8;
 80039d4:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 80039d8:	3301      	adds	r3, #1
 80039da:	425a      	negs	r2, r3
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	f002 0207 	and.w	r2, r2, #7
 80039e4:	bf58      	it	pl
 80039e6:	4253      	negpl	r3, r2
 80039e8:	f887 393e 	strb.w	r3, [r7, #2366]	; 0x93e
 80039ec:	e004      	b.n	80039f8 <StartDefaultTask+0x15e0>
				}else{
					operation_state += 1; //next state
 80039ee:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 80039f2:	3301      	adds	r3, #1
 80039f4:	f887 393f 	strb.w	r3, [r7, #2367]	; 0x93f
				}
				lowlayer_readTruePosition(&positionNext);
 80039f8:	484d      	ldr	r0, [pc, #308]	; (8003b30 <StartDefaultTask+0x1718>)
 80039fa:	f001 fac1 	bl	8004f80 <lowlayer_readTruePosition>
				kinematicForward(&positionNext);
 80039fe:	484c      	ldr	r0, [pc, #304]	; (8003b30 <StartDefaultTask+0x1718>)
 8003a00:	f000 fbba 	bl	8004178 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 8003a04:	e058      	b.n	8003ab8 <StartDefaultTask+0x16a0>
			  } else if(operation_state != SCARA_ATTACH && operation_state != SCARA_RELEASE){
 8003a06:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d054      	beq.n	8003ab8 <StartDefaultTask+0x16a0>
 8003a0e:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 8003a12:	2b06      	cmp	r3, #6
 8003a14:	d050      	beq.n	8003ab8 <StartDefaultTask+0x16a0>
				status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8003a16:	4c47      	ldr	r4, [pc, #284]	; (8003b34 <StartDefaultTask+0x171c>)
 8003a18:	4668      	mov	r0, sp
 8003a1a:	f104 0308 	add.w	r3, r4, #8
 8003a1e:	22b8      	movs	r2, #184	; 0xb8
 8003a20:	4619      	mov	r1, r3
 8003a22:	f012 fb45 	bl	80160b0 <memcpy>
 8003a26:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003a2a:	4841      	ldr	r0, [pc, #260]	; (8003b30 <StartDefaultTask+0x1718>)
 8003a2c:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8003a30:	ed91 0b00 	vldr	d0, [r1]
 8003a34:	f004 ffe6 	bl	8008a04 <scaraFlowDuty>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f887 38ff 	strb.w	r3, [r7, #2303]	; 0x8ff
				if ( SCARA_STATUS_OK == status) {
 8003a3e:	f897 38ff 	ldrb.w	r3, [r7, #2303]	; 0x8ff
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d113      	bne.n	8003a6e <StartDefaultTask+0x1656>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003a46:	4c3b      	ldr	r4, [pc, #236]	; (8003b34 <StartDefaultTask+0x171c>)
 8003a48:	4a39      	ldr	r2, [pc, #228]	; (8003b30 <StartDefaultTask+0x1718>)
 8003a4a:	ab2c      	add	r3, sp, #176	; 0xb0
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	22c0      	movs	r2, #192	; 0xc0
 8003a50:	4618      	mov	r0, r3
 8003a52:	f012 fb2d 	bl	80160b0 <memcpy>
 8003a56:	4668      	mov	r0, sp
 8003a58:	f104 0310 	add.w	r3, r4, #16
 8003a5c:	22b0      	movs	r2, #176	; 0xb0
 8003a5e:	4619      	mov	r1, r3
 8003a60:	f012 fb26 	bl	80160b0 <memcpy>
 8003a64:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003a68:	f001 fc1a 	bl	80052a0 <lowlayer_computeAndWritePulse>
		  break;
 8003a6c:	e024      	b.n	8003ab8 <StartDefaultTask+0x16a0>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
					  detail_array[0] = status;
 8003a74:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8003a78:	f897 28ff 	ldrb.w	r2, [r7, #2303]	; 0x8ff
 8003a7c:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003a7e:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003a82:	6899      	ldr	r1, [r3, #8]
 8003a84:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8003a88:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	2301      	movs	r3, #1
 8003a96:	2007      	movs	r0, #7
 8003a98:	f7fe fb10 	bl	80020bc <commandRespond1>
 8003a9c:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					  total_respond_length += respond_lenght;
 8003aa0:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8003aa4:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
		  break;
 8003aae:	e003      	b.n	8003ab8 <StartDefaultTask+0x16a0>

		  case SCARA_DUTY_STATE_FINISH:

			  //error
			  //free(Object);
		  break;
 8003ab0:	bf00      	nop
 8003ab2:	e005      	b.n	8003ac0 <StartDefaultTask+0x16a8>
				  break;
 8003ab4:	bf00      	nop
 8003ab6:	e003      	b.n	8003ac0 <StartDefaultTask+0x16a8>
		  break;
 8003ab8:	bf00      	nop
		  }
	  }
	  break;
 8003aba:	e001      	b.n	8003ac0 <StartDefaultTask+0x16a8>
	  break;
 8003abc:	bf00      	nop
 8003abe:	e000      	b.n	8003ac2 <StartDefaultTask+0x16aa>
	  break;
 8003ac0:	bf00      	nop
	//   // Send through USB
	//   if (usb_lenght > 0) {
	// 	  CDC_Transmit_FS(usb_buff, (uint16_t)usb_lenght);
	//   }

	if(total_respond_length > 0){
 8003ac2:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	dd08      	ble.n	8003adc <StartDefaultTask+0x16c4>
		CDC_Transmit_FS(respond, total_respond_length);
 8003aca:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f011 fe6c 	bl	80157b4 <CDC_Transmit_FS>
	}

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 8003adc:	f897 3957 	ldrb.w	r3, [r7, #2391]	; 0x957
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f006 fe63 	bl	800a7ac <scaraSetMethod>
	  scaraSetMode(current_mode);
 8003ae6:	f897 3956 	ldrb.w	r3, [r7, #2390]	; 0x956
 8003aea:	4618      	mov	r0, r3
 8003aec:	f006 fe4e 	bl	800a78c <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 8003af0:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 8003af4:	4618      	mov	r0, r3
 8003af6:	f006 fe39 	bl	800a76c <scaraSetDutyState>

    osDelay(1);
 8003afa:	2001      	movs	r0, #1
 8003afc:	f00e ff35 	bl	801296a <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 8003b00:	f7fe bcf2 	b.w	80024e8 <StartDefaultTask+0xd0>
 8003b04:	f3af 8000 	nop.w
 8003b08:	00000000 	.word	0x00000000
 8003b0c:	405fa000 	.word	0x405fa000
 8003b10:	40000000 	.word	0x40000000
 8003b14:	3fd33333 	.word	0x3fd33333
 8003b18:	40000000 	.word	0x40000000
 8003b1c:	3f847ae1 	.word	0x3f847ae1
 8003b20:	00000000 	.word	0x00000000
 8003b24:	40606000 	.word	0x40606000
 8003b28:	3ff33333 	.word	0x3ff33333
 8003b2c:	0801c47c 	.word	0x0801c47c
 8003b30:	2000ba70 	.word	0x2000ba70
 8003b34:	2000b8f0 	.word	0x2000b8f0

08003b38 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 8003b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b3a:	f2ad 5dd4 	subw	sp, sp, #1492	; 0x5d4
 8003b3e:	af70      	add	r7, sp, #448	; 0x1c0
 8003b40:	1d3b      	adds	r3, r7, #4
 8003b42:	6018      	str	r0, [r3, #0]
	int32_t				respond_lenght;
	//int32_t				message_lenght;
	int32_t 			detail_length;

	// Default value
	duty_cmd.key_speed = 1;
 8003b44:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003b48:	2201      	movs	r2, #1
 8003b4a:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 8003b4c:	4964      	ldr	r1, [pc, #400]	; (8003ce0 <Start_USB_RX_Task+0x1a8>)
 8003b4e:	4865      	ldr	r0, [pc, #404]	; (8003ce4 <Start_USB_RX_Task+0x1ac>)
 8003b50:	f000 ff84 	bl	8004a5c <ringBuff_DistanceOf>
 8003b54:	f8c7 0408 	str.w	r0, [r7, #1032]	; 0x408
		  if (distance != -1) {
 8003b58:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b60:	d0f4      	beq.n	8003b4c <Start_USB_RX_Task+0x14>
 8003b62:	466b      	mov	r3, sp
 8003b64:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 8003b66:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003b6a:	1c5c      	adds	r4, r3, #1
 8003b6c:	1e63      	subs	r3, r4, #1
 8003b6e:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8003b72:	4623      	mov	r3, r4
 8003b74:	4618      	mov	r0, r3
 8003b76:	f04f 0100 	mov.w	r1, #0
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	00cb      	lsls	r3, r1, #3
 8003b84:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003b88:	00c2      	lsls	r2, r0, #3
 8003b8a:	4623      	mov	r3, r4
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f04f 0100 	mov.w	r1, #0
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	f04f 0300 	mov.w	r3, #0
 8003b9a:	00cb      	lsls	r3, r1, #3
 8003b9c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003ba0:	00c2      	lsls	r2, r0, #3
 8003ba2:	4623      	mov	r3, r4
 8003ba4:	3307      	adds	r3, #7
 8003ba6:	08db      	lsrs	r3, r3, #3
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	ebad 0d03 	sub.w	sp, sp, r3
 8003bae:	ab70      	add	r3, sp, #448	; 0x1c0
 8003bb0:	3300      	adds	r3, #0
 8003bb2:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 8003bb6:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 8003bba:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4848      	ldr	r0, [pc, #288]	; (8003ce4 <Start_USB_RX_Task+0x1ac>)
 8003bc4:	f000 ff29 	bl	8004a1a <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1, data_packet);
 8003bc8:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
 8003bcc:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	f107 020c 	add.w	r2, r7, #12
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	f7fe fb1e 	bl	8002218 <unPackPayload>
 8003bdc:	f8c7 03fc 	str.w	r0, [r7, #1020]	; 0x3fc

			  if( -1 == ret) {
 8003be0:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be8:	d077      	beq.n	8003cda <Start_USB_RX_Task+0x1a2>
				  //LOG_REPORT("UNPACK FAIL", __LINE__);
			  } else {
				  //LOG_REPORT((char*) temp, __LINE__);
				  cmd_type = packetRead(data_packet, ret, &id_command, &duty_cmd);
 8003bea:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003bee:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8003bf2:	f107 000c 	add.w	r0, r7, #12
 8003bf6:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 8003bfa:	f7fd f9f9 	bl	8000ff0 <packetRead>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb
				  memset(detail, 0, sizeof(detail));
 8003c04:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003c08:	2287      	movs	r2, #135	; 0x87
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f012 fa77 	bl	8016100 <memset>
				  detail_length = 0;
 8003c12:	f107 0308 	add.w	r3, r7, #8
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]
				  rpd_type = commandReply(cmd_type, duty_cmd, detail, &detail_length);
 8003c1a:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8003c1e:	f897 53fb 	ldrb.w	r5, [r7, #1019]	; 0x3fb
 8003c22:	f107 0308 	add.w	r3, r7, #8
 8003c26:	936f      	str	r3, [sp, #444]	; 0x1bc
 8003c28:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003c2c:	936e      	str	r3, [sp, #440]	; 0x1b8
 8003c2e:	4668      	mov	r0, sp
 8003c30:	f104 0308 	add.w	r3, r4, #8
 8003c34:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8003c38:	4619      	mov	r1, r3
 8003c3a:	f012 fa39 	bl	80160b0 <memcpy>
 8003c3e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003c42:	4628      	mov	r0, r5
 8003c44:	f7fe f854 	bl	8001cf0 <commandReply>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
				  //LOG_REPORT("tail", usb_rx_ringbuff.tail);
				  if ( RPD_DUTY == rpd_type) {
 8003c4e:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8003c52:	2b09      	cmp	r3, #9
 8003c54:	d123      	bne.n	8003c9e <Start_USB_RX_Task+0x166>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
					  // Wait allocate
					  while (dataMail == NULL) {
 8003c5c:	e008      	b.n	8003c70 <Start_USB_RX_Task+0x138>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8003c5e:	4b22      	ldr	r3, [pc, #136]	; (8003ce8 <Start_USB_RX_Task+0x1b0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f04f 31ff 	mov.w	r1, #4294967295
 8003c66:	4618      	mov	r0, r3
 8003c68:	f00f f890 	bl	8012d8c <osMailAlloc>
 8003c6c:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
					  while (dataMail == NULL) {
 8003c70:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0f2      	beq.n	8003c5e <Start_USB_RX_Task+0x126>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 8003c78:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003c7c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8003c80:	4619      	mov	r1, r3
 8003c82:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 8003c86:	f012 fa13 	bl	80160b0 <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 8003c8a:	4b17      	ldr	r3, [pc, #92]	; (8003ce8 <Start_USB_RX_Task+0x1b0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 8003c92:	4618      	mov	r0, r3
 8003c94:	f00f f890 	bl	8012db8 <osMailPut>
 8003c98:	f8c7 03f0 	str.w	r0, [r7, #1008]	; 0x3f0
 8003c9c:	e01d      	b.n	8003cda <Start_USB_RX_Task+0x1a2>
						  //LOG_REPORT("DUTY SEND", __LINE__);
					  }

				//   }else if( RPD_POSITION == rpd_type) { 
				// 	  CDC_Transmit_FS(detail, 84);
				  }else if(rpd_type == RPD_TRANSFER){
 8003c9e:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8003ca2:	2b0a      	cmp	r3, #10
 8003ca4:	d019      	beq.n	8003cda <Start_USB_RX_Task+0x1a2>

				  }else {
					//   memset(respond, 0, sizeof(respond));
					//   memset(message, 0, sizeof(message));
					  respond_lenght	= commandRespond1(rpd_type, cmd_type,
 8003ca6:	f897 13fb 	ldrb.w	r1, [r7, #1019]	; 0x3fb
 8003caa:	f107 0308 	add.w	r3, r7, #8
 8003cae:	681c      	ldr	r4, [r3, #0]
 8003cb0:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8003cb4:	f897 03fa 	ldrb.w	r0, [r7, #1018]	; 0x3fa
 8003cb8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	4623      	mov	r3, r4
 8003cc0:	f7fe f9fc 	bl	80020bc <commandRespond1>
 8003cc4:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
							  	  	  	  (char *)detail, detail_length,
										  (char *)respond);
					  //message_lenght	= packPayload(respond, message, respond_lenght);
					  CDC_Transmit_FS(respond, respond_lenght);
 8003cc8:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f011 fd6d 	bl	80157b4 <CDC_Transmit_FS>
 8003cda:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 8003cdc:	e736      	b.n	8003b4c <Start_USB_RX_Task+0x14>
 8003cde:	bf00      	nop
 8003ce0:	0801c538 	.word	0x0801c538
 8003ce4:	20000004 	.word	0x20000004
 8003ce8:	2000ac6c 	.word	0x2000ac6c

08003cec <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	b292      	uxth	r2, r2
 8003cfc:	801a      	strh	r2, [r3, #0]
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	b29b      	uxth	r3, r3
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8003d2a:	1d3b      	adds	r3, r7, #4
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	605a      	str	r2, [r3, #4]
 8003d32:	609a      	str	r2, [r3, #8]
 8003d34:	60da      	str	r2, [r3, #12]
 8003d36:	611a      	str	r2, [r3, #16]
 8003d38:	615a      	str	r2, [r3, #20]
 8003d3a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8003d3c:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <MX_FSMC_Init+0xb8>)
 8003d3e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003d42:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003d44:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <MX_FSMC_Init+0xb8>)
 8003d46:	4a26      	ldr	r2, [pc, #152]	; (8003de0 <MX_FSMC_Init+0xbc>)
 8003d48:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8003d4a:	4b24      	ldr	r3, [pc, #144]	; (8003ddc <MX_FSMC_Init+0xb8>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8003d50:	4b22      	ldr	r3, [pc, #136]	; (8003ddc <MX_FSMC_Init+0xb8>)
 8003d52:	2202      	movs	r2, #2
 8003d54:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8003d56:	4b21      	ldr	r3, [pc, #132]	; (8003ddc <MX_FSMC_Init+0xb8>)
 8003d58:	2208      	movs	r2, #8
 8003d5a:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003d5c:	4b1f      	ldr	r3, [pc, #124]	; (8003ddc <MX_FSMC_Init+0xb8>)
 8003d5e:	2210      	movs	r2, #16
 8003d60:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8003d62:	4b1e      	ldr	r3, [pc, #120]	; (8003ddc <MX_FSMC_Init+0xb8>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003d68:	4b1c      	ldr	r3, [pc, #112]	; (8003ddc <MX_FSMC_Init+0xb8>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8003d6e:	4b1b      	ldr	r3, [pc, #108]	; (8003ddc <MX_FSMC_Init+0xb8>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8003d74:	4b19      	ldr	r3, [pc, #100]	; (8003ddc <MX_FSMC_Init+0xb8>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003d7a:	4b18      	ldr	r3, [pc, #96]	; (8003ddc <MX_FSMC_Init+0xb8>)
 8003d7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d80:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8003d82:	4b16      	ldr	r3, [pc, #88]	; (8003ddc <MX_FSMC_Init+0xb8>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8003d88:	4b14      	ldr	r3, [pc, #80]	; (8003ddc <MX_FSMC_Init+0xb8>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003d8e:	4b13      	ldr	r3, [pc, #76]	; (8003ddc <MX_FSMC_Init+0xb8>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8003d94:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <MX_FSMC_Init+0xb8>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8003d9a:	4b10      	ldr	r3, [pc, #64]	; (8003ddc <MX_FSMC_Init+0xb8>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8003da0:	230f      	movs	r3, #15
 8003da2:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8003da4:	230f      	movs	r3, #15
 8003da6:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8003da8:	23ff      	movs	r3, #255	; 0xff
 8003daa:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8003dac:	230f      	movs	r3, #15
 8003dae:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003db0:	2310      	movs	r3, #16
 8003db2:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003db4:	2311      	movs	r3, #17
 8003db6:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8003dbc:	1d3b      	adds	r3, r7, #4
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4806      	ldr	r0, [pc, #24]	; (8003ddc <MX_FSMC_Init+0xb8>)
 8003dc4:	f008 fb6e 	bl	800c4a4 <HAL_NOR_Init>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8003dce:	f000 fd85 	bl	80048dc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8003dd2:	bf00      	nop
 8003dd4:	3720      	adds	r7, #32
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	2000ac78 	.word	0x2000ac78
 8003de0:	a0000104 	.word	0xa0000104

08003de4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dea:	1d3b      	adds	r3, r7, #4
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	609a      	str	r2, [r3, #8]
 8003df4:	60da      	str	r2, [r3, #12]
 8003df6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8003df8:	4b24      	ldr	r3, [pc, #144]	; (8003e8c <HAL_FSMC_MspInit+0xa8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d140      	bne.n	8003e82 <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8003e00:	4b22      	ldr	r3, [pc, #136]	; (8003e8c <HAL_FSMC_MspInit+0xa8>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003e06:	2300      	movs	r3, #0
 8003e08:	603b      	str	r3, [r7, #0]
 8003e0a:	4b21      	ldr	r3, [pc, #132]	; (8003e90 <HAL_FSMC_MspInit+0xac>)
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0e:	4a20      	ldr	r2, [pc, #128]	; (8003e90 <HAL_FSMC_MspInit+0xac>)
 8003e10:	f043 0301 	orr.w	r3, r3, #1
 8003e14:	6393      	str	r3, [r2, #56]	; 0x38
 8003e16:	4b1e      	ldr	r3, [pc, #120]	; (8003e90 <HAL_FSMC_MspInit+0xac>)
 8003e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003e22:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003e26:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e28:	2302      	movs	r3, #2
 8003e2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e30:	2303      	movs	r3, #3
 8003e32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003e34:	230c      	movs	r3, #12
 8003e36:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e38:	1d3b      	adds	r3, r7, #4
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4815      	ldr	r0, [pc, #84]	; (8003e94 <HAL_FSMC_MspInit+0xb0>)
 8003e3e:	f008 f97b 	bl	800c138 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8003e42:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8003e46:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e48:	2302      	movs	r3, #2
 8003e4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e50:	2303      	movs	r3, #3
 8003e52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003e54:	230c      	movs	r3, #12
 8003e56:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e58:	1d3b      	adds	r3, r7, #4
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	480e      	ldr	r0, [pc, #56]	; (8003e98 <HAL_FSMC_MspInit+0xb4>)
 8003e5e:	f008 f96b 	bl	800c138 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003e62:	2380      	movs	r3, #128	; 0x80
 8003e64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e66:	2302      	movs	r3, #2
 8003e68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003e72:	230c      	movs	r3, #12
 8003e74:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e76:	1d3b      	adds	r3, r7, #4
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4808      	ldr	r0, [pc, #32]	; (8003e9c <HAL_FSMC_MspInit+0xb8>)
 8003e7c:	f008 f95c 	bl	800c138 <HAL_GPIO_Init>
 8003e80:	e000      	b.n	8003e84 <HAL_FSMC_MspInit+0xa0>
    return;
 8003e82:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20001004 	.word	0x20001004
 8003e90:	40023800 	.word	0x40023800
 8003e94:	40021000 	.word	0x40021000
 8003e98:	40020c00 	.word	0x40020c00
 8003e9c:	40020400 	.word	0x40020400

08003ea0 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8003ea8:	f7ff ff9c 	bl	8003de4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8003eac:	bf00      	nop
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	0000      	movs	r0, r0
	...

08003eb8 <update_gcode_point>:
 */

#include "gcode_handler.h"

void update_gcode_point(DUTY_Command_TypeDef *duty_cmd, SCARA_Gcode_Cor_TypeDef gcode_point)
{
 8003eb8:	b084      	sub	sp, #16
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b082      	sub	sp, #8
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	f107 0014 	add.w	r0, r7, #20
 8003ec6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	duty_cmd->target_point.x = (double)gcode_point.X * COR_INVERSE_SCALE + offset_x;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fc fb29 	bl	8000524 <__aeabi_i2d>
 8003ed2:	a343      	add	r3, pc, #268	; (adr r3, 8003fe0 <update_gcode_point+0x128>)
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	f7fc fb8e 	bl	80005f8 <__aeabi_dmul>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4b40      	ldr	r3, [pc, #256]	; (8003fe8 <update_gcode_point+0x130>)
 8003ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eea:	f7fc f9cf 	bl	800028c <__adddf3>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
    duty_cmd->target_point.y = (double)gcode_point.Y * COR_INVERSE_SCALE + offset_y;
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fc fb12 	bl	8000524 <__aeabi_i2d>
 8003f00:	a337      	add	r3, pc, #220	; (adr r3, 8003fe0 <update_gcode_point+0x128>)
 8003f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f06:	f7fc fb77 	bl	80005f8 <__aeabi_dmul>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4610      	mov	r0, r2
 8003f10:	4619      	mov	r1, r3
 8003f12:	4b36      	ldr	r3, [pc, #216]	; (8003fec <update_gcode_point+0x134>)
 8003f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f18:	f7fc f9b8 	bl	800028c <__adddf3>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
    if(gcode_point.type_define[1] == UP_Z){
 8003f26:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d10d      	bne.n	8003f4a <update_gcode_point+0x92>
  	  duty_cmd->target_point.z = up_z_height + offset_z;
 8003f2e:	4b30      	ldr	r3, [pc, #192]	; (8003ff0 <update_gcode_point+0x138>)
 8003f30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f34:	4b2f      	ldr	r3, [pc, #188]	; (8003ff4 <update_gcode_point+0x13c>)
 8003f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3a:	f7fc f9a7 	bl	800028c <__adddf3>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8003f48:	e00c      	b.n	8003f64 <update_gcode_point+0xac>
    }else{
  	  duty_cmd->target_point.z = down_z_height + offset_z;
 8003f4a:	4b2b      	ldr	r3, [pc, #172]	; (8003ff8 <update_gcode_point+0x140>)
 8003f4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f50:	4b28      	ldr	r3, [pc, #160]	; (8003ff4 <update_gcode_point+0x13c>)
 8003f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f56:	f7fc f999 	bl	800028c <__adddf3>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
    }
    duty_cmd->target_point.roll = roll_angle;
 8003f64:	4b25      	ldr	r3, [pc, #148]	; (8003ffc <update_gcode_point+0x144>)
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    duty_cmd->v_factor = (double)gcode_point.F * COR_INVERSE_SCALE / V_MOVE_MAX;
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fc fad6 	bl	8000524 <__aeabi_i2d>
 8003f78:	a319      	add	r3, pc, #100	; (adr r3, 8003fe0 <update_gcode_point+0x128>)
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	f7fc fb3b 	bl	80005f8 <__aeabi_dmul>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4610      	mov	r0, r2
 8003f88:	4619      	mov	r1, r3
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	4b1c      	ldr	r3, [pc, #112]	; (8004000 <update_gcode_point+0x148>)
 8003f90:	f7fc fc5c 	bl	800084c <__aeabi_ddiv>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
    duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	741a      	strb	r2, [r3, #16]
    duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	731a      	strb	r2, [r3, #12]
    duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2202      	movs	r2, #2
 8003fae:	745a      	strb	r2, [r3, #17]
    if(gcode_point.type_define[0] == LINEAR_TYPE){
 8003fb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d103      	bne.n	8003fc0 <update_gcode_point+0x108>
  	  duty_cmd->path_type = DUTY_PATH_LINE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	739a      	strb	r2, [r3, #14]
 8003fbe:	e002      	b.n	8003fc6 <update_gcode_point+0x10e>
    }else if(gcode_point.type_define[0] == ARC_AW_TYPE){
 8003fc0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003fc4:	2b03      	cmp	r3, #3

    }else if(gcode_point.type_define[0] == ARC_CW_TYPE){

    }
    duty_cmd->path_type = DUTY_PATH_LINE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	739a      	strb	r2, [r3, #14]
    duty_cmd->space_type = DUTY_SPACE_TASK;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	735a      	strb	r2, [r3, #13]
}
 8003fd2:	bf00      	nop
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fdc:	b004      	add	sp, #16
 8003fde:	4770      	bx	lr
 8003fe0:	a0000000 	.word	0xa0000000
 8003fe4:	3eb0c6f7 	.word	0x3eb0c6f7
 8003fe8:	20004d80 	.word	0x20004d80
 8003fec:	2000ab58 	.word	0x2000ab58
 8003ff0:	20004d68 	.word	0x20004d68
 8003ff4:	2000ab50 	.word	0x2000ab50
 8003ff8:	20004d70 	.word	0x20004d70
 8003ffc:	20004d78 	.word	0x20004d78
 8004000:	40877000 	.word	0x40877000

08004004 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08a      	sub	sp, #40	; 0x28
 8004008:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800400a:	f107 0314 	add.w	r3, r7, #20
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	605a      	str	r2, [r3, #4]
 8004014:	609a      	str	r2, [r3, #8]
 8004016:	60da      	str	r2, [r3, #12]
 8004018:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800401a:	2300      	movs	r3, #0
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	4b51      	ldr	r3, [pc, #324]	; (8004164 <MX_GPIO_Init+0x160>)
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	4a50      	ldr	r2, [pc, #320]	; (8004164 <MX_GPIO_Init+0x160>)
 8004024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004028:	6313      	str	r3, [r2, #48]	; 0x30
 800402a:	4b4e      	ldr	r3, [pc, #312]	; (8004164 <MX_GPIO_Init+0x160>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004032:	613b      	str	r3, [r7, #16]
 8004034:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004036:	2300      	movs	r3, #0
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	4b4a      	ldr	r3, [pc, #296]	; (8004164 <MX_GPIO_Init+0x160>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	4a49      	ldr	r2, [pc, #292]	; (8004164 <MX_GPIO_Init+0x160>)
 8004040:	f043 0301 	orr.w	r3, r3, #1
 8004044:	6313      	str	r3, [r2, #48]	; 0x30
 8004046:	4b47      	ldr	r3, [pc, #284]	; (8004164 <MX_GPIO_Init+0x160>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004052:	2300      	movs	r3, #0
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	4b43      	ldr	r3, [pc, #268]	; (8004164 <MX_GPIO_Init+0x160>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	4a42      	ldr	r2, [pc, #264]	; (8004164 <MX_GPIO_Init+0x160>)
 800405c:	f043 0310 	orr.w	r3, r3, #16
 8004060:	6313      	str	r3, [r2, #48]	; 0x30
 8004062:	4b40      	ldr	r3, [pc, #256]	; (8004164 <MX_GPIO_Init+0x160>)
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	f003 0310 	and.w	r3, r3, #16
 800406a:	60bb      	str	r3, [r7, #8]
 800406c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800406e:	2300      	movs	r3, #0
 8004070:	607b      	str	r3, [r7, #4]
 8004072:	4b3c      	ldr	r3, [pc, #240]	; (8004164 <MX_GPIO_Init+0x160>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	4a3b      	ldr	r2, [pc, #236]	; (8004164 <MX_GPIO_Init+0x160>)
 8004078:	f043 0302 	orr.w	r3, r3, #2
 800407c:	6313      	str	r3, [r2, #48]	; 0x30
 800407e:	4b39      	ldr	r3, [pc, #228]	; (8004164 <MX_GPIO_Init+0x160>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	607b      	str	r3, [r7, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800408a:	2300      	movs	r3, #0
 800408c:	603b      	str	r3, [r7, #0]
 800408e:	4b35      	ldr	r3, [pc, #212]	; (8004164 <MX_GPIO_Init+0x160>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	4a34      	ldr	r2, [pc, #208]	; (8004164 <MX_GPIO_Init+0x160>)
 8004094:	f043 0308 	orr.w	r3, r3, #8
 8004098:	6313      	str	r3, [r2, #48]	; 0x30
 800409a:	4b32      	ldr	r3, [pc, #200]	; (8004164 <MX_GPIO_Init+0x160>)
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 80040a6:	2200      	movs	r2, #0
 80040a8:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 80040ac:	482e      	ldr	r0, [pc, #184]	; (8004168 <MX_GPIO_Init+0x164>)
 80040ae:	f008 f9df 	bl	800c470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 80040b2:	2200      	movs	r2, #0
 80040b4:	f641 0148 	movw	r1, #6216	; 0x1848
 80040b8:	482c      	ldr	r0, [pc, #176]	; (800416c <MX_GPIO_Init+0x168>)
 80040ba:	f008 f9d9 	bl	800c470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80040be:	2200      	movs	r2, #0
 80040c0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80040c4:	482a      	ldr	r0, [pc, #168]	; (8004170 <MX_GPIO_Init+0x16c>)
 80040c6:	f008 f9d3 	bl	800c470 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 80040ca:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 80040ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040d0:	2301      	movs	r3, #1
 80040d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d8:	2300      	movs	r3, #0
 80040da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040dc:	f107 0314 	add.w	r3, r7, #20
 80040e0:	4619      	mov	r1, r3
 80040e2:	4821      	ldr	r0, [pc, #132]	; (8004168 <MX_GPIO_Init+0x164>)
 80040e4:	f008 f828 	bl	800c138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 80040e8:	f640 0348 	movw	r3, #2120	; 0x848
 80040ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040ee:	2301      	movs	r3, #1
 80040f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040f6:	2300      	movs	r3, #0
 80040f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040fa:	f107 0314 	add.w	r3, r7, #20
 80040fe:	4619      	mov	r1, r3
 8004100:	481a      	ldr	r0, [pc, #104]	; (800416c <MX_GPIO_Init+0x168>)
 8004102:	f008 f819 	bl	800c138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 8004106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800410a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800410c:	2301      	movs	r3, #1
 800410e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004110:	2300      	movs	r3, #0
 8004112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004114:	2303      	movs	r3, #3
 8004116:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 8004118:	f107 0314 	add.w	r3, r7, #20
 800411c:	4619      	mov	r1, r3
 800411e:	4813      	ldr	r0, [pc, #76]	; (800416c <MX_GPIO_Init+0x168>)
 8004120:	f008 f80a 	bl	800c138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 8004124:	f242 0304 	movw	r3, #8196	; 0x2004
 8004128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800412a:	2300      	movs	r3, #0
 800412c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800412e:	2301      	movs	r3, #1
 8004130:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004132:	f107 0314 	add.w	r3, r7, #20
 8004136:	4619      	mov	r1, r3
 8004138:	480c      	ldr	r0, [pc, #48]	; (800416c <MX_GPIO_Init+0x168>)
 800413a:	f007 fffd 	bl	800c138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 800413e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004144:	2301      	movs	r3, #1
 8004146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004148:	2300      	movs	r3, #0
 800414a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800414c:	2300      	movs	r3, #0
 800414e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004150:	f107 0314 	add.w	r3, r7, #20
 8004154:	4619      	mov	r1, r3
 8004156:	4806      	ldr	r0, [pc, #24]	; (8004170 <MX_GPIO_Init+0x16c>)
 8004158:	f007 ffee 	bl	800c138 <HAL_GPIO_Init>

}
 800415c:	bf00      	nop
 800415e:	3728      	adds	r7, #40	; 0x28
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40023800 	.word	0x40023800
 8004168:	40020400 	.word	0x40020400
 800416c:	40020c00 	.word	0x40020c00
 8004170:	40020000 	.word	0x40020000
 8004174:	00000000 	.word	0x00000000

08004178 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8004178:	b5b0      	push	{r4, r5, r7, lr}
 800417a:	b08a      	sub	sp, #40	; 0x28
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8004186:	eeb0 0a47 	vmov.f32	s0, s14
 800418a:	eef0 0a67 	vmov.f32	s1, s15
 800418e:	f016 fc6f 	bl	801aa70 <cos>
 8004192:	ec51 0b10 	vmov	r0, r1, d0
 8004196:	a382      	add	r3, pc, #520	; (adr r3, 80043a0 <kinematicForward+0x228>)
 8004198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419c:	f7fc fa2c 	bl	80005f8 <__aeabi_dmul>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4614      	mov	r4, r2
 80041a6:	461d      	mov	r5, r3
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80041b4:	f7fc f86a 	bl	800028c <__adddf3>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	ec43 2b17 	vmov	d7, r2, r3
 80041c0:	eeb0 0a47 	vmov.f32	s0, s14
 80041c4:	eef0 0a67 	vmov.f32	s1, s15
 80041c8:	f016 fc52 	bl	801aa70 <cos>
 80041cc:	ec51 0b10 	vmov	r0, r1, d0
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	4b78      	ldr	r3, [pc, #480]	; (80043b8 <kinematicForward+0x240>)
 80041d6:	f7fc fa0f 	bl	80005f8 <__aeabi_dmul>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4620      	mov	r0, r4
 80041e0:	4629      	mov	r1, r5
 80041e2:	f7fc f853 	bl	800028c <__adddf3>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4614      	mov	r4, r2
 80041ec:	461d      	mov	r5, r3
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80041fa:	f7fc f847 	bl	800028c <__adddf3>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4610      	mov	r0, r2
 8004204:	4619      	mov	r1, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800420c:	f7fc f83c 	bl	8000288 <__aeabi_dsub>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	ec43 2b17 	vmov	d7, r2, r3
 8004218:	eeb0 0a47 	vmov.f32	s0, s14
 800421c:	eef0 0a67 	vmov.f32	s1, s15
 8004220:	f016 fc26 	bl	801aa70 <cos>
 8004224:	ec51 0b10 	vmov	r0, r1, d0
 8004228:	a35b      	add	r3, pc, #364	; (adr r3, 8004398 <kinematicForward+0x220>)
 800422a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422e:	f7fc f9e3 	bl	80005f8 <__aeabi_dmul>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
	x =   a1*cos(pnt->Theta1)
 8004236:	4620      	mov	r0, r4
 8004238:	4629      	mov	r1, r5
 800423a:	f7fc f827 	bl	800028c <__adddf3>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	e9c7 2308 	strd	r2, r3, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800424c:	eeb0 0a47 	vmov.f32	s0, s14
 8004250:	eef0 0a67 	vmov.f32	s1, s15
 8004254:	f016 fca4 	bl	801aba0 <sin>
 8004258:	ec51 0b10 	vmov	r0, r1, d0
 800425c:	a350      	add	r3, pc, #320	; (adr r3, 80043a0 <kinematicForward+0x228>)
 800425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004262:	f7fc f9c9 	bl	80005f8 <__aeabi_dmul>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	4614      	mov	r4, r2
 800426c:	461d      	mov	r5, r3
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800427a:	f7fc f807 	bl	800028c <__adddf3>
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	ec43 2b17 	vmov	d7, r2, r3
 8004286:	eeb0 0a47 	vmov.f32	s0, s14
 800428a:	eef0 0a67 	vmov.f32	s1, s15
 800428e:	f016 fc87 	bl	801aba0 <sin>
 8004292:	ec51 0b10 	vmov	r0, r1, d0
 8004296:	f04f 0200 	mov.w	r2, #0
 800429a:	4b47      	ldr	r3, [pc, #284]	; (80043b8 <kinematicForward+0x240>)
 800429c:	f7fc f9ac 	bl	80005f8 <__aeabi_dmul>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4620      	mov	r0, r4
 80042a6:	4629      	mov	r1, r5
 80042a8:	f7fb fff0 	bl	800028c <__adddf3>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4614      	mov	r4, r2
 80042b2:	461d      	mov	r5, r3
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80042c0:	f7fb ffe4 	bl	800028c <__adddf3>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4610      	mov	r0, r2
 80042ca:	4619      	mov	r1, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80042d2:	f7fb ffd9 	bl	8000288 <__aeabi_dsub>
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	ec43 2b17 	vmov	d7, r2, r3
 80042de:	eeb0 0a47 	vmov.f32	s0, s14
 80042e2:	eef0 0a67 	vmov.f32	s1, s15
 80042e6:	f016 fc5b 	bl	801aba0 <sin>
 80042ea:	ec51 0b10 	vmov	r0, r1, d0
 80042ee:	a32a      	add	r3, pc, #168	; (adr r3, 8004398 <kinematicForward+0x220>)
 80042f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f4:	f7fc f980 	bl	80005f8 <__aeabi_dmul>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
	y =   a1*sin(pnt->Theta1)
 80042fc:	4620      	mov	r0, r4
 80042fe:	4629      	mov	r1, r5
 8004300:	f7fb ffc4 	bl	800028c <__adddf3>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	e9c7 2306 	strd	r2, r3, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004312:	a125      	add	r1, pc, #148	; (adr r1, 80043a8 <kinematicForward+0x230>)
 8004314:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004318:	f7fb ffb6 	bl	8000288 <__aeabi_dsub>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4610      	mov	r0, r2
 8004322:	4619      	mov	r1, r3
 8004324:	a322      	add	r3, pc, #136	; (adr r3, 80043b0 <kinematicForward+0x238>)
 8004326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432a:	f7fb ffad 	bl	8000288 <__aeabi_dsub>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	e9c7 2304 	strd	r2, r3, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004342:	f7fb ffa3 	bl	800028c <__adddf3>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4610      	mov	r0, r2
 800434c:	4619      	mov	r1, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004354:	f7fb ff98 	bl	8000288 <__aeabi_dsub>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	pnt->x = x;
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004366:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	pnt->y = y;
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004370:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	pnt->z = z;
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800437a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	pnt->roll = roll;
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004384:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	return TRUE;
 8004388:	2301      	movs	r3, #1
}
 800438a:	4618      	mov	r0, r3
 800438c:	3728      	adds	r7, #40	; 0x28
 800438e:	46bd      	mov	sp, r7
 8004390:	bdb0      	pop	{r4, r5, r7, pc}
 8004392:	bf00      	nop
 8004394:	f3af 8000 	nop.w
 8004398:	80000000 	.word	0x80000000
 800439c:	40402e14 	.word	0x40402e14
 80043a0:	00000000 	.word	0x00000000
 80043a4:	4068a000 	.word	0x4068a000
 80043a8:	00000000 	.word	0x00000000
 80043ac:	406a6000 	.word	0x406a6000
 80043b0:	e0000000 	.word	0xe0000000
 80043b4:	40536b22 	.word	0x40536b22
 80043b8:	40640000 	.word	0x40640000
 80043bc:	00000000 	.word	0x00000000

080043c0 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 80043c0:	b082      	sub	sp, #8
 80043c2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043c6:	b0a0      	sub	sp, #128	; 0x80
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80043d0:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80043da:	a1f0      	add	r1, pc, #960	; (adr r1, 800479c <kinematicInverse+0x3dc>)
 80043dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043e0:	f7fb ff52 	bl	8000288 <__aeabi_dsub>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80043f8:	eeb0 0a47 	vmov.f32	s0, s14
 80043fc:	eef0 0a67 	vmov.f32	s1, s15
 8004400:	f016 fb36 	bl	801aa70 <cos>
 8004404:	ec51 0b10 	vmov	r0, r1, d0
 8004408:	a3e6      	add	r3, pc, #920	; (adr r3, 80047a4 <kinematicInverse+0x3e4>)
 800440a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440e:	f7fc f8f3 	bl	80005f8 <__aeabi_dmul>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4650      	mov	r0, sl
 8004418:	4659      	mov	r1, fp
 800441a:	f7fb ff35 	bl	8000288 <__aeabi_dsub>
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8004432:	eeb0 0a47 	vmov.f32	s0, s14
 8004436:	eef0 0a67 	vmov.f32	s1, s15
 800443a:	f016 fbb1 	bl	801aba0 <sin>
 800443e:	ec51 0b10 	vmov	r0, r1, d0
 8004442:	a3d8      	add	r3, pc, #864	; (adr r3, 80047a4 <kinematicInverse+0x3e4>)
 8004444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004448:	f7fc f8d6 	bl	80005f8 <__aeabi_dmul>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4650      	mov	r0, sl
 8004452:	4659      	mov	r1, fp
 8004454:	f7fb ff18 	bl	8000288 <__aeabi_dsub>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 8004460:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004464:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004468:	f7fc f8c6 	bl	80005f8 <__aeabi_dmul>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4692      	mov	sl, r2
 8004472:	469b      	mov	fp, r3
 8004474:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004478:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800447c:	f7fc f8bc 	bl	80005f8 <__aeabi_dmul>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4650      	mov	r0, sl
 8004486:	4659      	mov	r1, fp
 8004488:	f7fb ff00 	bl	800028c <__adddf3>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4610      	mov	r0, r2
 8004492:	4619      	mov	r1, r3
 8004494:	a3c5      	add	r3, pc, #788	; (adr r3, 80047ac <kinematicInverse+0x3ec>)
 8004496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449a:	f7fb fef5 	bl	8000288 <__aeabi_dsub>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4610      	mov	r0, r2
 80044a4:	4619      	mov	r1, r3
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	4bb9      	ldr	r3, [pc, #740]	; (8004790 <kinematicInverse+0x3d0>)
 80044ac:	f7fb feec 	bl	8000288 <__aeabi_dsub>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4610      	mov	r0, r2
 80044b6:	4619      	mov	r1, r3
 80044b8:	a3b1      	add	r3, pc, #708	; (adr r3, 8004780 <kinematicInverse+0x3c0>)
 80044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044be:	f7fc f9c5 	bl	800084c <__aeabi_ddiv>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 80044ca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80044ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80044d2:	f7fc f891 	bl	80005f8 <__aeabi_dmul>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	f04f 0000 	mov.w	r0, #0
 80044de:	49ad      	ldr	r1, [pc, #692]	; (8004794 <kinematicInverse+0x3d4>)
 80044e0:	f7fb fed2 	bl	8000288 <__aeabi_dsub>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80044f8:	f7fc faf0 	bl	8000adc <__aeabi_dcmplt>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <kinematicInverse+0x146>
		return FALSE;
 8004502:	2300      	movs	r3, #0
 8004504:	e134      	b.n	8004770 <kinematicInverse+0x3b0>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 8004506:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 800450a:	f016 fbe1 	bl	801acd0 <sqrt>
 800450e:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 8004512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004514:	63bb      	str	r3, [r7, #56]	; 0x38
 8004516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004518:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800451c:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 800451e:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8004522:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8004526:	f016 fbd1 	bl	801accc <atan2>
 800452a:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 800452e:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8004532:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8004536:	f016 fbc9 	bl	801accc <atan2>
 800453a:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 800453e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8004542:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004546:	f7fb fe9f 	bl	8000288 <__aeabi_dsub>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4614      	mov	r4, r2
 8004550:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004554:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8004558:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800455c:	f7fb fe94 	bl	8000288 <__aeabi_dsub>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4690      	mov	r8, r2
 8004566:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800456a:	4642      	mov	r2, r8
 800456c:	464b      	mov	r3, r9
 800456e:	4620      	mov	r0, r4
 8004570:	4629      	mov	r1, r5
 8004572:	f7fc fabd 	bl	8000af0 <__aeabi_dcmple>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d008      	beq.n	800458e <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 800457c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004580:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 8004584:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004588:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 800458c:	e007      	b.n	800459e <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 800458e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004592:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 8004596:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800459a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	4b7d      	ldr	r3, [pc, #500]	; (8004798 <kinematicInverse+0x3d8>)
 80045a4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80045a8:	f7fc f826 	bl	80005f8 <__aeabi_dmul>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4610      	mov	r0, r2
 80045b2:	4619      	mov	r1, r3
 80045b4:	a374      	add	r3, pc, #464	; (adr r3, 8004788 <kinematicInverse+0x3c8>)
 80045b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ba:	f7fb fe67 	bl	800028c <__adddf3>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	4610      	mov	r0, r2
 80045c4:	4619      	mov	r1, r3
 80045c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045ca:	f7fc f815 	bl	80005f8 <__aeabi_dmul>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4614      	mov	r4, r2
 80045d4:	461d      	mov	r5, r3
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	4b6f      	ldr	r3, [pc, #444]	; (8004798 <kinematicInverse+0x3d8>)
 80045dc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80045e0:	f7fc f80a 	bl	80005f8 <__aeabi_dmul>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4610      	mov	r0, r2
 80045ea:	4619      	mov	r1, r3
 80045ec:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80045f0:	f7fc f802 	bl	80005f8 <__aeabi_dmul>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4620      	mov	r0, r4
 80045fa:	4629      	mov	r1, r5
 80045fc:	f7fb fe44 	bl	8000288 <__aeabi_dsub>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4614      	mov	r4, r2
 8004606:	461d      	mov	r5, r3
 8004608:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800460c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004610:	f7fb fff2 	bl	80005f8 <__aeabi_dmul>
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	4690      	mov	r8, r2
 800461a:	4699      	mov	r9, r3
 800461c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004620:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004624:	f7fb ffe8 	bl	80005f8 <__aeabi_dmul>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	4640      	mov	r0, r8
 800462e:	4649      	mov	r1, r9
 8004630:	f7fb fe2c 	bl	800028c <__adddf3>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4620      	mov	r0, r4
 800463a:	4629      	mov	r1, r5
 800463c:	f7fc f906 	bl	800084c <__aeabi_ddiv>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	e9c7 2308 	strd	r2, r3, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	4b52      	ldr	r3, [pc, #328]	; (8004798 <kinematicInverse+0x3d8>)
 800464e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004652:	f7fb ffd1 	bl	80005f8 <__aeabi_dmul>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	4610      	mov	r0, r2
 800465c:	4619      	mov	r1, r3
 800465e:	a34a      	add	r3, pc, #296	; (adr r3, 8004788 <kinematicInverse+0x3c8>)
 8004660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004664:	f7fb fe12 	bl	800028c <__adddf3>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	4610      	mov	r0, r2
 800466e:	4619      	mov	r1, r3
 8004670:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004674:	f7fb ffc0 	bl	80005f8 <__aeabi_dmul>
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	4614      	mov	r4, r2
 800467e:	461d      	mov	r5, r3
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	4b44      	ldr	r3, [pc, #272]	; (8004798 <kinematicInverse+0x3d8>)
 8004686:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800468a:	f7fb ffb5 	bl	80005f8 <__aeabi_dmul>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	4610      	mov	r0, r2
 8004694:	4619      	mov	r1, r3
 8004696:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800469a:	f7fb ffad 	bl	80005f8 <__aeabi_dmul>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4620      	mov	r0, r4
 80046a4:	4629      	mov	r1, r5
 80046a6:	f7fb fdf1 	bl	800028c <__adddf3>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4614      	mov	r4, r2
 80046b0:	461d      	mov	r5, r3
 80046b2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80046b6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80046ba:	f7fb ff9d 	bl	80005f8 <__aeabi_dmul>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	4690      	mov	r8, r2
 80046c4:	4699      	mov	r9, r3
 80046c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80046ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80046ce:	f7fb ff93 	bl	80005f8 <__aeabi_dmul>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4640      	mov	r0, r8
 80046d8:	4649      	mov	r1, r9
 80046da:	f7fb fdd7 	bl	800028c <__adddf3>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4620      	mov	r0, r4
 80046e4:	4629      	mov	r1, r5
 80046e6:	f7fc f8b1 	bl	800084c <__aeabi_ddiv>
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
	theta1 = atan2(s1,c1);
 80046f2:	ed97 1b06 	vldr	d1, [r7, #24]
 80046f6:	ed97 0b08 	vldr	d0, [r7, #32]
 80046fa:	f016 fae7 	bl	801accc <atan2>
 80046fe:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 8004702:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004706:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800470a:	f7fb fdbf 	bl	800028c <__adddf3>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	4610      	mov	r0, r2
 8004714:	4619      	mov	r1, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800471c:	f7fb fdb4 	bl	8000288 <__aeabi_dsub>
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 8004728:	ed97 3b02 	vldr	d3, [r7, #8]
 800472c:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 8004730:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 8004734:	ed97 0b04 	vldr	d0, [r7, #16]
 8004738:	f005 fe5e 	bl	800a3f8 <scaraCheckWorkSpace4>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <kinematicInverse+0x386>
		return FALSE; // Over workspace !!!
 8004742:	2300      	movs	r3, #0
 8004744:	e014      	b.n	8004770 <kinematicInverse+0x3b0>
	}
	pnt->Theta1 = theta1;
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800474c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	pnt->Theta2 = theta2;
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004756:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	pnt->D3		= d3;
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004760:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	pnt->Theta4 = theta4;
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800476a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	return TRUE; // All is well
 800476e:	2301      	movs	r3, #1
}
 8004770:	4618      	mov	r0, r3
 8004772:	3780      	adds	r7, #128	; 0x80
 8004774:	46bd      	mov	sp, r7
 8004776:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800477a:	b002      	add	sp, #8
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	00000000 	.word	0x00000000
 8004784:	40eec800 	.word	0x40eec800
 8004788:	00000000 	.word	0x00000000
 800478c:	4068a000 	.word	0x4068a000
 8004790:	40d90000 	.word	0x40d90000
 8004794:	3ff00000 	.word	0x3ff00000
 8004798:	40640000 	.word	0x40640000
 800479c:	80000000 	.word	0x80000000
 80047a0:	4060aa6e 	.word	0x4060aa6e
 80047a4:	80000000 	.word	0x80000000
 80047a8:	40402e14 	.word	0x40402e14
 80047ac:	00000000 	.word	0x00000000
 80047b0:	40e2f320 	.word	0x40e2f320

080047b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80047b8:	f006 ffd6 	bl	800b768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80047bc:	f000 f812 	bl	80047e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80047c0:	f7ff fc20 	bl	8004004 <MX_GPIO_Init>
  MX_DMA_Init();
 80047c4:	f7fd fd9a 	bl	80022fc <MX_DMA_Init>
  MX_UART4_Init();
 80047c8:	f006 fed0 	bl	800b56c <MX_UART4_Init>
  MX_FSMC_Init();
 80047cc:	f7ff faaa 	bl	8003d24 <MX_FSMC_Init>
  MX_TIM7_Init();
 80047d0:	f006 fe5a 	bl	800b488 <MX_TIM7_Init>
  MX_TIM2_Init();
 80047d4:	f006 fe0a 	bl	800b3ec <MX_TIM2_Init>
  //lowlayer_writePulse(0, 0, 0, 0);
  //HAL_Delay(10);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80047d8:	f7fd fdca 	bl	8002370 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80047dc:	f00e f872 	bl	80128c4 <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 80047e0:	e7fe      	b.n	80047e0 <main+0x2c>
	...

080047e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b094      	sub	sp, #80	; 0x50
 80047e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047ea:	f107 0320 	add.w	r3, r7, #32
 80047ee:	2230      	movs	r2, #48	; 0x30
 80047f0:	2100      	movs	r1, #0
 80047f2:	4618      	mov	r0, r3
 80047f4:	f011 fc84 	bl	8016100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047f8:	f107 030c 	add.w	r3, r7, #12
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	605a      	str	r2, [r3, #4]
 8004802:	609a      	str	r2, [r3, #8]
 8004804:	60da      	str	r2, [r3, #12]
 8004806:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004808:	2300      	movs	r3, #0
 800480a:	60bb      	str	r3, [r7, #8]
 800480c:	4b28      	ldr	r3, [pc, #160]	; (80048b0 <SystemClock_Config+0xcc>)
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	4a27      	ldr	r2, [pc, #156]	; (80048b0 <SystemClock_Config+0xcc>)
 8004812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004816:	6413      	str	r3, [r2, #64]	; 0x40
 8004818:	4b25      	ldr	r3, [pc, #148]	; (80048b0 <SystemClock_Config+0xcc>)
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004820:	60bb      	str	r3, [r7, #8]
 8004822:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004824:	2300      	movs	r3, #0
 8004826:	607b      	str	r3, [r7, #4]
 8004828:	4b22      	ldr	r3, [pc, #136]	; (80048b4 <SystemClock_Config+0xd0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a21      	ldr	r2, [pc, #132]	; (80048b4 <SystemClock_Config+0xd0>)
 800482e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	4b1f      	ldr	r3, [pc, #124]	; (80048b4 <SystemClock_Config+0xd0>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800483c:	607b      	str	r3, [r7, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004840:	2301      	movs	r3, #1
 8004842:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004844:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800484a:	2302      	movs	r3, #2
 800484c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800484e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004852:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004854:	2308      	movs	r3, #8
 8004856:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004858:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800485c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800485e:	2302      	movs	r3, #2
 8004860:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004862:	2307      	movs	r3, #7
 8004864:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004866:	f107 0320 	add.w	r3, r7, #32
 800486a:	4618      	mov	r0, r3
 800486c:	f008 fff4 	bl	800d858 <HAL_RCC_OscConfig>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004876:	f000 f831 	bl	80048dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800487a:	230f      	movs	r3, #15
 800487c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800487e:	2302      	movs	r3, #2
 8004880:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004886:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800488a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800488c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004890:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004892:	f107 030c 	add.w	r3, r7, #12
 8004896:	2105      	movs	r1, #5
 8004898:	4618      	mov	r0, r3
 800489a:	f009 fa4d 	bl	800dd38 <HAL_RCC_ClockConfig>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80048a4:	f000 f81a 	bl	80048dc <Error_Handler>
  }
}
 80048a8:	bf00      	nop
 80048aa:	3750      	adds	r7, #80	; 0x50
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40023800 	.word	0x40023800
 80048b4:	40007000 	.word	0x40007000

080048b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a04      	ldr	r2, [pc, #16]	; (80048d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d101      	bne.n	80048ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80048ca:	f006 ff6f 	bl	800b7ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40001000 	.word	0x40001000

080048dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80048e0:	bf00      	nop
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	460b      	mov	r3, r1
 80048f4:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <ringBuff_PushChar+0x1a>
		return FALSE;
 8004900:	2300      	movs	r3, #0
 8004902:	e024      	b.n	800494e <ringBuff_PushChar+0x64>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	78f9      	ldrb	r1, [r7, #3]
 800490e:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004916:	3301      	adds	r3, #1
 8004918:	425a      	negs	r2, r3
 800491a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800491e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004922:	bf58      	it	pl
 8004924:	4253      	negpl	r3, r2
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
			if (ringbuff->head == ringbuff->tail) {
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004938:	429a      	cmp	r2, r3
 800493a:	d103      	bne.n	8004944 <ringBuff_PushChar+0x5a>
				ringbuff->isFull_Flag = TRUE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			}
			ringbuff->isEmpty_Flag = FALSE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			return TRUE;
 800494c:	2301      	movs	r3, #1
	}
}
 800494e:	4618      	mov	r0, r3
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <ringBuff_PopChar+0x18>
		return FALSE;
 800496e:	2300      	movs	r3, #0
 8004970:	e025      	b.n	80049be <ringBuff_PopChar+0x64>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	5cd2      	ldrb	r2, [r2, r3]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004986:	3301      	adds	r3, #1
 8004988:	425a      	negs	r2, r3
 800498a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800498e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004992:	bf58      	it	pl
 8004994:	4253      	negpl	r3, r2
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			if (ringbuff->head == ringbuff->tail) {
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d103      	bne.n	80049b4 <ringBuff_PopChar+0x5a>
				ringbuff->isEmpty_Flag = TRUE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			}
			ringbuff->isFull_Flag = FALSE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			return TRUE;
 80049bc:	2301      	movs	r3, #1
	}
}
 80049be:	4618      	mov	r0, r3
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b086      	sub	sp, #24
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 80049d6:	2300      	movs	r3, #0
 80049d8:	82fb      	strh	r3, [r7, #22]
 80049da:	e011      	b.n	8004a00 <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 80049dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	4413      	add	r3, r2
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	4619      	mov	r1, r3
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f7ff ff7e 	bl	80048ea <ringBuff_PushChar>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00b      	beq.n	8004a0c <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 80049f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	3301      	adds	r3, #1
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	82fb      	strh	r3, [r7, #22]
 8004a00:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	dce8      	bgt.n	80049dc <ringBuff_PushArray+0x12>
 8004a0a:	e000      	b.n	8004a0e <ringBuff_PushArray+0x44>
			break;
 8004a0c:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 8004a0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b086      	sub	sp, #24
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8004a26:	2300      	movs	r3, #0
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	e00c      	b.n	8004a46 <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	4413      	add	r3, r2
 8004a32:	4619      	mov	r1, r3
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f7ff ff90 	bl	800495a <ringBuff_PopChar>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d007      	beq.n	8004a50 <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	3301      	adds	r3, #1
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	dbee      	blt.n	8004a2c <ringBuff_PopArray+0x12>
 8004a4e:	e000      	b.n	8004a52 <ringBuff_PopArray+0x38>
			break;
 8004a50:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 8004a52:	697b      	ldr	r3, [r7, #20]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, const char* cmp_char) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
	int32_t index = ringbuff->tail;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004a6c:	61fb      	str	r3, [r7, #28]
	int32_t distance = 0;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61bb      	str	r3, [r7, #24]
	int32_t sync_state = 0;
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]
	int32_t head_ptr = ringbuff->head;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004a7c:	60fb      	str	r3, [r7, #12]
	int32_t number_of_state = strlen(cmp_char);
 8004a7e:	6838      	ldr	r0, [r7, #0]
 8004a80:	f7fb fba6 	bl	80001d0 <strlen>
 8004a84:	4603      	mov	r3, r0
 8004a86:	60bb      	str	r3, [r7, #8]
	if (ringbuff->isFull_Flag) {
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d066      	beq.n	8004b60 <ringBuff_DistanceOf+0x104>
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8004a92:	2300      	movs	r3, #0
 8004a94:	613b      	str	r3, [r7, #16]
 8004a96:	e030      	b.n	8004afa <ringBuff_DistanceOf+0x9e>
	            if(ringbuff->Array[index] == cmp_char[sync_state]){
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	781a      	ldrb	r2, [r3, #0]
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	6839      	ldr	r1, [r7, #0]
 8004aa4:	440b      	add	r3, r1
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d103      	bne.n	8004ab4 <ringBuff_DistanceOf+0x58>
	                sync_state++;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	e00c      	b.n	8004ace <ringBuff_DistanceOf+0x72>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	4413      	add	r3, r2
 8004aba:	781a      	ldrb	r2, [r3, #0]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d102      	bne.n	8004aca <ringBuff_DistanceOf+0x6e>
	                sync_state = 1;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	e001      	b.n	8004ace <ringBuff_DistanceOf+0x72>
	            }else{
	                sync_state = 0;
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d101      	bne.n	8004ada <ringBuff_DistanceOf+0x7e>
	                return distance;
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	e048      	b.n	8004b6c <ringBuff_DistanceOf+0x110>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	3301      	adds	r3, #1
 8004ade:	61bb      	str	r3, [r7, #24]
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	613b      	str	r3, [r7, #16]
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	425a      	negs	r2, r3
 8004aec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004af0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004af4:	bf58      	it	pl
 8004af6:	4253      	negpl	r3, r2
 8004af8:	61fb      	str	r3, [r7, #28]
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b00:	dbca      	blt.n	8004a98 <ringBuff_DistanceOf+0x3c>
 8004b02:	e031      	b.n	8004b68 <ringBuff_DistanceOf+0x10c>
	        }
	} else {
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
	        if(ringbuff->Array[index] == cmp_char[sync_state]){
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	4413      	add	r3, r2
 8004b0a:	781a      	ldrb	r2, [r3, #0]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	6839      	ldr	r1, [r7, #0]
 8004b10:	440b      	add	r3, r1
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d103      	bne.n	8004b20 <ringBuff_DistanceOf+0xc4>
	                //LOG_REPORT("dis1", ringbuff->.tail);
	                sync_state++;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	e00c      	b.n	8004b3a <ringBuff_DistanceOf+0xde>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	4413      	add	r3, r2
 8004b26:	781a      	ldrb	r2, [r3, #0]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d102      	bne.n	8004b36 <ringBuff_DistanceOf+0xda>
	                sync_state = 1;
 8004b30:	2301      	movs	r3, #1
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	e001      	b.n	8004b3a <ringBuff_DistanceOf+0xde>
	            }else{
	                sync_state = 0;
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d101      	bne.n	8004b46 <ringBuff_DistanceOf+0xea>
	                //LOG_REPORT("dis", distance);
	                return distance;
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	e012      	b.n	8004b6c <ringBuff_DistanceOf+0x110>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	61bb      	str	r3, [r7, #24]
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	425a      	negs	r2, r3
 8004b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b56:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004b5a:	bf58      	it	pl
 8004b5c:	4253      	negpl	r3, r2
 8004b5e:	61fb      	str	r3, [r7, #28]
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d1cd      	bne.n	8004b04 <ringBuff_DistanceOf+0xa8>
	        }
	    //LOG_REPORT("hai", 2);
	}

	return -1;
 8004b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3720      	adds	r7, #32
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
	lowlayer_resetEncoder();
 8004b78:	f000 fdfe 	bl	8005778 <lowlayer_resetEncoder>
	pulse_accumulate[0] = 0;
 8004b7c:	4b10      	ldr	r3, [pc, #64]	; (8004bc0 <lowlayer_scanReset+0x4c>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 8004b82:	4b0f      	ldr	r3, [pc, #60]	; (8004bc0 <lowlayer_scanReset+0x4c>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 8004b88:	4b0d      	ldr	r3, [pc, #52]	; (8004bc0 <lowlayer_scanReset+0x4c>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 8004b8e:	4b0c      	ldr	r3, [pc, #48]	; (8004bc0 <lowlayer_scanReset+0x4c>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 8004b94:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <lowlayer_scanReset+0x50>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 8004b9a:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <lowlayer_scanReset+0x50>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 8004ba0:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <lowlayer_scanReset+0x50>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 8004ba6:	4b08      	ldr	r3, [pc, #32]	; (8004bc8 <lowlayer_scanReset+0x54>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 8004bac:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <lowlayer_scanReset+0x58>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	2108      	movs	r1, #8
 8004bb6:	4806      	ldr	r0, [pc, #24]	; (8004bd0 <lowlayer_scanReset+0x5c>)
 8004bb8:	f007 fc5a 	bl	800c470 <HAL_GPIO_WritePin>
}
 8004bbc:	bf00      	nop
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	2000acc8 	.word	0x2000acc8
 8004bc4:	2000acdc 	.word	0x2000acdc
 8004bc8:	2000acd8 	.word	0x2000acd8
 8004bcc:	2000acf8 	.word	0x2000acf8
 8004bd0:	40020c00 	.word	0x40020c00
 8004bd4:	00000000 	.word	0x00000000

08004bd8 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 8004bde:	2300      	movs	r3, #0
 8004be0:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 8004be2:	f000 fe87 	bl	80058f4 <lowlayer_updateLimit>
	if (state_scan < 4) {
 8004be6:	4b96      	ldr	r3, [pc, #600]	; (8004e40 <lowlayer_scanFlow+0x268>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d837      	bhi.n	8004c5e <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 8004bee:	4b94      	ldr	r3, [pc, #592]	; (8004e40 <lowlayer_scanFlow+0x268>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	f1c3 0303 	rsb	r3, r3, #3
 8004bf6:	4a93      	ldr	r2, [pc, #588]	; (8004e44 <lowlayer_scanFlow+0x26c>)
 8004bf8:	5cd3      	ldrb	r3, [r2, r3]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d121      	bne.n	8004c42 <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 8004bfe:	4b90      	ldr	r3, [pc, #576]	; (8004e40 <lowlayer_scanFlow+0x268>)
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	f1c3 0203 	rsb	r2, r3, #3
 8004c06:	4b8e      	ldr	r3, [pc, #568]	; (8004e40 <lowlayer_scanFlow+0x268>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	f1c3 0303 	rsb	r3, r3, #3
 8004c0e:	498e      	ldr	r1, [pc, #568]	; (8004e48 <lowlayer_scanFlow+0x270>)
 8004c10:	568a      	ldrsb	r2, [r1, r2]
 8004c12:	f107 0108 	add.w	r1, r7, #8
 8004c16:	440b      	add	r3, r1
 8004c18:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 8004c1c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	425b      	negs	r3, r3
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	b258      	sxtb	r0, r3
 8004c28:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8004c2c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	425b      	negs	r3, r3
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	b25a      	sxtb	r2, r3
 8004c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c3c:	f000 fcd8 	bl	80055f0 <lowlayer_writePulse>
 8004c40:	e00b      	b.n	8004c5a <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 8004c42:	4b7f      	ldr	r3, [pc, #508]	; (8004e40 <lowlayer_scanFlow+0x268>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	3301      	adds	r3, #1
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	4b7d      	ldr	r3, [pc, #500]	; (8004e40 <lowlayer_scanFlow+0x268>)
 8004c4c:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 8004c4e:	2300      	movs	r3, #0
 8004c50:	2200      	movs	r2, #0
 8004c52:	2100      	movs	r1, #0
 8004c54:	2000      	movs	r0, #0
 8004c56:	f000 fccb 	bl	80055f0 <lowlayer_writePulse>
		}

		return FALSE;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e0d2      	b.n	8004e04 <lowlayer_scanFlow+0x22c>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 8004c5e:	2201      	movs	r2, #1
 8004c60:	2108      	movs	r1, #8
 8004c62:	487a      	ldr	r0, [pc, #488]	; (8004e4c <lowlayer_scanFlow+0x274>)
 8004c64:	f007 fc04 	bl	800c470 <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 8004c68:	f000 fe28 	bl	80058bc <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2100      	movs	r1, #0
 8004c72:	2000      	movs	r0, #0
 8004c74:	f000 fcbc 	bl	80055f0 <lowlayer_writePulse>
		scan_flag = 1;
 8004c78:	4b75      	ldr	r3, [pc, #468]	; (8004e50 <lowlayer_scanFlow+0x278>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 8004c7e:	4b75      	ldr	r3, [pc, #468]	; (8004e54 <lowlayer_scanFlow+0x27c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a75      	ldr	r2, [pc, #468]	; (8004e58 <lowlayer_scanFlow+0x280>)
 8004c84:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 8004c86:	4b73      	ldr	r3, [pc, #460]	; (8004e54 <lowlayer_scanFlow+0x27c>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	4a73      	ldr	r2, [pc, #460]	; (8004e58 <lowlayer_scanFlow+0x280>)
 8004c8c:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 8004c8e:	4b71      	ldr	r3, [pc, #452]	; (8004e54 <lowlayer_scanFlow+0x27c>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	4a71      	ldr	r2, [pc, #452]	; (8004e58 <lowlayer_scanFlow+0x280>)
 8004c94:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 8004c96:	4b71      	ldr	r3, [pc, #452]	; (8004e5c <lowlayer_scanFlow+0x284>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	4a71      	ldr	r2, [pc, #452]	; (8004e60 <lowlayer_scanFlow+0x288>)
 8004c9c:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 8004c9e:	4b6e      	ldr	r3, [pc, #440]	; (8004e58 <lowlayer_scanFlow+0x280>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	486f      	ldr	r0, [pc, #444]	; (8004e64 <lowlayer_scanFlow+0x28c>)
 8004ca8:	f7fd fa70 	bl	800218c <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 8004cac:	4b6a      	ldr	r3, [pc, #424]	; (8004e58 <lowlayer_scanFlow+0x280>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	486c      	ldr	r0, [pc, #432]	; (8004e68 <lowlayer_scanFlow+0x290>)
 8004cb6:	f7fd fa69 	bl	800218c <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 8004cba:	4b67      	ldr	r3, [pc, #412]	; (8004e58 <lowlayer_scanFlow+0x280>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	486a      	ldr	r0, [pc, #424]	; (8004e6c <lowlayer_scanFlow+0x294>)
 8004cc4:	f7fd fa62 	bl	800218c <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 8004cc8:	4b65      	ldr	r3, [pc, #404]	; (8004e60 <lowlayer_scanFlow+0x288>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	4619      	mov	r1, r3
 8004cd0:	4867      	ldr	r0, [pc, #412]	; (8004e70 <lowlayer_scanFlow+0x298>)
 8004cd2:	f7fd fa5b 	bl	800218c <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 8004cd6:	4b60      	ldr	r3, [pc, #384]	; (8004e58 <lowlayer_scanFlow+0x280>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ce2:	ee17 0a90 	vmov	r0, s15
 8004ce6:	f7fb fc2f 	bl	8000548 <__aeabi_f2d>
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	f7fb facd 	bl	800028c <__adddf3>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	a345      	add	r3, pc, #276	; (adr r3, 8004e10 <lowlayer_scanFlow+0x238>)
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	f7fb fc7a 	bl	80005f8 <__aeabi_dmul>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4610      	mov	r0, r2
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	a342      	add	r3, pc, #264	; (adr r3, 8004e18 <lowlayer_scanFlow+0x240>)
 8004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d12:	f7fb fd9b 	bl	800084c <__aeabi_ddiv>
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	a141      	add	r1, pc, #260	; (adr r1, 8004e20 <lowlayer_scanFlow+0x248>)
 8004d1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d20:	f7fb fab2 	bl	8000288 <__aeabi_dsub>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 8004d28:	4952      	ldr	r1, [pc, #328]	; (8004e74 <lowlayer_scanFlow+0x29c>)
 8004d2a:	e9c1 2300 	strd	r2, r3, [r1]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 8004d2e:	4b4a      	ldr	r3, [pc, #296]	; (8004e58 <lowlayer_scanFlow+0x280>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	ee07 3a90 	vmov	s15, r3
 8004d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d3a:	ee17 0a90 	vmov	r0, s15
 8004d3e:	f7fb fc03 	bl	8000548 <__aeabi_f2d>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	f7fb faa1 	bl	800028c <__adddf3>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	4610      	mov	r0, r2
 8004d50:	4619      	mov	r1, r3
 8004d52:	a32f      	add	r3, pc, #188	; (adr r3, 8004e10 <lowlayer_scanFlow+0x238>)
 8004d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d58:	f7fb fc4e 	bl	80005f8 <__aeabi_dmul>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4610      	mov	r0, r2
 8004d62:	4619      	mov	r1, r3
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	4b43      	ldr	r3, [pc, #268]	; (8004e78 <lowlayer_scanFlow+0x2a0>)
 8004d6a:	f7fb fd6f 	bl	800084c <__aeabi_ddiv>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	a12d      	add	r1, pc, #180	; (adr r1, 8004e28 <lowlayer_scanFlow+0x250>)
 8004d74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d78:	f7fb fa86 	bl	8000288 <__aeabi_dsub>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	460b      	mov	r3, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8004d80:	493c      	ldr	r1, [pc, #240]	; (8004e74 <lowlayer_scanFlow+0x29c>)
 8004d82:	e9c1 2302 	strd	r2, r3, [r1, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 8004d86:	4b34      	ldr	r3, [pc, #208]	; (8004e58 <lowlayer_scanFlow+0x280>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	ee07 3a90 	vmov	s15, r3
 8004d8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d92:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8004e7c <lowlayer_scanFlow+0x2a4>
 8004d96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d9a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004e80 <lowlayer_scanFlow+0x2a8>
 8004d9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004da2:	ee17 0a90 	vmov	r0, s15
 8004da6:	f7fb fbcf 	bl	8000548 <__aeabi_f2d>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 8004dae:	4931      	ldr	r1, [pc, #196]	; (8004e74 <lowlayer_scanFlow+0x29c>)
 8004db0:	e9c1 2304 	strd	r2, r3, [r1, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 8004db4:	4b2a      	ldr	r3, [pc, #168]	; (8004e60 <lowlayer_scanFlow+0x288>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fb fbb3 	bl	8000524 <__aeabi_i2d>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	f7fb fa63 	bl	800028c <__adddf3>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4610      	mov	r0, r2
 8004dcc:	4619      	mov	r1, r3
 8004dce:	a310      	add	r3, pc, #64	; (adr r3, 8004e10 <lowlayer_scanFlow+0x238>)
 8004dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd4:	f7fb fc10 	bl	80005f8 <__aeabi_dmul>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4610      	mov	r0, r2
 8004dde:	4619      	mov	r1, r3
 8004de0:	a313      	add	r3, pc, #76	; (adr r3, 8004e30 <lowlayer_scanFlow+0x258>)
 8004de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de6:	f7fb fd31 	bl	800084c <__aeabi_ddiv>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	a112      	add	r1, pc, #72	; (adr r1, 8004e38 <lowlayer_scanFlow+0x260>)
 8004df0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004df4:	f7fb fa48 	bl	8000288 <__aeabi_dsub>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 8004dfc:	491d      	ldr	r1, [pc, #116]	; (8004e74 <lowlayer_scanFlow+0x29c>)
 8004dfe:	e9c1 2306 	strd	r2, r3, [r1, #24]

		return TRUE;
 8004e02:	2301      	movs	r3, #1
	}
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	f3af 8000 	nop.w
 8004e10:	60000000 	.word	0x60000000
 8004e14:	400921fb 	.word	0x400921fb
 8004e18:	00000000 	.word	0x00000000
 8004e1c:	40f38800 	.word	0x40f38800
 8004e20:	40000000 	.word	0x40000000
 8004e24:	bff9f17a 	.word	0xbff9f17a
 8004e28:	80000000 	.word	0x80000000
 8004e2c:	40039716 	.word	0x40039716
 8004e30:	a0000000 	.word	0xa0000000
 8004e34:	40d3bca1 	.word	0x40d3bca1
 8004e38:	a0000000 	.word	0xa0000000
 8004e3c:	4008330d 	.word	0x4008330d
 8004e40:	2000acf8 	.word	0x2000acf8
 8004e44:	2000ace8 	.word	0x2000ace8
 8004e48:	0801c614 	.word	0x0801c614
 8004e4c:	40020c00 	.word	0x40020c00
 8004e50:	2000acd8 	.word	0x2000acd8
 8004e54:	2000acec 	.word	0x2000acec
 8004e58:	2000ad20 	.word	0x2000ad20
 8004e5c:	2000acc8 	.word	0x2000acc8
 8004e60:	2000acfc 	.word	0x2000acfc
 8004e64:	0801c53c 	.word	0x0801c53c
 8004e68:	0801c550 	.word	0x0801c550
 8004e6c:	0801c564 	.word	0x0801c564
 8004e70:	0801c578 	.word	0x0801c578
 8004e74:	2000ad00 	.word	0x2000ad00
 8004e78:	40ff4000 	.word	0x40ff4000
 8004e7c:	4426aaab 	.word	0x4426aaab
 8004e80:	400f1aa0 	.word	0x400f1aa0
 8004e84:	00000000 	.word	0x00000000

08004e88 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 8004e90:	2300      	movs	r3, #0
 8004e92:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 8004e94:	2300      	movs	r3, #0
 8004e96:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f94d 	bl	8005138 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004ea4:	a330      	add	r3, pc, #192	; (adr r3, 8004f68 <lowlayer_goToSoftLimit+0xe0>)
 8004ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eaa:	f7fb fe17 	bl	8000adc <__aeabi_dcmplt>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d004      	beq.n	8004ebe <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	723b      	strb	r3, [r7, #8]
		check++;
 8004eb8:	7bfb      	ldrb	r3, [r7, #15]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8004ec4:	a32a      	add	r3, pc, #168	; (adr r3, 8004f70 <lowlayer_goToSoftLimit+0xe8>)
 8004ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eca:	f7fb fe25 	bl	8000b18 <__aeabi_dcmpgt>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d004      	beq.n	8004ede <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 8004ed4:	2305      	movs	r3, #5
 8004ed6:	727b      	strb	r3, [r7, #9]
		check++;
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
 8004eda:	3301      	adds	r3, #1
 8004edc:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	f7fb fdf6 	bl	8000adc <__aeabi_dcmplt>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d004      	beq.n	8004f00 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 8004ef6:	2305      	movs	r3, #5
 8004ef8:	72bb      	strb	r3, [r7, #10]
		check++;
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	3301      	adds	r3, #1
 8004efe:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8004f06:	a31c      	add	r3, pc, #112	; (adr r3, 8004f78 <lowlayer_goToSoftLimit+0xf0>)
 8004f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0c:	f7fb fe04 	bl	8000b18 <__aeabi_dcmpgt>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d004      	beq.n	8004f20 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 8004f16:	230a      	movs	r3, #10
 8004f18:	72fb      	strb	r3, [r7, #11]
		check++;
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d013      	beq.n	8004f4e <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 8004f26:	f997 0008 	ldrsb.w	r0, [r7, #8]
 8004f2a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	425b      	negs	r3, r3
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	b259      	sxtb	r1, r3
 8004f36:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8004f3a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	425b      	negs	r3, r3
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	b25b      	sxtb	r3, r3
 8004f46:	f000 fb53 	bl	80055f0 <lowlayer_writePulse>
		return FALSE;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	e006      	b.n	8004f5c <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 8004f4e:	2300      	movs	r3, #0
 8004f50:	2200      	movs	r2, #0
 8004f52:	2100      	movs	r1, #0
 8004f54:	2000      	movs	r0, #0
 8004f56:	f000 fb4b 	bl	80055f0 <lowlayer_writePulse>
		return TRUE;
 8004f5a:	2301      	movs	r3, #1
	}
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	f3af 8000 	nop.w
 8004f68:	daaaaaab 	.word	0xdaaaaaab
 8004f6c:	bff7bc89 	.word	0xbff7bc89
 8004f70:	88000000 	.word	0x88000000
 8004f74:	4002d97c 	.word	0x4002d97c
 8004f78:	daaaaaab 	.word	0xdaaaaaab
 8004f7c:	4007bc89 	.word	0x4007bc89

08004f80 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 8004f88:	f000 fc7c 	bl	8005884 <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 8004f8c:	4b62      	ldr	r3, [pc, #392]	; (8005118 <lowlayer_readTruePosition+0x198>)
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	4b62      	ldr	r3, [pc, #392]	; (800511c <lowlayer_readTruePosition+0x19c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	ee07 3a90 	vmov	s15, r3
 8004f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f9e:	ee17 0a90 	vmov	r0, s15
 8004fa2:	f7fb fad1 	bl	8000548 <__aeabi_f2d>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	f7fb f96f 	bl	800028c <__adddf3>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	a34c      	add	r3, pc, #304	; (adr r3, 80050e8 <lowlayer_readTruePosition+0x168>)
 8004fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbc:	f7fb fb1c 	bl	80005f8 <__aeabi_dmul>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	a349      	add	r3, pc, #292	; (adr r3, 80050f0 <lowlayer_readTruePosition+0x170>)
 8004fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fce:	f7fb fc3d 	bl	800084c <__aeabi_ddiv>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	4619      	mov	r1, r3
 8004fda:	a347      	add	r3, pc, #284	; (adr r3, 80050f8 <lowlayer_readTruePosition+0x178>)
 8004fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe0:	f7fb f952 	bl	8000288 <__aeabi_dsub>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
	true->Theta1 = HARD_LIM0_NEG
 8004fe8:	6879      	ldr	r1, [r7, #4]
 8004fea:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 8004fee:	4b4a      	ldr	r3, [pc, #296]	; (8005118 <lowlayer_readTruePosition+0x198>)
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	4b4a      	ldr	r3, [pc, #296]	; (800511c <lowlayer_readTruePosition+0x19c>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	ee07 3a90 	vmov	s15, r3
 8004ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005000:	ee17 0a90 	vmov	r0, s15
 8005004:	f7fb faa0 	bl	8000548 <__aeabi_f2d>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	f7fb f93e 	bl	800028c <__adddf3>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4610      	mov	r0, r2
 8005016:	4619      	mov	r1, r3
 8005018:	a333      	add	r3, pc, #204	; (adr r3, 80050e8 <lowlayer_readTruePosition+0x168>)
 800501a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501e:	f7fb faeb 	bl	80005f8 <__aeabi_dmul>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4610      	mov	r0, r2
 8005028:	4619      	mov	r1, r3
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	4b3c      	ldr	r3, [pc, #240]	; (8005120 <lowlayer_readTruePosition+0x1a0>)
 8005030:	f7fb fc0c 	bl	800084c <__aeabi_ddiv>
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	4610      	mov	r0, r2
 800503a:	4619      	mov	r1, r3
 800503c:	a330      	add	r3, pc, #192	; (adr r3, 8005100 <lowlayer_readTruePosition+0x180>)
 800503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005042:	f7fb f923 	bl	800028c <__adddf3>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
	true->Theta2 = HARD_LIM1_POS
 800504a:	6879      	ldr	r1, [r7, #4]
 800504c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 8005050:	4b31      	ldr	r3, [pc, #196]	; (8005118 <lowlayer_readTruePosition+0x198>)
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	4b31      	ldr	r3, [pc, #196]	; (800511c <lowlayer_readTruePosition+0x19c>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	ee07 3a90 	vmov	s15, r3
 800505e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005062:	eeb1 7a67 	vneg.f32	s14, s15
 8005066:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8005124 <lowlayer_readTruePosition+0x1a4>
 800506a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800506e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8005128 <lowlayer_readTruePosition+0x1a8>
 8005072:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005076:	ee17 0a90 	vmov	r0, s15
 800507a:	f7fb fa65 	bl	8000548 <__aeabi_f2d>
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
	true->D3	 = HARD_LIM2_NEG
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 8005088:	4b28      	ldr	r3, [pc, #160]	; (800512c <lowlayer_readTruePosition+0x1ac>)
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	4b28      	ldr	r3, [pc, #160]	; (8005130 <lowlayer_readTruePosition+0x1b0>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	4618      	mov	r0, r3
 8005094:	f7fb fa46 	bl	8000524 <__aeabi_i2d>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	f7fb f8f6 	bl	800028c <__adddf3>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4610      	mov	r0, r2
 80050a6:	4619      	mov	r1, r3
 80050a8:	a30f      	add	r3, pc, #60	; (adr r3, 80050e8 <lowlayer_readTruePosition+0x168>)
 80050aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ae:	f7fb faa3 	bl	80005f8 <__aeabi_dmul>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4610      	mov	r0, r2
 80050b8:	4619      	mov	r1, r3
 80050ba:	a313      	add	r3, pc, #76	; (adr r3, 8005108 <lowlayer_readTruePosition+0x188>)
 80050bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c0:	f7fb fbc4 	bl	800084c <__aeabi_ddiv>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4610      	mov	r0, r2
 80050ca:	4619      	mov	r1, r3
 80050cc:	a310      	add	r3, pc, #64	; (adr r3, 8005110 <lowlayer_readTruePosition+0x190>)
 80050ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d2:	f7fb f8db 	bl	800028c <__adddf3>
 80050d6:	4602      	mov	r2, r0
 80050d8:	460b      	mov	r3, r1
	true->Theta4 = HARD_LIM3_POS
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
}
 80050e0:	bf00      	nop
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	60000000 	.word	0x60000000
 80050ec:	400921fb 	.word	0x400921fb
 80050f0:	00000000 	.word	0x00000000
 80050f4:	40f38800 	.word	0x40f38800
 80050f8:	40000000 	.word	0x40000000
 80050fc:	3ff9f17a 	.word	0x3ff9f17a
 8005100:	80000000 	.word	0x80000000
 8005104:	40039716 	.word	0x40039716
 8005108:	a0000000 	.word	0xa0000000
 800510c:	40d3bca1 	.word	0x40d3bca1
 8005110:	a0000000 	.word	0xa0000000
 8005114:	4008330d 	.word	0x4008330d
 8005118:	2000acdc 	.word	0x2000acdc
 800511c:	2000ad20 	.word	0x2000ad20
 8005120:	40ff4000 	.word	0x40ff4000
 8005124:	4426aaab 	.word	0x4426aaab
 8005128:	400f1aa0 	.word	0x400f1aa0
 800512c:	2000acc8 	.word	0x2000acc8
 8005130:	2000acfc 	.word	0x2000acfc
 8005134:	00000000 	.word	0x00000000

08005138 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 8005138:	b5b0      	push	{r4, r5, r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 8005140:	4b53      	ldr	r3, [pc, #332]	; (8005290 <lowlayer_readSetPosition+0x158>)
 8005142:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005146:	4b53      	ldr	r3, [pc, #332]	; (8005294 <lowlayer_readSetPosition+0x15c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f7fb f9ea 	bl	8000524 <__aeabi_i2d>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	f7fb f89a 	bl	800028c <__adddf3>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4610      	mov	r0, r2
 800515e:	4619      	mov	r1, r3
 8005160:	a345      	add	r3, pc, #276	; (adr r3, 8005278 <lowlayer_readSetPosition+0x140>)
 8005162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005166:	f7fb fa47 	bl	80005f8 <__aeabi_dmul>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	4610      	mov	r0, r2
 8005170:	4619      	mov	r1, r3
 8005172:	a343      	add	r3, pc, #268	; (adr r3, 8005280 <lowlayer_readSetPosition+0x148>)
 8005174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005178:	f7fb fb68 	bl	800084c <__aeabi_ddiv>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4620      	mov	r0, r4
 8005182:	4629      	mov	r1, r5
 8005184:	f7fb f882 	bl	800028c <__adddf3>
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 8005192:	4b3f      	ldr	r3, [pc, #252]	; (8005290 <lowlayer_readSetPosition+0x158>)
 8005194:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8005198:	4b3e      	ldr	r3, [pc, #248]	; (8005294 <lowlayer_readSetPosition+0x15c>)
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	4618      	mov	r0, r3
 800519e:	f7fb f9c1 	bl	8000524 <__aeabi_i2d>
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	f7fb f871 	bl	800028c <__adddf3>
 80051aa:	4602      	mov	r2, r0
 80051ac:	460b      	mov	r3, r1
 80051ae:	4610      	mov	r0, r2
 80051b0:	4619      	mov	r1, r3
 80051b2:	a331      	add	r3, pc, #196	; (adr r3, 8005278 <lowlayer_readSetPosition+0x140>)
 80051b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b8:	f7fb fa1e 	bl	80005f8 <__aeabi_dmul>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	4610      	mov	r0, r2
 80051c2:	4619      	mov	r1, r3
 80051c4:	f04f 0200 	mov.w	r2, #0
 80051c8:	4b33      	ldr	r3, [pc, #204]	; (8005298 <lowlayer_readSetPosition+0x160>)
 80051ca:	f7fb fb3f 	bl	800084c <__aeabi_ddiv>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4620      	mov	r0, r4
 80051d4:	4629      	mov	r1, r5
 80051d6:	f7fb f859 	bl	800028c <__adddf3>
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 80051e4:	4b2a      	ldr	r3, [pc, #168]	; (8005290 <lowlayer_readSetPosition+0x158>)
 80051e6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80051ea:	4b2a      	ldr	r3, [pc, #168]	; (8005294 <lowlayer_readSetPosition+0x15c>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	ee07 3a90 	vmov	s15, r3
 80051f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051f6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800529c <lowlayer_readSetPosition+0x164>
 80051fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80051fe:	ee16 0a90 	vmov	r0, s13
 8005202:	f7fb f9a1 	bl	8000548 <__aeabi_f2d>
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	4620      	mov	r0, r4
 800520c:	4629      	mov	r1, r5
 800520e:	f7fb f83d 	bl	800028c <__adddf3>
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 800521c:	4b1c      	ldr	r3, [pc, #112]	; (8005290 <lowlayer_readSetPosition+0x158>)
 800521e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005222:	4b1c      	ldr	r3, [pc, #112]	; (8005294 <lowlayer_readSetPosition+0x15c>)
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	4618      	mov	r0, r3
 8005228:	f7fb f97c 	bl	8000524 <__aeabi_i2d>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	f7fb f82c 	bl	800028c <__adddf3>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4610      	mov	r0, r2
 800523a:	4619      	mov	r1, r3
 800523c:	a30e      	add	r3, pc, #56	; (adr r3, 8005278 <lowlayer_readSetPosition+0x140>)
 800523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005242:	f7fb f9d9 	bl	80005f8 <__aeabi_dmul>
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	4610      	mov	r0, r2
 800524c:	4619      	mov	r1, r3
 800524e:	a30e      	add	r3, pc, #56	; (adr r3, 8005288 <lowlayer_readSetPosition+0x150>)
 8005250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005254:	f7fb fafa 	bl	800084c <__aeabi_ddiv>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4620      	mov	r0, r4
 800525e:	4629      	mov	r1, r5
 8005260:	f7fb f814 	bl	800028c <__adddf3>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
}
 800526e:	bf00      	nop
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bdb0      	pop	{r4, r5, r7, pc}
 8005276:	bf00      	nop
 8005278:	60000000 	.word	0x60000000
 800527c:	400921fb 	.word	0x400921fb
 8005280:	00000000 	.word	0x00000000
 8005284:	40d38800 	.word	0x40d38800
 8005288:	a0000000 	.word	0xa0000000
 800528c:	40d3bca1 	.word	0x40d3bca1
 8005290:	2000ad00 	.word	0x2000ad00
 8005294:	2000acc8 	.word	0x2000acc8
 8005298:	40df4000 	.word	0x40df4000
 800529c:	42c80000 	.word	0x42c80000

080052a0 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 80052a0:	b084      	sub	sp, #16
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b092      	sub	sp, #72	; 0x48
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 80052ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80052b0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80052b4:	a3c6      	add	r3, pc, #792	; (adr r3, 80055d0 <lowlayer_computeAndWritePulse+0x330>)
 80052b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ba:	f7fa ffe7 	bl	800028c <__adddf3>
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	4610      	mov	r0, r2
 80052c4:	4619      	mov	r1, r3
 80052c6:	a3c4      	add	r3, pc, #784	; (adr r3, 80055d8 <lowlayer_computeAndWritePulse+0x338>)
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	f7fb f994 	bl	80005f8 <__aeabi_dmul>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4610      	mov	r0, r2
 80052d6:	4619      	mov	r1, r3
 80052d8:	a3b7      	add	r3, pc, #732	; (adr r3, 80055b8 <lowlayer_computeAndWritePulse+0x318>)
 80052da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052de:	f7fb fab5 	bl	800084c <__aeabi_ddiv>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	ec43 2b17 	vmov	d7, r2, r3
 80052ea:	eeb0 0a47 	vmov.f32	s0, s14
 80052ee:	eef0 0a67 	vmov.f32	s1, s15
 80052f2:	f015 fc0d 	bl	801ab10 <round>
 80052f6:	ec53 2b10 	vmov	r2, r3, d0
 80052fa:	4610      	mov	r0, r2
 80052fc:	4619      	mov	r1, r3
 80052fe:	f7fb fc53 	bl	8000ba8 <__aeabi_d2uiz>
 8005302:	4603      	mov	r3, r0
 8005304:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 8005306:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800530a:	a3b5      	add	r3, pc, #724	; (adr r3, 80055e0 <lowlayer_computeAndWritePulse+0x340>)
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	f7fa ffbc 	bl	800028c <__adddf3>
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	4610      	mov	r0, r2
 800531a:	4619      	mov	r1, r3
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	4bb1      	ldr	r3, [pc, #708]	; (80055e8 <lowlayer_computeAndWritePulse+0x348>)
 8005322:	f7fb f969 	bl	80005f8 <__aeabi_dmul>
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	4610      	mov	r0, r2
 800532c:	4619      	mov	r1, r3
 800532e:	a3a2      	add	r3, pc, #648	; (adr r3, 80055b8 <lowlayer_computeAndWritePulse+0x318>)
 8005330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005334:	f7fb fa8a 	bl	800084c <__aeabi_ddiv>
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	ec43 2b17 	vmov	d7, r2, r3
 8005340:	eeb0 0a47 	vmov.f32	s0, s14
 8005344:	eef0 0a67 	vmov.f32	s1, s15
 8005348:	f015 fbe2 	bl	801ab10 <round>
 800534c:	ec53 2b10 	vmov	r2, r3, d0
 8005350:	4610      	mov	r0, r2
 8005352:	4619      	mov	r1, r3
 8005354:	f7fb fc28 	bl	8000ba8 <__aeabi_d2uiz>
 8005358:	4603      	mov	r3, r0
 800535a:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 800535c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	4ba1      	ldr	r3, [pc, #644]	; (80055ec <lowlayer_computeAndWritePulse+0x34c>)
 8005366:	f7fb f947 	bl	80005f8 <__aeabi_dmul>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	ec43 2b17 	vmov	d7, r2, r3
 8005372:	eeb0 0a47 	vmov.f32	s0, s14
 8005376:	eef0 0a67 	vmov.f32	s1, s15
 800537a:	f015 fbc9 	bl	801ab10 <round>
 800537e:	ec53 2b10 	vmov	r2, r3, d0
 8005382:	4610      	mov	r0, r2
 8005384:	4619      	mov	r1, r3
 8005386:	f7fb fc0f 	bl	8000ba8 <__aeabi_d2uiz>
 800538a:	4603      	mov	r3, r0
 800538c:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 800538e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005392:	a38b      	add	r3, pc, #556	; (adr r3, 80055c0 <lowlayer_computeAndWritePulse+0x320>)
 8005394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005398:	f7fa ff78 	bl	800028c <__adddf3>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4610      	mov	r0, r2
 80053a2:	4619      	mov	r1, r3
 80053a4:	a388      	add	r3, pc, #544	; (adr r3, 80055c8 <lowlayer_computeAndWritePulse+0x328>)
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	f7fb f925 	bl	80005f8 <__aeabi_dmul>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	4610      	mov	r0, r2
 80053b4:	4619      	mov	r1, r3
 80053b6:	a380      	add	r3, pc, #512	; (adr r3, 80055b8 <lowlayer_computeAndWritePulse+0x318>)
 80053b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053bc:	f7fb fa46 	bl	800084c <__aeabi_ddiv>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	ec43 2b17 	vmov	d7, r2, r3
 80053c8:	eeb0 0a47 	vmov.f32	s0, s14
 80053cc:	eef0 0a67 	vmov.f32	s1, s15
 80053d0:	f015 fb9e 	bl	801ab10 <round>
 80053d4:	ec53 2b10 	vmov	r2, r3, d0
 80053d8:	4610      	mov	r0, r2
 80053da:	4619      	mov	r1, r3
 80053dc:	f7fb fbe4 	bl	8000ba8 <__aeabi_d2uiz>
 80053e0:	4603      	mov	r3, r0
 80053e2:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80053e4:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80053e8:	a379      	add	r3, pc, #484	; (adr r3, 80055d0 <lowlayer_computeAndWritePulse+0x330>)
 80053ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ee:	f7fa ff4d 	bl	800028c <__adddf3>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4610      	mov	r0, r2
 80053f8:	4619      	mov	r1, r3
 80053fa:	a377      	add	r3, pc, #476	; (adr r3, 80055d8 <lowlayer_computeAndWritePulse+0x338>)
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	f7fb f8fa 	bl	80005f8 <__aeabi_dmul>
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	4610      	mov	r0, r2
 800540a:	4619      	mov	r1, r3
 800540c:	a36a      	add	r3, pc, #424	; (adr r3, 80055b8 <lowlayer_computeAndWritePulse+0x318>)
 800540e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005412:	f7fb fa1b 	bl	800084c <__aeabi_ddiv>
 8005416:	4602      	mov	r2, r0
 8005418:	460b      	mov	r3, r1
 800541a:	ec43 2b17 	vmov	d7, r2, r3
 800541e:	eeb0 0a47 	vmov.f32	s0, s14
 8005422:	eef0 0a67 	vmov.f32	s1, s15
 8005426:	f015 fb73 	bl	801ab10 <round>
 800542a:	ec53 2b10 	vmov	r2, r3, d0
 800542e:	4610      	mov	r0, r2
 8005430:	4619      	mov	r1, r3
 8005432:	f7fb fbb9 	bl	8000ba8 <__aeabi_d2uiz>
 8005436:	4603      	mov	r3, r0
 8005438:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 800543a:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 800543e:	a368      	add	r3, pc, #416	; (adr r3, 80055e0 <lowlayer_computeAndWritePulse+0x340>)
 8005440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005444:	f7fa ff22 	bl	800028c <__adddf3>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4610      	mov	r0, r2
 800544e:	4619      	mov	r1, r3
 8005450:	f04f 0200 	mov.w	r2, #0
 8005454:	4b64      	ldr	r3, [pc, #400]	; (80055e8 <lowlayer_computeAndWritePulse+0x348>)
 8005456:	f7fb f8cf 	bl	80005f8 <__aeabi_dmul>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	4610      	mov	r0, r2
 8005460:	4619      	mov	r1, r3
 8005462:	a355      	add	r3, pc, #340	; (adr r3, 80055b8 <lowlayer_computeAndWritePulse+0x318>)
 8005464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005468:	f7fb f9f0 	bl	800084c <__aeabi_ddiv>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	ec43 2b17 	vmov	d7, r2, r3
 8005474:	eeb0 0a47 	vmov.f32	s0, s14
 8005478:	eef0 0a67 	vmov.f32	s1, s15
 800547c:	f015 fb48 	bl	801ab10 <round>
 8005480:	ec53 2b10 	vmov	r2, r3, d0
 8005484:	4610      	mov	r0, r2
 8005486:	4619      	mov	r1, r3
 8005488:	f7fb fb8e 	bl	8000ba8 <__aeabi_d2uiz>
 800548c:	4603      	mov	r3, r0
 800548e:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 8005490:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	4b54      	ldr	r3, [pc, #336]	; (80055ec <lowlayer_computeAndWritePulse+0x34c>)
 800549a:	f7fb f8ad 	bl	80005f8 <__aeabi_dmul>
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	ec43 2b17 	vmov	d7, r2, r3
 80054a6:	eeb0 0a47 	vmov.f32	s0, s14
 80054aa:	eef0 0a67 	vmov.f32	s1, s15
 80054ae:	f015 fb2f 	bl	801ab10 <round>
 80054b2:	ec53 2b10 	vmov	r2, r3, d0
 80054b6:	4610      	mov	r0, r2
 80054b8:	4619      	mov	r1, r3
 80054ba:	f7fb fb75 	bl	8000ba8 <__aeabi_d2uiz>
 80054be:	4603      	mov	r3, r0
 80054c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 80054c2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80054c6:	a33e      	add	r3, pc, #248	; (adr r3, 80055c0 <lowlayer_computeAndWritePulse+0x320>)
 80054c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054cc:	f7fa fede 	bl	800028c <__adddf3>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	4610      	mov	r0, r2
 80054d6:	4619      	mov	r1, r3
 80054d8:	a33b      	add	r3, pc, #236	; (adr r3, 80055c8 <lowlayer_computeAndWritePulse+0x328>)
 80054da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054de:	f7fb f88b 	bl	80005f8 <__aeabi_dmul>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	4610      	mov	r0, r2
 80054e8:	4619      	mov	r1, r3
 80054ea:	a333      	add	r3, pc, #204	; (adr r3, 80055b8 <lowlayer_computeAndWritePulse+0x318>)
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	f7fb f9ac 	bl	800084c <__aeabi_ddiv>
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	ec43 2b17 	vmov	d7, r2, r3
 80054fc:	eeb0 0a47 	vmov.f32	s0, s14
 8005500:	eef0 0a67 	vmov.f32	s1, s15
 8005504:	f015 fb04 	bl	801ab10 <round>
 8005508:	ec53 2b10 	vmov	r2, r3, d0
 800550c:	4610      	mov	r0, r2
 800550e:	4619      	mov	r1, r3
 8005510:	f7fb fb4a 	bl	8000ba8 <__aeabi_d2uiz>
 8005514:	4603      	mov	r3, r0
 8005516:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 8005518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800551a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	461a      	mov	r2, r3
 8005520:	f04f 0300 	mov.w	r3, #0
 8005524:	e9c7 2308 	strd	r2, r3, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 8005528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800552a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	461a      	mov	r2, r3
 8005530:	f04f 0300 	mov.w	r3, #0
 8005534:	e9c7 2306 	strd	r2, r3, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 8005538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800553a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	461a      	mov	r2, r3
 8005540:	f04f 0300 	mov.w	r3, #0
 8005544:	e9c7 2304 	strd	r2, r3, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 8005548:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800554a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	461a      	mov	r2, r3
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (abs(delta_var0) > 127
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	2b00      	cmp	r3, #0
 800555c:	bfb8      	it	lt
 800555e:	425b      	neglt	r3, r3
 8005560:	2b7f      	cmp	r3, #127	; 0x7f
 8005562:	dc11      	bgt.n	8005588 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var1) > 127
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	2b00      	cmp	r3, #0
 8005568:	bfb8      	it	lt
 800556a:	425b      	neglt	r3, r3
 800556c:	2b7f      	cmp	r3, #127	; 0x7f
 800556e:	dc0b      	bgt.n	8005588 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var2) > 127
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	2b00      	cmp	r3, #0
 8005574:	bfb8      	it	lt
 8005576:	425b      	neglt	r3, r3
 8005578:	2b7f      	cmp	r3, #127	; 0x7f
 800557a:	dc05      	bgt.n	8005588 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var3) > 127) {
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	bfb8      	it	lt
 8005582:	425b      	neglt	r3, r3
 8005584:	2b7f      	cmp	r3, #127	; 0x7f
 8005586:	dd01      	ble.n	800558c <lowlayer_computeAndWritePulse+0x2ec>
		return FALSE;
 8005588:	2300      	movs	r3, #0
 800558a:	e00c      	b.n	80055a6 <lowlayer_computeAndWritePulse+0x306>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 800558c:	f997 0020 	ldrsb.w	r0, [r7, #32]
 8005590:	f997 1018 	ldrsb.w	r1, [r7, #24]
 8005594:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8005598:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800559c:	f000 f828 	bl	80055f0 <lowlayer_writePulse>
 80055a0:	4603      	mov	r3, r0
 80055a2:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 80055a4:	79fb      	ldrb	r3, [r7, #7]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3748      	adds	r7, #72	; 0x48
 80055aa:	46bd      	mov	sp, r7
 80055ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055b0:	b004      	add	sp, #16
 80055b2:	4770      	bx	lr
 80055b4:	f3af 8000 	nop.w
 80055b8:	60000000 	.word	0x60000000
 80055bc:	401921fb 	.word	0x401921fb
 80055c0:	daaaaaab 	.word	0xdaaaaaab
 80055c4:	4007bc89 	.word	0x4007bc89
 80055c8:	a0000000 	.word	0xa0000000
 80055cc:	40d3bca1 	.word	0x40d3bca1
 80055d0:	daaaaaab 	.word	0xdaaaaaab
 80055d4:	3ff7bc89 	.word	0x3ff7bc89
 80055d8:	00000000 	.word	0x00000000
 80055dc:	40d38800 	.word	0x40d38800
 80055e0:	88000000 	.word	0x88000000
 80055e4:	4002d97c 	.word	0x4002d97c
 80055e8:	40df4000 	.word	0x40df4000
 80055ec:	40590000 	.word	0x40590000

080055f0 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 80055f0:	b590      	push	{r4, r7, lr}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	4604      	mov	r4, r0
 80055f8:	4608      	mov	r0, r1
 80055fa:	4611      	mov	r1, r2
 80055fc:	461a      	mov	r2, r3
 80055fe:	4623      	mov	r3, r4
 8005600:	71fb      	strb	r3, [r7, #7]
 8005602:	4603      	mov	r3, r0
 8005604:	71bb      	strb	r3, [r7, #6]
 8005606:	460b      	mov	r3, r1
 8005608:	717b      	strb	r3, [r7, #5]
 800560a:	4613      	mov	r3, r2
 800560c:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 800560e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005612:	2b00      	cmp	r3, #0
 8005614:	da06      	bge.n	8005624 <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 8005616:	79fb      	ldrb	r3, [r7, #7]
 8005618:	425b      	negs	r3, r3
 800561a:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 800561c:	79fb      	ldrb	r3, [r7, #7]
 800561e:	425b      	negs	r3, r3
 8005620:	75fb      	strb	r3, [r7, #23]
 8005622:	e006      	b.n	8005632 <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 8005624:	79fb      	ldrb	r3, [r7, #7]
 8005626:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 8005628:	79fb      	ldrb	r3, [r7, #7]
 800562a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800562e:	b25b      	sxtb	r3, r3
 8005630:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 8005632:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005636:	2b00      	cmp	r3, #0
 8005638:	da06      	bge.n	8005648 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 800563a:	79bb      	ldrb	r3, [r7, #6]
 800563c:	425b      	negs	r3, r3
 800563e:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 8005640:	79bb      	ldrb	r3, [r7, #6]
 8005642:	425b      	negs	r3, r3
 8005644:	75bb      	strb	r3, [r7, #22]
 8005646:	e006      	b.n	8005656 <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 8005648:	79bb      	ldrb	r3, [r7, #6]
 800564a:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 800564c:	79bb      	ldrb	r3, [r7, #6]
 800564e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005652:	b25b      	sxtb	r3, r3
 8005654:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 8005656:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800565a:	2b00      	cmp	r3, #0
 800565c:	da0b      	bge.n	8005676 <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 800565e:	797b      	ldrb	r3, [r7, #5]
 8005660:	425b      	negs	r3, r3
 8005662:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 8005664:	797b      	ldrb	r3, [r7, #5]
 8005666:	425b      	negs	r3, r3
 8005668:	b2db      	uxtb	r3, r3
 800566a:	b25b      	sxtb	r3, r3
 800566c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005670:	b25b      	sxtb	r3, r3
 8005672:	757b      	strb	r3, [r7, #21]
 8005674:	e003      	b.n	800567e <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 8005676:	797b      	ldrb	r3, [r7, #5]
 8005678:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 800567a:	797b      	ldrb	r3, [r7, #5]
 800567c:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 800567e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	da06      	bge.n	8005694 <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 8005686:	793b      	ldrb	r3, [r7, #4]
 8005688:	425b      	negs	r3, r3
 800568a:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 800568c:	793b      	ldrb	r3, [r7, #4]
 800568e:	425b      	negs	r3, r3
 8005690:	753b      	strb	r3, [r7, #20]
 8005692:	e006      	b.n	80056a2 <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 8005694:	793b      	ldrb	r3, [r7, #4]
 8005696:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 8005698:	793b      	ldrb	r3, [r7, #4]
 800569a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800569e:	b25b      	sxtb	r3, r3
 80056a0:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 80056a2:	7cfb      	ldrb	r3, [r7, #19]
 80056a4:	2b4b      	cmp	r3, #75	; 0x4b
 80056a6:	d808      	bhi.n	80056ba <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 80056a8:	7cbb      	ldrb	r3, [r7, #18]
 80056aa:	2b78      	cmp	r3, #120	; 0x78
 80056ac:	d805      	bhi.n	80056ba <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 80056ae:	7c7b      	ldrb	r3, [r7, #17]
 80056b0:	2b7d      	cmp	r3, #125	; 0x7d
 80056b2:	d802      	bhi.n	80056ba <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 80056b4:	7c3b      	ldrb	r3, [r7, #16]
 80056b6:	2b65      	cmp	r3, #101	; 0x65
 80056b8:	d901      	bls.n	80056be <lowlayer_writePulse+0xce>
		return FALSE;
 80056ba:	2300      	movs	r3, #0
 80056bc:	e04b      	b.n	8005756 <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80056be:	2200      	movs	r2, #0
 80056c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056c4:	4826      	ldr	r0, [pc, #152]	; (8005760 <lowlayer_writePulse+0x170>)
 80056c6:	f006 fed3 	bl	800c470 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 80056ca:	2200      	movs	r2, #0
 80056cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80056d0:	4824      	ldr	r0, [pc, #144]	; (8005764 <lowlayer_writePulse+0x174>)
 80056d2:	f006 fecd 	bl	800c470 <HAL_GPIO_WritePin>
	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 80056d6:	7dfb      	ldrb	r3, [r7, #23]
 80056d8:	4619      	mov	r1, r3
 80056da:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 80056de:	f7fe fb05 	bl	8003cec <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 80056e2:	7dbb      	ldrb	r3, [r7, #22]
 80056e4:	4619      	mov	r1, r3
 80056e6:	4820      	ldr	r0, [pc, #128]	; (8005768 <lowlayer_writePulse+0x178>)
 80056e8:	f7fe fb00 	bl	8003cec <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 80056ec:	7d7b      	ldrb	r3, [r7, #21]
 80056ee:	4619      	mov	r1, r3
 80056f0:	481e      	ldr	r0, [pc, #120]	; (800576c <lowlayer_writePulse+0x17c>)
 80056f2:	f7fe fafb 	bl	8003cec <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 80056f6:	7d3b      	ldrb	r3, [r7, #20]
 80056f8:	4619      	mov	r1, r3
 80056fa:	481d      	ldr	r0, [pc, #116]	; (8005770 <lowlayer_writePulse+0x180>)
 80056fc:	f7fe faf6 	bl	8003cec <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 8005700:	2364      	movs	r3, #100	; 0x64
 8005702:	73fb      	strb	r3, [r7, #15]
	
	 while (delay--);
 8005704:	bf00      	nop
 8005706:	7bfb      	ldrb	r3, [r7, #15]
 8005708:	1e5a      	subs	r2, r3, #1
 800570a:	73fa      	strb	r2, [r7, #15]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1fa      	bne.n	8005706 <lowlayer_writePulse+0x116>

//	int16_t wow = HAL_GPIO_ReadPin(CPLD_BUSY_GPIO_Port, CPLD_BUSY_Pin);
//	LOG_REPORT(" Busy: ", wow);
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 8005710:	2201      	movs	r2, #1
 8005712:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005716:	4813      	ldr	r0, [pc, #76]	; (8005764 <lowlayer_writePulse+0x174>)
 8005718:	f006 feaa 	bl	800c470 <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 800571c:	4b15      	ldr	r3, [pc, #84]	; (8005774 <lowlayer_writePulse+0x184>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005724:	4413      	add	r3, r2
 8005726:	4a13      	ldr	r2, [pc, #76]	; (8005774 <lowlayer_writePulse+0x184>)
 8005728:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 800572a:	4b12      	ldr	r3, [pc, #72]	; (8005774 <lowlayer_writePulse+0x184>)
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005732:	4413      	add	r3, r2
 8005734:	4a0f      	ldr	r2, [pc, #60]	; (8005774 <lowlayer_writePulse+0x184>)
 8005736:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 8005738:	4b0e      	ldr	r3, [pc, #56]	; (8005774 <lowlayer_writePulse+0x184>)
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005740:	4413      	add	r3, r2
 8005742:	4a0c      	ldr	r2, [pc, #48]	; (8005774 <lowlayer_writePulse+0x184>)
 8005744:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 8005746:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <lowlayer_writePulse+0x184>)
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800574e:	4413      	add	r3, r2
 8005750:	4a08      	ldr	r2, [pc, #32]	; (8005774 <lowlayer_writePulse+0x184>)
 8005752:	60d3      	str	r3, [r2, #12]

	return TRUE;
 8005754:	2301      	movs	r3, #1
}
 8005756:	4618      	mov	r0, r3
 8005758:	371c      	adds	r7, #28
 800575a:	46bd      	mov	sp, r7
 800575c:	bd90      	pop	{r4, r7, pc}
 800575e:	bf00      	nop
 8005760:	40020000 	.word	0x40020000
 8005764:	40020c00 	.word	0x40020c00
 8005768:	60000002 	.word	0x60000002
 800576c:	60000004 	.word	0x60000004
 8005770:	60000006 	.word	0x60000006
 8005774:	2000acc8 	.word	0x2000acc8

08005778 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 800577e:	2364      	movs	r3, #100	; 0x64
 8005780:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 8005782:	2201      	movs	r2, #1
 8005784:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005788:	4809      	ldr	r0, [pc, #36]	; (80057b0 <lowlayer_resetEncoder+0x38>)
 800578a:	f006 fe71 	bl	800c470 <HAL_GPIO_WritePin>
	while (delay--);
 800578e:	bf00      	nop
 8005790:	79fb      	ldrb	r3, [r7, #7]
 8005792:	1e5a      	subs	r2, r3, #1
 8005794:	71fa      	strb	r2, [r7, #7]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1fa      	bne.n	8005790 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 800579a:	2200      	movs	r2, #0
 800579c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057a0:	4803      	ldr	r0, [pc, #12]	; (80057b0 <lowlayer_resetEncoder+0x38>)
 80057a2:	f006 fe65 	bl	800c470 <HAL_GPIO_WritePin>
}
 80057a6:	bf00      	nop
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	40020c00 	.word	0x40020c00

080057b4 <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 80057ba:	4805      	ldr	r0, [pc, #20]	; (80057d0 <lowlayer_readLimitSwitch+0x1c>)
 80057bc:	f7fe faa5 	bl	8003d0a <FSMC_Read>
 80057c0:	4603      	mov	r3, r0
 80057c2:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 80057c4:	88fb      	ldrh	r3, [r7, #6]
 80057c6:	b2db      	uxtb	r3, r3
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	60000020 	.word	0x60000020

080057d4 <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	4603      	mov	r3, r0
 80057dc:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d81c      	bhi.n	800581e <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 80057e4:	79fb      	ldrb	r3, [r7, #7]
 80057e6:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80057ea:	3310      	adds	r3, #16
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fe fa8b 	bl	8003d0a <FSMC_Read>
 80057f4:	4603      	mov	r3, r0
 80057f6:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 80057f8:	79fb      	ldrb	r3, [r7, #7]
 80057fa:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80057fe:	3310      	adds	r3, #16
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	3302      	adds	r3, #2
 8005804:	4618      	mov	r0, r3
 8005806:	f7fe fa80 	bl	8003d0a <FSMC_Read>
 800580a:	4603      	mov	r3, r0
 800580c:	813b      	strh	r3, [r7, #8]
		data = high_word;
 800580e:	893b      	ldrh	r3, [r7, #8]
 8005810:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	041a      	lsls	r2, r3, #16
 8005816:	897b      	ldrh	r3, [r7, #10]
 8005818:	4313      	orrs	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	e001      	b.n	8005822 <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 800581e:	2300      	movs	r3, #0
 8005820:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8005822:	68fb      	ldr	r3, [r7, #12]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	4603      	mov	r3, r0
 8005834:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 8005836:	79fb      	ldrb	r3, [r7, #7]
 8005838:	2b02      	cmp	r3, #2
 800583a:	d81c      	bhi.n	8005876 <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 800583c:	79fb      	ldrb	r3, [r7, #7]
 800583e:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8005842:	3318      	adds	r3, #24
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4618      	mov	r0, r3
 8005848:	f7fe fa5f 	bl	8003d0a <FSMC_Read>
 800584c:	4603      	mov	r3, r0
 800584e:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 8005850:	79fb      	ldrb	r3, [r7, #7]
 8005852:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8005856:	3318      	adds	r3, #24
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	3302      	adds	r3, #2
 800585c:	4618      	mov	r0, r3
 800585e:	f7fe fa54 	bl	8003d0a <FSMC_Read>
 8005862:	4603      	mov	r3, r0
 8005864:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8005866:	893b      	ldrh	r3, [r7, #8]
 8005868:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	041a      	lsls	r2, r3, #16
 800586e:	897b      	ldrh	r3, [r7, #10]
 8005870:	4313      	orrs	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	e001      	b.n	800587a <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 8005876:	2300      	movs	r3, #0
 8005878:	60fb      	str	r3, [r7, #12]
	}
	return data;
 800587a:	68fb      	ldr	r3, [r7, #12]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 8005884:	b590      	push	{r4, r7, lr}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 800588a:	2300      	movs	r3, #0
 800588c:	71fb      	strb	r3, [r7, #7]
 800588e:	e00b      	b.n	80058a8 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 8005890:	79fc      	ldrb	r4, [r7, #7]
 8005892:	79fb      	ldrb	r3, [r7, #7]
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff ff9d 	bl	80057d4 <lowlayer_readEncoder>
 800589a:	4603      	mov	r3, r0
 800589c:	4a06      	ldr	r2, [pc, #24]	; (80058b8 <lowlayer_updateEncoder+0x34>)
 800589e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 80058a2:	79fb      	ldrb	r3, [r7, #7]
 80058a4:	3301      	adds	r3, #1
 80058a6:	71fb      	strb	r3, [r7, #7]
 80058a8:	79fb      	ldrb	r3, [r7, #7]
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d9f0      	bls.n	8005890 <lowlayer_updateEncoder+0xc>
	}
}
 80058ae:	bf00      	nop
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd90      	pop	{r4, r7, pc}
 80058b8:	2000acdc 	.word	0x2000acdc

080058bc <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 80058bc:	b590      	push	{r4, r7, lr}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 80058c2:	2300      	movs	r3, #0
 80058c4:	71fb      	strb	r3, [r7, #7]
 80058c6:	e00b      	b.n	80058e0 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 80058c8:	79fc      	ldrb	r4, [r7, #7]
 80058ca:	79fb      	ldrb	r3, [r7, #7]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff ffad 	bl	800582c <lowlayer_readCapture>
 80058d2:	4603      	mov	r3, r0
 80058d4:	4a06      	ldr	r2, [pc, #24]	; (80058f0 <lowlayer_updateCapture+0x34>)
 80058d6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	3301      	adds	r3, #1
 80058de:	71fb      	strb	r3, [r7, #7]
 80058e0:	79fb      	ldrb	r3, [r7, #7]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d9f0      	bls.n	80058c8 <lowlayer_updateCapture+0xc>
	}
}
 80058e6:	bf00      	nop
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd90      	pop	{r4, r7, pc}
 80058f0:	2000acec 	.word	0x2000acec

080058f4 <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 80058fa:	f7ff ff5b 	bl	80057b4 <lowlayer_readLimitSwitch>
 80058fe:	4603      	mov	r3, r0
 8005900:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 8005902:	2300      	movs	r3, #0
 8005904:	71fb      	strb	r3, [r7, #7]
 8005906:	e00d      	b.n	8005924 <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 8005908:	79ba      	ldrb	r2, [r7, #6]
 800590a:	79fb      	ldrb	r3, [r7, #7]
 800590c:	fa42 f303 	asr.w	r3, r2, r3
 8005910:	b2da      	uxtb	r2, r3
 8005912:	79fb      	ldrb	r3, [r7, #7]
 8005914:	f002 0201 	and.w	r2, r2, #1
 8005918:	b2d1      	uxtb	r1, r2
 800591a:	4a06      	ldr	r2, [pc, #24]	; (8005934 <lowlayer_updateLimit+0x40>)
 800591c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	3301      	adds	r3, #1
 8005922:	71fb      	strb	r3, [r7, #7]
 8005924:	79fb      	ldrb	r3, [r7, #7]
 8005926:	2b03      	cmp	r3, #3
 8005928:	d9ee      	bls.n	8005908 <lowlayer_updateLimit+0x14>
	}
}
 800592a:	bf00      	nop
 800592c:	bf00      	nop
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	2000ace8 	.word	0x2000ace8

08005938 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	4603      	mov	r3, r0
 8005940:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 8005942:	79fb      	ldrb	r3, [r7, #7]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d006      	beq.n	8005956 <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 8005948:	2201      	movs	r2, #1
 800594a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800594e:	4807      	ldr	r0, [pc, #28]	; (800596c <lowlayer_setOutput+0x34>)
 8005950:	f006 fd8e 	bl	800c470 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 8005954:	e005      	b.n	8005962 <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 8005956:	2200      	movs	r2, #0
 8005958:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800595c:	4803      	ldr	r0, [pc, #12]	; (800596c <lowlayer_setOutput+0x34>)
 800595e:	f006 fd87 	bl	800c470 <HAL_GPIO_WritePin>
}
 8005962:	bf00      	nop
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	40020400 	.word	0x40020400

08005970 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 8005974:	2201      	movs	r2, #1
 8005976:	2140      	movs	r1, #64	; 0x40
 8005978:	4802      	ldr	r0, [pc, #8]	; (8005984 <lowlayer_CPLD_Init+0x14>)
 800597a:	f006 fd79 	bl	800c470 <HAL_GPIO_WritePin>
}
 800597e:	bf00      	nop
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	40020c00 	.word	0x40020c00

08005988 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 800598c:	2201      	movs	r2, #1
 800598e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005992:	4808      	ldr	r0, [pc, #32]	; (80059b4 <lowlayer_stepMotorInit+0x2c>)
 8005994:	f006 fd6c 	bl	800c470 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 8005998:	2201      	movs	r2, #1
 800599a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800599e:	4805      	ldr	r0, [pc, #20]	; (80059b4 <lowlayer_stepMotorInit+0x2c>)
 80059a0:	f006 fd66 	bl	800c470 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 80059a4:	2201      	movs	r2, #1
 80059a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059aa:	4802      	ldr	r0, [pc, #8]	; (80059b4 <lowlayer_stepMotorInit+0x2c>)
 80059ac:	f006 fd60 	bl	800c470 <HAL_GPIO_WritePin>
}
 80059b0:	bf00      	nop
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	40020000 	.word	0x40020000

080059b8 <scaraStartup>:
//											 "Over Velocity",
//											 "Over Accelerate",
//											 "Wrong Joint Num",
//											 "Wrong Coordinate"
//											};
void				scaraStartup(void) {
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 80059bc:	f7ff ffd8 	bl	8005970 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 80059c0:	f7ff ffe2 	bl	8005988 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 80059c4:	f7ff fed8 	bl	8005778 <lowlayer_resetEncoder>
	//lowlayer_writePulse(0, 0, 0, 0);
}
 80059c8:	bf00      	nop
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	0000      	movs	r0, r0
	...

080059d0 <scaraInitDuty>:
	return SCARA_STATUS_OK;
	
}

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 80059d0:	b084      	sub	sp, #16
 80059d2:	b5b0      	push	{r4, r5, r7, lr}
 80059d4:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 80059d8:	af90      	add	r7, sp, #576	; 0x240
 80059da:	f507 74e8 	add.w	r4, r7, #464	; 0x1d0
 80059de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if(DUTY_SPACE_TASK == command.space_type) {
 80059e2:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f040 8375 	bne.w	80060d6 <scaraInitDuty+0x706>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 80059ec:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 80059f0:	a3be      	add	r3, pc, #760	; (adr r3, 8005cec <scaraInitDuty+0x31c>)
 80059f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f6:	f7fa fdff 	bl	80005f8 <__aeabi_dmul>
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	4610      	mov	r0, r2
 8005a00:	4619      	mov	r1, r3
 8005a02:	f04f 0200 	mov.w	r2, #0
 8005a06:	4bb2      	ldr	r3, [pc, #712]	; (8005cd0 <scaraInitDuty+0x300>)
 8005a08:	f7fa ff20 	bl	800084c <__aeabi_ddiv>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005a14:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d130      	bne.n	8005a7e <scaraInitDuty+0xae>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8005a1c:	4bad      	ldr	r3, [pc, #692]	; (8005cd4 <scaraInitDuty+0x304>)
 8005a1e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005a22:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8005a26:	f7fa fc31 	bl	800028c <__adddf3>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4639      	mov	r1, r7
 8005a30:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8005a34:	4ba7      	ldr	r3, [pc, #668]	; (8005cd4 <scaraInitDuty+0x304>)
 8005a36:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005a3a:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8005a3e:	f7fa fc25 	bl	800028c <__adddf3>
 8005a42:	4602      	mov	r2, r0
 8005a44:	460b      	mov	r3, r1
 8005a46:	4639      	mov	r1, r7
 8005a48:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8005a4c:	4ba1      	ldr	r3, [pc, #644]	; (8005cd4 <scaraInitDuty+0x304>)
 8005a4e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8005a52:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8005a56:	f7fa fc19 	bl	800028c <__adddf3>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4639      	mov	r1, r7
 8005a60:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8005a64:	4b9b      	ldr	r3, [pc, #620]	; (8005cd4 <scaraInitDuty+0x304>)
 8005a66:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8005a6a:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8005a6e:	f7fa fc0d 	bl	800028c <__adddf3>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	4639      	mov	r1, r7
 8005a78:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8005a7c:	e01b      	b.n	8005ab6 <scaraInitDuty+0xe6>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005a7e:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d114      	bne.n	8005ab0 <scaraInitDuty+0xe0>
			target_point.x 		= command.target_point.x;
 8005a86:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8005a8a:	4639      	mov	r1, r7
 8005a8c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 8005a90:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8005a94:	4639      	mov	r1, r7
 8005a96:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 8005a9a:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8005a9e:	4639      	mov	r1, r7
 8005aa0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 8005aa4:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8005aa8:	4639      	mov	r1, r7
 8005aaa:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8005aae:	e002      	b.n	8005ab6 <scaraInitDuty+0xe6>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8005ab0:	230c      	movs	r3, #12
 8005ab2:	f001 ba93 	b.w	8006fdc <scaraInitDuty+0x160c>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 8005ab6:	463b      	mov	r3, r7
 8005ab8:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8005abc:	4b85      	ldr	r3, [pc, #532]	; (8005cd4 <scaraInitDuty+0x304>)
 8005abe:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005ac2:	f7fa fbe1 	bl	8000288 <__aeabi_dsub>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
		dir_angle = 1;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
		if ( angle_s < 0) {
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8005ae0:	f7fa fffc 	bl	8000adc <__aeabi_dcmplt>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <scaraInitDuty+0x120>
			dir_angle = -1;
 8005aea:	23ff      	movs	r3, #255	; 0xff
 8005aec:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
//		if(positionCurrent.roll + angle_s < -3.14 || positionCurrent.roll + angle_s > 3.14){
//			dir_angle = -dir_angle;
//			angle_s = (2*PI - fabs(angle_s))*dir_angle;
//		}

		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 8005af0:	4b79      	ldr	r3, [pc, #484]	; (8005cd8 <scaraInitDuty+0x308>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 8005af6:	4b77      	ldr	r3, [pc, #476]	; (8005cd4 <scaraInitDuty+0x304>)
 8005af8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005afc:	4976      	ldr	r1, [pc, #472]	; (8005cd8 <scaraInitDuty+0x308>)
 8005afe:	f501 6182 	add.w	r1, r1, #1040	; 0x410
 8005b02:	e9c1 2300 	strd	r2, r3, [r1]
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 8005b06:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d11f      	bne.n	8005b4e <scaraInitDuty+0x17e>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 8005b0e:	4b72      	ldr	r3, [pc, #456]	; (8005cd8 <scaraInitDuty+0x308>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 8005b14:	4c6f      	ldr	r4, [pc, #444]	; (8005cd4 <scaraInitDuty+0x304>)
 8005b16:	463a      	mov	r2, r7
 8005b18:	ab2e      	add	r3, sp, #184	; 0xb8
 8005b1a:	4611      	mov	r1, r2
 8005b1c:	22c0      	movs	r2, #192	; 0xc0
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f010 fac6 	bl	80160b0 <memcpy>
 8005b24:	4668      	mov	r0, sp
 8005b26:	f104 0308 	add.w	r3, r4, #8
 8005b2a:	22b8      	movs	r2, #184	; 0xb8
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	f010 fabf 	bl	80160b0 <memcpy>
 8005b32:	e894 000c 	ldmia.w	r4, {r2, r3}
 8005b36:	4869      	ldr	r0, [pc, #420]	; (8005cdc <scaraInitDuty+0x30c>)
 8005b38:	f001 fa60 	bl	8006ffc <scaraInitLine>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
			total_s = myDUTY.task.path.line.total_s;
 8005b42:	4b65      	ldr	r3, [pc, #404]	; (8005cd8 <scaraInitDuty+0x308>)
 8005b44:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8005b48:	e9c7 236c 	strd	r2, r3, [r7, #432]	; 0x1b0
 8005b4c:	e058      	b.n	8005c00 <scaraInitDuty+0x230>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 8005b4e:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d151      	bne.n	8005bfa <scaraInitDuty+0x22a>
			SCARA_PositionTypeDef	center_point;
			target_point.z = positionCurrent.z;
 8005b56:	4b5f      	ldr	r3, [pc, #380]	; (8005cd4 <scaraInitDuty+0x304>)
 8005b58:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8005b5c:	4639      	mov	r1, r7
 8005b5e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
//				center_point.y 		= command.target_point.y;
//				center_point.z 		= positionCurrent.z;
//			} else {
//				return SCARA_STATUS_ERROR_COORDINATE;
//			}
			center_point.x 		= positionCurrent.x + command.sub_point.x;
 8005b62:	4b5c      	ldr	r3, [pc, #368]	; (8005cd4 <scaraInitDuty+0x304>)
 8005b64:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005b68:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8005b6c:	f7fa fb8e 	bl	800028c <__adddf3>
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8005b78:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			center_point.y 		= positionCurrent.y + command.sub_point.y;
 8005b7c:	4b55      	ldr	r3, [pc, #340]	; (8005cd4 <scaraInitDuty+0x304>)
 8005b7e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005b82:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8005b86:	f7fa fb81 	bl	800028c <__adddf3>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8005b92:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			center_point.z 		= positionCurrent.z;
 8005b96:	4b4f      	ldr	r3, [pc, #316]	; (8005cd4 <scaraInitDuty+0x304>)
 8005b98:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8005b9c:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8005ba0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 8005ba4:	4b4c      	ldr	r3, [pc, #304]	; (8005cd8 <scaraInitDuty+0x308>)
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8005baa:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005bae:	4c49      	ldr	r4, [pc, #292]	; (8005cd4 <scaraInitDuty+0x304>)
 8005bb0:	938e      	str	r3, [sp, #568]	; 0x238
 8005bb2:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8005bb6:	ab5e      	add	r3, sp, #376	; 0x178
 8005bb8:	4611      	mov	r1, r2
 8005bba:	22c0      	movs	r2, #192	; 0xc0
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f010 fa77 	bl	80160b0 <memcpy>
 8005bc2:	463a      	mov	r2, r7
 8005bc4:	ab2e      	add	r3, sp, #184	; 0xb8
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	22c0      	movs	r2, #192	; 0xc0
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f010 fa70 	bl	80160b0 <memcpy>
 8005bd0:	4668      	mov	r0, sp
 8005bd2:	f104 0308 	add.w	r3, r4, #8
 8005bd6:	22b8      	movs	r2, #184	; 0xb8
 8005bd8:	4619      	mov	r1, r3
 8005bda:	f010 fa69 	bl	80160b0 <memcpy>
 8005bde:	e894 000c 	ldmia.w	r4, {r2, r3}
 8005be2:	483f      	ldr	r0, [pc, #252]	; (8005ce0 <scaraInitDuty+0x310>)
 8005be4:	f001 fac0 	bl	8007168 <scaraInitCircle>
 8005be8:	4603      	mov	r3, r0
 8005bea:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
										positionCurrent,
										target_point,
										center_point,
										command.arc_dir );
			total_s = myDUTY.task.path.circle.total_s;
 8005bee:	4b3a      	ldr	r3, [pc, #232]	; (8005cd8 <scaraInitDuty+0x308>)
 8005bf0:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8005bf4:	e9c7 236c 	strd	r2, r3, [r7, #432]	; 0x1b0
 8005bf8:	e002      	b.n	8005c00 <scaraInitDuty+0x230>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	f001 b9ee 	b.w	8006fdc <scaraInitDuty+0x160c>
		}

		if ( SCARA_STATUS_OK != status) {
 8005c00:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <scaraInitDuty+0x240>
			return status;
 8005c08:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 8005c0c:	f001 b9e6 	b.w	8006fdc <scaraInitDuty+0x160c>
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 8005c10:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f040 80fe 	bne.w	8005e16 <scaraInitDuty+0x446>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005c1a:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d168      	bne.n	8005cf4 <scaraInitDuty+0x324>
//				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
//				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
//						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
//				myDUTY.time_total = command.time_total;

				myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
 8005c22:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8005c26:	492c      	ldr	r1, [pc, #176]	; (8005cd8 <scaraInitDuty+0x308>)
 8005c28:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005c2c:	4b2a      	ldr	r3, [pc, #168]	; (8005cd8 <scaraInitDuty+0x308>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8005c34:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005c38:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 8005c3c:	eeb0 2a46 	vmov.f32	s4, s12
 8005c40:	eef0 2a66 	vmov.f32	s5, s13
 8005c44:	eeb0 1a47 	vmov.f32	s2, s14
 8005c48:	eef0 1a67 	vmov.f32	s3, s15
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005c52:	2104      	movs	r1, #4
 8005c54:	4823      	ldr	r0, [pc, #140]	; (8005ce4 <scaraInitDuty+0x314>)
 8005c56:	f001 fcb7 	bl	80075c8 <scaraInitLSPB1>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);

				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8005c60:	4a1d      	ldr	r2, [pc, #116]	; (8005cd8 <scaraInitDuty+0x308>)
 8005c62:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8005c66:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
 8005c6a:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8005c6e:	491a      	ldr	r1, [pc, #104]	; (8005cd8 <scaraInitDuty+0x308>)
 8005c70:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c74:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8005c78:	4b17      	ldr	r3, [pc, #92]	; (8005cd8 <scaraInitDuty+0x308>)
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total);
 8005c80:	f997 31af 	ldrsb.w	r3, [r7, #431]	; 0x1af
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7fa fc4d 	bl	8000524 <__aeabi_i2d>
 8005c8a:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8005c8e:	f7fa fcb3 	bl	80005f8 <__aeabi_dmul>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	ec43 2b16 	vmov	d6, r2, r3
 8005c9a:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 8005c9e:	eeb0 1a47 	vmov.f32	s2, s14
 8005ca2:	eef0 1a67 	vmov.f32	s3, s15
 8005ca6:	2203      	movs	r2, #3
 8005ca8:	eeb0 0a46 	vmov.f32	s0, s12
 8005cac:	eef0 0a66 	vmov.f32	s1, s13
 8005cb0:	2105      	movs	r1, #5
 8005cb2:	480d      	ldr	r0, [pc, #52]	; (8005ce8 <scaraInitDuty+0x318>)
 8005cb4:	f001 fc1c 	bl	80074f0 <scaraInitLinear>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
				myDUTY.time_total = command.time_total;
 8005cbe:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8005cc2:	4905      	ldr	r1, [pc, #20]	; (8005cd8 <scaraInitDuty+0x308>)
 8005cc4:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8005cc8:	e9c1 2300 	strd	r2, r3, [r1]
 8005ccc:	e1f2      	b.n	80060b4 <scaraInitDuty+0x6e4>
 8005cce:	bf00      	nop
 8005cd0:	40668000 	.word	0x40668000
 8005cd4:	2000b8f0 	.word	0x2000b8f0
 8005cd8:	2000ad30 	.word	0x2000ad30
 8005cdc:	2000ad40 	.word	0x2000ad40
 8005ce0:	2000adb0 	.word	0x2000adb0
 8005ce4:	2000ae48 	.word	0x2000ae48
 8005ce8:	2000b118 	.word	0x2000b118
 8005cec:	60000000 	.word	0x60000000
 8005cf0:	400921fb 	.word	0x400921fb
			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005cf4:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f040 8089 	bne.w	8005e10 <scaraInitDuty+0x440>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005cfe:	4bb6      	ldr	r3, [pc, #728]	; (8005fd8 <scaraInitDuty+0x608>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8005d06:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005d0a:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005d0e:	eeb0 2a46 	vmov.f32	s4, s12
 8005d12:	eef0 2a66 	vmov.f32	s5, s13
 8005d16:	eeb0 1a47 	vmov.f32	s2, s14
 8005d1a:	eef0 1a67 	vmov.f32	s3, s15
 8005d1e:	2200      	movs	r2, #0
 8005d20:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005d24:	2104      	movs	r1, #4
 8005d26:	48ad      	ldr	r0, [pc, #692]	; (8005fdc <scaraInitDuty+0x60c>)
 8005d28:	f001 ff1e 	bl	8007b68 <scaraInitLSPB>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005d32:	4ba9      	ldr	r3, [pc, #676]	; (8005fd8 <scaraInitDuty+0x608>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8005d3a:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005d3e:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005d42:	eeb0 2a46 	vmov.f32	s4, s12
 8005d46:	eef0 2a66 	vmov.f32	s5, s13
 8005d4a:	eeb0 1a47 	vmov.f32	s2, s14
 8005d4e:	eef0 1a67 	vmov.f32	s3, s15
 8005d52:	2200      	movs	r2, #0
 8005d54:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8005d58:	2105      	movs	r1, #5
 8005d5a:	48a1      	ldr	r0, [pc, #644]	; (8005fe0 <scaraInitDuty+0x610>)
 8005d5c:	f001 ff04 	bl	8007b68 <scaraInitLSPB>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 8005d66:	4b9c      	ldr	r3, [pc, #624]	; (8005fd8 <scaraInitDuty+0x608>)
 8005d68:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 8005d6c:	4b9a      	ldr	r3, [pc, #616]	; (8005fd8 <scaraInitDuty+0x608>)
 8005d6e:	e9d3 23ba 	ldrd	r2, r3, [r3, #744]	; 0x2e8
 8005d72:	f7fa fed1 	bl	8000b18 <__aeabi_dcmpgt>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d024      	beq.n	8005dc6 <scaraInitDuty+0x3f6>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 8005d7c:	4b96      	ldr	r3, [pc, #600]	; (8005fd8 <scaraInitDuty+0x608>)
 8005d7e:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 8005d82:	4995      	ldr	r1, [pc, #596]	; (8005fd8 <scaraInitDuty+0x608>)
 8005d84:	e9c1 23ba 	strd	r2, r3, [r1, #744]	; 0x2e8
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8005d88:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005d8c:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005d90:	eeb0 2a46 	vmov.f32	s4, s12
 8005d94:	eef0 2a66 	vmov.f32	s5, s13
 8005d98:	eeb0 1a47 	vmov.f32	s2, s14
 8005d9c:	eef0 1a67 	vmov.f32	s3, s15
 8005da0:	2201      	movs	r2, #1
 8005da2:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8005da6:	2105      	movs	r1, #5
 8005da8:	488d      	ldr	r0, [pc, #564]	; (8005fe0 <scaraInitDuty+0x610>)
 8005daa:	f001 fedd 	bl	8007b68 <scaraInitLSPB>
 8005dae:	4603      	mov	r3, r0
 8005db0:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8005db4:	4b88      	ldr	r3, [pc, #544]	; (8005fd8 <scaraInitDuty+0x608>)
 8005db6:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 8005dba:	4987      	ldr	r1, [pc, #540]	; (8005fd8 <scaraInitDuty+0x608>)
 8005dbc:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8005dc0:	e9c1 2300 	strd	r2, r3, [r1]
 8005dc4:	e176      	b.n	80060b4 <scaraInitDuty+0x6e4>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 8005dc6:	4b84      	ldr	r3, [pc, #528]	; (8005fd8 <scaraInitDuty+0x608>)
 8005dc8:	e9d3 23ba 	ldrd	r2, r3, [r3, #744]	; 0x2e8
 8005dcc:	4982      	ldr	r1, [pc, #520]	; (8005fd8 <scaraInitDuty+0x608>)
 8005dce:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8005dd2:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005dd6:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005dda:	eeb0 2a46 	vmov.f32	s4, s12
 8005dde:	eef0 2a66 	vmov.f32	s5, s13
 8005de2:	eeb0 1a47 	vmov.f32	s2, s14
 8005de6:	eef0 1a67 	vmov.f32	s3, s15
 8005dea:	2201      	movs	r2, #1
 8005dec:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005df0:	2104      	movs	r1, #4
 8005df2:	487a      	ldr	r0, [pc, #488]	; (8005fdc <scaraInitDuty+0x60c>)
 8005df4:	f001 feb8 	bl	8007b68 <scaraInitLSPB>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 8005dfe:	4b76      	ldr	r3, [pc, #472]	; (8005fd8 <scaraInitDuty+0x608>)
 8005e00:	e9d3 23ba 	ldrd	r2, r3, [r3, #744]	; 0x2e8
 8005e04:	4974      	ldr	r1, [pc, #464]	; (8005fd8 <scaraInitDuty+0x608>)
 8005e06:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8005e0a:	e9c1 2300 	strd	r2, r3, [r1]
 8005e0e:	e151      	b.n	80060b4 <scaraInitDuty+0x6e4>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 8005e10:	2308      	movs	r3, #8
 8005e12:	f001 b8e3 	b.w	8006fdc <scaraInitDuty+0x160c>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 8005e16:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	f040 80e6 	bne.w	8005fec <scaraInitDuty+0x61c>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005e20:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d145      	bne.n	8005eb4 <scaraInitDuty+0x4e4>
				myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
 8005e28:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8005e2c:	496a      	ldr	r1, [pc, #424]	; (8005fd8 <scaraInitDuty+0x608>)
 8005e2e:	e9c1 237e 	strd	r2, r3, [r1, #504]	; 0x1f8
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005e32:	4b69      	ldr	r3, [pc, #420]	; (8005fd8 <scaraInitDuty+0x608>)
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8005e3a:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005e3e:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005e42:	eeb0 2a46 	vmov.f32	s4, s12
 8005e46:	eef0 2a66 	vmov.f32	s5, s13
 8005e4a:	eeb0 1a47 	vmov.f32	s2, s14
 8005e4e:	eef0 1a67 	vmov.f32	s3, s15
 8005e52:	2201      	movs	r2, #1
 8005e54:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005e58:	2104      	movs	r1, #4
 8005e5a:	4862      	ldr	r0, [pc, #392]	; (8005fe4 <scaraInitDuty+0x614>)
 8005e5c:	f002 fa58 	bl	8008310 <scaraInitScurve>
 8005e60:	4603      	mov	r3, r0
 8005e62:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.scurve.Tf = command.time_total;
 8005e66:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8005e6a:	495b      	ldr	r1, [pc, #364]	; (8005fd8 <scaraInitDuty+0x608>)
 8005e6c:	e9c1 23de 	strd	r2, r3, [r1, #888]	; 0x378
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005e70:	4b59      	ldr	r3, [pc, #356]	; (8005fd8 <scaraInitDuty+0x608>)
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8005e78:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005e7c:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005e80:	eeb0 2a46 	vmov.f32	s4, s12
 8005e84:	eef0 2a66 	vmov.f32	s5, s13
 8005e88:	eeb0 1a47 	vmov.f32	s2, s14
 8005e8c:	eef0 1a67 	vmov.f32	s3, s15
 8005e90:	2201      	movs	r2, #1
 8005e92:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8005e96:	2105      	movs	r1, #5
 8005e98:	4853      	ldr	r0, [pc, #332]	; (8005fe8 <scaraInitDuty+0x618>)
 8005e9a:	f002 fa39 	bl	8008310 <scaraInitScurve>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 8005ea4:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8005ea8:	494b      	ldr	r1, [pc, #300]	; (8005fd8 <scaraInitDuty+0x608>)
 8005eaa:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8005eae:	e9c1 2300 	strd	r2, r3, [r1]
 8005eb2:	e0ff      	b.n	80060b4 <scaraInitDuty+0x6e4>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005eb4:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f040 8089 	bne.w	8005fd0 <scaraInitDuty+0x600>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005ebe:	4b46      	ldr	r3, [pc, #280]	; (8005fd8 <scaraInitDuty+0x608>)
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8005ec6:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005eca:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005ece:	eeb0 2a46 	vmov.f32	s4, s12
 8005ed2:	eef0 2a66 	vmov.f32	s5, s13
 8005ed6:	eeb0 1a47 	vmov.f32	s2, s14
 8005eda:	eef0 1a67 	vmov.f32	s3, s15
 8005ede:	2200      	movs	r2, #0
 8005ee0:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005ee4:	2104      	movs	r1, #4
 8005ee6:	483f      	ldr	r0, [pc, #252]	; (8005fe4 <scaraInitDuty+0x614>)
 8005ee8:	f002 fa12 	bl	8008310 <scaraInitScurve>
 8005eec:	4603      	mov	r3, r0
 8005eee:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005ef2:	4b39      	ldr	r3, [pc, #228]	; (8005fd8 <scaraInitDuty+0x608>)
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8005efa:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005efe:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005f02:	eeb0 2a46 	vmov.f32	s4, s12
 8005f06:	eef0 2a66 	vmov.f32	s5, s13
 8005f0a:	eeb0 1a47 	vmov.f32	s2, s14
 8005f0e:	eef0 1a67 	vmov.f32	s3, s15
 8005f12:	2200      	movs	r2, #0
 8005f14:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8005f18:	2105      	movs	r1, #5
 8005f1a:	4833      	ldr	r0, [pc, #204]	; (8005fe8 <scaraInitDuty+0x618>)
 8005f1c:	f002 f9f8 	bl	8008310 <scaraInitScurve>
 8005f20:	4603      	mov	r3, r0
 8005f22:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 8005f26:	4b2c      	ldr	r3, [pc, #176]	; (8005fd8 <scaraInitDuty+0x608>)
 8005f28:	e9d3 017e 	ldrd	r0, r1, [r3, #504]	; 0x1f8
 8005f2c:	4b2a      	ldr	r3, [pc, #168]	; (8005fd8 <scaraInitDuty+0x608>)
 8005f2e:	e9d3 23de 	ldrd	r2, r3, [r3, #888]	; 0x378
 8005f32:	f7fa fdf1 	bl	8000b18 <__aeabi_dcmpgt>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d024      	beq.n	8005f86 <scaraInitDuty+0x5b6>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 8005f3c:	4b26      	ldr	r3, [pc, #152]	; (8005fd8 <scaraInitDuty+0x608>)
 8005f3e:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 8005f42:	4925      	ldr	r1, [pc, #148]	; (8005fd8 <scaraInitDuty+0x608>)
 8005f44:	e9c1 23de 	strd	r2, r3, [r1, #888]	; 0x378
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8005f48:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005f4c:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005f50:	eeb0 2a46 	vmov.f32	s4, s12
 8005f54:	eef0 2a66 	vmov.f32	s5, s13
 8005f58:	eeb0 1a47 	vmov.f32	s2, s14
 8005f5c:	eef0 1a67 	vmov.f32	s3, s15
 8005f60:	2201      	movs	r2, #1
 8005f62:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8005f66:	2105      	movs	r1, #5
 8005f68:	481f      	ldr	r0, [pc, #124]	; (8005fe8 <scaraInitDuty+0x618>)
 8005f6a:	f002 f9d1 	bl	8008310 <scaraInitScurve>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8005f74:	4b18      	ldr	r3, [pc, #96]	; (8005fd8 <scaraInitDuty+0x608>)
 8005f76:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 8005f7a:	4917      	ldr	r1, [pc, #92]	; (8005fd8 <scaraInitDuty+0x608>)
 8005f7c:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8005f80:	e9c1 2300 	strd	r2, r3, [r1]
 8005f84:	e096      	b.n	80060b4 <scaraInitDuty+0x6e4>
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 8005f86:	4b14      	ldr	r3, [pc, #80]	; (8005fd8 <scaraInitDuty+0x608>)
 8005f88:	e9d3 23de 	ldrd	r2, r3, [r3, #888]	; 0x378
 8005f8c:	4912      	ldr	r1, [pc, #72]	; (8005fd8 <scaraInitDuty+0x608>)
 8005f8e:	e9c1 237e 	strd	r2, r3, [r1, #504]	; 0x1f8
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8005f92:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005f96:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005f9a:	eeb0 2a46 	vmov.f32	s4, s12
 8005f9e:	eef0 2a66 	vmov.f32	s5, s13
 8005fa2:	eeb0 1a47 	vmov.f32	s2, s14
 8005fa6:	eef0 1a67 	vmov.f32	s3, s15
 8005faa:	2201      	movs	r2, #1
 8005fac:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005fb0:	2104      	movs	r1, #4
 8005fb2:	480c      	ldr	r0, [pc, #48]	; (8005fe4 <scaraInitDuty+0x614>)
 8005fb4:	f002 f9ac 	bl	8008310 <scaraInitScurve>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 8005fbe:	4b06      	ldr	r3, [pc, #24]	; (8005fd8 <scaraInitDuty+0x608>)
 8005fc0:	e9d3 23de 	ldrd	r2, r3, [r3, #888]	; 0x378
 8005fc4:	4904      	ldr	r1, [pc, #16]	; (8005fd8 <scaraInitDuty+0x608>)
 8005fc6:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8005fca:	e9c1 2300 	strd	r2, r3, [r1]
 8005fce:	e071      	b.n	80060b4 <scaraInitDuty+0x6e4>
				}
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8005fd0:	2308      	movs	r3, #8
 8005fd2:	f001 b803 	b.w	8006fdc <scaraInitDuty+0x160c>
 8005fd6:	bf00      	nop
 8005fd8:	2000ad30 	.word	0x2000ad30
 8005fdc:	2000ae48 	.word	0x2000ae48
 8005fe0:	2000afc8 	.word	0x2000afc8
 8005fe4:	2000aec8 	.word	0x2000aec8
 8005fe8:	2000b048 	.word	0x2000b048
			}
		}else if(DUTY_TRAJECTORY_LINEAR == command.trajec_type){
 8005fec:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d15c      	bne.n	80060ae <scaraInitDuty+0x6de>
			myDUTY.time_total = command.time_total;
 8005ff4:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8005ff8:	49b3      	ldr	r1, [pc, #716]	; (80062c8 <scaraInitDuty+0x8f8>)
 8005ffa:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8005ffe:	e9c1 2300 	strd	r2, r3, [r1]
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006002:	4ab1      	ldr	r2, [pc, #708]	; (80062c8 <scaraInitDuty+0x8f8>)
 8006004:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8006008:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 800600c:	4bae      	ldr	r3, [pc, #696]	; (80062c8 <scaraInitDuty+0x8f8>)
 800600e:	2202      	movs	r2, #2
 8006010:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006014:	4bac      	ldr	r3, [pc, #688]	; (80062c8 <scaraInitDuty+0x8f8>)
 8006016:	2202      	movs	r2, #2
 8006018:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			if(command.modeInit_type == DUTY_MODE_INIT_QT){
 800601c:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006020:	2b03      	cmp	r3, #3
 8006022:	d110      	bne.n	8006046 <scaraInitDuty+0x676>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, total_s, DUTY_MODE_INIT_QT, command.time_total);
 8006024:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 8006028:	eeb0 1a47 	vmov.f32	s2, s14
 800602c:	eef0 1a67 	vmov.f32	s3, s15
 8006030:	2203      	movs	r2, #3
 8006032:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8006036:	2104      	movs	r1, #4
 8006038:	48a4      	ldr	r0, [pc, #656]	; (80062cc <scaraInitDuty+0x8fc>)
 800603a:	f001 fa59 	bl	80074f0 <scaraInitLinear>
 800603e:	4603      	mov	r3, r0
 8006040:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 8006044:	e013      	b.n	800606e <scaraInitDuty+0x69e>
			}else if(command.modeInit_type == DUTY_MODE_INIT_QV){
 8006046:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800604a:	2b02      	cmp	r3, #2
 800604c:	d10f      	bne.n	800606e <scaraInitDuty+0x69e>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, total_s, DUTY_MODE_INIT_QV, command.v_factor);
 800604e:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006052:	eeb0 1a47 	vmov.f32	s2, s14
 8006056:	eef0 1a67 	vmov.f32	s3, s15
 800605a:	2202      	movs	r2, #2
 800605c:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8006060:	2104      	movs	r1, #4
 8006062:	489a      	ldr	r0, [pc, #616]	; (80062cc <scaraInitDuty+0x8fc>)
 8006064:	f001 fa44 	bl	80074f0 <scaraInitLinear>
 8006068:	4603      	mov	r3, r0
 800606a:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
			}
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total);
 800606e:	f997 31af 	ldrsb.w	r3, [r7, #431]	; 0x1af
 8006072:	4618      	mov	r0, r3
 8006074:	f7fa fa56 	bl	8000524 <__aeabi_i2d>
 8006078:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800607c:	f7fa fabc 	bl	80005f8 <__aeabi_dmul>
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	ec43 2b16 	vmov	d6, r2, r3
 8006088:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 800608c:	eeb0 1a47 	vmov.f32	s2, s14
 8006090:	eef0 1a67 	vmov.f32	s3, s15
 8006094:	2203      	movs	r2, #3
 8006096:	eeb0 0a46 	vmov.f32	s0, s12
 800609a:	eef0 0a66 	vmov.f32	s1, s13
 800609e:	2105      	movs	r1, #5
 80060a0:	488b      	ldr	r0, [pc, #556]	; (80062d0 <scaraInitDuty+0x900>)
 80060a2:	f001 fa25 	bl	80074f0 <scaraInitLinear>
 80060a6:	4603      	mov	r3, r0
 80060a8:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
 80060ac:	e002      	b.n	80060b4 <scaraInitDuty+0x6e4>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 80060ae:	2305      	movs	r3, #5
 80060b0:	f000 bf94 	b.w	8006fdc <scaraInitDuty+0x160c>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 80060b4:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <scaraInitDuty+0x6f4>
			return status1;
 80060bc:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 80060c0:	f000 bf8c 	b.w	8006fdc <scaraInitDuty+0x160c>
		}
		if ( SCARA_STATUS_OK != status2) {
 80060c4:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 8759 	beq.w	8006f80 <scaraInitDuty+0x15b0>
			return status2;
 80060ce:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 80060d2:	f000 bf83 	b.w	8006fdc <scaraInitDuty+0x160c>
		}


	
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 80060d6:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 80060da:	2b01      	cmp	r3, #1
 80060dc:	f040 8744 	bne.w	8006f68 <scaraInitDuty+0x1598>
		/*----------- Space Joint ------------*/
		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 80060e0:	4b79      	ldr	r3, [pc, #484]	; (80062c8 <scaraInitDuty+0x8f8>)
 80060e2:	2201      	movs	r2, #1
 80060e4:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 80060e6:	4b7b      	ldr	r3, [pc, #492]	; (80062d4 <scaraInitDuty+0x904>)
 80060e8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80060ec:	4976      	ldr	r1, [pc, #472]	; (80062c8 <scaraInitDuty+0x8f8>)
 80060ee:	f601 2118 	addw	r1, r1, #2584	; 0xa18
 80060f2:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 80060f6:	4b77      	ldr	r3, [pc, #476]	; (80062d4 <scaraInitDuty+0x904>)
 80060f8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80060fc:	4972      	ldr	r1, [pc, #456]	; (80062c8 <scaraInitDuty+0x8f8>)
 80060fe:	f501 6122 	add.w	r1, r1, #2592	; 0xa20
 8006102:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 8006106:	4b73      	ldr	r3, [pc, #460]	; (80062d4 <scaraInitDuty+0x904>)
 8006108:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800610c:	496e      	ldr	r1, [pc, #440]	; (80062c8 <scaraInitDuty+0x8f8>)
 800610e:	f601 2128 	addw	r1, r1, #2600	; 0xa28
 8006112:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 8006116:	4b6f      	ldr	r3, [pc, #444]	; (80062d4 <scaraInitDuty+0x904>)
 8006118:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800611c:	496a      	ldr	r1, [pc, #424]	; (80062c8 <scaraInitDuty+0x8f8>)
 800611e:	f501 6123 	add.w	r1, r1, #2608	; 0xa30
 8006122:	e9c1 2300 	strd	r2, r3, [r1]

		//-----Joint Single
		if(command.joint_type == DUTY_JOINT_4DOF){
 8006126:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800612a:	2b01      	cmp	r3, #1
 800612c:	f040 835d 	bne.w	80067ea <scaraInitDuty+0xe1a>
			SCARA_PositionTypeDef	target_point;
			// Change Degree --> Radian
			command.target_point.roll = command.target_point.roll*PI/180.0;
 8006130:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 8006134:	a362      	add	r3, pc, #392	; (adr r3, 80062c0 <scaraInitDuty+0x8f0>)
 8006136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613a:	f7fa fa5d 	bl	80005f8 <__aeabi_dmul>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	4610      	mov	r0, r2
 8006144:	4619      	mov	r1, r3
 8006146:	f04f 0200 	mov.w	r2, #0
 800614a:	4b63      	ldr	r3, [pc, #396]	; (80062d8 <scaraInitDuty+0x908>)
 800614c:	f7fa fb7e 	bl	800084c <__aeabi_ddiv>
 8006150:	4602      	mov	r2, r0
 8006152:	460b      	mov	r3, r1
 8006154:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
			// Coordinate
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8006158:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 800615c:	2b01      	cmp	r3, #1
 800615e:	d134      	bne.n	80061ca <scaraInitDuty+0x7fa>
				target_point.x 		= positionCurrent.x + command.target_point.x;
 8006160:	4b5c      	ldr	r3, [pc, #368]	; (80062d4 <scaraInitDuty+0x904>)
 8006162:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006166:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 800616a:	f7fa f88f 	bl	800028c <__adddf3>
 800616e:	4602      	mov	r2, r0
 8006170:	460b      	mov	r3, r1
 8006172:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8006176:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
				target_point.y 		= positionCurrent.y + command.target_point.y;
 800617a:	4b56      	ldr	r3, [pc, #344]	; (80062d4 <scaraInitDuty+0x904>)
 800617c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006180:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8006184:	f7fa f882 	bl	800028c <__adddf3>
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8006190:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
				target_point.z 		= positionCurrent.z + command.target_point.z;
 8006194:	4b4f      	ldr	r3, [pc, #316]	; (80062d4 <scaraInitDuty+0x904>)
 8006196:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800619a:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800619e:	f7fa f875 	bl	800028c <__adddf3>
 80061a2:	4602      	mov	r2, r0
 80061a4:	460b      	mov	r3, r1
 80061a6:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80061aa:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
				target_point.roll	= positionCurrent.roll + command.target_point.roll;
 80061ae:	4b49      	ldr	r3, [pc, #292]	; (80062d4 <scaraInitDuty+0x904>)
 80061b0:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80061b4:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80061b8:	f7fa f868 	bl	800028c <__adddf3>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80061c4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 80061c8:	e01f      	b.n	800620a <scaraInitDuty+0x83a>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80061ca:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d118      	bne.n	8006204 <scaraInitDuty+0x834>
				target_point.x 		= command.target_point.x;
 80061d2:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 80061d6:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80061da:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
				target_point.y 		= command.target_point.y;
 80061de:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80061e2:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80061e6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
				target_point.z 		= command.target_point.z;
 80061ea:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 80061ee:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80061f2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
				target_point.roll	= command.target_point.roll;
 80061f6:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80061fa:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80061fe:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8006202:	e002      	b.n	800620a <scaraInitDuty+0x83a>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 8006204:	230c      	movs	r3, #12
 8006206:	f000 bee9 	b.w	8006fdc <scaraInitDuty+0x160c>
			}

			if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 800620a:	4c32      	ldr	r4, [pc, #200]	; (80062d4 <scaraInitDuty+0x904>)
 800620c:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 8006210:	4668      	mov	r0, sp
 8006212:	f104 0308 	add.w	r3, r4, #8
 8006216:	22b8      	movs	r2, #184	; 0xb8
 8006218:	4619      	mov	r1, r3
 800621a:	f00f ff49 	bl	80160b0 <memcpy>
 800621e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006222:	4628      	mov	r0, r5
 8006224:	f7fe f8cc 	bl	80043c0 <kinematicInverse>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d102      	bne.n	8006234 <scaraInitDuty+0x864>
				return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 800622e:	2307      	movs	r3, #7
 8006230:	f000 bed4 	b.w	8006fdc <scaraInitDuty+0x160c>
			}
			// Trajectory 4 profile
			double q[4];
			q[0] = target_point.Theta1 - positionCurrent.Theta1;
 8006234:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006238:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800623c:	4b25      	ldr	r3, [pc, #148]	; (80062d4 <scaraInitDuty+0x904>)
 800623e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8006242:	f7fa f821 	bl	8000288 <__aeabi_dsub>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4639      	mov	r1, r7
 800624c:	e9c1 2300 	strd	r2, r3, [r1]
			q[1] = target_point.Theta2 - positionCurrent.Theta2;
 8006250:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006254:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8006258:	4b1e      	ldr	r3, [pc, #120]	; (80062d4 <scaraInitDuty+0x904>)
 800625a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800625e:	f7fa f813 	bl	8000288 <__aeabi_dsub>
 8006262:	4602      	mov	r2, r0
 8006264:	460b      	mov	r3, r1
 8006266:	4639      	mov	r1, r7
 8006268:	e9c1 2302 	strd	r2, r3, [r1, #8]
			q[2] = target_point.D3 	   - positionCurrent.D3;
 800626c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006270:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8006274:	4b17      	ldr	r3, [pc, #92]	; (80062d4 <scaraInitDuty+0x904>)
 8006276:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800627a:	f7fa f805 	bl	8000288 <__aeabi_dsub>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4639      	mov	r1, r7
 8006284:	e9c1 2304 	strd	r2, r3, [r1, #16]
			q[3] = target_point.Theta4 - positionCurrent.Theta4;
 8006288:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800628c:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8006290:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <scaraInitDuty+0x904>)
 8006292:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8006296:	f7f9 fff7 	bl	8000288 <__aeabi_dsub>
 800629a:	4602      	mov	r2, r0
 800629c:	460b      	mov	r3, r1
 800629e:	4639      	mov	r1, r7
 80062a0:	e9c1 2306 	strd	r2, r3, [r1, #24]

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 80062a4:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f040 8156 	bne.w	800655a <scaraInitDuty+0xb8a>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80062ae:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d171      	bne.n	800639a <scaraInitDuty+0x9ca>
					for ( uint8_t i = 0; i < 4; i++) {
 80062b6:	2300      	movs	r3, #0
 80062b8:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 80062bc:	e060      	b.n	8006380 <scaraInitDuty+0x9b0>
 80062be:	bf00      	nop
 80062c0:	60000000 	.word	0x60000000
 80062c4:	400921fb 	.word	0x400921fb
 80062c8:	2000ad30 	.word	0x2000ad30
 80062cc:	2000af98 	.word	0x2000af98
 80062d0:	2000b118 	.word	0x2000b118
 80062d4:	2000b8f0 	.word	0x2000b8f0
 80062d8:	40668000 	.word	0x40668000
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80062dc:	f897 21ae 	ldrb.w	r2, [r7, #430]	; 0x1ae
 80062e0:	49d4      	ldr	r1, [pc, #848]	; (8006634 <scaraInitDuty+0xc64>)
 80062e2:	4613      	mov	r3, r2
 80062e4:	005b      	lsls	r3, r3, #1
 80062e6:	4413      	add	r3, r2
 80062e8:	01db      	lsls	r3, r3, #7
 80062ea:	440b      	add	r3, r1
 80062ec:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80062f0:	2200      	movs	r2, #0
 80062f2:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 80062f4:	f897 21ae 	ldrb.w	r2, [r7, #430]	; 0x1ae
 80062f8:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 80062fc:	4ccd      	ldr	r4, [pc, #820]	; (8006634 <scaraInitDuty+0xc64>)
 80062fe:	4613      	mov	r3, r2
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	4413      	add	r3, r2
 8006304:	01db      	lsls	r3, r3, #7
 8006306:	4423      	add	r3, r4
 8006308:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800630c:	e9c3 0100 	strd	r0, r1, [r3]
						status1 = scaraInitLSPB1(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006310:	f897 21ae 	ldrb.w	r2, [r7, #430]	; 0x1ae
 8006314:	4613      	mov	r3, r2
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	4413      	add	r3, r2
 800631a:	01db      	lsls	r3, r3, #7
 800631c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006320:	4ac4      	ldr	r2, [pc, #784]	; (8006634 <scaraInitDuty+0xc64>)
 8006322:	1898      	adds	r0, r3, r2
 8006324:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8006328:	4ac3      	ldr	r2, [pc, #780]	; (8006638 <scaraInitDuty+0xc68>)
 800632a:	5cd1      	ldrb	r1, [r2, r3]
 800632c:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8006330:	463a      	mov	r2, r7
 8006332:	00db      	lsls	r3, r3, #3
 8006334:	4413      	add	r3, r2
 8006336:	ed93 7b00 	vldr	d7, [r3]
 800633a:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 800633e:	ed97 5b7c 	vldr	d5, [r7, #496]	; 0x1f0
 8006342:	eeb0 2a45 	vmov.f32	s4, s10
 8006346:	eef0 2a65 	vmov.f32	s5, s11
 800634a:	eeb0 1a46 	vmov.f32	s2, s12
 800634e:	eef0 1a66 	vmov.f32	s3, s13
 8006352:	2201      	movs	r2, #1
 8006354:	eeb0 0a47 	vmov.f32	s0, s14
 8006358:	eef0 0a67 	vmov.f32	s1, s15
 800635c:	f001 f934 	bl	80075c8 <scaraInitLSPB1>
 8006360:	4603      	mov	r3, r0
 8006362:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
						if(status1 != SCARA_STATUS_OK){
 8006366:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <scaraInitDuty+0x9a6>
							return status1;
 800636e:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8006372:	f000 be33 	b.w	8006fdc <scaraInitDuty+0x160c>
					for ( uint8_t i = 0; i < 4; i++) {
 8006376:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800637a:	3301      	adds	r3, #1
 800637c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8006380:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8006384:	2b03      	cmp	r3, #3
 8006386:	d9a9      	bls.n	80062dc <scaraInitDuty+0x90c>
						}
					}
					myDUTY.time_total = command.time_total;
 8006388:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 800638c:	49a9      	ldr	r1, [pc, #676]	; (8006634 <scaraInitDuty+0xc64>)
 800638e:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006392:	e9c1 2300 	strd	r2, r3, [r1]
 8006396:	f000 bdf3 	b.w	8006f80 <scaraInitDuty+0x15b0>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800639a:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f040 80d8 	bne.w	8006554 <scaraInitDuty+0xb84>
					for ( uint8_t i = 0; i < 4; i++) {
 80063a4:	2300      	movs	r3, #0
 80063a6:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 80063aa:	e03b      	b.n	8006424 <scaraInitDuty+0xa54>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80063ac:	f897 21ad 	ldrb.w	r2, [r7, #429]	; 0x1ad
 80063b0:	49a0      	ldr	r1, [pc, #640]	; (8006634 <scaraInitDuty+0xc64>)
 80063b2:	4613      	mov	r3, r2
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	4413      	add	r3, r2
 80063b8:	01db      	lsls	r3, r3, #7
 80063ba:	440b      	add	r3, r1
 80063bc:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80063c0:	2200      	movs	r2, #0
 80063c2:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80063c4:	f897 21ad 	ldrb.w	r2, [r7, #429]	; 0x1ad
 80063c8:	4613      	mov	r3, r2
 80063ca:	005b      	lsls	r3, r3, #1
 80063cc:	4413      	add	r3, r2
 80063ce:	01db      	lsls	r3, r3, #7
 80063d0:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80063d4:	4a97      	ldr	r2, [pc, #604]	; (8006634 <scaraInitDuty+0xc64>)
 80063d6:	1898      	adds	r0, r3, r2
 80063d8:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80063dc:	4a96      	ldr	r2, [pc, #600]	; (8006638 <scaraInitDuty+0xc68>)
 80063de:	5cd1      	ldrb	r1, [r2, r3]
 80063e0:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80063e4:	463a      	mov	r2, r7
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	4413      	add	r3, r2
 80063ea:	ed93 7b00 	vldr	d7, [r3]
 80063ee:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80063f2:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80063f6:	eeb0 2a45 	vmov.f32	s4, s10
 80063fa:	eef0 2a65 	vmov.f32	s5, s11
 80063fe:	eeb0 1a46 	vmov.f32	s2, s12
 8006402:	eef0 1a66 	vmov.f32	s3, s13
 8006406:	2200      	movs	r2, #0
 8006408:	eeb0 0a47 	vmov.f32	s0, s14
 800640c:	eef0 0a67 	vmov.f32	s1, s15
 8006410:	f001 fbaa 	bl	8007b68 <scaraInitLSPB>
 8006414:	4603      	mov	r3, r0
 8006416:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 800641a:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 800641e:	3301      	adds	r3, #1
 8006420:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8006424:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8006428:	2b03      	cmp	r3, #3
 800642a:	d9bf      	bls.n	80063ac <scaraInitDuty+0x9dc>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 800642c:	4b81      	ldr	r3, [pc, #516]	; (8006634 <scaraInitDuty+0xc64>)
 800642e:	f603 2138 	addw	r1, r3, #2616	; 0xa38
 8006432:	f04f 0200 	mov.w	r2, #0
 8006436:	f04f 0300 	mov.w	r3, #0
 800643a:	e9c1 2300 	strd	r2, r3, [r1]
					for ( uint8_t i = 0; i < 4; i++) {
 800643e:	2300      	movs	r3, #0
 8006440:	f887 31ac 	strb.w	r3, [r7, #428]	; 0x1ac
 8006444:	e02b      	b.n	800649e <scaraInitDuty+0xace>
						if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 8006446:	f897 21ac 	ldrb.w	r2, [r7, #428]	; 0x1ac
 800644a:	497a      	ldr	r1, [pc, #488]	; (8006634 <scaraInitDuty+0xc64>)
 800644c:	4613      	mov	r3, r2
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	4413      	add	r3, r2
 8006452:	01db      	lsls	r3, r3, #7
 8006454:	440b      	add	r3, r1
 8006456:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800645a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800645e:	4b75      	ldr	r3, [pc, #468]	; (8006634 <scaraInitDuty+0xc64>)
 8006460:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006468:	f7fa fb56 	bl	8000b18 <__aeabi_dcmpgt>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d010      	beq.n	8006494 <scaraInitDuty+0xac4>
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8006472:	f897 21ac 	ldrb.w	r2, [r7, #428]	; 0x1ac
 8006476:	496f      	ldr	r1, [pc, #444]	; (8006634 <scaraInitDuty+0xc64>)
 8006478:	4613      	mov	r3, r2
 800647a:	005b      	lsls	r3, r3, #1
 800647c:	4413      	add	r3, r2
 800647e:	01db      	lsls	r3, r3, #7
 8006480:	440b      	add	r3, r1
 8006482:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8006486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648a:	496a      	ldr	r1, [pc, #424]	; (8006634 <scaraInitDuty+0xc64>)
 800648c:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006490:	e9c1 2300 	strd	r2, r3, [r1]
					for ( uint8_t i = 0; i < 4; i++) {
 8006494:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
 8006498:	3301      	adds	r3, #1
 800649a:	f887 31ac 	strb.w	r3, [r7, #428]	; 0x1ac
 800649e:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d9cf      	bls.n	8006446 <scaraInitDuty+0xa76>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 80064a6:	2300      	movs	r3, #0
 80064a8:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
 80064ac:	e04c      	b.n	8006548 <scaraInitDuty+0xb78>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80064ae:	f897 21ab 	ldrb.w	r2, [r7, #427]	; 0x1ab
 80064b2:	4960      	ldr	r1, [pc, #384]	; (8006634 <scaraInitDuty+0xc64>)
 80064b4:	4613      	mov	r3, r2
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	4413      	add	r3, r2
 80064ba:	01db      	lsls	r3, r3, #7
 80064bc:	440b      	add	r3, r1
 80064be:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80064c2:	2200      	movs	r2, #0
 80064c4:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 80064c6:	f897 21ab 	ldrb.w	r2, [r7, #427]	; 0x1ab
 80064ca:	4b5a      	ldr	r3, [pc, #360]	; (8006634 <scaraInitDuty+0xc64>)
 80064cc:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80064d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064d4:	4c57      	ldr	r4, [pc, #348]	; (8006634 <scaraInitDuty+0xc64>)
 80064d6:	4613      	mov	r3, r2
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	4413      	add	r3, r2
 80064dc:	01db      	lsls	r3, r3, #7
 80064de:	4423      	add	r3, r4
 80064e0:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80064e4:	e9c3 0100 	strd	r0, r1, [r3]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80064e8:	f897 21ab 	ldrb.w	r2, [r7, #427]	; 0x1ab
 80064ec:	4613      	mov	r3, r2
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	4413      	add	r3, r2
 80064f2:	01db      	lsls	r3, r3, #7
 80064f4:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80064f8:	4a4e      	ldr	r2, [pc, #312]	; (8006634 <scaraInitDuty+0xc64>)
 80064fa:	1898      	adds	r0, r3, r2
 80064fc:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8006500:	4a4d      	ldr	r2, [pc, #308]	; (8006638 <scaraInitDuty+0xc68>)
 8006502:	5cd1      	ldrb	r1, [r2, r3]
 8006504:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8006508:	463a      	mov	r2, r7
 800650a:	00db      	lsls	r3, r3, #3
 800650c:	4413      	add	r3, r2
 800650e:	ed93 7b00 	vldr	d7, [r3]
 8006512:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8006516:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 800651a:	eeb0 2a45 	vmov.f32	s4, s10
 800651e:	eef0 2a65 	vmov.f32	s5, s11
 8006522:	eeb0 1a46 	vmov.f32	s2, s12
 8006526:	eef0 1a66 	vmov.f32	s3, s13
 800652a:	2201      	movs	r2, #1
 800652c:	eeb0 0a47 	vmov.f32	s0, s14
 8006530:	eef0 0a67 	vmov.f32	s1, s15
 8006534:	f001 fb18 	bl	8007b68 <scaraInitLSPB>
 8006538:	4603      	mov	r3, r0
 800653a:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 800653e:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8006542:	3301      	adds	r3, #1
 8006544:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
 8006548:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 800654c:	2b03      	cmp	r3, #3
 800654e:	d9ae      	bls.n	80064ae <scaraInitDuty+0xade>
 8006550:	f000 bd16 	b.w	8006f80 <scaraInitDuty+0x15b0>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8006554:	2308      	movs	r3, #8
 8006556:	f000 bd41 	b.w	8006fdc <scaraInitDuty+0x160c>
				}
				// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 800655a:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 800655e:	2b01      	cmp	r3, #1
 8006560:	f040 8141 	bne.w	80067e6 <scaraInitDuty+0xe16>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006564:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006568:	2b01      	cmp	r3, #1
 800656a:	d15a      	bne.n	8006622 <scaraInitDuty+0xc52>
					for ( uint8_t i = 0; i < 4; i++) {
 800656c:	2300      	movs	r3, #0
 800656e:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
 8006572:	e049      	b.n	8006608 <scaraInitDuty+0xc38>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006574:	f897 21aa 	ldrb.w	r2, [r7, #426]	; 0x1aa
 8006578:	492e      	ldr	r1, [pc, #184]	; (8006634 <scaraInitDuty+0xc64>)
 800657a:	4613      	mov	r3, r2
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	4413      	add	r3, r2
 8006580:	01db      	lsls	r3, r3, #7
 8006582:	440b      	add	r3, r1
 8006584:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006588:	2201      	movs	r2, #1
 800658a:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 800658c:	f897 21aa 	ldrb.w	r2, [r7, #426]	; 0x1aa
 8006590:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8006594:	4c27      	ldr	r4, [pc, #156]	; (8006634 <scaraInitDuty+0xc64>)
 8006596:	4613      	mov	r3, r2
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	4413      	add	r3, r2
 800659c:	01db      	lsls	r3, r3, #7
 800659e:	4423      	add	r3, r4
 80065a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a4:	e9c3 0100 	strd	r0, r1, [r3]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80065a8:	f897 21aa 	ldrb.w	r2, [r7, #426]	; 0x1aa
 80065ac:	4613      	mov	r3, r2
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	4413      	add	r3, r2
 80065b2:	01db      	lsls	r3, r3, #7
 80065b4:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80065b8:	4a1e      	ldr	r2, [pc, #120]	; (8006634 <scaraInitDuty+0xc64>)
 80065ba:	1898      	adds	r0, r3, r2
 80065bc:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 80065c0:	4a1d      	ldr	r2, [pc, #116]	; (8006638 <scaraInitDuty+0xc68>)
 80065c2:	5cd1      	ldrb	r1, [r2, r3]
 80065c4:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 80065c8:	463a      	mov	r2, r7
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	4413      	add	r3, r2
 80065ce:	ed93 7b00 	vldr	d7, [r3]
 80065d2:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80065d6:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80065da:	eeb0 2a45 	vmov.f32	s4, s10
 80065de:	eef0 2a65 	vmov.f32	s5, s11
 80065e2:	eeb0 1a46 	vmov.f32	s2, s12
 80065e6:	eef0 1a66 	vmov.f32	s3, s13
 80065ea:	2201      	movs	r2, #1
 80065ec:	eeb0 0a47 	vmov.f32	s0, s14
 80065f0:	eef0 0a67 	vmov.f32	s1, s15
 80065f4:	f001 fe8c 	bl	8008310 <scaraInitScurve>
 80065f8:	4603      	mov	r3, r0
 80065fa:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 80065fe:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 8006602:	3301      	adds	r3, #1
 8006604:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
 8006608:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 800660c:	2b03      	cmp	r3, #3
 800660e:	d9b1      	bls.n	8006574 <scaraInitDuty+0xba4>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 8006610:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8006614:	4907      	ldr	r1, [pc, #28]	; (8006634 <scaraInitDuty+0xc64>)
 8006616:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 800661a:	e9c1 2300 	strd	r2, r3, [r1]
 800661e:	f000 bcaf 	b.w	8006f80 <scaraInitDuty+0x15b0>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006622:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006626:	2b00      	cmp	r3, #0
 8006628:	f040 80db 	bne.w	80067e2 <scaraInitDuty+0xe12>
					for ( uint8_t i = 0; i < 4; i++) {
 800662c:	2300      	movs	r3, #0
 800662e:	f887 31a9 	strb.w	r3, [r7, #425]	; 0x1a9
 8006632:	e03f      	b.n	80066b4 <scaraInitDuty+0xce4>
 8006634:	2000ad30 	.word	0x2000ad30
 8006638:	20000824 	.word	0x20000824
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800663c:	f897 21a9 	ldrb.w	r2, [r7, #425]	; 0x1a9
 8006640:	49c3      	ldr	r1, [pc, #780]	; (8006950 <scaraInitDuty+0xf80>)
 8006642:	4613      	mov	r3, r2
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	4413      	add	r3, r2
 8006648:	01db      	lsls	r3, r3, #7
 800664a:	440b      	add	r3, r1
 800664c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006650:	2201      	movs	r2, #1
 8006652:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8006654:	f897 21a9 	ldrb.w	r2, [r7, #425]	; 0x1a9
 8006658:	4613      	mov	r3, r2
 800665a:	005b      	lsls	r3, r3, #1
 800665c:	4413      	add	r3, r2
 800665e:	01db      	lsls	r3, r3, #7
 8006660:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006664:	4aba      	ldr	r2, [pc, #744]	; (8006950 <scaraInitDuty+0xf80>)
 8006666:	1898      	adds	r0, r3, r2
 8006668:	f897 31a9 	ldrb.w	r3, [r7, #425]	; 0x1a9
 800666c:	4ab9      	ldr	r2, [pc, #740]	; (8006954 <scaraInitDuty+0xf84>)
 800666e:	5cd1      	ldrb	r1, [r2, r3]
 8006670:	f897 31a9 	ldrb.w	r3, [r7, #425]	; 0x1a9
 8006674:	463a      	mov	r2, r7
 8006676:	00db      	lsls	r3, r3, #3
 8006678:	4413      	add	r3, r2
 800667a:	ed93 7b00 	vldr	d7, [r3]
 800667e:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8006682:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8006686:	eeb0 2a45 	vmov.f32	s4, s10
 800668a:	eef0 2a65 	vmov.f32	s5, s11
 800668e:	eeb0 1a46 	vmov.f32	s2, s12
 8006692:	eef0 1a66 	vmov.f32	s3, s13
 8006696:	2200      	movs	r2, #0
 8006698:	eeb0 0a47 	vmov.f32	s0, s14
 800669c:	eef0 0a67 	vmov.f32	s1, s15
 80066a0:	f001 fe36 	bl	8008310 <scaraInitScurve>
 80066a4:	4603      	mov	r3, r0
 80066a6:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 80066aa:	f897 31a9 	ldrb.w	r3, [r7, #425]	; 0x1a9
 80066ae:	3301      	adds	r3, #1
 80066b0:	f887 31a9 	strb.w	r3, [r7, #425]	; 0x1a9
 80066b4:	f897 31a9 	ldrb.w	r3, [r7, #425]	; 0x1a9
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	d9bf      	bls.n	800663c <scaraInitDuty+0xc6c>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 80066bc:	4ba4      	ldr	r3, [pc, #656]	; (8006950 <scaraInitDuty+0xf80>)
 80066be:	f603 2138 	addw	r1, r3, #2616	; 0xa38
 80066c2:	f04f 0200 	mov.w	r2, #0
 80066c6:	f04f 0300 	mov.w	r3, #0
 80066ca:	e9c1 2300 	strd	r2, r3, [r1]
					for ( uint8_t i = 0; i < 4; i++) {
 80066ce:	2300      	movs	r3, #0
 80066d0:	f887 31a8 	strb.w	r3, [r7, #424]	; 0x1a8
 80066d4:	e02b      	b.n	800672e <scaraInitDuty+0xd5e>
						if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 80066d6:	f897 21a8 	ldrb.w	r2, [r7, #424]	; 0x1a8
 80066da:	499d      	ldr	r1, [pc, #628]	; (8006950 <scaraInitDuty+0xf80>)
 80066dc:	4613      	mov	r3, r2
 80066de:	005b      	lsls	r3, r3, #1
 80066e0:	4413      	add	r3, r2
 80066e2:	01db      	lsls	r3, r3, #7
 80066e4:	440b      	add	r3, r1
 80066e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066ee:	4b98      	ldr	r3, [pc, #608]	; (8006950 <scaraInitDuty+0xf80>)
 80066f0:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80066f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f8:	f7fa fa0e 	bl	8000b18 <__aeabi_dcmpgt>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d010      	beq.n	8006724 <scaraInitDuty+0xd54>
							myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8006702:	f897 21a8 	ldrb.w	r2, [r7, #424]	; 0x1a8
 8006706:	4992      	ldr	r1, [pc, #584]	; (8006950 <scaraInitDuty+0xf80>)
 8006708:	4613      	mov	r3, r2
 800670a:	005b      	lsls	r3, r3, #1
 800670c:	4413      	add	r3, r2
 800670e:	01db      	lsls	r3, r3, #7
 8006710:	440b      	add	r3, r1
 8006712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	498d      	ldr	r1, [pc, #564]	; (8006950 <scaraInitDuty+0xf80>)
 800671c:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006720:	e9c1 2300 	strd	r2, r3, [r1]
					for ( uint8_t i = 0; i < 4; i++) {
 8006724:	f897 31a8 	ldrb.w	r3, [r7, #424]	; 0x1a8
 8006728:	3301      	adds	r3, #1
 800672a:	f887 31a8 	strb.w	r3, [r7, #424]	; 0x1a8
 800672e:	f897 31a8 	ldrb.w	r3, [r7, #424]	; 0x1a8
 8006732:	2b03      	cmp	r3, #3
 8006734:	d9cf      	bls.n	80066d6 <scaraInitDuty+0xd06>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8006736:	2300      	movs	r3, #0
 8006738:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
 800673c:	e04c      	b.n	80067d8 <scaraInitDuty+0xe08>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800673e:	f897 21a7 	ldrb.w	r2, [r7, #423]	; 0x1a7
 8006742:	4983      	ldr	r1, [pc, #524]	; (8006950 <scaraInitDuty+0xf80>)
 8006744:	4613      	mov	r3, r2
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	4413      	add	r3, r2
 800674a:	01db      	lsls	r3, r3, #7
 800674c:	440b      	add	r3, r1
 800674e:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006752:	2201      	movs	r2, #1
 8006754:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 8006756:	f897 21a7 	ldrb.w	r2, [r7, #423]	; 0x1a7
 800675a:	4b7d      	ldr	r3, [pc, #500]	; (8006950 <scaraInitDuty+0xf80>)
 800675c:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006760:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006764:	4c7a      	ldr	r4, [pc, #488]	; (8006950 <scaraInitDuty+0xf80>)
 8006766:	4613      	mov	r3, r2
 8006768:	005b      	lsls	r3, r3, #1
 800676a:	4413      	add	r3, r2
 800676c:	01db      	lsls	r3, r3, #7
 800676e:	4423      	add	r3, r4
 8006770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006774:	e9c3 0100 	strd	r0, r1, [r3]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8006778:	f897 21a7 	ldrb.w	r2, [r7, #423]	; 0x1a7
 800677c:	4613      	mov	r3, r2
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	4413      	add	r3, r2
 8006782:	01db      	lsls	r3, r3, #7
 8006784:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006788:	4a71      	ldr	r2, [pc, #452]	; (8006950 <scaraInitDuty+0xf80>)
 800678a:	1898      	adds	r0, r3, r2
 800678c:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8006790:	4a70      	ldr	r2, [pc, #448]	; (8006954 <scaraInitDuty+0xf84>)
 8006792:	5cd1      	ldrb	r1, [r2, r3]
 8006794:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8006798:	463a      	mov	r2, r7
 800679a:	00db      	lsls	r3, r3, #3
 800679c:	4413      	add	r3, r2
 800679e:	ed93 7b00 	vldr	d7, [r3]
 80067a2:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80067a6:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80067aa:	eeb0 2a45 	vmov.f32	s4, s10
 80067ae:	eef0 2a65 	vmov.f32	s5, s11
 80067b2:	eeb0 1a46 	vmov.f32	s2, s12
 80067b6:	eef0 1a66 	vmov.f32	s3, s13
 80067ba:	2201      	movs	r2, #1
 80067bc:	eeb0 0a47 	vmov.f32	s0, s14
 80067c0:	eef0 0a67 	vmov.f32	s1, s15
 80067c4:	f001 fda4 	bl	8008310 <scaraInitScurve>
 80067c8:	4603      	mov	r3, r0
 80067ca:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 80067ce:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80067d2:	3301      	adds	r3, #1
 80067d4:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
 80067d8:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80067dc:	2b03      	cmp	r3, #3
 80067de:	d9ae      	bls.n	800673e <scaraInitDuty+0xd6e>
 80067e0:	e3ce      	b.n	8006f80 <scaraInitDuty+0x15b0>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 80067e2:	2308      	movs	r3, #8
 80067e4:	e3fa      	b.n	8006fdc <scaraInitDuty+0x160c>
				}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 80067e6:	2305      	movs	r3, #5
 80067e8:	e3f8      	b.n	8006fdc <scaraInitDuty+0x160c>
			}
		}else if ( DUTY_JOINT_SINGLE == command.joint_type) {
 80067ea:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f040 83b8 	bne.w	8006f64 <scaraInitDuty+0x1594>
			// Trajectory 1 profile
			double s, abs_position;
			switch(command.arc_dir) {
 80067f4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80067f8:	2b03      	cmp	r3, #3
 80067fa:	f200 8133 	bhi.w	8006a64 <scaraInitDuty+0x1094>
 80067fe:	a201      	add	r2, pc, #4	; (adr r2, 8006804 <scaraInitDuty+0xe34>)
 8006800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006804:	08006815 	.word	0x08006815
 8006808:	080068af 	.word	0x080068af
 800680c:	0800695d 	.word	0x0800695d
 8006810:	080069cd 	.word	0x080069cd
			case 0:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8006814:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8006818:	a34b      	add	r3, pc, #300	; (adr r3, 8006948 <scaraInitDuty+0xf78>)
 800681a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681e:	f7f9 feeb 	bl	80005f8 <__aeabi_dmul>
 8006822:	4602      	mov	r2, r0
 8006824:	460b      	mov	r3, r1
 8006826:	4610      	mov	r0, r2
 8006828:	4619      	mov	r1, r3
 800682a:	f04f 0200 	mov.w	r2, #0
 800682e:	4b4a      	ldr	r3, [pc, #296]	; (8006958 <scaraInitDuty+0xf88>)
 8006830:	f7fa f80c 	bl	800084c <__aeabi_ddiv>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 800683c:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006840:	2b01      	cmp	r3, #1
 8006842:	d111      	bne.n	8006868 <scaraInitDuty+0xe98>
					abs_position = myDUTY.joint.theta1_start + command.sub_para_double;
 8006844:	4b42      	ldr	r3, [pc, #264]	; (8006950 <scaraInitDuty+0xf80>)
 8006846:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 800684a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800684e:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8006852:	f7f9 fd1b 	bl	800028c <__adddf3>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 800685e:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8006862:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
 8006866:	e017      	b.n	8006898 <scaraInitDuty+0xec8>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8006868:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 800686c:	2b00      	cmp	r3, #0
 800686e:	d111      	bne.n	8006894 <scaraInitDuty+0xec4>
					abs_position = command.sub_para_double;
 8006870:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8006874:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta1_start;
 8006878:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 800687c:	4b34      	ldr	r3, [pc, #208]	; (8006950 <scaraInitDuty+0xf80>)
 800687e:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8006882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006886:	f7f9 fcff 	bl	8000288 <__aeabi_dsub>
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
 8006892:	e001      	b.n	8006898 <scaraInitDuty+0xec8>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8006894:	230c      	movs	r3, #12
 8006896:	e3a1      	b.n	8006fdc <scaraInitDuty+0x160c>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J0, abs_position)) {
 8006898:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800689c:	2000      	movs	r0, #0
 800689e:	f003 fe33 	bl	800a508 <scaraCheckWorkSpace1>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 80df 	beq.w	8006a68 <scaraInitDuty+0x1098>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80068aa:	2307      	movs	r3, #7
 80068ac:	e396      	b.n	8006fdc <scaraInitDuty+0x160c>
				}
				break;
			case 1:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 80068ae:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80068b2:	a325      	add	r3, pc, #148	; (adr r3, 8006948 <scaraInitDuty+0xf78>)
 80068b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b8:	f7f9 fe9e 	bl	80005f8 <__aeabi_dmul>
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	4610      	mov	r0, r2
 80068c2:	4619      	mov	r1, r3
 80068c4:	f04f 0200 	mov.w	r2, #0
 80068c8:	4b23      	ldr	r3, [pc, #140]	; (8006958 <scaraInitDuty+0xf88>)
 80068ca:	f7f9 ffbf 	bl	800084c <__aeabi_ddiv>
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80068d6:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d111      	bne.n	8006902 <scaraInitDuty+0xf32>
					abs_position = myDUTY.joint.theta2_start + command.sub_para_double;
 80068de:	4b1c      	ldr	r3, [pc, #112]	; (8006950 <scaraInitDuty+0xf80>)
 80068e0:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 80068e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80068e8:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 80068ec:	f7f9 fcce 	bl	800028c <__adddf3>
 80068f0:	4602      	mov	r2, r0
 80068f2:	460b      	mov	r3, r1
 80068f4:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 80068f8:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 80068fc:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
 8006900:	e017      	b.n	8006932 <scaraInitDuty+0xf62>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8006902:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006906:	2b00      	cmp	r3, #0
 8006908:	d111      	bne.n	800692e <scaraInitDuty+0xf5e>
					abs_position = command.sub_para_double;
 800690a:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 800690e:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta2_start;
 8006912:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8006916:	4b0e      	ldr	r3, [pc, #56]	; (8006950 <scaraInitDuty+0xf80>)
 8006918:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 800691c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006920:	f7f9 fcb2 	bl	8000288 <__aeabi_dsub>
 8006924:	4602      	mov	r2, r0
 8006926:	460b      	mov	r3, r1
 8006928:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
 800692c:	e001      	b.n	8006932 <scaraInitDuty+0xf62>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 800692e:	230c      	movs	r3, #12
 8006930:	e354      	b.n	8006fdc <scaraInitDuty+0x160c>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J1, abs_position)) {
 8006932:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8006936:	2001      	movs	r0, #1
 8006938:	f003 fde6 	bl	800a508 <scaraCheckWorkSpace1>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	f000 8094 	beq.w	8006a6c <scaraInitDuty+0x109c>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006944:	2307      	movs	r3, #7
 8006946:	e349      	b.n	8006fdc <scaraInitDuty+0x160c>
 8006948:	60000000 	.word	0x60000000
 800694c:	400921fb 	.word	0x400921fb
 8006950:	2000ad30 	.word	0x2000ad30
 8006954:	20000824 	.word	0x20000824
 8006958:	40668000 	.word	0x40668000
				}
				break;
			case 2:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 800695c:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006960:	2b01      	cmp	r3, #1
 8006962:	d111      	bne.n	8006988 <scaraInitDuty+0xfb8>
					abs_position = myDUTY.joint.d3_start + command.sub_para_double;
 8006964:	4bc0      	ldr	r3, [pc, #768]	; (8006c68 <scaraInitDuty+0x1298>)
 8006966:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800696a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800696e:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8006972:	f7f9 fc8b 	bl	800028c <__adddf3>
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 800697e:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8006982:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
 8006986:	e017      	b.n	80069b8 <scaraInitDuty+0xfe8>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8006988:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 800698c:	2b00      	cmp	r3, #0
 800698e:	d111      	bne.n	80069b4 <scaraInitDuty+0xfe4>
					abs_position = command.sub_para_double;
 8006990:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8006994:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.d3_start;
 8006998:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 800699c:	4bb2      	ldr	r3, [pc, #712]	; (8006c68 <scaraInitDuty+0x1298>)
 800699e:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 80069a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a6:	f7f9 fc6f 	bl	8000288 <__aeabi_dsub>
 80069aa:	4602      	mov	r2, r0
 80069ac:	460b      	mov	r3, r1
 80069ae:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
 80069b2:	e001      	b.n	80069b8 <scaraInitDuty+0xfe8>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 80069b4:	230c      	movs	r3, #12
 80069b6:	e311      	b.n	8006fdc <scaraInitDuty+0x160c>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J2, abs_position)) {
 80069b8:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 80069bc:	2002      	movs	r0, #2
 80069be:	f003 fda3 	bl	800a508 <scaraCheckWorkSpace1>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d053      	beq.n	8006a70 <scaraInitDuty+0x10a0>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80069c8:	2307      	movs	r3, #7
 80069ca:	e307      	b.n	8006fdc <scaraInitDuty+0x160c>
				}
				break;
			case 3:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 80069cc:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80069d0:	a3a1      	add	r3, pc, #644	; (adr r3, 8006c58 <scaraInitDuty+0x1288>)
 80069d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d6:	f7f9 fe0f 	bl	80005f8 <__aeabi_dmul>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	4610      	mov	r0, r2
 80069e0:	4619      	mov	r1, r3
 80069e2:	f04f 0200 	mov.w	r2, #0
 80069e6:	4ba1      	ldr	r3, [pc, #644]	; (8006c6c <scaraInitDuty+0x129c>)
 80069e8:	f7f9 ff30 	bl	800084c <__aeabi_ddiv>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80069f4:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d111      	bne.n	8006a20 <scaraInitDuty+0x1050>
					abs_position = myDUTY.joint.theta4_start + command.sub_para_double;
 80069fc:	4b9a      	ldr	r3, [pc, #616]	; (8006c68 <scaraInitDuty+0x1298>)
 80069fe:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8006a02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a06:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8006a0a:	f7f9 fc3f 	bl	800028c <__adddf3>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8006a16:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8006a1a:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
 8006a1e:	e017      	b.n	8006a50 <scaraInitDuty+0x1080>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8006a20:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d111      	bne.n	8006a4c <scaraInitDuty+0x107c>
					abs_position = command.sub_para_double;
 8006a28:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8006a2c:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta4_start;
 8006a30:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8006a34:	4b8c      	ldr	r3, [pc, #560]	; (8006c68 <scaraInitDuty+0x1298>)
 8006a36:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8006a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3e:	f7f9 fc23 	bl	8000288 <__aeabi_dsub>
 8006a42:	4602      	mov	r2, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
 8006a4a:	e001      	b.n	8006a50 <scaraInitDuty+0x1080>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8006a4c:	230c      	movs	r3, #12
 8006a4e:	e2c5      	b.n	8006fdc <scaraInitDuty+0x160c>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J3, abs_position)) {
 8006a50:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8006a54:	2003      	movs	r0, #3
 8006a56:	f003 fd57 	bl	800a508 <scaraCheckWorkSpace1>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d009      	beq.n	8006a74 <scaraInitDuty+0x10a4>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006a60:	2307      	movs	r3, #7
 8006a62:	e2bb      	b.n	8006fdc <scaraInitDuty+0x160c>
				}
				break;
			default:
				return SCARA_STATUS_ERROR_JOINT_NUM;
 8006a64:	230b      	movs	r3, #11
 8006a66:	e2b9      	b.n	8006fdc <scaraInitDuty+0x160c>
				break;
 8006a68:	bf00      	nop
 8006a6a:	e004      	b.n	8006a76 <scaraInitDuty+0x10a6>
				break;
 8006a6c:	bf00      	nop
 8006a6e:	e002      	b.n	8006a76 <scaraInitDuty+0x10a6>
				break;
 8006a70:	bf00      	nop
 8006a72:	e000      	b.n	8006a76 <scaraInitDuty+0x10a6>
				break;
 8006a74:	bf00      	nop
			}

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8006a76:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f040 8136 	bne.w	8006cec <scaraInitDuty+0x131c>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006a80:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	f040 8097 	bne.w	8006bb8 <scaraInitDuty+0x11e8>
					for ( uint8_t i = 0; i < 4; i++) {
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8006a90:	e08c      	b.n	8006bac <scaraInitDuty+0x11dc>
						if ( i == command.arc_dir) {
 8006a92:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8006a96:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d13d      	bne.n	8006b1a <scaraInitDuty+0x114a>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006a9e:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8006aa2:	4971      	ldr	r1, [pc, #452]	; (8006c68 <scaraInitDuty+0x1298>)
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	005b      	lsls	r3, r3, #1
 8006aa8:	4413      	add	r3, r2
 8006aaa:	01db      	lsls	r3, r3, #7
 8006aac:	440b      	add	r3, r1
 8006aae:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8006ab6:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8006aba:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8006abe:	4c6a      	ldr	r4, [pc, #424]	; (8006c68 <scaraInitDuty+0x1298>)
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	4413      	add	r3, r2
 8006ac6:	01db      	lsls	r3, r3, #7
 8006ac8:	4423      	add	r3, r4
 8006aca:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8006ace:	e9c3 0100 	strd	r0, r1, [r3]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006ad2:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	4413      	add	r3, r2
 8006adc:	01db      	lsls	r3, r3, #7
 8006ade:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006ae2:	4a61      	ldr	r2, [pc, #388]	; (8006c68 <scaraInitDuty+0x1298>)
 8006ae4:	1898      	adds	r0, r3, r2
 8006ae6:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8006aea:	4a61      	ldr	r2, [pc, #388]	; (8006c70 <scaraInitDuty+0x12a0>)
 8006aec:	5cd3      	ldrb	r3, [r2, r3]
 8006aee:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006af2:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006af6:	eeb0 2a46 	vmov.f32	s4, s12
 8006afa:	eef0 2a66 	vmov.f32	s5, s13
 8006afe:	eeb0 1a47 	vmov.f32	s2, s14
 8006b02:	eef0 1a67 	vmov.f32	s3, s15
 8006b06:	2201      	movs	r2, #1
 8006b08:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	f001 f82b 	bl	8007b68 <scaraInitLSPB>
 8006b12:	4603      	mov	r3, r0
 8006b14:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 8006b18:	e03c      	b.n	8006b94 <scaraInitDuty+0x11c4>
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006b1a:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8006b1e:	4952      	ldr	r1, [pc, #328]	; (8006c68 <scaraInitDuty+0x1298>)
 8006b20:	4613      	mov	r3, r2
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	4413      	add	r3, r2
 8006b26:	01db      	lsls	r3, r3, #7
 8006b28:	440b      	add	r3, r1
 8006b2a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006b2e:	2200      	movs	r2, #0
 8006b30:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8006b32:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8006b36:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8006b3a:	4c4b      	ldr	r4, [pc, #300]	; (8006c68 <scaraInitDuty+0x1298>)
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	005b      	lsls	r3, r3, #1
 8006b40:	4413      	add	r3, r2
 8006b42:	01db      	lsls	r3, r3, #7
 8006b44:	4423      	add	r3, r4
 8006b46:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8006b4a:	e9c3 0100 	strd	r0, r1, [r3]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006b4e:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8006b52:	4613      	mov	r3, r2
 8006b54:	005b      	lsls	r3, r3, #1
 8006b56:	4413      	add	r3, r2
 8006b58:	01db      	lsls	r3, r3, #7
 8006b5a:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006b5e:	4a42      	ldr	r2, [pc, #264]	; (8006c68 <scaraInitDuty+0x1298>)
 8006b60:	1898      	adds	r0, r3, r2
 8006b62:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8006b66:	4a42      	ldr	r2, [pc, #264]	; (8006c70 <scaraInitDuty+0x12a0>)
 8006b68:	5cd3      	ldrb	r3, [r2, r3]
 8006b6a:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006b6e:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006b72:	eeb0 2a46 	vmov.f32	s4, s12
 8006b76:	eef0 2a66 	vmov.f32	s5, s13
 8006b7a:	eeb0 1a47 	vmov.f32	s2, s14
 8006b7e:	eef0 1a67 	vmov.f32	s3, s15
 8006b82:	2201      	movs	r2, #1
 8006b84:	ed9f 0b36 	vldr	d0, [pc, #216]	; 8006c60 <scaraInitDuty+0x1290>
 8006b88:	4619      	mov	r1, r3
 8006b8a:	f000 ffed 	bl	8007b68 <scaraInitLSPB>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						}
						myDUTY.time_total = command.time_total;
 8006b94:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8006b98:	4933      	ldr	r1, [pc, #204]	; (8006c68 <scaraInitDuty+0x1298>)
 8006b9a:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006b9e:	e9c1 2300 	strd	r2, r3, [r1]
					for ( uint8_t i = 0; i < 4; i++) {
 8006ba2:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8006bac:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8006bb0:	2b03      	cmp	r3, #3
 8006bb2:	f67f af6e 	bls.w	8006a92 <scaraInitDuty+0x10c2>
 8006bb6:	e1c7      	b.n	8006f48 <scaraInitDuty+0x1578>
					}
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006bb8:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f040 8093 	bne.w	8006ce8 <scaraInitDuty+0x1318>
					for ( uint8_t i = 0; i < 4; i++) {
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
 8006bc8:	e088      	b.n	8006cdc <scaraInitDuty+0x130c>
						if ( i == command.arc_dir) {
 8006bca:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8006bce:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d14e      	bne.n	8006c74 <scaraInitDuty+0x12a4>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006bd6:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8006bda:	4923      	ldr	r1, [pc, #140]	; (8006c68 <scaraInitDuty+0x1298>)
 8006bdc:	4613      	mov	r3, r2
 8006bde:	005b      	lsls	r3, r3, #1
 8006be0:	4413      	add	r3, r2
 8006be2:	01db      	lsls	r3, r3, #7
 8006be4:	440b      	add	r3, r1
 8006be6:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006bea:	2200      	movs	r2, #0
 8006bec:	701a      	strb	r2, [r3, #0]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006bee:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	005b      	lsls	r3, r3, #1
 8006bf6:	4413      	add	r3, r2
 8006bf8:	01db      	lsls	r3, r3, #7
 8006bfa:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006bfe:	4a1a      	ldr	r2, [pc, #104]	; (8006c68 <scaraInitDuty+0x1298>)
 8006c00:	1898      	adds	r0, r3, r2
 8006c02:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8006c06:	4a1a      	ldr	r2, [pc, #104]	; (8006c70 <scaraInitDuty+0x12a0>)
 8006c08:	5cd3      	ldrb	r3, [r2, r3]
 8006c0a:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006c0e:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006c12:	eeb0 2a46 	vmov.f32	s4, s12
 8006c16:	eef0 2a66 	vmov.f32	s5, s13
 8006c1a:	eeb0 1a47 	vmov.f32	s2, s14
 8006c1e:	eef0 1a67 	vmov.f32	s3, s15
 8006c22:	2200      	movs	r2, #0
 8006c24:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8006c28:	4619      	mov	r1, r3
 8006c2a:	f000 ff9d 	bl	8007b68 <scaraInitLSPB>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8006c34:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8006c38:	490b      	ldr	r1, [pc, #44]	; (8006c68 <scaraInitDuty+0x1298>)
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	005b      	lsls	r3, r3, #1
 8006c3e:	4413      	add	r3, r2
 8006c40:	01db      	lsls	r3, r3, #7
 8006c42:	440b      	add	r3, r1
 8006c44:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8006c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4c:	4906      	ldr	r1, [pc, #24]	; (8006c68 <scaraInitDuty+0x1298>)
 8006c4e:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006c52:	e9c1 2300 	strd	r2, r3, [r1]
 8006c56:	e03c      	b.n	8006cd2 <scaraInitDuty+0x1302>
 8006c58:	60000000 	.word	0x60000000
 8006c5c:	400921fb 	.word	0x400921fb
	...
 8006c68:	2000ad30 	.word	0x2000ad30
 8006c6c:	40668000 	.word	0x40668000
 8006c70:	20000824 	.word	0x20000824
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006c74:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8006c78:	49bf      	ldr	r1, [pc, #764]	; (8006f78 <scaraInitDuty+0x15a8>)
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	4413      	add	r3, r2
 8006c80:	01db      	lsls	r3, r3, #7
 8006c82:	440b      	add	r3, r1
 8006c84:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006c88:	2200      	movs	r2, #0
 8006c8a:	701a      	strb	r2, [r3, #0]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006c8c:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8006c90:	4613      	mov	r3, r2
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	4413      	add	r3, r2
 8006c96:	01db      	lsls	r3, r3, #7
 8006c98:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006c9c:	4ab6      	ldr	r2, [pc, #728]	; (8006f78 <scaraInitDuty+0x15a8>)
 8006c9e:	1898      	adds	r0, r3, r2
 8006ca0:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8006ca4:	4ab5      	ldr	r2, [pc, #724]	; (8006f7c <scaraInitDuty+0x15ac>)
 8006ca6:	5cd3      	ldrb	r3, [r2, r3]
 8006ca8:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006cac:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006cb0:	eeb0 2a46 	vmov.f32	s4, s12
 8006cb4:	eef0 2a66 	vmov.f32	s5, s13
 8006cb8:	eeb0 1a47 	vmov.f32	s2, s14
 8006cbc:	eef0 1a67 	vmov.f32	s3, s15
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	ed9f 0bab 	vldr	d0, [pc, #684]	; 8006f70 <scaraInitDuty+0x15a0>
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	f000 ff4e 	bl	8007b68 <scaraInitLSPB>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
					for ( uint8_t i = 0; i < 4; i++) {
 8006cd2:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
 8006cdc:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8006ce0:	2b03      	cmp	r3, #3
 8006ce2:	f67f af72 	bls.w	8006bca <scaraInitDuty+0x11fa>
 8006ce6:	e12f      	b.n	8006f48 <scaraInitDuty+0x1578>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
						}
					}
				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8006ce8:	2308      	movs	r3, #8
 8006cea:	e177      	b.n	8006fdc <scaraInitDuty+0x160c>
				}
			// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8006cec:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	f040 8127 	bne.w	8006f44 <scaraInitDuty+0x1574>
					// Mode Init Time
					if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006cf6:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	f040 8097 	bne.w	8006e2e <scaraInitDuty+0x145e>
						for ( uint8_t i = 0; i < 4; i++) {
 8006d00:	2300      	movs	r3, #0
 8006d02:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
 8006d06:	e08c      	b.n	8006e22 <scaraInitDuty+0x1452>
							if ( i == command.arc_dir) {
 8006d08:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8006d0c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d13d      	bne.n	8006d90 <scaraInitDuty+0x13c0>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006d14:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8006d18:	4997      	ldr	r1, [pc, #604]	; (8006f78 <scaraInitDuty+0x15a8>)
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	4413      	add	r3, r2
 8006d20:	01db      	lsls	r3, r3, #7
 8006d22:	440b      	add	r3, r1
 8006d24:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006d28:	2201      	movs	r2, #1
 8006d2a:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8006d2c:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8006d30:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8006d34:	4c90      	ldr	r4, [pc, #576]	; (8006f78 <scaraInitDuty+0x15a8>)
 8006d36:	4613      	mov	r3, r2
 8006d38:	005b      	lsls	r3, r3, #1
 8006d3a:	4413      	add	r3, r2
 8006d3c:	01db      	lsls	r3, r3, #7
 8006d3e:	4423      	add	r3, r4
 8006d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d44:	e9c3 0100 	strd	r0, r1, [r3]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8006d48:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	005b      	lsls	r3, r3, #1
 8006d50:	4413      	add	r3, r2
 8006d52:	01db      	lsls	r3, r3, #7
 8006d54:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006d58:	4a87      	ldr	r2, [pc, #540]	; (8006f78 <scaraInitDuty+0x15a8>)
 8006d5a:	1898      	adds	r0, r3, r2
 8006d5c:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8006d60:	4a86      	ldr	r2, [pc, #536]	; (8006f7c <scaraInitDuty+0x15ac>)
 8006d62:	5cd3      	ldrb	r3, [r2, r3]
 8006d64:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006d68:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006d6c:	eeb0 2a46 	vmov.f32	s4, s12
 8006d70:	eef0 2a66 	vmov.f32	s5, s13
 8006d74:	eeb0 1a47 	vmov.f32	s2, s14
 8006d78:	eef0 1a67 	vmov.f32	s3, s15
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8006d82:	4619      	mov	r1, r3
 8006d84:	f001 fac4 	bl	8008310 <scaraInitScurve>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 8006d8e:	e03c      	b.n	8006e0a <scaraInitDuty+0x143a>
											joint_taget[i],
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006d90:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8006d94:	4978      	ldr	r1, [pc, #480]	; (8006f78 <scaraInitDuty+0x15a8>)
 8006d96:	4613      	mov	r3, r2
 8006d98:	005b      	lsls	r3, r3, #1
 8006d9a:	4413      	add	r3, r2
 8006d9c:	01db      	lsls	r3, r3, #7
 8006d9e:	440b      	add	r3, r1
 8006da0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006da4:	2201      	movs	r2, #1
 8006da6:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8006da8:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8006dac:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8006db0:	4c71      	ldr	r4, [pc, #452]	; (8006f78 <scaraInitDuty+0x15a8>)
 8006db2:	4613      	mov	r3, r2
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	4413      	add	r3, r2
 8006db8:	01db      	lsls	r3, r3, #7
 8006dba:	4423      	add	r3, r4
 8006dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc0:	e9c3 0100 	strd	r0, r1, [r3]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8006dc4:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8006dc8:	4613      	mov	r3, r2
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	4413      	add	r3, r2
 8006dce:	01db      	lsls	r3, r3, #7
 8006dd0:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006dd4:	4a68      	ldr	r2, [pc, #416]	; (8006f78 <scaraInitDuty+0x15a8>)
 8006dd6:	1898      	adds	r0, r3, r2
 8006dd8:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8006ddc:	4a67      	ldr	r2, [pc, #412]	; (8006f7c <scaraInitDuty+0x15ac>)
 8006dde:	5cd3      	ldrb	r3, [r2, r3]
 8006de0:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006de4:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006de8:	eeb0 2a46 	vmov.f32	s4, s12
 8006dec:	eef0 2a66 	vmov.f32	s5, s13
 8006df0:	eeb0 1a47 	vmov.f32	s2, s14
 8006df4:	eef0 1a67 	vmov.f32	s3, s15
 8006df8:	2201      	movs	r2, #1
 8006dfa:	ed9f 0b5d 	vldr	d0, [pc, #372]	; 8006f70 <scaraInitDuty+0x15a0>
 8006dfe:	4619      	mov	r1, r3
 8006e00:	f001 fa86 	bl	8008310 <scaraInitScurve>
 8006e04:	4603      	mov	r3, r0
 8006e06:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
											joint_taget[i],
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							}
							myDUTY.time_total = command.time_total;
 8006e0a:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8006e0e:	495a      	ldr	r1, [pc, #360]	; (8006f78 <scaraInitDuty+0x15a8>)
 8006e10:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006e14:	e9c1 2300 	strd	r2, r3, [r1]
						for ( uint8_t i = 0; i < 4; i++) {
 8006e18:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
 8006e22:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	f67f af6e 	bls.w	8006d08 <scaraInitDuty+0x1338>
 8006e2c:	e08c      	b.n	8006f48 <scaraInitDuty+0x1578>
						}
					// Mode Init Acc
					} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006e2e:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f040 8084 	bne.w	8006f40 <scaraInitDuty+0x1570>
						for ( uint8_t i = 0; i < 4; i++) {
 8006e38:	2300      	movs	r3, #0
 8006e3a:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
 8006e3e:	e07a      	b.n	8006f36 <scaraInitDuty+0x1566>
							if ( i == command.arc_dir) {
 8006e40:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006e44:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d140      	bne.n	8006ece <scaraInitDuty+0x14fe>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006e4c:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006e50:	4949      	ldr	r1, [pc, #292]	; (8006f78 <scaraInitDuty+0x15a8>)
 8006e52:	4613      	mov	r3, r2
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	4413      	add	r3, r2
 8006e58:	01db      	lsls	r3, r3, #7
 8006e5a:	440b      	add	r3, r1
 8006e5c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006e60:	2201      	movs	r2, #1
 8006e62:	701a      	strb	r2, [r3, #0]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8006e64:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006e68:	4613      	mov	r3, r2
 8006e6a:	005b      	lsls	r3, r3, #1
 8006e6c:	4413      	add	r3, r2
 8006e6e:	01db      	lsls	r3, r3, #7
 8006e70:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006e74:	4a40      	ldr	r2, [pc, #256]	; (8006f78 <scaraInitDuty+0x15a8>)
 8006e76:	1898      	adds	r0, r3, r2
 8006e78:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8006e7c:	4a3f      	ldr	r2, [pc, #252]	; (8006f7c <scaraInitDuty+0x15ac>)
 8006e7e:	5cd3      	ldrb	r3, [r2, r3]
 8006e80:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006e84:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006e88:	eeb0 2a46 	vmov.f32	s4, s12
 8006e8c:	eef0 2a66 	vmov.f32	s5, s13
 8006e90:	eeb0 1a47 	vmov.f32	s2, s14
 8006e94:	eef0 1a67 	vmov.f32	s3, s15
 8006e98:	2200      	movs	r2, #0
 8006e9a:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	f001 fa36 	bl	8008310 <scaraInitScurve>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
											joint_taget[i],
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
								myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8006eaa:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006eae:	4932      	ldr	r1, [pc, #200]	; (8006f78 <scaraInitDuty+0x15a8>)
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	005b      	lsls	r3, r3, #1
 8006eb4:	4413      	add	r3, r2
 8006eb6:	01db      	lsls	r3, r3, #7
 8006eb8:	440b      	add	r3, r1
 8006eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec2:	492d      	ldr	r1, [pc, #180]	; (8006f78 <scaraInitDuty+0x15a8>)
 8006ec4:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006ec8:	e9c1 2300 	strd	r2, r3, [r1]
 8006ecc:	e02e      	b.n	8006f2c <scaraInitDuty+0x155c>
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006ece:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006ed2:	4929      	ldr	r1, [pc, #164]	; (8006f78 <scaraInitDuty+0x15a8>)
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	4413      	add	r3, r2
 8006eda:	01db      	lsls	r3, r3, #7
 8006edc:	440b      	add	r3, r1
 8006ede:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	701a      	strb	r2, [r3, #0]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8006ee6:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006eea:	4613      	mov	r3, r2
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	4413      	add	r3, r2
 8006ef0:	01db      	lsls	r3, r3, #7
 8006ef2:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006ef6:	4a20      	ldr	r2, [pc, #128]	; (8006f78 <scaraInitDuty+0x15a8>)
 8006ef8:	1898      	adds	r0, r3, r2
 8006efa:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8006efe:	4a1f      	ldr	r2, [pc, #124]	; (8006f7c <scaraInitDuty+0x15ac>)
 8006f00:	5cd3      	ldrb	r3, [r2, r3]
 8006f02:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006f06:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006f0a:	eeb0 2a46 	vmov.f32	s4, s12
 8006f0e:	eef0 2a66 	vmov.f32	s5, s13
 8006f12:	eeb0 1a47 	vmov.f32	s2, s14
 8006f16:	eef0 1a67 	vmov.f32	s3, s15
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8006f70 <scaraInitDuty+0x15a0>
 8006f20:	4619      	mov	r1, r3
 8006f22:	f001 f9f5 	bl	8008310 <scaraInitScurve>
 8006f26:	4603      	mov	r3, r0
 8006f28:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						for ( uint8_t i = 0; i < 4; i++) {
 8006f2c:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8006f30:	3301      	adds	r3, #1
 8006f32:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
 8006f36:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d980      	bls.n	8006e40 <scaraInitDuty+0x1470>
 8006f3e:	e003      	b.n	8006f48 <scaraInitDuty+0x1578>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							}
						}

					} else {
						return SCARA_STATUS_ERROR_MODE_INIT;
 8006f40:	2308      	movs	r3, #8
 8006f42:	e04b      	b.n	8006fdc <scaraInitDuty+0x160c>
					}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8006f44:	2305      	movs	r3, #5
 8006f46:	e049      	b.n	8006fdc <scaraInitDuty+0x160c>
			}
		// Check Init Status
			if ( SCARA_STATUS_OK != status1) {
 8006f48:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <scaraInitDuty+0x1586>
				return status1;
 8006f50:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8006f54:	e042      	b.n	8006fdc <scaraInitDuty+0x160c>
			}
			if ( SCARA_STATUS_OK != status2) {
 8006f56:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d010      	beq.n	8006f80 <scaraInitDuty+0x15b0>
				return status2;
 8006f5e:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 8006f62:	e03b      	b.n	8006fdc <scaraInitDuty+0x160c>
			}

		//----Joint Quadra
		} else {
			return SCARA_STATUS_ERROR_JOINT;
 8006f64:	2304      	movs	r3, #4
 8006f66:	e039      	b.n	8006fdc <scaraInitDuty+0x160c>
		}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8006f68:	2302      	movs	r3, #2
 8006f6a:	e037      	b.n	8006fdc <scaraInitDuty+0x160c>
 8006f6c:	f3af 8000 	nop.w
	...
 8006f78:	2000ad30 	.word	0x2000ad30
 8006f7c:	20000824 	.word	0x20000824
	}

	// Reset time and distance
	positionCurrent.t = 0;
 8006f80:	491a      	ldr	r1, [pc, #104]	; (8006fec <scaraInitDuty+0x161c>)
 8006f82:	f04f 0200 	mov.w	r2, #0
 8006f86:	f04f 0300 	mov.w	r3, #0
 8006f8a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 8006f8e:	4b18      	ldr	r3, [pc, #96]	; (8006ff0 <scaraInitDuty+0x1620>)
 8006f90:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	4914      	ldr	r1, [pc, #80]	; (8006fec <scaraInitDuty+0x161c>)
 8006f9a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	positionNext.t = 0;
 8006f9e:	4915      	ldr	r1, [pc, #84]	; (8006ff4 <scaraInitDuty+0x1624>)
 8006fa0:	f04f 0200 	mov.w	r2, #0
 8006fa4:	f04f 0300 	mov.w	r3, #0
 8006fa8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 8006fac:	4b10      	ldr	r3, [pc, #64]	; (8006ff0 <scaraInitDuty+0x1620>)
 8006fae:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb6:	490f      	ldr	r1, [pc, #60]	; (8006ff4 <scaraInitDuty+0x1624>)
 8006fb8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	positionTrue.t = 0;
 8006fbc:	490e      	ldr	r1, [pc, #56]	; (8006ff8 <scaraInitDuty+0x1628>)
 8006fbe:	f04f 0200 	mov.w	r2, #0
 8006fc2:	f04f 0300 	mov.w	r3, #0
 8006fc6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 8006fca:	4b09      	ldr	r3, [pc, #36]	; (8006ff0 <scaraInitDuty+0x1620>)
 8006fcc:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd4:	4908      	ldr	r1, [pc, #32]	; (8006ff8 <scaraInitDuty+0x1628>)
 8006fd6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	return SCARA_STATUS_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8006fe8:	b004      	add	sp, #16
 8006fea:	4770      	bx	lr
 8006fec:	2000b8f0 	.word	0x2000b8f0
 8006ff0:	2000ad30 	.word	0x2000ad30
 8006ff4:	2000ba70 	.word	0x2000ba70
 8006ff8:	2000b9b0 	.word	0x2000b9b0

08006ffc <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	b5b0      	push	{r4, r5, r7, lr}
 8007000:	b0b0      	sub	sp, #192	; 0xc0
 8007002:	af2e      	add	r7, sp, #184	; 0xb8
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	f107 0118 	add.w	r1, r7, #24
 800700a:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 800700e:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8007012:	4668      	mov	r0, sp
 8007014:	f107 0320 	add.w	r3, r7, #32
 8007018:	22b8      	movs	r2, #184	; 0xb8
 800701a:	4619      	mov	r1, r3
 800701c:	f00f f848 	bl	80160b0 <memcpy>
 8007020:	f107 0318 	add.w	r3, r7, #24
 8007024:	cb0c      	ldmia	r3, {r2, r3}
 8007026:	4620      	mov	r0, r4
 8007028:	f7fd f9ca 	bl	80043c0 <kinematicInverse>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007032:	2307      	movs	r3, #7
 8007034:	e08e      	b.n	8007154 <scaraInitLine+0x158>
	}
	// Init line params
	line->x1 = end.x;
 8007036:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800703a:	6879      	ldr	r1, [r7, #4]
 800703c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	line->y1 = end.y;
 8007040:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8007044:	6879      	ldr	r1, [r7, #4]
 8007046:	e9c1 2306 	strd	r2, r3, [r1, #24]
	line->z1 = end.z;
 800704a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800704e:	6879      	ldr	r1, [r7, #4]
 8007050:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	line->x0 = start.x;
 8007054:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007058:	6879      	ldr	r1, [r7, #4]
 800705a:	e9c1 2300 	strd	r2, r3, [r1]
	line->y0 = start.y;
 800705e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007062:	6879      	ldr	r1, [r7, #4]
 8007064:	e9c1 2304 	strd	r2, r3, [r1, #16]
	line->z0 = start.z;
 8007068:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800706c:	6879      	ldr	r1, [r7, #4]
 800706e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	line->denta_x = end.x  -  start.x;
 8007072:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8007076:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800707a:	f7f9 f905 	bl	8000288 <__aeabi_dsub>
 800707e:	4602      	mov	r2, r0
 8007080:	460b      	mov	r3, r1
 8007082:	6879      	ldr	r1, [r7, #4]
 8007084:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 8007088:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800708c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007090:	f7f9 f8fa 	bl	8000288 <__aeabi_dsub>
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 800709e:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80070a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80070a6:	f7f9 f8ef 	bl	8000288 <__aeabi_dsub>
 80070aa:	4602      	mov	r2, r0
 80070ac:	460b      	mov	r3, r1
 80070ae:	6879      	ldr	r1, [r7, #4]
 80070b0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80070c0:	f7f9 fa9a 	bl	80005f8 <__aeabi_dmul>
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	4614      	mov	r4, r2
 80070ca:	461d      	mov	r5, r3
			       +(line->denta_y)*(line->denta_y)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80070d8:	f7f9 fa8e 	bl	80005f8 <__aeabi_dmul>
 80070dc:	4602      	mov	r2, r0
 80070de:	460b      	mov	r3, r1
 80070e0:	4620      	mov	r0, r4
 80070e2:	4629      	mov	r1, r5
 80070e4:	f7f9 f8d2 	bl	800028c <__adddf3>
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	4614      	mov	r4, r2
 80070ee:	461d      	mov	r5, r3
				   +(line->denta_z)*(line->denta_z));
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80070fc:	f7f9 fa7c 	bl	80005f8 <__aeabi_dmul>
 8007100:	4602      	mov	r2, r0
 8007102:	460b      	mov	r3, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8007104:	4620      	mov	r0, r4
 8007106:	4629      	mov	r1, r5
 8007108:	f7f9 f8c0 	bl	800028c <__adddf3>
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	ec43 2b17 	vmov	d7, r2, r3
 8007114:	eeb0 0a47 	vmov.f32	s0, s14
 8007118:	eef0 0a67 	vmov.f32	s1, s15
 800711c:	f013 fdd8 	bl	801acd0 <sqrt>
 8007120:	eeb0 7a40 	vmov.f32	s14, s0
 8007124:	eef0 7a60 	vmov.f32	s15, s1
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007134:	6879      	ldr	r1, [r7, #4]
 8007136:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	line->y_current = line->y0;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007140:	6879      	ldr	r1, [r7, #4]
 8007142:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	line->z_current = line->z0;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800714c:	6879      	ldr	r1, [r7, #4]
 800714e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	return SCARA_STATUS_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800715e:	b002      	add	sp, #8
 8007160:	4770      	bx	lr
 8007162:	0000      	movs	r0, r0
 8007164:	0000      	movs	r0, r0
	...

08007168 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8007168:	b082      	sub	sp, #8
 800716a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800716e:	b0c8      	sub	sp, #288	; 0x120
 8007170:	af2e      	add	r7, sp, #184	; 0xb8
 8007172:	61f8      	str	r0, [r7, #28]
 8007174:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8007178:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 800717c:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 8007180:	4668      	mov	r0, sp
 8007182:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007186:	22b8      	movs	r2, #184	; 0xb8
 8007188:	4619      	mov	r1, r3
 800718a:	f00e ff91 	bl	80160b0 <memcpy>
 800718e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007192:	cb0c      	ldmia	r3, {r2, r3}
 8007194:	4620      	mov	r0, r4
 8007196:	f7fd f913 	bl	80043c0 <kinematicInverse>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80071a0:	2307      	movs	r3, #7
 80071a2:	e18f      	b.n	80074c4 <scaraInitCircle+0x35c>
	}

//	if( 1 != dir && -1 != dir) {
//		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
//	}
	if(dir != 1 && dir != -1){
 80071a4:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d006      	beq.n	80071ba <scaraInitCircle+0x52>
 80071ac:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80071b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b4:	d001      	beq.n	80071ba <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;
 80071b6:	2306      	movs	r3, #6
 80071b8:	e184      	b.n	80074c4 <scaraInitCircle+0x35c>
	}

	double x_start, y_start, x_stop, y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	x_start = start.x - center.x;
 80071ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80071be:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80071c2:	f7f9 f861 	bl	8000288 <__aeabi_dsub>
 80071c6:	4602      	mov	r2, r0
 80071c8:	460b      	mov	r3, r1
 80071ca:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	y_start = start.y - center.y;
 80071ce:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80071d2:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 80071d6:	f7f9 f857 	bl	8000288 <__aeabi_dsub>
 80071da:	4602      	mov	r2, r0
 80071dc:	460b      	mov	r3, r1
 80071de:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	x_stop  = end.x  - center.x;
 80071e2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80071e6:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80071ea:	f7f9 f84d 	bl	8000288 <__aeabi_dsub>
 80071ee:	4602      	mov	r2, r0
 80071f0:	460b      	mov	r3, r1
 80071f2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	y_stop  = end.y  - center.y;
 80071f6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80071fa:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 80071fe:	f7f9 f843 	bl	8000288 <__aeabi_dsub>
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	r1 = sqrt(x_start*x_start + y_start*y_start);
 800720a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800720e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007212:	f7f9 f9f1 	bl	80005f8 <__aeabi_dmul>
 8007216:	4602      	mov	r2, r0
 8007218:	460b      	mov	r3, r1
 800721a:	4614      	mov	r4, r2
 800721c:	461d      	mov	r5, r3
 800721e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007222:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007226:	f7f9 f9e7 	bl	80005f8 <__aeabi_dmul>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	4620      	mov	r0, r4
 8007230:	4629      	mov	r1, r5
 8007232:	f7f9 f82b 	bl	800028c <__adddf3>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	ec43 2b17 	vmov	d7, r2, r3
 800723e:	eeb0 0a47 	vmov.f32	s0, s14
 8007242:	eef0 0a67 	vmov.f32	s1, s15
 8007246:	f013 fd43 	bl	801acd0 <sqrt>
 800724a:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	r2 = sqrt(x_stop*x_stop + y_stop*y_stop);
 800724e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007252:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007256:	f7f9 f9cf 	bl	80005f8 <__aeabi_dmul>
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	4614      	mov	r4, r2
 8007260:	461d      	mov	r5, r3
 8007262:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007266:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800726a:	f7f9 f9c5 	bl	80005f8 <__aeabi_dmul>
 800726e:	4602      	mov	r2, r0
 8007270:	460b      	mov	r3, r1
 8007272:	4620      	mov	r0, r4
 8007274:	4629      	mov	r1, r5
 8007276:	f7f9 f809 	bl	800028c <__adddf3>
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	ec43 2b17 	vmov	d7, r2, r3
 8007282:	eeb0 0a47 	vmov.f32	s0, s14
 8007286:	eef0 0a67 	vmov.f32	s1, s15
 800728a:	f013 fd21 	bl	801acd0 <sqrt>
 800728e:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30

	if( 1.0 < fabs(r1 - r2)) {
 8007292:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007296:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800729a:	f7f8 fff5 	bl	8000288 <__aeabi_dsub>
 800729e:	4602      	mov	r2, r0
 80072a0:	460b      	mov	r3, r1
 80072a2:	4690      	mov	r8, r2
 80072a4:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80072a8:	f04f 0200 	mov.w	r2, #0
 80072ac:	4b8e      	ldr	r3, [pc, #568]	; (80074e8 <scaraInitCircle+0x380>)
 80072ae:	4640      	mov	r0, r8
 80072b0:	4649      	mov	r1, r9
 80072b2:	f7f9 fc31 	bl	8000b18 <__aeabi_dcmpgt>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 80072bc:	2306      	movs	r3, #6
 80072be:	e101      	b.n	80074c4 <scaraInitCircle+0x35c>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 80072c0:	a385      	add	r3, pc, #532	; (adr r3, 80074d8 <scaraInitCircle+0x370>)
 80072c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80072ca:	f7f9 fc07 	bl	8000adc <__aeabi_dcmplt>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d109      	bne.n	80072e8 <scaraInitCircle+0x180>
 80072d4:	a380      	add	r3, pc, #512	; (adr r3, 80074d8 <scaraInitCircle+0x370>)
 80072d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072da:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80072de:	f7f9 fbfd 	bl	8000adc <__aeabi_dcmplt>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d001      	beq.n	80072ec <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 80072e8:	2306      	movs	r3, #6
 80072ea:	e0eb      	b.n	80074c4 <scaraInitCircle+0x35c>
	}

	angle_start = atan2(y_start, x_start);
 80072ec:	ed97 1b16 	vldr	d1, [r7, #88]	; 0x58
 80072f0:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80072f4:	f013 fcea 	bl	801accc <atan2>
 80072f8:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	angle_stop  = atan2(y_stop, x_stop);
 80072fc:	ed97 1b12 	vldr	d1, [r7, #72]	; 0x48
 8007300:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8007304:	f013 fce2 	bl	801accc <atan2>
 8007308:	ed87 0b08 	vstr	d0, [r7, #32]
	delta_angle = angle_stop - angle_start;
 800730c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007310:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007314:	f7f8 ffb8 	bl	8000288 <__aeabi_dsub>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	if (delta_angle < 0 && dir > 0) {
 8007320:	f04f 0200 	mov.w	r2, #0
 8007324:	f04f 0300 	mov.w	r3, #0
 8007328:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800732c:	f7f9 fbd6 	bl	8000adc <__aeabi_dcmplt>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d015      	beq.n	8007362 <scaraInitCircle+0x1fa>
 8007336:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800733a:	2b00      	cmp	r3, #0
 800733c:	dd11      	ble.n	8007362 <scaraInitCircle+0x1fa>
		delta_angle = 2*PI - fabs(delta_angle); //this state mean that the arc radius is over 180
 800733e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007340:	613b      	str	r3, [r7, #16]
 8007342:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007344:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007348:	617b      	str	r3, [r7, #20]
 800734a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800734e:	a164      	add	r1, pc, #400	; (adr r1, 80074e0 <scaraInitCircle+0x378>)
 8007350:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007354:	f7f8 ff98 	bl	8000288 <__aeabi_dsub>
 8007358:	4602      	mov	r2, r0
 800735a:	460b      	mov	r3, r1
 800735c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8007360:	e01f      	b.n	80073a2 <scaraInitCircle+0x23a>
	}else if(delta_angle > 0 && dir < 0){
 8007362:	f04f 0200 	mov.w	r2, #0
 8007366:	f04f 0300 	mov.w	r3, #0
 800736a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800736e:	f7f9 fbd3 	bl	8000b18 <__aeabi_dcmpgt>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d014      	beq.n	80073a2 <scaraInitCircle+0x23a>
 8007378:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800737c:	2b00      	cmp	r3, #0
 800737e:	da10      	bge.n	80073a2 <scaraInitCircle+0x23a>
		delta_angle = 2*PI - fabs(delta_angle);
 8007380:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007382:	60bb      	str	r3, [r7, #8]
 8007384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007386:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007390:	a153      	add	r1, pc, #332	; (adr r1, 80074e0 <scaraInitCircle+0x378>)
 8007392:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007396:	f7f8 ff77 	bl	8000288 <__aeabi_dsub>
 800739a:	4602      	mov	r2, r0
 800739c:	460b      	mov	r3, r1
 800739e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	}
	if(delta_angle*dir < 0){
 80073a2:	f8d7 02c0 	ldr.w	r0, [r7, #704]	; 0x2c0
 80073a6:	f7f9 f8bd 	bl	8000524 <__aeabi_i2d>
 80073aa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80073ae:	f7f9 f923 	bl	80005f8 <__aeabi_dmul>
 80073b2:	4602      	mov	r2, r0
 80073b4:	460b      	mov	r3, r1
 80073b6:	4610      	mov	r0, r2
 80073b8:	4619      	mov	r1, r3
 80073ba:	f04f 0200 	mov.w	r2, #0
 80073be:	f04f 0300 	mov.w	r3, #0
 80073c2:	f7f9 fb8b 	bl	8000adc <__aeabi_dcmplt>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d011      	beq.n	80073f0 <scaraInitCircle+0x288>
		delta_angle = 2*PI - fabs(delta_angle);
 80073cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073ce:	603b      	str	r3, [r7, #0]
 80073d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073d6:	607b      	str	r3, [r7, #4]
 80073d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073dc:	a140      	add	r1, pc, #256	; (adr r1, 80074e0 <scaraInitCircle+0x378>)
 80073de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073e2:	f7f8 ff51 	bl	8000288 <__aeabi_dsub>
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 80073ee:	e005      	b.n	80073fc <scaraInitCircle+0x294>
	}else{
		delta_angle = fabs(delta_angle);
 80073f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073f2:	663b      	str	r3, [r7, #96]	; 0x60
 80073f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073fa:	667b      	str	r3, [r7, #100]	; 0x64

//	if ( 0 > dir) {
//		delta_angle = 2*PI - delta_angle;
//	}
	// Init circle params
	circle->dir = dir;
 80073fc:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007400:	b25a      	sxtb	r2, r3
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 8007406:	69f9      	ldr	r1, [r7, #28]
 8007408:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800740c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	circle->angle_start = angle_start;
 8007410:	69f9      	ldr	r1, [r7, #28]
 8007412:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007416:	e9c1 2304 	strd	r2, r3, [r1, #16]
	circle->angle_stop  = angle_stop;
 800741a:	69f9      	ldr	r1, [r7, #28]
 800741c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007420:	e9c1 2306 	strd	r2, r3, [r1, #24]
	circle->total_angle = delta_angle;
 8007424:	69f9      	ldr	r1, [r7, #28]
 8007426:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800742a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 800742e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007432:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007436:	f7f9 f8df 	bl	80005f8 <__aeabi_dmul>
 800743a:	4602      	mov	r2, r0
 800743c:	460b      	mov	r3, r1
 800743e:	69f9      	ldr	r1, [r7, #28]
 8007440:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	circle->x0 = start.x;
 8007444:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8007448:	69f9      	ldr	r1, [r7, #28]
 800744a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	circle->y0 = start.y;
 800744e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8007452:	69f9      	ldr	r1, [r7, #28]
 8007454:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	circle->x1 = end.x;
 8007458:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800745c:	69f9      	ldr	r1, [r7, #28]
 800745e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	circle->y1 = end.y;
 8007462:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8007466:	69f9      	ldr	r1, [r7, #28]
 8007468:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	circle->xi = center.x;
 800746c:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8007470:	69f9      	ldr	r1, [r7, #28]
 8007472:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	circle->yi = center.y;
 8007476:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800747a:	69f9      	ldr	r1, [r7, #28]
 800747c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	circle->z0 = start.z;
 8007480:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007484:	69f9      	ldr	r1, [r7, #28]
 8007486:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	circle->z1 = start.z;
 800748a:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800748e:	69f9      	ldr	r1, [r7, #28]
 8007490:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	circle->zi = start.z;
 8007494:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007498:	69f9      	ldr	r1, [r7, #28]
 800749a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	circle->x_current = circle->x0;
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074a4:	69f9      	ldr	r1, [r7, #28]
 80074a6:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	circle->y_current = circle->y0;
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80074b0:	69f9      	ldr	r1, [r7, #28]
 80074b2:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	circle->z_current = circle->z0;
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80074bc:	69f9      	ldr	r1, [r7, #28]
 80074be:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

	return SCARA_STATUS_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3768      	adds	r7, #104	; 0x68
 80074c8:	46bd      	mov	sp, r7
 80074ca:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 80074ce:	b002      	add	sp, #8
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	f3af 8000 	nop.w
 80074d8:	9999999a 	.word	0x9999999a
 80074dc:	3fb99999 	.word	0x3fb99999
 80074e0:	60000000 	.word	0x60000000
 80074e4:	401921fb 	.word	0x401921fb
 80074e8:	3ff00000 	.word	0x3ff00000
 80074ec:	00000000 	.word	0x00000000

080074f0 <scaraInitLinear>:

SCARA_StatusTypeDef scaraInitLinear(Trajectory_Linear_TypeDef *linear, Trajectory_TargetTypeDef target, double total_s,
									ModeInitTypeDef modeinit, double additional_factor)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6178      	str	r0, [r7, #20]
 80074f8:	460b      	mov	r3, r1
 80074fa:	ed87 0b02 	vstr	d0, [r7, #8]
 80074fe:	ed87 1b00 	vstr	d1, [r7]
 8007502:	74fb      	strb	r3, [r7, #19]
 8007504:	4613      	mov	r3, r2
 8007506:	74bb      	strb	r3, [r7, #18]

	if(target == TRAJECTORY_3D){
 8007508:	7cfb      	ldrb	r3, [r7, #19]
 800750a:	2b04      	cmp	r3, #4
 800750c:	d004      	beq.n	8007518 <scaraInitLinear+0x28>

	}else if(target == TRAJECTORY_ROLL){
 800750e:	7cfb      	ldrb	r3, [r7, #19]
 8007510:	2b05      	cmp	r3, #5
 8007512:	d001      	beq.n	8007518 <scaraInitLinear+0x28>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007514:	2306      	movs	r3, #6
 8007516:	e049      	b.n	80075ac <scaraInitLinear+0xbc>
	}

	if(modeinit == DUTY_MODE_INIT_QT){
 8007518:	7cbb      	ldrb	r3, [r7, #18]
 800751a:	2b03      	cmp	r3, #3
 800751c:	d125      	bne.n	800756a <scaraInitLinear+0x7a>
		linear->constant_v = total_s / additional_factor;
 800751e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007522:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007526:	f7f9 f991 	bl	800084c <__aeabi_ddiv>
 800752a:	4602      	mov	r2, r0
 800752c:	460b      	mov	r3, r1
 800752e:	6979      	ldr	r1, [r7, #20]
 8007530:	e9c1 2302 	strd	r2, r3, [r1, #8]
		linear->number_of_sample = ceilf(additional_factor / T_SAMPLING); // ceiling
 8007534:	a322      	add	r3, pc, #136	; (adr r3, 80075c0 <scaraInitLinear+0xd0>)
 8007536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800753e:	f7f9 f985 	bl	800084c <__aeabi_ddiv>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	4610      	mov	r0, r2
 8007548:	4619      	mov	r1, r3
 800754a:	f7f9 fb4d 	bl	8000be8 <__aeabi_d2f>
 800754e:	4603      	mov	r3, r0
 8007550:	ee00 3a10 	vmov	s0, r3
 8007554:	f013 fb78 	bl	801ac48 <ceilf>
 8007558:	eef0 7a40 	vmov.f32	s15, s0
 800755c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007560:	ee17 2a90 	vmov	r2, s15
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	621a      	str	r2, [r3, #32]
 8007568:	e01f      	b.n	80075aa <scaraInitLinear+0xba>
	}else if(modeinit == DUTY_MODE_INIT_QV){
 800756a:	7cbb      	ldrb	r3, [r7, #18]
 800756c:	2b02      	cmp	r3, #2
 800756e:	d11a      	bne.n	80075a6 <scaraInitLinear+0xb6>
		linear->constant_v = additional_factor * V_MOVE_MAX;
 8007570:	f04f 0200 	mov.w	r2, #0
 8007574:	4b10      	ldr	r3, [pc, #64]	; (80075b8 <scaraInitLinear+0xc8>)
 8007576:	e9d7 0100 	ldrd	r0, r1, [r7]
 800757a:	f7f9 f83d 	bl	80005f8 <__aeabi_dmul>
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	6979      	ldr	r1, [r7, #20]
 8007584:	e9c1 2302 	strd	r2, r3, [r1, #8]
		myDUTY.time_total = total_s / linear->constant_v;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800758e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007592:	f7f9 f95b 	bl	800084c <__aeabi_ddiv>
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	4908      	ldr	r1, [pc, #32]	; (80075bc <scaraInitLinear+0xcc>)
 800759c:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80075a0:	e9c1 2300 	strd	r2, r3, [r1]
 80075a4:	e001      	b.n	80075aa <scaraInitLinear+0xba>
	}else{
		return SCARA_STATUS_ERROR_PARA;
 80075a6:	2306      	movs	r3, #6
 80075a8:	e000      	b.n	80075ac <scaraInitLinear+0xbc>
	}

	return SCARA_STATUS_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3718      	adds	r7, #24
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	f3af 8000 	nop.w
 80075b8:	40877000 	.word	0x40877000
 80075bc:	2000ad30 	.word	0x2000ad30
 80075c0:	40000000 	.word	0x40000000
 80075c4:	3f847ae1 	.word	0x3f847ae1

080075c8 <scaraInitLSPB1>:
SCARA_StatusTypeDef	scaraInitLSPB1		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double additional_factor){
 80075c8:	b5b0      	push	{r4, r5, r7, lr}
 80075ca:	b096      	sub	sp, #88	; 0x58
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	61f8      	str	r0, [r7, #28]
 80075d0:	460b      	mov	r3, r1
 80075d2:	ed87 0b04 	vstr	d0, [r7, #16]
 80075d6:	ed87 1b02 	vstr	d1, [r7, #8]
 80075da:	ed87 2b00 	vstr	d2, [r7]
 80075de:	76fb      	strb	r3, [r7, #27]
 80075e0:	4613      	mov	r3, r2
 80075e2:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	int8_t dir;
	if(total_s < 0){
 80075e4:	f04f 0200 	mov.w	r2, #0
 80075e8:	f04f 0300 	mov.w	r3, #0
 80075ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80075f0:	f7f9 fa74 	bl	8000adc <__aeabi_dcmplt>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d009      	beq.n	800760e <scaraInitLSPB1+0x46>
		total_s = -total_s;
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	613b      	str	r3, [r7, #16]
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007604:	617b      	str	r3, [r7, #20]
		lspb->dir= -1;
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	22ff      	movs	r2, #255	; 0xff
 800760a:	701a      	strb	r2, [r3, #0]
 800760c:	e002      	b.n	8007614 <scaraInitLSPB1+0x4c>
	}else{
		lspb->dir= 1;
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	2201      	movs	r2, #1
 8007612:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 8007614:	7efb      	ldrb	r3, [r7, #27]
 8007616:	2b04      	cmp	r3, #4
 8007618:	d12c      	bne.n	8007674 <scaraInitLSPB1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800761a:	7ebb      	ldrb	r3, [r7, #26]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d10f      	bne.n	8007640 <scaraInitLSPB1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 8007620:	f04f 0200 	mov.w	r2, #0
 8007624:	4ba4      	ldr	r3, [pc, #656]	; (80078b8 <scaraInitLSPB1+0x2f0>)
 8007626:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800762a:	f7f8 ffe5 	bl	80005f8 <__aeabi_dmul>
 800762e:	4602      	mov	r2, r0
 8007630:	460b      	mov	r3, r1
 8007632:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8007636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800763a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800763e:	e073      	b.n	8007728 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8007640:	7ebb      	ldrb	r3, [r7, #26]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d170      	bne.n	8007728 <scaraInitLSPB1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 8007646:	f04f 0200 	mov.w	r2, #0
 800764a:	4b9c      	ldr	r3, [pc, #624]	; (80078bc <scaraInitLSPB1+0x2f4>)
 800764c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007650:	f7f8 ffd2 	bl	80005f8 <__aeabi_dmul>
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
 8007658:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			v_design = V_MOVE_MAX*v_factor;
 800765c:	f04f 0200 	mov.w	r2, #0
 8007660:	4b95      	ldr	r3, [pc, #596]	; (80078b8 <scaraInitLSPB1+0x2f0>)
 8007662:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007666:	f7f8 ffc7 	bl	80005f8 <__aeabi_dmul>
 800766a:	4602      	mov	r2, r0
 800766c:	460b      	mov	r3, r1
 800766e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8007672:	e059      	b.n	8007728 <scaraInitLSPB1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 8007674:	7efb      	ldrb	r3, [r7, #27]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d112      	bne.n	80076a0 <scaraInitLSPB1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800767a:	7ebb      	ldrb	r3, [r7, #26]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d153      	bne.n	8007728 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 8007680:	a381      	add	r3, pc, #516	; (adr r3, 8007888 <scaraInitLSPB1+0x2c0>)
 8007682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007686:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800768a:	f7f8 ffb5 	bl	80005f8 <__aeabi_dmul>
 800768e:	4602      	mov	r2, r0
 8007690:	460b      	mov	r3, r1
 8007692:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8007696:	e9d7 2300 	ldrd	r2, r3, [r7]
 800769a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800769e:	e043      	b.n	8007728 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J1){
 80076a0:	7efb      	ldrb	r3, [r7, #27]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d112      	bne.n	80076cc <scaraInitLSPB1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80076a6:	7ebb      	ldrb	r3, [r7, #26]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d13d      	bne.n	8007728 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 80076ac:	a376      	add	r3, pc, #472	; (adr r3, 8007888 <scaraInitLSPB1+0x2c0>)
 80076ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076b6:	f7f8 ff9f 	bl	80005f8 <__aeabi_dmul>
 80076ba:	4602      	mov	r2, r0
 80076bc:	460b      	mov	r3, r1
 80076be:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 80076c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076c6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80076ca:	e02d      	b.n	8007728 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J2){
 80076cc:	7efb      	ldrb	r3, [r7, #27]
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d112      	bne.n	80076f8 <scaraInitLSPB1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80076d2:	7ebb      	ldrb	r3, [r7, #26]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d127      	bne.n	8007728 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 80076d8:	a36d      	add	r3, pc, #436	; (adr r3, 8007890 <scaraInitLSPB1+0x2c8>)
 80076da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076e2:	f7f8 ff89 	bl	80005f8 <__aeabi_dmul>
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 80076ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80076f6:	e017      	b.n	8007728 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J3){
 80076f8:	7efb      	ldrb	r3, [r7, #27]
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	d112      	bne.n	8007724 <scaraInitLSPB1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80076fe:	7ebb      	ldrb	r3, [r7, #26]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d111      	bne.n	8007728 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 8007704:	a364      	add	r3, pc, #400	; (adr r3, 8007898 <scaraInitLSPB1+0x2d0>)
 8007706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800770e:	f7f8 ff73 	bl	80005f8 <__aeabi_dmul>
 8007712:	4602      	mov	r2, r0
 8007714:	460b      	mov	r3, r1
 8007716:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 800771a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800771e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007722:	e001      	b.n	8007728 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007724:	2306      	movs	r3, #6
 8007726:	e20d      	b.n	8007b44 <scaraInitLSPB1+0x57c>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8007728:	7ebb      	ldrb	r3, [r7, #26]
 800772a:	2b01      	cmp	r3, #1
 800772c:	f040 80ce 	bne.w	80078cc <scaraInitLSPB1+0x304>
		if(tf < 0.1 && v_design > 7.5){ //check if time valid or not
 8007730:	a35b      	add	r3, pc, #364	; (adr r3, 80078a0 <scaraInitLSPB1+0x2d8>)
 8007732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007736:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800773a:	f7f9 f9cf 	bl	8000adc <__aeabi_dcmplt>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d01d      	beq.n	8007780 <scaraInitLSPB1+0x1b8>
 8007744:	f04f 0200 	mov.w	r2, #0
 8007748:	4b5d      	ldr	r3, [pc, #372]	; (80078c0 <scaraInitLSPB1+0x2f8>)
 800774a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800774e:	f7f9 f9e3 	bl	8000b18 <__aeabi_dcmpgt>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d013      	beq.n	8007780 <scaraInitLSPB1+0x1b8>
			tf = 1.5*total_s/v_design;
 8007758:	f04f 0200 	mov.w	r2, #0
 800775c:	4b59      	ldr	r3, [pc, #356]	; (80078c4 <scaraInitLSPB1+0x2fc>)
 800775e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007762:	f7f8 ff49 	bl	80005f8 <__aeabi_dmul>
 8007766:	4602      	mov	r2, r0
 8007768:	460b      	mov	r3, r1
 800776a:	4610      	mov	r0, r2
 800776c:	4619      	mov	r1, r3
 800776e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007772:	f7f9 f86b 	bl	800084c <__aeabi_ddiv>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800777e:	e05c      	b.n	800783a <scaraInitLSPB1+0x272>
		}else if(v_design < 0.0001 && tf > 0.15){ //check if velocity valid or not
 8007780:	a349      	add	r3, pc, #292	; (adr r3, 80078a8 <scaraInitLSPB1+0x2e0>)
 8007782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007786:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800778a:	f7f9 f9a7 	bl	8000adc <__aeabi_dcmplt>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d01d      	beq.n	80077d0 <scaraInitLSPB1+0x208>
 8007794:	a346      	add	r3, pc, #280	; (adr r3, 80078b0 <scaraInitLSPB1+0x2e8>)
 8007796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800779e:	f7f9 f9bb 	bl	8000b18 <__aeabi_dcmpgt>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d013      	beq.n	80077d0 <scaraInitLSPB1+0x208>
			v_design = 1.5*total_s/tf;
 80077a8:	f04f 0200 	mov.w	r2, #0
 80077ac:	4b45      	ldr	r3, [pc, #276]	; (80078c4 <scaraInitLSPB1+0x2fc>)
 80077ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80077b2:	f7f8 ff21 	bl	80005f8 <__aeabi_dmul>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	4610      	mov	r0, r2
 80077bc:	4619      	mov	r1, r3
 80077be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80077c2:	f7f9 f843 	bl	800084c <__aeabi_ddiv>
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 80077ce:	e034      	b.n	800783a <scaraInitLSPB1+0x272>
		}else{
			v_lim = total_s/tf;
 80077d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80077d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80077d8:	f7f9 f838 	bl	800084c <__aeabi_ddiv>
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			if(v_design < 1.2*v_lim){
 80077e4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80077e8:	4b37      	ldr	r3, [pc, #220]	; (80078c8 <scaraInitLSPB1+0x300>)
 80077ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80077ee:	f7f8 ff03 	bl	80005f8 <__aeabi_dmul>
 80077f2:	4602      	mov	r2, r0
 80077f4:	460b      	mov	r3, r1
 80077f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80077fa:	f7f9 f96f 	bl	8000adc <__aeabi_dcmplt>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <scaraInitLSPB1+0x240>
				return SCARA_STATUS_ERROR_OVER_VELOC;
 8007804:	2309      	movs	r3, #9
 8007806:	e19d      	b.n	8007b44 <scaraInitLSPB1+0x57c>
			}else if(v_design > 2*v_lim){
 8007808:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	f7f8 fd3c 	bl	800028c <__adddf3>
 8007814:	4602      	mov	r2, r0
 8007816:	460b      	mov	r3, r1
 8007818:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800781c:	f7f9 f97c 	bl	8000b18 <__aeabi_dcmpgt>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d009      	beq.n	800783a <scaraInitLSPB1+0x272>
				v_design = 2*v_lim;
 8007826:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	f7f8 fd2d 	bl	800028c <__adddf3>
 8007832:	4602      	mov	r2, r0
 8007834:	460b      	mov	r3, r1
 8007836:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			}else{

			}
		}
		ta = tf - total_s/v_design;
 800783a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800783e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007842:	f7f9 f803 	bl	800084c <__aeabi_ddiv>
 8007846:	4602      	mov	r2, r0
 8007848:	460b      	mov	r3, r1
 800784a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800784e:	f7f8 fd1b 	bl	8000288 <__aeabi_dsub>
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		a_design = v_design/ta;
 800785a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800785e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007862:	f7f8 fff3 	bl	800084c <__aeabi_ddiv>
 8007866:	4602      	mov	r2, r0
 8007868:	460b      	mov	r3, r1
 800786a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		td = tf - ta;
 800786e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007872:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007876:	f7f8 fd07 	bl	8000288 <__aeabi_dsub>
 800787a:	4602      	mov	r2, r0
 800787c:	460b      	mov	r3, r1
 800787e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8007882:	e0fd      	b.n	8007a80 <scaraInitLSPB1+0x4b8>
 8007884:	f3af 8000 	nop.w
 8007888:	14000000 	.word	0x14000000
 800788c:	4000f6f0 	.word	0x4000f6f0
 8007890:	00000000 	.word	0x00000000
 8007894:	405c2000 	.word	0x405c2000
 8007898:	6b259425 	.word	0x6b259425
 800789c:	40069b91 	.word	0x40069b91
 80078a0:	9999999a 	.word	0x9999999a
 80078a4:	3fb99999 	.word	0x3fb99999
 80078a8:	eb1c432d 	.word	0xeb1c432d
 80078ac:	3f1a36e2 	.word	0x3f1a36e2
 80078b0:	33333333 	.word	0x33333333
 80078b4:	3fc33333 	.word	0x3fc33333
 80078b8:	40877000 	.word	0x40877000
 80078bc:	407f4000 	.word	0x407f4000
 80078c0:	401e0000 	.word	0x401e0000
 80078c4:	3ff80000 	.word	0x3ff80000
 80078c8:	3ff33333 	.word	0x3ff33333

	}else if(modeinit == DUTY_MODE_INIT_QVA){
 80078cc:	7ebb      	ldrb	r3, [r7, #26]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f040 80d6 	bne.w	8007a80 <scaraInitLSPB1+0x4b8>
		//check qva condition
		if(total_s*a_design < v_design*v_design){ //condition for ta smaller than td
 80078d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80078d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80078dc:	f7f8 fe8c 	bl	80005f8 <__aeabi_dmul>
 80078e0:	4602      	mov	r2, r0
 80078e2:	460b      	mov	r3, r1
 80078e4:	4614      	mov	r4, r2
 80078e6:	461d      	mov	r5, r3
 80078e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80078ec:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80078f0:	f7f8 fe82 	bl	80005f8 <__aeabi_dmul>
 80078f4:	4602      	mov	r2, r0
 80078f6:	460b      	mov	r3, r1
 80078f8:	4620      	mov	r0, r4
 80078fa:	4629      	mov	r1, r5
 80078fc:	f7f9 f8ee 	bl	8000adc <__aeabi_dcmplt>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 8088 	beq.w	8007a18 <scaraInitLSPB1+0x450>
			if(total_s/v_design < 0.8){ //td too small
 8007908:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800790c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007910:	f7f8 ff9c 	bl	800084c <__aeabi_ddiv>
 8007914:	4602      	mov	r2, r0
 8007916:	460b      	mov	r3, r1
 8007918:	4610      	mov	r0, r2
 800791a:	4619      	mov	r1, r3
 800791c:	a390      	add	r3, pc, #576	; (adr r3, 8007b60 <scaraInitLSPB1+0x598>)
 800791e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007922:	f7f9 f8db 	bl	8000adc <__aeabi_dcmplt>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00a      	beq.n	8007942 <scaraInitLSPB1+0x37a>
				//recalculate v_design
				v_design = 0.8*total_s;
 800792c:	a38c      	add	r3, pc, #560	; (adr r3, 8007b60 <scaraInitLSPB1+0x598>)
 800792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007932:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007936:	f7f8 fe5f 	bl	80005f8 <__aeabi_dmul>
 800793a:	4602      	mov	r2, r0
 800793c:	460b      	mov	r3, r1
 800793e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			}
			if(v_design/a_design < 0.5){ //ta is too small
 8007942:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007946:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800794a:	f7f8 ff7f 	bl	800084c <__aeabi_ddiv>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	4610      	mov	r0, r2
 8007954:	4619      	mov	r1, r3
 8007956:	f04f 0200 	mov.w	r2, #0
 800795a:	4b7f      	ldr	r3, [pc, #508]	; (8007b58 <scaraInitLSPB1+0x590>)
 800795c:	f7f9 f8be 	bl	8000adc <__aeabi_dcmplt>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00a      	beq.n	800797c <scaraInitLSPB1+0x3b4>
				//recalculate a_design
				a_design = v_design/0.5;
 8007966:	f04f 0200 	mov.w	r2, #0
 800796a:	4b7b      	ldr	r3, [pc, #492]	; (8007b58 <scaraInitLSPB1+0x590>)
 800796c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007970:	f7f8 ff6c 	bl	800084c <__aeabi_ddiv>
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}
			ta = v_design/a_design;
 800797c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007980:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007984:	f7f8 ff62 	bl	800084c <__aeabi_ddiv>
 8007988:	4602      	mov	r2, r0
 800798a:	460b      	mov	r3, r1
 800798c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			td = total_s/v_design;
 8007990:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007994:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007998:	f7f8 ff58 	bl	800084c <__aeabi_ddiv>
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			tf = ta + td;
 80079a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80079a8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80079ac:	f7f8 fc6e 	bl	800028c <__adddf3>
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			if(v_design/a_design < 1){ //ta is too small
 80079b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80079bc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80079c0:	f7f8 ff44 	bl	800084c <__aeabi_ddiv>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	4610      	mov	r0, r2
 80079ca:	4619      	mov	r1, r3
 80079cc:	f04f 0200 	mov.w	r2, #0
 80079d0:	4b62      	ldr	r3, [pc, #392]	; (8007b5c <scaraInitLSPB1+0x594>)
 80079d2:	f7f9 f883 	bl	8000adc <__aeabi_dcmplt>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d051      	beq.n	8007a80 <scaraInitLSPB1+0x4b8>
				//recalculate a_design
				a_design = v_design;
 80079dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80079e0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				ta = 1;
 80079e4:	f04f 0200 	mov.w	r2, #0
 80079e8:	4b5c      	ldr	r3, [pc, #368]	; (8007b5c <scaraInitLSPB1+0x594>)
 80079ea:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
				td = total_s/v_design;
 80079ee:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80079f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80079f6:	f7f8 ff29 	bl	800084c <__aeabi_ddiv>
 80079fa:	4602      	mov	r2, r0
 80079fc:	460b      	mov	r3, r1
 80079fe:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				tf = ta + td;
 8007a02:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a06:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007a0a:	f7f8 fc3f 	bl	800028c <__adddf3>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	460b      	mov	r3, r1
 8007a12:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007a16:	e033      	b.n	8007a80 <scaraInitLSPB1+0x4b8>
			}

		}else{
			tf = 2*total_s/v_design;
 8007a18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	460b      	mov	r3, r1
 8007a20:	f7f8 fc34 	bl	800028c <__adddf3>
 8007a24:	4602      	mov	r2, r0
 8007a26:	460b      	mov	r3, r1
 8007a28:	4610      	mov	r0, r2
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007a30:	f7f8 ff0c 	bl	800084c <__aeabi_ddiv>
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			ta = tf/2;
 8007a3c:	f04f 0200 	mov.w	r2, #0
 8007a40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a44:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007a48:	f7f8 ff00 	bl	800084c <__aeabi_ddiv>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			td = tf/2;
 8007a54:	f04f 0200 	mov.w	r2, #0
 8007a58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a5c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007a60:	f7f8 fef4 	bl	800084c <__aeabi_ddiv>
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			a_design = v_design/ta;
 8007a6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a70:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007a74:	f7f8 feea 	bl	800084c <__aeabi_ddiv>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		}
	}
	no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8007a80:	a333      	add	r3, pc, #204	; (adr r3, 8007b50 <scaraInitLSPB1+0x588>)
 8007a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a86:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007a8a:	f7f8 fedf 	bl	800084c <__aeabi_ddiv>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	460b      	mov	r3, r1
 8007a92:	4610      	mov	r0, r2
 8007a94:	4619      	mov	r1, r3
 8007a96:	f7f9 f8a7 	bl	8000be8 <__aeabi_d2f>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	ee00 3a10 	vmov	s0, r3
 8007aa0:	f013 f8d2 	bl	801ac48 <ceilf>
 8007aa4:	eef0 7a40 	vmov.f32	s15, s0
 8007aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aac:	ee17 3a90 	vmov	r3, s15
 8007ab0:	627b      	str	r3, [r7, #36]	; 0x24
	 // Init lspb params

	 lspb->s0 = 0;
 8007ab2:	69f9      	ldr	r1, [r7, #28]
 8007ab4:	f04f 0200 	mov.w	r2, #0
 8007ab8:	f04f 0300 	mov.w	r3, #0
 8007abc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	 lspb->s1 = total_s;
 8007ac0:	69f9      	ldr	r1, [r7, #28]
 8007ac2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ac6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	 lspb->Ta = ta;
 8007aca:	69f9      	ldr	r1, [r7, #28]
 8007acc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007ad0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 lspb->Td = td;
 8007ad4:	69f9      	ldr	r1, [r7, #28]
 8007ad6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ada:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 lspb->Tf = tf;
 8007ade:	69f9      	ldr	r1, [r7, #28]
 8007ae0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007ae4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	 lspb->a_design = a_design;
 8007ae8:	69f9      	ldr	r1, [r7, #28]
 8007aea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007aee:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 lspb->v_design = v_design;
 8007af2:	69f9      	ldr	r1, [r7, #28]
 8007af4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007af8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 lspb->v_lim = v_design;
 8007afc:	69f9      	ldr	r1, [r7, #28]
 8007afe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007b02:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 lspb->v0 = 0;
 8007b06:	69f9      	ldr	r1, [r7, #28]
 8007b08:	f04f 0200 	mov.w	r2, #0
 8007b0c:	f04f 0300 	mov.w	r3, #0
 8007b10:	e9c1 2306 	strd	r2, r3, [r1, #24]
	 lspb->v1 = 0;
 8007b14:	69f9      	ldr	r1, [r7, #28]
 8007b16:	f04f 0200 	mov.w	r2, #0
 8007b1a:	f04f 0300 	mov.w	r3, #0
 8007b1e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	 lspb->num_of_sampling = no_sample;
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b26:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007b34:	f7f8 fba8 	bl	8000288 <__aeabi_dsub>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	69f9      	ldr	r1, [r7, #28]
 8007b3e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3758      	adds	r7, #88	; 0x58
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bdb0      	pop	{r4, r5, r7, pc}
 8007b4c:	f3af 8000 	nop.w
 8007b50:	40000000 	.word	0x40000000
 8007b54:	3f847ae1 	.word	0x3f847ae1
 8007b58:	3fe00000 	.word	0x3fe00000
 8007b5c:	3ff00000 	.word	0x3ff00000
 8007b60:	9999999a 	.word	0x9999999a
 8007b64:	3fe99999 	.word	0x3fe99999

08007b68 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8007b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b6c:	b0ac      	sub	sp, #176	; 0xb0
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007b72:	460b      	mov	r3, r1
 8007b74:	ed87 0b08 	vstr	d0, [r7, #32]
 8007b78:	ed87 1b06 	vstr	d1, [r7, #24]
 8007b7c:	ed87 2b04 	vstr	d2, [r7, #16]
 8007b80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b84:	4613      	mov	r3, r2
 8007b86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 8007b8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b8e:	2b04      	cmp	r3, #4
 8007b90:	d118      	bne.n	8007bc4 <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 8007b92:	f20f 7350 	addw	r3, pc, #1872	; 0x750
 8007b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007b9e:	f7f8 fd2b 	bl	80005f8 <__aeabi_dmul>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 8007baa:	f20f 7338 	addw	r3, pc, #1848	; 0x738
 8007bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007bb6:	f7f8 fd1f 	bl	80005f8 <__aeabi_dmul>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8007bc2:	e092      	b.n	8007cea <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 8007bc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007bc8:	2b05      	cmp	r3, #5
 8007bca:	d118      	bne.n	8007bfe <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 8007bcc:	f20f 731c 	addw	r3, pc, #1820	; 0x71c
 8007bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007bd8:	f7f8 fd0e 	bl	80005f8 <__aeabi_dmul>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 8007be4:	f20f 7304 	addw	r3, pc, #1796	; 0x704
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007bf0:	f7f8 fd02 	bl	80005f8 <__aeabi_dmul>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8007bfc:	e075      	b.n	8007cea <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 8007bfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d118      	bne.n	8007c38 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 8007c06:	f20f 63e4 	addw	r3, pc, #1764	; 0x6e4
 8007c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c12:	f7f8 fcf1 	bl	80005f8 <__aeabi_dmul>
 8007c16:	4602      	mov	r2, r0
 8007c18:	460b      	mov	r3, r1
 8007c1a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 8007c1e:	f20f 63cc 	addw	r3, pc, #1740	; 0x6cc
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007c2a:	f7f8 fce5 	bl	80005f8 <__aeabi_dmul>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8007c36:	e058      	b.n	8007cea <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 8007c38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d118      	bne.n	8007c72 <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 8007c40:	f20f 63a8 	addw	r3, pc, #1704	; 0x6a8
 8007c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c48:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c4c:	f7f8 fcd4 	bl	80005f8 <__aeabi_dmul>
 8007c50:	4602      	mov	r2, r0
 8007c52:	460b      	mov	r3, r1
 8007c54:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 8007c58:	f20f 6390 	addw	r3, pc, #1680	; 0x690
 8007c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007c64:	f7f8 fcc8 	bl	80005f8 <__aeabi_dmul>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8007c70:	e03b      	b.n	8007cea <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 8007c72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d118      	bne.n	8007cac <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 8007c7a:	f20f 6368 	addw	r3, pc, #1640	; 0x668
 8007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c82:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c86:	f7f8 fcb7 	bl	80005f8 <__aeabi_dmul>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 8007c92:	f20f 6350 	addw	r3, pc, #1616	; 0x650
 8007c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007c9e:	f7f8 fcab 	bl	80005f8 <__aeabi_dmul>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8007caa:	e01e      	b.n	8007cea <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 8007cac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007cb0:	2b03      	cmp	r3, #3
 8007cb2:	d118      	bne.n	8007ce6 <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 8007cb4:	f20f 633c 	addw	r3, pc, #1596	; 0x63c
 8007cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007cc0:	f7f8 fc9a 	bl	80005f8 <__aeabi_dmul>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 8007ccc:	f20f 6324 	addw	r3, pc, #1572	; 0x624
 8007cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007cd8:	f7f8 fc8e 	bl	80005f8 <__aeabi_dmul>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8007ce4:	e001      	b.n	8007cea <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8007ce6:	2306      	movs	r3, #6
 8007ce8:	e2ef      	b.n	80082ca <scaraInitLSPB+0x762>
	 }

	 q0 = 0;
 8007cea:	f04f 0200 	mov.w	r2, #0
 8007cee:	f04f 0300 	mov.w	r3, #0
 8007cf2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	 q1 = total_s;
 8007cf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007cfa:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	 v0 = 0;
 8007cfe:	f04f 0200 	mov.w	r2, #0
 8007d02:	f04f 0300 	mov.w	r3, #0
 8007d06:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	 v1 = 0;
 8007d0a:	f04f 0200 	mov.w	r2, #0
 8007d0e:	f04f 0300 	mov.w	r3, #0
 8007d12:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 8007d16:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8007d1a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007d1e:	f7f8 fee7 	bl	8000af0 <__aeabi_dcmple>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d003      	beq.n	8007d30 <scaraInitLSPB+0x1c8>
		 dir = 1;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007d2e:	e00c      	b.n	8007d4a <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 8007d30:	23ff      	movs	r3, #255	; 0xff
 8007d32:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 8007d36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d42:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007d46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8007d4a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	f040 809b 	bne.w	8007e8a <scaraInitLSPB+0x322>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 8007d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d56:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007d5a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 8007d5e:	f20f 539c 	addw	r3, pc, #1436	; 0x59c
 8007d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d66:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007d6a:	f7f8 fed5 	bl	8000b18 <__aeabi_dcmpgt>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d07e      	beq.n	8007e72 <scaraInitLSPB+0x30a>
			 v_lower 	= (q1 - q0) / tf;
 8007d74:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007d78:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007d7c:	f7f8 fa84 	bl	8000288 <__aeabi_dsub>
 8007d80:	4602      	mov	r2, r0
 8007d82:	460b      	mov	r3, r1
 8007d84:	4610      	mov	r0, r2
 8007d86:	4619      	mov	r1, r3
 8007d88:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007d8c:	f7f8 fd5e 	bl	800084c <__aeabi_ddiv>
 8007d90:	4602      	mov	r2, r0
 8007d92:	460b      	mov	r3, r1
 8007d94:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 8007d98:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007d9c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007da0:	f7f8 fa72 	bl	8000288 <__aeabi_dsub>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	4610      	mov	r0, r2
 8007daa:	4619      	mov	r1, r3
 8007dac:	4602      	mov	r2, r0
 8007dae:	460b      	mov	r3, r1
 8007db0:	f7f8 fa6c 	bl	800028c <__adddf3>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	4610      	mov	r0, r2
 8007dba:	4619      	mov	r1, r3
 8007dbc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007dc0:	f7f8 fd44 	bl	800084c <__aeabi_ddiv>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 8007dcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007dd0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007dd4:	f7f8 fe82 	bl	8000adc <__aeabi_dcmplt>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <scaraInitLSPB+0x27a>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 8007dde:	2309      	movs	r3, #9
 8007de0:	e273      	b.n	80082ca <scaraInitLSPB+0x762>
			 } else {
				 if ( v_upper <= v_design) {
 8007de2:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007de6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007dea:	f7f8 fe81 	bl	8000af0 <__aeabi_dcmple>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d003      	beq.n	8007dfc <scaraInitLSPB+0x294>
					 v_design = v_upper;
 8007df4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007df8:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 8007dfc:	f20f 5304 	addw	r3, pc, #1284	; 0x504
 8007e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e04:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007e08:	f7f8 fe86 	bl	8000b18 <__aeabi_dcmpgt>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d018      	beq.n	8007e44 <scaraInitLSPB+0x2dc>
					 tc_upper	= tf - (q1 - q0)/v_design;
 8007e12:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007e16:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007e1a:	f7f8 fa35 	bl	8000288 <__aeabi_dsub>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	4610      	mov	r0, r2
 8007e24:	4619      	mov	r1, r3
 8007e26:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007e2a:	f7f8 fd0f 	bl	800084c <__aeabi_ddiv>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	460b      	mov	r3, r1
 8007e32:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007e36:	f7f8 fa27 	bl	8000288 <__aeabi_dsub>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8007e42:	e00b      	b.n	8007e5c <scaraInitLSPB+0x2f4>
				 } else {
					 tc_upper = tf / 2;
 8007e44:	f04f 0200 	mov.w	r2, #0
 8007e48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e4c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007e50:	f7f8 fcfc 	bl	800084c <__aeabi_ddiv>
 8007e54:	4602      	mov	r2, r0
 8007e56:	460b      	mov	r3, r1
 8007e58:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 8007e5c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007e60:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007e64:	f7f8 fcf2 	bl	800084c <__aeabi_ddiv>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8007e70:	e00b      	b.n	8007e8a <scaraInitLSPB+0x322>
				//  } else {
				// 	 a_design = a_upper;
				//  }
			 }
		 } else {
			 v_design = 0;
 8007e72:	f04f 0200 	mov.w	r2, #0
 8007e76:	f04f 0300 	mov.w	r3, #0
 8007e7a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			 a_design = 0;
 8007e7e:	f04f 0200 	mov.w	r2, #0
 8007e82:	f04f 0300 	mov.w	r3, #0
 8007e86:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8007e8a:	f20f 4378 	addw	r3, pc, #1144	; 0x478
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8007e96:	f7f8 fe3f 	bl	8000b18 <__aeabi_dcmpgt>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f000 8196 	beq.w	80081ce <scaraInitLSPB+0x666>
 8007ea2:	f20f 4360 	addw	r3, pc, #1120	; 0x460
 8007ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eaa:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007eae:	f7f8 fe33 	bl	8000b18 <__aeabi_dcmpgt>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 818a 	beq.w	80081ce <scaraInitLSPB+0x666>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8007eba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007ebe:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007ec2:	f7f8 f9e1 	bl	8000288 <__aeabi_dsub>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	460b      	mov	r3, r1
 8007eca:	4614      	mov	r4, r2
 8007ecc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8007ed0:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	f7f8 fb8e 	bl	80005f8 <__aeabi_dmul>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8007ee4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007ee8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007eec:	f7f8 fb84 	bl	80005f8 <__aeabi_dmul>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	e9c7 2300 	strd	r2, r3, [r7]
 8007ef8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007efc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007f00:	f7f8 fb7a 	bl	80005f8 <__aeabi_dmul>
 8007f04:	4602      	mov	r2, r0
 8007f06:	460b      	mov	r3, r1
 8007f08:	4614      	mov	r4, r2
 8007f0a:	461d      	mov	r5, r3
 8007f0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f10:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007f14:	f7f8 fb70 	bl	80005f8 <__aeabi_dmul>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	4629      	mov	r1, r5
 8007f20:	f7f8 f9b4 	bl	800028c <__adddf3>
 8007f24:	4602      	mov	r2, r0
 8007f26:	460b      	mov	r3, r1
 8007f28:	4610      	mov	r0, r2
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	f04f 0200 	mov.w	r2, #0
 8007f30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f34:	f7f8 fc8a 	bl	800084c <__aeabi_ddiv>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f40:	f7f8 f9a2 	bl	8000288 <__aeabi_dsub>
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f4c:	f7f8 fdd0 	bl	8000af0 <__aeabi_dcmple>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d075      	beq.n	8008042 <scaraInitLSPB+0x4da>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 8007f56:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007f5a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007f5e:	f7f8 f993 	bl	8000288 <__aeabi_dsub>
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	4692      	mov	sl, r2
 8007f68:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8007f6c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007f70:	4650      	mov	r0, sl
 8007f72:	4659      	mov	r1, fp
 8007f74:	f7f8 fb40 	bl	80005f8 <__aeabi_dmul>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4614      	mov	r4, r2
 8007f7e:	461d      	mov	r5, r3
 8007f80:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007f84:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007f88:	f7f8 fb36 	bl	80005f8 <__aeabi_dmul>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4690      	mov	r8, r2
 8007f92:	4699      	mov	r9, r3
 8007f94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f98:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007f9c:	f7f8 fb2c 	bl	80005f8 <__aeabi_dmul>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	4640      	mov	r0, r8
 8007fa6:	4649      	mov	r1, r9
 8007fa8:	f7f8 f970 	bl	800028c <__adddf3>
 8007fac:	4602      	mov	r2, r0
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4610      	mov	r0, r2
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	f04f 0200 	mov.w	r2, #0
 8007fb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fbc:	f7f8 fc46 	bl	800084c <__aeabi_ddiv>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	f7f8 f960 	bl	800028c <__adddf3>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	ec43 2b17 	vmov	d7, r2, r3
 8007fd4:	eeb0 0a47 	vmov.f32	s0, s14
 8007fd8:	eef0 0a67 	vmov.f32	s1, s15
 8007fdc:	f012 fe78 	bl	801acd0 <sqrt>
 8007fe0:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8007fe4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007fe8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007fec:	f7f8 f94c 	bl	8000288 <__aeabi_dsub>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	4610      	mov	r0, r2
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007ffc:	f7f8 fc26 	bl	800084c <__aeabi_ddiv>
 8008000:	4602      	mov	r2, r0
 8008002:	460b      	mov	r3, r1
 8008004:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8008008:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800800c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008010:	f7f8 f93a 	bl	8000288 <__aeabi_dsub>
 8008014:	4602      	mov	r2, r0
 8008016:	460b      	mov	r3, r1
 8008018:	4610      	mov	r0, r2
 800801a:	4619      	mov	r1, r3
 800801c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8008020:	f7f8 fc14 	bl	800084c <__aeabi_ddiv>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			 tf		= ta + td;
 800802c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008030:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8008034:	f7f8 f92a 	bl	800028c <__adddf3>
 8008038:	4602      	mov	r2, r0
 800803a:	460b      	mov	r3, r1
 800803c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8008040:	e0e3      	b.n	800820a <scaraInitLSPB+0x6a2>
		 } else {
			 v_lim	= v_design;
 8008042:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8008046:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 800804a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800804e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008052:	f7f8 f919 	bl	8000288 <__aeabi_dsub>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	4610      	mov	r0, r2
 800805c:	4619      	mov	r1, r3
 800805e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8008062:	f7f8 fbf3 	bl	800084c <__aeabi_ddiv>
 8008066:	4602      	mov	r2, r0
 8008068:	460b      	mov	r3, r1
 800806a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 800806e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008072:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008076:	f7f8 f907 	bl	8000288 <__aeabi_dsub>
 800807a:	4602      	mov	r2, r0
 800807c:	460b      	mov	r3, r1
 800807e:	4610      	mov	r0, r2
 8008080:	4619      	mov	r1, r3
 8008082:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8008086:	f7f8 fbe1 	bl	800084c <__aeabi_ddiv>
 800808a:	4602      	mov	r2, r0
 800808c:	460b      	mov	r3, r1
 800808e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8008092:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8008096:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800809a:	f7f8 f8f5 	bl	8000288 <__aeabi_dsub>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	4690      	mov	r8, r2
 80080a4:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80080a8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80080ac:	4640      	mov	r0, r8
 80080ae:	4649      	mov	r1, r9
 80080b0:	f7f8 fbcc 	bl	800084c <__aeabi_ddiv>
 80080b4:	4602      	mov	r2, r0
 80080b6:	460b      	mov	r3, r1
 80080b8:	4614      	mov	r4, r2
 80080ba:	461d      	mov	r5, r3
 80080bc:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80080c0:	4602      	mov	r2, r0
 80080c2:	460b      	mov	r3, r1
 80080c4:	f7f8 f8e2 	bl	800028c <__adddf3>
 80080c8:	4602      	mov	r2, r0
 80080ca:	460b      	mov	r3, r1
 80080cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80080d0:	f7f8 fbbc 	bl	800084c <__aeabi_ddiv>
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	4690      	mov	r8, r2
 80080da:	4699      	mov	r9, r3
 80080dc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80080e0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80080e4:	f7f8 fbb2 	bl	800084c <__aeabi_ddiv>
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	f04f 0000 	mov.w	r0, #0
 80080f0:	497b      	ldr	r1, [pc, #492]	; (80082e0 <scaraInitLSPB+0x778>)
 80080f2:	f7f8 f8c9 	bl	8000288 <__aeabi_dsub>
 80080f6:	4602      	mov	r2, r0
 80080f8:	460b      	mov	r3, r1
 80080fa:	4640      	mov	r0, r8
 80080fc:	4649      	mov	r1, r9
 80080fe:	f7f8 fa7b 	bl	80005f8 <__aeabi_dmul>
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	4690      	mov	r8, r2
 8008108:	4699      	mov	r9, r3
 800810a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800810e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008112:	f7f8 fb9b 	bl	800084c <__aeabi_ddiv>
 8008116:	4602      	mov	r2, r0
 8008118:	460b      	mov	r3, r1
 800811a:	f04f 0000 	mov.w	r0, #0
 800811e:	4970      	ldr	r1, [pc, #448]	; (80082e0 <scaraInitLSPB+0x778>)
 8008120:	f7f8 f8b2 	bl	8000288 <__aeabi_dsub>
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	4640      	mov	r0, r8
 800812a:	4649      	mov	r1, r9
 800812c:	f7f8 fa64 	bl	80005f8 <__aeabi_dmul>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	4620      	mov	r0, r4
 8008136:	4629      	mov	r1, r5
 8008138:	f7f8 f8a8 	bl	800028c <__adddf3>
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	4614      	mov	r4, r2
 8008142:	461d      	mov	r5, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 8008144:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	f7f8 f89e 	bl	800028c <__adddf3>
 8008150:	4602      	mov	r2, r0
 8008152:	460b      	mov	r3, r1
 8008154:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008158:	f7f8 fb78 	bl	800084c <__aeabi_ddiv>
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	4690      	mov	r8, r2
 8008162:	4699      	mov	r9, r3
 8008164:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8008168:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800816c:	f7f8 fb6e 	bl	800084c <__aeabi_ddiv>
 8008170:	4602      	mov	r2, r0
 8008172:	460b      	mov	r3, r1
 8008174:	f04f 0000 	mov.w	r0, #0
 8008178:	4959      	ldr	r1, [pc, #356]	; (80082e0 <scaraInitLSPB+0x778>)
 800817a:	f7f8 f885 	bl	8000288 <__aeabi_dsub>
 800817e:	4602      	mov	r2, r0
 8008180:	460b      	mov	r3, r1
 8008182:	4640      	mov	r0, r8
 8008184:	4649      	mov	r1, r9
 8008186:	f7f8 fa37 	bl	80005f8 <__aeabi_dmul>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	4690      	mov	r8, r2
 8008190:	4699      	mov	r9, r3
 8008192:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8008196:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800819a:	f7f8 fb57 	bl	800084c <__aeabi_ddiv>
 800819e:	4602      	mov	r2, r0
 80081a0:	460b      	mov	r3, r1
 80081a2:	f04f 0000 	mov.w	r0, #0
 80081a6:	494e      	ldr	r1, [pc, #312]	; (80082e0 <scaraInitLSPB+0x778>)
 80081a8:	f7f8 f86e 	bl	8000288 <__aeabi_dsub>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	4640      	mov	r0, r8
 80081b2:	4649      	mov	r1, r9
 80081b4:	f7f8 fa20 	bl	80005f8 <__aeabi_dmul>
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 80081bc:	4620      	mov	r0, r4
 80081be:	4629      	mov	r1, r5
 80081c0:	f7f8 f864 	bl	800028c <__adddf3>
 80081c4:	4602      	mov	r2, r0
 80081c6:	460b      	mov	r3, r1
 80081c8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80081cc:	e01d      	b.n	800820a <scaraInitLSPB+0x6a2>
		 }
	 } else {
		 v_lim	= 0;
 80081ce:	f04f 0200 	mov.w	r2, #0
 80081d2:	f04f 0300 	mov.w	r3, #0
 80081d6:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		 ta = tf/2;
 80081da:	f04f 0200 	mov.w	r2, #0
 80081de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081e2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80081e6:	f7f8 fb31 	bl	800084c <__aeabi_ddiv>
 80081ea:	4602      	mov	r2, r0
 80081ec:	460b      	mov	r3, r1
 80081ee:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		 td = tf/2;
 80081f2:	f04f 0200 	mov.w	r2, #0
 80081f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081fa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80081fe:	f7f8 fb25 	bl	800084c <__aeabi_ddiv>
 8008202:	4602      	mov	r2, r0
 8008204:	460b      	mov	r3, r1
 8008206:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 800820a:	a333      	add	r3, pc, #204	; (adr r3, 80082d8 <scaraInitLSPB+0x770>)
 800820c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008210:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8008214:	f7f8 fb1a 	bl	800084c <__aeabi_ddiv>
 8008218:	4602      	mov	r2, r0
 800821a:	460b      	mov	r3, r1
 800821c:	4610      	mov	r0, r2
 800821e:	4619      	mov	r1, r3
 8008220:	f7f8 fce2 	bl	8000be8 <__aeabi_d2f>
 8008224:	4603      	mov	r3, r0
 8008226:	ee00 3a10 	vmov	s0, r3
 800822a:	f012 fd0d 	bl	801ac48 <ceilf>
 800822e:	eef0 7a40 	vmov.f32	s15, s0
 8008232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008236:	ee17 3a90 	vmov	r3, s15
 800823a:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 800823c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823e:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8008242:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 8008244:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008246:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800824a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	 lspb->s1 = q1;
 800824e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008250:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8008254:	e9c1 2304 	strd	r2, r3, [r1, #16]
	 lspb->Ta = ta;
 8008258:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800825a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800825e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 lspb->Td = td;
 8008262:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008264:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008268:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 lspb->Tf = tf;
 800826c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800826e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008272:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	 lspb->a_design = a_design;
 8008276:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008278:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800827c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 lspb->v_design = v_design;
 8008280:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008282:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8008286:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 lspb->v_lim = v_lim;
 800828a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800828c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8008290:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 lspb->v0 = v0;
 8008294:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008296:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800829a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	 lspb->v1 = v1;
 800829e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80082a4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	 lspb->num_of_sampling = no_sample;
 80082a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082ac:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 80082ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80082b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80082ba:	f7f7 ffe5 	bl	8000288 <__aeabi_dsub>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082c4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	 return SCARA_STATUS_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	37b0      	adds	r7, #176	; 0xb0
 80082ce:	46bd      	mov	sp, r7
 80082d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082d4:	f3af 8000 	nop.w
 80082d8:	40000000 	.word	0x40000000
 80082dc:	3f847ae1 	.word	0x3f847ae1
 80082e0:	3ff00000 	.word	0x3ff00000
 80082e4:	00000000 	.word	0x00000000
 80082e8:	405c2000 	.word	0x405c2000
 80082ec:	14000000 	.word	0x14000000
 80082f0:	4000f6f0 	.word	0x4000f6f0
 80082f4:	6b259425 	.word	0x6b259425
 80082f8:	40069b91 	.word	0x40069b91
 80082fc:	d2f1a9fc 	.word	0xd2f1a9fc
 8008300:	3f50624d 	.word	0x3f50624d
 8008304:	9abcaf48 	.word	0x9abcaf48
 8008308:	3e7ad7f2 	.word	0x3e7ad7f2
 800830c:	00000000 	.word	0x00000000

08008310 <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8008310:	b5b0      	push	{r4, r5, r7, lr}
 8008312:	b0ba      	sub	sp, #232	; 0xe8
 8008314:	af00      	add	r7, sp, #0
 8008316:	61f8      	str	r0, [r7, #28]
 8008318:	460b      	mov	r3, r1
 800831a:	ed87 0b04 	vstr	d0, [r7, #16]
 800831e:	ed87 1b02 	vstr	d1, [r7, #8]
 8008322:	ed87 2b00 	vstr	d2, [r7]
 8008326:	76fb      	strb	r3, [r7, #27]
 8008328:	4613      	mov	r3, r2
 800832a:	76bb      	strb	r3, [r7, #26]
	 double v_design, a_design, q0, q1, v0, v1, v_lim, j_max, tm, tc, tf, dir;
	 double v_1, s_1, v_2, s_2, v_3, s_3, v_4, s_4;
	 uint32_t	 no_sample;
	 uint8_t	 no_phases;

	 if ( TRAJECTORY_3D == target) {
 800832c:	7efb      	ldrb	r3, [r7, #27]
 800832e:	2b04      	cmp	r3, #4
 8008330:	d117      	bne.n	8008362 <scaraInitScurve+0x52>
		 v_design = V_DESIGN_3D*v_factor;
 8008332:	f20f 4310 	addw	r3, pc, #1040	; 0x410
 8008336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800833e:	f7f8 f95b 	bl	80005f8 <__aeabi_dmul>
 8008342:	4602      	mov	r2, r0
 8008344:	460b      	mov	r3, r1
 8008346:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_3D*a_factor;
 800834a:	a3fe      	add	r3, pc, #1016	; (adr r3, 8008744 <scaraInitScurve+0x434>)
 800834c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008350:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008354:	f7f8 f950 	bl	80005f8 <__aeabi_dmul>
 8008358:	4602      	mov	r2, r0
 800835a:	460b      	mov	r3, r1
 800835c:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 8008360:	e083      	b.n	800846a <scaraInitScurve+0x15a>
	 } else if (TRAJECTORY_ROLL == target) {
 8008362:	7efb      	ldrb	r3, [r7, #27]
 8008364:	2b05      	cmp	r3, #5
 8008366:	d116      	bne.n	8008396 <scaraInitScurve+0x86>
		 v_design = V_DESIGN_ROLL*v_factor;
 8008368:	a3f8      	add	r3, pc, #992	; (adr r3, 800874c <scaraInitScurve+0x43c>)
 800836a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008372:	f7f8 f941 	bl	80005f8 <__aeabi_dmul>
 8008376:	4602      	mov	r2, r0
 8008378:	460b      	mov	r3, r1
 800837a:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_ROLL*a_factor;
 800837e:	a3f3      	add	r3, pc, #972	; (adr r3, 800874c <scaraInitScurve+0x43c>)
 8008380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008384:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008388:	f7f8 f936 	bl	80005f8 <__aeabi_dmul>
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 8008394:	e069      	b.n	800846a <scaraInitScurve+0x15a>
	 } else if (TRAJECTORY_J0 == target) {
 8008396:	7efb      	ldrb	r3, [r7, #27]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d116      	bne.n	80083ca <scaraInitScurve+0xba>
		 v_design = V_DESIGN_J0*v_factor;
 800839c:	a3eb      	add	r3, pc, #940	; (adr r3, 800874c <scaraInitScurve+0x43c>)
 800839e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083a6:	f7f8 f927 	bl	80005f8 <__aeabi_dmul>
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J0*a_factor;
 80083b2:	a3e6      	add	r3, pc, #920	; (adr r3, 800874c <scaraInitScurve+0x43c>)
 80083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083bc:	f7f8 f91c 	bl	80005f8 <__aeabi_dmul>
 80083c0:	4602      	mov	r2, r0
 80083c2:	460b      	mov	r3, r1
 80083c4:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 80083c8:	e04f      	b.n	800846a <scaraInitScurve+0x15a>
	 } else if (TRAJECTORY_J1 == target) {
 80083ca:	7efb      	ldrb	r3, [r7, #27]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d116      	bne.n	80083fe <scaraInitScurve+0xee>
		 v_design = V_DESIGN_J1*v_factor;
 80083d0:	a3de      	add	r3, pc, #888	; (adr r3, 800874c <scaraInitScurve+0x43c>)
 80083d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083da:	f7f8 f90d 	bl	80005f8 <__aeabi_dmul>
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J1*a_factor;
 80083e6:	a3d9      	add	r3, pc, #868	; (adr r3, 800874c <scaraInitScurve+0x43c>)
 80083e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083f0:	f7f8 f902 	bl	80005f8 <__aeabi_dmul>
 80083f4:	4602      	mov	r2, r0
 80083f6:	460b      	mov	r3, r1
 80083f8:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 80083fc:	e035      	b.n	800846a <scaraInitScurve+0x15a>
	 } else if (TRAJECTORY_J2 == target) {
 80083fe:	7efb      	ldrb	r3, [r7, #27]
 8008400:	2b02      	cmp	r3, #2
 8008402:	d116      	bne.n	8008432 <scaraInitScurve+0x122>
		 v_design = V_DESIGN_J2*v_factor;
 8008404:	a3cf      	add	r3, pc, #828	; (adr r3, 8008744 <scaraInitScurve+0x434>)
 8008406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800840e:	f7f8 f8f3 	bl	80005f8 <__aeabi_dmul>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J2*a_factor;
 800841a:	a3ca      	add	r3, pc, #808	; (adr r3, 8008744 <scaraInitScurve+0x434>)
 800841c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008420:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008424:	f7f8 f8e8 	bl	80005f8 <__aeabi_dmul>
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 8008430:	e01b      	b.n	800846a <scaraInitScurve+0x15a>
	 } else if (TRAJECTORY_J3 == target) {
 8008432:	7efb      	ldrb	r3, [r7, #27]
 8008434:	2b03      	cmp	r3, #3
 8008436:	d116      	bne.n	8008466 <scaraInitScurve+0x156>
		 v_design = V_DESIGN_J3*v_factor;
 8008438:	a3c6      	add	r3, pc, #792	; (adr r3, 8008754 <scaraInitScurve+0x444>)
 800843a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008442:	f7f8 f8d9 	bl	80005f8 <__aeabi_dmul>
 8008446:	4602      	mov	r2, r0
 8008448:	460b      	mov	r3, r1
 800844a:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J3*a_factor;
 800844e:	a3c1      	add	r3, pc, #772	; (adr r3, 8008754 <scaraInitScurve+0x444>)
 8008450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008454:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008458:	f7f8 f8ce 	bl	80005f8 <__aeabi_dmul>
 800845c:	4602      	mov	r2, r0
 800845e:	460b      	mov	r3, r1
 8008460:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 8008464:	e001      	b.n	800846a <scaraInitScurve+0x15a>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8008466:	2306      	movs	r3, #6
 8008468:	e2bb      	b.n	80089e2 <scaraInitScurve+0x6d2>
	 }

	 v0 = 0;
 800846a:	f04f 0200 	mov.w	r2, #0
 800846e:	f04f 0300 	mov.w	r3, #0
 8008472:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	 v1 = 0;
 8008476:	f04f 0200 	mov.w	r2, #0
 800847a:	f04f 0300 	mov.w	r3, #0
 800847e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	 q0 = 0;
 8008482:	f04f 0200 	mov.w	r2, #0
 8008486:	f04f 0300 	mov.w	r3, #0
 800848a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	 q1 = total_s;
 800848e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008492:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

	 if ( total_s < 0) {
 8008496:	f04f 0200 	mov.w	r2, #0
 800849a:	f04f 0300 	mov.w	r3, #0
 800849e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80084a2:	f7f8 fb1b 	bl	8000adc <__aeabi_dcmplt>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d015      	beq.n	80084d8 <scaraInitScurve+0x1c8>
		 dir = -1;
 80084ac:	f04f 0200 	mov.w	r2, #0
 80084b0:	4ba1      	ldr	r3, [pc, #644]	; (8008738 <scaraInitScurve+0x428>)
 80084b2:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		 q1 = -q1;
 80084b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80084ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084c2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80084c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		 total_s = -total_s;
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	613b      	str	r3, [r7, #16]
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80084d4:	617b      	str	r3, [r7, #20]
 80084d6:	e004      	b.n	80084e2 <scaraInitScurve+0x1d2>
	 } else {
		 dir = 1;
 80084d8:	f04f 0200 	mov.w	r2, #0
 80084dc:	4b97      	ldr	r3, [pc, #604]	; (800873c <scaraInitScurve+0x42c>)
 80084de:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	 }


	 if (DUTY_MODE_INIT_QVT == modeinit) {
 80084e2:	7ebb      	ldrb	r3, [r7, #26]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d17f      	bne.n	80085e8 <scaraInitScurve+0x2d8>
		 double t_upper, v_upper, a_upper;
		 tf = scurve->Tf;
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80084ee:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 // Avoid division by 0
		 if (tf > 0.001) {
 80084f2:	a38d      	add	r3, pc, #564	; (adr r3, 8008728 <scaraInitScurve+0x418>)
 80084f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80084fc:	f7f8 fb0c 	bl	8000b18 <__aeabi_dcmpgt>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d064      	beq.n	80085d0 <scaraInitScurve+0x2c0>
			 // Assume 4 phase
			 t_upper = tf / 4;
 8008506:	f04f 0200 	mov.w	r2, #0
 800850a:	4b8d      	ldr	r3, [pc, #564]	; (8008740 <scaraInitScurve+0x430>)
 800850c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008510:	f7f8 f99c 	bl	800084c <__aeabi_ddiv>
 8008514:	4602      	mov	r2, r0
 8008516:	460b      	mov	r3, r1
 8008518:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
			 v_upper = total_s / (2*t_upper);
 800851c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	f7f7 feb2 	bl	800028c <__adddf3>
 8008528:	4602      	mov	r2, r0
 800852a:	460b      	mov	r3, r1
 800852c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008530:	f7f8 f98c 	bl	800084c <__aeabi_ddiv>
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			 // Check 4 phase --> 5 phase
			 if ( v_upper > v_design) {
 800853c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008540:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8008544:	f7f8 fae8 	bl	8000b18 <__aeabi_dcmpgt>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d022      	beq.n	8008594 <scaraInitScurve+0x284>
				 t_upper = tf/2 - total_s/(2*v_design);
 800854e:	f04f 0200 	mov.w	r2, #0
 8008552:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008556:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800855a:	f7f8 f977 	bl	800084c <__aeabi_ddiv>
 800855e:	4602      	mov	r2, r0
 8008560:	460b      	mov	r3, r1
 8008562:	4614      	mov	r4, r2
 8008564:	461d      	mov	r5, r3
 8008566:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	f7f7 fe8d 	bl	800028c <__adddf3>
 8008572:	4602      	mov	r2, r0
 8008574:	460b      	mov	r3, r1
 8008576:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800857a:	f7f8 f967 	bl	800084c <__aeabi_ddiv>
 800857e:	4602      	mov	r2, r0
 8008580:	460b      	mov	r3, r1
 8008582:	4620      	mov	r0, r4
 8008584:	4629      	mov	r1, r5
 8008586:	f7f7 fe7f 	bl	8000288 <__aeabi_dsub>
 800858a:	4602      	mov	r2, r0
 800858c:	460b      	mov	r3, r1
 800858e:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 8008592:	e003      	b.n	800859c <scaraInitScurve+0x28c>
			 } else {
				 v_design = v_upper;
 8008594:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008598:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			 }
			 a_upper  = v_design / t_upper;
 800859c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80085a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80085a4:	f7f8 f952 	bl	800084c <__aeabi_ddiv>
 80085a8:	4602      	mov	r2, r0
 80085aa:	460b      	mov	r3, r1
 80085ac:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			 if ( a_upper > a_design) {
 80085b0:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80085b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80085b8:	f7f8 faae 	bl	8000b18 <__aeabi_dcmpgt>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d001      	beq.n	80085c6 <scaraInitScurve+0x2b6>
				 return SCARA_STATUS_ERROR_OVER_ACCEL;
 80085c2:	230a      	movs	r3, #10
 80085c4:	e20d      	b.n	80089e2 <scaraInitScurve+0x6d2>
			 } else {
				 a_design = a_upper;
 80085c6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80085ca:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 80085ce:	e00b      	b.n	80085e8 <scaraInitScurve+0x2d8>
			 }
		 } else {
			 v_design = 0;
 80085d0:	f04f 0200 	mov.w	r2, #0
 80085d4:	f04f 0300 	mov.w	r3, #0
 80085d8:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			 a_design = 0;
 80085dc:	f04f 0200 	mov.w	r2, #0
 80085e0:	f04f 0300 	mov.w	r3, #0
 80085e4:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
		 }
	 }
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 80085e8:	a351      	add	r3, pc, #324	; (adr r3, 8008730 <scaraInitScurve+0x420>)
 80085ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ee:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80085f2:	f7f8 fa91 	bl	8000b18 <__aeabi_dcmpgt>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f000 80af 	beq.w	800875c <scaraInitScurve+0x44c>
 80085fe:	a34c      	add	r3, pc, #304	; (adr r3, 8008730 <scaraInitScurve+0x420>)
 8008600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008604:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008608:	f7f8 fa86 	bl	8000b18 <__aeabi_dcmpgt>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 80a4 	beq.w	800875c <scaraInitScurve+0x44c>
		 no_phases = 5;
 8008614:	2305      	movs	r3, #5
 8008616:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = v_design/a_design;
 800861a:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800861e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008622:	f7f8 f913 	bl	800084c <__aeabi_ddiv>
 8008626:	4602      	mov	r2, r0
 8008628:	460b      	mov	r3, r1
 800862a:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		 tc = total_s/v_design - 2*tm;
 800862e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008632:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008636:	f7f8 f909 	bl	800084c <__aeabi_ddiv>
 800863a:	4602      	mov	r2, r0
 800863c:	460b      	mov	r3, r1
 800863e:	4614      	mov	r4, r2
 8008640:	461d      	mov	r5, r3
 8008642:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008646:	4602      	mov	r2, r0
 8008648:	460b      	mov	r3, r1
 800864a:	f7f7 fe1f 	bl	800028c <__adddf3>
 800864e:	4602      	mov	r2, r0
 8008650:	460b      	mov	r3, r1
 8008652:	4620      	mov	r0, r4
 8008654:	4629      	mov	r1, r5
 8008656:	f7f7 fe17 	bl	8000288 <__aeabi_dsub>
 800865a:	4602      	mov	r2, r0
 800865c:	460b      	mov	r3, r1
 800865e:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
		 // Check condition 5 phase ---> 4 phase
		 if (tc < 0.0) {
 8008662:	f04f 0200 	mov.w	r2, #0
 8008666:	f04f 0300 	mov.w	r3, #0
 800866a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800866e:	f7f8 fa35 	bl	8000adc <__aeabi_dcmplt>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d020      	beq.n	80086ba <scaraInitScurve+0x3aa>
			 tc = 0;
 8008678:	f04f 0200 	mov.w	r2, #0
 800867c:	f04f 0300 	mov.w	r3, #0
 8008680:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
			 no_phases = 4;
 8008684:	2304      	movs	r3, #4
 8008686:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			 tm = sqrt(total_s/(2*a_design));
 800868a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800868e:	4602      	mov	r2, r0
 8008690:	460b      	mov	r3, r1
 8008692:	f7f7 fdfb 	bl	800028c <__adddf3>
 8008696:	4602      	mov	r2, r0
 8008698:	460b      	mov	r3, r1
 800869a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800869e:	f7f8 f8d5 	bl	800084c <__aeabi_ddiv>
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	ec43 2b17 	vmov	d7, r2, r3
 80086aa:	eeb0 0a47 	vmov.f32	s0, s14
 80086ae:	eef0 0a67 	vmov.f32	s1, s15
 80086b2:	f012 fb0d 	bl	801acd0 <sqrt>
 80086b6:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
		 }
		 if (tm < 0.001) {
 80086ba:	a31b      	add	r3, pc, #108	; (adr r3, 8008728 <scaraInitScurve+0x418>)
 80086bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80086c4:	f7f8 fa0a 	bl	8000adc <__aeabi_dcmplt>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d006      	beq.n	80086dc <scaraInitScurve+0x3cc>
			 j_max = 0;
 80086ce:	f04f 0200 	mov.w	r2, #0
 80086d2:	f04f 0300 	mov.w	r3, #0
 80086d6:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
 80086da:	e009      	b.n	80086f0 <scaraInitScurve+0x3e0>
		 } else {
			 j_max = a_design/tm;
 80086dc:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80086e0:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80086e4:	f7f8 f8b2 	bl	800084c <__aeabi_ddiv>
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
		 }
		 v_lim = a_design*tm;
 80086f0:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80086f4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80086f8:	f7f7 ff7e 	bl	80005f8 <__aeabi_dmul>
 80086fc:	4602      	mov	r2, r0
 80086fe:	460b      	mov	r3, r1
 8008700:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
		 tf    = 4*tm + tc;
 8008704:	f04f 0200 	mov.w	r2, #0
 8008708:	4b0d      	ldr	r3, [pc, #52]	; (8008740 <scaraInitScurve+0x430>)
 800870a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800870e:	f7f7 ff73 	bl	80005f8 <__aeabi_dmul>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800871a:	f7f7 fdb7 	bl	800028c <__adddf3>
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 8008726:	e039      	b.n	800879c <scaraInitScurve+0x48c>
 8008728:	d2f1a9fc 	.word	0xd2f1a9fc
 800872c:	3f50624d 	.word	0x3f50624d
 8008730:	9abcaf48 	.word	0x9abcaf48
 8008734:	3e7ad7f2 	.word	0x3e7ad7f2
 8008738:	bff00000 	.word	0xbff00000
 800873c:	3ff00000 	.word	0x3ff00000
 8008740:	40100000 	.word	0x40100000
 8008744:	00000000 	.word	0x00000000
 8008748:	405c2000 	.word	0x405c2000
 800874c:	14000000 	.word	0x14000000
 8008750:	4000f6f0 	.word	0x4000f6f0
 8008754:	6b259425 	.word	0x6b259425
 8008758:	40069b91 	.word	0x40069b91
	 } else {
		 j_max = 0;
 800875c:	f04f 0200 	mov.w	r2, #0
 8008760:	f04f 0300 	mov.w	r3, #0
 8008764:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
		 tc = 0;
 8008768:	f04f 0200 	mov.w	r2, #0
 800876c:	f04f 0300 	mov.w	r3, #0
 8008770:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
		 no_phases = 4;
 8008774:	2304      	movs	r3, #4
 8008776:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = tf / 4;
 800877a:	f04f 0200 	mov.w	r2, #0
 800877e:	4b9e      	ldr	r3, [pc, #632]	; (80089f8 <scaraInitScurve+0x6e8>)
 8008780:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008784:	f7f8 f862 	bl	800084c <__aeabi_ddiv>
 8008788:	4602      	mov	r2, r0
 800878a:	460b      	mov	r3, r1
 800878c:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		 v_lim = 0;
 8008790:	f04f 0200 	mov.w	r2, #0
 8008794:	f04f 0300 	mov.w	r3, #0
 8008798:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
	 }

	 no_sample = ceil(tf / T_SAMPLING);
 800879c:	a394      	add	r3, pc, #592	; (adr r3, 80089f0 <scaraInitScurve+0x6e0>)
 800879e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a2:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80087a6:	f7f8 f851 	bl	800084c <__aeabi_ddiv>
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	ec43 2b17 	vmov	d7, r2, r3
 80087b2:	eeb0 0a47 	vmov.f32	s0, s14
 80087b6:	eef0 0a67 	vmov.f32	s1, s15
 80087ba:	f012 f8d5 	bl	801a968 <ceil>
 80087be:	ec53 2b10 	vmov	r2, r3, d0
 80087c2:	4610      	mov	r0, r2
 80087c4:	4619      	mov	r1, r3
 80087c6:	f7f8 f9ef 	bl	8000ba8 <__aeabi_d2uiz>
 80087ca:	4603      	mov	r3, r0
 80087cc:	667b      	str	r3, [r7, #100]	; 0x64
	 v_1 = 0.5*j_max*tm*tm;
 80087ce:	f04f 0200 	mov.w	r2, #0
 80087d2:	4b8a      	ldr	r3, [pc, #552]	; (80089fc <scaraInitScurve+0x6ec>)
 80087d4:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80087d8:	f7f7 ff0e 	bl	80005f8 <__aeabi_dmul>
 80087dc:	4602      	mov	r2, r0
 80087de:	460b      	mov	r3, r1
 80087e0:	4610      	mov	r0, r2
 80087e2:	4619      	mov	r1, r3
 80087e4:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80087e8:	f7f7 ff06 	bl	80005f8 <__aeabi_dmul>
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80087f4:	f7f7 ff00 	bl	80005f8 <__aeabi_dmul>
 80087f8:	4602      	mov	r2, r0
 80087fa:	460b      	mov	r3, r1
 80087fc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	 s_1 = j_max*tm*tm*tm/6;
 8008800:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8008804:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008808:	f7f7 fef6 	bl	80005f8 <__aeabi_dmul>
 800880c:	4602      	mov	r2, r0
 800880e:	460b      	mov	r3, r1
 8008810:	4610      	mov	r0, r2
 8008812:	4619      	mov	r1, r3
 8008814:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8008818:	f7f7 feee 	bl	80005f8 <__aeabi_dmul>
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
 8008820:	4610      	mov	r0, r2
 8008822:	4619      	mov	r1, r3
 8008824:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8008828:	f7f7 fee6 	bl	80005f8 <__aeabi_dmul>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4610      	mov	r0, r2
 8008832:	4619      	mov	r1, r3
 8008834:	f04f 0200 	mov.w	r2, #0
 8008838:	4b71      	ldr	r3, [pc, #452]	; (8008a00 <scaraInitScurve+0x6f0>)
 800883a:	f7f8 f807 	bl	800084c <__aeabi_ddiv>
 800883e:	4602      	mov	r2, r0
 8008840:	460b      	mov	r3, r1
 8008842:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	 v_2 = j_max*tm*tm;
 8008846:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800884a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800884e:	f7f7 fed3 	bl	80005f8 <__aeabi_dmul>
 8008852:	4602      	mov	r2, r0
 8008854:	460b      	mov	r3, r1
 8008856:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800885a:	f7f7 fecd 	bl	80005f8 <__aeabi_dmul>
 800885e:	4602      	mov	r2, r0
 8008860:	460b      	mov	r3, r1
 8008862:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	 s_2 = v_2*tm;
 8008866:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800886a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800886e:	f7f7 fec3 	bl	80005f8 <__aeabi_dmul>
 8008872:	4602      	mov	r2, r0
 8008874:	460b      	mov	r3, r1
 8008876:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	 v_3 = v_2;
 800887a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800887e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	 s_3 = s_2 + v_2*tc;
 8008882:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8008886:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800888a:	f7f7 feb5 	bl	80005f8 <__aeabi_dmul>
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008896:	f7f7 fcf9 	bl	800028c <__adddf3>
 800889a:	4602      	mov	r2, r0
 800889c:	460b      	mov	r3, r1
 800889e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	 v_4 = v_1;
 80088a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80088a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	 s_4 = s_3 + s_2 - s_1;
 80088aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80088ae:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80088b2:	f7f7 fceb 	bl	800028c <__adddf3>
 80088b6:	4602      	mov	r2, r0
 80088b8:	460b      	mov	r3, r1
 80088ba:	4610      	mov	r0, r2
 80088bc:	4619      	mov	r1, r3
 80088be:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80088c2:	f7f7 fce1 	bl	8000288 <__aeabi_dsub>
 80088c6:	4602      	mov	r2, r0
 80088c8:	460b      	mov	r3, r1
 80088ca:	e9c7 2308 	strd	r2, r3, [r7, #32]

	 scurve->Tc = tc;
 80088ce:	69f9      	ldr	r1, [r7, #28]
 80088d0:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80088d4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	 scurve->Tf = tf;
 80088d8:	69f9      	ldr	r1, [r7, #28]
 80088da:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80088de:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	 scurve->Tm = tm;
 80088e2:	69f9      	ldr	r1, [r7, #28]
 80088e4:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80088e8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	 scurve->a_design = a_design;
 80088ec:	69f9      	ldr	r1, [r7, #28]
 80088ee:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80088f2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 scurve->v_design = v_design;
 80088f6:	69f9      	ldr	r1, [r7, #28]
 80088f8:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80088fc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 scurve->v_lim = v_lim;
 8008900:	69f9      	ldr	r1, [r7, #28]
 8008902:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8008906:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 scurve->v0 = v0;
 800890a:	69f9      	ldr	r1, [r7, #28]
 800890c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008910:	e9c1 2306 	strd	r2, r3, [r1, #24]
	 scurve->v1 = v1;
 8008914:	69f9      	ldr	r1, [r7, #28]
 8008916:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800891a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	 scurve->j_max = j_max;
 800891e:	69f9      	ldr	r1, [r7, #28]
 8008920:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8008924:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 scurve->s0   = q0;
 8008928:	69f9      	ldr	r1, [r7, #28]
 800892a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800892e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	 scurve->s1   = q1;
 8008932:	69f9      	ldr	r1, [r7, #28]
 8008934:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8008938:	e9c1 2304 	strd	r2, r3, [r1, #16]
	 scurve->num_of_phase = no_phases;
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8008942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	 scurve->num_of_sampling = no_sample;
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800894a:	669a      	str	r2, [r3, #104]	; 0x68
	 scurve->total_s = total_s;
 800894c:	69f9      	ldr	r1, [r7, #28]
 800894e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008952:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	 scurve->dir = dir;
 8008956:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800895a:	f7f8 f8fd 	bl	8000b58 <__aeabi_d2iz>
 800895e:	4603      	mov	r3, r0
 8008960:	b25a      	sxtb	r2, r3
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	701a      	strb	r2, [r3, #0]

	 scurve->a_current = 0;
 8008966:	69f9      	ldr	r1, [r7, #28]
 8008968:	f04f 0200 	mov.w	r2, #0
 800896c:	f04f 0300 	mov.w	r3, #0
 8008970:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
	 scurve->v_current = 0;
 8008974:	69f9      	ldr	r1, [r7, #28]
 8008976:	f04f 0200 	mov.w	r2, #0
 800897a:	f04f 0300 	mov.w	r3, #0
 800897e:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
	 scurve->s_current = 0;
 8008982:	69f9      	ldr	r1, [r7, #28]
 8008984:	f04f 0200 	mov.w	r2, #0
 8008988:	f04f 0300 	mov.w	r3, #0
 800898c:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
	 scurve->v_1 = v_1;
 8008990:	69f9      	ldr	r1, [r7, #28]
 8008992:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008996:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	 scurve->v_2 = v_2;
 800899a:	69f9      	ldr	r1, [r7, #28]
 800899c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80089a0:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	 scurve->v_3 = v_3;
 80089a4:	69f9      	ldr	r1, [r7, #28]
 80089a6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80089aa:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	 scurve->v_4 = v_4;
 80089ae:	69f9      	ldr	r1, [r7, #28]
 80089b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089b4:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
	 scurve->s_1 = s_1;
 80089b8:	69f9      	ldr	r1, [r7, #28]
 80089ba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80089be:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	 scurve->s_2 = s_2;
 80089c2:	69f9      	ldr	r1, [r7, #28]
 80089c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80089c8:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	 scurve->s_3 = s_3;
 80089cc:	69f9      	ldr	r1, [r7, #28]
 80089ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80089d2:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	 scurve->s_4 = s_4;
 80089d6:	69f9      	ldr	r1, [r7, #28]
 80089d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80089dc:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0

	 return SCARA_STATUS_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	37e8      	adds	r7, #232	; 0xe8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bdb0      	pop	{r4, r5, r7, pc}
 80089ea:	bf00      	nop
 80089ec:	f3af 8000 	nop.w
 80089f0:	40000000 	.word	0x40000000
 80089f4:	3f847ae1 	.word	0x3f847ae1
 80089f8:	40100000 	.word	0x40100000
 80089fc:	3fe00000 	.word	0x3fe00000
 8008a00:	40180000 	.word	0x40180000

08008a04 <scaraFlowDuty>:
}

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 8008a04:	b082      	sub	sp, #8
 8008a06:	b5b0      	push	{r4, r5, r7, lr}
 8008a08:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8008a0c:	af2e      	add	r7, sp, #184	; 0xb8
 8008a0e:	f107 0108 	add.w	r1, r7, #8
 8008a12:	ed81 0b00 	vstr	d0, [r1]
 8008a16:	1d39      	adds	r1, r7, #4
 8008a18:	6008      	str	r0, [r1, #0]
 8008a1a:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8008a1e:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 8008a22:	f107 0110 	add.w	r1, r7, #16
 8008a26:	f107 0308 	add.w	r3, r7, #8
 8008a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 8008a32:	4ba6      	ldr	r3, [pc, #664]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f040 8154 	bne.w	8008ce4 <scaraFlowDuty+0x2e0>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 8008a3c:	4ba3      	ldr	r3, [pc, #652]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008a3e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d129      	bne.n	8008a9a <scaraFlowDuty+0x96>
//			s = myDUTY.task.trajectory_3d.lspb.s_current;
//			v = myDUTY.task.trajectory_3d.lspb.v_current;
//			angle = myDUTY.task.trajectory_roll.lspb.s_current;
//			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
//			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
			status1 = scaraFlowLSPB1(&(myDUTY.task.trajectory_3d.lspb), time);
 8008a46:	f107 0308 	add.w	r3, r7, #8
 8008a4a:	ed93 0b00 	vldr	d0, [r3]
 8008a4e:	48a0      	ldr	r0, [pc, #640]	; (8008cd0 <scaraFlowDuty+0x2cc>)
 8008a50:	f000 fc6c 	bl	800932c <scaraFlowLSPB1>
 8008a54:	4603      	mov	r3, r0
 8008a56:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 8008a5a:	4b9c      	ldr	r3, [pc, #624]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008a5c:	e9d3 2362 	ldrd	r2, r3, [r3, #392]	; 0x188
 8008a60:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 8008a64:	4b99      	ldr	r3, [pc, #612]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008a66:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8008a6a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8008a6e:	4b97      	ldr	r3, [pc, #604]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008a70:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8008a74:	f107 0108 	add.w	r1, r7, #8
 8008a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a7c:	f7f7 fdbc 	bl	80005f8 <__aeabi_dmul>
 8008a80:	4602      	mov	r2, r0
 8008a82:	460b      	mov	r3, r1
 8008a84:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8008a88:	4b90      	ldr	r3, [pc, #576]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008a8a:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8008a8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			status2 = SCARA_STATUS_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8008a98:	e05f      	b.n	8008b5a <scaraFlowDuty+0x156>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 8008a9a:	4b8c      	ldr	r3, [pc, #560]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008a9c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d12d      	bne.n	8008b00 <scaraFlowDuty+0xfc>
			status1 = scaraFLowScurve(&(myDUTY.task.trajectory_3d.scurve), time);
 8008aa4:	f107 0308 	add.w	r3, r7, #8
 8008aa8:	ed93 0b00 	vldr	d0, [r3]
 8008aac:	4889      	ldr	r0, [pc, #548]	; (8008cd4 <scaraFlowDuty+0x2d0>)
 8008aae:	f000 fdcf 	bl	8009650 <scaraFLowScurve>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve(&(myDUTY.task.trajectory_roll.scurve), time);
 8008ab8:	f107 0308 	add.w	r3, r7, #8
 8008abc:	ed93 0b00 	vldr	d0, [r3]
 8008ac0:	4885      	ldr	r0, [pc, #532]	; (8008cd8 <scaraFlowDuty+0x2d4>)
 8008ac2:	f000 fdc5 	bl	8009650 <scaraFLowScurve>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8008acc:	4b7f      	ldr	r3, [pc, #508]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008ace:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	; 0x260
 8008ad2:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			v = myDUTY.task.trajectory_3d.scurve.v_current;
 8008ad6:	4b7d      	ldr	r3, [pc, #500]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008ad8:	e9d3 2396 	ldrd	r2, r3, [r3, #600]	; 0x258
 8008adc:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
			angle = myDUTY.task.trajectory_roll.scurve.s_current;
 8008ae0:	4b7a      	ldr	r3, [pc, #488]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008ae2:	e9d3 23f8 	ldrd	r2, r3, [r3, #992]	; 0x3e0
 8008ae6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			v_angle = myDUTY.task.trajectory_roll.scurve.v_current;
 8008aea:	4b78      	ldr	r3, [pc, #480]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008aec:	e9d3 23f6 	ldrd	r2, r3, [r3, #984]	; 0x3d8
 8008af0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
 8008af4:	4b75      	ldr	r3, [pc, #468]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008af6:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 8008afa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8008afe:	e02c      	b.n	8008b5a <scaraFlowDuty+0x156>
		}else if( DUTY_TRAJECTORY_LINEAR == myDUTY.task.trajectory_3d.trajectory_type){
 8008b00:	4b72      	ldr	r3, [pc, #456]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008b02:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d125      	bne.n	8008b56 <scaraFlowDuty+0x152>
			s = time*myDUTY.task.trajectory_3d.linear.constant_v;
 8008b0a:	4b70      	ldr	r3, [pc, #448]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008b0c:	e9d3 239c 	ldrd	r2, r3, [r3, #624]	; 0x270
 8008b10:	f107 0108 	add.w	r1, r7, #8
 8008b14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b18:	f7f7 fd6e 	bl	80005f8 <__aeabi_dmul>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	460b      	mov	r3, r1
 8008b20:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8008b24:	4b69      	ldr	r3, [pc, #420]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008b26:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8008b2a:	f107 0108 	add.w	r1, r7, #8
 8008b2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b32:	f7f7 fd61 	bl	80005f8 <__aeabi_dmul>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8008b3e:	4b63      	ldr	r3, [pc, #396]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008b40:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8008b44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			status1 = SCARA_STATUS_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8008b54:	e001      	b.n	8008b5a <scaraFlowDuty+0x156>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8008b56:	2305      	movs	r3, #5
 8008b58:	e2cd      	b.n	80090f6 <scaraFlowDuty+0x6f2>
		}

		if ( SCARA_STATUS_OK != status1) {
 8008b5a:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d002      	beq.n	8008b68 <scaraFlowDuty+0x164>
			return status1;
 8008b62:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008b66:	e2c6      	b.n	80090f6 <scaraFlowDuty+0x6f2>
		}
		if ( SCARA_STATUS_OK != status2) {
 8008b68:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d002      	beq.n	8008b76 <scaraFlowDuty+0x172>
			return status2;
 8008b70:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008b74:	e2bf      	b.n	80090f6 <scaraFlowDuty+0x6f2>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 8008b76:	4b55      	ldr	r3, [pc, #340]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008b78:	7a1b      	ldrb	r3, [r3, #8]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d117      	bne.n	8008bae <scaraFlowDuty+0x1aa>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 8008b7e:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 8008b82:	4856      	ldr	r0, [pc, #344]	; (8008cdc <scaraFlowDuty+0x2d8>)
 8008b84:	f000 fac4 	bl	8009110 <scaraFlowLine>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.line.x_current;
 8008b8e:	4b4f      	ldr	r3, [pc, #316]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008b90:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8008b94:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			y = myDUTY.task.path.line.y_current;
 8008b98:	4b4c      	ldr	r3, [pc, #304]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008b9a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8008b9e:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
			z = myDUTY.task.path.line.z_current;
 8008ba2:	4b4a      	ldr	r3, [pc, #296]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008ba4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008ba8:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
 8008bac:	e01d      	b.n	8008bea <scaraFlowDuty+0x1e6>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 8008bae:	4b47      	ldr	r3, [pc, #284]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008bb0:	7a1b      	ldrb	r3, [r3, #8]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d117      	bne.n	8008be6 <scaraFlowDuty+0x1e2>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8008bb6:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 8008bba:	4849      	ldr	r0, [pc, #292]	; (8008ce0 <scaraFlowDuty+0x2dc>)
 8008bbc:	f000 fb30 	bl	8009220 <scaraFlowCircle>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.circle.x_current;
 8008bc6:	4b41      	ldr	r3, [pc, #260]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008bc8:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8008bcc:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			y = myDUTY.task.path.circle.y_current;
 8008bd0:	4b3e      	ldr	r3, [pc, #248]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008bd2:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 8008bd6:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
			z = myDUTY.task.path.circle.z_current;
 8008bda:	4b3c      	ldr	r3, [pc, #240]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008bdc:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 8008be0:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
 8008be4:	e001      	b.n	8008bea <scaraFlowDuty+0x1e6>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e285      	b.n	80090f6 <scaraFlowDuty+0x6f2>
		}

		positionCompute.x 		= x;
 8008bea:	f107 0110 	add.w	r1, r7, #16
 8008bee:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8008bf2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		positionCompute.y		= y;
 8008bf6:	f107 0110 	add.w	r1, r7, #16
 8008bfa:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8008bfe:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		positionCompute.z 		= z;
 8008c02:	f107 0110 	add.w	r1, r7, #16
 8008c06:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8008c0a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 8008c0e:	4b2f      	ldr	r3, [pc, #188]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008c10:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8008c14:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008c18:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7f7 fc81 	bl	8000524 <__aeabi_i2d>
 8008c22:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8008c26:	f7f7 fce7 	bl	80005f8 <__aeabi_dmul>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	4620      	mov	r0, r4
 8008c30:	4629      	mov	r1, r5
 8008c32:	f7f7 fb2b 	bl	800028c <__adddf3>
 8008c36:	4602      	mov	r2, r0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	f107 0110 	add.w	r1, r7, #16
 8008c3e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

		positionCompute.q		= s;
 8008c42:	f107 0110 	add.w	r1, r7, #16
 8008c46:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8008c4a:	e9c1 2300 	strd	r2, r3, [r1]
		positionCompute.q_roll  = angle;
 8008c4e:	f107 0110 	add.w	r1, r7, #16
 8008c52:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8008c56:	e9c1 2302 	strd	r2, r3, [r1, #8]

		positionCompute.v_3d    = v;
 8008c5a:	f107 0110 	add.w	r1, r7, #16
 8008c5e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8008c62:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 8008c66:	f107 0110 	add.w	r1, r7, #16
 8008c6a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8008c6e:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 8008c72:	4b16      	ldr	r3, [pc, #88]	; (8008ccc <scaraFlowDuty+0x2c8>)
 8008c74:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8008c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7c:	f107 0110 	add.w	r1, r7, #16
 8008c80:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		positionCompute.t		= time;
 8008c84:	f107 0110 	add.w	r1, r7, #16
 8008c88:	f107 0308 	add.w	r3, r7, #8
 8008c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c90:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 8008c94:	f107 0410 	add.w	r4, r7, #16
 8008c98:	4668      	mov	r0, sp
 8008c9a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008c9e:	22b8      	movs	r2, #184	; 0xb8
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	f00d fa05 	bl	80160b0 <memcpy>
 8008ca6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8008caa:	cb0c      	ldmia	r3, {r2, r3}
 8008cac:	4620      	mov	r0, r4
 8008cae:	f7fb fb87 	bl	80043c0 <kinematicInverse>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d101      	bne.n	8008cbc <scaraFlowDuty+0x2b8>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008cb8:	2307      	movs	r3, #7
 8008cba:	e21c      	b.n	80090f6 <scaraFlowDuty+0x6f2>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8008cbc:	f107 0110 	add.w	r1, r7, #16
 8008cc0:	1d3b      	adds	r3, r7, #4
 8008cc2:	22c0      	movs	r2, #192	; 0xc0
 8008cc4:	6818      	ldr	r0, [r3, #0]
 8008cc6:	f00d f9f3 	bl	80160b0 <memcpy>
 8008cca:	e213      	b.n	80090f4 <scaraFlowDuty+0x6f0>
 8008ccc:	2000ad30 	.word	0x2000ad30
 8008cd0:	2000ae48 	.word	0x2000ae48
 8008cd4:	2000aec8 	.word	0x2000aec8
 8008cd8:	2000b048 	.word	0x2000b048
 8008cdc:	2000ad40 	.word	0x2000ad40
 8008ce0:	2000adb0 	.word	0x2000adb0
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8008ce4:	4b8b      	ldr	r3, [pc, #556]	; (8008f14 <scaraFlowDuty+0x510>)
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	f040 8201 	bne.w	80090f0 <scaraFlowDuty+0x6ec>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 8008cee:	4b89      	ldr	r3, [pc, #548]	; (8008f14 <scaraFlowDuty+0x510>)
 8008cf0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d174      	bne.n	8008de2 <scaraFlowDuty+0x3de>
			status1 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[0].lspb), time);
 8008cf8:	f107 0308 	add.w	r3, r7, #8
 8008cfc:	ed93 0b00 	vldr	d0, [r3]
 8008d00:	4885      	ldr	r0, [pc, #532]	; (8008f18 <scaraFlowDuty+0x514>)
 8008d02:	f000 fb13 	bl	800932c <scaraFlowLSPB1>
 8008d06:	4603      	mov	r3, r0
 8008d08:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[1].lspb), time);
 8008d0c:	f107 0308 	add.w	r3, r7, #8
 8008d10:	ed93 0b00 	vldr	d0, [r3]
 8008d14:	4881      	ldr	r0, [pc, #516]	; (8008f1c <scaraFlowDuty+0x518>)
 8008d16:	f000 fb09 	bl	800932c <scaraFlowLSPB1>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[2].lspb), time);
 8008d20:	f107 0308 	add.w	r3, r7, #8
 8008d24:	ed93 0b00 	vldr	d0, [r3]
 8008d28:	487d      	ldr	r0, [pc, #500]	; (8008f20 <scaraFlowDuty+0x51c>)
 8008d2a:	f000 faff 	bl	800932c <scaraFlowLSPB1>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[3].lspb), time);
 8008d34:	f107 0308 	add.w	r3, r7, #8
 8008d38:	ed93 0b00 	vldr	d0, [r3]
 8008d3c:	4879      	ldr	r0, [pc, #484]	; (8008f24 <scaraFlowDuty+0x520>)
 8008d3e:	f000 faf5 	bl	800932c <scaraFlowLSPB1>
 8008d42:	4603      	mov	r3, r0
 8008d44:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 8008d48:	4b72      	ldr	r3, [pc, #456]	; (8008f14 <scaraFlowDuty+0x510>)
 8008d4a:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 8008d4e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 8008d52:	4b70      	ldr	r3, [pc, #448]	; (8008f14 <scaraFlowDuty+0x510>)
 8008d54:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8008d58:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 8008d5c:	4b6d      	ldr	r3, [pc, #436]	; (8008f14 <scaraFlowDuty+0x510>)
 8008d5e:	f893 3720 	ldrb.w	r3, [r3, #1824]	; 0x720
 8008d62:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 8008d66:	4b6b      	ldr	r3, [pc, #428]	; (8008f14 <scaraFlowDuty+0x510>)
 8008d68:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
 8008d6c:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 8008d70:	4b68      	ldr	r3, [pc, #416]	; (8008f14 <scaraFlowDuty+0x510>)
 8008d72:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 8008d7e:	4b65      	ldr	r3, [pc, #404]	; (8008f14 <scaraFlowDuty+0x510>)
 8008d80:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8008d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d88:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 8008d8c:	4b61      	ldr	r3, [pc, #388]	; (8008f14 <scaraFlowDuty+0x510>)
 8008d8e:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 8008d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d96:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 8008d9a:	4b5e      	ldr	r3, [pc, #376]	; (8008f14 <scaraFlowDuty+0x510>)
 8008d9c:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8008da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da4:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 8008da8:	4b5a      	ldr	r3, [pc, #360]	; (8008f14 <scaraFlowDuty+0x510>)
 8008daa:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8008dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db2:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 8008db6:	4b57      	ldr	r3, [pc, #348]	; (8008f14 <scaraFlowDuty+0x510>)
 8008db8:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8008dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 8008dc4:	4b53      	ldr	r3, [pc, #332]	; (8008f14 <scaraFlowDuty+0x510>)
 8008dc6:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8008dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dce:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 8008dd2:	4b50      	ldr	r3, [pc, #320]	; (8008f14 <scaraFlowDuty+0x510>)
 8008dd4:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8008dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ddc:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 8008de0:	e07b      	b.n	8008eda <scaraFlowDuty+0x4d6>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 8008de2:	4b4c      	ldr	r3, [pc, #304]	; (8008f14 <scaraFlowDuty+0x510>)
 8008de4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d174      	bne.n	8008ed6 <scaraFlowDuty+0x4d2>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 8008dec:	f107 0308 	add.w	r3, r7, #8
 8008df0:	ed93 0b00 	vldr	d0, [r3]
 8008df4:	484c      	ldr	r0, [pc, #304]	; (8008f28 <scaraFlowDuty+0x524>)
 8008df6:	f000 fc2b 	bl	8009650 <scaraFLowScurve>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 8008e00:	f107 0308 	add.w	r3, r7, #8
 8008e04:	ed93 0b00 	vldr	d0, [r3]
 8008e08:	4848      	ldr	r0, [pc, #288]	; (8008f2c <scaraFlowDuty+0x528>)
 8008e0a:	f000 fc21 	bl	8009650 <scaraFLowScurve>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 8008e14:	f107 0308 	add.w	r3, r7, #8
 8008e18:	ed93 0b00 	vldr	d0, [r3]
 8008e1c:	4844      	ldr	r0, [pc, #272]	; (8008f30 <scaraFlowDuty+0x52c>)
 8008e1e:	f000 fc17 	bl	8009650 <scaraFLowScurve>
 8008e22:	4603      	mov	r3, r0
 8008e24:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 8008e28:	f107 0308 	add.w	r3, r7, #8
 8008e2c:	ed93 0b00 	vldr	d0, [r3]
 8008e30:	4840      	ldr	r0, [pc, #256]	; (8008f34 <scaraFlowDuty+0x530>)
 8008e32:	f000 fc0d 	bl	8009650 <scaraFLowScurve>
 8008e36:	4603      	mov	r3, r0
 8008e38:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8008e3c:	4b35      	ldr	r3, [pc, #212]	; (8008f14 <scaraFlowDuty+0x510>)
 8008e3e:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 8008e42:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 8008e46:	4b33      	ldr	r3, [pc, #204]	; (8008f14 <scaraFlowDuty+0x510>)
 8008e48:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 8008e4c:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 8008e50:	4b30      	ldr	r3, [pc, #192]	; (8008f14 <scaraFlowDuty+0x510>)
 8008e52:	f893 37a0 	ldrb.w	r3, [r3, #1952]	; 0x7a0
 8008e56:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 8008e5a:	4b2e      	ldr	r3, [pc, #184]	; (8008f14 <scaraFlowDuty+0x510>)
 8008e5c:	f893 3920 	ldrb.w	r3, [r3, #2336]	; 0x920
 8008e60:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 8008e64:	4b2b      	ldr	r3, [pc, #172]	; (8008f14 <scaraFlowDuty+0x510>)
 8008e66:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8008e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 8008e72:	4b28      	ldr	r3, [pc, #160]	; (8008f14 <scaraFlowDuty+0x510>)
 8008e74:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 8008e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7c:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 8008e80:	4b24      	ldr	r3, [pc, #144]	; (8008f14 <scaraFlowDuty+0x510>)
 8008e82:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8008e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8a:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 8008e8e:	4b21      	ldr	r3, [pc, #132]	; (8008f14 <scaraFlowDuty+0x510>)
 8008e90:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8008e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e98:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8

			v0 = myDUTY.joint.trajectory[0].scurve.v_current;
 8008e9c:	4b1d      	ldr	r3, [pc, #116]	; (8008f14 <scaraFlowDuty+0x510>)
 8008e9e:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 8008ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea6:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
 8008eaa:	4b1a      	ldr	r3, [pc, #104]	; (8008f14 <scaraFlowDuty+0x510>)
 8008eac:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 8008eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb4:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
 8008eb8:	4b16      	ldr	r3, [pc, #88]	; (8008f14 <scaraFlowDuty+0x510>)
 8008eba:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8008ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec2:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			v3 = myDUTY.joint.trajectory[3].scurve.v_current;
 8008ec6:	4b13      	ldr	r3, [pc, #76]	; (8008f14 <scaraFlowDuty+0x510>)
 8008ec8:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8008ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed0:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 8008ed4:	e001      	b.n	8008eda <scaraFlowDuty+0x4d6>

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8008ed6:	2305      	movs	r3, #5
 8008ed8:	e10d      	b.n	80090f6 <scaraFlowDuty+0x6f2>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8008eda:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d002      	beq.n	8008ee8 <scaraFlowDuty+0x4e4>
			return status1;
 8008ee2:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008ee6:	e106      	b.n	80090f6 <scaraFlowDuty+0x6f2>
		}
		if ( SCARA_STATUS_OK != status2) {
 8008ee8:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d002      	beq.n	8008ef6 <scaraFlowDuty+0x4f2>
			return status2;
 8008ef0:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008ef4:	e0ff      	b.n	80090f6 <scaraFlowDuty+0x6f2>
		}
		if ( SCARA_STATUS_OK != status3) {
 8008ef6:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d002      	beq.n	8008f04 <scaraFlowDuty+0x500>
			return status3;
 8008efe:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8008f02:	e0f8      	b.n	80090f6 <scaraFlowDuty+0x6f2>
		}
		if ( SCARA_STATUS_OK != status4) {
 8008f04:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d015      	beq.n	8008f38 <scaraFlowDuty+0x534>
			return status4;
 8008f0c:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 8008f10:	e0f1      	b.n	80090f6 <scaraFlowDuty+0x6f2>
 8008f12:	bf00      	nop
 8008f14:	2000ad30 	.word	0x2000ad30
 8008f18:	2000b150 	.word	0x2000b150
 8008f1c:	2000b2d0 	.word	0x2000b2d0
 8008f20:	2000b450 	.word	0x2000b450
 8008f24:	2000b5d0 	.word	0x2000b5d0
 8008f28:	2000b1d0 	.word	0x2000b1d0
 8008f2c:	2000b350 	.word	0x2000b350
 8008f30:	2000b4d0 	.word	0x2000b4d0
 8008f34:	2000b650 	.word	0x2000b650
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 8008f38:	4b73      	ldr	r3, [pc, #460]	; (8009108 <scaraFlowDuty+0x704>)
 8008f3a:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8008f3e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008f42:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7f7 faec 	bl	8000524 <__aeabi_i2d>
 8008f4c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8008f50:	f7f7 fb52 	bl	80005f8 <__aeabi_dmul>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	4620      	mov	r0, r4
 8008f5a:	4629      	mov	r1, r5
 8008f5c:	f7f7 f996 	bl	800028c <__adddf3>
 8008f60:	4602      	mov	r2, r0
 8008f62:	460b      	mov	r3, r1
 8008f64:	f107 0110 	add.w	r1, r7, #16
 8008f68:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 8008f6c:	4b66      	ldr	r3, [pc, #408]	; (8009108 <scaraFlowDuty+0x704>)
 8008f6e:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8008f72:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008f76:	f997 30d6 	ldrsb.w	r3, [r7, #214]	; 0xd6
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7f7 fad2 	bl	8000524 <__aeabi_i2d>
 8008f80:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8008f84:	f7f7 fb38 	bl	80005f8 <__aeabi_dmul>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	4629      	mov	r1, r5
 8008f90:	f7f7 f97c 	bl	800028c <__adddf3>
 8008f94:	4602      	mov	r2, r0
 8008f96:	460b      	mov	r3, r1
 8008f98:	f107 0110 	add.w	r1, r7, #16
 8008f9c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 8008fa0:	4b59      	ldr	r3, [pc, #356]	; (8009108 <scaraFlowDuty+0x704>)
 8008fa2:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8008fa6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008faa:	f997 30d5 	ldrsb.w	r3, [r7, #213]	; 0xd5
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7f7 fab8 	bl	8000524 <__aeabi_i2d>
 8008fb4:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8008fb8:	f7f7 fb1e 	bl	80005f8 <__aeabi_dmul>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	4629      	mov	r1, r5
 8008fc4:	f7f7 f962 	bl	800028c <__adddf3>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	460b      	mov	r3, r1
 8008fcc:	f107 0110 	add.w	r1, r7, #16
 8008fd0:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 8008fd4:	4b4c      	ldr	r3, [pc, #304]	; (8009108 <scaraFlowDuty+0x704>)
 8008fd6:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8008fda:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008fde:	f997 30d4 	ldrsb.w	r3, [r7, #212]	; 0xd4
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7f7 fa9e 	bl	8000524 <__aeabi_i2d>
 8008fe8:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8008fec:	f7f7 fb04 	bl	80005f8 <__aeabi_dmul>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	f7f7 f948 	bl	800028c <__adddf3>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	460b      	mov	r3, r1
 8009000:	f107 0110 	add.w	r1, r7, #16
 8009004:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 8009008:	f107 0110 	add.w	r1, r7, #16
 800900c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8009010:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 8009014:	f107 0110 	add.w	r1, r7, #16
 8009018:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800901c:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 8009020:	f107 0110 	add.w	r1, r7, #16
 8009024:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8009028:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 800902c:	f107 0110 	add.w	r1, r7, #16
 8009030:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8009034:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 8009038:	f107 0110 	add.w	r1, r7, #16
 800903c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8009040:	e9c1 2304 	strd	r2, r3, [r1, #16]
		positionCompute.q_theta2 = s1;
 8009044:	f107 0110 	add.w	r1, r7, #16
 8009048:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800904c:	e9c1 2306 	strd	r2, r3, [r1, #24]
		positionCompute.q_d3	 = s2;
 8009050:	f107 0110 	add.w	r1, r7, #16
 8009054:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8009058:	e9c1 2308 	strd	r2, r3, [r1, #32]
		positionCompute.q_theta4 = s3;
 800905c:	f107 0110 	add.w	r1, r7, #16
 8009060:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8009064:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 8009068:	4b27      	ldr	r3, [pc, #156]	; (8009108 <scaraFlowDuty+0x704>)
 800906a:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800906e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009072:	f107 0110 	add.w	r1, r7, #16
 8009076:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		positionCompute.t		= time;
 800907a:	f107 0110 	add.w	r1, r7, #16
 800907e:	f107 0308 	add.w	r3, r7, #8
 8009082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009086:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 800908a:	f107 0310 	add.w	r3, r7, #16
 800908e:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8009092:	f107 0310 	add.w	r3, r7, #16
 8009096:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 800909a:	f107 0310 	add.w	r3, r7, #16
 800909e:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 80090a2:	f107 0310 	add.w	r3, r7, #16
 80090a6:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 80090aa:	eeb0 3a44 	vmov.f32	s6, s8
 80090ae:	eef0 3a64 	vmov.f32	s7, s9
 80090b2:	eeb0 2a45 	vmov.f32	s4, s10
 80090b6:	eef0 2a65 	vmov.f32	s5, s11
 80090ba:	eeb0 1a46 	vmov.f32	s2, s12
 80090be:	eef0 1a66 	vmov.f32	s3, s13
 80090c2:	eeb0 0a47 	vmov.f32	s0, s14
 80090c6:	eef0 0a67 	vmov.f32	s1, s15
 80090ca:	f001 f995 	bl	800a3f8 <scaraCheckWorkSpace4>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d001      	beq.n	80090d8 <scaraFlowDuty+0x6d4>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80090d4:	2307      	movs	r3, #7
 80090d6:	e00e      	b.n	80090f6 <scaraFlowDuty+0x6f2>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 80090d8:	f107 0110 	add.w	r1, r7, #16
 80090dc:	1d3b      	adds	r3, r7, #4
 80090de:	22c0      	movs	r2, #192	; 0xc0
 80090e0:	6818      	ldr	r0, [r3, #0]
 80090e2:	f00c ffe5 	bl	80160b0 <memcpy>
		}
		kinematicForward(pos_Next);
 80090e6:	1d3b      	adds	r3, r7, #4
 80090e8:	6818      	ldr	r0, [r3, #0]
 80090ea:	f7fb f845 	bl	8004178 <kinematicForward>
 80090ee:	e001      	b.n	80090f4 <scaraFlowDuty+0x6f0>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 80090f0:	2302      	movs	r3, #2
 80090f2:	e000      	b.n	80090f6 <scaraFlowDuty+0x6f2>
	}

	return SCARA_STATUS_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80090fc:	46bd      	mov	sp, r7
 80090fe:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8009102:	b002      	add	sp, #8
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	2000ad30 	.word	0x2000ad30
 800910c:	00000000 	.word	0x00000000

08009110 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 8009110:	b5b0      	push	{r4, r5, r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8009122:	a33d      	add	r3, pc, #244	; (adr r3, 8009218 <scaraFlowLine+0x108>)
 8009124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009128:	f7f7 fcf6 	bl	8000b18 <__aeabi_dcmpgt>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d05a      	beq.n	80091e8 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800913e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009142:	f7f7 fa59 	bl	80005f8 <__aeabi_dmul>
 8009146:	4602      	mov	r2, r0
 8009148:	460b      	mov	r3, r1
 800914a:	4610      	mov	r0, r2
 800914c:	4619      	mov	r1, r3
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009154:	f7f7 fb7a 	bl	800084c <__aeabi_ddiv>
 8009158:	4602      	mov	r2, r0
 800915a:	460b      	mov	r3, r1
 800915c:	4620      	mov	r0, r4
 800915e:	4629      	mov	r1, r5
 8009160:	f7f7 f894 	bl	800028c <__adddf3>
 8009164:	4602      	mov	r2, r0
 8009166:	460b      	mov	r3, r1
 8009168:	68f9      	ldr	r1, [r7, #12]
 800916a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800917a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800917e:	f7f7 fa3b 	bl	80005f8 <__aeabi_dmul>
 8009182:	4602      	mov	r2, r0
 8009184:	460b      	mov	r3, r1
 8009186:	4610      	mov	r0, r2
 8009188:	4619      	mov	r1, r3
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009190:	f7f7 fb5c 	bl	800084c <__aeabi_ddiv>
 8009194:	4602      	mov	r2, r0
 8009196:	460b      	mov	r3, r1
 8009198:	4620      	mov	r0, r4
 800919a:	4629      	mov	r1, r5
 800919c:	f7f7 f876 	bl	800028c <__adddf3>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	68f9      	ldr	r1, [r7, #12]
 80091a6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80091b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ba:	f7f7 fa1d 	bl	80005f8 <__aeabi_dmul>
 80091be:	4602      	mov	r2, r0
 80091c0:	460b      	mov	r3, r1
 80091c2:	4610      	mov	r0, r2
 80091c4:	4619      	mov	r1, r3
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80091cc:	f7f7 fb3e 	bl	800084c <__aeabi_ddiv>
 80091d0:	4602      	mov	r2, r0
 80091d2:	460b      	mov	r3, r1
 80091d4:	4620      	mov	r0, r4
 80091d6:	4629      	mov	r1, r5
 80091d8:	f7f7 f858 	bl	800028c <__adddf3>
 80091dc:	4602      	mov	r2, r0
 80091de:	460b      	mov	r3, r1
 80091e0:	68f9      	ldr	r1, [r7, #12]
 80091e2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80091e6:	e011      	b.n	800920c <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80091ee:	68f9      	ldr	r1, [r7, #12]
 80091f0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		line->y_current = line->y1;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80091fa:	68f9      	ldr	r1, [r7, #12]
 80091fc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		line->z_current = line->z1;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8009206:	68f9      	ldr	r1, [r7, #12]
 8009208:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bdb0      	pop	{r4, r5, r7, pc}
 8009216:	bf00      	nop
 8009218:	47ae147b 	.word	0x47ae147b
 800921c:	3f847ae1 	.word	0x3f847ae1

08009220 <scaraFlowCircle>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 8009220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009224:	b086      	sub	sp, #24
 8009226:	af00      	add	r7, sp, #0
 8009228:	60f8      	str	r0, [r7, #12]
 800922a:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009234:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009238:	f7f7 fb08 	bl	800084c <__aeabi_ddiv>
 800923c:	4602      	mov	r2, r0
 800923e:	460b      	mov	r3, r1
 8009240:	e9c7 2304 	strd	r2, r3, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f993 3000 	ldrsb.w	r3, [r3]
 800925c:	4618      	mov	r0, r3
 800925e:	f7f7 f961 	bl	8000524 <__aeabi_i2d>
 8009262:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009266:	f7f7 f9c7 	bl	80005f8 <__aeabi_dmul>
 800926a:	4602      	mov	r2, r0
 800926c:	460b      	mov	r3, r1
 800926e:	4650      	mov	r0, sl
 8009270:	4659      	mov	r1, fp
 8009272:	f7f7 f80b 	bl	800028c <__adddf3>
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	ec43 2b17 	vmov	d7, r2, r3
 800927e:	eeb0 0a47 	vmov.f32	s0, s14
 8009282:	eef0 0a67 	vmov.f32	s1, s15
 8009286:	f011 fbf3 	bl	801aa70 <cos>
 800928a:	ec53 2b10 	vmov	r2, r3, d0
 800928e:	4640      	mov	r0, r8
 8009290:	4649      	mov	r1, r9
 8009292:	f7f7 f9b1 	bl	80005f8 <__aeabi_dmul>
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	4620      	mov	r0, r4
 800929c:	4629      	mov	r1, r5
 800929e:	f7f6 fff5 	bl	800028c <__adddf3>
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	68f9      	ldr	r1, [r7, #12]
 80092a8:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f993 3000 	ldrsb.w	r3, [r3]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7f7 f92d 	bl	8000524 <__aeabi_i2d>
 80092ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80092ce:	f7f7 f993 	bl	80005f8 <__aeabi_dmul>
 80092d2:	4602      	mov	r2, r0
 80092d4:	460b      	mov	r3, r1
 80092d6:	4650      	mov	r0, sl
 80092d8:	4659      	mov	r1, fp
 80092da:	f7f6 ffd7 	bl	800028c <__adddf3>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	ec43 2b17 	vmov	d7, r2, r3
 80092e6:	eeb0 0a47 	vmov.f32	s0, s14
 80092ea:	eef0 0a67 	vmov.f32	s1, s15
 80092ee:	f011 fc57 	bl	801aba0 <sin>
 80092f2:	ec53 2b10 	vmov	r2, r3, d0
 80092f6:	4640      	mov	r0, r8
 80092f8:	4649      	mov	r1, r9
 80092fa:	f7f7 f97d 	bl	80005f8 <__aeabi_dmul>
 80092fe:	4602      	mov	r2, r0
 8009300:	460b      	mov	r3, r1
 8009302:	4620      	mov	r0, r4
 8009304:	4629      	mov	r1, r5
 8009306:	f7f6 ffc1 	bl	800028c <__adddf3>
 800930a:	4602      	mov	r2, r0
 800930c:	460b      	mov	r3, r1
 800930e:	68f9      	ldr	r1, [r7, #12]
 8009310:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800931a:	68f9      	ldr	r1, [r7, #12]
 800931c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

	return SCARA_STATUS_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3718      	adds	r7, #24
 8009326:	46bd      	mov	sp, r7
 8009328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800932c <scaraFlowLSPB1>:
SCARA_StatusTypeDef	scaraFlowLSPB1	(Trajectory_LSPB_TypeDef *lspb, double time){
 800932c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009330:	b08a      	sub	sp, #40	; 0x28
 8009332:	af00      	add	r7, sp, #0
 8009334:	60f8      	str	r0, [r7, #12]
 8009336:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8009340:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800934a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8009354:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8009358:	f04f 0200 	mov.w	r2, #0
 800935c:	f04f 0300 	mov.w	r3, #0
 8009360:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009364:	f7f7 fbce 	bl	8000b04 <__aeabi_dcmpge>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d05b      	beq.n	8009426 <scaraFlowLSPB1+0xfa>
 800936e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009372:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009376:	f7f7 fbbb 	bl	8000af0 <__aeabi_dcmple>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d052      	beq.n	8009426 <scaraFlowLSPB1+0xfa>
		lspb->a_current		=	lspb->a_design;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8009386:	68f9      	ldr	r1, [r7, #12]
 8009388:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8009398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800939c:	f7f7 f92c 	bl	80005f8 <__aeabi_dmul>
 80093a0:	4602      	mov	r2, r0
 80093a2:	460b      	mov	r3, r1
 80093a4:	4620      	mov	r0, r4
 80093a6:	4629      	mov	r1, r5
 80093a8:	f7f6 ff70 	bl	800028c <__adddf3>
 80093ac:	4602      	mov	r2, r0
 80093ae:	460b      	mov	r3, r1
 80093b0:	68f9      	ldr	r1, [r7, #12]
 80093b2:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80093c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093c6:	f7f7 f917 	bl	80005f8 <__aeabi_dmul>
 80093ca:	4602      	mov	r2, r0
 80093cc:	460b      	mov	r3, r1
 80093ce:	4620      	mov	r0, r4
 80093d0:	4629      	mov	r1, r5
 80093d2:	f7f6 ff5b 	bl	800028c <__adddf3>
 80093d6:	4602      	mov	r2, r0
 80093d8:	460b      	mov	r3, r1
 80093da:	4614      	mov	r4, r2
 80093dc:	461d      	mov	r5, r3
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80093e4:	f04f 0200 	mov.w	r2, #0
 80093e8:	4b98      	ldr	r3, [pc, #608]	; (800964c <scaraFlowLSPB1+0x320>)
 80093ea:	f7f7 f905 	bl	80005f8 <__aeabi_dmul>
 80093ee:	4602      	mov	r2, r0
 80093f0:	460b      	mov	r3, r1
 80093f2:	4610      	mov	r0, r2
 80093f4:	4619      	mov	r1, r3
 80093f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093fa:	f7f7 f8fd 	bl	80005f8 <__aeabi_dmul>
 80093fe:	4602      	mov	r2, r0
 8009400:	460b      	mov	r3, r1
 8009402:	4610      	mov	r0, r2
 8009404:	4619      	mov	r1, r3
 8009406:	e9d7 2300 	ldrd	r2, r3, [r7]
 800940a:	f7f7 f8f5 	bl	80005f8 <__aeabi_dmul>
 800940e:	4602      	mov	r2, r0
 8009410:	460b      	mov	r3, r1
 8009412:	4620      	mov	r0, r4
 8009414:	4629      	mov	r1, r5
 8009416:	f7f6 ff39 	bl	800028c <__adddf3>
 800941a:	4602      	mov	r2, r0
 800941c:	460b      	mov	r3, r1
 800941e:	68f9      	ldr	r1, [r7, #12]
 8009420:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8009424:	e10b      	b.n	800963e <scaraFlowLSPB1+0x312>
	// Constant velocity
	} else if (ta <= time && time <= td) {
 8009426:	e9d7 2300 	ldrd	r2, r3, [r7]
 800942a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800942e:	f7f7 fb5f 	bl	8000af0 <__aeabi_dcmple>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d054      	beq.n	80094e2 <scaraFlowLSPB1+0x1b6>
 8009438:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800943c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009440:	f7f7 fb56 	bl	8000af0 <__aeabi_dcmple>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d04b      	beq.n	80094e2 <scaraFlowLSPB1+0x1b6>
		lspb->a_current		=	0;
 800944a:	68f9      	ldr	r1, [r7, #12]
 800944c:	f04f 0200 	mov.w	r2, #0
 8009450:	f04f 0300 	mov.w	r3, #0
 8009454:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800945e:	68f9      	ldr	r1, [r7, #12]
 8009460:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta*0.5 + lspb->v_design*(time - ta*0.5);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8009470:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009474:	f7f7 f8c0 	bl	80005f8 <__aeabi_dmul>
 8009478:	4602      	mov	r2, r0
 800947a:	460b      	mov	r3, r1
 800947c:	4610      	mov	r0, r2
 800947e:	4619      	mov	r1, r3
 8009480:	f04f 0200 	mov.w	r2, #0
 8009484:	4b71      	ldr	r3, [pc, #452]	; (800964c <scaraFlowLSPB1+0x320>)
 8009486:	f7f7 f8b7 	bl	80005f8 <__aeabi_dmul>
 800948a:	4602      	mov	r2, r0
 800948c:	460b      	mov	r3, r1
 800948e:	4620      	mov	r0, r4
 8009490:	4629      	mov	r1, r5
 8009492:	f7f6 fefb 	bl	800028c <__adddf3>
 8009496:	4602      	mov	r2, r0
 8009498:	460b      	mov	r3, r1
 800949a:	4690      	mov	r8, r2
 800949c:	4699      	mov	r9, r3
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80094a4:	f04f 0200 	mov.w	r2, #0
 80094a8:	4b68      	ldr	r3, [pc, #416]	; (800964c <scaraFlowLSPB1+0x320>)
 80094aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80094ae:	f7f7 f8a3 	bl	80005f8 <__aeabi_dmul>
 80094b2:	4602      	mov	r2, r0
 80094b4:	460b      	mov	r3, r1
 80094b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094ba:	f7f6 fee5 	bl	8000288 <__aeabi_dsub>
 80094be:	4602      	mov	r2, r0
 80094c0:	460b      	mov	r3, r1
 80094c2:	4620      	mov	r0, r4
 80094c4:	4629      	mov	r1, r5
 80094c6:	f7f7 f897 	bl	80005f8 <__aeabi_dmul>
 80094ca:	4602      	mov	r2, r0
 80094cc:	460b      	mov	r3, r1
 80094ce:	4640      	mov	r0, r8
 80094d0:	4649      	mov	r1, r9
 80094d2:	f7f6 fedb 	bl	800028c <__adddf3>
 80094d6:	4602      	mov	r2, r0
 80094d8:	460b      	mov	r3, r1
 80094da:	68f9      	ldr	r1, [r7, #12]
 80094dc:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 80094e0:	e0ad      	b.n	800963e <scaraFlowLSPB1+0x312>
	// Decelerate
	} else if (td <= time && time <= tf) {
 80094e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80094ea:	f7f7 fb01 	bl	8000af0 <__aeabi_dcmple>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f000 8090 	beq.w	8009616 <scaraFlowLSPB1+0x2ea>
 80094f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80094fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094fe:	f7f7 faf7 	bl	8000af0 <__aeabi_dcmple>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	f000 8086 	beq.w	8009616 <scaraFlowLSPB1+0x2ea>
		lspb->a_current		=	-lspb->a_design;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8009510:	4614      	mov	r4, r2
 8009512:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v_design + lspb->a_design*(td - time);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8009528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800952c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009530:	f7f6 feaa 	bl	8000288 <__aeabi_dsub>
 8009534:	4602      	mov	r2, r0
 8009536:	460b      	mov	r3, r1
 8009538:	4640      	mov	r0, r8
 800953a:	4649      	mov	r1, r9
 800953c:	f7f7 f85c 	bl	80005f8 <__aeabi_dmul>
 8009540:	4602      	mov	r2, r0
 8009542:	460b      	mov	r3, r1
 8009544:	4620      	mov	r0, r4
 8009546:	4629      	mov	r1, r5
 8009548:	f7f6 fea0 	bl	800028c <__adddf3>
 800954c:	4602      	mov	r2, r0
 800954e:	460b      	mov	r3, r1
 8009550:	68f9      	ldr	r1, [r7, #12]
 8009552:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8009562:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009566:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800956a:	f7f6 fe8d 	bl	8000288 <__aeabi_dsub>
 800956e:	4602      	mov	r2, r0
 8009570:	460b      	mov	r3, r1
 8009572:	4640      	mov	r0, r8
 8009574:	4649      	mov	r1, r9
 8009576:	f7f7 f83f 	bl	80005f8 <__aeabi_dmul>
 800957a:	4602      	mov	r2, r0
 800957c:	460b      	mov	r3, r1
 800957e:	4620      	mov	r0, r4
 8009580:	4629      	mov	r1, r5
 8009582:	f7f6 fe81 	bl	8000288 <__aeabi_dsub>
 8009586:	4602      	mov	r2, r0
 8009588:	460b      	mov	r3, r1
 800958a:	4614      	mov	r4, r2
 800958c:	461d      	mov	r5, r3
								- (lspb->v_lim - lspb->v0)*(tf - time)*(tf - time)/(2*ta);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800959a:	f7f6 fe75 	bl	8000288 <__aeabi_dsub>
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
 80095a2:	4690      	mov	r8, r2
 80095a4:	4699      	mov	r9, r3
 80095a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095aa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80095ae:	f7f6 fe6b 	bl	8000288 <__aeabi_dsub>
 80095b2:	4602      	mov	r2, r0
 80095b4:	460b      	mov	r3, r1
 80095b6:	4640      	mov	r0, r8
 80095b8:	4649      	mov	r1, r9
 80095ba:	f7f7 f81d 	bl	80005f8 <__aeabi_dmul>
 80095be:	4602      	mov	r2, r0
 80095c0:	460b      	mov	r3, r1
 80095c2:	4690      	mov	r8, r2
 80095c4:	4699      	mov	r9, r3
 80095c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095ca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80095ce:	f7f6 fe5b 	bl	8000288 <__aeabi_dsub>
 80095d2:	4602      	mov	r2, r0
 80095d4:	460b      	mov	r3, r1
 80095d6:	4640      	mov	r0, r8
 80095d8:	4649      	mov	r1, r9
 80095da:	f7f7 f80d 	bl	80005f8 <__aeabi_dmul>
 80095de:	4602      	mov	r2, r0
 80095e0:	460b      	mov	r3, r1
 80095e2:	4690      	mov	r8, r2
 80095e4:	4699      	mov	r9, r3
 80095e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80095ea:	4602      	mov	r2, r0
 80095ec:	460b      	mov	r3, r1
 80095ee:	f7f6 fe4d 	bl	800028c <__adddf3>
 80095f2:	4602      	mov	r2, r0
 80095f4:	460b      	mov	r3, r1
 80095f6:	4640      	mov	r0, r8
 80095f8:	4649      	mov	r1, r9
 80095fa:	f7f7 f927 	bl	800084c <__aeabi_ddiv>
 80095fe:	4602      	mov	r2, r0
 8009600:	460b      	mov	r3, r1
 8009602:	4620      	mov	r0, r4
 8009604:	4629      	mov	r1, r5
 8009606:	f7f6 fe3f 	bl	8000288 <__aeabi_dsub>
 800960a:	4602      	mov	r2, r0
 800960c:	460b      	mov	r3, r1
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 800960e:	68f9      	ldr	r1, [r7, #12]
 8009610:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8009614:	e013      	b.n	800963e <scaraFlowLSPB1+0x312>
	} else {
		lspb->a_current 	=	0;
 8009616:	68f9      	ldr	r1, [r7, #12]
 8009618:	f04f 0200 	mov.w	r2, #0
 800961c:	f04f 0300 	mov.w	r3, #0
 8009620:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	0;
 8009624:	68f9      	ldr	r1, [r7, #12]
 8009626:	f04f 0200 	mov.w	r2, #0
 800962a:	f04f 0300 	mov.w	r3, #0
 800962e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8009638:	68f9      	ldr	r1, [r7, #12]
 800963a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 800963e:	2300      	movs	r3, #0
}
 8009640:	4618      	mov	r0, r3
 8009642:	3728      	adds	r7, #40	; 0x28
 8009644:	46bd      	mov	sp, r7
 8009646:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800964a:	bf00      	nop
 800964c:	3fe00000 	.word	0x3fe00000

08009650 <scaraFLowScurve>:
	return SCARA_STATUS_OK;
}


/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, double time) {
 8009650:	b5b0      	push	{r4, r5, r7, lr}
 8009652:	b092      	sub	sp, #72	; 0x48
 8009654:	af00      	add	r7, sp, #0
 8009656:	6278      	str	r0, [r7, #36]	; 0x24
 8009658:	ed87 0b06 	vstr	d0, [r7, #24]
	double j_max, tm, tc, t;

	j_max = scurve->j_max;
 800965c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009662:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	tm	  = scurve->Tm;
 8009666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009668:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800966c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	tc	  = scurve->Tc;
 8009670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009672:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8009676:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	 // SCURVE 4 PHASE: tc = 0;
	 if ( 4 == scurve->num_of_phase) {
 800967a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009680:	2b04      	cmp	r3, #4
 8009682:	f040 8313 	bne.w	8009cac <scaraFLowScurve+0x65c>
		 // Phase 1
		 if ( (0.0f <= time) && ( time < tm)) {
 8009686:	f04f 0200 	mov.w	r2, #0
 800968a:	f04f 0300 	mov.w	r3, #0
 800968e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009692:	f7f7 fa37 	bl	8000b04 <__aeabi_dcmpge>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d059      	beq.n	8009750 <scaraFLowScurve+0x100>
 800969c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80096a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80096a4:	f7f7 fa1a 	bl	8000adc <__aeabi_dcmplt>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d050      	beq.n	8009750 <scaraFLowScurve+0x100>
			 t = time;
 80096ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80096b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 80096b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80096ba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80096be:	f7f6 ff9b 	bl	80005f8 <__aeabi_dmul>
 80096c2:	4602      	mov	r2, r0
 80096c4:	460b      	mov	r3, r1
 80096c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80096c8:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 80096cc:	f04f 0200 	mov.w	r2, #0
 80096d0:	4b92      	ldr	r3, [pc, #584]	; (800991c <scaraFLowScurve+0x2cc>)
 80096d2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80096d6:	f7f6 ff8f 	bl	80005f8 <__aeabi_dmul>
 80096da:	4602      	mov	r2, r0
 80096dc:	460b      	mov	r3, r1
 80096de:	4610      	mov	r0, r2
 80096e0:	4619      	mov	r1, r3
 80096e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80096e6:	f7f6 ff87 	bl	80005f8 <__aeabi_dmul>
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	4610      	mov	r0, r2
 80096f0:	4619      	mov	r1, r3
 80096f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80096f6:	f7f6 ff7f 	bl	80005f8 <__aeabi_dmul>
 80096fa:	4602      	mov	r2, r0
 80096fc:	460b      	mov	r3, r1
 80096fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009700:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 8009704:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009708:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800970c:	f7f6 ff74 	bl	80005f8 <__aeabi_dmul>
 8009710:	4602      	mov	r2, r0
 8009712:	460b      	mov	r3, r1
 8009714:	4610      	mov	r0, r2
 8009716:	4619      	mov	r1, r3
 8009718:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800971c:	f7f6 ff6c 	bl	80005f8 <__aeabi_dmul>
 8009720:	4602      	mov	r2, r0
 8009722:	460b      	mov	r3, r1
 8009724:	4610      	mov	r0, r2
 8009726:	4619      	mov	r1, r3
 8009728:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800972c:	f7f6 ff64 	bl	80005f8 <__aeabi_dmul>
 8009730:	4602      	mov	r2, r0
 8009732:	460b      	mov	r3, r1
 8009734:	4610      	mov	r0, r2
 8009736:	4619      	mov	r1, r3
 8009738:	f04f 0200 	mov.w	r2, #0
 800973c:	4b78      	ldr	r3, [pc, #480]	; (8009920 <scaraFLowScurve+0x2d0>)
 800973e:	f7f7 f885 	bl	800084c <__aeabi_ddiv>
 8009742:	4602      	mov	r2, r0
 8009744:	460b      	mov	r3, r1
 8009746:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009748:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 800974c:	f000 be44 	b.w	800a3d8 <scaraFLowScurve+0xd88>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8009750:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009754:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009758:	f7f7 f9ca 	bl	8000af0 <__aeabi_dcmple>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	f000 80e0 	beq.w	8009924 <scaraFLowScurve+0x2d4>
 8009764:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009768:	4602      	mov	r2, r0
 800976a:	460b      	mov	r3, r1
 800976c:	f7f6 fd8e 	bl	800028c <__adddf3>
 8009770:	4602      	mov	r2, r0
 8009772:	460b      	mov	r3, r1
 8009774:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009778:	f7f7 f9b0 	bl	8000adc <__aeabi_dcmplt>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	f000 80d0 	beq.w	8009924 <scaraFLowScurve+0x2d4>
			 t = time - tm;
 8009784:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009788:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800978c:	f7f6 fd7c 	bl	8000288 <__aeabi_dsub>
 8009790:	4602      	mov	r2, r0
 8009792:	460b      	mov	r3, r1
 8009794:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8009798:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800979c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80097a0:	f7f6 ff2a 	bl	80005f8 <__aeabi_dmul>
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	4614      	mov	r4, r2
 80097aa:	461d      	mov	r5, r3
 80097ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097b0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80097b4:	f7f6 ff20 	bl	80005f8 <__aeabi_dmul>
 80097b8:	4602      	mov	r2, r0
 80097ba:	460b      	mov	r3, r1
 80097bc:	4620      	mov	r0, r4
 80097be:	4629      	mov	r1, r5
 80097c0:	f7f6 fd62 	bl	8000288 <__aeabi_dsub>
 80097c4:	4602      	mov	r2, r0
 80097c6:	460b      	mov	r3, r1
 80097c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097ca:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 80097ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d0:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 80097d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80097d8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80097dc:	f7f6 ff0c 	bl	80005f8 <__aeabi_dmul>
 80097e0:	4602      	mov	r2, r0
 80097e2:	460b      	mov	r3, r1
 80097e4:	4610      	mov	r0, r2
 80097e6:	4619      	mov	r1, r3
 80097e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097ec:	f7f6 ff04 	bl	80005f8 <__aeabi_dmul>
 80097f0:	4602      	mov	r2, r0
 80097f2:	460b      	mov	r3, r1
 80097f4:	4620      	mov	r0, r4
 80097f6:	4629      	mov	r1, r5
 80097f8:	f7f6 fd48 	bl	800028c <__adddf3>
 80097fc:	4602      	mov	r2, r0
 80097fe:	460b      	mov	r3, r1
 8009800:	4614      	mov	r4, r2
 8009802:	461d      	mov	r5, r3
 8009804:	f04f 0200 	mov.w	r2, #0
 8009808:	4b44      	ldr	r3, [pc, #272]	; (800991c <scaraFLowScurve+0x2cc>)
 800980a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800980e:	f7f6 fef3 	bl	80005f8 <__aeabi_dmul>
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	4610      	mov	r0, r2
 8009818:	4619      	mov	r1, r3
 800981a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800981e:	f7f6 feeb 	bl	80005f8 <__aeabi_dmul>
 8009822:	4602      	mov	r2, r0
 8009824:	460b      	mov	r3, r1
 8009826:	4610      	mov	r0, r2
 8009828:	4619      	mov	r1, r3
 800982a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800982e:	f7f6 fee3 	bl	80005f8 <__aeabi_dmul>
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	4620      	mov	r0, r4
 8009838:	4629      	mov	r1, r5
 800983a:	f7f6 fd25 	bl	8000288 <__aeabi_dsub>
 800983e:	4602      	mov	r2, r0
 8009840:	460b      	mov	r3, r1
 8009842:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009844:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8009848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984a:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 800984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009850:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8009854:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009858:	f7f6 fece 	bl	80005f8 <__aeabi_dmul>
 800985c:	4602      	mov	r2, r0
 800985e:	460b      	mov	r3, r1
 8009860:	4620      	mov	r0, r4
 8009862:	4629      	mov	r1, r5
 8009864:	f7f6 fd12 	bl	800028c <__adddf3>
 8009868:	4602      	mov	r2, r0
 800986a:	460b      	mov	r3, r1
 800986c:	4614      	mov	r4, r2
 800986e:	461d      	mov	r5, r3
 8009870:	f04f 0200 	mov.w	r2, #0
 8009874:	4b29      	ldr	r3, [pc, #164]	; (800991c <scaraFLowScurve+0x2cc>)
 8009876:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800987a:	f7f6 febd 	bl	80005f8 <__aeabi_dmul>
 800987e:	4602      	mov	r2, r0
 8009880:	460b      	mov	r3, r1
 8009882:	4610      	mov	r0, r2
 8009884:	4619      	mov	r1, r3
 8009886:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800988a:	f7f6 feb5 	bl	80005f8 <__aeabi_dmul>
 800988e:	4602      	mov	r2, r0
 8009890:	460b      	mov	r3, r1
 8009892:	4610      	mov	r0, r2
 8009894:	4619      	mov	r1, r3
 8009896:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800989a:	f7f6 fead 	bl	80005f8 <__aeabi_dmul>
 800989e:	4602      	mov	r2, r0
 80098a0:	460b      	mov	r3, r1
 80098a2:	4610      	mov	r0, r2
 80098a4:	4619      	mov	r1, r3
 80098a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098aa:	f7f6 fea5 	bl	80005f8 <__aeabi_dmul>
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	4620      	mov	r0, r4
 80098b4:	4629      	mov	r1, r5
 80098b6:	f7f6 fce9 	bl	800028c <__adddf3>
 80098ba:	4602      	mov	r2, r0
 80098bc:	460b      	mov	r3, r1
 80098be:	4614      	mov	r4, r2
 80098c0:	461d      	mov	r5, r3
 80098c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098c6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80098ca:	f7f6 fe95 	bl	80005f8 <__aeabi_dmul>
 80098ce:	4602      	mov	r2, r0
 80098d0:	460b      	mov	r3, r1
 80098d2:	4610      	mov	r0, r2
 80098d4:	4619      	mov	r1, r3
 80098d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098da:	f7f6 fe8d 	bl	80005f8 <__aeabi_dmul>
 80098de:	4602      	mov	r2, r0
 80098e0:	460b      	mov	r3, r1
 80098e2:	4610      	mov	r0, r2
 80098e4:	4619      	mov	r1, r3
 80098e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098ea:	f7f6 fe85 	bl	80005f8 <__aeabi_dmul>
 80098ee:	4602      	mov	r2, r0
 80098f0:	460b      	mov	r3, r1
 80098f2:	4610      	mov	r0, r2
 80098f4:	4619      	mov	r1, r3
 80098f6:	f04f 0200 	mov.w	r2, #0
 80098fa:	4b09      	ldr	r3, [pc, #36]	; (8009920 <scaraFLowScurve+0x2d0>)
 80098fc:	f7f6 ffa6 	bl	800084c <__aeabi_ddiv>
 8009900:	4602      	mov	r2, r0
 8009902:	460b      	mov	r3, r1
 8009904:	4620      	mov	r0, r4
 8009906:	4629      	mov	r1, r5
 8009908:	f7f6 fcbe 	bl	8000288 <__aeabi_dsub>
 800990c:	4602      	mov	r2, r0
 800990e:	460b      	mov	r3, r1
 8009910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009912:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8009916:	f000 bd5f 	b.w	800a3d8 <scaraFLowScurve+0xd88>
 800991a:	bf00      	nop
 800991c:	3fe00000 	.word	0x3fe00000
 8009920:	40180000 	.word	0x40180000
		 // Phase 3: does not exist
		 // Phase 4
		 } else if ( ((2*tm) <= time) && ( time < (3*tm)) ) {
 8009924:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009928:	4602      	mov	r2, r0
 800992a:	460b      	mov	r3, r1
 800992c:	f7f6 fcae 	bl	800028c <__adddf3>
 8009930:	4602      	mov	r2, r0
 8009932:	460b      	mov	r3, r1
 8009934:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009938:	f7f7 f8e4 	bl	8000b04 <__aeabi_dcmpge>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	f000 809e 	beq.w	8009a80 <scaraFLowScurve+0x430>
 8009944:	f04f 0200 	mov.w	r2, #0
 8009948:	4b4a      	ldr	r3, [pc, #296]	; (8009a74 <scaraFLowScurve+0x424>)
 800994a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800994e:	f7f6 fe53 	bl	80005f8 <__aeabi_dmul>
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800995a:	f7f7 f8bf 	bl	8000adc <__aeabi_dcmplt>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	f000 808d 	beq.w	8009a80 <scaraFLowScurve+0x430>
			 t = time - 2*tm;
 8009966:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800996a:	4602      	mov	r2, r0
 800996c:	460b      	mov	r3, r1
 800996e:	f7f6 fc8d 	bl	800028c <__adddf3>
 8009972:	4602      	mov	r2, r0
 8009974:	460b      	mov	r3, r1
 8009976:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800997a:	f7f6 fc85 	bl	8000288 <__aeabi_dsub>
 800997e:	4602      	mov	r2, r0
 8009980:	460b      	mov	r3, r1
 8009982:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 8009986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009988:	613b      	str	r3, [r7, #16]
 800998a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800998c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009990:	617b      	str	r3, [r7, #20]
 8009992:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009996:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800999a:	f7f6 fe2d 	bl	80005f8 <__aeabi_dmul>
 800999e:	4602      	mov	r2, r0
 80099a0:	460b      	mov	r3, r1
 80099a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099a4:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2 - 0.5*j_max*t*t;
 80099a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099aa:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 80099ae:	f04f 0200 	mov.w	r2, #0
 80099b2:	4b31      	ldr	r3, [pc, #196]	; (8009a78 <scaraFLowScurve+0x428>)
 80099b4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80099b8:	f7f6 fe1e 	bl	80005f8 <__aeabi_dmul>
 80099bc:	4602      	mov	r2, r0
 80099be:	460b      	mov	r3, r1
 80099c0:	4610      	mov	r0, r2
 80099c2:	4619      	mov	r1, r3
 80099c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099c8:	f7f6 fe16 	bl	80005f8 <__aeabi_dmul>
 80099cc:	4602      	mov	r2, r0
 80099ce:	460b      	mov	r3, r1
 80099d0:	4610      	mov	r0, r2
 80099d2:	4619      	mov	r1, r3
 80099d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099d8:	f7f6 fe0e 	bl	80005f8 <__aeabi_dmul>
 80099dc:	4602      	mov	r2, r0
 80099de:	460b      	mov	r3, r1
 80099e0:	4620      	mov	r0, r4
 80099e2:	4629      	mov	r1, r5
 80099e4:	f7f6 fc50 	bl	8000288 <__aeabi_dsub>
 80099e8:	4602      	mov	r2, r0
 80099ea:	460b      	mov	r3, r1
 80099ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099ee:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t - j_max*t*t*t/6;
 80099f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f4:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 80099f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fa:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80099fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a02:	f7f6 fdf9 	bl	80005f8 <__aeabi_dmul>
 8009a06:	4602      	mov	r2, r0
 8009a08:	460b      	mov	r3, r1
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	4629      	mov	r1, r5
 8009a0e:	f7f6 fc3d 	bl	800028c <__adddf3>
 8009a12:	4602      	mov	r2, r0
 8009a14:	460b      	mov	r3, r1
 8009a16:	4614      	mov	r4, r2
 8009a18:	461d      	mov	r5, r3
 8009a1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a1e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009a22:	f7f6 fde9 	bl	80005f8 <__aeabi_dmul>
 8009a26:	4602      	mov	r2, r0
 8009a28:	460b      	mov	r3, r1
 8009a2a:	4610      	mov	r0, r2
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a32:	f7f6 fde1 	bl	80005f8 <__aeabi_dmul>
 8009a36:	4602      	mov	r2, r0
 8009a38:	460b      	mov	r3, r1
 8009a3a:	4610      	mov	r0, r2
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a42:	f7f6 fdd9 	bl	80005f8 <__aeabi_dmul>
 8009a46:	4602      	mov	r2, r0
 8009a48:	460b      	mov	r3, r1
 8009a4a:	4610      	mov	r0, r2
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	f04f 0200 	mov.w	r2, #0
 8009a52:	4b0a      	ldr	r3, [pc, #40]	; (8009a7c <scaraFLowScurve+0x42c>)
 8009a54:	f7f6 fefa 	bl	800084c <__aeabi_ddiv>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	4629      	mov	r1, r5
 8009a60:	f7f6 fc12 	bl	8000288 <__aeabi_dsub>
 8009a64:	4602      	mov	r2, r0
 8009a66:	460b      	mov	r3, r1
 8009a68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a6a:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8009a6e:	f000 bcb3 	b.w	800a3d8 <scaraFLowScurve+0xd88>
 8009a72:	bf00      	nop
 8009a74:	40080000 	.word	0x40080000
 8009a78:	3fe00000 	.word	0x3fe00000
 8009a7c:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm) <= time) && ( time < (4*tm)) ) {
 8009a80:	f04f 0200 	mov.w	r2, #0
 8009a84:	4b85      	ldr	r3, [pc, #532]	; (8009c9c <scaraFLowScurve+0x64c>)
 8009a86:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009a8a:	f7f6 fdb5 	bl	80005f8 <__aeabi_dmul>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	460b      	mov	r3, r1
 8009a92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009a96:	f7f7 f835 	bl	8000b04 <__aeabi_dcmpge>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 80e8 	beq.w	8009c72 <scaraFLowScurve+0x622>
 8009aa2:	f04f 0200 	mov.w	r2, #0
 8009aa6:	4b7e      	ldr	r3, [pc, #504]	; (8009ca0 <scaraFLowScurve+0x650>)
 8009aa8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009aac:	f7f6 fda4 	bl	80005f8 <__aeabi_dmul>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009ab8:	f7f7 f810 	bl	8000adc <__aeabi_dcmplt>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f000 80d7 	beq.w	8009c72 <scaraFLowScurve+0x622>
			 t = time - 3*tm;
 8009ac4:	f04f 0200 	mov.w	r2, #0
 8009ac8:	4b74      	ldr	r3, [pc, #464]	; (8009c9c <scaraFLowScurve+0x64c>)
 8009aca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009ace:	f7f6 fd93 	bl	80005f8 <__aeabi_dmul>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009ada:	f7f6 fbd5 	bl	8000288 <__aeabi_dsub>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 8009ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ae8:	60bb      	str	r3, [r7, #8]
 8009aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009aec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009af0:	60fb      	str	r3, [r7, #12]
 8009af2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009af6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009afa:	f7f6 fd7d 	bl	80005f8 <__aeabi_dmul>
 8009afe:	4602      	mov	r2, r0
 8009b00:	460b      	mov	r3, r1
 8009b02:	4614      	mov	r4, r2
 8009b04:	461d      	mov	r5, r3
 8009b06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b0a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009b0e:	f7f6 fd73 	bl	80005f8 <__aeabi_dmul>
 8009b12:	4602      	mov	r2, r0
 8009b14:	460b      	mov	r3, r1
 8009b16:	4620      	mov	r0, r4
 8009b18:	4629      	mov	r1, r5
 8009b1a:	f7f6 fbb7 	bl	800028c <__adddf3>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	460b      	mov	r3, r1
 8009b22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b24:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 8009b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2a:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8009b2e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009b32:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009b36:	f7f6 fd5f 	bl	80005f8 <__aeabi_dmul>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	4610      	mov	r0, r2
 8009b40:	4619      	mov	r1, r3
 8009b42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b46:	f7f6 fd57 	bl	80005f8 <__aeabi_dmul>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	4620      	mov	r0, r4
 8009b50:	4629      	mov	r1, r5
 8009b52:	f7f6 fb99 	bl	8000288 <__aeabi_dsub>
 8009b56:	4602      	mov	r2, r0
 8009b58:	460b      	mov	r3, r1
 8009b5a:	4614      	mov	r4, r2
 8009b5c:	461d      	mov	r5, r3
 8009b5e:	f04f 0200 	mov.w	r2, #0
 8009b62:	4b50      	ldr	r3, [pc, #320]	; (8009ca4 <scaraFLowScurve+0x654>)
 8009b64:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009b68:	f7f6 fd46 	bl	80005f8 <__aeabi_dmul>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	460b      	mov	r3, r1
 8009b70:	4610      	mov	r0, r2
 8009b72:	4619      	mov	r1, r3
 8009b74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b78:	f7f6 fd3e 	bl	80005f8 <__aeabi_dmul>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	460b      	mov	r3, r1
 8009b80:	4610      	mov	r0, r2
 8009b82:	4619      	mov	r1, r3
 8009b84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b88:	f7f6 fd36 	bl	80005f8 <__aeabi_dmul>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	4620      	mov	r0, r4
 8009b92:	4629      	mov	r1, r5
 8009b94:	f7f6 fb7a 	bl	800028c <__adddf3>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b9e:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba4:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8009bae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009bb2:	f7f6 fd21 	bl	80005f8 <__aeabi_dmul>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	460b      	mov	r3, r1
 8009bba:	4620      	mov	r0, r4
 8009bbc:	4629      	mov	r1, r5
 8009bbe:	f7f6 fb65 	bl	800028c <__adddf3>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	4614      	mov	r4, r2
 8009bc8:	461d      	mov	r5, r3
									- 0.5*j_max*tm*t*t
 8009bca:	f04f 0200 	mov.w	r2, #0
 8009bce:	4b35      	ldr	r3, [pc, #212]	; (8009ca4 <scaraFLowScurve+0x654>)
 8009bd0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009bd4:	f7f6 fd10 	bl	80005f8 <__aeabi_dmul>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	460b      	mov	r3, r1
 8009bdc:	4610      	mov	r0, r2
 8009bde:	4619      	mov	r1, r3
 8009be0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009be4:	f7f6 fd08 	bl	80005f8 <__aeabi_dmul>
 8009be8:	4602      	mov	r2, r0
 8009bea:	460b      	mov	r3, r1
 8009bec:	4610      	mov	r0, r2
 8009bee:	4619      	mov	r1, r3
 8009bf0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009bf4:	f7f6 fd00 	bl	80005f8 <__aeabi_dmul>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	4610      	mov	r0, r2
 8009bfe:	4619      	mov	r1, r3
 8009c00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c04:	f7f6 fcf8 	bl	80005f8 <__aeabi_dmul>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	4629      	mov	r1, r5
 8009c10:	f7f6 fb3a 	bl	8000288 <__aeabi_dsub>
 8009c14:	4602      	mov	r2, r0
 8009c16:	460b      	mov	r3, r1
 8009c18:	4614      	mov	r4, r2
 8009c1a:	461d      	mov	r5, r3
									+ j_max*t*t*t/6;
 8009c1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c20:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009c24:	f7f6 fce8 	bl	80005f8 <__aeabi_dmul>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	4610      	mov	r0, r2
 8009c2e:	4619      	mov	r1, r3
 8009c30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c34:	f7f6 fce0 	bl	80005f8 <__aeabi_dmul>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	4610      	mov	r0, r2
 8009c3e:	4619      	mov	r1, r3
 8009c40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c44:	f7f6 fcd8 	bl	80005f8 <__aeabi_dmul>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	4610      	mov	r0, r2
 8009c4e:	4619      	mov	r1, r3
 8009c50:	f04f 0200 	mov.w	r2, #0
 8009c54:	4b14      	ldr	r3, [pc, #80]	; (8009ca8 <scaraFLowScurve+0x658>)
 8009c56:	f7f6 fdf9 	bl	800084c <__aeabi_ddiv>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	4620      	mov	r0, r4
 8009c60:	4629      	mov	r1, r5
 8009c62:	f7f6 fb13 	bl	800028c <__adddf3>
 8009c66:	4602      	mov	r2, r0
 8009c68:	460b      	mov	r3, r1
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8009c6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c6c:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8009c70:	e3b2      	b.n	800a3d8 <scaraFLowScurve+0xd88>
		 } else {
			 scurve->a_current = 0;
 8009c72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c74:	f04f 0200 	mov.w	r2, #0
 8009c78:	f04f 0300 	mov.w	r3, #0
 8009c7c:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
			 scurve->v_current = 0;
 8009c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c82:	f04f 0200 	mov.w	r2, #0
 8009c86:	f04f 0300 	mov.w	r3, #0
 8009c8a:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c90:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8009c94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c96:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8009c9a:	e39d      	b.n	800a3d8 <scaraFLowScurve+0xd88>
 8009c9c:	40080000 	.word	0x40080000
 8009ca0:	40100000 	.word	0x40100000
 8009ca4:	3fe00000 	.word	0x3fe00000
 8009ca8:	40180000 	.word	0x40180000
		 }

	 // SCURVE 5 PHASE: tc > 0
	 } else if ( 5 == scurve->num_of_phase) {
 8009cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009cb2:	2b05      	cmp	r3, #5
 8009cb4:	f040 838e 	bne.w	800a3d4 <scaraFLowScurve+0xd84>
		 // Phase 1
		 if ( (0 <= time) && ( time < tm)) {
 8009cb8:	f04f 0200 	mov.w	r2, #0
 8009cbc:	f04f 0300 	mov.w	r3, #0
 8009cc0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009cc4:	f7f6 ff1e 	bl	8000b04 <__aeabi_dcmpge>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d058      	beq.n	8009d80 <scaraFLowScurve+0x730>
 8009cce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009cd2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009cd6:	f7f6 ff01 	bl	8000adc <__aeabi_dcmplt>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d04f      	beq.n	8009d80 <scaraFLowScurve+0x730>
			 t = time;
 8009ce0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ce4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 8009ce8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009cec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009cf0:	f7f6 fc82 	bl	80005f8 <__aeabi_dmul>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009cfa:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 8009cfe:	f04f 0200 	mov.w	r2, #0
 8009d02:	4b91      	ldr	r3, [pc, #580]	; (8009f48 <scaraFLowScurve+0x8f8>)
 8009d04:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009d08:	f7f6 fc76 	bl	80005f8 <__aeabi_dmul>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	460b      	mov	r3, r1
 8009d10:	4610      	mov	r0, r2
 8009d12:	4619      	mov	r1, r3
 8009d14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d18:	f7f6 fc6e 	bl	80005f8 <__aeabi_dmul>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	460b      	mov	r3, r1
 8009d20:	4610      	mov	r0, r2
 8009d22:	4619      	mov	r1, r3
 8009d24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d28:	f7f6 fc66 	bl	80005f8 <__aeabi_dmul>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	460b      	mov	r3, r1
 8009d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d32:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 8009d36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d3a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009d3e:	f7f6 fc5b 	bl	80005f8 <__aeabi_dmul>
 8009d42:	4602      	mov	r2, r0
 8009d44:	460b      	mov	r3, r1
 8009d46:	4610      	mov	r0, r2
 8009d48:	4619      	mov	r1, r3
 8009d4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d4e:	f7f6 fc53 	bl	80005f8 <__aeabi_dmul>
 8009d52:	4602      	mov	r2, r0
 8009d54:	460b      	mov	r3, r1
 8009d56:	4610      	mov	r0, r2
 8009d58:	4619      	mov	r1, r3
 8009d5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d5e:	f7f6 fc4b 	bl	80005f8 <__aeabi_dmul>
 8009d62:	4602      	mov	r2, r0
 8009d64:	460b      	mov	r3, r1
 8009d66:	4610      	mov	r0, r2
 8009d68:	4619      	mov	r1, r3
 8009d6a:	f04f 0200 	mov.w	r2, #0
 8009d6e:	4b77      	ldr	r3, [pc, #476]	; (8009f4c <scaraFLowScurve+0x8fc>)
 8009d70:	f7f6 fd6c 	bl	800084c <__aeabi_ddiv>
 8009d74:	4602      	mov	r2, r0
 8009d76:	460b      	mov	r3, r1
 8009d78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d7a:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8009d7e:	e32b      	b.n	800a3d8 <scaraFLowScurve+0xd88>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8009d80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d84:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009d88:	f7f6 feb2 	bl	8000af0 <__aeabi_dcmple>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	f000 80de 	beq.w	8009f50 <scaraFLowScurve+0x900>
 8009d94:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009d98:	4602      	mov	r2, r0
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	f7f6 fa76 	bl	800028c <__adddf3>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009da8:	f7f6 fe98 	bl	8000adc <__aeabi_dcmplt>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f000 80ce 	beq.w	8009f50 <scaraFLowScurve+0x900>
			 t = time - tm;
 8009db4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009db8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009dbc:	f7f6 fa64 	bl	8000288 <__aeabi_dsub>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8009dc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009dcc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009dd0:	f7f6 fc12 	bl	80005f8 <__aeabi_dmul>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	4614      	mov	r4, r2
 8009dda:	461d      	mov	r5, r3
 8009ddc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009de0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009de4:	f7f6 fc08 	bl	80005f8 <__aeabi_dmul>
 8009de8:	4602      	mov	r2, r0
 8009dea:	460b      	mov	r3, r1
 8009dec:	4620      	mov	r0, r4
 8009dee:	4629      	mov	r1, r5
 8009df0:	f7f6 fa4a 	bl	8000288 <__aeabi_dsub>
 8009df4:	4602      	mov	r2, r0
 8009df6:	460b      	mov	r3, r1
 8009df8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009dfa:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e00:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8009e04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009e08:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009e0c:	f7f6 fbf4 	bl	80005f8 <__aeabi_dmul>
 8009e10:	4602      	mov	r2, r0
 8009e12:	460b      	mov	r3, r1
 8009e14:	4610      	mov	r0, r2
 8009e16:	4619      	mov	r1, r3
 8009e18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e1c:	f7f6 fbec 	bl	80005f8 <__aeabi_dmul>
 8009e20:	4602      	mov	r2, r0
 8009e22:	460b      	mov	r3, r1
 8009e24:	4620      	mov	r0, r4
 8009e26:	4629      	mov	r1, r5
 8009e28:	f7f6 fa30 	bl	800028c <__adddf3>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	460b      	mov	r3, r1
 8009e30:	4614      	mov	r4, r2
 8009e32:	461d      	mov	r5, r3
 8009e34:	f04f 0200 	mov.w	r2, #0
 8009e38:	4b43      	ldr	r3, [pc, #268]	; (8009f48 <scaraFLowScurve+0x8f8>)
 8009e3a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009e3e:	f7f6 fbdb 	bl	80005f8 <__aeabi_dmul>
 8009e42:	4602      	mov	r2, r0
 8009e44:	460b      	mov	r3, r1
 8009e46:	4610      	mov	r0, r2
 8009e48:	4619      	mov	r1, r3
 8009e4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e4e:	f7f6 fbd3 	bl	80005f8 <__aeabi_dmul>
 8009e52:	4602      	mov	r2, r0
 8009e54:	460b      	mov	r3, r1
 8009e56:	4610      	mov	r0, r2
 8009e58:	4619      	mov	r1, r3
 8009e5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e5e:	f7f6 fbcb 	bl	80005f8 <__aeabi_dmul>
 8009e62:	4602      	mov	r2, r0
 8009e64:	460b      	mov	r3, r1
 8009e66:	4620      	mov	r0, r4
 8009e68:	4629      	mov	r1, r5
 8009e6a:	f7f6 fa0d 	bl	8000288 <__aeabi_dsub>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	460b      	mov	r3, r1
 8009e72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e74:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8009e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7a:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 8009e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e80:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8009e84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e88:	f7f6 fbb6 	bl	80005f8 <__aeabi_dmul>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	460b      	mov	r3, r1
 8009e90:	4620      	mov	r0, r4
 8009e92:	4629      	mov	r1, r5
 8009e94:	f7f6 f9fa 	bl	800028c <__adddf3>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	4614      	mov	r4, r2
 8009e9e:	461d      	mov	r5, r3
 8009ea0:	f04f 0200 	mov.w	r2, #0
 8009ea4:	4b28      	ldr	r3, [pc, #160]	; (8009f48 <scaraFLowScurve+0x8f8>)
 8009ea6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009eaa:	f7f6 fba5 	bl	80005f8 <__aeabi_dmul>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	4610      	mov	r0, r2
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009eba:	f7f6 fb9d 	bl	80005f8 <__aeabi_dmul>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	4610      	mov	r0, r2
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009eca:	f7f6 fb95 	bl	80005f8 <__aeabi_dmul>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	4610      	mov	r0, r2
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009eda:	f7f6 fb8d 	bl	80005f8 <__aeabi_dmul>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	4629      	mov	r1, r5
 8009ee6:	f7f6 f9d1 	bl	800028c <__adddf3>
 8009eea:	4602      	mov	r2, r0
 8009eec:	460b      	mov	r3, r1
 8009eee:	4614      	mov	r4, r2
 8009ef0:	461d      	mov	r5, r3
 8009ef2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ef6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009efa:	f7f6 fb7d 	bl	80005f8 <__aeabi_dmul>
 8009efe:	4602      	mov	r2, r0
 8009f00:	460b      	mov	r3, r1
 8009f02:	4610      	mov	r0, r2
 8009f04:	4619      	mov	r1, r3
 8009f06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f0a:	f7f6 fb75 	bl	80005f8 <__aeabi_dmul>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
 8009f12:	4610      	mov	r0, r2
 8009f14:	4619      	mov	r1, r3
 8009f16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f1a:	f7f6 fb6d 	bl	80005f8 <__aeabi_dmul>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	460b      	mov	r3, r1
 8009f22:	4610      	mov	r0, r2
 8009f24:	4619      	mov	r1, r3
 8009f26:	f04f 0200 	mov.w	r2, #0
 8009f2a:	4b08      	ldr	r3, [pc, #32]	; (8009f4c <scaraFLowScurve+0x8fc>)
 8009f2c:	f7f6 fc8e 	bl	800084c <__aeabi_ddiv>
 8009f30:	4602      	mov	r2, r0
 8009f32:	460b      	mov	r3, r1
 8009f34:	4620      	mov	r0, r4
 8009f36:	4629      	mov	r1, r5
 8009f38:	f7f6 f9a6 	bl	8000288 <__aeabi_dsub>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f42:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8009f46:	e247      	b.n	800a3d8 <scaraFLowScurve+0xd88>
 8009f48:	3fe00000 	.word	0x3fe00000
 8009f4c:	40180000 	.word	0x40180000
		 // Phase 3
		 } else if ( ((2*tm) <= time) && ( time < (2*tm + tc)) ) {
 8009f50:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009f54:	4602      	mov	r2, r0
 8009f56:	460b      	mov	r3, r1
 8009f58:	f7f6 f998 	bl	800028c <__adddf3>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009f64:	f7f6 fdce 	bl	8000b04 <__aeabi_dcmpge>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d049      	beq.n	800a002 <scaraFLowScurve+0x9b2>
 8009f6e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	f7f6 f989 	bl	800028c <__adddf3>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	4610      	mov	r0, r2
 8009f80:	4619      	mov	r1, r3
 8009f82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009f86:	f7f6 f981 	bl	800028c <__adddf3>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009f92:	f7f6 fda3 	bl	8000adc <__aeabi_dcmplt>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d032      	beq.n	800a002 <scaraFLowScurve+0x9b2>
			 t = time - 2*tm;
 8009f9c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	f7f6 f972 	bl	800028c <__adddf3>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	460b      	mov	r3, r1
 8009fac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009fb0:	f7f6 f96a 	bl	8000288 <__aeabi_dsub>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current 	=	0;
 8009fbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fbe:	f04f 0200 	mov.w	r2, #0
 8009fc2:	f04f 0300 	mov.w	r3, #0
 8009fc6:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2;
 8009fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fcc:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8009fd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fd2:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t;
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd8:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fde:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8009fe2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009fe6:	f7f6 fb07 	bl	80005f8 <__aeabi_dmul>
 8009fea:	4602      	mov	r2, r0
 8009fec:	460b      	mov	r3, r1
 8009fee:	4620      	mov	r0, r4
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	f7f6 f94b 	bl	800028c <__adddf3>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ffc:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 800a000:	e1ea      	b.n	800a3d8 <scaraFLowScurve+0xd88>
		 // Phase 4
		 } else if ( ((2*tm + tc) <= time) && ( time < (3*tm + tc)) ) {
 800a002:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a006:	4602      	mov	r2, r0
 800a008:	460b      	mov	r3, r1
 800a00a:	f7f6 f93f 	bl	800028c <__adddf3>
 800a00e:	4602      	mov	r2, r0
 800a010:	460b      	mov	r3, r1
 800a012:	4610      	mov	r0, r2
 800a014:	4619      	mov	r1, r3
 800a016:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a01a:	f7f6 f937 	bl	800028c <__adddf3>
 800a01e:	4602      	mov	r2, r0
 800a020:	460b      	mov	r3, r1
 800a022:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a026:	f7f6 fd6d 	bl	8000b04 <__aeabi_dcmpge>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f000 80ad 	beq.w	800a18c <scaraFLowScurve+0xb3c>
 800a032:	f04f 0200 	mov.w	r2, #0
 800a036:	4b52      	ldr	r3, [pc, #328]	; (800a180 <scaraFLowScurve+0xb30>)
 800a038:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a03c:	f7f6 fadc 	bl	80005f8 <__aeabi_dmul>
 800a040:	4602      	mov	r2, r0
 800a042:	460b      	mov	r3, r1
 800a044:	4610      	mov	r0, r2
 800a046:	4619      	mov	r1, r3
 800a048:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a04c:	f7f6 f91e 	bl	800028c <__adddf3>
 800a050:	4602      	mov	r2, r0
 800a052:	460b      	mov	r3, r1
 800a054:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a058:	f7f6 fd40 	bl	8000adc <__aeabi_dcmplt>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	f000 8094 	beq.w	800a18c <scaraFLowScurve+0xb3c>
			 t = time - (2*tm + tc);
 800a064:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a068:	4602      	mov	r2, r0
 800a06a:	460b      	mov	r3, r1
 800a06c:	f7f6 f90e 	bl	800028c <__adddf3>
 800a070:	4602      	mov	r2, r0
 800a072:	460b      	mov	r3, r1
 800a074:	4610      	mov	r0, r2
 800a076:	4619      	mov	r1, r3
 800a078:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a07c:	f7f6 f906 	bl	800028c <__adddf3>
 800a080:	4602      	mov	r2, r0
 800a082:	460b      	mov	r3, r1
 800a084:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a088:	f7f6 f8fe 	bl	8000288 <__aeabi_dsub>
 800a08c:	4602      	mov	r2, r0
 800a08e:	460b      	mov	r3, r1
 800a090:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 800a094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a096:	603b      	str	r3, [r7, #0]
 800a098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a09a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a09e:	607b      	str	r3, [r7, #4]
 800a0a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a0a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0a8:	f7f6 faa6 	bl	80005f8 <__aeabi_dmul>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a0b2:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_3 - 0.5*j_max*t*t;
 800a0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b8:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 800a0bc:	f04f 0200 	mov.w	r2, #0
 800a0c0:	4b30      	ldr	r3, [pc, #192]	; (800a184 <scaraFLowScurve+0xb34>)
 800a0c2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a0c6:	f7f6 fa97 	bl	80005f8 <__aeabi_dmul>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a0d6:	f7f6 fa8f 	bl	80005f8 <__aeabi_dmul>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	460b      	mov	r3, r1
 800a0de:	4610      	mov	r0, r2
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a0e6:	f7f6 fa87 	bl	80005f8 <__aeabi_dmul>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	f7f6 f8c9 	bl	8000288 <__aeabi_dsub>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a0fc:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_3 + scurve->v_3*t - j_max*t*t*t/6;
 800a100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a102:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 800a106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a108:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 800a10c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a110:	f7f6 fa72 	bl	80005f8 <__aeabi_dmul>
 800a114:	4602      	mov	r2, r0
 800a116:	460b      	mov	r3, r1
 800a118:	4620      	mov	r0, r4
 800a11a:	4629      	mov	r1, r5
 800a11c:	f7f6 f8b6 	bl	800028c <__adddf3>
 800a120:	4602      	mov	r2, r0
 800a122:	460b      	mov	r3, r1
 800a124:	4614      	mov	r4, r2
 800a126:	461d      	mov	r5, r3
 800a128:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a12c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a130:	f7f6 fa62 	bl	80005f8 <__aeabi_dmul>
 800a134:	4602      	mov	r2, r0
 800a136:	460b      	mov	r3, r1
 800a138:	4610      	mov	r0, r2
 800a13a:	4619      	mov	r1, r3
 800a13c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a140:	f7f6 fa5a 	bl	80005f8 <__aeabi_dmul>
 800a144:	4602      	mov	r2, r0
 800a146:	460b      	mov	r3, r1
 800a148:	4610      	mov	r0, r2
 800a14a:	4619      	mov	r1, r3
 800a14c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a150:	f7f6 fa52 	bl	80005f8 <__aeabi_dmul>
 800a154:	4602      	mov	r2, r0
 800a156:	460b      	mov	r3, r1
 800a158:	4610      	mov	r0, r2
 800a15a:	4619      	mov	r1, r3
 800a15c:	f04f 0200 	mov.w	r2, #0
 800a160:	4b09      	ldr	r3, [pc, #36]	; (800a188 <scaraFLowScurve+0xb38>)
 800a162:	f7f6 fb73 	bl	800084c <__aeabi_ddiv>
 800a166:	4602      	mov	r2, r0
 800a168:	460b      	mov	r3, r1
 800a16a:	4620      	mov	r0, r4
 800a16c:	4629      	mov	r1, r5
 800a16e:	f7f6 f88b 	bl	8000288 <__aeabi_dsub>
 800a172:	4602      	mov	r2, r0
 800a174:	460b      	mov	r3, r1
 800a176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a178:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 800a17c:	e12c      	b.n	800a3d8 <scaraFLowScurve+0xd88>
 800a17e:	bf00      	nop
 800a180:	40080000 	.word	0x40080000
 800a184:	3fe00000 	.word	0x3fe00000
 800a188:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm + tc) <= time) && ( time < (4*tm + tc)) ) {
 800a18c:	f04f 0200 	mov.w	r2, #0
 800a190:	4b94      	ldr	r3, [pc, #592]	; (800a3e4 <scaraFLowScurve+0xd94>)
 800a192:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a196:	f7f6 fa2f 	bl	80005f8 <__aeabi_dmul>
 800a19a:	4602      	mov	r2, r0
 800a19c:	460b      	mov	r3, r1
 800a19e:	4610      	mov	r0, r2
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a1a6:	f7f6 f871 	bl	800028c <__adddf3>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a1b2:	f7f6 fca7 	bl	8000b04 <__aeabi_dcmpge>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 80f6 	beq.w	800a3aa <scaraFLowScurve+0xd5a>
 800a1be:	f04f 0200 	mov.w	r2, #0
 800a1c2:	4b89      	ldr	r3, [pc, #548]	; (800a3e8 <scaraFLowScurve+0xd98>)
 800a1c4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a1c8:	f7f6 fa16 	bl	80005f8 <__aeabi_dmul>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	4610      	mov	r0, r2
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a1d8:	f7f6 f858 	bl	800028c <__adddf3>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	460b      	mov	r3, r1
 800a1e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a1e4:	f7f6 fc7a 	bl	8000adc <__aeabi_dcmplt>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f000 80dd 	beq.w	800a3aa <scaraFLowScurve+0xd5a>
			 t = time - (3*tm + tc);
 800a1f0:	f04f 0200 	mov.w	r2, #0
 800a1f4:	4b7b      	ldr	r3, [pc, #492]	; (800a3e4 <scaraFLowScurve+0xd94>)
 800a1f6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a1fa:	f7f6 f9fd 	bl	80005f8 <__aeabi_dmul>
 800a1fe:	4602      	mov	r2, r0
 800a200:	460b      	mov	r3, r1
 800a202:	4610      	mov	r0, r2
 800a204:	4619      	mov	r1, r3
 800a206:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a20a:	f7f6 f83f 	bl	800028c <__adddf3>
 800a20e:	4602      	mov	r2, r0
 800a210:	460b      	mov	r3, r1
 800a212:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a216:	f7f6 f837 	bl	8000288 <__aeabi_dsub>
 800a21a:	4602      	mov	r2, r0
 800a21c:	460b      	mov	r3, r1
 800a21e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 800a222:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800a224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a226:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800a22a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a22e:	4620      	mov	r0, r4
 800a230:	4629      	mov	r1, r5
 800a232:	f7f6 f9e1 	bl	80005f8 <__aeabi_dmul>
 800a236:	4602      	mov	r2, r0
 800a238:	460b      	mov	r3, r1
 800a23a:	4614      	mov	r4, r2
 800a23c:	461d      	mov	r5, r3
 800a23e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a242:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a246:	f7f6 f9d7 	bl	80005f8 <__aeabi_dmul>
 800a24a:	4602      	mov	r2, r0
 800a24c:	460b      	mov	r3, r1
 800a24e:	4620      	mov	r0, r4
 800a250:	4629      	mov	r1, r5
 800a252:	f7f6 f81b 	bl	800028c <__adddf3>
 800a256:	4602      	mov	r2, r0
 800a258:	460b      	mov	r3, r1
 800a25a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a25c:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 800a266:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a26a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a26e:	f7f6 f9c3 	bl	80005f8 <__aeabi_dmul>
 800a272:	4602      	mov	r2, r0
 800a274:	460b      	mov	r3, r1
 800a276:	4610      	mov	r0, r2
 800a278:	4619      	mov	r1, r3
 800a27a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a27e:	f7f6 f9bb 	bl	80005f8 <__aeabi_dmul>
 800a282:	4602      	mov	r2, r0
 800a284:	460b      	mov	r3, r1
 800a286:	4620      	mov	r0, r4
 800a288:	4629      	mov	r1, r5
 800a28a:	f7f5 fffd 	bl	8000288 <__aeabi_dsub>
 800a28e:	4602      	mov	r2, r0
 800a290:	460b      	mov	r3, r1
 800a292:	4614      	mov	r4, r2
 800a294:	461d      	mov	r5, r3
 800a296:	f04f 0200 	mov.w	r2, #0
 800a29a:	4b54      	ldr	r3, [pc, #336]	; (800a3ec <scaraFLowScurve+0xd9c>)
 800a29c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a2a0:	f7f6 f9aa 	bl	80005f8 <__aeabi_dmul>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	4610      	mov	r0, r2
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a2b0:	f7f6 f9a2 	bl	80005f8 <__aeabi_dmul>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	4610      	mov	r0, r2
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a2c0:	f7f6 f99a 	bl	80005f8 <__aeabi_dmul>
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	4629      	mov	r1, r5
 800a2cc:	f7f5 ffde 	bl	800028c <__adddf3>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a2d6:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t - 0.5*j_max*tm*t*t + j_max*t*t*t/6;
 800a2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2dc:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e2:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 800a2e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a2ea:	f7f6 f985 	bl	80005f8 <__aeabi_dmul>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	4629      	mov	r1, r5
 800a2f6:	f7f5 ffc9 	bl	800028c <__adddf3>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	4614      	mov	r4, r2
 800a300:	461d      	mov	r5, r3
 800a302:	f04f 0200 	mov.w	r2, #0
 800a306:	4b39      	ldr	r3, [pc, #228]	; (800a3ec <scaraFLowScurve+0xd9c>)
 800a308:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a30c:	f7f6 f974 	bl	80005f8 <__aeabi_dmul>
 800a310:	4602      	mov	r2, r0
 800a312:	460b      	mov	r3, r1
 800a314:	4610      	mov	r0, r2
 800a316:	4619      	mov	r1, r3
 800a318:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a31c:	f7f6 f96c 	bl	80005f8 <__aeabi_dmul>
 800a320:	4602      	mov	r2, r0
 800a322:	460b      	mov	r3, r1
 800a324:	4610      	mov	r0, r2
 800a326:	4619      	mov	r1, r3
 800a328:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a32c:	f7f6 f964 	bl	80005f8 <__aeabi_dmul>
 800a330:	4602      	mov	r2, r0
 800a332:	460b      	mov	r3, r1
 800a334:	4610      	mov	r0, r2
 800a336:	4619      	mov	r1, r3
 800a338:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a33c:	f7f6 f95c 	bl	80005f8 <__aeabi_dmul>
 800a340:	4602      	mov	r2, r0
 800a342:	460b      	mov	r3, r1
 800a344:	4620      	mov	r0, r4
 800a346:	4629      	mov	r1, r5
 800a348:	f7f5 ff9e 	bl	8000288 <__aeabi_dsub>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	4614      	mov	r4, r2
 800a352:	461d      	mov	r5, r3
 800a354:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a358:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a35c:	f7f6 f94c 	bl	80005f8 <__aeabi_dmul>
 800a360:	4602      	mov	r2, r0
 800a362:	460b      	mov	r3, r1
 800a364:	4610      	mov	r0, r2
 800a366:	4619      	mov	r1, r3
 800a368:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a36c:	f7f6 f944 	bl	80005f8 <__aeabi_dmul>
 800a370:	4602      	mov	r2, r0
 800a372:	460b      	mov	r3, r1
 800a374:	4610      	mov	r0, r2
 800a376:	4619      	mov	r1, r3
 800a378:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a37c:	f7f6 f93c 	bl	80005f8 <__aeabi_dmul>
 800a380:	4602      	mov	r2, r0
 800a382:	460b      	mov	r3, r1
 800a384:	4610      	mov	r0, r2
 800a386:	4619      	mov	r1, r3
 800a388:	f04f 0200 	mov.w	r2, #0
 800a38c:	4b18      	ldr	r3, [pc, #96]	; (800a3f0 <scaraFLowScurve+0xda0>)
 800a38e:	f7f6 fa5d 	bl	800084c <__aeabi_ddiv>
 800a392:	4602      	mov	r2, r0
 800a394:	460b      	mov	r3, r1
 800a396:	4620      	mov	r0, r4
 800a398:	4629      	mov	r1, r5
 800a39a:	f7f5 ff77 	bl	800028c <__adddf3>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3a4:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 800a3a8:	e016      	b.n	800a3d8 <scaraFLowScurve+0xd88>
		 } else {
			 scurve->a_current = 0;
 800a3aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3ac:	f04f 0200 	mov.w	r2, #0
 800a3b0:	f04f 0300 	mov.w	r3, #0
 800a3b4:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
			 scurve->v_current = 0;
 800a3b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3ba:	f04f 0200 	mov.w	r2, #0
 800a3be:	f04f 0300 	mov.w	r3, #0
 800a3c2:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800a3cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3ce:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 800a3d2:	e001      	b.n	800a3d8 <scaraFLowScurve+0xd88>
		 }

	 } else {
		 return SCARA_STATUS_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e000      	b.n	800a3da <scaraFLowScurve+0xd8a>
	 }

	 return SCARA_STATUS_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3748      	adds	r7, #72	; 0x48
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bdb0      	pop	{r4, r5, r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	40080000 	.word	0x40080000
 800a3e8:	40100000 	.word	0x40100000
 800a3ec:	3fe00000 	.word	0x3fe00000
 800a3f0:	40180000 	.word	0x40180000
 800a3f4:	00000000 	.word	0x00000000

0800a3f8 <scaraCheckWorkSpace4>:

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b088      	sub	sp, #32
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	ed87 0b06 	vstr	d0, [r7, #24]
 800a402:	ed87 1b04 	vstr	d1, [r7, #16]
 800a406:	ed87 2b02 	vstr	d2, [r7, #8]
 800a40a:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0-0.1 || theta1 > LIM_MAX_J0+0.1) {
 800a40e:	a335      	add	r3, pc, #212	; (adr r3, 800a4e4 <scaraCheckWorkSpace4+0xec>)
 800a410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a414:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a418:	f7f6 fb60 	bl	8000adc <__aeabi_dcmplt>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d109      	bne.n	800a436 <scaraCheckWorkSpace4+0x3e>
 800a422:	a332      	add	r3, pc, #200	; (adr r3, 800a4ec <scaraCheckWorkSpace4+0xf4>)
 800a424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a428:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a42c:	f7f6 fb74 	bl	8000b18 <__aeabi_dcmpgt>
 800a430:	4603      	mov	r3, r0
 800a432:	2b00      	cmp	r3, #0
 800a434:	d001      	beq.n	800a43a <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a436:	2307      	movs	r3, #7
 800a438:	e043      	b.n	800a4c2 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1-0.1 || theta2 > LIM_MAX_J1+0.1) {
 800a43a:	a32e      	add	r3, pc, #184	; (adr r3, 800a4f4 <scaraCheckWorkSpace4+0xfc>)
 800a43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a440:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a444:	f7f6 fb4a 	bl	8000adc <__aeabi_dcmplt>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d109      	bne.n	800a462 <scaraCheckWorkSpace4+0x6a>
 800a44e:	a32b      	add	r3, pc, #172	; (adr r3, 800a4fc <scaraCheckWorkSpace4+0x104>)
 800a450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a454:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a458:	f7f6 fb5e 	bl	8000b18 <__aeabi_dcmpgt>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d001      	beq.n	800a466 <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a462:	2307      	movs	r3, #7
 800a464:	e02d      	b.n	800a4c2 <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 800a466:	f04f 0200 	mov.w	r2, #0
 800a46a:	f04f 0300 	mov.w	r3, #0
 800a46e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a472:	f7f6 fb33 	bl	8000adc <__aeabi_dcmplt>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d109      	bne.n	800a490 <scaraCheckWorkSpace4+0x98>
 800a47c:	f04f 0200 	mov.w	r2, #0
 800a480:	4b17      	ldr	r3, [pc, #92]	; (800a4e0 <scaraCheckWorkSpace4+0xe8>)
 800a482:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a486:	f7f6 fb47 	bl	8000b18 <__aeabi_dcmpgt>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d001      	beq.n	800a494 <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a490:	2307      	movs	r3, #7
 800a492:	e016      	b.n	800a4c2 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3-0.1 || theta4 > LIM_MAX_J3+0.1) {
 800a494:	a30e      	add	r3, pc, #56	; (adr r3, 800a4d0 <scaraCheckWorkSpace4+0xd8>)
 800a496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a49e:	f7f6 fb1d 	bl	8000adc <__aeabi_dcmplt>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d109      	bne.n	800a4bc <scaraCheckWorkSpace4+0xc4>
 800a4a8:	a30b      	add	r3, pc, #44	; (adr r3, 800a4d8 <scaraCheckWorkSpace4+0xe0>)
 800a4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4b2:	f7f6 fb31 	bl	8000b18 <__aeabi_dcmpgt>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d001      	beq.n	800a4c0 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a4bc:	2307      	movs	r3, #7
 800a4be:	e000      	b.n	800a4c2 <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3720      	adds	r7, #32
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	f3af 8000 	nop.w
 800a4d0:	a7777778 	.word	0xa7777778
 800a4d4:	c0088956 	.word	0xc0088956
 800a4d8:	a7777778 	.word	0xa7777778
 800a4dc:	40088956 	.word	0x40088956
 800a4e0:	40590000 	.word	0x40590000
 800a4e4:	74444445 	.word	0x74444445
 800a4e8:	bff95623 	.word	0xbff95623
 800a4ec:	74444445 	.word	0x74444445
 800a4f0:	3ff95623 	.word	0x3ff95623
 800a4f4:	54cccccd 	.word	0x54cccccd
 800a4f8:	c003a649 	.word	0xc003a649
 800a4fc:	54cccccd 	.word	0x54cccccd
 800a500:	4003a649 	.word	0x4003a649
 800a504:	00000000 	.word	0x00000000

0800a508 <scaraCheckWorkSpace1>:

/* Check limit 1 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace1 (Trajectory_TargetTypeDef target, double value) {
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	4603      	mov	r3, r0
 800a510:	ed87 0b00 	vstr	d0, [r7]
 800a514:	73fb      	strb	r3, [r7, #15]
	if ( TRAJECTORY_J0 == target) {
 800a516:	7bfb      	ldrb	r3, [r7, #15]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d117      	bne.n	800a54c <scaraCheckWorkSpace1+0x44>
		if ( (LIM_MIN_J0 <= value) && ( value <= LIM_MAX_J0)) {
 800a51c:	a33d      	add	r3, pc, #244	; (adr r3, 800a614 <scaraCheckWorkSpace1+0x10c>)
 800a51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a522:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a526:	f7f6 faed 	bl	8000b04 <__aeabi_dcmpge>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00b      	beq.n	800a548 <scaraCheckWorkSpace1+0x40>
 800a530:	a33a      	add	r3, pc, #232	; (adr r3, 800a61c <scaraCheckWorkSpace1+0x114>)
 800a532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a536:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a53a:	f7f6 fad9 	bl	8000af0 <__aeabi_dcmple>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d001      	beq.n	800a548 <scaraCheckWorkSpace1+0x40>
			return SCARA_STATUS_OK;
 800a544:	2300      	movs	r3, #0
 800a546:	e054      	b.n	800a5f2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a548:	2307      	movs	r3, #7
 800a54a:	e052      	b.n	800a5f2 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J1 == target) {
 800a54c:	7bfb      	ldrb	r3, [r7, #15]
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d117      	bne.n	800a582 <scaraCheckWorkSpace1+0x7a>
		if ( (LIM_MIN_J1 <= value) && ( value <= LIM_MAX_J1)) {
 800a552:	a334      	add	r3, pc, #208	; (adr r3, 800a624 <scaraCheckWorkSpace1+0x11c>)
 800a554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a558:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a55c:	f7f6 fad2 	bl	8000b04 <__aeabi_dcmpge>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00b      	beq.n	800a57e <scaraCheckWorkSpace1+0x76>
 800a566:	a331      	add	r3, pc, #196	; (adr r3, 800a62c <scaraCheckWorkSpace1+0x124>)
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a570:	f7f6 fabe 	bl	8000af0 <__aeabi_dcmple>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d001      	beq.n	800a57e <scaraCheckWorkSpace1+0x76>
			return SCARA_STATUS_OK;
 800a57a:	2300      	movs	r3, #0
 800a57c:	e039      	b.n	800a5f2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a57e:	2307      	movs	r3, #7
 800a580:	e037      	b.n	800a5f2 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J2 == target) {
 800a582:	7bfb      	ldrb	r3, [r7, #15]
 800a584:	2b02      	cmp	r3, #2
 800a586:	d118      	bne.n	800a5ba <scaraCheckWorkSpace1+0xb2>
		if ( (LIM_MIN_J2 <= value) && ( value <= LIM_MAX_J2)) {
 800a588:	f04f 0200 	mov.w	r2, #0
 800a58c:	f04f 0300 	mov.w	r3, #0
 800a590:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a594:	f7f6 fab6 	bl	8000b04 <__aeabi_dcmpge>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d00b      	beq.n	800a5b6 <scaraCheckWorkSpace1+0xae>
 800a59e:	f04f 0200 	mov.w	r2, #0
 800a5a2:	4b1b      	ldr	r3, [pc, #108]	; (800a610 <scaraCheckWorkSpace1+0x108>)
 800a5a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5a8:	f7f6 faa2 	bl	8000af0 <__aeabi_dcmple>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d001      	beq.n	800a5b6 <scaraCheckWorkSpace1+0xae>
			return SCARA_STATUS_OK;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	e01d      	b.n	800a5f2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a5b6:	2307      	movs	r3, #7
 800a5b8:	e01b      	b.n	800a5f2 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J3 == target) {
 800a5ba:	7bfb      	ldrb	r3, [r7, #15]
 800a5bc:	2b03      	cmp	r3, #3
 800a5be:	d117      	bne.n	800a5f0 <scaraCheckWorkSpace1+0xe8>
		if ( (LIM_MIN_J3 <= value) && ( value <= LIM_MAX_J3)) {
 800a5c0:	a30f      	add	r3, pc, #60	; (adr r3, 800a600 <scaraCheckWorkSpace1+0xf8>)
 800a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5ca:	f7f6 fa9b 	bl	8000b04 <__aeabi_dcmpge>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d00b      	beq.n	800a5ec <scaraCheckWorkSpace1+0xe4>
 800a5d4:	a30c      	add	r3, pc, #48	; (adr r3, 800a608 <scaraCheckWorkSpace1+0x100>)
 800a5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5da:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5de:	f7f6 fa87 	bl	8000af0 <__aeabi_dcmple>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d001      	beq.n	800a5ec <scaraCheckWorkSpace1+0xe4>
			return SCARA_STATUS_OK;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	e002      	b.n	800a5f2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a5ec:	2307      	movs	r3, #7
 800a5ee:	e000      	b.n	800a5f2 <scaraCheckWorkSpace1+0xea>
		}
	} else {
		return SCARA_STATUS_ERROR;
 800a5f0:	2301      	movs	r3, #1
	}
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3710      	adds	r7, #16
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	f3af 8000 	nop.w
 800a600:	daaaaaab 	.word	0xdaaaaaab
 800a604:	c007bc89 	.word	0xc007bc89
 800a608:	daaaaaab 	.word	0xdaaaaaab
 800a60c:	4007bc89 	.word	0x4007bc89
 800a610:	40590000 	.word	0x40590000
 800a614:	daaaaaab 	.word	0xdaaaaaab
 800a618:	bff7bc89 	.word	0xbff7bc89
 800a61c:	daaaaaab 	.word	0xdaaaaaab
 800a620:	3ff7bc89 	.word	0x3ff7bc89
 800a624:	88000000 	.word	0x88000000
 800a628:	c002d97c 	.word	0xc002d97c
 800a62c:	88000000 	.word	0x88000000
 800a630:	4002d97c 	.word	0x4002d97c
 800a634:	00000000 	.word	0x00000000

0800a638 <scaraTestDuty>:
	}
	return SCARA_STATUS_OK;
}

/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 800a638:	b5b0      	push	{r4, r5, r7, lr}
 800a63a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800a63e:	af2e      	add	r7, sp, #184	; 0xb8
	int32_t sample_count;
	double run_time = 0;
 800a640:	f04f 0200 	mov.w	r2, #0
 800a644:	f04f 0300 	mov.w	r3, #0
 800a648:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a64c:	463b      	mov	r3, r7
 800a64e:	4a36      	ldr	r2, [pc, #216]	; (800a728 <scaraTestDuty+0xf0>)
 800a650:	4618      	mov	r0, r3
 800a652:	4611      	mov	r1, r2
 800a654:	23c0      	movs	r3, #192	; 0xc0
 800a656:	461a      	mov	r2, r3
 800a658:	f00b fd2a 	bl	80160b0 <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800a65c:	4b33      	ldr	r3, [pc, #204]	; (800a72c <scaraTestDuty+0xf4>)
 800a65e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a662:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a666:	a32e      	add	r3, pc, #184	; (adr r3, 800a720 <scaraTestDuty+0xe8>)
 800a668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66c:	f7f6 f8ee 	bl	800084c <__aeabi_ddiv>
 800a670:	4602      	mov	r2, r0
 800a672:	460b      	mov	r3, r1
 800a674:	ec43 2b17 	vmov	d7, r2, r3
 800a678:	eeb0 0a47 	vmov.f32	s0, s14
 800a67c:	eef0 0a67 	vmov.f32	s1, s15
 800a680:	f010 f972 	bl	801a968 <ceil>
 800a684:	ec53 2b10 	vmov	r2, r3, d0
 800a688:	4610      	mov	r0, r2
 800a68a:	4619      	mov	r1, r3
 800a68c:	f7f6 fa64 	bl	8000b58 <__aeabi_d2iz>
 800a690:	4603      	mov	r3, r0
 800a692:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	for (int32_t i = 1; i < sample_count; i++) {
 800a696:	2301      	movs	r3, #1
 800a698:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a69c:	e032      	b.n	800a704 <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 800a69e:	a320      	add	r3, pc, #128	; (adr r3, 800a720 <scaraTestDuty+0xe8>)
 800a6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800a6a8:	f7f5 fdf0 	bl	800028c <__adddf3>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 800a6b4:	463c      	mov	r4, r7
 800a6b6:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800a6ba:	4668      	mov	r0, sp
 800a6bc:	f104 0308 	add.w	r3, r4, #8
 800a6c0:	22b8      	movs	r2, #184	; 0xb8
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	f00b fcf4 	bl	80160b0 <memcpy>
 800a6c8:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a6cc:	4628      	mov	r0, r5
 800a6ce:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800a6d2:	f7fe f997 	bl	8008a04 <scaraFlowDuty>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		if (status != SCARA_STATUS_OK) {
 800a6dc:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d002      	beq.n	800a6ea <scaraTestDuty+0xb2>
			return status;
 800a6e4:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a6e8:	e013      	b.n	800a712 <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 800a6ea:	463a      	mov	r2, r7
 800a6ec:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800a6f0:	4611      	mov	r1, r2
 800a6f2:	22c0      	movs	r2, #192	; 0xc0
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f00b fcdb 	bl	80160b0 <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 800a6fa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a6fe:	3301      	adds	r3, #1
 800a700:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a704:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a708:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a70c:	429a      	cmp	r2, r3
 800a70e:	dbc6      	blt.n	800a69e <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800a718:	46bd      	mov	sp, r7
 800a71a:	bdb0      	pop	{r4, r5, r7, pc}
 800a71c:	f3af 8000 	nop.w
 800a720:	40000000 	.word	0x40000000
 800a724:	3f847ae1 	.word	0x3f847ae1
 800a728:	2000b8f0 	.word	0x2000b8f0
 800a72c:	2000ad30 	.word	0x2000ad30

0800a730 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 800a730:	b480      	push	{r7}
 800a732:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 800a734:	4b03      	ldr	r3, [pc, #12]	; (800a744 <scaraSetScanFlag+0x14>)
 800a736:	2201      	movs	r2, #1
 800a738:	70da      	strb	r2, [r3, #3]
}
 800a73a:	bf00      	nop
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr
 800a744:	2000081c 	.word	0x2000081c

0800a748 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	4603      	mov	r3, r0
 800a750:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 800a752:	4a05      	ldr	r2, [pc, #20]	; (800a768 <scaraSetOutput+0x20>)
 800a754:	79fb      	ldrb	r3, [r7, #7]
 800a756:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 800a758:	79fb      	ldrb	r3, [r7, #7]
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7fb f8ec 	bl	8005938 <lowlayer_setOutput>
}
 800a760:	bf00      	nop
 800a762:	3708      	adds	r7, #8
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}
 800a768:	2000081c 	.word	0x2000081c

0800a76c <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	4603      	mov	r3, r0
 800a774:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 800a776:	4a04      	ldr	r2, [pc, #16]	; (800a788 <scaraSetDutyState+0x1c>)
 800a778:	79fb      	ldrb	r3, [r7, #7]
 800a77a:	7093      	strb	r3, [r2, #2]
}
 800a77c:	bf00      	nop
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr
 800a788:	2000081c 	.word	0x2000081c

0800a78c <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	4603      	mov	r3, r0
 800a794:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 800a796:	4a04      	ldr	r2, [pc, #16]	; (800a7a8 <scaraSetMode+0x1c>)
 800a798:	79fb      	ldrb	r3, [r7, #7]
 800a79a:	7053      	strb	r3, [r2, #1]
}
 800a79c:	bf00      	nop
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr
 800a7a8:	2000081c 	.word	0x2000081c

0800a7ac <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 800a7b6:	4a04      	ldr	r2, [pc, #16]	; (800a7c8 <scaraSetMethod+0x1c>)
 800a7b8:	79fb      	ldrb	r3, [r7, #7]
 800a7ba:	7013      	strb	r3, [r2, #0]
}
 800a7bc:	bf00      	nop
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr
 800a7c8:	2000081c 	.word	0x2000081c

0800a7cc <scaraGetPosition>:


void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a7d4:	22c0      	movs	r2, #192	; 0xc0
 800a7d6:	4904      	ldr	r1, [pc, #16]	; (800a7e8 <scaraGetPosition+0x1c>)
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f00b fc69 	bl	80160b0 <memcpy>
}
 800a7de:	bf00      	nop
 800a7e0:	3708      	adds	r7, #8
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	2000b8f0 	.word	0x2000b8f0

0800a7ec <scaraUpdatePosition>:

void				scaraUpdatePosition (SCARA_PositionTypeDef *pos) {
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
	memcpy(&positionNext, pos, sizeof(SCARA_PositionTypeDef));
 800a7f4:	22c0      	movs	r2, #192	; 0xc0
 800a7f6:	6879      	ldr	r1, [r7, #4]
 800a7f8:	4803      	ldr	r0, [pc, #12]	; (800a808 <scaraUpdatePosition+0x1c>)
 800a7fa:	f00b fc59 	bl	80160b0 <memcpy>
}
 800a7fe:	bf00      	nop
 800a800:	3708      	adds	r7, #8
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	2000ba70 	.word	0x2000ba70

0800a80c <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 800a80c:	b480      	push	{r7}
 800a80e:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 800a810:	4b03      	ldr	r3, [pc, #12]	; (800a820 <scaraGetMode+0x14>)
 800a812:	785b      	ldrb	r3, [r3, #1]
}
 800a814:	4618      	mov	r0, r3
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	2000081c 	.word	0x2000081c

0800a824 <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 800a824:	b480      	push	{r7}
 800a826:	af00      	add	r7, sp, #0
	return mySCARA.method;
 800a828:	4b03      	ldr	r3, [pc, #12]	; (800a838 <scaraGetMethod+0x14>)
 800a82a:	781b      	ldrb	r3, [r3, #0]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	2000081c 	.word	0x2000081c

0800a83c <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 800a83c:	b480      	push	{r7}
 800a83e:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 800a840:	4b03      	ldr	r3, [pc, #12]	; (800a850 <scaraGetDutyState+0x14>)
 800a842:	789b      	ldrb	r3, [r3, #2]
}
 800a844:	4618      	mov	r0, r3
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop
 800a850:	2000081c 	.word	0x2000081c

0800a854 <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 800a854:	b480      	push	{r7}
 800a856:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 800a858:	4b03      	ldr	r3, [pc, #12]	; (800a868 <scaraIsScanLimit+0x14>)
 800a85a:	78db      	ldrb	r3, [r3, #3]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop
 800a868:	2000081c 	.word	0x2000081c

0800a86c <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
 800a872:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total  < run_time) {
 800a876:	4b09      	ldr	r3, [pc, #36]	; (800a89c <scaraIsFinish+0x30>)
 800a878:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a880:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a884:	f7f6 f948 	bl	8000b18 <__aeabi_dcmpgt>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d001      	beq.n	800a892 <scaraIsFinish+0x26>
		return TRUE;
 800a88e:	2301      	movs	r3, #1
 800a890:	e000      	b.n	800a894 <scaraIsFinish+0x28>
	} else {
		return FALSE;
 800a892:	2300      	movs	r3, #0
	}
}
 800a894:	4618      	mov	r0, r3
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	2000ad30 	.word	0x2000ad30

0800a8a0 <scaraPosition_packaging>:
						time);
	return lenght_buff;
}

int32_t scaraPosition_packaging(uint8_t *data_packet, SCARA_PositionTypeDef position)
{
 800a8a0:	b082      	sub	sp, #8
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b084      	sub	sp, #16
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
 800a8aa:	f107 0118 	add.w	r1, r7, #24
 800a8ae:	e881 000c 	stmia.w	r1, {r2, r3}
	int32_t cur_ptr = -4;
 800a8b2:	f06f 0303 	mvn.w	r3, #3
 800a8b6:	60fb      	str	r3, [r7, #12]
	Append_Coordinate_Value((int32_t)(position.x*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a8b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a8bc:	a35c      	add	r3, pc, #368	; (adr r3, 800aa30 <scaraPosition_packaging+0x190>)
 800a8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c2:	f7f5 fe99 	bl	80005f8 <__aeabi_dmul>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	4610      	mov	r0, r2
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	f7f6 f943 	bl	8000b58 <__aeabi_d2iz>
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	3304      	adds	r3, #4
 800a8d6:	60fb      	str	r3, [r7, #12]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	4413      	add	r3, r2
 800a8de:	4619      	mov	r1, r3
 800a8e0:	f000 f8aa 	bl	800aa38 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.y*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a8e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a8e8:	a351      	add	r3, pc, #324	; (adr r3, 800aa30 <scaraPosition_packaging+0x190>)
 800a8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ee:	f7f5 fe83 	bl	80005f8 <__aeabi_dmul>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	4610      	mov	r0, r2
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	f7f6 f92d 	bl	8000b58 <__aeabi_d2iz>
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	3304      	adds	r3, #4
 800a902:	60fb      	str	r3, [r7, #12]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	4413      	add	r3, r2
 800a90a:	4619      	mov	r1, r3
 800a90c:	f000 f894 	bl	800aa38 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.z*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a910:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800a914:	a346      	add	r3, pc, #280	; (adr r3, 800aa30 <scaraPosition_packaging+0x190>)
 800a916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91a:	f7f5 fe6d 	bl	80005f8 <__aeabi_dmul>
 800a91e:	4602      	mov	r2, r0
 800a920:	460b      	mov	r3, r1
 800a922:	4610      	mov	r0, r2
 800a924:	4619      	mov	r1, r3
 800a926:	f7f6 f917 	bl	8000b58 <__aeabi_d2iz>
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	3304      	adds	r3, #4
 800a92e:	60fb      	str	r3, [r7, #12]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	4413      	add	r3, r2
 800a936:	4619      	mov	r1, r3
 800a938:	f000 f87e 	bl	800aa38 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.roll*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a93c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a940:	a33b      	add	r3, pc, #236	; (adr r3, 800aa30 <scaraPosition_packaging+0x190>)
 800a942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a946:	f7f5 fe57 	bl	80005f8 <__aeabi_dmul>
 800a94a:	4602      	mov	r2, r0
 800a94c:	460b      	mov	r3, r1
 800a94e:	4610      	mov	r0, r2
 800a950:	4619      	mov	r1, r3
 800a952:	f7f6 f901 	bl	8000b58 <__aeabi_d2iz>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	3304      	adds	r3, #4
 800a95a:	60fb      	str	r3, [r7, #12]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	4413      	add	r3, r2
 800a962:	4619      	mov	r1, r3
 800a964:	f000 f868 	bl	800aa38 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta1*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a968:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a96c:	a330      	add	r3, pc, #192	; (adr r3, 800aa30 <scaraPosition_packaging+0x190>)
 800a96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a972:	f7f5 fe41 	bl	80005f8 <__aeabi_dmul>
 800a976:	4602      	mov	r2, r0
 800a978:	460b      	mov	r3, r1
 800a97a:	4610      	mov	r0, r2
 800a97c:	4619      	mov	r1, r3
 800a97e:	f7f6 f8eb 	bl	8000b58 <__aeabi_d2iz>
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	3304      	adds	r3, #4
 800a986:	60fb      	str	r3, [r7, #12]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	4413      	add	r3, r2
 800a98e:	4619      	mov	r1, r3
 800a990:	f000 f852 	bl	800aa38 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta2*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a994:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800a998:	a325      	add	r3, pc, #148	; (adr r3, 800aa30 <scaraPosition_packaging+0x190>)
 800a99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99e:	f7f5 fe2b 	bl	80005f8 <__aeabi_dmul>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	4610      	mov	r0, r2
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	f7f6 f8d5 	bl	8000b58 <__aeabi_d2iz>
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	3304      	adds	r3, #4
 800a9b2:	60fb      	str	r3, [r7, #12]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	f000 f83c 	bl	800aa38 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.D3*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a9c0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800a9c4:	a31a      	add	r3, pc, #104	; (adr r3, 800aa30 <scaraPosition_packaging+0x190>)
 800a9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ca:	f7f5 fe15 	bl	80005f8 <__aeabi_dmul>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	4610      	mov	r0, r2
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	f7f6 f8bf 	bl	8000b58 <__aeabi_d2iz>
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	3304      	adds	r3, #4
 800a9de:	60fb      	str	r3, [r7, #12]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	f000 f826 	bl	800aa38 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta4*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a9ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a9f0:	a30f      	add	r3, pc, #60	; (adr r3, 800aa30 <scaraPosition_packaging+0x190>)
 800a9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f6:	f7f5 fdff 	bl	80005f8 <__aeabi_dmul>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	4610      	mov	r0, r2
 800aa00:	4619      	mov	r1, r3
 800aa02:	f7f6 f8a9 	bl	8000b58 <__aeabi_d2iz>
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	3304      	adds	r3, #4
 800aa0a:	60fb      	str	r3, [r7, #12]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	4413      	add	r3, r2
 800aa12:	4619      	mov	r1, r3
 800aa14:	f000 f810 	bl	800aa38 <Append_Coordinate_Value>
	return cur_ptr + 4;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	3304      	adds	r3, #4
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3710      	adds	r7, #16
 800aa20:	46bd      	mov	sp, r7
 800aa22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa26:	b002      	add	sp, #8
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	f3af 8000 	nop.w
 800aa30:	00000000 	.word	0x00000000
 800aa34:	412e8480 	.word	0x412e8480

0800aa38 <Append_Coordinate_Value>:

void Append_Coordinate_Value(int32_t append_value, uint8_t* append_position)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
	append_position[0] = (uint8_t)(append_value & 0xff);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	b2da      	uxtb	r2, r3
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	701a      	strb	r2, [r3, #0]
	append_position[1] = (uint8_t)(append_value >> 8 & 0xff);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	121a      	asrs	r2, r3, #8
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	3301      	adds	r3, #1
 800aa52:	b2d2      	uxtb	r2, r2
 800aa54:	701a      	strb	r2, [r3, #0]
	append_position[2] = (uint8_t)(append_value >> 16 & 0xff);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	141a      	asrs	r2, r3, #16
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	3302      	adds	r3, #2
 800aa5e:	b2d2      	uxtb	r2, r2
 800aa60:	701a      	strb	r2, [r3, #0]
	append_position[3] = (uint8_t)(append_value >> 24 & 0xff);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	161a      	asrs	r2, r3, #24
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	3303      	adds	r3, #3
 800aa6a:	b2d2      	uxtb	r2, r2
 800aa6c:	701a      	strb	r2, [r3, #0]
}
 800aa6e:	bf00      	nop
 800aa70:	370c      	adds	r7, #12
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr
 800aa7a:	0000      	movs	r0, r0
 800aa7c:	0000      	movs	r0, r0
	...

0800aa80 <scaraKeyInit1>:
SCARA_StatusTypeDef  scaraKeyInit1(SCARA_KeyTypeDef key, int32_t speed)
{
 800aa80:	b590      	push	{r4, r7, lr}
 800aa82:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 800aa86:	af6c      	add	r7, sp, #432	; 0x1b0
 800aa88:	4602      	mov	r2, r0
 800aa8a:	463b      	mov	r3, r7
 800aa8c:	6019      	str	r1, [r3, #0]
 800aa8e:	1dfb      	adds	r3, r7, #7
 800aa90:	701a      	strb	r2, [r3, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef status;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 800aa92:	f107 0308 	add.w	r3, r7, #8
 800aa96:	2201      	movs	r2, #1
 800aa98:	731a      	strb	r2, [r3, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800aa9a:	f107 0308 	add.w	r3, r7, #8
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	741a      	strb	r2, [r3, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 800aaa2:	f107 0308 	add.w	r3, r7, #8
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	745a      	strb	r2, [r3, #17]
	double v_current = 0;
 800aaaa:	f04f 0200 	mov.w	r2, #0
 800aaae:	f04f 0300 	mov.w	r3, #0
 800aab2:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
	Trajectory_LSPB_TypeDef *lspb;
	if(speed < SHIFT_SPEED_MIN || speed > SHIFT_SPEED_MAX){
 800aab6:	463b      	mov	r3, r7
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	dd03      	ble.n	800aac6 <scaraKeyInit1+0x46>
 800aabe:	463b      	mov	r3, r7
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2b0e      	cmp	r3, #14
 800aac4:	dd01      	ble.n	800aaca <scaraKeyInit1+0x4a>
		return SCARA_STATUS_ERROR_PARA;
 800aac6:	2306      	movs	r3, #6
 800aac8:	e2c0      	b.n	800b04c <scaraKeyInit1+0x5cc>
	}
	switch(key){
 800aaca:	1dfb      	adds	r3, r7, #7
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	2b07      	cmp	r3, #7
 800aad0:	f200 8298 	bhi.w	800b004 <scaraKeyInit1+0x584>
 800aad4:	a201      	add	r2, pc, #4	; (adr r2, 800aadc <scaraKeyInit1+0x5c>)
 800aad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aada:	bf00      	nop
 800aadc:	0800aafd 	.word	0x0800aafd
 800aae0:	0800ab9f 	.word	0x0800ab9f
 800aae4:	0800ac45 	.word	0x0800ac45
 800aae8:	0800ace3 	.word	0x0800ace3
 800aaec:	0800ad85 	.word	0x0800ad85
 800aaf0:	0800ae23 	.word	0x0800ae23
 800aaf4:	0800aec5 	.word	0x0800aec5
 800aaf8:	0800af63 	.word	0x0800af63
		case SCARA_KEY_X_INC:{
			cmd.v_factor = 0;
 800aafc:	f107 0108 	add.w	r1, r7, #8
 800ab00:	f04f 0200 	mov.w	r2, #0
 800ab04:	f04f 0300 	mov.w	r3, #0
 800ab08:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ab0c:	f107 0308 	add.w	r3, r7, #8
 800ab10:	2200      	movs	r2, #0
 800ab12:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ab14:	f107 0308 	add.w	r3, r7, #8
 800ab18:	2200      	movs	r2, #0
 800ab1a:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= speed*SHIFT_KEY_S;
 800ab1c:	463b      	mov	r3, r7
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	4613      	mov	r3, r2
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	4413      	add	r3, r2
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7f5 fcfc 	bl	8000524 <__aeabi_i2d>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	460b      	mov	r3, r1
 800ab30:	f107 0108 	add.w	r1, r7, #8
 800ab34:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ab38:	f107 0108 	add.w	r1, r7, #8
 800ab3c:	f04f 0200 	mov.w	r2, #0
 800ab40:	f04f 0300 	mov.w	r3, #0
 800ab44:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ab48:	f107 0108 	add.w	r1, r7, #8
 800ab4c:	f04f 0200 	mov.w	r2, #0
 800ab50:	f04f 0300 	mov.w	r3, #0
 800ab54:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ab58:	f107 0108 	add.w	r1, r7, #8
 800ab5c:	f04f 0200 	mov.w	r2, #0
 800ab60:	f04f 0300 	mov.w	r3, #0
 800ab64:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ab68:	463b      	mov	r3, r7
 800ab6a:	6818      	ldr	r0, [r3, #0]
 800ab6c:	f7f5 fcda 	bl	8000524 <__aeabi_i2d>
 800ab70:	f20f 43e4 	addw	r3, pc, #1252	; 0x4e4
 800ab74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab78:	f7f5 fd3e 	bl	80005f8 <__aeabi_dmul>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	460b      	mov	r3, r1
 800ab80:	4610      	mov	r0, r2
 800ab82:	4619      	mov	r1, r3
 800ab84:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 800ab88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8c:	f7f5 fb7e 	bl	800028c <__adddf3>
 800ab90:	4602      	mov	r2, r0
 800ab92:	460b      	mov	r3, r1
 800ab94:	f107 0108 	add.w	r1, r7, #8
 800ab98:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800ab9c:	e232      	b.n	800b004 <scaraKeyInit1+0x584>
		case SCARA_KEY_X_DEC:{
			cmd.v_factor = 0;
 800ab9e:	f107 0108 	add.w	r1, r7, #8
 800aba2:	f04f 0200 	mov.w	r2, #0
 800aba6:	f04f 0300 	mov.w	r3, #0
 800abaa:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800abae:	f107 0308 	add.w	r3, r7, #8
 800abb2:	2200      	movs	r2, #0
 800abb4:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800abb6:	f107 0308 	add.w	r3, r7, #8
 800abba:	2200      	movs	r2, #0
 800abbc:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= -speed*SHIFT_KEY_S;
 800abbe:	463b      	mov	r3, r7
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	4613      	mov	r3, r2
 800abc4:	079b      	lsls	r3, r3, #30
 800abc6:	1a9b      	subs	r3, r3, r2
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	1a9b      	subs	r3, r3, r2
 800abcc:	4618      	mov	r0, r3
 800abce:	f7f5 fca9 	bl	8000524 <__aeabi_i2d>
 800abd2:	4602      	mov	r2, r0
 800abd4:	460b      	mov	r3, r1
 800abd6:	f107 0108 	add.w	r1, r7, #8
 800abda:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800abde:	f107 0108 	add.w	r1, r7, #8
 800abe2:	f04f 0200 	mov.w	r2, #0
 800abe6:	f04f 0300 	mov.w	r3, #0
 800abea:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800abee:	f107 0108 	add.w	r1, r7, #8
 800abf2:	f04f 0200 	mov.w	r2, #0
 800abf6:	f04f 0300 	mov.w	r3, #0
 800abfa:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800abfe:	f107 0108 	add.w	r1, r7, #8
 800ac02:	f04f 0200 	mov.w	r2, #0
 800ac06:	f04f 0300 	mov.w	r3, #0
 800ac0a:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ac0e:	463b      	mov	r3, r7
 800ac10:	6818      	ldr	r0, [r3, #0]
 800ac12:	f7f5 fc87 	bl	8000524 <__aeabi_i2d>
 800ac16:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 800ac1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1e:	f7f5 fceb 	bl	80005f8 <__aeabi_dmul>
 800ac22:	4602      	mov	r2, r0
 800ac24:	460b      	mov	r3, r1
 800ac26:	4610      	mov	r0, r2
 800ac28:	4619      	mov	r1, r3
 800ac2a:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 800ac2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac32:	f7f5 fb2b 	bl	800028c <__adddf3>
 800ac36:	4602      	mov	r2, r0
 800ac38:	460b      	mov	r3, r1
 800ac3a:	f107 0108 	add.w	r1, r7, #8
 800ac3e:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800ac42:	e1df      	b.n	800b004 <scaraKeyInit1+0x584>
		case SCARA_KEY_Y_INC:{
			cmd.v_factor = 0;
 800ac44:	f107 0108 	add.w	r1, r7, #8
 800ac48:	f04f 0200 	mov.w	r2, #0
 800ac4c:	f04f 0300 	mov.w	r3, #0
 800ac50:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ac54:	f107 0308 	add.w	r3, r7, #8
 800ac58:	2200      	movs	r2, #0
 800ac5a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ac5c:	f107 0308 	add.w	r3, r7, #8
 800ac60:	2200      	movs	r2, #0
 800ac62:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ac64:	f107 0108 	add.w	r1, r7, #8
 800ac68:	f04f 0200 	mov.w	r2, #0
 800ac6c:	f04f 0300 	mov.w	r3, #0
 800ac70:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= speed*SHIFT_KEY_S;
 800ac74:	463b      	mov	r3, r7
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	4613      	mov	r3, r2
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	4413      	add	r3, r2
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7f5 fc50 	bl	8000524 <__aeabi_i2d>
 800ac84:	4602      	mov	r2, r0
 800ac86:	460b      	mov	r3, r1
 800ac88:	f107 0108 	add.w	r1, r7, #8
 800ac8c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ac90:	f107 0108 	add.w	r1, r7, #8
 800ac94:	f04f 0200 	mov.w	r2, #0
 800ac98:	f04f 0300 	mov.w	r3, #0
 800ac9c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800aca0:	f107 0108 	add.w	r1, r7, #8
 800aca4:	f04f 0200 	mov.w	r2, #0
 800aca8:	f04f 0300 	mov.w	r3, #0
 800acac:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800acb0:	463b      	mov	r3, r7
 800acb2:	6818      	ldr	r0, [r3, #0]
 800acb4:	f7f5 fc36 	bl	8000524 <__aeabi_i2d>
 800acb8:	a3e7      	add	r3, pc, #924	; (adr r3, 800b058 <scaraKeyInit1+0x5d8>)
 800acba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acbe:	f7f5 fc9b 	bl	80005f8 <__aeabi_dmul>
 800acc2:	4602      	mov	r2, r0
 800acc4:	460b      	mov	r3, r1
 800acc6:	4610      	mov	r0, r2
 800acc8:	4619      	mov	r1, r3
 800acca:	a3e5      	add	r3, pc, #916	; (adr r3, 800b060 <scaraKeyInit1+0x5e0>)
 800accc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd0:	f7f5 fadc 	bl	800028c <__adddf3>
 800acd4:	4602      	mov	r2, r0
 800acd6:	460b      	mov	r3, r1
 800acd8:	f107 0108 	add.w	r1, r7, #8
 800acdc:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800ace0:	e190      	b.n	800b004 <scaraKeyInit1+0x584>

		case SCARA_KEY_Y_DEC:{
			cmd.v_factor = 0;
 800ace2:	f107 0108 	add.w	r1, r7, #8
 800ace6:	f04f 0200 	mov.w	r2, #0
 800acea:	f04f 0300 	mov.w	r3, #0
 800acee:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800acf2:	f107 0308 	add.w	r3, r7, #8
 800acf6:	2200      	movs	r2, #0
 800acf8:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800acfa:	f107 0308 	add.w	r3, r7, #8
 800acfe:	2200      	movs	r2, #0
 800ad00:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ad02:	f107 0108 	add.w	r1, r7, #8
 800ad06:	f04f 0200 	mov.w	r2, #0
 800ad0a:	f04f 0300 	mov.w	r3, #0
 800ad0e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= -speed*SHIFT_KEY_S;
 800ad12:	463b      	mov	r3, r7
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	4613      	mov	r3, r2
 800ad18:	079b      	lsls	r3, r3, #30
 800ad1a:	1a9b      	subs	r3, r3, r2
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	1a9b      	subs	r3, r3, r2
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7f5 fbff 	bl	8000524 <__aeabi_i2d>
 800ad26:	4602      	mov	r2, r0
 800ad28:	460b      	mov	r3, r1
 800ad2a:	f107 0108 	add.w	r1, r7, #8
 800ad2e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ad32:	f107 0108 	add.w	r1, r7, #8
 800ad36:	f04f 0200 	mov.w	r2, #0
 800ad3a:	f04f 0300 	mov.w	r3, #0
 800ad3e:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ad42:	f107 0108 	add.w	r1, r7, #8
 800ad46:	f04f 0200 	mov.w	r2, #0
 800ad4a:	f04f 0300 	mov.w	r3, #0
 800ad4e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ad52:	463b      	mov	r3, r7
 800ad54:	6818      	ldr	r0, [r3, #0]
 800ad56:	f7f5 fbe5 	bl	8000524 <__aeabi_i2d>
 800ad5a:	a3bf      	add	r3, pc, #764	; (adr r3, 800b058 <scaraKeyInit1+0x5d8>)
 800ad5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad60:	f7f5 fc4a 	bl	80005f8 <__aeabi_dmul>
 800ad64:	4602      	mov	r2, r0
 800ad66:	460b      	mov	r3, r1
 800ad68:	4610      	mov	r0, r2
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	a3bc      	add	r3, pc, #752	; (adr r3, 800b060 <scaraKeyInit1+0x5e0>)
 800ad6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad72:	f7f5 fa8b 	bl	800028c <__adddf3>
 800ad76:	4602      	mov	r2, r0
 800ad78:	460b      	mov	r3, r1
 800ad7a:	f107 0108 	add.w	r1, r7, #8
 800ad7e:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800ad82:	e13f      	b.n	800b004 <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_INC:{
			cmd.v_factor = 0;
 800ad84:	f107 0108 	add.w	r1, r7, #8
 800ad88:	f04f 0200 	mov.w	r2, #0
 800ad8c:	f04f 0300 	mov.w	r3, #0
 800ad90:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ad94:	f107 0308 	add.w	r3, r7, #8
 800ad98:	2200      	movs	r2, #0
 800ad9a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ad9c:	f107 0308 	add.w	r3, r7, #8
 800ada0:	2200      	movs	r2, #0
 800ada2:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ada4:	f107 0108 	add.w	r1, r7, #8
 800ada8:	f04f 0200 	mov.w	r2, #0
 800adac:	f04f 0300 	mov.w	r3, #0
 800adb0:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800adb4:	f107 0108 	add.w	r1, r7, #8
 800adb8:	f04f 0200 	mov.w	r2, #0
 800adbc:	f04f 0300 	mov.w	r3, #0
 800adc0:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= speed*SHIFT_KEY_S;
 800adc4:	463b      	mov	r3, r7
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	4613      	mov	r3, r2
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	4413      	add	r3, r2
 800adce:	4618      	mov	r0, r3
 800add0:	f7f5 fba8 	bl	8000524 <__aeabi_i2d>
 800add4:	4602      	mov	r2, r0
 800add6:	460b      	mov	r3, r1
 800add8:	f107 0108 	add.w	r1, r7, #8
 800addc:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ade0:	f107 0108 	add.w	r1, r7, #8
 800ade4:	f04f 0200 	mov.w	r2, #0
 800ade8:	f04f 0300 	mov.w	r3, #0
 800adec:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800adf0:	463b      	mov	r3, r7
 800adf2:	6818      	ldr	r0, [r3, #0]
 800adf4:	f7f5 fb96 	bl	8000524 <__aeabi_i2d>
 800adf8:	a397      	add	r3, pc, #604	; (adr r3, 800b058 <scaraKeyInit1+0x5d8>)
 800adfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfe:	f7f5 fbfb 	bl	80005f8 <__aeabi_dmul>
 800ae02:	4602      	mov	r2, r0
 800ae04:	460b      	mov	r3, r1
 800ae06:	4610      	mov	r0, r2
 800ae08:	4619      	mov	r1, r3
 800ae0a:	a395      	add	r3, pc, #596	; (adr r3, 800b060 <scaraKeyInit1+0x5e0>)
 800ae0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae10:	f7f5 fa3c 	bl	800028c <__adddf3>
 800ae14:	4602      	mov	r2, r0
 800ae16:	460b      	mov	r3, r1
 800ae18:	f107 0108 	add.w	r1, r7, #8
 800ae1c:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800ae20:	e0f0      	b.n	800b004 <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_DEC:{
			cmd.v_factor = 0;
 800ae22:	f107 0108 	add.w	r1, r7, #8
 800ae26:	f04f 0200 	mov.w	r2, #0
 800ae2a:	f04f 0300 	mov.w	r3, #0
 800ae2e:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ae32:	f107 0308 	add.w	r3, r7, #8
 800ae36:	2200      	movs	r2, #0
 800ae38:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ae3a:	f107 0308 	add.w	r3, r7, #8
 800ae3e:	2200      	movs	r2, #0
 800ae40:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ae42:	f107 0108 	add.w	r1, r7, #8
 800ae46:	f04f 0200 	mov.w	r2, #0
 800ae4a:	f04f 0300 	mov.w	r3, #0
 800ae4e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ae52:	f107 0108 	add.w	r1, r7, #8
 800ae56:	f04f 0200 	mov.w	r2, #0
 800ae5a:	f04f 0300 	mov.w	r3, #0
 800ae5e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= -speed*SHIFT_KEY_S;
 800ae62:	463b      	mov	r3, r7
 800ae64:	681a      	ldr	r2, [r3, #0]
 800ae66:	4613      	mov	r3, r2
 800ae68:	079b      	lsls	r3, r3, #30
 800ae6a:	1a9b      	subs	r3, r3, r2
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	1a9b      	subs	r3, r3, r2
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7f5 fb57 	bl	8000524 <__aeabi_i2d>
 800ae76:	4602      	mov	r2, r0
 800ae78:	460b      	mov	r3, r1
 800ae7a:	f107 0108 	add.w	r1, r7, #8
 800ae7e:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ae82:	f107 0108 	add.w	r1, r7, #8
 800ae86:	f04f 0200 	mov.w	r2, #0
 800ae8a:	f04f 0300 	mov.w	r3, #0
 800ae8e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ae92:	463b      	mov	r3, r7
 800ae94:	6818      	ldr	r0, [r3, #0]
 800ae96:	f7f5 fb45 	bl	8000524 <__aeabi_i2d>
 800ae9a:	a36f      	add	r3, pc, #444	; (adr r3, 800b058 <scaraKeyInit1+0x5d8>)
 800ae9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea0:	f7f5 fbaa 	bl	80005f8 <__aeabi_dmul>
 800aea4:	4602      	mov	r2, r0
 800aea6:	460b      	mov	r3, r1
 800aea8:	4610      	mov	r0, r2
 800aeaa:	4619      	mov	r1, r3
 800aeac:	a36c      	add	r3, pc, #432	; (adr r3, 800b060 <scaraKeyInit1+0x5e0>)
 800aeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb2:	f7f5 f9eb 	bl	800028c <__adddf3>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	460b      	mov	r3, r1
 800aeba:	f107 0108 	add.w	r1, r7, #8
 800aebe:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800aec2:	e09f      	b.n	800b004 <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_INC:{
			cmd.v_factor = 0;
 800aec4:	f107 0108 	add.w	r1, r7, #8
 800aec8:	f04f 0200 	mov.w	r2, #0
 800aecc:	f04f 0300 	mov.w	r3, #0
 800aed0:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800aed4:	f107 0308 	add.w	r3, r7, #8
 800aed8:	2200      	movs	r2, #0
 800aeda:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aedc:	f107 0308 	add.w	r3, r7, #8
 800aee0:	2200      	movs	r2, #0
 800aee2:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800aee4:	f107 0108 	add.w	r1, r7, #8
 800aee8:	f04f 0200 	mov.w	r2, #0
 800aeec:	f04f 0300 	mov.w	r3, #0
 800aef0:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800aef4:	f107 0108 	add.w	r1, r7, #8
 800aef8:	f04f 0200 	mov.w	r2, #0
 800aefc:	f04f 0300 	mov.w	r3, #0
 800af00:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800af04:	f107 0108 	add.w	r1, r7, #8
 800af08:	f04f 0200 	mov.w	r2, #0
 800af0c:	f04f 0300 	mov.w	r3, #0
 800af10:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= speed*SHIFT_KEY_S;
 800af14:	463b      	mov	r3, r7
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	4613      	mov	r3, r2
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	4413      	add	r3, r2
 800af1e:	4618      	mov	r0, r3
 800af20:	f7f5 fb00 	bl	8000524 <__aeabi_i2d>
 800af24:	4602      	mov	r2, r0
 800af26:	460b      	mov	r3, r1
 800af28:	f107 0108 	add.w	r1, r7, #8
 800af2c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800af30:	463b      	mov	r3, r7
 800af32:	6818      	ldr	r0, [r3, #0]
 800af34:	f7f5 faf6 	bl	8000524 <__aeabi_i2d>
 800af38:	a347      	add	r3, pc, #284	; (adr r3, 800b058 <scaraKeyInit1+0x5d8>)
 800af3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3e:	f7f5 fb5b 	bl	80005f8 <__aeabi_dmul>
 800af42:	4602      	mov	r2, r0
 800af44:	460b      	mov	r3, r1
 800af46:	4610      	mov	r0, r2
 800af48:	4619      	mov	r1, r3
 800af4a:	a345      	add	r3, pc, #276	; (adr r3, 800b060 <scaraKeyInit1+0x5e0>)
 800af4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af50:	f7f5 f99c 	bl	800028c <__adddf3>
 800af54:	4602      	mov	r2, r0
 800af56:	460b      	mov	r3, r1
 800af58:	f107 0108 	add.w	r1, r7, #8
 800af5c:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800af60:	e050      	b.n	800b004 <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_DEC:{
			cmd.v_factor = 0;
 800af62:	f107 0108 	add.w	r1, r7, #8
 800af66:	f04f 0200 	mov.w	r2, #0
 800af6a:	f04f 0300 	mov.w	r3, #0
 800af6e:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800af72:	f107 0308 	add.w	r3, r7, #8
 800af76:	2200      	movs	r2, #0
 800af78:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800af7a:	f107 0308 	add.w	r3, r7, #8
 800af7e:	2200      	movs	r2, #0
 800af80:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800af82:	f107 0108 	add.w	r1, r7, #8
 800af86:	f04f 0200 	mov.w	r2, #0
 800af8a:	f04f 0300 	mov.w	r3, #0
 800af8e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800af92:	f107 0108 	add.w	r1, r7, #8
 800af96:	f04f 0200 	mov.w	r2, #0
 800af9a:	f04f 0300 	mov.w	r3, #0
 800af9e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800afa2:	f107 0108 	add.w	r1, r7, #8
 800afa6:	f04f 0200 	mov.w	r2, #0
 800afaa:	f04f 0300 	mov.w	r3, #0
 800afae:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= -speed*SHIFT_KEY_S;
 800afb2:	463b      	mov	r3, r7
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	4613      	mov	r3, r2
 800afb8:	079b      	lsls	r3, r3, #30
 800afba:	1a9b      	subs	r3, r3, r2
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	1a9b      	subs	r3, r3, r2
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7f5 faaf 	bl	8000524 <__aeabi_i2d>
 800afc6:	4602      	mov	r2, r0
 800afc8:	460b      	mov	r3, r1
 800afca:	f107 0108 	add.w	r1, r7, #8
 800afce:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800afd2:	463b      	mov	r3, r7
 800afd4:	6818      	ldr	r0, [r3, #0]
 800afd6:	f7f5 faa5 	bl	8000524 <__aeabi_i2d>
 800afda:	a31f      	add	r3, pc, #124	; (adr r3, 800b058 <scaraKeyInit1+0x5d8>)
 800afdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe0:	f7f5 fb0a 	bl	80005f8 <__aeabi_dmul>
 800afe4:	4602      	mov	r2, r0
 800afe6:	460b      	mov	r3, r1
 800afe8:	4610      	mov	r0, r2
 800afea:	4619      	mov	r1, r3
 800afec:	a31c      	add	r3, pc, #112	; (adr r3, 800b060 <scaraKeyInit1+0x5e0>)
 800afee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff2:	f7f5 f94b 	bl	800028c <__adddf3>
 800aff6:	4602      	mov	r2, r0
 800aff8:	460b      	mov	r3, r1
 800affa:	f107 0108 	add.w	r1, r7, #8
 800affe:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800b002:	bf00      	nop
	}

	status = scaraInitDuty(cmd);
 800b004:	f107 0408 	add.w	r4, r7, #8
 800b008:	4668      	mov	r0, sp
 800b00a:	f104 0310 	add.w	r3, r4, #16
 800b00e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800b012:	4619      	mov	r1, r3
 800b014:	f00b f84c 	bl	80160b0 <memcpy>
 800b018:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b01c:	f7fa fcd8 	bl	80059d0 <scaraInitDuty>
 800b020:	4603      	mov	r3, r0
 800b022:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
	if (status == SCARA_STATUS_OK) {
 800b026:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d10b      	bne.n	800b046 <scaraKeyInit1+0x5c6>
		status = scaraTestDuty();
 800b02e:	f7ff fb03 	bl	800a638 <scaraTestDuty>
 800b032:	4603      	mov	r3, r0
 800b034:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		if (status != SCARA_STATUS_OK) {
 800b038:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d005      	beq.n	800b04c <scaraKeyInit1+0x5cc>
			return status;
 800b040:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b044:	e002      	b.n	800b04c <scaraKeyInit1+0x5cc>
		// tinh lai run time so vs v hien tai
//		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
//		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
//		return status;
	} else {
		return status;
 800b046:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b04a:	e7ff      	b.n	800b04c <scaraKeyInit1+0x5cc>
	}
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 800b052:	46bd      	mov	sp, r7
 800b054:	bd90      	pop	{r4, r7, pc}
 800b056:	bf00      	nop
 800b058:	9999999a 	.word	0x9999999a
 800b05c:	3fa99999 	.word	0x3fa99999
 800b060:	9999999a 	.word	0x9999999a
 800b064:	3fe99999 	.word	0x3fe99999

0800b068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b06e:	2300      	movs	r3, #0
 800b070:	607b      	str	r3, [r7, #4]
 800b072:	4b12      	ldr	r3, [pc, #72]	; (800b0bc <HAL_MspInit+0x54>)
 800b074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b076:	4a11      	ldr	r2, [pc, #68]	; (800b0bc <HAL_MspInit+0x54>)
 800b078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b07c:	6453      	str	r3, [r2, #68]	; 0x44
 800b07e:	4b0f      	ldr	r3, [pc, #60]	; (800b0bc <HAL_MspInit+0x54>)
 800b080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b086:	607b      	str	r3, [r7, #4]
 800b088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b08a:	2300      	movs	r3, #0
 800b08c:	603b      	str	r3, [r7, #0]
 800b08e:	4b0b      	ldr	r3, [pc, #44]	; (800b0bc <HAL_MspInit+0x54>)
 800b090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b092:	4a0a      	ldr	r2, [pc, #40]	; (800b0bc <HAL_MspInit+0x54>)
 800b094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b098:	6413      	str	r3, [r2, #64]	; 0x40
 800b09a:	4b08      	ldr	r3, [pc, #32]	; (800b0bc <HAL_MspInit+0x54>)
 800b09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0a2:	603b      	str	r3, [r7, #0]
 800b0a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	210f      	movs	r1, #15
 800b0aa:	f06f 0001 	mvn.w	r0, #1
 800b0ae:	f000 fc79 	bl	800b9a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b0b2:	bf00      	nop
 800b0b4:	3708      	adds	r7, #8
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	40023800 	.word	0x40023800

0800b0c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b08c      	sub	sp, #48	; 0x30
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	6879      	ldr	r1, [r7, #4]
 800b0d4:	2036      	movs	r0, #54	; 0x36
 800b0d6:	f000 fc65 	bl	800b9a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b0da:	2036      	movs	r0, #54	; 0x36
 800b0dc:	f000 fc7e 	bl	800b9dc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	60fb      	str	r3, [r7, #12]
 800b0e4:	4b1f      	ldr	r3, [pc, #124]	; (800b164 <HAL_InitTick+0xa4>)
 800b0e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e8:	4a1e      	ldr	r2, [pc, #120]	; (800b164 <HAL_InitTick+0xa4>)
 800b0ea:	f043 0310 	orr.w	r3, r3, #16
 800b0ee:	6413      	str	r3, [r2, #64]	; 0x40
 800b0f0:	4b1c      	ldr	r3, [pc, #112]	; (800b164 <HAL_InitTick+0xa4>)
 800b0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f4:	f003 0310 	and.w	r3, r3, #16
 800b0f8:	60fb      	str	r3, [r7, #12]
 800b0fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b0fc:	f107 0210 	add.w	r2, r7, #16
 800b100:	f107 0314 	add.w	r3, r7, #20
 800b104:	4611      	mov	r1, r2
 800b106:	4618      	mov	r0, r3
 800b108:	f003 f812 	bl	800e130 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b10c:	f002 ffe8 	bl	800e0e0 <HAL_RCC_GetPCLK1Freq>
 800b110:	4603      	mov	r3, r0
 800b112:	005b      	lsls	r3, r3, #1
 800b114:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b118:	4a13      	ldr	r2, [pc, #76]	; (800b168 <HAL_InitTick+0xa8>)
 800b11a:	fba2 2303 	umull	r2, r3, r2, r3
 800b11e:	0c9b      	lsrs	r3, r3, #18
 800b120:	3b01      	subs	r3, #1
 800b122:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b124:	4b11      	ldr	r3, [pc, #68]	; (800b16c <HAL_InitTick+0xac>)
 800b126:	4a12      	ldr	r2, [pc, #72]	; (800b170 <HAL_InitTick+0xb0>)
 800b128:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800b12a:	4b10      	ldr	r3, [pc, #64]	; (800b16c <HAL_InitTick+0xac>)
 800b12c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b130:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b132:	4a0e      	ldr	r2, [pc, #56]	; (800b16c <HAL_InitTick+0xac>)
 800b134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b136:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b138:	4b0c      	ldr	r3, [pc, #48]	; (800b16c <HAL_InitTick+0xac>)
 800b13a:	2200      	movs	r2, #0
 800b13c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b13e:	4b0b      	ldr	r3, [pc, #44]	; (800b16c <HAL_InitTick+0xac>)
 800b140:	2200      	movs	r2, #0
 800b142:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800b144:	4809      	ldr	r0, [pc, #36]	; (800b16c <HAL_InitTick+0xac>)
 800b146:	f003 f825 	bl	800e194 <HAL_TIM_Base_Init>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d104      	bne.n	800b15a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800b150:	4806      	ldr	r0, [pc, #24]	; (800b16c <HAL_InitTick+0xac>)
 800b152:	f003 f86e 	bl	800e232 <HAL_TIM_Base_Start_IT>
 800b156:	4603      	mov	r3, r0
 800b158:	e000      	b.n	800b15c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800b15a:	2301      	movs	r3, #1
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3730      	adds	r7, #48	; 0x30
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	40023800 	.word	0x40023800
 800b168:	431bde83 	.word	0x431bde83
 800b16c:	2000bb30 	.word	0x2000bb30
 800b170:	40001000 	.word	0x40001000

0800b174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b174:	b480      	push	{r7}
 800b176:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b178:	bf00      	nop
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr
	...

0800b184 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800b188:	2162      	movs	r1, #98	; 0x62
 800b18a:	4802      	ldr	r0, [pc, #8]	; (800b194 <HardFault_Handler+0x10>)
 800b18c:	f7f6 fffe 	bl	800218c <LOG_REPORT>
 800b190:	e7fa      	b.n	800b188 <HardFault_Handler+0x4>
 800b192:	bf00      	nop
 800b194:	0801c588 	.word	0x0801c588

0800b198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800b19c:	2172      	movs	r1, #114	; 0x72
 800b19e:	4802      	ldr	r0, [pc, #8]	; (800b1a8 <MemManage_Handler+0x10>)
 800b1a0:	f7f6 fff4 	bl	800218c <LOG_REPORT>
 800b1a4:	e7fa      	b.n	800b19c <MemManage_Handler+0x4>
 800b1a6:	bf00      	nop
 800b1a8:	0801c5a0 	.word	0x0801c5a0

0800b1ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800b1b0:	2182      	movs	r1, #130	; 0x82
 800b1b2:	4802      	ldr	r0, [pc, #8]	; (800b1bc <BusFault_Handler+0x10>)
 800b1b4:	f7f6 ffea 	bl	800218c <LOG_REPORT>
 800b1b8:	e7fa      	b.n	800b1b0 <BusFault_Handler+0x4>
 800b1ba:	bf00      	nop
 800b1bc:	0801c5b4 	.word	0x0801c5b4

0800b1c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b1c4:	e7fe      	b.n	800b1c4 <UsageFault_Handler+0x4>

0800b1c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b1c6:	b480      	push	{r7}
 800b1c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b1ca:	bf00      	nop
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800b1d8:	4802      	ldr	r0, [pc, #8]	; (800b1e4 <DMA1_Stream4_IRQHandler+0x10>)
 800b1da:	f000 fd35 	bl	800bc48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800b1de:	bf00      	nop
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	2000bc30 	.word	0x2000bc30

0800b1e8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800b1ec:	4802      	ldr	r0, [pc, #8]	; (800b1f8 <UART4_IRQHandler+0x10>)
 800b1ee:	f003 fcbd 	bl	800eb6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800b1f2:	bf00      	nop
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	2000bbf0 	.word	0x2000bbf0

0800b1fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b200:	4802      	ldr	r0, [pc, #8]	; (800b20c <TIM6_DAC_IRQHandler+0x10>)
 800b202:	f003 f83a 	bl	800e27a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b206:	bf00      	nop
 800b208:	bd80      	pop	{r7, pc}
 800b20a:	bf00      	nop
 800b20c:	2000bb30 	.word	0x2000bb30

0800b210 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800b214:	4b05      	ldr	r3, [pc, #20]	; (800b22c <TIM7_IRQHandler+0x1c>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2101      	movs	r1, #1
 800b21a:	4618      	mov	r0, r3
 800b21c:	f007 fbba 	bl	8012994 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800b220:	4803      	ldr	r0, [pc, #12]	; (800b230 <TIM7_IRQHandler+0x20>)
 800b222:	f003 f82a 	bl	800e27a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800b226:	bf00      	nop
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	2000ac64 	.word	0x2000ac64
 800b230:	2000bbb0 	.word	0x2000bbb0

0800b234 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b238:	4802      	ldr	r0, [pc, #8]	; (800b244 <OTG_FS_IRQHandler+0x10>)
 800b23a:	f001 fad9 	bl	800c7f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b23e:	bf00      	nop
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	2000c56c 	.word	0x2000c56c

0800b248 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b248:	b480      	push	{r7}
 800b24a:	af00      	add	r7, sp, #0
	return 1;
 800b24c:	2301      	movs	r3, #1
}
 800b24e:	4618      	mov	r0, r3
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <_kill>:

int _kill(int pid, int sig)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b262:	f00a feeb 	bl	801603c <__errno>
 800b266:	4603      	mov	r3, r0
 800b268:	2216      	movs	r2, #22
 800b26a:	601a      	str	r2, [r3, #0]
	return -1;
 800b26c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b270:	4618      	mov	r0, r3
 800b272:	3708      	adds	r7, #8
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <_exit>:

void _exit (int status)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b280:	f04f 31ff 	mov.w	r1, #4294967295
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f7ff ffe7 	bl	800b258 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b28a:	e7fe      	b.n	800b28a <_exit+0x12>

0800b28c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b086      	sub	sp, #24
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b298:	2300      	movs	r3, #0
 800b29a:	617b      	str	r3, [r7, #20]
 800b29c:	e00a      	b.n	800b2b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b29e:	f3af 8000 	nop.w
 800b2a2:	4601      	mov	r1, r0
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	1c5a      	adds	r2, r3, #1
 800b2a8:	60ba      	str	r2, [r7, #8]
 800b2aa:	b2ca      	uxtb	r2, r1
 800b2ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	617b      	str	r3, [r7, #20]
 800b2b4:	697a      	ldr	r2, [r7, #20]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	dbf0      	blt.n	800b29e <_read+0x12>
	}

return len;
 800b2bc:	687b      	ldr	r3, [r7, #4]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3718      	adds	r7, #24
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b086      	sub	sp, #24
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	60f8      	str	r0, [r7, #12]
 800b2ce:	60b9      	str	r1, [r7, #8]
 800b2d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	617b      	str	r3, [r7, #20]
 800b2d6:	e009      	b.n	800b2ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	1c5a      	adds	r2, r3, #1
 800b2dc:	60ba      	str	r2, [r7, #8]
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	617b      	str	r3, [r7, #20]
 800b2ec:	697a      	ldr	r2, [r7, #20]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	dbf1      	blt.n	800b2d8 <_write+0x12>
	}
	return len;
 800b2f4:	687b      	ldr	r3, [r7, #4]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3718      	adds	r7, #24
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <_close>:

int _close(int file)
{
 800b2fe:	b480      	push	{r7}
 800b300:	b083      	sub	sp, #12
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
	return -1;
 800b306:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	370c      	adds	r7, #12
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b316:	b480      	push	{r7}
 800b318:	b083      	sub	sp, #12
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
 800b31e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b326:	605a      	str	r2, [r3, #4]
	return 0;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	370c      	adds	r7, #12
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr

0800b336 <_isatty>:

int _isatty(int file)
{
 800b336:	b480      	push	{r7}
 800b338:	b083      	sub	sp, #12
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
	return 1;
 800b33e:	2301      	movs	r3, #1
}
 800b340:	4618      	mov	r0, r3
 800b342:	370c      	adds	r7, #12
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b085      	sub	sp, #20
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	607a      	str	r2, [r7, #4]
	return 0;
 800b358:	2300      	movs	r3, #0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3714      	adds	r7, #20
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr
	...

0800b368 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b370:	4b11      	ldr	r3, [pc, #68]	; (800b3b8 <_sbrk+0x50>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d102      	bne.n	800b37e <_sbrk+0x16>
		heap_end = &end;
 800b378:	4b0f      	ldr	r3, [pc, #60]	; (800b3b8 <_sbrk+0x50>)
 800b37a:	4a10      	ldr	r2, [pc, #64]	; (800b3bc <_sbrk+0x54>)
 800b37c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b37e:	4b0e      	ldr	r3, [pc, #56]	; (800b3b8 <_sbrk+0x50>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b384:	4b0c      	ldr	r3, [pc, #48]	; (800b3b8 <_sbrk+0x50>)
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	4413      	add	r3, r2
 800b38c:	466a      	mov	r2, sp
 800b38e:	4293      	cmp	r3, r2
 800b390:	d907      	bls.n	800b3a2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b392:	f00a fe53 	bl	801603c <__errno>
 800b396:	4603      	mov	r3, r0
 800b398:	220c      	movs	r2, #12
 800b39a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800b39c:	f04f 33ff 	mov.w	r3, #4294967295
 800b3a0:	e006      	b.n	800b3b0 <_sbrk+0x48>
	}

	heap_end += incr;
 800b3a2:	4b05      	ldr	r3, [pc, #20]	; (800b3b8 <_sbrk+0x50>)
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	4a03      	ldr	r2, [pc, #12]	; (800b3b8 <_sbrk+0x50>)
 800b3ac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3710      	adds	r7, #16
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	20001008 	.word	0x20001008
 800b3bc:	2000c988 	.word	0x2000c988

0800b3c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b3c4:	4b08      	ldr	r3, [pc, #32]	; (800b3e8 <SystemInit+0x28>)
 800b3c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3ca:	4a07      	ldr	r2, [pc, #28]	; (800b3e8 <SystemInit+0x28>)
 800b3cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b3d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b3d4:	4b04      	ldr	r3, [pc, #16]	; (800b3e8 <SystemInit+0x28>)
 800b3d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b3da:	609a      	str	r2, [r3, #8]
#endif
}
 800b3dc:	bf00      	nop
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr
 800b3e6:	bf00      	nop
 800b3e8:	e000ed00 	.word	0xe000ed00

0800b3ec <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b086      	sub	sp, #24
 800b3f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b3f2:	f107 0308 	add.w	r3, r7, #8
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	601a      	str	r2, [r3, #0]
 800b3fa:	605a      	str	r2, [r3, #4]
 800b3fc:	609a      	str	r2, [r3, #8]
 800b3fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b400:	463b      	mov	r3, r7
 800b402:	2200      	movs	r2, #0
 800b404:	601a      	str	r2, [r3, #0]
 800b406:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800b408:	4b1e      	ldr	r3, [pc, #120]	; (800b484 <MX_TIM2_Init+0x98>)
 800b40a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b40e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25000;
 800b410:	4b1c      	ldr	r3, [pc, #112]	; (800b484 <MX_TIM2_Init+0x98>)
 800b412:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800b416:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b418:	4b1a      	ldr	r3, [pc, #104]	; (800b484 <MX_TIM2_Init+0x98>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800b41e:	4b19      	ldr	r3, [pc, #100]	; (800b484 <MX_TIM2_Init+0x98>)
 800b420:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b424:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b426:	4b17      	ldr	r3, [pc, #92]	; (800b484 <MX_TIM2_Init+0x98>)
 800b428:	2200      	movs	r2, #0
 800b42a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b42c:	4b15      	ldr	r3, [pc, #84]	; (800b484 <MX_TIM2_Init+0x98>)
 800b42e:	2200      	movs	r2, #0
 800b430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b432:	4814      	ldr	r0, [pc, #80]	; (800b484 <MX_TIM2_Init+0x98>)
 800b434:	f002 feae 	bl	800e194 <HAL_TIM_Base_Init>
 800b438:	4603      	mov	r3, r0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d001      	beq.n	800b442 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800b43e:	f7f9 fa4d 	bl	80048dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b446:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b448:	f107 0308 	add.w	r3, r7, #8
 800b44c:	4619      	mov	r1, r3
 800b44e:	480d      	ldr	r0, [pc, #52]	; (800b484 <MX_TIM2_Init+0x98>)
 800b450:	f003 f81b 	bl	800e48a <HAL_TIM_ConfigClockSource>
 800b454:	4603      	mov	r3, r0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d001      	beq.n	800b45e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800b45a:	f7f9 fa3f 	bl	80048dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b45e:	2300      	movs	r3, #0
 800b460:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b462:	2300      	movs	r3, #0
 800b464:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b466:	463b      	mov	r3, r7
 800b468:	4619      	mov	r1, r3
 800b46a:	4806      	ldr	r0, [pc, #24]	; (800b484 <MX_TIM2_Init+0x98>)
 800b46c:	f003 fa34 	bl	800e8d8 <HAL_TIMEx_MasterConfigSynchronization>
 800b470:	4603      	mov	r3, r0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d001      	beq.n	800b47a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800b476:	f7f9 fa31 	bl	80048dc <Error_Handler>
  }

}
 800b47a:	bf00      	nop
 800b47c:	3718      	adds	r7, #24
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
 800b482:	bf00      	nop
 800b484:	2000bb70 	.word	0x2000bb70

0800b488 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b48e:	463b      	mov	r3, r7
 800b490:	2200      	movs	r2, #0
 800b492:	601a      	str	r2, [r3, #0]
 800b494:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800b496:	4b15      	ldr	r3, [pc, #84]	; (800b4ec <MX_TIM7_Init+0x64>)
 800b498:	4a15      	ldr	r2, [pc, #84]	; (800b4f0 <MX_TIM7_Init+0x68>)
 800b49a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800b49c:	4b13      	ldr	r3, [pc, #76]	; (800b4ec <MX_TIM7_Init+0x64>)
 800b49e:	2253      	movs	r2, #83	; 0x53
 800b4a0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b4a2:	4b12      	ldr	r3, [pc, #72]	; (800b4ec <MX_TIM7_Init+0x64>)
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800b4a8:	4b10      	ldr	r3, [pc, #64]	; (800b4ec <MX_TIM7_Init+0x64>)
 800b4aa:	f242 720f 	movw	r2, #9999	; 0x270f
 800b4ae:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b4b0:	4b0e      	ldr	r3, [pc, #56]	; (800b4ec <MX_TIM7_Init+0x64>)
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b4b6:	480d      	ldr	r0, [pc, #52]	; (800b4ec <MX_TIM7_Init+0x64>)
 800b4b8:	f002 fe6c 	bl	800e194 <HAL_TIM_Base_Init>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d001      	beq.n	800b4c6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800b4c2:	f7f9 fa0b 	bl	80048dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b4ce:	463b      	mov	r3, r7
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	4806      	ldr	r0, [pc, #24]	; (800b4ec <MX_TIM7_Init+0x64>)
 800b4d4:	f003 fa00 	bl	800e8d8 <HAL_TIMEx_MasterConfigSynchronization>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d001      	beq.n	800b4e2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800b4de:	f7f9 f9fd 	bl	80048dc <Error_Handler>
  }

}
 800b4e2:	bf00      	nop
 800b4e4:	3708      	adds	r7, #8
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	2000bbb0 	.word	0x2000bbb0
 800b4f0:	40001400 	.word	0x40001400

0800b4f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b084      	sub	sp, #16
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b504:	d10e      	bne.n	800b524 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b506:	2300      	movs	r3, #0
 800b508:	60fb      	str	r3, [r7, #12]
 800b50a:	4b16      	ldr	r3, [pc, #88]	; (800b564 <HAL_TIM_Base_MspInit+0x70>)
 800b50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b50e:	4a15      	ldr	r2, [pc, #84]	; (800b564 <HAL_TIM_Base_MspInit+0x70>)
 800b510:	f043 0301 	orr.w	r3, r3, #1
 800b514:	6413      	str	r3, [r2, #64]	; 0x40
 800b516:	4b13      	ldr	r3, [pc, #76]	; (800b564 <HAL_TIM_Base_MspInit+0x70>)
 800b518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b51a:	f003 0301 	and.w	r3, r3, #1
 800b51e:	60fb      	str	r3, [r7, #12]
 800b520:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800b522:	e01a      	b.n	800b55a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4a0f      	ldr	r2, [pc, #60]	; (800b568 <HAL_TIM_Base_MspInit+0x74>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d115      	bne.n	800b55a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b52e:	2300      	movs	r3, #0
 800b530:	60bb      	str	r3, [r7, #8]
 800b532:	4b0c      	ldr	r3, [pc, #48]	; (800b564 <HAL_TIM_Base_MspInit+0x70>)
 800b534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b536:	4a0b      	ldr	r2, [pc, #44]	; (800b564 <HAL_TIM_Base_MspInit+0x70>)
 800b538:	f043 0320 	orr.w	r3, r3, #32
 800b53c:	6413      	str	r3, [r2, #64]	; 0x40
 800b53e:	4b09      	ldr	r3, [pc, #36]	; (800b564 <HAL_TIM_Base_MspInit+0x70>)
 800b540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b542:	f003 0320 	and.w	r3, r3, #32
 800b546:	60bb      	str	r3, [r7, #8]
 800b548:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800b54a:	2200      	movs	r2, #0
 800b54c:	2105      	movs	r1, #5
 800b54e:	2037      	movs	r0, #55	; 0x37
 800b550:	f000 fa28 	bl	800b9a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b554:	2037      	movs	r0, #55	; 0x37
 800b556:	f000 fa41 	bl	800b9dc <HAL_NVIC_EnableIRQ>
}
 800b55a:	bf00      	nop
 800b55c:	3710      	adds	r7, #16
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	40023800 	.word	0x40023800
 800b568:	40001400 	.word	0x40001400

0800b56c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800b570:	4b11      	ldr	r3, [pc, #68]	; (800b5b8 <MX_UART4_Init+0x4c>)
 800b572:	4a12      	ldr	r2, [pc, #72]	; (800b5bc <MX_UART4_Init+0x50>)
 800b574:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b576:	4b10      	ldr	r3, [pc, #64]	; (800b5b8 <MX_UART4_Init+0x4c>)
 800b578:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b57c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b57e:	4b0e      	ldr	r3, [pc, #56]	; (800b5b8 <MX_UART4_Init+0x4c>)
 800b580:	2200      	movs	r2, #0
 800b582:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b584:	4b0c      	ldr	r3, [pc, #48]	; (800b5b8 <MX_UART4_Init+0x4c>)
 800b586:	2200      	movs	r2, #0
 800b588:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b58a:	4b0b      	ldr	r3, [pc, #44]	; (800b5b8 <MX_UART4_Init+0x4c>)
 800b58c:	2200      	movs	r2, #0
 800b58e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b590:	4b09      	ldr	r3, [pc, #36]	; (800b5b8 <MX_UART4_Init+0x4c>)
 800b592:	220c      	movs	r2, #12
 800b594:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b596:	4b08      	ldr	r3, [pc, #32]	; (800b5b8 <MX_UART4_Init+0x4c>)
 800b598:	2200      	movs	r2, #0
 800b59a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b59c:	4b06      	ldr	r3, [pc, #24]	; (800b5b8 <MX_UART4_Init+0x4c>)
 800b59e:	2200      	movs	r2, #0
 800b5a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b5a2:	4805      	ldr	r0, [pc, #20]	; (800b5b8 <MX_UART4_Init+0x4c>)
 800b5a4:	f003 fa28 	bl	800e9f8 <HAL_UART_Init>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d001      	beq.n	800b5b2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800b5ae:	f7f9 f995 	bl	80048dc <Error_Handler>
  }

}
 800b5b2:	bf00      	nop
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	2000bbf0 	.word	0x2000bbf0
 800b5bc:	40004c00 	.word	0x40004c00

0800b5c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b08a      	sub	sp, #40	; 0x28
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5c8:	f107 0314 	add.w	r3, r7, #20
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	601a      	str	r2, [r3, #0]
 800b5d0:	605a      	str	r2, [r3, #4]
 800b5d2:	609a      	str	r2, [r3, #8]
 800b5d4:	60da      	str	r2, [r3, #12]
 800b5d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a34      	ldr	r2, [pc, #208]	; (800b6b0 <HAL_UART_MspInit+0xf0>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d161      	bne.n	800b6a6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	613b      	str	r3, [r7, #16]
 800b5e6:	4b33      	ldr	r3, [pc, #204]	; (800b6b4 <HAL_UART_MspInit+0xf4>)
 800b5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ea:	4a32      	ldr	r2, [pc, #200]	; (800b6b4 <HAL_UART_MspInit+0xf4>)
 800b5ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b5f0:	6413      	str	r3, [r2, #64]	; 0x40
 800b5f2:	4b30      	ldr	r3, [pc, #192]	; (800b6b4 <HAL_UART_MspInit+0xf4>)
 800b5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b5fa:	613b      	str	r3, [r7, #16]
 800b5fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b5fe:	2300      	movs	r3, #0
 800b600:	60fb      	str	r3, [r7, #12]
 800b602:	4b2c      	ldr	r3, [pc, #176]	; (800b6b4 <HAL_UART_MspInit+0xf4>)
 800b604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b606:	4a2b      	ldr	r2, [pc, #172]	; (800b6b4 <HAL_UART_MspInit+0xf4>)
 800b608:	f043 0301 	orr.w	r3, r3, #1
 800b60c:	6313      	str	r3, [r2, #48]	; 0x30
 800b60e:	4b29      	ldr	r3, [pc, #164]	; (800b6b4 <HAL_UART_MspInit+0xf4>)
 800b610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b612:	f003 0301 	and.w	r3, r3, #1
 800b616:	60fb      	str	r3, [r7, #12]
 800b618:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b61a:	2303      	movs	r3, #3
 800b61c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b61e:	2302      	movs	r3, #2
 800b620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b622:	2301      	movs	r3, #1
 800b624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b626:	2303      	movs	r3, #3
 800b628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800b62a:	2308      	movs	r3, #8
 800b62c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b62e:	f107 0314 	add.w	r3, r7, #20
 800b632:	4619      	mov	r1, r3
 800b634:	4820      	ldr	r0, [pc, #128]	; (800b6b8 <HAL_UART_MspInit+0xf8>)
 800b636:	f000 fd7f 	bl	800c138 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800b63a:	4b20      	ldr	r3, [pc, #128]	; (800b6bc <HAL_UART_MspInit+0xfc>)
 800b63c:	4a20      	ldr	r2, [pc, #128]	; (800b6c0 <HAL_UART_MspInit+0x100>)
 800b63e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800b640:	4b1e      	ldr	r3, [pc, #120]	; (800b6bc <HAL_UART_MspInit+0xfc>)
 800b642:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b646:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b648:	4b1c      	ldr	r3, [pc, #112]	; (800b6bc <HAL_UART_MspInit+0xfc>)
 800b64a:	2240      	movs	r2, #64	; 0x40
 800b64c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b64e:	4b1b      	ldr	r3, [pc, #108]	; (800b6bc <HAL_UART_MspInit+0xfc>)
 800b650:	2200      	movs	r2, #0
 800b652:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b654:	4b19      	ldr	r3, [pc, #100]	; (800b6bc <HAL_UART_MspInit+0xfc>)
 800b656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b65a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b65c:	4b17      	ldr	r3, [pc, #92]	; (800b6bc <HAL_UART_MspInit+0xfc>)
 800b65e:	2200      	movs	r2, #0
 800b660:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b662:	4b16      	ldr	r3, [pc, #88]	; (800b6bc <HAL_UART_MspInit+0xfc>)
 800b664:	2200      	movs	r2, #0
 800b666:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800b668:	4b14      	ldr	r3, [pc, #80]	; (800b6bc <HAL_UART_MspInit+0xfc>)
 800b66a:	2200      	movs	r2, #0
 800b66c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b66e:	4b13      	ldr	r3, [pc, #76]	; (800b6bc <HAL_UART_MspInit+0xfc>)
 800b670:	2200      	movs	r2, #0
 800b672:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b674:	4b11      	ldr	r3, [pc, #68]	; (800b6bc <HAL_UART_MspInit+0xfc>)
 800b676:	2200      	movs	r2, #0
 800b678:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800b67a:	4810      	ldr	r0, [pc, #64]	; (800b6bc <HAL_UART_MspInit+0xfc>)
 800b67c:	f000 f9bc 	bl	800b9f8 <HAL_DMA_Init>
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d001      	beq.n	800b68a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800b686:	f7f9 f929 	bl	80048dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4a0b      	ldr	r2, [pc, #44]	; (800b6bc <HAL_UART_MspInit+0xfc>)
 800b68e:	631a      	str	r2, [r3, #48]	; 0x30
 800b690:	4a0a      	ldr	r2, [pc, #40]	; (800b6bc <HAL_UART_MspInit+0xfc>)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800b696:	2200      	movs	r2, #0
 800b698:	2105      	movs	r1, #5
 800b69a:	2034      	movs	r0, #52	; 0x34
 800b69c:	f000 f982 	bl	800b9a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800b6a0:	2034      	movs	r0, #52	; 0x34
 800b6a2:	f000 f99b 	bl	800b9dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800b6a6:	bf00      	nop
 800b6a8:	3728      	adds	r7, #40	; 0x28
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	40004c00 	.word	0x40004c00
 800b6b4:	40023800 	.word	0x40023800
 800b6b8:	40020000 	.word	0x40020000
 800b6bc:	2000bc30 	.word	0x2000bc30
 800b6c0:	40026070 	.word	0x40026070

0800b6c4 <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a0c      	ldr	r2, [pc, #48]	; (800b704 <HAL_UART_TxCpltCallback+0x40>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d112      	bne.n	800b6fc <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800b6d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b6da:	490b      	ldr	r1, [pc, #44]	; (800b708 <HAL_UART_TxCpltCallback+0x44>)
 800b6dc:	480b      	ldr	r0, [pc, #44]	; (800b70c <HAL_UART_TxCpltCallback+0x48>)
 800b6de:	f7f9 f99c 	bl	8004a1a <ringBuff_PopArray>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800b6e6:	89fb      	ldrh	r3, [r7, #14]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d006      	beq.n	800b6fa <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800b6ec:	89fb      	ldrh	r3, [r7, #14]
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	4905      	ldr	r1, [pc, #20]	; (800b708 <HAL_UART_TxCpltCallback+0x44>)
 800b6f2:	4807      	ldr	r0, [pc, #28]	; (800b710 <HAL_UART_TxCpltCallback+0x4c>)
 800b6f4:	f003 f9ce 	bl	800ea94 <HAL_UART_Transmit_DMA>
 800b6f8:	e000      	b.n	800b6fc <HAL_UART_TxCpltCallback+0x38>
			return;
 800b6fa:	bf00      	nop
	}
}
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	40004c00 	.word	0x40004c00
 800b708:	2000ab60 	.word	0x2000ab60
 800b70c:	20000410 	.word	0x20000410
 800b710:	2000bbf0 	.word	0x2000bbf0

0800b714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b74c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b718:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b71a:	e003      	b.n	800b724 <LoopCopyDataInit>

0800b71c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b71c:	4b0c      	ldr	r3, [pc, #48]	; (800b750 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b71e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b720:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b722:	3104      	adds	r1, #4

0800b724 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b724:	480b      	ldr	r0, [pc, #44]	; (800b754 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b726:	4b0c      	ldr	r3, [pc, #48]	; (800b758 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b728:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b72a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b72c:	d3f6      	bcc.n	800b71c <CopyDataInit>
  ldr  r2, =_sbss
 800b72e:	4a0b      	ldr	r2, [pc, #44]	; (800b75c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b730:	e002      	b.n	800b738 <LoopFillZerobss>

0800b732 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b732:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b734:	f842 3b04 	str.w	r3, [r2], #4

0800b738 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b738:	4b09      	ldr	r3, [pc, #36]	; (800b760 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b73a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b73c:	d3f9      	bcc.n	800b732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b73e:	f7ff fe3f 	bl	800b3c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b742:	f00a fc81 	bl	8016048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b746:	f7f9 f835 	bl	80047b4 <main>
  bx  lr    
 800b74a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b74c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b750:	0801cd48 	.word	0x0801cd48
  ldr  r0, =_sdata
 800b754:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b758:	20000b84 	.word	0x20000b84
  ldr  r2, =_sbss
 800b75c:	20000b88 	.word	0x20000b88
  ldr  r3, = _ebss
 800b760:	2000c984 	.word	0x2000c984

0800b764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b764:	e7fe      	b.n	800b764 <ADC_IRQHandler>
	...

0800b768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b76c:	4b0e      	ldr	r3, [pc, #56]	; (800b7a8 <HAL_Init+0x40>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a0d      	ldr	r2, [pc, #52]	; (800b7a8 <HAL_Init+0x40>)
 800b772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b776:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b778:	4b0b      	ldr	r3, [pc, #44]	; (800b7a8 <HAL_Init+0x40>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a0a      	ldr	r2, [pc, #40]	; (800b7a8 <HAL_Init+0x40>)
 800b77e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b782:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b784:	4b08      	ldr	r3, [pc, #32]	; (800b7a8 <HAL_Init+0x40>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a07      	ldr	r2, [pc, #28]	; (800b7a8 <HAL_Init+0x40>)
 800b78a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b78e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b790:	2003      	movs	r0, #3
 800b792:	f000 f8fc 	bl	800b98e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b796:	2000      	movs	r0, #0
 800b798:	f7ff fc92 	bl	800b0c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b79c:	f7ff fc64 	bl	800b068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	40023c00 	.word	0x40023c00

0800b7ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b7b0:	4b06      	ldr	r3, [pc, #24]	; (800b7cc <HAL_IncTick+0x20>)
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	4b06      	ldr	r3, [pc, #24]	; (800b7d0 <HAL_IncTick+0x24>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	4a04      	ldr	r2, [pc, #16]	; (800b7d0 <HAL_IncTick+0x24>)
 800b7be:	6013      	str	r3, [r2, #0]
}
 800b7c0:	bf00      	nop
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr
 800b7ca:	bf00      	nop
 800b7cc:	20000830 	.word	0x20000830
 800b7d0:	2000bc90 	.word	0x2000bc90

0800b7d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	af00      	add	r7, sp, #0
  return uwTick;
 800b7d8:	4b03      	ldr	r3, [pc, #12]	; (800b7e8 <HAL_GetTick+0x14>)
 800b7da:	681b      	ldr	r3, [r3, #0]
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr
 800b7e6:	bf00      	nop
 800b7e8:	2000bc90 	.word	0x2000bc90

0800b7ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b7f4:	f7ff ffee 	bl	800b7d4 <HAL_GetTick>
 800b7f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b804:	d005      	beq.n	800b812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b806:	4b0a      	ldr	r3, [pc, #40]	; (800b830 <HAL_Delay+0x44>)
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	461a      	mov	r2, r3
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	4413      	add	r3, r2
 800b810:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b812:	bf00      	nop
 800b814:	f7ff ffde 	bl	800b7d4 <HAL_GetTick>
 800b818:	4602      	mov	r2, r0
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	1ad3      	subs	r3, r2, r3
 800b81e:	68fa      	ldr	r2, [r7, #12]
 800b820:	429a      	cmp	r2, r3
 800b822:	d8f7      	bhi.n	800b814 <HAL_Delay+0x28>
  {
  }
}
 800b824:	bf00      	nop
 800b826:	bf00      	nop
 800b828:	3710      	adds	r7, #16
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	20000830 	.word	0x20000830

0800b834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b834:	b480      	push	{r7}
 800b836:	b085      	sub	sp, #20
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f003 0307 	and.w	r3, r3, #7
 800b842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b844:	4b0c      	ldr	r3, [pc, #48]	; (800b878 <__NVIC_SetPriorityGrouping+0x44>)
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b84a:	68ba      	ldr	r2, [r7, #8]
 800b84c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b850:	4013      	ands	r3, r2
 800b852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b85c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b866:	4a04      	ldr	r2, [pc, #16]	; (800b878 <__NVIC_SetPriorityGrouping+0x44>)
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	60d3      	str	r3, [r2, #12]
}
 800b86c:	bf00      	nop
 800b86e:	3714      	adds	r7, #20
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr
 800b878:	e000ed00 	.word	0xe000ed00

0800b87c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b87c:	b480      	push	{r7}
 800b87e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b880:	4b04      	ldr	r3, [pc, #16]	; (800b894 <__NVIC_GetPriorityGrouping+0x18>)
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	0a1b      	lsrs	r3, r3, #8
 800b886:	f003 0307 	and.w	r3, r3, #7
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr
 800b894:	e000ed00 	.word	0xe000ed00

0800b898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b898:	b480      	push	{r7}
 800b89a:	b083      	sub	sp, #12
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	4603      	mov	r3, r0
 800b8a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b8a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	db0b      	blt.n	800b8c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b8aa:	79fb      	ldrb	r3, [r7, #7]
 800b8ac:	f003 021f 	and.w	r2, r3, #31
 800b8b0:	4907      	ldr	r1, [pc, #28]	; (800b8d0 <__NVIC_EnableIRQ+0x38>)
 800b8b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8b6:	095b      	lsrs	r3, r3, #5
 800b8b8:	2001      	movs	r0, #1
 800b8ba:	fa00 f202 	lsl.w	r2, r0, r2
 800b8be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b8c2:	bf00      	nop
 800b8c4:	370c      	adds	r7, #12
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr
 800b8ce:	bf00      	nop
 800b8d0:	e000e100 	.word	0xe000e100

0800b8d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	4603      	mov	r3, r0
 800b8dc:	6039      	str	r1, [r7, #0]
 800b8de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b8e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	db0a      	blt.n	800b8fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	b2da      	uxtb	r2, r3
 800b8ec:	490c      	ldr	r1, [pc, #48]	; (800b920 <__NVIC_SetPriority+0x4c>)
 800b8ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8f2:	0112      	lsls	r2, r2, #4
 800b8f4:	b2d2      	uxtb	r2, r2
 800b8f6:	440b      	add	r3, r1
 800b8f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b8fc:	e00a      	b.n	800b914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	b2da      	uxtb	r2, r3
 800b902:	4908      	ldr	r1, [pc, #32]	; (800b924 <__NVIC_SetPriority+0x50>)
 800b904:	79fb      	ldrb	r3, [r7, #7]
 800b906:	f003 030f 	and.w	r3, r3, #15
 800b90a:	3b04      	subs	r3, #4
 800b90c:	0112      	lsls	r2, r2, #4
 800b90e:	b2d2      	uxtb	r2, r2
 800b910:	440b      	add	r3, r1
 800b912:	761a      	strb	r2, [r3, #24]
}
 800b914:	bf00      	nop
 800b916:	370c      	adds	r7, #12
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr
 800b920:	e000e100 	.word	0xe000e100
 800b924:	e000ed00 	.word	0xe000ed00

0800b928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b928:	b480      	push	{r7}
 800b92a:	b089      	sub	sp, #36	; 0x24
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f003 0307 	and.w	r3, r3, #7
 800b93a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b93c:	69fb      	ldr	r3, [r7, #28]
 800b93e:	f1c3 0307 	rsb	r3, r3, #7
 800b942:	2b04      	cmp	r3, #4
 800b944:	bf28      	it	cs
 800b946:	2304      	movcs	r3, #4
 800b948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	3304      	adds	r3, #4
 800b94e:	2b06      	cmp	r3, #6
 800b950:	d902      	bls.n	800b958 <NVIC_EncodePriority+0x30>
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	3b03      	subs	r3, #3
 800b956:	e000      	b.n	800b95a <NVIC_EncodePriority+0x32>
 800b958:	2300      	movs	r3, #0
 800b95a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b95c:	f04f 32ff 	mov.w	r2, #4294967295
 800b960:	69bb      	ldr	r3, [r7, #24]
 800b962:	fa02 f303 	lsl.w	r3, r2, r3
 800b966:	43da      	mvns	r2, r3
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	401a      	ands	r2, r3
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b970:	f04f 31ff 	mov.w	r1, #4294967295
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	fa01 f303 	lsl.w	r3, r1, r3
 800b97a:	43d9      	mvns	r1, r3
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b980:	4313      	orrs	r3, r2
         );
}
 800b982:	4618      	mov	r0, r3
 800b984:	3724      	adds	r7, #36	; 0x24
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr

0800b98e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b082      	sub	sp, #8
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f7ff ff4c 	bl	800b834 <__NVIC_SetPriorityGrouping>
}
 800b99c:	bf00      	nop
 800b99e:	3708      	adds	r7, #8
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b086      	sub	sp, #24
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	607a      	str	r2, [r7, #4]
 800b9b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b9b6:	f7ff ff61 	bl	800b87c <__NVIC_GetPriorityGrouping>
 800b9ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b9bc:	687a      	ldr	r2, [r7, #4]
 800b9be:	68b9      	ldr	r1, [r7, #8]
 800b9c0:	6978      	ldr	r0, [r7, #20]
 800b9c2:	f7ff ffb1 	bl	800b928 <NVIC_EncodePriority>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9cc:	4611      	mov	r1, r2
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7ff ff80 	bl	800b8d4 <__NVIC_SetPriority>
}
 800b9d4:	bf00      	nop
 800b9d6:	3718      	adds	r7, #24
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b9e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7ff ff54 	bl	800b898 <__NVIC_EnableIRQ>
}
 800b9f0:	bf00      	nop
 800b9f2:	3708      	adds	r7, #8
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800ba00:	2300      	movs	r3, #0
 800ba02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800ba04:	f7ff fee6 	bl	800b7d4 <HAL_GetTick>
 800ba08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d101      	bne.n	800ba14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800ba10:	2301      	movs	r3, #1
 800ba12:	e099      	b.n	800bb48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2202      	movs	r2, #2
 800ba20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f022 0201 	bic.w	r2, r2, #1
 800ba32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ba34:	e00f      	b.n	800ba56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ba36:	f7ff fecd 	bl	800b7d4 <HAL_GetTick>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	1ad3      	subs	r3, r2, r3
 800ba40:	2b05      	cmp	r3, #5
 800ba42:	d908      	bls.n	800ba56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2220      	movs	r2, #32
 800ba48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2203      	movs	r2, #3
 800ba4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800ba52:	2303      	movs	r3, #3
 800ba54:	e078      	b.n	800bb48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f003 0301 	and.w	r3, r3, #1
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d1e8      	bne.n	800ba36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800ba6c:	697a      	ldr	r2, [r7, #20]
 800ba6e:	4b38      	ldr	r3, [pc, #224]	; (800bb50 <HAL_DMA_Init+0x158>)
 800ba70:	4013      	ands	r3, r2
 800ba72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	685a      	ldr	r2, [r3, #4]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ba82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	691b      	ldr	r3, [r3, #16]
 800ba88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	699b      	ldr	r3, [r3, #24]
 800ba94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6a1b      	ldr	r3, [r3, #32]
 800baa0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800baa2:	697a      	ldr	r2, [r7, #20]
 800baa4:	4313      	orrs	r3, r2
 800baa6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baac:	2b04      	cmp	r3, #4
 800baae:	d107      	bne.n	800bac0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab8:	4313      	orrs	r3, r2
 800baba:	697a      	ldr	r2, [r7, #20]
 800babc:	4313      	orrs	r3, r2
 800babe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	697a      	ldr	r2, [r7, #20]
 800bac6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	695b      	ldr	r3, [r3, #20]
 800bace:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	f023 0307 	bic.w	r3, r3, #7
 800bad6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800badc:	697a      	ldr	r2, [r7, #20]
 800bade:	4313      	orrs	r3, r2
 800bae0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae6:	2b04      	cmp	r3, #4
 800bae8:	d117      	bne.n	800bb1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baee:	697a      	ldr	r2, [r7, #20]
 800baf0:	4313      	orrs	r3, r2
 800baf2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d00e      	beq.n	800bb1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 fa9f 	bl	800c040 <DMA_CheckFifoParam>
 800bb02:	4603      	mov	r3, r0
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d008      	beq.n	800bb1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2240      	movs	r2, #64	; 0x40
 800bb0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2201      	movs	r2, #1
 800bb12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800bb16:	2301      	movs	r3, #1
 800bb18:	e016      	b.n	800bb48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	697a      	ldr	r2, [r7, #20]
 800bb20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 fa56 	bl	800bfd4 <DMA_CalcBaseAndBitshift>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb30:	223f      	movs	r2, #63	; 0x3f
 800bb32:	409a      	lsls	r2, r3
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2201      	movs	r2, #1
 800bb42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3718      	adds	r7, #24
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	f010803f 	.word	0xf010803f

0800bb54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b086      	sub	sp, #24
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	60b9      	str	r1, [r7, #8]
 800bb5e:	607a      	str	r2, [r7, #4]
 800bb60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bb62:	2300      	movs	r3, #0
 800bb64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d101      	bne.n	800bb7a <HAL_DMA_Start_IT+0x26>
 800bb76:	2302      	movs	r3, #2
 800bb78:	e040      	b.n	800bbfc <HAL_DMA_Start_IT+0xa8>
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d12f      	bne.n	800bbee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2202      	movs	r2, #2
 800bb92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	68b9      	ldr	r1, [r7, #8]
 800bba2:	68f8      	ldr	r0, [r7, #12]
 800bba4:	f000 f9e8 	bl	800bf78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbac:	223f      	movs	r2, #63	; 0x3f
 800bbae:	409a      	lsls	r2, r3
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f042 0216 	orr.w	r2, r2, #22
 800bbc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d007      	beq.n	800bbdc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f042 0208 	orr.w	r2, r2, #8
 800bbda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f042 0201 	orr.w	r2, r2, #1
 800bbea:	601a      	str	r2, [r3, #0]
 800bbec:	e005      	b.n	800bbfa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800bbf6:	2302      	movs	r3, #2
 800bbf8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800bbfa:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3718      	adds	r7, #24
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	2b02      	cmp	r3, #2
 800bc16:	d004      	beq.n	800bc22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2280      	movs	r2, #128	; 0x80
 800bc1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800bc1e:	2301      	movs	r3, #1
 800bc20:	e00c      	b.n	800bc3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2205      	movs	r2, #5
 800bc26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f022 0201 	bic.w	r2, r2, #1
 800bc38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800bc3a:	2300      	movs	r3, #0
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	370c      	adds	r7, #12
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b086      	sub	sp, #24
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800bc50:	2300      	movs	r3, #0
 800bc52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800bc54:	4b92      	ldr	r3, [pc, #584]	; (800bea0 <HAL_DMA_IRQHandler+0x258>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4a92      	ldr	r2, [pc, #584]	; (800bea4 <HAL_DMA_IRQHandler+0x25c>)
 800bc5a:	fba2 2303 	umull	r2, r3, r2, r3
 800bc5e:	0a9b      	lsrs	r3, r3, #10
 800bc60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc72:	2208      	movs	r2, #8
 800bc74:	409a      	lsls	r2, r3
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	4013      	ands	r3, r2
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d01a      	beq.n	800bcb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f003 0304 	and.w	r3, r3, #4
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d013      	beq.n	800bcb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	681a      	ldr	r2, [r3, #0]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f022 0204 	bic.w	r2, r2, #4
 800bc9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bca0:	2208      	movs	r2, #8
 800bca2:	409a      	lsls	r2, r3
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcac:	f043 0201 	orr.w	r2, r3, #1
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcb8:	2201      	movs	r2, #1
 800bcba:	409a      	lsls	r2, r3
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	4013      	ands	r3, r2
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d012      	beq.n	800bcea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	695b      	ldr	r3, [r3, #20]
 800bcca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d00b      	beq.n	800bcea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	409a      	lsls	r2, r3
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bce2:	f043 0202 	orr.w	r2, r3, #2
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcee:	2204      	movs	r2, #4
 800bcf0:	409a      	lsls	r2, r3
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	4013      	ands	r3, r2
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d012      	beq.n	800bd20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f003 0302 	and.w	r3, r3, #2
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d00b      	beq.n	800bd20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd0c:	2204      	movs	r2, #4
 800bd0e:	409a      	lsls	r2, r3
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd18:	f043 0204 	orr.w	r2, r3, #4
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd24:	2210      	movs	r2, #16
 800bd26:	409a      	lsls	r2, r3
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	4013      	ands	r3, r2
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d043      	beq.n	800bdb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f003 0308 	and.w	r3, r3, #8
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d03c      	beq.n	800bdb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd42:	2210      	movs	r2, #16
 800bd44:	409a      	lsls	r2, r3
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d018      	beq.n	800bd8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d108      	bne.n	800bd78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d024      	beq.n	800bdb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	4798      	blx	r3
 800bd76:	e01f      	b.n	800bdb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d01b      	beq.n	800bdb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	4798      	blx	r3
 800bd88:	e016      	b.n	800bdb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d107      	bne.n	800bda8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f022 0208 	bic.w	r2, r2, #8
 800bda6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d003      	beq.n	800bdb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdbc:	2220      	movs	r2, #32
 800bdbe:	409a      	lsls	r2, r3
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	4013      	ands	r3, r2
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f000 808e 	beq.w	800bee6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f003 0310 	and.w	r3, r3, #16
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	f000 8086 	beq.w	800bee6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdde:	2220      	movs	r2, #32
 800bde0:	409a      	lsls	r2, r3
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	2b05      	cmp	r3, #5
 800bdf0:	d136      	bne.n	800be60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	681a      	ldr	r2, [r3, #0]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f022 0216 	bic.w	r2, r2, #22
 800be00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	695a      	ldr	r2, [r3, #20]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800be10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be16:	2b00      	cmp	r3, #0
 800be18:	d103      	bne.n	800be22 <HAL_DMA_IRQHandler+0x1da>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d007      	beq.n	800be32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f022 0208 	bic.w	r2, r2, #8
 800be30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be36:	223f      	movs	r2, #63	; 0x3f
 800be38:	409a      	lsls	r2, r3
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2200      	movs	r2, #0
 800be42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2201      	movs	r2, #1
 800be4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be52:	2b00      	cmp	r3, #0
 800be54:	d07d      	beq.n	800bf52 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	4798      	blx	r3
        }
        return;
 800be5e:	e078      	b.n	800bf52 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d01c      	beq.n	800bea8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d108      	bne.n	800be8e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be80:	2b00      	cmp	r3, #0
 800be82:	d030      	beq.n	800bee6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	4798      	blx	r3
 800be8c:	e02b      	b.n	800bee6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be92:	2b00      	cmp	r3, #0
 800be94:	d027      	beq.n	800bee6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	4798      	blx	r3
 800be9e:	e022      	b.n	800bee6 <HAL_DMA_IRQHandler+0x29e>
 800bea0:	20000828 	.word	0x20000828
 800bea4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d10f      	bne.n	800bed6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f022 0210 	bic.w	r2, r2, #16
 800bec4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2201      	movs	r2, #1
 800bed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d003      	beq.n	800bee6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beea:	2b00      	cmp	r3, #0
 800beec:	d032      	beq.n	800bf54 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bef2:	f003 0301 	and.w	r3, r3, #1
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d022      	beq.n	800bf40 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2205      	movs	r2, #5
 800befe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	681a      	ldr	r2, [r3, #0]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f022 0201 	bic.w	r2, r2, #1
 800bf10:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	3301      	adds	r3, #1
 800bf16:	60bb      	str	r3, [r7, #8]
 800bf18:	697a      	ldr	r2, [r7, #20]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d307      	bcc.n	800bf2e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f003 0301 	and.w	r3, r3, #1
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d1f2      	bne.n	800bf12 <HAL_DMA_IRQHandler+0x2ca>
 800bf2c:	e000      	b.n	800bf30 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800bf2e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d005      	beq.n	800bf54 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	4798      	blx	r3
 800bf50:	e000      	b.n	800bf54 <HAL_DMA_IRQHandler+0x30c>
        return;
 800bf52:	bf00      	nop
    }
  }
}
 800bf54:	3718      	adds	r7, #24
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop

0800bf5c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b083      	sub	sp, #12
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bf6a:	b2db      	uxtb	r3, r3
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	370c      	adds	r7, #12
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b085      	sub	sp, #20
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	60f8      	str	r0, [r7, #12]
 800bf80:	60b9      	str	r1, [r7, #8]
 800bf82:	607a      	str	r2, [r7, #4]
 800bf84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	681a      	ldr	r2, [r3, #0]
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bf94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	683a      	ldr	r2, [r7, #0]
 800bf9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	2b40      	cmp	r3, #64	; 0x40
 800bfa4:	d108      	bne.n	800bfb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	687a      	ldr	r2, [r7, #4]
 800bfac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	68ba      	ldr	r2, [r7, #8]
 800bfb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800bfb6:	e007      	b.n	800bfc8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	68ba      	ldr	r2, [r7, #8]
 800bfbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	60da      	str	r2, [r3, #12]
}
 800bfc8:	bf00      	nop
 800bfca:	3714      	adds	r7, #20
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr

0800bfd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b085      	sub	sp, #20
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	b2db      	uxtb	r3, r3
 800bfe2:	3b10      	subs	r3, #16
 800bfe4:	4a14      	ldr	r2, [pc, #80]	; (800c038 <DMA_CalcBaseAndBitshift+0x64>)
 800bfe6:	fba2 2303 	umull	r2, r3, r2, r3
 800bfea:	091b      	lsrs	r3, r3, #4
 800bfec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bfee:	4a13      	ldr	r2, [pc, #76]	; (800c03c <DMA_CalcBaseAndBitshift+0x68>)
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	4413      	add	r3, r2
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	461a      	mov	r2, r3
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2b03      	cmp	r3, #3
 800c000:	d909      	bls.n	800c016 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c00a:	f023 0303 	bic.w	r3, r3, #3
 800c00e:	1d1a      	adds	r2, r3, #4
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	659a      	str	r2, [r3, #88]	; 0x58
 800c014:	e007      	b.n	800c026 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c01e:	f023 0303 	bic.w	r3, r3, #3
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3714      	adds	r7, #20
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr
 800c036:	bf00      	nop
 800c038:	aaaaaaab 	.word	0xaaaaaaab
 800c03c:	0801c630 	.word	0x0801c630

0800c040 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c040:	b480      	push	{r7}
 800c042:	b085      	sub	sp, #20
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c048:	2300      	movs	r3, #0
 800c04a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c050:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	699b      	ldr	r3, [r3, #24]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d11f      	bne.n	800c09a <DMA_CheckFifoParam+0x5a>
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	2b03      	cmp	r3, #3
 800c05e:	d856      	bhi.n	800c10e <DMA_CheckFifoParam+0xce>
 800c060:	a201      	add	r2, pc, #4	; (adr r2, 800c068 <DMA_CheckFifoParam+0x28>)
 800c062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c066:	bf00      	nop
 800c068:	0800c079 	.word	0x0800c079
 800c06c:	0800c08b 	.word	0x0800c08b
 800c070:	0800c079 	.word	0x0800c079
 800c074:	0800c10f 	.word	0x0800c10f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c07c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c080:	2b00      	cmp	r3, #0
 800c082:	d046      	beq.n	800c112 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800c084:	2301      	movs	r3, #1
 800c086:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c088:	e043      	b.n	800c112 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c08e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c092:	d140      	bne.n	800c116 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800c094:	2301      	movs	r3, #1
 800c096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c098:	e03d      	b.n	800c116 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	699b      	ldr	r3, [r3, #24]
 800c09e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0a2:	d121      	bne.n	800c0e8 <DMA_CheckFifoParam+0xa8>
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	2b03      	cmp	r3, #3
 800c0a8:	d837      	bhi.n	800c11a <DMA_CheckFifoParam+0xda>
 800c0aa:	a201      	add	r2, pc, #4	; (adr r2, 800c0b0 <DMA_CheckFifoParam+0x70>)
 800c0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b0:	0800c0c1 	.word	0x0800c0c1
 800c0b4:	0800c0c7 	.word	0x0800c0c7
 800c0b8:	0800c0c1 	.word	0x0800c0c1
 800c0bc:	0800c0d9 	.word	0x0800c0d9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	73fb      	strb	r3, [r7, #15]
      break;
 800c0c4:	e030      	b.n	800c128 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d025      	beq.n	800c11e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c0d6:	e022      	b.n	800c11e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c0e0:	d11f      	bne.n	800c122 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c0e6:	e01c      	b.n	800c122 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	2b02      	cmp	r3, #2
 800c0ec:	d903      	bls.n	800c0f6 <DMA_CheckFifoParam+0xb6>
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	2b03      	cmp	r3, #3
 800c0f2:	d003      	beq.n	800c0fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c0f4:	e018      	b.n	800c128 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	73fb      	strb	r3, [r7, #15]
      break;
 800c0fa:	e015      	b.n	800c128 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c104:	2b00      	cmp	r3, #0
 800c106:	d00e      	beq.n	800c126 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800c108:	2301      	movs	r3, #1
 800c10a:	73fb      	strb	r3, [r7, #15]
      break;
 800c10c:	e00b      	b.n	800c126 <DMA_CheckFifoParam+0xe6>
      break;
 800c10e:	bf00      	nop
 800c110:	e00a      	b.n	800c128 <DMA_CheckFifoParam+0xe8>
      break;
 800c112:	bf00      	nop
 800c114:	e008      	b.n	800c128 <DMA_CheckFifoParam+0xe8>
      break;
 800c116:	bf00      	nop
 800c118:	e006      	b.n	800c128 <DMA_CheckFifoParam+0xe8>
      break;
 800c11a:	bf00      	nop
 800c11c:	e004      	b.n	800c128 <DMA_CheckFifoParam+0xe8>
      break;
 800c11e:	bf00      	nop
 800c120:	e002      	b.n	800c128 <DMA_CheckFifoParam+0xe8>
      break;   
 800c122:	bf00      	nop
 800c124:	e000      	b.n	800c128 <DMA_CheckFifoParam+0xe8>
      break;
 800c126:	bf00      	nop
    }
  } 
  
  return status; 
 800c128:	7bfb      	ldrb	r3, [r7, #15]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3714      	adds	r7, #20
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop

0800c138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c138:	b480      	push	{r7}
 800c13a:	b089      	sub	sp, #36	; 0x24
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c142:	2300      	movs	r3, #0
 800c144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c146:	2300      	movs	r3, #0
 800c148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c14a:	2300      	movs	r3, #0
 800c14c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c14e:	2300      	movs	r3, #0
 800c150:	61fb      	str	r3, [r7, #28]
 800c152:	e16b      	b.n	800c42c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c154:	2201      	movs	r2, #1
 800c156:	69fb      	ldr	r3, [r7, #28]
 800c158:	fa02 f303 	lsl.w	r3, r2, r3
 800c15c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	697a      	ldr	r2, [r7, #20]
 800c164:	4013      	ands	r3, r2
 800c166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c168:	693a      	ldr	r2, [r7, #16]
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	429a      	cmp	r2, r3
 800c16e:	f040 815a 	bne.w	800c426 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	2b01      	cmp	r3, #1
 800c178:	d00b      	beq.n	800c192 <HAL_GPIO_Init+0x5a>
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	2b02      	cmp	r3, #2
 800c180:	d007      	beq.n	800c192 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c186:	2b11      	cmp	r3, #17
 800c188:	d003      	beq.n	800c192 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	2b12      	cmp	r3, #18
 800c190:	d130      	bne.n	800c1f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	689b      	ldr	r3, [r3, #8]
 800c196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c198:	69fb      	ldr	r3, [r7, #28]
 800c19a:	005b      	lsls	r3, r3, #1
 800c19c:	2203      	movs	r2, #3
 800c19e:	fa02 f303 	lsl.w	r3, r2, r3
 800c1a2:	43db      	mvns	r3, r3
 800c1a4:	69ba      	ldr	r2, [r7, #24]
 800c1a6:	4013      	ands	r3, r2
 800c1a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	68da      	ldr	r2, [r3, #12]
 800c1ae:	69fb      	ldr	r3, [r7, #28]
 800c1b0:	005b      	lsls	r3, r3, #1
 800c1b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c1b6:	69ba      	ldr	r2, [r7, #24]
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	69ba      	ldr	r2, [r7, #24]
 800c1c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	69fb      	ldr	r3, [r7, #28]
 800c1cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c1d0:	43db      	mvns	r3, r3
 800c1d2:	69ba      	ldr	r2, [r7, #24]
 800c1d4:	4013      	ands	r3, r2
 800c1d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	091b      	lsrs	r3, r3, #4
 800c1de:	f003 0201 	and.w	r2, r3, #1
 800c1e2:	69fb      	ldr	r3, [r7, #28]
 800c1e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1e8:	69ba      	ldr	r2, [r7, #24]
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	69ba      	ldr	r2, [r7, #24]
 800c1f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	68db      	ldr	r3, [r3, #12]
 800c1f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c1fa:	69fb      	ldr	r3, [r7, #28]
 800c1fc:	005b      	lsls	r3, r3, #1
 800c1fe:	2203      	movs	r2, #3
 800c200:	fa02 f303 	lsl.w	r3, r2, r3
 800c204:	43db      	mvns	r3, r3
 800c206:	69ba      	ldr	r2, [r7, #24]
 800c208:	4013      	ands	r3, r2
 800c20a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	689a      	ldr	r2, [r3, #8]
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	005b      	lsls	r3, r3, #1
 800c214:	fa02 f303 	lsl.w	r3, r2, r3
 800c218:	69ba      	ldr	r2, [r7, #24]
 800c21a:	4313      	orrs	r3, r2
 800c21c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	69ba      	ldr	r2, [r7, #24]
 800c222:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	2b02      	cmp	r3, #2
 800c22a:	d003      	beq.n	800c234 <HAL_GPIO_Init+0xfc>
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	2b12      	cmp	r3, #18
 800c232:	d123      	bne.n	800c27c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	08da      	lsrs	r2, r3, #3
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	3208      	adds	r2, #8
 800c23c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c240:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c242:	69fb      	ldr	r3, [r7, #28]
 800c244:	f003 0307 	and.w	r3, r3, #7
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	220f      	movs	r2, #15
 800c24c:	fa02 f303 	lsl.w	r3, r2, r3
 800c250:	43db      	mvns	r3, r3
 800c252:	69ba      	ldr	r2, [r7, #24]
 800c254:	4013      	ands	r3, r2
 800c256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	691a      	ldr	r2, [r3, #16]
 800c25c:	69fb      	ldr	r3, [r7, #28]
 800c25e:	f003 0307 	and.w	r3, r3, #7
 800c262:	009b      	lsls	r3, r3, #2
 800c264:	fa02 f303 	lsl.w	r3, r2, r3
 800c268:	69ba      	ldr	r2, [r7, #24]
 800c26a:	4313      	orrs	r3, r2
 800c26c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c26e:	69fb      	ldr	r3, [r7, #28]
 800c270:	08da      	lsrs	r2, r3, #3
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	3208      	adds	r2, #8
 800c276:	69b9      	ldr	r1, [r7, #24]
 800c278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c282:	69fb      	ldr	r3, [r7, #28]
 800c284:	005b      	lsls	r3, r3, #1
 800c286:	2203      	movs	r2, #3
 800c288:	fa02 f303 	lsl.w	r3, r2, r3
 800c28c:	43db      	mvns	r3, r3
 800c28e:	69ba      	ldr	r2, [r7, #24]
 800c290:	4013      	ands	r3, r2
 800c292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	f003 0203 	and.w	r2, r3, #3
 800c29c:	69fb      	ldr	r3, [r7, #28]
 800c29e:	005b      	lsls	r3, r3, #1
 800c2a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c2a4:	69ba      	ldr	r2, [r7, #24]
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	69ba      	ldr	r2, [r7, #24]
 800c2ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	f000 80b4 	beq.w	800c426 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c2be:	2300      	movs	r3, #0
 800c2c0:	60fb      	str	r3, [r7, #12]
 800c2c2:	4b60      	ldr	r3, [pc, #384]	; (800c444 <HAL_GPIO_Init+0x30c>)
 800c2c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2c6:	4a5f      	ldr	r2, [pc, #380]	; (800c444 <HAL_GPIO_Init+0x30c>)
 800c2c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c2cc:	6453      	str	r3, [r2, #68]	; 0x44
 800c2ce:	4b5d      	ldr	r3, [pc, #372]	; (800c444 <HAL_GPIO_Init+0x30c>)
 800c2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c2d6:	60fb      	str	r3, [r7, #12]
 800c2d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c2da:	4a5b      	ldr	r2, [pc, #364]	; (800c448 <HAL_GPIO_Init+0x310>)
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	089b      	lsrs	r3, r3, #2
 800c2e0:	3302      	adds	r3, #2
 800c2e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c2e8:	69fb      	ldr	r3, [r7, #28]
 800c2ea:	f003 0303 	and.w	r3, r3, #3
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	220f      	movs	r2, #15
 800c2f2:	fa02 f303 	lsl.w	r3, r2, r3
 800c2f6:	43db      	mvns	r3, r3
 800c2f8:	69ba      	ldr	r2, [r7, #24]
 800c2fa:	4013      	ands	r3, r2
 800c2fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	4a52      	ldr	r2, [pc, #328]	; (800c44c <HAL_GPIO_Init+0x314>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d02b      	beq.n	800c35e <HAL_GPIO_Init+0x226>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	4a51      	ldr	r2, [pc, #324]	; (800c450 <HAL_GPIO_Init+0x318>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d025      	beq.n	800c35a <HAL_GPIO_Init+0x222>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	4a50      	ldr	r2, [pc, #320]	; (800c454 <HAL_GPIO_Init+0x31c>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d01f      	beq.n	800c356 <HAL_GPIO_Init+0x21e>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	4a4f      	ldr	r2, [pc, #316]	; (800c458 <HAL_GPIO_Init+0x320>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d019      	beq.n	800c352 <HAL_GPIO_Init+0x21a>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	4a4e      	ldr	r2, [pc, #312]	; (800c45c <HAL_GPIO_Init+0x324>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d013      	beq.n	800c34e <HAL_GPIO_Init+0x216>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	4a4d      	ldr	r2, [pc, #308]	; (800c460 <HAL_GPIO_Init+0x328>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d00d      	beq.n	800c34a <HAL_GPIO_Init+0x212>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	4a4c      	ldr	r2, [pc, #304]	; (800c464 <HAL_GPIO_Init+0x32c>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d007      	beq.n	800c346 <HAL_GPIO_Init+0x20e>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	4a4b      	ldr	r2, [pc, #300]	; (800c468 <HAL_GPIO_Init+0x330>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d101      	bne.n	800c342 <HAL_GPIO_Init+0x20a>
 800c33e:	2307      	movs	r3, #7
 800c340:	e00e      	b.n	800c360 <HAL_GPIO_Init+0x228>
 800c342:	2308      	movs	r3, #8
 800c344:	e00c      	b.n	800c360 <HAL_GPIO_Init+0x228>
 800c346:	2306      	movs	r3, #6
 800c348:	e00a      	b.n	800c360 <HAL_GPIO_Init+0x228>
 800c34a:	2305      	movs	r3, #5
 800c34c:	e008      	b.n	800c360 <HAL_GPIO_Init+0x228>
 800c34e:	2304      	movs	r3, #4
 800c350:	e006      	b.n	800c360 <HAL_GPIO_Init+0x228>
 800c352:	2303      	movs	r3, #3
 800c354:	e004      	b.n	800c360 <HAL_GPIO_Init+0x228>
 800c356:	2302      	movs	r3, #2
 800c358:	e002      	b.n	800c360 <HAL_GPIO_Init+0x228>
 800c35a:	2301      	movs	r3, #1
 800c35c:	e000      	b.n	800c360 <HAL_GPIO_Init+0x228>
 800c35e:	2300      	movs	r3, #0
 800c360:	69fa      	ldr	r2, [r7, #28]
 800c362:	f002 0203 	and.w	r2, r2, #3
 800c366:	0092      	lsls	r2, r2, #2
 800c368:	4093      	lsls	r3, r2
 800c36a:	69ba      	ldr	r2, [r7, #24]
 800c36c:	4313      	orrs	r3, r2
 800c36e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c370:	4935      	ldr	r1, [pc, #212]	; (800c448 <HAL_GPIO_Init+0x310>)
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	089b      	lsrs	r3, r3, #2
 800c376:	3302      	adds	r3, #2
 800c378:	69ba      	ldr	r2, [r7, #24]
 800c37a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c37e:	4b3b      	ldr	r3, [pc, #236]	; (800c46c <HAL_GPIO_Init+0x334>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	43db      	mvns	r3, r3
 800c388:	69ba      	ldr	r2, [r7, #24]
 800c38a:	4013      	ands	r3, r2
 800c38c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c396:	2b00      	cmp	r3, #0
 800c398:	d003      	beq.n	800c3a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800c39a:	69ba      	ldr	r2, [r7, #24]
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c3a2:	4a32      	ldr	r2, [pc, #200]	; (800c46c <HAL_GPIO_Init+0x334>)
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c3a8:	4b30      	ldr	r3, [pc, #192]	; (800c46c <HAL_GPIO_Init+0x334>)
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	43db      	mvns	r3, r3
 800c3b2:	69ba      	ldr	r2, [r7, #24]
 800c3b4:	4013      	ands	r3, r2
 800c3b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d003      	beq.n	800c3cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800c3c4:	69ba      	ldr	r2, [r7, #24]
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c3cc:	4a27      	ldr	r2, [pc, #156]	; (800c46c <HAL_GPIO_Init+0x334>)
 800c3ce:	69bb      	ldr	r3, [r7, #24]
 800c3d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c3d2:	4b26      	ldr	r3, [pc, #152]	; (800c46c <HAL_GPIO_Init+0x334>)
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	43db      	mvns	r3, r3
 800c3dc:	69ba      	ldr	r2, [r7, #24]
 800c3de:	4013      	ands	r3, r2
 800c3e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d003      	beq.n	800c3f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c3ee:	69ba      	ldr	r2, [r7, #24]
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c3f6:	4a1d      	ldr	r2, [pc, #116]	; (800c46c <HAL_GPIO_Init+0x334>)
 800c3f8:	69bb      	ldr	r3, [r7, #24]
 800c3fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c3fc:	4b1b      	ldr	r3, [pc, #108]	; (800c46c <HAL_GPIO_Init+0x334>)
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	43db      	mvns	r3, r3
 800c406:	69ba      	ldr	r2, [r7, #24]
 800c408:	4013      	ands	r3, r2
 800c40a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c414:	2b00      	cmp	r3, #0
 800c416:	d003      	beq.n	800c420 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c418:	69ba      	ldr	r2, [r7, #24]
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	4313      	orrs	r3, r2
 800c41e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c420:	4a12      	ldr	r2, [pc, #72]	; (800c46c <HAL_GPIO_Init+0x334>)
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c426:	69fb      	ldr	r3, [r7, #28]
 800c428:	3301      	adds	r3, #1
 800c42a:	61fb      	str	r3, [r7, #28]
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	2b0f      	cmp	r3, #15
 800c430:	f67f ae90 	bls.w	800c154 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c434:	bf00      	nop
 800c436:	bf00      	nop
 800c438:	3724      	adds	r7, #36	; 0x24
 800c43a:	46bd      	mov	sp, r7
 800c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c440:	4770      	bx	lr
 800c442:	bf00      	nop
 800c444:	40023800 	.word	0x40023800
 800c448:	40013800 	.word	0x40013800
 800c44c:	40020000 	.word	0x40020000
 800c450:	40020400 	.word	0x40020400
 800c454:	40020800 	.word	0x40020800
 800c458:	40020c00 	.word	0x40020c00
 800c45c:	40021000 	.word	0x40021000
 800c460:	40021400 	.word	0x40021400
 800c464:	40021800 	.word	0x40021800
 800c468:	40021c00 	.word	0x40021c00
 800c46c:	40013c00 	.word	0x40013c00

0800c470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c470:	b480      	push	{r7}
 800c472:	b083      	sub	sp, #12
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	460b      	mov	r3, r1
 800c47a:	807b      	strh	r3, [r7, #2]
 800c47c:	4613      	mov	r3, r2
 800c47e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c480:	787b      	ldrb	r3, [r7, #1]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d003      	beq.n	800c48e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c486:	887a      	ldrh	r2, [r7, #2]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c48c:	e003      	b.n	800c496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c48e:	887b      	ldrh	r3, [r7, #2]
 800c490:	041a      	lsls	r2, r3, #16
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	619a      	str	r2, [r3, #24]
}
 800c496:	bf00      	nop
 800c498:	370c      	adds	r7, #12
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr
	...

0800c4a4 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d101      	bne.n	800c4ba <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	e043      	b.n	800c542 <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d106      	bne.n	800c4d4 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800c4ce:	68f8      	ldr	r0, [r7, #12]
 800c4d0:	f7f7 fce6 	bl	8003ea0 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681a      	ldr	r2, [r3, #0]
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	3308      	adds	r3, #8
 800c4dc:	4619      	mov	r1, r3
 800c4de:	4610      	mov	r0, r2
 800c4e0:	f003 f9b6 	bl	800f850 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	6818      	ldr	r0, [r3, #0]
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	689b      	ldr	r3, [r3, #8]
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	68b9      	ldr	r1, [r7, #8]
 800c4f0:	f003 fa00 	bl	800f8f4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	6858      	ldr	r0, [r3, #4]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	689a      	ldr	r2, [r3, #8]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c500:	6879      	ldr	r1, [r7, #4]
 800c502:	f003 fa35 	bl	800f970 <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	68fa      	ldr	r2, [r7, #12]
 800c50c:	6892      	ldr	r2, [r2, #8]
 800c50e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	6892      	ldr	r2, [r2, #8]
 800c51a:	f041 0101 	orr.w	r1, r1, #1
 800c51e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	695b      	ldr	r3, [r3, #20]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d103      	bne.n	800c532 <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800c52a:	4b08      	ldr	r3, [pc, #32]	; (800c54c <HAL_NOR_Init+0xa8>)
 800c52c:	2200      	movs	r2, #0
 800c52e:	601a      	str	r2, [r3, #0]
 800c530:	e002      	b.n	800c538 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800c532:	4b06      	ldr	r3, [pc, #24]	; (800c54c <HAL_NOR_Init+0xa8>)
 800c534:	2201      	movs	r2, #1
 800c536:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2201      	movs	r2, #1
 800c53c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3710      	adds	r7, #16
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	2000100c 	.word	0x2000100c

0800c550 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c550:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c552:	b08f      	sub	sp, #60	; 0x3c
 800c554:	af0a      	add	r7, sp, #40	; 0x28
 800c556:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d101      	bne.n	800c562 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c55e:	2301      	movs	r3, #1
 800c560:	e10f      	b.n	800c782 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	2b00      	cmp	r3, #0
 800c572:	d106      	bne.n	800c582 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f009 fa61 	bl	8015a44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2203      	movs	r2, #3
 800c586:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c58e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c592:	2b00      	cmp	r3, #0
 800c594:	d102      	bne.n	800c59c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2200      	movs	r2, #0
 800c59a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f003 fb3a 	bl	800fc1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	603b      	str	r3, [r7, #0]
 800c5ac:	687e      	ldr	r6, [r7, #4]
 800c5ae:	466d      	mov	r5, sp
 800c5b0:	f106 0410 	add.w	r4, r6, #16
 800c5b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c5b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c5b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c5ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c5bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c5c0:	e885 0003 	stmia.w	r5, {r0, r1}
 800c5c4:	1d33      	adds	r3, r6, #4
 800c5c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c5c8:	6838      	ldr	r0, [r7, #0]
 800c5ca:	f003 fa11 	bl	800f9f0 <USB_CoreInit>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d005      	beq.n	800c5e0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2202      	movs	r2, #2
 800c5d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	e0d0      	b.n	800c782 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f003 fb28 	bl	800fc3c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	73fb      	strb	r3, [r7, #15]
 800c5f0:	e04a      	b.n	800c688 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c5f2:	7bfa      	ldrb	r2, [r7, #15]
 800c5f4:	6879      	ldr	r1, [r7, #4]
 800c5f6:	4613      	mov	r3, r2
 800c5f8:	00db      	lsls	r3, r3, #3
 800c5fa:	1a9b      	subs	r3, r3, r2
 800c5fc:	009b      	lsls	r3, r3, #2
 800c5fe:	440b      	add	r3, r1
 800c600:	333d      	adds	r3, #61	; 0x3d
 800c602:	2201      	movs	r2, #1
 800c604:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c606:	7bfa      	ldrb	r2, [r7, #15]
 800c608:	6879      	ldr	r1, [r7, #4]
 800c60a:	4613      	mov	r3, r2
 800c60c:	00db      	lsls	r3, r3, #3
 800c60e:	1a9b      	subs	r3, r3, r2
 800c610:	009b      	lsls	r3, r3, #2
 800c612:	440b      	add	r3, r1
 800c614:	333c      	adds	r3, #60	; 0x3c
 800c616:	7bfa      	ldrb	r2, [r7, #15]
 800c618:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c61a:	7bfa      	ldrb	r2, [r7, #15]
 800c61c:	7bfb      	ldrb	r3, [r7, #15]
 800c61e:	b298      	uxth	r0, r3
 800c620:	6879      	ldr	r1, [r7, #4]
 800c622:	4613      	mov	r3, r2
 800c624:	00db      	lsls	r3, r3, #3
 800c626:	1a9b      	subs	r3, r3, r2
 800c628:	009b      	lsls	r3, r3, #2
 800c62a:	440b      	add	r3, r1
 800c62c:	3342      	adds	r3, #66	; 0x42
 800c62e:	4602      	mov	r2, r0
 800c630:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c632:	7bfa      	ldrb	r2, [r7, #15]
 800c634:	6879      	ldr	r1, [r7, #4]
 800c636:	4613      	mov	r3, r2
 800c638:	00db      	lsls	r3, r3, #3
 800c63a:	1a9b      	subs	r3, r3, r2
 800c63c:	009b      	lsls	r3, r3, #2
 800c63e:	440b      	add	r3, r1
 800c640:	333f      	adds	r3, #63	; 0x3f
 800c642:	2200      	movs	r2, #0
 800c644:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c646:	7bfa      	ldrb	r2, [r7, #15]
 800c648:	6879      	ldr	r1, [r7, #4]
 800c64a:	4613      	mov	r3, r2
 800c64c:	00db      	lsls	r3, r3, #3
 800c64e:	1a9b      	subs	r3, r3, r2
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	440b      	add	r3, r1
 800c654:	3344      	adds	r3, #68	; 0x44
 800c656:	2200      	movs	r2, #0
 800c658:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c65a:	7bfa      	ldrb	r2, [r7, #15]
 800c65c:	6879      	ldr	r1, [r7, #4]
 800c65e:	4613      	mov	r3, r2
 800c660:	00db      	lsls	r3, r3, #3
 800c662:	1a9b      	subs	r3, r3, r2
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	440b      	add	r3, r1
 800c668:	3348      	adds	r3, #72	; 0x48
 800c66a:	2200      	movs	r2, #0
 800c66c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c66e:	7bfa      	ldrb	r2, [r7, #15]
 800c670:	6879      	ldr	r1, [r7, #4]
 800c672:	4613      	mov	r3, r2
 800c674:	00db      	lsls	r3, r3, #3
 800c676:	1a9b      	subs	r3, r3, r2
 800c678:	009b      	lsls	r3, r3, #2
 800c67a:	440b      	add	r3, r1
 800c67c:	3350      	adds	r3, #80	; 0x50
 800c67e:	2200      	movs	r2, #0
 800c680:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c682:	7bfb      	ldrb	r3, [r7, #15]
 800c684:	3301      	adds	r3, #1
 800c686:	73fb      	strb	r3, [r7, #15]
 800c688:	7bfa      	ldrb	r2, [r7, #15]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	429a      	cmp	r2, r3
 800c690:	d3af      	bcc.n	800c5f2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c692:	2300      	movs	r3, #0
 800c694:	73fb      	strb	r3, [r7, #15]
 800c696:	e044      	b.n	800c722 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c698:	7bfa      	ldrb	r2, [r7, #15]
 800c69a:	6879      	ldr	r1, [r7, #4]
 800c69c:	4613      	mov	r3, r2
 800c69e:	00db      	lsls	r3, r3, #3
 800c6a0:	1a9b      	subs	r3, r3, r2
 800c6a2:	009b      	lsls	r3, r3, #2
 800c6a4:	440b      	add	r3, r1
 800c6a6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c6ae:	7bfa      	ldrb	r2, [r7, #15]
 800c6b0:	6879      	ldr	r1, [r7, #4]
 800c6b2:	4613      	mov	r3, r2
 800c6b4:	00db      	lsls	r3, r3, #3
 800c6b6:	1a9b      	subs	r3, r3, r2
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	440b      	add	r3, r1
 800c6bc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c6c0:	7bfa      	ldrb	r2, [r7, #15]
 800c6c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c6c4:	7bfa      	ldrb	r2, [r7, #15]
 800c6c6:	6879      	ldr	r1, [r7, #4]
 800c6c8:	4613      	mov	r3, r2
 800c6ca:	00db      	lsls	r3, r3, #3
 800c6cc:	1a9b      	subs	r3, r3, r2
 800c6ce:	009b      	lsls	r3, r3, #2
 800c6d0:	440b      	add	r3, r1
 800c6d2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c6da:	7bfa      	ldrb	r2, [r7, #15]
 800c6dc:	6879      	ldr	r1, [r7, #4]
 800c6de:	4613      	mov	r3, r2
 800c6e0:	00db      	lsls	r3, r3, #3
 800c6e2:	1a9b      	subs	r3, r3, r2
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	440b      	add	r3, r1
 800c6e8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c6f0:	7bfa      	ldrb	r2, [r7, #15]
 800c6f2:	6879      	ldr	r1, [r7, #4]
 800c6f4:	4613      	mov	r3, r2
 800c6f6:	00db      	lsls	r3, r3, #3
 800c6f8:	1a9b      	subs	r3, r3, r2
 800c6fa:	009b      	lsls	r3, r3, #2
 800c6fc:	440b      	add	r3, r1
 800c6fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c702:	2200      	movs	r2, #0
 800c704:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c706:	7bfa      	ldrb	r2, [r7, #15]
 800c708:	6879      	ldr	r1, [r7, #4]
 800c70a:	4613      	mov	r3, r2
 800c70c:	00db      	lsls	r3, r3, #3
 800c70e:	1a9b      	subs	r3, r3, r2
 800c710:	009b      	lsls	r3, r3, #2
 800c712:	440b      	add	r3, r1
 800c714:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c718:	2200      	movs	r2, #0
 800c71a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c71c:	7bfb      	ldrb	r3, [r7, #15]
 800c71e:	3301      	adds	r3, #1
 800c720:	73fb      	strb	r3, [r7, #15]
 800c722:	7bfa      	ldrb	r2, [r7, #15]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d3b5      	bcc.n	800c698 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	603b      	str	r3, [r7, #0]
 800c732:	687e      	ldr	r6, [r7, #4]
 800c734:	466d      	mov	r5, sp
 800c736:	f106 0410 	add.w	r4, r6, #16
 800c73a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c73c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c73e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c740:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c742:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c746:	e885 0003 	stmia.w	r5, {r0, r1}
 800c74a:	1d33      	adds	r3, r6, #4
 800c74c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c74e:	6838      	ldr	r0, [r7, #0]
 800c750:	f003 fa9e 	bl	800fc90 <USB_DevInit>
 800c754:	4603      	mov	r3, r0
 800c756:	2b00      	cmp	r3, #0
 800c758:	d005      	beq.n	800c766 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2202      	movs	r2, #2
 800c75e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c762:	2301      	movs	r3, #1
 800c764:	e00d      	b.n	800c782 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2201      	movs	r2, #1
 800c772:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4618      	mov	r0, r3
 800c77c:	f004 fae6 	bl	8010d4c <USB_DevDisconnect>

  return HAL_OK;
 800c780:	2300      	movs	r3, #0
}
 800c782:	4618      	mov	r0, r3
 800c784:	3714      	adds	r7, #20
 800c786:	46bd      	mov	sp, r7
 800c788:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c78a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c78a:	b580      	push	{r7, lr}
 800c78c:	b084      	sub	sp, #16
 800c78e:	af00      	add	r7, sp, #0
 800c790:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d101      	bne.n	800c7a6 <HAL_PCD_Start+0x1c>
 800c7a2:	2302      	movs	r3, #2
 800c7a4:	e020      	b.n	800c7e8 <HAL_PCD_Start+0x5e>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7b2:	2b01      	cmp	r3, #1
 800c7b4:	d109      	bne.n	800c7ca <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c7ba:	2b01      	cmp	r3, #1
 800c7bc:	d005      	beq.n	800c7ca <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f003 fa12 	bl	800fbf8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f004 fa96 	bl	8010d0a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c7e6:	2300      	movs	r3, #0
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c7f0:	b590      	push	{r4, r7, lr}
 800c7f2:	b08d      	sub	sp, #52	; 0x34
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7fe:	6a3b      	ldr	r3, [r7, #32]
 800c800:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	4618      	mov	r0, r3
 800c808:	f004 fb54 	bl	8010eb4 <USB_GetMode>
 800c80c:	4603      	mov	r3, r0
 800c80e:	2b00      	cmp	r3, #0
 800c810:	f040 839d 	bne.w	800cf4e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4618      	mov	r0, r3
 800c81a:	f004 fab8 	bl	8010d8e <USB_ReadInterrupts>
 800c81e:	4603      	mov	r3, r0
 800c820:	2b00      	cmp	r3, #0
 800c822:	f000 8393 	beq.w	800cf4c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4618      	mov	r0, r3
 800c82c:	f004 faaf 	bl	8010d8e <USB_ReadInterrupts>
 800c830:	4603      	mov	r3, r0
 800c832:	f003 0302 	and.w	r3, r3, #2
 800c836:	2b02      	cmp	r3, #2
 800c838:	d107      	bne.n	800c84a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	695a      	ldr	r2, [r3, #20]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f002 0202 	and.w	r2, r2, #2
 800c848:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	4618      	mov	r0, r3
 800c850:	f004 fa9d 	bl	8010d8e <USB_ReadInterrupts>
 800c854:	4603      	mov	r3, r0
 800c856:	f003 0310 	and.w	r3, r3, #16
 800c85a:	2b10      	cmp	r3, #16
 800c85c:	d161      	bne.n	800c922 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	699a      	ldr	r2, [r3, #24]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f022 0210 	bic.w	r2, r2, #16
 800c86c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800c86e:	6a3b      	ldr	r3, [r7, #32]
 800c870:	6a1b      	ldr	r3, [r3, #32]
 800c872:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c874:	69bb      	ldr	r3, [r7, #24]
 800c876:	f003 020f 	and.w	r2, r3, #15
 800c87a:	4613      	mov	r3, r2
 800c87c:	00db      	lsls	r3, r3, #3
 800c87e:	1a9b      	subs	r3, r3, r2
 800c880:	009b      	lsls	r3, r3, #2
 800c882:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c886:	687a      	ldr	r2, [r7, #4]
 800c888:	4413      	add	r3, r2
 800c88a:	3304      	adds	r3, #4
 800c88c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c88e:	69bb      	ldr	r3, [r7, #24]
 800c890:	0c5b      	lsrs	r3, r3, #17
 800c892:	f003 030f 	and.w	r3, r3, #15
 800c896:	2b02      	cmp	r3, #2
 800c898:	d124      	bne.n	800c8e4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c89a:	69ba      	ldr	r2, [r7, #24]
 800c89c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800c8a0:	4013      	ands	r3, r2
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d035      	beq.n	800c912 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c8aa:	69bb      	ldr	r3, [r7, #24]
 800c8ac:	091b      	lsrs	r3, r3, #4
 800c8ae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c8b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	461a      	mov	r2, r3
 800c8b8:	6a38      	ldr	r0, [r7, #32]
 800c8ba:	f004 f903 	bl	8010ac4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	68da      	ldr	r2, [r3, #12]
 800c8c2:	69bb      	ldr	r3, [r7, #24]
 800c8c4:	091b      	lsrs	r3, r3, #4
 800c8c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c8ca:	441a      	add	r2, r3
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	699a      	ldr	r2, [r3, #24]
 800c8d4:	69bb      	ldr	r3, [r7, #24]
 800c8d6:	091b      	lsrs	r3, r3, #4
 800c8d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c8dc:	441a      	add	r2, r3
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	619a      	str	r2, [r3, #24]
 800c8e2:	e016      	b.n	800c912 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c8e4:	69bb      	ldr	r3, [r7, #24]
 800c8e6:	0c5b      	lsrs	r3, r3, #17
 800c8e8:	f003 030f 	and.w	r3, r3, #15
 800c8ec:	2b06      	cmp	r3, #6
 800c8ee:	d110      	bne.n	800c912 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c8f6:	2208      	movs	r2, #8
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	6a38      	ldr	r0, [r7, #32]
 800c8fc:	f004 f8e2 	bl	8010ac4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	699a      	ldr	r2, [r3, #24]
 800c904:	69bb      	ldr	r3, [r7, #24]
 800c906:	091b      	lsrs	r3, r3, #4
 800c908:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c90c:	441a      	add	r2, r3
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	699a      	ldr	r2, [r3, #24]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f042 0210 	orr.w	r2, r2, #16
 800c920:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	4618      	mov	r0, r3
 800c928:	f004 fa31 	bl	8010d8e <USB_ReadInterrupts>
 800c92c:	4603      	mov	r3, r0
 800c92e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c932:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c936:	d16e      	bne.n	800ca16 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800c938:	2300      	movs	r3, #0
 800c93a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4618      	mov	r0, r3
 800c942:	f004 fa37 	bl	8010db4 <USB_ReadDevAllOutEpInterrupt>
 800c946:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800c948:	e062      	b.n	800ca10 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94c:	f003 0301 	and.w	r3, r3, #1
 800c950:	2b00      	cmp	r3, #0
 800c952:	d057      	beq.n	800ca04 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c95a:	b2d2      	uxtb	r2, r2
 800c95c:	4611      	mov	r1, r2
 800c95e:	4618      	mov	r0, r3
 800c960:	f004 fa5c 	bl	8010e1c <USB_ReadDevOutEPInterrupt>
 800c964:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	f003 0301 	and.w	r3, r3, #1
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d00c      	beq.n	800c98a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c972:	015a      	lsls	r2, r3, #5
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	4413      	add	r3, r2
 800c978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c97c:	461a      	mov	r2, r3
 800c97e:	2301      	movs	r3, #1
 800c980:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c982:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 fdb1 	bl	800d4ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	f003 0308 	and.w	r3, r3, #8
 800c990:	2b00      	cmp	r3, #0
 800c992:	d00c      	beq.n	800c9ae <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c996:	015a      	lsls	r2, r3, #5
 800c998:	69fb      	ldr	r3, [r7, #28]
 800c99a:	4413      	add	r3, r2
 800c99c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	2308      	movs	r3, #8
 800c9a4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c9a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 feab 	bl	800d704 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	f003 0310 	and.w	r3, r3, #16
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d008      	beq.n	800c9ca <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ba:	015a      	lsls	r2, r3, #5
 800c9bc:	69fb      	ldr	r3, [r7, #28]
 800c9be:	4413      	add	r3, r2
 800c9c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	2310      	movs	r3, #16
 800c9c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	f003 0320 	and.w	r3, r3, #32
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d008      	beq.n	800c9e6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d6:	015a      	lsls	r2, r3, #5
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	4413      	add	r3, r2
 800c9dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	2320      	movs	r3, #32
 800c9e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d009      	beq.n	800ca04 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f2:	015a      	lsls	r2, r3, #5
 800c9f4:	69fb      	ldr	r3, [r7, #28]
 800c9f6:	4413      	add	r3, r2
 800c9f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ca02:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800ca04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca06:	3301      	adds	r3, #1
 800ca08:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800ca0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca0c:	085b      	lsrs	r3, r3, #1
 800ca0e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800ca10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d199      	bne.n	800c94a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f004 f9b7 	bl	8010d8e <USB_ReadInterrupts>
 800ca20:	4603      	mov	r3, r0
 800ca22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ca26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ca2a:	f040 80c0 	bne.w	800cbae <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4618      	mov	r0, r3
 800ca34:	f004 f9d8 	bl	8010de8 <USB_ReadDevAllInEpInterrupt>
 800ca38:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800ca3e:	e0b2      	b.n	800cba6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800ca40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca42:	f003 0301 	and.w	r3, r3, #1
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	f000 80a7 	beq.w	800cb9a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca52:	b2d2      	uxtb	r2, r2
 800ca54:	4611      	mov	r1, r2
 800ca56:	4618      	mov	r0, r3
 800ca58:	f004 f9fe 	bl	8010e58 <USB_ReadDevInEPInterrupt>
 800ca5c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	f003 0301 	and.w	r3, r3, #1
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d057      	beq.n	800cb18 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ca68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6a:	f003 030f 	and.w	r3, r3, #15
 800ca6e:	2201      	movs	r2, #1
 800ca70:	fa02 f303 	lsl.w	r3, r2, r3
 800ca74:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ca76:	69fb      	ldr	r3, [r7, #28]
 800ca78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	43db      	mvns	r3, r3
 800ca82:	69f9      	ldr	r1, [r7, #28]
 800ca84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca88:	4013      	ands	r3, r2
 800ca8a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800ca8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8e:	015a      	lsls	r2, r3, #5
 800ca90:	69fb      	ldr	r3, [r7, #28]
 800ca92:	4413      	add	r3, r2
 800ca94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca98:	461a      	mov	r2, r3
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	691b      	ldr	r3, [r3, #16]
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d132      	bne.n	800cb0c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800caa6:	6879      	ldr	r1, [r7, #4]
 800caa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caaa:	4613      	mov	r3, r2
 800caac:	00db      	lsls	r3, r3, #3
 800caae:	1a9b      	subs	r3, r3, r2
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	440b      	add	r3, r1
 800cab4:	3348      	adds	r3, #72	; 0x48
 800cab6:	6819      	ldr	r1, [r3, #0]
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cabc:	4613      	mov	r3, r2
 800cabe:	00db      	lsls	r3, r3, #3
 800cac0:	1a9b      	subs	r3, r3, r2
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	4403      	add	r3, r0
 800cac6:	3344      	adds	r3, #68	; 0x44
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4419      	add	r1, r3
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cad0:	4613      	mov	r3, r2
 800cad2:	00db      	lsls	r3, r3, #3
 800cad4:	1a9b      	subs	r3, r3, r2
 800cad6:	009b      	lsls	r3, r3, #2
 800cad8:	4403      	add	r3, r0
 800cada:	3348      	adds	r3, #72	; 0x48
 800cadc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800cade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d113      	bne.n	800cb0c <HAL_PCD_IRQHandler+0x31c>
 800cae4:	6879      	ldr	r1, [r7, #4]
 800cae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cae8:	4613      	mov	r3, r2
 800caea:	00db      	lsls	r3, r3, #3
 800caec:	1a9b      	subs	r3, r3, r2
 800caee:	009b      	lsls	r3, r3, #2
 800caf0:	440b      	add	r3, r1
 800caf2:	3350      	adds	r3, #80	; 0x50
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d108      	bne.n	800cb0c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6818      	ldr	r0, [r3, #0]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cb04:	461a      	mov	r2, r3
 800cb06:	2101      	movs	r1, #1
 800cb08:	f004 fa06 	bl	8010f18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800cb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	4619      	mov	r1, r3
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f009 f817 	bl	8015b46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	f003 0308 	and.w	r3, r3, #8
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d008      	beq.n	800cb34 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800cb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb24:	015a      	lsls	r2, r3, #5
 800cb26:	69fb      	ldr	r3, [r7, #28]
 800cb28:	4413      	add	r3, r2
 800cb2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb2e:	461a      	mov	r2, r3
 800cb30:	2308      	movs	r3, #8
 800cb32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	f003 0310 	and.w	r3, r3, #16
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d008      	beq.n	800cb50 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800cb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb40:	015a      	lsls	r2, r3, #5
 800cb42:	69fb      	ldr	r3, [r7, #28]
 800cb44:	4413      	add	r3, r2
 800cb46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	2310      	movs	r3, #16
 800cb4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d008      	beq.n	800cb6c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800cb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5c:	015a      	lsls	r2, r3, #5
 800cb5e:	69fb      	ldr	r3, [r7, #28]
 800cb60:	4413      	add	r3, r2
 800cb62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb66:	461a      	mov	r2, r3
 800cb68:	2340      	movs	r3, #64	; 0x40
 800cb6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	f003 0302 	and.w	r3, r3, #2
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d008      	beq.n	800cb88 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800cb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb78:	015a      	lsls	r2, r3, #5
 800cb7a:	69fb      	ldr	r3, [r7, #28]
 800cb7c:	4413      	add	r3, r2
 800cb7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb82:	461a      	mov	r2, r3
 800cb84:	2302      	movs	r3, #2
 800cb86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d003      	beq.n	800cb9a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800cb92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 fc1b 	bl	800d3d0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800cb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800cba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba2:	085b      	lsrs	r3, r3, #1
 800cba4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800cba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	f47f af49 	bne.w	800ca40 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f004 f8eb 	bl	8010d8e <USB_ReadInterrupts>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbc2:	d122      	bne.n	800cc0a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800cbc4:	69fb      	ldr	r3, [r7, #28]
 800cbc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbca:	685b      	ldr	r3, [r3, #4]
 800cbcc:	69fa      	ldr	r2, [r7, #28]
 800cbce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cbd2:	f023 0301 	bic.w	r3, r3, #1
 800cbd6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800cbde:	2b01      	cmp	r3, #1
 800cbe0:	d108      	bne.n	800cbf4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800cbea:	2100      	movs	r1, #0
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f000 fe27 	bl	800d840 <HAL_PCDEx_LPM_Callback>
 800cbf2:	e002      	b.n	800cbfa <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f009 f81d 	bl	8015c34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	695a      	ldr	r2, [r3, #20]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800cc08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f004 f8bd 	bl	8010d8e <USB_ReadInterrupts>
 800cc14:	4603      	mov	r3, r0
 800cc16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc1e:	d112      	bne.n	800cc46 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800cc20:	69fb      	ldr	r3, [r7, #28]
 800cc22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc26:	689b      	ldr	r3, [r3, #8]
 800cc28:	f003 0301 	and.w	r3, r3, #1
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d102      	bne.n	800cc36 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f008 ffd9 	bl	8015be8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	695a      	ldr	r2, [r3, #20]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800cc44:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f004 f89f 	bl	8010d8e <USB_ReadInterrupts>
 800cc50:	4603      	mov	r3, r0
 800cc52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cc56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc5a:	f040 80c7 	bne.w	800cdec <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800cc5e:	69fb      	ldr	r3, [r7, #28]
 800cc60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	69fa      	ldr	r2, [r7, #28]
 800cc68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc6c:	f023 0301 	bic.w	r3, r3, #1
 800cc70:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2110      	movs	r1, #16
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f003 f96d 	bl	800ff58 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cc7e:	2300      	movs	r3, #0
 800cc80:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc82:	e056      	b.n	800cd32 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800cc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc86:	015a      	lsls	r2, r3, #5
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc90:	461a      	mov	r2, r3
 800cc92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cc96:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9a:	015a      	lsls	r2, r3, #5
 800cc9c:	69fb      	ldr	r3, [r7, #28]
 800cc9e:	4413      	add	r3, r2
 800cca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cca8:	0151      	lsls	r1, r2, #5
 800ccaa:	69fa      	ldr	r2, [r7, #28]
 800ccac:	440a      	add	r2, r1
 800ccae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ccb6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ccb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccba:	015a      	lsls	r2, r3, #5
 800ccbc:	69fb      	ldr	r3, [r7, #28]
 800ccbe:	4413      	add	r3, r2
 800ccc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccc8:	0151      	lsls	r1, r2, #5
 800ccca:	69fa      	ldr	r2, [r7, #28]
 800cccc:	440a      	add	r2, r1
 800ccce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ccd6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800ccd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccda:	015a      	lsls	r2, r3, #5
 800ccdc:	69fb      	ldr	r3, [r7, #28]
 800ccde:	4413      	add	r3, r2
 800cce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cce4:	461a      	mov	r2, r3
 800cce6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ccea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ccec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccee:	015a      	lsls	r2, r3, #5
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccfc:	0151      	lsls	r1, r2, #5
 800ccfe:	69fa      	ldr	r2, [r7, #28]
 800cd00:	440a      	add	r2, r1
 800cd02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cd0a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0e:	015a      	lsls	r2, r3, #5
 800cd10:	69fb      	ldr	r3, [r7, #28]
 800cd12:	4413      	add	r3, r2
 800cd14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd1c:	0151      	lsls	r1, r2, #5
 800cd1e:	69fa      	ldr	r2, [r7, #28]
 800cd20:	440a      	add	r2, r1
 800cd22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cd2a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd2e:	3301      	adds	r3, #1
 800cd30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	685b      	ldr	r3, [r3, #4]
 800cd36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d3a3      	bcc.n	800cc84 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800cd3c:	69fb      	ldr	r3, [r7, #28]
 800cd3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd42:	69db      	ldr	r3, [r3, #28]
 800cd44:	69fa      	ldr	r2, [r7, #28]
 800cd46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd4a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800cd4e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d016      	beq.n	800cd86 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800cd58:	69fb      	ldr	r3, [r7, #28]
 800cd5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd62:	69fa      	ldr	r2, [r7, #28]
 800cd64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd68:	f043 030b 	orr.w	r3, r3, #11
 800cd6c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800cd70:	69fb      	ldr	r3, [r7, #28]
 800cd72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd78:	69fa      	ldr	r2, [r7, #28]
 800cd7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd7e:	f043 030b 	orr.w	r3, r3, #11
 800cd82:	6453      	str	r3, [r2, #68]	; 0x44
 800cd84:	e015      	b.n	800cdb2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800cd86:	69fb      	ldr	r3, [r7, #28]
 800cd88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd8c:	695b      	ldr	r3, [r3, #20]
 800cd8e:	69fa      	ldr	r2, [r7, #28]
 800cd90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cd98:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800cd9c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cda4:	691b      	ldr	r3, [r3, #16]
 800cda6:	69fa      	ldr	r2, [r7, #28]
 800cda8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cdac:	f043 030b 	orr.w	r3, r3, #11
 800cdb0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800cdb2:	69fb      	ldr	r3, [r7, #28]
 800cdb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	69fa      	ldr	r2, [r7, #28]
 800cdbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cdc0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cdc4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6818      	ldr	r0, [r3, #0]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	691b      	ldr	r3, [r3, #16]
 800cdce:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	f004 f89e 	bl	8010f18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	695a      	ldr	r2, [r3, #20]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800cdea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f003 ffcc 	bl	8010d8e <USB_ReadInterrupts>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cdfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce00:	d124      	bne.n	800ce4c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	4618      	mov	r0, r3
 800ce08:	f004 f862 	bl	8010ed0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4618      	mov	r0, r3
 800ce12:	f003 f902 	bl	801001a <USB_GetDevSpeed>
 800ce16:	4603      	mov	r3, r0
 800ce18:	461a      	mov	r2, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681c      	ldr	r4, [r3, #0]
 800ce22:	f001 f951 	bl	800e0c8 <HAL_RCC_GetHCLKFreq>
 800ce26:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ce2c:	b2db      	uxtb	r3, r3
 800ce2e:	461a      	mov	r2, r3
 800ce30:	4620      	mov	r0, r4
 800ce32:	f002 fe3f 	bl	800fab4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f008 fead 	bl	8015b96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	695a      	ldr	r2, [r3, #20]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800ce4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4618      	mov	r0, r3
 800ce52:	f003 ff9c 	bl	8010d8e <USB_ReadInterrupts>
 800ce56:	4603      	mov	r3, r0
 800ce58:	f003 0308 	and.w	r3, r3, #8
 800ce5c:	2b08      	cmp	r3, #8
 800ce5e:	d10a      	bne.n	800ce76 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f008 fe8a 	bl	8015b7a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	695a      	ldr	r2, [r3, #20]
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f002 0208 	and.w	r2, r2, #8
 800ce74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f003 ff87 	bl	8010d8e <USB_ReadInterrupts>
 800ce80:	4603      	mov	r3, r0
 800ce82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ce86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce8a:	d10f      	bne.n	800ceac <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800ce90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce92:	b2db      	uxtb	r3, r3
 800ce94:	4619      	mov	r1, r3
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f008 feec 	bl	8015c74 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	695a      	ldr	r2, [r3, #20]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800ceaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f003 ff6c 	bl	8010d8e <USB_ReadInterrupts>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cebc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cec0:	d10f      	bne.n	800cee2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800cec2:	2300      	movs	r3, #0
 800cec4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800cec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec8:	b2db      	uxtb	r3, r3
 800ceca:	4619      	mov	r1, r3
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f008 febf 	bl	8015c50 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	695a      	ldr	r2, [r3, #20]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800cee0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4618      	mov	r0, r3
 800cee8:	f003 ff51 	bl	8010d8e <USB_ReadInterrupts>
 800ceec:	4603      	mov	r3, r0
 800ceee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cef6:	d10a      	bne.n	800cf0e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f008 fecd 	bl	8015c98 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	695a      	ldr	r2, [r3, #20]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800cf0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	4618      	mov	r0, r3
 800cf14:	f003 ff3b 	bl	8010d8e <USB_ReadInterrupts>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	f003 0304 	and.w	r3, r3, #4
 800cf1e:	2b04      	cmp	r3, #4
 800cf20:	d115      	bne.n	800cf4e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800cf2a:	69bb      	ldr	r3, [r7, #24]
 800cf2c:	f003 0304 	and.w	r3, r3, #4
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d002      	beq.n	800cf3a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f008 febd 	bl	8015cb4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	6859      	ldr	r1, [r3, #4]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	69ba      	ldr	r2, [r7, #24]
 800cf46:	430a      	orrs	r2, r1
 800cf48:	605a      	str	r2, [r3, #4]
 800cf4a:	e000      	b.n	800cf4e <HAL_PCD_IRQHandler+0x75e>
      return;
 800cf4c:	bf00      	nop
    }
  }
}
 800cf4e:	3734      	adds	r7, #52	; 0x34
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd90      	pop	{r4, r7, pc}

0800cf54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	460b      	mov	r3, r1
 800cf5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cf66:	2b01      	cmp	r3, #1
 800cf68:	d101      	bne.n	800cf6e <HAL_PCD_SetAddress+0x1a>
 800cf6a:	2302      	movs	r3, #2
 800cf6c:	e013      	b.n	800cf96 <HAL_PCD_SetAddress+0x42>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2201      	movs	r2, #1
 800cf72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	78fa      	ldrb	r2, [r7, #3]
 800cf7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	78fa      	ldrb	r2, [r7, #3]
 800cf84:	4611      	mov	r1, r2
 800cf86:	4618      	mov	r0, r3
 800cf88:	f003 fe99 	bl	8010cbe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cf94:	2300      	movs	r3, #0
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3708      	adds	r7, #8
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}

0800cf9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800cf9e:	b580      	push	{r7, lr}
 800cfa0:	b084      	sub	sp, #16
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	6078      	str	r0, [r7, #4]
 800cfa6:	4608      	mov	r0, r1
 800cfa8:	4611      	mov	r1, r2
 800cfaa:	461a      	mov	r2, r3
 800cfac:	4603      	mov	r3, r0
 800cfae:	70fb      	strb	r3, [r7, #3]
 800cfb0:	460b      	mov	r3, r1
 800cfb2:	803b      	strh	r3, [r7, #0]
 800cfb4:	4613      	mov	r3, r2
 800cfb6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cfbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	da0f      	bge.n	800cfe4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cfc4:	78fb      	ldrb	r3, [r7, #3]
 800cfc6:	f003 020f 	and.w	r2, r3, #15
 800cfca:	4613      	mov	r3, r2
 800cfcc:	00db      	lsls	r3, r3, #3
 800cfce:	1a9b      	subs	r3, r3, r2
 800cfd0:	009b      	lsls	r3, r3, #2
 800cfd2:	3338      	adds	r3, #56	; 0x38
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	4413      	add	r3, r2
 800cfd8:	3304      	adds	r3, #4
 800cfda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2201      	movs	r2, #1
 800cfe0:	705a      	strb	r2, [r3, #1]
 800cfe2:	e00f      	b.n	800d004 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cfe4:	78fb      	ldrb	r3, [r7, #3]
 800cfe6:	f003 020f 	and.w	r2, r3, #15
 800cfea:	4613      	mov	r3, r2
 800cfec:	00db      	lsls	r3, r3, #3
 800cfee:	1a9b      	subs	r3, r3, r2
 800cff0:	009b      	lsls	r3, r3, #2
 800cff2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cff6:	687a      	ldr	r2, [r7, #4]
 800cff8:	4413      	add	r3, r2
 800cffa:	3304      	adds	r3, #4
 800cffc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2200      	movs	r2, #0
 800d002:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800d004:	78fb      	ldrb	r3, [r7, #3]
 800d006:	f003 030f 	and.w	r3, r3, #15
 800d00a:	b2da      	uxtb	r2, r3
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800d010:	883a      	ldrh	r2, [r7, #0]
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	78ba      	ldrb	r2, [r7, #2]
 800d01a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	785b      	ldrb	r3, [r3, #1]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d004      	beq.n	800d02e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	b29a      	uxth	r2, r3
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800d02e:	78bb      	ldrb	r3, [r7, #2]
 800d030:	2b02      	cmp	r3, #2
 800d032:	d102      	bne.n	800d03a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2200      	movs	r2, #0
 800d038:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d040:	2b01      	cmp	r3, #1
 800d042:	d101      	bne.n	800d048 <HAL_PCD_EP_Open+0xaa>
 800d044:	2302      	movs	r3, #2
 800d046:	e00e      	b.n	800d066 <HAL_PCD_EP_Open+0xc8>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2201      	movs	r2, #1
 800d04c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	68f9      	ldr	r1, [r7, #12]
 800d056:	4618      	mov	r0, r3
 800d058:	f003 f804 	bl	8010064 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2200      	movs	r2, #0
 800d060:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800d064:	7afb      	ldrb	r3, [r7, #11]
}
 800d066:	4618      	mov	r0, r3
 800d068:	3710      	adds	r7, #16
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}

0800d06e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d06e:	b580      	push	{r7, lr}
 800d070:	b084      	sub	sp, #16
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
 800d076:	460b      	mov	r3, r1
 800d078:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d07a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	da0f      	bge.n	800d0a2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d082:	78fb      	ldrb	r3, [r7, #3]
 800d084:	f003 020f 	and.w	r2, r3, #15
 800d088:	4613      	mov	r3, r2
 800d08a:	00db      	lsls	r3, r3, #3
 800d08c:	1a9b      	subs	r3, r3, r2
 800d08e:	009b      	lsls	r3, r3, #2
 800d090:	3338      	adds	r3, #56	; 0x38
 800d092:	687a      	ldr	r2, [r7, #4]
 800d094:	4413      	add	r3, r2
 800d096:	3304      	adds	r3, #4
 800d098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2201      	movs	r2, #1
 800d09e:	705a      	strb	r2, [r3, #1]
 800d0a0:	e00f      	b.n	800d0c2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d0a2:	78fb      	ldrb	r3, [r7, #3]
 800d0a4:	f003 020f 	and.w	r2, r3, #15
 800d0a8:	4613      	mov	r3, r2
 800d0aa:	00db      	lsls	r3, r3, #3
 800d0ac:	1a9b      	subs	r3, r3, r2
 800d0ae:	009b      	lsls	r3, r3, #2
 800d0b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	4413      	add	r3, r2
 800d0b8:	3304      	adds	r3, #4
 800d0ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800d0c2:	78fb      	ldrb	r3, [r7, #3]
 800d0c4:	f003 030f 	and.w	r3, r3, #15
 800d0c8:	b2da      	uxtb	r2, r3
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d101      	bne.n	800d0dc <HAL_PCD_EP_Close+0x6e>
 800d0d8:	2302      	movs	r3, #2
 800d0da:	e00e      	b.n	800d0fa <HAL_PCD_EP_Close+0x8c>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2201      	movs	r2, #1
 800d0e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	68f9      	ldr	r1, [r7, #12]
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f003 f842 	bl	8010174 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800d0f8:	2300      	movs	r3, #0
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}

0800d102 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d102:	b580      	push	{r7, lr}
 800d104:	b086      	sub	sp, #24
 800d106:	af00      	add	r7, sp, #0
 800d108:	60f8      	str	r0, [r7, #12]
 800d10a:	607a      	str	r2, [r7, #4]
 800d10c:	603b      	str	r3, [r7, #0]
 800d10e:	460b      	mov	r3, r1
 800d110:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d112:	7afb      	ldrb	r3, [r7, #11]
 800d114:	f003 020f 	and.w	r2, r3, #15
 800d118:	4613      	mov	r3, r2
 800d11a:	00db      	lsls	r3, r3, #3
 800d11c:	1a9b      	subs	r3, r3, r2
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d124:	68fa      	ldr	r2, [r7, #12]
 800d126:	4413      	add	r3, r2
 800d128:	3304      	adds	r3, #4
 800d12a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	687a      	ldr	r2, [r7, #4]
 800d130:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	683a      	ldr	r2, [r7, #0]
 800d136:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	2200      	movs	r2, #0
 800d13c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	2200      	movs	r2, #0
 800d142:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d144:	7afb      	ldrb	r3, [r7, #11]
 800d146:	f003 030f 	and.w	r3, r3, #15
 800d14a:	b2da      	uxtb	r2, r3
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	691b      	ldr	r3, [r3, #16]
 800d154:	2b01      	cmp	r3, #1
 800d156:	d102      	bne.n	800d15e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d15e:	7afb      	ldrb	r3, [r7, #11]
 800d160:	f003 030f 	and.w	r3, r3, #15
 800d164:	2b00      	cmp	r3, #0
 800d166:	d109      	bne.n	800d17c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	6818      	ldr	r0, [r3, #0]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	691b      	ldr	r3, [r3, #16]
 800d170:	b2db      	uxtb	r3, r3
 800d172:	461a      	mov	r2, r3
 800d174:	6979      	ldr	r1, [r7, #20]
 800d176:	f003 fb1d 	bl	80107b4 <USB_EP0StartXfer>
 800d17a:	e008      	b.n	800d18e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	6818      	ldr	r0, [r3, #0]
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	691b      	ldr	r3, [r3, #16]
 800d184:	b2db      	uxtb	r3, r3
 800d186:	461a      	mov	r2, r3
 800d188:	6979      	ldr	r1, [r7, #20]
 800d18a:	f003 f8cf 	bl	801032c <USB_EPStartXfer>
  }

  return HAL_OK;
 800d18e:	2300      	movs	r3, #0
}
 800d190:	4618      	mov	r0, r3
 800d192:	3718      	adds	r7, #24
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	460b      	mov	r3, r1
 800d1a2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d1a4:	78fb      	ldrb	r3, [r7, #3]
 800d1a6:	f003 020f 	and.w	r2, r3, #15
 800d1aa:	6879      	ldr	r1, [r7, #4]
 800d1ac:	4613      	mov	r3, r2
 800d1ae:	00db      	lsls	r3, r3, #3
 800d1b0:	1a9b      	subs	r3, r3, r2
 800d1b2:	009b      	lsls	r3, r3, #2
 800d1b4:	440b      	add	r3, r1
 800d1b6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d1ba:	681b      	ldr	r3, [r3, #0]
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	370c      	adds	r7, #12
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr

0800d1c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b086      	sub	sp, #24
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	60f8      	str	r0, [r7, #12]
 800d1d0:	607a      	str	r2, [r7, #4]
 800d1d2:	603b      	str	r3, [r7, #0]
 800d1d4:	460b      	mov	r3, r1
 800d1d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d1d8:	7afb      	ldrb	r3, [r7, #11]
 800d1da:	f003 020f 	and.w	r2, r3, #15
 800d1de:	4613      	mov	r3, r2
 800d1e0:	00db      	lsls	r3, r3, #3
 800d1e2:	1a9b      	subs	r3, r3, r2
 800d1e4:	009b      	lsls	r3, r3, #2
 800d1e6:	3338      	adds	r3, #56	; 0x38
 800d1e8:	68fa      	ldr	r2, [r7, #12]
 800d1ea:	4413      	add	r3, r2
 800d1ec:	3304      	adds	r3, #4
 800d1ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	687a      	ldr	r2, [r7, #4]
 800d1f4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	683a      	ldr	r2, [r7, #0]
 800d1fa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	2200      	movs	r2, #0
 800d200:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	2201      	movs	r2, #1
 800d206:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d208:	7afb      	ldrb	r3, [r7, #11]
 800d20a:	f003 030f 	and.w	r3, r3, #15
 800d20e:	b2da      	uxtb	r2, r3
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	691b      	ldr	r3, [r3, #16]
 800d218:	2b01      	cmp	r3, #1
 800d21a:	d102      	bne.n	800d222 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d222:	7afb      	ldrb	r3, [r7, #11]
 800d224:	f003 030f 	and.w	r3, r3, #15
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d109      	bne.n	800d240 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	6818      	ldr	r0, [r3, #0]
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	691b      	ldr	r3, [r3, #16]
 800d234:	b2db      	uxtb	r3, r3
 800d236:	461a      	mov	r2, r3
 800d238:	6979      	ldr	r1, [r7, #20]
 800d23a:	f003 fabb 	bl	80107b4 <USB_EP0StartXfer>
 800d23e:	e008      	b.n	800d252 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	6818      	ldr	r0, [r3, #0]
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	691b      	ldr	r3, [r3, #16]
 800d248:	b2db      	uxtb	r3, r3
 800d24a:	461a      	mov	r2, r3
 800d24c:	6979      	ldr	r1, [r7, #20]
 800d24e:	f003 f86d 	bl	801032c <USB_EPStartXfer>
  }

  return HAL_OK;
 800d252:	2300      	movs	r3, #0
}
 800d254:	4618      	mov	r0, r3
 800d256:	3718      	adds	r7, #24
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b084      	sub	sp, #16
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	460b      	mov	r3, r1
 800d266:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d268:	78fb      	ldrb	r3, [r7, #3]
 800d26a:	f003 020f 	and.w	r2, r3, #15
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	429a      	cmp	r2, r3
 800d274:	d901      	bls.n	800d27a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800d276:	2301      	movs	r3, #1
 800d278:	e050      	b.n	800d31c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d27a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	da0f      	bge.n	800d2a2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d282:	78fb      	ldrb	r3, [r7, #3]
 800d284:	f003 020f 	and.w	r2, r3, #15
 800d288:	4613      	mov	r3, r2
 800d28a:	00db      	lsls	r3, r3, #3
 800d28c:	1a9b      	subs	r3, r3, r2
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	3338      	adds	r3, #56	; 0x38
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	4413      	add	r3, r2
 800d296:	3304      	adds	r3, #4
 800d298:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2201      	movs	r2, #1
 800d29e:	705a      	strb	r2, [r3, #1]
 800d2a0:	e00d      	b.n	800d2be <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d2a2:	78fa      	ldrb	r2, [r7, #3]
 800d2a4:	4613      	mov	r3, r2
 800d2a6:	00db      	lsls	r3, r3, #3
 800d2a8:	1a9b      	subs	r3, r3, r2
 800d2aa:	009b      	lsls	r3, r3, #2
 800d2ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d2b0:	687a      	ldr	r2, [r7, #4]
 800d2b2:	4413      	add	r3, r2
 800d2b4:	3304      	adds	r3, #4
 800d2b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2201      	movs	r2, #1
 800d2c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d2c4:	78fb      	ldrb	r3, [r7, #3]
 800d2c6:	f003 030f 	and.w	r3, r3, #15
 800d2ca:	b2da      	uxtb	r2, r3
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d2d6:	2b01      	cmp	r3, #1
 800d2d8:	d101      	bne.n	800d2de <HAL_PCD_EP_SetStall+0x82>
 800d2da:	2302      	movs	r3, #2
 800d2dc:	e01e      	b.n	800d31c <HAL_PCD_EP_SetStall+0xc0>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	68f9      	ldr	r1, [r7, #12]
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f003 fc12 	bl	8010b16 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d2f2:	78fb      	ldrb	r3, [r7, #3]
 800d2f4:	f003 030f 	and.w	r3, r3, #15
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d10a      	bne.n	800d312 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6818      	ldr	r0, [r3, #0]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	691b      	ldr	r3, [r3, #16]
 800d304:	b2d9      	uxtb	r1, r3
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d30c:	461a      	mov	r2, r3
 800d30e:	f003 fe03 	bl	8010f18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2200      	movs	r2, #0
 800d316:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d31a:	2300      	movs	r3, #0
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3710      	adds	r7, #16
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}

0800d324 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b084      	sub	sp, #16
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	460b      	mov	r3, r1
 800d32e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d330:	78fb      	ldrb	r3, [r7, #3]
 800d332:	f003 020f 	and.w	r2, r3, #15
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d901      	bls.n	800d342 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800d33e:	2301      	movs	r3, #1
 800d340:	e042      	b.n	800d3c8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d342:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d346:	2b00      	cmp	r3, #0
 800d348:	da0f      	bge.n	800d36a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d34a:	78fb      	ldrb	r3, [r7, #3]
 800d34c:	f003 020f 	and.w	r2, r3, #15
 800d350:	4613      	mov	r3, r2
 800d352:	00db      	lsls	r3, r3, #3
 800d354:	1a9b      	subs	r3, r3, r2
 800d356:	009b      	lsls	r3, r3, #2
 800d358:	3338      	adds	r3, #56	; 0x38
 800d35a:	687a      	ldr	r2, [r7, #4]
 800d35c:	4413      	add	r3, r2
 800d35e:	3304      	adds	r3, #4
 800d360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	2201      	movs	r2, #1
 800d366:	705a      	strb	r2, [r3, #1]
 800d368:	e00f      	b.n	800d38a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d36a:	78fb      	ldrb	r3, [r7, #3]
 800d36c:	f003 020f 	and.w	r2, r3, #15
 800d370:	4613      	mov	r3, r2
 800d372:	00db      	lsls	r3, r3, #3
 800d374:	1a9b      	subs	r3, r3, r2
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d37c:	687a      	ldr	r2, [r7, #4]
 800d37e:	4413      	add	r3, r2
 800d380:	3304      	adds	r3, #4
 800d382:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2200      	movs	r2, #0
 800d388:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	2200      	movs	r2, #0
 800d38e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d390:	78fb      	ldrb	r3, [r7, #3]
 800d392:	f003 030f 	and.w	r3, r3, #15
 800d396:	b2da      	uxtb	r2, r3
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d101      	bne.n	800d3aa <HAL_PCD_EP_ClrStall+0x86>
 800d3a6:	2302      	movs	r3, #2
 800d3a8:	e00e      	b.n	800d3c8 <HAL_PCD_EP_ClrStall+0xa4>
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	68f9      	ldr	r1, [r7, #12]
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f003 fc1a 	bl	8010bf2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d3c6:	2300      	movs	r3, #0
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3710      	adds	r7, #16
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b08a      	sub	sp, #40	; 0x28
 800d3d4:	af02      	add	r7, sp, #8
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d3e4:	683a      	ldr	r2, [r7, #0]
 800d3e6:	4613      	mov	r3, r2
 800d3e8:	00db      	lsls	r3, r3, #3
 800d3ea:	1a9b      	subs	r3, r3, r2
 800d3ec:	009b      	lsls	r3, r3, #2
 800d3ee:	3338      	adds	r3, #56	; 0x38
 800d3f0:	687a      	ldr	r2, [r7, #4]
 800d3f2:	4413      	add	r3, r2
 800d3f4:	3304      	adds	r3, #4
 800d3f6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	699a      	ldr	r2, [r3, #24]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	695b      	ldr	r3, [r3, #20]
 800d400:	429a      	cmp	r2, r3
 800d402:	d901      	bls.n	800d408 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d404:	2301      	movs	r3, #1
 800d406:	e06c      	b.n	800d4e2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	695a      	ldr	r2, [r3, #20]
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	699b      	ldr	r3, [r3, #24]
 800d410:	1ad3      	subs	r3, r2, r3
 800d412:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	689b      	ldr	r3, [r3, #8]
 800d418:	69fa      	ldr	r2, [r7, #28]
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d902      	bls.n	800d424 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	689b      	ldr	r3, [r3, #8]
 800d422:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d424:	69fb      	ldr	r3, [r7, #28]
 800d426:	3303      	adds	r3, #3
 800d428:	089b      	lsrs	r3, r3, #2
 800d42a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d42c:	e02b      	b.n	800d486 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	695a      	ldr	r2, [r3, #20]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	699b      	ldr	r3, [r3, #24]
 800d436:	1ad3      	subs	r3, r2, r3
 800d438:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	689b      	ldr	r3, [r3, #8]
 800d43e:	69fa      	ldr	r2, [r7, #28]
 800d440:	429a      	cmp	r2, r3
 800d442:	d902      	bls.n	800d44a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	689b      	ldr	r3, [r3, #8]
 800d448:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d44a:	69fb      	ldr	r3, [r7, #28]
 800d44c:	3303      	adds	r3, #3
 800d44e:	089b      	lsrs	r3, r3, #2
 800d450:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	68d9      	ldr	r1, [r3, #12]
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	b2da      	uxtb	r2, r3
 800d45a:	69fb      	ldr	r3, [r7, #28]
 800d45c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d462:	b2db      	uxtb	r3, r3
 800d464:	9300      	str	r3, [sp, #0]
 800d466:	4603      	mov	r3, r0
 800d468:	6978      	ldr	r0, [r7, #20]
 800d46a:	f003 faf6 	bl	8010a5a <USB_WritePacket>

    ep->xfer_buff  += len;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	68da      	ldr	r2, [r3, #12]
 800d472:	69fb      	ldr	r3, [r7, #28]
 800d474:	441a      	add	r2, r3
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	699a      	ldr	r2, [r3, #24]
 800d47e:	69fb      	ldr	r3, [r7, #28]
 800d480:	441a      	add	r2, r3
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	015a      	lsls	r2, r3, #5
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	4413      	add	r3, r2
 800d48e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d492:	699b      	ldr	r3, [r3, #24]
 800d494:	b29b      	uxth	r3, r3
 800d496:	69ba      	ldr	r2, [r7, #24]
 800d498:	429a      	cmp	r2, r3
 800d49a:	d809      	bhi.n	800d4b0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	699a      	ldr	r2, [r3, #24]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d203      	bcs.n	800d4b0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	695b      	ldr	r3, [r3, #20]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d1be      	bne.n	800d42e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	695a      	ldr	r2, [r3, #20]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	699b      	ldr	r3, [r3, #24]
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d811      	bhi.n	800d4e0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	f003 030f 	and.w	r3, r3, #15
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d4c8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	43db      	mvns	r3, r3
 800d4d6:	6939      	ldr	r1, [r7, #16]
 800d4d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d4dc:	4013      	ands	r3, r2
 800d4de:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800d4e0:	2300      	movs	r3, #0
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3720      	adds	r7, #32
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
	...

0800d4ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b086      	sub	sp, #24
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	333c      	adds	r3, #60	; 0x3c
 800d504:	3304      	adds	r3, #4
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	015a      	lsls	r2, r3, #5
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	4413      	add	r3, r2
 800d512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d516:	689b      	ldr	r3, [r3, #8]
 800d518:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	691b      	ldr	r3, [r3, #16]
 800d51e:	2b01      	cmp	r3, #1
 800d520:	f040 80a0 	bne.w	800d664 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	f003 0308 	and.w	r3, r3, #8
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d015      	beq.n	800d55a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	4a72      	ldr	r2, [pc, #456]	; (800d6fc <PCD_EP_OutXfrComplete_int+0x210>)
 800d532:	4293      	cmp	r3, r2
 800d534:	f240 80dd 	bls.w	800d6f2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d53e:	2b00      	cmp	r3, #0
 800d540:	f000 80d7 	beq.w	800d6f2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	015a      	lsls	r2, r3, #5
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	4413      	add	r3, r2
 800d54c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d550:	461a      	mov	r2, r3
 800d552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d556:	6093      	str	r3, [r2, #8]
 800d558:	e0cb      	b.n	800d6f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	f003 0320 	and.w	r3, r3, #32
 800d560:	2b00      	cmp	r3, #0
 800d562:	d009      	beq.n	800d578 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	015a      	lsls	r2, r3, #5
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	4413      	add	r3, r2
 800d56c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d570:	461a      	mov	r2, r3
 800d572:	2320      	movs	r3, #32
 800d574:	6093      	str	r3, [r2, #8]
 800d576:	e0bc      	b.n	800d6f2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d57e:	2b00      	cmp	r3, #0
 800d580:	f040 80b7 	bne.w	800d6f2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	4a5d      	ldr	r2, [pc, #372]	; (800d6fc <PCD_EP_OutXfrComplete_int+0x210>)
 800d588:	4293      	cmp	r3, r2
 800d58a:	d90f      	bls.n	800d5ac <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d592:	2b00      	cmp	r3, #0
 800d594:	d00a      	beq.n	800d5ac <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	015a      	lsls	r2, r3, #5
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	4413      	add	r3, r2
 800d59e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5a8:	6093      	str	r3, [r2, #8]
 800d5aa:	e0a2      	b.n	800d6f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800d5ac:	6879      	ldr	r1, [r7, #4]
 800d5ae:	683a      	ldr	r2, [r7, #0]
 800d5b0:	4613      	mov	r3, r2
 800d5b2:	00db      	lsls	r3, r3, #3
 800d5b4:	1a9b      	subs	r3, r3, r2
 800d5b6:	009b      	lsls	r3, r3, #2
 800d5b8:	440b      	add	r3, r1
 800d5ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d5be:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	0159      	lsls	r1, r3, #5
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	440b      	add	r3, r1
 800d5c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5cc:	691b      	ldr	r3, [r3, #16]
 800d5ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800d5d2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	683a      	ldr	r2, [r7, #0]
 800d5d8:	4613      	mov	r3, r2
 800d5da:	00db      	lsls	r3, r3, #3
 800d5dc:	1a9b      	subs	r3, r3, r2
 800d5de:	009b      	lsls	r3, r3, #2
 800d5e0:	4403      	add	r3, r0
 800d5e2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d5e6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800d5e8:	6879      	ldr	r1, [r7, #4]
 800d5ea:	683a      	ldr	r2, [r7, #0]
 800d5ec:	4613      	mov	r3, r2
 800d5ee:	00db      	lsls	r3, r3, #3
 800d5f0:	1a9b      	subs	r3, r3, r2
 800d5f2:	009b      	lsls	r3, r3, #2
 800d5f4:	440b      	add	r3, r1
 800d5f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d5fa:	6819      	ldr	r1, [r3, #0]
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	683a      	ldr	r2, [r7, #0]
 800d600:	4613      	mov	r3, r2
 800d602:	00db      	lsls	r3, r3, #3
 800d604:	1a9b      	subs	r3, r3, r2
 800d606:	009b      	lsls	r3, r3, #2
 800d608:	4403      	add	r3, r0
 800d60a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	4419      	add	r1, r3
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	683a      	ldr	r2, [r7, #0]
 800d616:	4613      	mov	r3, r2
 800d618:	00db      	lsls	r3, r3, #3
 800d61a:	1a9b      	subs	r3, r3, r2
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	4403      	add	r3, r0
 800d620:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d624:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d114      	bne.n	800d656 <PCD_EP_OutXfrComplete_int+0x16a>
 800d62c:	6879      	ldr	r1, [r7, #4]
 800d62e:	683a      	ldr	r2, [r7, #0]
 800d630:	4613      	mov	r3, r2
 800d632:	00db      	lsls	r3, r3, #3
 800d634:	1a9b      	subs	r3, r3, r2
 800d636:	009b      	lsls	r3, r3, #2
 800d638:	440b      	add	r3, r1
 800d63a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d108      	bne.n	800d656 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6818      	ldr	r0, [r3, #0]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d64e:	461a      	mov	r2, r3
 800d650:	2101      	movs	r1, #1
 800d652:	f003 fc61 	bl	8010f18 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	b2db      	uxtb	r3, r3
 800d65a:	4619      	mov	r1, r3
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f008 fa57 	bl	8015b10 <HAL_PCD_DataOutStageCallback>
 800d662:	e046      	b.n	800d6f2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	4a26      	ldr	r2, [pc, #152]	; (800d700 <PCD_EP_OutXfrComplete_int+0x214>)
 800d668:	4293      	cmp	r3, r2
 800d66a:	d124      	bne.n	800d6b6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d672:	2b00      	cmp	r3, #0
 800d674:	d00a      	beq.n	800d68c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	015a      	lsls	r2, r3, #5
 800d67a:	693b      	ldr	r3, [r7, #16]
 800d67c:	4413      	add	r3, r2
 800d67e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d682:	461a      	mov	r2, r3
 800d684:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d688:	6093      	str	r3, [r2, #8]
 800d68a:	e032      	b.n	800d6f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	f003 0320 	and.w	r3, r3, #32
 800d692:	2b00      	cmp	r3, #0
 800d694:	d008      	beq.n	800d6a8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	015a      	lsls	r2, r3, #5
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	4413      	add	r3, r2
 800d69e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	2320      	movs	r3, #32
 800d6a6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f008 fa2e 	bl	8015b10 <HAL_PCD_DataOutStageCallback>
 800d6b4:	e01d      	b.n	800d6f2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d114      	bne.n	800d6e6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800d6bc:	6879      	ldr	r1, [r7, #4]
 800d6be:	683a      	ldr	r2, [r7, #0]
 800d6c0:	4613      	mov	r3, r2
 800d6c2:	00db      	lsls	r3, r3, #3
 800d6c4:	1a9b      	subs	r3, r3, r2
 800d6c6:	009b      	lsls	r3, r3, #2
 800d6c8:	440b      	add	r3, r1
 800d6ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d108      	bne.n	800d6e6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6818      	ldr	r0, [r3, #0]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d6de:	461a      	mov	r2, r3
 800d6e0:	2100      	movs	r1, #0
 800d6e2:	f003 fc19 	bl	8010f18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	b2db      	uxtb	r3, r3
 800d6ea:	4619      	mov	r1, r3
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f008 fa0f 	bl	8015b10 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d6f2:	2300      	movs	r3, #0
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3718      	adds	r7, #24
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	4f54300a 	.word	0x4f54300a
 800d700:	4f54310a 	.word	0x4f54310a

0800d704 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b086      	sub	sp, #24
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	333c      	adds	r3, #60	; 0x3c
 800d71c:	3304      	adds	r3, #4
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	015a      	lsls	r2, r3, #5
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	4413      	add	r3, r2
 800d72a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d72e:	689b      	ldr	r3, [r3, #8]
 800d730:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	4a15      	ldr	r2, [pc, #84]	; (800d78c <PCD_EP_OutSetupPacket_int+0x88>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d90e      	bls.n	800d758 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d740:	2b00      	cmp	r3, #0
 800d742:	d009      	beq.n	800d758 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	015a      	lsls	r2, r3, #5
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	4413      	add	r3, r2
 800d74c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d750:	461a      	mov	r2, r3
 800d752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d756:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f008 f9c7 	bl	8015aec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	4a0a      	ldr	r2, [pc, #40]	; (800d78c <PCD_EP_OutSetupPacket_int+0x88>)
 800d762:	4293      	cmp	r3, r2
 800d764:	d90c      	bls.n	800d780 <PCD_EP_OutSetupPacket_int+0x7c>
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	691b      	ldr	r3, [r3, #16]
 800d76a:	2b01      	cmp	r3, #1
 800d76c:	d108      	bne.n	800d780 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6818      	ldr	r0, [r3, #0]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d778:	461a      	mov	r2, r3
 800d77a:	2101      	movs	r1, #1
 800d77c:	f003 fbcc 	bl	8010f18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d780:	2300      	movs	r3, #0
}
 800d782:	4618      	mov	r0, r3
 800d784:	3718      	adds	r7, #24
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	bf00      	nop
 800d78c:	4f54300a 	.word	0x4f54300a

0800d790 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d790:	b480      	push	{r7}
 800d792:	b085      	sub	sp, #20
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	460b      	mov	r3, r1
 800d79a:	70fb      	strb	r3, [r7, #3]
 800d79c:	4613      	mov	r3, r2
 800d79e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d7a8:	78fb      	ldrb	r3, [r7, #3]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d107      	bne.n	800d7be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d7ae:	883b      	ldrh	r3, [r7, #0]
 800d7b0:	0419      	lsls	r1, r3, #16
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	68ba      	ldr	r2, [r7, #8]
 800d7b8:	430a      	orrs	r2, r1
 800d7ba:	629a      	str	r2, [r3, #40]	; 0x28
 800d7bc:	e028      	b.n	800d810 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7c4:	0c1b      	lsrs	r3, r3, #16
 800d7c6:	68ba      	ldr	r2, [r7, #8]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	73fb      	strb	r3, [r7, #15]
 800d7d0:	e00d      	b.n	800d7ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	7bfb      	ldrb	r3, [r7, #15]
 800d7d8:	3340      	adds	r3, #64	; 0x40
 800d7da:	009b      	lsls	r3, r3, #2
 800d7dc:	4413      	add	r3, r2
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	0c1b      	lsrs	r3, r3, #16
 800d7e2:	68ba      	ldr	r2, [r7, #8]
 800d7e4:	4413      	add	r3, r2
 800d7e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d7e8:	7bfb      	ldrb	r3, [r7, #15]
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	73fb      	strb	r3, [r7, #15]
 800d7ee:	7bfa      	ldrb	r2, [r7, #15]
 800d7f0:	78fb      	ldrb	r3, [r7, #3]
 800d7f2:	3b01      	subs	r3, #1
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d3ec      	bcc.n	800d7d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d7f8:	883b      	ldrh	r3, [r7, #0]
 800d7fa:	0418      	lsls	r0, r3, #16
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6819      	ldr	r1, [r3, #0]
 800d800:	78fb      	ldrb	r3, [r7, #3]
 800d802:	3b01      	subs	r3, #1
 800d804:	68ba      	ldr	r2, [r7, #8]
 800d806:	4302      	orrs	r2, r0
 800d808:	3340      	adds	r3, #64	; 0x40
 800d80a:	009b      	lsls	r3, r3, #2
 800d80c:	440b      	add	r3, r1
 800d80e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d810:	2300      	movs	r3, #0
}
 800d812:	4618      	mov	r0, r3
 800d814:	3714      	adds	r7, #20
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr

0800d81e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d81e:	b480      	push	{r7}
 800d820:	b083      	sub	sp, #12
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
 800d826:	460b      	mov	r3, r1
 800d828:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	887a      	ldrh	r2, [r7, #2]
 800d830:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800d832:	2300      	movs	r3, #0
}
 800d834:	4618      	mov	r0, r3
 800d836:	370c      	adds	r7, #12
 800d838:	46bd      	mov	sp, r7
 800d83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83e:	4770      	bx	lr

0800d840 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d840:	b480      	push	{r7}
 800d842:	b083      	sub	sp, #12
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	460b      	mov	r3, r1
 800d84a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d84c:	bf00      	nop
 800d84e:	370c      	adds	r7, #12
 800d850:	46bd      	mov	sp, r7
 800d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d856:	4770      	bx	lr

0800d858 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b086      	sub	sp, #24
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d101      	bne.n	800d86a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d866:	2301      	movs	r3, #1
 800d868:	e25b      	b.n	800dd22 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f003 0301 	and.w	r3, r3, #1
 800d872:	2b00      	cmp	r3, #0
 800d874:	d075      	beq.n	800d962 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d876:	4ba3      	ldr	r3, [pc, #652]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800d878:	689b      	ldr	r3, [r3, #8]
 800d87a:	f003 030c 	and.w	r3, r3, #12
 800d87e:	2b04      	cmp	r3, #4
 800d880:	d00c      	beq.n	800d89c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d882:	4ba0      	ldr	r3, [pc, #640]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800d884:	689b      	ldr	r3, [r3, #8]
 800d886:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d88a:	2b08      	cmp	r3, #8
 800d88c:	d112      	bne.n	800d8b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d88e:	4b9d      	ldr	r3, [pc, #628]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d896:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d89a:	d10b      	bne.n	800d8b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d89c:	4b99      	ldr	r3, [pc, #612]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d05b      	beq.n	800d960 <HAL_RCC_OscConfig+0x108>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d157      	bne.n	800d960 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	e236      	b.n	800dd22 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	685b      	ldr	r3, [r3, #4]
 800d8b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8bc:	d106      	bne.n	800d8cc <HAL_RCC_OscConfig+0x74>
 800d8be:	4b91      	ldr	r3, [pc, #580]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	4a90      	ldr	r2, [pc, #576]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800d8c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d8c8:	6013      	str	r3, [r2, #0]
 800d8ca:	e01d      	b.n	800d908 <HAL_RCC_OscConfig+0xb0>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d8d4:	d10c      	bne.n	800d8f0 <HAL_RCC_OscConfig+0x98>
 800d8d6:	4b8b      	ldr	r3, [pc, #556]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	4a8a      	ldr	r2, [pc, #552]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800d8dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d8e0:	6013      	str	r3, [r2, #0]
 800d8e2:	4b88      	ldr	r3, [pc, #544]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	4a87      	ldr	r2, [pc, #540]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800d8e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d8ec:	6013      	str	r3, [r2, #0]
 800d8ee:	e00b      	b.n	800d908 <HAL_RCC_OscConfig+0xb0>
 800d8f0:	4b84      	ldr	r3, [pc, #528]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4a83      	ldr	r2, [pc, #524]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800d8f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d8fa:	6013      	str	r3, [r2, #0]
 800d8fc:	4b81      	ldr	r3, [pc, #516]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	4a80      	ldr	r2, [pc, #512]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800d902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d013      	beq.n	800d938 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d910:	f7fd ff60 	bl	800b7d4 <HAL_GetTick>
 800d914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d916:	e008      	b.n	800d92a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d918:	f7fd ff5c 	bl	800b7d4 <HAL_GetTick>
 800d91c:	4602      	mov	r2, r0
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	1ad3      	subs	r3, r2, r3
 800d922:	2b64      	cmp	r3, #100	; 0x64
 800d924:	d901      	bls.n	800d92a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d926:	2303      	movs	r3, #3
 800d928:	e1fb      	b.n	800dd22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d92a:	4b76      	ldr	r3, [pc, #472]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d932:	2b00      	cmp	r3, #0
 800d934:	d0f0      	beq.n	800d918 <HAL_RCC_OscConfig+0xc0>
 800d936:	e014      	b.n	800d962 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d938:	f7fd ff4c 	bl	800b7d4 <HAL_GetTick>
 800d93c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d93e:	e008      	b.n	800d952 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d940:	f7fd ff48 	bl	800b7d4 <HAL_GetTick>
 800d944:	4602      	mov	r2, r0
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	1ad3      	subs	r3, r2, r3
 800d94a:	2b64      	cmp	r3, #100	; 0x64
 800d94c:	d901      	bls.n	800d952 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d94e:	2303      	movs	r3, #3
 800d950:	e1e7      	b.n	800dd22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d952:	4b6c      	ldr	r3, [pc, #432]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d1f0      	bne.n	800d940 <HAL_RCC_OscConfig+0xe8>
 800d95e:	e000      	b.n	800d962 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f003 0302 	and.w	r3, r3, #2
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d063      	beq.n	800da36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d96e:	4b65      	ldr	r3, [pc, #404]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800d970:	689b      	ldr	r3, [r3, #8]
 800d972:	f003 030c 	and.w	r3, r3, #12
 800d976:	2b00      	cmp	r3, #0
 800d978:	d00b      	beq.n	800d992 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d97a:	4b62      	ldr	r3, [pc, #392]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800d97c:	689b      	ldr	r3, [r3, #8]
 800d97e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d982:	2b08      	cmp	r3, #8
 800d984:	d11c      	bne.n	800d9c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d986:	4b5f      	ldr	r3, [pc, #380]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d116      	bne.n	800d9c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d992:	4b5c      	ldr	r3, [pc, #368]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	f003 0302 	and.w	r3, r3, #2
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d005      	beq.n	800d9aa <HAL_RCC_OscConfig+0x152>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	68db      	ldr	r3, [r3, #12]
 800d9a2:	2b01      	cmp	r3, #1
 800d9a4:	d001      	beq.n	800d9aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	e1bb      	b.n	800dd22 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d9aa:	4b56      	ldr	r3, [pc, #344]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	691b      	ldr	r3, [r3, #16]
 800d9b6:	00db      	lsls	r3, r3, #3
 800d9b8:	4952      	ldr	r1, [pc, #328]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800d9ba:	4313      	orrs	r3, r2
 800d9bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d9be:	e03a      	b.n	800da36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	68db      	ldr	r3, [r3, #12]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d020      	beq.n	800da0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d9c8:	4b4f      	ldr	r3, [pc, #316]	; (800db08 <HAL_RCC_OscConfig+0x2b0>)
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d9ce:	f7fd ff01 	bl	800b7d4 <HAL_GetTick>
 800d9d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d9d4:	e008      	b.n	800d9e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d9d6:	f7fd fefd 	bl	800b7d4 <HAL_GetTick>
 800d9da:	4602      	mov	r2, r0
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	1ad3      	subs	r3, r2, r3
 800d9e0:	2b02      	cmp	r3, #2
 800d9e2:	d901      	bls.n	800d9e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d9e4:	2303      	movs	r3, #3
 800d9e6:	e19c      	b.n	800dd22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d9e8:	4b46      	ldr	r3, [pc, #280]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	f003 0302 	and.w	r3, r3, #2
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d0f0      	beq.n	800d9d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d9f4:	4b43      	ldr	r3, [pc, #268]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	691b      	ldr	r3, [r3, #16]
 800da00:	00db      	lsls	r3, r3, #3
 800da02:	4940      	ldr	r1, [pc, #256]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800da04:	4313      	orrs	r3, r2
 800da06:	600b      	str	r3, [r1, #0]
 800da08:	e015      	b.n	800da36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800da0a:	4b3f      	ldr	r3, [pc, #252]	; (800db08 <HAL_RCC_OscConfig+0x2b0>)
 800da0c:	2200      	movs	r2, #0
 800da0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da10:	f7fd fee0 	bl	800b7d4 <HAL_GetTick>
 800da14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800da16:	e008      	b.n	800da2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800da18:	f7fd fedc 	bl	800b7d4 <HAL_GetTick>
 800da1c:	4602      	mov	r2, r0
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	1ad3      	subs	r3, r2, r3
 800da22:	2b02      	cmp	r3, #2
 800da24:	d901      	bls.n	800da2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800da26:	2303      	movs	r3, #3
 800da28:	e17b      	b.n	800dd22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800da2a:	4b36      	ldr	r3, [pc, #216]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	f003 0302 	and.w	r3, r3, #2
 800da32:	2b00      	cmp	r3, #0
 800da34:	d1f0      	bne.n	800da18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f003 0308 	and.w	r3, r3, #8
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d030      	beq.n	800daa4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	695b      	ldr	r3, [r3, #20]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d016      	beq.n	800da78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800da4a:	4b30      	ldr	r3, [pc, #192]	; (800db0c <HAL_RCC_OscConfig+0x2b4>)
 800da4c:	2201      	movs	r2, #1
 800da4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da50:	f7fd fec0 	bl	800b7d4 <HAL_GetTick>
 800da54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800da56:	e008      	b.n	800da6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800da58:	f7fd febc 	bl	800b7d4 <HAL_GetTick>
 800da5c:	4602      	mov	r2, r0
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	1ad3      	subs	r3, r2, r3
 800da62:	2b02      	cmp	r3, #2
 800da64:	d901      	bls.n	800da6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800da66:	2303      	movs	r3, #3
 800da68:	e15b      	b.n	800dd22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800da6a:	4b26      	ldr	r3, [pc, #152]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800da6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da6e:	f003 0302 	and.w	r3, r3, #2
 800da72:	2b00      	cmp	r3, #0
 800da74:	d0f0      	beq.n	800da58 <HAL_RCC_OscConfig+0x200>
 800da76:	e015      	b.n	800daa4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800da78:	4b24      	ldr	r3, [pc, #144]	; (800db0c <HAL_RCC_OscConfig+0x2b4>)
 800da7a:	2200      	movs	r2, #0
 800da7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800da7e:	f7fd fea9 	bl	800b7d4 <HAL_GetTick>
 800da82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800da84:	e008      	b.n	800da98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800da86:	f7fd fea5 	bl	800b7d4 <HAL_GetTick>
 800da8a:	4602      	mov	r2, r0
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	1ad3      	subs	r3, r2, r3
 800da90:	2b02      	cmp	r3, #2
 800da92:	d901      	bls.n	800da98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800da94:	2303      	movs	r3, #3
 800da96:	e144      	b.n	800dd22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800da98:	4b1a      	ldr	r3, [pc, #104]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800da9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da9c:	f003 0302 	and.w	r3, r3, #2
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d1f0      	bne.n	800da86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f003 0304 	and.w	r3, r3, #4
 800daac:	2b00      	cmp	r3, #0
 800daae:	f000 80a0 	beq.w	800dbf2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800dab2:	2300      	movs	r3, #0
 800dab4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dab6:	4b13      	ldr	r3, [pc, #76]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800dab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d10f      	bne.n	800dae2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dac2:	2300      	movs	r3, #0
 800dac4:	60bb      	str	r3, [r7, #8]
 800dac6:	4b0f      	ldr	r3, [pc, #60]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800dac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daca:	4a0e      	ldr	r2, [pc, #56]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800dacc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dad0:	6413      	str	r3, [r2, #64]	; 0x40
 800dad2:	4b0c      	ldr	r3, [pc, #48]	; (800db04 <HAL_RCC_OscConfig+0x2ac>)
 800dad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dada:	60bb      	str	r3, [r7, #8]
 800dadc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dade:	2301      	movs	r3, #1
 800dae0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dae2:	4b0b      	ldr	r3, [pc, #44]	; (800db10 <HAL_RCC_OscConfig+0x2b8>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800daea:	2b00      	cmp	r3, #0
 800daec:	d121      	bne.n	800db32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800daee:	4b08      	ldr	r3, [pc, #32]	; (800db10 <HAL_RCC_OscConfig+0x2b8>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	4a07      	ldr	r2, [pc, #28]	; (800db10 <HAL_RCC_OscConfig+0x2b8>)
 800daf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800daf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dafa:	f7fd fe6b 	bl	800b7d4 <HAL_GetTick>
 800dafe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800db00:	e011      	b.n	800db26 <HAL_RCC_OscConfig+0x2ce>
 800db02:	bf00      	nop
 800db04:	40023800 	.word	0x40023800
 800db08:	42470000 	.word	0x42470000
 800db0c:	42470e80 	.word	0x42470e80
 800db10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800db14:	f7fd fe5e 	bl	800b7d4 <HAL_GetTick>
 800db18:	4602      	mov	r2, r0
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	1ad3      	subs	r3, r2, r3
 800db1e:	2b02      	cmp	r3, #2
 800db20:	d901      	bls.n	800db26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800db22:	2303      	movs	r3, #3
 800db24:	e0fd      	b.n	800dd22 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800db26:	4b81      	ldr	r3, [pc, #516]	; (800dd2c <HAL_RCC_OscConfig+0x4d4>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d0f0      	beq.n	800db14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	689b      	ldr	r3, [r3, #8]
 800db36:	2b01      	cmp	r3, #1
 800db38:	d106      	bne.n	800db48 <HAL_RCC_OscConfig+0x2f0>
 800db3a:	4b7d      	ldr	r3, [pc, #500]	; (800dd30 <HAL_RCC_OscConfig+0x4d8>)
 800db3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db3e:	4a7c      	ldr	r2, [pc, #496]	; (800dd30 <HAL_RCC_OscConfig+0x4d8>)
 800db40:	f043 0301 	orr.w	r3, r3, #1
 800db44:	6713      	str	r3, [r2, #112]	; 0x70
 800db46:	e01c      	b.n	800db82 <HAL_RCC_OscConfig+0x32a>
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	689b      	ldr	r3, [r3, #8]
 800db4c:	2b05      	cmp	r3, #5
 800db4e:	d10c      	bne.n	800db6a <HAL_RCC_OscConfig+0x312>
 800db50:	4b77      	ldr	r3, [pc, #476]	; (800dd30 <HAL_RCC_OscConfig+0x4d8>)
 800db52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db54:	4a76      	ldr	r2, [pc, #472]	; (800dd30 <HAL_RCC_OscConfig+0x4d8>)
 800db56:	f043 0304 	orr.w	r3, r3, #4
 800db5a:	6713      	str	r3, [r2, #112]	; 0x70
 800db5c:	4b74      	ldr	r3, [pc, #464]	; (800dd30 <HAL_RCC_OscConfig+0x4d8>)
 800db5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db60:	4a73      	ldr	r2, [pc, #460]	; (800dd30 <HAL_RCC_OscConfig+0x4d8>)
 800db62:	f043 0301 	orr.w	r3, r3, #1
 800db66:	6713      	str	r3, [r2, #112]	; 0x70
 800db68:	e00b      	b.n	800db82 <HAL_RCC_OscConfig+0x32a>
 800db6a:	4b71      	ldr	r3, [pc, #452]	; (800dd30 <HAL_RCC_OscConfig+0x4d8>)
 800db6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db6e:	4a70      	ldr	r2, [pc, #448]	; (800dd30 <HAL_RCC_OscConfig+0x4d8>)
 800db70:	f023 0301 	bic.w	r3, r3, #1
 800db74:	6713      	str	r3, [r2, #112]	; 0x70
 800db76:	4b6e      	ldr	r3, [pc, #440]	; (800dd30 <HAL_RCC_OscConfig+0x4d8>)
 800db78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db7a:	4a6d      	ldr	r2, [pc, #436]	; (800dd30 <HAL_RCC_OscConfig+0x4d8>)
 800db7c:	f023 0304 	bic.w	r3, r3, #4
 800db80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	689b      	ldr	r3, [r3, #8]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d015      	beq.n	800dbb6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800db8a:	f7fd fe23 	bl	800b7d4 <HAL_GetTick>
 800db8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800db90:	e00a      	b.n	800dba8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800db92:	f7fd fe1f 	bl	800b7d4 <HAL_GetTick>
 800db96:	4602      	mov	r2, r0
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	1ad3      	subs	r3, r2, r3
 800db9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d901      	bls.n	800dba8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800dba4:	2303      	movs	r3, #3
 800dba6:	e0bc      	b.n	800dd22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dba8:	4b61      	ldr	r3, [pc, #388]	; (800dd30 <HAL_RCC_OscConfig+0x4d8>)
 800dbaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbac:	f003 0302 	and.w	r3, r3, #2
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d0ee      	beq.n	800db92 <HAL_RCC_OscConfig+0x33a>
 800dbb4:	e014      	b.n	800dbe0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dbb6:	f7fd fe0d 	bl	800b7d4 <HAL_GetTick>
 800dbba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dbbc:	e00a      	b.n	800dbd4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dbbe:	f7fd fe09 	bl	800b7d4 <HAL_GetTick>
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	1ad3      	subs	r3, r2, r3
 800dbc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d901      	bls.n	800dbd4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800dbd0:	2303      	movs	r3, #3
 800dbd2:	e0a6      	b.n	800dd22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dbd4:	4b56      	ldr	r3, [pc, #344]	; (800dd30 <HAL_RCC_OscConfig+0x4d8>)
 800dbd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbd8:	f003 0302 	and.w	r3, r3, #2
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d1ee      	bne.n	800dbbe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800dbe0:	7dfb      	ldrb	r3, [r7, #23]
 800dbe2:	2b01      	cmp	r3, #1
 800dbe4:	d105      	bne.n	800dbf2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dbe6:	4b52      	ldr	r3, [pc, #328]	; (800dd30 <HAL_RCC_OscConfig+0x4d8>)
 800dbe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbea:	4a51      	ldr	r2, [pc, #324]	; (800dd30 <HAL_RCC_OscConfig+0x4d8>)
 800dbec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dbf0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	699b      	ldr	r3, [r3, #24]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f000 8092 	beq.w	800dd20 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800dbfc:	4b4c      	ldr	r3, [pc, #304]	; (800dd30 <HAL_RCC_OscConfig+0x4d8>)
 800dbfe:	689b      	ldr	r3, [r3, #8]
 800dc00:	f003 030c 	and.w	r3, r3, #12
 800dc04:	2b08      	cmp	r3, #8
 800dc06:	d05c      	beq.n	800dcc2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	699b      	ldr	r3, [r3, #24]
 800dc0c:	2b02      	cmp	r3, #2
 800dc0e:	d141      	bne.n	800dc94 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dc10:	4b48      	ldr	r3, [pc, #288]	; (800dd34 <HAL_RCC_OscConfig+0x4dc>)
 800dc12:	2200      	movs	r2, #0
 800dc14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dc16:	f7fd fddd 	bl	800b7d4 <HAL_GetTick>
 800dc1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dc1c:	e008      	b.n	800dc30 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dc1e:	f7fd fdd9 	bl	800b7d4 <HAL_GetTick>
 800dc22:	4602      	mov	r2, r0
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	1ad3      	subs	r3, r2, r3
 800dc28:	2b02      	cmp	r3, #2
 800dc2a:	d901      	bls.n	800dc30 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800dc2c:	2303      	movs	r3, #3
 800dc2e:	e078      	b.n	800dd22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dc30:	4b3f      	ldr	r3, [pc, #252]	; (800dd30 <HAL_RCC_OscConfig+0x4d8>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d1f0      	bne.n	800dc1e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	69da      	ldr	r2, [r3, #28]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6a1b      	ldr	r3, [r3, #32]
 800dc44:	431a      	orrs	r2, r3
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc4a:	019b      	lsls	r3, r3, #6
 800dc4c:	431a      	orrs	r2, r3
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc52:	085b      	lsrs	r3, r3, #1
 800dc54:	3b01      	subs	r3, #1
 800dc56:	041b      	lsls	r3, r3, #16
 800dc58:	431a      	orrs	r2, r3
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc5e:	061b      	lsls	r3, r3, #24
 800dc60:	4933      	ldr	r1, [pc, #204]	; (800dd30 <HAL_RCC_OscConfig+0x4d8>)
 800dc62:	4313      	orrs	r3, r2
 800dc64:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dc66:	4b33      	ldr	r3, [pc, #204]	; (800dd34 <HAL_RCC_OscConfig+0x4dc>)
 800dc68:	2201      	movs	r2, #1
 800dc6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dc6c:	f7fd fdb2 	bl	800b7d4 <HAL_GetTick>
 800dc70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dc72:	e008      	b.n	800dc86 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dc74:	f7fd fdae 	bl	800b7d4 <HAL_GetTick>
 800dc78:	4602      	mov	r2, r0
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	1ad3      	subs	r3, r2, r3
 800dc7e:	2b02      	cmp	r3, #2
 800dc80:	d901      	bls.n	800dc86 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800dc82:	2303      	movs	r3, #3
 800dc84:	e04d      	b.n	800dd22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dc86:	4b2a      	ldr	r3, [pc, #168]	; (800dd30 <HAL_RCC_OscConfig+0x4d8>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d0f0      	beq.n	800dc74 <HAL_RCC_OscConfig+0x41c>
 800dc92:	e045      	b.n	800dd20 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dc94:	4b27      	ldr	r3, [pc, #156]	; (800dd34 <HAL_RCC_OscConfig+0x4dc>)
 800dc96:	2200      	movs	r2, #0
 800dc98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dc9a:	f7fd fd9b 	bl	800b7d4 <HAL_GetTick>
 800dc9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dca0:	e008      	b.n	800dcb4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dca2:	f7fd fd97 	bl	800b7d4 <HAL_GetTick>
 800dca6:	4602      	mov	r2, r0
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	1ad3      	subs	r3, r2, r3
 800dcac:	2b02      	cmp	r3, #2
 800dcae:	d901      	bls.n	800dcb4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800dcb0:	2303      	movs	r3, #3
 800dcb2:	e036      	b.n	800dd22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dcb4:	4b1e      	ldr	r3, [pc, #120]	; (800dd30 <HAL_RCC_OscConfig+0x4d8>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d1f0      	bne.n	800dca2 <HAL_RCC_OscConfig+0x44a>
 800dcc0:	e02e      	b.n	800dd20 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	699b      	ldr	r3, [r3, #24]
 800dcc6:	2b01      	cmp	r3, #1
 800dcc8:	d101      	bne.n	800dcce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800dcca:	2301      	movs	r3, #1
 800dccc:	e029      	b.n	800dd22 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800dcce:	4b18      	ldr	r3, [pc, #96]	; (800dd30 <HAL_RCC_OscConfig+0x4d8>)
 800dcd0:	685b      	ldr	r3, [r3, #4]
 800dcd2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	69db      	ldr	r3, [r3, #28]
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d11c      	bne.n	800dd1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d115      	bne.n	800dd1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800dcf0:	68fa      	ldr	r2, [r7, #12]
 800dcf2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800dcf6:	4013      	ands	r3, r2
 800dcf8:	687a      	ldr	r2, [r7, #4]
 800dcfa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	d10d      	bne.n	800dd1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	d106      	bne.n	800dd1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d001      	beq.n	800dd20 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	e000      	b.n	800dd22 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800dd20:	2300      	movs	r3, #0
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3718      	adds	r7, #24
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
 800dd2a:	bf00      	nop
 800dd2c:	40007000 	.word	0x40007000
 800dd30:	40023800 	.word	0x40023800
 800dd34:	42470060 	.word	0x42470060

0800dd38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d101      	bne.n	800dd4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800dd48:	2301      	movs	r3, #1
 800dd4a:	e0cc      	b.n	800dee6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800dd4c:	4b68      	ldr	r3, [pc, #416]	; (800def0 <HAL_RCC_ClockConfig+0x1b8>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f003 030f 	and.w	r3, r3, #15
 800dd54:	683a      	ldr	r2, [r7, #0]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d90c      	bls.n	800dd74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dd5a:	4b65      	ldr	r3, [pc, #404]	; (800def0 <HAL_RCC_ClockConfig+0x1b8>)
 800dd5c:	683a      	ldr	r2, [r7, #0]
 800dd5e:	b2d2      	uxtb	r2, r2
 800dd60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dd62:	4b63      	ldr	r3, [pc, #396]	; (800def0 <HAL_RCC_ClockConfig+0x1b8>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f003 030f 	and.w	r3, r3, #15
 800dd6a:	683a      	ldr	r2, [r7, #0]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d001      	beq.n	800dd74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800dd70:	2301      	movs	r3, #1
 800dd72:	e0b8      	b.n	800dee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f003 0302 	and.w	r3, r3, #2
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d020      	beq.n	800ddc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f003 0304 	and.w	r3, r3, #4
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d005      	beq.n	800dd98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dd8c:	4b59      	ldr	r3, [pc, #356]	; (800def4 <HAL_RCC_ClockConfig+0x1bc>)
 800dd8e:	689b      	ldr	r3, [r3, #8]
 800dd90:	4a58      	ldr	r2, [pc, #352]	; (800def4 <HAL_RCC_ClockConfig+0x1bc>)
 800dd92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800dd96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f003 0308 	and.w	r3, r3, #8
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d005      	beq.n	800ddb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dda4:	4b53      	ldr	r3, [pc, #332]	; (800def4 <HAL_RCC_ClockConfig+0x1bc>)
 800dda6:	689b      	ldr	r3, [r3, #8]
 800dda8:	4a52      	ldr	r2, [pc, #328]	; (800def4 <HAL_RCC_ClockConfig+0x1bc>)
 800ddaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ddae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ddb0:	4b50      	ldr	r3, [pc, #320]	; (800def4 <HAL_RCC_ClockConfig+0x1bc>)
 800ddb2:	689b      	ldr	r3, [r3, #8]
 800ddb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	689b      	ldr	r3, [r3, #8]
 800ddbc:	494d      	ldr	r1, [pc, #308]	; (800def4 <HAL_RCC_ClockConfig+0x1bc>)
 800ddbe:	4313      	orrs	r3, r2
 800ddc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f003 0301 	and.w	r3, r3, #1
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d044      	beq.n	800de58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	685b      	ldr	r3, [r3, #4]
 800ddd2:	2b01      	cmp	r3, #1
 800ddd4:	d107      	bne.n	800dde6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ddd6:	4b47      	ldr	r3, [pc, #284]	; (800def4 <HAL_RCC_ClockConfig+0x1bc>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d119      	bne.n	800de16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dde2:	2301      	movs	r3, #1
 800dde4:	e07f      	b.n	800dee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	685b      	ldr	r3, [r3, #4]
 800ddea:	2b02      	cmp	r3, #2
 800ddec:	d003      	beq.n	800ddf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ddf2:	2b03      	cmp	r3, #3
 800ddf4:	d107      	bne.n	800de06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ddf6:	4b3f      	ldr	r3, [pc, #252]	; (800def4 <HAL_RCC_ClockConfig+0x1bc>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d109      	bne.n	800de16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800de02:	2301      	movs	r3, #1
 800de04:	e06f      	b.n	800dee6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800de06:	4b3b      	ldr	r3, [pc, #236]	; (800def4 <HAL_RCC_ClockConfig+0x1bc>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f003 0302 	and.w	r3, r3, #2
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d101      	bne.n	800de16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800de12:	2301      	movs	r3, #1
 800de14:	e067      	b.n	800dee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800de16:	4b37      	ldr	r3, [pc, #220]	; (800def4 <HAL_RCC_ClockConfig+0x1bc>)
 800de18:	689b      	ldr	r3, [r3, #8]
 800de1a:	f023 0203 	bic.w	r2, r3, #3
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	685b      	ldr	r3, [r3, #4]
 800de22:	4934      	ldr	r1, [pc, #208]	; (800def4 <HAL_RCC_ClockConfig+0x1bc>)
 800de24:	4313      	orrs	r3, r2
 800de26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800de28:	f7fd fcd4 	bl	800b7d4 <HAL_GetTick>
 800de2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800de2e:	e00a      	b.n	800de46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800de30:	f7fd fcd0 	bl	800b7d4 <HAL_GetTick>
 800de34:	4602      	mov	r2, r0
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	1ad3      	subs	r3, r2, r3
 800de3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800de3e:	4293      	cmp	r3, r2
 800de40:	d901      	bls.n	800de46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800de42:	2303      	movs	r3, #3
 800de44:	e04f      	b.n	800dee6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800de46:	4b2b      	ldr	r3, [pc, #172]	; (800def4 <HAL_RCC_ClockConfig+0x1bc>)
 800de48:	689b      	ldr	r3, [r3, #8]
 800de4a:	f003 020c 	and.w	r2, r3, #12
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	009b      	lsls	r3, r3, #2
 800de54:	429a      	cmp	r2, r3
 800de56:	d1eb      	bne.n	800de30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800de58:	4b25      	ldr	r3, [pc, #148]	; (800def0 <HAL_RCC_ClockConfig+0x1b8>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	f003 030f 	and.w	r3, r3, #15
 800de60:	683a      	ldr	r2, [r7, #0]
 800de62:	429a      	cmp	r2, r3
 800de64:	d20c      	bcs.n	800de80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800de66:	4b22      	ldr	r3, [pc, #136]	; (800def0 <HAL_RCC_ClockConfig+0x1b8>)
 800de68:	683a      	ldr	r2, [r7, #0]
 800de6a:	b2d2      	uxtb	r2, r2
 800de6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800de6e:	4b20      	ldr	r3, [pc, #128]	; (800def0 <HAL_RCC_ClockConfig+0x1b8>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f003 030f 	and.w	r3, r3, #15
 800de76:	683a      	ldr	r2, [r7, #0]
 800de78:	429a      	cmp	r2, r3
 800de7a:	d001      	beq.n	800de80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800de7c:	2301      	movs	r3, #1
 800de7e:	e032      	b.n	800dee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	f003 0304 	and.w	r3, r3, #4
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d008      	beq.n	800de9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800de8c:	4b19      	ldr	r3, [pc, #100]	; (800def4 <HAL_RCC_ClockConfig+0x1bc>)
 800de8e:	689b      	ldr	r3, [r3, #8]
 800de90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	68db      	ldr	r3, [r3, #12]
 800de98:	4916      	ldr	r1, [pc, #88]	; (800def4 <HAL_RCC_ClockConfig+0x1bc>)
 800de9a:	4313      	orrs	r3, r2
 800de9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	f003 0308 	and.w	r3, r3, #8
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d009      	beq.n	800debe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800deaa:	4b12      	ldr	r3, [pc, #72]	; (800def4 <HAL_RCC_ClockConfig+0x1bc>)
 800deac:	689b      	ldr	r3, [r3, #8]
 800deae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	691b      	ldr	r3, [r3, #16]
 800deb6:	00db      	lsls	r3, r3, #3
 800deb8:	490e      	ldr	r1, [pc, #56]	; (800def4 <HAL_RCC_ClockConfig+0x1bc>)
 800deba:	4313      	orrs	r3, r2
 800debc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800debe:	f000 f821 	bl	800df04 <HAL_RCC_GetSysClockFreq>
 800dec2:	4602      	mov	r2, r0
 800dec4:	4b0b      	ldr	r3, [pc, #44]	; (800def4 <HAL_RCC_ClockConfig+0x1bc>)
 800dec6:	689b      	ldr	r3, [r3, #8]
 800dec8:	091b      	lsrs	r3, r3, #4
 800deca:	f003 030f 	and.w	r3, r3, #15
 800dece:	490a      	ldr	r1, [pc, #40]	; (800def8 <HAL_RCC_ClockConfig+0x1c0>)
 800ded0:	5ccb      	ldrb	r3, [r1, r3]
 800ded2:	fa22 f303 	lsr.w	r3, r2, r3
 800ded6:	4a09      	ldr	r2, [pc, #36]	; (800defc <HAL_RCC_ClockConfig+0x1c4>)
 800ded8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800deda:	4b09      	ldr	r3, [pc, #36]	; (800df00 <HAL_RCC_ClockConfig+0x1c8>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	4618      	mov	r0, r3
 800dee0:	f7fd f8ee 	bl	800b0c0 <HAL_InitTick>

  return HAL_OK;
 800dee4:	2300      	movs	r3, #0
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3710      	adds	r7, #16
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
 800deee:	bf00      	nop
 800def0:	40023c00 	.word	0x40023c00
 800def4:	40023800 	.word	0x40023800
 800def8:	0801c618 	.word	0x0801c618
 800defc:	20000828 	.word	0x20000828
 800df00:	2000082c 	.word	0x2000082c

0800df04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800df04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800df08:	b084      	sub	sp, #16
 800df0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800df0c:	2300      	movs	r3, #0
 800df0e:	607b      	str	r3, [r7, #4]
 800df10:	2300      	movs	r3, #0
 800df12:	60fb      	str	r3, [r7, #12]
 800df14:	2300      	movs	r3, #0
 800df16:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800df18:	2300      	movs	r3, #0
 800df1a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800df1c:	4b67      	ldr	r3, [pc, #412]	; (800e0bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800df1e:	689b      	ldr	r3, [r3, #8]
 800df20:	f003 030c 	and.w	r3, r3, #12
 800df24:	2b08      	cmp	r3, #8
 800df26:	d00d      	beq.n	800df44 <HAL_RCC_GetSysClockFreq+0x40>
 800df28:	2b08      	cmp	r3, #8
 800df2a:	f200 80bd 	bhi.w	800e0a8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d002      	beq.n	800df38 <HAL_RCC_GetSysClockFreq+0x34>
 800df32:	2b04      	cmp	r3, #4
 800df34:	d003      	beq.n	800df3e <HAL_RCC_GetSysClockFreq+0x3a>
 800df36:	e0b7      	b.n	800e0a8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800df38:	4b61      	ldr	r3, [pc, #388]	; (800e0c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800df3a:	60bb      	str	r3, [r7, #8]
       break;
 800df3c:	e0b7      	b.n	800e0ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800df3e:	4b61      	ldr	r3, [pc, #388]	; (800e0c4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800df40:	60bb      	str	r3, [r7, #8]
      break;
 800df42:	e0b4      	b.n	800e0ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800df44:	4b5d      	ldr	r3, [pc, #372]	; (800e0bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800df46:	685b      	ldr	r3, [r3, #4]
 800df48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df4c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800df4e:	4b5b      	ldr	r3, [pc, #364]	; (800e0bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800df50:	685b      	ldr	r3, [r3, #4]
 800df52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df56:	2b00      	cmp	r3, #0
 800df58:	d04d      	beq.n	800dff6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800df5a:	4b58      	ldr	r3, [pc, #352]	; (800e0bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	099b      	lsrs	r3, r3, #6
 800df60:	461a      	mov	r2, r3
 800df62:	f04f 0300 	mov.w	r3, #0
 800df66:	f240 10ff 	movw	r0, #511	; 0x1ff
 800df6a:	f04f 0100 	mov.w	r1, #0
 800df6e:	ea02 0800 	and.w	r8, r2, r0
 800df72:	ea03 0901 	and.w	r9, r3, r1
 800df76:	4640      	mov	r0, r8
 800df78:	4649      	mov	r1, r9
 800df7a:	f04f 0200 	mov.w	r2, #0
 800df7e:	f04f 0300 	mov.w	r3, #0
 800df82:	014b      	lsls	r3, r1, #5
 800df84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800df88:	0142      	lsls	r2, r0, #5
 800df8a:	4610      	mov	r0, r2
 800df8c:	4619      	mov	r1, r3
 800df8e:	ebb0 0008 	subs.w	r0, r0, r8
 800df92:	eb61 0109 	sbc.w	r1, r1, r9
 800df96:	f04f 0200 	mov.w	r2, #0
 800df9a:	f04f 0300 	mov.w	r3, #0
 800df9e:	018b      	lsls	r3, r1, #6
 800dfa0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800dfa4:	0182      	lsls	r2, r0, #6
 800dfa6:	1a12      	subs	r2, r2, r0
 800dfa8:	eb63 0301 	sbc.w	r3, r3, r1
 800dfac:	f04f 0000 	mov.w	r0, #0
 800dfb0:	f04f 0100 	mov.w	r1, #0
 800dfb4:	00d9      	lsls	r1, r3, #3
 800dfb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800dfba:	00d0      	lsls	r0, r2, #3
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	eb12 0208 	adds.w	r2, r2, r8
 800dfc4:	eb43 0309 	adc.w	r3, r3, r9
 800dfc8:	f04f 0000 	mov.w	r0, #0
 800dfcc:	f04f 0100 	mov.w	r1, #0
 800dfd0:	0259      	lsls	r1, r3, #9
 800dfd2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800dfd6:	0250      	lsls	r0, r2, #9
 800dfd8:	4602      	mov	r2, r0
 800dfda:	460b      	mov	r3, r1
 800dfdc:	4610      	mov	r0, r2
 800dfde:	4619      	mov	r1, r3
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	f04f 0300 	mov.w	r3, #0
 800dfe8:	f7f2 fe4e 	bl	8000c88 <__aeabi_uldivmod>
 800dfec:	4602      	mov	r2, r0
 800dfee:	460b      	mov	r3, r1
 800dff0:	4613      	mov	r3, r2
 800dff2:	60fb      	str	r3, [r7, #12]
 800dff4:	e04a      	b.n	800e08c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dff6:	4b31      	ldr	r3, [pc, #196]	; (800e0bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	099b      	lsrs	r3, r3, #6
 800dffc:	461a      	mov	r2, r3
 800dffe:	f04f 0300 	mov.w	r3, #0
 800e002:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e006:	f04f 0100 	mov.w	r1, #0
 800e00a:	ea02 0400 	and.w	r4, r2, r0
 800e00e:	ea03 0501 	and.w	r5, r3, r1
 800e012:	4620      	mov	r0, r4
 800e014:	4629      	mov	r1, r5
 800e016:	f04f 0200 	mov.w	r2, #0
 800e01a:	f04f 0300 	mov.w	r3, #0
 800e01e:	014b      	lsls	r3, r1, #5
 800e020:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e024:	0142      	lsls	r2, r0, #5
 800e026:	4610      	mov	r0, r2
 800e028:	4619      	mov	r1, r3
 800e02a:	1b00      	subs	r0, r0, r4
 800e02c:	eb61 0105 	sbc.w	r1, r1, r5
 800e030:	f04f 0200 	mov.w	r2, #0
 800e034:	f04f 0300 	mov.w	r3, #0
 800e038:	018b      	lsls	r3, r1, #6
 800e03a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e03e:	0182      	lsls	r2, r0, #6
 800e040:	1a12      	subs	r2, r2, r0
 800e042:	eb63 0301 	sbc.w	r3, r3, r1
 800e046:	f04f 0000 	mov.w	r0, #0
 800e04a:	f04f 0100 	mov.w	r1, #0
 800e04e:	00d9      	lsls	r1, r3, #3
 800e050:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e054:	00d0      	lsls	r0, r2, #3
 800e056:	4602      	mov	r2, r0
 800e058:	460b      	mov	r3, r1
 800e05a:	1912      	adds	r2, r2, r4
 800e05c:	eb45 0303 	adc.w	r3, r5, r3
 800e060:	f04f 0000 	mov.w	r0, #0
 800e064:	f04f 0100 	mov.w	r1, #0
 800e068:	0299      	lsls	r1, r3, #10
 800e06a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800e06e:	0290      	lsls	r0, r2, #10
 800e070:	4602      	mov	r2, r0
 800e072:	460b      	mov	r3, r1
 800e074:	4610      	mov	r0, r2
 800e076:	4619      	mov	r1, r3
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	461a      	mov	r2, r3
 800e07c:	f04f 0300 	mov.w	r3, #0
 800e080:	f7f2 fe02 	bl	8000c88 <__aeabi_uldivmod>
 800e084:	4602      	mov	r2, r0
 800e086:	460b      	mov	r3, r1
 800e088:	4613      	mov	r3, r2
 800e08a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e08c:	4b0b      	ldr	r3, [pc, #44]	; (800e0bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	0c1b      	lsrs	r3, r3, #16
 800e092:	f003 0303 	and.w	r3, r3, #3
 800e096:	3301      	adds	r3, #1
 800e098:	005b      	lsls	r3, r3, #1
 800e09a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800e09c:	68fa      	ldr	r2, [r7, #12]
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0a4:	60bb      	str	r3, [r7, #8]
      break;
 800e0a6:	e002      	b.n	800e0ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e0a8:	4b05      	ldr	r3, [pc, #20]	; (800e0c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800e0aa:	60bb      	str	r3, [r7, #8]
      break;
 800e0ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e0ae:	68bb      	ldr	r3, [r7, #8]
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3710      	adds	r7, #16
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e0ba:	bf00      	nop
 800e0bc:	40023800 	.word	0x40023800
 800e0c0:	00f42400 	.word	0x00f42400
 800e0c4:	007a1200 	.word	0x007a1200

0800e0c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e0c8:	b480      	push	{r7}
 800e0ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e0cc:	4b03      	ldr	r3, [pc, #12]	; (800e0dc <HAL_RCC_GetHCLKFreq+0x14>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d8:	4770      	bx	lr
 800e0da:	bf00      	nop
 800e0dc:	20000828 	.word	0x20000828

0800e0e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e0e4:	f7ff fff0 	bl	800e0c8 <HAL_RCC_GetHCLKFreq>
 800e0e8:	4602      	mov	r2, r0
 800e0ea:	4b05      	ldr	r3, [pc, #20]	; (800e100 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e0ec:	689b      	ldr	r3, [r3, #8]
 800e0ee:	0a9b      	lsrs	r3, r3, #10
 800e0f0:	f003 0307 	and.w	r3, r3, #7
 800e0f4:	4903      	ldr	r1, [pc, #12]	; (800e104 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e0f6:	5ccb      	ldrb	r3, [r1, r3]
 800e0f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	bd80      	pop	{r7, pc}
 800e100:	40023800 	.word	0x40023800
 800e104:	0801c628 	.word	0x0801c628

0800e108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e10c:	f7ff ffdc 	bl	800e0c8 <HAL_RCC_GetHCLKFreq>
 800e110:	4602      	mov	r2, r0
 800e112:	4b05      	ldr	r3, [pc, #20]	; (800e128 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e114:	689b      	ldr	r3, [r3, #8]
 800e116:	0b5b      	lsrs	r3, r3, #13
 800e118:	f003 0307 	and.w	r3, r3, #7
 800e11c:	4903      	ldr	r1, [pc, #12]	; (800e12c <HAL_RCC_GetPCLK2Freq+0x24>)
 800e11e:	5ccb      	ldrb	r3, [r1, r3]
 800e120:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e124:	4618      	mov	r0, r3
 800e126:	bd80      	pop	{r7, pc}
 800e128:	40023800 	.word	0x40023800
 800e12c:	0801c628 	.word	0x0801c628

0800e130 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e130:	b480      	push	{r7}
 800e132:	b083      	sub	sp, #12
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
 800e138:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	220f      	movs	r2, #15
 800e13e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e140:	4b12      	ldr	r3, [pc, #72]	; (800e18c <HAL_RCC_GetClockConfig+0x5c>)
 800e142:	689b      	ldr	r3, [r3, #8]
 800e144:	f003 0203 	and.w	r2, r3, #3
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e14c:	4b0f      	ldr	r3, [pc, #60]	; (800e18c <HAL_RCC_GetClockConfig+0x5c>)
 800e14e:	689b      	ldr	r3, [r3, #8]
 800e150:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e158:	4b0c      	ldr	r3, [pc, #48]	; (800e18c <HAL_RCC_GetClockConfig+0x5c>)
 800e15a:	689b      	ldr	r3, [r3, #8]
 800e15c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800e164:	4b09      	ldr	r3, [pc, #36]	; (800e18c <HAL_RCC_GetClockConfig+0x5c>)
 800e166:	689b      	ldr	r3, [r3, #8]
 800e168:	08db      	lsrs	r3, r3, #3
 800e16a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e172:	4b07      	ldr	r3, [pc, #28]	; (800e190 <HAL_RCC_GetClockConfig+0x60>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	f003 020f 	and.w	r2, r3, #15
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	601a      	str	r2, [r3, #0]
}
 800e17e:	bf00      	nop
 800e180:	370c      	adds	r7, #12
 800e182:	46bd      	mov	sp, r7
 800e184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e188:	4770      	bx	lr
 800e18a:	bf00      	nop
 800e18c:	40023800 	.word	0x40023800
 800e190:	40023c00 	.word	0x40023c00

0800e194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d101      	bne.n	800e1a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	e01d      	b.n	800e1e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1ac:	b2db      	uxtb	r3, r3
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d106      	bne.n	800e1c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f7fd f99a 	bl	800b4f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2202      	movs	r2, #2
 800e1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681a      	ldr	r2, [r3, #0]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	3304      	adds	r3, #4
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	4610      	mov	r0, r2
 800e1d4:	f000 fa46 	bl	800e664 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2201      	movs	r2, #1
 800e1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e1e0:	2300      	movs	r3, #0
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3708      	adds	r7, #8
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}

0800e1ea <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e1ea:	b480      	push	{r7}
 800e1ec:	b085      	sub	sp, #20
 800e1ee:	af00      	add	r7, sp, #0
 800e1f0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2202      	movs	r2, #2
 800e1f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	689b      	ldr	r3, [r3, #8]
 800e200:	f003 0307 	and.w	r3, r3, #7
 800e204:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2b06      	cmp	r3, #6
 800e20a:	d007      	beq.n	800e21c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	681a      	ldr	r2, [r3, #0]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	f042 0201 	orr.w	r2, r2, #1
 800e21a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2201      	movs	r2, #1
 800e220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e224:	2300      	movs	r3, #0
}
 800e226:	4618      	mov	r0, r3
 800e228:	3714      	adds	r7, #20
 800e22a:	46bd      	mov	sp, r7
 800e22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e230:	4770      	bx	lr

0800e232 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e232:	b480      	push	{r7}
 800e234:	b085      	sub	sp, #20
 800e236:	af00      	add	r7, sp, #0
 800e238:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	68da      	ldr	r2, [r3, #12]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f042 0201 	orr.w	r2, r2, #1
 800e248:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	689b      	ldr	r3, [r3, #8]
 800e250:	f003 0307 	and.w	r3, r3, #7
 800e254:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	2b06      	cmp	r3, #6
 800e25a:	d007      	beq.n	800e26c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	681a      	ldr	r2, [r3, #0]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f042 0201 	orr.w	r2, r2, #1
 800e26a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e26c:	2300      	movs	r3, #0
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3714      	adds	r7, #20
 800e272:	46bd      	mov	sp, r7
 800e274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e278:	4770      	bx	lr

0800e27a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e27a:	b580      	push	{r7, lr}
 800e27c:	b082      	sub	sp, #8
 800e27e:	af00      	add	r7, sp, #0
 800e280:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	691b      	ldr	r3, [r3, #16]
 800e288:	f003 0302 	and.w	r3, r3, #2
 800e28c:	2b02      	cmp	r3, #2
 800e28e:	d122      	bne.n	800e2d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	68db      	ldr	r3, [r3, #12]
 800e296:	f003 0302 	and.w	r3, r3, #2
 800e29a:	2b02      	cmp	r3, #2
 800e29c:	d11b      	bne.n	800e2d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f06f 0202 	mvn.w	r2, #2
 800e2a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	699b      	ldr	r3, [r3, #24]
 800e2b4:	f003 0303 	and.w	r3, r3, #3
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d003      	beq.n	800e2c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f000 f9b2 	bl	800e626 <HAL_TIM_IC_CaptureCallback>
 800e2c2:	e005      	b.n	800e2d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f000 f9a4 	bl	800e612 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f000 f9b5 	bl	800e63a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	691b      	ldr	r3, [r3, #16]
 800e2dc:	f003 0304 	and.w	r3, r3, #4
 800e2e0:	2b04      	cmp	r3, #4
 800e2e2:	d122      	bne.n	800e32a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	68db      	ldr	r3, [r3, #12]
 800e2ea:	f003 0304 	and.w	r3, r3, #4
 800e2ee:	2b04      	cmp	r3, #4
 800e2f0:	d11b      	bne.n	800e32a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f06f 0204 	mvn.w	r2, #4
 800e2fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2202      	movs	r2, #2
 800e300:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	699b      	ldr	r3, [r3, #24]
 800e308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d003      	beq.n	800e318 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f000 f988 	bl	800e626 <HAL_TIM_IC_CaptureCallback>
 800e316:	e005      	b.n	800e324 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f000 f97a 	bl	800e612 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f000 f98b 	bl	800e63a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2200      	movs	r2, #0
 800e328:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	691b      	ldr	r3, [r3, #16]
 800e330:	f003 0308 	and.w	r3, r3, #8
 800e334:	2b08      	cmp	r3, #8
 800e336:	d122      	bne.n	800e37e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	68db      	ldr	r3, [r3, #12]
 800e33e:	f003 0308 	and.w	r3, r3, #8
 800e342:	2b08      	cmp	r3, #8
 800e344:	d11b      	bne.n	800e37e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f06f 0208 	mvn.w	r2, #8
 800e34e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2204      	movs	r2, #4
 800e354:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	69db      	ldr	r3, [r3, #28]
 800e35c:	f003 0303 	and.w	r3, r3, #3
 800e360:	2b00      	cmp	r3, #0
 800e362:	d003      	beq.n	800e36c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f000 f95e 	bl	800e626 <HAL_TIM_IC_CaptureCallback>
 800e36a:	e005      	b.n	800e378 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f000 f950 	bl	800e612 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f000 f961 	bl	800e63a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2200      	movs	r2, #0
 800e37c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	691b      	ldr	r3, [r3, #16]
 800e384:	f003 0310 	and.w	r3, r3, #16
 800e388:	2b10      	cmp	r3, #16
 800e38a:	d122      	bne.n	800e3d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	68db      	ldr	r3, [r3, #12]
 800e392:	f003 0310 	and.w	r3, r3, #16
 800e396:	2b10      	cmp	r3, #16
 800e398:	d11b      	bne.n	800e3d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f06f 0210 	mvn.w	r2, #16
 800e3a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2208      	movs	r2, #8
 800e3a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	69db      	ldr	r3, [r3, #28]
 800e3b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d003      	beq.n	800e3c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f000 f934 	bl	800e626 <HAL_TIM_IC_CaptureCallback>
 800e3be:	e005      	b.n	800e3cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f000 f926 	bl	800e612 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f000 f937 	bl	800e63a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	691b      	ldr	r3, [r3, #16]
 800e3d8:	f003 0301 	and.w	r3, r3, #1
 800e3dc:	2b01      	cmp	r3, #1
 800e3de:	d10e      	bne.n	800e3fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	68db      	ldr	r3, [r3, #12]
 800e3e6:	f003 0301 	and.w	r3, r3, #1
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d107      	bne.n	800e3fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	f06f 0201 	mvn.w	r2, #1
 800e3f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	f7f6 fa5d 	bl	80048b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	691b      	ldr	r3, [r3, #16]
 800e404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e408:	2b80      	cmp	r3, #128	; 0x80
 800e40a:	d10e      	bne.n	800e42a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	68db      	ldr	r3, [r3, #12]
 800e412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e416:	2b80      	cmp	r3, #128	; 0x80
 800e418:	d107      	bne.n	800e42a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f000 fadd 	bl	800e9e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	691b      	ldr	r3, [r3, #16]
 800e430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e434:	2b40      	cmp	r3, #64	; 0x40
 800e436:	d10e      	bne.n	800e456 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	68db      	ldr	r3, [r3, #12]
 800e43e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e442:	2b40      	cmp	r3, #64	; 0x40
 800e444:	d107      	bne.n	800e456 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e44e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f000 f8fc 	bl	800e64e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	691b      	ldr	r3, [r3, #16]
 800e45c:	f003 0320 	and.w	r3, r3, #32
 800e460:	2b20      	cmp	r3, #32
 800e462:	d10e      	bne.n	800e482 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	68db      	ldr	r3, [r3, #12]
 800e46a:	f003 0320 	and.w	r3, r3, #32
 800e46e:	2b20      	cmp	r3, #32
 800e470:	d107      	bne.n	800e482 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f06f 0220 	mvn.w	r2, #32
 800e47a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f000 faa7 	bl	800e9d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e482:	bf00      	nop
 800e484:	3708      	adds	r7, #8
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}

0800e48a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e48a:	b580      	push	{r7, lr}
 800e48c:	b084      	sub	sp, #16
 800e48e:	af00      	add	r7, sp, #0
 800e490:	6078      	str	r0, [r7, #4]
 800e492:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e49a:	2b01      	cmp	r3, #1
 800e49c:	d101      	bne.n	800e4a2 <HAL_TIM_ConfigClockSource+0x18>
 800e49e:	2302      	movs	r3, #2
 800e4a0:	e0b3      	b.n	800e60a <HAL_TIM_ConfigClockSource+0x180>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2202      	movs	r2, #2
 800e4ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	689b      	ldr	r3, [r3, #8]
 800e4b8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e4c0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e4c8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	68fa      	ldr	r2, [r7, #12]
 800e4d0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e4da:	d03e      	beq.n	800e55a <HAL_TIM_ConfigClockSource+0xd0>
 800e4dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e4e0:	f200 8087 	bhi.w	800e5f2 <HAL_TIM_ConfigClockSource+0x168>
 800e4e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4e8:	f000 8085 	beq.w	800e5f6 <HAL_TIM_ConfigClockSource+0x16c>
 800e4ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4f0:	d87f      	bhi.n	800e5f2 <HAL_TIM_ConfigClockSource+0x168>
 800e4f2:	2b70      	cmp	r3, #112	; 0x70
 800e4f4:	d01a      	beq.n	800e52c <HAL_TIM_ConfigClockSource+0xa2>
 800e4f6:	2b70      	cmp	r3, #112	; 0x70
 800e4f8:	d87b      	bhi.n	800e5f2 <HAL_TIM_ConfigClockSource+0x168>
 800e4fa:	2b60      	cmp	r3, #96	; 0x60
 800e4fc:	d050      	beq.n	800e5a0 <HAL_TIM_ConfigClockSource+0x116>
 800e4fe:	2b60      	cmp	r3, #96	; 0x60
 800e500:	d877      	bhi.n	800e5f2 <HAL_TIM_ConfigClockSource+0x168>
 800e502:	2b50      	cmp	r3, #80	; 0x50
 800e504:	d03c      	beq.n	800e580 <HAL_TIM_ConfigClockSource+0xf6>
 800e506:	2b50      	cmp	r3, #80	; 0x50
 800e508:	d873      	bhi.n	800e5f2 <HAL_TIM_ConfigClockSource+0x168>
 800e50a:	2b40      	cmp	r3, #64	; 0x40
 800e50c:	d058      	beq.n	800e5c0 <HAL_TIM_ConfigClockSource+0x136>
 800e50e:	2b40      	cmp	r3, #64	; 0x40
 800e510:	d86f      	bhi.n	800e5f2 <HAL_TIM_ConfigClockSource+0x168>
 800e512:	2b30      	cmp	r3, #48	; 0x30
 800e514:	d064      	beq.n	800e5e0 <HAL_TIM_ConfigClockSource+0x156>
 800e516:	2b30      	cmp	r3, #48	; 0x30
 800e518:	d86b      	bhi.n	800e5f2 <HAL_TIM_ConfigClockSource+0x168>
 800e51a:	2b20      	cmp	r3, #32
 800e51c:	d060      	beq.n	800e5e0 <HAL_TIM_ConfigClockSource+0x156>
 800e51e:	2b20      	cmp	r3, #32
 800e520:	d867      	bhi.n	800e5f2 <HAL_TIM_ConfigClockSource+0x168>
 800e522:	2b00      	cmp	r3, #0
 800e524:	d05c      	beq.n	800e5e0 <HAL_TIM_ConfigClockSource+0x156>
 800e526:	2b10      	cmp	r3, #16
 800e528:	d05a      	beq.n	800e5e0 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e52a:	e062      	b.n	800e5f2 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6818      	ldr	r0, [r3, #0]
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	6899      	ldr	r1, [r3, #8]
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	685a      	ldr	r2, [r3, #4]
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	68db      	ldr	r3, [r3, #12]
 800e53c:	f000 f9ac 	bl	800e898 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	689b      	ldr	r3, [r3, #8]
 800e546:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e54e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	68fa      	ldr	r2, [r7, #12]
 800e556:	609a      	str	r2, [r3, #8]
      break;
 800e558:	e04e      	b.n	800e5f8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6818      	ldr	r0, [r3, #0]
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	6899      	ldr	r1, [r3, #8]
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	685a      	ldr	r2, [r3, #4]
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	68db      	ldr	r3, [r3, #12]
 800e56a:	f000 f995 	bl	800e898 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	689a      	ldr	r2, [r3, #8]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e57c:	609a      	str	r2, [r3, #8]
      break;
 800e57e:	e03b      	b.n	800e5f8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6818      	ldr	r0, [r3, #0]
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	6859      	ldr	r1, [r3, #4]
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	68db      	ldr	r3, [r3, #12]
 800e58c:	461a      	mov	r2, r3
 800e58e:	f000 f909 	bl	800e7a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	2150      	movs	r1, #80	; 0x50
 800e598:	4618      	mov	r0, r3
 800e59a:	f000 f962 	bl	800e862 <TIM_ITRx_SetConfig>
      break;
 800e59e:	e02b      	b.n	800e5f8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6818      	ldr	r0, [r3, #0]
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	6859      	ldr	r1, [r3, #4]
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	68db      	ldr	r3, [r3, #12]
 800e5ac:	461a      	mov	r2, r3
 800e5ae:	f000 f928 	bl	800e802 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	2160      	movs	r1, #96	; 0x60
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f000 f952 	bl	800e862 <TIM_ITRx_SetConfig>
      break;
 800e5be:	e01b      	b.n	800e5f8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6818      	ldr	r0, [r3, #0]
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	6859      	ldr	r1, [r3, #4]
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	68db      	ldr	r3, [r3, #12]
 800e5cc:	461a      	mov	r2, r3
 800e5ce:	f000 f8e9 	bl	800e7a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	2140      	movs	r1, #64	; 0x40
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f000 f942 	bl	800e862 <TIM_ITRx_SetConfig>
      break;
 800e5de:	e00b      	b.n	800e5f8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681a      	ldr	r2, [r3, #0]
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	4619      	mov	r1, r3
 800e5ea:	4610      	mov	r0, r2
 800e5ec:	f000 f939 	bl	800e862 <TIM_ITRx_SetConfig>
      break;
 800e5f0:	e002      	b.n	800e5f8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800e5f2:	bf00      	nop
 800e5f4:	e000      	b.n	800e5f8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800e5f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2201      	movs	r2, #1
 800e5fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2200      	movs	r2, #0
 800e604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e608:	2300      	movs	r3, #0
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3710      	adds	r7, #16
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}

0800e612 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e612:	b480      	push	{r7}
 800e614:	b083      	sub	sp, #12
 800e616:	af00      	add	r7, sp, #0
 800e618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e61a:	bf00      	nop
 800e61c:	370c      	adds	r7, #12
 800e61e:	46bd      	mov	sp, r7
 800e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e624:	4770      	bx	lr

0800e626 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e626:	b480      	push	{r7}
 800e628:	b083      	sub	sp, #12
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e62e:	bf00      	nop
 800e630:	370c      	adds	r7, #12
 800e632:	46bd      	mov	sp, r7
 800e634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e638:	4770      	bx	lr

0800e63a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e63a:	b480      	push	{r7}
 800e63c:	b083      	sub	sp, #12
 800e63e:	af00      	add	r7, sp, #0
 800e640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e642:	bf00      	nop
 800e644:	370c      	adds	r7, #12
 800e646:	46bd      	mov	sp, r7
 800e648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64c:	4770      	bx	lr

0800e64e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e64e:	b480      	push	{r7}
 800e650:	b083      	sub	sp, #12
 800e652:	af00      	add	r7, sp, #0
 800e654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e656:	bf00      	nop
 800e658:	370c      	adds	r7, #12
 800e65a:	46bd      	mov	sp, r7
 800e65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e660:	4770      	bx	lr
	...

0800e664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e664:	b480      	push	{r7}
 800e666:	b085      	sub	sp, #20
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	4a40      	ldr	r2, [pc, #256]	; (800e778 <TIM_Base_SetConfig+0x114>)
 800e678:	4293      	cmp	r3, r2
 800e67a:	d013      	beq.n	800e6a4 <TIM_Base_SetConfig+0x40>
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e682:	d00f      	beq.n	800e6a4 <TIM_Base_SetConfig+0x40>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	4a3d      	ldr	r2, [pc, #244]	; (800e77c <TIM_Base_SetConfig+0x118>)
 800e688:	4293      	cmp	r3, r2
 800e68a:	d00b      	beq.n	800e6a4 <TIM_Base_SetConfig+0x40>
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	4a3c      	ldr	r2, [pc, #240]	; (800e780 <TIM_Base_SetConfig+0x11c>)
 800e690:	4293      	cmp	r3, r2
 800e692:	d007      	beq.n	800e6a4 <TIM_Base_SetConfig+0x40>
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	4a3b      	ldr	r2, [pc, #236]	; (800e784 <TIM_Base_SetConfig+0x120>)
 800e698:	4293      	cmp	r3, r2
 800e69a:	d003      	beq.n	800e6a4 <TIM_Base_SetConfig+0x40>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	4a3a      	ldr	r2, [pc, #232]	; (800e788 <TIM_Base_SetConfig+0x124>)
 800e6a0:	4293      	cmp	r3, r2
 800e6a2:	d108      	bne.n	800e6b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e6aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	685b      	ldr	r3, [r3, #4]
 800e6b0:	68fa      	ldr	r2, [r7, #12]
 800e6b2:	4313      	orrs	r3, r2
 800e6b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	4a2f      	ldr	r2, [pc, #188]	; (800e778 <TIM_Base_SetConfig+0x114>)
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d02b      	beq.n	800e716 <TIM_Base_SetConfig+0xb2>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6c4:	d027      	beq.n	800e716 <TIM_Base_SetConfig+0xb2>
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	4a2c      	ldr	r2, [pc, #176]	; (800e77c <TIM_Base_SetConfig+0x118>)
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d023      	beq.n	800e716 <TIM_Base_SetConfig+0xb2>
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	4a2b      	ldr	r2, [pc, #172]	; (800e780 <TIM_Base_SetConfig+0x11c>)
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d01f      	beq.n	800e716 <TIM_Base_SetConfig+0xb2>
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	4a2a      	ldr	r2, [pc, #168]	; (800e784 <TIM_Base_SetConfig+0x120>)
 800e6da:	4293      	cmp	r3, r2
 800e6dc:	d01b      	beq.n	800e716 <TIM_Base_SetConfig+0xb2>
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	4a29      	ldr	r2, [pc, #164]	; (800e788 <TIM_Base_SetConfig+0x124>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	d017      	beq.n	800e716 <TIM_Base_SetConfig+0xb2>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	4a28      	ldr	r2, [pc, #160]	; (800e78c <TIM_Base_SetConfig+0x128>)
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	d013      	beq.n	800e716 <TIM_Base_SetConfig+0xb2>
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	4a27      	ldr	r2, [pc, #156]	; (800e790 <TIM_Base_SetConfig+0x12c>)
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d00f      	beq.n	800e716 <TIM_Base_SetConfig+0xb2>
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	4a26      	ldr	r2, [pc, #152]	; (800e794 <TIM_Base_SetConfig+0x130>)
 800e6fa:	4293      	cmp	r3, r2
 800e6fc:	d00b      	beq.n	800e716 <TIM_Base_SetConfig+0xb2>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	4a25      	ldr	r2, [pc, #148]	; (800e798 <TIM_Base_SetConfig+0x134>)
 800e702:	4293      	cmp	r3, r2
 800e704:	d007      	beq.n	800e716 <TIM_Base_SetConfig+0xb2>
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	4a24      	ldr	r2, [pc, #144]	; (800e79c <TIM_Base_SetConfig+0x138>)
 800e70a:	4293      	cmp	r3, r2
 800e70c:	d003      	beq.n	800e716 <TIM_Base_SetConfig+0xb2>
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	4a23      	ldr	r2, [pc, #140]	; (800e7a0 <TIM_Base_SetConfig+0x13c>)
 800e712:	4293      	cmp	r3, r2
 800e714:	d108      	bne.n	800e728 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e71c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	68db      	ldr	r3, [r3, #12]
 800e722:	68fa      	ldr	r2, [r7, #12]
 800e724:	4313      	orrs	r3, r2
 800e726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	695b      	ldr	r3, [r3, #20]
 800e732:	4313      	orrs	r3, r2
 800e734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	68fa      	ldr	r2, [r7, #12]
 800e73a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	689a      	ldr	r2, [r3, #8]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	681a      	ldr	r2, [r3, #0]
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	4a0a      	ldr	r2, [pc, #40]	; (800e778 <TIM_Base_SetConfig+0x114>)
 800e750:	4293      	cmp	r3, r2
 800e752:	d003      	beq.n	800e75c <TIM_Base_SetConfig+0xf8>
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	4a0c      	ldr	r2, [pc, #48]	; (800e788 <TIM_Base_SetConfig+0x124>)
 800e758:	4293      	cmp	r3, r2
 800e75a:	d103      	bne.n	800e764 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	691a      	ldr	r2, [r3, #16]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2201      	movs	r2, #1
 800e768:	615a      	str	r2, [r3, #20]
}
 800e76a:	bf00      	nop
 800e76c:	3714      	adds	r7, #20
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr
 800e776:	bf00      	nop
 800e778:	40010000 	.word	0x40010000
 800e77c:	40000400 	.word	0x40000400
 800e780:	40000800 	.word	0x40000800
 800e784:	40000c00 	.word	0x40000c00
 800e788:	40010400 	.word	0x40010400
 800e78c:	40014000 	.word	0x40014000
 800e790:	40014400 	.word	0x40014400
 800e794:	40014800 	.word	0x40014800
 800e798:	40001800 	.word	0x40001800
 800e79c:	40001c00 	.word	0x40001c00
 800e7a0:	40002000 	.word	0x40002000

0800e7a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b087      	sub	sp, #28
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	60b9      	str	r1, [r7, #8]
 800e7ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	6a1b      	ldr	r3, [r3, #32]
 800e7b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	6a1b      	ldr	r3, [r3, #32]
 800e7ba:	f023 0201 	bic.w	r2, r3, #1
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	699b      	ldr	r3, [r3, #24]
 800e7c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e7c8:	693b      	ldr	r3, [r7, #16]
 800e7ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e7ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	011b      	lsls	r3, r3, #4
 800e7d4:	693a      	ldr	r2, [r7, #16]
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	f023 030a 	bic.w	r3, r3, #10
 800e7e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e7e2:	697a      	ldr	r2, [r7, #20]
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	4313      	orrs	r3, r2
 800e7e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	693a      	ldr	r2, [r7, #16]
 800e7ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	697a      	ldr	r2, [r7, #20]
 800e7f4:	621a      	str	r2, [r3, #32]
}
 800e7f6:	bf00      	nop
 800e7f8:	371c      	adds	r7, #28
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e800:	4770      	bx	lr

0800e802 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e802:	b480      	push	{r7}
 800e804:	b087      	sub	sp, #28
 800e806:	af00      	add	r7, sp, #0
 800e808:	60f8      	str	r0, [r7, #12]
 800e80a:	60b9      	str	r1, [r7, #8]
 800e80c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	6a1b      	ldr	r3, [r3, #32]
 800e812:	f023 0210 	bic.w	r2, r3, #16
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	699b      	ldr	r3, [r3, #24]
 800e81e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	6a1b      	ldr	r3, [r3, #32]
 800e824:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e82c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	031b      	lsls	r3, r3, #12
 800e832:	697a      	ldr	r2, [r7, #20]
 800e834:	4313      	orrs	r3, r2
 800e836:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e83e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	011b      	lsls	r3, r3, #4
 800e844:	693a      	ldr	r2, [r7, #16]
 800e846:	4313      	orrs	r3, r2
 800e848:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	697a      	ldr	r2, [r7, #20]
 800e84e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	693a      	ldr	r2, [r7, #16]
 800e854:	621a      	str	r2, [r3, #32]
}
 800e856:	bf00      	nop
 800e858:	371c      	adds	r7, #28
 800e85a:	46bd      	mov	sp, r7
 800e85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e860:	4770      	bx	lr

0800e862 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e862:	b480      	push	{r7}
 800e864:	b085      	sub	sp, #20
 800e866:	af00      	add	r7, sp, #0
 800e868:	6078      	str	r0, [r7, #4]
 800e86a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	689b      	ldr	r3, [r3, #8]
 800e870:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e878:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e87a:	683a      	ldr	r2, [r7, #0]
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	4313      	orrs	r3, r2
 800e880:	f043 0307 	orr.w	r3, r3, #7
 800e884:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	68fa      	ldr	r2, [r7, #12]
 800e88a:	609a      	str	r2, [r3, #8]
}
 800e88c:	bf00      	nop
 800e88e:	3714      	adds	r7, #20
 800e890:	46bd      	mov	sp, r7
 800e892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e896:	4770      	bx	lr

0800e898 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e898:	b480      	push	{r7}
 800e89a:	b087      	sub	sp, #28
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	60f8      	str	r0, [r7, #12]
 800e8a0:	60b9      	str	r1, [r7, #8]
 800e8a2:	607a      	str	r2, [r7, #4]
 800e8a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	689b      	ldr	r3, [r3, #8]
 800e8aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e8b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	021a      	lsls	r2, r3, #8
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	431a      	orrs	r2, r3
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	4313      	orrs	r3, r2
 800e8c0:	697a      	ldr	r2, [r7, #20]
 800e8c2:	4313      	orrs	r3, r2
 800e8c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	697a      	ldr	r2, [r7, #20]
 800e8ca:	609a      	str	r2, [r3, #8]
}
 800e8cc:	bf00      	nop
 800e8ce:	371c      	adds	r7, #28
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d6:	4770      	bx	lr

0800e8d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b085      	sub	sp, #20
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
 800e8e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e8e8:	2b01      	cmp	r3, #1
 800e8ea:	d101      	bne.n	800e8f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e8ec:	2302      	movs	r3, #2
 800e8ee:	e05a      	b.n	800e9a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2202      	movs	r2, #2
 800e8fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	685b      	ldr	r3, [r3, #4]
 800e906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	689b      	ldr	r3, [r3, #8]
 800e90e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	68fa      	ldr	r2, [r7, #12]
 800e91e:	4313      	orrs	r3, r2
 800e920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	68fa      	ldr	r2, [r7, #12]
 800e928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	4a21      	ldr	r2, [pc, #132]	; (800e9b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e930:	4293      	cmp	r3, r2
 800e932:	d022      	beq.n	800e97a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e93c:	d01d      	beq.n	800e97a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	4a1d      	ldr	r2, [pc, #116]	; (800e9b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e944:	4293      	cmp	r3, r2
 800e946:	d018      	beq.n	800e97a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	4a1b      	ldr	r2, [pc, #108]	; (800e9bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e94e:	4293      	cmp	r3, r2
 800e950:	d013      	beq.n	800e97a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	4a1a      	ldr	r2, [pc, #104]	; (800e9c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e958:	4293      	cmp	r3, r2
 800e95a:	d00e      	beq.n	800e97a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	4a18      	ldr	r2, [pc, #96]	; (800e9c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e962:	4293      	cmp	r3, r2
 800e964:	d009      	beq.n	800e97a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	4a17      	ldr	r2, [pc, #92]	; (800e9c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d004      	beq.n	800e97a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	4a15      	ldr	r2, [pc, #84]	; (800e9cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e976:	4293      	cmp	r3, r2
 800e978:	d10c      	bne.n	800e994 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e980:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	685b      	ldr	r3, [r3, #4]
 800e986:	68ba      	ldr	r2, [r7, #8]
 800e988:	4313      	orrs	r3, r2
 800e98a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	68ba      	ldr	r2, [r7, #8]
 800e992:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2201      	movs	r2, #1
 800e998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e9a4:	2300      	movs	r3, #0
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3714      	adds	r7, #20
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr
 800e9b2:	bf00      	nop
 800e9b4:	40010000 	.word	0x40010000
 800e9b8:	40000400 	.word	0x40000400
 800e9bc:	40000800 	.word	0x40000800
 800e9c0:	40000c00 	.word	0x40000c00
 800e9c4:	40010400 	.word	0x40010400
 800e9c8:	40014000 	.word	0x40014000
 800e9cc:	40001800 	.word	0x40001800

0800e9d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	b083      	sub	sp, #12
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e9d8:	bf00      	nop
 800e9da:	370c      	adds	r7, #12
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr

0800e9e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b083      	sub	sp, #12
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e9ec:	bf00      	nop
 800e9ee:	370c      	adds	r7, #12
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f6:	4770      	bx	lr

0800e9f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b082      	sub	sp, #8
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d101      	bne.n	800ea0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ea06:	2301      	movs	r3, #1
 800ea08:	e03f      	b.n	800ea8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ea10:	b2db      	uxtb	r3, r3
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d106      	bne.n	800ea24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2200      	movs	r2, #0
 800ea1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f7fc fdce 	bl	800b5c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2224      	movs	r2, #36	; 0x24
 800ea28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	68da      	ldr	r2, [r3, #12]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ea3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f000 fb6b 	bl	800f118 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	691a      	ldr	r2, [r3, #16]
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ea50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	695a      	ldr	r2, [r3, #20]
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ea60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	68da      	ldr	r2, [r3, #12]
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ea70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2200      	movs	r2, #0
 800ea76:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2220      	movs	r2, #32
 800ea7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2220      	movs	r2, #32
 800ea84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ea88:	2300      	movs	r3, #0
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3708      	adds	r7, #8
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}
	...

0800ea94 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b086      	sub	sp, #24
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	60f8      	str	r0, [r7, #12]
 800ea9c:	60b9      	str	r1, [r7, #8]
 800ea9e:	4613      	mov	r3, r2
 800eaa0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800eaa8:	b2db      	uxtb	r3, r3
 800eaaa:	2b20      	cmp	r3, #32
 800eaac:	d153      	bne.n	800eb56 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d002      	beq.n	800eaba <HAL_UART_Transmit_DMA+0x26>
 800eab4:	88fb      	ldrh	r3, [r7, #6]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d101      	bne.n	800eabe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800eaba:	2301      	movs	r3, #1
 800eabc:	e04c      	b.n	800eb58 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eac4:	2b01      	cmp	r3, #1
 800eac6:	d101      	bne.n	800eacc <HAL_UART_Transmit_DMA+0x38>
 800eac8:	2302      	movs	r3, #2
 800eaca:	e045      	b.n	800eb58 <HAL_UART_Transmit_DMA+0xc4>
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	2201      	movs	r2, #1
 800ead0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800ead4:	68ba      	ldr	r2, [r7, #8]
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	88fa      	ldrh	r2, [r7, #6]
 800eade:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	88fa      	ldrh	r2, [r7, #6]
 800eae4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2200      	movs	r2, #0
 800eaea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	2221      	movs	r2, #33	; 0x21
 800eaf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaf8:	4a19      	ldr	r2, [pc, #100]	; (800eb60 <HAL_UART_Transmit_DMA+0xcc>)
 800eafa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb00:	4a18      	ldr	r2, [pc, #96]	; (800eb64 <HAL_UART_Transmit_DMA+0xd0>)
 800eb02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb08:	4a17      	ldr	r2, [pc, #92]	; (800eb68 <HAL_UART_Transmit_DMA+0xd4>)
 800eb0a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb10:	2200      	movs	r2, #0
 800eb12:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800eb14:	f107 0308 	add.w	r3, r7, #8
 800eb18:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	6819      	ldr	r1, [r3, #0]
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	3304      	adds	r3, #4
 800eb28:	461a      	mov	r2, r3
 800eb2a:	88fb      	ldrh	r3, [r7, #6]
 800eb2c:	f7fd f812 	bl	800bb54 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800eb38:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	695a      	ldr	r2, [r3, #20]
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800eb50:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800eb52:	2300      	movs	r3, #0
 800eb54:	e000      	b.n	800eb58 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800eb56:	2302      	movs	r3, #2
  }
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3718      	adds	r7, #24
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}
 800eb60:	0800eda9 	.word	0x0800eda9
 800eb64:	0800edfb 	.word	0x0800edfb
 800eb68:	0800ee17 	.word	0x0800ee17

0800eb6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b088      	sub	sp, #32
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	68db      	ldr	r3, [r3, #12]
 800eb82:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	695b      	ldr	r3, [r3, #20]
 800eb8a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800eb90:	2300      	movs	r3, #0
 800eb92:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800eb94:	69fb      	ldr	r3, [r7, #28]
 800eb96:	f003 030f 	and.w	r3, r3, #15
 800eb9a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800eb9c:	693b      	ldr	r3, [r7, #16]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d10d      	bne.n	800ebbe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800eba2:	69fb      	ldr	r3, [r7, #28]
 800eba4:	f003 0320 	and.w	r3, r3, #32
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d008      	beq.n	800ebbe <HAL_UART_IRQHandler+0x52>
 800ebac:	69bb      	ldr	r3, [r7, #24]
 800ebae:	f003 0320 	and.w	r3, r3, #32
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d003      	beq.n	800ebbe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f000 fa2d 	bl	800f016 <UART_Receive_IT>
      return;
 800ebbc:	e0d0      	b.n	800ed60 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	f000 80b0 	beq.w	800ed26 <HAL_UART_IRQHandler+0x1ba>
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	f003 0301 	and.w	r3, r3, #1
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d105      	bne.n	800ebdc <HAL_UART_IRQHandler+0x70>
 800ebd0:	69bb      	ldr	r3, [r7, #24]
 800ebd2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	f000 80a5 	beq.w	800ed26 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ebdc:	69fb      	ldr	r3, [r7, #28]
 800ebde:	f003 0301 	and.w	r3, r3, #1
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d00a      	beq.n	800ebfc <HAL_UART_IRQHandler+0x90>
 800ebe6:	69bb      	ldr	r3, [r7, #24]
 800ebe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d005      	beq.n	800ebfc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebf4:	f043 0201 	orr.w	r2, r3, #1
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ebfc:	69fb      	ldr	r3, [r7, #28]
 800ebfe:	f003 0304 	and.w	r3, r3, #4
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d00a      	beq.n	800ec1c <HAL_UART_IRQHandler+0xb0>
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	f003 0301 	and.w	r3, r3, #1
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d005      	beq.n	800ec1c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec14:	f043 0202 	orr.w	r2, r3, #2
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ec1c:	69fb      	ldr	r3, [r7, #28]
 800ec1e:	f003 0302 	and.w	r3, r3, #2
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d00a      	beq.n	800ec3c <HAL_UART_IRQHandler+0xd0>
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	f003 0301 	and.w	r3, r3, #1
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d005      	beq.n	800ec3c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec34:	f043 0204 	orr.w	r2, r3, #4
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800ec3c:	69fb      	ldr	r3, [r7, #28]
 800ec3e:	f003 0308 	and.w	r3, r3, #8
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d00f      	beq.n	800ec66 <HAL_UART_IRQHandler+0xfa>
 800ec46:	69bb      	ldr	r3, [r7, #24]
 800ec48:	f003 0320 	and.w	r3, r3, #32
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d104      	bne.n	800ec5a <HAL_UART_IRQHandler+0xee>
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	f003 0301 	and.w	r3, r3, #1
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d005      	beq.n	800ec66 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec5e:	f043 0208 	orr.w	r2, r3, #8
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d077      	beq.n	800ed5e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ec6e:	69fb      	ldr	r3, [r7, #28]
 800ec70:	f003 0320 	and.w	r3, r3, #32
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d007      	beq.n	800ec88 <HAL_UART_IRQHandler+0x11c>
 800ec78:	69bb      	ldr	r3, [r7, #24]
 800ec7a:	f003 0320 	and.w	r3, r3, #32
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d002      	beq.n	800ec88 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f000 f9c7 	bl	800f016 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	695b      	ldr	r3, [r3, #20]
 800ec8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec92:	2b40      	cmp	r3, #64	; 0x40
 800ec94:	bf0c      	ite	eq
 800ec96:	2301      	moveq	r3, #1
 800ec98:	2300      	movne	r3, #0
 800ec9a:	b2db      	uxtb	r3, r3
 800ec9c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eca2:	f003 0308 	and.w	r3, r3, #8
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d102      	bne.n	800ecb0 <HAL_UART_IRQHandler+0x144>
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d031      	beq.n	800ed14 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f000 f910 	bl	800eed6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	695b      	ldr	r3, [r3, #20]
 800ecbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecc0:	2b40      	cmp	r3, #64	; 0x40
 800ecc2:	d123      	bne.n	800ed0c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	695a      	ldr	r2, [r3, #20]
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ecd2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d013      	beq.n	800ed04 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ece0:	4a21      	ldr	r2, [pc, #132]	; (800ed68 <HAL_UART_IRQHandler+0x1fc>)
 800ece2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ece8:	4618      	mov	r0, r3
 800ecea:	f7fc ff8b 	bl	800bc04 <HAL_DMA_Abort_IT>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d016      	beq.n	800ed22 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecfa:	687a      	ldr	r2, [r7, #4]
 800ecfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ecfe:	4610      	mov	r0, r2
 800ed00:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed02:	e00e      	b.n	800ed22 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f000 f845 	bl	800ed94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed0a:	e00a      	b.n	800ed22 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f000 f841 	bl	800ed94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed12:	e006      	b.n	800ed22 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f000 f83d 	bl	800ed94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800ed20:	e01d      	b.n	800ed5e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed22:	bf00      	nop
    return;
 800ed24:	e01b      	b.n	800ed5e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ed26:	69fb      	ldr	r3, [r7, #28]
 800ed28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d008      	beq.n	800ed42 <HAL_UART_IRQHandler+0x1d6>
 800ed30:	69bb      	ldr	r3, [r7, #24]
 800ed32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d003      	beq.n	800ed42 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f000 f8fd 	bl	800ef3a <UART_Transmit_IT>
    return;
 800ed40:	e00e      	b.n	800ed60 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ed42:	69fb      	ldr	r3, [r7, #28]
 800ed44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d009      	beq.n	800ed60 <HAL_UART_IRQHandler+0x1f4>
 800ed4c:	69bb      	ldr	r3, [r7, #24]
 800ed4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d004      	beq.n	800ed60 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f000 f945 	bl	800efe6 <UART_EndTransmit_IT>
    return;
 800ed5c:	e000      	b.n	800ed60 <HAL_UART_IRQHandler+0x1f4>
    return;
 800ed5e:	bf00      	nop
  }
}
 800ed60:	3720      	adds	r7, #32
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}
 800ed66:	bf00      	nop
 800ed68:	0800ef13 	.word	0x0800ef13

0800ed6c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b083      	sub	sp, #12
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ed74:	bf00      	nop
 800ed76:	370c      	adds	r7, #12
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr

0800ed80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ed80:	b480      	push	{r7}
 800ed82:	b083      	sub	sp, #12
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ed88:	bf00      	nop
 800ed8a:	370c      	adds	r7, #12
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed92:	4770      	bx	lr

0800ed94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ed94:	b480      	push	{r7}
 800ed96:	b083      	sub	sp, #12
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ed9c:	bf00      	nop
 800ed9e:	370c      	adds	r7, #12
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr

0800eda8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b084      	sub	sp, #16
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edb4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d113      	bne.n	800edec <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2200      	movs	r2, #0
 800edc8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	695a      	ldr	r2, [r3, #20]
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800edd8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	68da      	ldr	r2, [r3, #12]
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ede8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800edea:	e002      	b.n	800edf2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800edec:	68f8      	ldr	r0, [r7, #12]
 800edee:	f7fc fc69 	bl	800b6c4 <HAL_UART_TxCpltCallback>
}
 800edf2:	bf00      	nop
 800edf4:	3710      	adds	r7, #16
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}

0800edfa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800edfa:	b580      	push	{r7, lr}
 800edfc:	b084      	sub	sp, #16
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee06:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ee08:	68f8      	ldr	r0, [r7, #12]
 800ee0a:	f7ff ffaf 	bl	800ed6c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ee0e:	bf00      	nop
 800ee10:	3710      	adds	r7, #16
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}

0800ee16 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ee16:	b580      	push	{r7, lr}
 800ee18:	b084      	sub	sp, #16
 800ee1a:	af00      	add	r7, sp, #0
 800ee1c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee26:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	695b      	ldr	r3, [r3, #20]
 800ee2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee32:	2b80      	cmp	r3, #128	; 0x80
 800ee34:	bf0c      	ite	eq
 800ee36:	2301      	moveq	r3, #1
 800ee38:	2300      	movne	r3, #0
 800ee3a:	b2db      	uxtb	r3, r3
 800ee3c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ee44:	b2db      	uxtb	r3, r3
 800ee46:	2b21      	cmp	r3, #33	; 0x21
 800ee48:	d108      	bne.n	800ee5c <UART_DMAError+0x46>
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d005      	beq.n	800ee5c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	2200      	movs	r2, #0
 800ee54:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ee56:	68b8      	ldr	r0, [r7, #8]
 800ee58:	f000 f827 	bl	800eeaa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	695b      	ldr	r3, [r3, #20]
 800ee62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee66:	2b40      	cmp	r3, #64	; 0x40
 800ee68:	bf0c      	ite	eq
 800ee6a:	2301      	moveq	r3, #1
 800ee6c:	2300      	movne	r3, #0
 800ee6e:	b2db      	uxtb	r3, r3
 800ee70:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ee78:	b2db      	uxtb	r3, r3
 800ee7a:	2b22      	cmp	r3, #34	; 0x22
 800ee7c:	d108      	bne.n	800ee90 <UART_DMAError+0x7a>
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d005      	beq.n	800ee90 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	2200      	movs	r2, #0
 800ee88:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ee8a:	68b8      	ldr	r0, [r7, #8]
 800ee8c:	f000 f823 	bl	800eed6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee94:	f043 0210 	orr.w	r2, r3, #16
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ee9c:	68b8      	ldr	r0, [r7, #8]
 800ee9e:	f7ff ff79 	bl	800ed94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eea2:	bf00      	nop
 800eea4:	3710      	adds	r7, #16
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}

0800eeaa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800eeaa:	b480      	push	{r7}
 800eeac:	b083      	sub	sp, #12
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	68da      	ldr	r2, [r3, #12]
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800eec0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2220      	movs	r2, #32
 800eec6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800eeca:	bf00      	nop
 800eecc:	370c      	adds	r7, #12
 800eece:	46bd      	mov	sp, r7
 800eed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed4:	4770      	bx	lr

0800eed6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eed6:	b480      	push	{r7}
 800eed8:	b083      	sub	sp, #12
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	68da      	ldr	r2, [r3, #12]
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800eeec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	695a      	ldr	r2, [r3, #20]
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f022 0201 	bic.w	r2, r2, #1
 800eefc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2220      	movs	r2, #32
 800ef02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800ef06:	bf00      	nop
 800ef08:	370c      	adds	r7, #12
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef10:	4770      	bx	lr

0800ef12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ef12:	b580      	push	{r7, lr}
 800ef14:	b084      	sub	sp, #16
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	2200      	movs	r2, #0
 800ef24:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	2200      	movs	r2, #0
 800ef2a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ef2c:	68f8      	ldr	r0, [r7, #12]
 800ef2e:	f7ff ff31 	bl	800ed94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef32:	bf00      	nop
 800ef34:	3710      	adds	r7, #16
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}

0800ef3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ef3a:	b480      	push	{r7}
 800ef3c:	b085      	sub	sp, #20
 800ef3e:	af00      	add	r7, sp, #0
 800ef40:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ef48:	b2db      	uxtb	r3, r3
 800ef4a:	2b21      	cmp	r3, #33	; 0x21
 800ef4c:	d144      	bne.n	800efd8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	689b      	ldr	r3, [r3, #8]
 800ef52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef56:	d11a      	bne.n	800ef8e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6a1b      	ldr	r3, [r3, #32]
 800ef5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	881b      	ldrh	r3, [r3, #0]
 800ef62:	461a      	mov	r2, r3
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ef6c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	691b      	ldr	r3, [r3, #16]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d105      	bne.n	800ef82 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6a1b      	ldr	r3, [r3, #32]
 800ef7a:	1c9a      	adds	r2, r3, #2
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	621a      	str	r2, [r3, #32]
 800ef80:	e00e      	b.n	800efa0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6a1b      	ldr	r3, [r3, #32]
 800ef86:	1c5a      	adds	r2, r3, #1
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	621a      	str	r2, [r3, #32]
 800ef8c:	e008      	b.n	800efa0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6a1b      	ldr	r3, [r3, #32]
 800ef92:	1c59      	adds	r1, r3, #1
 800ef94:	687a      	ldr	r2, [r7, #4]
 800ef96:	6211      	str	r1, [r2, #32]
 800ef98:	781a      	ldrb	r2, [r3, #0]
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800efa4:	b29b      	uxth	r3, r3
 800efa6:	3b01      	subs	r3, #1
 800efa8:	b29b      	uxth	r3, r3
 800efaa:	687a      	ldr	r2, [r7, #4]
 800efac:	4619      	mov	r1, r3
 800efae:	84d1      	strh	r1, [r2, #38]	; 0x26
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d10f      	bne.n	800efd4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	68da      	ldr	r2, [r3, #12]
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800efc2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	68da      	ldr	r2, [r3, #12]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800efd2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800efd4:	2300      	movs	r3, #0
 800efd6:	e000      	b.n	800efda <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800efd8:	2302      	movs	r3, #2
  }
}
 800efda:	4618      	mov	r0, r3
 800efdc:	3714      	adds	r7, #20
 800efde:	46bd      	mov	sp, r7
 800efe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe4:	4770      	bx	lr

0800efe6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800efe6:	b580      	push	{r7, lr}
 800efe8:	b082      	sub	sp, #8
 800efea:	af00      	add	r7, sp, #0
 800efec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	68da      	ldr	r2, [r3, #12]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800effc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2220      	movs	r2, #32
 800f002:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f7fc fb5c 	bl	800b6c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800f00c:	2300      	movs	r3, #0
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3708      	adds	r7, #8
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}

0800f016 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800f016:	b580      	push	{r7, lr}
 800f018:	b084      	sub	sp, #16
 800f01a:	af00      	add	r7, sp, #0
 800f01c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f024:	b2db      	uxtb	r3, r3
 800f026:	2b22      	cmp	r3, #34	; 0x22
 800f028:	d171      	bne.n	800f10e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	689b      	ldr	r3, [r3, #8]
 800f02e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f032:	d123      	bne.n	800f07c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f038:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	691b      	ldr	r3, [r3, #16]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d10e      	bne.n	800f060 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	b29b      	uxth	r3, r3
 800f04a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f04e:	b29a      	uxth	r2, r3
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f058:	1c9a      	adds	r2, r3, #2
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	629a      	str	r2, [r3, #40]	; 0x28
 800f05e:	e029      	b.n	800f0b4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	685b      	ldr	r3, [r3, #4]
 800f066:	b29b      	uxth	r3, r3
 800f068:	b2db      	uxtb	r3, r3
 800f06a:	b29a      	uxth	r2, r3
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f074:	1c5a      	adds	r2, r3, #1
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	629a      	str	r2, [r3, #40]	; 0x28
 800f07a:	e01b      	b.n	800f0b4 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	691b      	ldr	r3, [r3, #16]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d10a      	bne.n	800f09a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	6858      	ldr	r0, [r3, #4]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f08e:	1c59      	adds	r1, r3, #1
 800f090:	687a      	ldr	r2, [r7, #4]
 800f092:	6291      	str	r1, [r2, #40]	; 0x28
 800f094:	b2c2      	uxtb	r2, r0
 800f096:	701a      	strb	r2, [r3, #0]
 800f098:	e00c      	b.n	800f0b4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	685b      	ldr	r3, [r3, #4]
 800f0a0:	b2da      	uxtb	r2, r3
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0a6:	1c58      	adds	r0, r3, #1
 800f0a8:	6879      	ldr	r1, [r7, #4]
 800f0aa:	6288      	str	r0, [r1, #40]	; 0x28
 800f0ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f0b0:	b2d2      	uxtb	r2, r2
 800f0b2:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f0b8:	b29b      	uxth	r3, r3
 800f0ba:	3b01      	subs	r3, #1
 800f0bc:	b29b      	uxth	r3, r3
 800f0be:	687a      	ldr	r2, [r7, #4]
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d120      	bne.n	800f10a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	68da      	ldr	r2, [r3, #12]
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	f022 0220 	bic.w	r2, r2, #32
 800f0d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	68da      	ldr	r2, [r3, #12]
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f0e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	695a      	ldr	r2, [r3, #20]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f022 0201 	bic.w	r2, r2, #1
 800f0f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2220      	movs	r2, #32
 800f0fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f7ff fe3d 	bl	800ed80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800f106:	2300      	movs	r3, #0
 800f108:	e002      	b.n	800f110 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800f10a:	2300      	movs	r3, #0
 800f10c:	e000      	b.n	800f110 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800f10e:	2302      	movs	r3, #2
  }
}
 800f110:	4618      	mov	r0, r3
 800f112:	3710      	adds	r7, #16
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}

0800f118 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f11c:	b0bd      	sub	sp, #244	; 0xf4
 800f11e:	af00      	add	r7, sp, #0
 800f120:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	691b      	ldr	r3, [r3, #16]
 800f12c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800f130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f134:	68d9      	ldr	r1, [r3, #12]
 800f136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f13a:	681a      	ldr	r2, [r3, #0]
 800f13c:	ea40 0301 	orr.w	r3, r0, r1
 800f140:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f146:	689a      	ldr	r2, [r3, #8]
 800f148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f14c:	691b      	ldr	r3, [r3, #16]
 800f14e:	431a      	orrs	r2, r3
 800f150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f154:	695b      	ldr	r3, [r3, #20]
 800f156:	431a      	orrs	r2, r3
 800f158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f15c:	69db      	ldr	r3, [r3, #28]
 800f15e:	4313      	orrs	r3, r2
 800f160:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800f164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	68db      	ldr	r3, [r3, #12]
 800f16c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800f170:	f021 010c 	bic.w	r1, r1, #12
 800f174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f178:	681a      	ldr	r2, [r3, #0]
 800f17a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f17e:	430b      	orrs	r3, r1
 800f180:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	695b      	ldr	r3, [r3, #20]
 800f18a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800f18e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f192:	6999      	ldr	r1, [r3, #24]
 800f194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f198:	681a      	ldr	r2, [r3, #0]
 800f19a:	ea40 0301 	orr.w	r3, r0, r1
 800f19e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f1a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1a4:	69db      	ldr	r3, [r3, #28]
 800f1a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f1aa:	f040 81a5 	bne.w	800f4f8 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f1ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1b2:	681a      	ldr	r2, [r3, #0]
 800f1b4:	4bcd      	ldr	r3, [pc, #820]	; (800f4ec <UART_SetConfig+0x3d4>)
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d006      	beq.n	800f1c8 <UART_SetConfig+0xb0>
 800f1ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1be:	681a      	ldr	r2, [r3, #0]
 800f1c0:	4bcb      	ldr	r3, [pc, #812]	; (800f4f0 <UART_SetConfig+0x3d8>)
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	f040 80cb 	bne.w	800f35e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f1c8:	f7fe ff9e 	bl	800e108 <HAL_RCC_GetPCLK2Freq>
 800f1cc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f1d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f1d4:	461c      	mov	r4, r3
 800f1d6:	f04f 0500 	mov.w	r5, #0
 800f1da:	4622      	mov	r2, r4
 800f1dc:	462b      	mov	r3, r5
 800f1de:	1891      	adds	r1, r2, r2
 800f1e0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800f1e4:	415b      	adcs	r3, r3
 800f1e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f1ea:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f1ee:	1912      	adds	r2, r2, r4
 800f1f0:	eb45 0303 	adc.w	r3, r5, r3
 800f1f4:	f04f 0000 	mov.w	r0, #0
 800f1f8:	f04f 0100 	mov.w	r1, #0
 800f1fc:	00d9      	lsls	r1, r3, #3
 800f1fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f202:	00d0      	lsls	r0, r2, #3
 800f204:	4602      	mov	r2, r0
 800f206:	460b      	mov	r3, r1
 800f208:	1911      	adds	r1, r2, r4
 800f20a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800f20e:	416b      	adcs	r3, r5
 800f210:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f218:	685b      	ldr	r3, [r3, #4]
 800f21a:	461a      	mov	r2, r3
 800f21c:	f04f 0300 	mov.w	r3, #0
 800f220:	1891      	adds	r1, r2, r2
 800f222:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800f226:	415b      	adcs	r3, r3
 800f228:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f22c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800f230:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800f234:	f7f1 fd28 	bl	8000c88 <__aeabi_uldivmod>
 800f238:	4602      	mov	r2, r0
 800f23a:	460b      	mov	r3, r1
 800f23c:	4bad      	ldr	r3, [pc, #692]	; (800f4f4 <UART_SetConfig+0x3dc>)
 800f23e:	fba3 2302 	umull	r2, r3, r3, r2
 800f242:	095b      	lsrs	r3, r3, #5
 800f244:	011e      	lsls	r6, r3, #4
 800f246:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f24a:	461c      	mov	r4, r3
 800f24c:	f04f 0500 	mov.w	r5, #0
 800f250:	4622      	mov	r2, r4
 800f252:	462b      	mov	r3, r5
 800f254:	1891      	adds	r1, r2, r2
 800f256:	67b9      	str	r1, [r7, #120]	; 0x78
 800f258:	415b      	adcs	r3, r3
 800f25a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f25c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800f260:	1912      	adds	r2, r2, r4
 800f262:	eb45 0303 	adc.w	r3, r5, r3
 800f266:	f04f 0000 	mov.w	r0, #0
 800f26a:	f04f 0100 	mov.w	r1, #0
 800f26e:	00d9      	lsls	r1, r3, #3
 800f270:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f274:	00d0      	lsls	r0, r2, #3
 800f276:	4602      	mov	r2, r0
 800f278:	460b      	mov	r3, r1
 800f27a:	1911      	adds	r1, r2, r4
 800f27c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800f280:	416b      	adcs	r3, r5
 800f282:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f28a:	685b      	ldr	r3, [r3, #4]
 800f28c:	461a      	mov	r2, r3
 800f28e:	f04f 0300 	mov.w	r3, #0
 800f292:	1891      	adds	r1, r2, r2
 800f294:	6739      	str	r1, [r7, #112]	; 0x70
 800f296:	415b      	adcs	r3, r3
 800f298:	677b      	str	r3, [r7, #116]	; 0x74
 800f29a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800f29e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800f2a2:	f7f1 fcf1 	bl	8000c88 <__aeabi_uldivmod>
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	460b      	mov	r3, r1
 800f2aa:	4b92      	ldr	r3, [pc, #584]	; (800f4f4 <UART_SetConfig+0x3dc>)
 800f2ac:	fba3 1302 	umull	r1, r3, r3, r2
 800f2b0:	095b      	lsrs	r3, r3, #5
 800f2b2:	2164      	movs	r1, #100	; 0x64
 800f2b4:	fb01 f303 	mul.w	r3, r1, r3
 800f2b8:	1ad3      	subs	r3, r2, r3
 800f2ba:	00db      	lsls	r3, r3, #3
 800f2bc:	3332      	adds	r3, #50	; 0x32
 800f2be:	4a8d      	ldr	r2, [pc, #564]	; (800f4f4 <UART_SetConfig+0x3dc>)
 800f2c0:	fba2 2303 	umull	r2, r3, r2, r3
 800f2c4:	095b      	lsrs	r3, r3, #5
 800f2c6:	005b      	lsls	r3, r3, #1
 800f2c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f2cc:	441e      	add	r6, r3
 800f2ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f04f 0100 	mov.w	r1, #0
 800f2d8:	4602      	mov	r2, r0
 800f2da:	460b      	mov	r3, r1
 800f2dc:	1894      	adds	r4, r2, r2
 800f2de:	66bc      	str	r4, [r7, #104]	; 0x68
 800f2e0:	415b      	adcs	r3, r3
 800f2e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f2e4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800f2e8:	1812      	adds	r2, r2, r0
 800f2ea:	eb41 0303 	adc.w	r3, r1, r3
 800f2ee:	f04f 0400 	mov.w	r4, #0
 800f2f2:	f04f 0500 	mov.w	r5, #0
 800f2f6:	00dd      	lsls	r5, r3, #3
 800f2f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f2fc:	00d4      	lsls	r4, r2, #3
 800f2fe:	4622      	mov	r2, r4
 800f300:	462b      	mov	r3, r5
 800f302:	1814      	adds	r4, r2, r0
 800f304:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800f308:	414b      	adcs	r3, r1
 800f30a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f30e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f312:	685b      	ldr	r3, [r3, #4]
 800f314:	461a      	mov	r2, r3
 800f316:	f04f 0300 	mov.w	r3, #0
 800f31a:	1891      	adds	r1, r2, r2
 800f31c:	6639      	str	r1, [r7, #96]	; 0x60
 800f31e:	415b      	adcs	r3, r3
 800f320:	667b      	str	r3, [r7, #100]	; 0x64
 800f322:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800f326:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800f32a:	f7f1 fcad 	bl	8000c88 <__aeabi_uldivmod>
 800f32e:	4602      	mov	r2, r0
 800f330:	460b      	mov	r3, r1
 800f332:	4b70      	ldr	r3, [pc, #448]	; (800f4f4 <UART_SetConfig+0x3dc>)
 800f334:	fba3 1302 	umull	r1, r3, r3, r2
 800f338:	095b      	lsrs	r3, r3, #5
 800f33a:	2164      	movs	r1, #100	; 0x64
 800f33c:	fb01 f303 	mul.w	r3, r1, r3
 800f340:	1ad3      	subs	r3, r2, r3
 800f342:	00db      	lsls	r3, r3, #3
 800f344:	3332      	adds	r3, #50	; 0x32
 800f346:	4a6b      	ldr	r2, [pc, #428]	; (800f4f4 <UART_SetConfig+0x3dc>)
 800f348:	fba2 2303 	umull	r2, r3, r2, r3
 800f34c:	095b      	lsrs	r3, r3, #5
 800f34e:	f003 0207 	and.w	r2, r3, #7
 800f352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	4432      	add	r2, r6
 800f35a:	609a      	str	r2, [r3, #8]
 800f35c:	e26d      	b.n	800f83a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f35e:	f7fe febf 	bl	800e0e0 <HAL_RCC_GetPCLK1Freq>
 800f362:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f366:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f36a:	461c      	mov	r4, r3
 800f36c:	f04f 0500 	mov.w	r5, #0
 800f370:	4622      	mov	r2, r4
 800f372:	462b      	mov	r3, r5
 800f374:	1891      	adds	r1, r2, r2
 800f376:	65b9      	str	r1, [r7, #88]	; 0x58
 800f378:	415b      	adcs	r3, r3
 800f37a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f37c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800f380:	1912      	adds	r2, r2, r4
 800f382:	eb45 0303 	adc.w	r3, r5, r3
 800f386:	f04f 0000 	mov.w	r0, #0
 800f38a:	f04f 0100 	mov.w	r1, #0
 800f38e:	00d9      	lsls	r1, r3, #3
 800f390:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f394:	00d0      	lsls	r0, r2, #3
 800f396:	4602      	mov	r2, r0
 800f398:	460b      	mov	r3, r1
 800f39a:	1911      	adds	r1, r2, r4
 800f39c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800f3a0:	416b      	adcs	r3, r5
 800f3a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f3a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3aa:	685b      	ldr	r3, [r3, #4]
 800f3ac:	461a      	mov	r2, r3
 800f3ae:	f04f 0300 	mov.w	r3, #0
 800f3b2:	1891      	adds	r1, r2, r2
 800f3b4:	6539      	str	r1, [r7, #80]	; 0x50
 800f3b6:	415b      	adcs	r3, r3
 800f3b8:	657b      	str	r3, [r7, #84]	; 0x54
 800f3ba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800f3be:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800f3c2:	f7f1 fc61 	bl	8000c88 <__aeabi_uldivmod>
 800f3c6:	4602      	mov	r2, r0
 800f3c8:	460b      	mov	r3, r1
 800f3ca:	4b4a      	ldr	r3, [pc, #296]	; (800f4f4 <UART_SetConfig+0x3dc>)
 800f3cc:	fba3 2302 	umull	r2, r3, r3, r2
 800f3d0:	095b      	lsrs	r3, r3, #5
 800f3d2:	011e      	lsls	r6, r3, #4
 800f3d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f3d8:	461c      	mov	r4, r3
 800f3da:	f04f 0500 	mov.w	r5, #0
 800f3de:	4622      	mov	r2, r4
 800f3e0:	462b      	mov	r3, r5
 800f3e2:	1891      	adds	r1, r2, r2
 800f3e4:	64b9      	str	r1, [r7, #72]	; 0x48
 800f3e6:	415b      	adcs	r3, r3
 800f3e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f3ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f3ee:	1912      	adds	r2, r2, r4
 800f3f0:	eb45 0303 	adc.w	r3, r5, r3
 800f3f4:	f04f 0000 	mov.w	r0, #0
 800f3f8:	f04f 0100 	mov.w	r1, #0
 800f3fc:	00d9      	lsls	r1, r3, #3
 800f3fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f402:	00d0      	lsls	r0, r2, #3
 800f404:	4602      	mov	r2, r0
 800f406:	460b      	mov	r3, r1
 800f408:	1911      	adds	r1, r2, r4
 800f40a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800f40e:	416b      	adcs	r3, r5
 800f410:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	461a      	mov	r2, r3
 800f41c:	f04f 0300 	mov.w	r3, #0
 800f420:	1891      	adds	r1, r2, r2
 800f422:	6439      	str	r1, [r7, #64]	; 0x40
 800f424:	415b      	adcs	r3, r3
 800f426:	647b      	str	r3, [r7, #68]	; 0x44
 800f428:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f42c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800f430:	f7f1 fc2a 	bl	8000c88 <__aeabi_uldivmod>
 800f434:	4602      	mov	r2, r0
 800f436:	460b      	mov	r3, r1
 800f438:	4b2e      	ldr	r3, [pc, #184]	; (800f4f4 <UART_SetConfig+0x3dc>)
 800f43a:	fba3 1302 	umull	r1, r3, r3, r2
 800f43e:	095b      	lsrs	r3, r3, #5
 800f440:	2164      	movs	r1, #100	; 0x64
 800f442:	fb01 f303 	mul.w	r3, r1, r3
 800f446:	1ad3      	subs	r3, r2, r3
 800f448:	00db      	lsls	r3, r3, #3
 800f44a:	3332      	adds	r3, #50	; 0x32
 800f44c:	4a29      	ldr	r2, [pc, #164]	; (800f4f4 <UART_SetConfig+0x3dc>)
 800f44e:	fba2 2303 	umull	r2, r3, r2, r3
 800f452:	095b      	lsrs	r3, r3, #5
 800f454:	005b      	lsls	r3, r3, #1
 800f456:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f45a:	441e      	add	r6, r3
 800f45c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f460:	4618      	mov	r0, r3
 800f462:	f04f 0100 	mov.w	r1, #0
 800f466:	4602      	mov	r2, r0
 800f468:	460b      	mov	r3, r1
 800f46a:	1894      	adds	r4, r2, r2
 800f46c:	63bc      	str	r4, [r7, #56]	; 0x38
 800f46e:	415b      	adcs	r3, r3
 800f470:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f472:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f476:	1812      	adds	r2, r2, r0
 800f478:	eb41 0303 	adc.w	r3, r1, r3
 800f47c:	f04f 0400 	mov.w	r4, #0
 800f480:	f04f 0500 	mov.w	r5, #0
 800f484:	00dd      	lsls	r5, r3, #3
 800f486:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f48a:	00d4      	lsls	r4, r2, #3
 800f48c:	4622      	mov	r2, r4
 800f48e:	462b      	mov	r3, r5
 800f490:	1814      	adds	r4, r2, r0
 800f492:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800f496:	414b      	adcs	r3, r1
 800f498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f49c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4a0:	685b      	ldr	r3, [r3, #4]
 800f4a2:	461a      	mov	r2, r3
 800f4a4:	f04f 0300 	mov.w	r3, #0
 800f4a8:	1891      	adds	r1, r2, r2
 800f4aa:	6339      	str	r1, [r7, #48]	; 0x30
 800f4ac:	415b      	adcs	r3, r3
 800f4ae:	637b      	str	r3, [r7, #52]	; 0x34
 800f4b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f4b4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800f4b8:	f7f1 fbe6 	bl	8000c88 <__aeabi_uldivmod>
 800f4bc:	4602      	mov	r2, r0
 800f4be:	460b      	mov	r3, r1
 800f4c0:	4b0c      	ldr	r3, [pc, #48]	; (800f4f4 <UART_SetConfig+0x3dc>)
 800f4c2:	fba3 1302 	umull	r1, r3, r3, r2
 800f4c6:	095b      	lsrs	r3, r3, #5
 800f4c8:	2164      	movs	r1, #100	; 0x64
 800f4ca:	fb01 f303 	mul.w	r3, r1, r3
 800f4ce:	1ad3      	subs	r3, r2, r3
 800f4d0:	00db      	lsls	r3, r3, #3
 800f4d2:	3332      	adds	r3, #50	; 0x32
 800f4d4:	4a07      	ldr	r2, [pc, #28]	; (800f4f4 <UART_SetConfig+0x3dc>)
 800f4d6:	fba2 2303 	umull	r2, r3, r2, r3
 800f4da:	095b      	lsrs	r3, r3, #5
 800f4dc:	f003 0207 	and.w	r2, r3, #7
 800f4e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	4432      	add	r2, r6
 800f4e8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f4ea:	e1a6      	b.n	800f83a <UART_SetConfig+0x722>
 800f4ec:	40011000 	.word	0x40011000
 800f4f0:	40011400 	.word	0x40011400
 800f4f4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f4f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4fc:	681a      	ldr	r2, [r3, #0]
 800f4fe:	4bd1      	ldr	r3, [pc, #836]	; (800f844 <UART_SetConfig+0x72c>)
 800f500:	429a      	cmp	r2, r3
 800f502:	d006      	beq.n	800f512 <UART_SetConfig+0x3fa>
 800f504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f508:	681a      	ldr	r2, [r3, #0]
 800f50a:	4bcf      	ldr	r3, [pc, #828]	; (800f848 <UART_SetConfig+0x730>)
 800f50c:	429a      	cmp	r2, r3
 800f50e:	f040 80ca 	bne.w	800f6a6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f512:	f7fe fdf9 	bl	800e108 <HAL_RCC_GetPCLK2Freq>
 800f516:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f51a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f51e:	461c      	mov	r4, r3
 800f520:	f04f 0500 	mov.w	r5, #0
 800f524:	4622      	mov	r2, r4
 800f526:	462b      	mov	r3, r5
 800f528:	1891      	adds	r1, r2, r2
 800f52a:	62b9      	str	r1, [r7, #40]	; 0x28
 800f52c:	415b      	adcs	r3, r3
 800f52e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f530:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f534:	1912      	adds	r2, r2, r4
 800f536:	eb45 0303 	adc.w	r3, r5, r3
 800f53a:	f04f 0000 	mov.w	r0, #0
 800f53e:	f04f 0100 	mov.w	r1, #0
 800f542:	00d9      	lsls	r1, r3, #3
 800f544:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f548:	00d0      	lsls	r0, r2, #3
 800f54a:	4602      	mov	r2, r0
 800f54c:	460b      	mov	r3, r1
 800f54e:	eb12 0a04 	adds.w	sl, r2, r4
 800f552:	eb43 0b05 	adc.w	fp, r3, r5
 800f556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f55a:	685b      	ldr	r3, [r3, #4]
 800f55c:	4618      	mov	r0, r3
 800f55e:	f04f 0100 	mov.w	r1, #0
 800f562:	f04f 0200 	mov.w	r2, #0
 800f566:	f04f 0300 	mov.w	r3, #0
 800f56a:	008b      	lsls	r3, r1, #2
 800f56c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f570:	0082      	lsls	r2, r0, #2
 800f572:	4650      	mov	r0, sl
 800f574:	4659      	mov	r1, fp
 800f576:	f7f1 fb87 	bl	8000c88 <__aeabi_uldivmod>
 800f57a:	4602      	mov	r2, r0
 800f57c:	460b      	mov	r3, r1
 800f57e:	4bb3      	ldr	r3, [pc, #716]	; (800f84c <UART_SetConfig+0x734>)
 800f580:	fba3 2302 	umull	r2, r3, r3, r2
 800f584:	095b      	lsrs	r3, r3, #5
 800f586:	011e      	lsls	r6, r3, #4
 800f588:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f58c:	4618      	mov	r0, r3
 800f58e:	f04f 0100 	mov.w	r1, #0
 800f592:	4602      	mov	r2, r0
 800f594:	460b      	mov	r3, r1
 800f596:	1894      	adds	r4, r2, r2
 800f598:	623c      	str	r4, [r7, #32]
 800f59a:	415b      	adcs	r3, r3
 800f59c:	627b      	str	r3, [r7, #36]	; 0x24
 800f59e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f5a2:	1812      	adds	r2, r2, r0
 800f5a4:	eb41 0303 	adc.w	r3, r1, r3
 800f5a8:	f04f 0400 	mov.w	r4, #0
 800f5ac:	f04f 0500 	mov.w	r5, #0
 800f5b0:	00dd      	lsls	r5, r3, #3
 800f5b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f5b6:	00d4      	lsls	r4, r2, #3
 800f5b8:	4622      	mov	r2, r4
 800f5ba:	462b      	mov	r3, r5
 800f5bc:	1814      	adds	r4, r2, r0
 800f5be:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800f5c2:	414b      	adcs	r3, r1
 800f5c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f5c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5cc:	685b      	ldr	r3, [r3, #4]
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f04f 0100 	mov.w	r1, #0
 800f5d4:	f04f 0200 	mov.w	r2, #0
 800f5d8:	f04f 0300 	mov.w	r3, #0
 800f5dc:	008b      	lsls	r3, r1, #2
 800f5de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f5e2:	0082      	lsls	r2, r0, #2
 800f5e4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800f5e8:	f7f1 fb4e 	bl	8000c88 <__aeabi_uldivmod>
 800f5ec:	4602      	mov	r2, r0
 800f5ee:	460b      	mov	r3, r1
 800f5f0:	4b96      	ldr	r3, [pc, #600]	; (800f84c <UART_SetConfig+0x734>)
 800f5f2:	fba3 1302 	umull	r1, r3, r3, r2
 800f5f6:	095b      	lsrs	r3, r3, #5
 800f5f8:	2164      	movs	r1, #100	; 0x64
 800f5fa:	fb01 f303 	mul.w	r3, r1, r3
 800f5fe:	1ad3      	subs	r3, r2, r3
 800f600:	011b      	lsls	r3, r3, #4
 800f602:	3332      	adds	r3, #50	; 0x32
 800f604:	4a91      	ldr	r2, [pc, #580]	; (800f84c <UART_SetConfig+0x734>)
 800f606:	fba2 2303 	umull	r2, r3, r2, r3
 800f60a:	095b      	lsrs	r3, r3, #5
 800f60c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f610:	441e      	add	r6, r3
 800f612:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f616:	4618      	mov	r0, r3
 800f618:	f04f 0100 	mov.w	r1, #0
 800f61c:	4602      	mov	r2, r0
 800f61e:	460b      	mov	r3, r1
 800f620:	1894      	adds	r4, r2, r2
 800f622:	61bc      	str	r4, [r7, #24]
 800f624:	415b      	adcs	r3, r3
 800f626:	61fb      	str	r3, [r7, #28]
 800f628:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f62c:	1812      	adds	r2, r2, r0
 800f62e:	eb41 0303 	adc.w	r3, r1, r3
 800f632:	f04f 0400 	mov.w	r4, #0
 800f636:	f04f 0500 	mov.w	r5, #0
 800f63a:	00dd      	lsls	r5, r3, #3
 800f63c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f640:	00d4      	lsls	r4, r2, #3
 800f642:	4622      	mov	r2, r4
 800f644:	462b      	mov	r3, r5
 800f646:	1814      	adds	r4, r2, r0
 800f648:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800f64c:	414b      	adcs	r3, r1
 800f64e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f656:	685b      	ldr	r3, [r3, #4]
 800f658:	4618      	mov	r0, r3
 800f65a:	f04f 0100 	mov.w	r1, #0
 800f65e:	f04f 0200 	mov.w	r2, #0
 800f662:	f04f 0300 	mov.w	r3, #0
 800f666:	008b      	lsls	r3, r1, #2
 800f668:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f66c:	0082      	lsls	r2, r0, #2
 800f66e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800f672:	f7f1 fb09 	bl	8000c88 <__aeabi_uldivmod>
 800f676:	4602      	mov	r2, r0
 800f678:	460b      	mov	r3, r1
 800f67a:	4b74      	ldr	r3, [pc, #464]	; (800f84c <UART_SetConfig+0x734>)
 800f67c:	fba3 1302 	umull	r1, r3, r3, r2
 800f680:	095b      	lsrs	r3, r3, #5
 800f682:	2164      	movs	r1, #100	; 0x64
 800f684:	fb01 f303 	mul.w	r3, r1, r3
 800f688:	1ad3      	subs	r3, r2, r3
 800f68a:	011b      	lsls	r3, r3, #4
 800f68c:	3332      	adds	r3, #50	; 0x32
 800f68e:	4a6f      	ldr	r2, [pc, #444]	; (800f84c <UART_SetConfig+0x734>)
 800f690:	fba2 2303 	umull	r2, r3, r2, r3
 800f694:	095b      	lsrs	r3, r3, #5
 800f696:	f003 020f 	and.w	r2, r3, #15
 800f69a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	4432      	add	r2, r6
 800f6a2:	609a      	str	r2, [r3, #8]
 800f6a4:	e0c9      	b.n	800f83a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f6a6:	f7fe fd1b 	bl	800e0e0 <HAL_RCC_GetPCLK1Freq>
 800f6aa:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f6ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f6b2:	461c      	mov	r4, r3
 800f6b4:	f04f 0500 	mov.w	r5, #0
 800f6b8:	4622      	mov	r2, r4
 800f6ba:	462b      	mov	r3, r5
 800f6bc:	1891      	adds	r1, r2, r2
 800f6be:	6139      	str	r1, [r7, #16]
 800f6c0:	415b      	adcs	r3, r3
 800f6c2:	617b      	str	r3, [r7, #20]
 800f6c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f6c8:	1912      	adds	r2, r2, r4
 800f6ca:	eb45 0303 	adc.w	r3, r5, r3
 800f6ce:	f04f 0000 	mov.w	r0, #0
 800f6d2:	f04f 0100 	mov.w	r1, #0
 800f6d6:	00d9      	lsls	r1, r3, #3
 800f6d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f6dc:	00d0      	lsls	r0, r2, #3
 800f6de:	4602      	mov	r2, r0
 800f6e0:	460b      	mov	r3, r1
 800f6e2:	eb12 0804 	adds.w	r8, r2, r4
 800f6e6:	eb43 0905 	adc.w	r9, r3, r5
 800f6ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f6ee:	685b      	ldr	r3, [r3, #4]
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f04f 0100 	mov.w	r1, #0
 800f6f6:	f04f 0200 	mov.w	r2, #0
 800f6fa:	f04f 0300 	mov.w	r3, #0
 800f6fe:	008b      	lsls	r3, r1, #2
 800f700:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f704:	0082      	lsls	r2, r0, #2
 800f706:	4640      	mov	r0, r8
 800f708:	4649      	mov	r1, r9
 800f70a:	f7f1 fabd 	bl	8000c88 <__aeabi_uldivmod>
 800f70e:	4602      	mov	r2, r0
 800f710:	460b      	mov	r3, r1
 800f712:	4b4e      	ldr	r3, [pc, #312]	; (800f84c <UART_SetConfig+0x734>)
 800f714:	fba3 2302 	umull	r2, r3, r3, r2
 800f718:	095b      	lsrs	r3, r3, #5
 800f71a:	011e      	lsls	r6, r3, #4
 800f71c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f720:	4618      	mov	r0, r3
 800f722:	f04f 0100 	mov.w	r1, #0
 800f726:	4602      	mov	r2, r0
 800f728:	460b      	mov	r3, r1
 800f72a:	1894      	adds	r4, r2, r2
 800f72c:	60bc      	str	r4, [r7, #8]
 800f72e:	415b      	adcs	r3, r3
 800f730:	60fb      	str	r3, [r7, #12]
 800f732:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f736:	1812      	adds	r2, r2, r0
 800f738:	eb41 0303 	adc.w	r3, r1, r3
 800f73c:	f04f 0400 	mov.w	r4, #0
 800f740:	f04f 0500 	mov.w	r5, #0
 800f744:	00dd      	lsls	r5, r3, #3
 800f746:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f74a:	00d4      	lsls	r4, r2, #3
 800f74c:	4622      	mov	r2, r4
 800f74e:	462b      	mov	r3, r5
 800f750:	1814      	adds	r4, r2, r0
 800f752:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800f756:	414b      	adcs	r3, r1
 800f758:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f760:	685b      	ldr	r3, [r3, #4]
 800f762:	4618      	mov	r0, r3
 800f764:	f04f 0100 	mov.w	r1, #0
 800f768:	f04f 0200 	mov.w	r2, #0
 800f76c:	f04f 0300 	mov.w	r3, #0
 800f770:	008b      	lsls	r3, r1, #2
 800f772:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f776:	0082      	lsls	r2, r0, #2
 800f778:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800f77c:	f7f1 fa84 	bl	8000c88 <__aeabi_uldivmod>
 800f780:	4602      	mov	r2, r0
 800f782:	460b      	mov	r3, r1
 800f784:	4b31      	ldr	r3, [pc, #196]	; (800f84c <UART_SetConfig+0x734>)
 800f786:	fba3 1302 	umull	r1, r3, r3, r2
 800f78a:	095b      	lsrs	r3, r3, #5
 800f78c:	2164      	movs	r1, #100	; 0x64
 800f78e:	fb01 f303 	mul.w	r3, r1, r3
 800f792:	1ad3      	subs	r3, r2, r3
 800f794:	011b      	lsls	r3, r3, #4
 800f796:	3332      	adds	r3, #50	; 0x32
 800f798:	4a2c      	ldr	r2, [pc, #176]	; (800f84c <UART_SetConfig+0x734>)
 800f79a:	fba2 2303 	umull	r2, r3, r2, r3
 800f79e:	095b      	lsrs	r3, r3, #5
 800f7a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f7a4:	441e      	add	r6, r3
 800f7a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f04f 0100 	mov.w	r1, #0
 800f7b0:	4602      	mov	r2, r0
 800f7b2:	460b      	mov	r3, r1
 800f7b4:	1894      	adds	r4, r2, r2
 800f7b6:	603c      	str	r4, [r7, #0]
 800f7b8:	415b      	adcs	r3, r3
 800f7ba:	607b      	str	r3, [r7, #4]
 800f7bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7c0:	1812      	adds	r2, r2, r0
 800f7c2:	eb41 0303 	adc.w	r3, r1, r3
 800f7c6:	f04f 0400 	mov.w	r4, #0
 800f7ca:	f04f 0500 	mov.w	r5, #0
 800f7ce:	00dd      	lsls	r5, r3, #3
 800f7d0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f7d4:	00d4      	lsls	r4, r2, #3
 800f7d6:	4622      	mov	r2, r4
 800f7d8:	462b      	mov	r3, r5
 800f7da:	1814      	adds	r4, r2, r0
 800f7dc:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800f7e0:	414b      	adcs	r3, r1
 800f7e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f7e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f04f 0100 	mov.w	r1, #0
 800f7f2:	f04f 0200 	mov.w	r2, #0
 800f7f6:	f04f 0300 	mov.w	r3, #0
 800f7fa:	008b      	lsls	r3, r1, #2
 800f7fc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f800:	0082      	lsls	r2, r0, #2
 800f802:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800f806:	f7f1 fa3f 	bl	8000c88 <__aeabi_uldivmod>
 800f80a:	4602      	mov	r2, r0
 800f80c:	460b      	mov	r3, r1
 800f80e:	4b0f      	ldr	r3, [pc, #60]	; (800f84c <UART_SetConfig+0x734>)
 800f810:	fba3 1302 	umull	r1, r3, r3, r2
 800f814:	095b      	lsrs	r3, r3, #5
 800f816:	2164      	movs	r1, #100	; 0x64
 800f818:	fb01 f303 	mul.w	r3, r1, r3
 800f81c:	1ad3      	subs	r3, r2, r3
 800f81e:	011b      	lsls	r3, r3, #4
 800f820:	3332      	adds	r3, #50	; 0x32
 800f822:	4a0a      	ldr	r2, [pc, #40]	; (800f84c <UART_SetConfig+0x734>)
 800f824:	fba2 2303 	umull	r2, r3, r2, r3
 800f828:	095b      	lsrs	r3, r3, #5
 800f82a:	f003 020f 	and.w	r2, r3, #15
 800f82e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	4432      	add	r2, r6
 800f836:	609a      	str	r2, [r3, #8]
}
 800f838:	e7ff      	b.n	800f83a <UART_SetConfig+0x722>
 800f83a:	bf00      	nop
 800f83c:	37f4      	adds	r7, #244	; 0xf4
 800f83e:	46bd      	mov	sp, r7
 800f840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f844:	40011000 	.word	0x40011000
 800f848:	40011400 	.word	0x40011400
 800f84c:	51eb851f 	.word	0x51eb851f

0800f850 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800f850:	b480      	push	{r7}
 800f852:	b085      	sub	sp, #20
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800f85a:	2300      	movs	r3, #0
 800f85c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	681a      	ldr	r2, [r3, #0]
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f868:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800f86a:	68fa      	ldr	r2, [r7, #12]
 800f86c:	4b20      	ldr	r3, [pc, #128]	; (800f8f0 <FSMC_NORSRAM_Init+0xa0>)
 800f86e:	4013      	ands	r3, r2
 800f870:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f87a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800f880:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800f886:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800f88c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800f892:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800f898:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800f89e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800f8a4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800f8aa:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800f8b0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800f8b6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800f8bc:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f8be:	68fa      	ldr	r2, [r7, #12]
 800f8c0:	4313      	orrs	r3, r2
 800f8c2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	689b      	ldr	r3, [r3, #8]
 800f8c8:	2b08      	cmp	r3, #8
 800f8ca:	d103      	bne.n	800f8d4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8d2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	681a      	ldr	r2, [r3, #0]
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	68f9      	ldr	r1, [r7, #12]
 800f8dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f8e0:	2300      	movs	r3, #0
}
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	3714      	adds	r7, #20
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ec:	4770      	bx	lr
 800f8ee:	bf00      	nop
 800f8f0:	fff00080 	.word	0xfff00080

0800f8f4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b087      	sub	sp, #28
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	60f8      	str	r0, [r7, #12]
 800f8fc:	60b9      	str	r1, [r7, #8]
 800f8fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800f900:	2300      	movs	r3, #0
 800f902:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	1c5a      	adds	r2, r3, #1
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f90e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800f916:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	685b      	ldr	r3, [r3, #4]
 800f920:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f922:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	689b      	ldr	r3, [r3, #8]
 800f928:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f92a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	68db      	ldr	r3, [r3, #12]
 800f930:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800f932:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f934:	68bb      	ldr	r3, [r7, #8]
 800f936:	691b      	ldr	r3, [r3, #16]
 800f938:	3b01      	subs	r3, #1
 800f93a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f93c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800f93e:	68bb      	ldr	r3, [r7, #8]
 800f940:	695b      	ldr	r3, [r3, #20]
 800f942:	3b02      	subs	r3, #2
 800f944:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f946:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f94c:	4313      	orrs	r3, r2
 800f94e:	697a      	ldr	r2, [r7, #20]
 800f950:	4313      	orrs	r3, r2
 800f952:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	1c5a      	adds	r2, r3, #1
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	6979      	ldr	r1, [r7, #20]
 800f95c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f960:	2300      	movs	r3, #0
}
 800f962:	4618      	mov	r0, r3
 800f964:	371c      	adds	r7, #28
 800f966:	46bd      	mov	sp, r7
 800f968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96c:	4770      	bx	lr
	...

0800f970 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800f970:	b480      	push	{r7}
 800f972:	b087      	sub	sp, #28
 800f974:	af00      	add	r7, sp, #0
 800f976:	60f8      	str	r0, [r7, #12]
 800f978:	60b9      	str	r1, [r7, #8]
 800f97a:	607a      	str	r2, [r7, #4]
 800f97c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800f97e:	2300      	movs	r3, #0
 800f980:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f988:	d122      	bne.n	800f9d0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	687a      	ldr	r2, [r7, #4]
 800f98e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f992:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800f994:	697a      	ldr	r2, [r7, #20]
 800f996:	4b15      	ldr	r3, [pc, #84]	; (800f9ec <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800f998:	4013      	ands	r3, r2
 800f99a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	685b      	ldr	r3, [r3, #4]
 800f9a4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f9a6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	689b      	ldr	r3, [r3, #8]
 800f9ac:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f9ae:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	68db      	ldr	r3, [r3, #12]
 800f9b4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800f9b6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f9bc:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f9be:	697a      	ldr	r2, [r7, #20]
 800f9c0:	4313      	orrs	r3, r2
 800f9c2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	687a      	ldr	r2, [r7, #4]
 800f9c8:	6979      	ldr	r1, [r7, #20]
 800f9ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f9ce:	e005      	b.n	800f9dc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	687a      	ldr	r2, [r7, #4]
 800f9d4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f9d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800f9dc:	2300      	movs	r3, #0
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	371c      	adds	r7, #28
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e8:	4770      	bx	lr
 800f9ea:	bf00      	nop
 800f9ec:	cff00000 	.word	0xcff00000

0800f9f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f9f0:	b084      	sub	sp, #16
 800f9f2:	b580      	push	{r7, lr}
 800f9f4:	b084      	sub	sp, #16
 800f9f6:	af00      	add	r7, sp, #0
 800f9f8:	6078      	str	r0, [r7, #4]
 800f9fa:	f107 001c 	add.w	r0, r7, #28
 800f9fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fa02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa04:	2b01      	cmp	r3, #1
 800fa06:	d122      	bne.n	800fa4e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	68db      	ldr	r3, [r3, #12]
 800fa18:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800fa1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa20:	687a      	ldr	r2, [r7, #4]
 800fa22:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	68db      	ldr	r3, [r3, #12]
 800fa28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fa30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa32:	2b01      	cmp	r3, #1
 800fa34:	d105      	bne.n	800fa42 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	68db      	ldr	r3, [r3, #12]
 800fa3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f001 fac6 	bl	8010fd4 <USB_CoreReset>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	73fb      	strb	r3, [r7, #15]
 800fa4c:	e01a      	b.n	800fa84 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fa5a:	6878      	ldr	r0, [r7, #4]
 800fa5c:	f001 faba 	bl	8010fd4 <USB_CoreReset>
 800fa60:	4603      	mov	r3, r0
 800fa62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fa64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d106      	bne.n	800fa78 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	639a      	str	r2, [r3, #56]	; 0x38
 800fa76:	e005      	b.n	800fa84 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fa84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa86:	2b01      	cmp	r3, #1
 800fa88:	d10b      	bne.n	800faa2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	689b      	ldr	r3, [r3, #8]
 800fa8e:	f043 0206 	orr.w	r2, r3, #6
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	689b      	ldr	r3, [r3, #8]
 800fa9a:	f043 0220 	orr.w	r2, r3, #32
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800faa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3710      	adds	r7, #16
 800faa8:	46bd      	mov	sp, r7
 800faaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800faae:	b004      	add	sp, #16
 800fab0:	4770      	bx	lr
	...

0800fab4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800fab4:	b480      	push	{r7}
 800fab6:	b087      	sub	sp, #28
 800fab8:	af00      	add	r7, sp, #0
 800faba:	60f8      	str	r0, [r7, #12]
 800fabc:	60b9      	str	r1, [r7, #8]
 800fabe:	4613      	mov	r3, r2
 800fac0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800fac2:	79fb      	ldrb	r3, [r7, #7]
 800fac4:	2b02      	cmp	r3, #2
 800fac6:	d165      	bne.n	800fb94 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800fac8:	68bb      	ldr	r3, [r7, #8]
 800faca:	4a41      	ldr	r2, [pc, #260]	; (800fbd0 <USB_SetTurnaroundTime+0x11c>)
 800facc:	4293      	cmp	r3, r2
 800face:	d906      	bls.n	800fade <USB_SetTurnaroundTime+0x2a>
 800fad0:	68bb      	ldr	r3, [r7, #8]
 800fad2:	4a40      	ldr	r2, [pc, #256]	; (800fbd4 <USB_SetTurnaroundTime+0x120>)
 800fad4:	4293      	cmp	r3, r2
 800fad6:	d202      	bcs.n	800fade <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800fad8:	230f      	movs	r3, #15
 800fada:	617b      	str	r3, [r7, #20]
 800fadc:	e062      	b.n	800fba4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	4a3c      	ldr	r2, [pc, #240]	; (800fbd4 <USB_SetTurnaroundTime+0x120>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d306      	bcc.n	800faf4 <USB_SetTurnaroundTime+0x40>
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	4a3b      	ldr	r2, [pc, #236]	; (800fbd8 <USB_SetTurnaroundTime+0x124>)
 800faea:	4293      	cmp	r3, r2
 800faec:	d202      	bcs.n	800faf4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800faee:	230e      	movs	r3, #14
 800faf0:	617b      	str	r3, [r7, #20]
 800faf2:	e057      	b.n	800fba4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	4a38      	ldr	r2, [pc, #224]	; (800fbd8 <USB_SetTurnaroundTime+0x124>)
 800faf8:	4293      	cmp	r3, r2
 800fafa:	d306      	bcc.n	800fb0a <USB_SetTurnaroundTime+0x56>
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	4a37      	ldr	r2, [pc, #220]	; (800fbdc <USB_SetTurnaroundTime+0x128>)
 800fb00:	4293      	cmp	r3, r2
 800fb02:	d202      	bcs.n	800fb0a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800fb04:	230d      	movs	r3, #13
 800fb06:	617b      	str	r3, [r7, #20]
 800fb08:	e04c      	b.n	800fba4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	4a33      	ldr	r2, [pc, #204]	; (800fbdc <USB_SetTurnaroundTime+0x128>)
 800fb0e:	4293      	cmp	r3, r2
 800fb10:	d306      	bcc.n	800fb20 <USB_SetTurnaroundTime+0x6c>
 800fb12:	68bb      	ldr	r3, [r7, #8]
 800fb14:	4a32      	ldr	r2, [pc, #200]	; (800fbe0 <USB_SetTurnaroundTime+0x12c>)
 800fb16:	4293      	cmp	r3, r2
 800fb18:	d802      	bhi.n	800fb20 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800fb1a:	230c      	movs	r3, #12
 800fb1c:	617b      	str	r3, [r7, #20]
 800fb1e:	e041      	b.n	800fba4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	4a2f      	ldr	r2, [pc, #188]	; (800fbe0 <USB_SetTurnaroundTime+0x12c>)
 800fb24:	4293      	cmp	r3, r2
 800fb26:	d906      	bls.n	800fb36 <USB_SetTurnaroundTime+0x82>
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	4a2e      	ldr	r2, [pc, #184]	; (800fbe4 <USB_SetTurnaroundTime+0x130>)
 800fb2c:	4293      	cmp	r3, r2
 800fb2e:	d802      	bhi.n	800fb36 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800fb30:	230b      	movs	r3, #11
 800fb32:	617b      	str	r3, [r7, #20]
 800fb34:	e036      	b.n	800fba4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	4a2a      	ldr	r2, [pc, #168]	; (800fbe4 <USB_SetTurnaroundTime+0x130>)
 800fb3a:	4293      	cmp	r3, r2
 800fb3c:	d906      	bls.n	800fb4c <USB_SetTurnaroundTime+0x98>
 800fb3e:	68bb      	ldr	r3, [r7, #8]
 800fb40:	4a29      	ldr	r2, [pc, #164]	; (800fbe8 <USB_SetTurnaroundTime+0x134>)
 800fb42:	4293      	cmp	r3, r2
 800fb44:	d802      	bhi.n	800fb4c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800fb46:	230a      	movs	r3, #10
 800fb48:	617b      	str	r3, [r7, #20]
 800fb4a:	e02b      	b.n	800fba4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800fb4c:	68bb      	ldr	r3, [r7, #8]
 800fb4e:	4a26      	ldr	r2, [pc, #152]	; (800fbe8 <USB_SetTurnaroundTime+0x134>)
 800fb50:	4293      	cmp	r3, r2
 800fb52:	d906      	bls.n	800fb62 <USB_SetTurnaroundTime+0xae>
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	4a25      	ldr	r2, [pc, #148]	; (800fbec <USB_SetTurnaroundTime+0x138>)
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d202      	bcs.n	800fb62 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800fb5c:	2309      	movs	r3, #9
 800fb5e:	617b      	str	r3, [r7, #20]
 800fb60:	e020      	b.n	800fba4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	4a21      	ldr	r2, [pc, #132]	; (800fbec <USB_SetTurnaroundTime+0x138>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	d306      	bcc.n	800fb78 <USB_SetTurnaroundTime+0xc4>
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	4a20      	ldr	r2, [pc, #128]	; (800fbf0 <USB_SetTurnaroundTime+0x13c>)
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	d802      	bhi.n	800fb78 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800fb72:	2308      	movs	r3, #8
 800fb74:	617b      	str	r3, [r7, #20]
 800fb76:	e015      	b.n	800fba4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	4a1d      	ldr	r2, [pc, #116]	; (800fbf0 <USB_SetTurnaroundTime+0x13c>)
 800fb7c:	4293      	cmp	r3, r2
 800fb7e:	d906      	bls.n	800fb8e <USB_SetTurnaroundTime+0xda>
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	4a1c      	ldr	r2, [pc, #112]	; (800fbf4 <USB_SetTurnaroundTime+0x140>)
 800fb84:	4293      	cmp	r3, r2
 800fb86:	d202      	bcs.n	800fb8e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800fb88:	2307      	movs	r3, #7
 800fb8a:	617b      	str	r3, [r7, #20]
 800fb8c:	e00a      	b.n	800fba4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800fb8e:	2306      	movs	r3, #6
 800fb90:	617b      	str	r3, [r7, #20]
 800fb92:	e007      	b.n	800fba4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800fb94:	79fb      	ldrb	r3, [r7, #7]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d102      	bne.n	800fba0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800fb9a:	2309      	movs	r3, #9
 800fb9c:	617b      	str	r3, [r7, #20]
 800fb9e:	e001      	b.n	800fba4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800fba0:	2309      	movs	r3, #9
 800fba2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	68db      	ldr	r3, [r3, #12]
 800fba8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	68da      	ldr	r2, [r3, #12]
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	029b      	lsls	r3, r3, #10
 800fbb8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800fbbc:	431a      	orrs	r2, r3
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fbc2:	2300      	movs	r3, #0
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	371c      	adds	r7, #28
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbce:	4770      	bx	lr
 800fbd0:	00d8acbf 	.word	0x00d8acbf
 800fbd4:	00e4e1c0 	.word	0x00e4e1c0
 800fbd8:	00f42400 	.word	0x00f42400
 800fbdc:	01067380 	.word	0x01067380
 800fbe0:	011a499f 	.word	0x011a499f
 800fbe4:	01312cff 	.word	0x01312cff
 800fbe8:	014ca43f 	.word	0x014ca43f
 800fbec:	016e3600 	.word	0x016e3600
 800fbf0:	01a6ab1f 	.word	0x01a6ab1f
 800fbf4:	01e84800 	.word	0x01e84800

0800fbf8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fbf8:	b480      	push	{r7}
 800fbfa:	b083      	sub	sp, #12
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	689b      	ldr	r3, [r3, #8]
 800fc04:	f043 0201 	orr.w	r2, r3, #1
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fc0c:	2300      	movs	r3, #0
}
 800fc0e:	4618      	mov	r0, r3
 800fc10:	370c      	adds	r7, #12
 800fc12:	46bd      	mov	sp, r7
 800fc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc18:	4770      	bx	lr

0800fc1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fc1a:	b480      	push	{r7}
 800fc1c:	b083      	sub	sp, #12
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	689b      	ldr	r3, [r3, #8]
 800fc26:	f023 0201 	bic.w	r2, r3, #1
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fc2e:	2300      	movs	r3, #0
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	370c      	adds	r7, #12
 800fc34:	46bd      	mov	sp, r7
 800fc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3a:	4770      	bx	lr

0800fc3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b082      	sub	sp, #8
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	460b      	mov	r3, r1
 800fc46:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	68db      	ldr	r3, [r3, #12]
 800fc4c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fc54:	78fb      	ldrb	r3, [r7, #3]
 800fc56:	2b01      	cmp	r3, #1
 800fc58:	d106      	bne.n	800fc68 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	68db      	ldr	r3, [r3, #12]
 800fc5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	60da      	str	r2, [r3, #12]
 800fc66:	e00b      	b.n	800fc80 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800fc68:	78fb      	ldrb	r3, [r7, #3]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d106      	bne.n	800fc7c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	68db      	ldr	r3, [r3, #12]
 800fc72:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	60da      	str	r2, [r3, #12]
 800fc7a:	e001      	b.n	800fc80 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	e003      	b.n	800fc88 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800fc80:	2032      	movs	r0, #50	; 0x32
 800fc82:	f7fb fdb3 	bl	800b7ec <HAL_Delay>

  return HAL_OK;
 800fc86:	2300      	movs	r3, #0
}
 800fc88:	4618      	mov	r0, r3
 800fc8a:	3708      	adds	r7, #8
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}

0800fc90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fc90:	b084      	sub	sp, #16
 800fc92:	b580      	push	{r7, lr}
 800fc94:	b086      	sub	sp, #24
 800fc96:	af00      	add	r7, sp, #0
 800fc98:	6078      	str	r0, [r7, #4]
 800fc9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fc9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fca2:	2300      	movs	r3, #0
 800fca4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fcaa:	2300      	movs	r3, #0
 800fcac:	613b      	str	r3, [r7, #16]
 800fcae:	e009      	b.n	800fcc4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fcb0:	687a      	ldr	r2, [r7, #4]
 800fcb2:	693b      	ldr	r3, [r7, #16]
 800fcb4:	3340      	adds	r3, #64	; 0x40
 800fcb6:	009b      	lsls	r3, r3, #2
 800fcb8:	4413      	add	r3, r2
 800fcba:	2200      	movs	r2, #0
 800fcbc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	3301      	adds	r3, #1
 800fcc2:	613b      	str	r3, [r7, #16]
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	2b0e      	cmp	r3, #14
 800fcc8:	d9f2      	bls.n	800fcb0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fcca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d11c      	bne.n	800fd0a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	68fa      	ldr	r2, [r7, #12]
 800fcda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fcde:	f043 0302 	orr.w	r3, r3, #2
 800fce2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fce8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcf4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd00:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	639a      	str	r2, [r3, #56]	; 0x38
 800fd08:	e00b      	b.n	800fd22 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd0e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd1a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fd28:	461a      	mov	r2, r3
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd34:	4619      	mov	r1, r3
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd3c:	461a      	mov	r2, r3
 800fd3e:	680b      	ldr	r3, [r1, #0]
 800fd40:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd44:	2b01      	cmp	r3, #1
 800fd46:	d10c      	bne.n	800fd62 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d104      	bne.n	800fd58 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fd4e:	2100      	movs	r1, #0
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f000 f949 	bl	800ffe8 <USB_SetDevSpeed>
 800fd56:	e008      	b.n	800fd6a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fd58:	2101      	movs	r1, #1
 800fd5a:	6878      	ldr	r0, [r7, #4]
 800fd5c:	f000 f944 	bl	800ffe8 <USB_SetDevSpeed>
 800fd60:	e003      	b.n	800fd6a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fd62:	2103      	movs	r1, #3
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f000 f93f 	bl	800ffe8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fd6a:	2110      	movs	r1, #16
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f000 f8f3 	bl	800ff58 <USB_FlushTxFifo>
 800fd72:	4603      	mov	r3, r0
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d001      	beq.n	800fd7c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800fd78:	2301      	movs	r3, #1
 800fd7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f000 f911 	bl	800ffa4 <USB_FlushRxFifo>
 800fd82:	4603      	mov	r3, r0
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d001      	beq.n	800fd8c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800fd88:	2301      	movs	r3, #1
 800fd8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd92:	461a      	mov	r2, r3
 800fd94:	2300      	movs	r3, #0
 800fd96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd9e:	461a      	mov	r2, r3
 800fda0:	2300      	movs	r3, #0
 800fda2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdaa:	461a      	mov	r2, r3
 800fdac:	2300      	movs	r3, #0
 800fdae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	613b      	str	r3, [r7, #16]
 800fdb4:	e043      	b.n	800fe3e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fdb6:	693b      	ldr	r3, [r7, #16]
 800fdb8:	015a      	lsls	r2, r3, #5
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	4413      	add	r3, r2
 800fdbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fdc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fdcc:	d118      	bne.n	800fe00 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800fdce:	693b      	ldr	r3, [r7, #16]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d10a      	bne.n	800fdea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fdd4:	693b      	ldr	r3, [r7, #16]
 800fdd6:	015a      	lsls	r2, r3, #5
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	4413      	add	r3, r2
 800fddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fde0:	461a      	mov	r2, r3
 800fde2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fde6:	6013      	str	r3, [r2, #0]
 800fde8:	e013      	b.n	800fe12 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fdea:	693b      	ldr	r3, [r7, #16]
 800fdec:	015a      	lsls	r2, r3, #5
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	4413      	add	r3, r2
 800fdf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdf6:	461a      	mov	r2, r3
 800fdf8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fdfc:	6013      	str	r3, [r2, #0]
 800fdfe:	e008      	b.n	800fe12 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	015a      	lsls	r2, r3, #5
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	4413      	add	r3, r2
 800fe08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	2300      	movs	r3, #0
 800fe10:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	015a      	lsls	r2, r3, #5
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	4413      	add	r3, r2
 800fe1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe1e:	461a      	mov	r2, r3
 800fe20:	2300      	movs	r3, #0
 800fe22:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fe24:	693b      	ldr	r3, [r7, #16]
 800fe26:	015a      	lsls	r2, r3, #5
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	4413      	add	r3, r2
 800fe2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe30:	461a      	mov	r2, r3
 800fe32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fe36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	3301      	adds	r3, #1
 800fe3c:	613b      	str	r3, [r7, #16]
 800fe3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe40:	693a      	ldr	r2, [r7, #16]
 800fe42:	429a      	cmp	r2, r3
 800fe44:	d3b7      	bcc.n	800fdb6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fe46:	2300      	movs	r3, #0
 800fe48:	613b      	str	r3, [r7, #16]
 800fe4a:	e043      	b.n	800fed4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fe4c:	693b      	ldr	r3, [r7, #16]
 800fe4e:	015a      	lsls	r2, r3, #5
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	4413      	add	r3, r2
 800fe54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fe5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fe62:	d118      	bne.n	800fe96 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800fe64:	693b      	ldr	r3, [r7, #16]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d10a      	bne.n	800fe80 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fe6a:	693b      	ldr	r3, [r7, #16]
 800fe6c:	015a      	lsls	r2, r3, #5
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	4413      	add	r3, r2
 800fe72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe76:	461a      	mov	r2, r3
 800fe78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fe7c:	6013      	str	r3, [r2, #0]
 800fe7e:	e013      	b.n	800fea8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	015a      	lsls	r2, r3, #5
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	4413      	add	r3, r2
 800fe88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe8c:	461a      	mov	r2, r3
 800fe8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fe92:	6013      	str	r3, [r2, #0]
 800fe94:	e008      	b.n	800fea8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fe96:	693b      	ldr	r3, [r7, #16]
 800fe98:	015a      	lsls	r2, r3, #5
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	4413      	add	r3, r2
 800fe9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fea2:	461a      	mov	r2, r3
 800fea4:	2300      	movs	r3, #0
 800fea6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fea8:	693b      	ldr	r3, [r7, #16]
 800feaa:	015a      	lsls	r2, r3, #5
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	4413      	add	r3, r2
 800feb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800feb4:	461a      	mov	r2, r3
 800feb6:	2300      	movs	r3, #0
 800feb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800feba:	693b      	ldr	r3, [r7, #16]
 800febc:	015a      	lsls	r2, r3, #5
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	4413      	add	r3, r2
 800fec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fec6:	461a      	mov	r2, r3
 800fec8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fecc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	3301      	adds	r3, #1
 800fed2:	613b      	str	r3, [r7, #16]
 800fed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed6:	693a      	ldr	r2, [r7, #16]
 800fed8:	429a      	cmp	r2, r3
 800feda:	d3b7      	bcc.n	800fe4c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fee2:	691b      	ldr	r3, [r3, #16]
 800fee4:	68fa      	ldr	r2, [r7, #12]
 800fee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800feea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800feee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2200      	movs	r2, #0
 800fef4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fefc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d105      	bne.n	800ff10 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	699b      	ldr	r3, [r3, #24]
 800ff08:	f043 0210 	orr.w	r2, r3, #16
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	699a      	ldr	r2, [r3, #24]
 800ff14:	4b0f      	ldr	r3, [pc, #60]	; (800ff54 <USB_DevInit+0x2c4>)
 800ff16:	4313      	orrs	r3, r2
 800ff18:	687a      	ldr	r2, [r7, #4]
 800ff1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ff1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d005      	beq.n	800ff2e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	699b      	ldr	r3, [r3, #24]
 800ff26:	f043 0208 	orr.w	r2, r3, #8
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ff2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff30:	2b01      	cmp	r3, #1
 800ff32:	d107      	bne.n	800ff44 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	699b      	ldr	r3, [r3, #24]
 800ff38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ff3c:	f043 0304 	orr.w	r3, r3, #4
 800ff40:	687a      	ldr	r2, [r7, #4]
 800ff42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ff44:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	3718      	adds	r7, #24
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ff50:	b004      	add	sp, #16
 800ff52:	4770      	bx	lr
 800ff54:	803c3800 	.word	0x803c3800

0800ff58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ff58:	b480      	push	{r7}
 800ff5a:	b085      	sub	sp, #20
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ff62:	2300      	movs	r3, #0
 800ff64:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	019b      	lsls	r3, r3, #6
 800ff6a:	f043 0220 	orr.w	r2, r3, #32
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	3301      	adds	r3, #1
 800ff76:	60fb      	str	r3, [r7, #12]
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	4a09      	ldr	r2, [pc, #36]	; (800ffa0 <USB_FlushTxFifo+0x48>)
 800ff7c:	4293      	cmp	r3, r2
 800ff7e:	d901      	bls.n	800ff84 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ff80:	2303      	movs	r3, #3
 800ff82:	e006      	b.n	800ff92 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	691b      	ldr	r3, [r3, #16]
 800ff88:	f003 0320 	and.w	r3, r3, #32
 800ff8c:	2b20      	cmp	r3, #32
 800ff8e:	d0f0      	beq.n	800ff72 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ff90:	2300      	movs	r3, #0
}
 800ff92:	4618      	mov	r0, r3
 800ff94:	3714      	adds	r7, #20
 800ff96:	46bd      	mov	sp, r7
 800ff98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9c:	4770      	bx	lr
 800ff9e:	bf00      	nop
 800ffa0:	00030d40 	.word	0x00030d40

0800ffa4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	b085      	sub	sp, #20
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ffac:	2300      	movs	r3, #0
 800ffae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2210      	movs	r2, #16
 800ffb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	3301      	adds	r3, #1
 800ffba:	60fb      	str	r3, [r7, #12]
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	4a09      	ldr	r2, [pc, #36]	; (800ffe4 <USB_FlushRxFifo+0x40>)
 800ffc0:	4293      	cmp	r3, r2
 800ffc2:	d901      	bls.n	800ffc8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ffc4:	2303      	movs	r3, #3
 800ffc6:	e006      	b.n	800ffd6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	691b      	ldr	r3, [r3, #16]
 800ffcc:	f003 0310 	and.w	r3, r3, #16
 800ffd0:	2b10      	cmp	r3, #16
 800ffd2:	d0f0      	beq.n	800ffb6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ffd4:	2300      	movs	r3, #0
}
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	3714      	adds	r7, #20
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe0:	4770      	bx	lr
 800ffe2:	bf00      	nop
 800ffe4:	00030d40 	.word	0x00030d40

0800ffe8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ffe8:	b480      	push	{r7}
 800ffea:	b085      	sub	sp, #20
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	460b      	mov	r3, r1
 800fff2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fffe:	681a      	ldr	r2, [r3, #0]
 8010000:	78fb      	ldrb	r3, [r7, #3]
 8010002:	68f9      	ldr	r1, [r7, #12]
 8010004:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010008:	4313      	orrs	r3, r2
 801000a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801000c:	2300      	movs	r3, #0
}
 801000e:	4618      	mov	r0, r3
 8010010:	3714      	adds	r7, #20
 8010012:	46bd      	mov	sp, r7
 8010014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010018:	4770      	bx	lr

0801001a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801001a:	b480      	push	{r7}
 801001c:	b087      	sub	sp, #28
 801001e:	af00      	add	r7, sp, #0
 8010020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010026:	693b      	ldr	r3, [r7, #16]
 8010028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801002c:	689b      	ldr	r3, [r3, #8]
 801002e:	f003 0306 	and.w	r3, r3, #6
 8010032:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d102      	bne.n	8010040 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801003a:	2300      	movs	r3, #0
 801003c:	75fb      	strb	r3, [r7, #23]
 801003e:	e00a      	b.n	8010056 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	2b02      	cmp	r3, #2
 8010044:	d002      	beq.n	801004c <USB_GetDevSpeed+0x32>
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	2b06      	cmp	r3, #6
 801004a:	d102      	bne.n	8010052 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801004c:	2302      	movs	r3, #2
 801004e:	75fb      	strb	r3, [r7, #23]
 8010050:	e001      	b.n	8010056 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010052:	230f      	movs	r3, #15
 8010054:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010056:	7dfb      	ldrb	r3, [r7, #23]
}
 8010058:	4618      	mov	r0, r3
 801005a:	371c      	adds	r7, #28
 801005c:	46bd      	mov	sp, r7
 801005e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010062:	4770      	bx	lr

08010064 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010064:	b480      	push	{r7}
 8010066:	b085      	sub	sp, #20
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
 801006c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	781b      	ldrb	r3, [r3, #0]
 8010076:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	785b      	ldrb	r3, [r3, #1]
 801007c:	2b01      	cmp	r3, #1
 801007e:	d13a      	bne.n	80100f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010086:	69da      	ldr	r2, [r3, #28]
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	781b      	ldrb	r3, [r3, #0]
 801008c:	f003 030f 	and.w	r3, r3, #15
 8010090:	2101      	movs	r1, #1
 8010092:	fa01 f303 	lsl.w	r3, r1, r3
 8010096:	b29b      	uxth	r3, r3
 8010098:	68f9      	ldr	r1, [r7, #12]
 801009a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801009e:	4313      	orrs	r3, r2
 80100a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	015a      	lsls	r2, r3, #5
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	4413      	add	r3, r2
 80100aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d155      	bne.n	8010164 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	015a      	lsls	r2, r3, #5
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	4413      	add	r3, r2
 80100c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100c4:	681a      	ldr	r2, [r3, #0]
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	689b      	ldr	r3, [r3, #8]
 80100ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	78db      	ldrb	r3, [r3, #3]
 80100d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80100d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	059b      	lsls	r3, r3, #22
 80100da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80100dc:	4313      	orrs	r3, r2
 80100de:	68ba      	ldr	r2, [r7, #8]
 80100e0:	0151      	lsls	r1, r2, #5
 80100e2:	68fa      	ldr	r2, [r7, #12]
 80100e4:	440a      	add	r2, r1
 80100e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80100ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80100f2:	6013      	str	r3, [r2, #0]
 80100f4:	e036      	b.n	8010164 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100fc:	69da      	ldr	r2, [r3, #28]
 80100fe:	683b      	ldr	r3, [r7, #0]
 8010100:	781b      	ldrb	r3, [r3, #0]
 8010102:	f003 030f 	and.w	r3, r3, #15
 8010106:	2101      	movs	r1, #1
 8010108:	fa01 f303 	lsl.w	r3, r1, r3
 801010c:	041b      	lsls	r3, r3, #16
 801010e:	68f9      	ldr	r1, [r7, #12]
 8010110:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010114:	4313      	orrs	r3, r2
 8010116:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	015a      	lsls	r2, r3, #5
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	4413      	add	r3, r2
 8010120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801012a:	2b00      	cmp	r3, #0
 801012c:	d11a      	bne.n	8010164 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	015a      	lsls	r2, r3, #5
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	4413      	add	r3, r2
 8010136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801013a:	681a      	ldr	r2, [r3, #0]
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	689b      	ldr	r3, [r3, #8]
 8010140:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	78db      	ldrb	r3, [r3, #3]
 8010148:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801014a:	430b      	orrs	r3, r1
 801014c:	4313      	orrs	r3, r2
 801014e:	68ba      	ldr	r2, [r7, #8]
 8010150:	0151      	lsls	r1, r2, #5
 8010152:	68fa      	ldr	r2, [r7, #12]
 8010154:	440a      	add	r2, r1
 8010156:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801015a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801015e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010162:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010164:	2300      	movs	r3, #0
}
 8010166:	4618      	mov	r0, r3
 8010168:	3714      	adds	r7, #20
 801016a:	46bd      	mov	sp, r7
 801016c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010170:	4770      	bx	lr
	...

08010174 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010174:	b480      	push	{r7}
 8010176:	b085      	sub	sp, #20
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
 801017c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	781b      	ldrb	r3, [r3, #0]
 8010186:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	785b      	ldrb	r3, [r3, #1]
 801018c:	2b01      	cmp	r3, #1
 801018e:	d161      	bne.n	8010254 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	015a      	lsls	r2, r3, #5
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	4413      	add	r3, r2
 8010198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80101a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80101a6:	d11f      	bne.n	80101e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	015a      	lsls	r2, r3, #5
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	4413      	add	r3, r2
 80101b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	68ba      	ldr	r2, [r7, #8]
 80101b8:	0151      	lsls	r1, r2, #5
 80101ba:	68fa      	ldr	r2, [r7, #12]
 80101bc:	440a      	add	r2, r1
 80101be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80101c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	015a      	lsls	r2, r3, #5
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	4413      	add	r3, r2
 80101d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	68ba      	ldr	r2, [r7, #8]
 80101d8:	0151      	lsls	r1, r2, #5
 80101da:	68fa      	ldr	r2, [r7, #12]
 80101dc:	440a      	add	r2, r1
 80101de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80101e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	781b      	ldrb	r3, [r3, #0]
 80101f4:	f003 030f 	and.w	r3, r3, #15
 80101f8:	2101      	movs	r1, #1
 80101fa:	fa01 f303 	lsl.w	r3, r1, r3
 80101fe:	b29b      	uxth	r3, r3
 8010200:	43db      	mvns	r3, r3
 8010202:	68f9      	ldr	r1, [r7, #12]
 8010204:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010208:	4013      	ands	r3, r2
 801020a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010212:	69da      	ldr	r2, [r3, #28]
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	781b      	ldrb	r3, [r3, #0]
 8010218:	f003 030f 	and.w	r3, r3, #15
 801021c:	2101      	movs	r1, #1
 801021e:	fa01 f303 	lsl.w	r3, r1, r3
 8010222:	b29b      	uxth	r3, r3
 8010224:	43db      	mvns	r3, r3
 8010226:	68f9      	ldr	r1, [r7, #12]
 8010228:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801022c:	4013      	ands	r3, r2
 801022e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	015a      	lsls	r2, r3, #5
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	4413      	add	r3, r2
 8010238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801023c:	681a      	ldr	r2, [r3, #0]
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	0159      	lsls	r1, r3, #5
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	440b      	add	r3, r1
 8010246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801024a:	4619      	mov	r1, r3
 801024c:	4b35      	ldr	r3, [pc, #212]	; (8010324 <USB_DeactivateEndpoint+0x1b0>)
 801024e:	4013      	ands	r3, r2
 8010250:	600b      	str	r3, [r1, #0]
 8010252:	e060      	b.n	8010316 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	015a      	lsls	r2, r3, #5
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	4413      	add	r3, r2
 801025c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010266:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801026a:	d11f      	bne.n	80102ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	015a      	lsls	r2, r3, #5
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	4413      	add	r3, r2
 8010274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	68ba      	ldr	r2, [r7, #8]
 801027c:	0151      	lsls	r1, r2, #5
 801027e:	68fa      	ldr	r2, [r7, #12]
 8010280:	440a      	add	r2, r1
 8010282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010286:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801028a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	015a      	lsls	r2, r3, #5
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	4413      	add	r3, r2
 8010294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	68ba      	ldr	r2, [r7, #8]
 801029c:	0151      	lsls	r1, r2, #5
 801029e:	68fa      	ldr	r2, [r7, #12]
 80102a0:	440a      	add	r2, r1
 80102a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80102aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	781b      	ldrb	r3, [r3, #0]
 80102b8:	f003 030f 	and.w	r3, r3, #15
 80102bc:	2101      	movs	r1, #1
 80102be:	fa01 f303 	lsl.w	r3, r1, r3
 80102c2:	041b      	lsls	r3, r3, #16
 80102c4:	43db      	mvns	r3, r3
 80102c6:	68f9      	ldr	r1, [r7, #12]
 80102c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80102cc:	4013      	ands	r3, r2
 80102ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102d6:	69da      	ldr	r2, [r3, #28]
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	f003 030f 	and.w	r3, r3, #15
 80102e0:	2101      	movs	r1, #1
 80102e2:	fa01 f303 	lsl.w	r3, r1, r3
 80102e6:	041b      	lsls	r3, r3, #16
 80102e8:	43db      	mvns	r3, r3
 80102ea:	68f9      	ldr	r1, [r7, #12]
 80102ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80102f0:	4013      	ands	r3, r2
 80102f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	015a      	lsls	r2, r3, #5
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	4413      	add	r3, r2
 80102fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010300:	681a      	ldr	r2, [r3, #0]
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	0159      	lsls	r1, r3, #5
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	440b      	add	r3, r1
 801030a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801030e:	4619      	mov	r1, r3
 8010310:	4b05      	ldr	r3, [pc, #20]	; (8010328 <USB_DeactivateEndpoint+0x1b4>)
 8010312:	4013      	ands	r3, r2
 8010314:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8010316:	2300      	movs	r3, #0
}
 8010318:	4618      	mov	r0, r3
 801031a:	3714      	adds	r7, #20
 801031c:	46bd      	mov	sp, r7
 801031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010322:	4770      	bx	lr
 8010324:	ec337800 	.word	0xec337800
 8010328:	eff37800 	.word	0xeff37800

0801032c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b08a      	sub	sp, #40	; 0x28
 8010330:	af02      	add	r7, sp, #8
 8010332:	60f8      	str	r0, [r7, #12]
 8010334:	60b9      	str	r1, [r7, #8]
 8010336:	4613      	mov	r3, r2
 8010338:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	785b      	ldrb	r3, [r3, #1]
 8010348:	2b01      	cmp	r3, #1
 801034a:	f040 815c 	bne.w	8010606 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801034e:	68bb      	ldr	r3, [r7, #8]
 8010350:	695b      	ldr	r3, [r3, #20]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d132      	bne.n	80103bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010356:	69bb      	ldr	r3, [r7, #24]
 8010358:	015a      	lsls	r2, r3, #5
 801035a:	69fb      	ldr	r3, [r7, #28]
 801035c:	4413      	add	r3, r2
 801035e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010362:	691b      	ldr	r3, [r3, #16]
 8010364:	69ba      	ldr	r2, [r7, #24]
 8010366:	0151      	lsls	r1, r2, #5
 8010368:	69fa      	ldr	r2, [r7, #28]
 801036a:	440a      	add	r2, r1
 801036c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010370:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010374:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010378:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801037a:	69bb      	ldr	r3, [r7, #24]
 801037c:	015a      	lsls	r2, r3, #5
 801037e:	69fb      	ldr	r3, [r7, #28]
 8010380:	4413      	add	r3, r2
 8010382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010386:	691b      	ldr	r3, [r3, #16]
 8010388:	69ba      	ldr	r2, [r7, #24]
 801038a:	0151      	lsls	r1, r2, #5
 801038c:	69fa      	ldr	r2, [r7, #28]
 801038e:	440a      	add	r2, r1
 8010390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010394:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010398:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801039a:	69bb      	ldr	r3, [r7, #24]
 801039c:	015a      	lsls	r2, r3, #5
 801039e:	69fb      	ldr	r3, [r7, #28]
 80103a0:	4413      	add	r3, r2
 80103a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103a6:	691b      	ldr	r3, [r3, #16]
 80103a8:	69ba      	ldr	r2, [r7, #24]
 80103aa:	0151      	lsls	r1, r2, #5
 80103ac:	69fa      	ldr	r2, [r7, #28]
 80103ae:	440a      	add	r2, r1
 80103b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103b4:	0cdb      	lsrs	r3, r3, #19
 80103b6:	04db      	lsls	r3, r3, #19
 80103b8:	6113      	str	r3, [r2, #16]
 80103ba:	e074      	b.n	80104a6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80103bc:	69bb      	ldr	r3, [r7, #24]
 80103be:	015a      	lsls	r2, r3, #5
 80103c0:	69fb      	ldr	r3, [r7, #28]
 80103c2:	4413      	add	r3, r2
 80103c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103c8:	691b      	ldr	r3, [r3, #16]
 80103ca:	69ba      	ldr	r2, [r7, #24]
 80103cc:	0151      	lsls	r1, r2, #5
 80103ce:	69fa      	ldr	r2, [r7, #28]
 80103d0:	440a      	add	r2, r1
 80103d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103d6:	0cdb      	lsrs	r3, r3, #19
 80103d8:	04db      	lsls	r3, r3, #19
 80103da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80103dc:	69bb      	ldr	r3, [r7, #24]
 80103de:	015a      	lsls	r2, r3, #5
 80103e0:	69fb      	ldr	r3, [r7, #28]
 80103e2:	4413      	add	r3, r2
 80103e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103e8:	691b      	ldr	r3, [r3, #16]
 80103ea:	69ba      	ldr	r2, [r7, #24]
 80103ec:	0151      	lsls	r1, r2, #5
 80103ee:	69fa      	ldr	r2, [r7, #28]
 80103f0:	440a      	add	r2, r1
 80103f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80103fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80103fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8010400:	69bb      	ldr	r3, [r7, #24]
 8010402:	015a      	lsls	r2, r3, #5
 8010404:	69fb      	ldr	r3, [r7, #28]
 8010406:	4413      	add	r3, r2
 8010408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801040c:	691a      	ldr	r2, [r3, #16]
 801040e:	68bb      	ldr	r3, [r7, #8]
 8010410:	6959      	ldr	r1, [r3, #20]
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	689b      	ldr	r3, [r3, #8]
 8010416:	440b      	add	r3, r1
 8010418:	1e59      	subs	r1, r3, #1
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	689b      	ldr	r3, [r3, #8]
 801041e:	fbb1 f3f3 	udiv	r3, r1, r3
 8010422:	04d9      	lsls	r1, r3, #19
 8010424:	4b9d      	ldr	r3, [pc, #628]	; (801069c <USB_EPStartXfer+0x370>)
 8010426:	400b      	ands	r3, r1
 8010428:	69b9      	ldr	r1, [r7, #24]
 801042a:	0148      	lsls	r0, r1, #5
 801042c:	69f9      	ldr	r1, [r7, #28]
 801042e:	4401      	add	r1, r0
 8010430:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010434:	4313      	orrs	r3, r2
 8010436:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010438:	69bb      	ldr	r3, [r7, #24]
 801043a:	015a      	lsls	r2, r3, #5
 801043c:	69fb      	ldr	r3, [r7, #28]
 801043e:	4413      	add	r3, r2
 8010440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010444:	691a      	ldr	r2, [r3, #16]
 8010446:	68bb      	ldr	r3, [r7, #8]
 8010448:	695b      	ldr	r3, [r3, #20]
 801044a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801044e:	69b9      	ldr	r1, [r7, #24]
 8010450:	0148      	lsls	r0, r1, #5
 8010452:	69f9      	ldr	r1, [r7, #28]
 8010454:	4401      	add	r1, r0
 8010456:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801045a:	4313      	orrs	r3, r2
 801045c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	78db      	ldrb	r3, [r3, #3]
 8010462:	2b01      	cmp	r3, #1
 8010464:	d11f      	bne.n	80104a6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010466:	69bb      	ldr	r3, [r7, #24]
 8010468:	015a      	lsls	r2, r3, #5
 801046a:	69fb      	ldr	r3, [r7, #28]
 801046c:	4413      	add	r3, r2
 801046e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010472:	691b      	ldr	r3, [r3, #16]
 8010474:	69ba      	ldr	r2, [r7, #24]
 8010476:	0151      	lsls	r1, r2, #5
 8010478:	69fa      	ldr	r2, [r7, #28]
 801047a:	440a      	add	r2, r1
 801047c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010480:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010484:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8010486:	69bb      	ldr	r3, [r7, #24]
 8010488:	015a      	lsls	r2, r3, #5
 801048a:	69fb      	ldr	r3, [r7, #28]
 801048c:	4413      	add	r3, r2
 801048e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010492:	691b      	ldr	r3, [r3, #16]
 8010494:	69ba      	ldr	r2, [r7, #24]
 8010496:	0151      	lsls	r1, r2, #5
 8010498:	69fa      	ldr	r2, [r7, #28]
 801049a:	440a      	add	r2, r1
 801049c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80104a4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80104a6:	79fb      	ldrb	r3, [r7, #7]
 80104a8:	2b01      	cmp	r3, #1
 80104aa:	d14b      	bne.n	8010544 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	691b      	ldr	r3, [r3, #16]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d009      	beq.n	80104c8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80104b4:	69bb      	ldr	r3, [r7, #24]
 80104b6:	015a      	lsls	r2, r3, #5
 80104b8:	69fb      	ldr	r3, [r7, #28]
 80104ba:	4413      	add	r3, r2
 80104bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104c0:	461a      	mov	r2, r3
 80104c2:	68bb      	ldr	r3, [r7, #8]
 80104c4:	691b      	ldr	r3, [r3, #16]
 80104c6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	78db      	ldrb	r3, [r3, #3]
 80104cc:	2b01      	cmp	r3, #1
 80104ce:	d128      	bne.n	8010522 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80104d0:	69fb      	ldr	r3, [r7, #28]
 80104d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104d6:	689b      	ldr	r3, [r3, #8]
 80104d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d110      	bne.n	8010502 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80104e0:	69bb      	ldr	r3, [r7, #24]
 80104e2:	015a      	lsls	r2, r3, #5
 80104e4:	69fb      	ldr	r3, [r7, #28]
 80104e6:	4413      	add	r3, r2
 80104e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	69ba      	ldr	r2, [r7, #24]
 80104f0:	0151      	lsls	r1, r2, #5
 80104f2:	69fa      	ldr	r2, [r7, #28]
 80104f4:	440a      	add	r2, r1
 80104f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80104fe:	6013      	str	r3, [r2, #0]
 8010500:	e00f      	b.n	8010522 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010502:	69bb      	ldr	r3, [r7, #24]
 8010504:	015a      	lsls	r2, r3, #5
 8010506:	69fb      	ldr	r3, [r7, #28]
 8010508:	4413      	add	r3, r2
 801050a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	69ba      	ldr	r2, [r7, #24]
 8010512:	0151      	lsls	r1, r2, #5
 8010514:	69fa      	ldr	r2, [r7, #28]
 8010516:	440a      	add	r2, r1
 8010518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801051c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010520:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010522:	69bb      	ldr	r3, [r7, #24]
 8010524:	015a      	lsls	r2, r3, #5
 8010526:	69fb      	ldr	r3, [r7, #28]
 8010528:	4413      	add	r3, r2
 801052a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	69ba      	ldr	r2, [r7, #24]
 8010532:	0151      	lsls	r1, r2, #5
 8010534:	69fa      	ldr	r2, [r7, #28]
 8010536:	440a      	add	r2, r1
 8010538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801053c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010540:	6013      	str	r3, [r2, #0]
 8010542:	e12f      	b.n	80107a4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010544:	69bb      	ldr	r3, [r7, #24]
 8010546:	015a      	lsls	r2, r3, #5
 8010548:	69fb      	ldr	r3, [r7, #28]
 801054a:	4413      	add	r3, r2
 801054c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	69ba      	ldr	r2, [r7, #24]
 8010554:	0151      	lsls	r1, r2, #5
 8010556:	69fa      	ldr	r2, [r7, #28]
 8010558:	440a      	add	r2, r1
 801055a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801055e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010562:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	78db      	ldrb	r3, [r3, #3]
 8010568:	2b01      	cmp	r3, #1
 801056a:	d015      	beq.n	8010598 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	695b      	ldr	r3, [r3, #20]
 8010570:	2b00      	cmp	r3, #0
 8010572:	f000 8117 	beq.w	80107a4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010576:	69fb      	ldr	r3, [r7, #28]
 8010578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801057c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801057e:	68bb      	ldr	r3, [r7, #8]
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	f003 030f 	and.w	r3, r3, #15
 8010586:	2101      	movs	r1, #1
 8010588:	fa01 f303 	lsl.w	r3, r1, r3
 801058c:	69f9      	ldr	r1, [r7, #28]
 801058e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010592:	4313      	orrs	r3, r2
 8010594:	634b      	str	r3, [r1, #52]	; 0x34
 8010596:	e105      	b.n	80107a4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010598:	69fb      	ldr	r3, [r7, #28]
 801059a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801059e:	689b      	ldr	r3, [r3, #8]
 80105a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d110      	bne.n	80105ca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80105a8:	69bb      	ldr	r3, [r7, #24]
 80105aa:	015a      	lsls	r2, r3, #5
 80105ac:	69fb      	ldr	r3, [r7, #28]
 80105ae:	4413      	add	r3, r2
 80105b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	69ba      	ldr	r2, [r7, #24]
 80105b8:	0151      	lsls	r1, r2, #5
 80105ba:	69fa      	ldr	r2, [r7, #28]
 80105bc:	440a      	add	r2, r1
 80105be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80105c6:	6013      	str	r3, [r2, #0]
 80105c8:	e00f      	b.n	80105ea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80105ca:	69bb      	ldr	r3, [r7, #24]
 80105cc:	015a      	lsls	r2, r3, #5
 80105ce:	69fb      	ldr	r3, [r7, #28]
 80105d0:	4413      	add	r3, r2
 80105d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	69ba      	ldr	r2, [r7, #24]
 80105da:	0151      	lsls	r1, r2, #5
 80105dc:	69fa      	ldr	r2, [r7, #28]
 80105de:	440a      	add	r2, r1
 80105e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80105e8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	68d9      	ldr	r1, [r3, #12]
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	781a      	ldrb	r2, [r3, #0]
 80105f2:	68bb      	ldr	r3, [r7, #8]
 80105f4:	695b      	ldr	r3, [r3, #20]
 80105f6:	b298      	uxth	r0, r3
 80105f8:	79fb      	ldrb	r3, [r7, #7]
 80105fa:	9300      	str	r3, [sp, #0]
 80105fc:	4603      	mov	r3, r0
 80105fe:	68f8      	ldr	r0, [r7, #12]
 8010600:	f000 fa2b 	bl	8010a5a <USB_WritePacket>
 8010604:	e0ce      	b.n	80107a4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010606:	69bb      	ldr	r3, [r7, #24]
 8010608:	015a      	lsls	r2, r3, #5
 801060a:	69fb      	ldr	r3, [r7, #28]
 801060c:	4413      	add	r3, r2
 801060e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010612:	691b      	ldr	r3, [r3, #16]
 8010614:	69ba      	ldr	r2, [r7, #24]
 8010616:	0151      	lsls	r1, r2, #5
 8010618:	69fa      	ldr	r2, [r7, #28]
 801061a:	440a      	add	r2, r1
 801061c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010620:	0cdb      	lsrs	r3, r3, #19
 8010622:	04db      	lsls	r3, r3, #19
 8010624:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010626:	69bb      	ldr	r3, [r7, #24]
 8010628:	015a      	lsls	r2, r3, #5
 801062a:	69fb      	ldr	r3, [r7, #28]
 801062c:	4413      	add	r3, r2
 801062e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010632:	691b      	ldr	r3, [r3, #16]
 8010634:	69ba      	ldr	r2, [r7, #24]
 8010636:	0151      	lsls	r1, r2, #5
 8010638:	69fa      	ldr	r2, [r7, #28]
 801063a:	440a      	add	r2, r1
 801063c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010640:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010644:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010648:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	695b      	ldr	r3, [r3, #20]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d126      	bne.n	80106a0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010652:	69bb      	ldr	r3, [r7, #24]
 8010654:	015a      	lsls	r2, r3, #5
 8010656:	69fb      	ldr	r3, [r7, #28]
 8010658:	4413      	add	r3, r2
 801065a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801065e:	691a      	ldr	r2, [r3, #16]
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	689b      	ldr	r3, [r3, #8]
 8010664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010668:	69b9      	ldr	r1, [r7, #24]
 801066a:	0148      	lsls	r0, r1, #5
 801066c:	69f9      	ldr	r1, [r7, #28]
 801066e:	4401      	add	r1, r0
 8010670:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010674:	4313      	orrs	r3, r2
 8010676:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010678:	69bb      	ldr	r3, [r7, #24]
 801067a:	015a      	lsls	r2, r3, #5
 801067c:	69fb      	ldr	r3, [r7, #28]
 801067e:	4413      	add	r3, r2
 8010680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010684:	691b      	ldr	r3, [r3, #16]
 8010686:	69ba      	ldr	r2, [r7, #24]
 8010688:	0151      	lsls	r1, r2, #5
 801068a:	69fa      	ldr	r2, [r7, #28]
 801068c:	440a      	add	r2, r1
 801068e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010692:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010696:	6113      	str	r3, [r2, #16]
 8010698:	e036      	b.n	8010708 <USB_EPStartXfer+0x3dc>
 801069a:	bf00      	nop
 801069c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	695a      	ldr	r2, [r3, #20]
 80106a4:	68bb      	ldr	r3, [r7, #8]
 80106a6:	689b      	ldr	r3, [r3, #8]
 80106a8:	4413      	add	r3, r2
 80106aa:	1e5a      	subs	r2, r3, #1
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	689b      	ldr	r3, [r3, #8]
 80106b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80106b4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80106b6:	69bb      	ldr	r3, [r7, #24]
 80106b8:	015a      	lsls	r2, r3, #5
 80106ba:	69fb      	ldr	r3, [r7, #28]
 80106bc:	4413      	add	r3, r2
 80106be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106c2:	691a      	ldr	r2, [r3, #16]
 80106c4:	8afb      	ldrh	r3, [r7, #22]
 80106c6:	04d9      	lsls	r1, r3, #19
 80106c8:	4b39      	ldr	r3, [pc, #228]	; (80107b0 <USB_EPStartXfer+0x484>)
 80106ca:	400b      	ands	r3, r1
 80106cc:	69b9      	ldr	r1, [r7, #24]
 80106ce:	0148      	lsls	r0, r1, #5
 80106d0:	69f9      	ldr	r1, [r7, #28]
 80106d2:	4401      	add	r1, r0
 80106d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80106d8:	4313      	orrs	r3, r2
 80106da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80106dc:	69bb      	ldr	r3, [r7, #24]
 80106de:	015a      	lsls	r2, r3, #5
 80106e0:	69fb      	ldr	r3, [r7, #28]
 80106e2:	4413      	add	r3, r2
 80106e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106e8:	691a      	ldr	r2, [r3, #16]
 80106ea:	68bb      	ldr	r3, [r7, #8]
 80106ec:	689b      	ldr	r3, [r3, #8]
 80106ee:	8af9      	ldrh	r1, [r7, #22]
 80106f0:	fb01 f303 	mul.w	r3, r1, r3
 80106f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80106f8:	69b9      	ldr	r1, [r7, #24]
 80106fa:	0148      	lsls	r0, r1, #5
 80106fc:	69f9      	ldr	r1, [r7, #28]
 80106fe:	4401      	add	r1, r0
 8010700:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010704:	4313      	orrs	r3, r2
 8010706:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010708:	79fb      	ldrb	r3, [r7, #7]
 801070a:	2b01      	cmp	r3, #1
 801070c:	d10d      	bne.n	801072a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	68db      	ldr	r3, [r3, #12]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d009      	beq.n	801072a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	68d9      	ldr	r1, [r3, #12]
 801071a:	69bb      	ldr	r3, [r7, #24]
 801071c:	015a      	lsls	r2, r3, #5
 801071e:	69fb      	ldr	r3, [r7, #28]
 8010720:	4413      	add	r3, r2
 8010722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010726:	460a      	mov	r2, r1
 8010728:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	78db      	ldrb	r3, [r3, #3]
 801072e:	2b01      	cmp	r3, #1
 8010730:	d128      	bne.n	8010784 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010732:	69fb      	ldr	r3, [r7, #28]
 8010734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010738:	689b      	ldr	r3, [r3, #8]
 801073a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801073e:	2b00      	cmp	r3, #0
 8010740:	d110      	bne.n	8010764 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010742:	69bb      	ldr	r3, [r7, #24]
 8010744:	015a      	lsls	r2, r3, #5
 8010746:	69fb      	ldr	r3, [r7, #28]
 8010748:	4413      	add	r3, r2
 801074a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	69ba      	ldr	r2, [r7, #24]
 8010752:	0151      	lsls	r1, r2, #5
 8010754:	69fa      	ldr	r2, [r7, #28]
 8010756:	440a      	add	r2, r1
 8010758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801075c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010760:	6013      	str	r3, [r2, #0]
 8010762:	e00f      	b.n	8010784 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010764:	69bb      	ldr	r3, [r7, #24]
 8010766:	015a      	lsls	r2, r3, #5
 8010768:	69fb      	ldr	r3, [r7, #28]
 801076a:	4413      	add	r3, r2
 801076c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	69ba      	ldr	r2, [r7, #24]
 8010774:	0151      	lsls	r1, r2, #5
 8010776:	69fa      	ldr	r2, [r7, #28]
 8010778:	440a      	add	r2, r1
 801077a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801077e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010782:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010784:	69bb      	ldr	r3, [r7, #24]
 8010786:	015a      	lsls	r2, r3, #5
 8010788:	69fb      	ldr	r3, [r7, #28]
 801078a:	4413      	add	r3, r2
 801078c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	69ba      	ldr	r2, [r7, #24]
 8010794:	0151      	lsls	r1, r2, #5
 8010796:	69fa      	ldr	r2, [r7, #28]
 8010798:	440a      	add	r2, r1
 801079a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801079e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80107a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80107a4:	2300      	movs	r3, #0
}
 80107a6:	4618      	mov	r0, r3
 80107a8:	3720      	adds	r7, #32
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd80      	pop	{r7, pc}
 80107ae:	bf00      	nop
 80107b0:	1ff80000 	.word	0x1ff80000

080107b4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80107b4:	b480      	push	{r7}
 80107b6:	b087      	sub	sp, #28
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	60f8      	str	r0, [r7, #12]
 80107bc:	60b9      	str	r1, [r7, #8]
 80107be:	4613      	mov	r3, r2
 80107c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	781b      	ldrb	r3, [r3, #0]
 80107ca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	785b      	ldrb	r3, [r3, #1]
 80107d0:	2b01      	cmp	r3, #1
 80107d2:	f040 80cd 	bne.w	8010970 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80107d6:	68bb      	ldr	r3, [r7, #8]
 80107d8:	695b      	ldr	r3, [r3, #20]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d132      	bne.n	8010844 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80107de:	693b      	ldr	r3, [r7, #16]
 80107e0:	015a      	lsls	r2, r3, #5
 80107e2:	697b      	ldr	r3, [r7, #20]
 80107e4:	4413      	add	r3, r2
 80107e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107ea:	691b      	ldr	r3, [r3, #16]
 80107ec:	693a      	ldr	r2, [r7, #16]
 80107ee:	0151      	lsls	r1, r2, #5
 80107f0:	697a      	ldr	r2, [r7, #20]
 80107f2:	440a      	add	r2, r1
 80107f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80107fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010800:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010802:	693b      	ldr	r3, [r7, #16]
 8010804:	015a      	lsls	r2, r3, #5
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	4413      	add	r3, r2
 801080a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801080e:	691b      	ldr	r3, [r3, #16]
 8010810:	693a      	ldr	r2, [r7, #16]
 8010812:	0151      	lsls	r1, r2, #5
 8010814:	697a      	ldr	r2, [r7, #20]
 8010816:	440a      	add	r2, r1
 8010818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801081c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010820:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010822:	693b      	ldr	r3, [r7, #16]
 8010824:	015a      	lsls	r2, r3, #5
 8010826:	697b      	ldr	r3, [r7, #20]
 8010828:	4413      	add	r3, r2
 801082a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801082e:	691b      	ldr	r3, [r3, #16]
 8010830:	693a      	ldr	r2, [r7, #16]
 8010832:	0151      	lsls	r1, r2, #5
 8010834:	697a      	ldr	r2, [r7, #20]
 8010836:	440a      	add	r2, r1
 8010838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801083c:	0cdb      	lsrs	r3, r3, #19
 801083e:	04db      	lsls	r3, r3, #19
 8010840:	6113      	str	r3, [r2, #16]
 8010842:	e04e      	b.n	80108e2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010844:	693b      	ldr	r3, [r7, #16]
 8010846:	015a      	lsls	r2, r3, #5
 8010848:	697b      	ldr	r3, [r7, #20]
 801084a:	4413      	add	r3, r2
 801084c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010850:	691b      	ldr	r3, [r3, #16]
 8010852:	693a      	ldr	r2, [r7, #16]
 8010854:	0151      	lsls	r1, r2, #5
 8010856:	697a      	ldr	r2, [r7, #20]
 8010858:	440a      	add	r2, r1
 801085a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801085e:	0cdb      	lsrs	r3, r3, #19
 8010860:	04db      	lsls	r3, r3, #19
 8010862:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010864:	693b      	ldr	r3, [r7, #16]
 8010866:	015a      	lsls	r2, r3, #5
 8010868:	697b      	ldr	r3, [r7, #20]
 801086a:	4413      	add	r3, r2
 801086c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010870:	691b      	ldr	r3, [r3, #16]
 8010872:	693a      	ldr	r2, [r7, #16]
 8010874:	0151      	lsls	r1, r2, #5
 8010876:	697a      	ldr	r2, [r7, #20]
 8010878:	440a      	add	r2, r1
 801087a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801087e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010882:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010886:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	695a      	ldr	r2, [r3, #20]
 801088c:	68bb      	ldr	r3, [r7, #8]
 801088e:	689b      	ldr	r3, [r3, #8]
 8010890:	429a      	cmp	r2, r3
 8010892:	d903      	bls.n	801089c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	689a      	ldr	r2, [r3, #8]
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801089c:	693b      	ldr	r3, [r7, #16]
 801089e:	015a      	lsls	r2, r3, #5
 80108a0:	697b      	ldr	r3, [r7, #20]
 80108a2:	4413      	add	r3, r2
 80108a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108a8:	691b      	ldr	r3, [r3, #16]
 80108aa:	693a      	ldr	r2, [r7, #16]
 80108ac:	0151      	lsls	r1, r2, #5
 80108ae:	697a      	ldr	r2, [r7, #20]
 80108b0:	440a      	add	r2, r1
 80108b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80108ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	015a      	lsls	r2, r3, #5
 80108c0:	697b      	ldr	r3, [r7, #20]
 80108c2:	4413      	add	r3, r2
 80108c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108c8:	691a      	ldr	r2, [r3, #16]
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	695b      	ldr	r3, [r3, #20]
 80108ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80108d2:	6939      	ldr	r1, [r7, #16]
 80108d4:	0148      	lsls	r0, r1, #5
 80108d6:	6979      	ldr	r1, [r7, #20]
 80108d8:	4401      	add	r1, r0
 80108da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80108de:	4313      	orrs	r3, r2
 80108e0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80108e2:	79fb      	ldrb	r3, [r7, #7]
 80108e4:	2b01      	cmp	r3, #1
 80108e6:	d11e      	bne.n	8010926 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	691b      	ldr	r3, [r3, #16]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d009      	beq.n	8010904 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80108f0:	693b      	ldr	r3, [r7, #16]
 80108f2:	015a      	lsls	r2, r3, #5
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	4413      	add	r3, r2
 80108f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108fc:	461a      	mov	r2, r3
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	691b      	ldr	r3, [r3, #16]
 8010902:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010904:	693b      	ldr	r3, [r7, #16]
 8010906:	015a      	lsls	r2, r3, #5
 8010908:	697b      	ldr	r3, [r7, #20]
 801090a:	4413      	add	r3, r2
 801090c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	693a      	ldr	r2, [r7, #16]
 8010914:	0151      	lsls	r1, r2, #5
 8010916:	697a      	ldr	r2, [r7, #20]
 8010918:	440a      	add	r2, r1
 801091a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801091e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010922:	6013      	str	r3, [r2, #0]
 8010924:	e092      	b.n	8010a4c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010926:	693b      	ldr	r3, [r7, #16]
 8010928:	015a      	lsls	r2, r3, #5
 801092a:	697b      	ldr	r3, [r7, #20]
 801092c:	4413      	add	r3, r2
 801092e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	693a      	ldr	r2, [r7, #16]
 8010936:	0151      	lsls	r1, r2, #5
 8010938:	697a      	ldr	r2, [r7, #20]
 801093a:	440a      	add	r2, r1
 801093c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010940:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010944:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	695b      	ldr	r3, [r3, #20]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d07e      	beq.n	8010a4c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801094e:	697b      	ldr	r3, [r7, #20]
 8010950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010956:	68bb      	ldr	r3, [r7, #8]
 8010958:	781b      	ldrb	r3, [r3, #0]
 801095a:	f003 030f 	and.w	r3, r3, #15
 801095e:	2101      	movs	r1, #1
 8010960:	fa01 f303 	lsl.w	r3, r1, r3
 8010964:	6979      	ldr	r1, [r7, #20]
 8010966:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801096a:	4313      	orrs	r3, r2
 801096c:	634b      	str	r3, [r1, #52]	; 0x34
 801096e:	e06d      	b.n	8010a4c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010970:	693b      	ldr	r3, [r7, #16]
 8010972:	015a      	lsls	r2, r3, #5
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	4413      	add	r3, r2
 8010978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801097c:	691b      	ldr	r3, [r3, #16]
 801097e:	693a      	ldr	r2, [r7, #16]
 8010980:	0151      	lsls	r1, r2, #5
 8010982:	697a      	ldr	r2, [r7, #20]
 8010984:	440a      	add	r2, r1
 8010986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801098a:	0cdb      	lsrs	r3, r3, #19
 801098c:	04db      	lsls	r3, r3, #19
 801098e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010990:	693b      	ldr	r3, [r7, #16]
 8010992:	015a      	lsls	r2, r3, #5
 8010994:	697b      	ldr	r3, [r7, #20]
 8010996:	4413      	add	r3, r2
 8010998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801099c:	691b      	ldr	r3, [r3, #16]
 801099e:	693a      	ldr	r2, [r7, #16]
 80109a0:	0151      	lsls	r1, r2, #5
 80109a2:	697a      	ldr	r2, [r7, #20]
 80109a4:	440a      	add	r2, r1
 80109a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80109aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80109ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80109b2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80109b4:	68bb      	ldr	r3, [r7, #8]
 80109b6:	695b      	ldr	r3, [r3, #20]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d003      	beq.n	80109c4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	689a      	ldr	r2, [r3, #8]
 80109c0:	68bb      	ldr	r3, [r7, #8]
 80109c2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80109c4:	693b      	ldr	r3, [r7, #16]
 80109c6:	015a      	lsls	r2, r3, #5
 80109c8:	697b      	ldr	r3, [r7, #20]
 80109ca:	4413      	add	r3, r2
 80109cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109d0:	691b      	ldr	r3, [r3, #16]
 80109d2:	693a      	ldr	r2, [r7, #16]
 80109d4:	0151      	lsls	r1, r2, #5
 80109d6:	697a      	ldr	r2, [r7, #20]
 80109d8:	440a      	add	r2, r1
 80109da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80109de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80109e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80109e4:	693b      	ldr	r3, [r7, #16]
 80109e6:	015a      	lsls	r2, r3, #5
 80109e8:	697b      	ldr	r3, [r7, #20]
 80109ea:	4413      	add	r3, r2
 80109ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109f0:	691a      	ldr	r2, [r3, #16]
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	689b      	ldr	r3, [r3, #8]
 80109f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80109fa:	6939      	ldr	r1, [r7, #16]
 80109fc:	0148      	lsls	r0, r1, #5
 80109fe:	6979      	ldr	r1, [r7, #20]
 8010a00:	4401      	add	r1, r0
 8010a02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010a06:	4313      	orrs	r3, r2
 8010a08:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010a0a:	79fb      	ldrb	r3, [r7, #7]
 8010a0c:	2b01      	cmp	r3, #1
 8010a0e:	d10d      	bne.n	8010a2c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010a10:	68bb      	ldr	r3, [r7, #8]
 8010a12:	68db      	ldr	r3, [r3, #12]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d009      	beq.n	8010a2c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010a18:	68bb      	ldr	r3, [r7, #8]
 8010a1a:	68d9      	ldr	r1, [r3, #12]
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	015a      	lsls	r2, r3, #5
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	4413      	add	r3, r2
 8010a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a28:	460a      	mov	r2, r1
 8010a2a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010a2c:	693b      	ldr	r3, [r7, #16]
 8010a2e:	015a      	lsls	r2, r3, #5
 8010a30:	697b      	ldr	r3, [r7, #20]
 8010a32:	4413      	add	r3, r2
 8010a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	693a      	ldr	r2, [r7, #16]
 8010a3c:	0151      	lsls	r1, r2, #5
 8010a3e:	697a      	ldr	r2, [r7, #20]
 8010a40:	440a      	add	r2, r1
 8010a42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010a4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010a4c:	2300      	movs	r3, #0
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	371c      	adds	r7, #28
 8010a52:	46bd      	mov	sp, r7
 8010a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a58:	4770      	bx	lr

08010a5a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010a5a:	b480      	push	{r7}
 8010a5c:	b089      	sub	sp, #36	; 0x24
 8010a5e:	af00      	add	r7, sp, #0
 8010a60:	60f8      	str	r0, [r7, #12]
 8010a62:	60b9      	str	r1, [r7, #8]
 8010a64:	4611      	mov	r1, r2
 8010a66:	461a      	mov	r2, r3
 8010a68:	460b      	mov	r3, r1
 8010a6a:	71fb      	strb	r3, [r7, #7]
 8010a6c:	4613      	mov	r3, r2
 8010a6e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8010a78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d11a      	bne.n	8010ab6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010a80:	88bb      	ldrh	r3, [r7, #4]
 8010a82:	3303      	adds	r3, #3
 8010a84:	089b      	lsrs	r3, r3, #2
 8010a86:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010a88:	2300      	movs	r3, #0
 8010a8a:	61bb      	str	r3, [r7, #24]
 8010a8c:	e00f      	b.n	8010aae <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010a8e:	79fb      	ldrb	r3, [r7, #7]
 8010a90:	031a      	lsls	r2, r3, #12
 8010a92:	697b      	ldr	r3, [r7, #20]
 8010a94:	4413      	add	r3, r2
 8010a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a9a:	461a      	mov	r2, r3
 8010a9c:	69fb      	ldr	r3, [r7, #28]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010aa2:	69fb      	ldr	r3, [r7, #28]
 8010aa4:	3304      	adds	r3, #4
 8010aa6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010aa8:	69bb      	ldr	r3, [r7, #24]
 8010aaa:	3301      	adds	r3, #1
 8010aac:	61bb      	str	r3, [r7, #24]
 8010aae:	69ba      	ldr	r2, [r7, #24]
 8010ab0:	693b      	ldr	r3, [r7, #16]
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	d3eb      	bcc.n	8010a8e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010ab6:	2300      	movs	r3, #0
}
 8010ab8:	4618      	mov	r0, r3
 8010aba:	3724      	adds	r7, #36	; 0x24
 8010abc:	46bd      	mov	sp, r7
 8010abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac2:	4770      	bx	lr

08010ac4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010ac4:	b480      	push	{r7}
 8010ac6:	b089      	sub	sp, #36	; 0x24
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	60f8      	str	r0, [r7, #12]
 8010acc:	60b9      	str	r1, [r7, #8]
 8010ace:	4613      	mov	r3, r2
 8010ad0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8010ada:	88fb      	ldrh	r3, [r7, #6]
 8010adc:	3303      	adds	r3, #3
 8010ade:	089b      	lsrs	r3, r3, #2
 8010ae0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	61bb      	str	r3, [r7, #24]
 8010ae6:	e00b      	b.n	8010b00 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010aee:	681a      	ldr	r2, [r3, #0]
 8010af0:	69fb      	ldr	r3, [r7, #28]
 8010af2:	601a      	str	r2, [r3, #0]
    pDest++;
 8010af4:	69fb      	ldr	r3, [r7, #28]
 8010af6:	3304      	adds	r3, #4
 8010af8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8010afa:	69bb      	ldr	r3, [r7, #24]
 8010afc:	3301      	adds	r3, #1
 8010afe:	61bb      	str	r3, [r7, #24]
 8010b00:	69ba      	ldr	r2, [r7, #24]
 8010b02:	693b      	ldr	r3, [r7, #16]
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d3ef      	bcc.n	8010ae8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8010b08:	69fb      	ldr	r3, [r7, #28]
}
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	3724      	adds	r7, #36	; 0x24
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b14:	4770      	bx	lr

08010b16 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010b16:	b480      	push	{r7}
 8010b18:	b085      	sub	sp, #20
 8010b1a:	af00      	add	r7, sp, #0
 8010b1c:	6078      	str	r0, [r7, #4]
 8010b1e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	781b      	ldrb	r3, [r3, #0]
 8010b28:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	785b      	ldrb	r3, [r3, #1]
 8010b2e:	2b01      	cmp	r3, #1
 8010b30:	d12c      	bne.n	8010b8c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	015a      	lsls	r2, r3, #5
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	4413      	add	r3, r2
 8010b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	db12      	blt.n	8010b6a <USB_EPSetStall+0x54>
 8010b44:	68bb      	ldr	r3, [r7, #8]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d00f      	beq.n	8010b6a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010b4a:	68bb      	ldr	r3, [r7, #8]
 8010b4c:	015a      	lsls	r2, r3, #5
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	4413      	add	r3, r2
 8010b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	68ba      	ldr	r2, [r7, #8]
 8010b5a:	0151      	lsls	r1, r2, #5
 8010b5c:	68fa      	ldr	r2, [r7, #12]
 8010b5e:	440a      	add	r2, r1
 8010b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010b68:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010b6a:	68bb      	ldr	r3, [r7, #8]
 8010b6c:	015a      	lsls	r2, r3, #5
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	4413      	add	r3, r2
 8010b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	68ba      	ldr	r2, [r7, #8]
 8010b7a:	0151      	lsls	r1, r2, #5
 8010b7c:	68fa      	ldr	r2, [r7, #12]
 8010b7e:	440a      	add	r2, r1
 8010b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010b88:	6013      	str	r3, [r2, #0]
 8010b8a:	e02b      	b.n	8010be4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	015a      	lsls	r2, r3, #5
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	4413      	add	r3, r2
 8010b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	db12      	blt.n	8010bc4 <USB_EPSetStall+0xae>
 8010b9e:	68bb      	ldr	r3, [r7, #8]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d00f      	beq.n	8010bc4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	015a      	lsls	r2, r3, #5
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	4413      	add	r3, r2
 8010bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	68ba      	ldr	r2, [r7, #8]
 8010bb4:	0151      	lsls	r1, r2, #5
 8010bb6:	68fa      	ldr	r2, [r7, #12]
 8010bb8:	440a      	add	r2, r1
 8010bba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010bc2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	015a      	lsls	r2, r3, #5
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	4413      	add	r3, r2
 8010bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	68ba      	ldr	r2, [r7, #8]
 8010bd4:	0151      	lsls	r1, r2, #5
 8010bd6:	68fa      	ldr	r2, [r7, #12]
 8010bd8:	440a      	add	r2, r1
 8010bda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010be2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010be4:	2300      	movs	r3, #0
}
 8010be6:	4618      	mov	r0, r3
 8010be8:	3714      	adds	r7, #20
 8010bea:	46bd      	mov	sp, r7
 8010bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf0:	4770      	bx	lr

08010bf2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010bf2:	b480      	push	{r7}
 8010bf4:	b085      	sub	sp, #20
 8010bf6:	af00      	add	r7, sp, #0
 8010bf8:	6078      	str	r0, [r7, #4]
 8010bfa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	781b      	ldrb	r3, [r3, #0]
 8010c04:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010c06:	683b      	ldr	r3, [r7, #0]
 8010c08:	785b      	ldrb	r3, [r3, #1]
 8010c0a:	2b01      	cmp	r3, #1
 8010c0c:	d128      	bne.n	8010c60 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	015a      	lsls	r2, r3, #5
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	4413      	add	r3, r2
 8010c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	68ba      	ldr	r2, [r7, #8]
 8010c1e:	0151      	lsls	r1, r2, #5
 8010c20:	68fa      	ldr	r2, [r7, #12]
 8010c22:	440a      	add	r2, r1
 8010c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010c2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	78db      	ldrb	r3, [r3, #3]
 8010c32:	2b03      	cmp	r3, #3
 8010c34:	d003      	beq.n	8010c3e <USB_EPClearStall+0x4c>
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	78db      	ldrb	r3, [r3, #3]
 8010c3a:	2b02      	cmp	r3, #2
 8010c3c:	d138      	bne.n	8010cb0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010c3e:	68bb      	ldr	r3, [r7, #8]
 8010c40:	015a      	lsls	r2, r3, #5
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	4413      	add	r3, r2
 8010c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	68ba      	ldr	r2, [r7, #8]
 8010c4e:	0151      	lsls	r1, r2, #5
 8010c50:	68fa      	ldr	r2, [r7, #12]
 8010c52:	440a      	add	r2, r1
 8010c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010c5c:	6013      	str	r3, [r2, #0]
 8010c5e:	e027      	b.n	8010cb0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	015a      	lsls	r2, r3, #5
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	4413      	add	r3, r2
 8010c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	68ba      	ldr	r2, [r7, #8]
 8010c70:	0151      	lsls	r1, r2, #5
 8010c72:	68fa      	ldr	r2, [r7, #12]
 8010c74:	440a      	add	r2, r1
 8010c76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010c7e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	78db      	ldrb	r3, [r3, #3]
 8010c84:	2b03      	cmp	r3, #3
 8010c86:	d003      	beq.n	8010c90 <USB_EPClearStall+0x9e>
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	78db      	ldrb	r3, [r3, #3]
 8010c8c:	2b02      	cmp	r3, #2
 8010c8e:	d10f      	bne.n	8010cb0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	015a      	lsls	r2, r3, #5
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	4413      	add	r3, r2
 8010c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	68ba      	ldr	r2, [r7, #8]
 8010ca0:	0151      	lsls	r1, r2, #5
 8010ca2:	68fa      	ldr	r2, [r7, #12]
 8010ca4:	440a      	add	r2, r1
 8010ca6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010cae:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010cb0:	2300      	movs	r3, #0
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3714      	adds	r7, #20
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cbc:	4770      	bx	lr

08010cbe <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010cbe:	b480      	push	{r7}
 8010cc0:	b085      	sub	sp, #20
 8010cc2:	af00      	add	r7, sp, #0
 8010cc4:	6078      	str	r0, [r7, #4]
 8010cc6:	460b      	mov	r3, r1
 8010cc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	68fa      	ldr	r2, [r7, #12]
 8010cd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010cdc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010ce0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ce8:	681a      	ldr	r2, [r3, #0]
 8010cea:	78fb      	ldrb	r3, [r7, #3]
 8010cec:	011b      	lsls	r3, r3, #4
 8010cee:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010cf2:	68f9      	ldr	r1, [r7, #12]
 8010cf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010cf8:	4313      	orrs	r3, r2
 8010cfa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010cfc:	2300      	movs	r3, #0
}
 8010cfe:	4618      	mov	r0, r3
 8010d00:	3714      	adds	r7, #20
 8010d02:	46bd      	mov	sp, r7
 8010d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d08:	4770      	bx	lr

08010d0a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010d0a:	b480      	push	{r7}
 8010d0c:	b085      	sub	sp, #20
 8010d0e:	af00      	add	r7, sp, #0
 8010d10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	68fa      	ldr	r2, [r7, #12]
 8010d20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010d24:	f023 0303 	bic.w	r3, r3, #3
 8010d28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d30:	685b      	ldr	r3, [r3, #4]
 8010d32:	68fa      	ldr	r2, [r7, #12]
 8010d34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010d38:	f023 0302 	bic.w	r3, r3, #2
 8010d3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010d3e:	2300      	movs	r3, #0
}
 8010d40:	4618      	mov	r0, r3
 8010d42:	3714      	adds	r7, #20
 8010d44:	46bd      	mov	sp, r7
 8010d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4a:	4770      	bx	lr

08010d4c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010d4c:	b480      	push	{r7}
 8010d4e:	b085      	sub	sp, #20
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	68fa      	ldr	r2, [r7, #12]
 8010d62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010d66:	f023 0303 	bic.w	r3, r3, #3
 8010d6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d72:	685b      	ldr	r3, [r3, #4]
 8010d74:	68fa      	ldr	r2, [r7, #12]
 8010d76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010d7a:	f043 0302 	orr.w	r3, r3, #2
 8010d7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010d80:	2300      	movs	r3, #0
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3714      	adds	r7, #20
 8010d86:	46bd      	mov	sp, r7
 8010d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8c:	4770      	bx	lr

08010d8e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010d8e:	b480      	push	{r7}
 8010d90:	b085      	sub	sp, #20
 8010d92:	af00      	add	r7, sp, #0
 8010d94:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	695b      	ldr	r3, [r3, #20]
 8010d9a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	699b      	ldr	r3, [r3, #24]
 8010da0:	68fa      	ldr	r2, [r7, #12]
 8010da2:	4013      	ands	r3, r2
 8010da4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010da6:	68fb      	ldr	r3, [r7, #12]
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	3714      	adds	r7, #20
 8010dac:	46bd      	mov	sp, r7
 8010dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db2:	4770      	bx	lr

08010db4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010db4:	b480      	push	{r7}
 8010db6:	b085      	sub	sp, #20
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010dc6:	699b      	ldr	r3, [r3, #24]
 8010dc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010dd0:	69db      	ldr	r3, [r3, #28]
 8010dd2:	68ba      	ldr	r2, [r7, #8]
 8010dd4:	4013      	ands	r3, r2
 8010dd6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	0c1b      	lsrs	r3, r3, #16
}
 8010ddc:	4618      	mov	r0, r3
 8010dde:	3714      	adds	r7, #20
 8010de0:	46bd      	mov	sp, r7
 8010de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de6:	4770      	bx	lr

08010de8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010de8:	b480      	push	{r7}
 8010dea:	b085      	sub	sp, #20
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010dfa:	699b      	ldr	r3, [r3, #24]
 8010dfc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e04:	69db      	ldr	r3, [r3, #28]
 8010e06:	68ba      	ldr	r2, [r7, #8]
 8010e08:	4013      	ands	r3, r2
 8010e0a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010e0c:	68bb      	ldr	r3, [r7, #8]
 8010e0e:	b29b      	uxth	r3, r3
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3714      	adds	r7, #20
 8010e14:	46bd      	mov	sp, r7
 8010e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1a:	4770      	bx	lr

08010e1c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010e1c:	b480      	push	{r7}
 8010e1e:	b085      	sub	sp, #20
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
 8010e24:	460b      	mov	r3, r1
 8010e26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010e2c:	78fb      	ldrb	r3, [r7, #3]
 8010e2e:	015a      	lsls	r2, r3, #5
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	4413      	add	r3, r2
 8010e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e38:	689b      	ldr	r3, [r3, #8]
 8010e3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e42:	695b      	ldr	r3, [r3, #20]
 8010e44:	68ba      	ldr	r2, [r7, #8]
 8010e46:	4013      	ands	r3, r2
 8010e48:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010e4a:	68bb      	ldr	r3, [r7, #8]
}
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	3714      	adds	r7, #20
 8010e50:	46bd      	mov	sp, r7
 8010e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e56:	4770      	bx	lr

08010e58 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010e58:	b480      	push	{r7}
 8010e5a:	b087      	sub	sp, #28
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
 8010e60:	460b      	mov	r3, r1
 8010e62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010e68:	697b      	ldr	r3, [r7, #20]
 8010e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e6e:	691b      	ldr	r3, [r3, #16]
 8010e70:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010e72:	697b      	ldr	r3, [r7, #20]
 8010e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e7a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010e7c:	78fb      	ldrb	r3, [r7, #3]
 8010e7e:	f003 030f 	and.w	r3, r3, #15
 8010e82:	68fa      	ldr	r2, [r7, #12]
 8010e84:	fa22 f303 	lsr.w	r3, r2, r3
 8010e88:	01db      	lsls	r3, r3, #7
 8010e8a:	b2db      	uxtb	r3, r3
 8010e8c:	693a      	ldr	r2, [r7, #16]
 8010e8e:	4313      	orrs	r3, r2
 8010e90:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010e92:	78fb      	ldrb	r3, [r7, #3]
 8010e94:	015a      	lsls	r2, r3, #5
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	4413      	add	r3, r2
 8010e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e9e:	689b      	ldr	r3, [r3, #8]
 8010ea0:	693a      	ldr	r2, [r7, #16]
 8010ea2:	4013      	ands	r3, r2
 8010ea4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010ea6:	68bb      	ldr	r3, [r7, #8]
}
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	371c      	adds	r7, #28
 8010eac:	46bd      	mov	sp, r7
 8010eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb2:	4770      	bx	lr

08010eb4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010eb4:	b480      	push	{r7}
 8010eb6:	b083      	sub	sp, #12
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	695b      	ldr	r3, [r3, #20]
 8010ec0:	f003 0301 	and.w	r3, r3, #1
}
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	370c      	adds	r7, #12
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ece:	4770      	bx	lr

08010ed0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010ed0:	b480      	push	{r7}
 8010ed2:	b085      	sub	sp, #20
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	68fa      	ldr	r2, [r7, #12]
 8010ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010eea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010eee:	f023 0307 	bic.w	r3, r3, #7
 8010ef2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010efa:	685b      	ldr	r3, [r3, #4]
 8010efc:	68fa      	ldr	r2, [r7, #12]
 8010efe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010f06:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010f08:	2300      	movs	r3, #0
}
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	3714      	adds	r7, #20
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f14:	4770      	bx	lr
	...

08010f18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010f18:	b480      	push	{r7}
 8010f1a:	b087      	sub	sp, #28
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	60f8      	str	r0, [r7, #12]
 8010f20:	460b      	mov	r3, r1
 8010f22:	607a      	str	r2, [r7, #4]
 8010f24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	333c      	adds	r3, #60	; 0x3c
 8010f2e:	3304      	adds	r3, #4
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010f34:	693b      	ldr	r3, [r7, #16]
 8010f36:	4a26      	ldr	r2, [pc, #152]	; (8010fd0 <USB_EP0_OutStart+0xb8>)
 8010f38:	4293      	cmp	r3, r2
 8010f3a:	d90a      	bls.n	8010f52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010f3c:	697b      	ldr	r3, [r7, #20]
 8010f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010f48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f4c:	d101      	bne.n	8010f52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	e037      	b.n	8010fc2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f58:	461a      	mov	r2, r3
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010f5e:	697b      	ldr	r3, [r7, #20]
 8010f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f64:	691b      	ldr	r3, [r3, #16]
 8010f66:	697a      	ldr	r2, [r7, #20]
 8010f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010f6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010f70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f78:	691b      	ldr	r3, [r3, #16]
 8010f7a:	697a      	ldr	r2, [r7, #20]
 8010f7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010f80:	f043 0318 	orr.w	r3, r3, #24
 8010f84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010f86:	697b      	ldr	r3, [r7, #20]
 8010f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f8c:	691b      	ldr	r3, [r3, #16]
 8010f8e:	697a      	ldr	r2, [r7, #20]
 8010f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010f94:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010f98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010f9a:	7afb      	ldrb	r3, [r7, #11]
 8010f9c:	2b01      	cmp	r3, #1
 8010f9e:	d10f      	bne.n	8010fc0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010fa0:	697b      	ldr	r3, [r7, #20]
 8010fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fa6:	461a      	mov	r2, r3
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010fac:	697b      	ldr	r3, [r7, #20]
 8010fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	697a      	ldr	r2, [r7, #20]
 8010fb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010fba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010fbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010fc0:	2300      	movs	r3, #0
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	371c      	adds	r7, #28
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fcc:	4770      	bx	lr
 8010fce:	bf00      	nop
 8010fd0:	4f54300a 	.word	0x4f54300a

08010fd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b085      	sub	sp, #20
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010fdc:	2300      	movs	r3, #0
 8010fde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	3301      	adds	r3, #1
 8010fe4:	60fb      	str	r3, [r7, #12]
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	4a13      	ldr	r2, [pc, #76]	; (8011038 <USB_CoreReset+0x64>)
 8010fea:	4293      	cmp	r3, r2
 8010fec:	d901      	bls.n	8010ff2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010fee:	2303      	movs	r3, #3
 8010ff0:	e01b      	b.n	801102a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	691b      	ldr	r3, [r3, #16]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	daf2      	bge.n	8010fe0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	691b      	ldr	r3, [r3, #16]
 8011002:	f043 0201 	orr.w	r2, r3, #1
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	3301      	adds	r3, #1
 801100e:	60fb      	str	r3, [r7, #12]
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	4a09      	ldr	r2, [pc, #36]	; (8011038 <USB_CoreReset+0x64>)
 8011014:	4293      	cmp	r3, r2
 8011016:	d901      	bls.n	801101c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011018:	2303      	movs	r3, #3
 801101a:	e006      	b.n	801102a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	691b      	ldr	r3, [r3, #16]
 8011020:	f003 0301 	and.w	r3, r3, #1
 8011024:	2b01      	cmp	r3, #1
 8011026:	d0f0      	beq.n	801100a <USB_CoreReset+0x36>

  return HAL_OK;
 8011028:	2300      	movs	r3, #0
}
 801102a:	4618      	mov	r0, r3
 801102c:	3714      	adds	r7, #20
 801102e:	46bd      	mov	sp, r7
 8011030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011034:	4770      	bx	lr
 8011036:	bf00      	nop
 8011038:	00030d40 	.word	0x00030d40

0801103c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b084      	sub	sp, #16
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
 8011044:	460b      	mov	r3, r1
 8011046:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011048:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801104c:	f005 f820 	bl	8016090 <malloc>
 8011050:	4603      	mov	r3, r0
 8011052:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d105      	bne.n	8011066 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	2200      	movs	r2, #0
 801105e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8011062:	2302      	movs	r3, #2
 8011064:	e066      	b.n	8011134 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	68fa      	ldr	r2, [r7, #12]
 801106a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	7c1b      	ldrb	r3, [r3, #16]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d119      	bne.n	80110aa <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011076:	f44f 7300 	mov.w	r3, #512	; 0x200
 801107a:	2202      	movs	r2, #2
 801107c:	2181      	movs	r1, #129	; 0x81
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f004 fe8d 	bl	8015d9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2201      	movs	r2, #1
 8011088:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801108a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801108e:	2202      	movs	r2, #2
 8011090:	2101      	movs	r1, #1
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f004 fe83 	bl	8015d9e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2201      	movs	r2, #1
 801109c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	2210      	movs	r2, #16
 80110a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80110a8:	e016      	b.n	80110d8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80110aa:	2340      	movs	r3, #64	; 0x40
 80110ac:	2202      	movs	r2, #2
 80110ae:	2181      	movs	r1, #129	; 0x81
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f004 fe74 	bl	8015d9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	2201      	movs	r2, #1
 80110ba:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80110bc:	2340      	movs	r3, #64	; 0x40
 80110be:	2202      	movs	r2, #2
 80110c0:	2101      	movs	r1, #1
 80110c2:	6878      	ldr	r0, [r7, #4]
 80110c4:	f004 fe6b 	bl	8015d9e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2201      	movs	r2, #1
 80110cc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2210      	movs	r2, #16
 80110d4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80110d8:	2308      	movs	r3, #8
 80110da:	2203      	movs	r2, #3
 80110dc:	2182      	movs	r1, #130	; 0x82
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f004 fe5d 	bl	8015d9e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2201      	movs	r2, #1
 80110e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	2200      	movs	r2, #0
 80110fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	2200      	movs	r2, #0
 8011102:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	7c1b      	ldrb	r3, [r3, #16]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d109      	bne.n	8011122 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011114:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011118:	2101      	movs	r1, #1
 801111a:	6878      	ldr	r0, [r7, #4]
 801111c:	f004 ff2e 	bl	8015f7c <USBD_LL_PrepareReceive>
 8011120:	e007      	b.n	8011132 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011128:	2340      	movs	r3, #64	; 0x40
 801112a:	2101      	movs	r1, #1
 801112c:	6878      	ldr	r0, [r7, #4]
 801112e:	f004 ff25 	bl	8015f7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011132:	2300      	movs	r3, #0
}
 8011134:	4618      	mov	r0, r3
 8011136:	3710      	adds	r7, #16
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}

0801113c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b084      	sub	sp, #16
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
 8011144:	460b      	mov	r3, r1
 8011146:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8011148:	2300      	movs	r3, #0
 801114a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801114c:	2181      	movs	r1, #129	; 0x81
 801114e:	6878      	ldr	r0, [r7, #4]
 8011150:	f004 fe4b 	bl	8015dea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2200      	movs	r2, #0
 8011158:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801115a:	2101      	movs	r1, #1
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f004 fe44 	bl	8015dea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2200      	movs	r2, #0
 8011166:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801116a:	2182      	movs	r1, #130	; 0x82
 801116c:	6878      	ldr	r0, [r7, #4]
 801116e:	f004 fe3c 	bl	8015dea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	2200      	movs	r2, #0
 8011176:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2200      	movs	r2, #0
 801117e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011188:	2b00      	cmp	r3, #0
 801118a:	d00e      	beq.n	80111aa <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011192:	685b      	ldr	r3, [r3, #4]
 8011194:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801119c:	4618      	mov	r0, r3
 801119e:	f004 ff7f 	bl	80160a0 <free>
    pdev->pClassData = NULL;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2200      	movs	r2, #0
 80111a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80111aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80111ac:	4618      	mov	r0, r3
 80111ae:	3710      	adds	r7, #16
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd80      	pop	{r7, pc}

080111b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b086      	sub	sp, #24
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
 80111bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111c4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80111c6:	2300      	movs	r3, #0
 80111c8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80111ca:	2300      	movs	r3, #0
 80111cc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80111ce:	2300      	movs	r3, #0
 80111d0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	781b      	ldrb	r3, [r3, #0]
 80111d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d03a      	beq.n	8011254 <USBD_CDC_Setup+0xa0>
 80111de:	2b20      	cmp	r3, #32
 80111e0:	f040 8097 	bne.w	8011312 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	88db      	ldrh	r3, [r3, #6]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d029      	beq.n	8011240 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	781b      	ldrb	r3, [r3, #0]
 80111f0:	b25b      	sxtb	r3, r3
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	da11      	bge.n	801121a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111fc:	689b      	ldr	r3, [r3, #8]
 80111fe:	683a      	ldr	r2, [r7, #0]
 8011200:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8011202:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011204:	683a      	ldr	r2, [r7, #0]
 8011206:	88d2      	ldrh	r2, [r2, #6]
 8011208:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 801120a:	6939      	ldr	r1, [r7, #16]
 801120c:	683b      	ldr	r3, [r7, #0]
 801120e:	88db      	ldrh	r3, [r3, #6]
 8011210:	461a      	mov	r2, r3
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	f001 faac 	bl	8012770 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8011218:	e082      	b.n	8011320 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	785a      	ldrb	r2, [r3, #1]
 801121e:	693b      	ldr	r3, [r7, #16]
 8011220:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	88db      	ldrh	r3, [r3, #6]
 8011228:	b2da      	uxtb	r2, r3
 801122a:	693b      	ldr	r3, [r7, #16]
 801122c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8011230:	6939      	ldr	r1, [r7, #16]
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	88db      	ldrh	r3, [r3, #6]
 8011236:	461a      	mov	r2, r3
 8011238:	6878      	ldr	r0, [r7, #4]
 801123a:	f001 fac5 	bl	80127c8 <USBD_CtlPrepareRx>
    break;
 801123e:	e06f      	b.n	8011320 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011246:	689b      	ldr	r3, [r3, #8]
 8011248:	683a      	ldr	r2, [r7, #0]
 801124a:	7850      	ldrb	r0, [r2, #1]
 801124c:	2200      	movs	r2, #0
 801124e:	6839      	ldr	r1, [r7, #0]
 8011250:	4798      	blx	r3
    break;
 8011252:	e065      	b.n	8011320 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011254:	683b      	ldr	r3, [r7, #0]
 8011256:	785b      	ldrb	r3, [r3, #1]
 8011258:	2b0b      	cmp	r3, #11
 801125a:	d84f      	bhi.n	80112fc <USBD_CDC_Setup+0x148>
 801125c:	a201      	add	r2, pc, #4	; (adr r2, 8011264 <USBD_CDC_Setup+0xb0>)
 801125e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011262:	bf00      	nop
 8011264:	08011295 	.word	0x08011295
 8011268:	0801130b 	.word	0x0801130b
 801126c:	080112fd 	.word	0x080112fd
 8011270:	080112fd 	.word	0x080112fd
 8011274:	080112fd 	.word	0x080112fd
 8011278:	080112fd 	.word	0x080112fd
 801127c:	080112fd 	.word	0x080112fd
 8011280:	080112fd 	.word	0x080112fd
 8011284:	080112fd 	.word	0x080112fd
 8011288:	080112fd 	.word	0x080112fd
 801128c:	080112bd 	.word	0x080112bd
 8011290:	080112e5 	.word	0x080112e5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801129a:	2b03      	cmp	r3, #3
 801129c:	d107      	bne.n	80112ae <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801129e:	f107 030c 	add.w	r3, r7, #12
 80112a2:	2202      	movs	r2, #2
 80112a4:	4619      	mov	r1, r3
 80112a6:	6878      	ldr	r0, [r7, #4]
 80112a8:	f001 fa62 	bl	8012770 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80112ac:	e030      	b.n	8011310 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80112ae:	6839      	ldr	r1, [r7, #0]
 80112b0:	6878      	ldr	r0, [r7, #4]
 80112b2:	f001 f9ec 	bl	801268e <USBD_CtlError>
        ret = USBD_FAIL;
 80112b6:	2303      	movs	r3, #3
 80112b8:	75fb      	strb	r3, [r7, #23]
      break;
 80112ba:	e029      	b.n	8011310 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112c2:	2b03      	cmp	r3, #3
 80112c4:	d107      	bne.n	80112d6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80112c6:	f107 030f 	add.w	r3, r7, #15
 80112ca:	2201      	movs	r2, #1
 80112cc:	4619      	mov	r1, r3
 80112ce:	6878      	ldr	r0, [r7, #4]
 80112d0:	f001 fa4e 	bl	8012770 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80112d4:	e01c      	b.n	8011310 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80112d6:	6839      	ldr	r1, [r7, #0]
 80112d8:	6878      	ldr	r0, [r7, #4]
 80112da:	f001 f9d8 	bl	801268e <USBD_CtlError>
        ret = USBD_FAIL;
 80112de:	2303      	movs	r3, #3
 80112e0:	75fb      	strb	r3, [r7, #23]
      break;
 80112e2:	e015      	b.n	8011310 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112ea:	2b03      	cmp	r3, #3
 80112ec:	d00f      	beq.n	801130e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80112ee:	6839      	ldr	r1, [r7, #0]
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f001 f9cc 	bl	801268e <USBD_CtlError>
        ret = USBD_FAIL;
 80112f6:	2303      	movs	r3, #3
 80112f8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80112fa:	e008      	b.n	801130e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80112fc:	6839      	ldr	r1, [r7, #0]
 80112fe:	6878      	ldr	r0, [r7, #4]
 8011300:	f001 f9c5 	bl	801268e <USBD_CtlError>
      ret = USBD_FAIL;
 8011304:	2303      	movs	r3, #3
 8011306:	75fb      	strb	r3, [r7, #23]
      break;
 8011308:	e002      	b.n	8011310 <USBD_CDC_Setup+0x15c>
      break;
 801130a:	bf00      	nop
 801130c:	e008      	b.n	8011320 <USBD_CDC_Setup+0x16c>
      break;
 801130e:	bf00      	nop
    }
    break;
 8011310:	e006      	b.n	8011320 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8011312:	6839      	ldr	r1, [r7, #0]
 8011314:	6878      	ldr	r0, [r7, #4]
 8011316:	f001 f9ba 	bl	801268e <USBD_CtlError>
    ret = USBD_FAIL;
 801131a:	2303      	movs	r3, #3
 801131c:	75fb      	strb	r3, [r7, #23]
    break;
 801131e:	bf00      	nop
  }

  return (uint8_t)ret;
 8011320:	7dfb      	ldrb	r3, [r7, #23]
}
 8011322:	4618      	mov	r0, r3
 8011324:	3718      	adds	r7, #24
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}
 801132a:	bf00      	nop

0801132c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b084      	sub	sp, #16
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
 8011334:	460b      	mov	r3, r1
 8011336:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801133e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011346:	2b00      	cmp	r3, #0
 8011348:	d101      	bne.n	801134e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801134a:	2303      	movs	r3, #3
 801134c:	e049      	b.n	80113e2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011354:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011356:	78fa      	ldrb	r2, [r7, #3]
 8011358:	6879      	ldr	r1, [r7, #4]
 801135a:	4613      	mov	r3, r2
 801135c:	009b      	lsls	r3, r3, #2
 801135e:	4413      	add	r3, r2
 8011360:	009b      	lsls	r3, r3, #2
 8011362:	440b      	add	r3, r1
 8011364:	3318      	adds	r3, #24
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d029      	beq.n	80113c0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801136c:	78fa      	ldrb	r2, [r7, #3]
 801136e:	6879      	ldr	r1, [r7, #4]
 8011370:	4613      	mov	r3, r2
 8011372:	009b      	lsls	r3, r3, #2
 8011374:	4413      	add	r3, r2
 8011376:	009b      	lsls	r3, r3, #2
 8011378:	440b      	add	r3, r1
 801137a:	3318      	adds	r3, #24
 801137c:	681a      	ldr	r2, [r3, #0]
 801137e:	78f9      	ldrb	r1, [r7, #3]
 8011380:	68f8      	ldr	r0, [r7, #12]
 8011382:	460b      	mov	r3, r1
 8011384:	00db      	lsls	r3, r3, #3
 8011386:	1a5b      	subs	r3, r3, r1
 8011388:	009b      	lsls	r3, r3, #2
 801138a:	4403      	add	r3, r0
 801138c:	3344      	adds	r3, #68	; 0x44
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	fbb2 f1f3 	udiv	r1, r2, r3
 8011394:	fb03 f301 	mul.w	r3, r3, r1
 8011398:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801139a:	2b00      	cmp	r3, #0
 801139c:	d110      	bne.n	80113c0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801139e:	78fa      	ldrb	r2, [r7, #3]
 80113a0:	6879      	ldr	r1, [r7, #4]
 80113a2:	4613      	mov	r3, r2
 80113a4:	009b      	lsls	r3, r3, #2
 80113a6:	4413      	add	r3, r2
 80113a8:	009b      	lsls	r3, r3, #2
 80113aa:	440b      	add	r3, r1
 80113ac:	3318      	adds	r3, #24
 80113ae:	2200      	movs	r2, #0
 80113b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80113b2:	78f9      	ldrb	r1, [r7, #3]
 80113b4:	2300      	movs	r3, #0
 80113b6:	2200      	movs	r2, #0
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	f004 fdbe 	bl	8015f3a <USBD_LL_Transmit>
 80113be:	e00f      	b.n	80113e0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80113c0:	68bb      	ldr	r3, [r7, #8]
 80113c2:	2200      	movs	r2, #0
 80113c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80113ce:	691b      	ldr	r3, [r3, #16]
 80113d0:	68ba      	ldr	r2, [r7, #8]
 80113d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80113d6:	68ba      	ldr	r2, [r7, #8]
 80113d8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80113dc:	78fa      	ldrb	r2, [r7, #3]
 80113de:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80113e0:	2300      	movs	r3, #0
}
 80113e2:	4618      	mov	r0, r3
 80113e4:	3710      	adds	r7, #16
 80113e6:	46bd      	mov	sp, r7
 80113e8:	bd80      	pop	{r7, pc}

080113ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80113ea:	b580      	push	{r7, lr}
 80113ec:	b084      	sub	sp, #16
 80113ee:	af00      	add	r7, sp, #0
 80113f0:	6078      	str	r0, [r7, #4]
 80113f2:	460b      	mov	r3, r1
 80113f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80113fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011404:	2b00      	cmp	r3, #0
 8011406:	d101      	bne.n	801140c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011408:	2303      	movs	r3, #3
 801140a:	e015      	b.n	8011438 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801140c:	78fb      	ldrb	r3, [r7, #3]
 801140e:	4619      	mov	r1, r3
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f004 fdd4 	bl	8015fbe <USBD_LL_GetRxDataSize>
 8011416:	4602      	mov	r2, r0
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011424:	68db      	ldr	r3, [r3, #12]
 8011426:	68fa      	ldr	r2, [r7, #12]
 8011428:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801142c:	68fa      	ldr	r2, [r7, #12]
 801142e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011432:	4611      	mov	r1, r2
 8011434:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011436:	2300      	movs	r3, #0
}
 8011438:	4618      	mov	r0, r3
 801143a:	3710      	adds	r7, #16
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}

08011440 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b084      	sub	sp, #16
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801144e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011456:	2b00      	cmp	r3, #0
 8011458:	d015      	beq.n	8011486 <USBD_CDC_EP0_RxReady+0x46>
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011460:	2bff      	cmp	r3, #255	; 0xff
 8011462:	d010      	beq.n	8011486 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801146a:	689b      	ldr	r3, [r3, #8]
 801146c:	68fa      	ldr	r2, [r7, #12]
 801146e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8011472:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011474:	68fa      	ldr	r2, [r7, #12]
 8011476:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801147a:	b292      	uxth	r2, r2
 801147c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	22ff      	movs	r2, #255	; 0xff
 8011482:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8011486:	2300      	movs	r3, #0
}
 8011488:	4618      	mov	r0, r3
 801148a:	3710      	adds	r7, #16
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}

08011490 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011490:	b480      	push	{r7}
 8011492:	b083      	sub	sp, #12
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2243      	movs	r2, #67	; 0x43
 801149c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801149e:	4b03      	ldr	r3, [pc, #12]	; (80114ac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80114a0:	4618      	mov	r0, r3
 80114a2:	370c      	adds	r7, #12
 80114a4:	46bd      	mov	sp, r7
 80114a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114aa:	4770      	bx	lr
 80114ac:	200008bc 	.word	0x200008bc

080114b0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80114b0:	b480      	push	{r7}
 80114b2:	b083      	sub	sp, #12
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	2243      	movs	r2, #67	; 0x43
 80114bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80114be:	4b03      	ldr	r3, [pc, #12]	; (80114cc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80114c0:	4618      	mov	r0, r3
 80114c2:	370c      	adds	r7, #12
 80114c4:	46bd      	mov	sp, r7
 80114c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ca:	4770      	bx	lr
 80114cc:	20000878 	.word	0x20000878

080114d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80114d0:	b480      	push	{r7}
 80114d2:	b083      	sub	sp, #12
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	2243      	movs	r2, #67	; 0x43
 80114dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80114de:	4b03      	ldr	r3, [pc, #12]	; (80114ec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80114e0:	4618      	mov	r0, r3
 80114e2:	370c      	adds	r7, #12
 80114e4:	46bd      	mov	sp, r7
 80114e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ea:	4770      	bx	lr
 80114ec:	20000900 	.word	0x20000900

080114f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80114f0:	b480      	push	{r7}
 80114f2:	b083      	sub	sp, #12
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	220a      	movs	r2, #10
 80114fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80114fe:	4b03      	ldr	r3, [pc, #12]	; (801150c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011500:	4618      	mov	r0, r3
 8011502:	370c      	adds	r7, #12
 8011504:	46bd      	mov	sp, r7
 8011506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150a:	4770      	bx	lr
 801150c:	20000834 	.word	0x20000834

08011510 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011510:	b480      	push	{r7}
 8011512:	b083      	sub	sp, #12
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
 8011518:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d101      	bne.n	8011524 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011520:	2303      	movs	r3, #3
 8011522:	e004      	b.n	801152e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	683a      	ldr	r2, [r7, #0]
 8011528:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801152c:	2300      	movs	r3, #0
}
 801152e:	4618      	mov	r0, r3
 8011530:	370c      	adds	r7, #12
 8011532:	46bd      	mov	sp, r7
 8011534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011538:	4770      	bx	lr

0801153a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801153a:	b480      	push	{r7}
 801153c:	b087      	sub	sp, #28
 801153e:	af00      	add	r7, sp, #0
 8011540:	60f8      	str	r0, [r7, #12]
 8011542:	60b9      	str	r1, [r7, #8]
 8011544:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801154c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801154e:	697b      	ldr	r3, [r7, #20]
 8011550:	68ba      	ldr	r2, [r7, #8]
 8011552:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011556:	697b      	ldr	r3, [r7, #20]
 8011558:	687a      	ldr	r2, [r7, #4]
 801155a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801155e:	2300      	movs	r3, #0
}
 8011560:	4618      	mov	r0, r3
 8011562:	371c      	adds	r7, #28
 8011564:	46bd      	mov	sp, r7
 8011566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156a:	4770      	bx	lr

0801156c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801156c:	b480      	push	{r7}
 801156e:	b085      	sub	sp, #20
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
 8011574:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801157c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	683a      	ldr	r2, [r7, #0]
 8011582:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011586:	2300      	movs	r3, #0
}
 8011588:	4618      	mov	r0, r3
 801158a:	3714      	adds	r7, #20
 801158c:	46bd      	mov	sp, r7
 801158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011592:	4770      	bx	lr

08011594 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b084      	sub	sp, #16
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115a2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80115a4:	2301      	movs	r3, #1
 80115a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d101      	bne.n	80115b6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80115b2:	2303      	movs	r3, #3
 80115b4:	e01a      	b.n	80115ec <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80115b6:	68bb      	ldr	r3, [r7, #8]
 80115b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d114      	bne.n	80115ea <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80115c0:	68bb      	ldr	r3, [r7, #8]
 80115c2:	2201      	movs	r2, #1
 80115c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80115c8:	68bb      	ldr	r3, [r7, #8]
 80115ca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80115d2:	68bb      	ldr	r3, [r7, #8]
 80115d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80115d8:	68bb      	ldr	r3, [r7, #8]
 80115da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80115de:	2181      	movs	r1, #129	; 0x81
 80115e0:	6878      	ldr	r0, [r7, #4]
 80115e2:	f004 fcaa 	bl	8015f3a <USBD_LL_Transmit>

    ret = USBD_OK;
 80115e6:	2300      	movs	r3, #0
 80115e8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80115ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80115ec:	4618      	mov	r0, r3
 80115ee:	3710      	adds	r7, #16
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}

080115f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b084      	sub	sp, #16
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011602:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801160a:	2b00      	cmp	r3, #0
 801160c:	d101      	bne.n	8011612 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801160e:	2303      	movs	r3, #3
 8011610:	e016      	b.n	8011640 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	7c1b      	ldrb	r3, [r3, #16]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d109      	bne.n	801162e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011624:	2101      	movs	r1, #1
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f004 fca8 	bl	8015f7c <USBD_LL_PrepareReceive>
 801162c:	e007      	b.n	801163e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011634:	2340      	movs	r3, #64	; 0x40
 8011636:	2101      	movs	r1, #1
 8011638:	6878      	ldr	r0, [r7, #4]
 801163a:	f004 fc9f 	bl	8015f7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801163e:	2300      	movs	r3, #0
}
 8011640:	4618      	mov	r0, r3
 8011642:	3710      	adds	r7, #16
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}

08011648 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b086      	sub	sp, #24
 801164c:	af00      	add	r7, sp, #0
 801164e:	60f8      	str	r0, [r7, #12]
 8011650:	60b9      	str	r1, [r7, #8]
 8011652:	4613      	mov	r3, r2
 8011654:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d101      	bne.n	8011660 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801165c:	2303      	movs	r3, #3
 801165e:	e025      	b.n	80116ac <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011666:	2b00      	cmp	r3, #0
 8011668:	d003      	beq.n	8011672 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	2200      	movs	r2, #0
 801166e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8011678:	2b00      	cmp	r3, #0
 801167a:	d003      	beq.n	8011684 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	2200      	movs	r2, #0
 8011680:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011684:	68bb      	ldr	r3, [r7, #8]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d003      	beq.n	8011692 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	68ba      	ldr	r2, [r7, #8]
 801168e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	2201      	movs	r2, #1
 8011696:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	79fa      	ldrb	r2, [r7, #7]
 801169e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80116a0:	68f8      	ldr	r0, [r7, #12]
 80116a2:	f004 fb15 	bl	8015cd0 <USBD_LL_Init>
 80116a6:	4603      	mov	r3, r0
 80116a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80116aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80116ac:	4618      	mov	r0, r3
 80116ae:	3718      	adds	r7, #24
 80116b0:	46bd      	mov	sp, r7
 80116b2:	bd80      	pop	{r7, pc}

080116b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b084      	sub	sp, #16
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
 80116bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80116be:	2300      	movs	r3, #0
 80116c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80116c2:	683b      	ldr	r3, [r7, #0]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d101      	bne.n	80116cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80116c8:	2303      	movs	r3, #3
 80116ca:	e010      	b.n	80116ee <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	683a      	ldr	r2, [r7, #0]
 80116d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116dc:	f107 020e 	add.w	r2, r7, #14
 80116e0:	4610      	mov	r0, r2
 80116e2:	4798      	blx	r3
 80116e4:	4602      	mov	r2, r0
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80116ec:	2300      	movs	r3, #0
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	3710      	adds	r7, #16
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}

080116f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80116f6:	b580      	push	{r7, lr}
 80116f8:	b082      	sub	sp, #8
 80116fa:	af00      	add	r7, sp, #0
 80116fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f004 fb32 	bl	8015d68 <USBD_LL_Start>
 8011704:	4603      	mov	r3, r0
}
 8011706:	4618      	mov	r0, r3
 8011708:	3708      	adds	r7, #8
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}

0801170e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801170e:	b480      	push	{r7}
 8011710:	b083      	sub	sp, #12
 8011712:	af00      	add	r7, sp, #0
 8011714:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011716:	2300      	movs	r3, #0
}
 8011718:	4618      	mov	r0, r3
 801171a:	370c      	adds	r7, #12
 801171c:	46bd      	mov	sp, r7
 801171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011722:	4770      	bx	lr

08011724 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b084      	sub	sp, #16
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
 801172c:	460b      	mov	r3, r1
 801172e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011730:	2303      	movs	r3, #3
 8011732:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801173a:	2b00      	cmp	r3, #0
 801173c:	d009      	beq.n	8011752 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	78fa      	ldrb	r2, [r7, #3]
 8011748:	4611      	mov	r1, r2
 801174a:	6878      	ldr	r0, [r7, #4]
 801174c:	4798      	blx	r3
 801174e:	4603      	mov	r3, r0
 8011750:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011752:	7bfb      	ldrb	r3, [r7, #15]
}
 8011754:	4618      	mov	r0, r3
 8011756:	3710      	adds	r7, #16
 8011758:	46bd      	mov	sp, r7
 801175a:	bd80      	pop	{r7, pc}

0801175c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b082      	sub	sp, #8
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
 8011764:	460b      	mov	r3, r1
 8011766:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801176e:	2b00      	cmp	r3, #0
 8011770:	d007      	beq.n	8011782 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011778:	685b      	ldr	r3, [r3, #4]
 801177a:	78fa      	ldrb	r2, [r7, #3]
 801177c:	4611      	mov	r1, r2
 801177e:	6878      	ldr	r0, [r7, #4]
 8011780:	4798      	blx	r3
  }

  return USBD_OK;
 8011782:	2300      	movs	r3, #0
}
 8011784:	4618      	mov	r0, r3
 8011786:	3708      	adds	r7, #8
 8011788:	46bd      	mov	sp, r7
 801178a:	bd80      	pop	{r7, pc}

0801178c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801178c:	b580      	push	{r7, lr}
 801178e:	b084      	sub	sp, #16
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
 8011794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801179c:	6839      	ldr	r1, [r7, #0]
 801179e:	4618      	mov	r0, r3
 80117a0:	f000 ff3b 	bl	801261a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2201      	movs	r2, #1
 80117a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80117b2:	461a      	mov	r2, r3
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80117c0:	f003 031f 	and.w	r3, r3, #31
 80117c4:	2b02      	cmp	r3, #2
 80117c6:	d01a      	beq.n	80117fe <USBD_LL_SetupStage+0x72>
 80117c8:	2b02      	cmp	r3, #2
 80117ca:	d822      	bhi.n	8011812 <USBD_LL_SetupStage+0x86>
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d002      	beq.n	80117d6 <USBD_LL_SetupStage+0x4a>
 80117d0:	2b01      	cmp	r3, #1
 80117d2:	d00a      	beq.n	80117ea <USBD_LL_SetupStage+0x5e>
 80117d4:	e01d      	b.n	8011812 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80117dc:	4619      	mov	r1, r3
 80117de:	6878      	ldr	r0, [r7, #4]
 80117e0:	f000 fa18 	bl	8011c14 <USBD_StdDevReq>
 80117e4:	4603      	mov	r3, r0
 80117e6:	73fb      	strb	r3, [r7, #15]
      break;
 80117e8:	e020      	b.n	801182c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80117f0:	4619      	mov	r1, r3
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f000 fa7c 	bl	8011cf0 <USBD_StdItfReq>
 80117f8:	4603      	mov	r3, r0
 80117fa:	73fb      	strb	r3, [r7, #15]
      break;
 80117fc:	e016      	b.n	801182c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011804:	4619      	mov	r1, r3
 8011806:	6878      	ldr	r0, [r7, #4]
 8011808:	f000 faba 	bl	8011d80 <USBD_StdEPReq>
 801180c:	4603      	mov	r3, r0
 801180e:	73fb      	strb	r3, [r7, #15]
      break;
 8011810:	e00c      	b.n	801182c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011818:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801181c:	b2db      	uxtb	r3, r3
 801181e:	4619      	mov	r1, r3
 8011820:	6878      	ldr	r0, [r7, #4]
 8011822:	f004 fb01 	bl	8015e28 <USBD_LL_StallEP>
 8011826:	4603      	mov	r3, r0
 8011828:	73fb      	strb	r3, [r7, #15]
      break;
 801182a:	bf00      	nop
  }

  return ret;
 801182c:	7bfb      	ldrb	r3, [r7, #15]
}
 801182e:	4618      	mov	r0, r3
 8011830:	3710      	adds	r7, #16
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}

08011836 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011836:	b580      	push	{r7, lr}
 8011838:	b086      	sub	sp, #24
 801183a:	af00      	add	r7, sp, #0
 801183c:	60f8      	str	r0, [r7, #12]
 801183e:	460b      	mov	r3, r1
 8011840:	607a      	str	r2, [r7, #4]
 8011842:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011844:	7afb      	ldrb	r3, [r7, #11]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d137      	bne.n	80118ba <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011850:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011858:	2b03      	cmp	r3, #3
 801185a:	d14a      	bne.n	80118f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801185c:	693b      	ldr	r3, [r7, #16]
 801185e:	689a      	ldr	r2, [r3, #8]
 8011860:	693b      	ldr	r3, [r7, #16]
 8011862:	68db      	ldr	r3, [r3, #12]
 8011864:	429a      	cmp	r2, r3
 8011866:	d913      	bls.n	8011890 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011868:	693b      	ldr	r3, [r7, #16]
 801186a:	689a      	ldr	r2, [r3, #8]
 801186c:	693b      	ldr	r3, [r7, #16]
 801186e:	68db      	ldr	r3, [r3, #12]
 8011870:	1ad2      	subs	r2, r2, r3
 8011872:	693b      	ldr	r3, [r7, #16]
 8011874:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011876:	693b      	ldr	r3, [r7, #16]
 8011878:	68da      	ldr	r2, [r3, #12]
 801187a:	693b      	ldr	r3, [r7, #16]
 801187c:	689b      	ldr	r3, [r3, #8]
 801187e:	4293      	cmp	r3, r2
 8011880:	bf28      	it	cs
 8011882:	4613      	movcs	r3, r2
 8011884:	461a      	mov	r2, r3
 8011886:	6879      	ldr	r1, [r7, #4]
 8011888:	68f8      	ldr	r0, [r7, #12]
 801188a:	f000 ffba 	bl	8012802 <USBD_CtlContinueRx>
 801188e:	e030      	b.n	80118f2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011896:	691b      	ldr	r3, [r3, #16]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d00a      	beq.n	80118b2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80118a2:	2b03      	cmp	r3, #3
 80118a4:	d105      	bne.n	80118b2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118ac:	691b      	ldr	r3, [r3, #16]
 80118ae:	68f8      	ldr	r0, [r7, #12]
 80118b0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80118b2:	68f8      	ldr	r0, [r7, #12]
 80118b4:	f000 ffb6 	bl	8012824 <USBD_CtlSendStatus>
 80118b8:	e01b      	b.n	80118f2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118c0:	699b      	ldr	r3, [r3, #24]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d013      	beq.n	80118ee <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80118cc:	2b03      	cmp	r3, #3
 80118ce:	d10e      	bne.n	80118ee <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118d6:	699b      	ldr	r3, [r3, #24]
 80118d8:	7afa      	ldrb	r2, [r7, #11]
 80118da:	4611      	mov	r1, r2
 80118dc:	68f8      	ldr	r0, [r7, #12]
 80118de:	4798      	blx	r3
 80118e0:	4603      	mov	r3, r0
 80118e2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80118e4:	7dfb      	ldrb	r3, [r7, #23]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d003      	beq.n	80118f2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80118ea:	7dfb      	ldrb	r3, [r7, #23]
 80118ec:	e002      	b.n	80118f4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80118ee:	2303      	movs	r3, #3
 80118f0:	e000      	b.n	80118f4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80118f2:	2300      	movs	r3, #0
}
 80118f4:	4618      	mov	r0, r3
 80118f6:	3718      	adds	r7, #24
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}

080118fc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b086      	sub	sp, #24
 8011900:	af00      	add	r7, sp, #0
 8011902:	60f8      	str	r0, [r7, #12]
 8011904:	460b      	mov	r3, r1
 8011906:	607a      	str	r2, [r7, #4]
 8011908:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801190a:	7afb      	ldrb	r3, [r7, #11]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d16a      	bne.n	80119e6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	3314      	adds	r3, #20
 8011914:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801191c:	2b02      	cmp	r3, #2
 801191e:	d155      	bne.n	80119cc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8011920:	693b      	ldr	r3, [r7, #16]
 8011922:	689a      	ldr	r2, [r3, #8]
 8011924:	693b      	ldr	r3, [r7, #16]
 8011926:	68db      	ldr	r3, [r3, #12]
 8011928:	429a      	cmp	r2, r3
 801192a:	d914      	bls.n	8011956 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801192c:	693b      	ldr	r3, [r7, #16]
 801192e:	689a      	ldr	r2, [r3, #8]
 8011930:	693b      	ldr	r3, [r7, #16]
 8011932:	68db      	ldr	r3, [r3, #12]
 8011934:	1ad2      	subs	r2, r2, r3
 8011936:	693b      	ldr	r3, [r7, #16]
 8011938:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801193a:	693b      	ldr	r3, [r7, #16]
 801193c:	689b      	ldr	r3, [r3, #8]
 801193e:	461a      	mov	r2, r3
 8011940:	6879      	ldr	r1, [r7, #4]
 8011942:	68f8      	ldr	r0, [r7, #12]
 8011944:	f000 ff2f 	bl	80127a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011948:	2300      	movs	r3, #0
 801194a:	2200      	movs	r2, #0
 801194c:	2100      	movs	r1, #0
 801194e:	68f8      	ldr	r0, [r7, #12]
 8011950:	f004 fb14 	bl	8015f7c <USBD_LL_PrepareReceive>
 8011954:	e03a      	b.n	80119cc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011956:	693b      	ldr	r3, [r7, #16]
 8011958:	68da      	ldr	r2, [r3, #12]
 801195a:	693b      	ldr	r3, [r7, #16]
 801195c:	689b      	ldr	r3, [r3, #8]
 801195e:	429a      	cmp	r2, r3
 8011960:	d11c      	bne.n	801199c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011962:	693b      	ldr	r3, [r7, #16]
 8011964:	685a      	ldr	r2, [r3, #4]
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801196a:	429a      	cmp	r2, r3
 801196c:	d316      	bcc.n	801199c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	685a      	ldr	r2, [r3, #4]
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011978:	429a      	cmp	r2, r3
 801197a:	d20f      	bcs.n	801199c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801197c:	2200      	movs	r2, #0
 801197e:	2100      	movs	r1, #0
 8011980:	68f8      	ldr	r0, [r7, #12]
 8011982:	f000 ff10 	bl	80127a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	2200      	movs	r2, #0
 801198a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801198e:	2300      	movs	r3, #0
 8011990:	2200      	movs	r2, #0
 8011992:	2100      	movs	r1, #0
 8011994:	68f8      	ldr	r0, [r7, #12]
 8011996:	f004 faf1 	bl	8015f7c <USBD_LL_PrepareReceive>
 801199a:	e017      	b.n	80119cc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119a2:	68db      	ldr	r3, [r3, #12]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d00a      	beq.n	80119be <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80119ae:	2b03      	cmp	r3, #3
 80119b0:	d105      	bne.n	80119be <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119b8:	68db      	ldr	r3, [r3, #12]
 80119ba:	68f8      	ldr	r0, [r7, #12]
 80119bc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80119be:	2180      	movs	r1, #128	; 0x80
 80119c0:	68f8      	ldr	r0, [r7, #12]
 80119c2:	f004 fa31 	bl	8015e28 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80119c6:	68f8      	ldr	r0, [r7, #12]
 80119c8:	f000 ff3f 	bl	801284a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80119d2:	2b01      	cmp	r3, #1
 80119d4:	d123      	bne.n	8011a1e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80119d6:	68f8      	ldr	r0, [r7, #12]
 80119d8:	f7ff fe99 	bl	801170e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	2200      	movs	r2, #0
 80119e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80119e4:	e01b      	b.n	8011a1e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119ec:	695b      	ldr	r3, [r3, #20]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d013      	beq.n	8011a1a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80119f8:	2b03      	cmp	r3, #3
 80119fa:	d10e      	bne.n	8011a1a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a02:	695b      	ldr	r3, [r3, #20]
 8011a04:	7afa      	ldrb	r2, [r7, #11]
 8011a06:	4611      	mov	r1, r2
 8011a08:	68f8      	ldr	r0, [r7, #12]
 8011a0a:	4798      	blx	r3
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011a10:	7dfb      	ldrb	r3, [r7, #23]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d003      	beq.n	8011a1e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8011a16:	7dfb      	ldrb	r3, [r7, #23]
 8011a18:	e002      	b.n	8011a20 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011a1a:	2303      	movs	r3, #3
 8011a1c:	e000      	b.n	8011a20 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8011a1e:	2300      	movs	r3, #0
}
 8011a20:	4618      	mov	r0, r3
 8011a22:	3718      	adds	r7, #24
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bd80      	pop	{r7, pc}

08011a28 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b082      	sub	sp, #8
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	2201      	movs	r2, #1
 8011a34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	2200      	movs	r2, #0
 8011a44:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	2200      	movs	r2, #0
 8011a4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d009      	beq.n	8011a6c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a5e:	685b      	ldr	r3, [r3, #4]
 8011a60:	687a      	ldr	r2, [r7, #4]
 8011a62:	6852      	ldr	r2, [r2, #4]
 8011a64:	b2d2      	uxtb	r2, r2
 8011a66:	4611      	mov	r1, r2
 8011a68:	6878      	ldr	r0, [r7, #4]
 8011a6a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011a6c:	2340      	movs	r3, #64	; 0x40
 8011a6e:	2200      	movs	r2, #0
 8011a70:	2100      	movs	r1, #0
 8011a72:	6878      	ldr	r0, [r7, #4]
 8011a74:	f004 f993 	bl	8015d9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2201      	movs	r2, #1
 8011a7c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	2240      	movs	r2, #64	; 0x40
 8011a84:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011a88:	2340      	movs	r3, #64	; 0x40
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	2180      	movs	r1, #128	; 0x80
 8011a8e:	6878      	ldr	r0, [r7, #4]
 8011a90:	f004 f985 	bl	8015d9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2201      	movs	r2, #1
 8011a98:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	2240      	movs	r2, #64	; 0x40
 8011a9e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011aa0:	2300      	movs	r3, #0
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3708      	adds	r7, #8
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}

08011aaa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011aaa:	b480      	push	{r7}
 8011aac:	b083      	sub	sp, #12
 8011aae:	af00      	add	r7, sp, #0
 8011ab0:	6078      	str	r0, [r7, #4]
 8011ab2:	460b      	mov	r3, r1
 8011ab4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	78fa      	ldrb	r2, [r7, #3]
 8011aba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011abc:	2300      	movs	r3, #0
}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	370c      	adds	r7, #12
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac8:	4770      	bx	lr

08011aca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011aca:	b480      	push	{r7}
 8011acc:	b083      	sub	sp, #12
 8011ace:	af00      	add	r7, sp, #0
 8011ad0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	2204      	movs	r2, #4
 8011ae2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011ae6:	2300      	movs	r3, #0
}
 8011ae8:	4618      	mov	r0, r3
 8011aea:	370c      	adds	r7, #12
 8011aec:	46bd      	mov	sp, r7
 8011aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af2:	4770      	bx	lr

08011af4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011af4:	b480      	push	{r7}
 8011af6:	b083      	sub	sp, #12
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b02:	2b04      	cmp	r3, #4
 8011b04:	d105      	bne.n	8011b12 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011b12:	2300      	movs	r3, #0
}
 8011b14:	4618      	mov	r0, r3
 8011b16:	370c      	adds	r7, #12
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1e:	4770      	bx	lr

08011b20 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b082      	sub	sp, #8
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b2e:	2b03      	cmp	r3, #3
 8011b30:	d10b      	bne.n	8011b4a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b38:	69db      	ldr	r3, [r3, #28]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d005      	beq.n	8011b4a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b44:	69db      	ldr	r3, [r3, #28]
 8011b46:	6878      	ldr	r0, [r7, #4]
 8011b48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011b4a:	2300      	movs	r3, #0
}
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	3708      	adds	r7, #8
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd80      	pop	{r7, pc}

08011b54 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011b54:	b480      	push	{r7}
 8011b56:	b083      	sub	sp, #12
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
 8011b5c:	460b      	mov	r3, r1
 8011b5e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011b60:	2300      	movs	r3, #0
}
 8011b62:	4618      	mov	r0, r3
 8011b64:	370c      	adds	r7, #12
 8011b66:	46bd      	mov	sp, r7
 8011b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6c:	4770      	bx	lr

08011b6e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011b6e:	b480      	push	{r7}
 8011b70:	b083      	sub	sp, #12
 8011b72:	af00      	add	r7, sp, #0
 8011b74:	6078      	str	r0, [r7, #4]
 8011b76:	460b      	mov	r3, r1
 8011b78:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011b7a:	2300      	movs	r3, #0
}
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	370c      	adds	r7, #12
 8011b80:	46bd      	mov	sp, r7
 8011b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b86:	4770      	bx	lr

08011b88 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011b88:	b480      	push	{r7}
 8011b8a:	b083      	sub	sp, #12
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011b90:	2300      	movs	r3, #0
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	370c      	adds	r7, #12
 8011b96:	46bd      	mov	sp, r7
 8011b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9c:	4770      	bx	lr

08011b9e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011b9e:	b580      	push	{r7, lr}
 8011ba0:	b082      	sub	sp, #8
 8011ba2:	af00      	add	r7, sp, #0
 8011ba4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	2201      	movs	r2, #1
 8011baa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d009      	beq.n	8011bcc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bbe:	685b      	ldr	r3, [r3, #4]
 8011bc0:	687a      	ldr	r2, [r7, #4]
 8011bc2:	6852      	ldr	r2, [r2, #4]
 8011bc4:	b2d2      	uxtb	r2, r2
 8011bc6:	4611      	mov	r1, r2
 8011bc8:	6878      	ldr	r0, [r7, #4]
 8011bca:	4798      	blx	r3
  }

  return USBD_OK;
 8011bcc:	2300      	movs	r3, #0
}
 8011bce:	4618      	mov	r0, r3
 8011bd0:	3708      	adds	r7, #8
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	bd80      	pop	{r7, pc}

08011bd6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011bd6:	b480      	push	{r7}
 8011bd8:	b087      	sub	sp, #28
 8011bda:	af00      	add	r7, sp, #0
 8011bdc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011be2:	697b      	ldr	r3, [r7, #20]
 8011be4:	781b      	ldrb	r3, [r3, #0]
 8011be6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	3301      	adds	r3, #1
 8011bec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011bee:	697b      	ldr	r3, [r7, #20]
 8011bf0:	781b      	ldrb	r3, [r3, #0]
 8011bf2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011bf4:	8a3b      	ldrh	r3, [r7, #16]
 8011bf6:	021b      	lsls	r3, r3, #8
 8011bf8:	b21a      	sxth	r2, r3
 8011bfa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011bfe:	4313      	orrs	r3, r2
 8011c00:	b21b      	sxth	r3, r3
 8011c02:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011c04:	89fb      	ldrh	r3, [r7, #14]
}
 8011c06:	4618      	mov	r0, r3
 8011c08:	371c      	adds	r7, #28
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c10:	4770      	bx	lr
	...

08011c14 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b084      	sub	sp, #16
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
 8011c1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011c1e:	2300      	movs	r3, #0
 8011c20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011c2a:	2b40      	cmp	r3, #64	; 0x40
 8011c2c:	d005      	beq.n	8011c3a <USBD_StdDevReq+0x26>
 8011c2e:	2b40      	cmp	r3, #64	; 0x40
 8011c30:	d853      	bhi.n	8011cda <USBD_StdDevReq+0xc6>
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d00b      	beq.n	8011c4e <USBD_StdDevReq+0x3a>
 8011c36:	2b20      	cmp	r3, #32
 8011c38:	d14f      	bne.n	8011cda <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c40:	689b      	ldr	r3, [r3, #8]
 8011c42:	6839      	ldr	r1, [r7, #0]
 8011c44:	6878      	ldr	r0, [r7, #4]
 8011c46:	4798      	blx	r3
 8011c48:	4603      	mov	r3, r0
 8011c4a:	73fb      	strb	r3, [r7, #15]
    break;
 8011c4c:	e04a      	b.n	8011ce4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011c4e:	683b      	ldr	r3, [r7, #0]
 8011c50:	785b      	ldrb	r3, [r3, #1]
 8011c52:	2b09      	cmp	r3, #9
 8011c54:	d83b      	bhi.n	8011cce <USBD_StdDevReq+0xba>
 8011c56:	a201      	add	r2, pc, #4	; (adr r2, 8011c5c <USBD_StdDevReq+0x48>)
 8011c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c5c:	08011cb1 	.word	0x08011cb1
 8011c60:	08011cc5 	.word	0x08011cc5
 8011c64:	08011ccf 	.word	0x08011ccf
 8011c68:	08011cbb 	.word	0x08011cbb
 8011c6c:	08011ccf 	.word	0x08011ccf
 8011c70:	08011c8f 	.word	0x08011c8f
 8011c74:	08011c85 	.word	0x08011c85
 8011c78:	08011ccf 	.word	0x08011ccf
 8011c7c:	08011ca7 	.word	0x08011ca7
 8011c80:	08011c99 	.word	0x08011c99
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8011c84:	6839      	ldr	r1, [r7, #0]
 8011c86:	6878      	ldr	r0, [r7, #4]
 8011c88:	f000 f9d8 	bl	801203c <USBD_GetDescriptor>
      break;
 8011c8c:	e024      	b.n	8011cd8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8011c8e:	6839      	ldr	r1, [r7, #0]
 8011c90:	6878      	ldr	r0, [r7, #4]
 8011c92:	f000 fb3d 	bl	8012310 <USBD_SetAddress>
      break;
 8011c96:	e01f      	b.n	8011cd8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8011c98:	6839      	ldr	r1, [r7, #0]
 8011c9a:	6878      	ldr	r0, [r7, #4]
 8011c9c:	f000 fb7c 	bl	8012398 <USBD_SetConfig>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8011ca4:	e018      	b.n	8011cd8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8011ca6:	6839      	ldr	r1, [r7, #0]
 8011ca8:	6878      	ldr	r0, [r7, #4]
 8011caa:	f000 fc19 	bl	80124e0 <USBD_GetConfig>
      break;
 8011cae:	e013      	b.n	8011cd8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8011cb0:	6839      	ldr	r1, [r7, #0]
 8011cb2:	6878      	ldr	r0, [r7, #4]
 8011cb4:	f000 fc49 	bl	801254a <USBD_GetStatus>
      break;
 8011cb8:	e00e      	b.n	8011cd8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8011cba:	6839      	ldr	r1, [r7, #0]
 8011cbc:	6878      	ldr	r0, [r7, #4]
 8011cbe:	f000 fc77 	bl	80125b0 <USBD_SetFeature>
      break;
 8011cc2:	e009      	b.n	8011cd8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8011cc4:	6839      	ldr	r1, [r7, #0]
 8011cc6:	6878      	ldr	r0, [r7, #4]
 8011cc8:	f000 fc86 	bl	80125d8 <USBD_ClrFeature>
      break;
 8011ccc:	e004      	b.n	8011cd8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8011cce:	6839      	ldr	r1, [r7, #0]
 8011cd0:	6878      	ldr	r0, [r7, #4]
 8011cd2:	f000 fcdc 	bl	801268e <USBD_CtlError>
      break;
 8011cd6:	bf00      	nop
    }
    break;
 8011cd8:	e004      	b.n	8011ce4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8011cda:	6839      	ldr	r1, [r7, #0]
 8011cdc:	6878      	ldr	r0, [r7, #4]
 8011cde:	f000 fcd6 	bl	801268e <USBD_CtlError>
    break;
 8011ce2:	bf00      	nop
  }

  return ret;
 8011ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	3710      	adds	r7, #16
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd80      	pop	{r7, pc}
 8011cee:	bf00      	nop

08011cf0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b084      	sub	sp, #16
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
 8011cf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	781b      	ldrb	r3, [r3, #0]
 8011d02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011d06:	2b40      	cmp	r3, #64	; 0x40
 8011d08:	d005      	beq.n	8011d16 <USBD_StdItfReq+0x26>
 8011d0a:	2b40      	cmp	r3, #64	; 0x40
 8011d0c:	d82e      	bhi.n	8011d6c <USBD_StdItfReq+0x7c>
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d001      	beq.n	8011d16 <USBD_StdItfReq+0x26>
 8011d12:	2b20      	cmp	r3, #32
 8011d14:	d12a      	bne.n	8011d6c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d1c:	3b01      	subs	r3, #1
 8011d1e:	2b02      	cmp	r3, #2
 8011d20:	d81d      	bhi.n	8011d5e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	889b      	ldrh	r3, [r3, #4]
 8011d26:	b2db      	uxtb	r3, r3
 8011d28:	2b01      	cmp	r3, #1
 8011d2a:	d813      	bhi.n	8011d54 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d32:	689b      	ldr	r3, [r3, #8]
 8011d34:	6839      	ldr	r1, [r7, #0]
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	4798      	blx	r3
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	88db      	ldrh	r3, [r3, #6]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d110      	bne.n	8011d68 <USBD_StdItfReq+0x78>
 8011d46:	7bfb      	ldrb	r3, [r7, #15]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d10d      	bne.n	8011d68 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8011d4c:	6878      	ldr	r0, [r7, #4]
 8011d4e:	f000 fd69 	bl	8012824 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8011d52:	e009      	b.n	8011d68 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8011d54:	6839      	ldr	r1, [r7, #0]
 8011d56:	6878      	ldr	r0, [r7, #4]
 8011d58:	f000 fc99 	bl	801268e <USBD_CtlError>
      break;
 8011d5c:	e004      	b.n	8011d68 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8011d5e:	6839      	ldr	r1, [r7, #0]
 8011d60:	6878      	ldr	r0, [r7, #4]
 8011d62:	f000 fc94 	bl	801268e <USBD_CtlError>
      break;
 8011d66:	e000      	b.n	8011d6a <USBD_StdItfReq+0x7a>
      break;
 8011d68:	bf00      	nop
    }
    break;
 8011d6a:	e004      	b.n	8011d76 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8011d6c:	6839      	ldr	r1, [r7, #0]
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	f000 fc8d 	bl	801268e <USBD_CtlError>
    break;
 8011d74:	bf00      	nop
  }

  return ret;
 8011d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d78:	4618      	mov	r0, r3
 8011d7a:	3710      	adds	r7, #16
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}

08011d80 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b084      	sub	sp, #16
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
 8011d88:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011d8e:	683b      	ldr	r3, [r7, #0]
 8011d90:	889b      	ldrh	r3, [r3, #4]
 8011d92:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011d94:	683b      	ldr	r3, [r7, #0]
 8011d96:	781b      	ldrb	r3, [r3, #0]
 8011d98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011d9c:	2b40      	cmp	r3, #64	; 0x40
 8011d9e:	d007      	beq.n	8011db0 <USBD_StdEPReq+0x30>
 8011da0:	2b40      	cmp	r3, #64	; 0x40
 8011da2:	f200 8140 	bhi.w	8012026 <USBD_StdEPReq+0x2a6>
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d00c      	beq.n	8011dc4 <USBD_StdEPReq+0x44>
 8011daa:	2b20      	cmp	r3, #32
 8011dac:	f040 813b 	bne.w	8012026 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011db6:	689b      	ldr	r3, [r3, #8]
 8011db8:	6839      	ldr	r1, [r7, #0]
 8011dba:	6878      	ldr	r0, [r7, #4]
 8011dbc:	4798      	blx	r3
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	73fb      	strb	r3, [r7, #15]
    break;
 8011dc2:	e135      	b.n	8012030 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	785b      	ldrb	r3, [r3, #1]
 8011dc8:	2b03      	cmp	r3, #3
 8011dca:	d007      	beq.n	8011ddc <USBD_StdEPReq+0x5c>
 8011dcc:	2b03      	cmp	r3, #3
 8011dce:	f300 8124 	bgt.w	801201a <USBD_StdEPReq+0x29a>
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d07b      	beq.n	8011ece <USBD_StdEPReq+0x14e>
 8011dd6:	2b01      	cmp	r3, #1
 8011dd8:	d03b      	beq.n	8011e52 <USBD_StdEPReq+0xd2>
 8011dda:	e11e      	b.n	801201a <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011de2:	2b02      	cmp	r3, #2
 8011de4:	d002      	beq.n	8011dec <USBD_StdEPReq+0x6c>
 8011de6:	2b03      	cmp	r3, #3
 8011de8:	d016      	beq.n	8011e18 <USBD_StdEPReq+0x98>
 8011dea:	e02c      	b.n	8011e46 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011dec:	7bbb      	ldrb	r3, [r7, #14]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d00d      	beq.n	8011e0e <USBD_StdEPReq+0x8e>
 8011df2:	7bbb      	ldrb	r3, [r7, #14]
 8011df4:	2b80      	cmp	r3, #128	; 0x80
 8011df6:	d00a      	beq.n	8011e0e <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011df8:	7bbb      	ldrb	r3, [r7, #14]
 8011dfa:	4619      	mov	r1, r3
 8011dfc:	6878      	ldr	r0, [r7, #4]
 8011dfe:	f004 f813 	bl	8015e28 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011e02:	2180      	movs	r1, #128	; 0x80
 8011e04:	6878      	ldr	r0, [r7, #4]
 8011e06:	f004 f80f 	bl	8015e28 <USBD_LL_StallEP>
 8011e0a:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011e0c:	e020      	b.n	8011e50 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8011e0e:	6839      	ldr	r1, [r7, #0]
 8011e10:	6878      	ldr	r0, [r7, #4]
 8011e12:	f000 fc3c 	bl	801268e <USBD_CtlError>
        break;
 8011e16:	e01b      	b.n	8011e50 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	885b      	ldrh	r3, [r3, #2]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d10e      	bne.n	8011e3e <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011e20:	7bbb      	ldrb	r3, [r7, #14]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d00b      	beq.n	8011e3e <USBD_StdEPReq+0xbe>
 8011e26:	7bbb      	ldrb	r3, [r7, #14]
 8011e28:	2b80      	cmp	r3, #128	; 0x80
 8011e2a:	d008      	beq.n	8011e3e <USBD_StdEPReq+0xbe>
 8011e2c:	683b      	ldr	r3, [r7, #0]
 8011e2e:	88db      	ldrh	r3, [r3, #6]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d104      	bne.n	8011e3e <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8011e34:	7bbb      	ldrb	r3, [r7, #14]
 8011e36:	4619      	mov	r1, r3
 8011e38:	6878      	ldr	r0, [r7, #4]
 8011e3a:	f003 fff5 	bl	8015e28 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8011e3e:	6878      	ldr	r0, [r7, #4]
 8011e40:	f000 fcf0 	bl	8012824 <USBD_CtlSendStatus>

        break;
 8011e44:	e004      	b.n	8011e50 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8011e46:	6839      	ldr	r1, [r7, #0]
 8011e48:	6878      	ldr	r0, [r7, #4]
 8011e4a:	f000 fc20 	bl	801268e <USBD_CtlError>
        break;
 8011e4e:	bf00      	nop
      }
      break;
 8011e50:	e0e8      	b.n	8012024 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e58:	2b02      	cmp	r3, #2
 8011e5a:	d002      	beq.n	8011e62 <USBD_StdEPReq+0xe2>
 8011e5c:	2b03      	cmp	r3, #3
 8011e5e:	d016      	beq.n	8011e8e <USBD_StdEPReq+0x10e>
 8011e60:	e02e      	b.n	8011ec0 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011e62:	7bbb      	ldrb	r3, [r7, #14]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d00d      	beq.n	8011e84 <USBD_StdEPReq+0x104>
 8011e68:	7bbb      	ldrb	r3, [r7, #14]
 8011e6a:	2b80      	cmp	r3, #128	; 0x80
 8011e6c:	d00a      	beq.n	8011e84 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011e6e:	7bbb      	ldrb	r3, [r7, #14]
 8011e70:	4619      	mov	r1, r3
 8011e72:	6878      	ldr	r0, [r7, #4]
 8011e74:	f003 ffd8 	bl	8015e28 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011e78:	2180      	movs	r1, #128	; 0x80
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f003 ffd4 	bl	8015e28 <USBD_LL_StallEP>
 8011e80:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011e82:	e023      	b.n	8011ecc <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8011e84:	6839      	ldr	r1, [r7, #0]
 8011e86:	6878      	ldr	r0, [r7, #4]
 8011e88:	f000 fc01 	bl	801268e <USBD_CtlError>
        break;
 8011e8c:	e01e      	b.n	8011ecc <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011e8e:	683b      	ldr	r3, [r7, #0]
 8011e90:	885b      	ldrh	r3, [r3, #2]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d119      	bne.n	8011eca <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8011e96:	7bbb      	ldrb	r3, [r7, #14]
 8011e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d004      	beq.n	8011eaa <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011ea0:	7bbb      	ldrb	r3, [r7, #14]
 8011ea2:	4619      	mov	r1, r3
 8011ea4:	6878      	ldr	r0, [r7, #4]
 8011ea6:	f003 ffde 	bl	8015e66 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8011eaa:	6878      	ldr	r0, [r7, #4]
 8011eac:	f000 fcba 	bl	8012824 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011eb6:	689b      	ldr	r3, [r3, #8]
 8011eb8:	6839      	ldr	r1, [r7, #0]
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	4798      	blx	r3
        }
        break;
 8011ebe:	e004      	b.n	8011eca <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8011ec0:	6839      	ldr	r1, [r7, #0]
 8011ec2:	6878      	ldr	r0, [r7, #4]
 8011ec4:	f000 fbe3 	bl	801268e <USBD_CtlError>
        break;
 8011ec8:	e000      	b.n	8011ecc <USBD_StdEPReq+0x14c>
        break;
 8011eca:	bf00      	nop
      }
      break;
 8011ecc:	e0aa      	b.n	8012024 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ed4:	2b02      	cmp	r3, #2
 8011ed6:	d002      	beq.n	8011ede <USBD_StdEPReq+0x15e>
 8011ed8:	2b03      	cmp	r3, #3
 8011eda:	d032      	beq.n	8011f42 <USBD_StdEPReq+0x1c2>
 8011edc:	e097      	b.n	801200e <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011ede:	7bbb      	ldrb	r3, [r7, #14]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d007      	beq.n	8011ef4 <USBD_StdEPReq+0x174>
 8011ee4:	7bbb      	ldrb	r3, [r7, #14]
 8011ee6:	2b80      	cmp	r3, #128	; 0x80
 8011ee8:	d004      	beq.n	8011ef4 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8011eea:	6839      	ldr	r1, [r7, #0]
 8011eec:	6878      	ldr	r0, [r7, #4]
 8011eee:	f000 fbce 	bl	801268e <USBD_CtlError>
          break;
 8011ef2:	e091      	b.n	8012018 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011ef4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	da0b      	bge.n	8011f14 <USBD_StdEPReq+0x194>
 8011efc:	7bbb      	ldrb	r3, [r7, #14]
 8011efe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011f02:	4613      	mov	r3, r2
 8011f04:	009b      	lsls	r3, r3, #2
 8011f06:	4413      	add	r3, r2
 8011f08:	009b      	lsls	r3, r3, #2
 8011f0a:	3310      	adds	r3, #16
 8011f0c:	687a      	ldr	r2, [r7, #4]
 8011f0e:	4413      	add	r3, r2
 8011f10:	3304      	adds	r3, #4
 8011f12:	e00b      	b.n	8011f2c <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011f14:	7bbb      	ldrb	r3, [r7, #14]
 8011f16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011f1a:	4613      	mov	r3, r2
 8011f1c:	009b      	lsls	r3, r3, #2
 8011f1e:	4413      	add	r3, r2
 8011f20:	009b      	lsls	r3, r3, #2
 8011f22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011f26:	687a      	ldr	r2, [r7, #4]
 8011f28:	4413      	add	r3, r2
 8011f2a:	3304      	adds	r3, #4
 8011f2c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8011f2e:	68bb      	ldr	r3, [r7, #8]
 8011f30:	2200      	movs	r2, #0
 8011f32:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011f34:	68bb      	ldr	r3, [r7, #8]
 8011f36:	2202      	movs	r2, #2
 8011f38:	4619      	mov	r1, r3
 8011f3a:	6878      	ldr	r0, [r7, #4]
 8011f3c:	f000 fc18 	bl	8012770 <USBD_CtlSendData>
        break;
 8011f40:	e06a      	b.n	8012018 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8011f42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	da11      	bge.n	8011f6e <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011f4a:	7bbb      	ldrb	r3, [r7, #14]
 8011f4c:	f003 020f 	and.w	r2, r3, #15
 8011f50:	6879      	ldr	r1, [r7, #4]
 8011f52:	4613      	mov	r3, r2
 8011f54:	009b      	lsls	r3, r3, #2
 8011f56:	4413      	add	r3, r2
 8011f58:	009b      	lsls	r3, r3, #2
 8011f5a:	440b      	add	r3, r1
 8011f5c:	3324      	adds	r3, #36	; 0x24
 8011f5e:	881b      	ldrh	r3, [r3, #0]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d117      	bne.n	8011f94 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8011f64:	6839      	ldr	r1, [r7, #0]
 8011f66:	6878      	ldr	r0, [r7, #4]
 8011f68:	f000 fb91 	bl	801268e <USBD_CtlError>
            break;
 8011f6c:	e054      	b.n	8012018 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011f6e:	7bbb      	ldrb	r3, [r7, #14]
 8011f70:	f003 020f 	and.w	r2, r3, #15
 8011f74:	6879      	ldr	r1, [r7, #4]
 8011f76:	4613      	mov	r3, r2
 8011f78:	009b      	lsls	r3, r3, #2
 8011f7a:	4413      	add	r3, r2
 8011f7c:	009b      	lsls	r3, r3, #2
 8011f7e:	440b      	add	r3, r1
 8011f80:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011f84:	881b      	ldrh	r3, [r3, #0]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d104      	bne.n	8011f94 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8011f8a:	6839      	ldr	r1, [r7, #0]
 8011f8c:	6878      	ldr	r0, [r7, #4]
 8011f8e:	f000 fb7e 	bl	801268e <USBD_CtlError>
            break;
 8011f92:	e041      	b.n	8012018 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011f94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	da0b      	bge.n	8011fb4 <USBD_StdEPReq+0x234>
 8011f9c:	7bbb      	ldrb	r3, [r7, #14]
 8011f9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011fa2:	4613      	mov	r3, r2
 8011fa4:	009b      	lsls	r3, r3, #2
 8011fa6:	4413      	add	r3, r2
 8011fa8:	009b      	lsls	r3, r3, #2
 8011faa:	3310      	adds	r3, #16
 8011fac:	687a      	ldr	r2, [r7, #4]
 8011fae:	4413      	add	r3, r2
 8011fb0:	3304      	adds	r3, #4
 8011fb2:	e00b      	b.n	8011fcc <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011fb4:	7bbb      	ldrb	r3, [r7, #14]
 8011fb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011fba:	4613      	mov	r3, r2
 8011fbc:	009b      	lsls	r3, r3, #2
 8011fbe:	4413      	add	r3, r2
 8011fc0:	009b      	lsls	r3, r3, #2
 8011fc2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011fc6:	687a      	ldr	r2, [r7, #4]
 8011fc8:	4413      	add	r3, r2
 8011fca:	3304      	adds	r3, #4
 8011fcc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011fce:	7bbb      	ldrb	r3, [r7, #14]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d002      	beq.n	8011fda <USBD_StdEPReq+0x25a>
 8011fd4:	7bbb      	ldrb	r3, [r7, #14]
 8011fd6:	2b80      	cmp	r3, #128	; 0x80
 8011fd8:	d103      	bne.n	8011fe2 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8011fda:	68bb      	ldr	r3, [r7, #8]
 8011fdc:	2200      	movs	r2, #0
 8011fde:	601a      	str	r2, [r3, #0]
 8011fe0:	e00e      	b.n	8012000 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011fe2:	7bbb      	ldrb	r3, [r7, #14]
 8011fe4:	4619      	mov	r1, r3
 8011fe6:	6878      	ldr	r0, [r7, #4]
 8011fe8:	f003 ff5c 	bl	8015ea4 <USBD_LL_IsStallEP>
 8011fec:	4603      	mov	r3, r0
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d003      	beq.n	8011ffa <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8011ff2:	68bb      	ldr	r3, [r7, #8]
 8011ff4:	2201      	movs	r2, #1
 8011ff6:	601a      	str	r2, [r3, #0]
 8011ff8:	e002      	b.n	8012000 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012000:	68bb      	ldr	r3, [r7, #8]
 8012002:	2202      	movs	r2, #2
 8012004:	4619      	mov	r1, r3
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f000 fbb2 	bl	8012770 <USBD_CtlSendData>
          break;
 801200c:	e004      	b.n	8012018 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 801200e:	6839      	ldr	r1, [r7, #0]
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f000 fb3c 	bl	801268e <USBD_CtlError>
        break;
 8012016:	bf00      	nop
      }
      break;
 8012018:	e004      	b.n	8012024 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 801201a:	6839      	ldr	r1, [r7, #0]
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	f000 fb36 	bl	801268e <USBD_CtlError>
      break;
 8012022:	bf00      	nop
    }
    break;
 8012024:	e004      	b.n	8012030 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8012026:	6839      	ldr	r1, [r7, #0]
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	f000 fb30 	bl	801268e <USBD_CtlError>
    break;
 801202e:	bf00      	nop
  }

  return ret;
 8012030:	7bfb      	ldrb	r3, [r7, #15]
}
 8012032:	4618      	mov	r0, r3
 8012034:	3710      	adds	r7, #16
 8012036:	46bd      	mov	sp, r7
 8012038:	bd80      	pop	{r7, pc}
	...

0801203c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b084      	sub	sp, #16
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
 8012044:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012046:	2300      	movs	r3, #0
 8012048:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801204a:	2300      	movs	r3, #0
 801204c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801204e:	2300      	movs	r3, #0
 8012050:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	885b      	ldrh	r3, [r3, #2]
 8012056:	0a1b      	lsrs	r3, r3, #8
 8012058:	b29b      	uxth	r3, r3
 801205a:	3b01      	subs	r3, #1
 801205c:	2b06      	cmp	r3, #6
 801205e:	f200 8128 	bhi.w	80122b2 <USBD_GetDescriptor+0x276>
 8012062:	a201      	add	r2, pc, #4	; (adr r2, 8012068 <USBD_GetDescriptor+0x2c>)
 8012064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012068:	08012085 	.word	0x08012085
 801206c:	0801209d 	.word	0x0801209d
 8012070:	080120dd 	.word	0x080120dd
 8012074:	080122b3 	.word	0x080122b3
 8012078:	080122b3 	.word	0x080122b3
 801207c:	08012253 	.word	0x08012253
 8012080:	0801227f 	.word	0x0801227f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	687a      	ldr	r2, [r7, #4]
 801208e:	7c12      	ldrb	r2, [r2, #16]
 8012090:	f107 0108 	add.w	r1, r7, #8
 8012094:	4610      	mov	r0, r2
 8012096:	4798      	blx	r3
 8012098:	60f8      	str	r0, [r7, #12]
    break;
 801209a:	e112      	b.n	80122c2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	7c1b      	ldrb	r3, [r3, #16]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d10d      	bne.n	80120c0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120ac:	f107 0208 	add.w	r2, r7, #8
 80120b0:	4610      	mov	r0, r2
 80120b2:	4798      	blx	r3
 80120b4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	3301      	adds	r3, #1
 80120ba:	2202      	movs	r2, #2
 80120bc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80120be:	e100      	b.n	80122c2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120c8:	f107 0208 	add.w	r2, r7, #8
 80120cc:	4610      	mov	r0, r2
 80120ce:	4798      	blx	r3
 80120d0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	3301      	adds	r3, #1
 80120d6:	2202      	movs	r2, #2
 80120d8:	701a      	strb	r2, [r3, #0]
    break;
 80120da:	e0f2      	b.n	80122c2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80120dc:	683b      	ldr	r3, [r7, #0]
 80120de:	885b      	ldrh	r3, [r3, #2]
 80120e0:	b2db      	uxtb	r3, r3
 80120e2:	2b05      	cmp	r3, #5
 80120e4:	f200 80ac 	bhi.w	8012240 <USBD_GetDescriptor+0x204>
 80120e8:	a201      	add	r2, pc, #4	; (adr r2, 80120f0 <USBD_GetDescriptor+0xb4>)
 80120ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120ee:	bf00      	nop
 80120f0:	08012109 	.word	0x08012109
 80120f4:	0801213d 	.word	0x0801213d
 80120f8:	08012171 	.word	0x08012171
 80120fc:	080121a5 	.word	0x080121a5
 8012100:	080121d9 	.word	0x080121d9
 8012104:	0801220d 	.word	0x0801220d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801210e:	685b      	ldr	r3, [r3, #4]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d00b      	beq.n	801212c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801211a:	685b      	ldr	r3, [r3, #4]
 801211c:	687a      	ldr	r2, [r7, #4]
 801211e:	7c12      	ldrb	r2, [r2, #16]
 8012120:	f107 0108 	add.w	r1, r7, #8
 8012124:	4610      	mov	r0, r2
 8012126:	4798      	blx	r3
 8012128:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801212a:	e091      	b.n	8012250 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801212c:	6839      	ldr	r1, [r7, #0]
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	f000 faad 	bl	801268e <USBD_CtlError>
        err++;
 8012134:	7afb      	ldrb	r3, [r7, #11]
 8012136:	3301      	adds	r3, #1
 8012138:	72fb      	strb	r3, [r7, #11]
      break;
 801213a:	e089      	b.n	8012250 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012142:	689b      	ldr	r3, [r3, #8]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d00b      	beq.n	8012160 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801214e:	689b      	ldr	r3, [r3, #8]
 8012150:	687a      	ldr	r2, [r7, #4]
 8012152:	7c12      	ldrb	r2, [r2, #16]
 8012154:	f107 0108 	add.w	r1, r7, #8
 8012158:	4610      	mov	r0, r2
 801215a:	4798      	blx	r3
 801215c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801215e:	e077      	b.n	8012250 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012160:	6839      	ldr	r1, [r7, #0]
 8012162:	6878      	ldr	r0, [r7, #4]
 8012164:	f000 fa93 	bl	801268e <USBD_CtlError>
        err++;
 8012168:	7afb      	ldrb	r3, [r7, #11]
 801216a:	3301      	adds	r3, #1
 801216c:	72fb      	strb	r3, [r7, #11]
      break;
 801216e:	e06f      	b.n	8012250 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012176:	68db      	ldr	r3, [r3, #12]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d00b      	beq.n	8012194 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012182:	68db      	ldr	r3, [r3, #12]
 8012184:	687a      	ldr	r2, [r7, #4]
 8012186:	7c12      	ldrb	r2, [r2, #16]
 8012188:	f107 0108 	add.w	r1, r7, #8
 801218c:	4610      	mov	r0, r2
 801218e:	4798      	blx	r3
 8012190:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012192:	e05d      	b.n	8012250 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012194:	6839      	ldr	r1, [r7, #0]
 8012196:	6878      	ldr	r0, [r7, #4]
 8012198:	f000 fa79 	bl	801268e <USBD_CtlError>
        err++;
 801219c:	7afb      	ldrb	r3, [r7, #11]
 801219e:	3301      	adds	r3, #1
 80121a0:	72fb      	strb	r3, [r7, #11]
      break;
 80121a2:	e055      	b.n	8012250 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121aa:	691b      	ldr	r3, [r3, #16]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d00b      	beq.n	80121c8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121b6:	691b      	ldr	r3, [r3, #16]
 80121b8:	687a      	ldr	r2, [r7, #4]
 80121ba:	7c12      	ldrb	r2, [r2, #16]
 80121bc:	f107 0108 	add.w	r1, r7, #8
 80121c0:	4610      	mov	r0, r2
 80121c2:	4798      	blx	r3
 80121c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80121c6:	e043      	b.n	8012250 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80121c8:	6839      	ldr	r1, [r7, #0]
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	f000 fa5f 	bl	801268e <USBD_CtlError>
        err++;
 80121d0:	7afb      	ldrb	r3, [r7, #11]
 80121d2:	3301      	adds	r3, #1
 80121d4:	72fb      	strb	r3, [r7, #11]
      break;
 80121d6:	e03b      	b.n	8012250 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121de:	695b      	ldr	r3, [r3, #20]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d00b      	beq.n	80121fc <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121ea:	695b      	ldr	r3, [r3, #20]
 80121ec:	687a      	ldr	r2, [r7, #4]
 80121ee:	7c12      	ldrb	r2, [r2, #16]
 80121f0:	f107 0108 	add.w	r1, r7, #8
 80121f4:	4610      	mov	r0, r2
 80121f6:	4798      	blx	r3
 80121f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80121fa:	e029      	b.n	8012250 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80121fc:	6839      	ldr	r1, [r7, #0]
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	f000 fa45 	bl	801268e <USBD_CtlError>
        err++;
 8012204:	7afb      	ldrb	r3, [r7, #11]
 8012206:	3301      	adds	r3, #1
 8012208:	72fb      	strb	r3, [r7, #11]
      break;
 801220a:	e021      	b.n	8012250 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012212:	699b      	ldr	r3, [r3, #24]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d00b      	beq.n	8012230 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801221e:	699b      	ldr	r3, [r3, #24]
 8012220:	687a      	ldr	r2, [r7, #4]
 8012222:	7c12      	ldrb	r2, [r2, #16]
 8012224:	f107 0108 	add.w	r1, r7, #8
 8012228:	4610      	mov	r0, r2
 801222a:	4798      	blx	r3
 801222c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801222e:	e00f      	b.n	8012250 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012230:	6839      	ldr	r1, [r7, #0]
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	f000 fa2b 	bl	801268e <USBD_CtlError>
        err++;
 8012238:	7afb      	ldrb	r3, [r7, #11]
 801223a:	3301      	adds	r3, #1
 801223c:	72fb      	strb	r3, [r7, #11]
      break;
 801223e:	e007      	b.n	8012250 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8012240:	6839      	ldr	r1, [r7, #0]
 8012242:	6878      	ldr	r0, [r7, #4]
 8012244:	f000 fa23 	bl	801268e <USBD_CtlError>
      err++;
 8012248:	7afb      	ldrb	r3, [r7, #11]
 801224a:	3301      	adds	r3, #1
 801224c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 801224e:	bf00      	nop
    }
    break;
 8012250:	e037      	b.n	80122c2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	7c1b      	ldrb	r3, [r3, #16]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d109      	bne.n	801226e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012262:	f107 0208 	add.w	r2, r7, #8
 8012266:	4610      	mov	r0, r2
 8012268:	4798      	blx	r3
 801226a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 801226c:	e029      	b.n	80122c2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 801226e:	6839      	ldr	r1, [r7, #0]
 8012270:	6878      	ldr	r0, [r7, #4]
 8012272:	f000 fa0c 	bl	801268e <USBD_CtlError>
      err++;
 8012276:	7afb      	ldrb	r3, [r7, #11]
 8012278:	3301      	adds	r3, #1
 801227a:	72fb      	strb	r3, [r7, #11]
    break;
 801227c:	e021      	b.n	80122c2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	7c1b      	ldrb	r3, [r3, #16]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d10d      	bne.n	80122a2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801228e:	f107 0208 	add.w	r2, r7, #8
 8012292:	4610      	mov	r0, r2
 8012294:	4798      	blx	r3
 8012296:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	3301      	adds	r3, #1
 801229c:	2207      	movs	r2, #7
 801229e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80122a0:	e00f      	b.n	80122c2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80122a2:	6839      	ldr	r1, [r7, #0]
 80122a4:	6878      	ldr	r0, [r7, #4]
 80122a6:	f000 f9f2 	bl	801268e <USBD_CtlError>
      err++;
 80122aa:	7afb      	ldrb	r3, [r7, #11]
 80122ac:	3301      	adds	r3, #1
 80122ae:	72fb      	strb	r3, [r7, #11]
    break;
 80122b0:	e007      	b.n	80122c2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80122b2:	6839      	ldr	r1, [r7, #0]
 80122b4:	6878      	ldr	r0, [r7, #4]
 80122b6:	f000 f9ea 	bl	801268e <USBD_CtlError>
    err++;
 80122ba:	7afb      	ldrb	r3, [r7, #11]
 80122bc:	3301      	adds	r3, #1
 80122be:	72fb      	strb	r3, [r7, #11]
    break;
 80122c0:	bf00      	nop
  }

  if (err != 0U)
 80122c2:	7afb      	ldrb	r3, [r7, #11]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d11e      	bne.n	8012306 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	88db      	ldrh	r3, [r3, #6]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d016      	beq.n	80122fe <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80122d0:	893b      	ldrh	r3, [r7, #8]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d00e      	beq.n	80122f4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80122d6:	683b      	ldr	r3, [r7, #0]
 80122d8:	88da      	ldrh	r2, [r3, #6]
 80122da:	893b      	ldrh	r3, [r7, #8]
 80122dc:	4293      	cmp	r3, r2
 80122de:	bf28      	it	cs
 80122e0:	4613      	movcs	r3, r2
 80122e2:	b29b      	uxth	r3, r3
 80122e4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80122e6:	893b      	ldrh	r3, [r7, #8]
 80122e8:	461a      	mov	r2, r3
 80122ea:	68f9      	ldr	r1, [r7, #12]
 80122ec:	6878      	ldr	r0, [r7, #4]
 80122ee:	f000 fa3f 	bl	8012770 <USBD_CtlSendData>
 80122f2:	e009      	b.n	8012308 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80122f4:	6839      	ldr	r1, [r7, #0]
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f000 f9c9 	bl	801268e <USBD_CtlError>
 80122fc:	e004      	b.n	8012308 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f000 fa90 	bl	8012824 <USBD_CtlSendStatus>
 8012304:	e000      	b.n	8012308 <USBD_GetDescriptor+0x2cc>
    return;
 8012306:	bf00      	nop
    }
  }
}
 8012308:	3710      	adds	r7, #16
 801230a:	46bd      	mov	sp, r7
 801230c:	bd80      	pop	{r7, pc}
 801230e:	bf00      	nop

08012310 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b084      	sub	sp, #16
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
 8012318:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801231a:	683b      	ldr	r3, [r7, #0]
 801231c:	889b      	ldrh	r3, [r3, #4]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d130      	bne.n	8012384 <USBD_SetAddress+0x74>
 8012322:	683b      	ldr	r3, [r7, #0]
 8012324:	88db      	ldrh	r3, [r3, #6]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d12c      	bne.n	8012384 <USBD_SetAddress+0x74>
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	885b      	ldrh	r3, [r3, #2]
 801232e:	2b7f      	cmp	r3, #127	; 0x7f
 8012330:	d828      	bhi.n	8012384 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012332:	683b      	ldr	r3, [r7, #0]
 8012334:	885b      	ldrh	r3, [r3, #2]
 8012336:	b2db      	uxtb	r3, r3
 8012338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801233c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012344:	2b03      	cmp	r3, #3
 8012346:	d104      	bne.n	8012352 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8012348:	6839      	ldr	r1, [r7, #0]
 801234a:	6878      	ldr	r0, [r7, #4]
 801234c:	f000 f99f 	bl	801268e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012350:	e01d      	b.n	801238e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	7bfa      	ldrb	r2, [r7, #15]
 8012356:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801235a:	7bfb      	ldrb	r3, [r7, #15]
 801235c:	4619      	mov	r1, r3
 801235e:	6878      	ldr	r0, [r7, #4]
 8012360:	f003 fdcc 	bl	8015efc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012364:	6878      	ldr	r0, [r7, #4]
 8012366:	f000 fa5d 	bl	8012824 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801236a:	7bfb      	ldrb	r3, [r7, #15]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d004      	beq.n	801237a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	2202      	movs	r2, #2
 8012374:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012378:	e009      	b.n	801238e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	2201      	movs	r2, #1
 801237e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012382:	e004      	b.n	801238e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012384:	6839      	ldr	r1, [r7, #0]
 8012386:	6878      	ldr	r0, [r7, #4]
 8012388:	f000 f981 	bl	801268e <USBD_CtlError>
  }
}
 801238c:	bf00      	nop
 801238e:	bf00      	nop
 8012390:	3710      	adds	r7, #16
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}
	...

08012398 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b084      	sub	sp, #16
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
 80123a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80123a2:	2300      	movs	r3, #0
 80123a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	885b      	ldrh	r3, [r3, #2]
 80123aa:	b2da      	uxtb	r2, r3
 80123ac:	4b4b      	ldr	r3, [pc, #300]	; (80124dc <USBD_SetConfig+0x144>)
 80123ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80123b0:	4b4a      	ldr	r3, [pc, #296]	; (80124dc <USBD_SetConfig+0x144>)
 80123b2:	781b      	ldrb	r3, [r3, #0]
 80123b4:	2b01      	cmp	r3, #1
 80123b6:	d905      	bls.n	80123c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80123b8:	6839      	ldr	r1, [r7, #0]
 80123ba:	6878      	ldr	r0, [r7, #4]
 80123bc:	f000 f967 	bl	801268e <USBD_CtlError>
    return USBD_FAIL;
 80123c0:	2303      	movs	r3, #3
 80123c2:	e087      	b.n	80124d4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123ca:	2b02      	cmp	r3, #2
 80123cc:	d002      	beq.n	80123d4 <USBD_SetConfig+0x3c>
 80123ce:	2b03      	cmp	r3, #3
 80123d0:	d025      	beq.n	801241e <USBD_SetConfig+0x86>
 80123d2:	e071      	b.n	80124b8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80123d4:	4b41      	ldr	r3, [pc, #260]	; (80124dc <USBD_SetConfig+0x144>)
 80123d6:	781b      	ldrb	r3, [r3, #0]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d01c      	beq.n	8012416 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80123dc:	4b3f      	ldr	r3, [pc, #252]	; (80124dc <USBD_SetConfig+0x144>)
 80123de:	781b      	ldrb	r3, [r3, #0]
 80123e0:	461a      	mov	r2, r3
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80123e6:	4b3d      	ldr	r3, [pc, #244]	; (80124dc <USBD_SetConfig+0x144>)
 80123e8:	781b      	ldrb	r3, [r3, #0]
 80123ea:	4619      	mov	r1, r3
 80123ec:	6878      	ldr	r0, [r7, #4]
 80123ee:	f7ff f999 	bl	8011724 <USBD_SetClassConfig>
 80123f2:	4603      	mov	r3, r0
 80123f4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80123f6:	7bfb      	ldrb	r3, [r7, #15]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d004      	beq.n	8012406 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80123fc:	6839      	ldr	r1, [r7, #0]
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f000 f945 	bl	801268e <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8012404:	e065      	b.n	80124d2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8012406:	6878      	ldr	r0, [r7, #4]
 8012408:	f000 fa0c 	bl	8012824 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2203      	movs	r2, #3
 8012410:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8012414:	e05d      	b.n	80124d2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8012416:	6878      	ldr	r0, [r7, #4]
 8012418:	f000 fa04 	bl	8012824 <USBD_CtlSendStatus>
    break;
 801241c:	e059      	b.n	80124d2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 801241e:	4b2f      	ldr	r3, [pc, #188]	; (80124dc <USBD_SetConfig+0x144>)
 8012420:	781b      	ldrb	r3, [r3, #0]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d112      	bne.n	801244c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	2202      	movs	r2, #2
 801242a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 801242e:	4b2b      	ldr	r3, [pc, #172]	; (80124dc <USBD_SetConfig+0x144>)
 8012430:	781b      	ldrb	r3, [r3, #0]
 8012432:	461a      	mov	r2, r3
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012438:	4b28      	ldr	r3, [pc, #160]	; (80124dc <USBD_SetConfig+0x144>)
 801243a:	781b      	ldrb	r3, [r3, #0]
 801243c:	4619      	mov	r1, r3
 801243e:	6878      	ldr	r0, [r7, #4]
 8012440:	f7ff f98c 	bl	801175c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f000 f9ed 	bl	8012824 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801244a:	e042      	b.n	80124d2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 801244c:	4b23      	ldr	r3, [pc, #140]	; (80124dc <USBD_SetConfig+0x144>)
 801244e:	781b      	ldrb	r3, [r3, #0]
 8012450:	461a      	mov	r2, r3
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	685b      	ldr	r3, [r3, #4]
 8012456:	429a      	cmp	r2, r3
 8012458:	d02a      	beq.n	80124b0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	685b      	ldr	r3, [r3, #4]
 801245e:	b2db      	uxtb	r3, r3
 8012460:	4619      	mov	r1, r3
 8012462:	6878      	ldr	r0, [r7, #4]
 8012464:	f7ff f97a 	bl	801175c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8012468:	4b1c      	ldr	r3, [pc, #112]	; (80124dc <USBD_SetConfig+0x144>)
 801246a:	781b      	ldrb	r3, [r3, #0]
 801246c:	461a      	mov	r2, r3
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8012472:	4b1a      	ldr	r3, [pc, #104]	; (80124dc <USBD_SetConfig+0x144>)
 8012474:	781b      	ldrb	r3, [r3, #0]
 8012476:	4619      	mov	r1, r3
 8012478:	6878      	ldr	r0, [r7, #4]
 801247a:	f7ff f953 	bl	8011724 <USBD_SetClassConfig>
 801247e:	4603      	mov	r3, r0
 8012480:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8012482:	7bfb      	ldrb	r3, [r7, #15]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d00f      	beq.n	80124a8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8012488:	6839      	ldr	r1, [r7, #0]
 801248a:	6878      	ldr	r0, [r7, #4]
 801248c:	f000 f8ff 	bl	801268e <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	685b      	ldr	r3, [r3, #4]
 8012494:	b2db      	uxtb	r3, r3
 8012496:	4619      	mov	r1, r3
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f7ff f95f 	bl	801175c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2202      	movs	r2, #2
 80124a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80124a6:	e014      	b.n	80124d2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80124a8:	6878      	ldr	r0, [r7, #4]
 80124aa:	f000 f9bb 	bl	8012824 <USBD_CtlSendStatus>
    break;
 80124ae:	e010      	b.n	80124d2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80124b0:	6878      	ldr	r0, [r7, #4]
 80124b2:	f000 f9b7 	bl	8012824 <USBD_CtlSendStatus>
    break;
 80124b6:	e00c      	b.n	80124d2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80124b8:	6839      	ldr	r1, [r7, #0]
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	f000 f8e7 	bl	801268e <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80124c0:	4b06      	ldr	r3, [pc, #24]	; (80124dc <USBD_SetConfig+0x144>)
 80124c2:	781b      	ldrb	r3, [r3, #0]
 80124c4:	4619      	mov	r1, r3
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	f7ff f948 	bl	801175c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80124cc:	2303      	movs	r3, #3
 80124ce:	73fb      	strb	r3, [r7, #15]
    break;
 80124d0:	bf00      	nop
  }

  return ret;
 80124d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80124d4:	4618      	mov	r0, r3
 80124d6:	3710      	adds	r7, #16
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}
 80124dc:	20001010 	.word	0x20001010

080124e0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b082      	sub	sp, #8
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
 80124e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80124ea:	683b      	ldr	r3, [r7, #0]
 80124ec:	88db      	ldrh	r3, [r3, #6]
 80124ee:	2b01      	cmp	r3, #1
 80124f0:	d004      	beq.n	80124fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80124f2:	6839      	ldr	r1, [r7, #0]
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f000 f8ca 	bl	801268e <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80124fa:	e022      	b.n	8012542 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012502:	2b02      	cmp	r3, #2
 8012504:	dc02      	bgt.n	801250c <USBD_GetConfig+0x2c>
 8012506:	2b00      	cmp	r3, #0
 8012508:	dc03      	bgt.n	8012512 <USBD_GetConfig+0x32>
 801250a:	e015      	b.n	8012538 <USBD_GetConfig+0x58>
 801250c:	2b03      	cmp	r3, #3
 801250e:	d00b      	beq.n	8012528 <USBD_GetConfig+0x48>
 8012510:	e012      	b.n	8012538 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	2200      	movs	r2, #0
 8012516:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	3308      	adds	r3, #8
 801251c:	2201      	movs	r2, #1
 801251e:	4619      	mov	r1, r3
 8012520:	6878      	ldr	r0, [r7, #4]
 8012522:	f000 f925 	bl	8012770 <USBD_CtlSendData>
      break;
 8012526:	e00c      	b.n	8012542 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	3304      	adds	r3, #4
 801252c:	2201      	movs	r2, #1
 801252e:	4619      	mov	r1, r3
 8012530:	6878      	ldr	r0, [r7, #4]
 8012532:	f000 f91d 	bl	8012770 <USBD_CtlSendData>
      break;
 8012536:	e004      	b.n	8012542 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8012538:	6839      	ldr	r1, [r7, #0]
 801253a:	6878      	ldr	r0, [r7, #4]
 801253c:	f000 f8a7 	bl	801268e <USBD_CtlError>
      break;
 8012540:	bf00      	nop
}
 8012542:	bf00      	nop
 8012544:	3708      	adds	r7, #8
 8012546:	46bd      	mov	sp, r7
 8012548:	bd80      	pop	{r7, pc}

0801254a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801254a:	b580      	push	{r7, lr}
 801254c:	b082      	sub	sp, #8
 801254e:	af00      	add	r7, sp, #0
 8012550:	6078      	str	r0, [r7, #4]
 8012552:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801255a:	3b01      	subs	r3, #1
 801255c:	2b02      	cmp	r3, #2
 801255e:	d81e      	bhi.n	801259e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8012560:	683b      	ldr	r3, [r7, #0]
 8012562:	88db      	ldrh	r3, [r3, #6]
 8012564:	2b02      	cmp	r3, #2
 8012566:	d004      	beq.n	8012572 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8012568:	6839      	ldr	r1, [r7, #0]
 801256a:	6878      	ldr	r0, [r7, #4]
 801256c:	f000 f88f 	bl	801268e <USBD_CtlError>
      break;
 8012570:	e01a      	b.n	80125a8 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	2201      	movs	r2, #1
 8012576:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801257e:	2b00      	cmp	r3, #0
 8012580:	d005      	beq.n	801258e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	68db      	ldr	r3, [r3, #12]
 8012586:	f043 0202 	orr.w	r2, r3, #2
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	330c      	adds	r3, #12
 8012592:	2202      	movs	r2, #2
 8012594:	4619      	mov	r1, r3
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	f000 f8ea 	bl	8012770 <USBD_CtlSendData>
    break;
 801259c:	e004      	b.n	80125a8 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 801259e:	6839      	ldr	r1, [r7, #0]
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f000 f874 	bl	801268e <USBD_CtlError>
    break;
 80125a6:	bf00      	nop
  }
}
 80125a8:	bf00      	nop
 80125aa:	3708      	adds	r7, #8
 80125ac:	46bd      	mov	sp, r7
 80125ae:	bd80      	pop	{r7, pc}

080125b0 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b082      	sub	sp, #8
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80125ba:	683b      	ldr	r3, [r7, #0]
 80125bc:	885b      	ldrh	r3, [r3, #2]
 80125be:	2b01      	cmp	r3, #1
 80125c0:	d106      	bne.n	80125d0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	2201      	movs	r2, #1
 80125c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80125ca:	6878      	ldr	r0, [r7, #4]
 80125cc:	f000 f92a 	bl	8012824 <USBD_CtlSendStatus>
  }
}
 80125d0:	bf00      	nop
 80125d2:	3708      	adds	r7, #8
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bd80      	pop	{r7, pc}

080125d8 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b082      	sub	sp, #8
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
 80125e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80125e8:	3b01      	subs	r3, #1
 80125ea:	2b02      	cmp	r3, #2
 80125ec:	d80b      	bhi.n	8012606 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	885b      	ldrh	r3, [r3, #2]
 80125f2:	2b01      	cmp	r3, #1
 80125f4:	d10c      	bne.n	8012610 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	2200      	movs	r2, #0
 80125fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80125fe:	6878      	ldr	r0, [r7, #4]
 8012600:	f000 f910 	bl	8012824 <USBD_CtlSendStatus>
      }
      break;
 8012604:	e004      	b.n	8012610 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8012606:	6839      	ldr	r1, [r7, #0]
 8012608:	6878      	ldr	r0, [r7, #4]
 801260a:	f000 f840 	bl	801268e <USBD_CtlError>
      break;
 801260e:	e000      	b.n	8012612 <USBD_ClrFeature+0x3a>
      break;
 8012610:	bf00      	nop
  }
}
 8012612:	bf00      	nop
 8012614:	3708      	adds	r7, #8
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}

0801261a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801261a:	b580      	push	{r7, lr}
 801261c:	b084      	sub	sp, #16
 801261e:	af00      	add	r7, sp, #0
 8012620:	6078      	str	r0, [r7, #4]
 8012622:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012624:	683b      	ldr	r3, [r7, #0]
 8012626:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	781a      	ldrb	r2, [r3, #0]
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	3301      	adds	r3, #1
 8012634:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	781a      	ldrb	r2, [r3, #0]
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	3301      	adds	r3, #1
 8012642:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012644:	68f8      	ldr	r0, [r7, #12]
 8012646:	f7ff fac6 	bl	8011bd6 <SWAPBYTE>
 801264a:	4603      	mov	r3, r0
 801264c:	461a      	mov	r2, r3
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	3301      	adds	r3, #1
 8012656:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	3301      	adds	r3, #1
 801265c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801265e:	68f8      	ldr	r0, [r7, #12]
 8012660:	f7ff fab9 	bl	8011bd6 <SWAPBYTE>
 8012664:	4603      	mov	r3, r0
 8012666:	461a      	mov	r2, r3
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	3301      	adds	r3, #1
 8012670:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	3301      	adds	r3, #1
 8012676:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012678:	68f8      	ldr	r0, [r7, #12]
 801267a:	f7ff faac 	bl	8011bd6 <SWAPBYTE>
 801267e:	4603      	mov	r3, r0
 8012680:	461a      	mov	r2, r3
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	80da      	strh	r2, [r3, #6]
}
 8012686:	bf00      	nop
 8012688:	3710      	adds	r7, #16
 801268a:	46bd      	mov	sp, r7
 801268c:	bd80      	pop	{r7, pc}

0801268e <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801268e:	b580      	push	{r7, lr}
 8012690:	b082      	sub	sp, #8
 8012692:	af00      	add	r7, sp, #0
 8012694:	6078      	str	r0, [r7, #4]
 8012696:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012698:	2180      	movs	r1, #128	; 0x80
 801269a:	6878      	ldr	r0, [r7, #4]
 801269c:	f003 fbc4 	bl	8015e28 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80126a0:	2100      	movs	r1, #0
 80126a2:	6878      	ldr	r0, [r7, #4]
 80126a4:	f003 fbc0 	bl	8015e28 <USBD_LL_StallEP>
}
 80126a8:	bf00      	nop
 80126aa:	3708      	adds	r7, #8
 80126ac:	46bd      	mov	sp, r7
 80126ae:	bd80      	pop	{r7, pc}

080126b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b086      	sub	sp, #24
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	60f8      	str	r0, [r7, #12]
 80126b8:	60b9      	str	r1, [r7, #8]
 80126ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80126bc:	2300      	movs	r3, #0
 80126be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d036      	beq.n	8012734 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80126ca:	6938      	ldr	r0, [r7, #16]
 80126cc:	f000 f836 	bl	801273c <USBD_GetLen>
 80126d0:	4603      	mov	r3, r0
 80126d2:	3301      	adds	r3, #1
 80126d4:	b29b      	uxth	r3, r3
 80126d6:	005b      	lsls	r3, r3, #1
 80126d8:	b29a      	uxth	r2, r3
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80126de:	7dfb      	ldrb	r3, [r7, #23]
 80126e0:	68ba      	ldr	r2, [r7, #8]
 80126e2:	4413      	add	r3, r2
 80126e4:	687a      	ldr	r2, [r7, #4]
 80126e6:	7812      	ldrb	r2, [r2, #0]
 80126e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80126ea:	7dfb      	ldrb	r3, [r7, #23]
 80126ec:	3301      	adds	r3, #1
 80126ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80126f0:	7dfb      	ldrb	r3, [r7, #23]
 80126f2:	68ba      	ldr	r2, [r7, #8]
 80126f4:	4413      	add	r3, r2
 80126f6:	2203      	movs	r2, #3
 80126f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80126fa:	7dfb      	ldrb	r3, [r7, #23]
 80126fc:	3301      	adds	r3, #1
 80126fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012700:	e013      	b.n	801272a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012702:	7dfb      	ldrb	r3, [r7, #23]
 8012704:	68ba      	ldr	r2, [r7, #8]
 8012706:	4413      	add	r3, r2
 8012708:	693a      	ldr	r2, [r7, #16]
 801270a:	7812      	ldrb	r2, [r2, #0]
 801270c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801270e:	693b      	ldr	r3, [r7, #16]
 8012710:	3301      	adds	r3, #1
 8012712:	613b      	str	r3, [r7, #16]
    idx++;
 8012714:	7dfb      	ldrb	r3, [r7, #23]
 8012716:	3301      	adds	r3, #1
 8012718:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801271a:	7dfb      	ldrb	r3, [r7, #23]
 801271c:	68ba      	ldr	r2, [r7, #8]
 801271e:	4413      	add	r3, r2
 8012720:	2200      	movs	r2, #0
 8012722:	701a      	strb	r2, [r3, #0]
    idx++;
 8012724:	7dfb      	ldrb	r3, [r7, #23]
 8012726:	3301      	adds	r3, #1
 8012728:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801272a:	693b      	ldr	r3, [r7, #16]
 801272c:	781b      	ldrb	r3, [r3, #0]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d1e7      	bne.n	8012702 <USBD_GetString+0x52>
 8012732:	e000      	b.n	8012736 <USBD_GetString+0x86>
    return;
 8012734:	bf00      	nop
  }
}
 8012736:	3718      	adds	r7, #24
 8012738:	46bd      	mov	sp, r7
 801273a:	bd80      	pop	{r7, pc}

0801273c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801273c:	b480      	push	{r7}
 801273e:	b085      	sub	sp, #20
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012744:	2300      	movs	r3, #0
 8012746:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801274c:	e005      	b.n	801275a <USBD_GetLen+0x1e>
  {
    len++;
 801274e:	7bfb      	ldrb	r3, [r7, #15]
 8012750:	3301      	adds	r3, #1
 8012752:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012754:	68bb      	ldr	r3, [r7, #8]
 8012756:	3301      	adds	r3, #1
 8012758:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801275a:	68bb      	ldr	r3, [r7, #8]
 801275c:	781b      	ldrb	r3, [r3, #0]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d1f5      	bne.n	801274e <USBD_GetLen+0x12>
  }

  return len;
 8012762:	7bfb      	ldrb	r3, [r7, #15]
}
 8012764:	4618      	mov	r0, r3
 8012766:	3714      	adds	r7, #20
 8012768:	46bd      	mov	sp, r7
 801276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276e:	4770      	bx	lr

08012770 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b084      	sub	sp, #16
 8012774:	af00      	add	r7, sp, #0
 8012776:	60f8      	str	r0, [r7, #12]
 8012778:	60b9      	str	r1, [r7, #8]
 801277a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	2202      	movs	r2, #2
 8012780:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	687a      	ldr	r2, [r7, #4]
 8012788:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	687a      	ldr	r2, [r7, #4]
 801278e:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	68ba      	ldr	r2, [r7, #8]
 8012794:	2100      	movs	r1, #0
 8012796:	68f8      	ldr	r0, [r7, #12]
 8012798:	f003 fbcf 	bl	8015f3a <USBD_LL_Transmit>

  return USBD_OK;
 801279c:	2300      	movs	r3, #0
}
 801279e:	4618      	mov	r0, r3
 80127a0:	3710      	adds	r7, #16
 80127a2:	46bd      	mov	sp, r7
 80127a4:	bd80      	pop	{r7, pc}

080127a6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80127a6:	b580      	push	{r7, lr}
 80127a8:	b084      	sub	sp, #16
 80127aa:	af00      	add	r7, sp, #0
 80127ac:	60f8      	str	r0, [r7, #12]
 80127ae:	60b9      	str	r1, [r7, #8]
 80127b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	68ba      	ldr	r2, [r7, #8]
 80127b6:	2100      	movs	r1, #0
 80127b8:	68f8      	ldr	r0, [r7, #12]
 80127ba:	f003 fbbe 	bl	8015f3a <USBD_LL_Transmit>

  return USBD_OK;
 80127be:	2300      	movs	r3, #0
}
 80127c0:	4618      	mov	r0, r3
 80127c2:	3710      	adds	r7, #16
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}

080127c8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b084      	sub	sp, #16
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	60f8      	str	r0, [r7, #12]
 80127d0:	60b9      	str	r1, [r7, #8]
 80127d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	2203      	movs	r2, #3
 80127d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	687a      	ldr	r2, [r7, #4]
 80127e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	687a      	ldr	r2, [r7, #4]
 80127e8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	68ba      	ldr	r2, [r7, #8]
 80127f0:	2100      	movs	r1, #0
 80127f2:	68f8      	ldr	r0, [r7, #12]
 80127f4:	f003 fbc2 	bl	8015f7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80127f8:	2300      	movs	r3, #0
}
 80127fa:	4618      	mov	r0, r3
 80127fc:	3710      	adds	r7, #16
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}

08012802 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012802:	b580      	push	{r7, lr}
 8012804:	b084      	sub	sp, #16
 8012806:	af00      	add	r7, sp, #0
 8012808:	60f8      	str	r0, [r7, #12]
 801280a:	60b9      	str	r1, [r7, #8]
 801280c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	68ba      	ldr	r2, [r7, #8]
 8012812:	2100      	movs	r1, #0
 8012814:	68f8      	ldr	r0, [r7, #12]
 8012816:	f003 fbb1 	bl	8015f7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801281a:	2300      	movs	r3, #0
}
 801281c:	4618      	mov	r0, r3
 801281e:	3710      	adds	r7, #16
 8012820:	46bd      	mov	sp, r7
 8012822:	bd80      	pop	{r7, pc}

08012824 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b082      	sub	sp, #8
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	2204      	movs	r2, #4
 8012830:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012834:	2300      	movs	r3, #0
 8012836:	2200      	movs	r2, #0
 8012838:	2100      	movs	r1, #0
 801283a:	6878      	ldr	r0, [r7, #4]
 801283c:	f003 fb7d 	bl	8015f3a <USBD_LL_Transmit>

  return USBD_OK;
 8012840:	2300      	movs	r3, #0
}
 8012842:	4618      	mov	r0, r3
 8012844:	3708      	adds	r7, #8
 8012846:	46bd      	mov	sp, r7
 8012848:	bd80      	pop	{r7, pc}

0801284a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801284a:	b580      	push	{r7, lr}
 801284c:	b082      	sub	sp, #8
 801284e:	af00      	add	r7, sp, #0
 8012850:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	2205      	movs	r2, #5
 8012856:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801285a:	2300      	movs	r3, #0
 801285c:	2200      	movs	r2, #0
 801285e:	2100      	movs	r1, #0
 8012860:	6878      	ldr	r0, [r7, #4]
 8012862:	f003 fb8b 	bl	8015f7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012866:	2300      	movs	r3, #0
}
 8012868:	4618      	mov	r0, r3
 801286a:	3708      	adds	r7, #8
 801286c:	46bd      	mov	sp, r7
 801286e:	bd80      	pop	{r7, pc}

08012870 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8012870:	b480      	push	{r7}
 8012872:	b085      	sub	sp, #20
 8012874:	af00      	add	r7, sp, #0
 8012876:	4603      	mov	r3, r0
 8012878:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801287a:	2300      	movs	r3, #0
 801287c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801287e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012882:	2b84      	cmp	r3, #132	; 0x84
 8012884:	d005      	beq.n	8012892 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8012886:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	4413      	add	r3, r2
 801288e:	3303      	adds	r3, #3
 8012890:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012892:	68fb      	ldr	r3, [r7, #12]
}
 8012894:	4618      	mov	r0, r3
 8012896:	3714      	adds	r7, #20
 8012898:	46bd      	mov	sp, r7
 801289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289e:	4770      	bx	lr

080128a0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80128a0:	b480      	push	{r7}
 80128a2:	b083      	sub	sp, #12
 80128a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80128a6:	f3ef 8305 	mrs	r3, IPSR
 80128aa:	607b      	str	r3, [r7, #4]
  return(result);
 80128ac:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	bf14      	ite	ne
 80128b2:	2301      	movne	r3, #1
 80128b4:	2300      	moveq	r3, #0
 80128b6:	b2db      	uxtb	r3, r3
}
 80128b8:	4618      	mov	r0, r3
 80128ba:	370c      	adds	r7, #12
 80128bc:	46bd      	mov	sp, r7
 80128be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c2:	4770      	bx	lr

080128c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80128c8:	f001 fb4c 	bl	8013f64 <vTaskStartScheduler>
  
  return osOK;
 80128cc:	2300      	movs	r3, #0
}
 80128ce:	4618      	mov	r0, r3
 80128d0:	bd80      	pop	{r7, pc}

080128d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80128d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80128d4:	b089      	sub	sp, #36	; 0x24
 80128d6:	af04      	add	r7, sp, #16
 80128d8:	6078      	str	r0, [r7, #4]
 80128da:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	695b      	ldr	r3, [r3, #20]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d020      	beq.n	8012926 <osThreadCreate+0x54>
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	699b      	ldr	r3, [r3, #24]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d01c      	beq.n	8012926 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	685c      	ldr	r4, [r3, #4]
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	681d      	ldr	r5, [r3, #0]
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	691e      	ldr	r6, [r3, #16]
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80128fe:	4618      	mov	r0, r3
 8012900:	f7ff ffb6 	bl	8012870 <makeFreeRtosPriority>
 8012904:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	695b      	ldr	r3, [r3, #20]
 801290a:	687a      	ldr	r2, [r7, #4]
 801290c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801290e:	9202      	str	r2, [sp, #8]
 8012910:	9301      	str	r3, [sp, #4]
 8012912:	9100      	str	r1, [sp, #0]
 8012914:	683b      	ldr	r3, [r7, #0]
 8012916:	4632      	mov	r2, r6
 8012918:	4629      	mov	r1, r5
 801291a:	4620      	mov	r0, r4
 801291c:	f001 f95a 	bl	8013bd4 <xTaskCreateStatic>
 8012920:	4603      	mov	r3, r0
 8012922:	60fb      	str	r3, [r7, #12]
 8012924:	e01c      	b.n	8012960 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	685c      	ldr	r4, [r3, #4]
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012932:	b29e      	uxth	r6, r3
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801293a:	4618      	mov	r0, r3
 801293c:	f7ff ff98 	bl	8012870 <makeFreeRtosPriority>
 8012940:	4602      	mov	r2, r0
 8012942:	f107 030c 	add.w	r3, r7, #12
 8012946:	9301      	str	r3, [sp, #4]
 8012948:	9200      	str	r2, [sp, #0]
 801294a:	683b      	ldr	r3, [r7, #0]
 801294c:	4632      	mov	r2, r6
 801294e:	4629      	mov	r1, r5
 8012950:	4620      	mov	r0, r4
 8012952:	f001 f99c 	bl	8013c8e <xTaskCreate>
 8012956:	4603      	mov	r3, r0
 8012958:	2b01      	cmp	r3, #1
 801295a:	d001      	beq.n	8012960 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801295c:	2300      	movs	r3, #0
 801295e:	e000      	b.n	8012962 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012960:	68fb      	ldr	r3, [r7, #12]
}
 8012962:	4618      	mov	r0, r3
 8012964:	3714      	adds	r7, #20
 8012966:	46bd      	mov	sp, r7
 8012968:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801296a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801296a:	b580      	push	{r7, lr}
 801296c:	b084      	sub	sp, #16
 801296e:	af00      	add	r7, sp, #0
 8012970:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d001      	beq.n	8012980 <osDelay+0x16>
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	e000      	b.n	8012982 <osDelay+0x18>
 8012980:	2301      	movs	r3, #1
 8012982:	4618      	mov	r0, r3
 8012984:	f001 faba 	bl	8013efc <vTaskDelay>
  
  return osOK;
 8012988:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801298a:	4618      	mov	r0, r3
 801298c:	3710      	adds	r7, #16
 801298e:	46bd      	mov	sp, r7
 8012990:	bd80      	pop	{r7, pc}
	...

08012994 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b086      	sub	sp, #24
 8012998:	af02      	add	r7, sp, #8
 801299a:	6078      	str	r0, [r7, #4]
 801299c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801299e:	2300      	movs	r3, #0
 80129a0:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80129a2:	2300      	movs	r3, #0
 80129a4:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80129a6:	f7ff ff7b 	bl	80128a0 <inHandlerMode>
 80129aa:	4603      	mov	r3, r0
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d01c      	beq.n	80129ea <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80129b0:	6839      	ldr	r1, [r7, #0]
 80129b2:	f107 0208 	add.w	r2, r7, #8
 80129b6:	f107 030c 	add.w	r3, r7, #12
 80129ba:	9300      	str	r3, [sp, #0]
 80129bc:	4613      	mov	r3, r2
 80129be:	2201      	movs	r2, #1
 80129c0:	6878      	ldr	r0, [r7, #4]
 80129c2:	f002 f881 	bl	8014ac8 <xTaskGenericNotifyFromISR>
 80129c6:	4603      	mov	r3, r0
 80129c8:	2b01      	cmp	r3, #1
 80129ca:	d002      	beq.n	80129d2 <osSignalSet+0x3e>
      return 0x80000000;
 80129cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80129d0:	e019      	b.n	8012a06 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d015      	beq.n	8012a04 <osSignalSet+0x70>
 80129d8:	4b0d      	ldr	r3, [pc, #52]	; (8012a10 <osSignalSet+0x7c>)
 80129da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129de:	601a      	str	r2, [r3, #0]
 80129e0:	f3bf 8f4f 	dsb	sy
 80129e4:	f3bf 8f6f 	isb	sy
 80129e8:	e00c      	b.n	8012a04 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80129ea:	6839      	ldr	r1, [r7, #0]
 80129ec:	f107 0308 	add.w	r3, r7, #8
 80129f0:	2201      	movs	r2, #1
 80129f2:	6878      	ldr	r0, [r7, #4]
 80129f4:	f001 ffb2 	bl	801495c <xTaskGenericNotify>
 80129f8:	4603      	mov	r3, r0
 80129fa:	2b01      	cmp	r3, #1
 80129fc:	d002      	beq.n	8012a04 <osSignalSet+0x70>
    return 0x80000000;
 80129fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a02:	e000      	b.n	8012a06 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8012a04:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8012a06:	4618      	mov	r0, r3
 8012a08:	3710      	adds	r7, #16
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	bd80      	pop	{r7, pc}
 8012a0e:	bf00      	nop
 8012a10:	e000ed04 	.word	0xe000ed04

08012a14 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8012a14:	b590      	push	{r4, r7, lr}
 8012a16:	b089      	sub	sp, #36	; 0x24
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	60f8      	str	r0, [r7, #12]
 8012a1c:	60b9      	str	r1, [r7, #8]
 8012a1e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8012a20:	2300      	movs	r3, #0
 8012a22:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8012a24:	2300      	movs	r3, #0
 8012a26:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a2e:	d103      	bne.n	8012a38 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8012a30:	f04f 33ff 	mov.w	r3, #4294967295
 8012a34:	61fb      	str	r3, [r7, #28]
 8012a36:	e009      	b.n	8012a4c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d006      	beq.n	8012a4c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8012a42:	69fb      	ldr	r3, [r7, #28]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d101      	bne.n	8012a4c <osSignalWait+0x38>
      ticks = 1;
 8012a48:	2301      	movs	r3, #1
 8012a4a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8012a4c:	f7ff ff28 	bl	80128a0 <inHandlerMode>
 8012a50:	4603      	mov	r3, r0
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d002      	beq.n	8012a5c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8012a56:	2382      	movs	r3, #130	; 0x82
 8012a58:	613b      	str	r3, [r7, #16]
 8012a5a:	e01b      	b.n	8012a94 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8012a5c:	68b9      	ldr	r1, [r7, #8]
 8012a5e:	f107 0310 	add.w	r3, r7, #16
 8012a62:	1d1a      	adds	r2, r3, #4
 8012a64:	69fb      	ldr	r3, [r7, #28]
 8012a66:	2000      	movs	r0, #0
 8012a68:	f001 ff1e 	bl	80148a8 <xTaskNotifyWait>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	2b01      	cmp	r3, #1
 8012a70:	d008      	beq.n	8012a84 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8012a72:	69fb      	ldr	r3, [r7, #28]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d102      	bne.n	8012a7e <osSignalWait+0x6a>
 8012a78:	2300      	movs	r3, #0
 8012a7a:	613b      	str	r3, [r7, #16]
 8012a7c:	e00a      	b.n	8012a94 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8012a7e:	2340      	movs	r3, #64	; 0x40
 8012a80:	613b      	str	r3, [r7, #16]
 8012a82:	e007      	b.n	8012a94 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8012a84:	697b      	ldr	r3, [r7, #20]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	da02      	bge.n	8012a90 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8012a8a:	2386      	movs	r3, #134	; 0x86
 8012a8c:	613b      	str	r3, [r7, #16]
 8012a8e:	e001      	b.n	8012a94 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8012a90:	2308      	movs	r3, #8
 8012a92:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	461c      	mov	r4, r3
 8012a98:	f107 0310 	add.w	r3, r7, #16
 8012a9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012aa0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012aa4:	68f8      	ldr	r0, [r7, #12]
 8012aa6:	3724      	adds	r7, #36	; 0x24
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	bd90      	pop	{r4, r7, pc}

08012aac <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	b082      	sub	sp, #8
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	685b      	ldr	r3, [r3, #4]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d007      	beq.n	8012acc <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	685b      	ldr	r3, [r3, #4]
 8012ac0:	4619      	mov	r1, r3
 8012ac2:	2001      	movs	r0, #1
 8012ac4:	f000 fc65 	bl	8013392 <xQueueCreateMutexStatic>
 8012ac8:	4603      	mov	r3, r0
 8012aca:	e003      	b.n	8012ad4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012acc:	2001      	movs	r0, #1
 8012ace:	f000 fc48 	bl	8013362 <xQueueCreateMutex>
 8012ad2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	3708      	adds	r7, #8
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd80      	pop	{r7, pc}

08012adc <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b086      	sub	sp, #24
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	685b      	ldr	r3, [r3, #4]
 8012ae8:	3303      	adds	r3, #3
 8012aea:	f023 0303 	bic.w	r3, r3, #3
 8012aee:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8012af0:	2014      	movs	r0, #20
 8012af2:	f002 fb79 	bl	80151e8 <pvPortMalloc>
 8012af6:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8012af8:	697b      	ldr	r3, [r7, #20]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d046      	beq.n	8012b8c <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	681a      	ldr	r2, [r3, #0]
 8012b02:	697b      	ldr	r3, [r7, #20]
 8012b04:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8012b06:	68fa      	ldr	r2, [r7, #12]
 8012b08:	697b      	ldr	r3, [r7, #20]
 8012b0a:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8012b0c:	697b      	ldr	r3, [r7, #20]
 8012b0e:	2200      	movs	r2, #0
 8012b10:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	4618      	mov	r0, r3
 8012b18:	f002 fb66 	bl	80151e8 <pvPortMalloc>
 8012b1c:	4602      	mov	r2, r0
 8012b1e:	697b      	ldr	r3, [r7, #20]
 8012b20:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8012b22:	697b      	ldr	r3, [r7, #20]
 8012b24:	685b      	ldr	r3, [r3, #4]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d02b      	beq.n	8012b82 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	68fa      	ldr	r2, [r7, #12]
 8012b30:	fb02 f303 	mul.w	r3, r2, r3
 8012b34:	4618      	mov	r0, r3
 8012b36:	f002 fb57 	bl	80151e8 <pvPortMalloc>
 8012b3a:	4602      	mov	r2, r0
 8012b3c:	697b      	ldr	r3, [r7, #20]
 8012b3e:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8012b40:	697b      	ldr	r3, [r7, #20]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d011      	beq.n	8012b6c <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8012b48:	2300      	movs	r3, #0
 8012b4a:	613b      	str	r3, [r7, #16]
 8012b4c:	e008      	b.n	8012b60 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8012b4e:	697b      	ldr	r3, [r7, #20]
 8012b50:	685a      	ldr	r2, [r3, #4]
 8012b52:	693b      	ldr	r3, [r7, #16]
 8012b54:	4413      	add	r3, r2
 8012b56:	2200      	movs	r2, #0
 8012b58:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8012b5a:	693b      	ldr	r3, [r7, #16]
 8012b5c:	3301      	adds	r3, #1
 8012b5e:	613b      	str	r3, [r7, #16]
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	693a      	ldr	r2, [r7, #16]
 8012b66:	429a      	cmp	r2, r3
 8012b68:	d3f1      	bcc.n	8012b4e <osPoolCreate+0x72>
 8012b6a:	e00f      	b.n	8012b8c <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8012b6c:	697b      	ldr	r3, [r7, #20]
 8012b6e:	685b      	ldr	r3, [r3, #4]
 8012b70:	4618      	mov	r0, r3
 8012b72:	f002 fbfd 	bl	8015370 <vPortFree>
        vPortFree(thePool);
 8012b76:	6978      	ldr	r0, [r7, #20]
 8012b78:	f002 fbfa 	bl	8015370 <vPortFree>
        thePool = NULL;
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	617b      	str	r3, [r7, #20]
 8012b80:	e004      	b.n	8012b8c <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8012b82:	6978      	ldr	r0, [r7, #20]
 8012b84:	f002 fbf4 	bl	8015370 <vPortFree>
      thePool = NULL;
 8012b88:	2300      	movs	r3, #0
 8012b8a:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8012b8c:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8012b8e:	4618      	mov	r0, r3
 8012b90:	3718      	adds	r7, #24
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bd80      	pop	{r7, pc}

08012b96 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8012b96:	b580      	push	{r7, lr}
 8012b98:	b08a      	sub	sp, #40	; 0x28
 8012b9a:	af00      	add	r7, sp, #0
 8012b9c:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8012ba6:	f7ff fe7b 	bl	80128a0 <inHandlerMode>
 8012baa:	4603      	mov	r3, r0
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d00e      	beq.n	8012bce <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012bb0:	f3ef 8211 	mrs	r2, BASEPRI
 8012bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bb8:	f383 8811 	msr	BASEPRI, r3
 8012bbc:	f3bf 8f6f 	isb	sy
 8012bc0:	f3bf 8f4f 	dsb	sy
 8012bc4:	617a      	str	r2, [r7, #20]
 8012bc6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012bc8:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8012bca:	627b      	str	r3, [r7, #36]	; 0x24
 8012bcc:	e001      	b.n	8012bd2 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8012bce:	f002 f9e9 	bl	8014fa4 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	61fb      	str	r3, [r7, #28]
 8012bd6:	e029      	b.n	8012c2c <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	691a      	ldr	r2, [r3, #16]
 8012bdc:	69fb      	ldr	r3, [r7, #28]
 8012bde:	4413      	add	r3, r2
 8012be0:	687a      	ldr	r2, [r7, #4]
 8012be2:	6892      	ldr	r2, [r2, #8]
 8012be4:	fbb3 f1f2 	udiv	r1, r3, r2
 8012be8:	fb02 f201 	mul.w	r2, r2, r1
 8012bec:	1a9b      	subs	r3, r3, r2
 8012bee:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	685a      	ldr	r2, [r3, #4]
 8012bf4:	69bb      	ldr	r3, [r7, #24]
 8012bf6:	4413      	add	r3, r2
 8012bf8:	781b      	ldrb	r3, [r3, #0]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d113      	bne.n	8012c26 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	685a      	ldr	r2, [r3, #4]
 8012c02:	69bb      	ldr	r3, [r7, #24]
 8012c04:	4413      	add	r3, r2
 8012c06:	2201      	movs	r2, #1
 8012c08:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	4619      	mov	r1, r3
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	68db      	ldr	r3, [r3, #12]
 8012c14:	69ba      	ldr	r2, [r7, #24]
 8012c16:	fb02 f303 	mul.w	r3, r2, r3
 8012c1a:	440b      	add	r3, r1
 8012c1c:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	69ba      	ldr	r2, [r7, #24]
 8012c22:	611a      	str	r2, [r3, #16]
      break;
 8012c24:	e007      	b.n	8012c36 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8012c26:	69fb      	ldr	r3, [r7, #28]
 8012c28:	3301      	adds	r3, #1
 8012c2a:	61fb      	str	r3, [r7, #28]
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	689b      	ldr	r3, [r3, #8]
 8012c30:	69fa      	ldr	r2, [r7, #28]
 8012c32:	429a      	cmp	r2, r3
 8012c34:	d3d0      	bcc.n	8012bd8 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8012c36:	f7ff fe33 	bl	80128a0 <inHandlerMode>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d005      	beq.n	8012c4c <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8012c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c42:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012c4a:	e001      	b.n	8012c50 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8012c4c:	f002 f9da 	bl	8015004 <vPortExitCritical>
  }
  
  return p;
 8012c50:	6a3b      	ldr	r3, [r7, #32]
}
 8012c52:	4618      	mov	r0, r3
 8012c54:	3728      	adds	r7, #40	; 0x28
 8012c56:	46bd      	mov	sp, r7
 8012c58:	bd80      	pop	{r7, pc}

08012c5a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8012c5a:	b480      	push	{r7}
 8012c5c:	b085      	sub	sp, #20
 8012c5e:	af00      	add	r7, sp, #0
 8012c60:	6078      	str	r0, [r7, #4]
 8012c62:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d101      	bne.n	8012c6e <osPoolFree+0x14>
    return osErrorParameter;
 8012c6a:	2380      	movs	r3, #128	; 0x80
 8012c6c:	e030      	b.n	8012cd0 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d101      	bne.n	8012c78 <osPoolFree+0x1e>
    return osErrorParameter;
 8012c74:	2380      	movs	r3, #128	; 0x80
 8012c76:	e02b      	b.n	8012cd0 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	683a      	ldr	r2, [r7, #0]
 8012c7e:	429a      	cmp	r2, r3
 8012c80:	d201      	bcs.n	8012c86 <osPoolFree+0x2c>
    return osErrorParameter;
 8012c82:	2380      	movs	r3, #128	; 0x80
 8012c84:	e024      	b.n	8012cd0 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	687a      	ldr	r2, [r7, #4]
 8012c8a:	6812      	ldr	r2, [r2, #0]
 8012c8c:	1a9b      	subs	r3, r3, r2
 8012c8e:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	68da      	ldr	r2, [r3, #12]
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	fbb3 f1f2 	udiv	r1, r3, r2
 8012c9a:	fb02 f201 	mul.w	r2, r2, r1
 8012c9e:	1a9b      	subs	r3, r3, r2
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d001      	beq.n	8012ca8 <osPoolFree+0x4e>
    return osErrorParameter;
 8012ca4:	2380      	movs	r3, #128	; 0x80
 8012ca6:	e013      	b.n	8012cd0 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	68db      	ldr	r3, [r3, #12]
 8012cac:	68fa      	ldr	r2, [r7, #12]
 8012cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8012cb2:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	689b      	ldr	r3, [r3, #8]
 8012cb8:	68fa      	ldr	r2, [r7, #12]
 8012cba:	429a      	cmp	r2, r3
 8012cbc:	d301      	bcc.n	8012cc2 <osPoolFree+0x68>
    return osErrorParameter;
 8012cbe:	2380      	movs	r3, #128	; 0x80
 8012cc0:	e006      	b.n	8012cd0 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	685a      	ldr	r2, [r3, #4]
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	4413      	add	r3, r2
 8012cca:	2200      	movs	r2, #0
 8012ccc:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8012cce:	2300      	movs	r3, #0
}
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	3714      	adds	r7, #20
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cda:	4770      	bx	lr

08012cdc <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8012cdc:	b590      	push	{r4, r7, lr}
 8012cde:	b087      	sub	sp, #28
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
 8012ce4:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	60fb      	str	r3, [r7, #12]
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	685b      	ldr	r3, [r3, #4]
 8012cf0:	613b      	str	r3, [r7, #16]
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	689c      	ldr	r4, [r3, #8]
 8012cfa:	200c      	movs	r0, #12
 8012cfc:	f002 fa74 	bl	80151e8 <pvPortMalloc>
 8012d00:	4603      	mov	r3, r0
 8012d02:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	689b      	ldr	r3, [r3, #8]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d101      	bne.n	8012d12 <osMailCreate+0x36>
    return NULL;
 8012d0e:	2300      	movs	r3, #0
 8012d10:	e038      	b.n	8012d84 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	689b      	ldr	r3, [r3, #8]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	687a      	ldr	r2, [r7, #4]
 8012d1a:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	6818      	ldr	r0, [r3, #0]
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	689b      	ldr	r3, [r3, #8]
 8012d24:	681c      	ldr	r4, [r3, #0]
 8012d26:	2200      	movs	r2, #0
 8012d28:	2104      	movs	r1, #4
 8012d2a:	f000 faa1 	bl	8013270 <xQueueGenericCreate>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	689b      	ldr	r3, [r3, #8]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	685b      	ldr	r3, [r3, #4]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d107      	bne.n	8012d4e <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	689b      	ldr	r3, [r3, #8]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	4618      	mov	r0, r3
 8012d46:	f002 fb13 	bl	8015370 <vPortFree>
    return NULL;
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	e01a      	b.n	8012d84 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	689b      	ldr	r3, [r3, #8]
 8012d52:	681c      	ldr	r4, [r3, #0]
 8012d54:	f107 030c 	add.w	r3, r7, #12
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f7ff febf 	bl	8012adc <osPoolCreate>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	689b      	ldr	r3, [r3, #8]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	689b      	ldr	r3, [r3, #8]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d107      	bne.n	8012d7e <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	689b      	ldr	r3, [r3, #8]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	4618      	mov	r0, r3
 8012d76:	f002 fafb 	bl	8015370 <vPortFree>
    return NULL;
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	e002      	b.n	8012d84 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	689b      	ldr	r3, [r3, #8]
 8012d82:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8012d84:	4618      	mov	r0, r3
 8012d86:	371c      	adds	r7, #28
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bd90      	pop	{r4, r7, pc}

08012d8c <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b084      	sub	sp, #16
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
 8012d94:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d101      	bne.n	8012da0 <osMailAlloc+0x14>
    return NULL;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	e006      	b.n	8012dae <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	689b      	ldr	r3, [r3, #8]
 8012da4:	4618      	mov	r0, r3
 8012da6:	f7ff fef6 	bl	8012b96 <osPoolAlloc>
 8012daa:	60f8      	str	r0, [r7, #12]
  
  return p;
 8012dac:	68fb      	ldr	r3, [r7, #12]
}
 8012dae:	4618      	mov	r0, r3
 8012db0:	3710      	adds	r7, #16
 8012db2:	46bd      	mov	sp, r7
 8012db4:	bd80      	pop	{r7, pc}
	...

08012db8 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b084      	sub	sp, #16
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
 8012dc0:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d101      	bne.n	8012dcc <osMailPut+0x14>
    return osErrorParameter;
 8012dc8:	2380      	movs	r3, #128	; 0x80
 8012dca:	e02c      	b.n	8012e26 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8012dcc:	2300      	movs	r3, #0
 8012dce:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8012dd0:	f7ff fd66 	bl	80128a0 <inHandlerMode>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d018      	beq.n	8012e0c <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	6858      	ldr	r0, [r3, #4]
 8012dde:	f107 020c 	add.w	r2, r7, #12
 8012de2:	4639      	mov	r1, r7
 8012de4:	2300      	movs	r3, #0
 8012de6:	f000 fbed 	bl	80135c4 <xQueueGenericSendFromISR>
 8012dea:	4603      	mov	r3, r0
 8012dec:	2b01      	cmp	r3, #1
 8012dee:	d001      	beq.n	8012df4 <osMailPut+0x3c>
      return osErrorOS;
 8012df0:	23ff      	movs	r3, #255	; 0xff
 8012df2:	e018      	b.n	8012e26 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d014      	beq.n	8012e24 <osMailPut+0x6c>
 8012dfa:	4b0d      	ldr	r3, [pc, #52]	; (8012e30 <osMailPut+0x78>)
 8012dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e00:	601a      	str	r2, [r3, #0]
 8012e02:	f3bf 8f4f 	dsb	sy
 8012e06:	f3bf 8f6f 	isb	sy
 8012e0a:	e00b      	b.n	8012e24 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	6858      	ldr	r0, [r3, #4]
 8012e10:	4639      	mov	r1, r7
 8012e12:	2300      	movs	r3, #0
 8012e14:	2200      	movs	r2, #0
 8012e16:	f000 fad7 	bl	80133c8 <xQueueGenericSend>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	2b01      	cmp	r3, #1
 8012e1e:	d001      	beq.n	8012e24 <osMailPut+0x6c>
      return osErrorOS;
 8012e20:	23ff      	movs	r3, #255	; 0xff
 8012e22:	e000      	b.n	8012e26 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8012e24:	2300      	movs	r3, #0
}
 8012e26:	4618      	mov	r0, r3
 8012e28:	3710      	adds	r7, #16
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	bd80      	pop	{r7, pc}
 8012e2e:	bf00      	nop
 8012e30:	e000ed04 	.word	0xe000ed04

08012e34 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8012e34:	b590      	push	{r4, r7, lr}
 8012e36:	b08b      	sub	sp, #44	; 0x2c
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	60f8      	str	r0, [r7, #12]
 8012e3c:	60b9      	str	r1, [r7, #8]
 8012e3e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8012e44:	68bb      	ldr	r3, [r7, #8]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d10a      	bne.n	8012e60 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8012e4a:	2380      	movs	r3, #128	; 0x80
 8012e4c:	617b      	str	r3, [r7, #20]
    return event;
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	461c      	mov	r4, r3
 8012e52:	f107 0314 	add.w	r3, r7, #20
 8012e56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012e5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012e5e:	e056      	b.n	8012f0e <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012e60:	2300      	movs	r3, #0
 8012e62:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012e64:	2300      	movs	r3, #0
 8012e66:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e6e:	d103      	bne.n	8012e78 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8012e70:	f04f 33ff 	mov.w	r3, #4294967295
 8012e74:	627b      	str	r3, [r7, #36]	; 0x24
 8012e76:	e009      	b.n	8012e8c <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d006      	beq.n	8012e8c <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8012e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d101      	bne.n	8012e8c <osMailGet+0x58>
      ticks = 1;
 8012e88:	2301      	movs	r3, #1
 8012e8a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012e8c:	f7ff fd08 	bl	80128a0 <inHandlerMode>
 8012e90:	4603      	mov	r3, r0
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d01d      	beq.n	8012ed2 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8012e96:	68bb      	ldr	r3, [r7, #8]
 8012e98:	6858      	ldr	r0, [r3, #4]
 8012e9a:	f107 0220 	add.w	r2, r7, #32
 8012e9e:	f107 0314 	add.w	r3, r7, #20
 8012ea2:	3304      	adds	r3, #4
 8012ea4:	4619      	mov	r1, r3
 8012ea6:	f000 fd05 	bl	80138b4 <xQueueReceiveFromISR>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	2b01      	cmp	r3, #1
 8012eae:	d102      	bne.n	8012eb6 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8012eb0:	2320      	movs	r3, #32
 8012eb2:	617b      	str	r3, [r7, #20]
 8012eb4:	e001      	b.n	8012eba <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012eba:	6a3b      	ldr	r3, [r7, #32]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d01e      	beq.n	8012efe <osMailGet+0xca>
 8012ec0:	4b15      	ldr	r3, [pc, #84]	; (8012f18 <osMailGet+0xe4>)
 8012ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ec6:	601a      	str	r2, [r3, #0]
 8012ec8:	f3bf 8f4f 	dsb	sy
 8012ecc:	f3bf 8f6f 	isb	sy
 8012ed0:	e015      	b.n	8012efe <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8012ed2:	68bb      	ldr	r3, [r7, #8]
 8012ed4:	6858      	ldr	r0, [r3, #4]
 8012ed6:	f107 0314 	add.w	r3, r7, #20
 8012eda:	3304      	adds	r3, #4
 8012edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ede:	4619      	mov	r1, r3
 8012ee0:	f000 fc08 	bl	80136f4 <xQueueReceive>
 8012ee4:	4603      	mov	r3, r0
 8012ee6:	2b01      	cmp	r3, #1
 8012ee8:	d102      	bne.n	8012ef0 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8012eea:	2320      	movs	r3, #32
 8012eec:	617b      	str	r3, [r7, #20]
 8012eee:	e006      	b.n	8012efe <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d101      	bne.n	8012efa <osMailGet+0xc6>
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	e000      	b.n	8012efc <osMailGet+0xc8>
 8012efa:	2340      	movs	r3, #64	; 0x40
 8012efc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	461c      	mov	r4, r3
 8012f02:	f107 0314 	add.w	r3, r7, #20
 8012f06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012f0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012f0e:	68f8      	ldr	r0, [r7, #12]
 8012f10:	372c      	adds	r7, #44	; 0x2c
 8012f12:	46bd      	mov	sp, r7
 8012f14:	bd90      	pop	{r4, r7, pc}
 8012f16:	bf00      	nop
 8012f18:	e000ed04 	.word	0xe000ed04

08012f1c <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b082      	sub	sp, #8
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
 8012f24:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d101      	bne.n	8012f30 <osMailFree+0x14>
    return osErrorParameter;
 8012f2c:	2380      	movs	r3, #128	; 0x80
 8012f2e:	e006      	b.n	8012f3e <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	689b      	ldr	r3, [r3, #8]
 8012f34:	6839      	ldr	r1, [r7, #0]
 8012f36:	4618      	mov	r0, r3
 8012f38:	f7ff fe8f 	bl	8012c5a <osPoolFree>
 8012f3c:	4603      	mov	r3, r0
}
 8012f3e:	4618      	mov	r0, r3
 8012f40:	3708      	adds	r7, #8
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd80      	pop	{r7, pc}

08012f46 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012f46:	b480      	push	{r7}
 8012f48:	b083      	sub	sp, #12
 8012f4a:	af00      	add	r7, sp, #0
 8012f4c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	f103 0208 	add.w	r2, r3, #8
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8012f5e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	f103 0208 	add.w	r2, r3, #8
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	f103 0208 	add.w	r2, r3, #8
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	2200      	movs	r2, #0
 8012f78:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012f7a:	bf00      	nop
 8012f7c:	370c      	adds	r7, #12
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f84:	4770      	bx	lr

08012f86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012f86:	b480      	push	{r7}
 8012f88:	b083      	sub	sp, #12
 8012f8a:	af00      	add	r7, sp, #0
 8012f8c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	2200      	movs	r2, #0
 8012f92:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012f94:	bf00      	nop
 8012f96:	370c      	adds	r7, #12
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9e:	4770      	bx	lr

08012fa0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012fa0:	b480      	push	{r7}
 8012fa2:	b085      	sub	sp, #20
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
 8012fa8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	685b      	ldr	r3, [r3, #4]
 8012fae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	68fa      	ldr	r2, [r7, #12]
 8012fb4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	689a      	ldr	r2, [r3, #8]
 8012fba:	683b      	ldr	r3, [r7, #0]
 8012fbc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	689b      	ldr	r3, [r3, #8]
 8012fc2:	683a      	ldr	r2, [r7, #0]
 8012fc4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	683a      	ldr	r2, [r7, #0]
 8012fca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012fcc:	683b      	ldr	r3, [r7, #0]
 8012fce:	687a      	ldr	r2, [r7, #4]
 8012fd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	1c5a      	adds	r2, r3, #1
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	601a      	str	r2, [r3, #0]
}
 8012fdc:	bf00      	nop
 8012fde:	3714      	adds	r7, #20
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe6:	4770      	bx	lr

08012fe8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012fe8:	b480      	push	{r7}
 8012fea:	b085      	sub	sp, #20
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
 8012ff0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012ff2:	683b      	ldr	r3, [r7, #0]
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012ff8:	68bb      	ldr	r3, [r7, #8]
 8012ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ffe:	d103      	bne.n	8013008 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	691b      	ldr	r3, [r3, #16]
 8013004:	60fb      	str	r3, [r7, #12]
 8013006:	e00c      	b.n	8013022 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	3308      	adds	r3, #8
 801300c:	60fb      	str	r3, [r7, #12]
 801300e:	e002      	b.n	8013016 <vListInsert+0x2e>
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	685b      	ldr	r3, [r3, #4]
 8013014:	60fb      	str	r3, [r7, #12]
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	685b      	ldr	r3, [r3, #4]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	68ba      	ldr	r2, [r7, #8]
 801301e:	429a      	cmp	r2, r3
 8013020:	d2f6      	bcs.n	8013010 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	685a      	ldr	r2, [r3, #4]
 8013026:	683b      	ldr	r3, [r7, #0]
 8013028:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	685b      	ldr	r3, [r3, #4]
 801302e:	683a      	ldr	r2, [r7, #0]
 8013030:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	68fa      	ldr	r2, [r7, #12]
 8013036:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	683a      	ldr	r2, [r7, #0]
 801303c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801303e:	683b      	ldr	r3, [r7, #0]
 8013040:	687a      	ldr	r2, [r7, #4]
 8013042:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	1c5a      	adds	r2, r3, #1
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	601a      	str	r2, [r3, #0]
}
 801304e:	bf00      	nop
 8013050:	3714      	adds	r7, #20
 8013052:	46bd      	mov	sp, r7
 8013054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013058:	4770      	bx	lr

0801305a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801305a:	b480      	push	{r7}
 801305c:	b085      	sub	sp, #20
 801305e:	af00      	add	r7, sp, #0
 8013060:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	691b      	ldr	r3, [r3, #16]
 8013066:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	685b      	ldr	r3, [r3, #4]
 801306c:	687a      	ldr	r2, [r7, #4]
 801306e:	6892      	ldr	r2, [r2, #8]
 8013070:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	689b      	ldr	r3, [r3, #8]
 8013076:	687a      	ldr	r2, [r7, #4]
 8013078:	6852      	ldr	r2, [r2, #4]
 801307a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	685b      	ldr	r3, [r3, #4]
 8013080:	687a      	ldr	r2, [r7, #4]
 8013082:	429a      	cmp	r2, r3
 8013084:	d103      	bne.n	801308e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	689a      	ldr	r2, [r3, #8]
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	2200      	movs	r2, #0
 8013092:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	1e5a      	subs	r2, r3, #1
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	681b      	ldr	r3, [r3, #0]
}
 80130a2:	4618      	mov	r0, r3
 80130a4:	3714      	adds	r7, #20
 80130a6:	46bd      	mov	sp, r7
 80130a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ac:	4770      	bx	lr
	...

080130b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b084      	sub	sp, #16
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
 80130b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d10a      	bne.n	80130da <xQueueGenericReset+0x2a>
	__asm volatile
 80130c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130c8:	f383 8811 	msr	BASEPRI, r3
 80130cc:	f3bf 8f6f 	isb	sy
 80130d0:	f3bf 8f4f 	dsb	sy
 80130d4:	60bb      	str	r3, [r7, #8]
}
 80130d6:	bf00      	nop
 80130d8:	e7fe      	b.n	80130d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80130da:	f001 ff63 	bl	8014fa4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	681a      	ldr	r2, [r3, #0]
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130e6:	68f9      	ldr	r1, [r7, #12]
 80130e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80130ea:	fb01 f303 	mul.w	r3, r1, r3
 80130ee:	441a      	add	r2, r3
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	2200      	movs	r2, #0
 80130f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	681a      	ldr	r2, [r3, #0]
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	681a      	ldr	r2, [r3, #0]
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801310a:	3b01      	subs	r3, #1
 801310c:	68f9      	ldr	r1, [r7, #12]
 801310e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013110:	fb01 f303 	mul.w	r3, r1, r3
 8013114:	441a      	add	r2, r3
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	22ff      	movs	r2, #255	; 0xff
 801311e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	22ff      	movs	r2, #255	; 0xff
 8013126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d114      	bne.n	801315a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	691b      	ldr	r3, [r3, #16]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d01a      	beq.n	801316e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	3310      	adds	r3, #16
 801313c:	4618      	mov	r0, r3
 801313e:	f001 f953 	bl	80143e8 <xTaskRemoveFromEventList>
 8013142:	4603      	mov	r3, r0
 8013144:	2b00      	cmp	r3, #0
 8013146:	d012      	beq.n	801316e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013148:	4b0c      	ldr	r3, [pc, #48]	; (801317c <xQueueGenericReset+0xcc>)
 801314a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801314e:	601a      	str	r2, [r3, #0]
 8013150:	f3bf 8f4f 	dsb	sy
 8013154:	f3bf 8f6f 	isb	sy
 8013158:	e009      	b.n	801316e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	3310      	adds	r3, #16
 801315e:	4618      	mov	r0, r3
 8013160:	f7ff fef1 	bl	8012f46 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	3324      	adds	r3, #36	; 0x24
 8013168:	4618      	mov	r0, r3
 801316a:	f7ff feec 	bl	8012f46 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801316e:	f001 ff49 	bl	8015004 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013172:	2301      	movs	r3, #1
}
 8013174:	4618      	mov	r0, r3
 8013176:	3710      	adds	r7, #16
 8013178:	46bd      	mov	sp, r7
 801317a:	bd80      	pop	{r7, pc}
 801317c:	e000ed04 	.word	0xe000ed04

08013180 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013180:	b580      	push	{r7, lr}
 8013182:	b08e      	sub	sp, #56	; 0x38
 8013184:	af02      	add	r7, sp, #8
 8013186:	60f8      	str	r0, [r7, #12]
 8013188:	60b9      	str	r1, [r7, #8]
 801318a:	607a      	str	r2, [r7, #4]
 801318c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d10a      	bne.n	80131aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013198:	f383 8811 	msr	BASEPRI, r3
 801319c:	f3bf 8f6f 	isb	sy
 80131a0:	f3bf 8f4f 	dsb	sy
 80131a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80131a6:	bf00      	nop
 80131a8:	e7fe      	b.n	80131a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80131aa:	683b      	ldr	r3, [r7, #0]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d10a      	bne.n	80131c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80131b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131b4:	f383 8811 	msr	BASEPRI, r3
 80131b8:	f3bf 8f6f 	isb	sy
 80131bc:	f3bf 8f4f 	dsb	sy
 80131c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80131c2:	bf00      	nop
 80131c4:	e7fe      	b.n	80131c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d002      	beq.n	80131d2 <xQueueGenericCreateStatic+0x52>
 80131cc:	68bb      	ldr	r3, [r7, #8]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d001      	beq.n	80131d6 <xQueueGenericCreateStatic+0x56>
 80131d2:	2301      	movs	r3, #1
 80131d4:	e000      	b.n	80131d8 <xQueueGenericCreateStatic+0x58>
 80131d6:	2300      	movs	r3, #0
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d10a      	bne.n	80131f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80131dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131e0:	f383 8811 	msr	BASEPRI, r3
 80131e4:	f3bf 8f6f 	isb	sy
 80131e8:	f3bf 8f4f 	dsb	sy
 80131ec:	623b      	str	r3, [r7, #32]
}
 80131ee:	bf00      	nop
 80131f0:	e7fe      	b.n	80131f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d102      	bne.n	80131fe <xQueueGenericCreateStatic+0x7e>
 80131f8:	68bb      	ldr	r3, [r7, #8]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d101      	bne.n	8013202 <xQueueGenericCreateStatic+0x82>
 80131fe:	2301      	movs	r3, #1
 8013200:	e000      	b.n	8013204 <xQueueGenericCreateStatic+0x84>
 8013202:	2300      	movs	r3, #0
 8013204:	2b00      	cmp	r3, #0
 8013206:	d10a      	bne.n	801321e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801320c:	f383 8811 	msr	BASEPRI, r3
 8013210:	f3bf 8f6f 	isb	sy
 8013214:	f3bf 8f4f 	dsb	sy
 8013218:	61fb      	str	r3, [r7, #28]
}
 801321a:	bf00      	nop
 801321c:	e7fe      	b.n	801321c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801321e:	2348      	movs	r3, #72	; 0x48
 8013220:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013222:	697b      	ldr	r3, [r7, #20]
 8013224:	2b48      	cmp	r3, #72	; 0x48
 8013226:	d00a      	beq.n	801323e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801322c:	f383 8811 	msr	BASEPRI, r3
 8013230:	f3bf 8f6f 	isb	sy
 8013234:	f3bf 8f4f 	dsb	sy
 8013238:	61bb      	str	r3, [r7, #24]
}
 801323a:	bf00      	nop
 801323c:	e7fe      	b.n	801323c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801323e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013240:	683b      	ldr	r3, [r7, #0]
 8013242:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013246:	2b00      	cmp	r3, #0
 8013248:	d00d      	beq.n	8013266 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801324c:	2201      	movs	r2, #1
 801324e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013252:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013258:	9300      	str	r3, [sp, #0]
 801325a:	4613      	mov	r3, r2
 801325c:	687a      	ldr	r2, [r7, #4]
 801325e:	68b9      	ldr	r1, [r7, #8]
 8013260:	68f8      	ldr	r0, [r7, #12]
 8013262:	f000 f845 	bl	80132f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013268:	4618      	mov	r0, r3
 801326a:	3730      	adds	r7, #48	; 0x30
 801326c:	46bd      	mov	sp, r7
 801326e:	bd80      	pop	{r7, pc}

08013270 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013270:	b580      	push	{r7, lr}
 8013272:	b08a      	sub	sp, #40	; 0x28
 8013274:	af02      	add	r7, sp, #8
 8013276:	60f8      	str	r0, [r7, #12]
 8013278:	60b9      	str	r1, [r7, #8]
 801327a:	4613      	mov	r3, r2
 801327c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d10a      	bne.n	801329a <xQueueGenericCreate+0x2a>
	__asm volatile
 8013284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013288:	f383 8811 	msr	BASEPRI, r3
 801328c:	f3bf 8f6f 	isb	sy
 8013290:	f3bf 8f4f 	dsb	sy
 8013294:	613b      	str	r3, [r7, #16]
}
 8013296:	bf00      	nop
 8013298:	e7fe      	b.n	8013298 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801329a:	68bb      	ldr	r3, [r7, #8]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d102      	bne.n	80132a6 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80132a0:	2300      	movs	r3, #0
 80132a2:	61fb      	str	r3, [r7, #28]
 80132a4:	e004      	b.n	80132b0 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	68ba      	ldr	r2, [r7, #8]
 80132aa:	fb02 f303 	mul.w	r3, r2, r3
 80132ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80132b0:	69fb      	ldr	r3, [r7, #28]
 80132b2:	3348      	adds	r3, #72	; 0x48
 80132b4:	4618      	mov	r0, r3
 80132b6:	f001 ff97 	bl	80151e8 <pvPortMalloc>
 80132ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80132bc:	69bb      	ldr	r3, [r7, #24]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d011      	beq.n	80132e6 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80132c2:	69bb      	ldr	r3, [r7, #24]
 80132c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80132c6:	697b      	ldr	r3, [r7, #20]
 80132c8:	3348      	adds	r3, #72	; 0x48
 80132ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80132cc:	69bb      	ldr	r3, [r7, #24]
 80132ce:	2200      	movs	r2, #0
 80132d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80132d4:	79fa      	ldrb	r2, [r7, #7]
 80132d6:	69bb      	ldr	r3, [r7, #24]
 80132d8:	9300      	str	r3, [sp, #0]
 80132da:	4613      	mov	r3, r2
 80132dc:	697a      	ldr	r2, [r7, #20]
 80132de:	68b9      	ldr	r1, [r7, #8]
 80132e0:	68f8      	ldr	r0, [r7, #12]
 80132e2:	f000 f805 	bl	80132f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80132e6:	69bb      	ldr	r3, [r7, #24]
	}
 80132e8:	4618      	mov	r0, r3
 80132ea:	3720      	adds	r7, #32
 80132ec:	46bd      	mov	sp, r7
 80132ee:	bd80      	pop	{r7, pc}

080132f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b084      	sub	sp, #16
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	60f8      	str	r0, [r7, #12]
 80132f8:	60b9      	str	r1, [r7, #8]
 80132fa:	607a      	str	r2, [r7, #4]
 80132fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80132fe:	68bb      	ldr	r3, [r7, #8]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d103      	bne.n	801330c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013304:	69bb      	ldr	r3, [r7, #24]
 8013306:	69ba      	ldr	r2, [r7, #24]
 8013308:	601a      	str	r2, [r3, #0]
 801330a:	e002      	b.n	8013312 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801330c:	69bb      	ldr	r3, [r7, #24]
 801330e:	687a      	ldr	r2, [r7, #4]
 8013310:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013312:	69bb      	ldr	r3, [r7, #24]
 8013314:	68fa      	ldr	r2, [r7, #12]
 8013316:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013318:	69bb      	ldr	r3, [r7, #24]
 801331a:	68ba      	ldr	r2, [r7, #8]
 801331c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801331e:	2101      	movs	r1, #1
 8013320:	69b8      	ldr	r0, [r7, #24]
 8013322:	f7ff fec5 	bl	80130b0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013326:	bf00      	nop
 8013328:	3710      	adds	r7, #16
 801332a:	46bd      	mov	sp, r7
 801332c:	bd80      	pop	{r7, pc}

0801332e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801332e:	b580      	push	{r7, lr}
 8013330:	b082      	sub	sp, #8
 8013332:	af00      	add	r7, sp, #0
 8013334:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d00e      	beq.n	801335a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	2200      	movs	r2, #0
 8013340:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	2200      	movs	r2, #0
 8013346:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	2200      	movs	r2, #0
 801334c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801334e:	2300      	movs	r3, #0
 8013350:	2200      	movs	r2, #0
 8013352:	2100      	movs	r1, #0
 8013354:	6878      	ldr	r0, [r7, #4]
 8013356:	f000 f837 	bl	80133c8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801335a:	bf00      	nop
 801335c:	3708      	adds	r7, #8
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}

08013362 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8013362:	b580      	push	{r7, lr}
 8013364:	b086      	sub	sp, #24
 8013366:	af00      	add	r7, sp, #0
 8013368:	4603      	mov	r3, r0
 801336a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801336c:	2301      	movs	r3, #1
 801336e:	617b      	str	r3, [r7, #20]
 8013370:	2300      	movs	r3, #0
 8013372:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8013374:	79fb      	ldrb	r3, [r7, #7]
 8013376:	461a      	mov	r2, r3
 8013378:	6939      	ldr	r1, [r7, #16]
 801337a:	6978      	ldr	r0, [r7, #20]
 801337c:	f7ff ff78 	bl	8013270 <xQueueGenericCreate>
 8013380:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013382:	68f8      	ldr	r0, [r7, #12]
 8013384:	f7ff ffd3 	bl	801332e <prvInitialiseMutex>

		return xNewQueue;
 8013388:	68fb      	ldr	r3, [r7, #12]
	}
 801338a:	4618      	mov	r0, r3
 801338c:	3718      	adds	r7, #24
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}

08013392 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8013392:	b580      	push	{r7, lr}
 8013394:	b088      	sub	sp, #32
 8013396:	af02      	add	r7, sp, #8
 8013398:	4603      	mov	r3, r0
 801339a:	6039      	str	r1, [r7, #0]
 801339c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801339e:	2301      	movs	r3, #1
 80133a0:	617b      	str	r3, [r7, #20]
 80133a2:	2300      	movs	r3, #0
 80133a4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80133a6:	79fb      	ldrb	r3, [r7, #7]
 80133a8:	9300      	str	r3, [sp, #0]
 80133aa:	683b      	ldr	r3, [r7, #0]
 80133ac:	2200      	movs	r2, #0
 80133ae:	6939      	ldr	r1, [r7, #16]
 80133b0:	6978      	ldr	r0, [r7, #20]
 80133b2:	f7ff fee5 	bl	8013180 <xQueueGenericCreateStatic>
 80133b6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80133b8:	68f8      	ldr	r0, [r7, #12]
 80133ba:	f7ff ffb8 	bl	801332e <prvInitialiseMutex>

		return xNewQueue;
 80133be:	68fb      	ldr	r3, [r7, #12]
	}
 80133c0:	4618      	mov	r0, r3
 80133c2:	3718      	adds	r7, #24
 80133c4:	46bd      	mov	sp, r7
 80133c6:	bd80      	pop	{r7, pc}

080133c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b08e      	sub	sp, #56	; 0x38
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	60f8      	str	r0, [r7, #12]
 80133d0:	60b9      	str	r1, [r7, #8]
 80133d2:	607a      	str	r2, [r7, #4]
 80133d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80133d6:	2300      	movs	r3, #0
 80133d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80133de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d10a      	bne.n	80133fa <xQueueGenericSend+0x32>
	__asm volatile
 80133e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133e8:	f383 8811 	msr	BASEPRI, r3
 80133ec:	f3bf 8f6f 	isb	sy
 80133f0:	f3bf 8f4f 	dsb	sy
 80133f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80133f6:	bf00      	nop
 80133f8:	e7fe      	b.n	80133f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80133fa:	68bb      	ldr	r3, [r7, #8]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d103      	bne.n	8013408 <xQueueGenericSend+0x40>
 8013400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013404:	2b00      	cmp	r3, #0
 8013406:	d101      	bne.n	801340c <xQueueGenericSend+0x44>
 8013408:	2301      	movs	r3, #1
 801340a:	e000      	b.n	801340e <xQueueGenericSend+0x46>
 801340c:	2300      	movs	r3, #0
 801340e:	2b00      	cmp	r3, #0
 8013410:	d10a      	bne.n	8013428 <xQueueGenericSend+0x60>
	__asm volatile
 8013412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013416:	f383 8811 	msr	BASEPRI, r3
 801341a:	f3bf 8f6f 	isb	sy
 801341e:	f3bf 8f4f 	dsb	sy
 8013422:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013424:	bf00      	nop
 8013426:	e7fe      	b.n	8013426 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	2b02      	cmp	r3, #2
 801342c:	d103      	bne.n	8013436 <xQueueGenericSend+0x6e>
 801342e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013432:	2b01      	cmp	r3, #1
 8013434:	d101      	bne.n	801343a <xQueueGenericSend+0x72>
 8013436:	2301      	movs	r3, #1
 8013438:	e000      	b.n	801343c <xQueueGenericSend+0x74>
 801343a:	2300      	movs	r3, #0
 801343c:	2b00      	cmp	r3, #0
 801343e:	d10a      	bne.n	8013456 <xQueueGenericSend+0x8e>
	__asm volatile
 8013440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013444:	f383 8811 	msr	BASEPRI, r3
 8013448:	f3bf 8f6f 	isb	sy
 801344c:	f3bf 8f4f 	dsb	sy
 8013450:	623b      	str	r3, [r7, #32]
}
 8013452:	bf00      	nop
 8013454:	e7fe      	b.n	8013454 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013456:	f001 f983 	bl	8014760 <xTaskGetSchedulerState>
 801345a:	4603      	mov	r3, r0
 801345c:	2b00      	cmp	r3, #0
 801345e:	d102      	bne.n	8013466 <xQueueGenericSend+0x9e>
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d101      	bne.n	801346a <xQueueGenericSend+0xa2>
 8013466:	2301      	movs	r3, #1
 8013468:	e000      	b.n	801346c <xQueueGenericSend+0xa4>
 801346a:	2300      	movs	r3, #0
 801346c:	2b00      	cmp	r3, #0
 801346e:	d10a      	bne.n	8013486 <xQueueGenericSend+0xbe>
	__asm volatile
 8013470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013474:	f383 8811 	msr	BASEPRI, r3
 8013478:	f3bf 8f6f 	isb	sy
 801347c:	f3bf 8f4f 	dsb	sy
 8013480:	61fb      	str	r3, [r7, #28]
}
 8013482:	bf00      	nop
 8013484:	e7fe      	b.n	8013484 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013486:	f001 fd8d 	bl	8014fa4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801348c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013492:	429a      	cmp	r2, r3
 8013494:	d302      	bcc.n	801349c <xQueueGenericSend+0xd4>
 8013496:	683b      	ldr	r3, [r7, #0]
 8013498:	2b02      	cmp	r3, #2
 801349a:	d129      	bne.n	80134f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801349c:	683a      	ldr	r2, [r7, #0]
 801349e:	68b9      	ldr	r1, [r7, #8]
 80134a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134a2:	f000 fa87 	bl	80139b4 <prvCopyDataToQueue>
 80134a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80134a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d010      	beq.n	80134d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80134b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134b2:	3324      	adds	r3, #36	; 0x24
 80134b4:	4618      	mov	r0, r3
 80134b6:	f000 ff97 	bl	80143e8 <xTaskRemoveFromEventList>
 80134ba:	4603      	mov	r3, r0
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d013      	beq.n	80134e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80134c0:	4b3f      	ldr	r3, [pc, #252]	; (80135c0 <xQueueGenericSend+0x1f8>)
 80134c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134c6:	601a      	str	r2, [r3, #0]
 80134c8:	f3bf 8f4f 	dsb	sy
 80134cc:	f3bf 8f6f 	isb	sy
 80134d0:	e00a      	b.n	80134e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80134d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d007      	beq.n	80134e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80134d8:	4b39      	ldr	r3, [pc, #228]	; (80135c0 <xQueueGenericSend+0x1f8>)
 80134da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134de:	601a      	str	r2, [r3, #0]
 80134e0:	f3bf 8f4f 	dsb	sy
 80134e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80134e8:	f001 fd8c 	bl	8015004 <vPortExitCritical>
				return pdPASS;
 80134ec:	2301      	movs	r3, #1
 80134ee:	e063      	b.n	80135b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d103      	bne.n	80134fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80134f6:	f001 fd85 	bl	8015004 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80134fa:	2300      	movs	r3, #0
 80134fc:	e05c      	b.n	80135b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80134fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013500:	2b00      	cmp	r3, #0
 8013502:	d106      	bne.n	8013512 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013504:	f107 0314 	add.w	r3, r7, #20
 8013508:	4618      	mov	r0, r3
 801350a:	f000 ffcf 	bl	80144ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801350e:	2301      	movs	r3, #1
 8013510:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013512:	f001 fd77 	bl	8015004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013516:	f000 fd85 	bl	8014024 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801351a:	f001 fd43 	bl	8014fa4 <vPortEnterCritical>
 801351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013520:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013524:	b25b      	sxtb	r3, r3
 8013526:	f1b3 3fff 	cmp.w	r3, #4294967295
 801352a:	d103      	bne.n	8013534 <xQueueGenericSend+0x16c>
 801352c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801352e:	2200      	movs	r2, #0
 8013530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013536:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801353a:	b25b      	sxtb	r3, r3
 801353c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013540:	d103      	bne.n	801354a <xQueueGenericSend+0x182>
 8013542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013544:	2200      	movs	r2, #0
 8013546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801354a:	f001 fd5b 	bl	8015004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801354e:	1d3a      	adds	r2, r7, #4
 8013550:	f107 0314 	add.w	r3, r7, #20
 8013554:	4611      	mov	r1, r2
 8013556:	4618      	mov	r0, r3
 8013558:	f000 ffbe 	bl	80144d8 <xTaskCheckForTimeOut>
 801355c:	4603      	mov	r3, r0
 801355e:	2b00      	cmp	r3, #0
 8013560:	d124      	bne.n	80135ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013562:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013564:	f000 fb1e 	bl	8013ba4 <prvIsQueueFull>
 8013568:	4603      	mov	r3, r0
 801356a:	2b00      	cmp	r3, #0
 801356c:	d018      	beq.n	80135a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801356e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013570:	3310      	adds	r3, #16
 8013572:	687a      	ldr	r2, [r7, #4]
 8013574:	4611      	mov	r1, r2
 8013576:	4618      	mov	r0, r3
 8013578:	f000 ff12 	bl	80143a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801357c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801357e:	f000 faa9 	bl	8013ad4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013582:	f000 fd5d 	bl	8014040 <xTaskResumeAll>
 8013586:	4603      	mov	r3, r0
 8013588:	2b00      	cmp	r3, #0
 801358a:	f47f af7c 	bne.w	8013486 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801358e:	4b0c      	ldr	r3, [pc, #48]	; (80135c0 <xQueueGenericSend+0x1f8>)
 8013590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013594:	601a      	str	r2, [r3, #0]
 8013596:	f3bf 8f4f 	dsb	sy
 801359a:	f3bf 8f6f 	isb	sy
 801359e:	e772      	b.n	8013486 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80135a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135a2:	f000 fa97 	bl	8013ad4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80135a6:	f000 fd4b 	bl	8014040 <xTaskResumeAll>
 80135aa:	e76c      	b.n	8013486 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80135ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135ae:	f000 fa91 	bl	8013ad4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80135b2:	f000 fd45 	bl	8014040 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80135b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80135b8:	4618      	mov	r0, r3
 80135ba:	3738      	adds	r7, #56	; 0x38
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}
 80135c0:	e000ed04 	.word	0xe000ed04

080135c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b08e      	sub	sp, #56	; 0x38
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	60f8      	str	r0, [r7, #12]
 80135cc:	60b9      	str	r1, [r7, #8]
 80135ce:	607a      	str	r2, [r7, #4]
 80135d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80135d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d10a      	bne.n	80135f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80135dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135e0:	f383 8811 	msr	BASEPRI, r3
 80135e4:	f3bf 8f6f 	isb	sy
 80135e8:	f3bf 8f4f 	dsb	sy
 80135ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80135ee:	bf00      	nop
 80135f0:	e7fe      	b.n	80135f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80135f2:	68bb      	ldr	r3, [r7, #8]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d103      	bne.n	8013600 <xQueueGenericSendFromISR+0x3c>
 80135f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d101      	bne.n	8013604 <xQueueGenericSendFromISR+0x40>
 8013600:	2301      	movs	r3, #1
 8013602:	e000      	b.n	8013606 <xQueueGenericSendFromISR+0x42>
 8013604:	2300      	movs	r3, #0
 8013606:	2b00      	cmp	r3, #0
 8013608:	d10a      	bne.n	8013620 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801360a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801360e:	f383 8811 	msr	BASEPRI, r3
 8013612:	f3bf 8f6f 	isb	sy
 8013616:	f3bf 8f4f 	dsb	sy
 801361a:	623b      	str	r3, [r7, #32]
}
 801361c:	bf00      	nop
 801361e:	e7fe      	b.n	801361e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013620:	683b      	ldr	r3, [r7, #0]
 8013622:	2b02      	cmp	r3, #2
 8013624:	d103      	bne.n	801362e <xQueueGenericSendFromISR+0x6a>
 8013626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801362a:	2b01      	cmp	r3, #1
 801362c:	d101      	bne.n	8013632 <xQueueGenericSendFromISR+0x6e>
 801362e:	2301      	movs	r3, #1
 8013630:	e000      	b.n	8013634 <xQueueGenericSendFromISR+0x70>
 8013632:	2300      	movs	r3, #0
 8013634:	2b00      	cmp	r3, #0
 8013636:	d10a      	bne.n	801364e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013638:	f04f 0350 	mov.w	r3, #80	; 0x50
 801363c:	f383 8811 	msr	BASEPRI, r3
 8013640:	f3bf 8f6f 	isb	sy
 8013644:	f3bf 8f4f 	dsb	sy
 8013648:	61fb      	str	r3, [r7, #28]
}
 801364a:	bf00      	nop
 801364c:	e7fe      	b.n	801364c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801364e:	f001 fd8b 	bl	8015168 <vPortValidateInterruptPriority>
	__asm volatile
 8013652:	f3ef 8211 	mrs	r2, BASEPRI
 8013656:	f04f 0350 	mov.w	r3, #80	; 0x50
 801365a:	f383 8811 	msr	BASEPRI, r3
 801365e:	f3bf 8f6f 	isb	sy
 8013662:	f3bf 8f4f 	dsb	sy
 8013666:	61ba      	str	r2, [r7, #24]
 8013668:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801366a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801366c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013676:	429a      	cmp	r2, r3
 8013678:	d302      	bcc.n	8013680 <xQueueGenericSendFromISR+0xbc>
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	2b02      	cmp	r3, #2
 801367e:	d12c      	bne.n	80136da <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013682:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801368a:	683a      	ldr	r2, [r7, #0]
 801368c:	68b9      	ldr	r1, [r7, #8]
 801368e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013690:	f000 f990 	bl	80139b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013694:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013698:	f1b3 3fff 	cmp.w	r3, #4294967295
 801369c:	d112      	bne.n	80136c4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d016      	beq.n	80136d4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80136a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a8:	3324      	adds	r3, #36	; 0x24
 80136aa:	4618      	mov	r0, r3
 80136ac:	f000 fe9c 	bl	80143e8 <xTaskRemoveFromEventList>
 80136b0:	4603      	mov	r3, r0
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d00e      	beq.n	80136d4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d00b      	beq.n	80136d4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	2201      	movs	r2, #1
 80136c0:	601a      	str	r2, [r3, #0]
 80136c2:	e007      	b.n	80136d4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80136c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80136c8:	3301      	adds	r3, #1
 80136ca:	b2db      	uxtb	r3, r3
 80136cc:	b25a      	sxtb	r2, r3
 80136ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80136d4:	2301      	movs	r3, #1
 80136d6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80136d8:	e001      	b.n	80136de <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80136da:	2300      	movs	r3, #0
 80136dc:	637b      	str	r3, [r7, #52]	; 0x34
 80136de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80136e2:	693b      	ldr	r3, [r7, #16]
 80136e4:	f383 8811 	msr	BASEPRI, r3
}
 80136e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80136ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80136ec:	4618      	mov	r0, r3
 80136ee:	3738      	adds	r7, #56	; 0x38
 80136f0:	46bd      	mov	sp, r7
 80136f2:	bd80      	pop	{r7, pc}

080136f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b08c      	sub	sp, #48	; 0x30
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	60f8      	str	r0, [r7, #12]
 80136fc:	60b9      	str	r1, [r7, #8]
 80136fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013700:	2300      	movs	r3, #0
 8013702:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801370a:	2b00      	cmp	r3, #0
 801370c:	d10a      	bne.n	8013724 <xQueueReceive+0x30>
	__asm volatile
 801370e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013712:	f383 8811 	msr	BASEPRI, r3
 8013716:	f3bf 8f6f 	isb	sy
 801371a:	f3bf 8f4f 	dsb	sy
 801371e:	623b      	str	r3, [r7, #32]
}
 8013720:	bf00      	nop
 8013722:	e7fe      	b.n	8013722 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013724:	68bb      	ldr	r3, [r7, #8]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d103      	bne.n	8013732 <xQueueReceive+0x3e>
 801372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801372e:	2b00      	cmp	r3, #0
 8013730:	d101      	bne.n	8013736 <xQueueReceive+0x42>
 8013732:	2301      	movs	r3, #1
 8013734:	e000      	b.n	8013738 <xQueueReceive+0x44>
 8013736:	2300      	movs	r3, #0
 8013738:	2b00      	cmp	r3, #0
 801373a:	d10a      	bne.n	8013752 <xQueueReceive+0x5e>
	__asm volatile
 801373c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013740:	f383 8811 	msr	BASEPRI, r3
 8013744:	f3bf 8f6f 	isb	sy
 8013748:	f3bf 8f4f 	dsb	sy
 801374c:	61fb      	str	r3, [r7, #28]
}
 801374e:	bf00      	nop
 8013750:	e7fe      	b.n	8013750 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013752:	f001 f805 	bl	8014760 <xTaskGetSchedulerState>
 8013756:	4603      	mov	r3, r0
 8013758:	2b00      	cmp	r3, #0
 801375a:	d102      	bne.n	8013762 <xQueueReceive+0x6e>
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d101      	bne.n	8013766 <xQueueReceive+0x72>
 8013762:	2301      	movs	r3, #1
 8013764:	e000      	b.n	8013768 <xQueueReceive+0x74>
 8013766:	2300      	movs	r3, #0
 8013768:	2b00      	cmp	r3, #0
 801376a:	d10a      	bne.n	8013782 <xQueueReceive+0x8e>
	__asm volatile
 801376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013770:	f383 8811 	msr	BASEPRI, r3
 8013774:	f3bf 8f6f 	isb	sy
 8013778:	f3bf 8f4f 	dsb	sy
 801377c:	61bb      	str	r3, [r7, #24]
}
 801377e:	bf00      	nop
 8013780:	e7fe      	b.n	8013780 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013782:	f001 fc0f 	bl	8014fa4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801378a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801378e:	2b00      	cmp	r3, #0
 8013790:	d01f      	beq.n	80137d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013792:	68b9      	ldr	r1, [r7, #8]
 8013794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013796:	f000 f977 	bl	8013a88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801379c:	1e5a      	subs	r2, r3, #1
 801379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80137a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137a4:	691b      	ldr	r3, [r3, #16]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d00f      	beq.n	80137ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80137aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ac:	3310      	adds	r3, #16
 80137ae:	4618      	mov	r0, r3
 80137b0:	f000 fe1a 	bl	80143e8 <xTaskRemoveFromEventList>
 80137b4:	4603      	mov	r3, r0
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d007      	beq.n	80137ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80137ba:	4b3d      	ldr	r3, [pc, #244]	; (80138b0 <xQueueReceive+0x1bc>)
 80137bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137c0:	601a      	str	r2, [r3, #0]
 80137c2:	f3bf 8f4f 	dsb	sy
 80137c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80137ca:	f001 fc1b 	bl	8015004 <vPortExitCritical>
				return pdPASS;
 80137ce:	2301      	movs	r3, #1
 80137d0:	e069      	b.n	80138a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d103      	bne.n	80137e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80137d8:	f001 fc14 	bl	8015004 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80137dc:	2300      	movs	r3, #0
 80137de:	e062      	b.n	80138a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80137e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d106      	bne.n	80137f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80137e6:	f107 0310 	add.w	r3, r7, #16
 80137ea:	4618      	mov	r0, r3
 80137ec:	f000 fe5e 	bl	80144ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80137f0:	2301      	movs	r3, #1
 80137f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80137f4:	f001 fc06 	bl	8015004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80137f8:	f000 fc14 	bl	8014024 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80137fc:	f001 fbd2 	bl	8014fa4 <vPortEnterCritical>
 8013800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013802:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013806:	b25b      	sxtb	r3, r3
 8013808:	f1b3 3fff 	cmp.w	r3, #4294967295
 801380c:	d103      	bne.n	8013816 <xQueueReceive+0x122>
 801380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013810:	2200      	movs	r2, #0
 8013812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013818:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801381c:	b25b      	sxtb	r3, r3
 801381e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013822:	d103      	bne.n	801382c <xQueueReceive+0x138>
 8013824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013826:	2200      	movs	r2, #0
 8013828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801382c:	f001 fbea 	bl	8015004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013830:	1d3a      	adds	r2, r7, #4
 8013832:	f107 0310 	add.w	r3, r7, #16
 8013836:	4611      	mov	r1, r2
 8013838:	4618      	mov	r0, r3
 801383a:	f000 fe4d 	bl	80144d8 <xTaskCheckForTimeOut>
 801383e:	4603      	mov	r3, r0
 8013840:	2b00      	cmp	r3, #0
 8013842:	d123      	bne.n	801388c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013846:	f000 f997 	bl	8013b78 <prvIsQueueEmpty>
 801384a:	4603      	mov	r3, r0
 801384c:	2b00      	cmp	r3, #0
 801384e:	d017      	beq.n	8013880 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013852:	3324      	adds	r3, #36	; 0x24
 8013854:	687a      	ldr	r2, [r7, #4]
 8013856:	4611      	mov	r1, r2
 8013858:	4618      	mov	r0, r3
 801385a:	f000 fda1 	bl	80143a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801385e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013860:	f000 f938 	bl	8013ad4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013864:	f000 fbec 	bl	8014040 <xTaskResumeAll>
 8013868:	4603      	mov	r3, r0
 801386a:	2b00      	cmp	r3, #0
 801386c:	d189      	bne.n	8013782 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801386e:	4b10      	ldr	r3, [pc, #64]	; (80138b0 <xQueueReceive+0x1bc>)
 8013870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013874:	601a      	str	r2, [r3, #0]
 8013876:	f3bf 8f4f 	dsb	sy
 801387a:	f3bf 8f6f 	isb	sy
 801387e:	e780      	b.n	8013782 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013882:	f000 f927 	bl	8013ad4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013886:	f000 fbdb 	bl	8014040 <xTaskResumeAll>
 801388a:	e77a      	b.n	8013782 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801388c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801388e:	f000 f921 	bl	8013ad4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013892:	f000 fbd5 	bl	8014040 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013898:	f000 f96e 	bl	8013b78 <prvIsQueueEmpty>
 801389c:	4603      	mov	r3, r0
 801389e:	2b00      	cmp	r3, #0
 80138a0:	f43f af6f 	beq.w	8013782 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80138a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80138a6:	4618      	mov	r0, r3
 80138a8:	3730      	adds	r7, #48	; 0x30
 80138aa:	46bd      	mov	sp, r7
 80138ac:	bd80      	pop	{r7, pc}
 80138ae:	bf00      	nop
 80138b0:	e000ed04 	.word	0xe000ed04

080138b4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b08e      	sub	sp, #56	; 0x38
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	60f8      	str	r0, [r7, #12]
 80138bc:	60b9      	str	r1, [r7, #8]
 80138be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80138c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d10a      	bne.n	80138e0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80138ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138ce:	f383 8811 	msr	BASEPRI, r3
 80138d2:	f3bf 8f6f 	isb	sy
 80138d6:	f3bf 8f4f 	dsb	sy
 80138da:	623b      	str	r3, [r7, #32]
}
 80138dc:	bf00      	nop
 80138de:	e7fe      	b.n	80138de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80138e0:	68bb      	ldr	r3, [r7, #8]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d103      	bne.n	80138ee <xQueueReceiveFromISR+0x3a>
 80138e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d101      	bne.n	80138f2 <xQueueReceiveFromISR+0x3e>
 80138ee:	2301      	movs	r3, #1
 80138f0:	e000      	b.n	80138f4 <xQueueReceiveFromISR+0x40>
 80138f2:	2300      	movs	r3, #0
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d10a      	bne.n	801390e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80138f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138fc:	f383 8811 	msr	BASEPRI, r3
 8013900:	f3bf 8f6f 	isb	sy
 8013904:	f3bf 8f4f 	dsb	sy
 8013908:	61fb      	str	r3, [r7, #28]
}
 801390a:	bf00      	nop
 801390c:	e7fe      	b.n	801390c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801390e:	f001 fc2b 	bl	8015168 <vPortValidateInterruptPriority>
	__asm volatile
 8013912:	f3ef 8211 	mrs	r2, BASEPRI
 8013916:	f04f 0350 	mov.w	r3, #80	; 0x50
 801391a:	f383 8811 	msr	BASEPRI, r3
 801391e:	f3bf 8f6f 	isb	sy
 8013922:	f3bf 8f4f 	dsb	sy
 8013926:	61ba      	str	r2, [r7, #24]
 8013928:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801392a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801392c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013932:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013936:	2b00      	cmp	r3, #0
 8013938:	d02f      	beq.n	801399a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801393c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013944:	68b9      	ldr	r1, [r7, #8]
 8013946:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013948:	f000 f89e 	bl	8013a88 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801394e:	1e5a      	subs	r2, r3, #1
 8013950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013952:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013954:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013958:	f1b3 3fff 	cmp.w	r3, #4294967295
 801395c:	d112      	bne.n	8013984 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013960:	691b      	ldr	r3, [r3, #16]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d016      	beq.n	8013994 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013968:	3310      	adds	r3, #16
 801396a:	4618      	mov	r0, r3
 801396c:	f000 fd3c 	bl	80143e8 <xTaskRemoveFromEventList>
 8013970:	4603      	mov	r3, r0
 8013972:	2b00      	cmp	r3, #0
 8013974:	d00e      	beq.n	8013994 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d00b      	beq.n	8013994 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	2201      	movs	r2, #1
 8013980:	601a      	str	r2, [r3, #0]
 8013982:	e007      	b.n	8013994 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013988:	3301      	adds	r3, #1
 801398a:	b2db      	uxtb	r3, r3
 801398c:	b25a      	sxtb	r2, r3
 801398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013994:	2301      	movs	r3, #1
 8013996:	637b      	str	r3, [r7, #52]	; 0x34
 8013998:	e001      	b.n	801399e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801399a:	2300      	movs	r3, #0
 801399c:	637b      	str	r3, [r7, #52]	; 0x34
 801399e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80139a2:	693b      	ldr	r3, [r7, #16]
 80139a4:	f383 8811 	msr	BASEPRI, r3
}
 80139a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80139aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80139ac:	4618      	mov	r0, r3
 80139ae:	3738      	adds	r7, #56	; 0x38
 80139b0:	46bd      	mov	sp, r7
 80139b2:	bd80      	pop	{r7, pc}

080139b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b086      	sub	sp, #24
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	60f8      	str	r0, [r7, #12]
 80139bc:	60b9      	str	r1, [r7, #8]
 80139be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80139c0:	2300      	movs	r3, #0
 80139c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d10d      	bne.n	80139ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d14d      	bne.n	8013a76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	689b      	ldr	r3, [r3, #8]
 80139de:	4618      	mov	r0, r3
 80139e0:	f000 fedc 	bl	801479c <xTaskPriorityDisinherit>
 80139e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	2200      	movs	r2, #0
 80139ea:	609a      	str	r2, [r3, #8]
 80139ec:	e043      	b.n	8013a76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d119      	bne.n	8013a28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	6858      	ldr	r0, [r3, #4]
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139fc:	461a      	mov	r2, r3
 80139fe:	68b9      	ldr	r1, [r7, #8]
 8013a00:	f002 fb56 	bl	80160b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	685a      	ldr	r2, [r3, #4]
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a0c:	441a      	add	r2, r3
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	685a      	ldr	r2, [r3, #4]
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	689b      	ldr	r3, [r3, #8]
 8013a1a:	429a      	cmp	r2, r3
 8013a1c:	d32b      	bcc.n	8013a76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	681a      	ldr	r2, [r3, #0]
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	605a      	str	r2, [r3, #4]
 8013a26:	e026      	b.n	8013a76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	68d8      	ldr	r0, [r3, #12]
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a30:	461a      	mov	r2, r3
 8013a32:	68b9      	ldr	r1, [r7, #8]
 8013a34:	f002 fb3c 	bl	80160b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	68da      	ldr	r2, [r3, #12]
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a40:	425b      	negs	r3, r3
 8013a42:	441a      	add	r2, r3
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	68da      	ldr	r2, [r3, #12]
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	429a      	cmp	r2, r3
 8013a52:	d207      	bcs.n	8013a64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	689a      	ldr	r2, [r3, #8]
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a5c:	425b      	negs	r3, r3
 8013a5e:	441a      	add	r2, r3
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	2b02      	cmp	r3, #2
 8013a68:	d105      	bne.n	8013a76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013a6a:	693b      	ldr	r3, [r7, #16]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d002      	beq.n	8013a76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013a70:	693b      	ldr	r3, [r7, #16]
 8013a72:	3b01      	subs	r3, #1
 8013a74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013a76:	693b      	ldr	r3, [r7, #16]
 8013a78:	1c5a      	adds	r2, r3, #1
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013a7e:	697b      	ldr	r3, [r7, #20]
}
 8013a80:	4618      	mov	r0, r3
 8013a82:	3718      	adds	r7, #24
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bd80      	pop	{r7, pc}

08013a88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b082      	sub	sp, #8
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
 8013a90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d018      	beq.n	8013acc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	68da      	ldr	r2, [r3, #12]
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013aa2:	441a      	add	r2, r3
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	68da      	ldr	r2, [r3, #12]
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	689b      	ldr	r3, [r3, #8]
 8013ab0:	429a      	cmp	r2, r3
 8013ab2:	d303      	bcc.n	8013abc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	681a      	ldr	r2, [r3, #0]
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	68d9      	ldr	r1, [r3, #12]
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ac4:	461a      	mov	r2, r3
 8013ac6:	6838      	ldr	r0, [r7, #0]
 8013ac8:	f002 faf2 	bl	80160b0 <memcpy>
	}
}
 8013acc:	bf00      	nop
 8013ace:	3708      	adds	r7, #8
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bd80      	pop	{r7, pc}

08013ad4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	b084      	sub	sp, #16
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013adc:	f001 fa62 	bl	8014fa4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013ae6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013ae8:	e011      	b.n	8013b0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d012      	beq.n	8013b18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	3324      	adds	r3, #36	; 0x24
 8013af6:	4618      	mov	r0, r3
 8013af8:	f000 fc76 	bl	80143e8 <xTaskRemoveFromEventList>
 8013afc:	4603      	mov	r3, r0
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d001      	beq.n	8013b06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013b02:	f000 fd4b 	bl	801459c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013b06:	7bfb      	ldrb	r3, [r7, #15]
 8013b08:	3b01      	subs	r3, #1
 8013b0a:	b2db      	uxtb	r3, r3
 8013b0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	dce9      	bgt.n	8013aea <prvUnlockQueue+0x16>
 8013b16:	e000      	b.n	8013b1a <prvUnlockQueue+0x46>
					break;
 8013b18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	22ff      	movs	r2, #255	; 0xff
 8013b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013b22:	f001 fa6f 	bl	8015004 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013b26:	f001 fa3d 	bl	8014fa4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013b30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013b32:	e011      	b.n	8013b58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	691b      	ldr	r3, [r3, #16]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d012      	beq.n	8013b62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	3310      	adds	r3, #16
 8013b40:	4618      	mov	r0, r3
 8013b42:	f000 fc51 	bl	80143e8 <xTaskRemoveFromEventList>
 8013b46:	4603      	mov	r3, r0
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d001      	beq.n	8013b50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013b4c:	f000 fd26 	bl	801459c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013b50:	7bbb      	ldrb	r3, [r7, #14]
 8013b52:	3b01      	subs	r3, #1
 8013b54:	b2db      	uxtb	r3, r3
 8013b56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013b58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	dce9      	bgt.n	8013b34 <prvUnlockQueue+0x60>
 8013b60:	e000      	b.n	8013b64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013b62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	22ff      	movs	r2, #255	; 0xff
 8013b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013b6c:	f001 fa4a 	bl	8015004 <vPortExitCritical>
}
 8013b70:	bf00      	nop
 8013b72:	3710      	adds	r7, #16
 8013b74:	46bd      	mov	sp, r7
 8013b76:	bd80      	pop	{r7, pc}

08013b78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013b78:	b580      	push	{r7, lr}
 8013b7a:	b084      	sub	sp, #16
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013b80:	f001 fa10 	bl	8014fa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d102      	bne.n	8013b92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013b8c:	2301      	movs	r3, #1
 8013b8e:	60fb      	str	r3, [r7, #12]
 8013b90:	e001      	b.n	8013b96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013b92:	2300      	movs	r3, #0
 8013b94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013b96:	f001 fa35 	bl	8015004 <vPortExitCritical>

	return xReturn;
 8013b9a:	68fb      	ldr	r3, [r7, #12]
}
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	3710      	adds	r7, #16
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	bd80      	pop	{r7, pc}

08013ba4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b084      	sub	sp, #16
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013bac:	f001 f9fa 	bl	8014fa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013bb8:	429a      	cmp	r2, r3
 8013bba:	d102      	bne.n	8013bc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013bbc:	2301      	movs	r3, #1
 8013bbe:	60fb      	str	r3, [r7, #12]
 8013bc0:	e001      	b.n	8013bc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013bc6:	f001 fa1d 	bl	8015004 <vPortExitCritical>

	return xReturn;
 8013bca:	68fb      	ldr	r3, [r7, #12]
}
 8013bcc:	4618      	mov	r0, r3
 8013bce:	3710      	adds	r7, #16
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	bd80      	pop	{r7, pc}

08013bd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b08e      	sub	sp, #56	; 0x38
 8013bd8:	af04      	add	r7, sp, #16
 8013bda:	60f8      	str	r0, [r7, #12]
 8013bdc:	60b9      	str	r1, [r7, #8]
 8013bde:	607a      	str	r2, [r7, #4]
 8013be0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d10a      	bne.n	8013bfe <xTaskCreateStatic+0x2a>
	__asm volatile
 8013be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bec:	f383 8811 	msr	BASEPRI, r3
 8013bf0:	f3bf 8f6f 	isb	sy
 8013bf4:	f3bf 8f4f 	dsb	sy
 8013bf8:	623b      	str	r3, [r7, #32]
}
 8013bfa:	bf00      	nop
 8013bfc:	e7fe      	b.n	8013bfc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d10a      	bne.n	8013c1a <xTaskCreateStatic+0x46>
	__asm volatile
 8013c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c08:	f383 8811 	msr	BASEPRI, r3
 8013c0c:	f3bf 8f6f 	isb	sy
 8013c10:	f3bf 8f4f 	dsb	sy
 8013c14:	61fb      	str	r3, [r7, #28]
}
 8013c16:	bf00      	nop
 8013c18:	e7fe      	b.n	8013c18 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013c1a:	2354      	movs	r3, #84	; 0x54
 8013c1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013c1e:	693b      	ldr	r3, [r7, #16]
 8013c20:	2b54      	cmp	r3, #84	; 0x54
 8013c22:	d00a      	beq.n	8013c3a <xTaskCreateStatic+0x66>
	__asm volatile
 8013c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c28:	f383 8811 	msr	BASEPRI, r3
 8013c2c:	f3bf 8f6f 	isb	sy
 8013c30:	f3bf 8f4f 	dsb	sy
 8013c34:	61bb      	str	r3, [r7, #24]
}
 8013c36:	bf00      	nop
 8013c38:	e7fe      	b.n	8013c38 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013c3a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d01e      	beq.n	8013c80 <xTaskCreateStatic+0xac>
 8013c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d01b      	beq.n	8013c80 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c4a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c50:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c54:	2202      	movs	r2, #2
 8013c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	9303      	str	r3, [sp, #12]
 8013c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c60:	9302      	str	r3, [sp, #8]
 8013c62:	f107 0314 	add.w	r3, r7, #20
 8013c66:	9301      	str	r3, [sp, #4]
 8013c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c6a:	9300      	str	r3, [sp, #0]
 8013c6c:	683b      	ldr	r3, [r7, #0]
 8013c6e:	687a      	ldr	r2, [r7, #4]
 8013c70:	68b9      	ldr	r1, [r7, #8]
 8013c72:	68f8      	ldr	r0, [r7, #12]
 8013c74:	f000 f850 	bl	8013d18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013c78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c7a:	f000 f8d5 	bl	8013e28 <prvAddNewTaskToReadyList>
 8013c7e:	e001      	b.n	8013c84 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8013c80:	2300      	movs	r3, #0
 8013c82:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013c84:	697b      	ldr	r3, [r7, #20]
	}
 8013c86:	4618      	mov	r0, r3
 8013c88:	3728      	adds	r7, #40	; 0x28
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	bd80      	pop	{r7, pc}

08013c8e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013c8e:	b580      	push	{r7, lr}
 8013c90:	b08c      	sub	sp, #48	; 0x30
 8013c92:	af04      	add	r7, sp, #16
 8013c94:	60f8      	str	r0, [r7, #12]
 8013c96:	60b9      	str	r1, [r7, #8]
 8013c98:	603b      	str	r3, [r7, #0]
 8013c9a:	4613      	mov	r3, r2
 8013c9c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013c9e:	88fb      	ldrh	r3, [r7, #6]
 8013ca0:	009b      	lsls	r3, r3, #2
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	f001 faa0 	bl	80151e8 <pvPortMalloc>
 8013ca8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013caa:	697b      	ldr	r3, [r7, #20]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d00e      	beq.n	8013cce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013cb0:	2054      	movs	r0, #84	; 0x54
 8013cb2:	f001 fa99 	bl	80151e8 <pvPortMalloc>
 8013cb6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013cb8:	69fb      	ldr	r3, [r7, #28]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d003      	beq.n	8013cc6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013cbe:	69fb      	ldr	r3, [r7, #28]
 8013cc0:	697a      	ldr	r2, [r7, #20]
 8013cc2:	631a      	str	r2, [r3, #48]	; 0x30
 8013cc4:	e005      	b.n	8013cd2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013cc6:	6978      	ldr	r0, [r7, #20]
 8013cc8:	f001 fb52 	bl	8015370 <vPortFree>
 8013ccc:	e001      	b.n	8013cd2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013cce:	2300      	movs	r3, #0
 8013cd0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013cd2:	69fb      	ldr	r3, [r7, #28]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d017      	beq.n	8013d08 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013cd8:	69fb      	ldr	r3, [r7, #28]
 8013cda:	2200      	movs	r2, #0
 8013cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013ce0:	88fa      	ldrh	r2, [r7, #6]
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	9303      	str	r3, [sp, #12]
 8013ce6:	69fb      	ldr	r3, [r7, #28]
 8013ce8:	9302      	str	r3, [sp, #8]
 8013cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cec:	9301      	str	r3, [sp, #4]
 8013cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cf0:	9300      	str	r3, [sp, #0]
 8013cf2:	683b      	ldr	r3, [r7, #0]
 8013cf4:	68b9      	ldr	r1, [r7, #8]
 8013cf6:	68f8      	ldr	r0, [r7, #12]
 8013cf8:	f000 f80e 	bl	8013d18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013cfc:	69f8      	ldr	r0, [r7, #28]
 8013cfe:	f000 f893 	bl	8013e28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013d02:	2301      	movs	r3, #1
 8013d04:	61bb      	str	r3, [r7, #24]
 8013d06:	e002      	b.n	8013d0e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013d08:	f04f 33ff 	mov.w	r3, #4294967295
 8013d0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013d0e:	69bb      	ldr	r3, [r7, #24]
	}
 8013d10:	4618      	mov	r0, r3
 8013d12:	3720      	adds	r7, #32
 8013d14:	46bd      	mov	sp, r7
 8013d16:	bd80      	pop	{r7, pc}

08013d18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	b088      	sub	sp, #32
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	60f8      	str	r0, [r7, #12]
 8013d20:	60b9      	str	r1, [r7, #8]
 8013d22:	607a      	str	r2, [r7, #4]
 8013d24:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013d30:	3b01      	subs	r3, #1
 8013d32:	009b      	lsls	r3, r3, #2
 8013d34:	4413      	add	r3, r2
 8013d36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013d38:	69bb      	ldr	r3, [r7, #24]
 8013d3a:	f023 0307 	bic.w	r3, r3, #7
 8013d3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013d40:	69bb      	ldr	r3, [r7, #24]
 8013d42:	f003 0307 	and.w	r3, r3, #7
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d00a      	beq.n	8013d60 <prvInitialiseNewTask+0x48>
	__asm volatile
 8013d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d4e:	f383 8811 	msr	BASEPRI, r3
 8013d52:	f3bf 8f6f 	isb	sy
 8013d56:	f3bf 8f4f 	dsb	sy
 8013d5a:	617b      	str	r3, [r7, #20]
}
 8013d5c:	bf00      	nop
 8013d5e:	e7fe      	b.n	8013d5e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013d60:	68bb      	ldr	r3, [r7, #8]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d01f      	beq.n	8013da6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013d66:	2300      	movs	r3, #0
 8013d68:	61fb      	str	r3, [r7, #28]
 8013d6a:	e012      	b.n	8013d92 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013d6c:	68ba      	ldr	r2, [r7, #8]
 8013d6e:	69fb      	ldr	r3, [r7, #28]
 8013d70:	4413      	add	r3, r2
 8013d72:	7819      	ldrb	r1, [r3, #0]
 8013d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d76:	69fb      	ldr	r3, [r7, #28]
 8013d78:	4413      	add	r3, r2
 8013d7a:	3334      	adds	r3, #52	; 0x34
 8013d7c:	460a      	mov	r2, r1
 8013d7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013d80:	68ba      	ldr	r2, [r7, #8]
 8013d82:	69fb      	ldr	r3, [r7, #28]
 8013d84:	4413      	add	r3, r2
 8013d86:	781b      	ldrb	r3, [r3, #0]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d006      	beq.n	8013d9a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013d8c:	69fb      	ldr	r3, [r7, #28]
 8013d8e:	3301      	adds	r3, #1
 8013d90:	61fb      	str	r3, [r7, #28]
 8013d92:	69fb      	ldr	r3, [r7, #28]
 8013d94:	2b0f      	cmp	r3, #15
 8013d96:	d9e9      	bls.n	8013d6c <prvInitialiseNewTask+0x54>
 8013d98:	e000      	b.n	8013d9c <prvInitialiseNewTask+0x84>
			{
				break;
 8013d9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d9e:	2200      	movs	r2, #0
 8013da0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013da4:	e003      	b.n	8013dae <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013da8:	2200      	movs	r2, #0
 8013daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013db0:	2b06      	cmp	r3, #6
 8013db2:	d901      	bls.n	8013db8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013db4:	2306      	movs	r3, #6
 8013db6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013dbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013dc2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dc6:	2200      	movs	r2, #0
 8013dc8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dcc:	3304      	adds	r3, #4
 8013dce:	4618      	mov	r0, r3
 8013dd0:	f7ff f8d9 	bl	8012f86 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dd6:	3318      	adds	r3, #24
 8013dd8:	4618      	mov	r0, r3
 8013dda:	f7ff f8d4 	bl	8012f86 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013de2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013de6:	f1c3 0207 	rsb	r2, r3, #7
 8013dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013df2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013df6:	2200      	movs	r2, #0
 8013df8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dfc:	2200      	movs	r2, #0
 8013dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013e02:	683a      	ldr	r2, [r7, #0]
 8013e04:	68f9      	ldr	r1, [r7, #12]
 8013e06:	69b8      	ldr	r0, [r7, #24]
 8013e08:	f000 ff9e 	bl	8014d48 <pxPortInitialiseStack>
 8013e0c:	4602      	mov	r2, r0
 8013e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d002      	beq.n	8013e1e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013e1e:	bf00      	nop
 8013e20:	3720      	adds	r7, #32
 8013e22:	46bd      	mov	sp, r7
 8013e24:	bd80      	pop	{r7, pc}
	...

08013e28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b082      	sub	sp, #8
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013e30:	f001 f8b8 	bl	8014fa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013e34:	4b2a      	ldr	r3, [pc, #168]	; (8013ee0 <prvAddNewTaskToReadyList+0xb8>)
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	3301      	adds	r3, #1
 8013e3a:	4a29      	ldr	r2, [pc, #164]	; (8013ee0 <prvAddNewTaskToReadyList+0xb8>)
 8013e3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013e3e:	4b29      	ldr	r3, [pc, #164]	; (8013ee4 <prvAddNewTaskToReadyList+0xbc>)
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d109      	bne.n	8013e5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013e46:	4a27      	ldr	r2, [pc, #156]	; (8013ee4 <prvAddNewTaskToReadyList+0xbc>)
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013e4c:	4b24      	ldr	r3, [pc, #144]	; (8013ee0 <prvAddNewTaskToReadyList+0xb8>)
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	2b01      	cmp	r3, #1
 8013e52:	d110      	bne.n	8013e76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013e54:	f000 fbc6 	bl	80145e4 <prvInitialiseTaskLists>
 8013e58:	e00d      	b.n	8013e76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013e5a:	4b23      	ldr	r3, [pc, #140]	; (8013ee8 <prvAddNewTaskToReadyList+0xc0>)
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d109      	bne.n	8013e76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013e62:	4b20      	ldr	r3, [pc, #128]	; (8013ee4 <prvAddNewTaskToReadyList+0xbc>)
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e6c:	429a      	cmp	r2, r3
 8013e6e:	d802      	bhi.n	8013e76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013e70:	4a1c      	ldr	r2, [pc, #112]	; (8013ee4 <prvAddNewTaskToReadyList+0xbc>)
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013e76:	4b1d      	ldr	r3, [pc, #116]	; (8013eec <prvAddNewTaskToReadyList+0xc4>)
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	3301      	adds	r3, #1
 8013e7c:	4a1b      	ldr	r2, [pc, #108]	; (8013eec <prvAddNewTaskToReadyList+0xc4>)
 8013e7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e84:	2201      	movs	r2, #1
 8013e86:	409a      	lsls	r2, r3
 8013e88:	4b19      	ldr	r3, [pc, #100]	; (8013ef0 <prvAddNewTaskToReadyList+0xc8>)
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	4313      	orrs	r3, r2
 8013e8e:	4a18      	ldr	r2, [pc, #96]	; (8013ef0 <prvAddNewTaskToReadyList+0xc8>)
 8013e90:	6013      	str	r3, [r2, #0]
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e96:	4613      	mov	r3, r2
 8013e98:	009b      	lsls	r3, r3, #2
 8013e9a:	4413      	add	r3, r2
 8013e9c:	009b      	lsls	r3, r3, #2
 8013e9e:	4a15      	ldr	r2, [pc, #84]	; (8013ef4 <prvAddNewTaskToReadyList+0xcc>)
 8013ea0:	441a      	add	r2, r3
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	3304      	adds	r3, #4
 8013ea6:	4619      	mov	r1, r3
 8013ea8:	4610      	mov	r0, r2
 8013eaa:	f7ff f879 	bl	8012fa0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013eae:	f001 f8a9 	bl	8015004 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013eb2:	4b0d      	ldr	r3, [pc, #52]	; (8013ee8 <prvAddNewTaskToReadyList+0xc0>)
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d00e      	beq.n	8013ed8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013eba:	4b0a      	ldr	r3, [pc, #40]	; (8013ee4 <prvAddNewTaskToReadyList+0xbc>)
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ec4:	429a      	cmp	r2, r3
 8013ec6:	d207      	bcs.n	8013ed8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013ec8:	4b0b      	ldr	r3, [pc, #44]	; (8013ef8 <prvAddNewTaskToReadyList+0xd0>)
 8013eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ece:	601a      	str	r2, [r3, #0]
 8013ed0:	f3bf 8f4f 	dsb	sy
 8013ed4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013ed8:	bf00      	nop
 8013eda:	3708      	adds	r7, #8
 8013edc:	46bd      	mov	sp, r7
 8013ede:	bd80      	pop	{r7, pc}
 8013ee0:	20001114 	.word	0x20001114
 8013ee4:	20001014 	.word	0x20001014
 8013ee8:	20001120 	.word	0x20001120
 8013eec:	20001130 	.word	0x20001130
 8013ef0:	2000111c 	.word	0x2000111c
 8013ef4:	20001018 	.word	0x20001018
 8013ef8:	e000ed04 	.word	0xe000ed04

08013efc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b084      	sub	sp, #16
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013f04:	2300      	movs	r3, #0
 8013f06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d017      	beq.n	8013f3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013f0e:	4b13      	ldr	r3, [pc, #76]	; (8013f5c <vTaskDelay+0x60>)
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d00a      	beq.n	8013f2c <vTaskDelay+0x30>
	__asm volatile
 8013f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f1a:	f383 8811 	msr	BASEPRI, r3
 8013f1e:	f3bf 8f6f 	isb	sy
 8013f22:	f3bf 8f4f 	dsb	sy
 8013f26:	60bb      	str	r3, [r7, #8]
}
 8013f28:	bf00      	nop
 8013f2a:	e7fe      	b.n	8013f2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013f2c:	f000 f87a 	bl	8014024 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013f30:	2100      	movs	r1, #0
 8013f32:	6878      	ldr	r0, [r7, #4]
 8013f34:	f000 fea2 	bl	8014c7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013f38:	f000 f882 	bl	8014040 <xTaskResumeAll>
 8013f3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d107      	bne.n	8013f54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013f44:	4b06      	ldr	r3, [pc, #24]	; (8013f60 <vTaskDelay+0x64>)
 8013f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f4a:	601a      	str	r2, [r3, #0]
 8013f4c:	f3bf 8f4f 	dsb	sy
 8013f50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013f54:	bf00      	nop
 8013f56:	3710      	adds	r7, #16
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	bd80      	pop	{r7, pc}
 8013f5c:	2000113c 	.word	0x2000113c
 8013f60:	e000ed04 	.word	0xe000ed04

08013f64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b08a      	sub	sp, #40	; 0x28
 8013f68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013f6e:	2300      	movs	r3, #0
 8013f70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013f72:	463a      	mov	r2, r7
 8013f74:	1d39      	adds	r1, r7, #4
 8013f76:	f107 0308 	add.w	r3, r7, #8
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f7ee f9de 	bl	800233c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013f80:	6839      	ldr	r1, [r7, #0]
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	68ba      	ldr	r2, [r7, #8]
 8013f86:	9202      	str	r2, [sp, #8]
 8013f88:	9301      	str	r3, [sp, #4]
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	9300      	str	r3, [sp, #0]
 8013f8e:	2300      	movs	r3, #0
 8013f90:	460a      	mov	r2, r1
 8013f92:	491e      	ldr	r1, [pc, #120]	; (801400c <vTaskStartScheduler+0xa8>)
 8013f94:	481e      	ldr	r0, [pc, #120]	; (8014010 <vTaskStartScheduler+0xac>)
 8013f96:	f7ff fe1d 	bl	8013bd4 <xTaskCreateStatic>
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	4a1d      	ldr	r2, [pc, #116]	; (8014014 <vTaskStartScheduler+0xb0>)
 8013f9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013fa0:	4b1c      	ldr	r3, [pc, #112]	; (8014014 <vTaskStartScheduler+0xb0>)
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d002      	beq.n	8013fae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013fa8:	2301      	movs	r3, #1
 8013faa:	617b      	str	r3, [r7, #20]
 8013fac:	e001      	b.n	8013fb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013fae:	2300      	movs	r3, #0
 8013fb0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013fb2:	697b      	ldr	r3, [r7, #20]
 8013fb4:	2b01      	cmp	r3, #1
 8013fb6:	d116      	bne.n	8013fe6 <vTaskStartScheduler+0x82>
	__asm volatile
 8013fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fbc:	f383 8811 	msr	BASEPRI, r3
 8013fc0:	f3bf 8f6f 	isb	sy
 8013fc4:	f3bf 8f4f 	dsb	sy
 8013fc8:	613b      	str	r3, [r7, #16]
}
 8013fca:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013fcc:	4b12      	ldr	r3, [pc, #72]	; (8014018 <vTaskStartScheduler+0xb4>)
 8013fce:	f04f 32ff 	mov.w	r2, #4294967295
 8013fd2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013fd4:	4b11      	ldr	r3, [pc, #68]	; (801401c <vTaskStartScheduler+0xb8>)
 8013fd6:	2201      	movs	r2, #1
 8013fd8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013fda:	4b11      	ldr	r3, [pc, #68]	; (8014020 <vTaskStartScheduler+0xbc>)
 8013fdc:	2200      	movs	r2, #0
 8013fde:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013fe0:	f000 ff3e 	bl	8014e60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013fe4:	e00e      	b.n	8014004 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013fe6:	697b      	ldr	r3, [r7, #20]
 8013fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fec:	d10a      	bne.n	8014004 <vTaskStartScheduler+0xa0>
	__asm volatile
 8013fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ff2:	f383 8811 	msr	BASEPRI, r3
 8013ff6:	f3bf 8f6f 	isb	sy
 8013ffa:	f3bf 8f4f 	dsb	sy
 8013ffe:	60fb      	str	r3, [r7, #12]
}
 8014000:	bf00      	nop
 8014002:	e7fe      	b.n	8014002 <vTaskStartScheduler+0x9e>
}
 8014004:	bf00      	nop
 8014006:	3718      	adds	r7, #24
 8014008:	46bd      	mov	sp, r7
 801400a:	bd80      	pop	{r7, pc}
 801400c:	0801c5c4 	.word	0x0801c5c4
 8014010:	080145b5 	.word	0x080145b5
 8014014:	20001138 	.word	0x20001138
 8014018:	20001134 	.word	0x20001134
 801401c:	20001120 	.word	0x20001120
 8014020:	20001118 	.word	0x20001118

08014024 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014024:	b480      	push	{r7}
 8014026:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8014028:	4b04      	ldr	r3, [pc, #16]	; (801403c <vTaskSuspendAll+0x18>)
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	3301      	adds	r3, #1
 801402e:	4a03      	ldr	r2, [pc, #12]	; (801403c <vTaskSuspendAll+0x18>)
 8014030:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8014032:	bf00      	nop
 8014034:	46bd      	mov	sp, r7
 8014036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801403a:	4770      	bx	lr
 801403c:	2000113c 	.word	0x2000113c

08014040 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b084      	sub	sp, #16
 8014044:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014046:	2300      	movs	r3, #0
 8014048:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801404a:	2300      	movs	r3, #0
 801404c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801404e:	4b41      	ldr	r3, [pc, #260]	; (8014154 <xTaskResumeAll+0x114>)
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d10a      	bne.n	801406c <xTaskResumeAll+0x2c>
	__asm volatile
 8014056:	f04f 0350 	mov.w	r3, #80	; 0x50
 801405a:	f383 8811 	msr	BASEPRI, r3
 801405e:	f3bf 8f6f 	isb	sy
 8014062:	f3bf 8f4f 	dsb	sy
 8014066:	603b      	str	r3, [r7, #0]
}
 8014068:	bf00      	nop
 801406a:	e7fe      	b.n	801406a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801406c:	f000 ff9a 	bl	8014fa4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014070:	4b38      	ldr	r3, [pc, #224]	; (8014154 <xTaskResumeAll+0x114>)
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	3b01      	subs	r3, #1
 8014076:	4a37      	ldr	r2, [pc, #220]	; (8014154 <xTaskResumeAll+0x114>)
 8014078:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801407a:	4b36      	ldr	r3, [pc, #216]	; (8014154 <xTaskResumeAll+0x114>)
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d161      	bne.n	8014146 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014082:	4b35      	ldr	r3, [pc, #212]	; (8014158 <xTaskResumeAll+0x118>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d05d      	beq.n	8014146 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801408a:	e02e      	b.n	80140ea <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801408c:	4b33      	ldr	r3, [pc, #204]	; (801415c <xTaskResumeAll+0x11c>)
 801408e:	68db      	ldr	r3, [r3, #12]
 8014090:	68db      	ldr	r3, [r3, #12]
 8014092:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	3318      	adds	r3, #24
 8014098:	4618      	mov	r0, r3
 801409a:	f7fe ffde 	bl	801305a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	3304      	adds	r3, #4
 80140a2:	4618      	mov	r0, r3
 80140a4:	f7fe ffd9 	bl	801305a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140ac:	2201      	movs	r2, #1
 80140ae:	409a      	lsls	r2, r3
 80140b0:	4b2b      	ldr	r3, [pc, #172]	; (8014160 <xTaskResumeAll+0x120>)
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	4313      	orrs	r3, r2
 80140b6:	4a2a      	ldr	r2, [pc, #168]	; (8014160 <xTaskResumeAll+0x120>)
 80140b8:	6013      	str	r3, [r2, #0]
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140be:	4613      	mov	r3, r2
 80140c0:	009b      	lsls	r3, r3, #2
 80140c2:	4413      	add	r3, r2
 80140c4:	009b      	lsls	r3, r3, #2
 80140c6:	4a27      	ldr	r2, [pc, #156]	; (8014164 <xTaskResumeAll+0x124>)
 80140c8:	441a      	add	r2, r3
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	3304      	adds	r3, #4
 80140ce:	4619      	mov	r1, r3
 80140d0:	4610      	mov	r0, r2
 80140d2:	f7fe ff65 	bl	8012fa0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140da:	4b23      	ldr	r3, [pc, #140]	; (8014168 <xTaskResumeAll+0x128>)
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140e0:	429a      	cmp	r2, r3
 80140e2:	d302      	bcc.n	80140ea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80140e4:	4b21      	ldr	r3, [pc, #132]	; (801416c <xTaskResumeAll+0x12c>)
 80140e6:	2201      	movs	r2, #1
 80140e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80140ea:	4b1c      	ldr	r3, [pc, #112]	; (801415c <xTaskResumeAll+0x11c>)
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d1cc      	bne.n	801408c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d001      	beq.n	80140fc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80140f8:	f000 fb12 	bl	8014720 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80140fc:	4b1c      	ldr	r3, [pc, #112]	; (8014170 <xTaskResumeAll+0x130>)
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d010      	beq.n	801412a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014108:	f000 f836 	bl	8014178 <xTaskIncrementTick>
 801410c:	4603      	mov	r3, r0
 801410e:	2b00      	cmp	r3, #0
 8014110:	d002      	beq.n	8014118 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8014112:	4b16      	ldr	r3, [pc, #88]	; (801416c <xTaskResumeAll+0x12c>)
 8014114:	2201      	movs	r2, #1
 8014116:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	3b01      	subs	r3, #1
 801411c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d1f1      	bne.n	8014108 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8014124:	4b12      	ldr	r3, [pc, #72]	; (8014170 <xTaskResumeAll+0x130>)
 8014126:	2200      	movs	r2, #0
 8014128:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801412a:	4b10      	ldr	r3, [pc, #64]	; (801416c <xTaskResumeAll+0x12c>)
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d009      	beq.n	8014146 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014132:	2301      	movs	r3, #1
 8014134:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014136:	4b0f      	ldr	r3, [pc, #60]	; (8014174 <xTaskResumeAll+0x134>)
 8014138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801413c:	601a      	str	r2, [r3, #0]
 801413e:	f3bf 8f4f 	dsb	sy
 8014142:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014146:	f000 ff5d 	bl	8015004 <vPortExitCritical>

	return xAlreadyYielded;
 801414a:	68bb      	ldr	r3, [r7, #8]
}
 801414c:	4618      	mov	r0, r3
 801414e:	3710      	adds	r7, #16
 8014150:	46bd      	mov	sp, r7
 8014152:	bd80      	pop	{r7, pc}
 8014154:	2000113c 	.word	0x2000113c
 8014158:	20001114 	.word	0x20001114
 801415c:	200010d4 	.word	0x200010d4
 8014160:	2000111c 	.word	0x2000111c
 8014164:	20001018 	.word	0x20001018
 8014168:	20001014 	.word	0x20001014
 801416c:	20001128 	.word	0x20001128
 8014170:	20001124 	.word	0x20001124
 8014174:	e000ed04 	.word	0xe000ed04

08014178 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b086      	sub	sp, #24
 801417c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801417e:	2300      	movs	r3, #0
 8014180:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014182:	4b4e      	ldr	r3, [pc, #312]	; (80142bc <xTaskIncrementTick+0x144>)
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	2b00      	cmp	r3, #0
 8014188:	f040 8088 	bne.w	801429c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801418c:	4b4c      	ldr	r3, [pc, #304]	; (80142c0 <xTaskIncrementTick+0x148>)
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	3301      	adds	r3, #1
 8014192:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014194:	4a4a      	ldr	r2, [pc, #296]	; (80142c0 <xTaskIncrementTick+0x148>)
 8014196:	693b      	ldr	r3, [r7, #16]
 8014198:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801419a:	693b      	ldr	r3, [r7, #16]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d120      	bne.n	80141e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80141a0:	4b48      	ldr	r3, [pc, #288]	; (80142c4 <xTaskIncrementTick+0x14c>)
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d00a      	beq.n	80141c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80141aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141ae:	f383 8811 	msr	BASEPRI, r3
 80141b2:	f3bf 8f6f 	isb	sy
 80141b6:	f3bf 8f4f 	dsb	sy
 80141ba:	603b      	str	r3, [r7, #0]
}
 80141bc:	bf00      	nop
 80141be:	e7fe      	b.n	80141be <xTaskIncrementTick+0x46>
 80141c0:	4b40      	ldr	r3, [pc, #256]	; (80142c4 <xTaskIncrementTick+0x14c>)
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	60fb      	str	r3, [r7, #12]
 80141c6:	4b40      	ldr	r3, [pc, #256]	; (80142c8 <xTaskIncrementTick+0x150>)
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	4a3e      	ldr	r2, [pc, #248]	; (80142c4 <xTaskIncrementTick+0x14c>)
 80141cc:	6013      	str	r3, [r2, #0]
 80141ce:	4a3e      	ldr	r2, [pc, #248]	; (80142c8 <xTaskIncrementTick+0x150>)
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	6013      	str	r3, [r2, #0]
 80141d4:	4b3d      	ldr	r3, [pc, #244]	; (80142cc <xTaskIncrementTick+0x154>)
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	3301      	adds	r3, #1
 80141da:	4a3c      	ldr	r2, [pc, #240]	; (80142cc <xTaskIncrementTick+0x154>)
 80141dc:	6013      	str	r3, [r2, #0]
 80141de:	f000 fa9f 	bl	8014720 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80141e2:	4b3b      	ldr	r3, [pc, #236]	; (80142d0 <xTaskIncrementTick+0x158>)
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	693a      	ldr	r2, [r7, #16]
 80141e8:	429a      	cmp	r2, r3
 80141ea:	d348      	bcc.n	801427e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80141ec:	4b35      	ldr	r3, [pc, #212]	; (80142c4 <xTaskIncrementTick+0x14c>)
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d104      	bne.n	8014200 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80141f6:	4b36      	ldr	r3, [pc, #216]	; (80142d0 <xTaskIncrementTick+0x158>)
 80141f8:	f04f 32ff 	mov.w	r2, #4294967295
 80141fc:	601a      	str	r2, [r3, #0]
					break;
 80141fe:	e03e      	b.n	801427e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014200:	4b30      	ldr	r3, [pc, #192]	; (80142c4 <xTaskIncrementTick+0x14c>)
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	68db      	ldr	r3, [r3, #12]
 8014206:	68db      	ldr	r3, [r3, #12]
 8014208:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801420a:	68bb      	ldr	r3, [r7, #8]
 801420c:	685b      	ldr	r3, [r3, #4]
 801420e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014210:	693a      	ldr	r2, [r7, #16]
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	429a      	cmp	r2, r3
 8014216:	d203      	bcs.n	8014220 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014218:	4a2d      	ldr	r2, [pc, #180]	; (80142d0 <xTaskIncrementTick+0x158>)
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801421e:	e02e      	b.n	801427e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014220:	68bb      	ldr	r3, [r7, #8]
 8014222:	3304      	adds	r3, #4
 8014224:	4618      	mov	r0, r3
 8014226:	f7fe ff18 	bl	801305a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801422a:	68bb      	ldr	r3, [r7, #8]
 801422c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801422e:	2b00      	cmp	r3, #0
 8014230:	d004      	beq.n	801423c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014232:	68bb      	ldr	r3, [r7, #8]
 8014234:	3318      	adds	r3, #24
 8014236:	4618      	mov	r0, r3
 8014238:	f7fe ff0f 	bl	801305a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801423c:	68bb      	ldr	r3, [r7, #8]
 801423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014240:	2201      	movs	r2, #1
 8014242:	409a      	lsls	r2, r3
 8014244:	4b23      	ldr	r3, [pc, #140]	; (80142d4 <xTaskIncrementTick+0x15c>)
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	4313      	orrs	r3, r2
 801424a:	4a22      	ldr	r2, [pc, #136]	; (80142d4 <xTaskIncrementTick+0x15c>)
 801424c:	6013      	str	r3, [r2, #0]
 801424e:	68bb      	ldr	r3, [r7, #8]
 8014250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014252:	4613      	mov	r3, r2
 8014254:	009b      	lsls	r3, r3, #2
 8014256:	4413      	add	r3, r2
 8014258:	009b      	lsls	r3, r3, #2
 801425a:	4a1f      	ldr	r2, [pc, #124]	; (80142d8 <xTaskIncrementTick+0x160>)
 801425c:	441a      	add	r2, r3
 801425e:	68bb      	ldr	r3, [r7, #8]
 8014260:	3304      	adds	r3, #4
 8014262:	4619      	mov	r1, r3
 8014264:	4610      	mov	r0, r2
 8014266:	f7fe fe9b 	bl	8012fa0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801426a:	68bb      	ldr	r3, [r7, #8]
 801426c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801426e:	4b1b      	ldr	r3, [pc, #108]	; (80142dc <xTaskIncrementTick+0x164>)
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014274:	429a      	cmp	r2, r3
 8014276:	d3b9      	bcc.n	80141ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014278:	2301      	movs	r3, #1
 801427a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801427c:	e7b6      	b.n	80141ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801427e:	4b17      	ldr	r3, [pc, #92]	; (80142dc <xTaskIncrementTick+0x164>)
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014284:	4914      	ldr	r1, [pc, #80]	; (80142d8 <xTaskIncrementTick+0x160>)
 8014286:	4613      	mov	r3, r2
 8014288:	009b      	lsls	r3, r3, #2
 801428a:	4413      	add	r3, r2
 801428c:	009b      	lsls	r3, r3, #2
 801428e:	440b      	add	r3, r1
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	2b01      	cmp	r3, #1
 8014294:	d907      	bls.n	80142a6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8014296:	2301      	movs	r3, #1
 8014298:	617b      	str	r3, [r7, #20]
 801429a:	e004      	b.n	80142a6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801429c:	4b10      	ldr	r3, [pc, #64]	; (80142e0 <xTaskIncrementTick+0x168>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	3301      	adds	r3, #1
 80142a2:	4a0f      	ldr	r2, [pc, #60]	; (80142e0 <xTaskIncrementTick+0x168>)
 80142a4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80142a6:	4b0f      	ldr	r3, [pc, #60]	; (80142e4 <xTaskIncrementTick+0x16c>)
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d001      	beq.n	80142b2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80142ae:	2301      	movs	r3, #1
 80142b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80142b2:	697b      	ldr	r3, [r7, #20]
}
 80142b4:	4618      	mov	r0, r3
 80142b6:	3718      	adds	r7, #24
 80142b8:	46bd      	mov	sp, r7
 80142ba:	bd80      	pop	{r7, pc}
 80142bc:	2000113c 	.word	0x2000113c
 80142c0:	20001118 	.word	0x20001118
 80142c4:	200010cc 	.word	0x200010cc
 80142c8:	200010d0 	.word	0x200010d0
 80142cc:	2000112c 	.word	0x2000112c
 80142d0:	20001134 	.word	0x20001134
 80142d4:	2000111c 	.word	0x2000111c
 80142d8:	20001018 	.word	0x20001018
 80142dc:	20001014 	.word	0x20001014
 80142e0:	20001124 	.word	0x20001124
 80142e4:	20001128 	.word	0x20001128

080142e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80142e8:	b480      	push	{r7}
 80142ea:	b087      	sub	sp, #28
 80142ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80142ee:	4b27      	ldr	r3, [pc, #156]	; (801438c <vTaskSwitchContext+0xa4>)
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d003      	beq.n	80142fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80142f6:	4b26      	ldr	r3, [pc, #152]	; (8014390 <vTaskSwitchContext+0xa8>)
 80142f8:	2201      	movs	r2, #1
 80142fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80142fc:	e03f      	b.n	801437e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80142fe:	4b24      	ldr	r3, [pc, #144]	; (8014390 <vTaskSwitchContext+0xa8>)
 8014300:	2200      	movs	r2, #0
 8014302:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014304:	4b23      	ldr	r3, [pc, #140]	; (8014394 <vTaskSwitchContext+0xac>)
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	fab3 f383 	clz	r3, r3
 8014310:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8014312:	7afb      	ldrb	r3, [r7, #11]
 8014314:	f1c3 031f 	rsb	r3, r3, #31
 8014318:	617b      	str	r3, [r7, #20]
 801431a:	491f      	ldr	r1, [pc, #124]	; (8014398 <vTaskSwitchContext+0xb0>)
 801431c:	697a      	ldr	r2, [r7, #20]
 801431e:	4613      	mov	r3, r2
 8014320:	009b      	lsls	r3, r3, #2
 8014322:	4413      	add	r3, r2
 8014324:	009b      	lsls	r3, r3, #2
 8014326:	440b      	add	r3, r1
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d10a      	bne.n	8014344 <vTaskSwitchContext+0x5c>
	__asm volatile
 801432e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014332:	f383 8811 	msr	BASEPRI, r3
 8014336:	f3bf 8f6f 	isb	sy
 801433a:	f3bf 8f4f 	dsb	sy
 801433e:	607b      	str	r3, [r7, #4]
}
 8014340:	bf00      	nop
 8014342:	e7fe      	b.n	8014342 <vTaskSwitchContext+0x5a>
 8014344:	697a      	ldr	r2, [r7, #20]
 8014346:	4613      	mov	r3, r2
 8014348:	009b      	lsls	r3, r3, #2
 801434a:	4413      	add	r3, r2
 801434c:	009b      	lsls	r3, r3, #2
 801434e:	4a12      	ldr	r2, [pc, #72]	; (8014398 <vTaskSwitchContext+0xb0>)
 8014350:	4413      	add	r3, r2
 8014352:	613b      	str	r3, [r7, #16]
 8014354:	693b      	ldr	r3, [r7, #16]
 8014356:	685b      	ldr	r3, [r3, #4]
 8014358:	685a      	ldr	r2, [r3, #4]
 801435a:	693b      	ldr	r3, [r7, #16]
 801435c:	605a      	str	r2, [r3, #4]
 801435e:	693b      	ldr	r3, [r7, #16]
 8014360:	685a      	ldr	r2, [r3, #4]
 8014362:	693b      	ldr	r3, [r7, #16]
 8014364:	3308      	adds	r3, #8
 8014366:	429a      	cmp	r2, r3
 8014368:	d104      	bne.n	8014374 <vTaskSwitchContext+0x8c>
 801436a:	693b      	ldr	r3, [r7, #16]
 801436c:	685b      	ldr	r3, [r3, #4]
 801436e:	685a      	ldr	r2, [r3, #4]
 8014370:	693b      	ldr	r3, [r7, #16]
 8014372:	605a      	str	r2, [r3, #4]
 8014374:	693b      	ldr	r3, [r7, #16]
 8014376:	685b      	ldr	r3, [r3, #4]
 8014378:	68db      	ldr	r3, [r3, #12]
 801437a:	4a08      	ldr	r2, [pc, #32]	; (801439c <vTaskSwitchContext+0xb4>)
 801437c:	6013      	str	r3, [r2, #0]
}
 801437e:	bf00      	nop
 8014380:	371c      	adds	r7, #28
 8014382:	46bd      	mov	sp, r7
 8014384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014388:	4770      	bx	lr
 801438a:	bf00      	nop
 801438c:	2000113c 	.word	0x2000113c
 8014390:	20001128 	.word	0x20001128
 8014394:	2000111c 	.word	0x2000111c
 8014398:	20001018 	.word	0x20001018
 801439c:	20001014 	.word	0x20001014

080143a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b084      	sub	sp, #16
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
 80143a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d10a      	bne.n	80143c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80143b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143b4:	f383 8811 	msr	BASEPRI, r3
 80143b8:	f3bf 8f6f 	isb	sy
 80143bc:	f3bf 8f4f 	dsb	sy
 80143c0:	60fb      	str	r3, [r7, #12]
}
 80143c2:	bf00      	nop
 80143c4:	e7fe      	b.n	80143c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80143c6:	4b07      	ldr	r3, [pc, #28]	; (80143e4 <vTaskPlaceOnEventList+0x44>)
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	3318      	adds	r3, #24
 80143cc:	4619      	mov	r1, r3
 80143ce:	6878      	ldr	r0, [r7, #4]
 80143d0:	f7fe fe0a 	bl	8012fe8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80143d4:	2101      	movs	r1, #1
 80143d6:	6838      	ldr	r0, [r7, #0]
 80143d8:	f000 fc50 	bl	8014c7c <prvAddCurrentTaskToDelayedList>
}
 80143dc:	bf00      	nop
 80143de:	3710      	adds	r7, #16
 80143e0:	46bd      	mov	sp, r7
 80143e2:	bd80      	pop	{r7, pc}
 80143e4:	20001014 	.word	0x20001014

080143e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80143e8:	b580      	push	{r7, lr}
 80143ea:	b086      	sub	sp, #24
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	68db      	ldr	r3, [r3, #12]
 80143f4:	68db      	ldr	r3, [r3, #12]
 80143f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80143f8:	693b      	ldr	r3, [r7, #16]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d10a      	bne.n	8014414 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80143fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014402:	f383 8811 	msr	BASEPRI, r3
 8014406:	f3bf 8f6f 	isb	sy
 801440a:	f3bf 8f4f 	dsb	sy
 801440e:	60fb      	str	r3, [r7, #12]
}
 8014410:	bf00      	nop
 8014412:	e7fe      	b.n	8014412 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014414:	693b      	ldr	r3, [r7, #16]
 8014416:	3318      	adds	r3, #24
 8014418:	4618      	mov	r0, r3
 801441a:	f7fe fe1e 	bl	801305a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801441e:	4b1d      	ldr	r3, [pc, #116]	; (8014494 <xTaskRemoveFromEventList+0xac>)
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d11c      	bne.n	8014460 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014426:	693b      	ldr	r3, [r7, #16]
 8014428:	3304      	adds	r3, #4
 801442a:	4618      	mov	r0, r3
 801442c:	f7fe fe15 	bl	801305a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014430:	693b      	ldr	r3, [r7, #16]
 8014432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014434:	2201      	movs	r2, #1
 8014436:	409a      	lsls	r2, r3
 8014438:	4b17      	ldr	r3, [pc, #92]	; (8014498 <xTaskRemoveFromEventList+0xb0>)
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	4313      	orrs	r3, r2
 801443e:	4a16      	ldr	r2, [pc, #88]	; (8014498 <xTaskRemoveFromEventList+0xb0>)
 8014440:	6013      	str	r3, [r2, #0]
 8014442:	693b      	ldr	r3, [r7, #16]
 8014444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014446:	4613      	mov	r3, r2
 8014448:	009b      	lsls	r3, r3, #2
 801444a:	4413      	add	r3, r2
 801444c:	009b      	lsls	r3, r3, #2
 801444e:	4a13      	ldr	r2, [pc, #76]	; (801449c <xTaskRemoveFromEventList+0xb4>)
 8014450:	441a      	add	r2, r3
 8014452:	693b      	ldr	r3, [r7, #16]
 8014454:	3304      	adds	r3, #4
 8014456:	4619      	mov	r1, r3
 8014458:	4610      	mov	r0, r2
 801445a:	f7fe fda1 	bl	8012fa0 <vListInsertEnd>
 801445e:	e005      	b.n	801446c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014460:	693b      	ldr	r3, [r7, #16]
 8014462:	3318      	adds	r3, #24
 8014464:	4619      	mov	r1, r3
 8014466:	480e      	ldr	r0, [pc, #56]	; (80144a0 <xTaskRemoveFromEventList+0xb8>)
 8014468:	f7fe fd9a 	bl	8012fa0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801446c:	693b      	ldr	r3, [r7, #16]
 801446e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014470:	4b0c      	ldr	r3, [pc, #48]	; (80144a4 <xTaskRemoveFromEventList+0xbc>)
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014476:	429a      	cmp	r2, r3
 8014478:	d905      	bls.n	8014486 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801447a:	2301      	movs	r3, #1
 801447c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801447e:	4b0a      	ldr	r3, [pc, #40]	; (80144a8 <xTaskRemoveFromEventList+0xc0>)
 8014480:	2201      	movs	r2, #1
 8014482:	601a      	str	r2, [r3, #0]
 8014484:	e001      	b.n	801448a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8014486:	2300      	movs	r3, #0
 8014488:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801448a:	697b      	ldr	r3, [r7, #20]
}
 801448c:	4618      	mov	r0, r3
 801448e:	3718      	adds	r7, #24
 8014490:	46bd      	mov	sp, r7
 8014492:	bd80      	pop	{r7, pc}
 8014494:	2000113c 	.word	0x2000113c
 8014498:	2000111c 	.word	0x2000111c
 801449c:	20001018 	.word	0x20001018
 80144a0:	200010d4 	.word	0x200010d4
 80144a4:	20001014 	.word	0x20001014
 80144a8:	20001128 	.word	0x20001128

080144ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80144ac:	b480      	push	{r7}
 80144ae:	b083      	sub	sp, #12
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80144b4:	4b06      	ldr	r3, [pc, #24]	; (80144d0 <vTaskInternalSetTimeOutState+0x24>)
 80144b6:	681a      	ldr	r2, [r3, #0]
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80144bc:	4b05      	ldr	r3, [pc, #20]	; (80144d4 <vTaskInternalSetTimeOutState+0x28>)
 80144be:	681a      	ldr	r2, [r3, #0]
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	605a      	str	r2, [r3, #4]
}
 80144c4:	bf00      	nop
 80144c6:	370c      	adds	r7, #12
 80144c8:	46bd      	mov	sp, r7
 80144ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ce:	4770      	bx	lr
 80144d0:	2000112c 	.word	0x2000112c
 80144d4:	20001118 	.word	0x20001118

080144d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b088      	sub	sp, #32
 80144dc:	af00      	add	r7, sp, #0
 80144de:	6078      	str	r0, [r7, #4]
 80144e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d10a      	bne.n	80144fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80144e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144ec:	f383 8811 	msr	BASEPRI, r3
 80144f0:	f3bf 8f6f 	isb	sy
 80144f4:	f3bf 8f4f 	dsb	sy
 80144f8:	613b      	str	r3, [r7, #16]
}
 80144fa:	bf00      	nop
 80144fc:	e7fe      	b.n	80144fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80144fe:	683b      	ldr	r3, [r7, #0]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d10a      	bne.n	801451a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014508:	f383 8811 	msr	BASEPRI, r3
 801450c:	f3bf 8f6f 	isb	sy
 8014510:	f3bf 8f4f 	dsb	sy
 8014514:	60fb      	str	r3, [r7, #12]
}
 8014516:	bf00      	nop
 8014518:	e7fe      	b.n	8014518 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801451a:	f000 fd43 	bl	8014fa4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801451e:	4b1d      	ldr	r3, [pc, #116]	; (8014594 <xTaskCheckForTimeOut+0xbc>)
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	685b      	ldr	r3, [r3, #4]
 8014528:	69ba      	ldr	r2, [r7, #24]
 801452a:	1ad3      	subs	r3, r2, r3
 801452c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801452e:	683b      	ldr	r3, [r7, #0]
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014536:	d102      	bne.n	801453e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014538:	2300      	movs	r3, #0
 801453a:	61fb      	str	r3, [r7, #28]
 801453c:	e023      	b.n	8014586 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	681a      	ldr	r2, [r3, #0]
 8014542:	4b15      	ldr	r3, [pc, #84]	; (8014598 <xTaskCheckForTimeOut+0xc0>)
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	429a      	cmp	r2, r3
 8014548:	d007      	beq.n	801455a <xTaskCheckForTimeOut+0x82>
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	685b      	ldr	r3, [r3, #4]
 801454e:	69ba      	ldr	r2, [r7, #24]
 8014550:	429a      	cmp	r2, r3
 8014552:	d302      	bcc.n	801455a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014554:	2301      	movs	r3, #1
 8014556:	61fb      	str	r3, [r7, #28]
 8014558:	e015      	b.n	8014586 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801455a:	683b      	ldr	r3, [r7, #0]
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	697a      	ldr	r2, [r7, #20]
 8014560:	429a      	cmp	r2, r3
 8014562:	d20b      	bcs.n	801457c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014564:	683b      	ldr	r3, [r7, #0]
 8014566:	681a      	ldr	r2, [r3, #0]
 8014568:	697b      	ldr	r3, [r7, #20]
 801456a:	1ad2      	subs	r2, r2, r3
 801456c:	683b      	ldr	r3, [r7, #0]
 801456e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014570:	6878      	ldr	r0, [r7, #4]
 8014572:	f7ff ff9b 	bl	80144ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014576:	2300      	movs	r3, #0
 8014578:	61fb      	str	r3, [r7, #28]
 801457a:	e004      	b.n	8014586 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	2200      	movs	r2, #0
 8014580:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014582:	2301      	movs	r3, #1
 8014584:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014586:	f000 fd3d 	bl	8015004 <vPortExitCritical>

	return xReturn;
 801458a:	69fb      	ldr	r3, [r7, #28]
}
 801458c:	4618      	mov	r0, r3
 801458e:	3720      	adds	r7, #32
 8014590:	46bd      	mov	sp, r7
 8014592:	bd80      	pop	{r7, pc}
 8014594:	20001118 	.word	0x20001118
 8014598:	2000112c 	.word	0x2000112c

0801459c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801459c:	b480      	push	{r7}
 801459e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80145a0:	4b03      	ldr	r3, [pc, #12]	; (80145b0 <vTaskMissedYield+0x14>)
 80145a2:	2201      	movs	r2, #1
 80145a4:	601a      	str	r2, [r3, #0]
}
 80145a6:	bf00      	nop
 80145a8:	46bd      	mov	sp, r7
 80145aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ae:	4770      	bx	lr
 80145b0:	20001128 	.word	0x20001128

080145b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	b082      	sub	sp, #8
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80145bc:	f000 f852 	bl	8014664 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80145c0:	4b06      	ldr	r3, [pc, #24]	; (80145dc <prvIdleTask+0x28>)
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	2b01      	cmp	r3, #1
 80145c6:	d9f9      	bls.n	80145bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80145c8:	4b05      	ldr	r3, [pc, #20]	; (80145e0 <prvIdleTask+0x2c>)
 80145ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145ce:	601a      	str	r2, [r3, #0]
 80145d0:	f3bf 8f4f 	dsb	sy
 80145d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80145d8:	e7f0      	b.n	80145bc <prvIdleTask+0x8>
 80145da:	bf00      	nop
 80145dc:	20001018 	.word	0x20001018
 80145e0:	e000ed04 	.word	0xe000ed04

080145e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b082      	sub	sp, #8
 80145e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80145ea:	2300      	movs	r3, #0
 80145ec:	607b      	str	r3, [r7, #4]
 80145ee:	e00c      	b.n	801460a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80145f0:	687a      	ldr	r2, [r7, #4]
 80145f2:	4613      	mov	r3, r2
 80145f4:	009b      	lsls	r3, r3, #2
 80145f6:	4413      	add	r3, r2
 80145f8:	009b      	lsls	r3, r3, #2
 80145fa:	4a12      	ldr	r2, [pc, #72]	; (8014644 <prvInitialiseTaskLists+0x60>)
 80145fc:	4413      	add	r3, r2
 80145fe:	4618      	mov	r0, r3
 8014600:	f7fe fca1 	bl	8012f46 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	3301      	adds	r3, #1
 8014608:	607b      	str	r3, [r7, #4]
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	2b06      	cmp	r3, #6
 801460e:	d9ef      	bls.n	80145f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014610:	480d      	ldr	r0, [pc, #52]	; (8014648 <prvInitialiseTaskLists+0x64>)
 8014612:	f7fe fc98 	bl	8012f46 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014616:	480d      	ldr	r0, [pc, #52]	; (801464c <prvInitialiseTaskLists+0x68>)
 8014618:	f7fe fc95 	bl	8012f46 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801461c:	480c      	ldr	r0, [pc, #48]	; (8014650 <prvInitialiseTaskLists+0x6c>)
 801461e:	f7fe fc92 	bl	8012f46 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014622:	480c      	ldr	r0, [pc, #48]	; (8014654 <prvInitialiseTaskLists+0x70>)
 8014624:	f7fe fc8f 	bl	8012f46 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014628:	480b      	ldr	r0, [pc, #44]	; (8014658 <prvInitialiseTaskLists+0x74>)
 801462a:	f7fe fc8c 	bl	8012f46 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801462e:	4b0b      	ldr	r3, [pc, #44]	; (801465c <prvInitialiseTaskLists+0x78>)
 8014630:	4a05      	ldr	r2, [pc, #20]	; (8014648 <prvInitialiseTaskLists+0x64>)
 8014632:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014634:	4b0a      	ldr	r3, [pc, #40]	; (8014660 <prvInitialiseTaskLists+0x7c>)
 8014636:	4a05      	ldr	r2, [pc, #20]	; (801464c <prvInitialiseTaskLists+0x68>)
 8014638:	601a      	str	r2, [r3, #0]
}
 801463a:	bf00      	nop
 801463c:	3708      	adds	r7, #8
 801463e:	46bd      	mov	sp, r7
 8014640:	bd80      	pop	{r7, pc}
 8014642:	bf00      	nop
 8014644:	20001018 	.word	0x20001018
 8014648:	200010a4 	.word	0x200010a4
 801464c:	200010b8 	.word	0x200010b8
 8014650:	200010d4 	.word	0x200010d4
 8014654:	200010e8 	.word	0x200010e8
 8014658:	20001100 	.word	0x20001100
 801465c:	200010cc 	.word	0x200010cc
 8014660:	200010d0 	.word	0x200010d0

08014664 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014664:	b580      	push	{r7, lr}
 8014666:	b082      	sub	sp, #8
 8014668:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801466a:	e019      	b.n	80146a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801466c:	f000 fc9a 	bl	8014fa4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014670:	4b10      	ldr	r3, [pc, #64]	; (80146b4 <prvCheckTasksWaitingTermination+0x50>)
 8014672:	68db      	ldr	r3, [r3, #12]
 8014674:	68db      	ldr	r3, [r3, #12]
 8014676:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	3304      	adds	r3, #4
 801467c:	4618      	mov	r0, r3
 801467e:	f7fe fcec 	bl	801305a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014682:	4b0d      	ldr	r3, [pc, #52]	; (80146b8 <prvCheckTasksWaitingTermination+0x54>)
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	3b01      	subs	r3, #1
 8014688:	4a0b      	ldr	r2, [pc, #44]	; (80146b8 <prvCheckTasksWaitingTermination+0x54>)
 801468a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801468c:	4b0b      	ldr	r3, [pc, #44]	; (80146bc <prvCheckTasksWaitingTermination+0x58>)
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	3b01      	subs	r3, #1
 8014692:	4a0a      	ldr	r2, [pc, #40]	; (80146bc <prvCheckTasksWaitingTermination+0x58>)
 8014694:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014696:	f000 fcb5 	bl	8015004 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801469a:	6878      	ldr	r0, [r7, #4]
 801469c:	f000 f810 	bl	80146c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80146a0:	4b06      	ldr	r3, [pc, #24]	; (80146bc <prvCheckTasksWaitingTermination+0x58>)
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d1e1      	bne.n	801466c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80146a8:	bf00      	nop
 80146aa:	bf00      	nop
 80146ac:	3708      	adds	r7, #8
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd80      	pop	{r7, pc}
 80146b2:	bf00      	nop
 80146b4:	200010e8 	.word	0x200010e8
 80146b8:	20001114 	.word	0x20001114
 80146bc:	200010fc 	.word	0x200010fc

080146c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b084      	sub	sp, #16
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d108      	bne.n	80146e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146d6:	4618      	mov	r0, r3
 80146d8:	f000 fe4a 	bl	8015370 <vPortFree>
				vPortFree( pxTCB );
 80146dc:	6878      	ldr	r0, [r7, #4]
 80146de:	f000 fe47 	bl	8015370 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80146e2:	e018      	b.n	8014716 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80146ea:	2b01      	cmp	r3, #1
 80146ec:	d103      	bne.n	80146f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80146ee:	6878      	ldr	r0, [r7, #4]
 80146f0:	f000 fe3e 	bl	8015370 <vPortFree>
	}
 80146f4:	e00f      	b.n	8014716 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80146fc:	2b02      	cmp	r3, #2
 80146fe:	d00a      	beq.n	8014716 <prvDeleteTCB+0x56>
	__asm volatile
 8014700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014704:	f383 8811 	msr	BASEPRI, r3
 8014708:	f3bf 8f6f 	isb	sy
 801470c:	f3bf 8f4f 	dsb	sy
 8014710:	60fb      	str	r3, [r7, #12]
}
 8014712:	bf00      	nop
 8014714:	e7fe      	b.n	8014714 <prvDeleteTCB+0x54>
	}
 8014716:	bf00      	nop
 8014718:	3710      	adds	r7, #16
 801471a:	46bd      	mov	sp, r7
 801471c:	bd80      	pop	{r7, pc}
	...

08014720 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014720:	b480      	push	{r7}
 8014722:	b083      	sub	sp, #12
 8014724:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014726:	4b0c      	ldr	r3, [pc, #48]	; (8014758 <prvResetNextTaskUnblockTime+0x38>)
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d104      	bne.n	801473a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014730:	4b0a      	ldr	r3, [pc, #40]	; (801475c <prvResetNextTaskUnblockTime+0x3c>)
 8014732:	f04f 32ff 	mov.w	r2, #4294967295
 8014736:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014738:	e008      	b.n	801474c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801473a:	4b07      	ldr	r3, [pc, #28]	; (8014758 <prvResetNextTaskUnblockTime+0x38>)
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	68db      	ldr	r3, [r3, #12]
 8014740:	68db      	ldr	r3, [r3, #12]
 8014742:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	685b      	ldr	r3, [r3, #4]
 8014748:	4a04      	ldr	r2, [pc, #16]	; (801475c <prvResetNextTaskUnblockTime+0x3c>)
 801474a:	6013      	str	r3, [r2, #0]
}
 801474c:	bf00      	nop
 801474e:	370c      	adds	r7, #12
 8014750:	46bd      	mov	sp, r7
 8014752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014756:	4770      	bx	lr
 8014758:	200010cc 	.word	0x200010cc
 801475c:	20001134 	.word	0x20001134

08014760 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014760:	b480      	push	{r7}
 8014762:	b083      	sub	sp, #12
 8014764:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014766:	4b0b      	ldr	r3, [pc, #44]	; (8014794 <xTaskGetSchedulerState+0x34>)
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	2b00      	cmp	r3, #0
 801476c:	d102      	bne.n	8014774 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801476e:	2301      	movs	r3, #1
 8014770:	607b      	str	r3, [r7, #4]
 8014772:	e008      	b.n	8014786 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014774:	4b08      	ldr	r3, [pc, #32]	; (8014798 <xTaskGetSchedulerState+0x38>)
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	2b00      	cmp	r3, #0
 801477a:	d102      	bne.n	8014782 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801477c:	2302      	movs	r3, #2
 801477e:	607b      	str	r3, [r7, #4]
 8014780:	e001      	b.n	8014786 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014782:	2300      	movs	r3, #0
 8014784:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014786:	687b      	ldr	r3, [r7, #4]
	}
 8014788:	4618      	mov	r0, r3
 801478a:	370c      	adds	r7, #12
 801478c:	46bd      	mov	sp, r7
 801478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014792:	4770      	bx	lr
 8014794:	20001120 	.word	0x20001120
 8014798:	2000113c 	.word	0x2000113c

0801479c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801479c:	b580      	push	{r7, lr}
 801479e:	b086      	sub	sp, #24
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80147a8:	2300      	movs	r3, #0
 80147aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d06e      	beq.n	8014890 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80147b2:	4b3a      	ldr	r3, [pc, #232]	; (801489c <xTaskPriorityDisinherit+0x100>)
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	693a      	ldr	r2, [r7, #16]
 80147b8:	429a      	cmp	r2, r3
 80147ba:	d00a      	beq.n	80147d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80147bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147c0:	f383 8811 	msr	BASEPRI, r3
 80147c4:	f3bf 8f6f 	isb	sy
 80147c8:	f3bf 8f4f 	dsb	sy
 80147cc:	60fb      	str	r3, [r7, #12]
}
 80147ce:	bf00      	nop
 80147d0:	e7fe      	b.n	80147d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80147d2:	693b      	ldr	r3, [r7, #16]
 80147d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d10a      	bne.n	80147f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80147da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147de:	f383 8811 	msr	BASEPRI, r3
 80147e2:	f3bf 8f6f 	isb	sy
 80147e6:	f3bf 8f4f 	dsb	sy
 80147ea:	60bb      	str	r3, [r7, #8]
}
 80147ec:	bf00      	nop
 80147ee:	e7fe      	b.n	80147ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80147f0:	693b      	ldr	r3, [r7, #16]
 80147f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80147f4:	1e5a      	subs	r2, r3, #1
 80147f6:	693b      	ldr	r3, [r7, #16]
 80147f8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80147fa:	693b      	ldr	r3, [r7, #16]
 80147fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147fe:	693b      	ldr	r3, [r7, #16]
 8014800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014802:	429a      	cmp	r2, r3
 8014804:	d044      	beq.n	8014890 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014806:	693b      	ldr	r3, [r7, #16]
 8014808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801480a:	2b00      	cmp	r3, #0
 801480c:	d140      	bne.n	8014890 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801480e:	693b      	ldr	r3, [r7, #16]
 8014810:	3304      	adds	r3, #4
 8014812:	4618      	mov	r0, r3
 8014814:	f7fe fc21 	bl	801305a <uxListRemove>
 8014818:	4603      	mov	r3, r0
 801481a:	2b00      	cmp	r3, #0
 801481c:	d115      	bne.n	801484a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801481e:	693b      	ldr	r3, [r7, #16]
 8014820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014822:	491f      	ldr	r1, [pc, #124]	; (80148a0 <xTaskPriorityDisinherit+0x104>)
 8014824:	4613      	mov	r3, r2
 8014826:	009b      	lsls	r3, r3, #2
 8014828:	4413      	add	r3, r2
 801482a:	009b      	lsls	r3, r3, #2
 801482c:	440b      	add	r3, r1
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d10a      	bne.n	801484a <xTaskPriorityDisinherit+0xae>
 8014834:	693b      	ldr	r3, [r7, #16]
 8014836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014838:	2201      	movs	r2, #1
 801483a:	fa02 f303 	lsl.w	r3, r2, r3
 801483e:	43da      	mvns	r2, r3
 8014840:	4b18      	ldr	r3, [pc, #96]	; (80148a4 <xTaskPriorityDisinherit+0x108>)
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	4013      	ands	r3, r2
 8014846:	4a17      	ldr	r2, [pc, #92]	; (80148a4 <xTaskPriorityDisinherit+0x108>)
 8014848:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801484a:	693b      	ldr	r3, [r7, #16]
 801484c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801484e:	693b      	ldr	r3, [r7, #16]
 8014850:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014852:	693b      	ldr	r3, [r7, #16]
 8014854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014856:	f1c3 0207 	rsb	r2, r3, #7
 801485a:	693b      	ldr	r3, [r7, #16]
 801485c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801485e:	693b      	ldr	r3, [r7, #16]
 8014860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014862:	2201      	movs	r2, #1
 8014864:	409a      	lsls	r2, r3
 8014866:	4b0f      	ldr	r3, [pc, #60]	; (80148a4 <xTaskPriorityDisinherit+0x108>)
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	4313      	orrs	r3, r2
 801486c:	4a0d      	ldr	r2, [pc, #52]	; (80148a4 <xTaskPriorityDisinherit+0x108>)
 801486e:	6013      	str	r3, [r2, #0]
 8014870:	693b      	ldr	r3, [r7, #16]
 8014872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014874:	4613      	mov	r3, r2
 8014876:	009b      	lsls	r3, r3, #2
 8014878:	4413      	add	r3, r2
 801487a:	009b      	lsls	r3, r3, #2
 801487c:	4a08      	ldr	r2, [pc, #32]	; (80148a0 <xTaskPriorityDisinherit+0x104>)
 801487e:	441a      	add	r2, r3
 8014880:	693b      	ldr	r3, [r7, #16]
 8014882:	3304      	adds	r3, #4
 8014884:	4619      	mov	r1, r3
 8014886:	4610      	mov	r0, r2
 8014888:	f7fe fb8a 	bl	8012fa0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801488c:	2301      	movs	r3, #1
 801488e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014890:	697b      	ldr	r3, [r7, #20]
	}
 8014892:	4618      	mov	r0, r3
 8014894:	3718      	adds	r7, #24
 8014896:	46bd      	mov	sp, r7
 8014898:	bd80      	pop	{r7, pc}
 801489a:	bf00      	nop
 801489c:	20001014 	.word	0x20001014
 80148a0:	20001018 	.word	0x20001018
 80148a4:	2000111c 	.word	0x2000111c

080148a8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b086      	sub	sp, #24
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	60f8      	str	r0, [r7, #12]
 80148b0:	60b9      	str	r1, [r7, #8]
 80148b2:	607a      	str	r2, [r7, #4]
 80148b4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80148b6:	f000 fb75 	bl	8014fa4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80148ba:	4b26      	ldr	r3, [pc, #152]	; (8014954 <xTaskNotifyWait+0xac>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80148c2:	b2db      	uxtb	r3, r3
 80148c4:	2b02      	cmp	r3, #2
 80148c6:	d01a      	beq.n	80148fe <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80148c8:	4b22      	ldr	r3, [pc, #136]	; (8014954 <xTaskNotifyWait+0xac>)
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80148ce:	68fa      	ldr	r2, [r7, #12]
 80148d0:	43d2      	mvns	r2, r2
 80148d2:	400a      	ands	r2, r1
 80148d4:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80148d6:	4b1f      	ldr	r3, [pc, #124]	; (8014954 <xTaskNotifyWait+0xac>)
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	2201      	movs	r2, #1
 80148dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80148e0:	683b      	ldr	r3, [r7, #0]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d00b      	beq.n	80148fe <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80148e6:	2101      	movs	r1, #1
 80148e8:	6838      	ldr	r0, [r7, #0]
 80148ea:	f000 f9c7 	bl	8014c7c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80148ee:	4b1a      	ldr	r3, [pc, #104]	; (8014958 <xTaskNotifyWait+0xb0>)
 80148f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148f4:	601a      	str	r2, [r3, #0]
 80148f6:	f3bf 8f4f 	dsb	sy
 80148fa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80148fe:	f000 fb81 	bl	8015004 <vPortExitCritical>

		taskENTER_CRITICAL();
 8014902:	f000 fb4f 	bl	8014fa4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d004      	beq.n	8014916 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801490c:	4b11      	ldr	r3, [pc, #68]	; (8014954 <xTaskNotifyWait+0xac>)
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8014916:	4b0f      	ldr	r3, [pc, #60]	; (8014954 <xTaskNotifyWait+0xac>)
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801491e:	b2db      	uxtb	r3, r3
 8014920:	2b02      	cmp	r3, #2
 8014922:	d002      	beq.n	801492a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8014924:	2300      	movs	r3, #0
 8014926:	617b      	str	r3, [r7, #20]
 8014928:	e008      	b.n	801493c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801492a:	4b0a      	ldr	r3, [pc, #40]	; (8014954 <xTaskNotifyWait+0xac>)
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014930:	68ba      	ldr	r2, [r7, #8]
 8014932:	43d2      	mvns	r2, r2
 8014934:	400a      	ands	r2, r1
 8014936:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8014938:	2301      	movs	r3, #1
 801493a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801493c:	4b05      	ldr	r3, [pc, #20]	; (8014954 <xTaskNotifyWait+0xac>)
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	2200      	movs	r2, #0
 8014942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8014946:	f000 fb5d 	bl	8015004 <vPortExitCritical>

		return xReturn;
 801494a:	697b      	ldr	r3, [r7, #20]
	}
 801494c:	4618      	mov	r0, r3
 801494e:	3718      	adds	r7, #24
 8014950:	46bd      	mov	sp, r7
 8014952:	bd80      	pop	{r7, pc}
 8014954:	20001014 	.word	0x20001014
 8014958:	e000ed04 	.word	0xe000ed04

0801495c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801495c:	b580      	push	{r7, lr}
 801495e:	b08a      	sub	sp, #40	; 0x28
 8014960:	af00      	add	r7, sp, #0
 8014962:	60f8      	str	r0, [r7, #12]
 8014964:	60b9      	str	r1, [r7, #8]
 8014966:	603b      	str	r3, [r7, #0]
 8014968:	4613      	mov	r3, r2
 801496a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801496c:	2301      	movs	r3, #1
 801496e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d10a      	bne.n	801498c <xTaskGenericNotify+0x30>
	__asm volatile
 8014976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801497a:	f383 8811 	msr	BASEPRI, r3
 801497e:	f3bf 8f6f 	isb	sy
 8014982:	f3bf 8f4f 	dsb	sy
 8014986:	61bb      	str	r3, [r7, #24]
}
 8014988:	bf00      	nop
 801498a:	e7fe      	b.n	801498a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8014990:	f000 fb08 	bl	8014fa4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8014994:	683b      	ldr	r3, [r7, #0]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d003      	beq.n	80149a2 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801499a:	6a3b      	ldr	r3, [r7, #32]
 801499c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801499e:	683b      	ldr	r3, [r7, #0]
 80149a0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80149a2:	6a3b      	ldr	r3, [r7, #32]
 80149a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80149a8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80149aa:	6a3b      	ldr	r3, [r7, #32]
 80149ac:	2202      	movs	r2, #2
 80149ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80149b2:	79fb      	ldrb	r3, [r7, #7]
 80149b4:	2b04      	cmp	r3, #4
 80149b6:	d828      	bhi.n	8014a0a <xTaskGenericNotify+0xae>
 80149b8:	a201      	add	r2, pc, #4	; (adr r2, 80149c0 <xTaskGenericNotify+0x64>)
 80149ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149be:	bf00      	nop
 80149c0:	08014a2b 	.word	0x08014a2b
 80149c4:	080149d5 	.word	0x080149d5
 80149c8:	080149e3 	.word	0x080149e3
 80149cc:	080149ef 	.word	0x080149ef
 80149d0:	080149f7 	.word	0x080149f7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80149d4:	6a3b      	ldr	r3, [r7, #32]
 80149d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80149d8:	68bb      	ldr	r3, [r7, #8]
 80149da:	431a      	orrs	r2, r3
 80149dc:	6a3b      	ldr	r3, [r7, #32]
 80149de:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80149e0:	e026      	b.n	8014a30 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80149e2:	6a3b      	ldr	r3, [r7, #32]
 80149e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80149e6:	1c5a      	adds	r2, r3, #1
 80149e8:	6a3b      	ldr	r3, [r7, #32]
 80149ea:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80149ec:	e020      	b.n	8014a30 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80149ee:	6a3b      	ldr	r3, [r7, #32]
 80149f0:	68ba      	ldr	r2, [r7, #8]
 80149f2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80149f4:	e01c      	b.n	8014a30 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80149f6:	7ffb      	ldrb	r3, [r7, #31]
 80149f8:	2b02      	cmp	r3, #2
 80149fa:	d003      	beq.n	8014a04 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80149fc:	6a3b      	ldr	r3, [r7, #32]
 80149fe:	68ba      	ldr	r2, [r7, #8]
 8014a00:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014a02:	e015      	b.n	8014a30 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8014a04:	2300      	movs	r3, #0
 8014a06:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8014a08:	e012      	b.n	8014a30 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014a0a:	6a3b      	ldr	r3, [r7, #32]
 8014a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a12:	d00c      	beq.n	8014a2e <xTaskGenericNotify+0xd2>
	__asm volatile
 8014a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a18:	f383 8811 	msr	BASEPRI, r3
 8014a1c:	f3bf 8f6f 	isb	sy
 8014a20:	f3bf 8f4f 	dsb	sy
 8014a24:	617b      	str	r3, [r7, #20]
}
 8014a26:	bf00      	nop
 8014a28:	e7fe      	b.n	8014a28 <xTaskGenericNotify+0xcc>
					break;
 8014a2a:	bf00      	nop
 8014a2c:	e000      	b.n	8014a30 <xTaskGenericNotify+0xd4>

					break;
 8014a2e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014a30:	7ffb      	ldrb	r3, [r7, #31]
 8014a32:	2b01      	cmp	r3, #1
 8014a34:	d139      	bne.n	8014aaa <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014a36:	6a3b      	ldr	r3, [r7, #32]
 8014a38:	3304      	adds	r3, #4
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	f7fe fb0d 	bl	801305a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8014a40:	6a3b      	ldr	r3, [r7, #32]
 8014a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a44:	2201      	movs	r2, #1
 8014a46:	409a      	lsls	r2, r3
 8014a48:	4b1b      	ldr	r3, [pc, #108]	; (8014ab8 <xTaskGenericNotify+0x15c>)
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	4313      	orrs	r3, r2
 8014a4e:	4a1a      	ldr	r2, [pc, #104]	; (8014ab8 <xTaskGenericNotify+0x15c>)
 8014a50:	6013      	str	r3, [r2, #0]
 8014a52:	6a3b      	ldr	r3, [r7, #32]
 8014a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a56:	4613      	mov	r3, r2
 8014a58:	009b      	lsls	r3, r3, #2
 8014a5a:	4413      	add	r3, r2
 8014a5c:	009b      	lsls	r3, r3, #2
 8014a5e:	4a17      	ldr	r2, [pc, #92]	; (8014abc <xTaskGenericNotify+0x160>)
 8014a60:	441a      	add	r2, r3
 8014a62:	6a3b      	ldr	r3, [r7, #32]
 8014a64:	3304      	adds	r3, #4
 8014a66:	4619      	mov	r1, r3
 8014a68:	4610      	mov	r0, r2
 8014a6a:	f7fe fa99 	bl	8012fa0 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014a6e:	6a3b      	ldr	r3, [r7, #32]
 8014a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d00a      	beq.n	8014a8c <xTaskGenericNotify+0x130>
	__asm volatile
 8014a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a7a:	f383 8811 	msr	BASEPRI, r3
 8014a7e:	f3bf 8f6f 	isb	sy
 8014a82:	f3bf 8f4f 	dsb	sy
 8014a86:	613b      	str	r3, [r7, #16]
}
 8014a88:	bf00      	nop
 8014a8a:	e7fe      	b.n	8014a8a <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014a8c:	6a3b      	ldr	r3, [r7, #32]
 8014a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a90:	4b0b      	ldr	r3, [pc, #44]	; (8014ac0 <xTaskGenericNotify+0x164>)
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d907      	bls.n	8014aaa <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8014a9a:	4b0a      	ldr	r3, [pc, #40]	; (8014ac4 <xTaskGenericNotify+0x168>)
 8014a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014aa0:	601a      	str	r2, [r3, #0]
 8014aa2:	f3bf 8f4f 	dsb	sy
 8014aa6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014aaa:	f000 faab 	bl	8015004 <vPortExitCritical>

		return xReturn;
 8014aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	3728      	adds	r7, #40	; 0x28
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	bd80      	pop	{r7, pc}
 8014ab8:	2000111c 	.word	0x2000111c
 8014abc:	20001018 	.word	0x20001018
 8014ac0:	20001014 	.word	0x20001014
 8014ac4:	e000ed04 	.word	0xe000ed04

08014ac8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b08e      	sub	sp, #56	; 0x38
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	60f8      	str	r0, [r7, #12]
 8014ad0:	60b9      	str	r1, [r7, #8]
 8014ad2:	603b      	str	r3, [r7, #0]
 8014ad4:	4613      	mov	r3, r2
 8014ad6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8014ad8:	2301      	movs	r3, #1
 8014ada:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d10a      	bne.n	8014af8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8014ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ae6:	f383 8811 	msr	BASEPRI, r3
 8014aea:	f3bf 8f6f 	isb	sy
 8014aee:	f3bf 8f4f 	dsb	sy
 8014af2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014af4:	bf00      	nop
 8014af6:	e7fe      	b.n	8014af6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014af8:	f000 fb36 	bl	8015168 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8014b00:	f3ef 8211 	mrs	r2, BASEPRI
 8014b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b08:	f383 8811 	msr	BASEPRI, r3
 8014b0c:	f3bf 8f6f 	isb	sy
 8014b10:	f3bf 8f4f 	dsb	sy
 8014b14:	623a      	str	r2, [r7, #32]
 8014b16:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8014b18:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8014b1c:	683b      	ldr	r3, [r7, #0]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d003      	beq.n	8014b2a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014b26:	683b      	ldr	r3, [r7, #0]
 8014b28:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014b30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b36:	2202      	movs	r2, #2
 8014b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014b3c:	79fb      	ldrb	r3, [r7, #7]
 8014b3e:	2b04      	cmp	r3, #4
 8014b40:	d828      	bhi.n	8014b94 <xTaskGenericNotifyFromISR+0xcc>
 8014b42:	a201      	add	r2, pc, #4	; (adr r2, 8014b48 <xTaskGenericNotifyFromISR+0x80>)
 8014b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b48:	08014bb5 	.word	0x08014bb5
 8014b4c:	08014b5d 	.word	0x08014b5d
 8014b50:	08014b6b 	.word	0x08014b6b
 8014b54:	08014b77 	.word	0x08014b77
 8014b58:	08014b7f 	.word	0x08014b7f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014b60:	68bb      	ldr	r3, [r7, #8]
 8014b62:	431a      	orrs	r2, r3
 8014b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b66:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014b68:	e027      	b.n	8014bba <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014b6e:	1c5a      	adds	r2, r3, #1
 8014b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b72:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014b74:	e021      	b.n	8014bba <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b78:	68ba      	ldr	r2, [r7, #8]
 8014b7a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014b7c:	e01d      	b.n	8014bba <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014b7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014b82:	2b02      	cmp	r3, #2
 8014b84:	d003      	beq.n	8014b8e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b88:	68ba      	ldr	r2, [r7, #8]
 8014b8a:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014b8c:	e015      	b.n	8014bba <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8014b8e:	2300      	movs	r3, #0
 8014b90:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8014b92:	e012      	b.n	8014bba <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b9c:	d00c      	beq.n	8014bb8 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8014b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ba2:	f383 8811 	msr	BASEPRI, r3
 8014ba6:	f3bf 8f6f 	isb	sy
 8014baa:	f3bf 8f4f 	dsb	sy
 8014bae:	61bb      	str	r3, [r7, #24]
}
 8014bb0:	bf00      	nop
 8014bb2:	e7fe      	b.n	8014bb2 <xTaskGenericNotifyFromISR+0xea>
					break;
 8014bb4:	bf00      	nop
 8014bb6:	e000      	b.n	8014bba <xTaskGenericNotifyFromISR+0xf2>
					break;
 8014bb8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014bba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014bbe:	2b01      	cmp	r3, #1
 8014bc0:	d145      	bne.n	8014c4e <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d00a      	beq.n	8014be0 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8014bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bce:	f383 8811 	msr	BASEPRI, r3
 8014bd2:	f3bf 8f6f 	isb	sy
 8014bd6:	f3bf 8f4f 	dsb	sy
 8014bda:	617b      	str	r3, [r7, #20]
}
 8014bdc:	bf00      	nop
 8014bde:	e7fe      	b.n	8014bde <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014be0:	4b20      	ldr	r3, [pc, #128]	; (8014c64 <xTaskGenericNotifyFromISR+0x19c>)
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d11c      	bne.n	8014c22 <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bea:	3304      	adds	r3, #4
 8014bec:	4618      	mov	r0, r3
 8014bee:	f7fe fa34 	bl	801305a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bf6:	2201      	movs	r2, #1
 8014bf8:	409a      	lsls	r2, r3
 8014bfa:	4b1b      	ldr	r3, [pc, #108]	; (8014c68 <xTaskGenericNotifyFromISR+0x1a0>)
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	4313      	orrs	r3, r2
 8014c00:	4a19      	ldr	r2, [pc, #100]	; (8014c68 <xTaskGenericNotifyFromISR+0x1a0>)
 8014c02:	6013      	str	r3, [r2, #0]
 8014c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c08:	4613      	mov	r3, r2
 8014c0a:	009b      	lsls	r3, r3, #2
 8014c0c:	4413      	add	r3, r2
 8014c0e:	009b      	lsls	r3, r3, #2
 8014c10:	4a16      	ldr	r2, [pc, #88]	; (8014c6c <xTaskGenericNotifyFromISR+0x1a4>)
 8014c12:	441a      	add	r2, r3
 8014c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c16:	3304      	adds	r3, #4
 8014c18:	4619      	mov	r1, r3
 8014c1a:	4610      	mov	r0, r2
 8014c1c:	f7fe f9c0 	bl	8012fa0 <vListInsertEnd>
 8014c20:	e005      	b.n	8014c2e <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c24:	3318      	adds	r3, #24
 8014c26:	4619      	mov	r1, r3
 8014c28:	4811      	ldr	r0, [pc, #68]	; (8014c70 <xTaskGenericNotifyFromISR+0x1a8>)
 8014c2a:	f7fe f9b9 	bl	8012fa0 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c32:	4b10      	ldr	r3, [pc, #64]	; (8014c74 <xTaskGenericNotifyFromISR+0x1ac>)
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c38:	429a      	cmp	r2, r3
 8014c3a:	d908      	bls.n	8014c4e <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8014c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d002      	beq.n	8014c48 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8014c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c44:	2201      	movs	r2, #1
 8014c46:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8014c48:	4b0b      	ldr	r3, [pc, #44]	; (8014c78 <xTaskGenericNotifyFromISR+0x1b0>)
 8014c4a:	2201      	movs	r2, #1
 8014c4c:	601a      	str	r2, [r3, #0]
 8014c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c50:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014c52:	693b      	ldr	r3, [r7, #16]
 8014c54:	f383 8811 	msr	BASEPRI, r3
}
 8014c58:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8014c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	3738      	adds	r7, #56	; 0x38
 8014c60:	46bd      	mov	sp, r7
 8014c62:	bd80      	pop	{r7, pc}
 8014c64:	2000113c 	.word	0x2000113c
 8014c68:	2000111c 	.word	0x2000111c
 8014c6c:	20001018 	.word	0x20001018
 8014c70:	200010d4 	.word	0x200010d4
 8014c74:	20001014 	.word	0x20001014
 8014c78:	20001128 	.word	0x20001128

08014c7c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b084      	sub	sp, #16
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	6078      	str	r0, [r7, #4]
 8014c84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014c86:	4b29      	ldr	r3, [pc, #164]	; (8014d2c <prvAddCurrentTaskToDelayedList+0xb0>)
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014c8c:	4b28      	ldr	r3, [pc, #160]	; (8014d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	3304      	adds	r3, #4
 8014c92:	4618      	mov	r0, r3
 8014c94:	f7fe f9e1 	bl	801305a <uxListRemove>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d10b      	bne.n	8014cb6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014c9e:	4b24      	ldr	r3, [pc, #144]	; (8014d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ca4:	2201      	movs	r2, #1
 8014ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8014caa:	43da      	mvns	r2, r3
 8014cac:	4b21      	ldr	r3, [pc, #132]	; (8014d34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	4013      	ands	r3, r2
 8014cb2:	4a20      	ldr	r2, [pc, #128]	; (8014d34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014cb4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cbc:	d10a      	bne.n	8014cd4 <prvAddCurrentTaskToDelayedList+0x58>
 8014cbe:	683b      	ldr	r3, [r7, #0]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d007      	beq.n	8014cd4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014cc4:	4b1a      	ldr	r3, [pc, #104]	; (8014d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	3304      	adds	r3, #4
 8014cca:	4619      	mov	r1, r3
 8014ccc:	481a      	ldr	r0, [pc, #104]	; (8014d38 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014cce:	f7fe f967 	bl	8012fa0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014cd2:	e026      	b.n	8014d22 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014cd4:	68fa      	ldr	r2, [r7, #12]
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	4413      	add	r3, r2
 8014cda:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014cdc:	4b14      	ldr	r3, [pc, #80]	; (8014d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	68ba      	ldr	r2, [r7, #8]
 8014ce2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014ce4:	68ba      	ldr	r2, [r7, #8]
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	429a      	cmp	r2, r3
 8014cea:	d209      	bcs.n	8014d00 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014cec:	4b13      	ldr	r3, [pc, #76]	; (8014d3c <prvAddCurrentTaskToDelayedList+0xc0>)
 8014cee:	681a      	ldr	r2, [r3, #0]
 8014cf0:	4b0f      	ldr	r3, [pc, #60]	; (8014d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	3304      	adds	r3, #4
 8014cf6:	4619      	mov	r1, r3
 8014cf8:	4610      	mov	r0, r2
 8014cfa:	f7fe f975 	bl	8012fe8 <vListInsert>
}
 8014cfe:	e010      	b.n	8014d22 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014d00:	4b0f      	ldr	r3, [pc, #60]	; (8014d40 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014d02:	681a      	ldr	r2, [r3, #0]
 8014d04:	4b0a      	ldr	r3, [pc, #40]	; (8014d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	3304      	adds	r3, #4
 8014d0a:	4619      	mov	r1, r3
 8014d0c:	4610      	mov	r0, r2
 8014d0e:	f7fe f96b 	bl	8012fe8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014d12:	4b0c      	ldr	r3, [pc, #48]	; (8014d44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	68ba      	ldr	r2, [r7, #8]
 8014d18:	429a      	cmp	r2, r3
 8014d1a:	d202      	bcs.n	8014d22 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014d1c:	4a09      	ldr	r2, [pc, #36]	; (8014d44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014d1e:	68bb      	ldr	r3, [r7, #8]
 8014d20:	6013      	str	r3, [r2, #0]
}
 8014d22:	bf00      	nop
 8014d24:	3710      	adds	r7, #16
 8014d26:	46bd      	mov	sp, r7
 8014d28:	bd80      	pop	{r7, pc}
 8014d2a:	bf00      	nop
 8014d2c:	20001118 	.word	0x20001118
 8014d30:	20001014 	.word	0x20001014
 8014d34:	2000111c 	.word	0x2000111c
 8014d38:	20001100 	.word	0x20001100
 8014d3c:	200010d0 	.word	0x200010d0
 8014d40:	200010cc 	.word	0x200010cc
 8014d44:	20001134 	.word	0x20001134

08014d48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014d48:	b480      	push	{r7}
 8014d4a:	b085      	sub	sp, #20
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	60f8      	str	r0, [r7, #12]
 8014d50:	60b9      	str	r1, [r7, #8]
 8014d52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	3b04      	subs	r3, #4
 8014d58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014d60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	3b04      	subs	r3, #4
 8014d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014d68:	68bb      	ldr	r3, [r7, #8]
 8014d6a:	f023 0201 	bic.w	r2, r3, #1
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	3b04      	subs	r3, #4
 8014d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014d78:	4a0c      	ldr	r2, [pc, #48]	; (8014dac <pxPortInitialiseStack+0x64>)
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	3b14      	subs	r3, #20
 8014d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014d84:	687a      	ldr	r2, [r7, #4]
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	3b04      	subs	r3, #4
 8014d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	f06f 0202 	mvn.w	r2, #2
 8014d96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	3b20      	subs	r3, #32
 8014d9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014d9e:	68fb      	ldr	r3, [r7, #12]
}
 8014da0:	4618      	mov	r0, r3
 8014da2:	3714      	adds	r7, #20
 8014da4:	46bd      	mov	sp, r7
 8014da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014daa:	4770      	bx	lr
 8014dac:	08014db1 	.word	0x08014db1

08014db0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014db0:	b480      	push	{r7}
 8014db2:	b085      	sub	sp, #20
 8014db4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014db6:	2300      	movs	r3, #0
 8014db8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014dba:	4b12      	ldr	r3, [pc, #72]	; (8014e04 <prvTaskExitError+0x54>)
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dc2:	d00a      	beq.n	8014dda <prvTaskExitError+0x2a>
	__asm volatile
 8014dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dc8:	f383 8811 	msr	BASEPRI, r3
 8014dcc:	f3bf 8f6f 	isb	sy
 8014dd0:	f3bf 8f4f 	dsb	sy
 8014dd4:	60fb      	str	r3, [r7, #12]
}
 8014dd6:	bf00      	nop
 8014dd8:	e7fe      	b.n	8014dd8 <prvTaskExitError+0x28>
	__asm volatile
 8014dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dde:	f383 8811 	msr	BASEPRI, r3
 8014de2:	f3bf 8f6f 	isb	sy
 8014de6:	f3bf 8f4f 	dsb	sy
 8014dea:	60bb      	str	r3, [r7, #8]
}
 8014dec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014dee:	bf00      	nop
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d0fc      	beq.n	8014df0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014df6:	bf00      	nop
 8014df8:	bf00      	nop
 8014dfa:	3714      	adds	r7, #20
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e02:	4770      	bx	lr
 8014e04:	20000944 	.word	0x20000944
	...

08014e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014e10:	4b07      	ldr	r3, [pc, #28]	; (8014e30 <pxCurrentTCBConst2>)
 8014e12:	6819      	ldr	r1, [r3, #0]
 8014e14:	6808      	ldr	r0, [r1, #0]
 8014e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e1a:	f380 8809 	msr	PSP, r0
 8014e1e:	f3bf 8f6f 	isb	sy
 8014e22:	f04f 0000 	mov.w	r0, #0
 8014e26:	f380 8811 	msr	BASEPRI, r0
 8014e2a:	4770      	bx	lr
 8014e2c:	f3af 8000 	nop.w

08014e30 <pxCurrentTCBConst2>:
 8014e30:	20001014 	.word	0x20001014
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014e34:	bf00      	nop
 8014e36:	bf00      	nop

08014e38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014e38:	4808      	ldr	r0, [pc, #32]	; (8014e5c <prvPortStartFirstTask+0x24>)
 8014e3a:	6800      	ldr	r0, [r0, #0]
 8014e3c:	6800      	ldr	r0, [r0, #0]
 8014e3e:	f380 8808 	msr	MSP, r0
 8014e42:	f04f 0000 	mov.w	r0, #0
 8014e46:	f380 8814 	msr	CONTROL, r0
 8014e4a:	b662      	cpsie	i
 8014e4c:	b661      	cpsie	f
 8014e4e:	f3bf 8f4f 	dsb	sy
 8014e52:	f3bf 8f6f 	isb	sy
 8014e56:	df00      	svc	0
 8014e58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014e5a:	bf00      	nop
 8014e5c:	e000ed08 	.word	0xe000ed08

08014e60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b086      	sub	sp, #24
 8014e64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014e66:	4b46      	ldr	r3, [pc, #280]	; (8014f80 <xPortStartScheduler+0x120>)
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	4a46      	ldr	r2, [pc, #280]	; (8014f84 <xPortStartScheduler+0x124>)
 8014e6c:	4293      	cmp	r3, r2
 8014e6e:	d10a      	bne.n	8014e86 <xPortStartScheduler+0x26>
	__asm volatile
 8014e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e74:	f383 8811 	msr	BASEPRI, r3
 8014e78:	f3bf 8f6f 	isb	sy
 8014e7c:	f3bf 8f4f 	dsb	sy
 8014e80:	613b      	str	r3, [r7, #16]
}
 8014e82:	bf00      	nop
 8014e84:	e7fe      	b.n	8014e84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014e86:	4b3e      	ldr	r3, [pc, #248]	; (8014f80 <xPortStartScheduler+0x120>)
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	4a3f      	ldr	r2, [pc, #252]	; (8014f88 <xPortStartScheduler+0x128>)
 8014e8c:	4293      	cmp	r3, r2
 8014e8e:	d10a      	bne.n	8014ea6 <xPortStartScheduler+0x46>
	__asm volatile
 8014e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e94:	f383 8811 	msr	BASEPRI, r3
 8014e98:	f3bf 8f6f 	isb	sy
 8014e9c:	f3bf 8f4f 	dsb	sy
 8014ea0:	60fb      	str	r3, [r7, #12]
}
 8014ea2:	bf00      	nop
 8014ea4:	e7fe      	b.n	8014ea4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014ea6:	4b39      	ldr	r3, [pc, #228]	; (8014f8c <xPortStartScheduler+0x12c>)
 8014ea8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014eaa:	697b      	ldr	r3, [r7, #20]
 8014eac:	781b      	ldrb	r3, [r3, #0]
 8014eae:	b2db      	uxtb	r3, r3
 8014eb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014eb2:	697b      	ldr	r3, [r7, #20]
 8014eb4:	22ff      	movs	r2, #255	; 0xff
 8014eb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014eb8:	697b      	ldr	r3, [r7, #20]
 8014eba:	781b      	ldrb	r3, [r3, #0]
 8014ebc:	b2db      	uxtb	r3, r3
 8014ebe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014ec0:	78fb      	ldrb	r3, [r7, #3]
 8014ec2:	b2db      	uxtb	r3, r3
 8014ec4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014ec8:	b2da      	uxtb	r2, r3
 8014eca:	4b31      	ldr	r3, [pc, #196]	; (8014f90 <xPortStartScheduler+0x130>)
 8014ecc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014ece:	4b31      	ldr	r3, [pc, #196]	; (8014f94 <xPortStartScheduler+0x134>)
 8014ed0:	2207      	movs	r2, #7
 8014ed2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014ed4:	e009      	b.n	8014eea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014ed6:	4b2f      	ldr	r3, [pc, #188]	; (8014f94 <xPortStartScheduler+0x134>)
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	3b01      	subs	r3, #1
 8014edc:	4a2d      	ldr	r2, [pc, #180]	; (8014f94 <xPortStartScheduler+0x134>)
 8014ede:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014ee0:	78fb      	ldrb	r3, [r7, #3]
 8014ee2:	b2db      	uxtb	r3, r3
 8014ee4:	005b      	lsls	r3, r3, #1
 8014ee6:	b2db      	uxtb	r3, r3
 8014ee8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014eea:	78fb      	ldrb	r3, [r7, #3]
 8014eec:	b2db      	uxtb	r3, r3
 8014eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014ef2:	2b80      	cmp	r3, #128	; 0x80
 8014ef4:	d0ef      	beq.n	8014ed6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014ef6:	4b27      	ldr	r3, [pc, #156]	; (8014f94 <xPortStartScheduler+0x134>)
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	f1c3 0307 	rsb	r3, r3, #7
 8014efe:	2b04      	cmp	r3, #4
 8014f00:	d00a      	beq.n	8014f18 <xPortStartScheduler+0xb8>
	__asm volatile
 8014f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f06:	f383 8811 	msr	BASEPRI, r3
 8014f0a:	f3bf 8f6f 	isb	sy
 8014f0e:	f3bf 8f4f 	dsb	sy
 8014f12:	60bb      	str	r3, [r7, #8]
}
 8014f14:	bf00      	nop
 8014f16:	e7fe      	b.n	8014f16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014f18:	4b1e      	ldr	r3, [pc, #120]	; (8014f94 <xPortStartScheduler+0x134>)
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	021b      	lsls	r3, r3, #8
 8014f1e:	4a1d      	ldr	r2, [pc, #116]	; (8014f94 <xPortStartScheduler+0x134>)
 8014f20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014f22:	4b1c      	ldr	r3, [pc, #112]	; (8014f94 <xPortStartScheduler+0x134>)
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014f2a:	4a1a      	ldr	r2, [pc, #104]	; (8014f94 <xPortStartScheduler+0x134>)
 8014f2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	b2da      	uxtb	r2, r3
 8014f32:	697b      	ldr	r3, [r7, #20]
 8014f34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014f36:	4b18      	ldr	r3, [pc, #96]	; (8014f98 <xPortStartScheduler+0x138>)
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	4a17      	ldr	r2, [pc, #92]	; (8014f98 <xPortStartScheduler+0x138>)
 8014f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014f40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014f42:	4b15      	ldr	r3, [pc, #84]	; (8014f98 <xPortStartScheduler+0x138>)
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	4a14      	ldr	r2, [pc, #80]	; (8014f98 <xPortStartScheduler+0x138>)
 8014f48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014f4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014f4e:	f000 f8dd 	bl	801510c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014f52:	4b12      	ldr	r3, [pc, #72]	; (8014f9c <xPortStartScheduler+0x13c>)
 8014f54:	2200      	movs	r2, #0
 8014f56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014f58:	f000 f8fc 	bl	8015154 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014f5c:	4b10      	ldr	r3, [pc, #64]	; (8014fa0 <xPortStartScheduler+0x140>)
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	4a0f      	ldr	r2, [pc, #60]	; (8014fa0 <xPortStartScheduler+0x140>)
 8014f62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014f66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014f68:	f7ff ff66 	bl	8014e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014f6c:	f7ff f9bc 	bl	80142e8 <vTaskSwitchContext>
	prvTaskExitError();
 8014f70:	f7ff ff1e 	bl	8014db0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014f74:	2300      	movs	r3, #0
}
 8014f76:	4618      	mov	r0, r3
 8014f78:	3718      	adds	r7, #24
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	bd80      	pop	{r7, pc}
 8014f7e:	bf00      	nop
 8014f80:	e000ed00 	.word	0xe000ed00
 8014f84:	410fc271 	.word	0x410fc271
 8014f88:	410fc270 	.word	0x410fc270
 8014f8c:	e000e400 	.word	0xe000e400
 8014f90:	20001140 	.word	0x20001140
 8014f94:	20001144 	.word	0x20001144
 8014f98:	e000ed20 	.word	0xe000ed20
 8014f9c:	20000944 	.word	0x20000944
 8014fa0:	e000ef34 	.word	0xe000ef34

08014fa4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014fa4:	b480      	push	{r7}
 8014fa6:	b083      	sub	sp, #12
 8014fa8:	af00      	add	r7, sp, #0
	__asm volatile
 8014faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fae:	f383 8811 	msr	BASEPRI, r3
 8014fb2:	f3bf 8f6f 	isb	sy
 8014fb6:	f3bf 8f4f 	dsb	sy
 8014fba:	607b      	str	r3, [r7, #4]
}
 8014fbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014fbe:	4b0f      	ldr	r3, [pc, #60]	; (8014ffc <vPortEnterCritical+0x58>)
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	3301      	adds	r3, #1
 8014fc4:	4a0d      	ldr	r2, [pc, #52]	; (8014ffc <vPortEnterCritical+0x58>)
 8014fc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014fc8:	4b0c      	ldr	r3, [pc, #48]	; (8014ffc <vPortEnterCritical+0x58>)
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	2b01      	cmp	r3, #1
 8014fce:	d10f      	bne.n	8014ff0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014fd0:	4b0b      	ldr	r3, [pc, #44]	; (8015000 <vPortEnterCritical+0x5c>)
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	b2db      	uxtb	r3, r3
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d00a      	beq.n	8014ff0 <vPortEnterCritical+0x4c>
	__asm volatile
 8014fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fde:	f383 8811 	msr	BASEPRI, r3
 8014fe2:	f3bf 8f6f 	isb	sy
 8014fe6:	f3bf 8f4f 	dsb	sy
 8014fea:	603b      	str	r3, [r7, #0]
}
 8014fec:	bf00      	nop
 8014fee:	e7fe      	b.n	8014fee <vPortEnterCritical+0x4a>
	}
}
 8014ff0:	bf00      	nop
 8014ff2:	370c      	adds	r7, #12
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ffa:	4770      	bx	lr
 8014ffc:	20000944 	.word	0x20000944
 8015000:	e000ed04 	.word	0xe000ed04

08015004 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015004:	b480      	push	{r7}
 8015006:	b083      	sub	sp, #12
 8015008:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801500a:	4b12      	ldr	r3, [pc, #72]	; (8015054 <vPortExitCritical+0x50>)
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	2b00      	cmp	r3, #0
 8015010:	d10a      	bne.n	8015028 <vPortExitCritical+0x24>
	__asm volatile
 8015012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015016:	f383 8811 	msr	BASEPRI, r3
 801501a:	f3bf 8f6f 	isb	sy
 801501e:	f3bf 8f4f 	dsb	sy
 8015022:	607b      	str	r3, [r7, #4]
}
 8015024:	bf00      	nop
 8015026:	e7fe      	b.n	8015026 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015028:	4b0a      	ldr	r3, [pc, #40]	; (8015054 <vPortExitCritical+0x50>)
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	3b01      	subs	r3, #1
 801502e:	4a09      	ldr	r2, [pc, #36]	; (8015054 <vPortExitCritical+0x50>)
 8015030:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015032:	4b08      	ldr	r3, [pc, #32]	; (8015054 <vPortExitCritical+0x50>)
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	2b00      	cmp	r3, #0
 8015038:	d105      	bne.n	8015046 <vPortExitCritical+0x42>
 801503a:	2300      	movs	r3, #0
 801503c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801503e:	683b      	ldr	r3, [r7, #0]
 8015040:	f383 8811 	msr	BASEPRI, r3
}
 8015044:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015046:	bf00      	nop
 8015048:	370c      	adds	r7, #12
 801504a:	46bd      	mov	sp, r7
 801504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015050:	4770      	bx	lr
 8015052:	bf00      	nop
 8015054:	20000944 	.word	0x20000944
	...

08015060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015060:	f3ef 8009 	mrs	r0, PSP
 8015064:	f3bf 8f6f 	isb	sy
 8015068:	4b15      	ldr	r3, [pc, #84]	; (80150c0 <pxCurrentTCBConst>)
 801506a:	681a      	ldr	r2, [r3, #0]
 801506c:	f01e 0f10 	tst.w	lr, #16
 8015070:	bf08      	it	eq
 8015072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801507a:	6010      	str	r0, [r2, #0]
 801507c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015080:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015084:	f380 8811 	msr	BASEPRI, r0
 8015088:	f3bf 8f4f 	dsb	sy
 801508c:	f3bf 8f6f 	isb	sy
 8015090:	f7ff f92a 	bl	80142e8 <vTaskSwitchContext>
 8015094:	f04f 0000 	mov.w	r0, #0
 8015098:	f380 8811 	msr	BASEPRI, r0
 801509c:	bc09      	pop	{r0, r3}
 801509e:	6819      	ldr	r1, [r3, #0]
 80150a0:	6808      	ldr	r0, [r1, #0]
 80150a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150a6:	f01e 0f10 	tst.w	lr, #16
 80150aa:	bf08      	it	eq
 80150ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80150b0:	f380 8809 	msr	PSP, r0
 80150b4:	f3bf 8f6f 	isb	sy
 80150b8:	4770      	bx	lr
 80150ba:	bf00      	nop
 80150bc:	f3af 8000 	nop.w

080150c0 <pxCurrentTCBConst>:
 80150c0:	20001014 	.word	0x20001014
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80150c4:	bf00      	nop
 80150c6:	bf00      	nop

080150c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b082      	sub	sp, #8
 80150cc:	af00      	add	r7, sp, #0
	__asm volatile
 80150ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150d2:	f383 8811 	msr	BASEPRI, r3
 80150d6:	f3bf 8f6f 	isb	sy
 80150da:	f3bf 8f4f 	dsb	sy
 80150de:	607b      	str	r3, [r7, #4]
}
 80150e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80150e2:	f7ff f849 	bl	8014178 <xTaskIncrementTick>
 80150e6:	4603      	mov	r3, r0
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d003      	beq.n	80150f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80150ec:	4b06      	ldr	r3, [pc, #24]	; (8015108 <SysTick_Handler+0x40>)
 80150ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150f2:	601a      	str	r2, [r3, #0]
 80150f4:	2300      	movs	r3, #0
 80150f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80150f8:	683b      	ldr	r3, [r7, #0]
 80150fa:	f383 8811 	msr	BASEPRI, r3
}
 80150fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015100:	bf00      	nop
 8015102:	3708      	adds	r7, #8
 8015104:	46bd      	mov	sp, r7
 8015106:	bd80      	pop	{r7, pc}
 8015108:	e000ed04 	.word	0xe000ed04

0801510c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801510c:	b480      	push	{r7}
 801510e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015110:	4b0b      	ldr	r3, [pc, #44]	; (8015140 <vPortSetupTimerInterrupt+0x34>)
 8015112:	2200      	movs	r2, #0
 8015114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015116:	4b0b      	ldr	r3, [pc, #44]	; (8015144 <vPortSetupTimerInterrupt+0x38>)
 8015118:	2200      	movs	r2, #0
 801511a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801511c:	4b0a      	ldr	r3, [pc, #40]	; (8015148 <vPortSetupTimerInterrupt+0x3c>)
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	4a0a      	ldr	r2, [pc, #40]	; (801514c <vPortSetupTimerInterrupt+0x40>)
 8015122:	fba2 2303 	umull	r2, r3, r2, r3
 8015126:	099b      	lsrs	r3, r3, #6
 8015128:	4a09      	ldr	r2, [pc, #36]	; (8015150 <vPortSetupTimerInterrupt+0x44>)
 801512a:	3b01      	subs	r3, #1
 801512c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801512e:	4b04      	ldr	r3, [pc, #16]	; (8015140 <vPortSetupTimerInterrupt+0x34>)
 8015130:	2207      	movs	r2, #7
 8015132:	601a      	str	r2, [r3, #0]
}
 8015134:	bf00      	nop
 8015136:	46bd      	mov	sp, r7
 8015138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801513c:	4770      	bx	lr
 801513e:	bf00      	nop
 8015140:	e000e010 	.word	0xe000e010
 8015144:	e000e018 	.word	0xe000e018
 8015148:	20000828 	.word	0x20000828
 801514c:	10624dd3 	.word	0x10624dd3
 8015150:	e000e014 	.word	0xe000e014

08015154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015154:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015164 <vPortEnableVFP+0x10>
 8015158:	6801      	ldr	r1, [r0, #0]
 801515a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801515e:	6001      	str	r1, [r0, #0]
 8015160:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015162:	bf00      	nop
 8015164:	e000ed88 	.word	0xe000ed88

08015168 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015168:	b480      	push	{r7}
 801516a:	b085      	sub	sp, #20
 801516c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801516e:	f3ef 8305 	mrs	r3, IPSR
 8015172:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	2b0f      	cmp	r3, #15
 8015178:	d914      	bls.n	80151a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801517a:	4a17      	ldr	r2, [pc, #92]	; (80151d8 <vPortValidateInterruptPriority+0x70>)
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	4413      	add	r3, r2
 8015180:	781b      	ldrb	r3, [r3, #0]
 8015182:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015184:	4b15      	ldr	r3, [pc, #84]	; (80151dc <vPortValidateInterruptPriority+0x74>)
 8015186:	781b      	ldrb	r3, [r3, #0]
 8015188:	7afa      	ldrb	r2, [r7, #11]
 801518a:	429a      	cmp	r2, r3
 801518c:	d20a      	bcs.n	80151a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015192:	f383 8811 	msr	BASEPRI, r3
 8015196:	f3bf 8f6f 	isb	sy
 801519a:	f3bf 8f4f 	dsb	sy
 801519e:	607b      	str	r3, [r7, #4]
}
 80151a0:	bf00      	nop
 80151a2:	e7fe      	b.n	80151a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80151a4:	4b0e      	ldr	r3, [pc, #56]	; (80151e0 <vPortValidateInterruptPriority+0x78>)
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80151ac:	4b0d      	ldr	r3, [pc, #52]	; (80151e4 <vPortValidateInterruptPriority+0x7c>)
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	429a      	cmp	r2, r3
 80151b2:	d90a      	bls.n	80151ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80151b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151b8:	f383 8811 	msr	BASEPRI, r3
 80151bc:	f3bf 8f6f 	isb	sy
 80151c0:	f3bf 8f4f 	dsb	sy
 80151c4:	603b      	str	r3, [r7, #0]
}
 80151c6:	bf00      	nop
 80151c8:	e7fe      	b.n	80151c8 <vPortValidateInterruptPriority+0x60>
	}
 80151ca:	bf00      	nop
 80151cc:	3714      	adds	r7, #20
 80151ce:	46bd      	mov	sp, r7
 80151d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151d4:	4770      	bx	lr
 80151d6:	bf00      	nop
 80151d8:	e000e3f0 	.word	0xe000e3f0
 80151dc:	20001140 	.word	0x20001140
 80151e0:	e000ed0c 	.word	0xe000ed0c
 80151e4:	20001144 	.word	0x20001144

080151e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b08a      	sub	sp, #40	; 0x28
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80151f0:	2300      	movs	r3, #0
 80151f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80151f4:	f7fe ff16 	bl	8014024 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80151f8:	4b58      	ldr	r3, [pc, #352]	; (801535c <pvPortMalloc+0x174>)
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d101      	bne.n	8015204 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015200:	f000 f910 	bl	8015424 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015204:	4b56      	ldr	r3, [pc, #344]	; (8015360 <pvPortMalloc+0x178>)
 8015206:	681a      	ldr	r2, [r3, #0]
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	4013      	ands	r3, r2
 801520c:	2b00      	cmp	r3, #0
 801520e:	f040 808e 	bne.w	801532e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d01d      	beq.n	8015254 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015218:	2208      	movs	r2, #8
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	4413      	add	r3, r2
 801521e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	f003 0307 	and.w	r3, r3, #7
 8015226:	2b00      	cmp	r3, #0
 8015228:	d014      	beq.n	8015254 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	f023 0307 	bic.w	r3, r3, #7
 8015230:	3308      	adds	r3, #8
 8015232:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	f003 0307 	and.w	r3, r3, #7
 801523a:	2b00      	cmp	r3, #0
 801523c:	d00a      	beq.n	8015254 <pvPortMalloc+0x6c>
	__asm volatile
 801523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015242:	f383 8811 	msr	BASEPRI, r3
 8015246:	f3bf 8f6f 	isb	sy
 801524a:	f3bf 8f4f 	dsb	sy
 801524e:	617b      	str	r3, [r7, #20]
}
 8015250:	bf00      	nop
 8015252:	e7fe      	b.n	8015252 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d069      	beq.n	801532e <pvPortMalloc+0x146>
 801525a:	4b42      	ldr	r3, [pc, #264]	; (8015364 <pvPortMalloc+0x17c>)
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	687a      	ldr	r2, [r7, #4]
 8015260:	429a      	cmp	r2, r3
 8015262:	d864      	bhi.n	801532e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015264:	4b40      	ldr	r3, [pc, #256]	; (8015368 <pvPortMalloc+0x180>)
 8015266:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015268:	4b3f      	ldr	r3, [pc, #252]	; (8015368 <pvPortMalloc+0x180>)
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801526e:	e004      	b.n	801527a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015272:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801527c:	685b      	ldr	r3, [r3, #4]
 801527e:	687a      	ldr	r2, [r7, #4]
 8015280:	429a      	cmp	r2, r3
 8015282:	d903      	bls.n	801528c <pvPortMalloc+0xa4>
 8015284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d1f1      	bne.n	8015270 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801528c:	4b33      	ldr	r3, [pc, #204]	; (801535c <pvPortMalloc+0x174>)
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015292:	429a      	cmp	r2, r3
 8015294:	d04b      	beq.n	801532e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015296:	6a3b      	ldr	r3, [r7, #32]
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	2208      	movs	r2, #8
 801529c:	4413      	add	r3, r2
 801529e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80152a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152a2:	681a      	ldr	r2, [r3, #0]
 80152a4:	6a3b      	ldr	r3, [r7, #32]
 80152a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80152a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152aa:	685a      	ldr	r2, [r3, #4]
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	1ad2      	subs	r2, r2, r3
 80152b0:	2308      	movs	r3, #8
 80152b2:	005b      	lsls	r3, r3, #1
 80152b4:	429a      	cmp	r2, r3
 80152b6:	d91f      	bls.n	80152f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80152b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	4413      	add	r3, r2
 80152be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80152c0:	69bb      	ldr	r3, [r7, #24]
 80152c2:	f003 0307 	and.w	r3, r3, #7
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d00a      	beq.n	80152e0 <pvPortMalloc+0xf8>
	__asm volatile
 80152ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152ce:	f383 8811 	msr	BASEPRI, r3
 80152d2:	f3bf 8f6f 	isb	sy
 80152d6:	f3bf 8f4f 	dsb	sy
 80152da:	613b      	str	r3, [r7, #16]
}
 80152dc:	bf00      	nop
 80152de:	e7fe      	b.n	80152de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80152e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152e2:	685a      	ldr	r2, [r3, #4]
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	1ad2      	subs	r2, r2, r3
 80152e8:	69bb      	ldr	r3, [r7, #24]
 80152ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80152ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152ee:	687a      	ldr	r2, [r7, #4]
 80152f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80152f2:	69b8      	ldr	r0, [r7, #24]
 80152f4:	f000 f8f8 	bl	80154e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80152f8:	4b1a      	ldr	r3, [pc, #104]	; (8015364 <pvPortMalloc+0x17c>)
 80152fa:	681a      	ldr	r2, [r3, #0]
 80152fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152fe:	685b      	ldr	r3, [r3, #4]
 8015300:	1ad3      	subs	r3, r2, r3
 8015302:	4a18      	ldr	r2, [pc, #96]	; (8015364 <pvPortMalloc+0x17c>)
 8015304:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015306:	4b17      	ldr	r3, [pc, #92]	; (8015364 <pvPortMalloc+0x17c>)
 8015308:	681a      	ldr	r2, [r3, #0]
 801530a:	4b18      	ldr	r3, [pc, #96]	; (801536c <pvPortMalloc+0x184>)
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	429a      	cmp	r2, r3
 8015310:	d203      	bcs.n	801531a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015312:	4b14      	ldr	r3, [pc, #80]	; (8015364 <pvPortMalloc+0x17c>)
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	4a15      	ldr	r2, [pc, #84]	; (801536c <pvPortMalloc+0x184>)
 8015318:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801531c:	685a      	ldr	r2, [r3, #4]
 801531e:	4b10      	ldr	r3, [pc, #64]	; (8015360 <pvPortMalloc+0x178>)
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	431a      	orrs	r2, r3
 8015324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015326:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801532a:	2200      	movs	r2, #0
 801532c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801532e:	f7fe fe87 	bl	8014040 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015332:	69fb      	ldr	r3, [r7, #28]
 8015334:	f003 0307 	and.w	r3, r3, #7
 8015338:	2b00      	cmp	r3, #0
 801533a:	d00a      	beq.n	8015352 <pvPortMalloc+0x16a>
	__asm volatile
 801533c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015340:	f383 8811 	msr	BASEPRI, r3
 8015344:	f3bf 8f6f 	isb	sy
 8015348:	f3bf 8f4f 	dsb	sy
 801534c:	60fb      	str	r3, [r7, #12]
}
 801534e:	bf00      	nop
 8015350:	e7fe      	b.n	8015350 <pvPortMalloc+0x168>
	return pvReturn;
 8015352:	69fb      	ldr	r3, [r7, #28]
}
 8015354:	4618      	mov	r0, r3
 8015356:	3728      	adds	r7, #40	; 0x28
 8015358:	46bd      	mov	sp, r7
 801535a:	bd80      	pop	{r7, pc}
 801535c:	20004d50 	.word	0x20004d50
 8015360:	20004d5c 	.word	0x20004d5c
 8015364:	20004d54 	.word	0x20004d54
 8015368:	20004d48 	.word	0x20004d48
 801536c:	20004d58 	.word	0x20004d58

08015370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b086      	sub	sp, #24
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d048      	beq.n	8015414 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015382:	2308      	movs	r3, #8
 8015384:	425b      	negs	r3, r3
 8015386:	697a      	ldr	r2, [r7, #20]
 8015388:	4413      	add	r3, r2
 801538a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801538c:	697b      	ldr	r3, [r7, #20]
 801538e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015390:	693b      	ldr	r3, [r7, #16]
 8015392:	685a      	ldr	r2, [r3, #4]
 8015394:	4b21      	ldr	r3, [pc, #132]	; (801541c <vPortFree+0xac>)
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	4013      	ands	r3, r2
 801539a:	2b00      	cmp	r3, #0
 801539c:	d10a      	bne.n	80153b4 <vPortFree+0x44>
	__asm volatile
 801539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153a2:	f383 8811 	msr	BASEPRI, r3
 80153a6:	f3bf 8f6f 	isb	sy
 80153aa:	f3bf 8f4f 	dsb	sy
 80153ae:	60fb      	str	r3, [r7, #12]
}
 80153b0:	bf00      	nop
 80153b2:	e7fe      	b.n	80153b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80153b4:	693b      	ldr	r3, [r7, #16]
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d00a      	beq.n	80153d2 <vPortFree+0x62>
	__asm volatile
 80153bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153c0:	f383 8811 	msr	BASEPRI, r3
 80153c4:	f3bf 8f6f 	isb	sy
 80153c8:	f3bf 8f4f 	dsb	sy
 80153cc:	60bb      	str	r3, [r7, #8]
}
 80153ce:	bf00      	nop
 80153d0:	e7fe      	b.n	80153d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80153d2:	693b      	ldr	r3, [r7, #16]
 80153d4:	685a      	ldr	r2, [r3, #4]
 80153d6:	4b11      	ldr	r3, [pc, #68]	; (801541c <vPortFree+0xac>)
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	4013      	ands	r3, r2
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d019      	beq.n	8015414 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80153e0:	693b      	ldr	r3, [r7, #16]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d115      	bne.n	8015414 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80153e8:	693b      	ldr	r3, [r7, #16]
 80153ea:	685a      	ldr	r2, [r3, #4]
 80153ec:	4b0b      	ldr	r3, [pc, #44]	; (801541c <vPortFree+0xac>)
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	43db      	mvns	r3, r3
 80153f2:	401a      	ands	r2, r3
 80153f4:	693b      	ldr	r3, [r7, #16]
 80153f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80153f8:	f7fe fe14 	bl	8014024 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80153fc:	693b      	ldr	r3, [r7, #16]
 80153fe:	685a      	ldr	r2, [r3, #4]
 8015400:	4b07      	ldr	r3, [pc, #28]	; (8015420 <vPortFree+0xb0>)
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	4413      	add	r3, r2
 8015406:	4a06      	ldr	r2, [pc, #24]	; (8015420 <vPortFree+0xb0>)
 8015408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801540a:	6938      	ldr	r0, [r7, #16]
 801540c:	f000 f86c 	bl	80154e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015410:	f7fe fe16 	bl	8014040 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015414:	bf00      	nop
 8015416:	3718      	adds	r7, #24
 8015418:	46bd      	mov	sp, r7
 801541a:	bd80      	pop	{r7, pc}
 801541c:	20004d5c 	.word	0x20004d5c
 8015420:	20004d54 	.word	0x20004d54

08015424 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015424:	b480      	push	{r7}
 8015426:	b085      	sub	sp, #20
 8015428:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801542a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801542e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015430:	4b27      	ldr	r3, [pc, #156]	; (80154d0 <prvHeapInit+0xac>)
 8015432:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	f003 0307 	and.w	r3, r3, #7
 801543a:	2b00      	cmp	r3, #0
 801543c:	d00c      	beq.n	8015458 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	3307      	adds	r3, #7
 8015442:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	f023 0307 	bic.w	r3, r3, #7
 801544a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801544c:	68ba      	ldr	r2, [r7, #8]
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	1ad3      	subs	r3, r2, r3
 8015452:	4a1f      	ldr	r2, [pc, #124]	; (80154d0 <prvHeapInit+0xac>)
 8015454:	4413      	add	r3, r2
 8015456:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801545c:	4a1d      	ldr	r2, [pc, #116]	; (80154d4 <prvHeapInit+0xb0>)
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015462:	4b1c      	ldr	r3, [pc, #112]	; (80154d4 <prvHeapInit+0xb0>)
 8015464:	2200      	movs	r2, #0
 8015466:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	68ba      	ldr	r2, [r7, #8]
 801546c:	4413      	add	r3, r2
 801546e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015470:	2208      	movs	r2, #8
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	1a9b      	subs	r3, r3, r2
 8015476:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	f023 0307 	bic.w	r3, r3, #7
 801547e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	4a15      	ldr	r2, [pc, #84]	; (80154d8 <prvHeapInit+0xb4>)
 8015484:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015486:	4b14      	ldr	r3, [pc, #80]	; (80154d8 <prvHeapInit+0xb4>)
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	2200      	movs	r2, #0
 801548c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801548e:	4b12      	ldr	r3, [pc, #72]	; (80154d8 <prvHeapInit+0xb4>)
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	2200      	movs	r2, #0
 8015494:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801549a:	683b      	ldr	r3, [r7, #0]
 801549c:	68fa      	ldr	r2, [r7, #12]
 801549e:	1ad2      	subs	r2, r2, r3
 80154a0:	683b      	ldr	r3, [r7, #0]
 80154a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80154a4:	4b0c      	ldr	r3, [pc, #48]	; (80154d8 <prvHeapInit+0xb4>)
 80154a6:	681a      	ldr	r2, [r3, #0]
 80154a8:	683b      	ldr	r3, [r7, #0]
 80154aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80154ac:	683b      	ldr	r3, [r7, #0]
 80154ae:	685b      	ldr	r3, [r3, #4]
 80154b0:	4a0a      	ldr	r2, [pc, #40]	; (80154dc <prvHeapInit+0xb8>)
 80154b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80154b4:	683b      	ldr	r3, [r7, #0]
 80154b6:	685b      	ldr	r3, [r3, #4]
 80154b8:	4a09      	ldr	r2, [pc, #36]	; (80154e0 <prvHeapInit+0xbc>)
 80154ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80154bc:	4b09      	ldr	r3, [pc, #36]	; (80154e4 <prvHeapInit+0xc0>)
 80154be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80154c2:	601a      	str	r2, [r3, #0]
}
 80154c4:	bf00      	nop
 80154c6:	3714      	adds	r7, #20
 80154c8:	46bd      	mov	sp, r7
 80154ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ce:	4770      	bx	lr
 80154d0:	20001148 	.word	0x20001148
 80154d4:	20004d48 	.word	0x20004d48
 80154d8:	20004d50 	.word	0x20004d50
 80154dc:	20004d58 	.word	0x20004d58
 80154e0:	20004d54 	.word	0x20004d54
 80154e4:	20004d5c 	.word	0x20004d5c

080154e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80154e8:	b480      	push	{r7}
 80154ea:	b085      	sub	sp, #20
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80154f0:	4b28      	ldr	r3, [pc, #160]	; (8015594 <prvInsertBlockIntoFreeList+0xac>)
 80154f2:	60fb      	str	r3, [r7, #12]
 80154f4:	e002      	b.n	80154fc <prvInsertBlockIntoFreeList+0x14>
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	60fb      	str	r3, [r7, #12]
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	687a      	ldr	r2, [r7, #4]
 8015502:	429a      	cmp	r2, r3
 8015504:	d8f7      	bhi.n	80154f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	685b      	ldr	r3, [r3, #4]
 801550e:	68ba      	ldr	r2, [r7, #8]
 8015510:	4413      	add	r3, r2
 8015512:	687a      	ldr	r2, [r7, #4]
 8015514:	429a      	cmp	r2, r3
 8015516:	d108      	bne.n	801552a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	685a      	ldr	r2, [r3, #4]
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	685b      	ldr	r3, [r3, #4]
 8015520:	441a      	add	r2, r3
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	685b      	ldr	r3, [r3, #4]
 8015532:	68ba      	ldr	r2, [r7, #8]
 8015534:	441a      	add	r2, r3
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	429a      	cmp	r2, r3
 801553c:	d118      	bne.n	8015570 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	681a      	ldr	r2, [r3, #0]
 8015542:	4b15      	ldr	r3, [pc, #84]	; (8015598 <prvInsertBlockIntoFreeList+0xb0>)
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	429a      	cmp	r2, r3
 8015548:	d00d      	beq.n	8015566 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	685a      	ldr	r2, [r3, #4]
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	685b      	ldr	r3, [r3, #4]
 8015554:	441a      	add	r2, r3
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	681a      	ldr	r2, [r3, #0]
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	601a      	str	r2, [r3, #0]
 8015564:	e008      	b.n	8015578 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015566:	4b0c      	ldr	r3, [pc, #48]	; (8015598 <prvInsertBlockIntoFreeList+0xb0>)
 8015568:	681a      	ldr	r2, [r3, #0]
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	601a      	str	r2, [r3, #0]
 801556e:	e003      	b.n	8015578 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	681a      	ldr	r2, [r3, #0]
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015578:	68fa      	ldr	r2, [r7, #12]
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	429a      	cmp	r2, r3
 801557e:	d002      	beq.n	8015586 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	687a      	ldr	r2, [r7, #4]
 8015584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015586:	bf00      	nop
 8015588:	3714      	adds	r7, #20
 801558a:	46bd      	mov	sp, r7
 801558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015590:	4770      	bx	lr
 8015592:	bf00      	nop
 8015594:	20004d48 	.word	0x20004d48
 8015598:	20004d50 	.word	0x20004d50

0801559c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801559c:	b580      	push	{r7, lr}
 801559e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80155a0:	2200      	movs	r2, #0
 80155a2:	4912      	ldr	r1, [pc, #72]	; (80155ec <MX_USB_DEVICE_Init+0x50>)
 80155a4:	4812      	ldr	r0, [pc, #72]	; (80155f0 <MX_USB_DEVICE_Init+0x54>)
 80155a6:	f7fc f84f 	bl	8011648 <USBD_Init>
 80155aa:	4603      	mov	r3, r0
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d001      	beq.n	80155b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80155b0:	f7ef f994 	bl	80048dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80155b4:	490f      	ldr	r1, [pc, #60]	; (80155f4 <MX_USB_DEVICE_Init+0x58>)
 80155b6:	480e      	ldr	r0, [pc, #56]	; (80155f0 <MX_USB_DEVICE_Init+0x54>)
 80155b8:	f7fc f87c 	bl	80116b4 <USBD_RegisterClass>
 80155bc:	4603      	mov	r3, r0
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d001      	beq.n	80155c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80155c2:	f7ef f98b 	bl	80048dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80155c6:	490c      	ldr	r1, [pc, #48]	; (80155f8 <MX_USB_DEVICE_Init+0x5c>)
 80155c8:	4809      	ldr	r0, [pc, #36]	; (80155f0 <MX_USB_DEVICE_Init+0x54>)
 80155ca:	f7fb ffa1 	bl	8011510 <USBD_CDC_RegisterInterface>
 80155ce:	4603      	mov	r3, r0
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d001      	beq.n	80155d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80155d4:	f7ef f982 	bl	80048dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80155d8:	4805      	ldr	r0, [pc, #20]	; (80155f0 <MX_USB_DEVICE_Init+0x54>)
 80155da:	f7fc f88c 	bl	80116f6 <USBD_Start>
 80155de:	4603      	mov	r3, r0
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d001      	beq.n	80155e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80155e4:	f7ef f97a 	bl	80048dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80155e8:	bf00      	nop
 80155ea:	bd80      	pop	{r7, pc}
 80155ec:	2000095c 	.word	0x2000095c
 80155f0:	2000bc94 	.word	0x2000bc94
 80155f4:	20000840 	.word	0x20000840
 80155f8:	20000948 	.word	0x20000948

080155fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80155fc:	b580      	push	{r7, lr}
 80155fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015600:	2200      	movs	r2, #0
 8015602:	4905      	ldr	r1, [pc, #20]	; (8015618 <CDC_Init_FS+0x1c>)
 8015604:	4805      	ldr	r0, [pc, #20]	; (801561c <CDC_Init_FS+0x20>)
 8015606:	f7fb ff98 	bl	801153a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801560a:	4905      	ldr	r1, [pc, #20]	; (8015620 <CDC_Init_FS+0x24>)
 801560c:	4803      	ldr	r0, [pc, #12]	; (801561c <CDC_Init_FS+0x20>)
 801560e:	f7fb ffad 	bl	801156c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015612:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015614:	4618      	mov	r0, r3
 8015616:	bd80      	pop	{r7, pc}
 8015618:	2000c164 	.word	0x2000c164
 801561c:	2000bc94 	.word	0x2000bc94
 8015620:	2000bf64 	.word	0x2000bf64

08015624 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015624:	b480      	push	{r7}
 8015626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015628:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801562a:	4618      	mov	r0, r3
 801562c:	46bd      	mov	sp, r7
 801562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015632:	4770      	bx	lr

08015634 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015634:	b480      	push	{r7}
 8015636:	b083      	sub	sp, #12
 8015638:	af00      	add	r7, sp, #0
 801563a:	4603      	mov	r3, r0
 801563c:	6039      	str	r1, [r7, #0]
 801563e:	71fb      	strb	r3, [r7, #7]
 8015640:	4613      	mov	r3, r2
 8015642:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015644:	79fb      	ldrb	r3, [r7, #7]
 8015646:	2b23      	cmp	r3, #35	; 0x23
 8015648:	f200 808c 	bhi.w	8015764 <CDC_Control_FS+0x130>
 801564c:	a201      	add	r2, pc, #4	; (adr r2, 8015654 <CDC_Control_FS+0x20>)
 801564e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015652:	bf00      	nop
 8015654:	08015765 	.word	0x08015765
 8015658:	08015765 	.word	0x08015765
 801565c:	08015765 	.word	0x08015765
 8015660:	08015765 	.word	0x08015765
 8015664:	08015765 	.word	0x08015765
 8015668:	08015765 	.word	0x08015765
 801566c:	08015765 	.word	0x08015765
 8015670:	08015765 	.word	0x08015765
 8015674:	08015765 	.word	0x08015765
 8015678:	08015765 	.word	0x08015765
 801567c:	08015765 	.word	0x08015765
 8015680:	08015765 	.word	0x08015765
 8015684:	08015765 	.word	0x08015765
 8015688:	08015765 	.word	0x08015765
 801568c:	08015765 	.word	0x08015765
 8015690:	08015765 	.word	0x08015765
 8015694:	08015765 	.word	0x08015765
 8015698:	08015765 	.word	0x08015765
 801569c:	08015765 	.word	0x08015765
 80156a0:	08015765 	.word	0x08015765
 80156a4:	08015765 	.word	0x08015765
 80156a8:	08015765 	.word	0x08015765
 80156ac:	08015765 	.word	0x08015765
 80156b0:	08015765 	.word	0x08015765
 80156b4:	08015765 	.word	0x08015765
 80156b8:	08015765 	.word	0x08015765
 80156bc:	08015765 	.word	0x08015765
 80156c0:	08015765 	.word	0x08015765
 80156c4:	08015765 	.word	0x08015765
 80156c8:	08015765 	.word	0x08015765
 80156cc:	08015765 	.word	0x08015765
 80156d0:	08015765 	.word	0x08015765
 80156d4:	080156e5 	.word	0x080156e5
 80156d8:	0801571f 	.word	0x0801571f
 80156dc:	08015765 	.word	0x08015765
 80156e0:	08015765 	.word	0x08015765
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 80156e4:	683b      	ldr	r3, [r7, #0]
 80156e6:	781a      	ldrb	r2, [r3, #0]
 80156e8:	4b22      	ldr	r3, [pc, #136]	; (8015774 <CDC_Control_FS+0x140>)
 80156ea:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 80156ec:	683b      	ldr	r3, [r7, #0]
 80156ee:	785a      	ldrb	r2, [r3, #1]
 80156f0:	4b20      	ldr	r3, [pc, #128]	; (8015774 <CDC_Control_FS+0x140>)
 80156f2:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 80156f4:	683b      	ldr	r3, [r7, #0]
 80156f6:	789a      	ldrb	r2, [r3, #2]
 80156f8:	4b1e      	ldr	r3, [pc, #120]	; (8015774 <CDC_Control_FS+0x140>)
 80156fa:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 80156fc:	683b      	ldr	r3, [r7, #0]
 80156fe:	78da      	ldrb	r2, [r3, #3]
 8015700:	4b1c      	ldr	r3, [pc, #112]	; (8015774 <CDC_Control_FS+0x140>)
 8015702:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 8015704:	683b      	ldr	r3, [r7, #0]
 8015706:	791a      	ldrb	r2, [r3, #4]
 8015708:	4b1a      	ldr	r3, [pc, #104]	; (8015774 <CDC_Control_FS+0x140>)
 801570a:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 801570c:	683b      	ldr	r3, [r7, #0]
 801570e:	795a      	ldrb	r2, [r3, #5]
 8015710:	4b18      	ldr	r3, [pc, #96]	; (8015774 <CDC_Control_FS+0x140>)
 8015712:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 8015714:	683b      	ldr	r3, [r7, #0]
 8015716:	799a      	ldrb	r2, [r3, #6]
 8015718:	4b16      	ldr	r3, [pc, #88]	; (8015774 <CDC_Control_FS+0x140>)
 801571a:	719a      	strb	r2, [r3, #6]
    	break;
 801571c:	e023      	b.n	8015766 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 801571e:	4b15      	ldr	r3, [pc, #84]	; (8015774 <CDC_Control_FS+0x140>)
 8015720:	781a      	ldrb	r2, [r3, #0]
 8015722:	683b      	ldr	r3, [r7, #0]
 8015724:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 8015726:	683b      	ldr	r3, [r7, #0]
 8015728:	3301      	adds	r3, #1
 801572a:	4a12      	ldr	r2, [pc, #72]	; (8015774 <CDC_Control_FS+0x140>)
 801572c:	7852      	ldrb	r2, [r2, #1]
 801572e:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 8015730:	683b      	ldr	r3, [r7, #0]
 8015732:	3302      	adds	r3, #2
 8015734:	4a0f      	ldr	r2, [pc, #60]	; (8015774 <CDC_Control_FS+0x140>)
 8015736:	7892      	ldrb	r2, [r2, #2]
 8015738:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 801573a:	683b      	ldr	r3, [r7, #0]
 801573c:	3303      	adds	r3, #3
 801573e:	4a0d      	ldr	r2, [pc, #52]	; (8015774 <CDC_Control_FS+0x140>)
 8015740:	78d2      	ldrb	r2, [r2, #3]
 8015742:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 8015744:	683b      	ldr	r3, [r7, #0]
 8015746:	3304      	adds	r3, #4
 8015748:	4a0a      	ldr	r2, [pc, #40]	; (8015774 <CDC_Control_FS+0x140>)
 801574a:	7912      	ldrb	r2, [r2, #4]
 801574c:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 801574e:	683b      	ldr	r3, [r7, #0]
 8015750:	3305      	adds	r3, #5
 8015752:	4a08      	ldr	r2, [pc, #32]	; (8015774 <CDC_Control_FS+0x140>)
 8015754:	7952      	ldrb	r2, [r2, #5]
 8015756:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 8015758:	683b      	ldr	r3, [r7, #0]
 801575a:	3306      	adds	r3, #6
 801575c:	4a05      	ldr	r2, [pc, #20]	; (8015774 <CDC_Control_FS+0x140>)
 801575e:	7992      	ldrb	r2, [r2, #6]
 8015760:	701a      	strb	r2, [r3, #0]
    break;
 8015762:	e000      	b.n	8015766 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015764:	bf00      	nop
  }

  return (USBD_OK);
 8015766:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015768:	4618      	mov	r0, r3
 801576a:	370c      	adds	r7, #12
 801576c:	46bd      	mov	sp, r7
 801576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015772:	4770      	bx	lr
 8015774:	2000c364 	.word	0x2000c364

08015778 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b082      	sub	sp, #8
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
 8015780:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 8015782:	683b      	ldr	r3, [r7, #0]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	b29b      	uxth	r3, r3
 8015788:	461a      	mov	r2, r3
 801578a:	6879      	ldr	r1, [r7, #4]
 801578c:	4807      	ldr	r0, [pc, #28]	; (80157ac <CDC_Receive_FS+0x34>)
 801578e:	f7ef f91c 	bl	80049ca <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015792:	6879      	ldr	r1, [r7, #4]
 8015794:	4806      	ldr	r0, [pc, #24]	; (80157b0 <CDC_Receive_FS+0x38>)
 8015796:	f7fb fee9 	bl	801156c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801579a:	4805      	ldr	r0, [pc, #20]	; (80157b0 <CDC_Receive_FS+0x38>)
 801579c:	f7fb ff2a 	bl	80115f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80157a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80157a2:	4618      	mov	r0, r3
 80157a4:	3708      	adds	r7, #8
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bd80      	pop	{r7, pc}
 80157aa:	bf00      	nop
 80157ac:	20000004 	.word	0x20000004
 80157b0:	2000bc94 	.word	0x2000bc94

080157b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80157b4:	b580      	push	{r7, lr}
 80157b6:	b084      	sub	sp, #16
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	6078      	str	r0, [r7, #4]
 80157bc:	460b      	mov	r3, r1
 80157be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80157c0:	2300      	movs	r3, #0
 80157c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80157c4:	4b0d      	ldr	r3, [pc, #52]	; (80157fc <CDC_Transmit_FS+0x48>)
 80157c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80157ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80157cc:	68bb      	ldr	r3, [r7, #8]
 80157ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d001      	beq.n	80157da <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80157d6:	2301      	movs	r3, #1
 80157d8:	e00b      	b.n	80157f2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80157da:	887b      	ldrh	r3, [r7, #2]
 80157dc:	461a      	mov	r2, r3
 80157de:	6879      	ldr	r1, [r7, #4]
 80157e0:	4806      	ldr	r0, [pc, #24]	; (80157fc <CDC_Transmit_FS+0x48>)
 80157e2:	f7fb feaa 	bl	801153a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80157e6:	4805      	ldr	r0, [pc, #20]	; (80157fc <CDC_Transmit_FS+0x48>)
 80157e8:	f7fb fed4 	bl	8011594 <USBD_CDC_TransmitPacket>
 80157ec:	4603      	mov	r3, r0
 80157ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80157f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80157f2:	4618      	mov	r0, r3
 80157f4:	3710      	adds	r7, #16
 80157f6:	46bd      	mov	sp, r7
 80157f8:	bd80      	pop	{r7, pc}
 80157fa:	bf00      	nop
 80157fc:	2000bc94 	.word	0x2000bc94

08015800 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015800:	b480      	push	{r7}
 8015802:	b087      	sub	sp, #28
 8015804:	af00      	add	r7, sp, #0
 8015806:	60f8      	str	r0, [r7, #12]
 8015808:	60b9      	str	r1, [r7, #8]
 801580a:	4613      	mov	r3, r2
 801580c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801580e:	2300      	movs	r3, #0
 8015810:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015812:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015816:	4618      	mov	r0, r3
 8015818:	371c      	adds	r7, #28
 801581a:	46bd      	mov	sp, r7
 801581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015820:	4770      	bx	lr
	...

08015824 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015824:	b480      	push	{r7}
 8015826:	b083      	sub	sp, #12
 8015828:	af00      	add	r7, sp, #0
 801582a:	4603      	mov	r3, r0
 801582c:	6039      	str	r1, [r7, #0]
 801582e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015830:	683b      	ldr	r3, [r7, #0]
 8015832:	2212      	movs	r2, #18
 8015834:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015836:	4b03      	ldr	r3, [pc, #12]	; (8015844 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015838:	4618      	mov	r0, r3
 801583a:	370c      	adds	r7, #12
 801583c:	46bd      	mov	sp, r7
 801583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015842:	4770      	bx	lr
 8015844:	20000978 	.word	0x20000978

08015848 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015848:	b480      	push	{r7}
 801584a:	b083      	sub	sp, #12
 801584c:	af00      	add	r7, sp, #0
 801584e:	4603      	mov	r3, r0
 8015850:	6039      	str	r1, [r7, #0]
 8015852:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015854:	683b      	ldr	r3, [r7, #0]
 8015856:	2204      	movs	r2, #4
 8015858:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801585a:	4b03      	ldr	r3, [pc, #12]	; (8015868 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801585c:	4618      	mov	r0, r3
 801585e:	370c      	adds	r7, #12
 8015860:	46bd      	mov	sp, r7
 8015862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015866:	4770      	bx	lr
 8015868:	2000098c 	.word	0x2000098c

0801586c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801586c:	b580      	push	{r7, lr}
 801586e:	b082      	sub	sp, #8
 8015870:	af00      	add	r7, sp, #0
 8015872:	4603      	mov	r3, r0
 8015874:	6039      	str	r1, [r7, #0]
 8015876:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015878:	79fb      	ldrb	r3, [r7, #7]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d105      	bne.n	801588a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801587e:	683a      	ldr	r2, [r7, #0]
 8015880:	4907      	ldr	r1, [pc, #28]	; (80158a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8015882:	4808      	ldr	r0, [pc, #32]	; (80158a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8015884:	f7fc ff14 	bl	80126b0 <USBD_GetString>
 8015888:	e004      	b.n	8015894 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801588a:	683a      	ldr	r2, [r7, #0]
 801588c:	4904      	ldr	r1, [pc, #16]	; (80158a0 <USBD_FS_ProductStrDescriptor+0x34>)
 801588e:	4805      	ldr	r0, [pc, #20]	; (80158a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8015890:	f7fc ff0e 	bl	80126b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015894:	4b02      	ldr	r3, [pc, #8]	; (80158a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015896:	4618      	mov	r0, r3
 8015898:	3708      	adds	r7, #8
 801589a:	46bd      	mov	sp, r7
 801589c:	bd80      	pop	{r7, pc}
 801589e:	bf00      	nop
 80158a0:	2000c36c 	.word	0x2000c36c
 80158a4:	0801c5cc 	.word	0x0801c5cc

080158a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b082      	sub	sp, #8
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	4603      	mov	r3, r0
 80158b0:	6039      	str	r1, [r7, #0]
 80158b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80158b4:	683a      	ldr	r2, [r7, #0]
 80158b6:	4904      	ldr	r1, [pc, #16]	; (80158c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80158b8:	4804      	ldr	r0, [pc, #16]	; (80158cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80158ba:	f7fc fef9 	bl	80126b0 <USBD_GetString>
  return USBD_StrDesc;
 80158be:	4b02      	ldr	r3, [pc, #8]	; (80158c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80158c0:	4618      	mov	r0, r3
 80158c2:	3708      	adds	r7, #8
 80158c4:	46bd      	mov	sp, r7
 80158c6:	bd80      	pop	{r7, pc}
 80158c8:	2000c36c 	.word	0x2000c36c
 80158cc:	0801c5e4 	.word	0x0801c5e4

080158d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80158d0:	b580      	push	{r7, lr}
 80158d2:	b082      	sub	sp, #8
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	4603      	mov	r3, r0
 80158d8:	6039      	str	r1, [r7, #0]
 80158da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80158dc:	683b      	ldr	r3, [r7, #0]
 80158de:	221a      	movs	r2, #26
 80158e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80158e2:	f000 f843 	bl	801596c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80158e6:	4b02      	ldr	r3, [pc, #8]	; (80158f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80158e8:	4618      	mov	r0, r3
 80158ea:	3708      	adds	r7, #8
 80158ec:	46bd      	mov	sp, r7
 80158ee:	bd80      	pop	{r7, pc}
 80158f0:	20000990 	.word	0x20000990

080158f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b082      	sub	sp, #8
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	4603      	mov	r3, r0
 80158fc:	6039      	str	r1, [r7, #0]
 80158fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015900:	79fb      	ldrb	r3, [r7, #7]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d105      	bne.n	8015912 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015906:	683a      	ldr	r2, [r7, #0]
 8015908:	4907      	ldr	r1, [pc, #28]	; (8015928 <USBD_FS_ConfigStrDescriptor+0x34>)
 801590a:	4808      	ldr	r0, [pc, #32]	; (801592c <USBD_FS_ConfigStrDescriptor+0x38>)
 801590c:	f7fc fed0 	bl	80126b0 <USBD_GetString>
 8015910:	e004      	b.n	801591c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015912:	683a      	ldr	r2, [r7, #0]
 8015914:	4904      	ldr	r1, [pc, #16]	; (8015928 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015916:	4805      	ldr	r0, [pc, #20]	; (801592c <USBD_FS_ConfigStrDescriptor+0x38>)
 8015918:	f7fc feca 	bl	80126b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801591c:	4b02      	ldr	r3, [pc, #8]	; (8015928 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801591e:	4618      	mov	r0, r3
 8015920:	3708      	adds	r7, #8
 8015922:	46bd      	mov	sp, r7
 8015924:	bd80      	pop	{r7, pc}
 8015926:	bf00      	nop
 8015928:	2000c36c 	.word	0x2000c36c
 801592c:	0801c5f8 	.word	0x0801c5f8

08015930 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015930:	b580      	push	{r7, lr}
 8015932:	b082      	sub	sp, #8
 8015934:	af00      	add	r7, sp, #0
 8015936:	4603      	mov	r3, r0
 8015938:	6039      	str	r1, [r7, #0]
 801593a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801593c:	79fb      	ldrb	r3, [r7, #7]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d105      	bne.n	801594e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015942:	683a      	ldr	r2, [r7, #0]
 8015944:	4907      	ldr	r1, [pc, #28]	; (8015964 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015946:	4808      	ldr	r0, [pc, #32]	; (8015968 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015948:	f7fc feb2 	bl	80126b0 <USBD_GetString>
 801594c:	e004      	b.n	8015958 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801594e:	683a      	ldr	r2, [r7, #0]
 8015950:	4904      	ldr	r1, [pc, #16]	; (8015964 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015952:	4805      	ldr	r0, [pc, #20]	; (8015968 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015954:	f7fc feac 	bl	80126b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015958:	4b02      	ldr	r3, [pc, #8]	; (8015964 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801595a:	4618      	mov	r0, r3
 801595c:	3708      	adds	r7, #8
 801595e:	46bd      	mov	sp, r7
 8015960:	bd80      	pop	{r7, pc}
 8015962:	bf00      	nop
 8015964:	2000c36c 	.word	0x2000c36c
 8015968:	0801c604 	.word	0x0801c604

0801596c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801596c:	b580      	push	{r7, lr}
 801596e:	b084      	sub	sp, #16
 8015970:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015972:	4b0f      	ldr	r3, [pc, #60]	; (80159b0 <Get_SerialNum+0x44>)
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015978:	4b0e      	ldr	r3, [pc, #56]	; (80159b4 <Get_SerialNum+0x48>)
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801597e:	4b0e      	ldr	r3, [pc, #56]	; (80159b8 <Get_SerialNum+0x4c>)
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015984:	68fa      	ldr	r2, [r7, #12]
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	4413      	add	r3, r2
 801598a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d009      	beq.n	80159a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015992:	2208      	movs	r2, #8
 8015994:	4909      	ldr	r1, [pc, #36]	; (80159bc <Get_SerialNum+0x50>)
 8015996:	68f8      	ldr	r0, [r7, #12]
 8015998:	f000 f814 	bl	80159c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801599c:	2204      	movs	r2, #4
 801599e:	4908      	ldr	r1, [pc, #32]	; (80159c0 <Get_SerialNum+0x54>)
 80159a0:	68b8      	ldr	r0, [r7, #8]
 80159a2:	f000 f80f 	bl	80159c4 <IntToUnicode>
  }
}
 80159a6:	bf00      	nop
 80159a8:	3710      	adds	r7, #16
 80159aa:	46bd      	mov	sp, r7
 80159ac:	bd80      	pop	{r7, pc}
 80159ae:	bf00      	nop
 80159b0:	1fff7a10 	.word	0x1fff7a10
 80159b4:	1fff7a14 	.word	0x1fff7a14
 80159b8:	1fff7a18 	.word	0x1fff7a18
 80159bc:	20000992 	.word	0x20000992
 80159c0:	200009a2 	.word	0x200009a2

080159c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80159c4:	b480      	push	{r7}
 80159c6:	b087      	sub	sp, #28
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	60f8      	str	r0, [r7, #12]
 80159cc:	60b9      	str	r1, [r7, #8]
 80159ce:	4613      	mov	r3, r2
 80159d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80159d2:	2300      	movs	r3, #0
 80159d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80159d6:	2300      	movs	r3, #0
 80159d8:	75fb      	strb	r3, [r7, #23]
 80159da:	e027      	b.n	8015a2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	0f1b      	lsrs	r3, r3, #28
 80159e0:	2b09      	cmp	r3, #9
 80159e2:	d80b      	bhi.n	80159fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	0f1b      	lsrs	r3, r3, #28
 80159e8:	b2da      	uxtb	r2, r3
 80159ea:	7dfb      	ldrb	r3, [r7, #23]
 80159ec:	005b      	lsls	r3, r3, #1
 80159ee:	4619      	mov	r1, r3
 80159f0:	68bb      	ldr	r3, [r7, #8]
 80159f2:	440b      	add	r3, r1
 80159f4:	3230      	adds	r2, #48	; 0x30
 80159f6:	b2d2      	uxtb	r2, r2
 80159f8:	701a      	strb	r2, [r3, #0]
 80159fa:	e00a      	b.n	8015a12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	0f1b      	lsrs	r3, r3, #28
 8015a00:	b2da      	uxtb	r2, r3
 8015a02:	7dfb      	ldrb	r3, [r7, #23]
 8015a04:	005b      	lsls	r3, r3, #1
 8015a06:	4619      	mov	r1, r3
 8015a08:	68bb      	ldr	r3, [r7, #8]
 8015a0a:	440b      	add	r3, r1
 8015a0c:	3237      	adds	r2, #55	; 0x37
 8015a0e:	b2d2      	uxtb	r2, r2
 8015a10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	011b      	lsls	r3, r3, #4
 8015a16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015a18:	7dfb      	ldrb	r3, [r7, #23]
 8015a1a:	005b      	lsls	r3, r3, #1
 8015a1c:	3301      	adds	r3, #1
 8015a1e:	68ba      	ldr	r2, [r7, #8]
 8015a20:	4413      	add	r3, r2
 8015a22:	2200      	movs	r2, #0
 8015a24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015a26:	7dfb      	ldrb	r3, [r7, #23]
 8015a28:	3301      	adds	r3, #1
 8015a2a:	75fb      	strb	r3, [r7, #23]
 8015a2c:	7dfa      	ldrb	r2, [r7, #23]
 8015a2e:	79fb      	ldrb	r3, [r7, #7]
 8015a30:	429a      	cmp	r2, r3
 8015a32:	d3d3      	bcc.n	80159dc <IntToUnicode+0x18>
  }
}
 8015a34:	bf00      	nop
 8015a36:	bf00      	nop
 8015a38:	371c      	adds	r7, #28
 8015a3a:	46bd      	mov	sp, r7
 8015a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a40:	4770      	bx	lr
	...

08015a44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015a44:	b580      	push	{r7, lr}
 8015a46:	b08a      	sub	sp, #40	; 0x28
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015a4c:	f107 0314 	add.w	r3, r7, #20
 8015a50:	2200      	movs	r2, #0
 8015a52:	601a      	str	r2, [r3, #0]
 8015a54:	605a      	str	r2, [r3, #4]
 8015a56:	609a      	str	r2, [r3, #8]
 8015a58:	60da      	str	r2, [r3, #12]
 8015a5a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015a64:	d13a      	bne.n	8015adc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015a66:	2300      	movs	r3, #0
 8015a68:	613b      	str	r3, [r7, #16]
 8015a6a:	4b1e      	ldr	r3, [pc, #120]	; (8015ae4 <HAL_PCD_MspInit+0xa0>)
 8015a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a6e:	4a1d      	ldr	r2, [pc, #116]	; (8015ae4 <HAL_PCD_MspInit+0xa0>)
 8015a70:	f043 0301 	orr.w	r3, r3, #1
 8015a74:	6313      	str	r3, [r2, #48]	; 0x30
 8015a76:	4b1b      	ldr	r3, [pc, #108]	; (8015ae4 <HAL_PCD_MspInit+0xa0>)
 8015a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a7a:	f003 0301 	and.w	r3, r3, #1
 8015a7e:	613b      	str	r3, [r7, #16]
 8015a80:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015a82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015a88:	2302      	movs	r3, #2
 8015a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015a90:	2303      	movs	r3, #3
 8015a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015a94:	230a      	movs	r3, #10
 8015a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015a98:	f107 0314 	add.w	r3, r7, #20
 8015a9c:	4619      	mov	r1, r3
 8015a9e:	4812      	ldr	r0, [pc, #72]	; (8015ae8 <HAL_PCD_MspInit+0xa4>)
 8015aa0:	f7f6 fb4a 	bl	800c138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015aa4:	4b0f      	ldr	r3, [pc, #60]	; (8015ae4 <HAL_PCD_MspInit+0xa0>)
 8015aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015aa8:	4a0e      	ldr	r2, [pc, #56]	; (8015ae4 <HAL_PCD_MspInit+0xa0>)
 8015aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015aae:	6353      	str	r3, [r2, #52]	; 0x34
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	60fb      	str	r3, [r7, #12]
 8015ab4:	4b0b      	ldr	r3, [pc, #44]	; (8015ae4 <HAL_PCD_MspInit+0xa0>)
 8015ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ab8:	4a0a      	ldr	r2, [pc, #40]	; (8015ae4 <HAL_PCD_MspInit+0xa0>)
 8015aba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015abe:	6453      	str	r3, [r2, #68]	; 0x44
 8015ac0:	4b08      	ldr	r3, [pc, #32]	; (8015ae4 <HAL_PCD_MspInit+0xa0>)
 8015ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015ac8:	60fb      	str	r3, [r7, #12]
 8015aca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015acc:	2200      	movs	r2, #0
 8015ace:	2105      	movs	r1, #5
 8015ad0:	2043      	movs	r0, #67	; 0x43
 8015ad2:	f7f5 ff67 	bl	800b9a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015ad6:	2043      	movs	r0, #67	; 0x43
 8015ad8:	f7f5 ff80 	bl	800b9dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015adc:	bf00      	nop
 8015ade:	3728      	adds	r7, #40	; 0x28
 8015ae0:	46bd      	mov	sp, r7
 8015ae2:	bd80      	pop	{r7, pc}
 8015ae4:	40023800 	.word	0x40023800
 8015ae8:	40020000 	.word	0x40020000

08015aec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b082      	sub	sp, #8
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015b00:	4619      	mov	r1, r3
 8015b02:	4610      	mov	r0, r2
 8015b04:	f7fb fe42 	bl	801178c <USBD_LL_SetupStage>
}
 8015b08:	bf00      	nop
 8015b0a:	3708      	adds	r7, #8
 8015b0c:	46bd      	mov	sp, r7
 8015b0e:	bd80      	pop	{r7, pc}

08015b10 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b10:	b580      	push	{r7, lr}
 8015b12:	b082      	sub	sp, #8
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
 8015b18:	460b      	mov	r3, r1
 8015b1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015b22:	78fa      	ldrb	r2, [r7, #3]
 8015b24:	6879      	ldr	r1, [r7, #4]
 8015b26:	4613      	mov	r3, r2
 8015b28:	00db      	lsls	r3, r3, #3
 8015b2a:	1a9b      	subs	r3, r3, r2
 8015b2c:	009b      	lsls	r3, r3, #2
 8015b2e:	440b      	add	r3, r1
 8015b30:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015b34:	681a      	ldr	r2, [r3, #0]
 8015b36:	78fb      	ldrb	r3, [r7, #3]
 8015b38:	4619      	mov	r1, r3
 8015b3a:	f7fb fe7c 	bl	8011836 <USBD_LL_DataOutStage>
}
 8015b3e:	bf00      	nop
 8015b40:	3708      	adds	r7, #8
 8015b42:	46bd      	mov	sp, r7
 8015b44:	bd80      	pop	{r7, pc}

08015b46 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b46:	b580      	push	{r7, lr}
 8015b48:	b082      	sub	sp, #8
 8015b4a:	af00      	add	r7, sp, #0
 8015b4c:	6078      	str	r0, [r7, #4]
 8015b4e:	460b      	mov	r3, r1
 8015b50:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015b58:	78fa      	ldrb	r2, [r7, #3]
 8015b5a:	6879      	ldr	r1, [r7, #4]
 8015b5c:	4613      	mov	r3, r2
 8015b5e:	00db      	lsls	r3, r3, #3
 8015b60:	1a9b      	subs	r3, r3, r2
 8015b62:	009b      	lsls	r3, r3, #2
 8015b64:	440b      	add	r3, r1
 8015b66:	3348      	adds	r3, #72	; 0x48
 8015b68:	681a      	ldr	r2, [r3, #0]
 8015b6a:	78fb      	ldrb	r3, [r7, #3]
 8015b6c:	4619      	mov	r1, r3
 8015b6e:	f7fb fec5 	bl	80118fc <USBD_LL_DataInStage>
}
 8015b72:	bf00      	nop
 8015b74:	3708      	adds	r7, #8
 8015b76:	46bd      	mov	sp, r7
 8015b78:	bd80      	pop	{r7, pc}

08015b7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b7a:	b580      	push	{r7, lr}
 8015b7c:	b082      	sub	sp, #8
 8015b7e:	af00      	add	r7, sp, #0
 8015b80:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015b88:	4618      	mov	r0, r3
 8015b8a:	f7fb ffc9 	bl	8011b20 <USBD_LL_SOF>
}
 8015b8e:	bf00      	nop
 8015b90:	3708      	adds	r7, #8
 8015b92:	46bd      	mov	sp, r7
 8015b94:	bd80      	pop	{r7, pc}

08015b96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b96:	b580      	push	{r7, lr}
 8015b98:	b084      	sub	sp, #16
 8015b9a:	af00      	add	r7, sp, #0
 8015b9c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015b9e:	2301      	movs	r3, #1
 8015ba0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	68db      	ldr	r3, [r3, #12]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d102      	bne.n	8015bb0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015baa:	2300      	movs	r3, #0
 8015bac:	73fb      	strb	r3, [r7, #15]
 8015bae:	e008      	b.n	8015bc2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	68db      	ldr	r3, [r3, #12]
 8015bb4:	2b02      	cmp	r3, #2
 8015bb6:	d102      	bne.n	8015bbe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015bb8:	2301      	movs	r3, #1
 8015bba:	73fb      	strb	r3, [r7, #15]
 8015bbc:	e001      	b.n	8015bc2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015bbe:	f7ee fe8d 	bl	80048dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015bc8:	7bfa      	ldrb	r2, [r7, #15]
 8015bca:	4611      	mov	r1, r2
 8015bcc:	4618      	mov	r0, r3
 8015bce:	f7fb ff6c 	bl	8011aaa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015bd8:	4618      	mov	r0, r3
 8015bda:	f7fb ff25 	bl	8011a28 <USBD_LL_Reset>
}
 8015bde:	bf00      	nop
 8015be0:	3710      	adds	r7, #16
 8015be2:	46bd      	mov	sp, r7
 8015be4:	bd80      	pop	{r7, pc}
	...

08015be8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015be8:	b580      	push	{r7, lr}
 8015bea:	b082      	sub	sp, #8
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	f7fb ff67 	bl	8011aca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	687a      	ldr	r2, [r7, #4]
 8015c08:	6812      	ldr	r2, [r2, #0]
 8015c0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015c0e:	f043 0301 	orr.w	r3, r3, #1
 8015c12:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	6a1b      	ldr	r3, [r3, #32]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d005      	beq.n	8015c28 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015c1c:	4b04      	ldr	r3, [pc, #16]	; (8015c30 <HAL_PCD_SuspendCallback+0x48>)
 8015c1e:	691b      	ldr	r3, [r3, #16]
 8015c20:	4a03      	ldr	r2, [pc, #12]	; (8015c30 <HAL_PCD_SuspendCallback+0x48>)
 8015c22:	f043 0306 	orr.w	r3, r3, #6
 8015c26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015c28:	bf00      	nop
 8015c2a:	3708      	adds	r7, #8
 8015c2c:	46bd      	mov	sp, r7
 8015c2e:	bd80      	pop	{r7, pc}
 8015c30:	e000ed00 	.word	0xe000ed00

08015c34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c34:	b580      	push	{r7, lr}
 8015c36:	b082      	sub	sp, #8
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015c42:	4618      	mov	r0, r3
 8015c44:	f7fb ff56 	bl	8011af4 <USBD_LL_Resume>
}
 8015c48:	bf00      	nop
 8015c4a:	3708      	adds	r7, #8
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	bd80      	pop	{r7, pc}

08015c50 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b082      	sub	sp, #8
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
 8015c58:	460b      	mov	r3, r1
 8015c5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015c62:	78fa      	ldrb	r2, [r7, #3]
 8015c64:	4611      	mov	r1, r2
 8015c66:	4618      	mov	r0, r3
 8015c68:	f7fb ff81 	bl	8011b6e <USBD_LL_IsoOUTIncomplete>
}
 8015c6c:	bf00      	nop
 8015c6e:	3708      	adds	r7, #8
 8015c70:	46bd      	mov	sp, r7
 8015c72:	bd80      	pop	{r7, pc}

08015c74 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b082      	sub	sp, #8
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	6078      	str	r0, [r7, #4]
 8015c7c:	460b      	mov	r3, r1
 8015c7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015c86:	78fa      	ldrb	r2, [r7, #3]
 8015c88:	4611      	mov	r1, r2
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	f7fb ff62 	bl	8011b54 <USBD_LL_IsoINIncomplete>
}
 8015c90:	bf00      	nop
 8015c92:	3708      	adds	r7, #8
 8015c94:	46bd      	mov	sp, r7
 8015c96:	bd80      	pop	{r7, pc}

08015c98 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b082      	sub	sp, #8
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	f7fb ff6e 	bl	8011b88 <USBD_LL_DevConnected>
}
 8015cac:	bf00      	nop
 8015cae:	3708      	adds	r7, #8
 8015cb0:	46bd      	mov	sp, r7
 8015cb2:	bd80      	pop	{r7, pc}

08015cb4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015cb4:	b580      	push	{r7, lr}
 8015cb6:	b082      	sub	sp, #8
 8015cb8:	af00      	add	r7, sp, #0
 8015cba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f7fb ff6b 	bl	8011b9e <USBD_LL_DevDisconnected>
}
 8015cc8:	bf00      	nop
 8015cca:	3708      	adds	r7, #8
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	bd80      	pop	{r7, pc}

08015cd0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b082      	sub	sp, #8
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	781b      	ldrb	r3, [r3, #0]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d13c      	bne.n	8015d5a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015ce0:	4a20      	ldr	r2, [pc, #128]	; (8015d64 <USBD_LL_Init+0x94>)
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	4a1e      	ldr	r2, [pc, #120]	; (8015d64 <USBD_LL_Init+0x94>)
 8015cec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015cf0:	4b1c      	ldr	r3, [pc, #112]	; (8015d64 <USBD_LL_Init+0x94>)
 8015cf2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015cf6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015cf8:	4b1a      	ldr	r3, [pc, #104]	; (8015d64 <USBD_LL_Init+0x94>)
 8015cfa:	2204      	movs	r2, #4
 8015cfc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015cfe:	4b19      	ldr	r3, [pc, #100]	; (8015d64 <USBD_LL_Init+0x94>)
 8015d00:	2202      	movs	r2, #2
 8015d02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015d04:	4b17      	ldr	r3, [pc, #92]	; (8015d64 <USBD_LL_Init+0x94>)
 8015d06:	2200      	movs	r2, #0
 8015d08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015d0a:	4b16      	ldr	r3, [pc, #88]	; (8015d64 <USBD_LL_Init+0x94>)
 8015d0c:	2202      	movs	r2, #2
 8015d0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015d10:	4b14      	ldr	r3, [pc, #80]	; (8015d64 <USBD_LL_Init+0x94>)
 8015d12:	2200      	movs	r2, #0
 8015d14:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015d16:	4b13      	ldr	r3, [pc, #76]	; (8015d64 <USBD_LL_Init+0x94>)
 8015d18:	2200      	movs	r2, #0
 8015d1a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015d1c:	4b11      	ldr	r3, [pc, #68]	; (8015d64 <USBD_LL_Init+0x94>)
 8015d1e:	2200      	movs	r2, #0
 8015d20:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015d22:	4b10      	ldr	r3, [pc, #64]	; (8015d64 <USBD_LL_Init+0x94>)
 8015d24:	2200      	movs	r2, #0
 8015d26:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015d28:	4b0e      	ldr	r3, [pc, #56]	; (8015d64 <USBD_LL_Init+0x94>)
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015d2e:	480d      	ldr	r0, [pc, #52]	; (8015d64 <USBD_LL_Init+0x94>)
 8015d30:	f7f6 fc0e 	bl	800c550 <HAL_PCD_Init>
 8015d34:	4603      	mov	r3, r0
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d001      	beq.n	8015d3e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015d3a:	f7ee fdcf 	bl	80048dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015d3e:	2180      	movs	r1, #128	; 0x80
 8015d40:	4808      	ldr	r0, [pc, #32]	; (8015d64 <USBD_LL_Init+0x94>)
 8015d42:	f7f7 fd6c 	bl	800d81e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015d46:	2240      	movs	r2, #64	; 0x40
 8015d48:	2100      	movs	r1, #0
 8015d4a:	4806      	ldr	r0, [pc, #24]	; (8015d64 <USBD_LL_Init+0x94>)
 8015d4c:	f7f7 fd20 	bl	800d790 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015d50:	2280      	movs	r2, #128	; 0x80
 8015d52:	2101      	movs	r1, #1
 8015d54:	4803      	ldr	r0, [pc, #12]	; (8015d64 <USBD_LL_Init+0x94>)
 8015d56:	f7f7 fd1b 	bl	800d790 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015d5a:	2300      	movs	r3, #0
}
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	3708      	adds	r7, #8
 8015d60:	46bd      	mov	sp, r7
 8015d62:	bd80      	pop	{r7, pc}
 8015d64:	2000c56c 	.word	0x2000c56c

08015d68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015d68:	b580      	push	{r7, lr}
 8015d6a:	b084      	sub	sp, #16
 8015d6c:	af00      	add	r7, sp, #0
 8015d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d70:	2300      	movs	r3, #0
 8015d72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d74:	2300      	movs	r3, #0
 8015d76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015d7e:	4618      	mov	r0, r3
 8015d80:	f7f6 fd03 	bl	800c78a <HAL_PCD_Start>
 8015d84:	4603      	mov	r3, r0
 8015d86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d88:	7bfb      	ldrb	r3, [r7, #15]
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	f000 f92a 	bl	8015fe4 <USBD_Get_USB_Status>
 8015d90:	4603      	mov	r3, r0
 8015d92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d94:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d96:	4618      	mov	r0, r3
 8015d98:	3710      	adds	r7, #16
 8015d9a:	46bd      	mov	sp, r7
 8015d9c:	bd80      	pop	{r7, pc}

08015d9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015d9e:	b580      	push	{r7, lr}
 8015da0:	b084      	sub	sp, #16
 8015da2:	af00      	add	r7, sp, #0
 8015da4:	6078      	str	r0, [r7, #4]
 8015da6:	4608      	mov	r0, r1
 8015da8:	4611      	mov	r1, r2
 8015daa:	461a      	mov	r2, r3
 8015dac:	4603      	mov	r3, r0
 8015dae:	70fb      	strb	r3, [r7, #3]
 8015db0:	460b      	mov	r3, r1
 8015db2:	70bb      	strb	r3, [r7, #2]
 8015db4:	4613      	mov	r3, r2
 8015db6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015db8:	2300      	movs	r3, #0
 8015dba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015dc6:	78bb      	ldrb	r3, [r7, #2]
 8015dc8:	883a      	ldrh	r2, [r7, #0]
 8015dca:	78f9      	ldrb	r1, [r7, #3]
 8015dcc:	f7f7 f8e7 	bl	800cf9e <HAL_PCD_EP_Open>
 8015dd0:	4603      	mov	r3, r0
 8015dd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015dd4:	7bfb      	ldrb	r3, [r7, #15]
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	f000 f904 	bl	8015fe4 <USBD_Get_USB_Status>
 8015ddc:	4603      	mov	r3, r0
 8015dde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015de0:	7bbb      	ldrb	r3, [r7, #14]
}
 8015de2:	4618      	mov	r0, r3
 8015de4:	3710      	adds	r7, #16
 8015de6:	46bd      	mov	sp, r7
 8015de8:	bd80      	pop	{r7, pc}

08015dea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015dea:	b580      	push	{r7, lr}
 8015dec:	b084      	sub	sp, #16
 8015dee:	af00      	add	r7, sp, #0
 8015df0:	6078      	str	r0, [r7, #4]
 8015df2:	460b      	mov	r3, r1
 8015df4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015df6:	2300      	movs	r3, #0
 8015df8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015e04:	78fa      	ldrb	r2, [r7, #3]
 8015e06:	4611      	mov	r1, r2
 8015e08:	4618      	mov	r0, r3
 8015e0a:	f7f7 f930 	bl	800d06e <HAL_PCD_EP_Close>
 8015e0e:	4603      	mov	r3, r0
 8015e10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e12:	7bfb      	ldrb	r3, [r7, #15]
 8015e14:	4618      	mov	r0, r3
 8015e16:	f000 f8e5 	bl	8015fe4 <USBD_Get_USB_Status>
 8015e1a:	4603      	mov	r3, r0
 8015e1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e20:	4618      	mov	r0, r3
 8015e22:	3710      	adds	r7, #16
 8015e24:	46bd      	mov	sp, r7
 8015e26:	bd80      	pop	{r7, pc}

08015e28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e28:	b580      	push	{r7, lr}
 8015e2a:	b084      	sub	sp, #16
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	6078      	str	r0, [r7, #4]
 8015e30:	460b      	mov	r3, r1
 8015e32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e34:	2300      	movs	r3, #0
 8015e36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e38:	2300      	movs	r3, #0
 8015e3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015e42:	78fa      	ldrb	r2, [r7, #3]
 8015e44:	4611      	mov	r1, r2
 8015e46:	4618      	mov	r0, r3
 8015e48:	f7f7 fa08 	bl	800d25c <HAL_PCD_EP_SetStall>
 8015e4c:	4603      	mov	r3, r0
 8015e4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e50:	7bfb      	ldrb	r3, [r7, #15]
 8015e52:	4618      	mov	r0, r3
 8015e54:	f000 f8c6 	bl	8015fe4 <USBD_Get_USB_Status>
 8015e58:	4603      	mov	r3, r0
 8015e5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e5e:	4618      	mov	r0, r3
 8015e60:	3710      	adds	r7, #16
 8015e62:	46bd      	mov	sp, r7
 8015e64:	bd80      	pop	{r7, pc}

08015e66 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e66:	b580      	push	{r7, lr}
 8015e68:	b084      	sub	sp, #16
 8015e6a:	af00      	add	r7, sp, #0
 8015e6c:	6078      	str	r0, [r7, #4]
 8015e6e:	460b      	mov	r3, r1
 8015e70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e72:	2300      	movs	r3, #0
 8015e74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e76:	2300      	movs	r3, #0
 8015e78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015e80:	78fa      	ldrb	r2, [r7, #3]
 8015e82:	4611      	mov	r1, r2
 8015e84:	4618      	mov	r0, r3
 8015e86:	f7f7 fa4d 	bl	800d324 <HAL_PCD_EP_ClrStall>
 8015e8a:	4603      	mov	r3, r0
 8015e8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e8e:	7bfb      	ldrb	r3, [r7, #15]
 8015e90:	4618      	mov	r0, r3
 8015e92:	f000 f8a7 	bl	8015fe4 <USBD_Get_USB_Status>
 8015e96:	4603      	mov	r3, r0
 8015e98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	3710      	adds	r7, #16
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	bd80      	pop	{r7, pc}

08015ea4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ea4:	b480      	push	{r7}
 8015ea6:	b085      	sub	sp, #20
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	6078      	str	r0, [r7, #4]
 8015eac:	460b      	mov	r3, r1
 8015eae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015eb6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015eb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	da0b      	bge.n	8015ed8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015ec0:	78fb      	ldrb	r3, [r7, #3]
 8015ec2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015ec6:	68f9      	ldr	r1, [r7, #12]
 8015ec8:	4613      	mov	r3, r2
 8015eca:	00db      	lsls	r3, r3, #3
 8015ecc:	1a9b      	subs	r3, r3, r2
 8015ece:	009b      	lsls	r3, r3, #2
 8015ed0:	440b      	add	r3, r1
 8015ed2:	333e      	adds	r3, #62	; 0x3e
 8015ed4:	781b      	ldrb	r3, [r3, #0]
 8015ed6:	e00b      	b.n	8015ef0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015ed8:	78fb      	ldrb	r3, [r7, #3]
 8015eda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015ede:	68f9      	ldr	r1, [r7, #12]
 8015ee0:	4613      	mov	r3, r2
 8015ee2:	00db      	lsls	r3, r3, #3
 8015ee4:	1a9b      	subs	r3, r3, r2
 8015ee6:	009b      	lsls	r3, r3, #2
 8015ee8:	440b      	add	r3, r1
 8015eea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015eee:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	3714      	adds	r7, #20
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015efa:	4770      	bx	lr

08015efc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015efc:	b580      	push	{r7, lr}
 8015efe:	b084      	sub	sp, #16
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	6078      	str	r0, [r7, #4]
 8015f04:	460b      	mov	r3, r1
 8015f06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f08:	2300      	movs	r3, #0
 8015f0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015f16:	78fa      	ldrb	r2, [r7, #3]
 8015f18:	4611      	mov	r1, r2
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	f7f7 f81a 	bl	800cf54 <HAL_PCD_SetAddress>
 8015f20:	4603      	mov	r3, r0
 8015f22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f24:	7bfb      	ldrb	r3, [r7, #15]
 8015f26:	4618      	mov	r0, r3
 8015f28:	f000 f85c 	bl	8015fe4 <USBD_Get_USB_Status>
 8015f2c:	4603      	mov	r3, r0
 8015f2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f30:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f32:	4618      	mov	r0, r3
 8015f34:	3710      	adds	r7, #16
 8015f36:	46bd      	mov	sp, r7
 8015f38:	bd80      	pop	{r7, pc}

08015f3a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015f3a:	b580      	push	{r7, lr}
 8015f3c:	b086      	sub	sp, #24
 8015f3e:	af00      	add	r7, sp, #0
 8015f40:	60f8      	str	r0, [r7, #12]
 8015f42:	607a      	str	r2, [r7, #4]
 8015f44:	603b      	str	r3, [r7, #0]
 8015f46:	460b      	mov	r3, r1
 8015f48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f4e:	2300      	movs	r3, #0
 8015f50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015f58:	7af9      	ldrb	r1, [r7, #11]
 8015f5a:	683b      	ldr	r3, [r7, #0]
 8015f5c:	687a      	ldr	r2, [r7, #4]
 8015f5e:	f7f7 f933 	bl	800d1c8 <HAL_PCD_EP_Transmit>
 8015f62:	4603      	mov	r3, r0
 8015f64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f66:	7dfb      	ldrb	r3, [r7, #23]
 8015f68:	4618      	mov	r0, r3
 8015f6a:	f000 f83b 	bl	8015fe4 <USBD_Get_USB_Status>
 8015f6e:	4603      	mov	r3, r0
 8015f70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015f72:	7dbb      	ldrb	r3, [r7, #22]
}
 8015f74:	4618      	mov	r0, r3
 8015f76:	3718      	adds	r7, #24
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	bd80      	pop	{r7, pc}

08015f7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015f7c:	b580      	push	{r7, lr}
 8015f7e:	b086      	sub	sp, #24
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	60f8      	str	r0, [r7, #12]
 8015f84:	607a      	str	r2, [r7, #4]
 8015f86:	603b      	str	r3, [r7, #0]
 8015f88:	460b      	mov	r3, r1
 8015f8a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f90:	2300      	movs	r3, #0
 8015f92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015f9a:	7af9      	ldrb	r1, [r7, #11]
 8015f9c:	683b      	ldr	r3, [r7, #0]
 8015f9e:	687a      	ldr	r2, [r7, #4]
 8015fa0:	f7f7 f8af 	bl	800d102 <HAL_PCD_EP_Receive>
 8015fa4:	4603      	mov	r3, r0
 8015fa6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015fa8:	7dfb      	ldrb	r3, [r7, #23]
 8015faa:	4618      	mov	r0, r3
 8015fac:	f000 f81a 	bl	8015fe4 <USBD_Get_USB_Status>
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015fb4:	7dbb      	ldrb	r3, [r7, #22]
}
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	3718      	adds	r7, #24
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	bd80      	pop	{r7, pc}

08015fbe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015fbe:	b580      	push	{r7, lr}
 8015fc0:	b082      	sub	sp, #8
 8015fc2:	af00      	add	r7, sp, #0
 8015fc4:	6078      	str	r0, [r7, #4]
 8015fc6:	460b      	mov	r3, r1
 8015fc8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015fd0:	78fa      	ldrb	r2, [r7, #3]
 8015fd2:	4611      	mov	r1, r2
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	f7f7 f8df 	bl	800d198 <HAL_PCD_EP_GetRxCount>
 8015fda:	4603      	mov	r3, r0
}
 8015fdc:	4618      	mov	r0, r3
 8015fde:	3708      	adds	r7, #8
 8015fe0:	46bd      	mov	sp, r7
 8015fe2:	bd80      	pop	{r7, pc}

08015fe4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015fe4:	b480      	push	{r7}
 8015fe6:	b085      	sub	sp, #20
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	4603      	mov	r3, r0
 8015fec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015fee:	2300      	movs	r3, #0
 8015ff0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015ff2:	79fb      	ldrb	r3, [r7, #7]
 8015ff4:	2b03      	cmp	r3, #3
 8015ff6:	d817      	bhi.n	8016028 <USBD_Get_USB_Status+0x44>
 8015ff8:	a201      	add	r2, pc, #4	; (adr r2, 8016000 <USBD_Get_USB_Status+0x1c>)
 8015ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ffe:	bf00      	nop
 8016000:	08016011 	.word	0x08016011
 8016004:	08016017 	.word	0x08016017
 8016008:	0801601d 	.word	0x0801601d
 801600c:	08016023 	.word	0x08016023
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016010:	2300      	movs	r3, #0
 8016012:	73fb      	strb	r3, [r7, #15]
    break;
 8016014:	e00b      	b.n	801602e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016016:	2303      	movs	r3, #3
 8016018:	73fb      	strb	r3, [r7, #15]
    break;
 801601a:	e008      	b.n	801602e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801601c:	2301      	movs	r3, #1
 801601e:	73fb      	strb	r3, [r7, #15]
    break;
 8016020:	e005      	b.n	801602e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016022:	2303      	movs	r3, #3
 8016024:	73fb      	strb	r3, [r7, #15]
    break;
 8016026:	e002      	b.n	801602e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016028:	2303      	movs	r3, #3
 801602a:	73fb      	strb	r3, [r7, #15]
    break;
 801602c:	bf00      	nop
  }
  return usb_status;
 801602e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016030:	4618      	mov	r0, r3
 8016032:	3714      	adds	r7, #20
 8016034:	46bd      	mov	sp, r7
 8016036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603a:	4770      	bx	lr

0801603c <__errno>:
 801603c:	4b01      	ldr	r3, [pc, #4]	; (8016044 <__errno+0x8>)
 801603e:	6818      	ldr	r0, [r3, #0]
 8016040:	4770      	bx	lr
 8016042:	bf00      	nop
 8016044:	200009ac 	.word	0x200009ac

08016048 <__libc_init_array>:
 8016048:	b570      	push	{r4, r5, r6, lr}
 801604a:	4d0d      	ldr	r5, [pc, #52]	; (8016080 <__libc_init_array+0x38>)
 801604c:	4c0d      	ldr	r4, [pc, #52]	; (8016084 <__libc_init_array+0x3c>)
 801604e:	1b64      	subs	r4, r4, r5
 8016050:	10a4      	asrs	r4, r4, #2
 8016052:	2600      	movs	r6, #0
 8016054:	42a6      	cmp	r6, r4
 8016056:	d109      	bne.n	801606c <__libc_init_array+0x24>
 8016058:	4d0b      	ldr	r5, [pc, #44]	; (8016088 <__libc_init_array+0x40>)
 801605a:	4c0c      	ldr	r4, [pc, #48]	; (801608c <__libc_init_array+0x44>)
 801605c:	f006 f972 	bl	801c344 <_init>
 8016060:	1b64      	subs	r4, r4, r5
 8016062:	10a4      	asrs	r4, r4, #2
 8016064:	2600      	movs	r6, #0
 8016066:	42a6      	cmp	r6, r4
 8016068:	d105      	bne.n	8016076 <__libc_init_array+0x2e>
 801606a:	bd70      	pop	{r4, r5, r6, pc}
 801606c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016070:	4798      	blx	r3
 8016072:	3601      	adds	r6, #1
 8016074:	e7ee      	b.n	8016054 <__libc_init_array+0xc>
 8016076:	f855 3b04 	ldr.w	r3, [r5], #4
 801607a:	4798      	blx	r3
 801607c:	3601      	adds	r6, #1
 801607e:	e7f2      	b.n	8016066 <__libc_init_array+0x1e>
 8016080:	0801cd40 	.word	0x0801cd40
 8016084:	0801cd40 	.word	0x0801cd40
 8016088:	0801cd40 	.word	0x0801cd40
 801608c:	0801cd44 	.word	0x0801cd44

08016090 <malloc>:
 8016090:	4b02      	ldr	r3, [pc, #8]	; (801609c <malloc+0xc>)
 8016092:	4601      	mov	r1, r0
 8016094:	6818      	ldr	r0, [r3, #0]
 8016096:	f000 b88b 	b.w	80161b0 <_malloc_r>
 801609a:	bf00      	nop
 801609c:	200009ac 	.word	0x200009ac

080160a0 <free>:
 80160a0:	4b02      	ldr	r3, [pc, #8]	; (80160ac <free+0xc>)
 80160a2:	4601      	mov	r1, r0
 80160a4:	6818      	ldr	r0, [r3, #0]
 80160a6:	f000 b833 	b.w	8016110 <_free_r>
 80160aa:	bf00      	nop
 80160ac:	200009ac 	.word	0x200009ac

080160b0 <memcpy>:
 80160b0:	440a      	add	r2, r1
 80160b2:	4291      	cmp	r1, r2
 80160b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80160b8:	d100      	bne.n	80160bc <memcpy+0xc>
 80160ba:	4770      	bx	lr
 80160bc:	b510      	push	{r4, lr}
 80160be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80160c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80160c6:	4291      	cmp	r1, r2
 80160c8:	d1f9      	bne.n	80160be <memcpy+0xe>
 80160ca:	bd10      	pop	{r4, pc}

080160cc <memmove>:
 80160cc:	4288      	cmp	r0, r1
 80160ce:	b510      	push	{r4, lr}
 80160d0:	eb01 0402 	add.w	r4, r1, r2
 80160d4:	d902      	bls.n	80160dc <memmove+0x10>
 80160d6:	4284      	cmp	r4, r0
 80160d8:	4623      	mov	r3, r4
 80160da:	d807      	bhi.n	80160ec <memmove+0x20>
 80160dc:	1e43      	subs	r3, r0, #1
 80160de:	42a1      	cmp	r1, r4
 80160e0:	d008      	beq.n	80160f4 <memmove+0x28>
 80160e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80160e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80160ea:	e7f8      	b.n	80160de <memmove+0x12>
 80160ec:	4402      	add	r2, r0
 80160ee:	4601      	mov	r1, r0
 80160f0:	428a      	cmp	r2, r1
 80160f2:	d100      	bne.n	80160f6 <memmove+0x2a>
 80160f4:	bd10      	pop	{r4, pc}
 80160f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80160fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80160fe:	e7f7      	b.n	80160f0 <memmove+0x24>

08016100 <memset>:
 8016100:	4402      	add	r2, r0
 8016102:	4603      	mov	r3, r0
 8016104:	4293      	cmp	r3, r2
 8016106:	d100      	bne.n	801610a <memset+0xa>
 8016108:	4770      	bx	lr
 801610a:	f803 1b01 	strb.w	r1, [r3], #1
 801610e:	e7f9      	b.n	8016104 <memset+0x4>

08016110 <_free_r>:
 8016110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016112:	2900      	cmp	r1, #0
 8016114:	d048      	beq.n	80161a8 <_free_r+0x98>
 8016116:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801611a:	9001      	str	r0, [sp, #4]
 801611c:	2b00      	cmp	r3, #0
 801611e:	f1a1 0404 	sub.w	r4, r1, #4
 8016122:	bfb8      	it	lt
 8016124:	18e4      	addlt	r4, r4, r3
 8016126:	f003 f835 	bl	8019194 <__malloc_lock>
 801612a:	4a20      	ldr	r2, [pc, #128]	; (80161ac <_free_r+0x9c>)
 801612c:	9801      	ldr	r0, [sp, #4]
 801612e:	6813      	ldr	r3, [r2, #0]
 8016130:	4615      	mov	r5, r2
 8016132:	b933      	cbnz	r3, 8016142 <_free_r+0x32>
 8016134:	6063      	str	r3, [r4, #4]
 8016136:	6014      	str	r4, [r2, #0]
 8016138:	b003      	add	sp, #12
 801613a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801613e:	f003 b82f 	b.w	80191a0 <__malloc_unlock>
 8016142:	42a3      	cmp	r3, r4
 8016144:	d90b      	bls.n	801615e <_free_r+0x4e>
 8016146:	6821      	ldr	r1, [r4, #0]
 8016148:	1862      	adds	r2, r4, r1
 801614a:	4293      	cmp	r3, r2
 801614c:	bf04      	itt	eq
 801614e:	681a      	ldreq	r2, [r3, #0]
 8016150:	685b      	ldreq	r3, [r3, #4]
 8016152:	6063      	str	r3, [r4, #4]
 8016154:	bf04      	itt	eq
 8016156:	1852      	addeq	r2, r2, r1
 8016158:	6022      	streq	r2, [r4, #0]
 801615a:	602c      	str	r4, [r5, #0]
 801615c:	e7ec      	b.n	8016138 <_free_r+0x28>
 801615e:	461a      	mov	r2, r3
 8016160:	685b      	ldr	r3, [r3, #4]
 8016162:	b10b      	cbz	r3, 8016168 <_free_r+0x58>
 8016164:	42a3      	cmp	r3, r4
 8016166:	d9fa      	bls.n	801615e <_free_r+0x4e>
 8016168:	6811      	ldr	r1, [r2, #0]
 801616a:	1855      	adds	r5, r2, r1
 801616c:	42a5      	cmp	r5, r4
 801616e:	d10b      	bne.n	8016188 <_free_r+0x78>
 8016170:	6824      	ldr	r4, [r4, #0]
 8016172:	4421      	add	r1, r4
 8016174:	1854      	adds	r4, r2, r1
 8016176:	42a3      	cmp	r3, r4
 8016178:	6011      	str	r1, [r2, #0]
 801617a:	d1dd      	bne.n	8016138 <_free_r+0x28>
 801617c:	681c      	ldr	r4, [r3, #0]
 801617e:	685b      	ldr	r3, [r3, #4]
 8016180:	6053      	str	r3, [r2, #4]
 8016182:	4421      	add	r1, r4
 8016184:	6011      	str	r1, [r2, #0]
 8016186:	e7d7      	b.n	8016138 <_free_r+0x28>
 8016188:	d902      	bls.n	8016190 <_free_r+0x80>
 801618a:	230c      	movs	r3, #12
 801618c:	6003      	str	r3, [r0, #0]
 801618e:	e7d3      	b.n	8016138 <_free_r+0x28>
 8016190:	6825      	ldr	r5, [r4, #0]
 8016192:	1961      	adds	r1, r4, r5
 8016194:	428b      	cmp	r3, r1
 8016196:	bf04      	itt	eq
 8016198:	6819      	ldreq	r1, [r3, #0]
 801619a:	685b      	ldreq	r3, [r3, #4]
 801619c:	6063      	str	r3, [r4, #4]
 801619e:	bf04      	itt	eq
 80161a0:	1949      	addeq	r1, r1, r5
 80161a2:	6021      	streq	r1, [r4, #0]
 80161a4:	6054      	str	r4, [r2, #4]
 80161a6:	e7c7      	b.n	8016138 <_free_r+0x28>
 80161a8:	b003      	add	sp, #12
 80161aa:	bd30      	pop	{r4, r5, pc}
 80161ac:	20004d60 	.word	0x20004d60

080161b0 <_malloc_r>:
 80161b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161b2:	1ccd      	adds	r5, r1, #3
 80161b4:	f025 0503 	bic.w	r5, r5, #3
 80161b8:	3508      	adds	r5, #8
 80161ba:	2d0c      	cmp	r5, #12
 80161bc:	bf38      	it	cc
 80161be:	250c      	movcc	r5, #12
 80161c0:	2d00      	cmp	r5, #0
 80161c2:	4606      	mov	r6, r0
 80161c4:	db01      	blt.n	80161ca <_malloc_r+0x1a>
 80161c6:	42a9      	cmp	r1, r5
 80161c8:	d903      	bls.n	80161d2 <_malloc_r+0x22>
 80161ca:	230c      	movs	r3, #12
 80161cc:	6033      	str	r3, [r6, #0]
 80161ce:	2000      	movs	r0, #0
 80161d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161d2:	f002 ffdf 	bl	8019194 <__malloc_lock>
 80161d6:	4921      	ldr	r1, [pc, #132]	; (801625c <_malloc_r+0xac>)
 80161d8:	680a      	ldr	r2, [r1, #0]
 80161da:	4614      	mov	r4, r2
 80161dc:	b99c      	cbnz	r4, 8016206 <_malloc_r+0x56>
 80161de:	4f20      	ldr	r7, [pc, #128]	; (8016260 <_malloc_r+0xb0>)
 80161e0:	683b      	ldr	r3, [r7, #0]
 80161e2:	b923      	cbnz	r3, 80161ee <_malloc_r+0x3e>
 80161e4:	4621      	mov	r1, r4
 80161e6:	4630      	mov	r0, r6
 80161e8:	f000 feb6 	bl	8016f58 <_sbrk_r>
 80161ec:	6038      	str	r0, [r7, #0]
 80161ee:	4629      	mov	r1, r5
 80161f0:	4630      	mov	r0, r6
 80161f2:	f000 feb1 	bl	8016f58 <_sbrk_r>
 80161f6:	1c43      	adds	r3, r0, #1
 80161f8:	d123      	bne.n	8016242 <_malloc_r+0x92>
 80161fa:	230c      	movs	r3, #12
 80161fc:	6033      	str	r3, [r6, #0]
 80161fe:	4630      	mov	r0, r6
 8016200:	f002 ffce 	bl	80191a0 <__malloc_unlock>
 8016204:	e7e3      	b.n	80161ce <_malloc_r+0x1e>
 8016206:	6823      	ldr	r3, [r4, #0]
 8016208:	1b5b      	subs	r3, r3, r5
 801620a:	d417      	bmi.n	801623c <_malloc_r+0x8c>
 801620c:	2b0b      	cmp	r3, #11
 801620e:	d903      	bls.n	8016218 <_malloc_r+0x68>
 8016210:	6023      	str	r3, [r4, #0]
 8016212:	441c      	add	r4, r3
 8016214:	6025      	str	r5, [r4, #0]
 8016216:	e004      	b.n	8016222 <_malloc_r+0x72>
 8016218:	6863      	ldr	r3, [r4, #4]
 801621a:	42a2      	cmp	r2, r4
 801621c:	bf0c      	ite	eq
 801621e:	600b      	streq	r3, [r1, #0]
 8016220:	6053      	strne	r3, [r2, #4]
 8016222:	4630      	mov	r0, r6
 8016224:	f002 ffbc 	bl	80191a0 <__malloc_unlock>
 8016228:	f104 000b 	add.w	r0, r4, #11
 801622c:	1d23      	adds	r3, r4, #4
 801622e:	f020 0007 	bic.w	r0, r0, #7
 8016232:	1ac2      	subs	r2, r0, r3
 8016234:	d0cc      	beq.n	80161d0 <_malloc_r+0x20>
 8016236:	1a1b      	subs	r3, r3, r0
 8016238:	50a3      	str	r3, [r4, r2]
 801623a:	e7c9      	b.n	80161d0 <_malloc_r+0x20>
 801623c:	4622      	mov	r2, r4
 801623e:	6864      	ldr	r4, [r4, #4]
 8016240:	e7cc      	b.n	80161dc <_malloc_r+0x2c>
 8016242:	1cc4      	adds	r4, r0, #3
 8016244:	f024 0403 	bic.w	r4, r4, #3
 8016248:	42a0      	cmp	r0, r4
 801624a:	d0e3      	beq.n	8016214 <_malloc_r+0x64>
 801624c:	1a21      	subs	r1, r4, r0
 801624e:	4630      	mov	r0, r6
 8016250:	f000 fe82 	bl	8016f58 <_sbrk_r>
 8016254:	3001      	adds	r0, #1
 8016256:	d1dd      	bne.n	8016214 <_malloc_r+0x64>
 8016258:	e7cf      	b.n	80161fa <_malloc_r+0x4a>
 801625a:	bf00      	nop
 801625c:	20004d60 	.word	0x20004d60
 8016260:	20004d64 	.word	0x20004d64

08016264 <__cvt>:
 8016264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016268:	ec55 4b10 	vmov	r4, r5, d0
 801626c:	2d00      	cmp	r5, #0
 801626e:	460e      	mov	r6, r1
 8016270:	4619      	mov	r1, r3
 8016272:	462b      	mov	r3, r5
 8016274:	bfbb      	ittet	lt
 8016276:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801627a:	461d      	movlt	r5, r3
 801627c:	2300      	movge	r3, #0
 801627e:	232d      	movlt	r3, #45	; 0x2d
 8016280:	700b      	strb	r3, [r1, #0]
 8016282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016284:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016288:	4691      	mov	r9, r2
 801628a:	f023 0820 	bic.w	r8, r3, #32
 801628e:	bfbc      	itt	lt
 8016290:	4622      	movlt	r2, r4
 8016292:	4614      	movlt	r4, r2
 8016294:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016298:	d005      	beq.n	80162a6 <__cvt+0x42>
 801629a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801629e:	d100      	bne.n	80162a2 <__cvt+0x3e>
 80162a0:	3601      	adds	r6, #1
 80162a2:	2102      	movs	r1, #2
 80162a4:	e000      	b.n	80162a8 <__cvt+0x44>
 80162a6:	2103      	movs	r1, #3
 80162a8:	ab03      	add	r3, sp, #12
 80162aa:	9301      	str	r3, [sp, #4]
 80162ac:	ab02      	add	r3, sp, #8
 80162ae:	9300      	str	r3, [sp, #0]
 80162b0:	ec45 4b10 	vmov	d0, r4, r5
 80162b4:	4653      	mov	r3, sl
 80162b6:	4632      	mov	r2, r6
 80162b8:	f001 fdfa 	bl	8017eb0 <_dtoa_r>
 80162bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80162c0:	4607      	mov	r7, r0
 80162c2:	d102      	bne.n	80162ca <__cvt+0x66>
 80162c4:	f019 0f01 	tst.w	r9, #1
 80162c8:	d022      	beq.n	8016310 <__cvt+0xac>
 80162ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80162ce:	eb07 0906 	add.w	r9, r7, r6
 80162d2:	d110      	bne.n	80162f6 <__cvt+0x92>
 80162d4:	783b      	ldrb	r3, [r7, #0]
 80162d6:	2b30      	cmp	r3, #48	; 0x30
 80162d8:	d10a      	bne.n	80162f0 <__cvt+0x8c>
 80162da:	2200      	movs	r2, #0
 80162dc:	2300      	movs	r3, #0
 80162de:	4620      	mov	r0, r4
 80162e0:	4629      	mov	r1, r5
 80162e2:	f7ea fbf1 	bl	8000ac8 <__aeabi_dcmpeq>
 80162e6:	b918      	cbnz	r0, 80162f0 <__cvt+0x8c>
 80162e8:	f1c6 0601 	rsb	r6, r6, #1
 80162ec:	f8ca 6000 	str.w	r6, [sl]
 80162f0:	f8da 3000 	ldr.w	r3, [sl]
 80162f4:	4499      	add	r9, r3
 80162f6:	2200      	movs	r2, #0
 80162f8:	2300      	movs	r3, #0
 80162fa:	4620      	mov	r0, r4
 80162fc:	4629      	mov	r1, r5
 80162fe:	f7ea fbe3 	bl	8000ac8 <__aeabi_dcmpeq>
 8016302:	b108      	cbz	r0, 8016308 <__cvt+0xa4>
 8016304:	f8cd 900c 	str.w	r9, [sp, #12]
 8016308:	2230      	movs	r2, #48	; 0x30
 801630a:	9b03      	ldr	r3, [sp, #12]
 801630c:	454b      	cmp	r3, r9
 801630e:	d307      	bcc.n	8016320 <__cvt+0xbc>
 8016310:	9b03      	ldr	r3, [sp, #12]
 8016312:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016314:	1bdb      	subs	r3, r3, r7
 8016316:	4638      	mov	r0, r7
 8016318:	6013      	str	r3, [r2, #0]
 801631a:	b004      	add	sp, #16
 801631c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016320:	1c59      	adds	r1, r3, #1
 8016322:	9103      	str	r1, [sp, #12]
 8016324:	701a      	strb	r2, [r3, #0]
 8016326:	e7f0      	b.n	801630a <__cvt+0xa6>

08016328 <__exponent>:
 8016328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801632a:	4603      	mov	r3, r0
 801632c:	2900      	cmp	r1, #0
 801632e:	bfb8      	it	lt
 8016330:	4249      	neglt	r1, r1
 8016332:	f803 2b02 	strb.w	r2, [r3], #2
 8016336:	bfb4      	ite	lt
 8016338:	222d      	movlt	r2, #45	; 0x2d
 801633a:	222b      	movge	r2, #43	; 0x2b
 801633c:	2909      	cmp	r1, #9
 801633e:	7042      	strb	r2, [r0, #1]
 8016340:	dd2a      	ble.n	8016398 <__exponent+0x70>
 8016342:	f10d 0407 	add.w	r4, sp, #7
 8016346:	46a4      	mov	ip, r4
 8016348:	270a      	movs	r7, #10
 801634a:	46a6      	mov	lr, r4
 801634c:	460a      	mov	r2, r1
 801634e:	fb91 f6f7 	sdiv	r6, r1, r7
 8016352:	fb07 1516 	mls	r5, r7, r6, r1
 8016356:	3530      	adds	r5, #48	; 0x30
 8016358:	2a63      	cmp	r2, #99	; 0x63
 801635a:	f104 34ff 	add.w	r4, r4, #4294967295
 801635e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8016362:	4631      	mov	r1, r6
 8016364:	dcf1      	bgt.n	801634a <__exponent+0x22>
 8016366:	3130      	adds	r1, #48	; 0x30
 8016368:	f1ae 0502 	sub.w	r5, lr, #2
 801636c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8016370:	1c44      	adds	r4, r0, #1
 8016372:	4629      	mov	r1, r5
 8016374:	4561      	cmp	r1, ip
 8016376:	d30a      	bcc.n	801638e <__exponent+0x66>
 8016378:	f10d 0209 	add.w	r2, sp, #9
 801637c:	eba2 020e 	sub.w	r2, r2, lr
 8016380:	4565      	cmp	r5, ip
 8016382:	bf88      	it	hi
 8016384:	2200      	movhi	r2, #0
 8016386:	4413      	add	r3, r2
 8016388:	1a18      	subs	r0, r3, r0
 801638a:	b003      	add	sp, #12
 801638c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801638e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016392:	f804 2f01 	strb.w	r2, [r4, #1]!
 8016396:	e7ed      	b.n	8016374 <__exponent+0x4c>
 8016398:	2330      	movs	r3, #48	; 0x30
 801639a:	3130      	adds	r1, #48	; 0x30
 801639c:	7083      	strb	r3, [r0, #2]
 801639e:	70c1      	strb	r1, [r0, #3]
 80163a0:	1d03      	adds	r3, r0, #4
 80163a2:	e7f1      	b.n	8016388 <__exponent+0x60>

080163a4 <_printf_float>:
 80163a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163a8:	ed2d 8b02 	vpush	{d8}
 80163ac:	b08d      	sub	sp, #52	; 0x34
 80163ae:	460c      	mov	r4, r1
 80163b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80163b4:	4616      	mov	r6, r2
 80163b6:	461f      	mov	r7, r3
 80163b8:	4605      	mov	r5, r0
 80163ba:	f002 fed5 	bl	8019168 <_localeconv_r>
 80163be:	f8d0 a000 	ldr.w	sl, [r0]
 80163c2:	4650      	mov	r0, sl
 80163c4:	f7e9 ff04 	bl	80001d0 <strlen>
 80163c8:	2300      	movs	r3, #0
 80163ca:	930a      	str	r3, [sp, #40]	; 0x28
 80163cc:	6823      	ldr	r3, [r4, #0]
 80163ce:	9305      	str	r3, [sp, #20]
 80163d0:	f8d8 3000 	ldr.w	r3, [r8]
 80163d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80163d8:	3307      	adds	r3, #7
 80163da:	f023 0307 	bic.w	r3, r3, #7
 80163de:	f103 0208 	add.w	r2, r3, #8
 80163e2:	f8c8 2000 	str.w	r2, [r8]
 80163e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80163ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80163f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80163f6:	9307      	str	r3, [sp, #28]
 80163f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80163fc:	ee08 0a10 	vmov	s16, r0
 8016400:	4b9f      	ldr	r3, [pc, #636]	; (8016680 <_printf_float+0x2dc>)
 8016402:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016406:	f04f 32ff 	mov.w	r2, #4294967295
 801640a:	f7ea fb8f 	bl	8000b2c <__aeabi_dcmpun>
 801640e:	bb88      	cbnz	r0, 8016474 <_printf_float+0xd0>
 8016410:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016414:	4b9a      	ldr	r3, [pc, #616]	; (8016680 <_printf_float+0x2dc>)
 8016416:	f04f 32ff 	mov.w	r2, #4294967295
 801641a:	f7ea fb69 	bl	8000af0 <__aeabi_dcmple>
 801641e:	bb48      	cbnz	r0, 8016474 <_printf_float+0xd0>
 8016420:	2200      	movs	r2, #0
 8016422:	2300      	movs	r3, #0
 8016424:	4640      	mov	r0, r8
 8016426:	4649      	mov	r1, r9
 8016428:	f7ea fb58 	bl	8000adc <__aeabi_dcmplt>
 801642c:	b110      	cbz	r0, 8016434 <_printf_float+0x90>
 801642e:	232d      	movs	r3, #45	; 0x2d
 8016430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016434:	4b93      	ldr	r3, [pc, #588]	; (8016684 <_printf_float+0x2e0>)
 8016436:	4894      	ldr	r0, [pc, #592]	; (8016688 <_printf_float+0x2e4>)
 8016438:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801643c:	bf94      	ite	ls
 801643e:	4698      	movls	r8, r3
 8016440:	4680      	movhi	r8, r0
 8016442:	2303      	movs	r3, #3
 8016444:	6123      	str	r3, [r4, #16]
 8016446:	9b05      	ldr	r3, [sp, #20]
 8016448:	f023 0204 	bic.w	r2, r3, #4
 801644c:	6022      	str	r2, [r4, #0]
 801644e:	f04f 0900 	mov.w	r9, #0
 8016452:	9700      	str	r7, [sp, #0]
 8016454:	4633      	mov	r3, r6
 8016456:	aa0b      	add	r2, sp, #44	; 0x2c
 8016458:	4621      	mov	r1, r4
 801645a:	4628      	mov	r0, r5
 801645c:	f000 f9d8 	bl	8016810 <_printf_common>
 8016460:	3001      	adds	r0, #1
 8016462:	f040 8090 	bne.w	8016586 <_printf_float+0x1e2>
 8016466:	f04f 30ff 	mov.w	r0, #4294967295
 801646a:	b00d      	add	sp, #52	; 0x34
 801646c:	ecbd 8b02 	vpop	{d8}
 8016470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016474:	4642      	mov	r2, r8
 8016476:	464b      	mov	r3, r9
 8016478:	4640      	mov	r0, r8
 801647a:	4649      	mov	r1, r9
 801647c:	f7ea fb56 	bl	8000b2c <__aeabi_dcmpun>
 8016480:	b140      	cbz	r0, 8016494 <_printf_float+0xf0>
 8016482:	464b      	mov	r3, r9
 8016484:	2b00      	cmp	r3, #0
 8016486:	bfbc      	itt	lt
 8016488:	232d      	movlt	r3, #45	; 0x2d
 801648a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801648e:	487f      	ldr	r0, [pc, #508]	; (801668c <_printf_float+0x2e8>)
 8016490:	4b7f      	ldr	r3, [pc, #508]	; (8016690 <_printf_float+0x2ec>)
 8016492:	e7d1      	b.n	8016438 <_printf_float+0x94>
 8016494:	6863      	ldr	r3, [r4, #4]
 8016496:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801649a:	9206      	str	r2, [sp, #24]
 801649c:	1c5a      	adds	r2, r3, #1
 801649e:	d13f      	bne.n	8016520 <_printf_float+0x17c>
 80164a0:	2306      	movs	r3, #6
 80164a2:	6063      	str	r3, [r4, #4]
 80164a4:	9b05      	ldr	r3, [sp, #20]
 80164a6:	6861      	ldr	r1, [r4, #4]
 80164a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80164ac:	2300      	movs	r3, #0
 80164ae:	9303      	str	r3, [sp, #12]
 80164b0:	ab0a      	add	r3, sp, #40	; 0x28
 80164b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80164b6:	ab09      	add	r3, sp, #36	; 0x24
 80164b8:	ec49 8b10 	vmov	d0, r8, r9
 80164bc:	9300      	str	r3, [sp, #0]
 80164be:	6022      	str	r2, [r4, #0]
 80164c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80164c4:	4628      	mov	r0, r5
 80164c6:	f7ff fecd 	bl	8016264 <__cvt>
 80164ca:	9b06      	ldr	r3, [sp, #24]
 80164cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80164ce:	2b47      	cmp	r3, #71	; 0x47
 80164d0:	4680      	mov	r8, r0
 80164d2:	d108      	bne.n	80164e6 <_printf_float+0x142>
 80164d4:	1cc8      	adds	r0, r1, #3
 80164d6:	db02      	blt.n	80164de <_printf_float+0x13a>
 80164d8:	6863      	ldr	r3, [r4, #4]
 80164da:	4299      	cmp	r1, r3
 80164dc:	dd41      	ble.n	8016562 <_printf_float+0x1be>
 80164de:	f1ab 0b02 	sub.w	fp, fp, #2
 80164e2:	fa5f fb8b 	uxtb.w	fp, fp
 80164e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80164ea:	d820      	bhi.n	801652e <_printf_float+0x18a>
 80164ec:	3901      	subs	r1, #1
 80164ee:	465a      	mov	r2, fp
 80164f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80164f4:	9109      	str	r1, [sp, #36]	; 0x24
 80164f6:	f7ff ff17 	bl	8016328 <__exponent>
 80164fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80164fc:	1813      	adds	r3, r2, r0
 80164fe:	2a01      	cmp	r2, #1
 8016500:	4681      	mov	r9, r0
 8016502:	6123      	str	r3, [r4, #16]
 8016504:	dc02      	bgt.n	801650c <_printf_float+0x168>
 8016506:	6822      	ldr	r2, [r4, #0]
 8016508:	07d2      	lsls	r2, r2, #31
 801650a:	d501      	bpl.n	8016510 <_printf_float+0x16c>
 801650c:	3301      	adds	r3, #1
 801650e:	6123      	str	r3, [r4, #16]
 8016510:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016514:	2b00      	cmp	r3, #0
 8016516:	d09c      	beq.n	8016452 <_printf_float+0xae>
 8016518:	232d      	movs	r3, #45	; 0x2d
 801651a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801651e:	e798      	b.n	8016452 <_printf_float+0xae>
 8016520:	9a06      	ldr	r2, [sp, #24]
 8016522:	2a47      	cmp	r2, #71	; 0x47
 8016524:	d1be      	bne.n	80164a4 <_printf_float+0x100>
 8016526:	2b00      	cmp	r3, #0
 8016528:	d1bc      	bne.n	80164a4 <_printf_float+0x100>
 801652a:	2301      	movs	r3, #1
 801652c:	e7b9      	b.n	80164a2 <_printf_float+0xfe>
 801652e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016532:	d118      	bne.n	8016566 <_printf_float+0x1c2>
 8016534:	2900      	cmp	r1, #0
 8016536:	6863      	ldr	r3, [r4, #4]
 8016538:	dd0b      	ble.n	8016552 <_printf_float+0x1ae>
 801653a:	6121      	str	r1, [r4, #16]
 801653c:	b913      	cbnz	r3, 8016544 <_printf_float+0x1a0>
 801653e:	6822      	ldr	r2, [r4, #0]
 8016540:	07d0      	lsls	r0, r2, #31
 8016542:	d502      	bpl.n	801654a <_printf_float+0x1a6>
 8016544:	3301      	adds	r3, #1
 8016546:	440b      	add	r3, r1
 8016548:	6123      	str	r3, [r4, #16]
 801654a:	65a1      	str	r1, [r4, #88]	; 0x58
 801654c:	f04f 0900 	mov.w	r9, #0
 8016550:	e7de      	b.n	8016510 <_printf_float+0x16c>
 8016552:	b913      	cbnz	r3, 801655a <_printf_float+0x1b6>
 8016554:	6822      	ldr	r2, [r4, #0]
 8016556:	07d2      	lsls	r2, r2, #31
 8016558:	d501      	bpl.n	801655e <_printf_float+0x1ba>
 801655a:	3302      	adds	r3, #2
 801655c:	e7f4      	b.n	8016548 <_printf_float+0x1a4>
 801655e:	2301      	movs	r3, #1
 8016560:	e7f2      	b.n	8016548 <_printf_float+0x1a4>
 8016562:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016568:	4299      	cmp	r1, r3
 801656a:	db05      	blt.n	8016578 <_printf_float+0x1d4>
 801656c:	6823      	ldr	r3, [r4, #0]
 801656e:	6121      	str	r1, [r4, #16]
 8016570:	07d8      	lsls	r0, r3, #31
 8016572:	d5ea      	bpl.n	801654a <_printf_float+0x1a6>
 8016574:	1c4b      	adds	r3, r1, #1
 8016576:	e7e7      	b.n	8016548 <_printf_float+0x1a4>
 8016578:	2900      	cmp	r1, #0
 801657a:	bfd4      	ite	le
 801657c:	f1c1 0202 	rsble	r2, r1, #2
 8016580:	2201      	movgt	r2, #1
 8016582:	4413      	add	r3, r2
 8016584:	e7e0      	b.n	8016548 <_printf_float+0x1a4>
 8016586:	6823      	ldr	r3, [r4, #0]
 8016588:	055a      	lsls	r2, r3, #21
 801658a:	d407      	bmi.n	801659c <_printf_float+0x1f8>
 801658c:	6923      	ldr	r3, [r4, #16]
 801658e:	4642      	mov	r2, r8
 8016590:	4631      	mov	r1, r6
 8016592:	4628      	mov	r0, r5
 8016594:	47b8      	blx	r7
 8016596:	3001      	adds	r0, #1
 8016598:	d12c      	bne.n	80165f4 <_printf_float+0x250>
 801659a:	e764      	b.n	8016466 <_printf_float+0xc2>
 801659c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80165a0:	f240 80e0 	bls.w	8016764 <_printf_float+0x3c0>
 80165a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80165a8:	2200      	movs	r2, #0
 80165aa:	2300      	movs	r3, #0
 80165ac:	f7ea fa8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80165b0:	2800      	cmp	r0, #0
 80165b2:	d034      	beq.n	801661e <_printf_float+0x27a>
 80165b4:	4a37      	ldr	r2, [pc, #220]	; (8016694 <_printf_float+0x2f0>)
 80165b6:	2301      	movs	r3, #1
 80165b8:	4631      	mov	r1, r6
 80165ba:	4628      	mov	r0, r5
 80165bc:	47b8      	blx	r7
 80165be:	3001      	adds	r0, #1
 80165c0:	f43f af51 	beq.w	8016466 <_printf_float+0xc2>
 80165c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80165c8:	429a      	cmp	r2, r3
 80165ca:	db02      	blt.n	80165d2 <_printf_float+0x22e>
 80165cc:	6823      	ldr	r3, [r4, #0]
 80165ce:	07d8      	lsls	r0, r3, #31
 80165d0:	d510      	bpl.n	80165f4 <_printf_float+0x250>
 80165d2:	ee18 3a10 	vmov	r3, s16
 80165d6:	4652      	mov	r2, sl
 80165d8:	4631      	mov	r1, r6
 80165da:	4628      	mov	r0, r5
 80165dc:	47b8      	blx	r7
 80165de:	3001      	adds	r0, #1
 80165e0:	f43f af41 	beq.w	8016466 <_printf_float+0xc2>
 80165e4:	f04f 0800 	mov.w	r8, #0
 80165e8:	f104 091a 	add.w	r9, r4, #26
 80165ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165ee:	3b01      	subs	r3, #1
 80165f0:	4543      	cmp	r3, r8
 80165f2:	dc09      	bgt.n	8016608 <_printf_float+0x264>
 80165f4:	6823      	ldr	r3, [r4, #0]
 80165f6:	079b      	lsls	r3, r3, #30
 80165f8:	f100 8105 	bmi.w	8016806 <_printf_float+0x462>
 80165fc:	68e0      	ldr	r0, [r4, #12]
 80165fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016600:	4298      	cmp	r0, r3
 8016602:	bfb8      	it	lt
 8016604:	4618      	movlt	r0, r3
 8016606:	e730      	b.n	801646a <_printf_float+0xc6>
 8016608:	2301      	movs	r3, #1
 801660a:	464a      	mov	r2, r9
 801660c:	4631      	mov	r1, r6
 801660e:	4628      	mov	r0, r5
 8016610:	47b8      	blx	r7
 8016612:	3001      	adds	r0, #1
 8016614:	f43f af27 	beq.w	8016466 <_printf_float+0xc2>
 8016618:	f108 0801 	add.w	r8, r8, #1
 801661c:	e7e6      	b.n	80165ec <_printf_float+0x248>
 801661e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016620:	2b00      	cmp	r3, #0
 8016622:	dc39      	bgt.n	8016698 <_printf_float+0x2f4>
 8016624:	4a1b      	ldr	r2, [pc, #108]	; (8016694 <_printf_float+0x2f0>)
 8016626:	2301      	movs	r3, #1
 8016628:	4631      	mov	r1, r6
 801662a:	4628      	mov	r0, r5
 801662c:	47b8      	blx	r7
 801662e:	3001      	adds	r0, #1
 8016630:	f43f af19 	beq.w	8016466 <_printf_float+0xc2>
 8016634:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016638:	4313      	orrs	r3, r2
 801663a:	d102      	bne.n	8016642 <_printf_float+0x29e>
 801663c:	6823      	ldr	r3, [r4, #0]
 801663e:	07d9      	lsls	r1, r3, #31
 8016640:	d5d8      	bpl.n	80165f4 <_printf_float+0x250>
 8016642:	ee18 3a10 	vmov	r3, s16
 8016646:	4652      	mov	r2, sl
 8016648:	4631      	mov	r1, r6
 801664a:	4628      	mov	r0, r5
 801664c:	47b8      	blx	r7
 801664e:	3001      	adds	r0, #1
 8016650:	f43f af09 	beq.w	8016466 <_printf_float+0xc2>
 8016654:	f04f 0900 	mov.w	r9, #0
 8016658:	f104 0a1a 	add.w	sl, r4, #26
 801665c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801665e:	425b      	negs	r3, r3
 8016660:	454b      	cmp	r3, r9
 8016662:	dc01      	bgt.n	8016668 <_printf_float+0x2c4>
 8016664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016666:	e792      	b.n	801658e <_printf_float+0x1ea>
 8016668:	2301      	movs	r3, #1
 801666a:	4652      	mov	r2, sl
 801666c:	4631      	mov	r1, r6
 801666e:	4628      	mov	r0, r5
 8016670:	47b8      	blx	r7
 8016672:	3001      	adds	r0, #1
 8016674:	f43f aef7 	beq.w	8016466 <_printf_float+0xc2>
 8016678:	f109 0901 	add.w	r9, r9, #1
 801667c:	e7ee      	b.n	801665c <_printf_float+0x2b8>
 801667e:	bf00      	nop
 8016680:	7fefffff 	.word	0x7fefffff
 8016684:	0801c63c 	.word	0x0801c63c
 8016688:	0801c640 	.word	0x0801c640
 801668c:	0801c648 	.word	0x0801c648
 8016690:	0801c644 	.word	0x0801c644
 8016694:	0801c64c 	.word	0x0801c64c
 8016698:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801669a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801669c:	429a      	cmp	r2, r3
 801669e:	bfa8      	it	ge
 80166a0:	461a      	movge	r2, r3
 80166a2:	2a00      	cmp	r2, #0
 80166a4:	4691      	mov	r9, r2
 80166a6:	dc37      	bgt.n	8016718 <_printf_float+0x374>
 80166a8:	f04f 0b00 	mov.w	fp, #0
 80166ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80166b0:	f104 021a 	add.w	r2, r4, #26
 80166b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80166b6:	9305      	str	r3, [sp, #20]
 80166b8:	eba3 0309 	sub.w	r3, r3, r9
 80166bc:	455b      	cmp	r3, fp
 80166be:	dc33      	bgt.n	8016728 <_printf_float+0x384>
 80166c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80166c4:	429a      	cmp	r2, r3
 80166c6:	db3b      	blt.n	8016740 <_printf_float+0x39c>
 80166c8:	6823      	ldr	r3, [r4, #0]
 80166ca:	07da      	lsls	r2, r3, #31
 80166cc:	d438      	bmi.n	8016740 <_printf_float+0x39c>
 80166ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80166d0:	9b05      	ldr	r3, [sp, #20]
 80166d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80166d4:	1ad3      	subs	r3, r2, r3
 80166d6:	eba2 0901 	sub.w	r9, r2, r1
 80166da:	4599      	cmp	r9, r3
 80166dc:	bfa8      	it	ge
 80166de:	4699      	movge	r9, r3
 80166e0:	f1b9 0f00 	cmp.w	r9, #0
 80166e4:	dc35      	bgt.n	8016752 <_printf_float+0x3ae>
 80166e6:	f04f 0800 	mov.w	r8, #0
 80166ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80166ee:	f104 0a1a 	add.w	sl, r4, #26
 80166f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80166f6:	1a9b      	subs	r3, r3, r2
 80166f8:	eba3 0309 	sub.w	r3, r3, r9
 80166fc:	4543      	cmp	r3, r8
 80166fe:	f77f af79 	ble.w	80165f4 <_printf_float+0x250>
 8016702:	2301      	movs	r3, #1
 8016704:	4652      	mov	r2, sl
 8016706:	4631      	mov	r1, r6
 8016708:	4628      	mov	r0, r5
 801670a:	47b8      	blx	r7
 801670c:	3001      	adds	r0, #1
 801670e:	f43f aeaa 	beq.w	8016466 <_printf_float+0xc2>
 8016712:	f108 0801 	add.w	r8, r8, #1
 8016716:	e7ec      	b.n	80166f2 <_printf_float+0x34e>
 8016718:	4613      	mov	r3, r2
 801671a:	4631      	mov	r1, r6
 801671c:	4642      	mov	r2, r8
 801671e:	4628      	mov	r0, r5
 8016720:	47b8      	blx	r7
 8016722:	3001      	adds	r0, #1
 8016724:	d1c0      	bne.n	80166a8 <_printf_float+0x304>
 8016726:	e69e      	b.n	8016466 <_printf_float+0xc2>
 8016728:	2301      	movs	r3, #1
 801672a:	4631      	mov	r1, r6
 801672c:	4628      	mov	r0, r5
 801672e:	9205      	str	r2, [sp, #20]
 8016730:	47b8      	blx	r7
 8016732:	3001      	adds	r0, #1
 8016734:	f43f ae97 	beq.w	8016466 <_printf_float+0xc2>
 8016738:	9a05      	ldr	r2, [sp, #20]
 801673a:	f10b 0b01 	add.w	fp, fp, #1
 801673e:	e7b9      	b.n	80166b4 <_printf_float+0x310>
 8016740:	ee18 3a10 	vmov	r3, s16
 8016744:	4652      	mov	r2, sl
 8016746:	4631      	mov	r1, r6
 8016748:	4628      	mov	r0, r5
 801674a:	47b8      	blx	r7
 801674c:	3001      	adds	r0, #1
 801674e:	d1be      	bne.n	80166ce <_printf_float+0x32a>
 8016750:	e689      	b.n	8016466 <_printf_float+0xc2>
 8016752:	9a05      	ldr	r2, [sp, #20]
 8016754:	464b      	mov	r3, r9
 8016756:	4442      	add	r2, r8
 8016758:	4631      	mov	r1, r6
 801675a:	4628      	mov	r0, r5
 801675c:	47b8      	blx	r7
 801675e:	3001      	adds	r0, #1
 8016760:	d1c1      	bne.n	80166e6 <_printf_float+0x342>
 8016762:	e680      	b.n	8016466 <_printf_float+0xc2>
 8016764:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016766:	2a01      	cmp	r2, #1
 8016768:	dc01      	bgt.n	801676e <_printf_float+0x3ca>
 801676a:	07db      	lsls	r3, r3, #31
 801676c:	d538      	bpl.n	80167e0 <_printf_float+0x43c>
 801676e:	2301      	movs	r3, #1
 8016770:	4642      	mov	r2, r8
 8016772:	4631      	mov	r1, r6
 8016774:	4628      	mov	r0, r5
 8016776:	47b8      	blx	r7
 8016778:	3001      	adds	r0, #1
 801677a:	f43f ae74 	beq.w	8016466 <_printf_float+0xc2>
 801677e:	ee18 3a10 	vmov	r3, s16
 8016782:	4652      	mov	r2, sl
 8016784:	4631      	mov	r1, r6
 8016786:	4628      	mov	r0, r5
 8016788:	47b8      	blx	r7
 801678a:	3001      	adds	r0, #1
 801678c:	f43f ae6b 	beq.w	8016466 <_printf_float+0xc2>
 8016790:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016794:	2200      	movs	r2, #0
 8016796:	2300      	movs	r3, #0
 8016798:	f7ea f996 	bl	8000ac8 <__aeabi_dcmpeq>
 801679c:	b9d8      	cbnz	r0, 80167d6 <_printf_float+0x432>
 801679e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80167a0:	f108 0201 	add.w	r2, r8, #1
 80167a4:	3b01      	subs	r3, #1
 80167a6:	4631      	mov	r1, r6
 80167a8:	4628      	mov	r0, r5
 80167aa:	47b8      	blx	r7
 80167ac:	3001      	adds	r0, #1
 80167ae:	d10e      	bne.n	80167ce <_printf_float+0x42a>
 80167b0:	e659      	b.n	8016466 <_printf_float+0xc2>
 80167b2:	2301      	movs	r3, #1
 80167b4:	4652      	mov	r2, sl
 80167b6:	4631      	mov	r1, r6
 80167b8:	4628      	mov	r0, r5
 80167ba:	47b8      	blx	r7
 80167bc:	3001      	adds	r0, #1
 80167be:	f43f ae52 	beq.w	8016466 <_printf_float+0xc2>
 80167c2:	f108 0801 	add.w	r8, r8, #1
 80167c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80167c8:	3b01      	subs	r3, #1
 80167ca:	4543      	cmp	r3, r8
 80167cc:	dcf1      	bgt.n	80167b2 <_printf_float+0x40e>
 80167ce:	464b      	mov	r3, r9
 80167d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80167d4:	e6dc      	b.n	8016590 <_printf_float+0x1ec>
 80167d6:	f04f 0800 	mov.w	r8, #0
 80167da:	f104 0a1a 	add.w	sl, r4, #26
 80167de:	e7f2      	b.n	80167c6 <_printf_float+0x422>
 80167e0:	2301      	movs	r3, #1
 80167e2:	4642      	mov	r2, r8
 80167e4:	e7df      	b.n	80167a6 <_printf_float+0x402>
 80167e6:	2301      	movs	r3, #1
 80167e8:	464a      	mov	r2, r9
 80167ea:	4631      	mov	r1, r6
 80167ec:	4628      	mov	r0, r5
 80167ee:	47b8      	blx	r7
 80167f0:	3001      	adds	r0, #1
 80167f2:	f43f ae38 	beq.w	8016466 <_printf_float+0xc2>
 80167f6:	f108 0801 	add.w	r8, r8, #1
 80167fa:	68e3      	ldr	r3, [r4, #12]
 80167fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80167fe:	1a5b      	subs	r3, r3, r1
 8016800:	4543      	cmp	r3, r8
 8016802:	dcf0      	bgt.n	80167e6 <_printf_float+0x442>
 8016804:	e6fa      	b.n	80165fc <_printf_float+0x258>
 8016806:	f04f 0800 	mov.w	r8, #0
 801680a:	f104 0919 	add.w	r9, r4, #25
 801680e:	e7f4      	b.n	80167fa <_printf_float+0x456>

08016810 <_printf_common>:
 8016810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016814:	4616      	mov	r6, r2
 8016816:	4699      	mov	r9, r3
 8016818:	688a      	ldr	r2, [r1, #8]
 801681a:	690b      	ldr	r3, [r1, #16]
 801681c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016820:	4293      	cmp	r3, r2
 8016822:	bfb8      	it	lt
 8016824:	4613      	movlt	r3, r2
 8016826:	6033      	str	r3, [r6, #0]
 8016828:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801682c:	4607      	mov	r7, r0
 801682e:	460c      	mov	r4, r1
 8016830:	b10a      	cbz	r2, 8016836 <_printf_common+0x26>
 8016832:	3301      	adds	r3, #1
 8016834:	6033      	str	r3, [r6, #0]
 8016836:	6823      	ldr	r3, [r4, #0]
 8016838:	0699      	lsls	r1, r3, #26
 801683a:	bf42      	ittt	mi
 801683c:	6833      	ldrmi	r3, [r6, #0]
 801683e:	3302      	addmi	r3, #2
 8016840:	6033      	strmi	r3, [r6, #0]
 8016842:	6825      	ldr	r5, [r4, #0]
 8016844:	f015 0506 	ands.w	r5, r5, #6
 8016848:	d106      	bne.n	8016858 <_printf_common+0x48>
 801684a:	f104 0a19 	add.w	sl, r4, #25
 801684e:	68e3      	ldr	r3, [r4, #12]
 8016850:	6832      	ldr	r2, [r6, #0]
 8016852:	1a9b      	subs	r3, r3, r2
 8016854:	42ab      	cmp	r3, r5
 8016856:	dc26      	bgt.n	80168a6 <_printf_common+0x96>
 8016858:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801685c:	1e13      	subs	r3, r2, #0
 801685e:	6822      	ldr	r2, [r4, #0]
 8016860:	bf18      	it	ne
 8016862:	2301      	movne	r3, #1
 8016864:	0692      	lsls	r2, r2, #26
 8016866:	d42b      	bmi.n	80168c0 <_printf_common+0xb0>
 8016868:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801686c:	4649      	mov	r1, r9
 801686e:	4638      	mov	r0, r7
 8016870:	47c0      	blx	r8
 8016872:	3001      	adds	r0, #1
 8016874:	d01e      	beq.n	80168b4 <_printf_common+0xa4>
 8016876:	6823      	ldr	r3, [r4, #0]
 8016878:	68e5      	ldr	r5, [r4, #12]
 801687a:	6832      	ldr	r2, [r6, #0]
 801687c:	f003 0306 	and.w	r3, r3, #6
 8016880:	2b04      	cmp	r3, #4
 8016882:	bf08      	it	eq
 8016884:	1aad      	subeq	r5, r5, r2
 8016886:	68a3      	ldr	r3, [r4, #8]
 8016888:	6922      	ldr	r2, [r4, #16]
 801688a:	bf0c      	ite	eq
 801688c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016890:	2500      	movne	r5, #0
 8016892:	4293      	cmp	r3, r2
 8016894:	bfc4      	itt	gt
 8016896:	1a9b      	subgt	r3, r3, r2
 8016898:	18ed      	addgt	r5, r5, r3
 801689a:	2600      	movs	r6, #0
 801689c:	341a      	adds	r4, #26
 801689e:	42b5      	cmp	r5, r6
 80168a0:	d11a      	bne.n	80168d8 <_printf_common+0xc8>
 80168a2:	2000      	movs	r0, #0
 80168a4:	e008      	b.n	80168b8 <_printf_common+0xa8>
 80168a6:	2301      	movs	r3, #1
 80168a8:	4652      	mov	r2, sl
 80168aa:	4649      	mov	r1, r9
 80168ac:	4638      	mov	r0, r7
 80168ae:	47c0      	blx	r8
 80168b0:	3001      	adds	r0, #1
 80168b2:	d103      	bne.n	80168bc <_printf_common+0xac>
 80168b4:	f04f 30ff 	mov.w	r0, #4294967295
 80168b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168bc:	3501      	adds	r5, #1
 80168be:	e7c6      	b.n	801684e <_printf_common+0x3e>
 80168c0:	18e1      	adds	r1, r4, r3
 80168c2:	1c5a      	adds	r2, r3, #1
 80168c4:	2030      	movs	r0, #48	; 0x30
 80168c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80168ca:	4422      	add	r2, r4
 80168cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80168d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80168d4:	3302      	adds	r3, #2
 80168d6:	e7c7      	b.n	8016868 <_printf_common+0x58>
 80168d8:	2301      	movs	r3, #1
 80168da:	4622      	mov	r2, r4
 80168dc:	4649      	mov	r1, r9
 80168de:	4638      	mov	r0, r7
 80168e0:	47c0      	blx	r8
 80168e2:	3001      	adds	r0, #1
 80168e4:	d0e6      	beq.n	80168b4 <_printf_common+0xa4>
 80168e6:	3601      	adds	r6, #1
 80168e8:	e7d9      	b.n	801689e <_printf_common+0x8e>
	...

080168ec <_printf_i>:
 80168ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80168f0:	460c      	mov	r4, r1
 80168f2:	4691      	mov	r9, r2
 80168f4:	7e27      	ldrb	r7, [r4, #24]
 80168f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80168f8:	2f78      	cmp	r7, #120	; 0x78
 80168fa:	4680      	mov	r8, r0
 80168fc:	469a      	mov	sl, r3
 80168fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016902:	d807      	bhi.n	8016914 <_printf_i+0x28>
 8016904:	2f62      	cmp	r7, #98	; 0x62
 8016906:	d80a      	bhi.n	801691e <_printf_i+0x32>
 8016908:	2f00      	cmp	r7, #0
 801690a:	f000 80d8 	beq.w	8016abe <_printf_i+0x1d2>
 801690e:	2f58      	cmp	r7, #88	; 0x58
 8016910:	f000 80a3 	beq.w	8016a5a <_printf_i+0x16e>
 8016914:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016918:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801691c:	e03a      	b.n	8016994 <_printf_i+0xa8>
 801691e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016922:	2b15      	cmp	r3, #21
 8016924:	d8f6      	bhi.n	8016914 <_printf_i+0x28>
 8016926:	a001      	add	r0, pc, #4	; (adr r0, 801692c <_printf_i+0x40>)
 8016928:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801692c:	08016985 	.word	0x08016985
 8016930:	08016999 	.word	0x08016999
 8016934:	08016915 	.word	0x08016915
 8016938:	08016915 	.word	0x08016915
 801693c:	08016915 	.word	0x08016915
 8016940:	08016915 	.word	0x08016915
 8016944:	08016999 	.word	0x08016999
 8016948:	08016915 	.word	0x08016915
 801694c:	08016915 	.word	0x08016915
 8016950:	08016915 	.word	0x08016915
 8016954:	08016915 	.word	0x08016915
 8016958:	08016aa5 	.word	0x08016aa5
 801695c:	080169c9 	.word	0x080169c9
 8016960:	08016a87 	.word	0x08016a87
 8016964:	08016915 	.word	0x08016915
 8016968:	08016915 	.word	0x08016915
 801696c:	08016ac7 	.word	0x08016ac7
 8016970:	08016915 	.word	0x08016915
 8016974:	080169c9 	.word	0x080169c9
 8016978:	08016915 	.word	0x08016915
 801697c:	08016915 	.word	0x08016915
 8016980:	08016a8f 	.word	0x08016a8f
 8016984:	680b      	ldr	r3, [r1, #0]
 8016986:	1d1a      	adds	r2, r3, #4
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	600a      	str	r2, [r1, #0]
 801698c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016994:	2301      	movs	r3, #1
 8016996:	e0a3      	b.n	8016ae0 <_printf_i+0x1f4>
 8016998:	6825      	ldr	r5, [r4, #0]
 801699a:	6808      	ldr	r0, [r1, #0]
 801699c:	062e      	lsls	r6, r5, #24
 801699e:	f100 0304 	add.w	r3, r0, #4
 80169a2:	d50a      	bpl.n	80169ba <_printf_i+0xce>
 80169a4:	6805      	ldr	r5, [r0, #0]
 80169a6:	600b      	str	r3, [r1, #0]
 80169a8:	2d00      	cmp	r5, #0
 80169aa:	da03      	bge.n	80169b4 <_printf_i+0xc8>
 80169ac:	232d      	movs	r3, #45	; 0x2d
 80169ae:	426d      	negs	r5, r5
 80169b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80169b4:	485e      	ldr	r0, [pc, #376]	; (8016b30 <_printf_i+0x244>)
 80169b6:	230a      	movs	r3, #10
 80169b8:	e019      	b.n	80169ee <_printf_i+0x102>
 80169ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80169be:	6805      	ldr	r5, [r0, #0]
 80169c0:	600b      	str	r3, [r1, #0]
 80169c2:	bf18      	it	ne
 80169c4:	b22d      	sxthne	r5, r5
 80169c6:	e7ef      	b.n	80169a8 <_printf_i+0xbc>
 80169c8:	680b      	ldr	r3, [r1, #0]
 80169ca:	6825      	ldr	r5, [r4, #0]
 80169cc:	1d18      	adds	r0, r3, #4
 80169ce:	6008      	str	r0, [r1, #0]
 80169d0:	0628      	lsls	r0, r5, #24
 80169d2:	d501      	bpl.n	80169d8 <_printf_i+0xec>
 80169d4:	681d      	ldr	r5, [r3, #0]
 80169d6:	e002      	b.n	80169de <_printf_i+0xf2>
 80169d8:	0669      	lsls	r1, r5, #25
 80169da:	d5fb      	bpl.n	80169d4 <_printf_i+0xe8>
 80169dc:	881d      	ldrh	r5, [r3, #0]
 80169de:	4854      	ldr	r0, [pc, #336]	; (8016b30 <_printf_i+0x244>)
 80169e0:	2f6f      	cmp	r7, #111	; 0x6f
 80169e2:	bf0c      	ite	eq
 80169e4:	2308      	moveq	r3, #8
 80169e6:	230a      	movne	r3, #10
 80169e8:	2100      	movs	r1, #0
 80169ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80169ee:	6866      	ldr	r6, [r4, #4]
 80169f0:	60a6      	str	r6, [r4, #8]
 80169f2:	2e00      	cmp	r6, #0
 80169f4:	bfa2      	ittt	ge
 80169f6:	6821      	ldrge	r1, [r4, #0]
 80169f8:	f021 0104 	bicge.w	r1, r1, #4
 80169fc:	6021      	strge	r1, [r4, #0]
 80169fe:	b90d      	cbnz	r5, 8016a04 <_printf_i+0x118>
 8016a00:	2e00      	cmp	r6, #0
 8016a02:	d04d      	beq.n	8016aa0 <_printf_i+0x1b4>
 8016a04:	4616      	mov	r6, r2
 8016a06:	fbb5 f1f3 	udiv	r1, r5, r3
 8016a0a:	fb03 5711 	mls	r7, r3, r1, r5
 8016a0e:	5dc7      	ldrb	r7, [r0, r7]
 8016a10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016a14:	462f      	mov	r7, r5
 8016a16:	42bb      	cmp	r3, r7
 8016a18:	460d      	mov	r5, r1
 8016a1a:	d9f4      	bls.n	8016a06 <_printf_i+0x11a>
 8016a1c:	2b08      	cmp	r3, #8
 8016a1e:	d10b      	bne.n	8016a38 <_printf_i+0x14c>
 8016a20:	6823      	ldr	r3, [r4, #0]
 8016a22:	07df      	lsls	r7, r3, #31
 8016a24:	d508      	bpl.n	8016a38 <_printf_i+0x14c>
 8016a26:	6923      	ldr	r3, [r4, #16]
 8016a28:	6861      	ldr	r1, [r4, #4]
 8016a2a:	4299      	cmp	r1, r3
 8016a2c:	bfde      	ittt	le
 8016a2e:	2330      	movle	r3, #48	; 0x30
 8016a30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016a34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016a38:	1b92      	subs	r2, r2, r6
 8016a3a:	6122      	str	r2, [r4, #16]
 8016a3c:	f8cd a000 	str.w	sl, [sp]
 8016a40:	464b      	mov	r3, r9
 8016a42:	aa03      	add	r2, sp, #12
 8016a44:	4621      	mov	r1, r4
 8016a46:	4640      	mov	r0, r8
 8016a48:	f7ff fee2 	bl	8016810 <_printf_common>
 8016a4c:	3001      	adds	r0, #1
 8016a4e:	d14c      	bne.n	8016aea <_printf_i+0x1fe>
 8016a50:	f04f 30ff 	mov.w	r0, #4294967295
 8016a54:	b004      	add	sp, #16
 8016a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a5a:	4835      	ldr	r0, [pc, #212]	; (8016b30 <_printf_i+0x244>)
 8016a5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016a60:	6823      	ldr	r3, [r4, #0]
 8016a62:	680e      	ldr	r6, [r1, #0]
 8016a64:	061f      	lsls	r7, r3, #24
 8016a66:	f856 5b04 	ldr.w	r5, [r6], #4
 8016a6a:	600e      	str	r6, [r1, #0]
 8016a6c:	d514      	bpl.n	8016a98 <_printf_i+0x1ac>
 8016a6e:	07d9      	lsls	r1, r3, #31
 8016a70:	bf44      	itt	mi
 8016a72:	f043 0320 	orrmi.w	r3, r3, #32
 8016a76:	6023      	strmi	r3, [r4, #0]
 8016a78:	b91d      	cbnz	r5, 8016a82 <_printf_i+0x196>
 8016a7a:	6823      	ldr	r3, [r4, #0]
 8016a7c:	f023 0320 	bic.w	r3, r3, #32
 8016a80:	6023      	str	r3, [r4, #0]
 8016a82:	2310      	movs	r3, #16
 8016a84:	e7b0      	b.n	80169e8 <_printf_i+0xfc>
 8016a86:	6823      	ldr	r3, [r4, #0]
 8016a88:	f043 0320 	orr.w	r3, r3, #32
 8016a8c:	6023      	str	r3, [r4, #0]
 8016a8e:	2378      	movs	r3, #120	; 0x78
 8016a90:	4828      	ldr	r0, [pc, #160]	; (8016b34 <_printf_i+0x248>)
 8016a92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016a96:	e7e3      	b.n	8016a60 <_printf_i+0x174>
 8016a98:	065e      	lsls	r6, r3, #25
 8016a9a:	bf48      	it	mi
 8016a9c:	b2ad      	uxthmi	r5, r5
 8016a9e:	e7e6      	b.n	8016a6e <_printf_i+0x182>
 8016aa0:	4616      	mov	r6, r2
 8016aa2:	e7bb      	b.n	8016a1c <_printf_i+0x130>
 8016aa4:	680b      	ldr	r3, [r1, #0]
 8016aa6:	6826      	ldr	r6, [r4, #0]
 8016aa8:	6960      	ldr	r0, [r4, #20]
 8016aaa:	1d1d      	adds	r5, r3, #4
 8016aac:	600d      	str	r5, [r1, #0]
 8016aae:	0635      	lsls	r5, r6, #24
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	d501      	bpl.n	8016ab8 <_printf_i+0x1cc>
 8016ab4:	6018      	str	r0, [r3, #0]
 8016ab6:	e002      	b.n	8016abe <_printf_i+0x1d2>
 8016ab8:	0671      	lsls	r1, r6, #25
 8016aba:	d5fb      	bpl.n	8016ab4 <_printf_i+0x1c8>
 8016abc:	8018      	strh	r0, [r3, #0]
 8016abe:	2300      	movs	r3, #0
 8016ac0:	6123      	str	r3, [r4, #16]
 8016ac2:	4616      	mov	r6, r2
 8016ac4:	e7ba      	b.n	8016a3c <_printf_i+0x150>
 8016ac6:	680b      	ldr	r3, [r1, #0]
 8016ac8:	1d1a      	adds	r2, r3, #4
 8016aca:	600a      	str	r2, [r1, #0]
 8016acc:	681e      	ldr	r6, [r3, #0]
 8016ace:	6862      	ldr	r2, [r4, #4]
 8016ad0:	2100      	movs	r1, #0
 8016ad2:	4630      	mov	r0, r6
 8016ad4:	f7e9 fb84 	bl	80001e0 <memchr>
 8016ad8:	b108      	cbz	r0, 8016ade <_printf_i+0x1f2>
 8016ada:	1b80      	subs	r0, r0, r6
 8016adc:	6060      	str	r0, [r4, #4]
 8016ade:	6863      	ldr	r3, [r4, #4]
 8016ae0:	6123      	str	r3, [r4, #16]
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016ae8:	e7a8      	b.n	8016a3c <_printf_i+0x150>
 8016aea:	6923      	ldr	r3, [r4, #16]
 8016aec:	4632      	mov	r2, r6
 8016aee:	4649      	mov	r1, r9
 8016af0:	4640      	mov	r0, r8
 8016af2:	47d0      	blx	sl
 8016af4:	3001      	adds	r0, #1
 8016af6:	d0ab      	beq.n	8016a50 <_printf_i+0x164>
 8016af8:	6823      	ldr	r3, [r4, #0]
 8016afa:	079b      	lsls	r3, r3, #30
 8016afc:	d413      	bmi.n	8016b26 <_printf_i+0x23a>
 8016afe:	68e0      	ldr	r0, [r4, #12]
 8016b00:	9b03      	ldr	r3, [sp, #12]
 8016b02:	4298      	cmp	r0, r3
 8016b04:	bfb8      	it	lt
 8016b06:	4618      	movlt	r0, r3
 8016b08:	e7a4      	b.n	8016a54 <_printf_i+0x168>
 8016b0a:	2301      	movs	r3, #1
 8016b0c:	4632      	mov	r2, r6
 8016b0e:	4649      	mov	r1, r9
 8016b10:	4640      	mov	r0, r8
 8016b12:	47d0      	blx	sl
 8016b14:	3001      	adds	r0, #1
 8016b16:	d09b      	beq.n	8016a50 <_printf_i+0x164>
 8016b18:	3501      	adds	r5, #1
 8016b1a:	68e3      	ldr	r3, [r4, #12]
 8016b1c:	9903      	ldr	r1, [sp, #12]
 8016b1e:	1a5b      	subs	r3, r3, r1
 8016b20:	42ab      	cmp	r3, r5
 8016b22:	dcf2      	bgt.n	8016b0a <_printf_i+0x21e>
 8016b24:	e7eb      	b.n	8016afe <_printf_i+0x212>
 8016b26:	2500      	movs	r5, #0
 8016b28:	f104 0619 	add.w	r6, r4, #25
 8016b2c:	e7f5      	b.n	8016b1a <_printf_i+0x22e>
 8016b2e:	bf00      	nop
 8016b30:	0801c64e 	.word	0x0801c64e
 8016b34:	0801c65f 	.word	0x0801c65f

08016b38 <_scanf_float>:
 8016b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b3c:	b087      	sub	sp, #28
 8016b3e:	4617      	mov	r7, r2
 8016b40:	9303      	str	r3, [sp, #12]
 8016b42:	688b      	ldr	r3, [r1, #8]
 8016b44:	1e5a      	subs	r2, r3, #1
 8016b46:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016b4a:	bf83      	ittte	hi
 8016b4c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016b50:	195b      	addhi	r3, r3, r5
 8016b52:	9302      	strhi	r3, [sp, #8]
 8016b54:	2300      	movls	r3, #0
 8016b56:	bf86      	itte	hi
 8016b58:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016b5c:	608b      	strhi	r3, [r1, #8]
 8016b5e:	9302      	strls	r3, [sp, #8]
 8016b60:	680b      	ldr	r3, [r1, #0]
 8016b62:	468b      	mov	fp, r1
 8016b64:	2500      	movs	r5, #0
 8016b66:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016b6a:	f84b 3b1c 	str.w	r3, [fp], #28
 8016b6e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016b72:	4680      	mov	r8, r0
 8016b74:	460c      	mov	r4, r1
 8016b76:	465e      	mov	r6, fp
 8016b78:	46aa      	mov	sl, r5
 8016b7a:	46a9      	mov	r9, r5
 8016b7c:	9501      	str	r5, [sp, #4]
 8016b7e:	68a2      	ldr	r2, [r4, #8]
 8016b80:	b152      	cbz	r2, 8016b98 <_scanf_float+0x60>
 8016b82:	683b      	ldr	r3, [r7, #0]
 8016b84:	781b      	ldrb	r3, [r3, #0]
 8016b86:	2b4e      	cmp	r3, #78	; 0x4e
 8016b88:	d864      	bhi.n	8016c54 <_scanf_float+0x11c>
 8016b8a:	2b40      	cmp	r3, #64	; 0x40
 8016b8c:	d83c      	bhi.n	8016c08 <_scanf_float+0xd0>
 8016b8e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8016b92:	b2c8      	uxtb	r0, r1
 8016b94:	280e      	cmp	r0, #14
 8016b96:	d93a      	bls.n	8016c0e <_scanf_float+0xd6>
 8016b98:	f1b9 0f00 	cmp.w	r9, #0
 8016b9c:	d003      	beq.n	8016ba6 <_scanf_float+0x6e>
 8016b9e:	6823      	ldr	r3, [r4, #0]
 8016ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016ba4:	6023      	str	r3, [r4, #0]
 8016ba6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016baa:	f1ba 0f01 	cmp.w	sl, #1
 8016bae:	f200 8113 	bhi.w	8016dd8 <_scanf_float+0x2a0>
 8016bb2:	455e      	cmp	r6, fp
 8016bb4:	f200 8105 	bhi.w	8016dc2 <_scanf_float+0x28a>
 8016bb8:	2501      	movs	r5, #1
 8016bba:	4628      	mov	r0, r5
 8016bbc:	b007      	add	sp, #28
 8016bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bc2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8016bc6:	2a0d      	cmp	r2, #13
 8016bc8:	d8e6      	bhi.n	8016b98 <_scanf_float+0x60>
 8016bca:	a101      	add	r1, pc, #4	; (adr r1, 8016bd0 <_scanf_float+0x98>)
 8016bcc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016bd0:	08016d0f 	.word	0x08016d0f
 8016bd4:	08016b99 	.word	0x08016b99
 8016bd8:	08016b99 	.word	0x08016b99
 8016bdc:	08016b99 	.word	0x08016b99
 8016be0:	08016d6f 	.word	0x08016d6f
 8016be4:	08016d47 	.word	0x08016d47
 8016be8:	08016b99 	.word	0x08016b99
 8016bec:	08016b99 	.word	0x08016b99
 8016bf0:	08016d1d 	.word	0x08016d1d
 8016bf4:	08016b99 	.word	0x08016b99
 8016bf8:	08016b99 	.word	0x08016b99
 8016bfc:	08016b99 	.word	0x08016b99
 8016c00:	08016b99 	.word	0x08016b99
 8016c04:	08016cd5 	.word	0x08016cd5
 8016c08:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8016c0c:	e7db      	b.n	8016bc6 <_scanf_float+0x8e>
 8016c0e:	290e      	cmp	r1, #14
 8016c10:	d8c2      	bhi.n	8016b98 <_scanf_float+0x60>
 8016c12:	a001      	add	r0, pc, #4	; (adr r0, 8016c18 <_scanf_float+0xe0>)
 8016c14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016c18:	08016cc7 	.word	0x08016cc7
 8016c1c:	08016b99 	.word	0x08016b99
 8016c20:	08016cc7 	.word	0x08016cc7
 8016c24:	08016d5b 	.word	0x08016d5b
 8016c28:	08016b99 	.word	0x08016b99
 8016c2c:	08016c75 	.word	0x08016c75
 8016c30:	08016cb1 	.word	0x08016cb1
 8016c34:	08016cb1 	.word	0x08016cb1
 8016c38:	08016cb1 	.word	0x08016cb1
 8016c3c:	08016cb1 	.word	0x08016cb1
 8016c40:	08016cb1 	.word	0x08016cb1
 8016c44:	08016cb1 	.word	0x08016cb1
 8016c48:	08016cb1 	.word	0x08016cb1
 8016c4c:	08016cb1 	.word	0x08016cb1
 8016c50:	08016cb1 	.word	0x08016cb1
 8016c54:	2b6e      	cmp	r3, #110	; 0x6e
 8016c56:	d809      	bhi.n	8016c6c <_scanf_float+0x134>
 8016c58:	2b60      	cmp	r3, #96	; 0x60
 8016c5a:	d8b2      	bhi.n	8016bc2 <_scanf_float+0x8a>
 8016c5c:	2b54      	cmp	r3, #84	; 0x54
 8016c5e:	d077      	beq.n	8016d50 <_scanf_float+0x218>
 8016c60:	2b59      	cmp	r3, #89	; 0x59
 8016c62:	d199      	bne.n	8016b98 <_scanf_float+0x60>
 8016c64:	2d07      	cmp	r5, #7
 8016c66:	d197      	bne.n	8016b98 <_scanf_float+0x60>
 8016c68:	2508      	movs	r5, #8
 8016c6a:	e029      	b.n	8016cc0 <_scanf_float+0x188>
 8016c6c:	2b74      	cmp	r3, #116	; 0x74
 8016c6e:	d06f      	beq.n	8016d50 <_scanf_float+0x218>
 8016c70:	2b79      	cmp	r3, #121	; 0x79
 8016c72:	e7f6      	b.n	8016c62 <_scanf_float+0x12a>
 8016c74:	6821      	ldr	r1, [r4, #0]
 8016c76:	05c8      	lsls	r0, r1, #23
 8016c78:	d51a      	bpl.n	8016cb0 <_scanf_float+0x178>
 8016c7a:	9b02      	ldr	r3, [sp, #8]
 8016c7c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016c80:	6021      	str	r1, [r4, #0]
 8016c82:	f109 0901 	add.w	r9, r9, #1
 8016c86:	b11b      	cbz	r3, 8016c90 <_scanf_float+0x158>
 8016c88:	3b01      	subs	r3, #1
 8016c8a:	3201      	adds	r2, #1
 8016c8c:	9302      	str	r3, [sp, #8]
 8016c8e:	60a2      	str	r2, [r4, #8]
 8016c90:	68a3      	ldr	r3, [r4, #8]
 8016c92:	3b01      	subs	r3, #1
 8016c94:	60a3      	str	r3, [r4, #8]
 8016c96:	6923      	ldr	r3, [r4, #16]
 8016c98:	3301      	adds	r3, #1
 8016c9a:	6123      	str	r3, [r4, #16]
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	3b01      	subs	r3, #1
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	607b      	str	r3, [r7, #4]
 8016ca4:	f340 8084 	ble.w	8016db0 <_scanf_float+0x278>
 8016ca8:	683b      	ldr	r3, [r7, #0]
 8016caa:	3301      	adds	r3, #1
 8016cac:	603b      	str	r3, [r7, #0]
 8016cae:	e766      	b.n	8016b7e <_scanf_float+0x46>
 8016cb0:	eb1a 0f05 	cmn.w	sl, r5
 8016cb4:	f47f af70 	bne.w	8016b98 <_scanf_float+0x60>
 8016cb8:	6822      	ldr	r2, [r4, #0]
 8016cba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8016cbe:	6022      	str	r2, [r4, #0]
 8016cc0:	f806 3b01 	strb.w	r3, [r6], #1
 8016cc4:	e7e4      	b.n	8016c90 <_scanf_float+0x158>
 8016cc6:	6822      	ldr	r2, [r4, #0]
 8016cc8:	0610      	lsls	r0, r2, #24
 8016cca:	f57f af65 	bpl.w	8016b98 <_scanf_float+0x60>
 8016cce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016cd2:	e7f4      	b.n	8016cbe <_scanf_float+0x186>
 8016cd4:	f1ba 0f00 	cmp.w	sl, #0
 8016cd8:	d10e      	bne.n	8016cf8 <_scanf_float+0x1c0>
 8016cda:	f1b9 0f00 	cmp.w	r9, #0
 8016cde:	d10e      	bne.n	8016cfe <_scanf_float+0x1c6>
 8016ce0:	6822      	ldr	r2, [r4, #0]
 8016ce2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016ce6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016cea:	d108      	bne.n	8016cfe <_scanf_float+0x1c6>
 8016cec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016cf0:	6022      	str	r2, [r4, #0]
 8016cf2:	f04f 0a01 	mov.w	sl, #1
 8016cf6:	e7e3      	b.n	8016cc0 <_scanf_float+0x188>
 8016cf8:	f1ba 0f02 	cmp.w	sl, #2
 8016cfc:	d055      	beq.n	8016daa <_scanf_float+0x272>
 8016cfe:	2d01      	cmp	r5, #1
 8016d00:	d002      	beq.n	8016d08 <_scanf_float+0x1d0>
 8016d02:	2d04      	cmp	r5, #4
 8016d04:	f47f af48 	bne.w	8016b98 <_scanf_float+0x60>
 8016d08:	3501      	adds	r5, #1
 8016d0a:	b2ed      	uxtb	r5, r5
 8016d0c:	e7d8      	b.n	8016cc0 <_scanf_float+0x188>
 8016d0e:	f1ba 0f01 	cmp.w	sl, #1
 8016d12:	f47f af41 	bne.w	8016b98 <_scanf_float+0x60>
 8016d16:	f04f 0a02 	mov.w	sl, #2
 8016d1a:	e7d1      	b.n	8016cc0 <_scanf_float+0x188>
 8016d1c:	b97d      	cbnz	r5, 8016d3e <_scanf_float+0x206>
 8016d1e:	f1b9 0f00 	cmp.w	r9, #0
 8016d22:	f47f af3c 	bne.w	8016b9e <_scanf_float+0x66>
 8016d26:	6822      	ldr	r2, [r4, #0]
 8016d28:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016d2c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016d30:	f47f af39 	bne.w	8016ba6 <_scanf_float+0x6e>
 8016d34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016d38:	6022      	str	r2, [r4, #0]
 8016d3a:	2501      	movs	r5, #1
 8016d3c:	e7c0      	b.n	8016cc0 <_scanf_float+0x188>
 8016d3e:	2d03      	cmp	r5, #3
 8016d40:	d0e2      	beq.n	8016d08 <_scanf_float+0x1d0>
 8016d42:	2d05      	cmp	r5, #5
 8016d44:	e7de      	b.n	8016d04 <_scanf_float+0x1cc>
 8016d46:	2d02      	cmp	r5, #2
 8016d48:	f47f af26 	bne.w	8016b98 <_scanf_float+0x60>
 8016d4c:	2503      	movs	r5, #3
 8016d4e:	e7b7      	b.n	8016cc0 <_scanf_float+0x188>
 8016d50:	2d06      	cmp	r5, #6
 8016d52:	f47f af21 	bne.w	8016b98 <_scanf_float+0x60>
 8016d56:	2507      	movs	r5, #7
 8016d58:	e7b2      	b.n	8016cc0 <_scanf_float+0x188>
 8016d5a:	6822      	ldr	r2, [r4, #0]
 8016d5c:	0591      	lsls	r1, r2, #22
 8016d5e:	f57f af1b 	bpl.w	8016b98 <_scanf_float+0x60>
 8016d62:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016d66:	6022      	str	r2, [r4, #0]
 8016d68:	f8cd 9004 	str.w	r9, [sp, #4]
 8016d6c:	e7a8      	b.n	8016cc0 <_scanf_float+0x188>
 8016d6e:	6822      	ldr	r2, [r4, #0]
 8016d70:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016d74:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016d78:	d006      	beq.n	8016d88 <_scanf_float+0x250>
 8016d7a:	0550      	lsls	r0, r2, #21
 8016d7c:	f57f af0c 	bpl.w	8016b98 <_scanf_float+0x60>
 8016d80:	f1b9 0f00 	cmp.w	r9, #0
 8016d84:	f43f af0f 	beq.w	8016ba6 <_scanf_float+0x6e>
 8016d88:	0591      	lsls	r1, r2, #22
 8016d8a:	bf58      	it	pl
 8016d8c:	9901      	ldrpl	r1, [sp, #4]
 8016d8e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016d92:	bf58      	it	pl
 8016d94:	eba9 0101 	subpl.w	r1, r9, r1
 8016d98:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8016d9c:	bf58      	it	pl
 8016d9e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016da2:	6022      	str	r2, [r4, #0]
 8016da4:	f04f 0900 	mov.w	r9, #0
 8016da8:	e78a      	b.n	8016cc0 <_scanf_float+0x188>
 8016daa:	f04f 0a03 	mov.w	sl, #3
 8016dae:	e787      	b.n	8016cc0 <_scanf_float+0x188>
 8016db0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016db4:	4639      	mov	r1, r7
 8016db6:	4640      	mov	r0, r8
 8016db8:	4798      	blx	r3
 8016dba:	2800      	cmp	r0, #0
 8016dbc:	f43f aedf 	beq.w	8016b7e <_scanf_float+0x46>
 8016dc0:	e6ea      	b.n	8016b98 <_scanf_float+0x60>
 8016dc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016dc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016dca:	463a      	mov	r2, r7
 8016dcc:	4640      	mov	r0, r8
 8016dce:	4798      	blx	r3
 8016dd0:	6923      	ldr	r3, [r4, #16]
 8016dd2:	3b01      	subs	r3, #1
 8016dd4:	6123      	str	r3, [r4, #16]
 8016dd6:	e6ec      	b.n	8016bb2 <_scanf_float+0x7a>
 8016dd8:	1e6b      	subs	r3, r5, #1
 8016dda:	2b06      	cmp	r3, #6
 8016ddc:	d825      	bhi.n	8016e2a <_scanf_float+0x2f2>
 8016dde:	2d02      	cmp	r5, #2
 8016de0:	d836      	bhi.n	8016e50 <_scanf_float+0x318>
 8016de2:	455e      	cmp	r6, fp
 8016de4:	f67f aee8 	bls.w	8016bb8 <_scanf_float+0x80>
 8016de8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016dec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016df0:	463a      	mov	r2, r7
 8016df2:	4640      	mov	r0, r8
 8016df4:	4798      	blx	r3
 8016df6:	6923      	ldr	r3, [r4, #16]
 8016df8:	3b01      	subs	r3, #1
 8016dfa:	6123      	str	r3, [r4, #16]
 8016dfc:	e7f1      	b.n	8016de2 <_scanf_float+0x2aa>
 8016dfe:	9802      	ldr	r0, [sp, #8]
 8016e00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016e04:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016e08:	9002      	str	r0, [sp, #8]
 8016e0a:	463a      	mov	r2, r7
 8016e0c:	4640      	mov	r0, r8
 8016e0e:	4798      	blx	r3
 8016e10:	6923      	ldr	r3, [r4, #16]
 8016e12:	3b01      	subs	r3, #1
 8016e14:	6123      	str	r3, [r4, #16]
 8016e16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016e1a:	fa5f fa8a 	uxtb.w	sl, sl
 8016e1e:	f1ba 0f02 	cmp.w	sl, #2
 8016e22:	d1ec      	bne.n	8016dfe <_scanf_float+0x2c6>
 8016e24:	3d03      	subs	r5, #3
 8016e26:	b2ed      	uxtb	r5, r5
 8016e28:	1b76      	subs	r6, r6, r5
 8016e2a:	6823      	ldr	r3, [r4, #0]
 8016e2c:	05da      	lsls	r2, r3, #23
 8016e2e:	d52f      	bpl.n	8016e90 <_scanf_float+0x358>
 8016e30:	055b      	lsls	r3, r3, #21
 8016e32:	d510      	bpl.n	8016e56 <_scanf_float+0x31e>
 8016e34:	455e      	cmp	r6, fp
 8016e36:	f67f aebf 	bls.w	8016bb8 <_scanf_float+0x80>
 8016e3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016e3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016e42:	463a      	mov	r2, r7
 8016e44:	4640      	mov	r0, r8
 8016e46:	4798      	blx	r3
 8016e48:	6923      	ldr	r3, [r4, #16]
 8016e4a:	3b01      	subs	r3, #1
 8016e4c:	6123      	str	r3, [r4, #16]
 8016e4e:	e7f1      	b.n	8016e34 <_scanf_float+0x2fc>
 8016e50:	46aa      	mov	sl, r5
 8016e52:	9602      	str	r6, [sp, #8]
 8016e54:	e7df      	b.n	8016e16 <_scanf_float+0x2de>
 8016e56:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016e5a:	6923      	ldr	r3, [r4, #16]
 8016e5c:	2965      	cmp	r1, #101	; 0x65
 8016e5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8016e62:	f106 35ff 	add.w	r5, r6, #4294967295
 8016e66:	6123      	str	r3, [r4, #16]
 8016e68:	d00c      	beq.n	8016e84 <_scanf_float+0x34c>
 8016e6a:	2945      	cmp	r1, #69	; 0x45
 8016e6c:	d00a      	beq.n	8016e84 <_scanf_float+0x34c>
 8016e6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016e72:	463a      	mov	r2, r7
 8016e74:	4640      	mov	r0, r8
 8016e76:	4798      	blx	r3
 8016e78:	6923      	ldr	r3, [r4, #16]
 8016e7a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016e7e:	3b01      	subs	r3, #1
 8016e80:	1eb5      	subs	r5, r6, #2
 8016e82:	6123      	str	r3, [r4, #16]
 8016e84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016e88:	463a      	mov	r2, r7
 8016e8a:	4640      	mov	r0, r8
 8016e8c:	4798      	blx	r3
 8016e8e:	462e      	mov	r6, r5
 8016e90:	6825      	ldr	r5, [r4, #0]
 8016e92:	f015 0510 	ands.w	r5, r5, #16
 8016e96:	d158      	bne.n	8016f4a <_scanf_float+0x412>
 8016e98:	7035      	strb	r5, [r6, #0]
 8016e9a:	6823      	ldr	r3, [r4, #0]
 8016e9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016ea4:	d11c      	bne.n	8016ee0 <_scanf_float+0x3a8>
 8016ea6:	9b01      	ldr	r3, [sp, #4]
 8016ea8:	454b      	cmp	r3, r9
 8016eaa:	eba3 0209 	sub.w	r2, r3, r9
 8016eae:	d124      	bne.n	8016efa <_scanf_float+0x3c2>
 8016eb0:	2200      	movs	r2, #0
 8016eb2:	4659      	mov	r1, fp
 8016eb4:	4640      	mov	r0, r8
 8016eb6:	f000 fee1 	bl	8017c7c <_strtod_r>
 8016eba:	9b03      	ldr	r3, [sp, #12]
 8016ebc:	6821      	ldr	r1, [r4, #0]
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	f011 0f02 	tst.w	r1, #2
 8016ec4:	ec57 6b10 	vmov	r6, r7, d0
 8016ec8:	f103 0204 	add.w	r2, r3, #4
 8016ecc:	d020      	beq.n	8016f10 <_scanf_float+0x3d8>
 8016ece:	9903      	ldr	r1, [sp, #12]
 8016ed0:	600a      	str	r2, [r1, #0]
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	e9c3 6700 	strd	r6, r7, [r3]
 8016ed8:	68e3      	ldr	r3, [r4, #12]
 8016eda:	3301      	adds	r3, #1
 8016edc:	60e3      	str	r3, [r4, #12]
 8016ede:	e66c      	b.n	8016bba <_scanf_float+0x82>
 8016ee0:	9b04      	ldr	r3, [sp, #16]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d0e4      	beq.n	8016eb0 <_scanf_float+0x378>
 8016ee6:	9905      	ldr	r1, [sp, #20]
 8016ee8:	230a      	movs	r3, #10
 8016eea:	462a      	mov	r2, r5
 8016eec:	3101      	adds	r1, #1
 8016eee:	4640      	mov	r0, r8
 8016ef0:	f000 ff4e 	bl	8017d90 <_strtol_r>
 8016ef4:	9b04      	ldr	r3, [sp, #16]
 8016ef6:	9e05      	ldr	r6, [sp, #20]
 8016ef8:	1ac2      	subs	r2, r0, r3
 8016efa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016efe:	429e      	cmp	r6, r3
 8016f00:	bf28      	it	cs
 8016f02:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016f06:	4912      	ldr	r1, [pc, #72]	; (8016f50 <_scanf_float+0x418>)
 8016f08:	4630      	mov	r0, r6
 8016f0a:	f000 f86f 	bl	8016fec <siprintf>
 8016f0e:	e7cf      	b.n	8016eb0 <_scanf_float+0x378>
 8016f10:	f011 0f04 	tst.w	r1, #4
 8016f14:	9903      	ldr	r1, [sp, #12]
 8016f16:	600a      	str	r2, [r1, #0]
 8016f18:	d1db      	bne.n	8016ed2 <_scanf_float+0x39a>
 8016f1a:	f8d3 8000 	ldr.w	r8, [r3]
 8016f1e:	ee10 2a10 	vmov	r2, s0
 8016f22:	ee10 0a10 	vmov	r0, s0
 8016f26:	463b      	mov	r3, r7
 8016f28:	4639      	mov	r1, r7
 8016f2a:	f7e9 fdff 	bl	8000b2c <__aeabi_dcmpun>
 8016f2e:	b128      	cbz	r0, 8016f3c <_scanf_float+0x404>
 8016f30:	4808      	ldr	r0, [pc, #32]	; (8016f54 <_scanf_float+0x41c>)
 8016f32:	f000 f821 	bl	8016f78 <nanf>
 8016f36:	ed88 0a00 	vstr	s0, [r8]
 8016f3a:	e7cd      	b.n	8016ed8 <_scanf_float+0x3a0>
 8016f3c:	4630      	mov	r0, r6
 8016f3e:	4639      	mov	r1, r7
 8016f40:	f7e9 fe52 	bl	8000be8 <__aeabi_d2f>
 8016f44:	f8c8 0000 	str.w	r0, [r8]
 8016f48:	e7c6      	b.n	8016ed8 <_scanf_float+0x3a0>
 8016f4a:	2500      	movs	r5, #0
 8016f4c:	e635      	b.n	8016bba <_scanf_float+0x82>
 8016f4e:	bf00      	nop
 8016f50:	0801c670 	.word	0x0801c670
 8016f54:	0801ca88 	.word	0x0801ca88

08016f58 <_sbrk_r>:
 8016f58:	b538      	push	{r3, r4, r5, lr}
 8016f5a:	4d06      	ldr	r5, [pc, #24]	; (8016f74 <_sbrk_r+0x1c>)
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	4604      	mov	r4, r0
 8016f60:	4608      	mov	r0, r1
 8016f62:	602b      	str	r3, [r5, #0]
 8016f64:	f7f4 fa00 	bl	800b368 <_sbrk>
 8016f68:	1c43      	adds	r3, r0, #1
 8016f6a:	d102      	bne.n	8016f72 <_sbrk_r+0x1a>
 8016f6c:	682b      	ldr	r3, [r5, #0]
 8016f6e:	b103      	cbz	r3, 8016f72 <_sbrk_r+0x1a>
 8016f70:	6023      	str	r3, [r4, #0]
 8016f72:	bd38      	pop	{r3, r4, r5, pc}
 8016f74:	2000c974 	.word	0x2000c974

08016f78 <nanf>:
 8016f78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016f80 <nanf+0x8>
 8016f7c:	4770      	bx	lr
 8016f7e:	bf00      	nop
 8016f80:	7fc00000 	.word	0x7fc00000

08016f84 <sniprintf>:
 8016f84:	b40c      	push	{r2, r3}
 8016f86:	b530      	push	{r4, r5, lr}
 8016f88:	4b17      	ldr	r3, [pc, #92]	; (8016fe8 <sniprintf+0x64>)
 8016f8a:	1e0c      	subs	r4, r1, #0
 8016f8c:	681d      	ldr	r5, [r3, #0]
 8016f8e:	b09d      	sub	sp, #116	; 0x74
 8016f90:	da08      	bge.n	8016fa4 <sniprintf+0x20>
 8016f92:	238b      	movs	r3, #139	; 0x8b
 8016f94:	602b      	str	r3, [r5, #0]
 8016f96:	f04f 30ff 	mov.w	r0, #4294967295
 8016f9a:	b01d      	add	sp, #116	; 0x74
 8016f9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016fa0:	b002      	add	sp, #8
 8016fa2:	4770      	bx	lr
 8016fa4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016fa8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016fac:	bf14      	ite	ne
 8016fae:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016fb2:	4623      	moveq	r3, r4
 8016fb4:	9304      	str	r3, [sp, #16]
 8016fb6:	9307      	str	r3, [sp, #28]
 8016fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016fbc:	9002      	str	r0, [sp, #8]
 8016fbe:	9006      	str	r0, [sp, #24]
 8016fc0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016fc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016fc6:	ab21      	add	r3, sp, #132	; 0x84
 8016fc8:	a902      	add	r1, sp, #8
 8016fca:	4628      	mov	r0, r5
 8016fcc:	9301      	str	r3, [sp, #4]
 8016fce:	f002 fe13 	bl	8019bf8 <_svfiprintf_r>
 8016fd2:	1c43      	adds	r3, r0, #1
 8016fd4:	bfbc      	itt	lt
 8016fd6:	238b      	movlt	r3, #139	; 0x8b
 8016fd8:	602b      	strlt	r3, [r5, #0]
 8016fda:	2c00      	cmp	r4, #0
 8016fdc:	d0dd      	beq.n	8016f9a <sniprintf+0x16>
 8016fde:	9b02      	ldr	r3, [sp, #8]
 8016fe0:	2200      	movs	r2, #0
 8016fe2:	701a      	strb	r2, [r3, #0]
 8016fe4:	e7d9      	b.n	8016f9a <sniprintf+0x16>
 8016fe6:	bf00      	nop
 8016fe8:	200009ac 	.word	0x200009ac

08016fec <siprintf>:
 8016fec:	b40e      	push	{r1, r2, r3}
 8016fee:	b500      	push	{lr}
 8016ff0:	b09c      	sub	sp, #112	; 0x70
 8016ff2:	ab1d      	add	r3, sp, #116	; 0x74
 8016ff4:	9002      	str	r0, [sp, #8]
 8016ff6:	9006      	str	r0, [sp, #24]
 8016ff8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016ffc:	4809      	ldr	r0, [pc, #36]	; (8017024 <siprintf+0x38>)
 8016ffe:	9107      	str	r1, [sp, #28]
 8017000:	9104      	str	r1, [sp, #16]
 8017002:	4909      	ldr	r1, [pc, #36]	; (8017028 <siprintf+0x3c>)
 8017004:	f853 2b04 	ldr.w	r2, [r3], #4
 8017008:	9105      	str	r1, [sp, #20]
 801700a:	6800      	ldr	r0, [r0, #0]
 801700c:	9301      	str	r3, [sp, #4]
 801700e:	a902      	add	r1, sp, #8
 8017010:	f002 fdf2 	bl	8019bf8 <_svfiprintf_r>
 8017014:	9b02      	ldr	r3, [sp, #8]
 8017016:	2200      	movs	r2, #0
 8017018:	701a      	strb	r2, [r3, #0]
 801701a:	b01c      	add	sp, #112	; 0x70
 801701c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017020:	b003      	add	sp, #12
 8017022:	4770      	bx	lr
 8017024:	200009ac 	.word	0x200009ac
 8017028:	ffff0208 	.word	0xffff0208

0801702c <sulp>:
 801702c:	b570      	push	{r4, r5, r6, lr}
 801702e:	4604      	mov	r4, r0
 8017030:	460d      	mov	r5, r1
 8017032:	ec45 4b10 	vmov	d0, r4, r5
 8017036:	4616      	mov	r6, r2
 8017038:	f002 fc24 	bl	8019884 <__ulp>
 801703c:	ec51 0b10 	vmov	r0, r1, d0
 8017040:	b17e      	cbz	r6, 8017062 <sulp+0x36>
 8017042:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017046:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801704a:	2b00      	cmp	r3, #0
 801704c:	dd09      	ble.n	8017062 <sulp+0x36>
 801704e:	051b      	lsls	r3, r3, #20
 8017050:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8017054:	2400      	movs	r4, #0
 8017056:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801705a:	4622      	mov	r2, r4
 801705c:	462b      	mov	r3, r5
 801705e:	f7e9 facb 	bl	80005f8 <__aeabi_dmul>
 8017062:	bd70      	pop	{r4, r5, r6, pc}
 8017064:	0000      	movs	r0, r0
	...

08017068 <_strtod_l>:
 8017068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801706c:	b0a3      	sub	sp, #140	; 0x8c
 801706e:	461f      	mov	r7, r3
 8017070:	2300      	movs	r3, #0
 8017072:	931e      	str	r3, [sp, #120]	; 0x78
 8017074:	4ba4      	ldr	r3, [pc, #656]	; (8017308 <_strtod_l+0x2a0>)
 8017076:	9219      	str	r2, [sp, #100]	; 0x64
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	9307      	str	r3, [sp, #28]
 801707c:	4604      	mov	r4, r0
 801707e:	4618      	mov	r0, r3
 8017080:	4688      	mov	r8, r1
 8017082:	f7e9 f8a5 	bl	80001d0 <strlen>
 8017086:	f04f 0a00 	mov.w	sl, #0
 801708a:	4605      	mov	r5, r0
 801708c:	f04f 0b00 	mov.w	fp, #0
 8017090:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8017094:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017096:	781a      	ldrb	r2, [r3, #0]
 8017098:	2a2b      	cmp	r2, #43	; 0x2b
 801709a:	d04c      	beq.n	8017136 <_strtod_l+0xce>
 801709c:	d839      	bhi.n	8017112 <_strtod_l+0xaa>
 801709e:	2a0d      	cmp	r2, #13
 80170a0:	d832      	bhi.n	8017108 <_strtod_l+0xa0>
 80170a2:	2a08      	cmp	r2, #8
 80170a4:	d832      	bhi.n	801710c <_strtod_l+0xa4>
 80170a6:	2a00      	cmp	r2, #0
 80170a8:	d03c      	beq.n	8017124 <_strtod_l+0xbc>
 80170aa:	2300      	movs	r3, #0
 80170ac:	930e      	str	r3, [sp, #56]	; 0x38
 80170ae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80170b0:	7833      	ldrb	r3, [r6, #0]
 80170b2:	2b30      	cmp	r3, #48	; 0x30
 80170b4:	f040 80b4 	bne.w	8017220 <_strtod_l+0x1b8>
 80170b8:	7873      	ldrb	r3, [r6, #1]
 80170ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80170be:	2b58      	cmp	r3, #88	; 0x58
 80170c0:	d16c      	bne.n	801719c <_strtod_l+0x134>
 80170c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80170c4:	9301      	str	r3, [sp, #4]
 80170c6:	ab1e      	add	r3, sp, #120	; 0x78
 80170c8:	9702      	str	r7, [sp, #8]
 80170ca:	9300      	str	r3, [sp, #0]
 80170cc:	4a8f      	ldr	r2, [pc, #572]	; (801730c <_strtod_l+0x2a4>)
 80170ce:	ab1f      	add	r3, sp, #124	; 0x7c
 80170d0:	a91d      	add	r1, sp, #116	; 0x74
 80170d2:	4620      	mov	r0, r4
 80170d4:	f001 fd40 	bl	8018b58 <__gethex>
 80170d8:	f010 0707 	ands.w	r7, r0, #7
 80170dc:	4605      	mov	r5, r0
 80170de:	d005      	beq.n	80170ec <_strtod_l+0x84>
 80170e0:	2f06      	cmp	r7, #6
 80170e2:	d12a      	bne.n	801713a <_strtod_l+0xd2>
 80170e4:	3601      	adds	r6, #1
 80170e6:	2300      	movs	r3, #0
 80170e8:	961d      	str	r6, [sp, #116]	; 0x74
 80170ea:	930e      	str	r3, [sp, #56]	; 0x38
 80170ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	f040 8596 	bne.w	8017c20 <_strtod_l+0xbb8>
 80170f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80170f6:	b1db      	cbz	r3, 8017130 <_strtod_l+0xc8>
 80170f8:	4652      	mov	r2, sl
 80170fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80170fe:	ec43 2b10 	vmov	d0, r2, r3
 8017102:	b023      	add	sp, #140	; 0x8c
 8017104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017108:	2a20      	cmp	r2, #32
 801710a:	d1ce      	bne.n	80170aa <_strtod_l+0x42>
 801710c:	3301      	adds	r3, #1
 801710e:	931d      	str	r3, [sp, #116]	; 0x74
 8017110:	e7c0      	b.n	8017094 <_strtod_l+0x2c>
 8017112:	2a2d      	cmp	r2, #45	; 0x2d
 8017114:	d1c9      	bne.n	80170aa <_strtod_l+0x42>
 8017116:	2201      	movs	r2, #1
 8017118:	920e      	str	r2, [sp, #56]	; 0x38
 801711a:	1c5a      	adds	r2, r3, #1
 801711c:	921d      	str	r2, [sp, #116]	; 0x74
 801711e:	785b      	ldrb	r3, [r3, #1]
 8017120:	2b00      	cmp	r3, #0
 8017122:	d1c4      	bne.n	80170ae <_strtod_l+0x46>
 8017124:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017126:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801712a:	2b00      	cmp	r3, #0
 801712c:	f040 8576 	bne.w	8017c1c <_strtod_l+0xbb4>
 8017130:	4652      	mov	r2, sl
 8017132:	465b      	mov	r3, fp
 8017134:	e7e3      	b.n	80170fe <_strtod_l+0x96>
 8017136:	2200      	movs	r2, #0
 8017138:	e7ee      	b.n	8017118 <_strtod_l+0xb0>
 801713a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801713c:	b13a      	cbz	r2, 801714e <_strtod_l+0xe6>
 801713e:	2135      	movs	r1, #53	; 0x35
 8017140:	a820      	add	r0, sp, #128	; 0x80
 8017142:	f002 fcaa 	bl	8019a9a <__copybits>
 8017146:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017148:	4620      	mov	r0, r4
 801714a:	f002 f86f 	bl	801922c <_Bfree>
 801714e:	3f01      	subs	r7, #1
 8017150:	2f05      	cmp	r7, #5
 8017152:	d807      	bhi.n	8017164 <_strtod_l+0xfc>
 8017154:	e8df f007 	tbb	[pc, r7]
 8017158:	1d180b0e 	.word	0x1d180b0e
 801715c:	030e      	.short	0x030e
 801715e:	f04f 0b00 	mov.w	fp, #0
 8017162:	46da      	mov	sl, fp
 8017164:	0728      	lsls	r0, r5, #28
 8017166:	d5c1      	bpl.n	80170ec <_strtod_l+0x84>
 8017168:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801716c:	e7be      	b.n	80170ec <_strtod_l+0x84>
 801716e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8017172:	e7f7      	b.n	8017164 <_strtod_l+0xfc>
 8017174:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8017178:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801717a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801717e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017182:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8017186:	e7ed      	b.n	8017164 <_strtod_l+0xfc>
 8017188:	f8df b184 	ldr.w	fp, [pc, #388]	; 8017310 <_strtod_l+0x2a8>
 801718c:	f04f 0a00 	mov.w	sl, #0
 8017190:	e7e8      	b.n	8017164 <_strtod_l+0xfc>
 8017192:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8017196:	f04f 3aff 	mov.w	sl, #4294967295
 801719a:	e7e3      	b.n	8017164 <_strtod_l+0xfc>
 801719c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801719e:	1c5a      	adds	r2, r3, #1
 80171a0:	921d      	str	r2, [sp, #116]	; 0x74
 80171a2:	785b      	ldrb	r3, [r3, #1]
 80171a4:	2b30      	cmp	r3, #48	; 0x30
 80171a6:	d0f9      	beq.n	801719c <_strtod_l+0x134>
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d09f      	beq.n	80170ec <_strtod_l+0x84>
 80171ac:	2301      	movs	r3, #1
 80171ae:	f04f 0900 	mov.w	r9, #0
 80171b2:	9304      	str	r3, [sp, #16]
 80171b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80171b6:	930a      	str	r3, [sp, #40]	; 0x28
 80171b8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80171bc:	464f      	mov	r7, r9
 80171be:	220a      	movs	r2, #10
 80171c0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80171c2:	7806      	ldrb	r6, [r0, #0]
 80171c4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80171c8:	b2d9      	uxtb	r1, r3
 80171ca:	2909      	cmp	r1, #9
 80171cc:	d92a      	bls.n	8017224 <_strtod_l+0x1bc>
 80171ce:	9907      	ldr	r1, [sp, #28]
 80171d0:	462a      	mov	r2, r5
 80171d2:	f002 fe19 	bl	8019e08 <strncmp>
 80171d6:	b398      	cbz	r0, 8017240 <_strtod_l+0x1d8>
 80171d8:	2000      	movs	r0, #0
 80171da:	4633      	mov	r3, r6
 80171dc:	463d      	mov	r5, r7
 80171de:	9007      	str	r0, [sp, #28]
 80171e0:	4602      	mov	r2, r0
 80171e2:	2b65      	cmp	r3, #101	; 0x65
 80171e4:	d001      	beq.n	80171ea <_strtod_l+0x182>
 80171e6:	2b45      	cmp	r3, #69	; 0x45
 80171e8:	d118      	bne.n	801721c <_strtod_l+0x1b4>
 80171ea:	b91d      	cbnz	r5, 80171f4 <_strtod_l+0x18c>
 80171ec:	9b04      	ldr	r3, [sp, #16]
 80171ee:	4303      	orrs	r3, r0
 80171f0:	d098      	beq.n	8017124 <_strtod_l+0xbc>
 80171f2:	2500      	movs	r5, #0
 80171f4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80171f8:	f108 0301 	add.w	r3, r8, #1
 80171fc:	931d      	str	r3, [sp, #116]	; 0x74
 80171fe:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017202:	2b2b      	cmp	r3, #43	; 0x2b
 8017204:	d075      	beq.n	80172f2 <_strtod_l+0x28a>
 8017206:	2b2d      	cmp	r3, #45	; 0x2d
 8017208:	d07b      	beq.n	8017302 <_strtod_l+0x29a>
 801720a:	f04f 0c00 	mov.w	ip, #0
 801720e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8017212:	2909      	cmp	r1, #9
 8017214:	f240 8082 	bls.w	801731c <_strtod_l+0x2b4>
 8017218:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801721c:	2600      	movs	r6, #0
 801721e:	e09d      	b.n	801735c <_strtod_l+0x2f4>
 8017220:	2300      	movs	r3, #0
 8017222:	e7c4      	b.n	80171ae <_strtod_l+0x146>
 8017224:	2f08      	cmp	r7, #8
 8017226:	bfd8      	it	le
 8017228:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801722a:	f100 0001 	add.w	r0, r0, #1
 801722e:	bfda      	itte	le
 8017230:	fb02 3301 	mlale	r3, r2, r1, r3
 8017234:	9309      	strle	r3, [sp, #36]	; 0x24
 8017236:	fb02 3909 	mlagt	r9, r2, r9, r3
 801723a:	3701      	adds	r7, #1
 801723c:	901d      	str	r0, [sp, #116]	; 0x74
 801723e:	e7bf      	b.n	80171c0 <_strtod_l+0x158>
 8017240:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017242:	195a      	adds	r2, r3, r5
 8017244:	921d      	str	r2, [sp, #116]	; 0x74
 8017246:	5d5b      	ldrb	r3, [r3, r5]
 8017248:	2f00      	cmp	r7, #0
 801724a:	d037      	beq.n	80172bc <_strtod_l+0x254>
 801724c:	9007      	str	r0, [sp, #28]
 801724e:	463d      	mov	r5, r7
 8017250:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8017254:	2a09      	cmp	r2, #9
 8017256:	d912      	bls.n	801727e <_strtod_l+0x216>
 8017258:	2201      	movs	r2, #1
 801725a:	e7c2      	b.n	80171e2 <_strtod_l+0x17a>
 801725c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801725e:	1c5a      	adds	r2, r3, #1
 8017260:	921d      	str	r2, [sp, #116]	; 0x74
 8017262:	785b      	ldrb	r3, [r3, #1]
 8017264:	3001      	adds	r0, #1
 8017266:	2b30      	cmp	r3, #48	; 0x30
 8017268:	d0f8      	beq.n	801725c <_strtod_l+0x1f4>
 801726a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801726e:	2a08      	cmp	r2, #8
 8017270:	f200 84db 	bhi.w	8017c2a <_strtod_l+0xbc2>
 8017274:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017276:	9007      	str	r0, [sp, #28]
 8017278:	2000      	movs	r0, #0
 801727a:	920a      	str	r2, [sp, #40]	; 0x28
 801727c:	4605      	mov	r5, r0
 801727e:	3b30      	subs	r3, #48	; 0x30
 8017280:	f100 0201 	add.w	r2, r0, #1
 8017284:	d014      	beq.n	80172b0 <_strtod_l+0x248>
 8017286:	9907      	ldr	r1, [sp, #28]
 8017288:	4411      	add	r1, r2
 801728a:	9107      	str	r1, [sp, #28]
 801728c:	462a      	mov	r2, r5
 801728e:	eb00 0e05 	add.w	lr, r0, r5
 8017292:	210a      	movs	r1, #10
 8017294:	4572      	cmp	r2, lr
 8017296:	d113      	bne.n	80172c0 <_strtod_l+0x258>
 8017298:	182a      	adds	r2, r5, r0
 801729a:	2a08      	cmp	r2, #8
 801729c:	f105 0501 	add.w	r5, r5, #1
 80172a0:	4405      	add	r5, r0
 80172a2:	dc1c      	bgt.n	80172de <_strtod_l+0x276>
 80172a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80172a6:	220a      	movs	r2, #10
 80172a8:	fb02 3301 	mla	r3, r2, r1, r3
 80172ac:	9309      	str	r3, [sp, #36]	; 0x24
 80172ae:	2200      	movs	r2, #0
 80172b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80172b2:	1c59      	adds	r1, r3, #1
 80172b4:	911d      	str	r1, [sp, #116]	; 0x74
 80172b6:	785b      	ldrb	r3, [r3, #1]
 80172b8:	4610      	mov	r0, r2
 80172ba:	e7c9      	b.n	8017250 <_strtod_l+0x1e8>
 80172bc:	4638      	mov	r0, r7
 80172be:	e7d2      	b.n	8017266 <_strtod_l+0x1fe>
 80172c0:	2a08      	cmp	r2, #8
 80172c2:	dc04      	bgt.n	80172ce <_strtod_l+0x266>
 80172c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80172c6:	434e      	muls	r6, r1
 80172c8:	9609      	str	r6, [sp, #36]	; 0x24
 80172ca:	3201      	adds	r2, #1
 80172cc:	e7e2      	b.n	8017294 <_strtod_l+0x22c>
 80172ce:	f102 0c01 	add.w	ip, r2, #1
 80172d2:	f1bc 0f10 	cmp.w	ip, #16
 80172d6:	bfd8      	it	le
 80172d8:	fb01 f909 	mulle.w	r9, r1, r9
 80172dc:	e7f5      	b.n	80172ca <_strtod_l+0x262>
 80172de:	2d10      	cmp	r5, #16
 80172e0:	bfdc      	itt	le
 80172e2:	220a      	movle	r2, #10
 80172e4:	fb02 3909 	mlale	r9, r2, r9, r3
 80172e8:	e7e1      	b.n	80172ae <_strtod_l+0x246>
 80172ea:	2300      	movs	r3, #0
 80172ec:	9307      	str	r3, [sp, #28]
 80172ee:	2201      	movs	r2, #1
 80172f0:	e77c      	b.n	80171ec <_strtod_l+0x184>
 80172f2:	f04f 0c00 	mov.w	ip, #0
 80172f6:	f108 0302 	add.w	r3, r8, #2
 80172fa:	931d      	str	r3, [sp, #116]	; 0x74
 80172fc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8017300:	e785      	b.n	801720e <_strtod_l+0x1a6>
 8017302:	f04f 0c01 	mov.w	ip, #1
 8017306:	e7f6      	b.n	80172f6 <_strtod_l+0x28e>
 8017308:	0801c8c8 	.word	0x0801c8c8
 801730c:	0801c678 	.word	0x0801c678
 8017310:	7ff00000 	.word	0x7ff00000
 8017314:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017316:	1c59      	adds	r1, r3, #1
 8017318:	911d      	str	r1, [sp, #116]	; 0x74
 801731a:	785b      	ldrb	r3, [r3, #1]
 801731c:	2b30      	cmp	r3, #48	; 0x30
 801731e:	d0f9      	beq.n	8017314 <_strtod_l+0x2ac>
 8017320:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8017324:	2908      	cmp	r1, #8
 8017326:	f63f af79 	bhi.w	801721c <_strtod_l+0x1b4>
 801732a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801732e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017330:	9308      	str	r3, [sp, #32]
 8017332:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017334:	1c59      	adds	r1, r3, #1
 8017336:	911d      	str	r1, [sp, #116]	; 0x74
 8017338:	785b      	ldrb	r3, [r3, #1]
 801733a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801733e:	2e09      	cmp	r6, #9
 8017340:	d937      	bls.n	80173b2 <_strtod_l+0x34a>
 8017342:	9e08      	ldr	r6, [sp, #32]
 8017344:	1b89      	subs	r1, r1, r6
 8017346:	2908      	cmp	r1, #8
 8017348:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801734c:	dc02      	bgt.n	8017354 <_strtod_l+0x2ec>
 801734e:	4576      	cmp	r6, lr
 8017350:	bfa8      	it	ge
 8017352:	4676      	movge	r6, lr
 8017354:	f1bc 0f00 	cmp.w	ip, #0
 8017358:	d000      	beq.n	801735c <_strtod_l+0x2f4>
 801735a:	4276      	negs	r6, r6
 801735c:	2d00      	cmp	r5, #0
 801735e:	d14f      	bne.n	8017400 <_strtod_l+0x398>
 8017360:	9904      	ldr	r1, [sp, #16]
 8017362:	4301      	orrs	r1, r0
 8017364:	f47f aec2 	bne.w	80170ec <_strtod_l+0x84>
 8017368:	2a00      	cmp	r2, #0
 801736a:	f47f aedb 	bne.w	8017124 <_strtod_l+0xbc>
 801736e:	2b69      	cmp	r3, #105	; 0x69
 8017370:	d027      	beq.n	80173c2 <_strtod_l+0x35a>
 8017372:	dc24      	bgt.n	80173be <_strtod_l+0x356>
 8017374:	2b49      	cmp	r3, #73	; 0x49
 8017376:	d024      	beq.n	80173c2 <_strtod_l+0x35a>
 8017378:	2b4e      	cmp	r3, #78	; 0x4e
 801737a:	f47f aed3 	bne.w	8017124 <_strtod_l+0xbc>
 801737e:	499e      	ldr	r1, [pc, #632]	; (80175f8 <_strtod_l+0x590>)
 8017380:	a81d      	add	r0, sp, #116	; 0x74
 8017382:	f001 fe41 	bl	8019008 <__match>
 8017386:	2800      	cmp	r0, #0
 8017388:	f43f aecc 	beq.w	8017124 <_strtod_l+0xbc>
 801738c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801738e:	781b      	ldrb	r3, [r3, #0]
 8017390:	2b28      	cmp	r3, #40	; 0x28
 8017392:	d12d      	bne.n	80173f0 <_strtod_l+0x388>
 8017394:	4999      	ldr	r1, [pc, #612]	; (80175fc <_strtod_l+0x594>)
 8017396:	aa20      	add	r2, sp, #128	; 0x80
 8017398:	a81d      	add	r0, sp, #116	; 0x74
 801739a:	f001 fe49 	bl	8019030 <__hexnan>
 801739e:	2805      	cmp	r0, #5
 80173a0:	d126      	bne.n	80173f0 <_strtod_l+0x388>
 80173a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80173a4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80173a8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80173ac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80173b0:	e69c      	b.n	80170ec <_strtod_l+0x84>
 80173b2:	210a      	movs	r1, #10
 80173b4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80173b8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80173bc:	e7b9      	b.n	8017332 <_strtod_l+0x2ca>
 80173be:	2b6e      	cmp	r3, #110	; 0x6e
 80173c0:	e7db      	b.n	801737a <_strtod_l+0x312>
 80173c2:	498f      	ldr	r1, [pc, #572]	; (8017600 <_strtod_l+0x598>)
 80173c4:	a81d      	add	r0, sp, #116	; 0x74
 80173c6:	f001 fe1f 	bl	8019008 <__match>
 80173ca:	2800      	cmp	r0, #0
 80173cc:	f43f aeaa 	beq.w	8017124 <_strtod_l+0xbc>
 80173d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80173d2:	498c      	ldr	r1, [pc, #560]	; (8017604 <_strtod_l+0x59c>)
 80173d4:	3b01      	subs	r3, #1
 80173d6:	a81d      	add	r0, sp, #116	; 0x74
 80173d8:	931d      	str	r3, [sp, #116]	; 0x74
 80173da:	f001 fe15 	bl	8019008 <__match>
 80173de:	b910      	cbnz	r0, 80173e6 <_strtod_l+0x37e>
 80173e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80173e2:	3301      	adds	r3, #1
 80173e4:	931d      	str	r3, [sp, #116]	; 0x74
 80173e6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8017614 <_strtod_l+0x5ac>
 80173ea:	f04f 0a00 	mov.w	sl, #0
 80173ee:	e67d      	b.n	80170ec <_strtod_l+0x84>
 80173f0:	4885      	ldr	r0, [pc, #532]	; (8017608 <_strtod_l+0x5a0>)
 80173f2:	f002 fd01 	bl	8019df8 <nan>
 80173f6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80173fa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80173fe:	e675      	b.n	80170ec <_strtod_l+0x84>
 8017400:	9b07      	ldr	r3, [sp, #28]
 8017402:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017404:	1af3      	subs	r3, r6, r3
 8017406:	2f00      	cmp	r7, #0
 8017408:	bf08      	it	eq
 801740a:	462f      	moveq	r7, r5
 801740c:	2d10      	cmp	r5, #16
 801740e:	9308      	str	r3, [sp, #32]
 8017410:	46a8      	mov	r8, r5
 8017412:	bfa8      	it	ge
 8017414:	f04f 0810 	movge.w	r8, #16
 8017418:	f7e9 f874 	bl	8000504 <__aeabi_ui2d>
 801741c:	2d09      	cmp	r5, #9
 801741e:	4682      	mov	sl, r0
 8017420:	468b      	mov	fp, r1
 8017422:	dd13      	ble.n	801744c <_strtod_l+0x3e4>
 8017424:	4b79      	ldr	r3, [pc, #484]	; (801760c <_strtod_l+0x5a4>)
 8017426:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801742a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801742e:	f7e9 f8e3 	bl	80005f8 <__aeabi_dmul>
 8017432:	4682      	mov	sl, r0
 8017434:	4648      	mov	r0, r9
 8017436:	468b      	mov	fp, r1
 8017438:	f7e9 f864 	bl	8000504 <__aeabi_ui2d>
 801743c:	4602      	mov	r2, r0
 801743e:	460b      	mov	r3, r1
 8017440:	4650      	mov	r0, sl
 8017442:	4659      	mov	r1, fp
 8017444:	f7e8 ff22 	bl	800028c <__adddf3>
 8017448:	4682      	mov	sl, r0
 801744a:	468b      	mov	fp, r1
 801744c:	2d0f      	cmp	r5, #15
 801744e:	dc38      	bgt.n	80174c2 <_strtod_l+0x45a>
 8017450:	9b08      	ldr	r3, [sp, #32]
 8017452:	2b00      	cmp	r3, #0
 8017454:	f43f ae4a 	beq.w	80170ec <_strtod_l+0x84>
 8017458:	dd24      	ble.n	80174a4 <_strtod_l+0x43c>
 801745a:	2b16      	cmp	r3, #22
 801745c:	dc0b      	bgt.n	8017476 <_strtod_l+0x40e>
 801745e:	4d6b      	ldr	r5, [pc, #428]	; (801760c <_strtod_l+0x5a4>)
 8017460:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8017464:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017468:	4652      	mov	r2, sl
 801746a:	465b      	mov	r3, fp
 801746c:	f7e9 f8c4 	bl	80005f8 <__aeabi_dmul>
 8017470:	4682      	mov	sl, r0
 8017472:	468b      	mov	fp, r1
 8017474:	e63a      	b.n	80170ec <_strtod_l+0x84>
 8017476:	9a08      	ldr	r2, [sp, #32]
 8017478:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801747c:	4293      	cmp	r3, r2
 801747e:	db20      	blt.n	80174c2 <_strtod_l+0x45a>
 8017480:	4c62      	ldr	r4, [pc, #392]	; (801760c <_strtod_l+0x5a4>)
 8017482:	f1c5 050f 	rsb	r5, r5, #15
 8017486:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801748a:	4652      	mov	r2, sl
 801748c:	465b      	mov	r3, fp
 801748e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017492:	f7e9 f8b1 	bl	80005f8 <__aeabi_dmul>
 8017496:	9b08      	ldr	r3, [sp, #32]
 8017498:	1b5d      	subs	r5, r3, r5
 801749a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801749e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80174a2:	e7e3      	b.n	801746c <_strtod_l+0x404>
 80174a4:	9b08      	ldr	r3, [sp, #32]
 80174a6:	3316      	adds	r3, #22
 80174a8:	db0b      	blt.n	80174c2 <_strtod_l+0x45a>
 80174aa:	9b07      	ldr	r3, [sp, #28]
 80174ac:	4a57      	ldr	r2, [pc, #348]	; (801760c <_strtod_l+0x5a4>)
 80174ae:	1b9e      	subs	r6, r3, r6
 80174b0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80174b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80174b8:	4650      	mov	r0, sl
 80174ba:	4659      	mov	r1, fp
 80174bc:	f7e9 f9c6 	bl	800084c <__aeabi_ddiv>
 80174c0:	e7d6      	b.n	8017470 <_strtod_l+0x408>
 80174c2:	9b08      	ldr	r3, [sp, #32]
 80174c4:	eba5 0808 	sub.w	r8, r5, r8
 80174c8:	4498      	add	r8, r3
 80174ca:	f1b8 0f00 	cmp.w	r8, #0
 80174ce:	dd71      	ble.n	80175b4 <_strtod_l+0x54c>
 80174d0:	f018 030f 	ands.w	r3, r8, #15
 80174d4:	d00a      	beq.n	80174ec <_strtod_l+0x484>
 80174d6:	494d      	ldr	r1, [pc, #308]	; (801760c <_strtod_l+0x5a4>)
 80174d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80174dc:	4652      	mov	r2, sl
 80174de:	465b      	mov	r3, fp
 80174e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80174e4:	f7e9 f888 	bl	80005f8 <__aeabi_dmul>
 80174e8:	4682      	mov	sl, r0
 80174ea:	468b      	mov	fp, r1
 80174ec:	f038 080f 	bics.w	r8, r8, #15
 80174f0:	d04d      	beq.n	801758e <_strtod_l+0x526>
 80174f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80174f6:	dd22      	ble.n	801753e <_strtod_l+0x4d6>
 80174f8:	2500      	movs	r5, #0
 80174fa:	462e      	mov	r6, r5
 80174fc:	9509      	str	r5, [sp, #36]	; 0x24
 80174fe:	9507      	str	r5, [sp, #28]
 8017500:	2322      	movs	r3, #34	; 0x22
 8017502:	f8df b110 	ldr.w	fp, [pc, #272]	; 8017614 <_strtod_l+0x5ac>
 8017506:	6023      	str	r3, [r4, #0]
 8017508:	f04f 0a00 	mov.w	sl, #0
 801750c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801750e:	2b00      	cmp	r3, #0
 8017510:	f43f adec 	beq.w	80170ec <_strtod_l+0x84>
 8017514:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017516:	4620      	mov	r0, r4
 8017518:	f001 fe88 	bl	801922c <_Bfree>
 801751c:	9907      	ldr	r1, [sp, #28]
 801751e:	4620      	mov	r0, r4
 8017520:	f001 fe84 	bl	801922c <_Bfree>
 8017524:	4631      	mov	r1, r6
 8017526:	4620      	mov	r0, r4
 8017528:	f001 fe80 	bl	801922c <_Bfree>
 801752c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801752e:	4620      	mov	r0, r4
 8017530:	f001 fe7c 	bl	801922c <_Bfree>
 8017534:	4629      	mov	r1, r5
 8017536:	4620      	mov	r0, r4
 8017538:	f001 fe78 	bl	801922c <_Bfree>
 801753c:	e5d6      	b.n	80170ec <_strtod_l+0x84>
 801753e:	2300      	movs	r3, #0
 8017540:	ea4f 1828 	mov.w	r8, r8, asr #4
 8017544:	4650      	mov	r0, sl
 8017546:	4659      	mov	r1, fp
 8017548:	4699      	mov	r9, r3
 801754a:	f1b8 0f01 	cmp.w	r8, #1
 801754e:	dc21      	bgt.n	8017594 <_strtod_l+0x52c>
 8017550:	b10b      	cbz	r3, 8017556 <_strtod_l+0x4ee>
 8017552:	4682      	mov	sl, r0
 8017554:	468b      	mov	fp, r1
 8017556:	4b2e      	ldr	r3, [pc, #184]	; (8017610 <_strtod_l+0x5a8>)
 8017558:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801755c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8017560:	4652      	mov	r2, sl
 8017562:	465b      	mov	r3, fp
 8017564:	e9d9 0100 	ldrd	r0, r1, [r9]
 8017568:	f7e9 f846 	bl	80005f8 <__aeabi_dmul>
 801756c:	4b29      	ldr	r3, [pc, #164]	; (8017614 <_strtod_l+0x5ac>)
 801756e:	460a      	mov	r2, r1
 8017570:	400b      	ands	r3, r1
 8017572:	4929      	ldr	r1, [pc, #164]	; (8017618 <_strtod_l+0x5b0>)
 8017574:	428b      	cmp	r3, r1
 8017576:	4682      	mov	sl, r0
 8017578:	d8be      	bhi.n	80174f8 <_strtod_l+0x490>
 801757a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801757e:	428b      	cmp	r3, r1
 8017580:	bf86      	itte	hi
 8017582:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801761c <_strtod_l+0x5b4>
 8017586:	f04f 3aff 	movhi.w	sl, #4294967295
 801758a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801758e:	2300      	movs	r3, #0
 8017590:	9304      	str	r3, [sp, #16]
 8017592:	e081      	b.n	8017698 <_strtod_l+0x630>
 8017594:	f018 0f01 	tst.w	r8, #1
 8017598:	d007      	beq.n	80175aa <_strtod_l+0x542>
 801759a:	4b1d      	ldr	r3, [pc, #116]	; (8017610 <_strtod_l+0x5a8>)
 801759c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80175a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175a4:	f7e9 f828 	bl	80005f8 <__aeabi_dmul>
 80175a8:	2301      	movs	r3, #1
 80175aa:	f109 0901 	add.w	r9, r9, #1
 80175ae:	ea4f 0868 	mov.w	r8, r8, asr #1
 80175b2:	e7ca      	b.n	801754a <_strtod_l+0x4e2>
 80175b4:	d0eb      	beq.n	801758e <_strtod_l+0x526>
 80175b6:	f1c8 0800 	rsb	r8, r8, #0
 80175ba:	f018 020f 	ands.w	r2, r8, #15
 80175be:	d00a      	beq.n	80175d6 <_strtod_l+0x56e>
 80175c0:	4b12      	ldr	r3, [pc, #72]	; (801760c <_strtod_l+0x5a4>)
 80175c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80175c6:	4650      	mov	r0, sl
 80175c8:	4659      	mov	r1, fp
 80175ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175ce:	f7e9 f93d 	bl	800084c <__aeabi_ddiv>
 80175d2:	4682      	mov	sl, r0
 80175d4:	468b      	mov	fp, r1
 80175d6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80175da:	d0d8      	beq.n	801758e <_strtod_l+0x526>
 80175dc:	f1b8 0f1f 	cmp.w	r8, #31
 80175e0:	dd1e      	ble.n	8017620 <_strtod_l+0x5b8>
 80175e2:	2500      	movs	r5, #0
 80175e4:	462e      	mov	r6, r5
 80175e6:	9509      	str	r5, [sp, #36]	; 0x24
 80175e8:	9507      	str	r5, [sp, #28]
 80175ea:	2322      	movs	r3, #34	; 0x22
 80175ec:	f04f 0a00 	mov.w	sl, #0
 80175f0:	f04f 0b00 	mov.w	fp, #0
 80175f4:	6023      	str	r3, [r4, #0]
 80175f6:	e789      	b.n	801750c <_strtod_l+0x4a4>
 80175f8:	0801c649 	.word	0x0801c649
 80175fc:	0801c68c 	.word	0x0801c68c
 8017600:	0801c641 	.word	0x0801c641
 8017604:	0801c7cc 	.word	0x0801c7cc
 8017608:	0801ca88 	.word	0x0801ca88
 801760c:	0801c968 	.word	0x0801c968
 8017610:	0801c940 	.word	0x0801c940
 8017614:	7ff00000 	.word	0x7ff00000
 8017618:	7ca00000 	.word	0x7ca00000
 801761c:	7fefffff 	.word	0x7fefffff
 8017620:	f018 0310 	ands.w	r3, r8, #16
 8017624:	bf18      	it	ne
 8017626:	236a      	movne	r3, #106	; 0x6a
 8017628:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80179e0 <_strtod_l+0x978>
 801762c:	9304      	str	r3, [sp, #16]
 801762e:	4650      	mov	r0, sl
 8017630:	4659      	mov	r1, fp
 8017632:	2300      	movs	r3, #0
 8017634:	f018 0f01 	tst.w	r8, #1
 8017638:	d004      	beq.n	8017644 <_strtod_l+0x5dc>
 801763a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801763e:	f7e8 ffdb 	bl	80005f8 <__aeabi_dmul>
 8017642:	2301      	movs	r3, #1
 8017644:	ea5f 0868 	movs.w	r8, r8, asr #1
 8017648:	f109 0908 	add.w	r9, r9, #8
 801764c:	d1f2      	bne.n	8017634 <_strtod_l+0x5cc>
 801764e:	b10b      	cbz	r3, 8017654 <_strtod_l+0x5ec>
 8017650:	4682      	mov	sl, r0
 8017652:	468b      	mov	fp, r1
 8017654:	9b04      	ldr	r3, [sp, #16]
 8017656:	b1bb      	cbz	r3, 8017688 <_strtod_l+0x620>
 8017658:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801765c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017660:	2b00      	cmp	r3, #0
 8017662:	4659      	mov	r1, fp
 8017664:	dd10      	ble.n	8017688 <_strtod_l+0x620>
 8017666:	2b1f      	cmp	r3, #31
 8017668:	f340 8128 	ble.w	80178bc <_strtod_l+0x854>
 801766c:	2b34      	cmp	r3, #52	; 0x34
 801766e:	bfde      	ittt	le
 8017670:	3b20      	suble	r3, #32
 8017672:	f04f 32ff 	movle.w	r2, #4294967295
 8017676:	fa02 f303 	lslle.w	r3, r2, r3
 801767a:	f04f 0a00 	mov.w	sl, #0
 801767e:	bfcc      	ite	gt
 8017680:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017684:	ea03 0b01 	andle.w	fp, r3, r1
 8017688:	2200      	movs	r2, #0
 801768a:	2300      	movs	r3, #0
 801768c:	4650      	mov	r0, sl
 801768e:	4659      	mov	r1, fp
 8017690:	f7e9 fa1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8017694:	2800      	cmp	r0, #0
 8017696:	d1a4      	bne.n	80175e2 <_strtod_l+0x57a>
 8017698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801769a:	9300      	str	r3, [sp, #0]
 801769c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801769e:	462b      	mov	r3, r5
 80176a0:	463a      	mov	r2, r7
 80176a2:	4620      	mov	r0, r4
 80176a4:	f001 fe2e 	bl	8019304 <__s2b>
 80176a8:	9009      	str	r0, [sp, #36]	; 0x24
 80176aa:	2800      	cmp	r0, #0
 80176ac:	f43f af24 	beq.w	80174f8 <_strtod_l+0x490>
 80176b0:	9b07      	ldr	r3, [sp, #28]
 80176b2:	1b9e      	subs	r6, r3, r6
 80176b4:	9b08      	ldr	r3, [sp, #32]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	bfb4      	ite	lt
 80176ba:	4633      	movlt	r3, r6
 80176bc:	2300      	movge	r3, #0
 80176be:	9310      	str	r3, [sp, #64]	; 0x40
 80176c0:	9b08      	ldr	r3, [sp, #32]
 80176c2:	2500      	movs	r5, #0
 80176c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80176c8:	9318      	str	r3, [sp, #96]	; 0x60
 80176ca:	462e      	mov	r6, r5
 80176cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176ce:	4620      	mov	r0, r4
 80176d0:	6859      	ldr	r1, [r3, #4]
 80176d2:	f001 fd6b 	bl	80191ac <_Balloc>
 80176d6:	9007      	str	r0, [sp, #28]
 80176d8:	2800      	cmp	r0, #0
 80176da:	f43f af11 	beq.w	8017500 <_strtod_l+0x498>
 80176de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176e0:	691a      	ldr	r2, [r3, #16]
 80176e2:	3202      	adds	r2, #2
 80176e4:	f103 010c 	add.w	r1, r3, #12
 80176e8:	0092      	lsls	r2, r2, #2
 80176ea:	300c      	adds	r0, #12
 80176ec:	f7fe fce0 	bl	80160b0 <memcpy>
 80176f0:	ec4b ab10 	vmov	d0, sl, fp
 80176f4:	aa20      	add	r2, sp, #128	; 0x80
 80176f6:	a91f      	add	r1, sp, #124	; 0x7c
 80176f8:	4620      	mov	r0, r4
 80176fa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80176fe:	f002 f93d 	bl	801997c <__d2b>
 8017702:	901e      	str	r0, [sp, #120]	; 0x78
 8017704:	2800      	cmp	r0, #0
 8017706:	f43f aefb 	beq.w	8017500 <_strtod_l+0x498>
 801770a:	2101      	movs	r1, #1
 801770c:	4620      	mov	r0, r4
 801770e:	f001 fe93 	bl	8019438 <__i2b>
 8017712:	4606      	mov	r6, r0
 8017714:	2800      	cmp	r0, #0
 8017716:	f43f aef3 	beq.w	8017500 <_strtod_l+0x498>
 801771a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801771c:	9904      	ldr	r1, [sp, #16]
 801771e:	2b00      	cmp	r3, #0
 8017720:	bfab      	itete	ge
 8017722:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8017724:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8017726:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8017728:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801772c:	bfac      	ite	ge
 801772e:	eb03 0902 	addge.w	r9, r3, r2
 8017732:	1ad7      	sublt	r7, r2, r3
 8017734:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017736:	eba3 0801 	sub.w	r8, r3, r1
 801773a:	4490      	add	r8, r2
 801773c:	4ba3      	ldr	r3, [pc, #652]	; (80179cc <_strtod_l+0x964>)
 801773e:	f108 38ff 	add.w	r8, r8, #4294967295
 8017742:	4598      	cmp	r8, r3
 8017744:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017748:	f280 80cc 	bge.w	80178e4 <_strtod_l+0x87c>
 801774c:	eba3 0308 	sub.w	r3, r3, r8
 8017750:	2b1f      	cmp	r3, #31
 8017752:	eba2 0203 	sub.w	r2, r2, r3
 8017756:	f04f 0101 	mov.w	r1, #1
 801775a:	f300 80b6 	bgt.w	80178ca <_strtod_l+0x862>
 801775e:	fa01 f303 	lsl.w	r3, r1, r3
 8017762:	9311      	str	r3, [sp, #68]	; 0x44
 8017764:	2300      	movs	r3, #0
 8017766:	930c      	str	r3, [sp, #48]	; 0x30
 8017768:	eb09 0802 	add.w	r8, r9, r2
 801776c:	9b04      	ldr	r3, [sp, #16]
 801776e:	45c1      	cmp	r9, r8
 8017770:	4417      	add	r7, r2
 8017772:	441f      	add	r7, r3
 8017774:	464b      	mov	r3, r9
 8017776:	bfa8      	it	ge
 8017778:	4643      	movge	r3, r8
 801777a:	42bb      	cmp	r3, r7
 801777c:	bfa8      	it	ge
 801777e:	463b      	movge	r3, r7
 8017780:	2b00      	cmp	r3, #0
 8017782:	bfc2      	ittt	gt
 8017784:	eba8 0803 	subgt.w	r8, r8, r3
 8017788:	1aff      	subgt	r7, r7, r3
 801778a:	eba9 0903 	subgt.w	r9, r9, r3
 801778e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017790:	2b00      	cmp	r3, #0
 8017792:	dd17      	ble.n	80177c4 <_strtod_l+0x75c>
 8017794:	4631      	mov	r1, r6
 8017796:	461a      	mov	r2, r3
 8017798:	4620      	mov	r0, r4
 801779a:	f001 ff09 	bl	80195b0 <__pow5mult>
 801779e:	4606      	mov	r6, r0
 80177a0:	2800      	cmp	r0, #0
 80177a2:	f43f aead 	beq.w	8017500 <_strtod_l+0x498>
 80177a6:	4601      	mov	r1, r0
 80177a8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80177aa:	4620      	mov	r0, r4
 80177ac:	f001 fe5a 	bl	8019464 <__multiply>
 80177b0:	900f      	str	r0, [sp, #60]	; 0x3c
 80177b2:	2800      	cmp	r0, #0
 80177b4:	f43f aea4 	beq.w	8017500 <_strtod_l+0x498>
 80177b8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80177ba:	4620      	mov	r0, r4
 80177bc:	f001 fd36 	bl	801922c <_Bfree>
 80177c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80177c2:	931e      	str	r3, [sp, #120]	; 0x78
 80177c4:	f1b8 0f00 	cmp.w	r8, #0
 80177c8:	f300 8091 	bgt.w	80178ee <_strtod_l+0x886>
 80177cc:	9b08      	ldr	r3, [sp, #32]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	dd08      	ble.n	80177e4 <_strtod_l+0x77c>
 80177d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80177d4:	9907      	ldr	r1, [sp, #28]
 80177d6:	4620      	mov	r0, r4
 80177d8:	f001 feea 	bl	80195b0 <__pow5mult>
 80177dc:	9007      	str	r0, [sp, #28]
 80177de:	2800      	cmp	r0, #0
 80177e0:	f43f ae8e 	beq.w	8017500 <_strtod_l+0x498>
 80177e4:	2f00      	cmp	r7, #0
 80177e6:	dd08      	ble.n	80177fa <_strtod_l+0x792>
 80177e8:	9907      	ldr	r1, [sp, #28]
 80177ea:	463a      	mov	r2, r7
 80177ec:	4620      	mov	r0, r4
 80177ee:	f001 ff39 	bl	8019664 <__lshift>
 80177f2:	9007      	str	r0, [sp, #28]
 80177f4:	2800      	cmp	r0, #0
 80177f6:	f43f ae83 	beq.w	8017500 <_strtod_l+0x498>
 80177fa:	f1b9 0f00 	cmp.w	r9, #0
 80177fe:	dd08      	ble.n	8017812 <_strtod_l+0x7aa>
 8017800:	4631      	mov	r1, r6
 8017802:	464a      	mov	r2, r9
 8017804:	4620      	mov	r0, r4
 8017806:	f001 ff2d 	bl	8019664 <__lshift>
 801780a:	4606      	mov	r6, r0
 801780c:	2800      	cmp	r0, #0
 801780e:	f43f ae77 	beq.w	8017500 <_strtod_l+0x498>
 8017812:	9a07      	ldr	r2, [sp, #28]
 8017814:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017816:	4620      	mov	r0, r4
 8017818:	f001 ffac 	bl	8019774 <__mdiff>
 801781c:	4605      	mov	r5, r0
 801781e:	2800      	cmp	r0, #0
 8017820:	f43f ae6e 	beq.w	8017500 <_strtod_l+0x498>
 8017824:	68c3      	ldr	r3, [r0, #12]
 8017826:	930f      	str	r3, [sp, #60]	; 0x3c
 8017828:	2300      	movs	r3, #0
 801782a:	60c3      	str	r3, [r0, #12]
 801782c:	4631      	mov	r1, r6
 801782e:	f001 ff85 	bl	801973c <__mcmp>
 8017832:	2800      	cmp	r0, #0
 8017834:	da65      	bge.n	8017902 <_strtod_l+0x89a>
 8017836:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017838:	ea53 030a 	orrs.w	r3, r3, sl
 801783c:	f040 8087 	bne.w	801794e <_strtod_l+0x8e6>
 8017840:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017844:	2b00      	cmp	r3, #0
 8017846:	f040 8082 	bne.w	801794e <_strtod_l+0x8e6>
 801784a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801784e:	0d1b      	lsrs	r3, r3, #20
 8017850:	051b      	lsls	r3, r3, #20
 8017852:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017856:	d97a      	bls.n	801794e <_strtod_l+0x8e6>
 8017858:	696b      	ldr	r3, [r5, #20]
 801785a:	b913      	cbnz	r3, 8017862 <_strtod_l+0x7fa>
 801785c:	692b      	ldr	r3, [r5, #16]
 801785e:	2b01      	cmp	r3, #1
 8017860:	dd75      	ble.n	801794e <_strtod_l+0x8e6>
 8017862:	4629      	mov	r1, r5
 8017864:	2201      	movs	r2, #1
 8017866:	4620      	mov	r0, r4
 8017868:	f001 fefc 	bl	8019664 <__lshift>
 801786c:	4631      	mov	r1, r6
 801786e:	4605      	mov	r5, r0
 8017870:	f001 ff64 	bl	801973c <__mcmp>
 8017874:	2800      	cmp	r0, #0
 8017876:	dd6a      	ble.n	801794e <_strtod_l+0x8e6>
 8017878:	9904      	ldr	r1, [sp, #16]
 801787a:	4a55      	ldr	r2, [pc, #340]	; (80179d0 <_strtod_l+0x968>)
 801787c:	465b      	mov	r3, fp
 801787e:	2900      	cmp	r1, #0
 8017880:	f000 8085 	beq.w	801798e <_strtod_l+0x926>
 8017884:	ea02 010b 	and.w	r1, r2, fp
 8017888:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801788c:	dc7f      	bgt.n	801798e <_strtod_l+0x926>
 801788e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017892:	f77f aeaa 	ble.w	80175ea <_strtod_l+0x582>
 8017896:	4a4f      	ldr	r2, [pc, #316]	; (80179d4 <_strtod_l+0x96c>)
 8017898:	2300      	movs	r3, #0
 801789a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801789e:	4650      	mov	r0, sl
 80178a0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80178a4:	4659      	mov	r1, fp
 80178a6:	f7e8 fea7 	bl	80005f8 <__aeabi_dmul>
 80178aa:	460b      	mov	r3, r1
 80178ac:	4303      	orrs	r3, r0
 80178ae:	bf08      	it	eq
 80178b0:	2322      	moveq	r3, #34	; 0x22
 80178b2:	4682      	mov	sl, r0
 80178b4:	468b      	mov	fp, r1
 80178b6:	bf08      	it	eq
 80178b8:	6023      	streq	r3, [r4, #0]
 80178ba:	e62b      	b.n	8017514 <_strtod_l+0x4ac>
 80178bc:	f04f 32ff 	mov.w	r2, #4294967295
 80178c0:	fa02 f303 	lsl.w	r3, r2, r3
 80178c4:	ea03 0a0a 	and.w	sl, r3, sl
 80178c8:	e6de      	b.n	8017688 <_strtod_l+0x620>
 80178ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80178ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80178d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80178d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80178da:	fa01 f308 	lsl.w	r3, r1, r8
 80178de:	930c      	str	r3, [sp, #48]	; 0x30
 80178e0:	9111      	str	r1, [sp, #68]	; 0x44
 80178e2:	e741      	b.n	8017768 <_strtod_l+0x700>
 80178e4:	2300      	movs	r3, #0
 80178e6:	930c      	str	r3, [sp, #48]	; 0x30
 80178e8:	2301      	movs	r3, #1
 80178ea:	9311      	str	r3, [sp, #68]	; 0x44
 80178ec:	e73c      	b.n	8017768 <_strtod_l+0x700>
 80178ee:	991e      	ldr	r1, [sp, #120]	; 0x78
 80178f0:	4642      	mov	r2, r8
 80178f2:	4620      	mov	r0, r4
 80178f4:	f001 feb6 	bl	8019664 <__lshift>
 80178f8:	901e      	str	r0, [sp, #120]	; 0x78
 80178fa:	2800      	cmp	r0, #0
 80178fc:	f47f af66 	bne.w	80177cc <_strtod_l+0x764>
 8017900:	e5fe      	b.n	8017500 <_strtod_l+0x498>
 8017902:	465f      	mov	r7, fp
 8017904:	d16e      	bne.n	80179e4 <_strtod_l+0x97c>
 8017906:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017908:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801790c:	b342      	cbz	r2, 8017960 <_strtod_l+0x8f8>
 801790e:	4a32      	ldr	r2, [pc, #200]	; (80179d8 <_strtod_l+0x970>)
 8017910:	4293      	cmp	r3, r2
 8017912:	d128      	bne.n	8017966 <_strtod_l+0x8fe>
 8017914:	9b04      	ldr	r3, [sp, #16]
 8017916:	4650      	mov	r0, sl
 8017918:	b1eb      	cbz	r3, 8017956 <_strtod_l+0x8ee>
 801791a:	4a2d      	ldr	r2, [pc, #180]	; (80179d0 <_strtod_l+0x968>)
 801791c:	403a      	ands	r2, r7
 801791e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017922:	f04f 31ff 	mov.w	r1, #4294967295
 8017926:	d819      	bhi.n	801795c <_strtod_l+0x8f4>
 8017928:	0d12      	lsrs	r2, r2, #20
 801792a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801792e:	fa01 f303 	lsl.w	r3, r1, r3
 8017932:	4298      	cmp	r0, r3
 8017934:	d117      	bne.n	8017966 <_strtod_l+0x8fe>
 8017936:	4b29      	ldr	r3, [pc, #164]	; (80179dc <_strtod_l+0x974>)
 8017938:	429f      	cmp	r7, r3
 801793a:	d102      	bne.n	8017942 <_strtod_l+0x8da>
 801793c:	3001      	adds	r0, #1
 801793e:	f43f addf 	beq.w	8017500 <_strtod_l+0x498>
 8017942:	4b23      	ldr	r3, [pc, #140]	; (80179d0 <_strtod_l+0x968>)
 8017944:	403b      	ands	r3, r7
 8017946:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801794a:	f04f 0a00 	mov.w	sl, #0
 801794e:	9b04      	ldr	r3, [sp, #16]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d1a0      	bne.n	8017896 <_strtod_l+0x82e>
 8017954:	e5de      	b.n	8017514 <_strtod_l+0x4ac>
 8017956:	f04f 33ff 	mov.w	r3, #4294967295
 801795a:	e7ea      	b.n	8017932 <_strtod_l+0x8ca>
 801795c:	460b      	mov	r3, r1
 801795e:	e7e8      	b.n	8017932 <_strtod_l+0x8ca>
 8017960:	ea53 030a 	orrs.w	r3, r3, sl
 8017964:	d088      	beq.n	8017878 <_strtod_l+0x810>
 8017966:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017968:	b1db      	cbz	r3, 80179a2 <_strtod_l+0x93a>
 801796a:	423b      	tst	r3, r7
 801796c:	d0ef      	beq.n	801794e <_strtod_l+0x8e6>
 801796e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017970:	9a04      	ldr	r2, [sp, #16]
 8017972:	4650      	mov	r0, sl
 8017974:	4659      	mov	r1, fp
 8017976:	b1c3      	cbz	r3, 80179aa <_strtod_l+0x942>
 8017978:	f7ff fb58 	bl	801702c <sulp>
 801797c:	4602      	mov	r2, r0
 801797e:	460b      	mov	r3, r1
 8017980:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017984:	f7e8 fc82 	bl	800028c <__adddf3>
 8017988:	4682      	mov	sl, r0
 801798a:	468b      	mov	fp, r1
 801798c:	e7df      	b.n	801794e <_strtod_l+0x8e6>
 801798e:	4013      	ands	r3, r2
 8017990:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017994:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017998:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801799c:	f04f 3aff 	mov.w	sl, #4294967295
 80179a0:	e7d5      	b.n	801794e <_strtod_l+0x8e6>
 80179a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80179a4:	ea13 0f0a 	tst.w	r3, sl
 80179a8:	e7e0      	b.n	801796c <_strtod_l+0x904>
 80179aa:	f7ff fb3f 	bl	801702c <sulp>
 80179ae:	4602      	mov	r2, r0
 80179b0:	460b      	mov	r3, r1
 80179b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80179b6:	f7e8 fc67 	bl	8000288 <__aeabi_dsub>
 80179ba:	2200      	movs	r2, #0
 80179bc:	2300      	movs	r3, #0
 80179be:	4682      	mov	sl, r0
 80179c0:	468b      	mov	fp, r1
 80179c2:	f7e9 f881 	bl	8000ac8 <__aeabi_dcmpeq>
 80179c6:	2800      	cmp	r0, #0
 80179c8:	d0c1      	beq.n	801794e <_strtod_l+0x8e6>
 80179ca:	e60e      	b.n	80175ea <_strtod_l+0x582>
 80179cc:	fffffc02 	.word	0xfffffc02
 80179d0:	7ff00000 	.word	0x7ff00000
 80179d4:	39500000 	.word	0x39500000
 80179d8:	000fffff 	.word	0x000fffff
 80179dc:	7fefffff 	.word	0x7fefffff
 80179e0:	0801c6a0 	.word	0x0801c6a0
 80179e4:	4631      	mov	r1, r6
 80179e6:	4628      	mov	r0, r5
 80179e8:	f002 f824 	bl	8019a34 <__ratio>
 80179ec:	ec59 8b10 	vmov	r8, r9, d0
 80179f0:	ee10 0a10 	vmov	r0, s0
 80179f4:	2200      	movs	r2, #0
 80179f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80179fa:	4649      	mov	r1, r9
 80179fc:	f7e9 f878 	bl	8000af0 <__aeabi_dcmple>
 8017a00:	2800      	cmp	r0, #0
 8017a02:	d07c      	beq.n	8017afe <_strtod_l+0xa96>
 8017a04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d04c      	beq.n	8017aa4 <_strtod_l+0xa3c>
 8017a0a:	4b95      	ldr	r3, [pc, #596]	; (8017c60 <_strtod_l+0xbf8>)
 8017a0c:	2200      	movs	r2, #0
 8017a0e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017a12:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8017c60 <_strtod_l+0xbf8>
 8017a16:	f04f 0800 	mov.w	r8, #0
 8017a1a:	4b92      	ldr	r3, [pc, #584]	; (8017c64 <_strtod_l+0xbfc>)
 8017a1c:	403b      	ands	r3, r7
 8017a1e:	9311      	str	r3, [sp, #68]	; 0x44
 8017a20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017a22:	4b91      	ldr	r3, [pc, #580]	; (8017c68 <_strtod_l+0xc00>)
 8017a24:	429a      	cmp	r2, r3
 8017a26:	f040 80b2 	bne.w	8017b8e <_strtod_l+0xb26>
 8017a2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017a2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017a32:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8017a36:	ec4b ab10 	vmov	d0, sl, fp
 8017a3a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8017a3e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017a42:	f001 ff1f 	bl	8019884 <__ulp>
 8017a46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017a4a:	ec53 2b10 	vmov	r2, r3, d0
 8017a4e:	f7e8 fdd3 	bl	80005f8 <__aeabi_dmul>
 8017a52:	4652      	mov	r2, sl
 8017a54:	465b      	mov	r3, fp
 8017a56:	f7e8 fc19 	bl	800028c <__adddf3>
 8017a5a:	460b      	mov	r3, r1
 8017a5c:	4981      	ldr	r1, [pc, #516]	; (8017c64 <_strtod_l+0xbfc>)
 8017a5e:	4a83      	ldr	r2, [pc, #524]	; (8017c6c <_strtod_l+0xc04>)
 8017a60:	4019      	ands	r1, r3
 8017a62:	4291      	cmp	r1, r2
 8017a64:	4682      	mov	sl, r0
 8017a66:	d95e      	bls.n	8017b26 <_strtod_l+0xabe>
 8017a68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a6a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017a6e:	4293      	cmp	r3, r2
 8017a70:	d103      	bne.n	8017a7a <_strtod_l+0xa12>
 8017a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a74:	3301      	adds	r3, #1
 8017a76:	f43f ad43 	beq.w	8017500 <_strtod_l+0x498>
 8017a7a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8017c78 <_strtod_l+0xc10>
 8017a7e:	f04f 3aff 	mov.w	sl, #4294967295
 8017a82:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017a84:	4620      	mov	r0, r4
 8017a86:	f001 fbd1 	bl	801922c <_Bfree>
 8017a8a:	9907      	ldr	r1, [sp, #28]
 8017a8c:	4620      	mov	r0, r4
 8017a8e:	f001 fbcd 	bl	801922c <_Bfree>
 8017a92:	4631      	mov	r1, r6
 8017a94:	4620      	mov	r0, r4
 8017a96:	f001 fbc9 	bl	801922c <_Bfree>
 8017a9a:	4629      	mov	r1, r5
 8017a9c:	4620      	mov	r0, r4
 8017a9e:	f001 fbc5 	bl	801922c <_Bfree>
 8017aa2:	e613      	b.n	80176cc <_strtod_l+0x664>
 8017aa4:	f1ba 0f00 	cmp.w	sl, #0
 8017aa8:	d11b      	bne.n	8017ae2 <_strtod_l+0xa7a>
 8017aaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017aae:	b9f3      	cbnz	r3, 8017aee <_strtod_l+0xa86>
 8017ab0:	4b6b      	ldr	r3, [pc, #428]	; (8017c60 <_strtod_l+0xbf8>)
 8017ab2:	2200      	movs	r2, #0
 8017ab4:	4640      	mov	r0, r8
 8017ab6:	4649      	mov	r1, r9
 8017ab8:	f7e9 f810 	bl	8000adc <__aeabi_dcmplt>
 8017abc:	b9d0      	cbnz	r0, 8017af4 <_strtod_l+0xa8c>
 8017abe:	4640      	mov	r0, r8
 8017ac0:	4649      	mov	r1, r9
 8017ac2:	4b6b      	ldr	r3, [pc, #428]	; (8017c70 <_strtod_l+0xc08>)
 8017ac4:	2200      	movs	r2, #0
 8017ac6:	f7e8 fd97 	bl	80005f8 <__aeabi_dmul>
 8017aca:	4680      	mov	r8, r0
 8017acc:	4689      	mov	r9, r1
 8017ace:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8017ad2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8017ad6:	931b      	str	r3, [sp, #108]	; 0x6c
 8017ad8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8017adc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017ae0:	e79b      	b.n	8017a1a <_strtod_l+0x9b2>
 8017ae2:	f1ba 0f01 	cmp.w	sl, #1
 8017ae6:	d102      	bne.n	8017aee <_strtod_l+0xa86>
 8017ae8:	2f00      	cmp	r7, #0
 8017aea:	f43f ad7e 	beq.w	80175ea <_strtod_l+0x582>
 8017aee:	4b61      	ldr	r3, [pc, #388]	; (8017c74 <_strtod_l+0xc0c>)
 8017af0:	2200      	movs	r2, #0
 8017af2:	e78c      	b.n	8017a0e <_strtod_l+0x9a6>
 8017af4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8017c70 <_strtod_l+0xc08>
 8017af8:	f04f 0800 	mov.w	r8, #0
 8017afc:	e7e7      	b.n	8017ace <_strtod_l+0xa66>
 8017afe:	4b5c      	ldr	r3, [pc, #368]	; (8017c70 <_strtod_l+0xc08>)
 8017b00:	4640      	mov	r0, r8
 8017b02:	4649      	mov	r1, r9
 8017b04:	2200      	movs	r2, #0
 8017b06:	f7e8 fd77 	bl	80005f8 <__aeabi_dmul>
 8017b0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017b0c:	4680      	mov	r8, r0
 8017b0e:	4689      	mov	r9, r1
 8017b10:	b933      	cbnz	r3, 8017b20 <_strtod_l+0xab8>
 8017b12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017b16:	9012      	str	r0, [sp, #72]	; 0x48
 8017b18:	9313      	str	r3, [sp, #76]	; 0x4c
 8017b1a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017b1e:	e7dd      	b.n	8017adc <_strtod_l+0xa74>
 8017b20:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8017b24:	e7f9      	b.n	8017b1a <_strtod_l+0xab2>
 8017b26:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017b2a:	9b04      	ldr	r3, [sp, #16]
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d1a8      	bne.n	8017a82 <_strtod_l+0xa1a>
 8017b30:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017b34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017b36:	0d1b      	lsrs	r3, r3, #20
 8017b38:	051b      	lsls	r3, r3, #20
 8017b3a:	429a      	cmp	r2, r3
 8017b3c:	d1a1      	bne.n	8017a82 <_strtod_l+0xa1a>
 8017b3e:	4640      	mov	r0, r8
 8017b40:	4649      	mov	r1, r9
 8017b42:	f7e9 f8b9 	bl	8000cb8 <__aeabi_d2lz>
 8017b46:	f7e8 fd29 	bl	800059c <__aeabi_l2d>
 8017b4a:	4602      	mov	r2, r0
 8017b4c:	460b      	mov	r3, r1
 8017b4e:	4640      	mov	r0, r8
 8017b50:	4649      	mov	r1, r9
 8017b52:	f7e8 fb99 	bl	8000288 <__aeabi_dsub>
 8017b56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017b58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017b5c:	ea43 030a 	orr.w	r3, r3, sl
 8017b60:	4313      	orrs	r3, r2
 8017b62:	4680      	mov	r8, r0
 8017b64:	4689      	mov	r9, r1
 8017b66:	d053      	beq.n	8017c10 <_strtod_l+0xba8>
 8017b68:	a335      	add	r3, pc, #212	; (adr r3, 8017c40 <_strtod_l+0xbd8>)
 8017b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b6e:	f7e8 ffb5 	bl	8000adc <__aeabi_dcmplt>
 8017b72:	2800      	cmp	r0, #0
 8017b74:	f47f acce 	bne.w	8017514 <_strtod_l+0x4ac>
 8017b78:	a333      	add	r3, pc, #204	; (adr r3, 8017c48 <_strtod_l+0xbe0>)
 8017b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b7e:	4640      	mov	r0, r8
 8017b80:	4649      	mov	r1, r9
 8017b82:	f7e8 ffc9 	bl	8000b18 <__aeabi_dcmpgt>
 8017b86:	2800      	cmp	r0, #0
 8017b88:	f43f af7b 	beq.w	8017a82 <_strtod_l+0xa1a>
 8017b8c:	e4c2      	b.n	8017514 <_strtod_l+0x4ac>
 8017b8e:	9b04      	ldr	r3, [sp, #16]
 8017b90:	b333      	cbz	r3, 8017be0 <_strtod_l+0xb78>
 8017b92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017b94:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017b98:	d822      	bhi.n	8017be0 <_strtod_l+0xb78>
 8017b9a:	a32d      	add	r3, pc, #180	; (adr r3, 8017c50 <_strtod_l+0xbe8>)
 8017b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ba0:	4640      	mov	r0, r8
 8017ba2:	4649      	mov	r1, r9
 8017ba4:	f7e8 ffa4 	bl	8000af0 <__aeabi_dcmple>
 8017ba8:	b1a0      	cbz	r0, 8017bd4 <_strtod_l+0xb6c>
 8017baa:	4649      	mov	r1, r9
 8017bac:	4640      	mov	r0, r8
 8017bae:	f7e8 fffb 	bl	8000ba8 <__aeabi_d2uiz>
 8017bb2:	2801      	cmp	r0, #1
 8017bb4:	bf38      	it	cc
 8017bb6:	2001      	movcc	r0, #1
 8017bb8:	f7e8 fca4 	bl	8000504 <__aeabi_ui2d>
 8017bbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017bbe:	4680      	mov	r8, r0
 8017bc0:	4689      	mov	r9, r1
 8017bc2:	bb13      	cbnz	r3, 8017c0a <_strtod_l+0xba2>
 8017bc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017bc8:	9014      	str	r0, [sp, #80]	; 0x50
 8017bca:	9315      	str	r3, [sp, #84]	; 0x54
 8017bcc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017bd0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017bd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017bd8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017bdc:	1a9b      	subs	r3, r3, r2
 8017bde:	930d      	str	r3, [sp, #52]	; 0x34
 8017be0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017be4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017be8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017bec:	f001 fe4a 	bl	8019884 <__ulp>
 8017bf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017bf4:	ec53 2b10 	vmov	r2, r3, d0
 8017bf8:	f7e8 fcfe 	bl	80005f8 <__aeabi_dmul>
 8017bfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017c00:	f7e8 fb44 	bl	800028c <__adddf3>
 8017c04:	4682      	mov	sl, r0
 8017c06:	468b      	mov	fp, r1
 8017c08:	e78f      	b.n	8017b2a <_strtod_l+0xac2>
 8017c0a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8017c0e:	e7dd      	b.n	8017bcc <_strtod_l+0xb64>
 8017c10:	a311      	add	r3, pc, #68	; (adr r3, 8017c58 <_strtod_l+0xbf0>)
 8017c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c16:	f7e8 ff61 	bl	8000adc <__aeabi_dcmplt>
 8017c1a:	e7b4      	b.n	8017b86 <_strtod_l+0xb1e>
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	930e      	str	r3, [sp, #56]	; 0x38
 8017c20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017c22:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017c24:	6013      	str	r3, [r2, #0]
 8017c26:	f7ff ba65 	b.w	80170f4 <_strtod_l+0x8c>
 8017c2a:	2b65      	cmp	r3, #101	; 0x65
 8017c2c:	f43f ab5d 	beq.w	80172ea <_strtod_l+0x282>
 8017c30:	2b45      	cmp	r3, #69	; 0x45
 8017c32:	f43f ab5a 	beq.w	80172ea <_strtod_l+0x282>
 8017c36:	2201      	movs	r2, #1
 8017c38:	f7ff bb92 	b.w	8017360 <_strtod_l+0x2f8>
 8017c3c:	f3af 8000 	nop.w
 8017c40:	94a03595 	.word	0x94a03595
 8017c44:	3fdfffff 	.word	0x3fdfffff
 8017c48:	35afe535 	.word	0x35afe535
 8017c4c:	3fe00000 	.word	0x3fe00000
 8017c50:	ffc00000 	.word	0xffc00000
 8017c54:	41dfffff 	.word	0x41dfffff
 8017c58:	94a03595 	.word	0x94a03595
 8017c5c:	3fcfffff 	.word	0x3fcfffff
 8017c60:	3ff00000 	.word	0x3ff00000
 8017c64:	7ff00000 	.word	0x7ff00000
 8017c68:	7fe00000 	.word	0x7fe00000
 8017c6c:	7c9fffff 	.word	0x7c9fffff
 8017c70:	3fe00000 	.word	0x3fe00000
 8017c74:	bff00000 	.word	0xbff00000
 8017c78:	7fefffff 	.word	0x7fefffff

08017c7c <_strtod_r>:
 8017c7c:	4b01      	ldr	r3, [pc, #4]	; (8017c84 <_strtod_r+0x8>)
 8017c7e:	f7ff b9f3 	b.w	8017068 <_strtod_l>
 8017c82:	bf00      	nop
 8017c84:	20000a14 	.word	0x20000a14

08017c88 <_strtol_l.isra.0>:
 8017c88:	2b01      	cmp	r3, #1
 8017c8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c8e:	d001      	beq.n	8017c94 <_strtol_l.isra.0+0xc>
 8017c90:	2b24      	cmp	r3, #36	; 0x24
 8017c92:	d906      	bls.n	8017ca2 <_strtol_l.isra.0+0x1a>
 8017c94:	f7fe f9d2 	bl	801603c <__errno>
 8017c98:	2316      	movs	r3, #22
 8017c9a:	6003      	str	r3, [r0, #0]
 8017c9c:	2000      	movs	r0, #0
 8017c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ca2:	4f3a      	ldr	r7, [pc, #232]	; (8017d8c <_strtol_l.isra.0+0x104>)
 8017ca4:	468e      	mov	lr, r1
 8017ca6:	4676      	mov	r6, lr
 8017ca8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017cac:	5de5      	ldrb	r5, [r4, r7]
 8017cae:	f015 0508 	ands.w	r5, r5, #8
 8017cb2:	d1f8      	bne.n	8017ca6 <_strtol_l.isra.0+0x1e>
 8017cb4:	2c2d      	cmp	r4, #45	; 0x2d
 8017cb6:	d134      	bne.n	8017d22 <_strtol_l.isra.0+0x9a>
 8017cb8:	f89e 4000 	ldrb.w	r4, [lr]
 8017cbc:	f04f 0801 	mov.w	r8, #1
 8017cc0:	f106 0e02 	add.w	lr, r6, #2
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d05c      	beq.n	8017d82 <_strtol_l.isra.0+0xfa>
 8017cc8:	2b10      	cmp	r3, #16
 8017cca:	d10c      	bne.n	8017ce6 <_strtol_l.isra.0+0x5e>
 8017ccc:	2c30      	cmp	r4, #48	; 0x30
 8017cce:	d10a      	bne.n	8017ce6 <_strtol_l.isra.0+0x5e>
 8017cd0:	f89e 4000 	ldrb.w	r4, [lr]
 8017cd4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017cd8:	2c58      	cmp	r4, #88	; 0x58
 8017cda:	d14d      	bne.n	8017d78 <_strtol_l.isra.0+0xf0>
 8017cdc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8017ce0:	2310      	movs	r3, #16
 8017ce2:	f10e 0e02 	add.w	lr, lr, #2
 8017ce6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8017cea:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017cee:	2600      	movs	r6, #0
 8017cf0:	fbbc f9f3 	udiv	r9, ip, r3
 8017cf4:	4635      	mov	r5, r6
 8017cf6:	fb03 ca19 	mls	sl, r3, r9, ip
 8017cfa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017cfe:	2f09      	cmp	r7, #9
 8017d00:	d818      	bhi.n	8017d34 <_strtol_l.isra.0+0xac>
 8017d02:	463c      	mov	r4, r7
 8017d04:	42a3      	cmp	r3, r4
 8017d06:	dd24      	ble.n	8017d52 <_strtol_l.isra.0+0xca>
 8017d08:	2e00      	cmp	r6, #0
 8017d0a:	db1f      	blt.n	8017d4c <_strtol_l.isra.0+0xc4>
 8017d0c:	45a9      	cmp	r9, r5
 8017d0e:	d31d      	bcc.n	8017d4c <_strtol_l.isra.0+0xc4>
 8017d10:	d101      	bne.n	8017d16 <_strtol_l.isra.0+0x8e>
 8017d12:	45a2      	cmp	sl, r4
 8017d14:	db1a      	blt.n	8017d4c <_strtol_l.isra.0+0xc4>
 8017d16:	fb05 4503 	mla	r5, r5, r3, r4
 8017d1a:	2601      	movs	r6, #1
 8017d1c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017d20:	e7eb      	b.n	8017cfa <_strtol_l.isra.0+0x72>
 8017d22:	2c2b      	cmp	r4, #43	; 0x2b
 8017d24:	bf08      	it	eq
 8017d26:	f89e 4000 	ldrbeq.w	r4, [lr]
 8017d2a:	46a8      	mov	r8, r5
 8017d2c:	bf08      	it	eq
 8017d2e:	f106 0e02 	addeq.w	lr, r6, #2
 8017d32:	e7c7      	b.n	8017cc4 <_strtol_l.isra.0+0x3c>
 8017d34:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017d38:	2f19      	cmp	r7, #25
 8017d3a:	d801      	bhi.n	8017d40 <_strtol_l.isra.0+0xb8>
 8017d3c:	3c37      	subs	r4, #55	; 0x37
 8017d3e:	e7e1      	b.n	8017d04 <_strtol_l.isra.0+0x7c>
 8017d40:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017d44:	2f19      	cmp	r7, #25
 8017d46:	d804      	bhi.n	8017d52 <_strtol_l.isra.0+0xca>
 8017d48:	3c57      	subs	r4, #87	; 0x57
 8017d4a:	e7db      	b.n	8017d04 <_strtol_l.isra.0+0x7c>
 8017d4c:	f04f 36ff 	mov.w	r6, #4294967295
 8017d50:	e7e4      	b.n	8017d1c <_strtol_l.isra.0+0x94>
 8017d52:	2e00      	cmp	r6, #0
 8017d54:	da05      	bge.n	8017d62 <_strtol_l.isra.0+0xda>
 8017d56:	2322      	movs	r3, #34	; 0x22
 8017d58:	6003      	str	r3, [r0, #0]
 8017d5a:	4665      	mov	r5, ip
 8017d5c:	b942      	cbnz	r2, 8017d70 <_strtol_l.isra.0+0xe8>
 8017d5e:	4628      	mov	r0, r5
 8017d60:	e79d      	b.n	8017c9e <_strtol_l.isra.0+0x16>
 8017d62:	f1b8 0f00 	cmp.w	r8, #0
 8017d66:	d000      	beq.n	8017d6a <_strtol_l.isra.0+0xe2>
 8017d68:	426d      	negs	r5, r5
 8017d6a:	2a00      	cmp	r2, #0
 8017d6c:	d0f7      	beq.n	8017d5e <_strtol_l.isra.0+0xd6>
 8017d6e:	b10e      	cbz	r6, 8017d74 <_strtol_l.isra.0+0xec>
 8017d70:	f10e 31ff 	add.w	r1, lr, #4294967295
 8017d74:	6011      	str	r1, [r2, #0]
 8017d76:	e7f2      	b.n	8017d5e <_strtol_l.isra.0+0xd6>
 8017d78:	2430      	movs	r4, #48	; 0x30
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d1b3      	bne.n	8017ce6 <_strtol_l.isra.0+0x5e>
 8017d7e:	2308      	movs	r3, #8
 8017d80:	e7b1      	b.n	8017ce6 <_strtol_l.isra.0+0x5e>
 8017d82:	2c30      	cmp	r4, #48	; 0x30
 8017d84:	d0a4      	beq.n	8017cd0 <_strtol_l.isra.0+0x48>
 8017d86:	230a      	movs	r3, #10
 8017d88:	e7ad      	b.n	8017ce6 <_strtol_l.isra.0+0x5e>
 8017d8a:	bf00      	nop
 8017d8c:	0801c6c9 	.word	0x0801c6c9

08017d90 <_strtol_r>:
 8017d90:	f7ff bf7a 	b.w	8017c88 <_strtol_l.isra.0>

08017d94 <quorem>:
 8017d94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d98:	6903      	ldr	r3, [r0, #16]
 8017d9a:	690c      	ldr	r4, [r1, #16]
 8017d9c:	42a3      	cmp	r3, r4
 8017d9e:	4607      	mov	r7, r0
 8017da0:	f2c0 8081 	blt.w	8017ea6 <quorem+0x112>
 8017da4:	3c01      	subs	r4, #1
 8017da6:	f101 0814 	add.w	r8, r1, #20
 8017daa:	f100 0514 	add.w	r5, r0, #20
 8017dae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017db2:	9301      	str	r3, [sp, #4]
 8017db4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017db8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017dbc:	3301      	adds	r3, #1
 8017dbe:	429a      	cmp	r2, r3
 8017dc0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017dc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017dc8:	fbb2 f6f3 	udiv	r6, r2, r3
 8017dcc:	d331      	bcc.n	8017e32 <quorem+0x9e>
 8017dce:	f04f 0e00 	mov.w	lr, #0
 8017dd2:	4640      	mov	r0, r8
 8017dd4:	46ac      	mov	ip, r5
 8017dd6:	46f2      	mov	sl, lr
 8017dd8:	f850 2b04 	ldr.w	r2, [r0], #4
 8017ddc:	b293      	uxth	r3, r2
 8017dde:	fb06 e303 	mla	r3, r6, r3, lr
 8017de2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017de6:	b29b      	uxth	r3, r3
 8017de8:	ebaa 0303 	sub.w	r3, sl, r3
 8017dec:	0c12      	lsrs	r2, r2, #16
 8017dee:	f8dc a000 	ldr.w	sl, [ip]
 8017df2:	fb06 e202 	mla	r2, r6, r2, lr
 8017df6:	fa13 f38a 	uxtah	r3, r3, sl
 8017dfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017dfe:	fa1f fa82 	uxth.w	sl, r2
 8017e02:	f8dc 2000 	ldr.w	r2, [ip]
 8017e06:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8017e0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017e0e:	b29b      	uxth	r3, r3
 8017e10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017e14:	4581      	cmp	r9, r0
 8017e16:	f84c 3b04 	str.w	r3, [ip], #4
 8017e1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017e1e:	d2db      	bcs.n	8017dd8 <quorem+0x44>
 8017e20:	f855 300b 	ldr.w	r3, [r5, fp]
 8017e24:	b92b      	cbnz	r3, 8017e32 <quorem+0x9e>
 8017e26:	9b01      	ldr	r3, [sp, #4]
 8017e28:	3b04      	subs	r3, #4
 8017e2a:	429d      	cmp	r5, r3
 8017e2c:	461a      	mov	r2, r3
 8017e2e:	d32e      	bcc.n	8017e8e <quorem+0xfa>
 8017e30:	613c      	str	r4, [r7, #16]
 8017e32:	4638      	mov	r0, r7
 8017e34:	f001 fc82 	bl	801973c <__mcmp>
 8017e38:	2800      	cmp	r0, #0
 8017e3a:	db24      	blt.n	8017e86 <quorem+0xf2>
 8017e3c:	3601      	adds	r6, #1
 8017e3e:	4628      	mov	r0, r5
 8017e40:	f04f 0c00 	mov.w	ip, #0
 8017e44:	f858 2b04 	ldr.w	r2, [r8], #4
 8017e48:	f8d0 e000 	ldr.w	lr, [r0]
 8017e4c:	b293      	uxth	r3, r2
 8017e4e:	ebac 0303 	sub.w	r3, ip, r3
 8017e52:	0c12      	lsrs	r2, r2, #16
 8017e54:	fa13 f38e 	uxtah	r3, r3, lr
 8017e58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017e5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017e60:	b29b      	uxth	r3, r3
 8017e62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017e66:	45c1      	cmp	r9, r8
 8017e68:	f840 3b04 	str.w	r3, [r0], #4
 8017e6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017e70:	d2e8      	bcs.n	8017e44 <quorem+0xb0>
 8017e72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017e76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017e7a:	b922      	cbnz	r2, 8017e86 <quorem+0xf2>
 8017e7c:	3b04      	subs	r3, #4
 8017e7e:	429d      	cmp	r5, r3
 8017e80:	461a      	mov	r2, r3
 8017e82:	d30a      	bcc.n	8017e9a <quorem+0x106>
 8017e84:	613c      	str	r4, [r7, #16]
 8017e86:	4630      	mov	r0, r6
 8017e88:	b003      	add	sp, #12
 8017e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e8e:	6812      	ldr	r2, [r2, #0]
 8017e90:	3b04      	subs	r3, #4
 8017e92:	2a00      	cmp	r2, #0
 8017e94:	d1cc      	bne.n	8017e30 <quorem+0x9c>
 8017e96:	3c01      	subs	r4, #1
 8017e98:	e7c7      	b.n	8017e2a <quorem+0x96>
 8017e9a:	6812      	ldr	r2, [r2, #0]
 8017e9c:	3b04      	subs	r3, #4
 8017e9e:	2a00      	cmp	r2, #0
 8017ea0:	d1f0      	bne.n	8017e84 <quorem+0xf0>
 8017ea2:	3c01      	subs	r4, #1
 8017ea4:	e7eb      	b.n	8017e7e <quorem+0xea>
 8017ea6:	2000      	movs	r0, #0
 8017ea8:	e7ee      	b.n	8017e88 <quorem+0xf4>
 8017eaa:	0000      	movs	r0, r0
 8017eac:	0000      	movs	r0, r0
	...

08017eb0 <_dtoa_r>:
 8017eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eb4:	ed2d 8b02 	vpush	{d8}
 8017eb8:	ec57 6b10 	vmov	r6, r7, d0
 8017ebc:	b095      	sub	sp, #84	; 0x54
 8017ebe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017ec0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017ec4:	9105      	str	r1, [sp, #20]
 8017ec6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8017eca:	4604      	mov	r4, r0
 8017ecc:	9209      	str	r2, [sp, #36]	; 0x24
 8017ece:	930f      	str	r3, [sp, #60]	; 0x3c
 8017ed0:	b975      	cbnz	r5, 8017ef0 <_dtoa_r+0x40>
 8017ed2:	2010      	movs	r0, #16
 8017ed4:	f7fe f8dc 	bl	8016090 <malloc>
 8017ed8:	4602      	mov	r2, r0
 8017eda:	6260      	str	r0, [r4, #36]	; 0x24
 8017edc:	b920      	cbnz	r0, 8017ee8 <_dtoa_r+0x38>
 8017ede:	4bb2      	ldr	r3, [pc, #712]	; (80181a8 <_dtoa_r+0x2f8>)
 8017ee0:	21ea      	movs	r1, #234	; 0xea
 8017ee2:	48b2      	ldr	r0, [pc, #712]	; (80181ac <_dtoa_r+0x2fc>)
 8017ee4:	f001 ffb0 	bl	8019e48 <__assert_func>
 8017ee8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017eec:	6005      	str	r5, [r0, #0]
 8017eee:	60c5      	str	r5, [r0, #12]
 8017ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ef2:	6819      	ldr	r1, [r3, #0]
 8017ef4:	b151      	cbz	r1, 8017f0c <_dtoa_r+0x5c>
 8017ef6:	685a      	ldr	r2, [r3, #4]
 8017ef8:	604a      	str	r2, [r1, #4]
 8017efa:	2301      	movs	r3, #1
 8017efc:	4093      	lsls	r3, r2
 8017efe:	608b      	str	r3, [r1, #8]
 8017f00:	4620      	mov	r0, r4
 8017f02:	f001 f993 	bl	801922c <_Bfree>
 8017f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017f08:	2200      	movs	r2, #0
 8017f0a:	601a      	str	r2, [r3, #0]
 8017f0c:	1e3b      	subs	r3, r7, #0
 8017f0e:	bfb9      	ittee	lt
 8017f10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017f14:	9303      	strlt	r3, [sp, #12]
 8017f16:	2300      	movge	r3, #0
 8017f18:	f8c8 3000 	strge.w	r3, [r8]
 8017f1c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017f20:	4ba3      	ldr	r3, [pc, #652]	; (80181b0 <_dtoa_r+0x300>)
 8017f22:	bfbc      	itt	lt
 8017f24:	2201      	movlt	r2, #1
 8017f26:	f8c8 2000 	strlt.w	r2, [r8]
 8017f2a:	ea33 0309 	bics.w	r3, r3, r9
 8017f2e:	d11b      	bne.n	8017f68 <_dtoa_r+0xb8>
 8017f30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017f32:	f242 730f 	movw	r3, #9999	; 0x270f
 8017f36:	6013      	str	r3, [r2, #0]
 8017f38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017f3c:	4333      	orrs	r3, r6
 8017f3e:	f000 857a 	beq.w	8018a36 <_dtoa_r+0xb86>
 8017f42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017f44:	b963      	cbnz	r3, 8017f60 <_dtoa_r+0xb0>
 8017f46:	4b9b      	ldr	r3, [pc, #620]	; (80181b4 <_dtoa_r+0x304>)
 8017f48:	e024      	b.n	8017f94 <_dtoa_r+0xe4>
 8017f4a:	4b9b      	ldr	r3, [pc, #620]	; (80181b8 <_dtoa_r+0x308>)
 8017f4c:	9300      	str	r3, [sp, #0]
 8017f4e:	3308      	adds	r3, #8
 8017f50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017f52:	6013      	str	r3, [r2, #0]
 8017f54:	9800      	ldr	r0, [sp, #0]
 8017f56:	b015      	add	sp, #84	; 0x54
 8017f58:	ecbd 8b02 	vpop	{d8}
 8017f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f60:	4b94      	ldr	r3, [pc, #592]	; (80181b4 <_dtoa_r+0x304>)
 8017f62:	9300      	str	r3, [sp, #0]
 8017f64:	3303      	adds	r3, #3
 8017f66:	e7f3      	b.n	8017f50 <_dtoa_r+0xa0>
 8017f68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017f6c:	2200      	movs	r2, #0
 8017f6e:	ec51 0b17 	vmov	r0, r1, d7
 8017f72:	2300      	movs	r3, #0
 8017f74:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8017f78:	f7e8 fda6 	bl	8000ac8 <__aeabi_dcmpeq>
 8017f7c:	4680      	mov	r8, r0
 8017f7e:	b158      	cbz	r0, 8017f98 <_dtoa_r+0xe8>
 8017f80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017f82:	2301      	movs	r3, #1
 8017f84:	6013      	str	r3, [r2, #0]
 8017f86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	f000 8551 	beq.w	8018a30 <_dtoa_r+0xb80>
 8017f8e:	488b      	ldr	r0, [pc, #556]	; (80181bc <_dtoa_r+0x30c>)
 8017f90:	6018      	str	r0, [r3, #0]
 8017f92:	1e43      	subs	r3, r0, #1
 8017f94:	9300      	str	r3, [sp, #0]
 8017f96:	e7dd      	b.n	8017f54 <_dtoa_r+0xa4>
 8017f98:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017f9c:	aa12      	add	r2, sp, #72	; 0x48
 8017f9e:	a913      	add	r1, sp, #76	; 0x4c
 8017fa0:	4620      	mov	r0, r4
 8017fa2:	f001 fceb 	bl	801997c <__d2b>
 8017fa6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017faa:	4683      	mov	fp, r0
 8017fac:	2d00      	cmp	r5, #0
 8017fae:	d07c      	beq.n	80180aa <_dtoa_r+0x1fa>
 8017fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017fb2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8017fb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017fba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8017fbe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017fc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017fc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017fca:	4b7d      	ldr	r3, [pc, #500]	; (80181c0 <_dtoa_r+0x310>)
 8017fcc:	2200      	movs	r2, #0
 8017fce:	4630      	mov	r0, r6
 8017fd0:	4639      	mov	r1, r7
 8017fd2:	f7e8 f959 	bl	8000288 <__aeabi_dsub>
 8017fd6:	a36e      	add	r3, pc, #440	; (adr r3, 8018190 <_dtoa_r+0x2e0>)
 8017fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fdc:	f7e8 fb0c 	bl	80005f8 <__aeabi_dmul>
 8017fe0:	a36d      	add	r3, pc, #436	; (adr r3, 8018198 <_dtoa_r+0x2e8>)
 8017fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fe6:	f7e8 f951 	bl	800028c <__adddf3>
 8017fea:	4606      	mov	r6, r0
 8017fec:	4628      	mov	r0, r5
 8017fee:	460f      	mov	r7, r1
 8017ff0:	f7e8 fa98 	bl	8000524 <__aeabi_i2d>
 8017ff4:	a36a      	add	r3, pc, #424	; (adr r3, 80181a0 <_dtoa_r+0x2f0>)
 8017ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ffa:	f7e8 fafd 	bl	80005f8 <__aeabi_dmul>
 8017ffe:	4602      	mov	r2, r0
 8018000:	460b      	mov	r3, r1
 8018002:	4630      	mov	r0, r6
 8018004:	4639      	mov	r1, r7
 8018006:	f7e8 f941 	bl	800028c <__adddf3>
 801800a:	4606      	mov	r6, r0
 801800c:	460f      	mov	r7, r1
 801800e:	f7e8 fda3 	bl	8000b58 <__aeabi_d2iz>
 8018012:	2200      	movs	r2, #0
 8018014:	4682      	mov	sl, r0
 8018016:	2300      	movs	r3, #0
 8018018:	4630      	mov	r0, r6
 801801a:	4639      	mov	r1, r7
 801801c:	f7e8 fd5e 	bl	8000adc <__aeabi_dcmplt>
 8018020:	b148      	cbz	r0, 8018036 <_dtoa_r+0x186>
 8018022:	4650      	mov	r0, sl
 8018024:	f7e8 fa7e 	bl	8000524 <__aeabi_i2d>
 8018028:	4632      	mov	r2, r6
 801802a:	463b      	mov	r3, r7
 801802c:	f7e8 fd4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8018030:	b908      	cbnz	r0, 8018036 <_dtoa_r+0x186>
 8018032:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018036:	f1ba 0f16 	cmp.w	sl, #22
 801803a:	d854      	bhi.n	80180e6 <_dtoa_r+0x236>
 801803c:	4b61      	ldr	r3, [pc, #388]	; (80181c4 <_dtoa_r+0x314>)
 801803e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018046:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801804a:	f7e8 fd47 	bl	8000adc <__aeabi_dcmplt>
 801804e:	2800      	cmp	r0, #0
 8018050:	d04b      	beq.n	80180ea <_dtoa_r+0x23a>
 8018052:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018056:	2300      	movs	r3, #0
 8018058:	930e      	str	r3, [sp, #56]	; 0x38
 801805a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801805c:	1b5d      	subs	r5, r3, r5
 801805e:	1e6b      	subs	r3, r5, #1
 8018060:	9304      	str	r3, [sp, #16]
 8018062:	bf43      	ittte	mi
 8018064:	2300      	movmi	r3, #0
 8018066:	f1c5 0801 	rsbmi	r8, r5, #1
 801806a:	9304      	strmi	r3, [sp, #16]
 801806c:	f04f 0800 	movpl.w	r8, #0
 8018070:	f1ba 0f00 	cmp.w	sl, #0
 8018074:	db3b      	blt.n	80180ee <_dtoa_r+0x23e>
 8018076:	9b04      	ldr	r3, [sp, #16]
 8018078:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801807c:	4453      	add	r3, sl
 801807e:	9304      	str	r3, [sp, #16]
 8018080:	2300      	movs	r3, #0
 8018082:	9306      	str	r3, [sp, #24]
 8018084:	9b05      	ldr	r3, [sp, #20]
 8018086:	2b09      	cmp	r3, #9
 8018088:	d869      	bhi.n	801815e <_dtoa_r+0x2ae>
 801808a:	2b05      	cmp	r3, #5
 801808c:	bfc4      	itt	gt
 801808e:	3b04      	subgt	r3, #4
 8018090:	9305      	strgt	r3, [sp, #20]
 8018092:	9b05      	ldr	r3, [sp, #20]
 8018094:	f1a3 0302 	sub.w	r3, r3, #2
 8018098:	bfcc      	ite	gt
 801809a:	2500      	movgt	r5, #0
 801809c:	2501      	movle	r5, #1
 801809e:	2b03      	cmp	r3, #3
 80180a0:	d869      	bhi.n	8018176 <_dtoa_r+0x2c6>
 80180a2:	e8df f003 	tbb	[pc, r3]
 80180a6:	4e2c      	.short	0x4e2c
 80180a8:	5a4c      	.short	0x5a4c
 80180aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80180ae:	441d      	add	r5, r3
 80180b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80180b4:	2b20      	cmp	r3, #32
 80180b6:	bfc1      	itttt	gt
 80180b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80180bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80180c0:	fa09 f303 	lslgt.w	r3, r9, r3
 80180c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80180c8:	bfda      	itte	le
 80180ca:	f1c3 0320 	rsble	r3, r3, #32
 80180ce:	fa06 f003 	lslle.w	r0, r6, r3
 80180d2:	4318      	orrgt	r0, r3
 80180d4:	f7e8 fa16 	bl	8000504 <__aeabi_ui2d>
 80180d8:	2301      	movs	r3, #1
 80180da:	4606      	mov	r6, r0
 80180dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80180e0:	3d01      	subs	r5, #1
 80180e2:	9310      	str	r3, [sp, #64]	; 0x40
 80180e4:	e771      	b.n	8017fca <_dtoa_r+0x11a>
 80180e6:	2301      	movs	r3, #1
 80180e8:	e7b6      	b.n	8018058 <_dtoa_r+0x1a8>
 80180ea:	900e      	str	r0, [sp, #56]	; 0x38
 80180ec:	e7b5      	b.n	801805a <_dtoa_r+0x1aa>
 80180ee:	f1ca 0300 	rsb	r3, sl, #0
 80180f2:	9306      	str	r3, [sp, #24]
 80180f4:	2300      	movs	r3, #0
 80180f6:	eba8 080a 	sub.w	r8, r8, sl
 80180fa:	930d      	str	r3, [sp, #52]	; 0x34
 80180fc:	e7c2      	b.n	8018084 <_dtoa_r+0x1d4>
 80180fe:	2300      	movs	r3, #0
 8018100:	9308      	str	r3, [sp, #32]
 8018102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018104:	2b00      	cmp	r3, #0
 8018106:	dc39      	bgt.n	801817c <_dtoa_r+0x2cc>
 8018108:	f04f 0901 	mov.w	r9, #1
 801810c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018110:	464b      	mov	r3, r9
 8018112:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8018116:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018118:	2200      	movs	r2, #0
 801811a:	6042      	str	r2, [r0, #4]
 801811c:	2204      	movs	r2, #4
 801811e:	f102 0614 	add.w	r6, r2, #20
 8018122:	429e      	cmp	r6, r3
 8018124:	6841      	ldr	r1, [r0, #4]
 8018126:	d92f      	bls.n	8018188 <_dtoa_r+0x2d8>
 8018128:	4620      	mov	r0, r4
 801812a:	f001 f83f 	bl	80191ac <_Balloc>
 801812e:	9000      	str	r0, [sp, #0]
 8018130:	2800      	cmp	r0, #0
 8018132:	d14b      	bne.n	80181cc <_dtoa_r+0x31c>
 8018134:	4b24      	ldr	r3, [pc, #144]	; (80181c8 <_dtoa_r+0x318>)
 8018136:	4602      	mov	r2, r0
 8018138:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801813c:	e6d1      	b.n	8017ee2 <_dtoa_r+0x32>
 801813e:	2301      	movs	r3, #1
 8018140:	e7de      	b.n	8018100 <_dtoa_r+0x250>
 8018142:	2300      	movs	r3, #0
 8018144:	9308      	str	r3, [sp, #32]
 8018146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018148:	eb0a 0903 	add.w	r9, sl, r3
 801814c:	f109 0301 	add.w	r3, r9, #1
 8018150:	2b01      	cmp	r3, #1
 8018152:	9301      	str	r3, [sp, #4]
 8018154:	bfb8      	it	lt
 8018156:	2301      	movlt	r3, #1
 8018158:	e7dd      	b.n	8018116 <_dtoa_r+0x266>
 801815a:	2301      	movs	r3, #1
 801815c:	e7f2      	b.n	8018144 <_dtoa_r+0x294>
 801815e:	2501      	movs	r5, #1
 8018160:	2300      	movs	r3, #0
 8018162:	9305      	str	r3, [sp, #20]
 8018164:	9508      	str	r5, [sp, #32]
 8018166:	f04f 39ff 	mov.w	r9, #4294967295
 801816a:	2200      	movs	r2, #0
 801816c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018170:	2312      	movs	r3, #18
 8018172:	9209      	str	r2, [sp, #36]	; 0x24
 8018174:	e7cf      	b.n	8018116 <_dtoa_r+0x266>
 8018176:	2301      	movs	r3, #1
 8018178:	9308      	str	r3, [sp, #32]
 801817a:	e7f4      	b.n	8018166 <_dtoa_r+0x2b6>
 801817c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018180:	f8cd 9004 	str.w	r9, [sp, #4]
 8018184:	464b      	mov	r3, r9
 8018186:	e7c6      	b.n	8018116 <_dtoa_r+0x266>
 8018188:	3101      	adds	r1, #1
 801818a:	6041      	str	r1, [r0, #4]
 801818c:	0052      	lsls	r2, r2, #1
 801818e:	e7c6      	b.n	801811e <_dtoa_r+0x26e>
 8018190:	636f4361 	.word	0x636f4361
 8018194:	3fd287a7 	.word	0x3fd287a7
 8018198:	8b60c8b3 	.word	0x8b60c8b3
 801819c:	3fc68a28 	.word	0x3fc68a28
 80181a0:	509f79fb 	.word	0x509f79fb
 80181a4:	3fd34413 	.word	0x3fd34413
 80181a8:	0801c7d6 	.word	0x0801c7d6
 80181ac:	0801c7ed 	.word	0x0801c7ed
 80181b0:	7ff00000 	.word	0x7ff00000
 80181b4:	0801c7d2 	.word	0x0801c7d2
 80181b8:	0801c7c9 	.word	0x0801c7c9
 80181bc:	0801c64d 	.word	0x0801c64d
 80181c0:	3ff80000 	.word	0x3ff80000
 80181c4:	0801c968 	.word	0x0801c968
 80181c8:	0801c84c 	.word	0x0801c84c
 80181cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80181ce:	9a00      	ldr	r2, [sp, #0]
 80181d0:	601a      	str	r2, [r3, #0]
 80181d2:	9b01      	ldr	r3, [sp, #4]
 80181d4:	2b0e      	cmp	r3, #14
 80181d6:	f200 80ad 	bhi.w	8018334 <_dtoa_r+0x484>
 80181da:	2d00      	cmp	r5, #0
 80181dc:	f000 80aa 	beq.w	8018334 <_dtoa_r+0x484>
 80181e0:	f1ba 0f00 	cmp.w	sl, #0
 80181e4:	dd36      	ble.n	8018254 <_dtoa_r+0x3a4>
 80181e6:	4ac3      	ldr	r2, [pc, #780]	; (80184f4 <_dtoa_r+0x644>)
 80181e8:	f00a 030f 	and.w	r3, sl, #15
 80181ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80181f0:	ed93 7b00 	vldr	d7, [r3]
 80181f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80181f8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80181fc:	eeb0 8a47 	vmov.f32	s16, s14
 8018200:	eef0 8a67 	vmov.f32	s17, s15
 8018204:	d016      	beq.n	8018234 <_dtoa_r+0x384>
 8018206:	4bbc      	ldr	r3, [pc, #752]	; (80184f8 <_dtoa_r+0x648>)
 8018208:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801820c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018210:	f7e8 fb1c 	bl	800084c <__aeabi_ddiv>
 8018214:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018218:	f007 070f 	and.w	r7, r7, #15
 801821c:	2503      	movs	r5, #3
 801821e:	4eb6      	ldr	r6, [pc, #728]	; (80184f8 <_dtoa_r+0x648>)
 8018220:	b957      	cbnz	r7, 8018238 <_dtoa_r+0x388>
 8018222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018226:	ec53 2b18 	vmov	r2, r3, d8
 801822a:	f7e8 fb0f 	bl	800084c <__aeabi_ddiv>
 801822e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018232:	e029      	b.n	8018288 <_dtoa_r+0x3d8>
 8018234:	2502      	movs	r5, #2
 8018236:	e7f2      	b.n	801821e <_dtoa_r+0x36e>
 8018238:	07f9      	lsls	r1, r7, #31
 801823a:	d508      	bpl.n	801824e <_dtoa_r+0x39e>
 801823c:	ec51 0b18 	vmov	r0, r1, d8
 8018240:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018244:	f7e8 f9d8 	bl	80005f8 <__aeabi_dmul>
 8018248:	ec41 0b18 	vmov	d8, r0, r1
 801824c:	3501      	adds	r5, #1
 801824e:	107f      	asrs	r7, r7, #1
 8018250:	3608      	adds	r6, #8
 8018252:	e7e5      	b.n	8018220 <_dtoa_r+0x370>
 8018254:	f000 80a6 	beq.w	80183a4 <_dtoa_r+0x4f4>
 8018258:	f1ca 0600 	rsb	r6, sl, #0
 801825c:	4ba5      	ldr	r3, [pc, #660]	; (80184f4 <_dtoa_r+0x644>)
 801825e:	4fa6      	ldr	r7, [pc, #664]	; (80184f8 <_dtoa_r+0x648>)
 8018260:	f006 020f 	and.w	r2, r6, #15
 8018264:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801826c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018270:	f7e8 f9c2 	bl	80005f8 <__aeabi_dmul>
 8018274:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018278:	1136      	asrs	r6, r6, #4
 801827a:	2300      	movs	r3, #0
 801827c:	2502      	movs	r5, #2
 801827e:	2e00      	cmp	r6, #0
 8018280:	f040 8085 	bne.w	801838e <_dtoa_r+0x4de>
 8018284:	2b00      	cmp	r3, #0
 8018286:	d1d2      	bne.n	801822e <_dtoa_r+0x37e>
 8018288:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801828a:	2b00      	cmp	r3, #0
 801828c:	f000 808c 	beq.w	80183a8 <_dtoa_r+0x4f8>
 8018290:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018294:	4b99      	ldr	r3, [pc, #612]	; (80184fc <_dtoa_r+0x64c>)
 8018296:	2200      	movs	r2, #0
 8018298:	4630      	mov	r0, r6
 801829a:	4639      	mov	r1, r7
 801829c:	f7e8 fc1e 	bl	8000adc <__aeabi_dcmplt>
 80182a0:	2800      	cmp	r0, #0
 80182a2:	f000 8081 	beq.w	80183a8 <_dtoa_r+0x4f8>
 80182a6:	9b01      	ldr	r3, [sp, #4]
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d07d      	beq.n	80183a8 <_dtoa_r+0x4f8>
 80182ac:	f1b9 0f00 	cmp.w	r9, #0
 80182b0:	dd3c      	ble.n	801832c <_dtoa_r+0x47c>
 80182b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80182b6:	9307      	str	r3, [sp, #28]
 80182b8:	2200      	movs	r2, #0
 80182ba:	4b91      	ldr	r3, [pc, #580]	; (8018500 <_dtoa_r+0x650>)
 80182bc:	4630      	mov	r0, r6
 80182be:	4639      	mov	r1, r7
 80182c0:	f7e8 f99a 	bl	80005f8 <__aeabi_dmul>
 80182c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80182c8:	3501      	adds	r5, #1
 80182ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80182ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80182d2:	4628      	mov	r0, r5
 80182d4:	f7e8 f926 	bl	8000524 <__aeabi_i2d>
 80182d8:	4632      	mov	r2, r6
 80182da:	463b      	mov	r3, r7
 80182dc:	f7e8 f98c 	bl	80005f8 <__aeabi_dmul>
 80182e0:	4b88      	ldr	r3, [pc, #544]	; (8018504 <_dtoa_r+0x654>)
 80182e2:	2200      	movs	r2, #0
 80182e4:	f7e7 ffd2 	bl	800028c <__adddf3>
 80182e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80182ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80182f0:	9303      	str	r3, [sp, #12]
 80182f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d15c      	bne.n	80183b2 <_dtoa_r+0x502>
 80182f8:	4b83      	ldr	r3, [pc, #524]	; (8018508 <_dtoa_r+0x658>)
 80182fa:	2200      	movs	r2, #0
 80182fc:	4630      	mov	r0, r6
 80182fe:	4639      	mov	r1, r7
 8018300:	f7e7 ffc2 	bl	8000288 <__aeabi_dsub>
 8018304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018308:	4606      	mov	r6, r0
 801830a:	460f      	mov	r7, r1
 801830c:	f7e8 fc04 	bl	8000b18 <__aeabi_dcmpgt>
 8018310:	2800      	cmp	r0, #0
 8018312:	f040 8296 	bne.w	8018842 <_dtoa_r+0x992>
 8018316:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801831a:	4630      	mov	r0, r6
 801831c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018320:	4639      	mov	r1, r7
 8018322:	f7e8 fbdb 	bl	8000adc <__aeabi_dcmplt>
 8018326:	2800      	cmp	r0, #0
 8018328:	f040 8288 	bne.w	801883c <_dtoa_r+0x98c>
 801832c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018330:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018334:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018336:	2b00      	cmp	r3, #0
 8018338:	f2c0 8158 	blt.w	80185ec <_dtoa_r+0x73c>
 801833c:	f1ba 0f0e 	cmp.w	sl, #14
 8018340:	f300 8154 	bgt.w	80185ec <_dtoa_r+0x73c>
 8018344:	4b6b      	ldr	r3, [pc, #428]	; (80184f4 <_dtoa_r+0x644>)
 8018346:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801834a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801834e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018350:	2b00      	cmp	r3, #0
 8018352:	f280 80e3 	bge.w	801851c <_dtoa_r+0x66c>
 8018356:	9b01      	ldr	r3, [sp, #4]
 8018358:	2b00      	cmp	r3, #0
 801835a:	f300 80df 	bgt.w	801851c <_dtoa_r+0x66c>
 801835e:	f040 826d 	bne.w	801883c <_dtoa_r+0x98c>
 8018362:	4b69      	ldr	r3, [pc, #420]	; (8018508 <_dtoa_r+0x658>)
 8018364:	2200      	movs	r2, #0
 8018366:	4640      	mov	r0, r8
 8018368:	4649      	mov	r1, r9
 801836a:	f7e8 f945 	bl	80005f8 <__aeabi_dmul>
 801836e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018372:	f7e8 fbc7 	bl	8000b04 <__aeabi_dcmpge>
 8018376:	9e01      	ldr	r6, [sp, #4]
 8018378:	4637      	mov	r7, r6
 801837a:	2800      	cmp	r0, #0
 801837c:	f040 8243 	bne.w	8018806 <_dtoa_r+0x956>
 8018380:	9d00      	ldr	r5, [sp, #0]
 8018382:	2331      	movs	r3, #49	; 0x31
 8018384:	f805 3b01 	strb.w	r3, [r5], #1
 8018388:	f10a 0a01 	add.w	sl, sl, #1
 801838c:	e23f      	b.n	801880e <_dtoa_r+0x95e>
 801838e:	07f2      	lsls	r2, r6, #31
 8018390:	d505      	bpl.n	801839e <_dtoa_r+0x4ee>
 8018392:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018396:	f7e8 f92f 	bl	80005f8 <__aeabi_dmul>
 801839a:	3501      	adds	r5, #1
 801839c:	2301      	movs	r3, #1
 801839e:	1076      	asrs	r6, r6, #1
 80183a0:	3708      	adds	r7, #8
 80183a2:	e76c      	b.n	801827e <_dtoa_r+0x3ce>
 80183a4:	2502      	movs	r5, #2
 80183a6:	e76f      	b.n	8018288 <_dtoa_r+0x3d8>
 80183a8:	9b01      	ldr	r3, [sp, #4]
 80183aa:	f8cd a01c 	str.w	sl, [sp, #28]
 80183ae:	930c      	str	r3, [sp, #48]	; 0x30
 80183b0:	e78d      	b.n	80182ce <_dtoa_r+0x41e>
 80183b2:	9900      	ldr	r1, [sp, #0]
 80183b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80183b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80183b8:	4b4e      	ldr	r3, [pc, #312]	; (80184f4 <_dtoa_r+0x644>)
 80183ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80183be:	4401      	add	r1, r0
 80183c0:	9102      	str	r1, [sp, #8]
 80183c2:	9908      	ldr	r1, [sp, #32]
 80183c4:	eeb0 8a47 	vmov.f32	s16, s14
 80183c8:	eef0 8a67 	vmov.f32	s17, s15
 80183cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80183d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80183d4:	2900      	cmp	r1, #0
 80183d6:	d045      	beq.n	8018464 <_dtoa_r+0x5b4>
 80183d8:	494c      	ldr	r1, [pc, #304]	; (801850c <_dtoa_r+0x65c>)
 80183da:	2000      	movs	r0, #0
 80183dc:	f7e8 fa36 	bl	800084c <__aeabi_ddiv>
 80183e0:	ec53 2b18 	vmov	r2, r3, d8
 80183e4:	f7e7 ff50 	bl	8000288 <__aeabi_dsub>
 80183e8:	9d00      	ldr	r5, [sp, #0]
 80183ea:	ec41 0b18 	vmov	d8, r0, r1
 80183ee:	4639      	mov	r1, r7
 80183f0:	4630      	mov	r0, r6
 80183f2:	f7e8 fbb1 	bl	8000b58 <__aeabi_d2iz>
 80183f6:	900c      	str	r0, [sp, #48]	; 0x30
 80183f8:	f7e8 f894 	bl	8000524 <__aeabi_i2d>
 80183fc:	4602      	mov	r2, r0
 80183fe:	460b      	mov	r3, r1
 8018400:	4630      	mov	r0, r6
 8018402:	4639      	mov	r1, r7
 8018404:	f7e7 ff40 	bl	8000288 <__aeabi_dsub>
 8018408:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801840a:	3330      	adds	r3, #48	; 0x30
 801840c:	f805 3b01 	strb.w	r3, [r5], #1
 8018410:	ec53 2b18 	vmov	r2, r3, d8
 8018414:	4606      	mov	r6, r0
 8018416:	460f      	mov	r7, r1
 8018418:	f7e8 fb60 	bl	8000adc <__aeabi_dcmplt>
 801841c:	2800      	cmp	r0, #0
 801841e:	d165      	bne.n	80184ec <_dtoa_r+0x63c>
 8018420:	4632      	mov	r2, r6
 8018422:	463b      	mov	r3, r7
 8018424:	4935      	ldr	r1, [pc, #212]	; (80184fc <_dtoa_r+0x64c>)
 8018426:	2000      	movs	r0, #0
 8018428:	f7e7 ff2e 	bl	8000288 <__aeabi_dsub>
 801842c:	ec53 2b18 	vmov	r2, r3, d8
 8018430:	f7e8 fb54 	bl	8000adc <__aeabi_dcmplt>
 8018434:	2800      	cmp	r0, #0
 8018436:	f040 80b9 	bne.w	80185ac <_dtoa_r+0x6fc>
 801843a:	9b02      	ldr	r3, [sp, #8]
 801843c:	429d      	cmp	r5, r3
 801843e:	f43f af75 	beq.w	801832c <_dtoa_r+0x47c>
 8018442:	4b2f      	ldr	r3, [pc, #188]	; (8018500 <_dtoa_r+0x650>)
 8018444:	ec51 0b18 	vmov	r0, r1, d8
 8018448:	2200      	movs	r2, #0
 801844a:	f7e8 f8d5 	bl	80005f8 <__aeabi_dmul>
 801844e:	4b2c      	ldr	r3, [pc, #176]	; (8018500 <_dtoa_r+0x650>)
 8018450:	ec41 0b18 	vmov	d8, r0, r1
 8018454:	2200      	movs	r2, #0
 8018456:	4630      	mov	r0, r6
 8018458:	4639      	mov	r1, r7
 801845a:	f7e8 f8cd 	bl	80005f8 <__aeabi_dmul>
 801845e:	4606      	mov	r6, r0
 8018460:	460f      	mov	r7, r1
 8018462:	e7c4      	b.n	80183ee <_dtoa_r+0x53e>
 8018464:	ec51 0b17 	vmov	r0, r1, d7
 8018468:	f7e8 f8c6 	bl	80005f8 <__aeabi_dmul>
 801846c:	9b02      	ldr	r3, [sp, #8]
 801846e:	9d00      	ldr	r5, [sp, #0]
 8018470:	930c      	str	r3, [sp, #48]	; 0x30
 8018472:	ec41 0b18 	vmov	d8, r0, r1
 8018476:	4639      	mov	r1, r7
 8018478:	4630      	mov	r0, r6
 801847a:	f7e8 fb6d 	bl	8000b58 <__aeabi_d2iz>
 801847e:	9011      	str	r0, [sp, #68]	; 0x44
 8018480:	f7e8 f850 	bl	8000524 <__aeabi_i2d>
 8018484:	4602      	mov	r2, r0
 8018486:	460b      	mov	r3, r1
 8018488:	4630      	mov	r0, r6
 801848a:	4639      	mov	r1, r7
 801848c:	f7e7 fefc 	bl	8000288 <__aeabi_dsub>
 8018490:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018492:	3330      	adds	r3, #48	; 0x30
 8018494:	f805 3b01 	strb.w	r3, [r5], #1
 8018498:	9b02      	ldr	r3, [sp, #8]
 801849a:	429d      	cmp	r5, r3
 801849c:	4606      	mov	r6, r0
 801849e:	460f      	mov	r7, r1
 80184a0:	f04f 0200 	mov.w	r2, #0
 80184a4:	d134      	bne.n	8018510 <_dtoa_r+0x660>
 80184a6:	4b19      	ldr	r3, [pc, #100]	; (801850c <_dtoa_r+0x65c>)
 80184a8:	ec51 0b18 	vmov	r0, r1, d8
 80184ac:	f7e7 feee 	bl	800028c <__adddf3>
 80184b0:	4602      	mov	r2, r0
 80184b2:	460b      	mov	r3, r1
 80184b4:	4630      	mov	r0, r6
 80184b6:	4639      	mov	r1, r7
 80184b8:	f7e8 fb2e 	bl	8000b18 <__aeabi_dcmpgt>
 80184bc:	2800      	cmp	r0, #0
 80184be:	d175      	bne.n	80185ac <_dtoa_r+0x6fc>
 80184c0:	ec53 2b18 	vmov	r2, r3, d8
 80184c4:	4911      	ldr	r1, [pc, #68]	; (801850c <_dtoa_r+0x65c>)
 80184c6:	2000      	movs	r0, #0
 80184c8:	f7e7 fede 	bl	8000288 <__aeabi_dsub>
 80184cc:	4602      	mov	r2, r0
 80184ce:	460b      	mov	r3, r1
 80184d0:	4630      	mov	r0, r6
 80184d2:	4639      	mov	r1, r7
 80184d4:	f7e8 fb02 	bl	8000adc <__aeabi_dcmplt>
 80184d8:	2800      	cmp	r0, #0
 80184da:	f43f af27 	beq.w	801832c <_dtoa_r+0x47c>
 80184de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80184e0:	1e6b      	subs	r3, r5, #1
 80184e2:	930c      	str	r3, [sp, #48]	; 0x30
 80184e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80184e8:	2b30      	cmp	r3, #48	; 0x30
 80184ea:	d0f8      	beq.n	80184de <_dtoa_r+0x62e>
 80184ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80184f0:	e04a      	b.n	8018588 <_dtoa_r+0x6d8>
 80184f2:	bf00      	nop
 80184f4:	0801c968 	.word	0x0801c968
 80184f8:	0801c940 	.word	0x0801c940
 80184fc:	3ff00000 	.word	0x3ff00000
 8018500:	40240000 	.word	0x40240000
 8018504:	401c0000 	.word	0x401c0000
 8018508:	40140000 	.word	0x40140000
 801850c:	3fe00000 	.word	0x3fe00000
 8018510:	4baf      	ldr	r3, [pc, #700]	; (80187d0 <_dtoa_r+0x920>)
 8018512:	f7e8 f871 	bl	80005f8 <__aeabi_dmul>
 8018516:	4606      	mov	r6, r0
 8018518:	460f      	mov	r7, r1
 801851a:	e7ac      	b.n	8018476 <_dtoa_r+0x5c6>
 801851c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018520:	9d00      	ldr	r5, [sp, #0]
 8018522:	4642      	mov	r2, r8
 8018524:	464b      	mov	r3, r9
 8018526:	4630      	mov	r0, r6
 8018528:	4639      	mov	r1, r7
 801852a:	f7e8 f98f 	bl	800084c <__aeabi_ddiv>
 801852e:	f7e8 fb13 	bl	8000b58 <__aeabi_d2iz>
 8018532:	9002      	str	r0, [sp, #8]
 8018534:	f7e7 fff6 	bl	8000524 <__aeabi_i2d>
 8018538:	4642      	mov	r2, r8
 801853a:	464b      	mov	r3, r9
 801853c:	f7e8 f85c 	bl	80005f8 <__aeabi_dmul>
 8018540:	4602      	mov	r2, r0
 8018542:	460b      	mov	r3, r1
 8018544:	4630      	mov	r0, r6
 8018546:	4639      	mov	r1, r7
 8018548:	f7e7 fe9e 	bl	8000288 <__aeabi_dsub>
 801854c:	9e02      	ldr	r6, [sp, #8]
 801854e:	9f01      	ldr	r7, [sp, #4]
 8018550:	3630      	adds	r6, #48	; 0x30
 8018552:	f805 6b01 	strb.w	r6, [r5], #1
 8018556:	9e00      	ldr	r6, [sp, #0]
 8018558:	1bae      	subs	r6, r5, r6
 801855a:	42b7      	cmp	r7, r6
 801855c:	4602      	mov	r2, r0
 801855e:	460b      	mov	r3, r1
 8018560:	d137      	bne.n	80185d2 <_dtoa_r+0x722>
 8018562:	f7e7 fe93 	bl	800028c <__adddf3>
 8018566:	4642      	mov	r2, r8
 8018568:	464b      	mov	r3, r9
 801856a:	4606      	mov	r6, r0
 801856c:	460f      	mov	r7, r1
 801856e:	f7e8 fad3 	bl	8000b18 <__aeabi_dcmpgt>
 8018572:	b9c8      	cbnz	r0, 80185a8 <_dtoa_r+0x6f8>
 8018574:	4642      	mov	r2, r8
 8018576:	464b      	mov	r3, r9
 8018578:	4630      	mov	r0, r6
 801857a:	4639      	mov	r1, r7
 801857c:	f7e8 faa4 	bl	8000ac8 <__aeabi_dcmpeq>
 8018580:	b110      	cbz	r0, 8018588 <_dtoa_r+0x6d8>
 8018582:	9b02      	ldr	r3, [sp, #8]
 8018584:	07d9      	lsls	r1, r3, #31
 8018586:	d40f      	bmi.n	80185a8 <_dtoa_r+0x6f8>
 8018588:	4620      	mov	r0, r4
 801858a:	4659      	mov	r1, fp
 801858c:	f000 fe4e 	bl	801922c <_Bfree>
 8018590:	2300      	movs	r3, #0
 8018592:	702b      	strb	r3, [r5, #0]
 8018594:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018596:	f10a 0001 	add.w	r0, sl, #1
 801859a:	6018      	str	r0, [r3, #0]
 801859c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801859e:	2b00      	cmp	r3, #0
 80185a0:	f43f acd8 	beq.w	8017f54 <_dtoa_r+0xa4>
 80185a4:	601d      	str	r5, [r3, #0]
 80185a6:	e4d5      	b.n	8017f54 <_dtoa_r+0xa4>
 80185a8:	f8cd a01c 	str.w	sl, [sp, #28]
 80185ac:	462b      	mov	r3, r5
 80185ae:	461d      	mov	r5, r3
 80185b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80185b4:	2a39      	cmp	r2, #57	; 0x39
 80185b6:	d108      	bne.n	80185ca <_dtoa_r+0x71a>
 80185b8:	9a00      	ldr	r2, [sp, #0]
 80185ba:	429a      	cmp	r2, r3
 80185bc:	d1f7      	bne.n	80185ae <_dtoa_r+0x6fe>
 80185be:	9a07      	ldr	r2, [sp, #28]
 80185c0:	9900      	ldr	r1, [sp, #0]
 80185c2:	3201      	adds	r2, #1
 80185c4:	9207      	str	r2, [sp, #28]
 80185c6:	2230      	movs	r2, #48	; 0x30
 80185c8:	700a      	strb	r2, [r1, #0]
 80185ca:	781a      	ldrb	r2, [r3, #0]
 80185cc:	3201      	adds	r2, #1
 80185ce:	701a      	strb	r2, [r3, #0]
 80185d0:	e78c      	b.n	80184ec <_dtoa_r+0x63c>
 80185d2:	4b7f      	ldr	r3, [pc, #508]	; (80187d0 <_dtoa_r+0x920>)
 80185d4:	2200      	movs	r2, #0
 80185d6:	f7e8 f80f 	bl	80005f8 <__aeabi_dmul>
 80185da:	2200      	movs	r2, #0
 80185dc:	2300      	movs	r3, #0
 80185de:	4606      	mov	r6, r0
 80185e0:	460f      	mov	r7, r1
 80185e2:	f7e8 fa71 	bl	8000ac8 <__aeabi_dcmpeq>
 80185e6:	2800      	cmp	r0, #0
 80185e8:	d09b      	beq.n	8018522 <_dtoa_r+0x672>
 80185ea:	e7cd      	b.n	8018588 <_dtoa_r+0x6d8>
 80185ec:	9a08      	ldr	r2, [sp, #32]
 80185ee:	2a00      	cmp	r2, #0
 80185f0:	f000 80c4 	beq.w	801877c <_dtoa_r+0x8cc>
 80185f4:	9a05      	ldr	r2, [sp, #20]
 80185f6:	2a01      	cmp	r2, #1
 80185f8:	f300 80a8 	bgt.w	801874c <_dtoa_r+0x89c>
 80185fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80185fe:	2a00      	cmp	r2, #0
 8018600:	f000 80a0 	beq.w	8018744 <_dtoa_r+0x894>
 8018604:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018608:	9e06      	ldr	r6, [sp, #24]
 801860a:	4645      	mov	r5, r8
 801860c:	9a04      	ldr	r2, [sp, #16]
 801860e:	2101      	movs	r1, #1
 8018610:	441a      	add	r2, r3
 8018612:	4620      	mov	r0, r4
 8018614:	4498      	add	r8, r3
 8018616:	9204      	str	r2, [sp, #16]
 8018618:	f000 ff0e 	bl	8019438 <__i2b>
 801861c:	4607      	mov	r7, r0
 801861e:	2d00      	cmp	r5, #0
 8018620:	dd0b      	ble.n	801863a <_dtoa_r+0x78a>
 8018622:	9b04      	ldr	r3, [sp, #16]
 8018624:	2b00      	cmp	r3, #0
 8018626:	dd08      	ble.n	801863a <_dtoa_r+0x78a>
 8018628:	42ab      	cmp	r3, r5
 801862a:	9a04      	ldr	r2, [sp, #16]
 801862c:	bfa8      	it	ge
 801862e:	462b      	movge	r3, r5
 8018630:	eba8 0803 	sub.w	r8, r8, r3
 8018634:	1aed      	subs	r5, r5, r3
 8018636:	1ad3      	subs	r3, r2, r3
 8018638:	9304      	str	r3, [sp, #16]
 801863a:	9b06      	ldr	r3, [sp, #24]
 801863c:	b1fb      	cbz	r3, 801867e <_dtoa_r+0x7ce>
 801863e:	9b08      	ldr	r3, [sp, #32]
 8018640:	2b00      	cmp	r3, #0
 8018642:	f000 809f 	beq.w	8018784 <_dtoa_r+0x8d4>
 8018646:	2e00      	cmp	r6, #0
 8018648:	dd11      	ble.n	801866e <_dtoa_r+0x7be>
 801864a:	4639      	mov	r1, r7
 801864c:	4632      	mov	r2, r6
 801864e:	4620      	mov	r0, r4
 8018650:	f000 ffae 	bl	80195b0 <__pow5mult>
 8018654:	465a      	mov	r2, fp
 8018656:	4601      	mov	r1, r0
 8018658:	4607      	mov	r7, r0
 801865a:	4620      	mov	r0, r4
 801865c:	f000 ff02 	bl	8019464 <__multiply>
 8018660:	4659      	mov	r1, fp
 8018662:	9007      	str	r0, [sp, #28]
 8018664:	4620      	mov	r0, r4
 8018666:	f000 fde1 	bl	801922c <_Bfree>
 801866a:	9b07      	ldr	r3, [sp, #28]
 801866c:	469b      	mov	fp, r3
 801866e:	9b06      	ldr	r3, [sp, #24]
 8018670:	1b9a      	subs	r2, r3, r6
 8018672:	d004      	beq.n	801867e <_dtoa_r+0x7ce>
 8018674:	4659      	mov	r1, fp
 8018676:	4620      	mov	r0, r4
 8018678:	f000 ff9a 	bl	80195b0 <__pow5mult>
 801867c:	4683      	mov	fp, r0
 801867e:	2101      	movs	r1, #1
 8018680:	4620      	mov	r0, r4
 8018682:	f000 fed9 	bl	8019438 <__i2b>
 8018686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018688:	2b00      	cmp	r3, #0
 801868a:	4606      	mov	r6, r0
 801868c:	dd7c      	ble.n	8018788 <_dtoa_r+0x8d8>
 801868e:	461a      	mov	r2, r3
 8018690:	4601      	mov	r1, r0
 8018692:	4620      	mov	r0, r4
 8018694:	f000 ff8c 	bl	80195b0 <__pow5mult>
 8018698:	9b05      	ldr	r3, [sp, #20]
 801869a:	2b01      	cmp	r3, #1
 801869c:	4606      	mov	r6, r0
 801869e:	dd76      	ble.n	801878e <_dtoa_r+0x8de>
 80186a0:	2300      	movs	r3, #0
 80186a2:	9306      	str	r3, [sp, #24]
 80186a4:	6933      	ldr	r3, [r6, #16]
 80186a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80186aa:	6918      	ldr	r0, [r3, #16]
 80186ac:	f000 fe74 	bl	8019398 <__hi0bits>
 80186b0:	f1c0 0020 	rsb	r0, r0, #32
 80186b4:	9b04      	ldr	r3, [sp, #16]
 80186b6:	4418      	add	r0, r3
 80186b8:	f010 001f 	ands.w	r0, r0, #31
 80186bc:	f000 8086 	beq.w	80187cc <_dtoa_r+0x91c>
 80186c0:	f1c0 0320 	rsb	r3, r0, #32
 80186c4:	2b04      	cmp	r3, #4
 80186c6:	dd7f      	ble.n	80187c8 <_dtoa_r+0x918>
 80186c8:	f1c0 001c 	rsb	r0, r0, #28
 80186cc:	9b04      	ldr	r3, [sp, #16]
 80186ce:	4403      	add	r3, r0
 80186d0:	4480      	add	r8, r0
 80186d2:	4405      	add	r5, r0
 80186d4:	9304      	str	r3, [sp, #16]
 80186d6:	f1b8 0f00 	cmp.w	r8, #0
 80186da:	dd05      	ble.n	80186e8 <_dtoa_r+0x838>
 80186dc:	4659      	mov	r1, fp
 80186de:	4642      	mov	r2, r8
 80186e0:	4620      	mov	r0, r4
 80186e2:	f000 ffbf 	bl	8019664 <__lshift>
 80186e6:	4683      	mov	fp, r0
 80186e8:	9b04      	ldr	r3, [sp, #16]
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	dd05      	ble.n	80186fa <_dtoa_r+0x84a>
 80186ee:	4631      	mov	r1, r6
 80186f0:	461a      	mov	r2, r3
 80186f2:	4620      	mov	r0, r4
 80186f4:	f000 ffb6 	bl	8019664 <__lshift>
 80186f8:	4606      	mov	r6, r0
 80186fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d069      	beq.n	80187d4 <_dtoa_r+0x924>
 8018700:	4631      	mov	r1, r6
 8018702:	4658      	mov	r0, fp
 8018704:	f001 f81a 	bl	801973c <__mcmp>
 8018708:	2800      	cmp	r0, #0
 801870a:	da63      	bge.n	80187d4 <_dtoa_r+0x924>
 801870c:	2300      	movs	r3, #0
 801870e:	4659      	mov	r1, fp
 8018710:	220a      	movs	r2, #10
 8018712:	4620      	mov	r0, r4
 8018714:	f000 fdac 	bl	8019270 <__multadd>
 8018718:	9b08      	ldr	r3, [sp, #32]
 801871a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801871e:	4683      	mov	fp, r0
 8018720:	2b00      	cmp	r3, #0
 8018722:	f000 818f 	beq.w	8018a44 <_dtoa_r+0xb94>
 8018726:	4639      	mov	r1, r7
 8018728:	2300      	movs	r3, #0
 801872a:	220a      	movs	r2, #10
 801872c:	4620      	mov	r0, r4
 801872e:	f000 fd9f 	bl	8019270 <__multadd>
 8018732:	f1b9 0f00 	cmp.w	r9, #0
 8018736:	4607      	mov	r7, r0
 8018738:	f300 808e 	bgt.w	8018858 <_dtoa_r+0x9a8>
 801873c:	9b05      	ldr	r3, [sp, #20]
 801873e:	2b02      	cmp	r3, #2
 8018740:	dc50      	bgt.n	80187e4 <_dtoa_r+0x934>
 8018742:	e089      	b.n	8018858 <_dtoa_r+0x9a8>
 8018744:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018746:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801874a:	e75d      	b.n	8018608 <_dtoa_r+0x758>
 801874c:	9b01      	ldr	r3, [sp, #4]
 801874e:	1e5e      	subs	r6, r3, #1
 8018750:	9b06      	ldr	r3, [sp, #24]
 8018752:	42b3      	cmp	r3, r6
 8018754:	bfbf      	itttt	lt
 8018756:	9b06      	ldrlt	r3, [sp, #24]
 8018758:	9606      	strlt	r6, [sp, #24]
 801875a:	1af2      	sublt	r2, r6, r3
 801875c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801875e:	bfb6      	itet	lt
 8018760:	189b      	addlt	r3, r3, r2
 8018762:	1b9e      	subge	r6, r3, r6
 8018764:	930d      	strlt	r3, [sp, #52]	; 0x34
 8018766:	9b01      	ldr	r3, [sp, #4]
 8018768:	bfb8      	it	lt
 801876a:	2600      	movlt	r6, #0
 801876c:	2b00      	cmp	r3, #0
 801876e:	bfb5      	itete	lt
 8018770:	eba8 0503 	sublt.w	r5, r8, r3
 8018774:	9b01      	ldrge	r3, [sp, #4]
 8018776:	2300      	movlt	r3, #0
 8018778:	4645      	movge	r5, r8
 801877a:	e747      	b.n	801860c <_dtoa_r+0x75c>
 801877c:	9e06      	ldr	r6, [sp, #24]
 801877e:	9f08      	ldr	r7, [sp, #32]
 8018780:	4645      	mov	r5, r8
 8018782:	e74c      	b.n	801861e <_dtoa_r+0x76e>
 8018784:	9a06      	ldr	r2, [sp, #24]
 8018786:	e775      	b.n	8018674 <_dtoa_r+0x7c4>
 8018788:	9b05      	ldr	r3, [sp, #20]
 801878a:	2b01      	cmp	r3, #1
 801878c:	dc18      	bgt.n	80187c0 <_dtoa_r+0x910>
 801878e:	9b02      	ldr	r3, [sp, #8]
 8018790:	b9b3      	cbnz	r3, 80187c0 <_dtoa_r+0x910>
 8018792:	9b03      	ldr	r3, [sp, #12]
 8018794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018798:	b9a3      	cbnz	r3, 80187c4 <_dtoa_r+0x914>
 801879a:	9b03      	ldr	r3, [sp, #12]
 801879c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80187a0:	0d1b      	lsrs	r3, r3, #20
 80187a2:	051b      	lsls	r3, r3, #20
 80187a4:	b12b      	cbz	r3, 80187b2 <_dtoa_r+0x902>
 80187a6:	9b04      	ldr	r3, [sp, #16]
 80187a8:	3301      	adds	r3, #1
 80187aa:	9304      	str	r3, [sp, #16]
 80187ac:	f108 0801 	add.w	r8, r8, #1
 80187b0:	2301      	movs	r3, #1
 80187b2:	9306      	str	r3, [sp, #24]
 80187b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	f47f af74 	bne.w	80186a4 <_dtoa_r+0x7f4>
 80187bc:	2001      	movs	r0, #1
 80187be:	e779      	b.n	80186b4 <_dtoa_r+0x804>
 80187c0:	2300      	movs	r3, #0
 80187c2:	e7f6      	b.n	80187b2 <_dtoa_r+0x902>
 80187c4:	9b02      	ldr	r3, [sp, #8]
 80187c6:	e7f4      	b.n	80187b2 <_dtoa_r+0x902>
 80187c8:	d085      	beq.n	80186d6 <_dtoa_r+0x826>
 80187ca:	4618      	mov	r0, r3
 80187cc:	301c      	adds	r0, #28
 80187ce:	e77d      	b.n	80186cc <_dtoa_r+0x81c>
 80187d0:	40240000 	.word	0x40240000
 80187d4:	9b01      	ldr	r3, [sp, #4]
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	dc38      	bgt.n	801884c <_dtoa_r+0x99c>
 80187da:	9b05      	ldr	r3, [sp, #20]
 80187dc:	2b02      	cmp	r3, #2
 80187de:	dd35      	ble.n	801884c <_dtoa_r+0x99c>
 80187e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80187e4:	f1b9 0f00 	cmp.w	r9, #0
 80187e8:	d10d      	bne.n	8018806 <_dtoa_r+0x956>
 80187ea:	4631      	mov	r1, r6
 80187ec:	464b      	mov	r3, r9
 80187ee:	2205      	movs	r2, #5
 80187f0:	4620      	mov	r0, r4
 80187f2:	f000 fd3d 	bl	8019270 <__multadd>
 80187f6:	4601      	mov	r1, r0
 80187f8:	4606      	mov	r6, r0
 80187fa:	4658      	mov	r0, fp
 80187fc:	f000 ff9e 	bl	801973c <__mcmp>
 8018800:	2800      	cmp	r0, #0
 8018802:	f73f adbd 	bgt.w	8018380 <_dtoa_r+0x4d0>
 8018806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018808:	9d00      	ldr	r5, [sp, #0]
 801880a:	ea6f 0a03 	mvn.w	sl, r3
 801880e:	f04f 0800 	mov.w	r8, #0
 8018812:	4631      	mov	r1, r6
 8018814:	4620      	mov	r0, r4
 8018816:	f000 fd09 	bl	801922c <_Bfree>
 801881a:	2f00      	cmp	r7, #0
 801881c:	f43f aeb4 	beq.w	8018588 <_dtoa_r+0x6d8>
 8018820:	f1b8 0f00 	cmp.w	r8, #0
 8018824:	d005      	beq.n	8018832 <_dtoa_r+0x982>
 8018826:	45b8      	cmp	r8, r7
 8018828:	d003      	beq.n	8018832 <_dtoa_r+0x982>
 801882a:	4641      	mov	r1, r8
 801882c:	4620      	mov	r0, r4
 801882e:	f000 fcfd 	bl	801922c <_Bfree>
 8018832:	4639      	mov	r1, r7
 8018834:	4620      	mov	r0, r4
 8018836:	f000 fcf9 	bl	801922c <_Bfree>
 801883a:	e6a5      	b.n	8018588 <_dtoa_r+0x6d8>
 801883c:	2600      	movs	r6, #0
 801883e:	4637      	mov	r7, r6
 8018840:	e7e1      	b.n	8018806 <_dtoa_r+0x956>
 8018842:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018844:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018848:	4637      	mov	r7, r6
 801884a:	e599      	b.n	8018380 <_dtoa_r+0x4d0>
 801884c:	9b08      	ldr	r3, [sp, #32]
 801884e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018852:	2b00      	cmp	r3, #0
 8018854:	f000 80fd 	beq.w	8018a52 <_dtoa_r+0xba2>
 8018858:	2d00      	cmp	r5, #0
 801885a:	dd05      	ble.n	8018868 <_dtoa_r+0x9b8>
 801885c:	4639      	mov	r1, r7
 801885e:	462a      	mov	r2, r5
 8018860:	4620      	mov	r0, r4
 8018862:	f000 feff 	bl	8019664 <__lshift>
 8018866:	4607      	mov	r7, r0
 8018868:	9b06      	ldr	r3, [sp, #24]
 801886a:	2b00      	cmp	r3, #0
 801886c:	d05c      	beq.n	8018928 <_dtoa_r+0xa78>
 801886e:	6879      	ldr	r1, [r7, #4]
 8018870:	4620      	mov	r0, r4
 8018872:	f000 fc9b 	bl	80191ac <_Balloc>
 8018876:	4605      	mov	r5, r0
 8018878:	b928      	cbnz	r0, 8018886 <_dtoa_r+0x9d6>
 801887a:	4b80      	ldr	r3, [pc, #512]	; (8018a7c <_dtoa_r+0xbcc>)
 801887c:	4602      	mov	r2, r0
 801887e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018882:	f7ff bb2e 	b.w	8017ee2 <_dtoa_r+0x32>
 8018886:	693a      	ldr	r2, [r7, #16]
 8018888:	3202      	adds	r2, #2
 801888a:	0092      	lsls	r2, r2, #2
 801888c:	f107 010c 	add.w	r1, r7, #12
 8018890:	300c      	adds	r0, #12
 8018892:	f7fd fc0d 	bl	80160b0 <memcpy>
 8018896:	2201      	movs	r2, #1
 8018898:	4629      	mov	r1, r5
 801889a:	4620      	mov	r0, r4
 801889c:	f000 fee2 	bl	8019664 <__lshift>
 80188a0:	9b00      	ldr	r3, [sp, #0]
 80188a2:	3301      	adds	r3, #1
 80188a4:	9301      	str	r3, [sp, #4]
 80188a6:	9b00      	ldr	r3, [sp, #0]
 80188a8:	444b      	add	r3, r9
 80188aa:	9307      	str	r3, [sp, #28]
 80188ac:	9b02      	ldr	r3, [sp, #8]
 80188ae:	f003 0301 	and.w	r3, r3, #1
 80188b2:	46b8      	mov	r8, r7
 80188b4:	9306      	str	r3, [sp, #24]
 80188b6:	4607      	mov	r7, r0
 80188b8:	9b01      	ldr	r3, [sp, #4]
 80188ba:	4631      	mov	r1, r6
 80188bc:	3b01      	subs	r3, #1
 80188be:	4658      	mov	r0, fp
 80188c0:	9302      	str	r3, [sp, #8]
 80188c2:	f7ff fa67 	bl	8017d94 <quorem>
 80188c6:	4603      	mov	r3, r0
 80188c8:	3330      	adds	r3, #48	; 0x30
 80188ca:	9004      	str	r0, [sp, #16]
 80188cc:	4641      	mov	r1, r8
 80188ce:	4658      	mov	r0, fp
 80188d0:	9308      	str	r3, [sp, #32]
 80188d2:	f000 ff33 	bl	801973c <__mcmp>
 80188d6:	463a      	mov	r2, r7
 80188d8:	4681      	mov	r9, r0
 80188da:	4631      	mov	r1, r6
 80188dc:	4620      	mov	r0, r4
 80188de:	f000 ff49 	bl	8019774 <__mdiff>
 80188e2:	68c2      	ldr	r2, [r0, #12]
 80188e4:	9b08      	ldr	r3, [sp, #32]
 80188e6:	4605      	mov	r5, r0
 80188e8:	bb02      	cbnz	r2, 801892c <_dtoa_r+0xa7c>
 80188ea:	4601      	mov	r1, r0
 80188ec:	4658      	mov	r0, fp
 80188ee:	f000 ff25 	bl	801973c <__mcmp>
 80188f2:	9b08      	ldr	r3, [sp, #32]
 80188f4:	4602      	mov	r2, r0
 80188f6:	4629      	mov	r1, r5
 80188f8:	4620      	mov	r0, r4
 80188fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80188fe:	f000 fc95 	bl	801922c <_Bfree>
 8018902:	9b05      	ldr	r3, [sp, #20]
 8018904:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018906:	9d01      	ldr	r5, [sp, #4]
 8018908:	ea43 0102 	orr.w	r1, r3, r2
 801890c:	9b06      	ldr	r3, [sp, #24]
 801890e:	430b      	orrs	r3, r1
 8018910:	9b08      	ldr	r3, [sp, #32]
 8018912:	d10d      	bne.n	8018930 <_dtoa_r+0xa80>
 8018914:	2b39      	cmp	r3, #57	; 0x39
 8018916:	d029      	beq.n	801896c <_dtoa_r+0xabc>
 8018918:	f1b9 0f00 	cmp.w	r9, #0
 801891c:	dd01      	ble.n	8018922 <_dtoa_r+0xa72>
 801891e:	9b04      	ldr	r3, [sp, #16]
 8018920:	3331      	adds	r3, #49	; 0x31
 8018922:	9a02      	ldr	r2, [sp, #8]
 8018924:	7013      	strb	r3, [r2, #0]
 8018926:	e774      	b.n	8018812 <_dtoa_r+0x962>
 8018928:	4638      	mov	r0, r7
 801892a:	e7b9      	b.n	80188a0 <_dtoa_r+0x9f0>
 801892c:	2201      	movs	r2, #1
 801892e:	e7e2      	b.n	80188f6 <_dtoa_r+0xa46>
 8018930:	f1b9 0f00 	cmp.w	r9, #0
 8018934:	db06      	blt.n	8018944 <_dtoa_r+0xa94>
 8018936:	9905      	ldr	r1, [sp, #20]
 8018938:	ea41 0909 	orr.w	r9, r1, r9
 801893c:	9906      	ldr	r1, [sp, #24]
 801893e:	ea59 0101 	orrs.w	r1, r9, r1
 8018942:	d120      	bne.n	8018986 <_dtoa_r+0xad6>
 8018944:	2a00      	cmp	r2, #0
 8018946:	ddec      	ble.n	8018922 <_dtoa_r+0xa72>
 8018948:	4659      	mov	r1, fp
 801894a:	2201      	movs	r2, #1
 801894c:	4620      	mov	r0, r4
 801894e:	9301      	str	r3, [sp, #4]
 8018950:	f000 fe88 	bl	8019664 <__lshift>
 8018954:	4631      	mov	r1, r6
 8018956:	4683      	mov	fp, r0
 8018958:	f000 fef0 	bl	801973c <__mcmp>
 801895c:	2800      	cmp	r0, #0
 801895e:	9b01      	ldr	r3, [sp, #4]
 8018960:	dc02      	bgt.n	8018968 <_dtoa_r+0xab8>
 8018962:	d1de      	bne.n	8018922 <_dtoa_r+0xa72>
 8018964:	07da      	lsls	r2, r3, #31
 8018966:	d5dc      	bpl.n	8018922 <_dtoa_r+0xa72>
 8018968:	2b39      	cmp	r3, #57	; 0x39
 801896a:	d1d8      	bne.n	801891e <_dtoa_r+0xa6e>
 801896c:	9a02      	ldr	r2, [sp, #8]
 801896e:	2339      	movs	r3, #57	; 0x39
 8018970:	7013      	strb	r3, [r2, #0]
 8018972:	462b      	mov	r3, r5
 8018974:	461d      	mov	r5, r3
 8018976:	3b01      	subs	r3, #1
 8018978:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801897c:	2a39      	cmp	r2, #57	; 0x39
 801897e:	d050      	beq.n	8018a22 <_dtoa_r+0xb72>
 8018980:	3201      	adds	r2, #1
 8018982:	701a      	strb	r2, [r3, #0]
 8018984:	e745      	b.n	8018812 <_dtoa_r+0x962>
 8018986:	2a00      	cmp	r2, #0
 8018988:	dd03      	ble.n	8018992 <_dtoa_r+0xae2>
 801898a:	2b39      	cmp	r3, #57	; 0x39
 801898c:	d0ee      	beq.n	801896c <_dtoa_r+0xabc>
 801898e:	3301      	adds	r3, #1
 8018990:	e7c7      	b.n	8018922 <_dtoa_r+0xa72>
 8018992:	9a01      	ldr	r2, [sp, #4]
 8018994:	9907      	ldr	r1, [sp, #28]
 8018996:	f802 3c01 	strb.w	r3, [r2, #-1]
 801899a:	428a      	cmp	r2, r1
 801899c:	d02a      	beq.n	80189f4 <_dtoa_r+0xb44>
 801899e:	4659      	mov	r1, fp
 80189a0:	2300      	movs	r3, #0
 80189a2:	220a      	movs	r2, #10
 80189a4:	4620      	mov	r0, r4
 80189a6:	f000 fc63 	bl	8019270 <__multadd>
 80189aa:	45b8      	cmp	r8, r7
 80189ac:	4683      	mov	fp, r0
 80189ae:	f04f 0300 	mov.w	r3, #0
 80189b2:	f04f 020a 	mov.w	r2, #10
 80189b6:	4641      	mov	r1, r8
 80189b8:	4620      	mov	r0, r4
 80189ba:	d107      	bne.n	80189cc <_dtoa_r+0xb1c>
 80189bc:	f000 fc58 	bl	8019270 <__multadd>
 80189c0:	4680      	mov	r8, r0
 80189c2:	4607      	mov	r7, r0
 80189c4:	9b01      	ldr	r3, [sp, #4]
 80189c6:	3301      	adds	r3, #1
 80189c8:	9301      	str	r3, [sp, #4]
 80189ca:	e775      	b.n	80188b8 <_dtoa_r+0xa08>
 80189cc:	f000 fc50 	bl	8019270 <__multadd>
 80189d0:	4639      	mov	r1, r7
 80189d2:	4680      	mov	r8, r0
 80189d4:	2300      	movs	r3, #0
 80189d6:	220a      	movs	r2, #10
 80189d8:	4620      	mov	r0, r4
 80189da:	f000 fc49 	bl	8019270 <__multadd>
 80189de:	4607      	mov	r7, r0
 80189e0:	e7f0      	b.n	80189c4 <_dtoa_r+0xb14>
 80189e2:	f1b9 0f00 	cmp.w	r9, #0
 80189e6:	9a00      	ldr	r2, [sp, #0]
 80189e8:	bfcc      	ite	gt
 80189ea:	464d      	movgt	r5, r9
 80189ec:	2501      	movle	r5, #1
 80189ee:	4415      	add	r5, r2
 80189f0:	f04f 0800 	mov.w	r8, #0
 80189f4:	4659      	mov	r1, fp
 80189f6:	2201      	movs	r2, #1
 80189f8:	4620      	mov	r0, r4
 80189fa:	9301      	str	r3, [sp, #4]
 80189fc:	f000 fe32 	bl	8019664 <__lshift>
 8018a00:	4631      	mov	r1, r6
 8018a02:	4683      	mov	fp, r0
 8018a04:	f000 fe9a 	bl	801973c <__mcmp>
 8018a08:	2800      	cmp	r0, #0
 8018a0a:	dcb2      	bgt.n	8018972 <_dtoa_r+0xac2>
 8018a0c:	d102      	bne.n	8018a14 <_dtoa_r+0xb64>
 8018a0e:	9b01      	ldr	r3, [sp, #4]
 8018a10:	07db      	lsls	r3, r3, #31
 8018a12:	d4ae      	bmi.n	8018972 <_dtoa_r+0xac2>
 8018a14:	462b      	mov	r3, r5
 8018a16:	461d      	mov	r5, r3
 8018a18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018a1c:	2a30      	cmp	r2, #48	; 0x30
 8018a1e:	d0fa      	beq.n	8018a16 <_dtoa_r+0xb66>
 8018a20:	e6f7      	b.n	8018812 <_dtoa_r+0x962>
 8018a22:	9a00      	ldr	r2, [sp, #0]
 8018a24:	429a      	cmp	r2, r3
 8018a26:	d1a5      	bne.n	8018974 <_dtoa_r+0xac4>
 8018a28:	f10a 0a01 	add.w	sl, sl, #1
 8018a2c:	2331      	movs	r3, #49	; 0x31
 8018a2e:	e779      	b.n	8018924 <_dtoa_r+0xa74>
 8018a30:	4b13      	ldr	r3, [pc, #76]	; (8018a80 <_dtoa_r+0xbd0>)
 8018a32:	f7ff baaf 	b.w	8017f94 <_dtoa_r+0xe4>
 8018a36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	f47f aa86 	bne.w	8017f4a <_dtoa_r+0x9a>
 8018a3e:	4b11      	ldr	r3, [pc, #68]	; (8018a84 <_dtoa_r+0xbd4>)
 8018a40:	f7ff baa8 	b.w	8017f94 <_dtoa_r+0xe4>
 8018a44:	f1b9 0f00 	cmp.w	r9, #0
 8018a48:	dc03      	bgt.n	8018a52 <_dtoa_r+0xba2>
 8018a4a:	9b05      	ldr	r3, [sp, #20]
 8018a4c:	2b02      	cmp	r3, #2
 8018a4e:	f73f aec9 	bgt.w	80187e4 <_dtoa_r+0x934>
 8018a52:	9d00      	ldr	r5, [sp, #0]
 8018a54:	4631      	mov	r1, r6
 8018a56:	4658      	mov	r0, fp
 8018a58:	f7ff f99c 	bl	8017d94 <quorem>
 8018a5c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018a60:	f805 3b01 	strb.w	r3, [r5], #1
 8018a64:	9a00      	ldr	r2, [sp, #0]
 8018a66:	1aaa      	subs	r2, r5, r2
 8018a68:	4591      	cmp	r9, r2
 8018a6a:	ddba      	ble.n	80189e2 <_dtoa_r+0xb32>
 8018a6c:	4659      	mov	r1, fp
 8018a6e:	2300      	movs	r3, #0
 8018a70:	220a      	movs	r2, #10
 8018a72:	4620      	mov	r0, r4
 8018a74:	f000 fbfc 	bl	8019270 <__multadd>
 8018a78:	4683      	mov	fp, r0
 8018a7a:	e7eb      	b.n	8018a54 <_dtoa_r+0xba4>
 8018a7c:	0801c84c 	.word	0x0801c84c
 8018a80:	0801c64c 	.word	0x0801c64c
 8018a84:	0801c7c9 	.word	0x0801c7c9

08018a88 <rshift>:
 8018a88:	6903      	ldr	r3, [r0, #16]
 8018a8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018a8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018a92:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018a96:	f100 0414 	add.w	r4, r0, #20
 8018a9a:	dd45      	ble.n	8018b28 <rshift+0xa0>
 8018a9c:	f011 011f 	ands.w	r1, r1, #31
 8018aa0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018aa4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018aa8:	d10c      	bne.n	8018ac4 <rshift+0x3c>
 8018aaa:	f100 0710 	add.w	r7, r0, #16
 8018aae:	4629      	mov	r1, r5
 8018ab0:	42b1      	cmp	r1, r6
 8018ab2:	d334      	bcc.n	8018b1e <rshift+0x96>
 8018ab4:	1a9b      	subs	r3, r3, r2
 8018ab6:	009b      	lsls	r3, r3, #2
 8018ab8:	1eea      	subs	r2, r5, #3
 8018aba:	4296      	cmp	r6, r2
 8018abc:	bf38      	it	cc
 8018abe:	2300      	movcc	r3, #0
 8018ac0:	4423      	add	r3, r4
 8018ac2:	e015      	b.n	8018af0 <rshift+0x68>
 8018ac4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018ac8:	f1c1 0820 	rsb	r8, r1, #32
 8018acc:	40cf      	lsrs	r7, r1
 8018ace:	f105 0e04 	add.w	lr, r5, #4
 8018ad2:	46a1      	mov	r9, r4
 8018ad4:	4576      	cmp	r6, lr
 8018ad6:	46f4      	mov	ip, lr
 8018ad8:	d815      	bhi.n	8018b06 <rshift+0x7e>
 8018ada:	1a9b      	subs	r3, r3, r2
 8018adc:	009a      	lsls	r2, r3, #2
 8018ade:	3a04      	subs	r2, #4
 8018ae0:	3501      	adds	r5, #1
 8018ae2:	42ae      	cmp	r6, r5
 8018ae4:	bf38      	it	cc
 8018ae6:	2200      	movcc	r2, #0
 8018ae8:	18a3      	adds	r3, r4, r2
 8018aea:	50a7      	str	r7, [r4, r2]
 8018aec:	b107      	cbz	r7, 8018af0 <rshift+0x68>
 8018aee:	3304      	adds	r3, #4
 8018af0:	1b1a      	subs	r2, r3, r4
 8018af2:	42a3      	cmp	r3, r4
 8018af4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018af8:	bf08      	it	eq
 8018afa:	2300      	moveq	r3, #0
 8018afc:	6102      	str	r2, [r0, #16]
 8018afe:	bf08      	it	eq
 8018b00:	6143      	streq	r3, [r0, #20]
 8018b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b06:	f8dc c000 	ldr.w	ip, [ip]
 8018b0a:	fa0c fc08 	lsl.w	ip, ip, r8
 8018b0e:	ea4c 0707 	orr.w	r7, ip, r7
 8018b12:	f849 7b04 	str.w	r7, [r9], #4
 8018b16:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018b1a:	40cf      	lsrs	r7, r1
 8018b1c:	e7da      	b.n	8018ad4 <rshift+0x4c>
 8018b1e:	f851 cb04 	ldr.w	ip, [r1], #4
 8018b22:	f847 cf04 	str.w	ip, [r7, #4]!
 8018b26:	e7c3      	b.n	8018ab0 <rshift+0x28>
 8018b28:	4623      	mov	r3, r4
 8018b2a:	e7e1      	b.n	8018af0 <rshift+0x68>

08018b2c <__hexdig_fun>:
 8018b2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018b30:	2b09      	cmp	r3, #9
 8018b32:	d802      	bhi.n	8018b3a <__hexdig_fun+0xe>
 8018b34:	3820      	subs	r0, #32
 8018b36:	b2c0      	uxtb	r0, r0
 8018b38:	4770      	bx	lr
 8018b3a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018b3e:	2b05      	cmp	r3, #5
 8018b40:	d801      	bhi.n	8018b46 <__hexdig_fun+0x1a>
 8018b42:	3847      	subs	r0, #71	; 0x47
 8018b44:	e7f7      	b.n	8018b36 <__hexdig_fun+0xa>
 8018b46:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018b4a:	2b05      	cmp	r3, #5
 8018b4c:	d801      	bhi.n	8018b52 <__hexdig_fun+0x26>
 8018b4e:	3827      	subs	r0, #39	; 0x27
 8018b50:	e7f1      	b.n	8018b36 <__hexdig_fun+0xa>
 8018b52:	2000      	movs	r0, #0
 8018b54:	4770      	bx	lr
	...

08018b58 <__gethex>:
 8018b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b5c:	ed2d 8b02 	vpush	{d8}
 8018b60:	b089      	sub	sp, #36	; 0x24
 8018b62:	ee08 0a10 	vmov	s16, r0
 8018b66:	9304      	str	r3, [sp, #16]
 8018b68:	4bbc      	ldr	r3, [pc, #752]	; (8018e5c <__gethex+0x304>)
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	9301      	str	r3, [sp, #4]
 8018b6e:	4618      	mov	r0, r3
 8018b70:	468b      	mov	fp, r1
 8018b72:	4690      	mov	r8, r2
 8018b74:	f7e7 fb2c 	bl	80001d0 <strlen>
 8018b78:	9b01      	ldr	r3, [sp, #4]
 8018b7a:	f8db 2000 	ldr.w	r2, [fp]
 8018b7e:	4403      	add	r3, r0
 8018b80:	4682      	mov	sl, r0
 8018b82:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018b86:	9305      	str	r3, [sp, #20]
 8018b88:	1c93      	adds	r3, r2, #2
 8018b8a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018b8e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018b92:	32fe      	adds	r2, #254	; 0xfe
 8018b94:	18d1      	adds	r1, r2, r3
 8018b96:	461f      	mov	r7, r3
 8018b98:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018b9c:	9100      	str	r1, [sp, #0]
 8018b9e:	2830      	cmp	r0, #48	; 0x30
 8018ba0:	d0f8      	beq.n	8018b94 <__gethex+0x3c>
 8018ba2:	f7ff ffc3 	bl	8018b2c <__hexdig_fun>
 8018ba6:	4604      	mov	r4, r0
 8018ba8:	2800      	cmp	r0, #0
 8018baa:	d13a      	bne.n	8018c22 <__gethex+0xca>
 8018bac:	9901      	ldr	r1, [sp, #4]
 8018bae:	4652      	mov	r2, sl
 8018bb0:	4638      	mov	r0, r7
 8018bb2:	f001 f929 	bl	8019e08 <strncmp>
 8018bb6:	4605      	mov	r5, r0
 8018bb8:	2800      	cmp	r0, #0
 8018bba:	d168      	bne.n	8018c8e <__gethex+0x136>
 8018bbc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018bc0:	eb07 060a 	add.w	r6, r7, sl
 8018bc4:	f7ff ffb2 	bl	8018b2c <__hexdig_fun>
 8018bc8:	2800      	cmp	r0, #0
 8018bca:	d062      	beq.n	8018c92 <__gethex+0x13a>
 8018bcc:	4633      	mov	r3, r6
 8018bce:	7818      	ldrb	r0, [r3, #0]
 8018bd0:	2830      	cmp	r0, #48	; 0x30
 8018bd2:	461f      	mov	r7, r3
 8018bd4:	f103 0301 	add.w	r3, r3, #1
 8018bd8:	d0f9      	beq.n	8018bce <__gethex+0x76>
 8018bda:	f7ff ffa7 	bl	8018b2c <__hexdig_fun>
 8018bde:	2301      	movs	r3, #1
 8018be0:	fab0 f480 	clz	r4, r0
 8018be4:	0964      	lsrs	r4, r4, #5
 8018be6:	4635      	mov	r5, r6
 8018be8:	9300      	str	r3, [sp, #0]
 8018bea:	463a      	mov	r2, r7
 8018bec:	4616      	mov	r6, r2
 8018bee:	3201      	adds	r2, #1
 8018bf0:	7830      	ldrb	r0, [r6, #0]
 8018bf2:	f7ff ff9b 	bl	8018b2c <__hexdig_fun>
 8018bf6:	2800      	cmp	r0, #0
 8018bf8:	d1f8      	bne.n	8018bec <__gethex+0x94>
 8018bfa:	9901      	ldr	r1, [sp, #4]
 8018bfc:	4652      	mov	r2, sl
 8018bfe:	4630      	mov	r0, r6
 8018c00:	f001 f902 	bl	8019e08 <strncmp>
 8018c04:	b980      	cbnz	r0, 8018c28 <__gethex+0xd0>
 8018c06:	b94d      	cbnz	r5, 8018c1c <__gethex+0xc4>
 8018c08:	eb06 050a 	add.w	r5, r6, sl
 8018c0c:	462a      	mov	r2, r5
 8018c0e:	4616      	mov	r6, r2
 8018c10:	3201      	adds	r2, #1
 8018c12:	7830      	ldrb	r0, [r6, #0]
 8018c14:	f7ff ff8a 	bl	8018b2c <__hexdig_fun>
 8018c18:	2800      	cmp	r0, #0
 8018c1a:	d1f8      	bne.n	8018c0e <__gethex+0xb6>
 8018c1c:	1bad      	subs	r5, r5, r6
 8018c1e:	00ad      	lsls	r5, r5, #2
 8018c20:	e004      	b.n	8018c2c <__gethex+0xd4>
 8018c22:	2400      	movs	r4, #0
 8018c24:	4625      	mov	r5, r4
 8018c26:	e7e0      	b.n	8018bea <__gethex+0x92>
 8018c28:	2d00      	cmp	r5, #0
 8018c2a:	d1f7      	bne.n	8018c1c <__gethex+0xc4>
 8018c2c:	7833      	ldrb	r3, [r6, #0]
 8018c2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018c32:	2b50      	cmp	r3, #80	; 0x50
 8018c34:	d13b      	bne.n	8018cae <__gethex+0x156>
 8018c36:	7873      	ldrb	r3, [r6, #1]
 8018c38:	2b2b      	cmp	r3, #43	; 0x2b
 8018c3a:	d02c      	beq.n	8018c96 <__gethex+0x13e>
 8018c3c:	2b2d      	cmp	r3, #45	; 0x2d
 8018c3e:	d02e      	beq.n	8018c9e <__gethex+0x146>
 8018c40:	1c71      	adds	r1, r6, #1
 8018c42:	f04f 0900 	mov.w	r9, #0
 8018c46:	7808      	ldrb	r0, [r1, #0]
 8018c48:	f7ff ff70 	bl	8018b2c <__hexdig_fun>
 8018c4c:	1e43      	subs	r3, r0, #1
 8018c4e:	b2db      	uxtb	r3, r3
 8018c50:	2b18      	cmp	r3, #24
 8018c52:	d82c      	bhi.n	8018cae <__gethex+0x156>
 8018c54:	f1a0 0210 	sub.w	r2, r0, #16
 8018c58:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018c5c:	f7ff ff66 	bl	8018b2c <__hexdig_fun>
 8018c60:	1e43      	subs	r3, r0, #1
 8018c62:	b2db      	uxtb	r3, r3
 8018c64:	2b18      	cmp	r3, #24
 8018c66:	d91d      	bls.n	8018ca4 <__gethex+0x14c>
 8018c68:	f1b9 0f00 	cmp.w	r9, #0
 8018c6c:	d000      	beq.n	8018c70 <__gethex+0x118>
 8018c6e:	4252      	negs	r2, r2
 8018c70:	4415      	add	r5, r2
 8018c72:	f8cb 1000 	str.w	r1, [fp]
 8018c76:	b1e4      	cbz	r4, 8018cb2 <__gethex+0x15a>
 8018c78:	9b00      	ldr	r3, [sp, #0]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	bf14      	ite	ne
 8018c7e:	2700      	movne	r7, #0
 8018c80:	2706      	moveq	r7, #6
 8018c82:	4638      	mov	r0, r7
 8018c84:	b009      	add	sp, #36	; 0x24
 8018c86:	ecbd 8b02 	vpop	{d8}
 8018c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c8e:	463e      	mov	r6, r7
 8018c90:	4625      	mov	r5, r4
 8018c92:	2401      	movs	r4, #1
 8018c94:	e7ca      	b.n	8018c2c <__gethex+0xd4>
 8018c96:	f04f 0900 	mov.w	r9, #0
 8018c9a:	1cb1      	adds	r1, r6, #2
 8018c9c:	e7d3      	b.n	8018c46 <__gethex+0xee>
 8018c9e:	f04f 0901 	mov.w	r9, #1
 8018ca2:	e7fa      	b.n	8018c9a <__gethex+0x142>
 8018ca4:	230a      	movs	r3, #10
 8018ca6:	fb03 0202 	mla	r2, r3, r2, r0
 8018caa:	3a10      	subs	r2, #16
 8018cac:	e7d4      	b.n	8018c58 <__gethex+0x100>
 8018cae:	4631      	mov	r1, r6
 8018cb0:	e7df      	b.n	8018c72 <__gethex+0x11a>
 8018cb2:	1bf3      	subs	r3, r6, r7
 8018cb4:	3b01      	subs	r3, #1
 8018cb6:	4621      	mov	r1, r4
 8018cb8:	2b07      	cmp	r3, #7
 8018cba:	dc0b      	bgt.n	8018cd4 <__gethex+0x17c>
 8018cbc:	ee18 0a10 	vmov	r0, s16
 8018cc0:	f000 fa74 	bl	80191ac <_Balloc>
 8018cc4:	4604      	mov	r4, r0
 8018cc6:	b940      	cbnz	r0, 8018cda <__gethex+0x182>
 8018cc8:	4b65      	ldr	r3, [pc, #404]	; (8018e60 <__gethex+0x308>)
 8018cca:	4602      	mov	r2, r0
 8018ccc:	21de      	movs	r1, #222	; 0xde
 8018cce:	4865      	ldr	r0, [pc, #404]	; (8018e64 <__gethex+0x30c>)
 8018cd0:	f001 f8ba 	bl	8019e48 <__assert_func>
 8018cd4:	3101      	adds	r1, #1
 8018cd6:	105b      	asrs	r3, r3, #1
 8018cd8:	e7ee      	b.n	8018cb8 <__gethex+0x160>
 8018cda:	f100 0914 	add.w	r9, r0, #20
 8018cde:	f04f 0b00 	mov.w	fp, #0
 8018ce2:	f1ca 0301 	rsb	r3, sl, #1
 8018ce6:	f8cd 9008 	str.w	r9, [sp, #8]
 8018cea:	f8cd b000 	str.w	fp, [sp]
 8018cee:	9306      	str	r3, [sp, #24]
 8018cf0:	42b7      	cmp	r7, r6
 8018cf2:	d340      	bcc.n	8018d76 <__gethex+0x21e>
 8018cf4:	9802      	ldr	r0, [sp, #8]
 8018cf6:	9b00      	ldr	r3, [sp, #0]
 8018cf8:	f840 3b04 	str.w	r3, [r0], #4
 8018cfc:	eba0 0009 	sub.w	r0, r0, r9
 8018d00:	1080      	asrs	r0, r0, #2
 8018d02:	0146      	lsls	r6, r0, #5
 8018d04:	6120      	str	r0, [r4, #16]
 8018d06:	4618      	mov	r0, r3
 8018d08:	f000 fb46 	bl	8019398 <__hi0bits>
 8018d0c:	1a30      	subs	r0, r6, r0
 8018d0e:	f8d8 6000 	ldr.w	r6, [r8]
 8018d12:	42b0      	cmp	r0, r6
 8018d14:	dd63      	ble.n	8018dde <__gethex+0x286>
 8018d16:	1b87      	subs	r7, r0, r6
 8018d18:	4639      	mov	r1, r7
 8018d1a:	4620      	mov	r0, r4
 8018d1c:	f000 fee0 	bl	8019ae0 <__any_on>
 8018d20:	4682      	mov	sl, r0
 8018d22:	b1a8      	cbz	r0, 8018d50 <__gethex+0x1f8>
 8018d24:	1e7b      	subs	r3, r7, #1
 8018d26:	1159      	asrs	r1, r3, #5
 8018d28:	f003 021f 	and.w	r2, r3, #31
 8018d2c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018d30:	f04f 0a01 	mov.w	sl, #1
 8018d34:	fa0a f202 	lsl.w	r2, sl, r2
 8018d38:	420a      	tst	r2, r1
 8018d3a:	d009      	beq.n	8018d50 <__gethex+0x1f8>
 8018d3c:	4553      	cmp	r3, sl
 8018d3e:	dd05      	ble.n	8018d4c <__gethex+0x1f4>
 8018d40:	1eb9      	subs	r1, r7, #2
 8018d42:	4620      	mov	r0, r4
 8018d44:	f000 fecc 	bl	8019ae0 <__any_on>
 8018d48:	2800      	cmp	r0, #0
 8018d4a:	d145      	bne.n	8018dd8 <__gethex+0x280>
 8018d4c:	f04f 0a02 	mov.w	sl, #2
 8018d50:	4639      	mov	r1, r7
 8018d52:	4620      	mov	r0, r4
 8018d54:	f7ff fe98 	bl	8018a88 <rshift>
 8018d58:	443d      	add	r5, r7
 8018d5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018d5e:	42ab      	cmp	r3, r5
 8018d60:	da4c      	bge.n	8018dfc <__gethex+0x2a4>
 8018d62:	ee18 0a10 	vmov	r0, s16
 8018d66:	4621      	mov	r1, r4
 8018d68:	f000 fa60 	bl	801922c <_Bfree>
 8018d6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018d6e:	2300      	movs	r3, #0
 8018d70:	6013      	str	r3, [r2, #0]
 8018d72:	27a3      	movs	r7, #163	; 0xa3
 8018d74:	e785      	b.n	8018c82 <__gethex+0x12a>
 8018d76:	1e73      	subs	r3, r6, #1
 8018d78:	9a05      	ldr	r2, [sp, #20]
 8018d7a:	9303      	str	r3, [sp, #12]
 8018d7c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018d80:	4293      	cmp	r3, r2
 8018d82:	d019      	beq.n	8018db8 <__gethex+0x260>
 8018d84:	f1bb 0f20 	cmp.w	fp, #32
 8018d88:	d107      	bne.n	8018d9a <__gethex+0x242>
 8018d8a:	9b02      	ldr	r3, [sp, #8]
 8018d8c:	9a00      	ldr	r2, [sp, #0]
 8018d8e:	f843 2b04 	str.w	r2, [r3], #4
 8018d92:	9302      	str	r3, [sp, #8]
 8018d94:	2300      	movs	r3, #0
 8018d96:	9300      	str	r3, [sp, #0]
 8018d98:	469b      	mov	fp, r3
 8018d9a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018d9e:	f7ff fec5 	bl	8018b2c <__hexdig_fun>
 8018da2:	9b00      	ldr	r3, [sp, #0]
 8018da4:	f000 000f 	and.w	r0, r0, #15
 8018da8:	fa00 f00b 	lsl.w	r0, r0, fp
 8018dac:	4303      	orrs	r3, r0
 8018dae:	9300      	str	r3, [sp, #0]
 8018db0:	f10b 0b04 	add.w	fp, fp, #4
 8018db4:	9b03      	ldr	r3, [sp, #12]
 8018db6:	e00d      	b.n	8018dd4 <__gethex+0x27c>
 8018db8:	9b03      	ldr	r3, [sp, #12]
 8018dba:	9a06      	ldr	r2, [sp, #24]
 8018dbc:	4413      	add	r3, r2
 8018dbe:	42bb      	cmp	r3, r7
 8018dc0:	d3e0      	bcc.n	8018d84 <__gethex+0x22c>
 8018dc2:	4618      	mov	r0, r3
 8018dc4:	9901      	ldr	r1, [sp, #4]
 8018dc6:	9307      	str	r3, [sp, #28]
 8018dc8:	4652      	mov	r2, sl
 8018dca:	f001 f81d 	bl	8019e08 <strncmp>
 8018dce:	9b07      	ldr	r3, [sp, #28]
 8018dd0:	2800      	cmp	r0, #0
 8018dd2:	d1d7      	bne.n	8018d84 <__gethex+0x22c>
 8018dd4:	461e      	mov	r6, r3
 8018dd6:	e78b      	b.n	8018cf0 <__gethex+0x198>
 8018dd8:	f04f 0a03 	mov.w	sl, #3
 8018ddc:	e7b8      	b.n	8018d50 <__gethex+0x1f8>
 8018dde:	da0a      	bge.n	8018df6 <__gethex+0x29e>
 8018de0:	1a37      	subs	r7, r6, r0
 8018de2:	4621      	mov	r1, r4
 8018de4:	ee18 0a10 	vmov	r0, s16
 8018de8:	463a      	mov	r2, r7
 8018dea:	f000 fc3b 	bl	8019664 <__lshift>
 8018dee:	1bed      	subs	r5, r5, r7
 8018df0:	4604      	mov	r4, r0
 8018df2:	f100 0914 	add.w	r9, r0, #20
 8018df6:	f04f 0a00 	mov.w	sl, #0
 8018dfa:	e7ae      	b.n	8018d5a <__gethex+0x202>
 8018dfc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018e00:	42a8      	cmp	r0, r5
 8018e02:	dd72      	ble.n	8018eea <__gethex+0x392>
 8018e04:	1b45      	subs	r5, r0, r5
 8018e06:	42ae      	cmp	r6, r5
 8018e08:	dc36      	bgt.n	8018e78 <__gethex+0x320>
 8018e0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018e0e:	2b02      	cmp	r3, #2
 8018e10:	d02a      	beq.n	8018e68 <__gethex+0x310>
 8018e12:	2b03      	cmp	r3, #3
 8018e14:	d02c      	beq.n	8018e70 <__gethex+0x318>
 8018e16:	2b01      	cmp	r3, #1
 8018e18:	d115      	bne.n	8018e46 <__gethex+0x2ee>
 8018e1a:	42ae      	cmp	r6, r5
 8018e1c:	d113      	bne.n	8018e46 <__gethex+0x2ee>
 8018e1e:	2e01      	cmp	r6, #1
 8018e20:	d10b      	bne.n	8018e3a <__gethex+0x2e2>
 8018e22:	9a04      	ldr	r2, [sp, #16]
 8018e24:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018e28:	6013      	str	r3, [r2, #0]
 8018e2a:	2301      	movs	r3, #1
 8018e2c:	6123      	str	r3, [r4, #16]
 8018e2e:	f8c9 3000 	str.w	r3, [r9]
 8018e32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018e34:	2762      	movs	r7, #98	; 0x62
 8018e36:	601c      	str	r4, [r3, #0]
 8018e38:	e723      	b.n	8018c82 <__gethex+0x12a>
 8018e3a:	1e71      	subs	r1, r6, #1
 8018e3c:	4620      	mov	r0, r4
 8018e3e:	f000 fe4f 	bl	8019ae0 <__any_on>
 8018e42:	2800      	cmp	r0, #0
 8018e44:	d1ed      	bne.n	8018e22 <__gethex+0x2ca>
 8018e46:	ee18 0a10 	vmov	r0, s16
 8018e4a:	4621      	mov	r1, r4
 8018e4c:	f000 f9ee 	bl	801922c <_Bfree>
 8018e50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018e52:	2300      	movs	r3, #0
 8018e54:	6013      	str	r3, [r2, #0]
 8018e56:	2750      	movs	r7, #80	; 0x50
 8018e58:	e713      	b.n	8018c82 <__gethex+0x12a>
 8018e5a:	bf00      	nop
 8018e5c:	0801c8c8 	.word	0x0801c8c8
 8018e60:	0801c84c 	.word	0x0801c84c
 8018e64:	0801c85d 	.word	0x0801c85d
 8018e68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d1eb      	bne.n	8018e46 <__gethex+0x2ee>
 8018e6e:	e7d8      	b.n	8018e22 <__gethex+0x2ca>
 8018e70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d1d5      	bne.n	8018e22 <__gethex+0x2ca>
 8018e76:	e7e6      	b.n	8018e46 <__gethex+0x2ee>
 8018e78:	1e6f      	subs	r7, r5, #1
 8018e7a:	f1ba 0f00 	cmp.w	sl, #0
 8018e7e:	d131      	bne.n	8018ee4 <__gethex+0x38c>
 8018e80:	b127      	cbz	r7, 8018e8c <__gethex+0x334>
 8018e82:	4639      	mov	r1, r7
 8018e84:	4620      	mov	r0, r4
 8018e86:	f000 fe2b 	bl	8019ae0 <__any_on>
 8018e8a:	4682      	mov	sl, r0
 8018e8c:	117b      	asrs	r3, r7, #5
 8018e8e:	2101      	movs	r1, #1
 8018e90:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018e94:	f007 071f 	and.w	r7, r7, #31
 8018e98:	fa01 f707 	lsl.w	r7, r1, r7
 8018e9c:	421f      	tst	r7, r3
 8018e9e:	4629      	mov	r1, r5
 8018ea0:	4620      	mov	r0, r4
 8018ea2:	bf18      	it	ne
 8018ea4:	f04a 0a02 	orrne.w	sl, sl, #2
 8018ea8:	1b76      	subs	r6, r6, r5
 8018eaa:	f7ff fded 	bl	8018a88 <rshift>
 8018eae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018eb2:	2702      	movs	r7, #2
 8018eb4:	f1ba 0f00 	cmp.w	sl, #0
 8018eb8:	d048      	beq.n	8018f4c <__gethex+0x3f4>
 8018eba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018ebe:	2b02      	cmp	r3, #2
 8018ec0:	d015      	beq.n	8018eee <__gethex+0x396>
 8018ec2:	2b03      	cmp	r3, #3
 8018ec4:	d017      	beq.n	8018ef6 <__gethex+0x39e>
 8018ec6:	2b01      	cmp	r3, #1
 8018ec8:	d109      	bne.n	8018ede <__gethex+0x386>
 8018eca:	f01a 0f02 	tst.w	sl, #2
 8018ece:	d006      	beq.n	8018ede <__gethex+0x386>
 8018ed0:	f8d9 0000 	ldr.w	r0, [r9]
 8018ed4:	ea4a 0a00 	orr.w	sl, sl, r0
 8018ed8:	f01a 0f01 	tst.w	sl, #1
 8018edc:	d10e      	bne.n	8018efc <__gethex+0x3a4>
 8018ede:	f047 0710 	orr.w	r7, r7, #16
 8018ee2:	e033      	b.n	8018f4c <__gethex+0x3f4>
 8018ee4:	f04f 0a01 	mov.w	sl, #1
 8018ee8:	e7d0      	b.n	8018e8c <__gethex+0x334>
 8018eea:	2701      	movs	r7, #1
 8018eec:	e7e2      	b.n	8018eb4 <__gethex+0x35c>
 8018eee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ef0:	f1c3 0301 	rsb	r3, r3, #1
 8018ef4:	9315      	str	r3, [sp, #84]	; 0x54
 8018ef6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	d0f0      	beq.n	8018ede <__gethex+0x386>
 8018efc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018f00:	f104 0314 	add.w	r3, r4, #20
 8018f04:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018f08:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018f0c:	f04f 0c00 	mov.w	ip, #0
 8018f10:	4618      	mov	r0, r3
 8018f12:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f16:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018f1a:	d01c      	beq.n	8018f56 <__gethex+0x3fe>
 8018f1c:	3201      	adds	r2, #1
 8018f1e:	6002      	str	r2, [r0, #0]
 8018f20:	2f02      	cmp	r7, #2
 8018f22:	f104 0314 	add.w	r3, r4, #20
 8018f26:	d13f      	bne.n	8018fa8 <__gethex+0x450>
 8018f28:	f8d8 2000 	ldr.w	r2, [r8]
 8018f2c:	3a01      	subs	r2, #1
 8018f2e:	42b2      	cmp	r2, r6
 8018f30:	d10a      	bne.n	8018f48 <__gethex+0x3f0>
 8018f32:	1171      	asrs	r1, r6, #5
 8018f34:	2201      	movs	r2, #1
 8018f36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018f3a:	f006 061f 	and.w	r6, r6, #31
 8018f3e:	fa02 f606 	lsl.w	r6, r2, r6
 8018f42:	421e      	tst	r6, r3
 8018f44:	bf18      	it	ne
 8018f46:	4617      	movne	r7, r2
 8018f48:	f047 0720 	orr.w	r7, r7, #32
 8018f4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018f4e:	601c      	str	r4, [r3, #0]
 8018f50:	9b04      	ldr	r3, [sp, #16]
 8018f52:	601d      	str	r5, [r3, #0]
 8018f54:	e695      	b.n	8018c82 <__gethex+0x12a>
 8018f56:	4299      	cmp	r1, r3
 8018f58:	f843 cc04 	str.w	ip, [r3, #-4]
 8018f5c:	d8d8      	bhi.n	8018f10 <__gethex+0x3b8>
 8018f5e:	68a3      	ldr	r3, [r4, #8]
 8018f60:	459b      	cmp	fp, r3
 8018f62:	db19      	blt.n	8018f98 <__gethex+0x440>
 8018f64:	6861      	ldr	r1, [r4, #4]
 8018f66:	ee18 0a10 	vmov	r0, s16
 8018f6a:	3101      	adds	r1, #1
 8018f6c:	f000 f91e 	bl	80191ac <_Balloc>
 8018f70:	4681      	mov	r9, r0
 8018f72:	b918      	cbnz	r0, 8018f7c <__gethex+0x424>
 8018f74:	4b1a      	ldr	r3, [pc, #104]	; (8018fe0 <__gethex+0x488>)
 8018f76:	4602      	mov	r2, r0
 8018f78:	2184      	movs	r1, #132	; 0x84
 8018f7a:	e6a8      	b.n	8018cce <__gethex+0x176>
 8018f7c:	6922      	ldr	r2, [r4, #16]
 8018f7e:	3202      	adds	r2, #2
 8018f80:	f104 010c 	add.w	r1, r4, #12
 8018f84:	0092      	lsls	r2, r2, #2
 8018f86:	300c      	adds	r0, #12
 8018f88:	f7fd f892 	bl	80160b0 <memcpy>
 8018f8c:	4621      	mov	r1, r4
 8018f8e:	ee18 0a10 	vmov	r0, s16
 8018f92:	f000 f94b 	bl	801922c <_Bfree>
 8018f96:	464c      	mov	r4, r9
 8018f98:	6923      	ldr	r3, [r4, #16]
 8018f9a:	1c5a      	adds	r2, r3, #1
 8018f9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018fa0:	6122      	str	r2, [r4, #16]
 8018fa2:	2201      	movs	r2, #1
 8018fa4:	615a      	str	r2, [r3, #20]
 8018fa6:	e7bb      	b.n	8018f20 <__gethex+0x3c8>
 8018fa8:	6922      	ldr	r2, [r4, #16]
 8018faa:	455a      	cmp	r2, fp
 8018fac:	dd0b      	ble.n	8018fc6 <__gethex+0x46e>
 8018fae:	2101      	movs	r1, #1
 8018fb0:	4620      	mov	r0, r4
 8018fb2:	f7ff fd69 	bl	8018a88 <rshift>
 8018fb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018fba:	3501      	adds	r5, #1
 8018fbc:	42ab      	cmp	r3, r5
 8018fbe:	f6ff aed0 	blt.w	8018d62 <__gethex+0x20a>
 8018fc2:	2701      	movs	r7, #1
 8018fc4:	e7c0      	b.n	8018f48 <__gethex+0x3f0>
 8018fc6:	f016 061f 	ands.w	r6, r6, #31
 8018fca:	d0fa      	beq.n	8018fc2 <__gethex+0x46a>
 8018fcc:	449a      	add	sl, r3
 8018fce:	f1c6 0620 	rsb	r6, r6, #32
 8018fd2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018fd6:	f000 f9df 	bl	8019398 <__hi0bits>
 8018fda:	42b0      	cmp	r0, r6
 8018fdc:	dbe7      	blt.n	8018fae <__gethex+0x456>
 8018fde:	e7f0      	b.n	8018fc2 <__gethex+0x46a>
 8018fe0:	0801c84c 	.word	0x0801c84c

08018fe4 <L_shift>:
 8018fe4:	f1c2 0208 	rsb	r2, r2, #8
 8018fe8:	0092      	lsls	r2, r2, #2
 8018fea:	b570      	push	{r4, r5, r6, lr}
 8018fec:	f1c2 0620 	rsb	r6, r2, #32
 8018ff0:	6843      	ldr	r3, [r0, #4]
 8018ff2:	6804      	ldr	r4, [r0, #0]
 8018ff4:	fa03 f506 	lsl.w	r5, r3, r6
 8018ff8:	432c      	orrs	r4, r5
 8018ffa:	40d3      	lsrs	r3, r2
 8018ffc:	6004      	str	r4, [r0, #0]
 8018ffe:	f840 3f04 	str.w	r3, [r0, #4]!
 8019002:	4288      	cmp	r0, r1
 8019004:	d3f4      	bcc.n	8018ff0 <L_shift+0xc>
 8019006:	bd70      	pop	{r4, r5, r6, pc}

08019008 <__match>:
 8019008:	b530      	push	{r4, r5, lr}
 801900a:	6803      	ldr	r3, [r0, #0]
 801900c:	3301      	adds	r3, #1
 801900e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019012:	b914      	cbnz	r4, 801901a <__match+0x12>
 8019014:	6003      	str	r3, [r0, #0]
 8019016:	2001      	movs	r0, #1
 8019018:	bd30      	pop	{r4, r5, pc}
 801901a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801901e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019022:	2d19      	cmp	r5, #25
 8019024:	bf98      	it	ls
 8019026:	3220      	addls	r2, #32
 8019028:	42a2      	cmp	r2, r4
 801902a:	d0f0      	beq.n	801900e <__match+0x6>
 801902c:	2000      	movs	r0, #0
 801902e:	e7f3      	b.n	8019018 <__match+0x10>

08019030 <__hexnan>:
 8019030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019034:	680b      	ldr	r3, [r1, #0]
 8019036:	6801      	ldr	r1, [r0, #0]
 8019038:	115e      	asrs	r6, r3, #5
 801903a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801903e:	f013 031f 	ands.w	r3, r3, #31
 8019042:	b087      	sub	sp, #28
 8019044:	bf18      	it	ne
 8019046:	3604      	addne	r6, #4
 8019048:	2500      	movs	r5, #0
 801904a:	1f37      	subs	r7, r6, #4
 801904c:	4682      	mov	sl, r0
 801904e:	4690      	mov	r8, r2
 8019050:	9301      	str	r3, [sp, #4]
 8019052:	f846 5c04 	str.w	r5, [r6, #-4]
 8019056:	46b9      	mov	r9, r7
 8019058:	463c      	mov	r4, r7
 801905a:	9502      	str	r5, [sp, #8]
 801905c:	46ab      	mov	fp, r5
 801905e:	784a      	ldrb	r2, [r1, #1]
 8019060:	1c4b      	adds	r3, r1, #1
 8019062:	9303      	str	r3, [sp, #12]
 8019064:	b342      	cbz	r2, 80190b8 <__hexnan+0x88>
 8019066:	4610      	mov	r0, r2
 8019068:	9105      	str	r1, [sp, #20]
 801906a:	9204      	str	r2, [sp, #16]
 801906c:	f7ff fd5e 	bl	8018b2c <__hexdig_fun>
 8019070:	2800      	cmp	r0, #0
 8019072:	d14f      	bne.n	8019114 <__hexnan+0xe4>
 8019074:	9a04      	ldr	r2, [sp, #16]
 8019076:	9905      	ldr	r1, [sp, #20]
 8019078:	2a20      	cmp	r2, #32
 801907a:	d818      	bhi.n	80190ae <__hexnan+0x7e>
 801907c:	9b02      	ldr	r3, [sp, #8]
 801907e:	459b      	cmp	fp, r3
 8019080:	dd13      	ble.n	80190aa <__hexnan+0x7a>
 8019082:	454c      	cmp	r4, r9
 8019084:	d206      	bcs.n	8019094 <__hexnan+0x64>
 8019086:	2d07      	cmp	r5, #7
 8019088:	dc04      	bgt.n	8019094 <__hexnan+0x64>
 801908a:	462a      	mov	r2, r5
 801908c:	4649      	mov	r1, r9
 801908e:	4620      	mov	r0, r4
 8019090:	f7ff ffa8 	bl	8018fe4 <L_shift>
 8019094:	4544      	cmp	r4, r8
 8019096:	d950      	bls.n	801913a <__hexnan+0x10a>
 8019098:	2300      	movs	r3, #0
 801909a:	f1a4 0904 	sub.w	r9, r4, #4
 801909e:	f844 3c04 	str.w	r3, [r4, #-4]
 80190a2:	f8cd b008 	str.w	fp, [sp, #8]
 80190a6:	464c      	mov	r4, r9
 80190a8:	461d      	mov	r5, r3
 80190aa:	9903      	ldr	r1, [sp, #12]
 80190ac:	e7d7      	b.n	801905e <__hexnan+0x2e>
 80190ae:	2a29      	cmp	r2, #41	; 0x29
 80190b0:	d156      	bne.n	8019160 <__hexnan+0x130>
 80190b2:	3102      	adds	r1, #2
 80190b4:	f8ca 1000 	str.w	r1, [sl]
 80190b8:	f1bb 0f00 	cmp.w	fp, #0
 80190bc:	d050      	beq.n	8019160 <__hexnan+0x130>
 80190be:	454c      	cmp	r4, r9
 80190c0:	d206      	bcs.n	80190d0 <__hexnan+0xa0>
 80190c2:	2d07      	cmp	r5, #7
 80190c4:	dc04      	bgt.n	80190d0 <__hexnan+0xa0>
 80190c6:	462a      	mov	r2, r5
 80190c8:	4649      	mov	r1, r9
 80190ca:	4620      	mov	r0, r4
 80190cc:	f7ff ff8a 	bl	8018fe4 <L_shift>
 80190d0:	4544      	cmp	r4, r8
 80190d2:	d934      	bls.n	801913e <__hexnan+0x10e>
 80190d4:	f1a8 0204 	sub.w	r2, r8, #4
 80190d8:	4623      	mov	r3, r4
 80190da:	f853 1b04 	ldr.w	r1, [r3], #4
 80190de:	f842 1f04 	str.w	r1, [r2, #4]!
 80190e2:	429f      	cmp	r7, r3
 80190e4:	d2f9      	bcs.n	80190da <__hexnan+0xaa>
 80190e6:	1b3b      	subs	r3, r7, r4
 80190e8:	f023 0303 	bic.w	r3, r3, #3
 80190ec:	3304      	adds	r3, #4
 80190ee:	3401      	adds	r4, #1
 80190f0:	3e03      	subs	r6, #3
 80190f2:	42b4      	cmp	r4, r6
 80190f4:	bf88      	it	hi
 80190f6:	2304      	movhi	r3, #4
 80190f8:	4443      	add	r3, r8
 80190fa:	2200      	movs	r2, #0
 80190fc:	f843 2b04 	str.w	r2, [r3], #4
 8019100:	429f      	cmp	r7, r3
 8019102:	d2fb      	bcs.n	80190fc <__hexnan+0xcc>
 8019104:	683b      	ldr	r3, [r7, #0]
 8019106:	b91b      	cbnz	r3, 8019110 <__hexnan+0xe0>
 8019108:	4547      	cmp	r7, r8
 801910a:	d127      	bne.n	801915c <__hexnan+0x12c>
 801910c:	2301      	movs	r3, #1
 801910e:	603b      	str	r3, [r7, #0]
 8019110:	2005      	movs	r0, #5
 8019112:	e026      	b.n	8019162 <__hexnan+0x132>
 8019114:	3501      	adds	r5, #1
 8019116:	2d08      	cmp	r5, #8
 8019118:	f10b 0b01 	add.w	fp, fp, #1
 801911c:	dd06      	ble.n	801912c <__hexnan+0xfc>
 801911e:	4544      	cmp	r4, r8
 8019120:	d9c3      	bls.n	80190aa <__hexnan+0x7a>
 8019122:	2300      	movs	r3, #0
 8019124:	f844 3c04 	str.w	r3, [r4, #-4]
 8019128:	2501      	movs	r5, #1
 801912a:	3c04      	subs	r4, #4
 801912c:	6822      	ldr	r2, [r4, #0]
 801912e:	f000 000f 	and.w	r0, r0, #15
 8019132:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8019136:	6022      	str	r2, [r4, #0]
 8019138:	e7b7      	b.n	80190aa <__hexnan+0x7a>
 801913a:	2508      	movs	r5, #8
 801913c:	e7b5      	b.n	80190aa <__hexnan+0x7a>
 801913e:	9b01      	ldr	r3, [sp, #4]
 8019140:	2b00      	cmp	r3, #0
 8019142:	d0df      	beq.n	8019104 <__hexnan+0xd4>
 8019144:	f04f 32ff 	mov.w	r2, #4294967295
 8019148:	f1c3 0320 	rsb	r3, r3, #32
 801914c:	fa22 f303 	lsr.w	r3, r2, r3
 8019150:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019154:	401a      	ands	r2, r3
 8019156:	f846 2c04 	str.w	r2, [r6, #-4]
 801915a:	e7d3      	b.n	8019104 <__hexnan+0xd4>
 801915c:	3f04      	subs	r7, #4
 801915e:	e7d1      	b.n	8019104 <__hexnan+0xd4>
 8019160:	2004      	movs	r0, #4
 8019162:	b007      	add	sp, #28
 8019164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019168 <_localeconv_r>:
 8019168:	4800      	ldr	r0, [pc, #0]	; (801916c <_localeconv_r+0x4>)
 801916a:	4770      	bx	lr
 801916c:	20000b04 	.word	0x20000b04

08019170 <__ascii_mbtowc>:
 8019170:	b082      	sub	sp, #8
 8019172:	b901      	cbnz	r1, 8019176 <__ascii_mbtowc+0x6>
 8019174:	a901      	add	r1, sp, #4
 8019176:	b142      	cbz	r2, 801918a <__ascii_mbtowc+0x1a>
 8019178:	b14b      	cbz	r3, 801918e <__ascii_mbtowc+0x1e>
 801917a:	7813      	ldrb	r3, [r2, #0]
 801917c:	600b      	str	r3, [r1, #0]
 801917e:	7812      	ldrb	r2, [r2, #0]
 8019180:	1e10      	subs	r0, r2, #0
 8019182:	bf18      	it	ne
 8019184:	2001      	movne	r0, #1
 8019186:	b002      	add	sp, #8
 8019188:	4770      	bx	lr
 801918a:	4610      	mov	r0, r2
 801918c:	e7fb      	b.n	8019186 <__ascii_mbtowc+0x16>
 801918e:	f06f 0001 	mvn.w	r0, #1
 8019192:	e7f8      	b.n	8019186 <__ascii_mbtowc+0x16>

08019194 <__malloc_lock>:
 8019194:	4801      	ldr	r0, [pc, #4]	; (801919c <__malloc_lock+0x8>)
 8019196:	f000 be88 	b.w	8019eaa <__retarget_lock_acquire_recursive>
 801919a:	bf00      	nop
 801919c:	2000c97c 	.word	0x2000c97c

080191a0 <__malloc_unlock>:
 80191a0:	4801      	ldr	r0, [pc, #4]	; (80191a8 <__malloc_unlock+0x8>)
 80191a2:	f000 be83 	b.w	8019eac <__retarget_lock_release_recursive>
 80191a6:	bf00      	nop
 80191a8:	2000c97c 	.word	0x2000c97c

080191ac <_Balloc>:
 80191ac:	b570      	push	{r4, r5, r6, lr}
 80191ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80191b0:	4604      	mov	r4, r0
 80191b2:	460d      	mov	r5, r1
 80191b4:	b976      	cbnz	r6, 80191d4 <_Balloc+0x28>
 80191b6:	2010      	movs	r0, #16
 80191b8:	f7fc ff6a 	bl	8016090 <malloc>
 80191bc:	4602      	mov	r2, r0
 80191be:	6260      	str	r0, [r4, #36]	; 0x24
 80191c0:	b920      	cbnz	r0, 80191cc <_Balloc+0x20>
 80191c2:	4b18      	ldr	r3, [pc, #96]	; (8019224 <_Balloc+0x78>)
 80191c4:	4818      	ldr	r0, [pc, #96]	; (8019228 <_Balloc+0x7c>)
 80191c6:	2166      	movs	r1, #102	; 0x66
 80191c8:	f000 fe3e 	bl	8019e48 <__assert_func>
 80191cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80191d0:	6006      	str	r6, [r0, #0]
 80191d2:	60c6      	str	r6, [r0, #12]
 80191d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80191d6:	68f3      	ldr	r3, [r6, #12]
 80191d8:	b183      	cbz	r3, 80191fc <_Balloc+0x50>
 80191da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80191dc:	68db      	ldr	r3, [r3, #12]
 80191de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80191e2:	b9b8      	cbnz	r0, 8019214 <_Balloc+0x68>
 80191e4:	2101      	movs	r1, #1
 80191e6:	fa01 f605 	lsl.w	r6, r1, r5
 80191ea:	1d72      	adds	r2, r6, #5
 80191ec:	0092      	lsls	r2, r2, #2
 80191ee:	4620      	mov	r0, r4
 80191f0:	f000 fc97 	bl	8019b22 <_calloc_r>
 80191f4:	b160      	cbz	r0, 8019210 <_Balloc+0x64>
 80191f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80191fa:	e00e      	b.n	801921a <_Balloc+0x6e>
 80191fc:	2221      	movs	r2, #33	; 0x21
 80191fe:	2104      	movs	r1, #4
 8019200:	4620      	mov	r0, r4
 8019202:	f000 fc8e 	bl	8019b22 <_calloc_r>
 8019206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019208:	60f0      	str	r0, [r6, #12]
 801920a:	68db      	ldr	r3, [r3, #12]
 801920c:	2b00      	cmp	r3, #0
 801920e:	d1e4      	bne.n	80191da <_Balloc+0x2e>
 8019210:	2000      	movs	r0, #0
 8019212:	bd70      	pop	{r4, r5, r6, pc}
 8019214:	6802      	ldr	r2, [r0, #0]
 8019216:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801921a:	2300      	movs	r3, #0
 801921c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019220:	e7f7      	b.n	8019212 <_Balloc+0x66>
 8019222:	bf00      	nop
 8019224:	0801c7d6 	.word	0x0801c7d6
 8019228:	0801c8dc 	.word	0x0801c8dc

0801922c <_Bfree>:
 801922c:	b570      	push	{r4, r5, r6, lr}
 801922e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019230:	4605      	mov	r5, r0
 8019232:	460c      	mov	r4, r1
 8019234:	b976      	cbnz	r6, 8019254 <_Bfree+0x28>
 8019236:	2010      	movs	r0, #16
 8019238:	f7fc ff2a 	bl	8016090 <malloc>
 801923c:	4602      	mov	r2, r0
 801923e:	6268      	str	r0, [r5, #36]	; 0x24
 8019240:	b920      	cbnz	r0, 801924c <_Bfree+0x20>
 8019242:	4b09      	ldr	r3, [pc, #36]	; (8019268 <_Bfree+0x3c>)
 8019244:	4809      	ldr	r0, [pc, #36]	; (801926c <_Bfree+0x40>)
 8019246:	218a      	movs	r1, #138	; 0x8a
 8019248:	f000 fdfe 	bl	8019e48 <__assert_func>
 801924c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019250:	6006      	str	r6, [r0, #0]
 8019252:	60c6      	str	r6, [r0, #12]
 8019254:	b13c      	cbz	r4, 8019266 <_Bfree+0x3a>
 8019256:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019258:	6862      	ldr	r2, [r4, #4]
 801925a:	68db      	ldr	r3, [r3, #12]
 801925c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019260:	6021      	str	r1, [r4, #0]
 8019262:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019266:	bd70      	pop	{r4, r5, r6, pc}
 8019268:	0801c7d6 	.word	0x0801c7d6
 801926c:	0801c8dc 	.word	0x0801c8dc

08019270 <__multadd>:
 8019270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019274:	690e      	ldr	r6, [r1, #16]
 8019276:	4607      	mov	r7, r0
 8019278:	4698      	mov	r8, r3
 801927a:	460c      	mov	r4, r1
 801927c:	f101 0014 	add.w	r0, r1, #20
 8019280:	2300      	movs	r3, #0
 8019282:	6805      	ldr	r5, [r0, #0]
 8019284:	b2a9      	uxth	r1, r5
 8019286:	fb02 8101 	mla	r1, r2, r1, r8
 801928a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801928e:	0c2d      	lsrs	r5, r5, #16
 8019290:	fb02 c505 	mla	r5, r2, r5, ip
 8019294:	b289      	uxth	r1, r1
 8019296:	3301      	adds	r3, #1
 8019298:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801929c:	429e      	cmp	r6, r3
 801929e:	f840 1b04 	str.w	r1, [r0], #4
 80192a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80192a6:	dcec      	bgt.n	8019282 <__multadd+0x12>
 80192a8:	f1b8 0f00 	cmp.w	r8, #0
 80192ac:	d022      	beq.n	80192f4 <__multadd+0x84>
 80192ae:	68a3      	ldr	r3, [r4, #8]
 80192b0:	42b3      	cmp	r3, r6
 80192b2:	dc19      	bgt.n	80192e8 <__multadd+0x78>
 80192b4:	6861      	ldr	r1, [r4, #4]
 80192b6:	4638      	mov	r0, r7
 80192b8:	3101      	adds	r1, #1
 80192ba:	f7ff ff77 	bl	80191ac <_Balloc>
 80192be:	4605      	mov	r5, r0
 80192c0:	b928      	cbnz	r0, 80192ce <__multadd+0x5e>
 80192c2:	4602      	mov	r2, r0
 80192c4:	4b0d      	ldr	r3, [pc, #52]	; (80192fc <__multadd+0x8c>)
 80192c6:	480e      	ldr	r0, [pc, #56]	; (8019300 <__multadd+0x90>)
 80192c8:	21b5      	movs	r1, #181	; 0xb5
 80192ca:	f000 fdbd 	bl	8019e48 <__assert_func>
 80192ce:	6922      	ldr	r2, [r4, #16]
 80192d0:	3202      	adds	r2, #2
 80192d2:	f104 010c 	add.w	r1, r4, #12
 80192d6:	0092      	lsls	r2, r2, #2
 80192d8:	300c      	adds	r0, #12
 80192da:	f7fc fee9 	bl	80160b0 <memcpy>
 80192de:	4621      	mov	r1, r4
 80192e0:	4638      	mov	r0, r7
 80192e2:	f7ff ffa3 	bl	801922c <_Bfree>
 80192e6:	462c      	mov	r4, r5
 80192e8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80192ec:	3601      	adds	r6, #1
 80192ee:	f8c3 8014 	str.w	r8, [r3, #20]
 80192f2:	6126      	str	r6, [r4, #16]
 80192f4:	4620      	mov	r0, r4
 80192f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192fa:	bf00      	nop
 80192fc:	0801c84c 	.word	0x0801c84c
 8019300:	0801c8dc 	.word	0x0801c8dc

08019304 <__s2b>:
 8019304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019308:	460c      	mov	r4, r1
 801930a:	4615      	mov	r5, r2
 801930c:	461f      	mov	r7, r3
 801930e:	2209      	movs	r2, #9
 8019310:	3308      	adds	r3, #8
 8019312:	4606      	mov	r6, r0
 8019314:	fb93 f3f2 	sdiv	r3, r3, r2
 8019318:	2100      	movs	r1, #0
 801931a:	2201      	movs	r2, #1
 801931c:	429a      	cmp	r2, r3
 801931e:	db09      	blt.n	8019334 <__s2b+0x30>
 8019320:	4630      	mov	r0, r6
 8019322:	f7ff ff43 	bl	80191ac <_Balloc>
 8019326:	b940      	cbnz	r0, 801933a <__s2b+0x36>
 8019328:	4602      	mov	r2, r0
 801932a:	4b19      	ldr	r3, [pc, #100]	; (8019390 <__s2b+0x8c>)
 801932c:	4819      	ldr	r0, [pc, #100]	; (8019394 <__s2b+0x90>)
 801932e:	21ce      	movs	r1, #206	; 0xce
 8019330:	f000 fd8a 	bl	8019e48 <__assert_func>
 8019334:	0052      	lsls	r2, r2, #1
 8019336:	3101      	adds	r1, #1
 8019338:	e7f0      	b.n	801931c <__s2b+0x18>
 801933a:	9b08      	ldr	r3, [sp, #32]
 801933c:	6143      	str	r3, [r0, #20]
 801933e:	2d09      	cmp	r5, #9
 8019340:	f04f 0301 	mov.w	r3, #1
 8019344:	6103      	str	r3, [r0, #16]
 8019346:	dd16      	ble.n	8019376 <__s2b+0x72>
 8019348:	f104 0909 	add.w	r9, r4, #9
 801934c:	46c8      	mov	r8, r9
 801934e:	442c      	add	r4, r5
 8019350:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019354:	4601      	mov	r1, r0
 8019356:	3b30      	subs	r3, #48	; 0x30
 8019358:	220a      	movs	r2, #10
 801935a:	4630      	mov	r0, r6
 801935c:	f7ff ff88 	bl	8019270 <__multadd>
 8019360:	45a0      	cmp	r8, r4
 8019362:	d1f5      	bne.n	8019350 <__s2b+0x4c>
 8019364:	f1a5 0408 	sub.w	r4, r5, #8
 8019368:	444c      	add	r4, r9
 801936a:	1b2d      	subs	r5, r5, r4
 801936c:	1963      	adds	r3, r4, r5
 801936e:	42bb      	cmp	r3, r7
 8019370:	db04      	blt.n	801937c <__s2b+0x78>
 8019372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019376:	340a      	adds	r4, #10
 8019378:	2509      	movs	r5, #9
 801937a:	e7f6      	b.n	801936a <__s2b+0x66>
 801937c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019380:	4601      	mov	r1, r0
 8019382:	3b30      	subs	r3, #48	; 0x30
 8019384:	220a      	movs	r2, #10
 8019386:	4630      	mov	r0, r6
 8019388:	f7ff ff72 	bl	8019270 <__multadd>
 801938c:	e7ee      	b.n	801936c <__s2b+0x68>
 801938e:	bf00      	nop
 8019390:	0801c84c 	.word	0x0801c84c
 8019394:	0801c8dc 	.word	0x0801c8dc

08019398 <__hi0bits>:
 8019398:	0c03      	lsrs	r3, r0, #16
 801939a:	041b      	lsls	r3, r3, #16
 801939c:	b9d3      	cbnz	r3, 80193d4 <__hi0bits+0x3c>
 801939e:	0400      	lsls	r0, r0, #16
 80193a0:	2310      	movs	r3, #16
 80193a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80193a6:	bf04      	itt	eq
 80193a8:	0200      	lsleq	r0, r0, #8
 80193aa:	3308      	addeq	r3, #8
 80193ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80193b0:	bf04      	itt	eq
 80193b2:	0100      	lsleq	r0, r0, #4
 80193b4:	3304      	addeq	r3, #4
 80193b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80193ba:	bf04      	itt	eq
 80193bc:	0080      	lsleq	r0, r0, #2
 80193be:	3302      	addeq	r3, #2
 80193c0:	2800      	cmp	r0, #0
 80193c2:	db05      	blt.n	80193d0 <__hi0bits+0x38>
 80193c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80193c8:	f103 0301 	add.w	r3, r3, #1
 80193cc:	bf08      	it	eq
 80193ce:	2320      	moveq	r3, #32
 80193d0:	4618      	mov	r0, r3
 80193d2:	4770      	bx	lr
 80193d4:	2300      	movs	r3, #0
 80193d6:	e7e4      	b.n	80193a2 <__hi0bits+0xa>

080193d8 <__lo0bits>:
 80193d8:	6803      	ldr	r3, [r0, #0]
 80193da:	f013 0207 	ands.w	r2, r3, #7
 80193de:	4601      	mov	r1, r0
 80193e0:	d00b      	beq.n	80193fa <__lo0bits+0x22>
 80193e2:	07da      	lsls	r2, r3, #31
 80193e4:	d424      	bmi.n	8019430 <__lo0bits+0x58>
 80193e6:	0798      	lsls	r0, r3, #30
 80193e8:	bf49      	itett	mi
 80193ea:	085b      	lsrmi	r3, r3, #1
 80193ec:	089b      	lsrpl	r3, r3, #2
 80193ee:	2001      	movmi	r0, #1
 80193f0:	600b      	strmi	r3, [r1, #0]
 80193f2:	bf5c      	itt	pl
 80193f4:	600b      	strpl	r3, [r1, #0]
 80193f6:	2002      	movpl	r0, #2
 80193f8:	4770      	bx	lr
 80193fa:	b298      	uxth	r0, r3
 80193fc:	b9b0      	cbnz	r0, 801942c <__lo0bits+0x54>
 80193fe:	0c1b      	lsrs	r3, r3, #16
 8019400:	2010      	movs	r0, #16
 8019402:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019406:	bf04      	itt	eq
 8019408:	0a1b      	lsreq	r3, r3, #8
 801940a:	3008      	addeq	r0, #8
 801940c:	071a      	lsls	r2, r3, #28
 801940e:	bf04      	itt	eq
 8019410:	091b      	lsreq	r3, r3, #4
 8019412:	3004      	addeq	r0, #4
 8019414:	079a      	lsls	r2, r3, #30
 8019416:	bf04      	itt	eq
 8019418:	089b      	lsreq	r3, r3, #2
 801941a:	3002      	addeq	r0, #2
 801941c:	07da      	lsls	r2, r3, #31
 801941e:	d403      	bmi.n	8019428 <__lo0bits+0x50>
 8019420:	085b      	lsrs	r3, r3, #1
 8019422:	f100 0001 	add.w	r0, r0, #1
 8019426:	d005      	beq.n	8019434 <__lo0bits+0x5c>
 8019428:	600b      	str	r3, [r1, #0]
 801942a:	4770      	bx	lr
 801942c:	4610      	mov	r0, r2
 801942e:	e7e8      	b.n	8019402 <__lo0bits+0x2a>
 8019430:	2000      	movs	r0, #0
 8019432:	4770      	bx	lr
 8019434:	2020      	movs	r0, #32
 8019436:	4770      	bx	lr

08019438 <__i2b>:
 8019438:	b510      	push	{r4, lr}
 801943a:	460c      	mov	r4, r1
 801943c:	2101      	movs	r1, #1
 801943e:	f7ff feb5 	bl	80191ac <_Balloc>
 8019442:	4602      	mov	r2, r0
 8019444:	b928      	cbnz	r0, 8019452 <__i2b+0x1a>
 8019446:	4b05      	ldr	r3, [pc, #20]	; (801945c <__i2b+0x24>)
 8019448:	4805      	ldr	r0, [pc, #20]	; (8019460 <__i2b+0x28>)
 801944a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801944e:	f000 fcfb 	bl	8019e48 <__assert_func>
 8019452:	2301      	movs	r3, #1
 8019454:	6144      	str	r4, [r0, #20]
 8019456:	6103      	str	r3, [r0, #16]
 8019458:	bd10      	pop	{r4, pc}
 801945a:	bf00      	nop
 801945c:	0801c84c 	.word	0x0801c84c
 8019460:	0801c8dc 	.word	0x0801c8dc

08019464 <__multiply>:
 8019464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019468:	4614      	mov	r4, r2
 801946a:	690a      	ldr	r2, [r1, #16]
 801946c:	6923      	ldr	r3, [r4, #16]
 801946e:	429a      	cmp	r2, r3
 8019470:	bfb8      	it	lt
 8019472:	460b      	movlt	r3, r1
 8019474:	460d      	mov	r5, r1
 8019476:	bfbc      	itt	lt
 8019478:	4625      	movlt	r5, r4
 801947a:	461c      	movlt	r4, r3
 801947c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8019480:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019484:	68ab      	ldr	r3, [r5, #8]
 8019486:	6869      	ldr	r1, [r5, #4]
 8019488:	eb0a 0709 	add.w	r7, sl, r9
 801948c:	42bb      	cmp	r3, r7
 801948e:	b085      	sub	sp, #20
 8019490:	bfb8      	it	lt
 8019492:	3101      	addlt	r1, #1
 8019494:	f7ff fe8a 	bl	80191ac <_Balloc>
 8019498:	b930      	cbnz	r0, 80194a8 <__multiply+0x44>
 801949a:	4602      	mov	r2, r0
 801949c:	4b42      	ldr	r3, [pc, #264]	; (80195a8 <__multiply+0x144>)
 801949e:	4843      	ldr	r0, [pc, #268]	; (80195ac <__multiply+0x148>)
 80194a0:	f240 115d 	movw	r1, #349	; 0x15d
 80194a4:	f000 fcd0 	bl	8019e48 <__assert_func>
 80194a8:	f100 0614 	add.w	r6, r0, #20
 80194ac:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80194b0:	4633      	mov	r3, r6
 80194b2:	2200      	movs	r2, #0
 80194b4:	4543      	cmp	r3, r8
 80194b6:	d31e      	bcc.n	80194f6 <__multiply+0x92>
 80194b8:	f105 0c14 	add.w	ip, r5, #20
 80194bc:	f104 0314 	add.w	r3, r4, #20
 80194c0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80194c4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80194c8:	9202      	str	r2, [sp, #8]
 80194ca:	ebac 0205 	sub.w	r2, ip, r5
 80194ce:	3a15      	subs	r2, #21
 80194d0:	f022 0203 	bic.w	r2, r2, #3
 80194d4:	3204      	adds	r2, #4
 80194d6:	f105 0115 	add.w	r1, r5, #21
 80194da:	458c      	cmp	ip, r1
 80194dc:	bf38      	it	cc
 80194de:	2204      	movcc	r2, #4
 80194e0:	9201      	str	r2, [sp, #4]
 80194e2:	9a02      	ldr	r2, [sp, #8]
 80194e4:	9303      	str	r3, [sp, #12]
 80194e6:	429a      	cmp	r2, r3
 80194e8:	d808      	bhi.n	80194fc <__multiply+0x98>
 80194ea:	2f00      	cmp	r7, #0
 80194ec:	dc55      	bgt.n	801959a <__multiply+0x136>
 80194ee:	6107      	str	r7, [r0, #16]
 80194f0:	b005      	add	sp, #20
 80194f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194f6:	f843 2b04 	str.w	r2, [r3], #4
 80194fa:	e7db      	b.n	80194b4 <__multiply+0x50>
 80194fc:	f8b3 a000 	ldrh.w	sl, [r3]
 8019500:	f1ba 0f00 	cmp.w	sl, #0
 8019504:	d020      	beq.n	8019548 <__multiply+0xe4>
 8019506:	f105 0e14 	add.w	lr, r5, #20
 801950a:	46b1      	mov	r9, r6
 801950c:	2200      	movs	r2, #0
 801950e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8019512:	f8d9 b000 	ldr.w	fp, [r9]
 8019516:	b2a1      	uxth	r1, r4
 8019518:	fa1f fb8b 	uxth.w	fp, fp
 801951c:	fb0a b101 	mla	r1, sl, r1, fp
 8019520:	4411      	add	r1, r2
 8019522:	f8d9 2000 	ldr.w	r2, [r9]
 8019526:	0c24      	lsrs	r4, r4, #16
 8019528:	0c12      	lsrs	r2, r2, #16
 801952a:	fb0a 2404 	mla	r4, sl, r4, r2
 801952e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8019532:	b289      	uxth	r1, r1
 8019534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8019538:	45f4      	cmp	ip, lr
 801953a:	f849 1b04 	str.w	r1, [r9], #4
 801953e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8019542:	d8e4      	bhi.n	801950e <__multiply+0xaa>
 8019544:	9901      	ldr	r1, [sp, #4]
 8019546:	5072      	str	r2, [r6, r1]
 8019548:	9a03      	ldr	r2, [sp, #12]
 801954a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801954e:	3304      	adds	r3, #4
 8019550:	f1b9 0f00 	cmp.w	r9, #0
 8019554:	d01f      	beq.n	8019596 <__multiply+0x132>
 8019556:	6834      	ldr	r4, [r6, #0]
 8019558:	f105 0114 	add.w	r1, r5, #20
 801955c:	46b6      	mov	lr, r6
 801955e:	f04f 0a00 	mov.w	sl, #0
 8019562:	880a      	ldrh	r2, [r1, #0]
 8019564:	f8be b002 	ldrh.w	fp, [lr, #2]
 8019568:	fb09 b202 	mla	r2, r9, r2, fp
 801956c:	4492      	add	sl, r2
 801956e:	b2a4      	uxth	r4, r4
 8019570:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8019574:	f84e 4b04 	str.w	r4, [lr], #4
 8019578:	f851 4b04 	ldr.w	r4, [r1], #4
 801957c:	f8be 2000 	ldrh.w	r2, [lr]
 8019580:	0c24      	lsrs	r4, r4, #16
 8019582:	fb09 2404 	mla	r4, r9, r4, r2
 8019586:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801958a:	458c      	cmp	ip, r1
 801958c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8019590:	d8e7      	bhi.n	8019562 <__multiply+0xfe>
 8019592:	9a01      	ldr	r2, [sp, #4]
 8019594:	50b4      	str	r4, [r6, r2]
 8019596:	3604      	adds	r6, #4
 8019598:	e7a3      	b.n	80194e2 <__multiply+0x7e>
 801959a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801959e:	2b00      	cmp	r3, #0
 80195a0:	d1a5      	bne.n	80194ee <__multiply+0x8a>
 80195a2:	3f01      	subs	r7, #1
 80195a4:	e7a1      	b.n	80194ea <__multiply+0x86>
 80195a6:	bf00      	nop
 80195a8:	0801c84c 	.word	0x0801c84c
 80195ac:	0801c8dc 	.word	0x0801c8dc

080195b0 <__pow5mult>:
 80195b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195b4:	4615      	mov	r5, r2
 80195b6:	f012 0203 	ands.w	r2, r2, #3
 80195ba:	4606      	mov	r6, r0
 80195bc:	460f      	mov	r7, r1
 80195be:	d007      	beq.n	80195d0 <__pow5mult+0x20>
 80195c0:	4c25      	ldr	r4, [pc, #148]	; (8019658 <__pow5mult+0xa8>)
 80195c2:	3a01      	subs	r2, #1
 80195c4:	2300      	movs	r3, #0
 80195c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80195ca:	f7ff fe51 	bl	8019270 <__multadd>
 80195ce:	4607      	mov	r7, r0
 80195d0:	10ad      	asrs	r5, r5, #2
 80195d2:	d03d      	beq.n	8019650 <__pow5mult+0xa0>
 80195d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80195d6:	b97c      	cbnz	r4, 80195f8 <__pow5mult+0x48>
 80195d8:	2010      	movs	r0, #16
 80195da:	f7fc fd59 	bl	8016090 <malloc>
 80195de:	4602      	mov	r2, r0
 80195e0:	6270      	str	r0, [r6, #36]	; 0x24
 80195e2:	b928      	cbnz	r0, 80195f0 <__pow5mult+0x40>
 80195e4:	4b1d      	ldr	r3, [pc, #116]	; (801965c <__pow5mult+0xac>)
 80195e6:	481e      	ldr	r0, [pc, #120]	; (8019660 <__pow5mult+0xb0>)
 80195e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80195ec:	f000 fc2c 	bl	8019e48 <__assert_func>
 80195f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80195f4:	6004      	str	r4, [r0, #0]
 80195f6:	60c4      	str	r4, [r0, #12]
 80195f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80195fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019600:	b94c      	cbnz	r4, 8019616 <__pow5mult+0x66>
 8019602:	f240 2171 	movw	r1, #625	; 0x271
 8019606:	4630      	mov	r0, r6
 8019608:	f7ff ff16 	bl	8019438 <__i2b>
 801960c:	2300      	movs	r3, #0
 801960e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019612:	4604      	mov	r4, r0
 8019614:	6003      	str	r3, [r0, #0]
 8019616:	f04f 0900 	mov.w	r9, #0
 801961a:	07eb      	lsls	r3, r5, #31
 801961c:	d50a      	bpl.n	8019634 <__pow5mult+0x84>
 801961e:	4639      	mov	r1, r7
 8019620:	4622      	mov	r2, r4
 8019622:	4630      	mov	r0, r6
 8019624:	f7ff ff1e 	bl	8019464 <__multiply>
 8019628:	4639      	mov	r1, r7
 801962a:	4680      	mov	r8, r0
 801962c:	4630      	mov	r0, r6
 801962e:	f7ff fdfd 	bl	801922c <_Bfree>
 8019632:	4647      	mov	r7, r8
 8019634:	106d      	asrs	r5, r5, #1
 8019636:	d00b      	beq.n	8019650 <__pow5mult+0xa0>
 8019638:	6820      	ldr	r0, [r4, #0]
 801963a:	b938      	cbnz	r0, 801964c <__pow5mult+0x9c>
 801963c:	4622      	mov	r2, r4
 801963e:	4621      	mov	r1, r4
 8019640:	4630      	mov	r0, r6
 8019642:	f7ff ff0f 	bl	8019464 <__multiply>
 8019646:	6020      	str	r0, [r4, #0]
 8019648:	f8c0 9000 	str.w	r9, [r0]
 801964c:	4604      	mov	r4, r0
 801964e:	e7e4      	b.n	801961a <__pow5mult+0x6a>
 8019650:	4638      	mov	r0, r7
 8019652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019656:	bf00      	nop
 8019658:	0801ca30 	.word	0x0801ca30
 801965c:	0801c7d6 	.word	0x0801c7d6
 8019660:	0801c8dc 	.word	0x0801c8dc

08019664 <__lshift>:
 8019664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019668:	460c      	mov	r4, r1
 801966a:	6849      	ldr	r1, [r1, #4]
 801966c:	6923      	ldr	r3, [r4, #16]
 801966e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019672:	68a3      	ldr	r3, [r4, #8]
 8019674:	4607      	mov	r7, r0
 8019676:	4691      	mov	r9, r2
 8019678:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801967c:	f108 0601 	add.w	r6, r8, #1
 8019680:	42b3      	cmp	r3, r6
 8019682:	db0b      	blt.n	801969c <__lshift+0x38>
 8019684:	4638      	mov	r0, r7
 8019686:	f7ff fd91 	bl	80191ac <_Balloc>
 801968a:	4605      	mov	r5, r0
 801968c:	b948      	cbnz	r0, 80196a2 <__lshift+0x3e>
 801968e:	4602      	mov	r2, r0
 8019690:	4b28      	ldr	r3, [pc, #160]	; (8019734 <__lshift+0xd0>)
 8019692:	4829      	ldr	r0, [pc, #164]	; (8019738 <__lshift+0xd4>)
 8019694:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019698:	f000 fbd6 	bl	8019e48 <__assert_func>
 801969c:	3101      	adds	r1, #1
 801969e:	005b      	lsls	r3, r3, #1
 80196a0:	e7ee      	b.n	8019680 <__lshift+0x1c>
 80196a2:	2300      	movs	r3, #0
 80196a4:	f100 0114 	add.w	r1, r0, #20
 80196a8:	f100 0210 	add.w	r2, r0, #16
 80196ac:	4618      	mov	r0, r3
 80196ae:	4553      	cmp	r3, sl
 80196b0:	db33      	blt.n	801971a <__lshift+0xb6>
 80196b2:	6920      	ldr	r0, [r4, #16]
 80196b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80196b8:	f104 0314 	add.w	r3, r4, #20
 80196bc:	f019 091f 	ands.w	r9, r9, #31
 80196c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80196c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80196c8:	d02b      	beq.n	8019722 <__lshift+0xbe>
 80196ca:	f1c9 0e20 	rsb	lr, r9, #32
 80196ce:	468a      	mov	sl, r1
 80196d0:	2200      	movs	r2, #0
 80196d2:	6818      	ldr	r0, [r3, #0]
 80196d4:	fa00 f009 	lsl.w	r0, r0, r9
 80196d8:	4302      	orrs	r2, r0
 80196da:	f84a 2b04 	str.w	r2, [sl], #4
 80196de:	f853 2b04 	ldr.w	r2, [r3], #4
 80196e2:	459c      	cmp	ip, r3
 80196e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80196e8:	d8f3      	bhi.n	80196d2 <__lshift+0x6e>
 80196ea:	ebac 0304 	sub.w	r3, ip, r4
 80196ee:	3b15      	subs	r3, #21
 80196f0:	f023 0303 	bic.w	r3, r3, #3
 80196f4:	3304      	adds	r3, #4
 80196f6:	f104 0015 	add.w	r0, r4, #21
 80196fa:	4584      	cmp	ip, r0
 80196fc:	bf38      	it	cc
 80196fe:	2304      	movcc	r3, #4
 8019700:	50ca      	str	r2, [r1, r3]
 8019702:	b10a      	cbz	r2, 8019708 <__lshift+0xa4>
 8019704:	f108 0602 	add.w	r6, r8, #2
 8019708:	3e01      	subs	r6, #1
 801970a:	4638      	mov	r0, r7
 801970c:	612e      	str	r6, [r5, #16]
 801970e:	4621      	mov	r1, r4
 8019710:	f7ff fd8c 	bl	801922c <_Bfree>
 8019714:	4628      	mov	r0, r5
 8019716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801971a:	f842 0f04 	str.w	r0, [r2, #4]!
 801971e:	3301      	adds	r3, #1
 8019720:	e7c5      	b.n	80196ae <__lshift+0x4a>
 8019722:	3904      	subs	r1, #4
 8019724:	f853 2b04 	ldr.w	r2, [r3], #4
 8019728:	f841 2f04 	str.w	r2, [r1, #4]!
 801972c:	459c      	cmp	ip, r3
 801972e:	d8f9      	bhi.n	8019724 <__lshift+0xc0>
 8019730:	e7ea      	b.n	8019708 <__lshift+0xa4>
 8019732:	bf00      	nop
 8019734:	0801c84c 	.word	0x0801c84c
 8019738:	0801c8dc 	.word	0x0801c8dc

0801973c <__mcmp>:
 801973c:	b530      	push	{r4, r5, lr}
 801973e:	6902      	ldr	r2, [r0, #16]
 8019740:	690c      	ldr	r4, [r1, #16]
 8019742:	1b12      	subs	r2, r2, r4
 8019744:	d10e      	bne.n	8019764 <__mcmp+0x28>
 8019746:	f100 0314 	add.w	r3, r0, #20
 801974a:	3114      	adds	r1, #20
 801974c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019750:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019754:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019758:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801975c:	42a5      	cmp	r5, r4
 801975e:	d003      	beq.n	8019768 <__mcmp+0x2c>
 8019760:	d305      	bcc.n	801976e <__mcmp+0x32>
 8019762:	2201      	movs	r2, #1
 8019764:	4610      	mov	r0, r2
 8019766:	bd30      	pop	{r4, r5, pc}
 8019768:	4283      	cmp	r3, r0
 801976a:	d3f3      	bcc.n	8019754 <__mcmp+0x18>
 801976c:	e7fa      	b.n	8019764 <__mcmp+0x28>
 801976e:	f04f 32ff 	mov.w	r2, #4294967295
 8019772:	e7f7      	b.n	8019764 <__mcmp+0x28>

08019774 <__mdiff>:
 8019774:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019778:	460c      	mov	r4, r1
 801977a:	4606      	mov	r6, r0
 801977c:	4611      	mov	r1, r2
 801977e:	4620      	mov	r0, r4
 8019780:	4617      	mov	r7, r2
 8019782:	f7ff ffdb 	bl	801973c <__mcmp>
 8019786:	1e05      	subs	r5, r0, #0
 8019788:	d110      	bne.n	80197ac <__mdiff+0x38>
 801978a:	4629      	mov	r1, r5
 801978c:	4630      	mov	r0, r6
 801978e:	f7ff fd0d 	bl	80191ac <_Balloc>
 8019792:	b930      	cbnz	r0, 80197a2 <__mdiff+0x2e>
 8019794:	4b39      	ldr	r3, [pc, #228]	; (801987c <__mdiff+0x108>)
 8019796:	4602      	mov	r2, r0
 8019798:	f240 2132 	movw	r1, #562	; 0x232
 801979c:	4838      	ldr	r0, [pc, #224]	; (8019880 <__mdiff+0x10c>)
 801979e:	f000 fb53 	bl	8019e48 <__assert_func>
 80197a2:	2301      	movs	r3, #1
 80197a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80197a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197ac:	bfa4      	itt	ge
 80197ae:	463b      	movge	r3, r7
 80197b0:	4627      	movge	r7, r4
 80197b2:	4630      	mov	r0, r6
 80197b4:	6879      	ldr	r1, [r7, #4]
 80197b6:	bfa6      	itte	ge
 80197b8:	461c      	movge	r4, r3
 80197ba:	2500      	movge	r5, #0
 80197bc:	2501      	movlt	r5, #1
 80197be:	f7ff fcf5 	bl	80191ac <_Balloc>
 80197c2:	b920      	cbnz	r0, 80197ce <__mdiff+0x5a>
 80197c4:	4b2d      	ldr	r3, [pc, #180]	; (801987c <__mdiff+0x108>)
 80197c6:	4602      	mov	r2, r0
 80197c8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80197cc:	e7e6      	b.n	801979c <__mdiff+0x28>
 80197ce:	693e      	ldr	r6, [r7, #16]
 80197d0:	60c5      	str	r5, [r0, #12]
 80197d2:	6925      	ldr	r5, [r4, #16]
 80197d4:	f107 0114 	add.w	r1, r7, #20
 80197d8:	f104 0914 	add.w	r9, r4, #20
 80197dc:	f100 0e14 	add.w	lr, r0, #20
 80197e0:	f107 0210 	add.w	r2, r7, #16
 80197e4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80197e8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80197ec:	46f2      	mov	sl, lr
 80197ee:	2700      	movs	r7, #0
 80197f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80197f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80197f8:	fa1f f883 	uxth.w	r8, r3
 80197fc:	fa17 f78b 	uxtah	r7, r7, fp
 8019800:	0c1b      	lsrs	r3, r3, #16
 8019802:	eba7 0808 	sub.w	r8, r7, r8
 8019806:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801980a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801980e:	fa1f f888 	uxth.w	r8, r8
 8019812:	141f      	asrs	r7, r3, #16
 8019814:	454d      	cmp	r5, r9
 8019816:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801981a:	f84a 3b04 	str.w	r3, [sl], #4
 801981e:	d8e7      	bhi.n	80197f0 <__mdiff+0x7c>
 8019820:	1b2b      	subs	r3, r5, r4
 8019822:	3b15      	subs	r3, #21
 8019824:	f023 0303 	bic.w	r3, r3, #3
 8019828:	3304      	adds	r3, #4
 801982a:	3415      	adds	r4, #21
 801982c:	42a5      	cmp	r5, r4
 801982e:	bf38      	it	cc
 8019830:	2304      	movcc	r3, #4
 8019832:	4419      	add	r1, r3
 8019834:	4473      	add	r3, lr
 8019836:	469e      	mov	lr, r3
 8019838:	460d      	mov	r5, r1
 801983a:	4565      	cmp	r5, ip
 801983c:	d30e      	bcc.n	801985c <__mdiff+0xe8>
 801983e:	f10c 0203 	add.w	r2, ip, #3
 8019842:	1a52      	subs	r2, r2, r1
 8019844:	f022 0203 	bic.w	r2, r2, #3
 8019848:	3903      	subs	r1, #3
 801984a:	458c      	cmp	ip, r1
 801984c:	bf38      	it	cc
 801984e:	2200      	movcc	r2, #0
 8019850:	441a      	add	r2, r3
 8019852:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019856:	b17b      	cbz	r3, 8019878 <__mdiff+0x104>
 8019858:	6106      	str	r6, [r0, #16]
 801985a:	e7a5      	b.n	80197a8 <__mdiff+0x34>
 801985c:	f855 8b04 	ldr.w	r8, [r5], #4
 8019860:	fa17 f488 	uxtah	r4, r7, r8
 8019864:	1422      	asrs	r2, r4, #16
 8019866:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801986a:	b2a4      	uxth	r4, r4
 801986c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019870:	f84e 4b04 	str.w	r4, [lr], #4
 8019874:	1417      	asrs	r7, r2, #16
 8019876:	e7e0      	b.n	801983a <__mdiff+0xc6>
 8019878:	3e01      	subs	r6, #1
 801987a:	e7ea      	b.n	8019852 <__mdiff+0xde>
 801987c:	0801c84c 	.word	0x0801c84c
 8019880:	0801c8dc 	.word	0x0801c8dc

08019884 <__ulp>:
 8019884:	b082      	sub	sp, #8
 8019886:	ed8d 0b00 	vstr	d0, [sp]
 801988a:	9b01      	ldr	r3, [sp, #4]
 801988c:	4912      	ldr	r1, [pc, #72]	; (80198d8 <__ulp+0x54>)
 801988e:	4019      	ands	r1, r3
 8019890:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019894:	2900      	cmp	r1, #0
 8019896:	dd05      	ble.n	80198a4 <__ulp+0x20>
 8019898:	2200      	movs	r2, #0
 801989a:	460b      	mov	r3, r1
 801989c:	ec43 2b10 	vmov	d0, r2, r3
 80198a0:	b002      	add	sp, #8
 80198a2:	4770      	bx	lr
 80198a4:	4249      	negs	r1, r1
 80198a6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80198aa:	ea4f 5021 	mov.w	r0, r1, asr #20
 80198ae:	f04f 0200 	mov.w	r2, #0
 80198b2:	f04f 0300 	mov.w	r3, #0
 80198b6:	da04      	bge.n	80198c2 <__ulp+0x3e>
 80198b8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80198bc:	fa41 f300 	asr.w	r3, r1, r0
 80198c0:	e7ec      	b.n	801989c <__ulp+0x18>
 80198c2:	f1a0 0114 	sub.w	r1, r0, #20
 80198c6:	291e      	cmp	r1, #30
 80198c8:	bfda      	itte	le
 80198ca:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80198ce:	fa20 f101 	lsrle.w	r1, r0, r1
 80198d2:	2101      	movgt	r1, #1
 80198d4:	460a      	mov	r2, r1
 80198d6:	e7e1      	b.n	801989c <__ulp+0x18>
 80198d8:	7ff00000 	.word	0x7ff00000

080198dc <__b2d>:
 80198dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198de:	6905      	ldr	r5, [r0, #16]
 80198e0:	f100 0714 	add.w	r7, r0, #20
 80198e4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80198e8:	1f2e      	subs	r6, r5, #4
 80198ea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80198ee:	4620      	mov	r0, r4
 80198f0:	f7ff fd52 	bl	8019398 <__hi0bits>
 80198f4:	f1c0 0320 	rsb	r3, r0, #32
 80198f8:	280a      	cmp	r0, #10
 80198fa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8019978 <__b2d+0x9c>
 80198fe:	600b      	str	r3, [r1, #0]
 8019900:	dc14      	bgt.n	801992c <__b2d+0x50>
 8019902:	f1c0 0e0b 	rsb	lr, r0, #11
 8019906:	fa24 f10e 	lsr.w	r1, r4, lr
 801990a:	42b7      	cmp	r7, r6
 801990c:	ea41 030c 	orr.w	r3, r1, ip
 8019910:	bf34      	ite	cc
 8019912:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019916:	2100      	movcs	r1, #0
 8019918:	3015      	adds	r0, #21
 801991a:	fa04 f000 	lsl.w	r0, r4, r0
 801991e:	fa21 f10e 	lsr.w	r1, r1, lr
 8019922:	ea40 0201 	orr.w	r2, r0, r1
 8019926:	ec43 2b10 	vmov	d0, r2, r3
 801992a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801992c:	42b7      	cmp	r7, r6
 801992e:	bf3a      	itte	cc
 8019930:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019934:	f1a5 0608 	subcc.w	r6, r5, #8
 8019938:	2100      	movcs	r1, #0
 801993a:	380b      	subs	r0, #11
 801993c:	d017      	beq.n	801996e <__b2d+0x92>
 801993e:	f1c0 0c20 	rsb	ip, r0, #32
 8019942:	fa04 f500 	lsl.w	r5, r4, r0
 8019946:	42be      	cmp	r6, r7
 8019948:	fa21 f40c 	lsr.w	r4, r1, ip
 801994c:	ea45 0504 	orr.w	r5, r5, r4
 8019950:	bf8c      	ite	hi
 8019952:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019956:	2400      	movls	r4, #0
 8019958:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801995c:	fa01 f000 	lsl.w	r0, r1, r0
 8019960:	fa24 f40c 	lsr.w	r4, r4, ip
 8019964:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019968:	ea40 0204 	orr.w	r2, r0, r4
 801996c:	e7db      	b.n	8019926 <__b2d+0x4a>
 801996e:	ea44 030c 	orr.w	r3, r4, ip
 8019972:	460a      	mov	r2, r1
 8019974:	e7d7      	b.n	8019926 <__b2d+0x4a>
 8019976:	bf00      	nop
 8019978:	3ff00000 	.word	0x3ff00000

0801997c <__d2b>:
 801997c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019980:	4689      	mov	r9, r1
 8019982:	2101      	movs	r1, #1
 8019984:	ec57 6b10 	vmov	r6, r7, d0
 8019988:	4690      	mov	r8, r2
 801998a:	f7ff fc0f 	bl	80191ac <_Balloc>
 801998e:	4604      	mov	r4, r0
 8019990:	b930      	cbnz	r0, 80199a0 <__d2b+0x24>
 8019992:	4602      	mov	r2, r0
 8019994:	4b25      	ldr	r3, [pc, #148]	; (8019a2c <__d2b+0xb0>)
 8019996:	4826      	ldr	r0, [pc, #152]	; (8019a30 <__d2b+0xb4>)
 8019998:	f240 310a 	movw	r1, #778	; 0x30a
 801999c:	f000 fa54 	bl	8019e48 <__assert_func>
 80199a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80199a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80199a8:	bb35      	cbnz	r5, 80199f8 <__d2b+0x7c>
 80199aa:	2e00      	cmp	r6, #0
 80199ac:	9301      	str	r3, [sp, #4]
 80199ae:	d028      	beq.n	8019a02 <__d2b+0x86>
 80199b0:	4668      	mov	r0, sp
 80199b2:	9600      	str	r6, [sp, #0]
 80199b4:	f7ff fd10 	bl	80193d8 <__lo0bits>
 80199b8:	9900      	ldr	r1, [sp, #0]
 80199ba:	b300      	cbz	r0, 80199fe <__d2b+0x82>
 80199bc:	9a01      	ldr	r2, [sp, #4]
 80199be:	f1c0 0320 	rsb	r3, r0, #32
 80199c2:	fa02 f303 	lsl.w	r3, r2, r3
 80199c6:	430b      	orrs	r3, r1
 80199c8:	40c2      	lsrs	r2, r0
 80199ca:	6163      	str	r3, [r4, #20]
 80199cc:	9201      	str	r2, [sp, #4]
 80199ce:	9b01      	ldr	r3, [sp, #4]
 80199d0:	61a3      	str	r3, [r4, #24]
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	bf14      	ite	ne
 80199d6:	2202      	movne	r2, #2
 80199d8:	2201      	moveq	r2, #1
 80199da:	6122      	str	r2, [r4, #16]
 80199dc:	b1d5      	cbz	r5, 8019a14 <__d2b+0x98>
 80199de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80199e2:	4405      	add	r5, r0
 80199e4:	f8c9 5000 	str.w	r5, [r9]
 80199e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80199ec:	f8c8 0000 	str.w	r0, [r8]
 80199f0:	4620      	mov	r0, r4
 80199f2:	b003      	add	sp, #12
 80199f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80199fc:	e7d5      	b.n	80199aa <__d2b+0x2e>
 80199fe:	6161      	str	r1, [r4, #20]
 8019a00:	e7e5      	b.n	80199ce <__d2b+0x52>
 8019a02:	a801      	add	r0, sp, #4
 8019a04:	f7ff fce8 	bl	80193d8 <__lo0bits>
 8019a08:	9b01      	ldr	r3, [sp, #4]
 8019a0a:	6163      	str	r3, [r4, #20]
 8019a0c:	2201      	movs	r2, #1
 8019a0e:	6122      	str	r2, [r4, #16]
 8019a10:	3020      	adds	r0, #32
 8019a12:	e7e3      	b.n	80199dc <__d2b+0x60>
 8019a14:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019a18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019a1c:	f8c9 0000 	str.w	r0, [r9]
 8019a20:	6918      	ldr	r0, [r3, #16]
 8019a22:	f7ff fcb9 	bl	8019398 <__hi0bits>
 8019a26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019a2a:	e7df      	b.n	80199ec <__d2b+0x70>
 8019a2c:	0801c84c 	.word	0x0801c84c
 8019a30:	0801c8dc 	.word	0x0801c8dc

08019a34 <__ratio>:
 8019a34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a38:	4688      	mov	r8, r1
 8019a3a:	4669      	mov	r1, sp
 8019a3c:	4681      	mov	r9, r0
 8019a3e:	f7ff ff4d 	bl	80198dc <__b2d>
 8019a42:	a901      	add	r1, sp, #4
 8019a44:	4640      	mov	r0, r8
 8019a46:	ec55 4b10 	vmov	r4, r5, d0
 8019a4a:	f7ff ff47 	bl	80198dc <__b2d>
 8019a4e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019a52:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019a56:	eba3 0c02 	sub.w	ip, r3, r2
 8019a5a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019a5e:	1a9b      	subs	r3, r3, r2
 8019a60:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019a64:	ec51 0b10 	vmov	r0, r1, d0
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	bfd6      	itet	le
 8019a6c:	460a      	movle	r2, r1
 8019a6e:	462a      	movgt	r2, r5
 8019a70:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019a74:	468b      	mov	fp, r1
 8019a76:	462f      	mov	r7, r5
 8019a78:	bfd4      	ite	le
 8019a7a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8019a7e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019a82:	4620      	mov	r0, r4
 8019a84:	ee10 2a10 	vmov	r2, s0
 8019a88:	465b      	mov	r3, fp
 8019a8a:	4639      	mov	r1, r7
 8019a8c:	f7e6 fede 	bl	800084c <__aeabi_ddiv>
 8019a90:	ec41 0b10 	vmov	d0, r0, r1
 8019a94:	b003      	add	sp, #12
 8019a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019a9a <__copybits>:
 8019a9a:	3901      	subs	r1, #1
 8019a9c:	b570      	push	{r4, r5, r6, lr}
 8019a9e:	1149      	asrs	r1, r1, #5
 8019aa0:	6914      	ldr	r4, [r2, #16]
 8019aa2:	3101      	adds	r1, #1
 8019aa4:	f102 0314 	add.w	r3, r2, #20
 8019aa8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019aac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019ab0:	1f05      	subs	r5, r0, #4
 8019ab2:	42a3      	cmp	r3, r4
 8019ab4:	d30c      	bcc.n	8019ad0 <__copybits+0x36>
 8019ab6:	1aa3      	subs	r3, r4, r2
 8019ab8:	3b11      	subs	r3, #17
 8019aba:	f023 0303 	bic.w	r3, r3, #3
 8019abe:	3211      	adds	r2, #17
 8019ac0:	42a2      	cmp	r2, r4
 8019ac2:	bf88      	it	hi
 8019ac4:	2300      	movhi	r3, #0
 8019ac6:	4418      	add	r0, r3
 8019ac8:	2300      	movs	r3, #0
 8019aca:	4288      	cmp	r0, r1
 8019acc:	d305      	bcc.n	8019ada <__copybits+0x40>
 8019ace:	bd70      	pop	{r4, r5, r6, pc}
 8019ad0:	f853 6b04 	ldr.w	r6, [r3], #4
 8019ad4:	f845 6f04 	str.w	r6, [r5, #4]!
 8019ad8:	e7eb      	b.n	8019ab2 <__copybits+0x18>
 8019ada:	f840 3b04 	str.w	r3, [r0], #4
 8019ade:	e7f4      	b.n	8019aca <__copybits+0x30>

08019ae0 <__any_on>:
 8019ae0:	f100 0214 	add.w	r2, r0, #20
 8019ae4:	6900      	ldr	r0, [r0, #16]
 8019ae6:	114b      	asrs	r3, r1, #5
 8019ae8:	4298      	cmp	r0, r3
 8019aea:	b510      	push	{r4, lr}
 8019aec:	db11      	blt.n	8019b12 <__any_on+0x32>
 8019aee:	dd0a      	ble.n	8019b06 <__any_on+0x26>
 8019af0:	f011 011f 	ands.w	r1, r1, #31
 8019af4:	d007      	beq.n	8019b06 <__any_on+0x26>
 8019af6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019afa:	fa24 f001 	lsr.w	r0, r4, r1
 8019afe:	fa00 f101 	lsl.w	r1, r0, r1
 8019b02:	428c      	cmp	r4, r1
 8019b04:	d10b      	bne.n	8019b1e <__any_on+0x3e>
 8019b06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019b0a:	4293      	cmp	r3, r2
 8019b0c:	d803      	bhi.n	8019b16 <__any_on+0x36>
 8019b0e:	2000      	movs	r0, #0
 8019b10:	bd10      	pop	{r4, pc}
 8019b12:	4603      	mov	r3, r0
 8019b14:	e7f7      	b.n	8019b06 <__any_on+0x26>
 8019b16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019b1a:	2900      	cmp	r1, #0
 8019b1c:	d0f5      	beq.n	8019b0a <__any_on+0x2a>
 8019b1e:	2001      	movs	r0, #1
 8019b20:	e7f6      	b.n	8019b10 <__any_on+0x30>

08019b22 <_calloc_r>:
 8019b22:	b513      	push	{r0, r1, r4, lr}
 8019b24:	434a      	muls	r2, r1
 8019b26:	4611      	mov	r1, r2
 8019b28:	9201      	str	r2, [sp, #4]
 8019b2a:	f7fc fb41 	bl	80161b0 <_malloc_r>
 8019b2e:	4604      	mov	r4, r0
 8019b30:	b118      	cbz	r0, 8019b3a <_calloc_r+0x18>
 8019b32:	9a01      	ldr	r2, [sp, #4]
 8019b34:	2100      	movs	r1, #0
 8019b36:	f7fc fae3 	bl	8016100 <memset>
 8019b3a:	4620      	mov	r0, r4
 8019b3c:	b002      	add	sp, #8
 8019b3e:	bd10      	pop	{r4, pc}

08019b40 <__ssputs_r>:
 8019b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b44:	688e      	ldr	r6, [r1, #8]
 8019b46:	429e      	cmp	r6, r3
 8019b48:	4682      	mov	sl, r0
 8019b4a:	460c      	mov	r4, r1
 8019b4c:	4690      	mov	r8, r2
 8019b4e:	461f      	mov	r7, r3
 8019b50:	d838      	bhi.n	8019bc4 <__ssputs_r+0x84>
 8019b52:	898a      	ldrh	r2, [r1, #12]
 8019b54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019b58:	d032      	beq.n	8019bc0 <__ssputs_r+0x80>
 8019b5a:	6825      	ldr	r5, [r4, #0]
 8019b5c:	6909      	ldr	r1, [r1, #16]
 8019b5e:	eba5 0901 	sub.w	r9, r5, r1
 8019b62:	6965      	ldr	r5, [r4, #20]
 8019b64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019b68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019b6c:	3301      	adds	r3, #1
 8019b6e:	444b      	add	r3, r9
 8019b70:	106d      	asrs	r5, r5, #1
 8019b72:	429d      	cmp	r5, r3
 8019b74:	bf38      	it	cc
 8019b76:	461d      	movcc	r5, r3
 8019b78:	0553      	lsls	r3, r2, #21
 8019b7a:	d531      	bpl.n	8019be0 <__ssputs_r+0xa0>
 8019b7c:	4629      	mov	r1, r5
 8019b7e:	f7fc fb17 	bl	80161b0 <_malloc_r>
 8019b82:	4606      	mov	r6, r0
 8019b84:	b950      	cbnz	r0, 8019b9c <__ssputs_r+0x5c>
 8019b86:	230c      	movs	r3, #12
 8019b88:	f8ca 3000 	str.w	r3, [sl]
 8019b8c:	89a3      	ldrh	r3, [r4, #12]
 8019b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019b92:	81a3      	strh	r3, [r4, #12]
 8019b94:	f04f 30ff 	mov.w	r0, #4294967295
 8019b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b9c:	6921      	ldr	r1, [r4, #16]
 8019b9e:	464a      	mov	r2, r9
 8019ba0:	f7fc fa86 	bl	80160b0 <memcpy>
 8019ba4:	89a3      	ldrh	r3, [r4, #12]
 8019ba6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019bae:	81a3      	strh	r3, [r4, #12]
 8019bb0:	6126      	str	r6, [r4, #16]
 8019bb2:	6165      	str	r5, [r4, #20]
 8019bb4:	444e      	add	r6, r9
 8019bb6:	eba5 0509 	sub.w	r5, r5, r9
 8019bba:	6026      	str	r6, [r4, #0]
 8019bbc:	60a5      	str	r5, [r4, #8]
 8019bbe:	463e      	mov	r6, r7
 8019bc0:	42be      	cmp	r6, r7
 8019bc2:	d900      	bls.n	8019bc6 <__ssputs_r+0x86>
 8019bc4:	463e      	mov	r6, r7
 8019bc6:	4632      	mov	r2, r6
 8019bc8:	6820      	ldr	r0, [r4, #0]
 8019bca:	4641      	mov	r1, r8
 8019bcc:	f7fc fa7e 	bl	80160cc <memmove>
 8019bd0:	68a3      	ldr	r3, [r4, #8]
 8019bd2:	6822      	ldr	r2, [r4, #0]
 8019bd4:	1b9b      	subs	r3, r3, r6
 8019bd6:	4432      	add	r2, r6
 8019bd8:	60a3      	str	r3, [r4, #8]
 8019bda:	6022      	str	r2, [r4, #0]
 8019bdc:	2000      	movs	r0, #0
 8019bde:	e7db      	b.n	8019b98 <__ssputs_r+0x58>
 8019be0:	462a      	mov	r2, r5
 8019be2:	f000 f964 	bl	8019eae <_realloc_r>
 8019be6:	4606      	mov	r6, r0
 8019be8:	2800      	cmp	r0, #0
 8019bea:	d1e1      	bne.n	8019bb0 <__ssputs_r+0x70>
 8019bec:	6921      	ldr	r1, [r4, #16]
 8019bee:	4650      	mov	r0, sl
 8019bf0:	f7fc fa8e 	bl	8016110 <_free_r>
 8019bf4:	e7c7      	b.n	8019b86 <__ssputs_r+0x46>
	...

08019bf8 <_svfiprintf_r>:
 8019bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bfc:	4698      	mov	r8, r3
 8019bfe:	898b      	ldrh	r3, [r1, #12]
 8019c00:	061b      	lsls	r3, r3, #24
 8019c02:	b09d      	sub	sp, #116	; 0x74
 8019c04:	4607      	mov	r7, r0
 8019c06:	460d      	mov	r5, r1
 8019c08:	4614      	mov	r4, r2
 8019c0a:	d50e      	bpl.n	8019c2a <_svfiprintf_r+0x32>
 8019c0c:	690b      	ldr	r3, [r1, #16]
 8019c0e:	b963      	cbnz	r3, 8019c2a <_svfiprintf_r+0x32>
 8019c10:	2140      	movs	r1, #64	; 0x40
 8019c12:	f7fc facd 	bl	80161b0 <_malloc_r>
 8019c16:	6028      	str	r0, [r5, #0]
 8019c18:	6128      	str	r0, [r5, #16]
 8019c1a:	b920      	cbnz	r0, 8019c26 <_svfiprintf_r+0x2e>
 8019c1c:	230c      	movs	r3, #12
 8019c1e:	603b      	str	r3, [r7, #0]
 8019c20:	f04f 30ff 	mov.w	r0, #4294967295
 8019c24:	e0d1      	b.n	8019dca <_svfiprintf_r+0x1d2>
 8019c26:	2340      	movs	r3, #64	; 0x40
 8019c28:	616b      	str	r3, [r5, #20]
 8019c2a:	2300      	movs	r3, #0
 8019c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8019c2e:	2320      	movs	r3, #32
 8019c30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019c34:	f8cd 800c 	str.w	r8, [sp, #12]
 8019c38:	2330      	movs	r3, #48	; 0x30
 8019c3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019de4 <_svfiprintf_r+0x1ec>
 8019c3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019c42:	f04f 0901 	mov.w	r9, #1
 8019c46:	4623      	mov	r3, r4
 8019c48:	469a      	mov	sl, r3
 8019c4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c4e:	b10a      	cbz	r2, 8019c54 <_svfiprintf_r+0x5c>
 8019c50:	2a25      	cmp	r2, #37	; 0x25
 8019c52:	d1f9      	bne.n	8019c48 <_svfiprintf_r+0x50>
 8019c54:	ebba 0b04 	subs.w	fp, sl, r4
 8019c58:	d00b      	beq.n	8019c72 <_svfiprintf_r+0x7a>
 8019c5a:	465b      	mov	r3, fp
 8019c5c:	4622      	mov	r2, r4
 8019c5e:	4629      	mov	r1, r5
 8019c60:	4638      	mov	r0, r7
 8019c62:	f7ff ff6d 	bl	8019b40 <__ssputs_r>
 8019c66:	3001      	adds	r0, #1
 8019c68:	f000 80aa 	beq.w	8019dc0 <_svfiprintf_r+0x1c8>
 8019c6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019c6e:	445a      	add	r2, fp
 8019c70:	9209      	str	r2, [sp, #36]	; 0x24
 8019c72:	f89a 3000 	ldrb.w	r3, [sl]
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	f000 80a2 	beq.w	8019dc0 <_svfiprintf_r+0x1c8>
 8019c7c:	2300      	movs	r3, #0
 8019c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8019c82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019c86:	f10a 0a01 	add.w	sl, sl, #1
 8019c8a:	9304      	str	r3, [sp, #16]
 8019c8c:	9307      	str	r3, [sp, #28]
 8019c8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019c92:	931a      	str	r3, [sp, #104]	; 0x68
 8019c94:	4654      	mov	r4, sl
 8019c96:	2205      	movs	r2, #5
 8019c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c9c:	4851      	ldr	r0, [pc, #324]	; (8019de4 <_svfiprintf_r+0x1ec>)
 8019c9e:	f7e6 fa9f 	bl	80001e0 <memchr>
 8019ca2:	9a04      	ldr	r2, [sp, #16]
 8019ca4:	b9d8      	cbnz	r0, 8019cde <_svfiprintf_r+0xe6>
 8019ca6:	06d0      	lsls	r0, r2, #27
 8019ca8:	bf44      	itt	mi
 8019caa:	2320      	movmi	r3, #32
 8019cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019cb0:	0711      	lsls	r1, r2, #28
 8019cb2:	bf44      	itt	mi
 8019cb4:	232b      	movmi	r3, #43	; 0x2b
 8019cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019cba:	f89a 3000 	ldrb.w	r3, [sl]
 8019cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8019cc0:	d015      	beq.n	8019cee <_svfiprintf_r+0xf6>
 8019cc2:	9a07      	ldr	r2, [sp, #28]
 8019cc4:	4654      	mov	r4, sl
 8019cc6:	2000      	movs	r0, #0
 8019cc8:	f04f 0c0a 	mov.w	ip, #10
 8019ccc:	4621      	mov	r1, r4
 8019cce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019cd2:	3b30      	subs	r3, #48	; 0x30
 8019cd4:	2b09      	cmp	r3, #9
 8019cd6:	d94e      	bls.n	8019d76 <_svfiprintf_r+0x17e>
 8019cd8:	b1b0      	cbz	r0, 8019d08 <_svfiprintf_r+0x110>
 8019cda:	9207      	str	r2, [sp, #28]
 8019cdc:	e014      	b.n	8019d08 <_svfiprintf_r+0x110>
 8019cde:	eba0 0308 	sub.w	r3, r0, r8
 8019ce2:	fa09 f303 	lsl.w	r3, r9, r3
 8019ce6:	4313      	orrs	r3, r2
 8019ce8:	9304      	str	r3, [sp, #16]
 8019cea:	46a2      	mov	sl, r4
 8019cec:	e7d2      	b.n	8019c94 <_svfiprintf_r+0x9c>
 8019cee:	9b03      	ldr	r3, [sp, #12]
 8019cf0:	1d19      	adds	r1, r3, #4
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	9103      	str	r1, [sp, #12]
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	bfbb      	ittet	lt
 8019cfa:	425b      	neglt	r3, r3
 8019cfc:	f042 0202 	orrlt.w	r2, r2, #2
 8019d00:	9307      	strge	r3, [sp, #28]
 8019d02:	9307      	strlt	r3, [sp, #28]
 8019d04:	bfb8      	it	lt
 8019d06:	9204      	strlt	r2, [sp, #16]
 8019d08:	7823      	ldrb	r3, [r4, #0]
 8019d0a:	2b2e      	cmp	r3, #46	; 0x2e
 8019d0c:	d10c      	bne.n	8019d28 <_svfiprintf_r+0x130>
 8019d0e:	7863      	ldrb	r3, [r4, #1]
 8019d10:	2b2a      	cmp	r3, #42	; 0x2a
 8019d12:	d135      	bne.n	8019d80 <_svfiprintf_r+0x188>
 8019d14:	9b03      	ldr	r3, [sp, #12]
 8019d16:	1d1a      	adds	r2, r3, #4
 8019d18:	681b      	ldr	r3, [r3, #0]
 8019d1a:	9203      	str	r2, [sp, #12]
 8019d1c:	2b00      	cmp	r3, #0
 8019d1e:	bfb8      	it	lt
 8019d20:	f04f 33ff 	movlt.w	r3, #4294967295
 8019d24:	3402      	adds	r4, #2
 8019d26:	9305      	str	r3, [sp, #20]
 8019d28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019df4 <_svfiprintf_r+0x1fc>
 8019d2c:	7821      	ldrb	r1, [r4, #0]
 8019d2e:	2203      	movs	r2, #3
 8019d30:	4650      	mov	r0, sl
 8019d32:	f7e6 fa55 	bl	80001e0 <memchr>
 8019d36:	b140      	cbz	r0, 8019d4a <_svfiprintf_r+0x152>
 8019d38:	2340      	movs	r3, #64	; 0x40
 8019d3a:	eba0 000a 	sub.w	r0, r0, sl
 8019d3e:	fa03 f000 	lsl.w	r0, r3, r0
 8019d42:	9b04      	ldr	r3, [sp, #16]
 8019d44:	4303      	orrs	r3, r0
 8019d46:	3401      	adds	r4, #1
 8019d48:	9304      	str	r3, [sp, #16]
 8019d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d4e:	4826      	ldr	r0, [pc, #152]	; (8019de8 <_svfiprintf_r+0x1f0>)
 8019d50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019d54:	2206      	movs	r2, #6
 8019d56:	f7e6 fa43 	bl	80001e0 <memchr>
 8019d5a:	2800      	cmp	r0, #0
 8019d5c:	d038      	beq.n	8019dd0 <_svfiprintf_r+0x1d8>
 8019d5e:	4b23      	ldr	r3, [pc, #140]	; (8019dec <_svfiprintf_r+0x1f4>)
 8019d60:	bb1b      	cbnz	r3, 8019daa <_svfiprintf_r+0x1b2>
 8019d62:	9b03      	ldr	r3, [sp, #12]
 8019d64:	3307      	adds	r3, #7
 8019d66:	f023 0307 	bic.w	r3, r3, #7
 8019d6a:	3308      	adds	r3, #8
 8019d6c:	9303      	str	r3, [sp, #12]
 8019d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d70:	4433      	add	r3, r6
 8019d72:	9309      	str	r3, [sp, #36]	; 0x24
 8019d74:	e767      	b.n	8019c46 <_svfiprintf_r+0x4e>
 8019d76:	fb0c 3202 	mla	r2, ip, r2, r3
 8019d7a:	460c      	mov	r4, r1
 8019d7c:	2001      	movs	r0, #1
 8019d7e:	e7a5      	b.n	8019ccc <_svfiprintf_r+0xd4>
 8019d80:	2300      	movs	r3, #0
 8019d82:	3401      	adds	r4, #1
 8019d84:	9305      	str	r3, [sp, #20]
 8019d86:	4619      	mov	r1, r3
 8019d88:	f04f 0c0a 	mov.w	ip, #10
 8019d8c:	4620      	mov	r0, r4
 8019d8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019d92:	3a30      	subs	r2, #48	; 0x30
 8019d94:	2a09      	cmp	r2, #9
 8019d96:	d903      	bls.n	8019da0 <_svfiprintf_r+0x1a8>
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d0c5      	beq.n	8019d28 <_svfiprintf_r+0x130>
 8019d9c:	9105      	str	r1, [sp, #20]
 8019d9e:	e7c3      	b.n	8019d28 <_svfiprintf_r+0x130>
 8019da0:	fb0c 2101 	mla	r1, ip, r1, r2
 8019da4:	4604      	mov	r4, r0
 8019da6:	2301      	movs	r3, #1
 8019da8:	e7f0      	b.n	8019d8c <_svfiprintf_r+0x194>
 8019daa:	ab03      	add	r3, sp, #12
 8019dac:	9300      	str	r3, [sp, #0]
 8019dae:	462a      	mov	r2, r5
 8019db0:	4b0f      	ldr	r3, [pc, #60]	; (8019df0 <_svfiprintf_r+0x1f8>)
 8019db2:	a904      	add	r1, sp, #16
 8019db4:	4638      	mov	r0, r7
 8019db6:	f7fc faf5 	bl	80163a4 <_printf_float>
 8019dba:	1c42      	adds	r2, r0, #1
 8019dbc:	4606      	mov	r6, r0
 8019dbe:	d1d6      	bne.n	8019d6e <_svfiprintf_r+0x176>
 8019dc0:	89ab      	ldrh	r3, [r5, #12]
 8019dc2:	065b      	lsls	r3, r3, #25
 8019dc4:	f53f af2c 	bmi.w	8019c20 <_svfiprintf_r+0x28>
 8019dc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019dca:	b01d      	add	sp, #116	; 0x74
 8019dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dd0:	ab03      	add	r3, sp, #12
 8019dd2:	9300      	str	r3, [sp, #0]
 8019dd4:	462a      	mov	r2, r5
 8019dd6:	4b06      	ldr	r3, [pc, #24]	; (8019df0 <_svfiprintf_r+0x1f8>)
 8019dd8:	a904      	add	r1, sp, #16
 8019dda:	4638      	mov	r0, r7
 8019ddc:	f7fc fd86 	bl	80168ec <_printf_i>
 8019de0:	e7eb      	b.n	8019dba <_svfiprintf_r+0x1c2>
 8019de2:	bf00      	nop
 8019de4:	0801ca3c 	.word	0x0801ca3c
 8019de8:	0801ca46 	.word	0x0801ca46
 8019dec:	080163a5 	.word	0x080163a5
 8019df0:	08019b41 	.word	0x08019b41
 8019df4:	0801ca42 	.word	0x0801ca42

08019df8 <nan>:
 8019df8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019e00 <nan+0x8>
 8019dfc:	4770      	bx	lr
 8019dfe:	bf00      	nop
 8019e00:	00000000 	.word	0x00000000
 8019e04:	7ff80000 	.word	0x7ff80000

08019e08 <strncmp>:
 8019e08:	b510      	push	{r4, lr}
 8019e0a:	b16a      	cbz	r2, 8019e28 <strncmp+0x20>
 8019e0c:	3901      	subs	r1, #1
 8019e0e:	1884      	adds	r4, r0, r2
 8019e10:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019e14:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019e18:	4293      	cmp	r3, r2
 8019e1a:	d103      	bne.n	8019e24 <strncmp+0x1c>
 8019e1c:	42a0      	cmp	r0, r4
 8019e1e:	d001      	beq.n	8019e24 <strncmp+0x1c>
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d1f5      	bne.n	8019e10 <strncmp+0x8>
 8019e24:	1a98      	subs	r0, r3, r2
 8019e26:	bd10      	pop	{r4, pc}
 8019e28:	4610      	mov	r0, r2
 8019e2a:	e7fc      	b.n	8019e26 <strncmp+0x1e>

08019e2c <__ascii_wctomb>:
 8019e2c:	b149      	cbz	r1, 8019e42 <__ascii_wctomb+0x16>
 8019e2e:	2aff      	cmp	r2, #255	; 0xff
 8019e30:	bf85      	ittet	hi
 8019e32:	238a      	movhi	r3, #138	; 0x8a
 8019e34:	6003      	strhi	r3, [r0, #0]
 8019e36:	700a      	strbls	r2, [r1, #0]
 8019e38:	f04f 30ff 	movhi.w	r0, #4294967295
 8019e3c:	bf98      	it	ls
 8019e3e:	2001      	movls	r0, #1
 8019e40:	4770      	bx	lr
 8019e42:	4608      	mov	r0, r1
 8019e44:	4770      	bx	lr
	...

08019e48 <__assert_func>:
 8019e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019e4a:	4614      	mov	r4, r2
 8019e4c:	461a      	mov	r2, r3
 8019e4e:	4b09      	ldr	r3, [pc, #36]	; (8019e74 <__assert_func+0x2c>)
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	4605      	mov	r5, r0
 8019e54:	68d8      	ldr	r0, [r3, #12]
 8019e56:	b14c      	cbz	r4, 8019e6c <__assert_func+0x24>
 8019e58:	4b07      	ldr	r3, [pc, #28]	; (8019e78 <__assert_func+0x30>)
 8019e5a:	9100      	str	r1, [sp, #0]
 8019e5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019e60:	4906      	ldr	r1, [pc, #24]	; (8019e7c <__assert_func+0x34>)
 8019e62:	462b      	mov	r3, r5
 8019e64:	f000 f80e 	bl	8019e84 <fiprintf>
 8019e68:	f000 fa60 	bl	801a32c <abort>
 8019e6c:	4b04      	ldr	r3, [pc, #16]	; (8019e80 <__assert_func+0x38>)
 8019e6e:	461c      	mov	r4, r3
 8019e70:	e7f3      	b.n	8019e5a <__assert_func+0x12>
 8019e72:	bf00      	nop
 8019e74:	200009ac 	.word	0x200009ac
 8019e78:	0801ca4d 	.word	0x0801ca4d
 8019e7c:	0801ca5a 	.word	0x0801ca5a
 8019e80:	0801ca88 	.word	0x0801ca88

08019e84 <fiprintf>:
 8019e84:	b40e      	push	{r1, r2, r3}
 8019e86:	b503      	push	{r0, r1, lr}
 8019e88:	4601      	mov	r1, r0
 8019e8a:	ab03      	add	r3, sp, #12
 8019e8c:	4805      	ldr	r0, [pc, #20]	; (8019ea4 <fiprintf+0x20>)
 8019e8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019e92:	6800      	ldr	r0, [r0, #0]
 8019e94:	9301      	str	r3, [sp, #4]
 8019e96:	f000 f859 	bl	8019f4c <_vfiprintf_r>
 8019e9a:	b002      	add	sp, #8
 8019e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019ea0:	b003      	add	sp, #12
 8019ea2:	4770      	bx	lr
 8019ea4:	200009ac 	.word	0x200009ac

08019ea8 <__retarget_lock_init_recursive>:
 8019ea8:	4770      	bx	lr

08019eaa <__retarget_lock_acquire_recursive>:
 8019eaa:	4770      	bx	lr

08019eac <__retarget_lock_release_recursive>:
 8019eac:	4770      	bx	lr

08019eae <_realloc_r>:
 8019eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019eb0:	4607      	mov	r7, r0
 8019eb2:	4614      	mov	r4, r2
 8019eb4:	460e      	mov	r6, r1
 8019eb6:	b921      	cbnz	r1, 8019ec2 <_realloc_r+0x14>
 8019eb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019ebc:	4611      	mov	r1, r2
 8019ebe:	f7fc b977 	b.w	80161b0 <_malloc_r>
 8019ec2:	b922      	cbnz	r2, 8019ece <_realloc_r+0x20>
 8019ec4:	f7fc f924 	bl	8016110 <_free_r>
 8019ec8:	4625      	mov	r5, r4
 8019eca:	4628      	mov	r0, r5
 8019ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ece:	f000 fc51 	bl	801a774 <_malloc_usable_size_r>
 8019ed2:	42a0      	cmp	r0, r4
 8019ed4:	d20f      	bcs.n	8019ef6 <_realloc_r+0x48>
 8019ed6:	4621      	mov	r1, r4
 8019ed8:	4638      	mov	r0, r7
 8019eda:	f7fc f969 	bl	80161b0 <_malloc_r>
 8019ede:	4605      	mov	r5, r0
 8019ee0:	2800      	cmp	r0, #0
 8019ee2:	d0f2      	beq.n	8019eca <_realloc_r+0x1c>
 8019ee4:	4631      	mov	r1, r6
 8019ee6:	4622      	mov	r2, r4
 8019ee8:	f7fc f8e2 	bl	80160b0 <memcpy>
 8019eec:	4631      	mov	r1, r6
 8019eee:	4638      	mov	r0, r7
 8019ef0:	f7fc f90e 	bl	8016110 <_free_r>
 8019ef4:	e7e9      	b.n	8019eca <_realloc_r+0x1c>
 8019ef6:	4635      	mov	r5, r6
 8019ef8:	e7e7      	b.n	8019eca <_realloc_r+0x1c>

08019efa <__sfputc_r>:
 8019efa:	6893      	ldr	r3, [r2, #8]
 8019efc:	3b01      	subs	r3, #1
 8019efe:	2b00      	cmp	r3, #0
 8019f00:	b410      	push	{r4}
 8019f02:	6093      	str	r3, [r2, #8]
 8019f04:	da08      	bge.n	8019f18 <__sfputc_r+0x1e>
 8019f06:	6994      	ldr	r4, [r2, #24]
 8019f08:	42a3      	cmp	r3, r4
 8019f0a:	db01      	blt.n	8019f10 <__sfputc_r+0x16>
 8019f0c:	290a      	cmp	r1, #10
 8019f0e:	d103      	bne.n	8019f18 <__sfputc_r+0x1e>
 8019f10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f14:	f000 b94a 	b.w	801a1ac <__swbuf_r>
 8019f18:	6813      	ldr	r3, [r2, #0]
 8019f1a:	1c58      	adds	r0, r3, #1
 8019f1c:	6010      	str	r0, [r2, #0]
 8019f1e:	7019      	strb	r1, [r3, #0]
 8019f20:	4608      	mov	r0, r1
 8019f22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f26:	4770      	bx	lr

08019f28 <__sfputs_r>:
 8019f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f2a:	4606      	mov	r6, r0
 8019f2c:	460f      	mov	r7, r1
 8019f2e:	4614      	mov	r4, r2
 8019f30:	18d5      	adds	r5, r2, r3
 8019f32:	42ac      	cmp	r4, r5
 8019f34:	d101      	bne.n	8019f3a <__sfputs_r+0x12>
 8019f36:	2000      	movs	r0, #0
 8019f38:	e007      	b.n	8019f4a <__sfputs_r+0x22>
 8019f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f3e:	463a      	mov	r2, r7
 8019f40:	4630      	mov	r0, r6
 8019f42:	f7ff ffda 	bl	8019efa <__sfputc_r>
 8019f46:	1c43      	adds	r3, r0, #1
 8019f48:	d1f3      	bne.n	8019f32 <__sfputs_r+0xa>
 8019f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019f4c <_vfiprintf_r>:
 8019f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f50:	460d      	mov	r5, r1
 8019f52:	b09d      	sub	sp, #116	; 0x74
 8019f54:	4614      	mov	r4, r2
 8019f56:	4698      	mov	r8, r3
 8019f58:	4606      	mov	r6, r0
 8019f5a:	b118      	cbz	r0, 8019f64 <_vfiprintf_r+0x18>
 8019f5c:	6983      	ldr	r3, [r0, #24]
 8019f5e:	b90b      	cbnz	r3, 8019f64 <_vfiprintf_r+0x18>
 8019f60:	f000 fb06 	bl	801a570 <__sinit>
 8019f64:	4b89      	ldr	r3, [pc, #548]	; (801a18c <_vfiprintf_r+0x240>)
 8019f66:	429d      	cmp	r5, r3
 8019f68:	d11b      	bne.n	8019fa2 <_vfiprintf_r+0x56>
 8019f6a:	6875      	ldr	r5, [r6, #4]
 8019f6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019f6e:	07d9      	lsls	r1, r3, #31
 8019f70:	d405      	bmi.n	8019f7e <_vfiprintf_r+0x32>
 8019f72:	89ab      	ldrh	r3, [r5, #12]
 8019f74:	059a      	lsls	r2, r3, #22
 8019f76:	d402      	bmi.n	8019f7e <_vfiprintf_r+0x32>
 8019f78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019f7a:	f7ff ff96 	bl	8019eaa <__retarget_lock_acquire_recursive>
 8019f7e:	89ab      	ldrh	r3, [r5, #12]
 8019f80:	071b      	lsls	r3, r3, #28
 8019f82:	d501      	bpl.n	8019f88 <_vfiprintf_r+0x3c>
 8019f84:	692b      	ldr	r3, [r5, #16]
 8019f86:	b9eb      	cbnz	r3, 8019fc4 <_vfiprintf_r+0x78>
 8019f88:	4629      	mov	r1, r5
 8019f8a:	4630      	mov	r0, r6
 8019f8c:	f000 f960 	bl	801a250 <__swsetup_r>
 8019f90:	b1c0      	cbz	r0, 8019fc4 <_vfiprintf_r+0x78>
 8019f92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019f94:	07dc      	lsls	r4, r3, #31
 8019f96:	d50e      	bpl.n	8019fb6 <_vfiprintf_r+0x6a>
 8019f98:	f04f 30ff 	mov.w	r0, #4294967295
 8019f9c:	b01d      	add	sp, #116	; 0x74
 8019f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fa2:	4b7b      	ldr	r3, [pc, #492]	; (801a190 <_vfiprintf_r+0x244>)
 8019fa4:	429d      	cmp	r5, r3
 8019fa6:	d101      	bne.n	8019fac <_vfiprintf_r+0x60>
 8019fa8:	68b5      	ldr	r5, [r6, #8]
 8019faa:	e7df      	b.n	8019f6c <_vfiprintf_r+0x20>
 8019fac:	4b79      	ldr	r3, [pc, #484]	; (801a194 <_vfiprintf_r+0x248>)
 8019fae:	429d      	cmp	r5, r3
 8019fb0:	bf08      	it	eq
 8019fb2:	68f5      	ldreq	r5, [r6, #12]
 8019fb4:	e7da      	b.n	8019f6c <_vfiprintf_r+0x20>
 8019fb6:	89ab      	ldrh	r3, [r5, #12]
 8019fb8:	0598      	lsls	r0, r3, #22
 8019fba:	d4ed      	bmi.n	8019f98 <_vfiprintf_r+0x4c>
 8019fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019fbe:	f7ff ff75 	bl	8019eac <__retarget_lock_release_recursive>
 8019fc2:	e7e9      	b.n	8019f98 <_vfiprintf_r+0x4c>
 8019fc4:	2300      	movs	r3, #0
 8019fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8019fc8:	2320      	movs	r3, #32
 8019fca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019fce:	f8cd 800c 	str.w	r8, [sp, #12]
 8019fd2:	2330      	movs	r3, #48	; 0x30
 8019fd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a198 <_vfiprintf_r+0x24c>
 8019fd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019fdc:	f04f 0901 	mov.w	r9, #1
 8019fe0:	4623      	mov	r3, r4
 8019fe2:	469a      	mov	sl, r3
 8019fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019fe8:	b10a      	cbz	r2, 8019fee <_vfiprintf_r+0xa2>
 8019fea:	2a25      	cmp	r2, #37	; 0x25
 8019fec:	d1f9      	bne.n	8019fe2 <_vfiprintf_r+0x96>
 8019fee:	ebba 0b04 	subs.w	fp, sl, r4
 8019ff2:	d00b      	beq.n	801a00c <_vfiprintf_r+0xc0>
 8019ff4:	465b      	mov	r3, fp
 8019ff6:	4622      	mov	r2, r4
 8019ff8:	4629      	mov	r1, r5
 8019ffa:	4630      	mov	r0, r6
 8019ffc:	f7ff ff94 	bl	8019f28 <__sfputs_r>
 801a000:	3001      	adds	r0, #1
 801a002:	f000 80aa 	beq.w	801a15a <_vfiprintf_r+0x20e>
 801a006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a008:	445a      	add	r2, fp
 801a00a:	9209      	str	r2, [sp, #36]	; 0x24
 801a00c:	f89a 3000 	ldrb.w	r3, [sl]
 801a010:	2b00      	cmp	r3, #0
 801a012:	f000 80a2 	beq.w	801a15a <_vfiprintf_r+0x20e>
 801a016:	2300      	movs	r3, #0
 801a018:	f04f 32ff 	mov.w	r2, #4294967295
 801a01c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a020:	f10a 0a01 	add.w	sl, sl, #1
 801a024:	9304      	str	r3, [sp, #16]
 801a026:	9307      	str	r3, [sp, #28]
 801a028:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a02c:	931a      	str	r3, [sp, #104]	; 0x68
 801a02e:	4654      	mov	r4, sl
 801a030:	2205      	movs	r2, #5
 801a032:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a036:	4858      	ldr	r0, [pc, #352]	; (801a198 <_vfiprintf_r+0x24c>)
 801a038:	f7e6 f8d2 	bl	80001e0 <memchr>
 801a03c:	9a04      	ldr	r2, [sp, #16]
 801a03e:	b9d8      	cbnz	r0, 801a078 <_vfiprintf_r+0x12c>
 801a040:	06d1      	lsls	r1, r2, #27
 801a042:	bf44      	itt	mi
 801a044:	2320      	movmi	r3, #32
 801a046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a04a:	0713      	lsls	r3, r2, #28
 801a04c:	bf44      	itt	mi
 801a04e:	232b      	movmi	r3, #43	; 0x2b
 801a050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a054:	f89a 3000 	ldrb.w	r3, [sl]
 801a058:	2b2a      	cmp	r3, #42	; 0x2a
 801a05a:	d015      	beq.n	801a088 <_vfiprintf_r+0x13c>
 801a05c:	9a07      	ldr	r2, [sp, #28]
 801a05e:	4654      	mov	r4, sl
 801a060:	2000      	movs	r0, #0
 801a062:	f04f 0c0a 	mov.w	ip, #10
 801a066:	4621      	mov	r1, r4
 801a068:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a06c:	3b30      	subs	r3, #48	; 0x30
 801a06e:	2b09      	cmp	r3, #9
 801a070:	d94e      	bls.n	801a110 <_vfiprintf_r+0x1c4>
 801a072:	b1b0      	cbz	r0, 801a0a2 <_vfiprintf_r+0x156>
 801a074:	9207      	str	r2, [sp, #28]
 801a076:	e014      	b.n	801a0a2 <_vfiprintf_r+0x156>
 801a078:	eba0 0308 	sub.w	r3, r0, r8
 801a07c:	fa09 f303 	lsl.w	r3, r9, r3
 801a080:	4313      	orrs	r3, r2
 801a082:	9304      	str	r3, [sp, #16]
 801a084:	46a2      	mov	sl, r4
 801a086:	e7d2      	b.n	801a02e <_vfiprintf_r+0xe2>
 801a088:	9b03      	ldr	r3, [sp, #12]
 801a08a:	1d19      	adds	r1, r3, #4
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	9103      	str	r1, [sp, #12]
 801a090:	2b00      	cmp	r3, #0
 801a092:	bfbb      	ittet	lt
 801a094:	425b      	neglt	r3, r3
 801a096:	f042 0202 	orrlt.w	r2, r2, #2
 801a09a:	9307      	strge	r3, [sp, #28]
 801a09c:	9307      	strlt	r3, [sp, #28]
 801a09e:	bfb8      	it	lt
 801a0a0:	9204      	strlt	r2, [sp, #16]
 801a0a2:	7823      	ldrb	r3, [r4, #0]
 801a0a4:	2b2e      	cmp	r3, #46	; 0x2e
 801a0a6:	d10c      	bne.n	801a0c2 <_vfiprintf_r+0x176>
 801a0a8:	7863      	ldrb	r3, [r4, #1]
 801a0aa:	2b2a      	cmp	r3, #42	; 0x2a
 801a0ac:	d135      	bne.n	801a11a <_vfiprintf_r+0x1ce>
 801a0ae:	9b03      	ldr	r3, [sp, #12]
 801a0b0:	1d1a      	adds	r2, r3, #4
 801a0b2:	681b      	ldr	r3, [r3, #0]
 801a0b4:	9203      	str	r2, [sp, #12]
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	bfb8      	it	lt
 801a0ba:	f04f 33ff 	movlt.w	r3, #4294967295
 801a0be:	3402      	adds	r4, #2
 801a0c0:	9305      	str	r3, [sp, #20]
 801a0c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a1a8 <_vfiprintf_r+0x25c>
 801a0c6:	7821      	ldrb	r1, [r4, #0]
 801a0c8:	2203      	movs	r2, #3
 801a0ca:	4650      	mov	r0, sl
 801a0cc:	f7e6 f888 	bl	80001e0 <memchr>
 801a0d0:	b140      	cbz	r0, 801a0e4 <_vfiprintf_r+0x198>
 801a0d2:	2340      	movs	r3, #64	; 0x40
 801a0d4:	eba0 000a 	sub.w	r0, r0, sl
 801a0d8:	fa03 f000 	lsl.w	r0, r3, r0
 801a0dc:	9b04      	ldr	r3, [sp, #16]
 801a0de:	4303      	orrs	r3, r0
 801a0e0:	3401      	adds	r4, #1
 801a0e2:	9304      	str	r3, [sp, #16]
 801a0e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0e8:	482c      	ldr	r0, [pc, #176]	; (801a19c <_vfiprintf_r+0x250>)
 801a0ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a0ee:	2206      	movs	r2, #6
 801a0f0:	f7e6 f876 	bl	80001e0 <memchr>
 801a0f4:	2800      	cmp	r0, #0
 801a0f6:	d03f      	beq.n	801a178 <_vfiprintf_r+0x22c>
 801a0f8:	4b29      	ldr	r3, [pc, #164]	; (801a1a0 <_vfiprintf_r+0x254>)
 801a0fa:	bb1b      	cbnz	r3, 801a144 <_vfiprintf_r+0x1f8>
 801a0fc:	9b03      	ldr	r3, [sp, #12]
 801a0fe:	3307      	adds	r3, #7
 801a100:	f023 0307 	bic.w	r3, r3, #7
 801a104:	3308      	adds	r3, #8
 801a106:	9303      	str	r3, [sp, #12]
 801a108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a10a:	443b      	add	r3, r7
 801a10c:	9309      	str	r3, [sp, #36]	; 0x24
 801a10e:	e767      	b.n	8019fe0 <_vfiprintf_r+0x94>
 801a110:	fb0c 3202 	mla	r2, ip, r2, r3
 801a114:	460c      	mov	r4, r1
 801a116:	2001      	movs	r0, #1
 801a118:	e7a5      	b.n	801a066 <_vfiprintf_r+0x11a>
 801a11a:	2300      	movs	r3, #0
 801a11c:	3401      	adds	r4, #1
 801a11e:	9305      	str	r3, [sp, #20]
 801a120:	4619      	mov	r1, r3
 801a122:	f04f 0c0a 	mov.w	ip, #10
 801a126:	4620      	mov	r0, r4
 801a128:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a12c:	3a30      	subs	r2, #48	; 0x30
 801a12e:	2a09      	cmp	r2, #9
 801a130:	d903      	bls.n	801a13a <_vfiprintf_r+0x1ee>
 801a132:	2b00      	cmp	r3, #0
 801a134:	d0c5      	beq.n	801a0c2 <_vfiprintf_r+0x176>
 801a136:	9105      	str	r1, [sp, #20]
 801a138:	e7c3      	b.n	801a0c2 <_vfiprintf_r+0x176>
 801a13a:	fb0c 2101 	mla	r1, ip, r1, r2
 801a13e:	4604      	mov	r4, r0
 801a140:	2301      	movs	r3, #1
 801a142:	e7f0      	b.n	801a126 <_vfiprintf_r+0x1da>
 801a144:	ab03      	add	r3, sp, #12
 801a146:	9300      	str	r3, [sp, #0]
 801a148:	462a      	mov	r2, r5
 801a14a:	4b16      	ldr	r3, [pc, #88]	; (801a1a4 <_vfiprintf_r+0x258>)
 801a14c:	a904      	add	r1, sp, #16
 801a14e:	4630      	mov	r0, r6
 801a150:	f7fc f928 	bl	80163a4 <_printf_float>
 801a154:	4607      	mov	r7, r0
 801a156:	1c78      	adds	r0, r7, #1
 801a158:	d1d6      	bne.n	801a108 <_vfiprintf_r+0x1bc>
 801a15a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a15c:	07d9      	lsls	r1, r3, #31
 801a15e:	d405      	bmi.n	801a16c <_vfiprintf_r+0x220>
 801a160:	89ab      	ldrh	r3, [r5, #12]
 801a162:	059a      	lsls	r2, r3, #22
 801a164:	d402      	bmi.n	801a16c <_vfiprintf_r+0x220>
 801a166:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a168:	f7ff fea0 	bl	8019eac <__retarget_lock_release_recursive>
 801a16c:	89ab      	ldrh	r3, [r5, #12]
 801a16e:	065b      	lsls	r3, r3, #25
 801a170:	f53f af12 	bmi.w	8019f98 <_vfiprintf_r+0x4c>
 801a174:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a176:	e711      	b.n	8019f9c <_vfiprintf_r+0x50>
 801a178:	ab03      	add	r3, sp, #12
 801a17a:	9300      	str	r3, [sp, #0]
 801a17c:	462a      	mov	r2, r5
 801a17e:	4b09      	ldr	r3, [pc, #36]	; (801a1a4 <_vfiprintf_r+0x258>)
 801a180:	a904      	add	r1, sp, #16
 801a182:	4630      	mov	r0, r6
 801a184:	f7fc fbb2 	bl	80168ec <_printf_i>
 801a188:	e7e4      	b.n	801a154 <_vfiprintf_r+0x208>
 801a18a:	bf00      	nop
 801a18c:	0801caac 	.word	0x0801caac
 801a190:	0801cacc 	.word	0x0801cacc
 801a194:	0801ca8c 	.word	0x0801ca8c
 801a198:	0801ca3c 	.word	0x0801ca3c
 801a19c:	0801ca46 	.word	0x0801ca46
 801a1a0:	080163a5 	.word	0x080163a5
 801a1a4:	08019f29 	.word	0x08019f29
 801a1a8:	0801ca42 	.word	0x0801ca42

0801a1ac <__swbuf_r>:
 801a1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1ae:	460e      	mov	r6, r1
 801a1b0:	4614      	mov	r4, r2
 801a1b2:	4605      	mov	r5, r0
 801a1b4:	b118      	cbz	r0, 801a1be <__swbuf_r+0x12>
 801a1b6:	6983      	ldr	r3, [r0, #24]
 801a1b8:	b90b      	cbnz	r3, 801a1be <__swbuf_r+0x12>
 801a1ba:	f000 f9d9 	bl	801a570 <__sinit>
 801a1be:	4b21      	ldr	r3, [pc, #132]	; (801a244 <__swbuf_r+0x98>)
 801a1c0:	429c      	cmp	r4, r3
 801a1c2:	d12b      	bne.n	801a21c <__swbuf_r+0x70>
 801a1c4:	686c      	ldr	r4, [r5, #4]
 801a1c6:	69a3      	ldr	r3, [r4, #24]
 801a1c8:	60a3      	str	r3, [r4, #8]
 801a1ca:	89a3      	ldrh	r3, [r4, #12]
 801a1cc:	071a      	lsls	r2, r3, #28
 801a1ce:	d52f      	bpl.n	801a230 <__swbuf_r+0x84>
 801a1d0:	6923      	ldr	r3, [r4, #16]
 801a1d2:	b36b      	cbz	r3, 801a230 <__swbuf_r+0x84>
 801a1d4:	6923      	ldr	r3, [r4, #16]
 801a1d6:	6820      	ldr	r0, [r4, #0]
 801a1d8:	1ac0      	subs	r0, r0, r3
 801a1da:	6963      	ldr	r3, [r4, #20]
 801a1dc:	b2f6      	uxtb	r6, r6
 801a1de:	4283      	cmp	r3, r0
 801a1e0:	4637      	mov	r7, r6
 801a1e2:	dc04      	bgt.n	801a1ee <__swbuf_r+0x42>
 801a1e4:	4621      	mov	r1, r4
 801a1e6:	4628      	mov	r0, r5
 801a1e8:	f000 f92e 	bl	801a448 <_fflush_r>
 801a1ec:	bb30      	cbnz	r0, 801a23c <__swbuf_r+0x90>
 801a1ee:	68a3      	ldr	r3, [r4, #8]
 801a1f0:	3b01      	subs	r3, #1
 801a1f2:	60a3      	str	r3, [r4, #8]
 801a1f4:	6823      	ldr	r3, [r4, #0]
 801a1f6:	1c5a      	adds	r2, r3, #1
 801a1f8:	6022      	str	r2, [r4, #0]
 801a1fa:	701e      	strb	r6, [r3, #0]
 801a1fc:	6963      	ldr	r3, [r4, #20]
 801a1fe:	3001      	adds	r0, #1
 801a200:	4283      	cmp	r3, r0
 801a202:	d004      	beq.n	801a20e <__swbuf_r+0x62>
 801a204:	89a3      	ldrh	r3, [r4, #12]
 801a206:	07db      	lsls	r3, r3, #31
 801a208:	d506      	bpl.n	801a218 <__swbuf_r+0x6c>
 801a20a:	2e0a      	cmp	r6, #10
 801a20c:	d104      	bne.n	801a218 <__swbuf_r+0x6c>
 801a20e:	4621      	mov	r1, r4
 801a210:	4628      	mov	r0, r5
 801a212:	f000 f919 	bl	801a448 <_fflush_r>
 801a216:	b988      	cbnz	r0, 801a23c <__swbuf_r+0x90>
 801a218:	4638      	mov	r0, r7
 801a21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a21c:	4b0a      	ldr	r3, [pc, #40]	; (801a248 <__swbuf_r+0x9c>)
 801a21e:	429c      	cmp	r4, r3
 801a220:	d101      	bne.n	801a226 <__swbuf_r+0x7a>
 801a222:	68ac      	ldr	r4, [r5, #8]
 801a224:	e7cf      	b.n	801a1c6 <__swbuf_r+0x1a>
 801a226:	4b09      	ldr	r3, [pc, #36]	; (801a24c <__swbuf_r+0xa0>)
 801a228:	429c      	cmp	r4, r3
 801a22a:	bf08      	it	eq
 801a22c:	68ec      	ldreq	r4, [r5, #12]
 801a22e:	e7ca      	b.n	801a1c6 <__swbuf_r+0x1a>
 801a230:	4621      	mov	r1, r4
 801a232:	4628      	mov	r0, r5
 801a234:	f000 f80c 	bl	801a250 <__swsetup_r>
 801a238:	2800      	cmp	r0, #0
 801a23a:	d0cb      	beq.n	801a1d4 <__swbuf_r+0x28>
 801a23c:	f04f 37ff 	mov.w	r7, #4294967295
 801a240:	e7ea      	b.n	801a218 <__swbuf_r+0x6c>
 801a242:	bf00      	nop
 801a244:	0801caac 	.word	0x0801caac
 801a248:	0801cacc 	.word	0x0801cacc
 801a24c:	0801ca8c 	.word	0x0801ca8c

0801a250 <__swsetup_r>:
 801a250:	4b32      	ldr	r3, [pc, #200]	; (801a31c <__swsetup_r+0xcc>)
 801a252:	b570      	push	{r4, r5, r6, lr}
 801a254:	681d      	ldr	r5, [r3, #0]
 801a256:	4606      	mov	r6, r0
 801a258:	460c      	mov	r4, r1
 801a25a:	b125      	cbz	r5, 801a266 <__swsetup_r+0x16>
 801a25c:	69ab      	ldr	r3, [r5, #24]
 801a25e:	b913      	cbnz	r3, 801a266 <__swsetup_r+0x16>
 801a260:	4628      	mov	r0, r5
 801a262:	f000 f985 	bl	801a570 <__sinit>
 801a266:	4b2e      	ldr	r3, [pc, #184]	; (801a320 <__swsetup_r+0xd0>)
 801a268:	429c      	cmp	r4, r3
 801a26a:	d10f      	bne.n	801a28c <__swsetup_r+0x3c>
 801a26c:	686c      	ldr	r4, [r5, #4]
 801a26e:	89a3      	ldrh	r3, [r4, #12]
 801a270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a274:	0719      	lsls	r1, r3, #28
 801a276:	d42c      	bmi.n	801a2d2 <__swsetup_r+0x82>
 801a278:	06dd      	lsls	r5, r3, #27
 801a27a:	d411      	bmi.n	801a2a0 <__swsetup_r+0x50>
 801a27c:	2309      	movs	r3, #9
 801a27e:	6033      	str	r3, [r6, #0]
 801a280:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a284:	81a3      	strh	r3, [r4, #12]
 801a286:	f04f 30ff 	mov.w	r0, #4294967295
 801a28a:	e03e      	b.n	801a30a <__swsetup_r+0xba>
 801a28c:	4b25      	ldr	r3, [pc, #148]	; (801a324 <__swsetup_r+0xd4>)
 801a28e:	429c      	cmp	r4, r3
 801a290:	d101      	bne.n	801a296 <__swsetup_r+0x46>
 801a292:	68ac      	ldr	r4, [r5, #8]
 801a294:	e7eb      	b.n	801a26e <__swsetup_r+0x1e>
 801a296:	4b24      	ldr	r3, [pc, #144]	; (801a328 <__swsetup_r+0xd8>)
 801a298:	429c      	cmp	r4, r3
 801a29a:	bf08      	it	eq
 801a29c:	68ec      	ldreq	r4, [r5, #12]
 801a29e:	e7e6      	b.n	801a26e <__swsetup_r+0x1e>
 801a2a0:	0758      	lsls	r0, r3, #29
 801a2a2:	d512      	bpl.n	801a2ca <__swsetup_r+0x7a>
 801a2a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a2a6:	b141      	cbz	r1, 801a2ba <__swsetup_r+0x6a>
 801a2a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a2ac:	4299      	cmp	r1, r3
 801a2ae:	d002      	beq.n	801a2b6 <__swsetup_r+0x66>
 801a2b0:	4630      	mov	r0, r6
 801a2b2:	f7fb ff2d 	bl	8016110 <_free_r>
 801a2b6:	2300      	movs	r3, #0
 801a2b8:	6363      	str	r3, [r4, #52]	; 0x34
 801a2ba:	89a3      	ldrh	r3, [r4, #12]
 801a2bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a2c0:	81a3      	strh	r3, [r4, #12]
 801a2c2:	2300      	movs	r3, #0
 801a2c4:	6063      	str	r3, [r4, #4]
 801a2c6:	6923      	ldr	r3, [r4, #16]
 801a2c8:	6023      	str	r3, [r4, #0]
 801a2ca:	89a3      	ldrh	r3, [r4, #12]
 801a2cc:	f043 0308 	orr.w	r3, r3, #8
 801a2d0:	81a3      	strh	r3, [r4, #12]
 801a2d2:	6923      	ldr	r3, [r4, #16]
 801a2d4:	b94b      	cbnz	r3, 801a2ea <__swsetup_r+0x9a>
 801a2d6:	89a3      	ldrh	r3, [r4, #12]
 801a2d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a2dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a2e0:	d003      	beq.n	801a2ea <__swsetup_r+0x9a>
 801a2e2:	4621      	mov	r1, r4
 801a2e4:	4630      	mov	r0, r6
 801a2e6:	f000 fa05 	bl	801a6f4 <__smakebuf_r>
 801a2ea:	89a0      	ldrh	r0, [r4, #12]
 801a2ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a2f0:	f010 0301 	ands.w	r3, r0, #1
 801a2f4:	d00a      	beq.n	801a30c <__swsetup_r+0xbc>
 801a2f6:	2300      	movs	r3, #0
 801a2f8:	60a3      	str	r3, [r4, #8]
 801a2fa:	6963      	ldr	r3, [r4, #20]
 801a2fc:	425b      	negs	r3, r3
 801a2fe:	61a3      	str	r3, [r4, #24]
 801a300:	6923      	ldr	r3, [r4, #16]
 801a302:	b943      	cbnz	r3, 801a316 <__swsetup_r+0xc6>
 801a304:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a308:	d1ba      	bne.n	801a280 <__swsetup_r+0x30>
 801a30a:	bd70      	pop	{r4, r5, r6, pc}
 801a30c:	0781      	lsls	r1, r0, #30
 801a30e:	bf58      	it	pl
 801a310:	6963      	ldrpl	r3, [r4, #20]
 801a312:	60a3      	str	r3, [r4, #8]
 801a314:	e7f4      	b.n	801a300 <__swsetup_r+0xb0>
 801a316:	2000      	movs	r0, #0
 801a318:	e7f7      	b.n	801a30a <__swsetup_r+0xba>
 801a31a:	bf00      	nop
 801a31c:	200009ac 	.word	0x200009ac
 801a320:	0801caac 	.word	0x0801caac
 801a324:	0801cacc 	.word	0x0801cacc
 801a328:	0801ca8c 	.word	0x0801ca8c

0801a32c <abort>:
 801a32c:	b508      	push	{r3, lr}
 801a32e:	2006      	movs	r0, #6
 801a330:	f000 fa50 	bl	801a7d4 <raise>
 801a334:	2001      	movs	r0, #1
 801a336:	f7f0 ff9f 	bl	800b278 <_exit>
	...

0801a33c <__sflush_r>:
 801a33c:	898a      	ldrh	r2, [r1, #12]
 801a33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a342:	4605      	mov	r5, r0
 801a344:	0710      	lsls	r0, r2, #28
 801a346:	460c      	mov	r4, r1
 801a348:	d458      	bmi.n	801a3fc <__sflush_r+0xc0>
 801a34a:	684b      	ldr	r3, [r1, #4]
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	dc05      	bgt.n	801a35c <__sflush_r+0x20>
 801a350:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a352:	2b00      	cmp	r3, #0
 801a354:	dc02      	bgt.n	801a35c <__sflush_r+0x20>
 801a356:	2000      	movs	r0, #0
 801a358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a35c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a35e:	2e00      	cmp	r6, #0
 801a360:	d0f9      	beq.n	801a356 <__sflush_r+0x1a>
 801a362:	2300      	movs	r3, #0
 801a364:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a368:	682f      	ldr	r7, [r5, #0]
 801a36a:	602b      	str	r3, [r5, #0]
 801a36c:	d032      	beq.n	801a3d4 <__sflush_r+0x98>
 801a36e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a370:	89a3      	ldrh	r3, [r4, #12]
 801a372:	075a      	lsls	r2, r3, #29
 801a374:	d505      	bpl.n	801a382 <__sflush_r+0x46>
 801a376:	6863      	ldr	r3, [r4, #4]
 801a378:	1ac0      	subs	r0, r0, r3
 801a37a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a37c:	b10b      	cbz	r3, 801a382 <__sflush_r+0x46>
 801a37e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a380:	1ac0      	subs	r0, r0, r3
 801a382:	2300      	movs	r3, #0
 801a384:	4602      	mov	r2, r0
 801a386:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a388:	6a21      	ldr	r1, [r4, #32]
 801a38a:	4628      	mov	r0, r5
 801a38c:	47b0      	blx	r6
 801a38e:	1c43      	adds	r3, r0, #1
 801a390:	89a3      	ldrh	r3, [r4, #12]
 801a392:	d106      	bne.n	801a3a2 <__sflush_r+0x66>
 801a394:	6829      	ldr	r1, [r5, #0]
 801a396:	291d      	cmp	r1, #29
 801a398:	d82c      	bhi.n	801a3f4 <__sflush_r+0xb8>
 801a39a:	4a2a      	ldr	r2, [pc, #168]	; (801a444 <__sflush_r+0x108>)
 801a39c:	40ca      	lsrs	r2, r1
 801a39e:	07d6      	lsls	r6, r2, #31
 801a3a0:	d528      	bpl.n	801a3f4 <__sflush_r+0xb8>
 801a3a2:	2200      	movs	r2, #0
 801a3a4:	6062      	str	r2, [r4, #4]
 801a3a6:	04d9      	lsls	r1, r3, #19
 801a3a8:	6922      	ldr	r2, [r4, #16]
 801a3aa:	6022      	str	r2, [r4, #0]
 801a3ac:	d504      	bpl.n	801a3b8 <__sflush_r+0x7c>
 801a3ae:	1c42      	adds	r2, r0, #1
 801a3b0:	d101      	bne.n	801a3b6 <__sflush_r+0x7a>
 801a3b2:	682b      	ldr	r3, [r5, #0]
 801a3b4:	b903      	cbnz	r3, 801a3b8 <__sflush_r+0x7c>
 801a3b6:	6560      	str	r0, [r4, #84]	; 0x54
 801a3b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a3ba:	602f      	str	r7, [r5, #0]
 801a3bc:	2900      	cmp	r1, #0
 801a3be:	d0ca      	beq.n	801a356 <__sflush_r+0x1a>
 801a3c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a3c4:	4299      	cmp	r1, r3
 801a3c6:	d002      	beq.n	801a3ce <__sflush_r+0x92>
 801a3c8:	4628      	mov	r0, r5
 801a3ca:	f7fb fea1 	bl	8016110 <_free_r>
 801a3ce:	2000      	movs	r0, #0
 801a3d0:	6360      	str	r0, [r4, #52]	; 0x34
 801a3d2:	e7c1      	b.n	801a358 <__sflush_r+0x1c>
 801a3d4:	6a21      	ldr	r1, [r4, #32]
 801a3d6:	2301      	movs	r3, #1
 801a3d8:	4628      	mov	r0, r5
 801a3da:	47b0      	blx	r6
 801a3dc:	1c41      	adds	r1, r0, #1
 801a3de:	d1c7      	bne.n	801a370 <__sflush_r+0x34>
 801a3e0:	682b      	ldr	r3, [r5, #0]
 801a3e2:	2b00      	cmp	r3, #0
 801a3e4:	d0c4      	beq.n	801a370 <__sflush_r+0x34>
 801a3e6:	2b1d      	cmp	r3, #29
 801a3e8:	d001      	beq.n	801a3ee <__sflush_r+0xb2>
 801a3ea:	2b16      	cmp	r3, #22
 801a3ec:	d101      	bne.n	801a3f2 <__sflush_r+0xb6>
 801a3ee:	602f      	str	r7, [r5, #0]
 801a3f0:	e7b1      	b.n	801a356 <__sflush_r+0x1a>
 801a3f2:	89a3      	ldrh	r3, [r4, #12]
 801a3f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a3f8:	81a3      	strh	r3, [r4, #12]
 801a3fa:	e7ad      	b.n	801a358 <__sflush_r+0x1c>
 801a3fc:	690f      	ldr	r7, [r1, #16]
 801a3fe:	2f00      	cmp	r7, #0
 801a400:	d0a9      	beq.n	801a356 <__sflush_r+0x1a>
 801a402:	0793      	lsls	r3, r2, #30
 801a404:	680e      	ldr	r6, [r1, #0]
 801a406:	bf08      	it	eq
 801a408:	694b      	ldreq	r3, [r1, #20]
 801a40a:	600f      	str	r7, [r1, #0]
 801a40c:	bf18      	it	ne
 801a40e:	2300      	movne	r3, #0
 801a410:	eba6 0807 	sub.w	r8, r6, r7
 801a414:	608b      	str	r3, [r1, #8]
 801a416:	f1b8 0f00 	cmp.w	r8, #0
 801a41a:	dd9c      	ble.n	801a356 <__sflush_r+0x1a>
 801a41c:	6a21      	ldr	r1, [r4, #32]
 801a41e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a420:	4643      	mov	r3, r8
 801a422:	463a      	mov	r2, r7
 801a424:	4628      	mov	r0, r5
 801a426:	47b0      	blx	r6
 801a428:	2800      	cmp	r0, #0
 801a42a:	dc06      	bgt.n	801a43a <__sflush_r+0xfe>
 801a42c:	89a3      	ldrh	r3, [r4, #12]
 801a42e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a432:	81a3      	strh	r3, [r4, #12]
 801a434:	f04f 30ff 	mov.w	r0, #4294967295
 801a438:	e78e      	b.n	801a358 <__sflush_r+0x1c>
 801a43a:	4407      	add	r7, r0
 801a43c:	eba8 0800 	sub.w	r8, r8, r0
 801a440:	e7e9      	b.n	801a416 <__sflush_r+0xda>
 801a442:	bf00      	nop
 801a444:	20400001 	.word	0x20400001

0801a448 <_fflush_r>:
 801a448:	b538      	push	{r3, r4, r5, lr}
 801a44a:	690b      	ldr	r3, [r1, #16]
 801a44c:	4605      	mov	r5, r0
 801a44e:	460c      	mov	r4, r1
 801a450:	b913      	cbnz	r3, 801a458 <_fflush_r+0x10>
 801a452:	2500      	movs	r5, #0
 801a454:	4628      	mov	r0, r5
 801a456:	bd38      	pop	{r3, r4, r5, pc}
 801a458:	b118      	cbz	r0, 801a462 <_fflush_r+0x1a>
 801a45a:	6983      	ldr	r3, [r0, #24]
 801a45c:	b90b      	cbnz	r3, 801a462 <_fflush_r+0x1a>
 801a45e:	f000 f887 	bl	801a570 <__sinit>
 801a462:	4b14      	ldr	r3, [pc, #80]	; (801a4b4 <_fflush_r+0x6c>)
 801a464:	429c      	cmp	r4, r3
 801a466:	d11b      	bne.n	801a4a0 <_fflush_r+0x58>
 801a468:	686c      	ldr	r4, [r5, #4]
 801a46a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a46e:	2b00      	cmp	r3, #0
 801a470:	d0ef      	beq.n	801a452 <_fflush_r+0xa>
 801a472:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a474:	07d0      	lsls	r0, r2, #31
 801a476:	d404      	bmi.n	801a482 <_fflush_r+0x3a>
 801a478:	0599      	lsls	r1, r3, #22
 801a47a:	d402      	bmi.n	801a482 <_fflush_r+0x3a>
 801a47c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a47e:	f7ff fd14 	bl	8019eaa <__retarget_lock_acquire_recursive>
 801a482:	4628      	mov	r0, r5
 801a484:	4621      	mov	r1, r4
 801a486:	f7ff ff59 	bl	801a33c <__sflush_r>
 801a48a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a48c:	07da      	lsls	r2, r3, #31
 801a48e:	4605      	mov	r5, r0
 801a490:	d4e0      	bmi.n	801a454 <_fflush_r+0xc>
 801a492:	89a3      	ldrh	r3, [r4, #12]
 801a494:	059b      	lsls	r3, r3, #22
 801a496:	d4dd      	bmi.n	801a454 <_fflush_r+0xc>
 801a498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a49a:	f7ff fd07 	bl	8019eac <__retarget_lock_release_recursive>
 801a49e:	e7d9      	b.n	801a454 <_fflush_r+0xc>
 801a4a0:	4b05      	ldr	r3, [pc, #20]	; (801a4b8 <_fflush_r+0x70>)
 801a4a2:	429c      	cmp	r4, r3
 801a4a4:	d101      	bne.n	801a4aa <_fflush_r+0x62>
 801a4a6:	68ac      	ldr	r4, [r5, #8]
 801a4a8:	e7df      	b.n	801a46a <_fflush_r+0x22>
 801a4aa:	4b04      	ldr	r3, [pc, #16]	; (801a4bc <_fflush_r+0x74>)
 801a4ac:	429c      	cmp	r4, r3
 801a4ae:	bf08      	it	eq
 801a4b0:	68ec      	ldreq	r4, [r5, #12]
 801a4b2:	e7da      	b.n	801a46a <_fflush_r+0x22>
 801a4b4:	0801caac 	.word	0x0801caac
 801a4b8:	0801cacc 	.word	0x0801cacc
 801a4bc:	0801ca8c 	.word	0x0801ca8c

0801a4c0 <std>:
 801a4c0:	2300      	movs	r3, #0
 801a4c2:	b510      	push	{r4, lr}
 801a4c4:	4604      	mov	r4, r0
 801a4c6:	e9c0 3300 	strd	r3, r3, [r0]
 801a4ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a4ce:	6083      	str	r3, [r0, #8]
 801a4d0:	8181      	strh	r1, [r0, #12]
 801a4d2:	6643      	str	r3, [r0, #100]	; 0x64
 801a4d4:	81c2      	strh	r2, [r0, #14]
 801a4d6:	6183      	str	r3, [r0, #24]
 801a4d8:	4619      	mov	r1, r3
 801a4da:	2208      	movs	r2, #8
 801a4dc:	305c      	adds	r0, #92	; 0x5c
 801a4de:	f7fb fe0f 	bl	8016100 <memset>
 801a4e2:	4b05      	ldr	r3, [pc, #20]	; (801a4f8 <std+0x38>)
 801a4e4:	6263      	str	r3, [r4, #36]	; 0x24
 801a4e6:	4b05      	ldr	r3, [pc, #20]	; (801a4fc <std+0x3c>)
 801a4e8:	62a3      	str	r3, [r4, #40]	; 0x28
 801a4ea:	4b05      	ldr	r3, [pc, #20]	; (801a500 <std+0x40>)
 801a4ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a4ee:	4b05      	ldr	r3, [pc, #20]	; (801a504 <std+0x44>)
 801a4f0:	6224      	str	r4, [r4, #32]
 801a4f2:	6323      	str	r3, [r4, #48]	; 0x30
 801a4f4:	bd10      	pop	{r4, pc}
 801a4f6:	bf00      	nop
 801a4f8:	0801a80d 	.word	0x0801a80d
 801a4fc:	0801a82f 	.word	0x0801a82f
 801a500:	0801a867 	.word	0x0801a867
 801a504:	0801a88b 	.word	0x0801a88b

0801a508 <_cleanup_r>:
 801a508:	4901      	ldr	r1, [pc, #4]	; (801a510 <_cleanup_r+0x8>)
 801a50a:	f000 b8af 	b.w	801a66c <_fwalk_reent>
 801a50e:	bf00      	nop
 801a510:	0801a449 	.word	0x0801a449

0801a514 <__sfmoreglue>:
 801a514:	b570      	push	{r4, r5, r6, lr}
 801a516:	1e4a      	subs	r2, r1, #1
 801a518:	2568      	movs	r5, #104	; 0x68
 801a51a:	4355      	muls	r5, r2
 801a51c:	460e      	mov	r6, r1
 801a51e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a522:	f7fb fe45 	bl	80161b0 <_malloc_r>
 801a526:	4604      	mov	r4, r0
 801a528:	b140      	cbz	r0, 801a53c <__sfmoreglue+0x28>
 801a52a:	2100      	movs	r1, #0
 801a52c:	e9c0 1600 	strd	r1, r6, [r0]
 801a530:	300c      	adds	r0, #12
 801a532:	60a0      	str	r0, [r4, #8]
 801a534:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a538:	f7fb fde2 	bl	8016100 <memset>
 801a53c:	4620      	mov	r0, r4
 801a53e:	bd70      	pop	{r4, r5, r6, pc}

0801a540 <__sfp_lock_acquire>:
 801a540:	4801      	ldr	r0, [pc, #4]	; (801a548 <__sfp_lock_acquire+0x8>)
 801a542:	f7ff bcb2 	b.w	8019eaa <__retarget_lock_acquire_recursive>
 801a546:	bf00      	nop
 801a548:	2000c980 	.word	0x2000c980

0801a54c <__sfp_lock_release>:
 801a54c:	4801      	ldr	r0, [pc, #4]	; (801a554 <__sfp_lock_release+0x8>)
 801a54e:	f7ff bcad 	b.w	8019eac <__retarget_lock_release_recursive>
 801a552:	bf00      	nop
 801a554:	2000c980 	.word	0x2000c980

0801a558 <__sinit_lock_acquire>:
 801a558:	4801      	ldr	r0, [pc, #4]	; (801a560 <__sinit_lock_acquire+0x8>)
 801a55a:	f7ff bca6 	b.w	8019eaa <__retarget_lock_acquire_recursive>
 801a55e:	bf00      	nop
 801a560:	2000c97b 	.word	0x2000c97b

0801a564 <__sinit_lock_release>:
 801a564:	4801      	ldr	r0, [pc, #4]	; (801a56c <__sinit_lock_release+0x8>)
 801a566:	f7ff bca1 	b.w	8019eac <__retarget_lock_release_recursive>
 801a56a:	bf00      	nop
 801a56c:	2000c97b 	.word	0x2000c97b

0801a570 <__sinit>:
 801a570:	b510      	push	{r4, lr}
 801a572:	4604      	mov	r4, r0
 801a574:	f7ff fff0 	bl	801a558 <__sinit_lock_acquire>
 801a578:	69a3      	ldr	r3, [r4, #24]
 801a57a:	b11b      	cbz	r3, 801a584 <__sinit+0x14>
 801a57c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a580:	f7ff bff0 	b.w	801a564 <__sinit_lock_release>
 801a584:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a588:	6523      	str	r3, [r4, #80]	; 0x50
 801a58a:	4b13      	ldr	r3, [pc, #76]	; (801a5d8 <__sinit+0x68>)
 801a58c:	4a13      	ldr	r2, [pc, #76]	; (801a5dc <__sinit+0x6c>)
 801a58e:	681b      	ldr	r3, [r3, #0]
 801a590:	62a2      	str	r2, [r4, #40]	; 0x28
 801a592:	42a3      	cmp	r3, r4
 801a594:	bf04      	itt	eq
 801a596:	2301      	moveq	r3, #1
 801a598:	61a3      	streq	r3, [r4, #24]
 801a59a:	4620      	mov	r0, r4
 801a59c:	f000 f820 	bl	801a5e0 <__sfp>
 801a5a0:	6060      	str	r0, [r4, #4]
 801a5a2:	4620      	mov	r0, r4
 801a5a4:	f000 f81c 	bl	801a5e0 <__sfp>
 801a5a8:	60a0      	str	r0, [r4, #8]
 801a5aa:	4620      	mov	r0, r4
 801a5ac:	f000 f818 	bl	801a5e0 <__sfp>
 801a5b0:	2200      	movs	r2, #0
 801a5b2:	60e0      	str	r0, [r4, #12]
 801a5b4:	2104      	movs	r1, #4
 801a5b6:	6860      	ldr	r0, [r4, #4]
 801a5b8:	f7ff ff82 	bl	801a4c0 <std>
 801a5bc:	68a0      	ldr	r0, [r4, #8]
 801a5be:	2201      	movs	r2, #1
 801a5c0:	2109      	movs	r1, #9
 801a5c2:	f7ff ff7d 	bl	801a4c0 <std>
 801a5c6:	68e0      	ldr	r0, [r4, #12]
 801a5c8:	2202      	movs	r2, #2
 801a5ca:	2112      	movs	r1, #18
 801a5cc:	f7ff ff78 	bl	801a4c0 <std>
 801a5d0:	2301      	movs	r3, #1
 801a5d2:	61a3      	str	r3, [r4, #24]
 801a5d4:	e7d2      	b.n	801a57c <__sinit+0xc>
 801a5d6:	bf00      	nop
 801a5d8:	0801c638 	.word	0x0801c638
 801a5dc:	0801a509 	.word	0x0801a509

0801a5e0 <__sfp>:
 801a5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5e2:	4607      	mov	r7, r0
 801a5e4:	f7ff ffac 	bl	801a540 <__sfp_lock_acquire>
 801a5e8:	4b1e      	ldr	r3, [pc, #120]	; (801a664 <__sfp+0x84>)
 801a5ea:	681e      	ldr	r6, [r3, #0]
 801a5ec:	69b3      	ldr	r3, [r6, #24]
 801a5ee:	b913      	cbnz	r3, 801a5f6 <__sfp+0x16>
 801a5f0:	4630      	mov	r0, r6
 801a5f2:	f7ff ffbd 	bl	801a570 <__sinit>
 801a5f6:	3648      	adds	r6, #72	; 0x48
 801a5f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a5fc:	3b01      	subs	r3, #1
 801a5fe:	d503      	bpl.n	801a608 <__sfp+0x28>
 801a600:	6833      	ldr	r3, [r6, #0]
 801a602:	b30b      	cbz	r3, 801a648 <__sfp+0x68>
 801a604:	6836      	ldr	r6, [r6, #0]
 801a606:	e7f7      	b.n	801a5f8 <__sfp+0x18>
 801a608:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a60c:	b9d5      	cbnz	r5, 801a644 <__sfp+0x64>
 801a60e:	4b16      	ldr	r3, [pc, #88]	; (801a668 <__sfp+0x88>)
 801a610:	60e3      	str	r3, [r4, #12]
 801a612:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a616:	6665      	str	r5, [r4, #100]	; 0x64
 801a618:	f7ff fc46 	bl	8019ea8 <__retarget_lock_init_recursive>
 801a61c:	f7ff ff96 	bl	801a54c <__sfp_lock_release>
 801a620:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a624:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a628:	6025      	str	r5, [r4, #0]
 801a62a:	61a5      	str	r5, [r4, #24]
 801a62c:	2208      	movs	r2, #8
 801a62e:	4629      	mov	r1, r5
 801a630:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a634:	f7fb fd64 	bl	8016100 <memset>
 801a638:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a63c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a640:	4620      	mov	r0, r4
 801a642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a644:	3468      	adds	r4, #104	; 0x68
 801a646:	e7d9      	b.n	801a5fc <__sfp+0x1c>
 801a648:	2104      	movs	r1, #4
 801a64a:	4638      	mov	r0, r7
 801a64c:	f7ff ff62 	bl	801a514 <__sfmoreglue>
 801a650:	4604      	mov	r4, r0
 801a652:	6030      	str	r0, [r6, #0]
 801a654:	2800      	cmp	r0, #0
 801a656:	d1d5      	bne.n	801a604 <__sfp+0x24>
 801a658:	f7ff ff78 	bl	801a54c <__sfp_lock_release>
 801a65c:	230c      	movs	r3, #12
 801a65e:	603b      	str	r3, [r7, #0]
 801a660:	e7ee      	b.n	801a640 <__sfp+0x60>
 801a662:	bf00      	nop
 801a664:	0801c638 	.word	0x0801c638
 801a668:	ffff0001 	.word	0xffff0001

0801a66c <_fwalk_reent>:
 801a66c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a670:	4606      	mov	r6, r0
 801a672:	4688      	mov	r8, r1
 801a674:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a678:	2700      	movs	r7, #0
 801a67a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a67e:	f1b9 0901 	subs.w	r9, r9, #1
 801a682:	d505      	bpl.n	801a690 <_fwalk_reent+0x24>
 801a684:	6824      	ldr	r4, [r4, #0]
 801a686:	2c00      	cmp	r4, #0
 801a688:	d1f7      	bne.n	801a67a <_fwalk_reent+0xe>
 801a68a:	4638      	mov	r0, r7
 801a68c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a690:	89ab      	ldrh	r3, [r5, #12]
 801a692:	2b01      	cmp	r3, #1
 801a694:	d907      	bls.n	801a6a6 <_fwalk_reent+0x3a>
 801a696:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a69a:	3301      	adds	r3, #1
 801a69c:	d003      	beq.n	801a6a6 <_fwalk_reent+0x3a>
 801a69e:	4629      	mov	r1, r5
 801a6a0:	4630      	mov	r0, r6
 801a6a2:	47c0      	blx	r8
 801a6a4:	4307      	orrs	r7, r0
 801a6a6:	3568      	adds	r5, #104	; 0x68
 801a6a8:	e7e9      	b.n	801a67e <_fwalk_reent+0x12>

0801a6aa <__swhatbuf_r>:
 801a6aa:	b570      	push	{r4, r5, r6, lr}
 801a6ac:	460e      	mov	r6, r1
 801a6ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a6b2:	2900      	cmp	r1, #0
 801a6b4:	b096      	sub	sp, #88	; 0x58
 801a6b6:	4614      	mov	r4, r2
 801a6b8:	461d      	mov	r5, r3
 801a6ba:	da07      	bge.n	801a6cc <__swhatbuf_r+0x22>
 801a6bc:	2300      	movs	r3, #0
 801a6be:	602b      	str	r3, [r5, #0]
 801a6c0:	89b3      	ldrh	r3, [r6, #12]
 801a6c2:	061a      	lsls	r2, r3, #24
 801a6c4:	d410      	bmi.n	801a6e8 <__swhatbuf_r+0x3e>
 801a6c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a6ca:	e00e      	b.n	801a6ea <__swhatbuf_r+0x40>
 801a6cc:	466a      	mov	r2, sp
 801a6ce:	f000 f903 	bl	801a8d8 <_fstat_r>
 801a6d2:	2800      	cmp	r0, #0
 801a6d4:	dbf2      	blt.n	801a6bc <__swhatbuf_r+0x12>
 801a6d6:	9a01      	ldr	r2, [sp, #4]
 801a6d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a6dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a6e0:	425a      	negs	r2, r3
 801a6e2:	415a      	adcs	r2, r3
 801a6e4:	602a      	str	r2, [r5, #0]
 801a6e6:	e7ee      	b.n	801a6c6 <__swhatbuf_r+0x1c>
 801a6e8:	2340      	movs	r3, #64	; 0x40
 801a6ea:	2000      	movs	r0, #0
 801a6ec:	6023      	str	r3, [r4, #0]
 801a6ee:	b016      	add	sp, #88	; 0x58
 801a6f0:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a6f4 <__smakebuf_r>:
 801a6f4:	898b      	ldrh	r3, [r1, #12]
 801a6f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a6f8:	079d      	lsls	r5, r3, #30
 801a6fa:	4606      	mov	r6, r0
 801a6fc:	460c      	mov	r4, r1
 801a6fe:	d507      	bpl.n	801a710 <__smakebuf_r+0x1c>
 801a700:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a704:	6023      	str	r3, [r4, #0]
 801a706:	6123      	str	r3, [r4, #16]
 801a708:	2301      	movs	r3, #1
 801a70a:	6163      	str	r3, [r4, #20]
 801a70c:	b002      	add	sp, #8
 801a70e:	bd70      	pop	{r4, r5, r6, pc}
 801a710:	ab01      	add	r3, sp, #4
 801a712:	466a      	mov	r2, sp
 801a714:	f7ff ffc9 	bl	801a6aa <__swhatbuf_r>
 801a718:	9900      	ldr	r1, [sp, #0]
 801a71a:	4605      	mov	r5, r0
 801a71c:	4630      	mov	r0, r6
 801a71e:	f7fb fd47 	bl	80161b0 <_malloc_r>
 801a722:	b948      	cbnz	r0, 801a738 <__smakebuf_r+0x44>
 801a724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a728:	059a      	lsls	r2, r3, #22
 801a72a:	d4ef      	bmi.n	801a70c <__smakebuf_r+0x18>
 801a72c:	f023 0303 	bic.w	r3, r3, #3
 801a730:	f043 0302 	orr.w	r3, r3, #2
 801a734:	81a3      	strh	r3, [r4, #12]
 801a736:	e7e3      	b.n	801a700 <__smakebuf_r+0xc>
 801a738:	4b0d      	ldr	r3, [pc, #52]	; (801a770 <__smakebuf_r+0x7c>)
 801a73a:	62b3      	str	r3, [r6, #40]	; 0x28
 801a73c:	89a3      	ldrh	r3, [r4, #12]
 801a73e:	6020      	str	r0, [r4, #0]
 801a740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a744:	81a3      	strh	r3, [r4, #12]
 801a746:	9b00      	ldr	r3, [sp, #0]
 801a748:	6163      	str	r3, [r4, #20]
 801a74a:	9b01      	ldr	r3, [sp, #4]
 801a74c:	6120      	str	r0, [r4, #16]
 801a74e:	b15b      	cbz	r3, 801a768 <__smakebuf_r+0x74>
 801a750:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a754:	4630      	mov	r0, r6
 801a756:	f000 f8d1 	bl	801a8fc <_isatty_r>
 801a75a:	b128      	cbz	r0, 801a768 <__smakebuf_r+0x74>
 801a75c:	89a3      	ldrh	r3, [r4, #12]
 801a75e:	f023 0303 	bic.w	r3, r3, #3
 801a762:	f043 0301 	orr.w	r3, r3, #1
 801a766:	81a3      	strh	r3, [r4, #12]
 801a768:	89a0      	ldrh	r0, [r4, #12]
 801a76a:	4305      	orrs	r5, r0
 801a76c:	81a5      	strh	r5, [r4, #12]
 801a76e:	e7cd      	b.n	801a70c <__smakebuf_r+0x18>
 801a770:	0801a509 	.word	0x0801a509

0801a774 <_malloc_usable_size_r>:
 801a774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a778:	1f18      	subs	r0, r3, #4
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	bfbc      	itt	lt
 801a77e:	580b      	ldrlt	r3, [r1, r0]
 801a780:	18c0      	addlt	r0, r0, r3
 801a782:	4770      	bx	lr

0801a784 <_raise_r>:
 801a784:	291f      	cmp	r1, #31
 801a786:	b538      	push	{r3, r4, r5, lr}
 801a788:	4604      	mov	r4, r0
 801a78a:	460d      	mov	r5, r1
 801a78c:	d904      	bls.n	801a798 <_raise_r+0x14>
 801a78e:	2316      	movs	r3, #22
 801a790:	6003      	str	r3, [r0, #0]
 801a792:	f04f 30ff 	mov.w	r0, #4294967295
 801a796:	bd38      	pop	{r3, r4, r5, pc}
 801a798:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a79a:	b112      	cbz	r2, 801a7a2 <_raise_r+0x1e>
 801a79c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a7a0:	b94b      	cbnz	r3, 801a7b6 <_raise_r+0x32>
 801a7a2:	4620      	mov	r0, r4
 801a7a4:	f000 f830 	bl	801a808 <_getpid_r>
 801a7a8:	462a      	mov	r2, r5
 801a7aa:	4601      	mov	r1, r0
 801a7ac:	4620      	mov	r0, r4
 801a7ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a7b2:	f000 b817 	b.w	801a7e4 <_kill_r>
 801a7b6:	2b01      	cmp	r3, #1
 801a7b8:	d00a      	beq.n	801a7d0 <_raise_r+0x4c>
 801a7ba:	1c59      	adds	r1, r3, #1
 801a7bc:	d103      	bne.n	801a7c6 <_raise_r+0x42>
 801a7be:	2316      	movs	r3, #22
 801a7c0:	6003      	str	r3, [r0, #0]
 801a7c2:	2001      	movs	r0, #1
 801a7c4:	e7e7      	b.n	801a796 <_raise_r+0x12>
 801a7c6:	2400      	movs	r4, #0
 801a7c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a7cc:	4628      	mov	r0, r5
 801a7ce:	4798      	blx	r3
 801a7d0:	2000      	movs	r0, #0
 801a7d2:	e7e0      	b.n	801a796 <_raise_r+0x12>

0801a7d4 <raise>:
 801a7d4:	4b02      	ldr	r3, [pc, #8]	; (801a7e0 <raise+0xc>)
 801a7d6:	4601      	mov	r1, r0
 801a7d8:	6818      	ldr	r0, [r3, #0]
 801a7da:	f7ff bfd3 	b.w	801a784 <_raise_r>
 801a7de:	bf00      	nop
 801a7e0:	200009ac 	.word	0x200009ac

0801a7e4 <_kill_r>:
 801a7e4:	b538      	push	{r3, r4, r5, lr}
 801a7e6:	4d07      	ldr	r5, [pc, #28]	; (801a804 <_kill_r+0x20>)
 801a7e8:	2300      	movs	r3, #0
 801a7ea:	4604      	mov	r4, r0
 801a7ec:	4608      	mov	r0, r1
 801a7ee:	4611      	mov	r1, r2
 801a7f0:	602b      	str	r3, [r5, #0]
 801a7f2:	f7f0 fd31 	bl	800b258 <_kill>
 801a7f6:	1c43      	adds	r3, r0, #1
 801a7f8:	d102      	bne.n	801a800 <_kill_r+0x1c>
 801a7fa:	682b      	ldr	r3, [r5, #0]
 801a7fc:	b103      	cbz	r3, 801a800 <_kill_r+0x1c>
 801a7fe:	6023      	str	r3, [r4, #0]
 801a800:	bd38      	pop	{r3, r4, r5, pc}
 801a802:	bf00      	nop
 801a804:	2000c974 	.word	0x2000c974

0801a808 <_getpid_r>:
 801a808:	f7f0 bd1e 	b.w	800b248 <_getpid>

0801a80c <__sread>:
 801a80c:	b510      	push	{r4, lr}
 801a80e:	460c      	mov	r4, r1
 801a810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a814:	f000 f894 	bl	801a940 <_read_r>
 801a818:	2800      	cmp	r0, #0
 801a81a:	bfab      	itete	ge
 801a81c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a81e:	89a3      	ldrhlt	r3, [r4, #12]
 801a820:	181b      	addge	r3, r3, r0
 801a822:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a826:	bfac      	ite	ge
 801a828:	6563      	strge	r3, [r4, #84]	; 0x54
 801a82a:	81a3      	strhlt	r3, [r4, #12]
 801a82c:	bd10      	pop	{r4, pc}

0801a82e <__swrite>:
 801a82e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a832:	461f      	mov	r7, r3
 801a834:	898b      	ldrh	r3, [r1, #12]
 801a836:	05db      	lsls	r3, r3, #23
 801a838:	4605      	mov	r5, r0
 801a83a:	460c      	mov	r4, r1
 801a83c:	4616      	mov	r6, r2
 801a83e:	d505      	bpl.n	801a84c <__swrite+0x1e>
 801a840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a844:	2302      	movs	r3, #2
 801a846:	2200      	movs	r2, #0
 801a848:	f000 f868 	bl	801a91c <_lseek_r>
 801a84c:	89a3      	ldrh	r3, [r4, #12]
 801a84e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a852:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a856:	81a3      	strh	r3, [r4, #12]
 801a858:	4632      	mov	r2, r6
 801a85a:	463b      	mov	r3, r7
 801a85c:	4628      	mov	r0, r5
 801a85e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a862:	f000 b817 	b.w	801a894 <_write_r>

0801a866 <__sseek>:
 801a866:	b510      	push	{r4, lr}
 801a868:	460c      	mov	r4, r1
 801a86a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a86e:	f000 f855 	bl	801a91c <_lseek_r>
 801a872:	1c43      	adds	r3, r0, #1
 801a874:	89a3      	ldrh	r3, [r4, #12]
 801a876:	bf15      	itete	ne
 801a878:	6560      	strne	r0, [r4, #84]	; 0x54
 801a87a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a87e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a882:	81a3      	strheq	r3, [r4, #12]
 801a884:	bf18      	it	ne
 801a886:	81a3      	strhne	r3, [r4, #12]
 801a888:	bd10      	pop	{r4, pc}

0801a88a <__sclose>:
 801a88a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a88e:	f000 b813 	b.w	801a8b8 <_close_r>
	...

0801a894 <_write_r>:
 801a894:	b538      	push	{r3, r4, r5, lr}
 801a896:	4d07      	ldr	r5, [pc, #28]	; (801a8b4 <_write_r+0x20>)
 801a898:	4604      	mov	r4, r0
 801a89a:	4608      	mov	r0, r1
 801a89c:	4611      	mov	r1, r2
 801a89e:	2200      	movs	r2, #0
 801a8a0:	602a      	str	r2, [r5, #0]
 801a8a2:	461a      	mov	r2, r3
 801a8a4:	f7f0 fd0f 	bl	800b2c6 <_write>
 801a8a8:	1c43      	adds	r3, r0, #1
 801a8aa:	d102      	bne.n	801a8b2 <_write_r+0x1e>
 801a8ac:	682b      	ldr	r3, [r5, #0]
 801a8ae:	b103      	cbz	r3, 801a8b2 <_write_r+0x1e>
 801a8b0:	6023      	str	r3, [r4, #0]
 801a8b2:	bd38      	pop	{r3, r4, r5, pc}
 801a8b4:	2000c974 	.word	0x2000c974

0801a8b8 <_close_r>:
 801a8b8:	b538      	push	{r3, r4, r5, lr}
 801a8ba:	4d06      	ldr	r5, [pc, #24]	; (801a8d4 <_close_r+0x1c>)
 801a8bc:	2300      	movs	r3, #0
 801a8be:	4604      	mov	r4, r0
 801a8c0:	4608      	mov	r0, r1
 801a8c2:	602b      	str	r3, [r5, #0]
 801a8c4:	f7f0 fd1b 	bl	800b2fe <_close>
 801a8c8:	1c43      	adds	r3, r0, #1
 801a8ca:	d102      	bne.n	801a8d2 <_close_r+0x1a>
 801a8cc:	682b      	ldr	r3, [r5, #0]
 801a8ce:	b103      	cbz	r3, 801a8d2 <_close_r+0x1a>
 801a8d0:	6023      	str	r3, [r4, #0]
 801a8d2:	bd38      	pop	{r3, r4, r5, pc}
 801a8d4:	2000c974 	.word	0x2000c974

0801a8d8 <_fstat_r>:
 801a8d8:	b538      	push	{r3, r4, r5, lr}
 801a8da:	4d07      	ldr	r5, [pc, #28]	; (801a8f8 <_fstat_r+0x20>)
 801a8dc:	2300      	movs	r3, #0
 801a8de:	4604      	mov	r4, r0
 801a8e0:	4608      	mov	r0, r1
 801a8e2:	4611      	mov	r1, r2
 801a8e4:	602b      	str	r3, [r5, #0]
 801a8e6:	f7f0 fd16 	bl	800b316 <_fstat>
 801a8ea:	1c43      	adds	r3, r0, #1
 801a8ec:	d102      	bne.n	801a8f4 <_fstat_r+0x1c>
 801a8ee:	682b      	ldr	r3, [r5, #0]
 801a8f0:	b103      	cbz	r3, 801a8f4 <_fstat_r+0x1c>
 801a8f2:	6023      	str	r3, [r4, #0]
 801a8f4:	bd38      	pop	{r3, r4, r5, pc}
 801a8f6:	bf00      	nop
 801a8f8:	2000c974 	.word	0x2000c974

0801a8fc <_isatty_r>:
 801a8fc:	b538      	push	{r3, r4, r5, lr}
 801a8fe:	4d06      	ldr	r5, [pc, #24]	; (801a918 <_isatty_r+0x1c>)
 801a900:	2300      	movs	r3, #0
 801a902:	4604      	mov	r4, r0
 801a904:	4608      	mov	r0, r1
 801a906:	602b      	str	r3, [r5, #0]
 801a908:	f7f0 fd15 	bl	800b336 <_isatty>
 801a90c:	1c43      	adds	r3, r0, #1
 801a90e:	d102      	bne.n	801a916 <_isatty_r+0x1a>
 801a910:	682b      	ldr	r3, [r5, #0]
 801a912:	b103      	cbz	r3, 801a916 <_isatty_r+0x1a>
 801a914:	6023      	str	r3, [r4, #0]
 801a916:	bd38      	pop	{r3, r4, r5, pc}
 801a918:	2000c974 	.word	0x2000c974

0801a91c <_lseek_r>:
 801a91c:	b538      	push	{r3, r4, r5, lr}
 801a91e:	4d07      	ldr	r5, [pc, #28]	; (801a93c <_lseek_r+0x20>)
 801a920:	4604      	mov	r4, r0
 801a922:	4608      	mov	r0, r1
 801a924:	4611      	mov	r1, r2
 801a926:	2200      	movs	r2, #0
 801a928:	602a      	str	r2, [r5, #0]
 801a92a:	461a      	mov	r2, r3
 801a92c:	f7f0 fd0e 	bl	800b34c <_lseek>
 801a930:	1c43      	adds	r3, r0, #1
 801a932:	d102      	bne.n	801a93a <_lseek_r+0x1e>
 801a934:	682b      	ldr	r3, [r5, #0]
 801a936:	b103      	cbz	r3, 801a93a <_lseek_r+0x1e>
 801a938:	6023      	str	r3, [r4, #0]
 801a93a:	bd38      	pop	{r3, r4, r5, pc}
 801a93c:	2000c974 	.word	0x2000c974

0801a940 <_read_r>:
 801a940:	b538      	push	{r3, r4, r5, lr}
 801a942:	4d07      	ldr	r5, [pc, #28]	; (801a960 <_read_r+0x20>)
 801a944:	4604      	mov	r4, r0
 801a946:	4608      	mov	r0, r1
 801a948:	4611      	mov	r1, r2
 801a94a:	2200      	movs	r2, #0
 801a94c:	602a      	str	r2, [r5, #0]
 801a94e:	461a      	mov	r2, r3
 801a950:	f7f0 fc9c 	bl	800b28c <_read>
 801a954:	1c43      	adds	r3, r0, #1
 801a956:	d102      	bne.n	801a95e <_read_r+0x1e>
 801a958:	682b      	ldr	r3, [r5, #0]
 801a95a:	b103      	cbz	r3, 801a95e <_read_r+0x1e>
 801a95c:	6023      	str	r3, [r4, #0]
 801a95e:	bd38      	pop	{r3, r4, r5, pc}
 801a960:	2000c974 	.word	0x2000c974
 801a964:	00000000 	.word	0x00000000

0801a968 <ceil>:
 801a968:	ec51 0b10 	vmov	r0, r1, d0
 801a96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a970:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801a974:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801a978:	2e13      	cmp	r6, #19
 801a97a:	ee10 5a10 	vmov	r5, s0
 801a97e:	ee10 8a10 	vmov	r8, s0
 801a982:	460c      	mov	r4, r1
 801a984:	dc30      	bgt.n	801a9e8 <ceil+0x80>
 801a986:	2e00      	cmp	r6, #0
 801a988:	da12      	bge.n	801a9b0 <ceil+0x48>
 801a98a:	a335      	add	r3, pc, #212	; (adr r3, 801aa60 <ceil+0xf8>)
 801a98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a990:	f7e5 fc7c 	bl	800028c <__adddf3>
 801a994:	2200      	movs	r2, #0
 801a996:	2300      	movs	r3, #0
 801a998:	f7e6 f8be 	bl	8000b18 <__aeabi_dcmpgt>
 801a99c:	b128      	cbz	r0, 801a9aa <ceil+0x42>
 801a99e:	2c00      	cmp	r4, #0
 801a9a0:	db55      	blt.n	801aa4e <ceil+0xe6>
 801a9a2:	432c      	orrs	r4, r5
 801a9a4:	d057      	beq.n	801aa56 <ceil+0xee>
 801a9a6:	4c30      	ldr	r4, [pc, #192]	; (801aa68 <ceil+0x100>)
 801a9a8:	2500      	movs	r5, #0
 801a9aa:	4621      	mov	r1, r4
 801a9ac:	4628      	mov	r0, r5
 801a9ae:	e025      	b.n	801a9fc <ceil+0x94>
 801a9b0:	4f2e      	ldr	r7, [pc, #184]	; (801aa6c <ceil+0x104>)
 801a9b2:	4137      	asrs	r7, r6
 801a9b4:	ea01 0307 	and.w	r3, r1, r7
 801a9b8:	4303      	orrs	r3, r0
 801a9ba:	d01f      	beq.n	801a9fc <ceil+0x94>
 801a9bc:	a328      	add	r3, pc, #160	; (adr r3, 801aa60 <ceil+0xf8>)
 801a9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9c2:	f7e5 fc63 	bl	800028c <__adddf3>
 801a9c6:	2200      	movs	r2, #0
 801a9c8:	2300      	movs	r3, #0
 801a9ca:	f7e6 f8a5 	bl	8000b18 <__aeabi_dcmpgt>
 801a9ce:	2800      	cmp	r0, #0
 801a9d0:	d0eb      	beq.n	801a9aa <ceil+0x42>
 801a9d2:	2c00      	cmp	r4, #0
 801a9d4:	bfc2      	ittt	gt
 801a9d6:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 801a9da:	fa43 f606 	asrgt.w	r6, r3, r6
 801a9de:	19a4      	addgt	r4, r4, r6
 801a9e0:	ea24 0407 	bic.w	r4, r4, r7
 801a9e4:	2500      	movs	r5, #0
 801a9e6:	e7e0      	b.n	801a9aa <ceil+0x42>
 801a9e8:	2e33      	cmp	r6, #51	; 0x33
 801a9ea:	dd0b      	ble.n	801aa04 <ceil+0x9c>
 801a9ec:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a9f0:	d104      	bne.n	801a9fc <ceil+0x94>
 801a9f2:	ee10 2a10 	vmov	r2, s0
 801a9f6:	460b      	mov	r3, r1
 801a9f8:	f7e5 fc48 	bl	800028c <__adddf3>
 801a9fc:	ec41 0b10 	vmov	d0, r0, r1
 801aa00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa04:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801aa08:	f04f 33ff 	mov.w	r3, #4294967295
 801aa0c:	fa23 f707 	lsr.w	r7, r3, r7
 801aa10:	4207      	tst	r7, r0
 801aa12:	d0f3      	beq.n	801a9fc <ceil+0x94>
 801aa14:	a312      	add	r3, pc, #72	; (adr r3, 801aa60 <ceil+0xf8>)
 801aa16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa1a:	f7e5 fc37 	bl	800028c <__adddf3>
 801aa1e:	2200      	movs	r2, #0
 801aa20:	2300      	movs	r3, #0
 801aa22:	f7e6 f879 	bl	8000b18 <__aeabi_dcmpgt>
 801aa26:	2800      	cmp	r0, #0
 801aa28:	d0bf      	beq.n	801a9aa <ceil+0x42>
 801aa2a:	2c00      	cmp	r4, #0
 801aa2c:	dd02      	ble.n	801aa34 <ceil+0xcc>
 801aa2e:	2e14      	cmp	r6, #20
 801aa30:	d103      	bne.n	801aa3a <ceil+0xd2>
 801aa32:	3401      	adds	r4, #1
 801aa34:	ea25 0507 	bic.w	r5, r5, r7
 801aa38:	e7b7      	b.n	801a9aa <ceil+0x42>
 801aa3a:	2301      	movs	r3, #1
 801aa3c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801aa40:	fa03 f606 	lsl.w	r6, r3, r6
 801aa44:	4435      	add	r5, r6
 801aa46:	4545      	cmp	r5, r8
 801aa48:	bf38      	it	cc
 801aa4a:	18e4      	addcc	r4, r4, r3
 801aa4c:	e7f2      	b.n	801aa34 <ceil+0xcc>
 801aa4e:	2500      	movs	r5, #0
 801aa50:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801aa54:	e7a9      	b.n	801a9aa <ceil+0x42>
 801aa56:	4625      	mov	r5, r4
 801aa58:	e7a7      	b.n	801a9aa <ceil+0x42>
 801aa5a:	bf00      	nop
 801aa5c:	f3af 8000 	nop.w
 801aa60:	8800759c 	.word	0x8800759c
 801aa64:	7e37e43c 	.word	0x7e37e43c
 801aa68:	3ff00000 	.word	0x3ff00000
 801aa6c:	000fffff 	.word	0x000fffff

0801aa70 <cos>:
 801aa70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801aa72:	ec53 2b10 	vmov	r2, r3, d0
 801aa76:	4824      	ldr	r0, [pc, #144]	; (801ab08 <cos+0x98>)
 801aa78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801aa7c:	4281      	cmp	r1, r0
 801aa7e:	dc06      	bgt.n	801aa8e <cos+0x1e>
 801aa80:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 801ab00 <cos+0x90>
 801aa84:	f000 fce4 	bl	801b450 <__kernel_cos>
 801aa88:	ec51 0b10 	vmov	r0, r1, d0
 801aa8c:	e007      	b.n	801aa9e <cos+0x2e>
 801aa8e:	481f      	ldr	r0, [pc, #124]	; (801ab0c <cos+0x9c>)
 801aa90:	4281      	cmp	r1, r0
 801aa92:	dd09      	ble.n	801aaa8 <cos+0x38>
 801aa94:	ee10 0a10 	vmov	r0, s0
 801aa98:	4619      	mov	r1, r3
 801aa9a:	f7e5 fbf5 	bl	8000288 <__aeabi_dsub>
 801aa9e:	ec41 0b10 	vmov	d0, r0, r1
 801aaa2:	b005      	add	sp, #20
 801aaa4:	f85d fb04 	ldr.w	pc, [sp], #4
 801aaa8:	4668      	mov	r0, sp
 801aaaa:	f000 fa11 	bl	801aed0 <__ieee754_rem_pio2>
 801aaae:	f000 0003 	and.w	r0, r0, #3
 801aab2:	2801      	cmp	r0, #1
 801aab4:	d007      	beq.n	801aac6 <cos+0x56>
 801aab6:	2802      	cmp	r0, #2
 801aab8:	d012      	beq.n	801aae0 <cos+0x70>
 801aaba:	b9c0      	cbnz	r0, 801aaee <cos+0x7e>
 801aabc:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aac0:	ed9d 0b00 	vldr	d0, [sp]
 801aac4:	e7de      	b.n	801aa84 <cos+0x14>
 801aac6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aaca:	ed9d 0b00 	vldr	d0, [sp]
 801aace:	f001 f8c7 	bl	801bc60 <__kernel_sin>
 801aad2:	ec53 2b10 	vmov	r2, r3, d0
 801aad6:	ee10 0a10 	vmov	r0, s0
 801aada:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801aade:	e7de      	b.n	801aa9e <cos+0x2e>
 801aae0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aae4:	ed9d 0b00 	vldr	d0, [sp]
 801aae8:	f000 fcb2 	bl	801b450 <__kernel_cos>
 801aaec:	e7f1      	b.n	801aad2 <cos+0x62>
 801aaee:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aaf2:	ed9d 0b00 	vldr	d0, [sp]
 801aaf6:	2001      	movs	r0, #1
 801aaf8:	f001 f8b2 	bl	801bc60 <__kernel_sin>
 801aafc:	e7c4      	b.n	801aa88 <cos+0x18>
 801aafe:	bf00      	nop
	...
 801ab08:	3fe921fb 	.word	0x3fe921fb
 801ab0c:	7fefffff 	.word	0x7fefffff

0801ab10 <round>:
 801ab10:	ec51 0b10 	vmov	r0, r1, d0
 801ab14:	b570      	push	{r4, r5, r6, lr}
 801ab16:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801ab1a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 801ab1e:	2c13      	cmp	r4, #19
 801ab20:	ee10 2a10 	vmov	r2, s0
 801ab24:	460b      	mov	r3, r1
 801ab26:	dc19      	bgt.n	801ab5c <round+0x4c>
 801ab28:	2c00      	cmp	r4, #0
 801ab2a:	da09      	bge.n	801ab40 <round+0x30>
 801ab2c:	3401      	adds	r4, #1
 801ab2e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801ab32:	d103      	bne.n	801ab3c <round+0x2c>
 801ab34:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801ab38:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801ab3c:	2100      	movs	r1, #0
 801ab3e:	e028      	b.n	801ab92 <round+0x82>
 801ab40:	4d15      	ldr	r5, [pc, #84]	; (801ab98 <round+0x88>)
 801ab42:	4125      	asrs	r5, r4
 801ab44:	ea01 0605 	and.w	r6, r1, r5
 801ab48:	4332      	orrs	r2, r6
 801ab4a:	d00e      	beq.n	801ab6a <round+0x5a>
 801ab4c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801ab50:	fa42 f404 	asr.w	r4, r2, r4
 801ab54:	4423      	add	r3, r4
 801ab56:	ea23 0305 	bic.w	r3, r3, r5
 801ab5a:	e7ef      	b.n	801ab3c <round+0x2c>
 801ab5c:	2c33      	cmp	r4, #51	; 0x33
 801ab5e:	dd07      	ble.n	801ab70 <round+0x60>
 801ab60:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801ab64:	d101      	bne.n	801ab6a <round+0x5a>
 801ab66:	f7e5 fb91 	bl	800028c <__adddf3>
 801ab6a:	ec41 0b10 	vmov	d0, r0, r1
 801ab6e:	bd70      	pop	{r4, r5, r6, pc}
 801ab70:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 801ab74:	f04f 35ff 	mov.w	r5, #4294967295
 801ab78:	40f5      	lsrs	r5, r6
 801ab7a:	4228      	tst	r0, r5
 801ab7c:	d0f5      	beq.n	801ab6a <round+0x5a>
 801ab7e:	2101      	movs	r1, #1
 801ab80:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801ab84:	fa01 f404 	lsl.w	r4, r1, r4
 801ab88:	1912      	adds	r2, r2, r4
 801ab8a:	bf28      	it	cs
 801ab8c:	185b      	addcs	r3, r3, r1
 801ab8e:	ea22 0105 	bic.w	r1, r2, r5
 801ab92:	4608      	mov	r0, r1
 801ab94:	4619      	mov	r1, r3
 801ab96:	e7e8      	b.n	801ab6a <round+0x5a>
 801ab98:	000fffff 	.word	0x000fffff
 801ab9c:	00000000 	.word	0x00000000

0801aba0 <sin>:
 801aba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801aba2:	ec53 2b10 	vmov	r2, r3, d0
 801aba6:	4826      	ldr	r0, [pc, #152]	; (801ac40 <sin+0xa0>)
 801aba8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801abac:	4281      	cmp	r1, r0
 801abae:	dc07      	bgt.n	801abc0 <sin+0x20>
 801abb0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801ac38 <sin+0x98>
 801abb4:	2000      	movs	r0, #0
 801abb6:	f001 f853 	bl	801bc60 <__kernel_sin>
 801abba:	ec51 0b10 	vmov	r0, r1, d0
 801abbe:	e007      	b.n	801abd0 <sin+0x30>
 801abc0:	4820      	ldr	r0, [pc, #128]	; (801ac44 <sin+0xa4>)
 801abc2:	4281      	cmp	r1, r0
 801abc4:	dd09      	ble.n	801abda <sin+0x3a>
 801abc6:	ee10 0a10 	vmov	r0, s0
 801abca:	4619      	mov	r1, r3
 801abcc:	f7e5 fb5c 	bl	8000288 <__aeabi_dsub>
 801abd0:	ec41 0b10 	vmov	d0, r0, r1
 801abd4:	b005      	add	sp, #20
 801abd6:	f85d fb04 	ldr.w	pc, [sp], #4
 801abda:	4668      	mov	r0, sp
 801abdc:	f000 f978 	bl	801aed0 <__ieee754_rem_pio2>
 801abe0:	f000 0003 	and.w	r0, r0, #3
 801abe4:	2801      	cmp	r0, #1
 801abe6:	d008      	beq.n	801abfa <sin+0x5a>
 801abe8:	2802      	cmp	r0, #2
 801abea:	d00d      	beq.n	801ac08 <sin+0x68>
 801abec:	b9d0      	cbnz	r0, 801ac24 <sin+0x84>
 801abee:	ed9d 1b02 	vldr	d1, [sp, #8]
 801abf2:	ed9d 0b00 	vldr	d0, [sp]
 801abf6:	2001      	movs	r0, #1
 801abf8:	e7dd      	b.n	801abb6 <sin+0x16>
 801abfa:	ed9d 1b02 	vldr	d1, [sp, #8]
 801abfe:	ed9d 0b00 	vldr	d0, [sp]
 801ac02:	f000 fc25 	bl	801b450 <__kernel_cos>
 801ac06:	e7d8      	b.n	801abba <sin+0x1a>
 801ac08:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ac0c:	ed9d 0b00 	vldr	d0, [sp]
 801ac10:	2001      	movs	r0, #1
 801ac12:	f001 f825 	bl	801bc60 <__kernel_sin>
 801ac16:	ec53 2b10 	vmov	r2, r3, d0
 801ac1a:	ee10 0a10 	vmov	r0, s0
 801ac1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801ac22:	e7d5      	b.n	801abd0 <sin+0x30>
 801ac24:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ac28:	ed9d 0b00 	vldr	d0, [sp]
 801ac2c:	f000 fc10 	bl	801b450 <__kernel_cos>
 801ac30:	e7f1      	b.n	801ac16 <sin+0x76>
 801ac32:	bf00      	nop
 801ac34:	f3af 8000 	nop.w
	...
 801ac40:	3fe921fb 	.word	0x3fe921fb
 801ac44:	7fefffff 	.word	0x7fefffff

0801ac48 <ceilf>:
 801ac48:	ee10 3a10 	vmov	r3, s0
 801ac4c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ac50:	3a7f      	subs	r2, #127	; 0x7f
 801ac52:	2a16      	cmp	r2, #22
 801ac54:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801ac58:	dc2a      	bgt.n	801acb0 <ceilf+0x68>
 801ac5a:	2a00      	cmp	r2, #0
 801ac5c:	da11      	bge.n	801ac82 <ceilf+0x3a>
 801ac5e:	eddf 7a19 	vldr	s15, [pc, #100]	; 801acc4 <ceilf+0x7c>
 801ac62:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ac66:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ac6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac6e:	dd05      	ble.n	801ac7c <ceilf+0x34>
 801ac70:	2b00      	cmp	r3, #0
 801ac72:	db23      	blt.n	801acbc <ceilf+0x74>
 801ac74:	2900      	cmp	r1, #0
 801ac76:	bf18      	it	ne
 801ac78:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 801ac7c:	ee00 3a10 	vmov	s0, r3
 801ac80:	4770      	bx	lr
 801ac82:	4911      	ldr	r1, [pc, #68]	; (801acc8 <ceilf+0x80>)
 801ac84:	4111      	asrs	r1, r2
 801ac86:	420b      	tst	r3, r1
 801ac88:	d0fa      	beq.n	801ac80 <ceilf+0x38>
 801ac8a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801acc4 <ceilf+0x7c>
 801ac8e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ac92:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ac96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac9a:	ddef      	ble.n	801ac7c <ceilf+0x34>
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	bfc2      	ittt	gt
 801aca0:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 801aca4:	fa40 f202 	asrgt.w	r2, r0, r2
 801aca8:	189b      	addgt	r3, r3, r2
 801acaa:	ea23 0301 	bic.w	r3, r3, r1
 801acae:	e7e5      	b.n	801ac7c <ceilf+0x34>
 801acb0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801acb4:	d3e4      	bcc.n	801ac80 <ceilf+0x38>
 801acb6:	ee30 0a00 	vadd.f32	s0, s0, s0
 801acba:	4770      	bx	lr
 801acbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801acc0:	e7dc      	b.n	801ac7c <ceilf+0x34>
 801acc2:	bf00      	nop
 801acc4:	7149f2ca 	.word	0x7149f2ca
 801acc8:	007fffff 	.word	0x007fffff

0801accc <atan2>:
 801accc:	f000 b834 	b.w	801ad38 <__ieee754_atan2>

0801acd0 <sqrt>:
 801acd0:	b538      	push	{r3, r4, r5, lr}
 801acd2:	ed2d 8b02 	vpush	{d8}
 801acd6:	ec55 4b10 	vmov	r4, r5, d0
 801acda:	f000 fb03 	bl	801b2e4 <__ieee754_sqrt>
 801acde:	4b15      	ldr	r3, [pc, #84]	; (801ad34 <sqrt+0x64>)
 801ace0:	eeb0 8a40 	vmov.f32	s16, s0
 801ace4:	eef0 8a60 	vmov.f32	s17, s1
 801ace8:	f993 3000 	ldrsb.w	r3, [r3]
 801acec:	3301      	adds	r3, #1
 801acee:	d019      	beq.n	801ad24 <sqrt+0x54>
 801acf0:	4622      	mov	r2, r4
 801acf2:	462b      	mov	r3, r5
 801acf4:	4620      	mov	r0, r4
 801acf6:	4629      	mov	r1, r5
 801acf8:	f7e5 ff18 	bl	8000b2c <__aeabi_dcmpun>
 801acfc:	b990      	cbnz	r0, 801ad24 <sqrt+0x54>
 801acfe:	2200      	movs	r2, #0
 801ad00:	2300      	movs	r3, #0
 801ad02:	4620      	mov	r0, r4
 801ad04:	4629      	mov	r1, r5
 801ad06:	f7e5 fee9 	bl	8000adc <__aeabi_dcmplt>
 801ad0a:	b158      	cbz	r0, 801ad24 <sqrt+0x54>
 801ad0c:	f7fb f996 	bl	801603c <__errno>
 801ad10:	2321      	movs	r3, #33	; 0x21
 801ad12:	6003      	str	r3, [r0, #0]
 801ad14:	2200      	movs	r2, #0
 801ad16:	2300      	movs	r3, #0
 801ad18:	4610      	mov	r0, r2
 801ad1a:	4619      	mov	r1, r3
 801ad1c:	f7e5 fd96 	bl	800084c <__aeabi_ddiv>
 801ad20:	ec41 0b18 	vmov	d8, r0, r1
 801ad24:	eeb0 0a48 	vmov.f32	s0, s16
 801ad28:	eef0 0a68 	vmov.f32	s1, s17
 801ad2c:	ecbd 8b02 	vpop	{d8}
 801ad30:	bd38      	pop	{r3, r4, r5, pc}
 801ad32:	bf00      	nop
 801ad34:	20000b80 	.word	0x20000b80

0801ad38 <__ieee754_atan2>:
 801ad38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad3c:	ec57 6b11 	vmov	r6, r7, d1
 801ad40:	4273      	negs	r3, r6
 801ad42:	f8df e184 	ldr.w	lr, [pc, #388]	; 801aec8 <__ieee754_atan2+0x190>
 801ad46:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801ad4a:	4333      	orrs	r3, r6
 801ad4c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801ad50:	4573      	cmp	r3, lr
 801ad52:	ec51 0b10 	vmov	r0, r1, d0
 801ad56:	ee11 8a10 	vmov	r8, s2
 801ad5a:	d80a      	bhi.n	801ad72 <__ieee754_atan2+0x3a>
 801ad5c:	4244      	negs	r4, r0
 801ad5e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ad62:	4304      	orrs	r4, r0
 801ad64:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801ad68:	4574      	cmp	r4, lr
 801ad6a:	ee10 9a10 	vmov	r9, s0
 801ad6e:	468c      	mov	ip, r1
 801ad70:	d907      	bls.n	801ad82 <__ieee754_atan2+0x4a>
 801ad72:	4632      	mov	r2, r6
 801ad74:	463b      	mov	r3, r7
 801ad76:	f7e5 fa89 	bl	800028c <__adddf3>
 801ad7a:	ec41 0b10 	vmov	d0, r0, r1
 801ad7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad82:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801ad86:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801ad8a:	4334      	orrs	r4, r6
 801ad8c:	d103      	bne.n	801ad96 <__ieee754_atan2+0x5e>
 801ad8e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad92:	f001 b825 	b.w	801bde0 <atan>
 801ad96:	17bc      	asrs	r4, r7, #30
 801ad98:	f004 0402 	and.w	r4, r4, #2
 801ad9c:	ea53 0909 	orrs.w	r9, r3, r9
 801ada0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801ada4:	d107      	bne.n	801adb6 <__ieee754_atan2+0x7e>
 801ada6:	2c02      	cmp	r4, #2
 801ada8:	d060      	beq.n	801ae6c <__ieee754_atan2+0x134>
 801adaa:	2c03      	cmp	r4, #3
 801adac:	d1e5      	bne.n	801ad7a <__ieee754_atan2+0x42>
 801adae:	a142      	add	r1, pc, #264	; (adr r1, 801aeb8 <__ieee754_atan2+0x180>)
 801adb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801adb4:	e7e1      	b.n	801ad7a <__ieee754_atan2+0x42>
 801adb6:	ea52 0808 	orrs.w	r8, r2, r8
 801adba:	d106      	bne.n	801adca <__ieee754_atan2+0x92>
 801adbc:	f1bc 0f00 	cmp.w	ip, #0
 801adc0:	da5f      	bge.n	801ae82 <__ieee754_atan2+0x14a>
 801adc2:	a13f      	add	r1, pc, #252	; (adr r1, 801aec0 <__ieee754_atan2+0x188>)
 801adc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801adc8:	e7d7      	b.n	801ad7a <__ieee754_atan2+0x42>
 801adca:	4572      	cmp	r2, lr
 801adcc:	d10f      	bne.n	801adee <__ieee754_atan2+0xb6>
 801adce:	4293      	cmp	r3, r2
 801add0:	f104 34ff 	add.w	r4, r4, #4294967295
 801add4:	d107      	bne.n	801ade6 <__ieee754_atan2+0xae>
 801add6:	2c02      	cmp	r4, #2
 801add8:	d84c      	bhi.n	801ae74 <__ieee754_atan2+0x13c>
 801adda:	4b35      	ldr	r3, [pc, #212]	; (801aeb0 <__ieee754_atan2+0x178>)
 801addc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801ade0:	e9d4 0100 	ldrd	r0, r1, [r4]
 801ade4:	e7c9      	b.n	801ad7a <__ieee754_atan2+0x42>
 801ade6:	2c02      	cmp	r4, #2
 801ade8:	d848      	bhi.n	801ae7c <__ieee754_atan2+0x144>
 801adea:	4b32      	ldr	r3, [pc, #200]	; (801aeb4 <__ieee754_atan2+0x17c>)
 801adec:	e7f6      	b.n	801addc <__ieee754_atan2+0xa4>
 801adee:	4573      	cmp	r3, lr
 801adf0:	d0e4      	beq.n	801adbc <__ieee754_atan2+0x84>
 801adf2:	1a9b      	subs	r3, r3, r2
 801adf4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801adf8:	ea4f 5223 	mov.w	r2, r3, asr #20
 801adfc:	da1e      	bge.n	801ae3c <__ieee754_atan2+0x104>
 801adfe:	2f00      	cmp	r7, #0
 801ae00:	da01      	bge.n	801ae06 <__ieee754_atan2+0xce>
 801ae02:	323c      	adds	r2, #60	; 0x3c
 801ae04:	db1e      	blt.n	801ae44 <__ieee754_atan2+0x10c>
 801ae06:	4632      	mov	r2, r6
 801ae08:	463b      	mov	r3, r7
 801ae0a:	f7e5 fd1f 	bl	800084c <__aeabi_ddiv>
 801ae0e:	ec41 0b10 	vmov	d0, r0, r1
 801ae12:	f001 f985 	bl	801c120 <fabs>
 801ae16:	f000 ffe3 	bl	801bde0 <atan>
 801ae1a:	ec51 0b10 	vmov	r0, r1, d0
 801ae1e:	2c01      	cmp	r4, #1
 801ae20:	d013      	beq.n	801ae4a <__ieee754_atan2+0x112>
 801ae22:	2c02      	cmp	r4, #2
 801ae24:	d015      	beq.n	801ae52 <__ieee754_atan2+0x11a>
 801ae26:	2c00      	cmp	r4, #0
 801ae28:	d0a7      	beq.n	801ad7a <__ieee754_atan2+0x42>
 801ae2a:	a319      	add	r3, pc, #100	; (adr r3, 801ae90 <__ieee754_atan2+0x158>)
 801ae2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae30:	f7e5 fa2a 	bl	8000288 <__aeabi_dsub>
 801ae34:	a318      	add	r3, pc, #96	; (adr r3, 801ae98 <__ieee754_atan2+0x160>)
 801ae36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae3a:	e014      	b.n	801ae66 <__ieee754_atan2+0x12e>
 801ae3c:	a118      	add	r1, pc, #96	; (adr r1, 801aea0 <__ieee754_atan2+0x168>)
 801ae3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae42:	e7ec      	b.n	801ae1e <__ieee754_atan2+0xe6>
 801ae44:	2000      	movs	r0, #0
 801ae46:	2100      	movs	r1, #0
 801ae48:	e7e9      	b.n	801ae1e <__ieee754_atan2+0xe6>
 801ae4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ae4e:	4619      	mov	r1, r3
 801ae50:	e793      	b.n	801ad7a <__ieee754_atan2+0x42>
 801ae52:	a30f      	add	r3, pc, #60	; (adr r3, 801ae90 <__ieee754_atan2+0x158>)
 801ae54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae58:	f7e5 fa16 	bl	8000288 <__aeabi_dsub>
 801ae5c:	4602      	mov	r2, r0
 801ae5e:	460b      	mov	r3, r1
 801ae60:	a10d      	add	r1, pc, #52	; (adr r1, 801ae98 <__ieee754_atan2+0x160>)
 801ae62:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae66:	f7e5 fa0f 	bl	8000288 <__aeabi_dsub>
 801ae6a:	e786      	b.n	801ad7a <__ieee754_atan2+0x42>
 801ae6c:	a10a      	add	r1, pc, #40	; (adr r1, 801ae98 <__ieee754_atan2+0x160>)
 801ae6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae72:	e782      	b.n	801ad7a <__ieee754_atan2+0x42>
 801ae74:	a10c      	add	r1, pc, #48	; (adr r1, 801aea8 <__ieee754_atan2+0x170>)
 801ae76:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae7a:	e77e      	b.n	801ad7a <__ieee754_atan2+0x42>
 801ae7c:	2000      	movs	r0, #0
 801ae7e:	2100      	movs	r1, #0
 801ae80:	e77b      	b.n	801ad7a <__ieee754_atan2+0x42>
 801ae82:	a107      	add	r1, pc, #28	; (adr r1, 801aea0 <__ieee754_atan2+0x168>)
 801ae84:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae88:	e777      	b.n	801ad7a <__ieee754_atan2+0x42>
 801ae8a:	bf00      	nop
 801ae8c:	f3af 8000 	nop.w
 801ae90:	33145c07 	.word	0x33145c07
 801ae94:	3ca1a626 	.word	0x3ca1a626
 801ae98:	54442d18 	.word	0x54442d18
 801ae9c:	400921fb 	.word	0x400921fb
 801aea0:	54442d18 	.word	0x54442d18
 801aea4:	3ff921fb 	.word	0x3ff921fb
 801aea8:	54442d18 	.word	0x54442d18
 801aeac:	3fe921fb 	.word	0x3fe921fb
 801aeb0:	0801caf0 	.word	0x0801caf0
 801aeb4:	0801cb08 	.word	0x0801cb08
 801aeb8:	54442d18 	.word	0x54442d18
 801aebc:	c00921fb 	.word	0xc00921fb
 801aec0:	54442d18 	.word	0x54442d18
 801aec4:	bff921fb 	.word	0xbff921fb
 801aec8:	7ff00000 	.word	0x7ff00000
 801aecc:	00000000 	.word	0x00000000

0801aed0 <__ieee754_rem_pio2>:
 801aed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aed4:	ed2d 8b02 	vpush	{d8}
 801aed8:	ec55 4b10 	vmov	r4, r5, d0
 801aedc:	4bca      	ldr	r3, [pc, #808]	; (801b208 <__ieee754_rem_pio2+0x338>)
 801aede:	b08b      	sub	sp, #44	; 0x2c
 801aee0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801aee4:	4598      	cmp	r8, r3
 801aee6:	4682      	mov	sl, r0
 801aee8:	9502      	str	r5, [sp, #8]
 801aeea:	dc08      	bgt.n	801aefe <__ieee754_rem_pio2+0x2e>
 801aeec:	2200      	movs	r2, #0
 801aeee:	2300      	movs	r3, #0
 801aef0:	ed80 0b00 	vstr	d0, [r0]
 801aef4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801aef8:	f04f 0b00 	mov.w	fp, #0
 801aefc:	e028      	b.n	801af50 <__ieee754_rem_pio2+0x80>
 801aefe:	4bc3      	ldr	r3, [pc, #780]	; (801b20c <__ieee754_rem_pio2+0x33c>)
 801af00:	4598      	cmp	r8, r3
 801af02:	dc78      	bgt.n	801aff6 <__ieee754_rem_pio2+0x126>
 801af04:	9b02      	ldr	r3, [sp, #8]
 801af06:	4ec2      	ldr	r6, [pc, #776]	; (801b210 <__ieee754_rem_pio2+0x340>)
 801af08:	2b00      	cmp	r3, #0
 801af0a:	ee10 0a10 	vmov	r0, s0
 801af0e:	a3b0      	add	r3, pc, #704	; (adr r3, 801b1d0 <__ieee754_rem_pio2+0x300>)
 801af10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af14:	4629      	mov	r1, r5
 801af16:	dd39      	ble.n	801af8c <__ieee754_rem_pio2+0xbc>
 801af18:	f7e5 f9b6 	bl	8000288 <__aeabi_dsub>
 801af1c:	45b0      	cmp	r8, r6
 801af1e:	4604      	mov	r4, r0
 801af20:	460d      	mov	r5, r1
 801af22:	d01b      	beq.n	801af5c <__ieee754_rem_pio2+0x8c>
 801af24:	a3ac      	add	r3, pc, #688	; (adr r3, 801b1d8 <__ieee754_rem_pio2+0x308>)
 801af26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af2a:	f7e5 f9ad 	bl	8000288 <__aeabi_dsub>
 801af2e:	4602      	mov	r2, r0
 801af30:	460b      	mov	r3, r1
 801af32:	e9ca 2300 	strd	r2, r3, [sl]
 801af36:	4620      	mov	r0, r4
 801af38:	4629      	mov	r1, r5
 801af3a:	f7e5 f9a5 	bl	8000288 <__aeabi_dsub>
 801af3e:	a3a6      	add	r3, pc, #664	; (adr r3, 801b1d8 <__ieee754_rem_pio2+0x308>)
 801af40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af44:	f7e5 f9a0 	bl	8000288 <__aeabi_dsub>
 801af48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801af4c:	f04f 0b01 	mov.w	fp, #1
 801af50:	4658      	mov	r0, fp
 801af52:	b00b      	add	sp, #44	; 0x2c
 801af54:	ecbd 8b02 	vpop	{d8}
 801af58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af5c:	a3a0      	add	r3, pc, #640	; (adr r3, 801b1e0 <__ieee754_rem_pio2+0x310>)
 801af5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af62:	f7e5 f991 	bl	8000288 <__aeabi_dsub>
 801af66:	a3a0      	add	r3, pc, #640	; (adr r3, 801b1e8 <__ieee754_rem_pio2+0x318>)
 801af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af6c:	4604      	mov	r4, r0
 801af6e:	460d      	mov	r5, r1
 801af70:	f7e5 f98a 	bl	8000288 <__aeabi_dsub>
 801af74:	4602      	mov	r2, r0
 801af76:	460b      	mov	r3, r1
 801af78:	e9ca 2300 	strd	r2, r3, [sl]
 801af7c:	4620      	mov	r0, r4
 801af7e:	4629      	mov	r1, r5
 801af80:	f7e5 f982 	bl	8000288 <__aeabi_dsub>
 801af84:	a398      	add	r3, pc, #608	; (adr r3, 801b1e8 <__ieee754_rem_pio2+0x318>)
 801af86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af8a:	e7db      	b.n	801af44 <__ieee754_rem_pio2+0x74>
 801af8c:	f7e5 f97e 	bl	800028c <__adddf3>
 801af90:	45b0      	cmp	r8, r6
 801af92:	4604      	mov	r4, r0
 801af94:	460d      	mov	r5, r1
 801af96:	d016      	beq.n	801afc6 <__ieee754_rem_pio2+0xf6>
 801af98:	a38f      	add	r3, pc, #572	; (adr r3, 801b1d8 <__ieee754_rem_pio2+0x308>)
 801af9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af9e:	f7e5 f975 	bl	800028c <__adddf3>
 801afa2:	4602      	mov	r2, r0
 801afa4:	460b      	mov	r3, r1
 801afa6:	e9ca 2300 	strd	r2, r3, [sl]
 801afaa:	4620      	mov	r0, r4
 801afac:	4629      	mov	r1, r5
 801afae:	f7e5 f96b 	bl	8000288 <__aeabi_dsub>
 801afb2:	a389      	add	r3, pc, #548	; (adr r3, 801b1d8 <__ieee754_rem_pio2+0x308>)
 801afb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afb8:	f7e5 f968 	bl	800028c <__adddf3>
 801afbc:	f04f 3bff 	mov.w	fp, #4294967295
 801afc0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801afc4:	e7c4      	b.n	801af50 <__ieee754_rem_pio2+0x80>
 801afc6:	a386      	add	r3, pc, #536	; (adr r3, 801b1e0 <__ieee754_rem_pio2+0x310>)
 801afc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afcc:	f7e5 f95e 	bl	800028c <__adddf3>
 801afd0:	a385      	add	r3, pc, #532	; (adr r3, 801b1e8 <__ieee754_rem_pio2+0x318>)
 801afd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afd6:	4604      	mov	r4, r0
 801afd8:	460d      	mov	r5, r1
 801afda:	f7e5 f957 	bl	800028c <__adddf3>
 801afde:	4602      	mov	r2, r0
 801afe0:	460b      	mov	r3, r1
 801afe2:	e9ca 2300 	strd	r2, r3, [sl]
 801afe6:	4620      	mov	r0, r4
 801afe8:	4629      	mov	r1, r5
 801afea:	f7e5 f94d 	bl	8000288 <__aeabi_dsub>
 801afee:	a37e      	add	r3, pc, #504	; (adr r3, 801b1e8 <__ieee754_rem_pio2+0x318>)
 801aff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aff4:	e7e0      	b.n	801afb8 <__ieee754_rem_pio2+0xe8>
 801aff6:	4b87      	ldr	r3, [pc, #540]	; (801b214 <__ieee754_rem_pio2+0x344>)
 801aff8:	4598      	cmp	r8, r3
 801affa:	f300 80d9 	bgt.w	801b1b0 <__ieee754_rem_pio2+0x2e0>
 801affe:	f001 f88f 	bl	801c120 <fabs>
 801b002:	ec55 4b10 	vmov	r4, r5, d0
 801b006:	ee10 0a10 	vmov	r0, s0
 801b00a:	a379      	add	r3, pc, #484	; (adr r3, 801b1f0 <__ieee754_rem_pio2+0x320>)
 801b00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b010:	4629      	mov	r1, r5
 801b012:	f7e5 faf1 	bl	80005f8 <__aeabi_dmul>
 801b016:	4b80      	ldr	r3, [pc, #512]	; (801b218 <__ieee754_rem_pio2+0x348>)
 801b018:	2200      	movs	r2, #0
 801b01a:	f7e5 f937 	bl	800028c <__adddf3>
 801b01e:	f7e5 fd9b 	bl	8000b58 <__aeabi_d2iz>
 801b022:	4683      	mov	fp, r0
 801b024:	f7e5 fa7e 	bl	8000524 <__aeabi_i2d>
 801b028:	4602      	mov	r2, r0
 801b02a:	460b      	mov	r3, r1
 801b02c:	ec43 2b18 	vmov	d8, r2, r3
 801b030:	a367      	add	r3, pc, #412	; (adr r3, 801b1d0 <__ieee754_rem_pio2+0x300>)
 801b032:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b036:	f7e5 fadf 	bl	80005f8 <__aeabi_dmul>
 801b03a:	4602      	mov	r2, r0
 801b03c:	460b      	mov	r3, r1
 801b03e:	4620      	mov	r0, r4
 801b040:	4629      	mov	r1, r5
 801b042:	f7e5 f921 	bl	8000288 <__aeabi_dsub>
 801b046:	a364      	add	r3, pc, #400	; (adr r3, 801b1d8 <__ieee754_rem_pio2+0x308>)
 801b048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b04c:	4606      	mov	r6, r0
 801b04e:	460f      	mov	r7, r1
 801b050:	ec51 0b18 	vmov	r0, r1, d8
 801b054:	f7e5 fad0 	bl	80005f8 <__aeabi_dmul>
 801b058:	f1bb 0f1f 	cmp.w	fp, #31
 801b05c:	4604      	mov	r4, r0
 801b05e:	460d      	mov	r5, r1
 801b060:	dc0d      	bgt.n	801b07e <__ieee754_rem_pio2+0x1ae>
 801b062:	4b6e      	ldr	r3, [pc, #440]	; (801b21c <__ieee754_rem_pio2+0x34c>)
 801b064:	f10b 32ff 	add.w	r2, fp, #4294967295
 801b068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b06c:	4543      	cmp	r3, r8
 801b06e:	d006      	beq.n	801b07e <__ieee754_rem_pio2+0x1ae>
 801b070:	4622      	mov	r2, r4
 801b072:	462b      	mov	r3, r5
 801b074:	4630      	mov	r0, r6
 801b076:	4639      	mov	r1, r7
 801b078:	f7e5 f906 	bl	8000288 <__aeabi_dsub>
 801b07c:	e00f      	b.n	801b09e <__ieee754_rem_pio2+0x1ce>
 801b07e:	462b      	mov	r3, r5
 801b080:	4622      	mov	r2, r4
 801b082:	4630      	mov	r0, r6
 801b084:	4639      	mov	r1, r7
 801b086:	f7e5 f8ff 	bl	8000288 <__aeabi_dsub>
 801b08a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801b08e:	9303      	str	r3, [sp, #12]
 801b090:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b094:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 801b098:	f1b8 0f10 	cmp.w	r8, #16
 801b09c:	dc02      	bgt.n	801b0a4 <__ieee754_rem_pio2+0x1d4>
 801b09e:	e9ca 0100 	strd	r0, r1, [sl]
 801b0a2:	e039      	b.n	801b118 <__ieee754_rem_pio2+0x248>
 801b0a4:	a34e      	add	r3, pc, #312	; (adr r3, 801b1e0 <__ieee754_rem_pio2+0x310>)
 801b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0aa:	ec51 0b18 	vmov	r0, r1, d8
 801b0ae:	f7e5 faa3 	bl	80005f8 <__aeabi_dmul>
 801b0b2:	4604      	mov	r4, r0
 801b0b4:	460d      	mov	r5, r1
 801b0b6:	4602      	mov	r2, r0
 801b0b8:	460b      	mov	r3, r1
 801b0ba:	4630      	mov	r0, r6
 801b0bc:	4639      	mov	r1, r7
 801b0be:	f7e5 f8e3 	bl	8000288 <__aeabi_dsub>
 801b0c2:	4602      	mov	r2, r0
 801b0c4:	460b      	mov	r3, r1
 801b0c6:	4680      	mov	r8, r0
 801b0c8:	4689      	mov	r9, r1
 801b0ca:	4630      	mov	r0, r6
 801b0cc:	4639      	mov	r1, r7
 801b0ce:	f7e5 f8db 	bl	8000288 <__aeabi_dsub>
 801b0d2:	4622      	mov	r2, r4
 801b0d4:	462b      	mov	r3, r5
 801b0d6:	f7e5 f8d7 	bl	8000288 <__aeabi_dsub>
 801b0da:	a343      	add	r3, pc, #268	; (adr r3, 801b1e8 <__ieee754_rem_pio2+0x318>)
 801b0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0e0:	4604      	mov	r4, r0
 801b0e2:	460d      	mov	r5, r1
 801b0e4:	ec51 0b18 	vmov	r0, r1, d8
 801b0e8:	f7e5 fa86 	bl	80005f8 <__aeabi_dmul>
 801b0ec:	4622      	mov	r2, r4
 801b0ee:	462b      	mov	r3, r5
 801b0f0:	f7e5 f8ca 	bl	8000288 <__aeabi_dsub>
 801b0f4:	4602      	mov	r2, r0
 801b0f6:	460b      	mov	r3, r1
 801b0f8:	4604      	mov	r4, r0
 801b0fa:	460d      	mov	r5, r1
 801b0fc:	4640      	mov	r0, r8
 801b0fe:	4649      	mov	r1, r9
 801b100:	f7e5 f8c2 	bl	8000288 <__aeabi_dsub>
 801b104:	9a03      	ldr	r2, [sp, #12]
 801b106:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b10a:	1ad3      	subs	r3, r2, r3
 801b10c:	2b31      	cmp	r3, #49	; 0x31
 801b10e:	dc24      	bgt.n	801b15a <__ieee754_rem_pio2+0x28a>
 801b110:	e9ca 0100 	strd	r0, r1, [sl]
 801b114:	4646      	mov	r6, r8
 801b116:	464f      	mov	r7, r9
 801b118:	e9da 8900 	ldrd	r8, r9, [sl]
 801b11c:	4630      	mov	r0, r6
 801b11e:	4642      	mov	r2, r8
 801b120:	464b      	mov	r3, r9
 801b122:	4639      	mov	r1, r7
 801b124:	f7e5 f8b0 	bl	8000288 <__aeabi_dsub>
 801b128:	462b      	mov	r3, r5
 801b12a:	4622      	mov	r2, r4
 801b12c:	f7e5 f8ac 	bl	8000288 <__aeabi_dsub>
 801b130:	9b02      	ldr	r3, [sp, #8]
 801b132:	2b00      	cmp	r3, #0
 801b134:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b138:	f6bf af0a 	bge.w	801af50 <__ieee754_rem_pio2+0x80>
 801b13c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b140:	f8ca 3004 	str.w	r3, [sl, #4]
 801b144:	f8ca 8000 	str.w	r8, [sl]
 801b148:	f8ca 0008 	str.w	r0, [sl, #8]
 801b14c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b150:	f8ca 300c 	str.w	r3, [sl, #12]
 801b154:	f1cb 0b00 	rsb	fp, fp, #0
 801b158:	e6fa      	b.n	801af50 <__ieee754_rem_pio2+0x80>
 801b15a:	a327      	add	r3, pc, #156	; (adr r3, 801b1f8 <__ieee754_rem_pio2+0x328>)
 801b15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b160:	ec51 0b18 	vmov	r0, r1, d8
 801b164:	f7e5 fa48 	bl	80005f8 <__aeabi_dmul>
 801b168:	4604      	mov	r4, r0
 801b16a:	460d      	mov	r5, r1
 801b16c:	4602      	mov	r2, r0
 801b16e:	460b      	mov	r3, r1
 801b170:	4640      	mov	r0, r8
 801b172:	4649      	mov	r1, r9
 801b174:	f7e5 f888 	bl	8000288 <__aeabi_dsub>
 801b178:	4602      	mov	r2, r0
 801b17a:	460b      	mov	r3, r1
 801b17c:	4606      	mov	r6, r0
 801b17e:	460f      	mov	r7, r1
 801b180:	4640      	mov	r0, r8
 801b182:	4649      	mov	r1, r9
 801b184:	f7e5 f880 	bl	8000288 <__aeabi_dsub>
 801b188:	4622      	mov	r2, r4
 801b18a:	462b      	mov	r3, r5
 801b18c:	f7e5 f87c 	bl	8000288 <__aeabi_dsub>
 801b190:	a31b      	add	r3, pc, #108	; (adr r3, 801b200 <__ieee754_rem_pio2+0x330>)
 801b192:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b196:	4604      	mov	r4, r0
 801b198:	460d      	mov	r5, r1
 801b19a:	ec51 0b18 	vmov	r0, r1, d8
 801b19e:	f7e5 fa2b 	bl	80005f8 <__aeabi_dmul>
 801b1a2:	4622      	mov	r2, r4
 801b1a4:	462b      	mov	r3, r5
 801b1a6:	f7e5 f86f 	bl	8000288 <__aeabi_dsub>
 801b1aa:	4604      	mov	r4, r0
 801b1ac:	460d      	mov	r5, r1
 801b1ae:	e75f      	b.n	801b070 <__ieee754_rem_pio2+0x1a0>
 801b1b0:	4b1b      	ldr	r3, [pc, #108]	; (801b220 <__ieee754_rem_pio2+0x350>)
 801b1b2:	4598      	cmp	r8, r3
 801b1b4:	dd36      	ble.n	801b224 <__ieee754_rem_pio2+0x354>
 801b1b6:	ee10 2a10 	vmov	r2, s0
 801b1ba:	462b      	mov	r3, r5
 801b1bc:	4620      	mov	r0, r4
 801b1be:	4629      	mov	r1, r5
 801b1c0:	f7e5 f862 	bl	8000288 <__aeabi_dsub>
 801b1c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b1c8:	e9ca 0100 	strd	r0, r1, [sl]
 801b1cc:	e694      	b.n	801aef8 <__ieee754_rem_pio2+0x28>
 801b1ce:	bf00      	nop
 801b1d0:	54400000 	.word	0x54400000
 801b1d4:	3ff921fb 	.word	0x3ff921fb
 801b1d8:	1a626331 	.word	0x1a626331
 801b1dc:	3dd0b461 	.word	0x3dd0b461
 801b1e0:	1a600000 	.word	0x1a600000
 801b1e4:	3dd0b461 	.word	0x3dd0b461
 801b1e8:	2e037073 	.word	0x2e037073
 801b1ec:	3ba3198a 	.word	0x3ba3198a
 801b1f0:	6dc9c883 	.word	0x6dc9c883
 801b1f4:	3fe45f30 	.word	0x3fe45f30
 801b1f8:	2e000000 	.word	0x2e000000
 801b1fc:	3ba3198a 	.word	0x3ba3198a
 801b200:	252049c1 	.word	0x252049c1
 801b204:	397b839a 	.word	0x397b839a
 801b208:	3fe921fb 	.word	0x3fe921fb
 801b20c:	4002d97b 	.word	0x4002d97b
 801b210:	3ff921fb 	.word	0x3ff921fb
 801b214:	413921fb 	.word	0x413921fb
 801b218:	3fe00000 	.word	0x3fe00000
 801b21c:	0801cb20 	.word	0x0801cb20
 801b220:	7fefffff 	.word	0x7fefffff
 801b224:	ea4f 5428 	mov.w	r4, r8, asr #20
 801b228:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801b22c:	ee10 0a10 	vmov	r0, s0
 801b230:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801b234:	ee10 6a10 	vmov	r6, s0
 801b238:	460f      	mov	r7, r1
 801b23a:	f7e5 fc8d 	bl	8000b58 <__aeabi_d2iz>
 801b23e:	f7e5 f971 	bl	8000524 <__aeabi_i2d>
 801b242:	4602      	mov	r2, r0
 801b244:	460b      	mov	r3, r1
 801b246:	4630      	mov	r0, r6
 801b248:	4639      	mov	r1, r7
 801b24a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b24e:	f7e5 f81b 	bl	8000288 <__aeabi_dsub>
 801b252:	4b22      	ldr	r3, [pc, #136]	; (801b2dc <__ieee754_rem_pio2+0x40c>)
 801b254:	2200      	movs	r2, #0
 801b256:	f7e5 f9cf 	bl	80005f8 <__aeabi_dmul>
 801b25a:	460f      	mov	r7, r1
 801b25c:	4606      	mov	r6, r0
 801b25e:	f7e5 fc7b 	bl	8000b58 <__aeabi_d2iz>
 801b262:	f7e5 f95f 	bl	8000524 <__aeabi_i2d>
 801b266:	4602      	mov	r2, r0
 801b268:	460b      	mov	r3, r1
 801b26a:	4630      	mov	r0, r6
 801b26c:	4639      	mov	r1, r7
 801b26e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b272:	f7e5 f809 	bl	8000288 <__aeabi_dsub>
 801b276:	4b19      	ldr	r3, [pc, #100]	; (801b2dc <__ieee754_rem_pio2+0x40c>)
 801b278:	2200      	movs	r2, #0
 801b27a:	f7e5 f9bd 	bl	80005f8 <__aeabi_dmul>
 801b27e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b282:	ad04      	add	r5, sp, #16
 801b284:	f04f 0803 	mov.w	r8, #3
 801b288:	46a9      	mov	r9, r5
 801b28a:	2600      	movs	r6, #0
 801b28c:	2700      	movs	r7, #0
 801b28e:	4632      	mov	r2, r6
 801b290:	463b      	mov	r3, r7
 801b292:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801b296:	46c3      	mov	fp, r8
 801b298:	3d08      	subs	r5, #8
 801b29a:	f108 38ff 	add.w	r8, r8, #4294967295
 801b29e:	f7e5 fc13 	bl	8000ac8 <__aeabi_dcmpeq>
 801b2a2:	2800      	cmp	r0, #0
 801b2a4:	d1f3      	bne.n	801b28e <__ieee754_rem_pio2+0x3be>
 801b2a6:	4b0e      	ldr	r3, [pc, #56]	; (801b2e0 <__ieee754_rem_pio2+0x410>)
 801b2a8:	9301      	str	r3, [sp, #4]
 801b2aa:	2302      	movs	r3, #2
 801b2ac:	9300      	str	r3, [sp, #0]
 801b2ae:	4622      	mov	r2, r4
 801b2b0:	465b      	mov	r3, fp
 801b2b2:	4651      	mov	r1, sl
 801b2b4:	4648      	mov	r0, r9
 801b2b6:	f000 f993 	bl	801b5e0 <__kernel_rem_pio2>
 801b2ba:	9b02      	ldr	r3, [sp, #8]
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	4683      	mov	fp, r0
 801b2c0:	f6bf ae46 	bge.w	801af50 <__ieee754_rem_pio2+0x80>
 801b2c4:	f8da 3004 	ldr.w	r3, [sl, #4]
 801b2c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b2cc:	f8ca 3004 	str.w	r3, [sl, #4]
 801b2d0:	f8da 300c 	ldr.w	r3, [sl, #12]
 801b2d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b2d8:	e73a      	b.n	801b150 <__ieee754_rem_pio2+0x280>
 801b2da:	bf00      	nop
 801b2dc:	41700000 	.word	0x41700000
 801b2e0:	0801cba0 	.word	0x0801cba0

0801b2e4 <__ieee754_sqrt>:
 801b2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2e8:	ec55 4b10 	vmov	r4, r5, d0
 801b2ec:	4e56      	ldr	r6, [pc, #344]	; (801b448 <__ieee754_sqrt+0x164>)
 801b2ee:	43ae      	bics	r6, r5
 801b2f0:	ee10 0a10 	vmov	r0, s0
 801b2f4:	ee10 3a10 	vmov	r3, s0
 801b2f8:	4629      	mov	r1, r5
 801b2fa:	462a      	mov	r2, r5
 801b2fc:	d110      	bne.n	801b320 <__ieee754_sqrt+0x3c>
 801b2fe:	ee10 2a10 	vmov	r2, s0
 801b302:	462b      	mov	r3, r5
 801b304:	f7e5 f978 	bl	80005f8 <__aeabi_dmul>
 801b308:	4602      	mov	r2, r0
 801b30a:	460b      	mov	r3, r1
 801b30c:	4620      	mov	r0, r4
 801b30e:	4629      	mov	r1, r5
 801b310:	f7e4 ffbc 	bl	800028c <__adddf3>
 801b314:	4604      	mov	r4, r0
 801b316:	460d      	mov	r5, r1
 801b318:	ec45 4b10 	vmov	d0, r4, r5
 801b31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b320:	2d00      	cmp	r5, #0
 801b322:	dc10      	bgt.n	801b346 <__ieee754_sqrt+0x62>
 801b324:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b328:	4330      	orrs	r0, r6
 801b32a:	d0f5      	beq.n	801b318 <__ieee754_sqrt+0x34>
 801b32c:	b15d      	cbz	r5, 801b346 <__ieee754_sqrt+0x62>
 801b32e:	ee10 2a10 	vmov	r2, s0
 801b332:	462b      	mov	r3, r5
 801b334:	ee10 0a10 	vmov	r0, s0
 801b338:	f7e4 ffa6 	bl	8000288 <__aeabi_dsub>
 801b33c:	4602      	mov	r2, r0
 801b33e:	460b      	mov	r3, r1
 801b340:	f7e5 fa84 	bl	800084c <__aeabi_ddiv>
 801b344:	e7e6      	b.n	801b314 <__ieee754_sqrt+0x30>
 801b346:	1509      	asrs	r1, r1, #20
 801b348:	d076      	beq.n	801b438 <__ieee754_sqrt+0x154>
 801b34a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801b34e:	07ce      	lsls	r6, r1, #31
 801b350:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801b354:	bf5e      	ittt	pl
 801b356:	0fda      	lsrpl	r2, r3, #31
 801b358:	005b      	lslpl	r3, r3, #1
 801b35a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801b35e:	0fda      	lsrs	r2, r3, #31
 801b360:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801b364:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801b368:	2000      	movs	r0, #0
 801b36a:	106d      	asrs	r5, r5, #1
 801b36c:	005b      	lsls	r3, r3, #1
 801b36e:	f04f 0e16 	mov.w	lr, #22
 801b372:	4684      	mov	ip, r0
 801b374:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801b378:	eb0c 0401 	add.w	r4, ip, r1
 801b37c:	4294      	cmp	r4, r2
 801b37e:	bfde      	ittt	le
 801b380:	1b12      	suble	r2, r2, r4
 801b382:	eb04 0c01 	addle.w	ip, r4, r1
 801b386:	1840      	addle	r0, r0, r1
 801b388:	0052      	lsls	r2, r2, #1
 801b38a:	f1be 0e01 	subs.w	lr, lr, #1
 801b38e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801b392:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801b396:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b39a:	d1ed      	bne.n	801b378 <__ieee754_sqrt+0x94>
 801b39c:	4671      	mov	r1, lr
 801b39e:	2720      	movs	r7, #32
 801b3a0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801b3a4:	4562      	cmp	r2, ip
 801b3a6:	eb04 060e 	add.w	r6, r4, lr
 801b3aa:	dc02      	bgt.n	801b3b2 <__ieee754_sqrt+0xce>
 801b3ac:	d113      	bne.n	801b3d6 <__ieee754_sqrt+0xf2>
 801b3ae:	429e      	cmp	r6, r3
 801b3b0:	d811      	bhi.n	801b3d6 <__ieee754_sqrt+0xf2>
 801b3b2:	2e00      	cmp	r6, #0
 801b3b4:	eb06 0e04 	add.w	lr, r6, r4
 801b3b8:	da43      	bge.n	801b442 <__ieee754_sqrt+0x15e>
 801b3ba:	f1be 0f00 	cmp.w	lr, #0
 801b3be:	db40      	blt.n	801b442 <__ieee754_sqrt+0x15e>
 801b3c0:	f10c 0801 	add.w	r8, ip, #1
 801b3c4:	eba2 020c 	sub.w	r2, r2, ip
 801b3c8:	429e      	cmp	r6, r3
 801b3ca:	bf88      	it	hi
 801b3cc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b3d0:	1b9b      	subs	r3, r3, r6
 801b3d2:	4421      	add	r1, r4
 801b3d4:	46c4      	mov	ip, r8
 801b3d6:	0052      	lsls	r2, r2, #1
 801b3d8:	3f01      	subs	r7, #1
 801b3da:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801b3de:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801b3e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b3e6:	d1dd      	bne.n	801b3a4 <__ieee754_sqrt+0xc0>
 801b3e8:	4313      	orrs	r3, r2
 801b3ea:	d006      	beq.n	801b3fa <__ieee754_sqrt+0x116>
 801b3ec:	1c4c      	adds	r4, r1, #1
 801b3ee:	bf13      	iteet	ne
 801b3f0:	3101      	addne	r1, #1
 801b3f2:	3001      	addeq	r0, #1
 801b3f4:	4639      	moveq	r1, r7
 801b3f6:	f021 0101 	bicne.w	r1, r1, #1
 801b3fa:	1043      	asrs	r3, r0, #1
 801b3fc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801b400:	0849      	lsrs	r1, r1, #1
 801b402:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801b406:	07c2      	lsls	r2, r0, #31
 801b408:	bf48      	it	mi
 801b40a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801b40e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801b412:	460c      	mov	r4, r1
 801b414:	463d      	mov	r5, r7
 801b416:	e77f      	b.n	801b318 <__ieee754_sqrt+0x34>
 801b418:	0ada      	lsrs	r2, r3, #11
 801b41a:	3815      	subs	r0, #21
 801b41c:	055b      	lsls	r3, r3, #21
 801b41e:	2a00      	cmp	r2, #0
 801b420:	d0fa      	beq.n	801b418 <__ieee754_sqrt+0x134>
 801b422:	02d7      	lsls	r7, r2, #11
 801b424:	d50a      	bpl.n	801b43c <__ieee754_sqrt+0x158>
 801b426:	f1c1 0420 	rsb	r4, r1, #32
 801b42a:	fa23 f404 	lsr.w	r4, r3, r4
 801b42e:	1e4d      	subs	r5, r1, #1
 801b430:	408b      	lsls	r3, r1
 801b432:	4322      	orrs	r2, r4
 801b434:	1b41      	subs	r1, r0, r5
 801b436:	e788      	b.n	801b34a <__ieee754_sqrt+0x66>
 801b438:	4608      	mov	r0, r1
 801b43a:	e7f0      	b.n	801b41e <__ieee754_sqrt+0x13a>
 801b43c:	0052      	lsls	r2, r2, #1
 801b43e:	3101      	adds	r1, #1
 801b440:	e7ef      	b.n	801b422 <__ieee754_sqrt+0x13e>
 801b442:	46e0      	mov	r8, ip
 801b444:	e7be      	b.n	801b3c4 <__ieee754_sqrt+0xe0>
 801b446:	bf00      	nop
 801b448:	7ff00000 	.word	0x7ff00000
 801b44c:	00000000 	.word	0x00000000

0801b450 <__kernel_cos>:
 801b450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b454:	ec57 6b10 	vmov	r6, r7, d0
 801b458:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801b45c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801b460:	ed8d 1b00 	vstr	d1, [sp]
 801b464:	da07      	bge.n	801b476 <__kernel_cos+0x26>
 801b466:	ee10 0a10 	vmov	r0, s0
 801b46a:	4639      	mov	r1, r7
 801b46c:	f7e5 fb74 	bl	8000b58 <__aeabi_d2iz>
 801b470:	2800      	cmp	r0, #0
 801b472:	f000 8088 	beq.w	801b586 <__kernel_cos+0x136>
 801b476:	4632      	mov	r2, r6
 801b478:	463b      	mov	r3, r7
 801b47a:	4630      	mov	r0, r6
 801b47c:	4639      	mov	r1, r7
 801b47e:	f7e5 f8bb 	bl	80005f8 <__aeabi_dmul>
 801b482:	4b51      	ldr	r3, [pc, #324]	; (801b5c8 <__kernel_cos+0x178>)
 801b484:	2200      	movs	r2, #0
 801b486:	4604      	mov	r4, r0
 801b488:	460d      	mov	r5, r1
 801b48a:	f7e5 f8b5 	bl	80005f8 <__aeabi_dmul>
 801b48e:	a340      	add	r3, pc, #256	; (adr r3, 801b590 <__kernel_cos+0x140>)
 801b490:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b494:	4682      	mov	sl, r0
 801b496:	468b      	mov	fp, r1
 801b498:	4620      	mov	r0, r4
 801b49a:	4629      	mov	r1, r5
 801b49c:	f7e5 f8ac 	bl	80005f8 <__aeabi_dmul>
 801b4a0:	a33d      	add	r3, pc, #244	; (adr r3, 801b598 <__kernel_cos+0x148>)
 801b4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4a6:	f7e4 fef1 	bl	800028c <__adddf3>
 801b4aa:	4622      	mov	r2, r4
 801b4ac:	462b      	mov	r3, r5
 801b4ae:	f7e5 f8a3 	bl	80005f8 <__aeabi_dmul>
 801b4b2:	a33b      	add	r3, pc, #236	; (adr r3, 801b5a0 <__kernel_cos+0x150>)
 801b4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4b8:	f7e4 fee6 	bl	8000288 <__aeabi_dsub>
 801b4bc:	4622      	mov	r2, r4
 801b4be:	462b      	mov	r3, r5
 801b4c0:	f7e5 f89a 	bl	80005f8 <__aeabi_dmul>
 801b4c4:	a338      	add	r3, pc, #224	; (adr r3, 801b5a8 <__kernel_cos+0x158>)
 801b4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4ca:	f7e4 fedf 	bl	800028c <__adddf3>
 801b4ce:	4622      	mov	r2, r4
 801b4d0:	462b      	mov	r3, r5
 801b4d2:	f7e5 f891 	bl	80005f8 <__aeabi_dmul>
 801b4d6:	a336      	add	r3, pc, #216	; (adr r3, 801b5b0 <__kernel_cos+0x160>)
 801b4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4dc:	f7e4 fed4 	bl	8000288 <__aeabi_dsub>
 801b4e0:	4622      	mov	r2, r4
 801b4e2:	462b      	mov	r3, r5
 801b4e4:	f7e5 f888 	bl	80005f8 <__aeabi_dmul>
 801b4e8:	a333      	add	r3, pc, #204	; (adr r3, 801b5b8 <__kernel_cos+0x168>)
 801b4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4ee:	f7e4 fecd 	bl	800028c <__adddf3>
 801b4f2:	4622      	mov	r2, r4
 801b4f4:	462b      	mov	r3, r5
 801b4f6:	f7e5 f87f 	bl	80005f8 <__aeabi_dmul>
 801b4fa:	4622      	mov	r2, r4
 801b4fc:	462b      	mov	r3, r5
 801b4fe:	f7e5 f87b 	bl	80005f8 <__aeabi_dmul>
 801b502:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b506:	4604      	mov	r4, r0
 801b508:	460d      	mov	r5, r1
 801b50a:	4630      	mov	r0, r6
 801b50c:	4639      	mov	r1, r7
 801b50e:	f7e5 f873 	bl	80005f8 <__aeabi_dmul>
 801b512:	460b      	mov	r3, r1
 801b514:	4602      	mov	r2, r0
 801b516:	4629      	mov	r1, r5
 801b518:	4620      	mov	r0, r4
 801b51a:	f7e4 feb5 	bl	8000288 <__aeabi_dsub>
 801b51e:	4b2b      	ldr	r3, [pc, #172]	; (801b5cc <__kernel_cos+0x17c>)
 801b520:	4598      	cmp	r8, r3
 801b522:	4606      	mov	r6, r0
 801b524:	460f      	mov	r7, r1
 801b526:	dc10      	bgt.n	801b54a <__kernel_cos+0xfa>
 801b528:	4602      	mov	r2, r0
 801b52a:	460b      	mov	r3, r1
 801b52c:	4650      	mov	r0, sl
 801b52e:	4659      	mov	r1, fp
 801b530:	f7e4 feaa 	bl	8000288 <__aeabi_dsub>
 801b534:	460b      	mov	r3, r1
 801b536:	4926      	ldr	r1, [pc, #152]	; (801b5d0 <__kernel_cos+0x180>)
 801b538:	4602      	mov	r2, r0
 801b53a:	2000      	movs	r0, #0
 801b53c:	f7e4 fea4 	bl	8000288 <__aeabi_dsub>
 801b540:	ec41 0b10 	vmov	d0, r0, r1
 801b544:	b003      	add	sp, #12
 801b546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b54a:	4b22      	ldr	r3, [pc, #136]	; (801b5d4 <__kernel_cos+0x184>)
 801b54c:	4920      	ldr	r1, [pc, #128]	; (801b5d0 <__kernel_cos+0x180>)
 801b54e:	4598      	cmp	r8, r3
 801b550:	bfcc      	ite	gt
 801b552:	4d21      	ldrgt	r5, [pc, #132]	; (801b5d8 <__kernel_cos+0x188>)
 801b554:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801b558:	2400      	movs	r4, #0
 801b55a:	4622      	mov	r2, r4
 801b55c:	462b      	mov	r3, r5
 801b55e:	2000      	movs	r0, #0
 801b560:	f7e4 fe92 	bl	8000288 <__aeabi_dsub>
 801b564:	4622      	mov	r2, r4
 801b566:	4680      	mov	r8, r0
 801b568:	4689      	mov	r9, r1
 801b56a:	462b      	mov	r3, r5
 801b56c:	4650      	mov	r0, sl
 801b56e:	4659      	mov	r1, fp
 801b570:	f7e4 fe8a 	bl	8000288 <__aeabi_dsub>
 801b574:	4632      	mov	r2, r6
 801b576:	463b      	mov	r3, r7
 801b578:	f7e4 fe86 	bl	8000288 <__aeabi_dsub>
 801b57c:	4602      	mov	r2, r0
 801b57e:	460b      	mov	r3, r1
 801b580:	4640      	mov	r0, r8
 801b582:	4649      	mov	r1, r9
 801b584:	e7da      	b.n	801b53c <__kernel_cos+0xec>
 801b586:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801b5c0 <__kernel_cos+0x170>
 801b58a:	e7db      	b.n	801b544 <__kernel_cos+0xf4>
 801b58c:	f3af 8000 	nop.w
 801b590:	be8838d4 	.word	0xbe8838d4
 801b594:	bda8fae9 	.word	0xbda8fae9
 801b598:	bdb4b1c4 	.word	0xbdb4b1c4
 801b59c:	3e21ee9e 	.word	0x3e21ee9e
 801b5a0:	809c52ad 	.word	0x809c52ad
 801b5a4:	3e927e4f 	.word	0x3e927e4f
 801b5a8:	19cb1590 	.word	0x19cb1590
 801b5ac:	3efa01a0 	.word	0x3efa01a0
 801b5b0:	16c15177 	.word	0x16c15177
 801b5b4:	3f56c16c 	.word	0x3f56c16c
 801b5b8:	5555554c 	.word	0x5555554c
 801b5bc:	3fa55555 	.word	0x3fa55555
 801b5c0:	00000000 	.word	0x00000000
 801b5c4:	3ff00000 	.word	0x3ff00000
 801b5c8:	3fe00000 	.word	0x3fe00000
 801b5cc:	3fd33332 	.word	0x3fd33332
 801b5d0:	3ff00000 	.word	0x3ff00000
 801b5d4:	3fe90000 	.word	0x3fe90000
 801b5d8:	3fd20000 	.word	0x3fd20000
 801b5dc:	00000000 	.word	0x00000000

0801b5e0 <__kernel_rem_pio2>:
 801b5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5e4:	ed2d 8b02 	vpush	{d8}
 801b5e8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801b5ec:	f112 0f14 	cmn.w	r2, #20
 801b5f0:	9308      	str	r3, [sp, #32]
 801b5f2:	9101      	str	r1, [sp, #4]
 801b5f4:	4bc6      	ldr	r3, [pc, #792]	; (801b910 <__kernel_rem_pio2+0x330>)
 801b5f6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801b5f8:	9009      	str	r0, [sp, #36]	; 0x24
 801b5fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b5fe:	9304      	str	r3, [sp, #16]
 801b600:	9b08      	ldr	r3, [sp, #32]
 801b602:	f103 33ff 	add.w	r3, r3, #4294967295
 801b606:	bfa8      	it	ge
 801b608:	1ed4      	subge	r4, r2, #3
 801b60a:	9306      	str	r3, [sp, #24]
 801b60c:	bfb2      	itee	lt
 801b60e:	2400      	movlt	r4, #0
 801b610:	2318      	movge	r3, #24
 801b612:	fb94 f4f3 	sdivge	r4, r4, r3
 801b616:	f06f 0317 	mvn.w	r3, #23
 801b61a:	fb04 3303 	mla	r3, r4, r3, r3
 801b61e:	eb03 0a02 	add.w	sl, r3, r2
 801b622:	9b04      	ldr	r3, [sp, #16]
 801b624:	9a06      	ldr	r2, [sp, #24]
 801b626:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801b900 <__kernel_rem_pio2+0x320>
 801b62a:	eb03 0802 	add.w	r8, r3, r2
 801b62e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801b630:	1aa7      	subs	r7, r4, r2
 801b632:	ae20      	add	r6, sp, #128	; 0x80
 801b634:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801b638:	2500      	movs	r5, #0
 801b63a:	4545      	cmp	r5, r8
 801b63c:	dd18      	ble.n	801b670 <__kernel_rem_pio2+0x90>
 801b63e:	9b08      	ldr	r3, [sp, #32]
 801b640:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801b644:	aa20      	add	r2, sp, #128	; 0x80
 801b646:	ed9f 8bae 	vldr	d8, [pc, #696]	; 801b900 <__kernel_rem_pio2+0x320>
 801b64a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801b64e:	f1c3 0301 	rsb	r3, r3, #1
 801b652:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801b656:	9307      	str	r3, [sp, #28]
 801b658:	9b07      	ldr	r3, [sp, #28]
 801b65a:	9a04      	ldr	r2, [sp, #16]
 801b65c:	4443      	add	r3, r8
 801b65e:	429a      	cmp	r2, r3
 801b660:	db2f      	blt.n	801b6c2 <__kernel_rem_pio2+0xe2>
 801b662:	ed8d 8b02 	vstr	d8, [sp, #8]
 801b666:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b66a:	462f      	mov	r7, r5
 801b66c:	2600      	movs	r6, #0
 801b66e:	e01b      	b.n	801b6a8 <__kernel_rem_pio2+0xc8>
 801b670:	42ef      	cmn	r7, r5
 801b672:	d407      	bmi.n	801b684 <__kernel_rem_pio2+0xa4>
 801b674:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801b678:	f7e4 ff54 	bl	8000524 <__aeabi_i2d>
 801b67c:	e8e6 0102 	strd	r0, r1, [r6], #8
 801b680:	3501      	adds	r5, #1
 801b682:	e7da      	b.n	801b63a <__kernel_rem_pio2+0x5a>
 801b684:	ec51 0b18 	vmov	r0, r1, d8
 801b688:	e7f8      	b.n	801b67c <__kernel_rem_pio2+0x9c>
 801b68a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b68e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801b692:	f7e4 ffb1 	bl	80005f8 <__aeabi_dmul>
 801b696:	4602      	mov	r2, r0
 801b698:	460b      	mov	r3, r1
 801b69a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b69e:	f7e4 fdf5 	bl	800028c <__adddf3>
 801b6a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b6a6:	3601      	adds	r6, #1
 801b6a8:	9b06      	ldr	r3, [sp, #24]
 801b6aa:	429e      	cmp	r6, r3
 801b6ac:	f1a7 0708 	sub.w	r7, r7, #8
 801b6b0:	ddeb      	ble.n	801b68a <__kernel_rem_pio2+0xaa>
 801b6b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b6b6:	3508      	adds	r5, #8
 801b6b8:	ecab 7b02 	vstmia	fp!, {d7}
 801b6bc:	f108 0801 	add.w	r8, r8, #1
 801b6c0:	e7ca      	b.n	801b658 <__kernel_rem_pio2+0x78>
 801b6c2:	9b04      	ldr	r3, [sp, #16]
 801b6c4:	aa0c      	add	r2, sp, #48	; 0x30
 801b6c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b6ca:	930b      	str	r3, [sp, #44]	; 0x2c
 801b6cc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801b6ce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801b6d2:	9c04      	ldr	r4, [sp, #16]
 801b6d4:	930a      	str	r3, [sp, #40]	; 0x28
 801b6d6:	ab98      	add	r3, sp, #608	; 0x260
 801b6d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b6dc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801b6e0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 801b6e4:	f8cd b008 	str.w	fp, [sp, #8]
 801b6e8:	4625      	mov	r5, r4
 801b6ea:	2d00      	cmp	r5, #0
 801b6ec:	dc78      	bgt.n	801b7e0 <__kernel_rem_pio2+0x200>
 801b6ee:	ec47 6b10 	vmov	d0, r6, r7
 801b6f2:	4650      	mov	r0, sl
 801b6f4:	f000 fda0 	bl	801c238 <scalbn>
 801b6f8:	ec57 6b10 	vmov	r6, r7, d0
 801b6fc:	2200      	movs	r2, #0
 801b6fe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801b702:	ee10 0a10 	vmov	r0, s0
 801b706:	4639      	mov	r1, r7
 801b708:	f7e4 ff76 	bl	80005f8 <__aeabi_dmul>
 801b70c:	ec41 0b10 	vmov	d0, r0, r1
 801b710:	f000 fd12 	bl	801c138 <floor>
 801b714:	4b7f      	ldr	r3, [pc, #508]	; (801b914 <__kernel_rem_pio2+0x334>)
 801b716:	ec51 0b10 	vmov	r0, r1, d0
 801b71a:	2200      	movs	r2, #0
 801b71c:	f7e4 ff6c 	bl	80005f8 <__aeabi_dmul>
 801b720:	4602      	mov	r2, r0
 801b722:	460b      	mov	r3, r1
 801b724:	4630      	mov	r0, r6
 801b726:	4639      	mov	r1, r7
 801b728:	f7e4 fdae 	bl	8000288 <__aeabi_dsub>
 801b72c:	460f      	mov	r7, r1
 801b72e:	4606      	mov	r6, r0
 801b730:	f7e5 fa12 	bl	8000b58 <__aeabi_d2iz>
 801b734:	9007      	str	r0, [sp, #28]
 801b736:	f7e4 fef5 	bl	8000524 <__aeabi_i2d>
 801b73a:	4602      	mov	r2, r0
 801b73c:	460b      	mov	r3, r1
 801b73e:	4630      	mov	r0, r6
 801b740:	4639      	mov	r1, r7
 801b742:	f7e4 fda1 	bl	8000288 <__aeabi_dsub>
 801b746:	f1ba 0f00 	cmp.w	sl, #0
 801b74a:	4606      	mov	r6, r0
 801b74c:	460f      	mov	r7, r1
 801b74e:	dd70      	ble.n	801b832 <__kernel_rem_pio2+0x252>
 801b750:	1e62      	subs	r2, r4, #1
 801b752:	ab0c      	add	r3, sp, #48	; 0x30
 801b754:	9d07      	ldr	r5, [sp, #28]
 801b756:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b75a:	f1ca 0118 	rsb	r1, sl, #24
 801b75e:	fa40 f301 	asr.w	r3, r0, r1
 801b762:	441d      	add	r5, r3
 801b764:	408b      	lsls	r3, r1
 801b766:	1ac0      	subs	r0, r0, r3
 801b768:	ab0c      	add	r3, sp, #48	; 0x30
 801b76a:	9507      	str	r5, [sp, #28]
 801b76c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801b770:	f1ca 0317 	rsb	r3, sl, #23
 801b774:	fa40 f303 	asr.w	r3, r0, r3
 801b778:	9302      	str	r3, [sp, #8]
 801b77a:	9b02      	ldr	r3, [sp, #8]
 801b77c:	2b00      	cmp	r3, #0
 801b77e:	dd66      	ble.n	801b84e <__kernel_rem_pio2+0x26e>
 801b780:	9b07      	ldr	r3, [sp, #28]
 801b782:	2200      	movs	r2, #0
 801b784:	3301      	adds	r3, #1
 801b786:	9307      	str	r3, [sp, #28]
 801b788:	4615      	mov	r5, r2
 801b78a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801b78e:	4294      	cmp	r4, r2
 801b790:	f300 8099 	bgt.w	801b8c6 <__kernel_rem_pio2+0x2e6>
 801b794:	f1ba 0f00 	cmp.w	sl, #0
 801b798:	dd07      	ble.n	801b7aa <__kernel_rem_pio2+0x1ca>
 801b79a:	f1ba 0f01 	cmp.w	sl, #1
 801b79e:	f000 80a5 	beq.w	801b8ec <__kernel_rem_pio2+0x30c>
 801b7a2:	f1ba 0f02 	cmp.w	sl, #2
 801b7a6:	f000 80c1 	beq.w	801b92c <__kernel_rem_pio2+0x34c>
 801b7aa:	9b02      	ldr	r3, [sp, #8]
 801b7ac:	2b02      	cmp	r3, #2
 801b7ae:	d14e      	bne.n	801b84e <__kernel_rem_pio2+0x26e>
 801b7b0:	4632      	mov	r2, r6
 801b7b2:	463b      	mov	r3, r7
 801b7b4:	4958      	ldr	r1, [pc, #352]	; (801b918 <__kernel_rem_pio2+0x338>)
 801b7b6:	2000      	movs	r0, #0
 801b7b8:	f7e4 fd66 	bl	8000288 <__aeabi_dsub>
 801b7bc:	4606      	mov	r6, r0
 801b7be:	460f      	mov	r7, r1
 801b7c0:	2d00      	cmp	r5, #0
 801b7c2:	d044      	beq.n	801b84e <__kernel_rem_pio2+0x26e>
 801b7c4:	4650      	mov	r0, sl
 801b7c6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801b908 <__kernel_rem_pio2+0x328>
 801b7ca:	f000 fd35 	bl	801c238 <scalbn>
 801b7ce:	4630      	mov	r0, r6
 801b7d0:	4639      	mov	r1, r7
 801b7d2:	ec53 2b10 	vmov	r2, r3, d0
 801b7d6:	f7e4 fd57 	bl	8000288 <__aeabi_dsub>
 801b7da:	4606      	mov	r6, r0
 801b7dc:	460f      	mov	r7, r1
 801b7de:	e036      	b.n	801b84e <__kernel_rem_pio2+0x26e>
 801b7e0:	4b4e      	ldr	r3, [pc, #312]	; (801b91c <__kernel_rem_pio2+0x33c>)
 801b7e2:	2200      	movs	r2, #0
 801b7e4:	4630      	mov	r0, r6
 801b7e6:	4639      	mov	r1, r7
 801b7e8:	f7e4 ff06 	bl	80005f8 <__aeabi_dmul>
 801b7ec:	f7e5 f9b4 	bl	8000b58 <__aeabi_d2iz>
 801b7f0:	f7e4 fe98 	bl	8000524 <__aeabi_i2d>
 801b7f4:	4b4a      	ldr	r3, [pc, #296]	; (801b920 <__kernel_rem_pio2+0x340>)
 801b7f6:	2200      	movs	r2, #0
 801b7f8:	4680      	mov	r8, r0
 801b7fa:	4689      	mov	r9, r1
 801b7fc:	f7e4 fefc 	bl	80005f8 <__aeabi_dmul>
 801b800:	4602      	mov	r2, r0
 801b802:	460b      	mov	r3, r1
 801b804:	4630      	mov	r0, r6
 801b806:	4639      	mov	r1, r7
 801b808:	f7e4 fd3e 	bl	8000288 <__aeabi_dsub>
 801b80c:	f7e5 f9a4 	bl	8000b58 <__aeabi_d2iz>
 801b810:	9b02      	ldr	r3, [sp, #8]
 801b812:	f843 0b04 	str.w	r0, [r3], #4
 801b816:	3d01      	subs	r5, #1
 801b818:	9302      	str	r3, [sp, #8]
 801b81a:	ab70      	add	r3, sp, #448	; 0x1c0
 801b81c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b820:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b824:	4640      	mov	r0, r8
 801b826:	4649      	mov	r1, r9
 801b828:	f7e4 fd30 	bl	800028c <__adddf3>
 801b82c:	4606      	mov	r6, r0
 801b82e:	460f      	mov	r7, r1
 801b830:	e75b      	b.n	801b6ea <__kernel_rem_pio2+0x10a>
 801b832:	d105      	bne.n	801b840 <__kernel_rem_pio2+0x260>
 801b834:	1e63      	subs	r3, r4, #1
 801b836:	aa0c      	add	r2, sp, #48	; 0x30
 801b838:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b83c:	15c3      	asrs	r3, r0, #23
 801b83e:	e79b      	b.n	801b778 <__kernel_rem_pio2+0x198>
 801b840:	4b38      	ldr	r3, [pc, #224]	; (801b924 <__kernel_rem_pio2+0x344>)
 801b842:	2200      	movs	r2, #0
 801b844:	f7e5 f95e 	bl	8000b04 <__aeabi_dcmpge>
 801b848:	2800      	cmp	r0, #0
 801b84a:	d139      	bne.n	801b8c0 <__kernel_rem_pio2+0x2e0>
 801b84c:	9002      	str	r0, [sp, #8]
 801b84e:	2200      	movs	r2, #0
 801b850:	2300      	movs	r3, #0
 801b852:	4630      	mov	r0, r6
 801b854:	4639      	mov	r1, r7
 801b856:	f7e5 f937 	bl	8000ac8 <__aeabi_dcmpeq>
 801b85a:	2800      	cmp	r0, #0
 801b85c:	f000 80b4 	beq.w	801b9c8 <__kernel_rem_pio2+0x3e8>
 801b860:	f104 3bff 	add.w	fp, r4, #4294967295
 801b864:	465b      	mov	r3, fp
 801b866:	2200      	movs	r2, #0
 801b868:	9904      	ldr	r1, [sp, #16]
 801b86a:	428b      	cmp	r3, r1
 801b86c:	da65      	bge.n	801b93a <__kernel_rem_pio2+0x35a>
 801b86e:	2a00      	cmp	r2, #0
 801b870:	d07b      	beq.n	801b96a <__kernel_rem_pio2+0x38a>
 801b872:	ab0c      	add	r3, sp, #48	; 0x30
 801b874:	f1aa 0a18 	sub.w	sl, sl, #24
 801b878:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	f000 80a0 	beq.w	801b9c2 <__kernel_rem_pio2+0x3e2>
 801b882:	ed9f 0b21 	vldr	d0, [pc, #132]	; 801b908 <__kernel_rem_pio2+0x328>
 801b886:	4650      	mov	r0, sl
 801b888:	f000 fcd6 	bl	801c238 <scalbn>
 801b88c:	4f23      	ldr	r7, [pc, #140]	; (801b91c <__kernel_rem_pio2+0x33c>)
 801b88e:	ec55 4b10 	vmov	r4, r5, d0
 801b892:	46d8      	mov	r8, fp
 801b894:	2600      	movs	r6, #0
 801b896:	f1b8 0f00 	cmp.w	r8, #0
 801b89a:	f280 80cf 	bge.w	801ba3c <__kernel_rem_pio2+0x45c>
 801b89e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 801b900 <__kernel_rem_pio2+0x320>
 801b8a2:	465f      	mov	r7, fp
 801b8a4:	f04f 0800 	mov.w	r8, #0
 801b8a8:	2f00      	cmp	r7, #0
 801b8aa:	f2c0 80fd 	blt.w	801baa8 <__kernel_rem_pio2+0x4c8>
 801b8ae:	ab70      	add	r3, sp, #448	; 0x1c0
 801b8b0:	f8df a074 	ldr.w	sl, [pc, #116]	; 801b928 <__kernel_rem_pio2+0x348>
 801b8b4:	ec55 4b18 	vmov	r4, r5, d8
 801b8b8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801b8bc:	2600      	movs	r6, #0
 801b8be:	e0e5      	b.n	801ba8c <__kernel_rem_pio2+0x4ac>
 801b8c0:	2302      	movs	r3, #2
 801b8c2:	9302      	str	r3, [sp, #8]
 801b8c4:	e75c      	b.n	801b780 <__kernel_rem_pio2+0x1a0>
 801b8c6:	f8db 3000 	ldr.w	r3, [fp]
 801b8ca:	b955      	cbnz	r5, 801b8e2 <__kernel_rem_pio2+0x302>
 801b8cc:	b123      	cbz	r3, 801b8d8 <__kernel_rem_pio2+0x2f8>
 801b8ce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801b8d2:	f8cb 3000 	str.w	r3, [fp]
 801b8d6:	2301      	movs	r3, #1
 801b8d8:	3201      	adds	r2, #1
 801b8da:	f10b 0b04 	add.w	fp, fp, #4
 801b8de:	461d      	mov	r5, r3
 801b8e0:	e755      	b.n	801b78e <__kernel_rem_pio2+0x1ae>
 801b8e2:	1acb      	subs	r3, r1, r3
 801b8e4:	f8cb 3000 	str.w	r3, [fp]
 801b8e8:	462b      	mov	r3, r5
 801b8ea:	e7f5      	b.n	801b8d8 <__kernel_rem_pio2+0x2f8>
 801b8ec:	1e62      	subs	r2, r4, #1
 801b8ee:	ab0c      	add	r3, sp, #48	; 0x30
 801b8f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b8f4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801b8f8:	a90c      	add	r1, sp, #48	; 0x30
 801b8fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801b8fe:	e754      	b.n	801b7aa <__kernel_rem_pio2+0x1ca>
	...
 801b90c:	3ff00000 	.word	0x3ff00000
 801b910:	0801cce8 	.word	0x0801cce8
 801b914:	40200000 	.word	0x40200000
 801b918:	3ff00000 	.word	0x3ff00000
 801b91c:	3e700000 	.word	0x3e700000
 801b920:	41700000 	.word	0x41700000
 801b924:	3fe00000 	.word	0x3fe00000
 801b928:	0801cca8 	.word	0x0801cca8
 801b92c:	1e62      	subs	r2, r4, #1
 801b92e:	ab0c      	add	r3, sp, #48	; 0x30
 801b930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b934:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801b938:	e7de      	b.n	801b8f8 <__kernel_rem_pio2+0x318>
 801b93a:	a90c      	add	r1, sp, #48	; 0x30
 801b93c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801b940:	3b01      	subs	r3, #1
 801b942:	430a      	orrs	r2, r1
 801b944:	e790      	b.n	801b868 <__kernel_rem_pio2+0x288>
 801b946:	3301      	adds	r3, #1
 801b948:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801b94c:	2900      	cmp	r1, #0
 801b94e:	d0fa      	beq.n	801b946 <__kernel_rem_pio2+0x366>
 801b950:	9a08      	ldr	r2, [sp, #32]
 801b952:	18e3      	adds	r3, r4, r3
 801b954:	18a6      	adds	r6, r4, r2
 801b956:	aa20      	add	r2, sp, #128	; 0x80
 801b958:	1c65      	adds	r5, r4, #1
 801b95a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801b95e:	9302      	str	r3, [sp, #8]
 801b960:	9b02      	ldr	r3, [sp, #8]
 801b962:	42ab      	cmp	r3, r5
 801b964:	da04      	bge.n	801b970 <__kernel_rem_pio2+0x390>
 801b966:	461c      	mov	r4, r3
 801b968:	e6b5      	b.n	801b6d6 <__kernel_rem_pio2+0xf6>
 801b96a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b96c:	2301      	movs	r3, #1
 801b96e:	e7eb      	b.n	801b948 <__kernel_rem_pio2+0x368>
 801b970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b972:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b976:	f7e4 fdd5 	bl	8000524 <__aeabi_i2d>
 801b97a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801b97e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b980:	46b3      	mov	fp, r6
 801b982:	461c      	mov	r4, r3
 801b984:	2700      	movs	r7, #0
 801b986:	f04f 0800 	mov.w	r8, #0
 801b98a:	f04f 0900 	mov.w	r9, #0
 801b98e:	9b06      	ldr	r3, [sp, #24]
 801b990:	429f      	cmp	r7, r3
 801b992:	dd06      	ble.n	801b9a2 <__kernel_rem_pio2+0x3c2>
 801b994:	ab70      	add	r3, sp, #448	; 0x1c0
 801b996:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b99a:	e9c3 8900 	strd	r8, r9, [r3]
 801b99e:	3501      	adds	r5, #1
 801b9a0:	e7de      	b.n	801b960 <__kernel_rem_pio2+0x380>
 801b9a2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801b9a6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801b9aa:	f7e4 fe25 	bl	80005f8 <__aeabi_dmul>
 801b9ae:	4602      	mov	r2, r0
 801b9b0:	460b      	mov	r3, r1
 801b9b2:	4640      	mov	r0, r8
 801b9b4:	4649      	mov	r1, r9
 801b9b6:	f7e4 fc69 	bl	800028c <__adddf3>
 801b9ba:	3701      	adds	r7, #1
 801b9bc:	4680      	mov	r8, r0
 801b9be:	4689      	mov	r9, r1
 801b9c0:	e7e5      	b.n	801b98e <__kernel_rem_pio2+0x3ae>
 801b9c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b9c6:	e754      	b.n	801b872 <__kernel_rem_pio2+0x292>
 801b9c8:	ec47 6b10 	vmov	d0, r6, r7
 801b9cc:	f1ca 0000 	rsb	r0, sl, #0
 801b9d0:	f000 fc32 	bl	801c238 <scalbn>
 801b9d4:	ec57 6b10 	vmov	r6, r7, d0
 801b9d8:	4b9f      	ldr	r3, [pc, #636]	; (801bc58 <__kernel_rem_pio2+0x678>)
 801b9da:	ee10 0a10 	vmov	r0, s0
 801b9de:	2200      	movs	r2, #0
 801b9e0:	4639      	mov	r1, r7
 801b9e2:	f7e5 f88f 	bl	8000b04 <__aeabi_dcmpge>
 801b9e6:	b300      	cbz	r0, 801ba2a <__kernel_rem_pio2+0x44a>
 801b9e8:	4b9c      	ldr	r3, [pc, #624]	; (801bc5c <__kernel_rem_pio2+0x67c>)
 801b9ea:	2200      	movs	r2, #0
 801b9ec:	4630      	mov	r0, r6
 801b9ee:	4639      	mov	r1, r7
 801b9f0:	f7e4 fe02 	bl	80005f8 <__aeabi_dmul>
 801b9f4:	f7e5 f8b0 	bl	8000b58 <__aeabi_d2iz>
 801b9f8:	4605      	mov	r5, r0
 801b9fa:	f7e4 fd93 	bl	8000524 <__aeabi_i2d>
 801b9fe:	4b96      	ldr	r3, [pc, #600]	; (801bc58 <__kernel_rem_pio2+0x678>)
 801ba00:	2200      	movs	r2, #0
 801ba02:	f7e4 fdf9 	bl	80005f8 <__aeabi_dmul>
 801ba06:	460b      	mov	r3, r1
 801ba08:	4602      	mov	r2, r0
 801ba0a:	4639      	mov	r1, r7
 801ba0c:	4630      	mov	r0, r6
 801ba0e:	f7e4 fc3b 	bl	8000288 <__aeabi_dsub>
 801ba12:	f7e5 f8a1 	bl	8000b58 <__aeabi_d2iz>
 801ba16:	f104 0b01 	add.w	fp, r4, #1
 801ba1a:	ab0c      	add	r3, sp, #48	; 0x30
 801ba1c:	f10a 0a18 	add.w	sl, sl, #24
 801ba20:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801ba24:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 801ba28:	e72b      	b.n	801b882 <__kernel_rem_pio2+0x2a2>
 801ba2a:	4630      	mov	r0, r6
 801ba2c:	4639      	mov	r1, r7
 801ba2e:	f7e5 f893 	bl	8000b58 <__aeabi_d2iz>
 801ba32:	ab0c      	add	r3, sp, #48	; 0x30
 801ba34:	46a3      	mov	fp, r4
 801ba36:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801ba3a:	e722      	b.n	801b882 <__kernel_rem_pio2+0x2a2>
 801ba3c:	ab70      	add	r3, sp, #448	; 0x1c0
 801ba3e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 801ba42:	ab0c      	add	r3, sp, #48	; 0x30
 801ba44:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801ba48:	f7e4 fd6c 	bl	8000524 <__aeabi_i2d>
 801ba4c:	4622      	mov	r2, r4
 801ba4e:	462b      	mov	r3, r5
 801ba50:	f7e4 fdd2 	bl	80005f8 <__aeabi_dmul>
 801ba54:	4632      	mov	r2, r6
 801ba56:	e9c9 0100 	strd	r0, r1, [r9]
 801ba5a:	463b      	mov	r3, r7
 801ba5c:	4620      	mov	r0, r4
 801ba5e:	4629      	mov	r1, r5
 801ba60:	f7e4 fdca 	bl	80005f8 <__aeabi_dmul>
 801ba64:	f108 38ff 	add.w	r8, r8, #4294967295
 801ba68:	4604      	mov	r4, r0
 801ba6a:	460d      	mov	r5, r1
 801ba6c:	e713      	b.n	801b896 <__kernel_rem_pio2+0x2b6>
 801ba6e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801ba72:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801ba76:	f7e4 fdbf 	bl	80005f8 <__aeabi_dmul>
 801ba7a:	4602      	mov	r2, r0
 801ba7c:	460b      	mov	r3, r1
 801ba7e:	4620      	mov	r0, r4
 801ba80:	4629      	mov	r1, r5
 801ba82:	f7e4 fc03 	bl	800028c <__adddf3>
 801ba86:	3601      	adds	r6, #1
 801ba88:	4604      	mov	r4, r0
 801ba8a:	460d      	mov	r5, r1
 801ba8c:	9b04      	ldr	r3, [sp, #16]
 801ba8e:	429e      	cmp	r6, r3
 801ba90:	dc01      	bgt.n	801ba96 <__kernel_rem_pio2+0x4b6>
 801ba92:	45b0      	cmp	r8, r6
 801ba94:	daeb      	bge.n	801ba6e <__kernel_rem_pio2+0x48e>
 801ba96:	ab48      	add	r3, sp, #288	; 0x120
 801ba98:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801ba9c:	e9c3 4500 	strd	r4, r5, [r3]
 801baa0:	3f01      	subs	r7, #1
 801baa2:	f108 0801 	add.w	r8, r8, #1
 801baa6:	e6ff      	b.n	801b8a8 <__kernel_rem_pio2+0x2c8>
 801baa8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801baaa:	2b02      	cmp	r3, #2
 801baac:	dc0b      	bgt.n	801bac6 <__kernel_rem_pio2+0x4e6>
 801baae:	2b00      	cmp	r3, #0
 801bab0:	dc6e      	bgt.n	801bb90 <__kernel_rem_pio2+0x5b0>
 801bab2:	d045      	beq.n	801bb40 <__kernel_rem_pio2+0x560>
 801bab4:	9b07      	ldr	r3, [sp, #28]
 801bab6:	f003 0007 	and.w	r0, r3, #7
 801baba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801babe:	ecbd 8b02 	vpop	{d8}
 801bac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bac6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801bac8:	2b03      	cmp	r3, #3
 801baca:	d1f3      	bne.n	801bab4 <__kernel_rem_pio2+0x4d4>
 801bacc:	ab48      	add	r3, sp, #288	; 0x120
 801bace:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 801bad2:	46d0      	mov	r8, sl
 801bad4:	46d9      	mov	r9, fp
 801bad6:	f1b9 0f00 	cmp.w	r9, #0
 801bada:	f1a8 0808 	sub.w	r8, r8, #8
 801bade:	dc64      	bgt.n	801bbaa <__kernel_rem_pio2+0x5ca>
 801bae0:	465c      	mov	r4, fp
 801bae2:	2c01      	cmp	r4, #1
 801bae4:	f1aa 0a08 	sub.w	sl, sl, #8
 801bae8:	dc7e      	bgt.n	801bbe8 <__kernel_rem_pio2+0x608>
 801baea:	2000      	movs	r0, #0
 801baec:	2100      	movs	r1, #0
 801baee:	f1bb 0f01 	cmp.w	fp, #1
 801baf2:	f300 8097 	bgt.w	801bc24 <__kernel_rem_pio2+0x644>
 801baf6:	9b02      	ldr	r3, [sp, #8]
 801baf8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801bafc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801bb00:	2b00      	cmp	r3, #0
 801bb02:	f040 8099 	bne.w	801bc38 <__kernel_rem_pio2+0x658>
 801bb06:	9b01      	ldr	r3, [sp, #4]
 801bb08:	e9c3 5600 	strd	r5, r6, [r3]
 801bb0c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801bb10:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801bb14:	e7ce      	b.n	801bab4 <__kernel_rem_pio2+0x4d4>
 801bb16:	ab48      	add	r3, sp, #288	; 0x120
 801bb18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801bb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb20:	f7e4 fbb4 	bl	800028c <__adddf3>
 801bb24:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bb28:	f1bb 0f00 	cmp.w	fp, #0
 801bb2c:	daf3      	bge.n	801bb16 <__kernel_rem_pio2+0x536>
 801bb2e:	9b02      	ldr	r3, [sp, #8]
 801bb30:	b113      	cbz	r3, 801bb38 <__kernel_rem_pio2+0x558>
 801bb32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bb36:	4619      	mov	r1, r3
 801bb38:	9b01      	ldr	r3, [sp, #4]
 801bb3a:	e9c3 0100 	strd	r0, r1, [r3]
 801bb3e:	e7b9      	b.n	801bab4 <__kernel_rem_pio2+0x4d4>
 801bb40:	2000      	movs	r0, #0
 801bb42:	2100      	movs	r1, #0
 801bb44:	e7f0      	b.n	801bb28 <__kernel_rem_pio2+0x548>
 801bb46:	ab48      	add	r3, sp, #288	; 0x120
 801bb48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb50:	f7e4 fb9c 	bl	800028c <__adddf3>
 801bb54:	3c01      	subs	r4, #1
 801bb56:	2c00      	cmp	r4, #0
 801bb58:	daf5      	bge.n	801bb46 <__kernel_rem_pio2+0x566>
 801bb5a:	9b02      	ldr	r3, [sp, #8]
 801bb5c:	b1e3      	cbz	r3, 801bb98 <__kernel_rem_pio2+0x5b8>
 801bb5e:	4602      	mov	r2, r0
 801bb60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bb64:	9c01      	ldr	r4, [sp, #4]
 801bb66:	e9c4 2300 	strd	r2, r3, [r4]
 801bb6a:	4602      	mov	r2, r0
 801bb6c:	460b      	mov	r3, r1
 801bb6e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801bb72:	f7e4 fb89 	bl	8000288 <__aeabi_dsub>
 801bb76:	ad4a      	add	r5, sp, #296	; 0x128
 801bb78:	2401      	movs	r4, #1
 801bb7a:	45a3      	cmp	fp, r4
 801bb7c:	da0f      	bge.n	801bb9e <__kernel_rem_pio2+0x5be>
 801bb7e:	9b02      	ldr	r3, [sp, #8]
 801bb80:	b113      	cbz	r3, 801bb88 <__kernel_rem_pio2+0x5a8>
 801bb82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bb86:	4619      	mov	r1, r3
 801bb88:	9b01      	ldr	r3, [sp, #4]
 801bb8a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801bb8e:	e791      	b.n	801bab4 <__kernel_rem_pio2+0x4d4>
 801bb90:	465c      	mov	r4, fp
 801bb92:	2000      	movs	r0, #0
 801bb94:	2100      	movs	r1, #0
 801bb96:	e7de      	b.n	801bb56 <__kernel_rem_pio2+0x576>
 801bb98:	4602      	mov	r2, r0
 801bb9a:	460b      	mov	r3, r1
 801bb9c:	e7e2      	b.n	801bb64 <__kernel_rem_pio2+0x584>
 801bb9e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801bba2:	f7e4 fb73 	bl	800028c <__adddf3>
 801bba6:	3401      	adds	r4, #1
 801bba8:	e7e7      	b.n	801bb7a <__kernel_rem_pio2+0x59a>
 801bbaa:	e9d8 4500 	ldrd	r4, r5, [r8]
 801bbae:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 801bbb2:	4620      	mov	r0, r4
 801bbb4:	4632      	mov	r2, r6
 801bbb6:	463b      	mov	r3, r7
 801bbb8:	4629      	mov	r1, r5
 801bbba:	f7e4 fb67 	bl	800028c <__adddf3>
 801bbbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bbc2:	4602      	mov	r2, r0
 801bbc4:	460b      	mov	r3, r1
 801bbc6:	4620      	mov	r0, r4
 801bbc8:	4629      	mov	r1, r5
 801bbca:	f7e4 fb5d 	bl	8000288 <__aeabi_dsub>
 801bbce:	4632      	mov	r2, r6
 801bbd0:	463b      	mov	r3, r7
 801bbd2:	f7e4 fb5b 	bl	800028c <__adddf3>
 801bbd6:	ed9d 7b04 	vldr	d7, [sp, #16]
 801bbda:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801bbde:	ed88 7b00 	vstr	d7, [r8]
 801bbe2:	f109 39ff 	add.w	r9, r9, #4294967295
 801bbe6:	e776      	b.n	801bad6 <__kernel_rem_pio2+0x4f6>
 801bbe8:	e9da 8900 	ldrd	r8, r9, [sl]
 801bbec:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801bbf0:	4640      	mov	r0, r8
 801bbf2:	4632      	mov	r2, r6
 801bbf4:	463b      	mov	r3, r7
 801bbf6:	4649      	mov	r1, r9
 801bbf8:	f7e4 fb48 	bl	800028c <__adddf3>
 801bbfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bc00:	4602      	mov	r2, r0
 801bc02:	460b      	mov	r3, r1
 801bc04:	4640      	mov	r0, r8
 801bc06:	4649      	mov	r1, r9
 801bc08:	f7e4 fb3e 	bl	8000288 <__aeabi_dsub>
 801bc0c:	4632      	mov	r2, r6
 801bc0e:	463b      	mov	r3, r7
 801bc10:	f7e4 fb3c 	bl	800028c <__adddf3>
 801bc14:	ed9d 7b04 	vldr	d7, [sp, #16]
 801bc18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801bc1c:	ed8a 7b00 	vstr	d7, [sl]
 801bc20:	3c01      	subs	r4, #1
 801bc22:	e75e      	b.n	801bae2 <__kernel_rem_pio2+0x502>
 801bc24:	ab48      	add	r3, sp, #288	; 0x120
 801bc26:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801bc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc2e:	f7e4 fb2d 	bl	800028c <__adddf3>
 801bc32:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bc36:	e75a      	b.n	801baee <__kernel_rem_pio2+0x50e>
 801bc38:	9b01      	ldr	r3, [sp, #4]
 801bc3a:	9a01      	ldr	r2, [sp, #4]
 801bc3c:	601d      	str	r5, [r3, #0]
 801bc3e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801bc42:	605c      	str	r4, [r3, #4]
 801bc44:	609f      	str	r7, [r3, #8]
 801bc46:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801bc4a:	60d3      	str	r3, [r2, #12]
 801bc4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bc50:	6110      	str	r0, [r2, #16]
 801bc52:	6153      	str	r3, [r2, #20]
 801bc54:	e72e      	b.n	801bab4 <__kernel_rem_pio2+0x4d4>
 801bc56:	bf00      	nop
 801bc58:	41700000 	.word	0x41700000
 801bc5c:	3e700000 	.word	0x3e700000

0801bc60 <__kernel_sin>:
 801bc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc64:	ed2d 8b04 	vpush	{d8-d9}
 801bc68:	eeb0 8a41 	vmov.f32	s16, s2
 801bc6c:	eef0 8a61 	vmov.f32	s17, s3
 801bc70:	ec55 4b10 	vmov	r4, r5, d0
 801bc74:	b083      	sub	sp, #12
 801bc76:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801bc7a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801bc7e:	9001      	str	r0, [sp, #4]
 801bc80:	da06      	bge.n	801bc90 <__kernel_sin+0x30>
 801bc82:	ee10 0a10 	vmov	r0, s0
 801bc86:	4629      	mov	r1, r5
 801bc88:	f7e4 ff66 	bl	8000b58 <__aeabi_d2iz>
 801bc8c:	2800      	cmp	r0, #0
 801bc8e:	d051      	beq.n	801bd34 <__kernel_sin+0xd4>
 801bc90:	4622      	mov	r2, r4
 801bc92:	462b      	mov	r3, r5
 801bc94:	4620      	mov	r0, r4
 801bc96:	4629      	mov	r1, r5
 801bc98:	f7e4 fcae 	bl	80005f8 <__aeabi_dmul>
 801bc9c:	4682      	mov	sl, r0
 801bc9e:	468b      	mov	fp, r1
 801bca0:	4602      	mov	r2, r0
 801bca2:	460b      	mov	r3, r1
 801bca4:	4620      	mov	r0, r4
 801bca6:	4629      	mov	r1, r5
 801bca8:	f7e4 fca6 	bl	80005f8 <__aeabi_dmul>
 801bcac:	a341      	add	r3, pc, #260	; (adr r3, 801bdb4 <__kernel_sin+0x154>)
 801bcae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcb2:	4680      	mov	r8, r0
 801bcb4:	4689      	mov	r9, r1
 801bcb6:	4650      	mov	r0, sl
 801bcb8:	4659      	mov	r1, fp
 801bcba:	f7e4 fc9d 	bl	80005f8 <__aeabi_dmul>
 801bcbe:	a33f      	add	r3, pc, #252	; (adr r3, 801bdbc <__kernel_sin+0x15c>)
 801bcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcc4:	f7e4 fae0 	bl	8000288 <__aeabi_dsub>
 801bcc8:	4652      	mov	r2, sl
 801bcca:	465b      	mov	r3, fp
 801bccc:	f7e4 fc94 	bl	80005f8 <__aeabi_dmul>
 801bcd0:	a33c      	add	r3, pc, #240	; (adr r3, 801bdc4 <__kernel_sin+0x164>)
 801bcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcd6:	f7e4 fad9 	bl	800028c <__adddf3>
 801bcda:	4652      	mov	r2, sl
 801bcdc:	465b      	mov	r3, fp
 801bcde:	f7e4 fc8b 	bl	80005f8 <__aeabi_dmul>
 801bce2:	a33a      	add	r3, pc, #232	; (adr r3, 801bdcc <__kernel_sin+0x16c>)
 801bce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bce8:	f7e4 face 	bl	8000288 <__aeabi_dsub>
 801bcec:	4652      	mov	r2, sl
 801bcee:	465b      	mov	r3, fp
 801bcf0:	f7e4 fc82 	bl	80005f8 <__aeabi_dmul>
 801bcf4:	a337      	add	r3, pc, #220	; (adr r3, 801bdd4 <__kernel_sin+0x174>)
 801bcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcfa:	f7e4 fac7 	bl	800028c <__adddf3>
 801bcfe:	9b01      	ldr	r3, [sp, #4]
 801bd00:	4606      	mov	r6, r0
 801bd02:	460f      	mov	r7, r1
 801bd04:	b9eb      	cbnz	r3, 801bd42 <__kernel_sin+0xe2>
 801bd06:	4602      	mov	r2, r0
 801bd08:	460b      	mov	r3, r1
 801bd0a:	4650      	mov	r0, sl
 801bd0c:	4659      	mov	r1, fp
 801bd0e:	f7e4 fc73 	bl	80005f8 <__aeabi_dmul>
 801bd12:	a325      	add	r3, pc, #148	; (adr r3, 801bda8 <__kernel_sin+0x148>)
 801bd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd18:	f7e4 fab6 	bl	8000288 <__aeabi_dsub>
 801bd1c:	4642      	mov	r2, r8
 801bd1e:	464b      	mov	r3, r9
 801bd20:	f7e4 fc6a 	bl	80005f8 <__aeabi_dmul>
 801bd24:	4602      	mov	r2, r0
 801bd26:	460b      	mov	r3, r1
 801bd28:	4620      	mov	r0, r4
 801bd2a:	4629      	mov	r1, r5
 801bd2c:	f7e4 faae 	bl	800028c <__adddf3>
 801bd30:	4604      	mov	r4, r0
 801bd32:	460d      	mov	r5, r1
 801bd34:	ec45 4b10 	vmov	d0, r4, r5
 801bd38:	b003      	add	sp, #12
 801bd3a:	ecbd 8b04 	vpop	{d8-d9}
 801bd3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd42:	4b1b      	ldr	r3, [pc, #108]	; (801bdb0 <__kernel_sin+0x150>)
 801bd44:	ec51 0b18 	vmov	r0, r1, d8
 801bd48:	2200      	movs	r2, #0
 801bd4a:	f7e4 fc55 	bl	80005f8 <__aeabi_dmul>
 801bd4e:	4632      	mov	r2, r6
 801bd50:	ec41 0b19 	vmov	d9, r0, r1
 801bd54:	463b      	mov	r3, r7
 801bd56:	4640      	mov	r0, r8
 801bd58:	4649      	mov	r1, r9
 801bd5a:	f7e4 fc4d 	bl	80005f8 <__aeabi_dmul>
 801bd5e:	4602      	mov	r2, r0
 801bd60:	460b      	mov	r3, r1
 801bd62:	ec51 0b19 	vmov	r0, r1, d9
 801bd66:	f7e4 fa8f 	bl	8000288 <__aeabi_dsub>
 801bd6a:	4652      	mov	r2, sl
 801bd6c:	465b      	mov	r3, fp
 801bd6e:	f7e4 fc43 	bl	80005f8 <__aeabi_dmul>
 801bd72:	ec53 2b18 	vmov	r2, r3, d8
 801bd76:	f7e4 fa87 	bl	8000288 <__aeabi_dsub>
 801bd7a:	a30b      	add	r3, pc, #44	; (adr r3, 801bda8 <__kernel_sin+0x148>)
 801bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd80:	4606      	mov	r6, r0
 801bd82:	460f      	mov	r7, r1
 801bd84:	4640      	mov	r0, r8
 801bd86:	4649      	mov	r1, r9
 801bd88:	f7e4 fc36 	bl	80005f8 <__aeabi_dmul>
 801bd8c:	4602      	mov	r2, r0
 801bd8e:	460b      	mov	r3, r1
 801bd90:	4630      	mov	r0, r6
 801bd92:	4639      	mov	r1, r7
 801bd94:	f7e4 fa7a 	bl	800028c <__adddf3>
 801bd98:	4602      	mov	r2, r0
 801bd9a:	460b      	mov	r3, r1
 801bd9c:	4620      	mov	r0, r4
 801bd9e:	4629      	mov	r1, r5
 801bda0:	f7e4 fa72 	bl	8000288 <__aeabi_dsub>
 801bda4:	e7c4      	b.n	801bd30 <__kernel_sin+0xd0>
 801bda6:	bf00      	nop
 801bda8:	55555549 	.word	0x55555549
 801bdac:	3fc55555 	.word	0x3fc55555
 801bdb0:	3fe00000 	.word	0x3fe00000
 801bdb4:	5acfd57c 	.word	0x5acfd57c
 801bdb8:	3de5d93a 	.word	0x3de5d93a
 801bdbc:	8a2b9ceb 	.word	0x8a2b9ceb
 801bdc0:	3e5ae5e6 	.word	0x3e5ae5e6
 801bdc4:	57b1fe7d 	.word	0x57b1fe7d
 801bdc8:	3ec71de3 	.word	0x3ec71de3
 801bdcc:	19c161d5 	.word	0x19c161d5
 801bdd0:	3f2a01a0 	.word	0x3f2a01a0
 801bdd4:	1110f8a6 	.word	0x1110f8a6
 801bdd8:	3f811111 	.word	0x3f811111
 801bddc:	00000000 	.word	0x00000000

0801bde0 <atan>:
 801bde0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bde4:	ec55 4b10 	vmov	r4, r5, d0
 801bde8:	4bc3      	ldr	r3, [pc, #780]	; (801c0f8 <atan+0x318>)
 801bdea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801bdee:	429e      	cmp	r6, r3
 801bdf0:	46ab      	mov	fp, r5
 801bdf2:	dd18      	ble.n	801be26 <atan+0x46>
 801bdf4:	4bc1      	ldr	r3, [pc, #772]	; (801c0fc <atan+0x31c>)
 801bdf6:	429e      	cmp	r6, r3
 801bdf8:	dc01      	bgt.n	801bdfe <atan+0x1e>
 801bdfa:	d109      	bne.n	801be10 <atan+0x30>
 801bdfc:	b144      	cbz	r4, 801be10 <atan+0x30>
 801bdfe:	4622      	mov	r2, r4
 801be00:	462b      	mov	r3, r5
 801be02:	4620      	mov	r0, r4
 801be04:	4629      	mov	r1, r5
 801be06:	f7e4 fa41 	bl	800028c <__adddf3>
 801be0a:	4604      	mov	r4, r0
 801be0c:	460d      	mov	r5, r1
 801be0e:	e006      	b.n	801be1e <atan+0x3e>
 801be10:	f1bb 0f00 	cmp.w	fp, #0
 801be14:	f300 8131 	bgt.w	801c07a <atan+0x29a>
 801be18:	a59b      	add	r5, pc, #620	; (adr r5, 801c088 <atan+0x2a8>)
 801be1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801be1e:	ec45 4b10 	vmov	d0, r4, r5
 801be22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be26:	4bb6      	ldr	r3, [pc, #728]	; (801c100 <atan+0x320>)
 801be28:	429e      	cmp	r6, r3
 801be2a:	dc14      	bgt.n	801be56 <atan+0x76>
 801be2c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801be30:	429e      	cmp	r6, r3
 801be32:	dc0d      	bgt.n	801be50 <atan+0x70>
 801be34:	a396      	add	r3, pc, #600	; (adr r3, 801c090 <atan+0x2b0>)
 801be36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be3a:	ee10 0a10 	vmov	r0, s0
 801be3e:	4629      	mov	r1, r5
 801be40:	f7e4 fa24 	bl	800028c <__adddf3>
 801be44:	4baf      	ldr	r3, [pc, #700]	; (801c104 <atan+0x324>)
 801be46:	2200      	movs	r2, #0
 801be48:	f7e4 fe66 	bl	8000b18 <__aeabi_dcmpgt>
 801be4c:	2800      	cmp	r0, #0
 801be4e:	d1e6      	bne.n	801be1e <atan+0x3e>
 801be50:	f04f 3aff 	mov.w	sl, #4294967295
 801be54:	e02b      	b.n	801beae <atan+0xce>
 801be56:	f000 f963 	bl	801c120 <fabs>
 801be5a:	4bab      	ldr	r3, [pc, #684]	; (801c108 <atan+0x328>)
 801be5c:	429e      	cmp	r6, r3
 801be5e:	ec55 4b10 	vmov	r4, r5, d0
 801be62:	f300 80bf 	bgt.w	801bfe4 <atan+0x204>
 801be66:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801be6a:	429e      	cmp	r6, r3
 801be6c:	f300 80a0 	bgt.w	801bfb0 <atan+0x1d0>
 801be70:	ee10 2a10 	vmov	r2, s0
 801be74:	ee10 0a10 	vmov	r0, s0
 801be78:	462b      	mov	r3, r5
 801be7a:	4629      	mov	r1, r5
 801be7c:	f7e4 fa06 	bl	800028c <__adddf3>
 801be80:	4ba0      	ldr	r3, [pc, #640]	; (801c104 <atan+0x324>)
 801be82:	2200      	movs	r2, #0
 801be84:	f7e4 fa00 	bl	8000288 <__aeabi_dsub>
 801be88:	2200      	movs	r2, #0
 801be8a:	4606      	mov	r6, r0
 801be8c:	460f      	mov	r7, r1
 801be8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801be92:	4620      	mov	r0, r4
 801be94:	4629      	mov	r1, r5
 801be96:	f7e4 f9f9 	bl	800028c <__adddf3>
 801be9a:	4602      	mov	r2, r0
 801be9c:	460b      	mov	r3, r1
 801be9e:	4630      	mov	r0, r6
 801bea0:	4639      	mov	r1, r7
 801bea2:	f7e4 fcd3 	bl	800084c <__aeabi_ddiv>
 801bea6:	f04f 0a00 	mov.w	sl, #0
 801beaa:	4604      	mov	r4, r0
 801beac:	460d      	mov	r5, r1
 801beae:	4622      	mov	r2, r4
 801beb0:	462b      	mov	r3, r5
 801beb2:	4620      	mov	r0, r4
 801beb4:	4629      	mov	r1, r5
 801beb6:	f7e4 fb9f 	bl	80005f8 <__aeabi_dmul>
 801beba:	4602      	mov	r2, r0
 801bebc:	460b      	mov	r3, r1
 801bebe:	4680      	mov	r8, r0
 801bec0:	4689      	mov	r9, r1
 801bec2:	f7e4 fb99 	bl	80005f8 <__aeabi_dmul>
 801bec6:	a374      	add	r3, pc, #464	; (adr r3, 801c098 <atan+0x2b8>)
 801bec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801becc:	4606      	mov	r6, r0
 801bece:	460f      	mov	r7, r1
 801bed0:	f7e4 fb92 	bl	80005f8 <__aeabi_dmul>
 801bed4:	a372      	add	r3, pc, #456	; (adr r3, 801c0a0 <atan+0x2c0>)
 801bed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beda:	f7e4 f9d7 	bl	800028c <__adddf3>
 801bede:	4632      	mov	r2, r6
 801bee0:	463b      	mov	r3, r7
 801bee2:	f7e4 fb89 	bl	80005f8 <__aeabi_dmul>
 801bee6:	a370      	add	r3, pc, #448	; (adr r3, 801c0a8 <atan+0x2c8>)
 801bee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beec:	f7e4 f9ce 	bl	800028c <__adddf3>
 801bef0:	4632      	mov	r2, r6
 801bef2:	463b      	mov	r3, r7
 801bef4:	f7e4 fb80 	bl	80005f8 <__aeabi_dmul>
 801bef8:	a36d      	add	r3, pc, #436	; (adr r3, 801c0b0 <atan+0x2d0>)
 801befa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801befe:	f7e4 f9c5 	bl	800028c <__adddf3>
 801bf02:	4632      	mov	r2, r6
 801bf04:	463b      	mov	r3, r7
 801bf06:	f7e4 fb77 	bl	80005f8 <__aeabi_dmul>
 801bf0a:	a36b      	add	r3, pc, #428	; (adr r3, 801c0b8 <atan+0x2d8>)
 801bf0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf10:	f7e4 f9bc 	bl	800028c <__adddf3>
 801bf14:	4632      	mov	r2, r6
 801bf16:	463b      	mov	r3, r7
 801bf18:	f7e4 fb6e 	bl	80005f8 <__aeabi_dmul>
 801bf1c:	a368      	add	r3, pc, #416	; (adr r3, 801c0c0 <atan+0x2e0>)
 801bf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf22:	f7e4 f9b3 	bl	800028c <__adddf3>
 801bf26:	4642      	mov	r2, r8
 801bf28:	464b      	mov	r3, r9
 801bf2a:	f7e4 fb65 	bl	80005f8 <__aeabi_dmul>
 801bf2e:	a366      	add	r3, pc, #408	; (adr r3, 801c0c8 <atan+0x2e8>)
 801bf30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf34:	4680      	mov	r8, r0
 801bf36:	4689      	mov	r9, r1
 801bf38:	4630      	mov	r0, r6
 801bf3a:	4639      	mov	r1, r7
 801bf3c:	f7e4 fb5c 	bl	80005f8 <__aeabi_dmul>
 801bf40:	a363      	add	r3, pc, #396	; (adr r3, 801c0d0 <atan+0x2f0>)
 801bf42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf46:	f7e4 f99f 	bl	8000288 <__aeabi_dsub>
 801bf4a:	4632      	mov	r2, r6
 801bf4c:	463b      	mov	r3, r7
 801bf4e:	f7e4 fb53 	bl	80005f8 <__aeabi_dmul>
 801bf52:	a361      	add	r3, pc, #388	; (adr r3, 801c0d8 <atan+0x2f8>)
 801bf54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf58:	f7e4 f996 	bl	8000288 <__aeabi_dsub>
 801bf5c:	4632      	mov	r2, r6
 801bf5e:	463b      	mov	r3, r7
 801bf60:	f7e4 fb4a 	bl	80005f8 <__aeabi_dmul>
 801bf64:	a35e      	add	r3, pc, #376	; (adr r3, 801c0e0 <atan+0x300>)
 801bf66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf6a:	f7e4 f98d 	bl	8000288 <__aeabi_dsub>
 801bf6e:	4632      	mov	r2, r6
 801bf70:	463b      	mov	r3, r7
 801bf72:	f7e4 fb41 	bl	80005f8 <__aeabi_dmul>
 801bf76:	a35c      	add	r3, pc, #368	; (adr r3, 801c0e8 <atan+0x308>)
 801bf78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf7c:	f7e4 f984 	bl	8000288 <__aeabi_dsub>
 801bf80:	4632      	mov	r2, r6
 801bf82:	463b      	mov	r3, r7
 801bf84:	f7e4 fb38 	bl	80005f8 <__aeabi_dmul>
 801bf88:	4602      	mov	r2, r0
 801bf8a:	460b      	mov	r3, r1
 801bf8c:	4640      	mov	r0, r8
 801bf8e:	4649      	mov	r1, r9
 801bf90:	f7e4 f97c 	bl	800028c <__adddf3>
 801bf94:	4622      	mov	r2, r4
 801bf96:	462b      	mov	r3, r5
 801bf98:	f7e4 fb2e 	bl	80005f8 <__aeabi_dmul>
 801bf9c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801bfa0:	4602      	mov	r2, r0
 801bfa2:	460b      	mov	r3, r1
 801bfa4:	d14b      	bne.n	801c03e <atan+0x25e>
 801bfa6:	4620      	mov	r0, r4
 801bfa8:	4629      	mov	r1, r5
 801bfaa:	f7e4 f96d 	bl	8000288 <__aeabi_dsub>
 801bfae:	e72c      	b.n	801be0a <atan+0x2a>
 801bfb0:	ee10 0a10 	vmov	r0, s0
 801bfb4:	4b53      	ldr	r3, [pc, #332]	; (801c104 <atan+0x324>)
 801bfb6:	2200      	movs	r2, #0
 801bfb8:	4629      	mov	r1, r5
 801bfba:	f7e4 f965 	bl	8000288 <__aeabi_dsub>
 801bfbe:	4b51      	ldr	r3, [pc, #324]	; (801c104 <atan+0x324>)
 801bfc0:	4606      	mov	r6, r0
 801bfc2:	460f      	mov	r7, r1
 801bfc4:	2200      	movs	r2, #0
 801bfc6:	4620      	mov	r0, r4
 801bfc8:	4629      	mov	r1, r5
 801bfca:	f7e4 f95f 	bl	800028c <__adddf3>
 801bfce:	4602      	mov	r2, r0
 801bfd0:	460b      	mov	r3, r1
 801bfd2:	4630      	mov	r0, r6
 801bfd4:	4639      	mov	r1, r7
 801bfd6:	f7e4 fc39 	bl	800084c <__aeabi_ddiv>
 801bfda:	f04f 0a01 	mov.w	sl, #1
 801bfde:	4604      	mov	r4, r0
 801bfe0:	460d      	mov	r5, r1
 801bfe2:	e764      	b.n	801beae <atan+0xce>
 801bfe4:	4b49      	ldr	r3, [pc, #292]	; (801c10c <atan+0x32c>)
 801bfe6:	429e      	cmp	r6, r3
 801bfe8:	da1d      	bge.n	801c026 <atan+0x246>
 801bfea:	ee10 0a10 	vmov	r0, s0
 801bfee:	4b48      	ldr	r3, [pc, #288]	; (801c110 <atan+0x330>)
 801bff0:	2200      	movs	r2, #0
 801bff2:	4629      	mov	r1, r5
 801bff4:	f7e4 f948 	bl	8000288 <__aeabi_dsub>
 801bff8:	4b45      	ldr	r3, [pc, #276]	; (801c110 <atan+0x330>)
 801bffa:	4606      	mov	r6, r0
 801bffc:	460f      	mov	r7, r1
 801bffe:	2200      	movs	r2, #0
 801c000:	4620      	mov	r0, r4
 801c002:	4629      	mov	r1, r5
 801c004:	f7e4 faf8 	bl	80005f8 <__aeabi_dmul>
 801c008:	4b3e      	ldr	r3, [pc, #248]	; (801c104 <atan+0x324>)
 801c00a:	2200      	movs	r2, #0
 801c00c:	f7e4 f93e 	bl	800028c <__adddf3>
 801c010:	4602      	mov	r2, r0
 801c012:	460b      	mov	r3, r1
 801c014:	4630      	mov	r0, r6
 801c016:	4639      	mov	r1, r7
 801c018:	f7e4 fc18 	bl	800084c <__aeabi_ddiv>
 801c01c:	f04f 0a02 	mov.w	sl, #2
 801c020:	4604      	mov	r4, r0
 801c022:	460d      	mov	r5, r1
 801c024:	e743      	b.n	801beae <atan+0xce>
 801c026:	462b      	mov	r3, r5
 801c028:	ee10 2a10 	vmov	r2, s0
 801c02c:	4939      	ldr	r1, [pc, #228]	; (801c114 <atan+0x334>)
 801c02e:	2000      	movs	r0, #0
 801c030:	f7e4 fc0c 	bl	800084c <__aeabi_ddiv>
 801c034:	f04f 0a03 	mov.w	sl, #3
 801c038:	4604      	mov	r4, r0
 801c03a:	460d      	mov	r5, r1
 801c03c:	e737      	b.n	801beae <atan+0xce>
 801c03e:	4b36      	ldr	r3, [pc, #216]	; (801c118 <atan+0x338>)
 801c040:	4e36      	ldr	r6, [pc, #216]	; (801c11c <atan+0x33c>)
 801c042:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801c046:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801c04a:	e9da 2300 	ldrd	r2, r3, [sl]
 801c04e:	f7e4 f91b 	bl	8000288 <__aeabi_dsub>
 801c052:	4622      	mov	r2, r4
 801c054:	462b      	mov	r3, r5
 801c056:	f7e4 f917 	bl	8000288 <__aeabi_dsub>
 801c05a:	4602      	mov	r2, r0
 801c05c:	460b      	mov	r3, r1
 801c05e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801c062:	f7e4 f911 	bl	8000288 <__aeabi_dsub>
 801c066:	f1bb 0f00 	cmp.w	fp, #0
 801c06a:	4604      	mov	r4, r0
 801c06c:	460d      	mov	r5, r1
 801c06e:	f6bf aed6 	bge.w	801be1e <atan+0x3e>
 801c072:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c076:	461d      	mov	r5, r3
 801c078:	e6d1      	b.n	801be1e <atan+0x3e>
 801c07a:	a51d      	add	r5, pc, #116	; (adr r5, 801c0f0 <atan+0x310>)
 801c07c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c080:	e6cd      	b.n	801be1e <atan+0x3e>
 801c082:	bf00      	nop
 801c084:	f3af 8000 	nop.w
 801c088:	54442d18 	.word	0x54442d18
 801c08c:	bff921fb 	.word	0xbff921fb
 801c090:	8800759c 	.word	0x8800759c
 801c094:	7e37e43c 	.word	0x7e37e43c
 801c098:	e322da11 	.word	0xe322da11
 801c09c:	3f90ad3a 	.word	0x3f90ad3a
 801c0a0:	24760deb 	.word	0x24760deb
 801c0a4:	3fa97b4b 	.word	0x3fa97b4b
 801c0a8:	a0d03d51 	.word	0xa0d03d51
 801c0ac:	3fb10d66 	.word	0x3fb10d66
 801c0b0:	c54c206e 	.word	0xc54c206e
 801c0b4:	3fb745cd 	.word	0x3fb745cd
 801c0b8:	920083ff 	.word	0x920083ff
 801c0bc:	3fc24924 	.word	0x3fc24924
 801c0c0:	5555550d 	.word	0x5555550d
 801c0c4:	3fd55555 	.word	0x3fd55555
 801c0c8:	2c6a6c2f 	.word	0x2c6a6c2f
 801c0cc:	bfa2b444 	.word	0xbfa2b444
 801c0d0:	52defd9a 	.word	0x52defd9a
 801c0d4:	3fadde2d 	.word	0x3fadde2d
 801c0d8:	af749a6d 	.word	0xaf749a6d
 801c0dc:	3fb3b0f2 	.word	0x3fb3b0f2
 801c0e0:	fe231671 	.word	0xfe231671
 801c0e4:	3fbc71c6 	.word	0x3fbc71c6
 801c0e8:	9998ebc4 	.word	0x9998ebc4
 801c0ec:	3fc99999 	.word	0x3fc99999
 801c0f0:	54442d18 	.word	0x54442d18
 801c0f4:	3ff921fb 	.word	0x3ff921fb
 801c0f8:	440fffff 	.word	0x440fffff
 801c0fc:	7ff00000 	.word	0x7ff00000
 801c100:	3fdbffff 	.word	0x3fdbffff
 801c104:	3ff00000 	.word	0x3ff00000
 801c108:	3ff2ffff 	.word	0x3ff2ffff
 801c10c:	40038000 	.word	0x40038000
 801c110:	3ff80000 	.word	0x3ff80000
 801c114:	bff00000 	.word	0xbff00000
 801c118:	0801cd18 	.word	0x0801cd18
 801c11c:	0801ccf8 	.word	0x0801ccf8

0801c120 <fabs>:
 801c120:	ec51 0b10 	vmov	r0, r1, d0
 801c124:	ee10 2a10 	vmov	r2, s0
 801c128:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c12c:	ec43 2b10 	vmov	d0, r2, r3
 801c130:	4770      	bx	lr
 801c132:	0000      	movs	r0, r0
 801c134:	0000      	movs	r0, r0
	...

0801c138 <floor>:
 801c138:	ec51 0b10 	vmov	r0, r1, d0
 801c13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c140:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801c144:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801c148:	2e13      	cmp	r6, #19
 801c14a:	ee10 5a10 	vmov	r5, s0
 801c14e:	ee10 8a10 	vmov	r8, s0
 801c152:	460c      	mov	r4, r1
 801c154:	dc32      	bgt.n	801c1bc <floor+0x84>
 801c156:	2e00      	cmp	r6, #0
 801c158:	da14      	bge.n	801c184 <floor+0x4c>
 801c15a:	a333      	add	r3, pc, #204	; (adr r3, 801c228 <floor+0xf0>)
 801c15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c160:	f7e4 f894 	bl	800028c <__adddf3>
 801c164:	2200      	movs	r2, #0
 801c166:	2300      	movs	r3, #0
 801c168:	f7e4 fcd6 	bl	8000b18 <__aeabi_dcmpgt>
 801c16c:	b138      	cbz	r0, 801c17e <floor+0x46>
 801c16e:	2c00      	cmp	r4, #0
 801c170:	da57      	bge.n	801c222 <floor+0xea>
 801c172:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801c176:	431d      	orrs	r5, r3
 801c178:	d001      	beq.n	801c17e <floor+0x46>
 801c17a:	4c2d      	ldr	r4, [pc, #180]	; (801c230 <floor+0xf8>)
 801c17c:	2500      	movs	r5, #0
 801c17e:	4621      	mov	r1, r4
 801c180:	4628      	mov	r0, r5
 801c182:	e025      	b.n	801c1d0 <floor+0x98>
 801c184:	4f2b      	ldr	r7, [pc, #172]	; (801c234 <floor+0xfc>)
 801c186:	4137      	asrs	r7, r6
 801c188:	ea01 0307 	and.w	r3, r1, r7
 801c18c:	4303      	orrs	r3, r0
 801c18e:	d01f      	beq.n	801c1d0 <floor+0x98>
 801c190:	a325      	add	r3, pc, #148	; (adr r3, 801c228 <floor+0xf0>)
 801c192:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c196:	f7e4 f879 	bl	800028c <__adddf3>
 801c19a:	2200      	movs	r2, #0
 801c19c:	2300      	movs	r3, #0
 801c19e:	f7e4 fcbb 	bl	8000b18 <__aeabi_dcmpgt>
 801c1a2:	2800      	cmp	r0, #0
 801c1a4:	d0eb      	beq.n	801c17e <floor+0x46>
 801c1a6:	2c00      	cmp	r4, #0
 801c1a8:	bfbe      	ittt	lt
 801c1aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801c1ae:	fa43 f606 	asrlt.w	r6, r3, r6
 801c1b2:	19a4      	addlt	r4, r4, r6
 801c1b4:	ea24 0407 	bic.w	r4, r4, r7
 801c1b8:	2500      	movs	r5, #0
 801c1ba:	e7e0      	b.n	801c17e <floor+0x46>
 801c1bc:	2e33      	cmp	r6, #51	; 0x33
 801c1be:	dd0b      	ble.n	801c1d8 <floor+0xa0>
 801c1c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c1c4:	d104      	bne.n	801c1d0 <floor+0x98>
 801c1c6:	ee10 2a10 	vmov	r2, s0
 801c1ca:	460b      	mov	r3, r1
 801c1cc:	f7e4 f85e 	bl	800028c <__adddf3>
 801c1d0:	ec41 0b10 	vmov	d0, r0, r1
 801c1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1d8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801c1dc:	f04f 33ff 	mov.w	r3, #4294967295
 801c1e0:	fa23 f707 	lsr.w	r7, r3, r7
 801c1e4:	4207      	tst	r7, r0
 801c1e6:	d0f3      	beq.n	801c1d0 <floor+0x98>
 801c1e8:	a30f      	add	r3, pc, #60	; (adr r3, 801c228 <floor+0xf0>)
 801c1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1ee:	f7e4 f84d 	bl	800028c <__adddf3>
 801c1f2:	2200      	movs	r2, #0
 801c1f4:	2300      	movs	r3, #0
 801c1f6:	f7e4 fc8f 	bl	8000b18 <__aeabi_dcmpgt>
 801c1fa:	2800      	cmp	r0, #0
 801c1fc:	d0bf      	beq.n	801c17e <floor+0x46>
 801c1fe:	2c00      	cmp	r4, #0
 801c200:	da02      	bge.n	801c208 <floor+0xd0>
 801c202:	2e14      	cmp	r6, #20
 801c204:	d103      	bne.n	801c20e <floor+0xd6>
 801c206:	3401      	adds	r4, #1
 801c208:	ea25 0507 	bic.w	r5, r5, r7
 801c20c:	e7b7      	b.n	801c17e <floor+0x46>
 801c20e:	2301      	movs	r3, #1
 801c210:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801c214:	fa03 f606 	lsl.w	r6, r3, r6
 801c218:	4435      	add	r5, r6
 801c21a:	4545      	cmp	r5, r8
 801c21c:	bf38      	it	cc
 801c21e:	18e4      	addcc	r4, r4, r3
 801c220:	e7f2      	b.n	801c208 <floor+0xd0>
 801c222:	2500      	movs	r5, #0
 801c224:	462c      	mov	r4, r5
 801c226:	e7aa      	b.n	801c17e <floor+0x46>
 801c228:	8800759c 	.word	0x8800759c
 801c22c:	7e37e43c 	.word	0x7e37e43c
 801c230:	bff00000 	.word	0xbff00000
 801c234:	000fffff 	.word	0x000fffff

0801c238 <scalbn>:
 801c238:	b570      	push	{r4, r5, r6, lr}
 801c23a:	ec55 4b10 	vmov	r4, r5, d0
 801c23e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801c242:	4606      	mov	r6, r0
 801c244:	462b      	mov	r3, r5
 801c246:	b99a      	cbnz	r2, 801c270 <scalbn+0x38>
 801c248:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c24c:	4323      	orrs	r3, r4
 801c24e:	d036      	beq.n	801c2be <scalbn+0x86>
 801c250:	4b39      	ldr	r3, [pc, #228]	; (801c338 <scalbn+0x100>)
 801c252:	4629      	mov	r1, r5
 801c254:	ee10 0a10 	vmov	r0, s0
 801c258:	2200      	movs	r2, #0
 801c25a:	f7e4 f9cd 	bl	80005f8 <__aeabi_dmul>
 801c25e:	4b37      	ldr	r3, [pc, #220]	; (801c33c <scalbn+0x104>)
 801c260:	429e      	cmp	r6, r3
 801c262:	4604      	mov	r4, r0
 801c264:	460d      	mov	r5, r1
 801c266:	da10      	bge.n	801c28a <scalbn+0x52>
 801c268:	a32b      	add	r3, pc, #172	; (adr r3, 801c318 <scalbn+0xe0>)
 801c26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c26e:	e03a      	b.n	801c2e6 <scalbn+0xae>
 801c270:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801c274:	428a      	cmp	r2, r1
 801c276:	d10c      	bne.n	801c292 <scalbn+0x5a>
 801c278:	ee10 2a10 	vmov	r2, s0
 801c27c:	4620      	mov	r0, r4
 801c27e:	4629      	mov	r1, r5
 801c280:	f7e4 f804 	bl	800028c <__adddf3>
 801c284:	4604      	mov	r4, r0
 801c286:	460d      	mov	r5, r1
 801c288:	e019      	b.n	801c2be <scalbn+0x86>
 801c28a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c28e:	460b      	mov	r3, r1
 801c290:	3a36      	subs	r2, #54	; 0x36
 801c292:	4432      	add	r2, r6
 801c294:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801c298:	428a      	cmp	r2, r1
 801c29a:	dd08      	ble.n	801c2ae <scalbn+0x76>
 801c29c:	2d00      	cmp	r5, #0
 801c29e:	a120      	add	r1, pc, #128	; (adr r1, 801c320 <scalbn+0xe8>)
 801c2a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c2a4:	da1c      	bge.n	801c2e0 <scalbn+0xa8>
 801c2a6:	a120      	add	r1, pc, #128	; (adr r1, 801c328 <scalbn+0xf0>)
 801c2a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c2ac:	e018      	b.n	801c2e0 <scalbn+0xa8>
 801c2ae:	2a00      	cmp	r2, #0
 801c2b0:	dd08      	ble.n	801c2c4 <scalbn+0x8c>
 801c2b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c2b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c2ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c2be:	ec45 4b10 	vmov	d0, r4, r5
 801c2c2:	bd70      	pop	{r4, r5, r6, pc}
 801c2c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801c2c8:	da19      	bge.n	801c2fe <scalbn+0xc6>
 801c2ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 801c2ce:	429e      	cmp	r6, r3
 801c2d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801c2d4:	dd0a      	ble.n	801c2ec <scalbn+0xb4>
 801c2d6:	a112      	add	r1, pc, #72	; (adr r1, 801c320 <scalbn+0xe8>)
 801c2d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c2dc:	2b00      	cmp	r3, #0
 801c2de:	d1e2      	bne.n	801c2a6 <scalbn+0x6e>
 801c2e0:	a30f      	add	r3, pc, #60	; (adr r3, 801c320 <scalbn+0xe8>)
 801c2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2e6:	f7e4 f987 	bl	80005f8 <__aeabi_dmul>
 801c2ea:	e7cb      	b.n	801c284 <scalbn+0x4c>
 801c2ec:	a10a      	add	r1, pc, #40	; (adr r1, 801c318 <scalbn+0xe0>)
 801c2ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	d0b8      	beq.n	801c268 <scalbn+0x30>
 801c2f6:	a10e      	add	r1, pc, #56	; (adr r1, 801c330 <scalbn+0xf8>)
 801c2f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c2fc:	e7b4      	b.n	801c268 <scalbn+0x30>
 801c2fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c302:	3236      	adds	r2, #54	; 0x36
 801c304:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c308:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801c30c:	4620      	mov	r0, r4
 801c30e:	4b0c      	ldr	r3, [pc, #48]	; (801c340 <scalbn+0x108>)
 801c310:	2200      	movs	r2, #0
 801c312:	e7e8      	b.n	801c2e6 <scalbn+0xae>
 801c314:	f3af 8000 	nop.w
 801c318:	c2f8f359 	.word	0xc2f8f359
 801c31c:	01a56e1f 	.word	0x01a56e1f
 801c320:	8800759c 	.word	0x8800759c
 801c324:	7e37e43c 	.word	0x7e37e43c
 801c328:	8800759c 	.word	0x8800759c
 801c32c:	fe37e43c 	.word	0xfe37e43c
 801c330:	c2f8f359 	.word	0xc2f8f359
 801c334:	81a56e1f 	.word	0x81a56e1f
 801c338:	43500000 	.word	0x43500000
 801c33c:	ffff3cb0 	.word	0xffff3cb0
 801c340:	3c900000 	.word	0x3c900000

0801c344 <_init>:
 801c344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c346:	bf00      	nop
 801c348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c34a:	bc08      	pop	{r3}
 801c34c:	469e      	mov	lr, r3
 801c34e:	4770      	bx	lr

0801c350 <_fini>:
 801c350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c352:	bf00      	nop
 801c354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c356:	bc08      	pop	{r3}
 801c358:	469e      	mov	lr, r3
 801c35a:	4770      	bx	lr
