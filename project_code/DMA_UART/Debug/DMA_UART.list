
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b30c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e0  0801b4a0  0801b4a0  0002b4a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801be80  0801be80  000343e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801be80  0801be80  0002be80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801be88  0801be88  000343e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801be88  0801be88  0002be88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801be8c  0801be8c  0002be8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000043e8  20000000  0801be90  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d6e4  200043e8  08020278  000343e8  2**3
                  ALLOC
 10 ._user_heap_stack 000063c4  20011acc  08020278  00041acc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000343e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003590c  00000000  00000000  00034418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007146  00000000  00000000  00069d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e70  00000000  00000000  00070e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c30  00000000  00000000  00072ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002af0b  00000000  00000000  00074910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028ff6  00000000  00000000  0009f81b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df2b1  00000000  00000000  000c8811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a7ac2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000095f8  00000000  00000000  001a7b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200043e8 	.word	0x200043e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b484 	.word	0x0801b484

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200043ec 	.word	0x200043ec
 80001cc:	0801b484 	.word	0x0801b484

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <packetRead>:
Position_DataType position_type;
SCARA_Gcode_Cor_TypeDef	Gcode_Cor[1000];
uint16_t point_counter = 0, current_clutch_index = 0;
uint8_t step_status;
Robot_CommandTypedef pnp_move_option;
Robot_CommandTypedef 	packetRead	(uint8_t *message, int32_t length, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	; 0x30
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
	Transfer_Protocol protocol_id = message[0];
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    duty_cmd->id_command = message[1];
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3301      	adds	r3, #1
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	609a      	str	r2, [r3, #8]
	int32_t temp_pointer = 2;
 8001012:	2302      	movs	r3, #2
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch(protocol_id) 
 8001016:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <packetRead+0x38>
 800101e:	2b01      	cmp	r3, #1
 8001020:	f000 8212 	beq.w	8001448 <packetRead+0x458>
 8001024:	f001 b84b 	b.w	80020be <packetRead+0x10ce>
    {
        // reserved for Gcode file transfer
        case FILE_TRANSMISION:
        {
        	temp_pointer = 1;
 8001028:	2301      	movs	r3, #1
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
        	uint16_t timeout_value = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	857b      	strh	r3, [r7, #42]	; 0x2a
        	do {
        		Gcode_Packet_Command_TypeDef move_type 	= message[temp_pointer] & 0x0f;
 8001030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	4413      	add	r3, r2
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	f003 030f 	and.w	r3, r3, #15
 800103c:	74bb      	strb	r3, [r7, #18]
				switch (move_type){
 800103e:	7cbb      	ldrb	r3, [r7, #18]
 8001040:	2b05      	cmp	r3, #5
 8001042:	f200 81f0 	bhi.w	8001426 <packetRead+0x436>
 8001046:	a201      	add	r2, pc, #4	; (adr r2, 800104c <packetRead+0x5c>)
 8001048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104c:	08001065 	.word	0x08001065
 8001050:	0800117d 	.word	0x0800117d
 8001054:	08001427 	.word	0x08001427
 8001058:	080012c9 	.word	0x080012c9
 800105c:	080012c9 	.word	0x080012c9
 8001060:	080010ff 	.word	0x080010ff
				case FIRST_PACKET:{
					Gcode_Mode = message[temp_pointer++] >> 4 & 0x0f;
 8001064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	62fa      	str	r2, [r7, #44]	; 0x2c
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	091b      	lsrs	r3, r3, #4
 8001074:	b2db      	uxtb	r3, r3
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b88      	ldr	r3, [pc, #544]	; (80012a0 <packetRead+0x2b0>)
 800107e:	701a      	strb	r2, [r3, #0]
//					if(Gcode_Mode == GCODE_LINEAR){
//						bezier_wc = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
//					}
					down_z_height = (double)B2I(temp_pointer)*DATA_INVERSE_SCALE; temp_pointer+=4;
 8001080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	4413      	add	r3, r2
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa4b 	bl	8000524 <__aeabi_i2d>
 800108e:	a382      	add	r3, pc, #520	; (adr r3, 8001298 <packetRead+0x2a8>)
 8001090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001094:	f7ff fab0 	bl	80005f8 <__aeabi_dmul>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4981      	ldr	r1, [pc, #516]	; (80012a4 <packetRead+0x2b4>)
 800109e:	e9c1 2300 	strd	r2, r3, [r1]
 80010a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a4:	3304      	adds	r3, #4
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					up_z_height   = (double)B2I(temp_pointer)*DATA_INVERSE_SCALE; temp_pointer+=4;
 80010a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fa37 	bl	8000524 <__aeabi_i2d>
 80010b6:	a378      	add	r3, pc, #480	; (adr r3, 8001298 <packetRead+0x2a8>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff fa9c 	bl	80005f8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4978      	ldr	r1, [pc, #480]	; (80012a8 <packetRead+0x2b8>)
 80010c6:	e9c1 2300 	strd	r2, r3, [r1]
 80010ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010cc:	3304      	adds	r3, #4
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					total_num_of_point = B2I(temp_pointer);						 temp_pointer+=4;
 80010d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	4413      	add	r3, r2
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a74      	ldr	r2, [pc, #464]	; (80012ac <packetRead+0x2bc>)
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010de:	3304      	adds	r3, #4
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter = 0;
 80010e2:	4b73      	ldr	r3, [pc, #460]	; (80012b0 <packetRead+0x2c0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	801a      	strh	r2, [r3, #0]
					current_clutch_index = 0;
 80010e8:	4b72      	ldr	r3, [pc, #456]	; (80012b4 <packetRead+0x2c4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	801a      	strh	r2, [r3, #0]
					pre_clutch_index = -1;
 80010ee:	4b72      	ldr	r3, [pc, #456]	; (80012b8 <packetRead+0x2c8>)
 80010f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f4:	801a      	strh	r2, [r3, #0]
					pre_height = UP_Z;
 80010f6:	4b71      	ldr	r3, [pc, #452]	; (80012bc <packetRead+0x2cc>)
 80010f8:	2206      	movs	r2, #6
 80010fa:	701a      	strb	r2, [r3, #0]
				}
				break;
 80010fc:	e193      	b.n	8001426 <packetRead+0x436>
				case CLUTCH_HEADER_TYPE:{
					temp_pointer++;
 80010fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001100:	3301      	adds	r3, #1
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
					gcode_clutch_configure[current_clutch_index].total_s     = B2I(temp_pointer); temp_pointer+=4;
 8001104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	4a6a      	ldr	r2, [pc, #424]	; (80012b4 <packetRead+0x2c4>)
 800110c:	8812      	ldrh	r2, [r2, #0]
 800110e:	4610      	mov	r0, r2
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	496b      	ldr	r1, [pc, #428]	; (80012c0 <packetRead+0x2d0>)
 8001114:	4603      	mov	r3, r0
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4403      	add	r3, r0
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001122:	3304      	adds	r3, #4
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
					gcode_clutch_configure[current_clutch_index].veloc 	     = B2I(temp_pointer); temp_pointer+=4;
 8001126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	4a61      	ldr	r2, [pc, #388]	; (80012b4 <packetRead+0x2c4>)
 800112e:	8812      	ldrh	r2, [r2, #0]
 8001130:	4610      	mov	r0, r2
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4962      	ldr	r1, [pc, #392]	; (80012c0 <packetRead+0x2d0>)
 8001136:	4603      	mov	r3, r0
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4403      	add	r3, r0
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	440b      	add	r3, r1
 8001140:	3304      	adds	r3, #4
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001146:	3304      	adds	r3, #4
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
					gcode_clutch_configure[current_clutch_index].Depth_Feed  = B2I(temp_pointer); temp_pointer+=4;
 800114a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	4a58      	ldr	r2, [pc, #352]	; (80012b4 <packetRead+0x2c4>)
 8001152:	8812      	ldrh	r2, [r2, #0]
 8001154:	4610      	mov	r0, r2
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4959      	ldr	r1, [pc, #356]	; (80012c0 <packetRead+0x2d0>)
 800115a:	4603      	mov	r3, r0
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4403      	add	r3, r0
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	440b      	add	r3, r1
 8001164:	3308      	adds	r3, #8
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116a:	3304      	adds	r3, #4
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
					current_clutch_index++;
 800116e:	4b51      	ldr	r3, [pc, #324]	; (80012b4 <packetRead+0x2c4>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	b29a      	uxth	r2, r3
 8001176:	4b4f      	ldr	r3, [pc, #316]	; (80012b4 <packetRead+0x2c4>)
 8001178:	801a      	strh	r2, [r3, #0]
				}
				break;
 800117a:	e154      	b.n	8001426 <packetRead+0x436>
//				case BEZIER_TYPE:
				case LINEAR_TYPE:{
					Gcode_Cor[point_counter].configure.type_define[0] = move_type;
 800117c:	4b4c      	ldr	r3, [pc, #304]	; (80012b0 <packetRead+0x2c0>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	4a50      	ldr	r2, [pc, #320]	; (80012c4 <packetRead+0x2d4>)
 8001184:	460b      	mov	r3, r1
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	1a5b      	subs	r3, r3, r1
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	331a      	adds	r3, #26
 8001190:	7cba      	ldrb	r2, [r7, #18]
 8001192:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].configure.type_define[1] = message[temp_pointer++] >> 4 & 0x0f;
 8001194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	62fa      	str	r2, [r7, #44]	; 0x2c
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	091b      	lsrs	r3, r3, #4
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	4a42      	ldr	r2, [pc, #264]	; (80012b0 <packetRead+0x2c0>)
 80011a8:	8812      	ldrh	r2, [r2, #0]
 80011aa:	4611      	mov	r1, r2
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	b2d8      	uxtb	r0, r3
 80011b2:	4a44      	ldr	r2, [pc, #272]	; (80012c4 <packetRead+0x2d4>)
 80011b4:	460b      	mov	r3, r1
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	1a5b      	subs	r3, r3, r1
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	331b      	adds	r3, #27
 80011c0:	4602      	mov	r2, r0
 80011c2:	701a      	strb	r2, [r3, #0]
//					if(move_type == BEZIER_TYPE){
//						Gcode_Cor[point_counter].I = B2I(temp_pointer);	temp_pointer+=4;
//					}
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 80011c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a39      	ldr	r2, [pc, #228]	; (80012b0 <packetRead+0x2c0>)
 80011cc:	8812      	ldrh	r2, [r2, #0]
 80011ce:	4610      	mov	r0, r2
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	493c      	ldr	r1, [pc, #240]	; (80012c4 <packetRead+0x2d4>)
 80011d4:	4603      	mov	r3, r0
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	1a1b      	subs	r3, r3, r0
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e2:	3304      	adds	r3, #4
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 80011e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a30      	ldr	r2, [pc, #192]	; (80012b0 <packetRead+0x2c0>)
 80011ee:	8812      	ldrh	r2, [r2, #0]
 80011f0:	4610      	mov	r0, r2
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4933      	ldr	r1, [pc, #204]	; (80012c4 <packetRead+0x2d4>)
 80011f6:	4603      	mov	r3, r0
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	1a1b      	subs	r3, r3, r0
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	440b      	add	r3, r1
 8001200:	3304      	adds	r3, #4
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001206:	3304      	adds	r3, #4
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(Gcode_Mode == GCODE_LINEAR){
 800120a:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <packetRead+0x2b0>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b08      	cmp	r3, #8
 8001210:	d112      	bne.n	8001238 <packetRead+0x248>
						Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 8001212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	4413      	add	r3, r2
 8001218:	4a25      	ldr	r2, [pc, #148]	; (80012b0 <packetRead+0x2c0>)
 800121a:	8812      	ldrh	r2, [r2, #0]
 800121c:	4610      	mov	r0, r2
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4928      	ldr	r1, [pc, #160]	; (80012c4 <packetRead+0x2d4>)
 8001222:	4603      	mov	r3, r0
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	1a1b      	subs	r3, r3, r0
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	3308      	adds	r3, #8
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001232:	3304      	adds	r3, #4
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001236:	e025      	b.n	8001284 <packetRead+0x294>
					}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <packetRead+0x2b0>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b09      	cmp	r3, #9
 800123e:	d121      	bne.n	8001284 <packetRead+0x294>
						Gcode_Cor[point_counter].configure.clutch_index = current_clutch_index - 1;
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <packetRead+0x2c4>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	4a1a      	ldr	r2, [pc, #104]	; (80012b0 <packetRead+0x2c0>)
 8001246:	8812      	ldrh	r2, [r2, #0]
 8001248:	4611      	mov	r1, r2
 800124a:	3b01      	subs	r3, #1
 800124c:	b298      	uxth	r0, r3
 800124e:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <packetRead+0x2d4>)
 8001250:	460b      	mov	r3, r1
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	1a5b      	subs	r3, r3, r1
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	3318      	adds	r3, #24
 800125c:	4602      	mov	r2, r0
 800125e:	801a      	strh	r2, [r3, #0]
						Gcode_Cor[point_counter].T = B2I(temp_pointer);	temp_pointer+=4;
 8001260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	4413      	add	r3, r2
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <packetRead+0x2c0>)
 8001268:	8812      	ldrh	r2, [r2, #0]
 800126a:	4610      	mov	r0, r2
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4915      	ldr	r1, [pc, #84]	; (80012c4 <packetRead+0x2d4>)
 8001270:	4603      	mov	r3, r0
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	1a1b      	subs	r3, r3, r0
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	3314      	adds	r3, #20
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001280:	3304      	adds	r3, #4
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
					}
					point_counter++;
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <packetRead+0x2c0>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	b29a      	uxth	r2, r3
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <packetRead+0x2c0>)
 800128e:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001290:	e0c9      	b.n	8001426 <packetRead+0x436>
 8001292:	bf00      	nop
 8001294:	f3af 8000 	nop.w
 8001298:	a0000000 	.word	0xa0000000
 800129c:	3ec0c6f7 	.word	0x3ec0c6f7
 80012a0:	200085d0 	.word	0x200085d0
 80012a4:	20008f40 	.word	0x20008f40
 80012a8:	200085c8 	.word	0x200085c8
 80012ac:	20008fb0 	.word	0x20008fb0
 80012b0:	20004406 	.word	0x20004406
 80012b4:	20004408 	.word	0x20004408
 80012b8:	2000fd3a 	.word	0x2000fd3a
 80012bc:	20008f88 	.word	0x20008f88
 80012c0:	200085e0 	.word	0x200085e0
 80012c4:	20008fc8 	.word	0x20008fc8
				case ARC_CW_TYPE:
				case ARC_AW_TYPE:{
					Gcode_Cor[point_counter].configure.type_define[0] = move_type;
 80012c8:	4b8c      	ldr	r3, [pc, #560]	; (80014fc <packetRead+0x50c>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	4a8c      	ldr	r2, [pc, #560]	; (8001500 <packetRead+0x510>)
 80012d0:	460b      	mov	r3, r1
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	1a5b      	subs	r3, r3, r1
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	331a      	adds	r3, #26
 80012dc:	7cba      	ldrb	r2, [r7, #18]
 80012de:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].configure.type_define[1] = message[temp_pointer++] >> 4 & 0x0f;
 80012e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80012e6:	461a      	mov	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4a82      	ldr	r2, [pc, #520]	; (80014fc <packetRead+0x50c>)
 80012f4:	8812      	ldrh	r2, [r2, #0]
 80012f6:	4611      	mov	r1, r2
 80012f8:	f003 030f 	and.w	r3, r3, #15
 80012fc:	b2d8      	uxtb	r0, r3
 80012fe:	4a80      	ldr	r2, [pc, #512]	; (8001500 <packetRead+0x510>)
 8001300:	460b      	mov	r3, r1
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	1a5b      	subs	r3, r3, r1
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	331b      	adds	r3, #27
 800130c:	4602      	mov	r2, r0
 800130e:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 8001310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	4413      	add	r3, r2
 8001316:	4a79      	ldr	r2, [pc, #484]	; (80014fc <packetRead+0x50c>)
 8001318:	8812      	ldrh	r2, [r2, #0]
 800131a:	4610      	mov	r0, r2
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4978      	ldr	r1, [pc, #480]	; (8001500 <packetRead+0x510>)
 8001320:	4603      	mov	r3, r0
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	1a1b      	subs	r3, r3, r0
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132e:	3304      	adds	r3, #4
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 8001332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	4a70      	ldr	r2, [pc, #448]	; (80014fc <packetRead+0x50c>)
 800133a:	8812      	ldrh	r2, [r2, #0]
 800133c:	4610      	mov	r0, r2
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	496f      	ldr	r1, [pc, #444]	; (8001500 <packetRead+0x510>)
 8001342:	4603      	mov	r3, r0
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	1a1b      	subs	r3, r3, r0
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	440b      	add	r3, r1
 800134c:	3304      	adds	r3, #4
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001352:	3304      	adds	r3, #4
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(Gcode_Mode == GCODE_LINEAR){
 8001356:	4b6b      	ldr	r3, [pc, #428]	; (8001504 <packetRead+0x514>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b08      	cmp	r3, #8
 800135c:	d112      	bne.n	8001384 <packetRead+0x394>
						Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 800135e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	4a65      	ldr	r2, [pc, #404]	; (80014fc <packetRead+0x50c>)
 8001366:	8812      	ldrh	r2, [r2, #0]
 8001368:	4610      	mov	r0, r2
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4964      	ldr	r1, [pc, #400]	; (8001500 <packetRead+0x510>)
 800136e:	4603      	mov	r3, r0
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	1a1b      	subs	r3, r3, r0
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	440b      	add	r3, r1
 8001378:	3308      	adds	r3, #8
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800137e:	3304      	adds	r3, #4
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001382:	e025      	b.n	80013d0 <packetRead+0x3e0>
					}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8001384:	4b5f      	ldr	r3, [pc, #380]	; (8001504 <packetRead+0x514>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b09      	cmp	r3, #9
 800138a:	d121      	bne.n	80013d0 <packetRead+0x3e0>
						Gcode_Cor[point_counter].configure.clutch_index = current_clutch_index - 1;
 800138c:	4b5e      	ldr	r3, [pc, #376]	; (8001508 <packetRead+0x518>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	4a5a      	ldr	r2, [pc, #360]	; (80014fc <packetRead+0x50c>)
 8001392:	8812      	ldrh	r2, [r2, #0]
 8001394:	4611      	mov	r1, r2
 8001396:	3b01      	subs	r3, #1
 8001398:	b298      	uxth	r0, r3
 800139a:	4a59      	ldr	r2, [pc, #356]	; (8001500 <packetRead+0x510>)
 800139c:	460b      	mov	r3, r1
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	1a5b      	subs	r3, r3, r1
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	3318      	adds	r3, #24
 80013a8:	4602      	mov	r2, r0
 80013aa:	801a      	strh	r2, [r3, #0]
						Gcode_Cor[point_counter].T = B2I(temp_pointer);	temp_pointer+=4;
 80013ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a52      	ldr	r2, [pc, #328]	; (80014fc <packetRead+0x50c>)
 80013b4:	8812      	ldrh	r2, [r2, #0]
 80013b6:	4610      	mov	r0, r2
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4951      	ldr	r1, [pc, #324]	; (8001500 <packetRead+0x510>)
 80013bc:	4603      	mov	r3, r0
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	1a1b      	subs	r3, r3, r0
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	3314      	adds	r3, #20
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013cc:	3304      	adds	r3, #4
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					}
					Gcode_Cor[point_counter].I = B2I(temp_pointer);	temp_pointer+=4;
 80013d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	4413      	add	r3, r2
 80013d6:	4a49      	ldr	r2, [pc, #292]	; (80014fc <packetRead+0x50c>)
 80013d8:	8812      	ldrh	r2, [r2, #0]
 80013da:	4610      	mov	r0, r2
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4948      	ldr	r1, [pc, #288]	; (8001500 <packetRead+0x510>)
 80013e0:	4603      	mov	r3, r0
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	1a1b      	subs	r3, r3, r0
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	330c      	adds	r3, #12
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f0:	3304      	adds	r3, #4
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].J = B2I(temp_pointer);	temp_pointer+=4;
 80013f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a40      	ldr	r2, [pc, #256]	; (80014fc <packetRead+0x50c>)
 80013fc:	8812      	ldrh	r2, [r2, #0]
 80013fe:	4610      	mov	r0, r2
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	493f      	ldr	r1, [pc, #252]	; (8001500 <packetRead+0x510>)
 8001404:	4603      	mov	r3, r0
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	1a1b      	subs	r3, r3, r0
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	3310      	adds	r3, #16
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001414:	3304      	adds	r3, #4
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter++;
 8001418:	4b38      	ldr	r3, [pc, #224]	; (80014fc <packetRead+0x50c>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	b29a      	uxth	r2, r3
 8001420:	4b36      	ldr	r3, [pc, #216]	; (80014fc <packetRead+0x50c>)
 8001422:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001424:	bf00      	nop
				}
				if(timeout_value++ == 0xffff) break;
 8001426:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	857a      	strh	r2, [r7, #42]	; 0x2a
 800142c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001430:	4293      	cmp	r3, r2
 8001432:	d005      	beq.n	8001440 <packetRead+0x450>
        	}while(temp_pointer < length);
 8001434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	429a      	cmp	r2, r3
 800143a:	f6ff adf9 	blt.w	8001030 <packetRead+0x40>
 800143e:	e000      	b.n	8001442 <packetRead+0x452>
				if(timeout_value++ == 0xffff) break;
 8001440:	bf00      	nop
        	return CMD_GCODE;
 8001442:	231b      	movs	r3, #27
 8001444:	f000 be3c 	b.w	80020c0 <packetRead+0x10d0>
        break;

        // command control from pc
        case COMMAND_TRANSMISION:
        {
        	Robot_CommandTypedef command_id = message[1];
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	785b      	ldrb	r3, [r3, #1]
 800144c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            switch(command_id)
 8001450:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001454:	2b1a      	cmp	r3, #26
 8001456:	f200 8630 	bhi.w	80020ba <packetRead+0x10ca>
 800145a:	a201      	add	r2, pc, #4	; (adr r2, 8001460 <packetRead+0x470>)
 800145c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001460:	080014cd 	.word	0x080014cd
 8001464:	080014e5 	.word	0x080014e5
 8001468:	08001511 	.word	0x08001511
 800146c:	080015d9 	.word	0x080015d9
 8001470:	0800182d 	.word	0x0800182d
 8001474:	080015d9 	.word	0x080015d9
 8001478:	08001a9f 	.word	0x08001a9f
 800147c:	08001aa3 	.word	0x08001aa3
 8001480:	080020bb 	.word	0x080020bb
 8001484:	08001ac3 	.word	0x08001ac3
 8001488:	08001af3 	.word	0x08001af3
 800148c:	08001b55 	.word	0x08001b55
 8001490:	08001c23 	.word	0x08001c23
 8001494:	08002069 	.word	0x08002069
 8001498:	08001ff1 	.word	0x08001ff1
 800149c:	08002001 	.word	0x08002001
 80014a0:	080020bb 	.word	0x080020bb
 80014a4:	080020bb 	.word	0x080020bb
 80014a8:	08001f2d 	.word	0x08001f2d
 80014ac:	08002011 	.word	0x08002011
 80014b0:	08001fe1 	.word	0x08001fe1
 80014b4:	08001bc1 	.word	0x08001bc1
 80014b8:	08001beb 	.word	0x08001beb
 80014bc:	080020bb 	.word	0x080020bb
 80014c0:	080020bb 	.word	0x080020bb
 80014c4:	08001c5d 	.word	0x08001c5d
 80014c8:	08001d4d 	.word	0x08001d4d
            {
                // Stop now
                case CMD_STOPNOW:
                {
                    duty_cmd->robot_mode = SCARA_MODE_STOP;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	2200      	movs	r2, #0
 80014d0:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	2201      	movs	r2, #1
 80014d6:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
                    return CMD_STOPNOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	f000 bdee 	b.w	80020c0 <packetRead+0x10d0>
                break;

                // Scan limit
                case CMD_SCAN_LIMIT:
                {
                    duty_cmd->robot_mode = SCARA_MODE_SCAN;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	2201      	movs	r2, #1
 80014e8:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2201      	movs	r2, #1
 80014ee:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
                    return CMD_SCAN_LIMIT;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f000 bde2 	b.w	80020c0 <packetRead+0x10d0>
 80014fc:	20004406 	.word	0x20004406
 8001500:	20008fc8 	.word	0x20008fc8
 8001504:	200085d0 	.word	0x200085d0
 8001508:	20004408 	.word	0x20004408
 800150c:	360637bd 	.word	0x360637bd
                break;

                // Move home
                case CMD_MOVE_HOME:
                {
                    if (length == 10){ // 2 int32_t number + 2 define byte
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2b0a      	cmp	r3, #10
 8001514:	d15d      	bne.n	80015d2 <packetRead+0x5e2>
						temp_pointer = -2;
 8001516:	f06f 0301 	mvn.w	r3, #1
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->v_factor = B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 800151c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151e:	3304      	adds	r3, #4
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001532:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800150c <packetRead+0x51c>
 8001536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800153a:	ee17 0a90 	vmov	r0, s15
 800153e:	f7ff f803 	bl	8000548 <__aeabi_f2d>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	6839      	ldr	r1, [r7, #0]
 8001548:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
						duty_cmd->a_factor = B2I(temp_pointer)*DATA_INVERSE_SCALE;
 800154c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4413      	add	r3, r2
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	ee07 3a90 	vmov	s15, r3
 8001558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155c:	ed1f 7a15 	vldr	s14, [pc, #-84]	; 800150c <packetRead+0x51c>
 8001560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001564:	ee17 0a90 	vmov	r0, s15
 8001568:	f7fe ffee 	bl	8000548 <__aeabi_f2d>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	6839      	ldr	r1, [r7, #0]
 8001572:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
                    }else{
                        return CMD_ERROR;
                    }
                    duty_cmd->target_point.x = 250;
 8001576:	6839      	ldr	r1, [r7, #0]
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	4ba8      	ldr	r3, [pc, #672]	; (8001820 <packetRead+0x830>)
 800157e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
                    duty_cmd->target_point.y = -200;
 8001582:	6839      	ldr	r1, [r7, #0]
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	4ba6      	ldr	r3, [pc, #664]	; (8001824 <packetRead+0x834>)
 800158a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
                    duty_cmd->target_point.z = 120;
 800158e:	6839      	ldr	r1, [r7, #0]
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4ba4      	ldr	r3, [pc, #656]	; (8001828 <packetRead+0x838>)
 8001596:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
                    duty_cmd->target_point.roll = 0;
 800159a:	6839      	ldr	r1, [r7, #0]
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

                    duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	2200      	movs	r2, #0
 80015ac:	745a      	strb	r2, [r3, #17]
                    duty_cmd->space_type = DUTY_SPACE_JOINT;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	2201      	movs	r2, #1
 80015b2:	735a      	strb	r2, [r3, #13]
                    duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2201      	movs	r2, #1
 80015b8:	73da      	strb	r2, [r3, #15]
                    duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2202      	movs	r2, #2
 80015be:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	2201      	movs	r2, #1
 80015c4:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
                    return CMD_MOVE_HOME;
 80015cc:	2302      	movs	r3, #2
 80015ce:	f000 bd77 	b.w	80020c0 <packetRead+0x10d0>
                        return CMD_ERROR;
 80015d2:	2317      	movs	r3, #23
 80015d4:	f000 bd74 	b.w	80020c0 <packetRead+0x10d0>

                case CMD_MOVE_JOINT:
                // Move line
                case CMD_MOVE_LINE:
                {
                    if (length == 29){ // 6 int32_t number + 3 byte number + 2 define byte
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	2b1d      	cmp	r3, #29
 80015dc:	f040 8109 	bne.w	80017f2 <packetRead+0x802>
						//scaraSetScanFlag();
						uint8_t mode_init;
						temp_pointer = -2;
 80015e0:	f06f 0301 	mvn.w	r3, #1
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c

						duty_cmd->target_point.x = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 80015e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e8:	3304      	adds	r3, #4
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4413      	add	r3, r2
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe ff95 	bl	8000524 <__aeabi_i2d>
 80015fa:	a387      	add	r3, pc, #540	; (adr r3, 8001818 <packetRead+0x828>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	f7fe fffa 	bl	80005f8 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	6839      	ldr	r1, [r7, #0]
 800160a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
						duty_cmd->target_point.y = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 800160e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001610:	3304      	adds	r3, #4
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	4413      	add	r3, r2
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ff81 	bl	8000524 <__aeabi_i2d>
 8001622:	a37d      	add	r3, pc, #500	; (adr r3, 8001818 <packetRead+0x828>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7fe ffe6 	bl	80005f8 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	6839      	ldr	r1, [r7, #0]
 8001632:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
						duty_cmd->target_point.z = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001638:	3304      	adds	r3, #4
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800163c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4413      	add	r3, r2
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ff6d 	bl	8000524 <__aeabi_i2d>
 800164a:	a373      	add	r3, pc, #460	; (adr r3, 8001818 <packetRead+0x828>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7fe ffd2 	bl	80005f8 <__aeabi_dmul>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	6839      	ldr	r1, [r7, #0]
 800165a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
						duty_cmd->target_point.roll = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 800165e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001660:	3304      	adds	r3, #4
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	4413      	add	r3, r2
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe ff59 	bl	8000524 <__aeabi_i2d>
 8001672:	a369      	add	r3, pc, #420	; (adr r3, 8001818 <packetRead+0x828>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7fe ffbe 	bl	80005f8 <__aeabi_dmul>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	6839      	ldr	r1, [r7, #0]
 8001682:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
						duty_cmd->v_factor = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001688:	3304      	adds	r3, #4
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800168c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4413      	add	r3, r2
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff45 	bl	8000524 <__aeabi_i2d>
 800169a:	a35f      	add	r3, pc, #380	; (adr r3, 8001818 <packetRead+0x828>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f7fe ffaa 	bl	80005f8 <__aeabi_dmul>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	6839      	ldr	r1, [r7, #0]
 80016aa:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
						mode_init = message[temp_pointer+=4];
 80016ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b0:	3304      	adds	r3, #4
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	4413      	add	r3, r2
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	74fb      	strb	r3, [r7, #19]

						if(mode_init == DUTY_MODE_INIT_QVA){
 80016be:	7cfb      	ldrb	r3, [r7, #19]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d117      	bne.n	80016f4 <packetRead+0x704>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	2200      	movs	r2, #0
 80016c8:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 80016ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016cc:	3301      	adds	r3, #1
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	4413      	add	r3, r2
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe ff23 	bl	8000524 <__aeabi_i2d>
 80016de:	a34e      	add	r3, pc, #312	; (adr r3, 8001818 <packetRead+0x828>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	f7fe ff88 	bl	80005f8 <__aeabi_dmul>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	6839      	ldr	r1, [r7, #0]
 80016ee:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
 80016f2:	e053      	b.n	800179c <packetRead+0x7ac>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 80016f4:	7cfb      	ldrb	r3, [r7, #19]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d117      	bne.n	800172a <packetRead+0x73a>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2201      	movs	r2, #1
 80016fe:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 8001700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001702:	3301      	adds	r3, #1
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ff08 	bl	8000524 <__aeabi_i2d>
 8001714:	a340      	add	r3, pc, #256	; (adr r3, 8001818 <packetRead+0x828>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7fe ff6d 	bl	80005f8 <__aeabi_dmul>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	6839      	ldr	r1, [r7, #0]
 8001724:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001728:	e038      	b.n	800179c <packetRead+0x7ac>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 800172a:	7cfb      	ldrb	r3, [r7, #19]
 800172c:	2b03      	cmp	r3, #3
 800172e:	d117      	bne.n	8001760 <packetRead+0x770>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	2203      	movs	r2, #3
 8001734:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 8001736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001738:	3301      	adds	r3, #1
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800173c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4413      	add	r3, r2
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe feed 	bl	8000524 <__aeabi_i2d>
 800174a:	a333      	add	r3, pc, #204	; (adr r3, 8001818 <packetRead+0x828>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7fe ff52 	bl	80005f8 <__aeabi_dmul>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	6839      	ldr	r1, [r7, #0]
 800175a:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800175e:	e01d      	b.n	800179c <packetRead+0x7ac>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 8001760:	7cfb      	ldrb	r3, [r7, #19]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d117      	bne.n	8001796 <packetRead+0x7a6>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2202      	movs	r2, #2
 800176a:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 800176c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176e:	3301      	adds	r3, #1
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fed2 	bl	8000524 <__aeabi_i2d>
 8001780:	a325      	add	r3, pc, #148	; (adr r3, 8001818 <packetRead+0x828>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	f7fe ff37 	bl	80005f8 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	6839      	ldr	r1, [r7, #0]
 8001790:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
 8001794:	e002      	b.n	800179c <packetRead+0x7ac>
						}else{
							return CMD_ERROR;
 8001796:	2317      	movs	r3, #23
 8001798:	f000 bc92 	b.w	80020c0 <packetRead+0x10d0>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 800179c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179e:	3304      	adds	r3, #4
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	781a      	ldrb	r2, [r3, #0]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 80017ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b0:	3301      	adds	r3, #1
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4413      	add	r3, r2
 80017ba:	781a      	ldrb	r2, [r3, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	741a      	strb	r2, [r3, #16]
						if(command_id == CMD_MOVE_LINE){
 80017c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d106      	bne.n	80017d6 <packetRead+0x7e6>
							duty_cmd->path_type = DUTY_PATH_LINE;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	2200      	movs	r2, #0
 80017cc:	739a      	strb	r2, [r3, #14]
							duty_cmd->space_type = DUTY_SPACE_TASK;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2200      	movs	r2, #0
 80017d2:	735a      	strb	r2, [r3, #13]
 80017d4:	e010      	b.n	80017f8 <packetRead+0x808>
						}else if(command_id == CMD_MOVE_JOINT){
 80017d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017da:	2b05      	cmp	r3, #5
 80017dc:	d106      	bne.n	80017ec <packetRead+0x7fc>
							duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	2201      	movs	r2, #1
 80017e2:	73da      	strb	r2, [r3, #15]
							duty_cmd->space_type = DUTY_SPACE_JOINT;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	2201      	movs	r2, #1
 80017e8:	735a      	strb	r2, [r3, #13]
 80017ea:	e005      	b.n	80017f8 <packetRead+0x808>
						}else{
							return CMD_ERROR;
 80017ec:	2317      	movs	r3, #23
 80017ee:	f000 bc67 	b.w	80020c0 <packetRead+0x10d0>
						}

					}else{
						return CMD_ERROR;
 80017f2:	2317      	movs	r3, #23
 80017f4:	f000 bc64 	b.w	80020c0 <packetRead+0x10d0>
					}
					duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	2202      	movs	r2, #2
 80017fc:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	2201      	movs	r2, #1
 8001802:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
					return command_id;
 800180a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800180e:	f000 bc57 	b.w	80020c0 <packetRead+0x10d0>
 8001812:	bf00      	nop
 8001814:	f3af 8000 	nop.w
 8001818:	a0000000 	.word	0xa0000000
 800181c:	3ec0c6f7 	.word	0x3ec0c6f7
 8001820:	406f4000 	.word	0x406f4000
 8001824:	c0690000 	.word	0xc0690000
 8001828:	405e0000 	.word	0x405e0000
				break;


				// Move circle
                case CMD_MOVE_CIRCLE:{
                	if(length == 34){ // 7 int32_t number + 4 byte number + 2 define byte
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	2b22      	cmp	r3, #34	; 0x22
 8001830:	f040 8133 	bne.w	8001a9a <packetRead+0xaaa>
                		uint8_t mode_init, arc_type;
                		temp_pointer = -2;
 8001834:	f06f 0301 	mvn.w	r3, #1
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
                		duty_cmd->target_point.x      = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	3304      	adds	r3, #4
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	4413      	add	r3, r2
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe6b 	bl	8000524 <__aeabi_i2d>
 800184e:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7fe fecf 	bl	80005f8 <__aeabi_dmul>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	6839      	ldr	r1, [r7, #0]
 8001860:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
                		duty_cmd->target_point.y      = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001866:	3304      	adds	r3, #4
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800186a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	4413      	add	r3, r2
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fe56 	bl	8000524 <__aeabi_i2d>
 8001878:	f20f 43ac 	addw	r3, pc, #1196	; 0x4ac
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	f7fe feba 	bl	80005f8 <__aeabi_dmul>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	6839      	ldr	r1, [r7, #0]
 800188a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
                		duty_cmd->sub_point.x 	      = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 800188e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001890:	3304      	adds	r3, #4
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4413      	add	r3, r2
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fe41 	bl	8000524 <__aeabi_i2d>
 80018a2:	f20f 4384 	addw	r3, pc, #1156	; 0x484
 80018a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018aa:	f7fe fea5 	bl	80005f8 <__aeabi_dmul>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	6839      	ldr	r1, [r7, #0]
 80018b4:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
                		duty_cmd->sub_point.y         = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 80018b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ba:	3304      	adds	r3, #4
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	4413      	add	r3, r2
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe2c 	bl	8000524 <__aeabi_i2d>
 80018cc:	f20f 4358 	addw	r3, pc, #1112	; 0x458
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	f7fe fe90 	bl	80005f8 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	6839      	ldr	r1, [r7, #0]
 80018de:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
                		duty_cmd->target_point.roll   = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 80018e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e4:	3304      	adds	r3, #4
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4413      	add	r3, r2
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fe17 	bl	8000524 <__aeabi_i2d>
 80018f6:	f20f 4330 	addw	r3, pc, #1072	; 0x430
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe fe7b 	bl	80005f8 <__aeabi_dmul>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	6839      	ldr	r1, [r7, #0]
 8001908:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
                		duty_cmd->v_factor			  = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 800190c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190e:	3304      	adds	r3, #4
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fe02 	bl	8000524 <__aeabi_i2d>
 8001920:	f20f 4304 	addw	r3, pc, #1028	; 0x404
 8001924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001928:	f7fe fe66 	bl	80005f8 <__aeabi_dmul>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	6839      	ldr	r1, [r7, #0]
 8001932:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
                		arc_type = message[temp_pointer+=4];
 8001936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001938:	3304      	adds	r3, #4
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800193c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4413      	add	r3, r2
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	757b      	strb	r3, [r7, #21]
                		if(arc_type == ARC_AW_TYPE){
 8001946:	7d7b      	ldrb	r3, [r7, #21]
 8001948:	2b04      	cmp	r3, #4
 800194a:	d103      	bne.n	8001954 <packetRead+0x964>
                			duty_cmd->arc_dir = 1;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	2201      	movs	r2, #1
 8001950:	615a      	str	r2, [r3, #20]
 8001952:	e009      	b.n	8001968 <packetRead+0x978>
                		}else if(arc_type == ARC_CW_TYPE){
 8001954:	7d7b      	ldrb	r3, [r7, #21]
 8001956:	2b03      	cmp	r3, #3
 8001958:	d104      	bne.n	8001964 <packetRead+0x974>
                			duty_cmd->arc_dir = -1;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f04f 32ff 	mov.w	r2, #4294967295
 8001960:	615a      	str	r2, [r3, #20]
 8001962:	e001      	b.n	8001968 <packetRead+0x978>
                		}else{
                			return CMD_ERROR;
 8001964:	2317      	movs	r3, #23
 8001966:	e3ab      	b.n	80020c0 <packetRead+0x10d0>
                		}
                		mode_init = message[temp_pointer+=1];
 8001968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196a:	3301      	adds	r3, #1
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800196e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	753b      	strb	r3, [r7, #20]
						if(mode_init == DUTY_MODE_INIT_QVA){
 8001978:	7d3b      	ldrb	r3, [r7, #20]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d117      	bne.n	80019ae <packetRead+0x9be>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2200      	movs	r2, #0
 8001982:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 8001984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001986:	3301      	adds	r3, #1
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800198a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fdc6 	bl	8000524 <__aeabi_i2d>
 8001998:	a3e3      	add	r3, pc, #908	; (adr r3, 8001d28 <packetRead+0xd38>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	f7fe fe2b 	bl	80005f8 <__aeabi_dmul>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	6839      	ldr	r1, [r7, #0]
 80019a8:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
 80019ac:	e052      	b.n	8001a54 <packetRead+0xa64>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 80019ae:	7d3b      	ldrb	r3, [r7, #20]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d117      	bne.n	80019e4 <packetRead+0x9f4>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	2201      	movs	r2, #1
 80019b8:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 80019ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019bc:	3301      	adds	r3, #1
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	4413      	add	r3, r2
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fdab 	bl	8000524 <__aeabi_i2d>
 80019ce:	a3d6      	add	r3, pc, #856	; (adr r3, 8001d28 <packetRead+0xd38>)
 80019d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d4:	f7fe fe10 	bl	80005f8 <__aeabi_dmul>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	6839      	ldr	r1, [r7, #0]
 80019de:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80019e2:	e037      	b.n	8001a54 <packetRead+0xa64>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 80019e4:	7d3b      	ldrb	r3, [r7, #20]
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	d117      	bne.n	8001a1a <packetRead+0xa2a>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	2203      	movs	r2, #3
 80019ee:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 80019f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f2:	3301      	adds	r3, #1
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	4413      	add	r3, r2
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fd90 	bl	8000524 <__aeabi_i2d>
 8001a04:	a3c8      	add	r3, pc, #800	; (adr r3, 8001d28 <packetRead+0xd38>)
 8001a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0a:	f7fe fdf5 	bl	80005f8 <__aeabi_dmul>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	6839      	ldr	r1, [r7, #0]
 8001a14:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001a18:	e01c      	b.n	8001a54 <packetRead+0xa64>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 8001a1a:	7d3b      	ldrb	r3, [r7, #20]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d117      	bne.n	8001a50 <packetRead+0xa60>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	2202      	movs	r2, #2
 8001a24:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)B2I(temp_pointer+=1)*DATA_INVERSE_SCALE;
 8001a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a28:	3301      	adds	r3, #1
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	4413      	add	r3, r2
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fd75 	bl	8000524 <__aeabi_i2d>
 8001a3a:	a3bb      	add	r3, pc, #748	; (adr r3, 8001d28 <packetRead+0xd38>)
 8001a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a40:	f7fe fdda 	bl	80005f8 <__aeabi_dmul>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	6839      	ldr	r1, [r7, #0]
 8001a4a:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
 8001a4e:	e001      	b.n	8001a54 <packetRead+0xa64>
						}else{
							return CMD_ERROR;
 8001a50:	2317      	movs	r3, #23
 8001a52:	e335      	b.n	80020c0 <packetRead+0x10d0>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 8001a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a56:	3304      	adds	r3, #4
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	4413      	add	r3, r2
 8001a60:	781a      	ldrb	r2, [r3, #0]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 8001a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a68:	3301      	adds	r3, #1
 8001a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	4413      	add	r3, r2
 8001a72:	781a      	ldrb	r2, [r3, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	741a      	strb	r2, [r3, #16]
						duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2200      	movs	r2, #0
 8001a82:	735a      	strb	r2, [r3, #13]
                	}else{
                		return CMD_ERROR;
                	}
                	duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	2202      	movs	r2, #2
 8001a88:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
					return CMD_MOVE_CIRCLE;
 8001a96:	2304      	movs	r3, #4
 8001a98:	e312      	b.n	80020c0 <packetRead+0x10d0>
                		return CMD_ERROR;
 8001a9a:	2317      	movs	r3, #23
 8001a9c:	e310      	b.n	80020c0 <packetRead+0x10d0>
                break;

				// Rotate Single
				case CMD_ROTATE_SINGLE:
				{
					return CMD_ROTATE_SINGLE;
 8001a9e:	2306      	movs	r3, #6
 8001aa0:	e30e      	b.n	80020c0 <packetRead+0x10d0>
				break;

				// Set output
				case CMD_OUTPUT:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d10a      	bne.n	8001abe <packetRead+0xace>
						temp_pointer = 2;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->arc_dir = message[temp_pointer];
 8001aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	615a      	str	r2, [r3, #20]
						return CMD_OUTPUT;
 8001aba:	2307      	movs	r3, #7
 8001abc:	e300      	b.n	80020c0 <packetRead+0x10d0>
					}else{
						return CMD_ERROR;
 8001abe:	2317      	movs	r3, #23
 8001ac0:	e2fe      	b.n	80020c0 <packetRead+0x10d0>
				break;

				// Read position
				case CMD_READ_POSITION:
				{
					if(length == 4){ // 1 byte categorize read type + 1 byte read cycle + 2 byte define
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d112      	bne.n	8001aee <packetRead+0xafe>
						temp_pointer = 2;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
						position_type = message[temp_pointer++];
 8001acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	781a      	ldrb	r2, [r3, #0]
 8001ada:	4b95      	ldr	r3, [pc, #596]	; (8001d30 <packetRead+0xd40>)
 8001adc:	701a      	strb	r2, [r3, #0]
						update_pos_cycle = message[temp_pointer];
 8001ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	781a      	ldrb	r2, [r3, #0]
 8001ae6:	4b93      	ldr	r3, [pc, #588]	; (8001d34 <packetRead+0xd44>)
 8001ae8:	701a      	strb	r2, [r3, #0]
						return CMD_READ_POSITION;
 8001aea:	2309      	movs	r3, #9
 8001aec:	e2e8      	b.n	80020c0 <packetRead+0x10d0>
					}else{
						return CMD_ERROR;
 8001aee:	2317      	movs	r3, #23
 8001af0:	e2e6      	b.n	80020c0 <packetRead+0x10d0>
				break;			

				// Setting
				case CMD_TEST_METHOD_SETTING:
				{
					if (length == 6){ // 4 byte configure + 2 byte define
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2b06      	cmp	r3, #6
 8001af6:	d12b      	bne.n	8001b50 <packetRead+0xb60>
						temp_pointer = 2;
 8001af8:	2302      	movs	r3, #2
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
						test_value_array[0] = message[temp_pointer++];
 8001afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b02:	461a      	mov	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	b25a      	sxtb	r2, r3
 8001b0c:	4b8a      	ldr	r3, [pc, #552]	; (8001d38 <packetRead+0xd48>)
 8001b0e:	701a      	strb	r2, [r3, #0]
						test_value_array[1] = message[temp_pointer++];
 8001b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b16:	461a      	mov	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	b25a      	sxtb	r2, r3
 8001b20:	4b85      	ldr	r3, [pc, #532]	; (8001d38 <packetRead+0xd48>)
 8001b22:	705a      	strb	r2, [r3, #1]
						test_value_array[2] = message[temp_pointer++];
 8001b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4413      	add	r3, r2
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	b25a      	sxtb	r2, r3
 8001b34:	4b80      	ldr	r3, [pc, #512]	; (8001d38 <packetRead+0xd48>)
 8001b36:	709a      	strb	r2, [r3, #2]
						test_value_array[3] = message[temp_pointer++];
 8001b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4413      	add	r3, r2
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	b25a      	sxtb	r2, r3
 8001b48:	4b7b      	ldr	r3, [pc, #492]	; (8001d38 <packetRead+0xd48>)
 8001b4a:	70da      	strb	r2, [r3, #3]
						return CMD_TEST_METHOD_SETTING;
 8001b4c:	230a      	movs	r3, #10
 8001b4e:	e2b7      	b.n	80020c0 <packetRead+0x10d0>
					}else{
						return CMD_ERROR;
 8001b50:	2317      	movs	r3, #23
 8001b52:	e2b5      	b.n	80020c0 <packetRead+0x10d0>
				break;

				// Change method
				case CMD_METHOD_CHANGE:
				{
					if(length == 3){ // 1 byte configure + 2 byte define
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d130      	bne.n	8001bbc <packetRead+0xbcc>
						uint8_t method;
						temp_pointer = 2;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
						method = message[temp_pointer];
 8001b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	75bb      	strb	r3, [r7, #22]
						if (SCARA_METHOD_MANUAL == method) {
 8001b68:	7dbb      	ldrb	r3, [r7, #22]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d103      	bne.n	8001b76 <packetRead+0xb86>
							duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	2200      	movs	r2, #0
 8001b72:	705a      	strb	r2, [r3, #1]
 8001b74:	e01d      	b.n	8001bb2 <packetRead+0xbc2>
						} else if (SCARA_METHOD_SEMI_AUTO == method) {
 8001b76:	7dbb      	ldrb	r3, [r7, #22]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d103      	bne.n	8001b84 <packetRead+0xb94>
							duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	705a      	strb	r2, [r3, #1]
 8001b82:	e016      	b.n	8001bb2 <packetRead+0xbc2>
						} else if (SCARA_METHOD_GCODE == method) {
 8001b84:	7dbb      	ldrb	r3, [r7, #22]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d103      	bne.n	8001b92 <packetRead+0xba2>
							duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	705a      	strb	r2, [r3, #1]
 8001b90:	e00f      	b.n	8001bb2 <packetRead+0xbc2>
						}else if(SCARA_METHOD_TEST == method){
 8001b92:	7dbb      	ldrb	r3, [r7, #22]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d103      	bne.n	8001ba0 <packetRead+0xbb0>
							duty_cmd->robot_method = SCARA_METHOD_TEST;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	705a      	strb	r2, [r3, #1]
 8001b9e:	e008      	b.n	8001bb2 <packetRead+0xbc2>
						}else if(SCARA_METHOD_PICK_AND_PLACE == method){
 8001ba0:	7dbb      	ldrb	r3, [r7, #22]
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d103      	bne.n	8001bae <packetRead+0xbbe>
							duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	2204      	movs	r2, #4
 8001baa:	705a      	strb	r2, [r3, #1]
 8001bac:	e001      	b.n	8001bb2 <packetRead+0xbc2>
						}else {
							return CMD_ERROR;
 8001bae:	2317      	movs	r3, #23
 8001bb0:	e286      	b.n	80020c0 <packetRead+0x10d0>
						}
						duty_cmd->change_method = TRUE;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]
						return CMD_METHOD_CHANGE;
 8001bb8:	230b      	movs	r3, #11
 8001bba:	e281      	b.n	80020c0 <packetRead+0x10d0>
					}else{
						return CMD_ERROR;
 8001bbc:	2317      	movs	r3, #23
 8001bbe:	e27f      	b.n	80020c0 <packetRead+0x10d0>
				break;

				// Set manual key
				case CMD_KEYBOARD:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d10f      	bne.n	8001be6 <packetRead+0xbf6>
						int temp_pointer = 2;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	61fb      	str	r3, [r7, #28]
						duty_cmd->keyboard = (SCARA_KeyTypeDef)message[temp_pointer];
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4413      	add	r3, r2
 8001bd0:	781a      	ldrb	r2, [r3, #0]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	70da      	strb	r2, [r3, #3]
						duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
						return CMD_KEYBOARD;
 8001be2:	2315      	movs	r3, #21
 8001be4:	e26c      	b.n	80020c0 <packetRead+0x10d0>
					}else{
						return CMD_ERROR;
 8001be6:	2317      	movs	r3, #23
 8001be8:	e26a      	b.n	80020c0 <packetRead+0x10d0>
				break;

				// Set manual key speed
				case CMD_KEY_SPEED:
				{
					if(length == 3){ // 1 byte key value + 2 byte define
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d116      	bne.n	8001c1e <packetRead+0xc2e>
						int temp_pointer = 2;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
						int32_t speed = (int32_t)message[temp_pointer];
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	623b      	str	r3, [r7, #32]
						// check limit
						if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPEED_MAX)) {
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	dd02      	ble.n	8001c0a <packetRead+0xc1a>
 8001c04:	6a3b      	ldr	r3, [r7, #32]
 8001c06:	2b0e      	cmp	r3, #14
 8001c08:	dd01      	ble.n	8001c0e <packetRead+0xc1e>
							return CMD_ERROR;
 8001c0a:	2317      	movs	r3, #23
 8001c0c:	e258      	b.n	80020c0 <packetRead+0x10d0>
						}
						duty_cmd->key_speed = speed;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	6a3a      	ldr	r2, [r7, #32]
 8001c12:	605a      	str	r2, [r3, #4]
						current_key_speed1 = speed;
 8001c14:	4a49      	ldr	r2, [pc, #292]	; (8001d3c <packetRead+0xd4c>)
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	6013      	str	r3, [r2, #0]
						return CMD_KEY_SPEED;
 8001c1a:	2316      	movs	r3, #22
 8001c1c:	e250      	b.n	80020c0 <packetRead+0x10d0>
					}else{
						return CMD_ERROR;
 8001c1e:	2317      	movs	r3, #23
 8001c20:	e24e      	b.n	80020c0 <packetRead+0x10d0>
				break;

				// Set test mode
				case CMD_MOTOR_TEST:
				{
					if(length == 3){ // 1byte key mode + 2 byte define
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	d117      	bne.n	8001c58 <packetRead+0xc68>
						int temp_pointer = 2;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	61bb      	str	r3, [r7, #24]
						uint8_t test_key = message[temp_pointer];
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	4413      	add	r3, r2
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	75fb      	strb	r3, [r7, #23]
						if(test_key < 0 || test_key > 8){
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d901      	bls.n	8001c40 <packetRead+0xc50>
							return CMD_ERROR;
 8001c3c:	2317      	movs	r3, #23
 8001c3e:	e23f      	b.n	80020c0 <packetRead+0x10d0>
						}
						duty_cmd->test_key = test_key;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	7dfa      	ldrb	r2, [r7, #23]
 8001c44:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
						duty_cmd->robot_method = SCARA_METHOD_TEST;	
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
						return CMD_MOTOR_TEST;
 8001c54:	230c      	movs	r3, #12
 8001c56:	e233      	b.n	80020c0 <packetRead+0x10d0>
					}else{
						return CMD_ERROR;
 8001c58:	2317      	movs	r3, #23
 8001c5a:	e231      	b.n	80020c0 <packetRead+0x10d0>
				}
				break;

				case CMD_OBJECT_DETECTED:
				{
					if (length == 15){ // 3 int32_t number + 1 byte object type + 2 define byte
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b0f      	cmp	r3, #15
 8001c60:	d160      	bne.n	8001d24 <packetRead+0xd34>
						temp_pointer = -2;
 8001c62:	f06f 0301 	mvn.w	r3, #1
 8001c66:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->target_point.x = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe fc54 	bl	8000524 <__aeabi_i2d>
 8001c7c:	a32a      	add	r3, pc, #168	; (adr r3, 8001d28 <packetRead+0xd38>)
 8001c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c82:	f7fe fcb9 	bl	80005f8 <__aeabi_dmul>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	6839      	ldr	r1, [r7, #0]
 8001c8c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
						duty_cmd->target_point.y = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c92:	3304      	adds	r3, #4
 8001c94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fc40 	bl	8000524 <__aeabi_i2d>
 8001ca4:	a320      	add	r3, pc, #128	; (adr r3, 8001d28 <packetRead+0xd38>)
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	f7fe fca5 	bl	80005f8 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	6839      	ldr	r1, [r7, #0]
 8001cb4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
						//duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
						duty_cmd->target_point.roll = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cba:	3304      	adds	r3, #4
 8001cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fc2c 	bl	8000524 <__aeabi_i2d>
 8001ccc:	a316      	add	r3, pc, #88	; (adr r3, 8001d28 <packetRead+0xd38>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	f7fe fc91 	bl	80005f8 <__aeabi_dmul>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	6839      	ldr	r1, [r7, #0]
 8001cdc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
						duty_cmd->target_point.object_type = message[temp_pointer+=4];
 8001ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	4413      	add	r3, r2
 8001cec:	781a      	ldrb	r2, [r3, #0]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
						duty_cmd->target_point.packet_time_stamp = GET_MICROS;
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <packetRead+0xd50>)
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <packetRead+0xd54>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4912      	ldr	r1, [pc, #72]	; (8001d48 <packetRead+0xd58>)
 8001cfe:	fba1 1303 	umull	r1, r3, r1, r3
 8001d02:	0c9b      	lsrs	r3, r3, #18
 8001d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d08:	461a      	mov	r2, r3
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	6839      	ldr	r1, [r7, #0]
 8001d10:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2204      	movs	r2, #4
 8001d18:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
					return CMD_OBJECT_DETECTED;
 8001d20:	2319      	movs	r3, #25
 8001d22:	e1cd      	b.n	80020c0 <packetRead+0x10d0>
						return CMD_ERROR;
 8001d24:	2317      	movs	r3, #23
 8001d26:	e1cb      	b.n	80020c0 <packetRead+0x10d0>
 8001d28:	a0000000 	.word	0xa0000000
 8001d2c:	3ec0c6f7 	.word	0x3ec0c6f7
 8001d30:	2000fd38 	.word	0x2000fd38
 8001d34:	20000004 	.word	0x20000004
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000060 	.word	0x20000060
 8001d40:	e0001000 	.word	0xe0001000
 8001d44:	2000408c 	.word	0x2000408c
 8001d48:	431bde83 	.word	0x431bde83
				}
				break;

				case CMD_SETUP_PNP_CONFIGURE:
				{
					if (length == 47) { // 11 int32_t number + 1 byte move type + 2 define byte
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b2f      	cmp	r3, #47	; 0x2f
 8001d50:	f040 80ea 	bne.w	8001f28 <packetRead+0xf38>
						temp_pointer = -2;
 8001d54:	f06f 0301 	mvn.w	r3, #1
 8001d58:	62fb      	str	r3, [r7, #44]	; 0x2c
						conveyor_speed           = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	4413      	add	r3, r2
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fbdb 	bl	8000524 <__aeabi_i2d>
 8001d6e:	a3ac      	add	r3, pc, #688	; (adr r3, 8002020 <packetRead+0x1030>)
 8001d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d74:	f7fe fc40 	bl	80005f8 <__aeabi_dmul>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	49aa      	ldr	r1, [pc, #680]	; (8002028 <packetRead+0x1038>)
 8001d7e:	e9c1 2300 	strd	r2, r3, [r1]
						PUT_DOWN_TIME_ON_SLOT 	 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d84:	3304      	adds	r3, #4
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fbc7 	bl	8000524 <__aeabi_i2d>
 8001d96:	a3a2      	add	r3, pc, #648	; (adr r3, 8002020 <packetRead+0x1030>)
 8001d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9c:	f7fe fc2c 	bl	80005f8 <__aeabi_dmul>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	49a1      	ldr	r1, [pc, #644]	; (800202c <packetRead+0x103c>)
 8001da6:	e9c1 2300 	strd	r2, r3, [r1]
						PUT_DOWN_TIME_ON_OBJECT	 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dac:	3304      	adds	r3, #4
 8001dae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4413      	add	r3, r2
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fbb3 	bl	8000524 <__aeabi_i2d>
 8001dbe:	a398      	add	r3, pc, #608	; (adr r3, 8002020 <packetRead+0x1030>)
 8001dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc4:	f7fe fc18 	bl	80005f8 <__aeabi_dmul>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4998      	ldr	r1, [pc, #608]	; (8002030 <packetRead+0x1040>)
 8001dce:	e9c1 2300 	strd	r2, r3, [r1]
						PICK_UP_TIME_ON_OBJECT 	 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	4413      	add	r3, r2
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fb9f 	bl	8000524 <__aeabi_i2d>
 8001de6:	a38e      	add	r3, pc, #568	; (adr r3, 8002020 <packetRead+0x1030>)
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	f7fe fc04 	bl	80005f8 <__aeabi_dmul>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	498f      	ldr	r1, [pc, #572]	; (8002034 <packetRead+0x1044>)
 8001df6:	e9c1 2300 	strd	r2, r3, [r1]
						PICK_UP_TIME_ON_SLOT	 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4413      	add	r3, r2
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fb8b 	bl	8000524 <__aeabi_i2d>
 8001e0e:	a384      	add	r3, pc, #528	; (adr r3, 8002020 <packetRead+0x1030>)
 8001e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e14:	f7fe fbf0 	bl	80005f8 <__aeabi_dmul>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4986      	ldr	r1, [pc, #536]	; (8002038 <packetRead+0x1048>)
 8001e1e:	e9c1 2300 	strd	r2, r3, [r1]
						MOVE_TIME 				 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e24:	3304      	adds	r3, #4
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fb77 	bl	8000524 <__aeabi_i2d>
 8001e36:	a37a      	add	r3, pc, #488	; (adr r3, 8002020 <packetRead+0x1030>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fbdc 	bl	80005f8 <__aeabi_dmul>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	497d      	ldr	r1, [pc, #500]	; (800203c <packetRead+0x104c>)
 8001e46:	e9c1 2300 	strd	r2, r3, [r1]
						ATTACH_TIME 			 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4413      	add	r3, r2
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fb63 	bl	8000524 <__aeabi_i2d>
 8001e5e:	a370      	add	r3, pc, #448	; (adr r3, 8002020 <packetRead+0x1030>)
 8001e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e64:	f7fe fbc8 	bl	80005f8 <__aeabi_dmul>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4974      	ldr	r1, [pc, #464]	; (8002040 <packetRead+0x1050>)
 8001e6e:	e9c1 2300 	strd	r2, r3, [r1]
						DETACH_TIME 			 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e74:	3304      	adds	r3, #4
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fb4f 	bl	8000524 <__aeabi_i2d>
 8001e86:	a366      	add	r3, pc, #408	; (adr r3, 8002020 <packetRead+0x1030>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7fe fbb4 	bl	80005f8 <__aeabi_dmul>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	496b      	ldr	r1, [pc, #428]	; (8002044 <packetRead+0x1054>)
 8001e96:	e9c1 2300 	strd	r2, r3, [r1]
						UP_HEIGHT 				 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fb3b 	bl	8000524 <__aeabi_i2d>
 8001eae:	a35c      	add	r3, pc, #368	; (adr r3, 8002020 <packetRead+0x1030>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fba0 	bl	80005f8 <__aeabi_dmul>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4962      	ldr	r1, [pc, #392]	; (8002048 <packetRead+0x1058>)
 8001ebe:	e9c1 2300 	strd	r2, r3, [r1]
						DOWN_HEIGHT_ON_OBJECT 	 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4413      	add	r3, r2
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fb27 	bl	8000524 <__aeabi_i2d>
 8001ed6:	a352      	add	r3, pc, #328	; (adr r3, 8002020 <packetRead+0x1030>)
 8001ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001edc:	f7fe fb8c 	bl	80005f8 <__aeabi_dmul>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4959      	ldr	r1, [pc, #356]	; (800204c <packetRead+0x105c>)
 8001ee6:	e9c1 2300 	strd	r2, r3, [r1]
						DOWN_HEIGHT_ON_SLOT 	 = (double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eec:	3304      	adds	r3, #4
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fb13 	bl	8000524 <__aeabi_i2d>
 8001efe:	a348      	add	r3, pc, #288	; (adr r3, 8002020 <packetRead+0x1030>)
 8001f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f04:	f7fe fb78 	bl	80005f8 <__aeabi_dmul>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4950      	ldr	r1, [pc, #320]	; (8002050 <packetRead+0x1060>)
 8001f0e:	e9c1 2300 	strd	r2, r3, [r1]
						pnp_move_option 		 = message[temp_pointer+=4];
 8001f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f14:	3304      	adds	r3, #4
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	781a      	ldrb	r2, [r3, #0]
 8001f20:	4b4c      	ldr	r3, [pc, #304]	; (8002054 <packetRead+0x1064>)
 8001f22:	701a      	strb	r2, [r3, #0]
						return CMD_SETUP_PNP_CONFIGURE;
 8001f24:	231a      	movs	r3, #26
 8001f26:	e0cb      	b.n	80020c0 <packetRead+0x10d0>
					}else{
						return CMD_ERROR;
 8001f28:	2317      	movs	r3, #23
 8001f2a:	e0c9      	b.n	80020c0 <packetRead+0x10d0>
					}
				}
				break;
				case CMD_GCODE_CONFIGURE:
				{
					if(length == 18) { // 4 int32_t number + 2 define byte
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b12      	cmp	r3, #18
 8001f30:	d154      	bne.n	8001fdc <packetRead+0xfec>
						temp_pointer = -2;
 8001f32:	f06f 0301 	mvn.w	r3, #1
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
						offset_x = 	(double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4413      	add	r3, r2
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe faec 	bl	8000524 <__aeabi_i2d>
 8001f4c:	a334      	add	r3, pc, #208	; (adr r3, 8002020 <packetRead+0x1030>)
 8001f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f52:	f7fe fb51 	bl	80005f8 <__aeabi_dmul>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	493f      	ldr	r1, [pc, #252]	; (8002058 <packetRead+0x1068>)
 8001f5c:	e9c1 2300 	strd	r2, r3, [r1]
						offset_y = 	(double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f62:	3304      	adds	r3, #4
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fad8 	bl	8000524 <__aeabi_i2d>
 8001f74:	a32a      	add	r3, pc, #168	; (adr r3, 8002020 <packetRead+0x1030>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	f7fe fb3d 	bl	80005f8 <__aeabi_dmul>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4936      	ldr	r1, [pc, #216]	; (800205c <packetRead+0x106c>)
 8001f84:	e9c1 2300 	strd	r2, r3, [r1]
						offset_z = 	(double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fac4 	bl	8000524 <__aeabi_i2d>
 8001f9c:	a320      	add	r3, pc, #128	; (adr r3, 8002020 <packetRead+0x1030>)
 8001f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa2:	f7fe fb29 	bl	80005f8 <__aeabi_dmul>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	492d      	ldr	r1, [pc, #180]	; (8002060 <packetRead+0x1070>)
 8001fac:	e9c1 2300 	strd	r2, r3, [r1]
						roll_angle =(double)B2I(temp_pointer+=4)*DATA_INVERSE_SCALE;
 8001fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4413      	add	r3, r2
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fab0 	bl	8000524 <__aeabi_i2d>
 8001fc4:	a316      	add	r3, pc, #88	; (adr r3, 8002020 <packetRead+0x1030>)
 8001fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fca:	f7fe fb15 	bl	80005f8 <__aeabi_dmul>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4924      	ldr	r1, [pc, #144]	; (8002064 <packetRead+0x1074>)
 8001fd4:	e9c1 2300 	strd	r2, r3, [r1]
						return CMD_GCODE_CONFIGURE;
 8001fd8:	2312      	movs	r3, #18
 8001fda:	e071      	b.n	80020c0 <packetRead+0x10d0>
					}else{
						return CMD_ERROR;
 8001fdc:	2317      	movs	r3, #23
 8001fde:	e06f      	b.n	80020c0 <packetRead+0x10d0>
					}
				}
				break;
				case CMD_GCODE_RUN:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RUN;
 8001fec:	2314      	movs	r3, #20
 8001fee:	e067      	b.n	80020c0 <packetRead+0x10d0>
				}
				break;
				case CMD_GCODE_STOP:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_STOP;
 8001ffc:	230e      	movs	r3, #14
 8001ffe:	e05f      	b.n	80020c0 <packetRead+0x10d0>
				}
				break;
				case CMD_GCODE_PAUSE:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	2202      	movs	r2, #2
 8002004:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_PAUSE;
 800200c:	230f      	movs	r3, #15
 800200e:	e057      	b.n	80020c0 <packetRead+0x10d0>
				}
				break;
				case CMD_GCODE_RESUME:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	2202      	movs	r2, #2
 8002014:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RESUME;
 800201c:	2313      	movs	r3, #19
 800201e:	e04f      	b.n	80020c0 <packetRead+0x10d0>
 8002020:	a0000000 	.word	0xa0000000
 8002024:	3ec0c6f7 	.word	0x3ec0c6f7
 8002028:	20000058 	.word	0x20000058
 800202c:	20000008 	.word	0x20000008
 8002030:	20000010 	.word	0x20000010
 8002034:	20000018 	.word	0x20000018
 8002038:	20000020 	.word	0x20000020
 800203c:	20000028 	.word	0x20000028
 8002040:	20000030 	.word	0x20000030
 8002044:	20000038 	.word	0x20000038
 8002048:	20000040 	.word	0x20000040
 800204c:	20000048 	.word	0x20000048
 8002050:	20000050 	.word	0x20000050
 8002054:	20000064 	.word	0x20000064
 8002058:	20008fa8 	.word	0x20008fa8
 800205c:	2000fd50 	.word	0x2000fd50
 8002060:	2000fd40 	.word	0x2000fd40
 8002064:	20008fa0 	.word	0x20008fa0
				}
				break;
				case CMD_STEP_ON_OFF:
				{
					if(length == 3){ //1 byte status + 2 define byte
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b03      	cmp	r3, #3
 800206c:	d121      	bne.n	80020b2 <packetRead+0x10c2>
						temp_pointer = 2;
 800206e:	2302      	movs	r3, #2
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
						if(message[temp_pointer] == 1){
 8002072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d109      	bne.n	8002092 <packetRead+0x10a2>
							step_status = 1;
 800207e:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <packetRead+0x10d8>)
 8002080:	2201      	movs	r2, #1
 8002082:	701a      	strb	r2, [r3, #0]
							HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8002084:	2200      	movs	r2, #0
 8002086:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800208a:	4810      	ldr	r0, [pc, #64]	; (80020cc <packetRead+0x10dc>)
 800208c:	f009 fab4 	bl	800b5f8 <HAL_GPIO_WritePin>
 8002090:	e011      	b.n	80020b6 <packetRead+0x10c6>
						}else if(message[temp_pointer] == 0){
 8002092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10b      	bne.n	80020b6 <packetRead+0x10c6>
							step_status = 0;
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <packetRead+0x10d8>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
							HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET);
 80020a4:	2201      	movs	r2, #1
 80020a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020aa:	4808      	ldr	r0, [pc, #32]	; (80020cc <packetRead+0x10dc>)
 80020ac:	f009 faa4 	bl	800b5f8 <HAL_GPIO_WritePin>
 80020b0:	e001      	b.n	80020b6 <packetRead+0x10c6>
						}
					}else{
						return CMD_ERROR;
 80020b2:	2317      	movs	r3, #23
 80020b4:	e004      	b.n	80020c0 <packetRead+0x10d0>
					}
					return CMD_STEP_ON_OFF;
 80020b6:	230d      	movs	r3, #13
 80020b8:	e002      	b.n	80020c0 <packetRead+0x10d0>
				}
				break;
				//Unknow command id
				default:
				{
					return CMD_ERROR;
 80020ba:	2317      	movs	r3, #23
 80020bc:	e000      	b.n	80020c0 <packetRead+0x10d0>
        break;

        //unknow protocol id
        default:
        {
            return PROTOCOL_ERROR;
 80020be:	2318      	movs	r3, #24
        }
    }
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3730      	adds	r7, #48	; 0x30
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	2000fd28 	.word	0x2000fd28
 80020cc:	40020000 	.word	0x40020000

080020d0 <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail, int32_t *detail_length) {
 80020d0:	b082      	sub	sp, #8
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b0ce      	sub	sp, #312	; 0x138
 80020d6:	af24      	add	r7, sp, #144	; 0x90
 80020d8:	4601      	mov	r1, r0
 80020da:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80020de:	e880 000c 	stmia.w	r0, {r2, r3}
 80020e2:	460b      	mov	r3, r1
 80020e4:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	2b1b      	cmp	r3, #27
 80020ea:	f200 81cb 	bhi.w	8002484 <commandReply+0x3b4>
 80020ee:	a201      	add	r2, pc, #4	; (adr r2, 80020f4 <commandReply+0x24>)
 80020f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f4:	08002165 	.word	0x08002165
 80020f8:	08002165 	.word	0x08002165
 80020fc:	08002165 	.word	0x08002165
 8002100:	08002165 	.word	0x08002165
 8002104:	08002165 	.word	0x08002165
 8002108:	08002165 	.word	0x08002165
 800210c:	08002165 	.word	0x08002165
 8002110:	0800216d 	.word	0x0800216d
 8002114:	080021e7 	.word	0x080021e7
 8002118:	0800221b 	.word	0x0800221b
 800211c:	0800231f 	.word	0x0800231f
 8002120:	08002349 	.word	0x08002349
 8002124:	08002165 	.word	0x08002165
 8002128:	08002429 	.word	0x08002429
 800212c:	080023b7 	.word	0x080023b7
 8002130:	080023b7 	.word	0x080023b7
 8002134:	080023b7 	.word	0x080023b7
 8002138:	080023b7 	.word	0x080023b7
 800213c:	0800238f 	.word	0x0800238f
 8002140:	080023b7 	.word	0x080023b7
 8002144:	080023b7 	.word	0x080023b7
 8002148:	080023bf 	.word	0x080023bf
 800214c:	080023c7 	.word	0x080023c7
 8002150:	08002407 	.word	0x08002407
 8002154:	08002485 	.word	0x08002485
 8002158:	08002165 	.word	0x08002165
 800215c:	08002341 	.word	0x08002341
 8002160:	08002351 	.word	0x08002351
	case CMD_MOTOR_TEST:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_OBJECT_DETECTED:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 8002164:	2309      	movs	r3, #9
 8002166:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		break;
 800216a:	e19b      	b.n	80024a4 <commandReply+0x3d4>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.arc_dir) {
 800216c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002170:	2b01      	cmp	r3, #1
 8002172:	d110      	bne.n	8002196 <commandReply+0xc6>
				scaraSetOutput(1);
 8002174:	2001      	movs	r0, #1
 8002176:	f007 fc17 	bl	80099a8 <scaraSetOutput>
				// strcpy( (char *)detail, "Output ON");
				// detail_length += 9;
				detail[(*detail_length)++] = OUTPUT_ON;
 800217a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	1c59      	adds	r1, r3, #1
 8002182:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8002186:	6011      	str	r1, [r2, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800218e:	4413      	add	r3, r2
 8002190:	220d      	movs	r2, #13
 8002192:	701a      	strb	r2, [r3, #0]
 8002194:	e023      	b.n	80021de <commandReply+0x10e>
			} else if (0 == duty_cmd.arc_dir) {
 8002196:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800219a:	2b00      	cmp	r3, #0
 800219c:	d110      	bne.n	80021c0 <commandReply+0xf0>
				scaraSetOutput(0);
 800219e:	2000      	movs	r0, #0
 80021a0:	f007 fc02 	bl	80099a8 <scaraSetOutput>
				detail[(*detail_length)++] = OUTPUT_OFF;
 80021a4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	1c59      	adds	r1, r3, #1
 80021ac:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80021b0:	6011      	str	r1, [r2, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80021b8:	4413      	add	r3, r2
 80021ba:	220e      	movs	r2, #14
 80021bc:	701a      	strb	r2, [r3, #0]
 80021be:	e00e      	b.n	80021de <commandReply+0x10e>
			} else {
				// strcpy( (char *)detail, "Wrong Value");
				// detail_length += 11;
				detail[(*detail_length)++] = WRONG_OUTPUT_VALUE ;
 80021c0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	1c59      	adds	r1, r3, #1
 80021c8:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80021cc:	6011      	str	r1, [r2, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80021d4:	4413      	add	r3, r2
 80021d6:	2211      	movs	r2, #17
 80021d8:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 80021da:	2307      	movs	r3, #7
 80021dc:	e164      	b.n	80024a8 <commandReply+0x3d8>
			}
			ret = RPD_OK;
 80021de:	2308      	movs	r3, #8
 80021e0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		}
		break;
 80021e4:	e15e      	b.n	80024a4 <commandReply+0x3d4>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 80021e6:	f007 fc31 	bl	8009a4c <scaraGetMode>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
			current_state	 = scaraGetDutyState();
 80021f0:	f007 fc44 	bl	8009a7c <scaraGetDutyState>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 80021fa:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d107      	bne.n	8002212 <commandReply+0x142>
 8002202:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8002206:	2b00      	cmp	r3, #0
 8002208:	d103      	bne.n	8002212 <commandReply+0x142>
				ret = RPD_IDLE;
 800220a:	2300      	movs	r3, #0
 800220c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 8002210:	e148      	b.n	80024a4 <commandReply+0x3d4>
				ret = RPD_BUSY;
 8002212:	2301      	movs	r3, #1
 8002214:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		break;
 8002218:	e144      	b.n	80024a4 <commandReply+0x3d4>
	case CMD_READ_POSITION:
		{
//			SCARA_PositionTypeDef position;
			if(position_type == READ_CONTINUOUS_ENABLE){
 800221a:	4ba7      	ldr	r3, [pc, #668]	; (80024b8 <commandReply+0x3e8>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d113      	bne.n	800224a <commandReply+0x17a>
				detail[(*detail_length)++] = POSREAD_CONTINUOUS_ENABLE;
 8002222:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	1c59      	adds	r1, r3, #1
 800222a:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800222e:	6011      	str	r1, [r2, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002236:	4413      	add	r3, r2
 8002238:	2212      	movs	r2, #18
 800223a:	701a      	strb	r2, [r3, #0]
//				lowlayer_readTruePosition(&position);
//				kinematicForward(&position);
//				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
//					scaraUpdatePosition(&position);
//				}
				ret = RPD_OK;
 800223c:	2308      	movs	r3, #8
 800223e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				continuous_update = 1;
 8002242:	4b9e      	ldr	r3, [pc, #632]	; (80024bc <commandReply+0x3ec>)
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
			}
//			*detail_length = scaraPosition_packaging(detail, position);
//			ret =  RPD_POSITION;
//			ret =  RPD_OK;
		}
		break;
 8002248:	e12c      	b.n	80024a4 <commandReply+0x3d4>
			}else if(position_type == READ_CONTINUOUS_DISABLE){
 800224a:	4b9b      	ldr	r3, [pc, #620]	; (80024b8 <commandReply+0x3e8>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d113      	bne.n	800227a <commandReply+0x1aa>
				detail[(*detail_length)++] = POSREAD_CONTINUOUS_DISABLE;
 8002252:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	1c59      	adds	r1, r3, #1
 800225a:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800225e:	6011      	str	r1, [r2, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002266:	4413      	add	r3, r2
 8002268:	2213      	movs	r2, #19
 800226a:	701a      	strb	r2, [r3, #0]
				continuous_update = 0;
 800226c:	4b93      	ldr	r3, [pc, #588]	; (80024bc <commandReply+0x3ec>)
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]
				ret = RPD_OK;
 8002272:	2308      	movs	r3, #8
 8002274:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		break;
 8002278:	e114      	b.n	80024a4 <commandReply+0x3d4>
			}else if(position_type == POSITION_UPDATE){
 800227a:	4b8f      	ldr	r3, [pc, #572]	; (80024b8 <commandReply+0x3e8>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d11f      	bne.n	80022c2 <commandReply+0x1f2>
				detail[(*detail_length)++] = UPDATE_REAL_POS;
 8002282:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	1c59      	adds	r1, r3, #1
 800228a:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800228e:	6011      	str	r1, [r2, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002296:	4413      	add	r3, r2
 8002298:	2214      	movs	r2, #20
 800229a:	701a      	strb	r2, [r3, #0]
				lowlayer_readTruePosition(&position);
 800229c:	f107 0308 	add.w	r3, r7, #8
 80022a0:	4618      	mov	r0, r3
 80022a2:	f003 fd75 	bl	8005d90 <lowlayer_readTruePosition>
				kinematicForward(&position);
 80022a6:	f107 0308 	add.w	r3, r7, #8
 80022aa:	4618      	mov	r0, r3
 80022ac:	f002 fe34 	bl	8004f18 <kinematicForward>
				scaraUpdatePosition(&position);
 80022b0:	f107 0308 	add.w	r3, r7, #8
 80022b4:	4618      	mov	r0, r3
 80022b6:	f007 fbb9 	bl	8009a2c <scaraUpdatePosition>
				ret = RPD_OK;
 80022ba:	2308      	movs	r3, #8
 80022bc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		break;
 80022c0:	e0f0      	b.n	80024a4 <commandReply+0x3d4>
			}else if(position_type == READ_REAL_DATA){
 80022c2:	4b7d      	ldr	r3, [pc, #500]	; (80024b8 <commandReply+0x3e8>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	d11a      	bne.n	8002300 <commandReply+0x230>
				lowlayer_readTruePosition(&position);
 80022ca:	f107 0308 	add.w	r3, r7, #8
 80022ce:	4618      	mov	r0, r3
 80022d0:	f003 fd5e 	bl	8005d90 <lowlayer_readTruePosition>
				*detail_length = scaraPosition_packaging(detail, position);
 80022d4:	4668      	mov	r0, sp
 80022d6:	f107 0310 	add.w	r3, r7, #16
 80022da:	2290      	movs	r2, #144	; 0x90
 80022dc:	4619      	mov	r1, r3
 80022de:	f012 ff87 	bl	80151f0 <memcpy>
 80022e2:	f107 0308 	add.w	r3, r7, #8
 80022e6:	cb0c      	ldmia	r3, {r2, r3}
 80022e8:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80022ec:	f007 fbf8 	bl	8009ae0 <scaraPosition_packaging>
 80022f0:	4602      	mov	r2, r0
 80022f2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80022f6:	601a      	str	r2, [r3, #0]
				ret =  RPD_POSITION;
 80022f8:	2302      	movs	r3, #2
 80022fa:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		break;
 80022fe:	e0d1      	b.n	80024a4 <commandReply+0x3d4>
				detail[(*detail_length)++] = WRONG_READ_POSITION_TYPE;
 8002300:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	1c59      	adds	r1, r3, #1
 8002308:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800230c:	6011      	str	r1, [r2, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002314:	4413      	add	r3, r2
 8002316:	2215      	movs	r2, #21
 8002318:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 800231a:	2307      	movs	r3, #7
 800231c:	e0c4      	b.n	80024a8 <commandReply+0x3d8>
	case CMD_TEST_METHOD_SETTING:
		detail[(*detail_length)++] = TEST_VALUE_SETTING;
 800231e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	1c59      	adds	r1, r3, #1
 8002326:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800232a:	6011      	str	r1, [r2, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002332:	4413      	add	r3, r2
 8002334:	2216      	movs	r2, #22
 8002336:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8002338:	2308      	movs	r3, #8
 800233a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		break;
 800233e:	e0b1      	b.n	80024a4 <commandReply+0x3d4>
	case CMD_SETUP_PNP_CONFIGURE:
		ret = RPD_OK;
 8002340:	2308      	movs	r3, #8
 8002342:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		break;
 8002346:	e0ad      	b.n	80024a4 <commandReply+0x3d4>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 8002348:	2309      	movs	r3, #9
 800234a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		break;
 800234e:	e0a9      	b.n	80024a4 <commandReply+0x3d4>
	case CMD_GCODE:{
		if(point_counter == total_num_of_point){
 8002350:	4b5b      	ldr	r3, [pc, #364]	; (80024c0 <commandReply+0x3f0>)
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	4b5b      	ldr	r3, [pc, #364]	; (80024c4 <commandReply+0x3f4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d113      	bne.n	8002386 <commandReply+0x2b6>
			Gcode_data_available = 1;
 800235e:	4b5a      	ldr	r3, [pc, #360]	; (80024c8 <commandReply+0x3f8>)
 8002360:	2201      	movs	r2, #1
 8002362:	701a      	strb	r2, [r3, #0]
			detail[(*detail_length)++] = GCODE_TRANSFER_FINISH;
 8002364:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	1c59      	adds	r1, r3, #1
 800236c:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8002370:	6011      	str	r1, [r2, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002378:	4413      	add	r3, r2
 800237a:	2223      	movs	r2, #35	; 0x23
 800237c:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 800237e:	2308      	movs	r3, #8
 8002380:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		}else{
			ret = RPD_TRANSFER;
		}
	}
	break;
 8002384:	e08e      	b.n	80024a4 <commandReply+0x3d4>
			ret = RPD_TRANSFER;
 8002386:	230a      	movs	r3, #10
 8002388:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	break;
 800238c:	e08a      	b.n	80024a4 <commandReply+0x3d4>
	case CMD_GCODE_CONFIGURE:
	{
		offset_data_available = 1;
 800238e:	4b4f      	ldr	r3, [pc, #316]	; (80024cc <commandReply+0x3fc>)
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = GCODE_OFFSET_CONFIGURE;
 8002394:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	1c59      	adds	r1, r3, #1
 800239c:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80023a0:	6011      	str	r1, [r2, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80023a8:	4413      	add	r3, r2
 80023aa:	2226      	movs	r2, #38	; 0x26
 80023ac:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 80023ae:	2308      	movs	r3, #8
 80023b0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	}
	break;
 80023b4:	e076      	b.n	80024a4 <commandReply+0x3d4>
	case CMD_GCODE_PAUSE:
	case CMD_JOB_PUSH_MOVE_LINE:
	case CMD_JOB_PUSH_MOVE_JOINT:
	case CMD_GCODE_RESUME:
	case CMD_GCODE_RUN:
		ret = RPD_DUTY;
 80023b6:	2309      	movs	r3, #9
 80023b8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		break;
 80023bc:	e072      	b.n	80024a4 <commandReply+0x3d4>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 80023be:	2309      	movs	r3, #9
 80023c0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		break;
 80023c4:	e06e      	b.n	80024a4 <commandReply+0x3d4>
	case CMD_KEY_SPEED:{
		detail[(*detail_length)++] = MANUAL_SPEED;
 80023c6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	1c59      	adds	r1, r3, #1
 80023ce:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80023d2:	6011      	str	r1, [r2, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80023da:	4413      	add	r3, r2
 80023dc:	221b      	movs	r2, #27
 80023de:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = (uint8_t)(duty_cmd.key_speed);
 80023e0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80023e4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	1c59      	adds	r1, r3, #1
 80023ec:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80023f0:	6011      	str	r1, [r2, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80023f8:	4413      	add	r3, r2
 80023fa:	b2c2      	uxtb	r2, r0
 80023fc:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 80023fe:	2308      	movs	r3, #8
 8002400:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	}
		break;
 8002404:	e04e      	b.n	80024a4 <commandReply+0x3d4>
	case CMD_ERROR:{
		detail[(*detail_length)++] = CHECK_PARAMETER;
 8002406:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	1c59      	adds	r1, r3, #1
 800240e:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8002412:	6011      	str	r1, [r2, #0]
 8002414:	461a      	mov	r2, r3
 8002416:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800241a:	4413      	add	r3, r2
 800241c:	221a      	movs	r2, #26
 800241e:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 8002420:	2307      	movs	r3, #7
 8002422:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	}
		break;
 8002426:	e03d      	b.n	80024a4 <commandReply+0x3d4>
	case CMD_STEP_ON_OFF:{
		if(step_status == 1){
 8002428:	4b29      	ldr	r3, [pc, #164]	; (80024d0 <commandReply+0x400>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d110      	bne.n	8002452 <commandReply+0x382>
			detail[(*detail_length)++] = STEP_ON;
 8002430:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	1c59      	adds	r1, r3, #1
 8002438:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800243c:	6011      	str	r1, [r2, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002444:	4413      	add	r3, r2
 8002446:	220f      	movs	r2, #15
 8002448:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 800244a:	2308      	movs	r3, #8
 800244c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			ret = RPD_OK;
		}else{
			ret = RPD_ERROR;
		}
	}
	break;
 8002450:	e028      	b.n	80024a4 <commandReply+0x3d4>
		}else if(step_status == 0){
 8002452:	4b1f      	ldr	r3, [pc, #124]	; (80024d0 <commandReply+0x400>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d110      	bne.n	800247c <commandReply+0x3ac>
			detail[(*detail_length)++] = STEP_OFF;
 800245a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	1c59      	adds	r1, r3, #1
 8002462:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8002466:	6011      	str	r1, [r2, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800246e:	4413      	add	r3, r2
 8002470:	2210      	movs	r2, #16
 8002472:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 8002474:	2308      	movs	r3, #8
 8002476:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	break;
 800247a:	e013      	b.n	80024a4 <commandReply+0x3d4>
			ret = RPD_ERROR;
 800247c:	2307      	movs	r3, #7
 800247e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	break;
 8002482:	e00f      	b.n	80024a4 <commandReply+0x3d4>
	default:
		detail[(*detail_length)++] = UNKNOW_COMMAND;
 8002484:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	1c59      	adds	r1, r3, #1
 800248c:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8002490:	6011      	str	r1, [r2, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002498:	4413      	add	r3, r2
 800249a:	221c      	movs	r2, #28
 800249c:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 800249e:	2307      	movs	r3, #7
 80024a0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	}
	return ret;
 80024a4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	37a8      	adds	r7, #168	; 0xa8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024b2:	b002      	add	sp, #8
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	2000fd38 	.word	0x2000fd38
 80024bc:	2000440a 	.word	0x2000440a
 80024c0:	20004406 	.word	0x20004406
 80024c4:	20008fb0 	.word	0x20008fb0
 80024c8:	20004405 	.word	0x20004405
 80024cc:	20004404 	.word	0x20004404
 80024d0:	2000fd28 	.word	0x2000fd28

080024d4 <commandRespond1>:

int32_t				commandRespond1	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										int32_t detail_length,
										char *respond) {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	4603      	mov	r3, r0
 80024e2:	73fb      	strb	r3, [r7, #15]
	int32_t out_length = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
	respond[out_length++] = 0x28;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	617a      	str	r2, [r7, #20]
 80024ee:	461a      	mov	r2, r3
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	4413      	add	r3, r2
 80024f4:	2228      	movs	r2, #40	; 0x28
 80024f6:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	617a      	str	r2, [r7, #20]
 80024fe:	461a      	mov	r2, r3
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	4413      	add	r3, r2
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = RESPONSE_TRANSMISION;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	617a      	str	r2, [r7, #20]
 800250e:	461a      	mov	r2, r3
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	4413      	add	r3, r2
 8002514:	2202      	movs	r2, #2
 8002516:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = rpd;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	617a      	str	r2, [r7, #20]
 800251e:	461a      	mov	r2, r3
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	4413      	add	r3, r2
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = id_command;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	617a      	str	r2, [r7, #20]
 800252e:	461a      	mov	r2, r3
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	4413      	add	r3, r2
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	701a      	strb	r2, [r3, #0]
	if(detail_length != 0){
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00c      	beq.n	800255a <commandRespond1+0x86>
		memcpy(&respond[out_length], detail, detail_length);
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	6a3a      	ldr	r2, [r7, #32]
 8002544:	4413      	add	r3, r2
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4618      	mov	r0, r3
 800254c:	f012 fe50 	bl	80151f0 <memcpy>
		out_length += detail_length;
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	4413      	add	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	e007      	b.n	800256a <commandRespond1+0x96>
	}else{
		respond[out_length++] = NONE;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	617a      	str	r2, [r7, #20]
 8002560:	461a      	mov	r2, r3
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	4413      	add	r3, r2
 8002566:	222f      	movs	r2, #47	; 0x2f
 8002568:	701a      	strb	r2, [r3, #0]
	}
	respond[out_length++] = 0x7d;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	617a      	str	r2, [r7, #20]
 8002570:	461a      	mov	r2, r3
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	4413      	add	r3, r2
 8002576:	227d      	movs	r2, #125	; 0x7d
 8002578:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0x29;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	617a      	str	r2, [r7, #20]
 8002580:	461a      	mov	r2, r3
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	4413      	add	r3, r2
 8002586:	2229      	movs	r2, #41	; 0x29
 8002588:	701a      	strb	r2, [r3, #0]
	respond[1] = out_length - 2;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	3301      	adds	r3, #1
 8002592:	3a02      	subs	r2, #2
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	701a      	strb	r2, [r3, #0]
	return out_length;
 8002598:	697b      	ldr	r3, [r7, #20]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b096      	sub	sp, #88	; 0x58
 80025a8:	af02      	add	r7, sp, #8
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 80025b0:	887a      	ldrh	r2, [r7, #2]
 80025b2:	f107 0008 	add.w	r0, r7, #8
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	4613      	mov	r3, r2
 80025bc:	4a17      	ldr	r2, [pc, #92]	; (800261c <LOG_REPORT+0x78>)
 80025be:	213f      	movs	r1, #63	; 0x3f
 80025c0:	f013 fd80 	bl	80160c4 <sniprintf>
 80025c4:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 80025c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d101      	bne.n	80025d2 <LOG_REPORT+0x2e>
		return FALSE;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e01f      	b.n	8002612 <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 80025d2:	f107 0308 	add.w	r3, r7, #8
 80025d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025d8:	4619      	mov	r1, r3
 80025da:	4811      	ldr	r0, [pc, #68]	; (8002620 <LOG_REPORT+0x7c>)
 80025dc:	f003 f8f8 	bl	80057d0 <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 80025e0:	4810      	ldr	r0, [pc, #64]	; (8002624 <LOG_REPORT+0x80>)
 80025e2:	f008 fd7f 	bl	800b0e4 <HAL_DMA_GetState>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d101      	bne.n	80025f0 <LOG_REPORT+0x4c>
		return TRUE;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e010      	b.n	8002612 <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 80025f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025f4:	490c      	ldr	r1, [pc, #48]	; (8002628 <LOG_REPORT+0x84>)
 80025f6:	480a      	ldr	r0, [pc, #40]	; (8002620 <LOG_REPORT+0x7c>)
 80025f8:	f003 f912 	bl	8005820 <ringBuff_PopArray>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 8002602:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002606:	461a      	mov	r2, r3
 8002608:	4907      	ldr	r1, [pc, #28]	; (8002628 <LOG_REPORT+0x84>)
 800260a:	4808      	ldr	r0, [pc, #32]	; (800262c <LOG_REPORT+0x88>)
 800260c:	f00b fae2 	bl	800dbd4 <HAL_UART_Transmit_DMA>
	return TRUE;
 8002610:	2301      	movs	r3, #1
}
 8002612:	4618      	mov	r0, r3
 8002614:	3750      	adds	r7, #80	; 0x50
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	0801b4a0 	.word	0x0801b4a0
 8002620:	20002074 	.word	0x20002074
 8002624:	20010d78 	.word	0x20010d78
 8002628:	2000fd70 	.word	0x2000fd70
 800262c:	20010d38 	.word	0x20010d38

08002630 <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_length, uint8_t*data_packet) {
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]

	int32_t data_length = in_length - 3;
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	3b03      	subs	r3, #3
 8002640:	617b      	str	r3, [r7, #20]
	uint16_t packet_length = *(uint16_t*)(&message_buff[1]);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002648:	827b      	strh	r3, [r7, #18]
	//check packet length
	if(packet_length == data_length && backup_available == 0){
 800264a:	8a7b      	ldrh	r3, [r7, #18]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	429a      	cmp	r2, r3
 8002650:	d119      	bne.n	8002686 <unPackPayload+0x56>
 8002652:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <unPackPayload+0xd8>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d115      	bne.n	8002686 <unPackPayload+0x56>
		// check minimum lenght
		if (in_length < MIN_MESSAGE_LENGHT) {
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b03      	cmp	r3, #3
 800265e:	dc02      	bgt.n	8002666 <unPackPayload+0x36>
			return -1;
 8002660:	f04f 33ff 	mov.w	r3, #4294967295
 8002664:	e04c      	b.n	8002700 <unPackPayload+0xd0>
		}

		// check start char
		if(message_buff[0] != START_CHAR){
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b28      	cmp	r3, #40	; 0x28
 800266c:	d002      	beq.n	8002674 <unPackPayload+0x44>
			return -1;
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
 8002672:	e045      	b.n	8002700 <unPackPayload+0xd0>
		}
		memcpy(data_packet, &message_buff[3], data_length - RECEIVE_END_LENGTH);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	1cd9      	adds	r1, r3, #3
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	3b02      	subs	r3, #2
 800267c:	461a      	mov	r2, r3
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f012 fdb6 	bl	80151f0 <memcpy>
 8002684:	e03a      	b.n	80026fc <unPackPayload+0xcc>
	}else if(packet_length != data_length && backup_available == 0){
 8002686:	8a7b      	ldrh	r3, [r7, #18]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	429a      	cmp	r2, r3
 800268c:	d01b      	beq.n	80026c6 <unPackPayload+0x96>
 800268e:	4b1e      	ldr	r3, [pc, #120]	; (8002708 <unPackPayload+0xd8>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d117      	bne.n	80026c6 <unPackPayload+0x96>
		// check start char
		if(message_buff[0] != START_CHAR){
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b28      	cmp	r3, #40	; 0x28
 800269c:	d002      	beq.n	80026a4 <unPackPayload+0x74>
			return -1;
 800269e:	f04f 33ff 	mov.w	r3, #4294967295
 80026a2:	e02d      	b.n	8002700 <unPackPayload+0xd0>
		}
		backup_available = 1;
 80026a4:	4b18      	ldr	r3, [pc, #96]	; (8002708 <unPackPayload+0xd8>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
		memcpy(data_packet, &message_buff[3], data_length);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	3303      	adds	r3, #3
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4619      	mov	r1, r3
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f012 fd9c 	bl	80151f0 <memcpy>
		backup_length = data_length;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	4b13      	ldr	r3, [pc, #76]	; (800270c <unPackPayload+0xdc>)
 80026be:	801a      	strh	r2, [r3, #0]
		return - 1;
 80026c0:	f04f 33ff 	mov.w	r3, #4294967295
 80026c4:	e01c      	b.n	8002700 <unPackPayload+0xd0>
	}else if(backup_available == 1){
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <unPackPayload+0xd8>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d113      	bne.n	80026f6 <unPackPayload+0xc6>
		backup_available = 0;
 80026ce:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <unPackPayload+0xd8>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
		memcpy(&data_packet[backup_length], message_buff, in_length);
 80026d4:	4b0d      	ldr	r3, [pc, #52]	; (800270c <unPackPayload+0xdc>)
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4413      	add	r3, r2
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	68f9      	ldr	r1, [r7, #12]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f012 fd84 	bl	80151f0 <memcpy>
		data_length = backup_length + in_length;
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <unPackPayload+0xdc>)
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	4413      	add	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	e002      	b.n	80026fc <unPackPayload+0xcc>
	}else{
		return - 1;
 80026f6:	f04f 33ff 	mov.w	r3, #4294967295
 80026fa:	e001      	b.n	8002700 <unPackPayload+0xd0>
	}


	return data_length - RECEIVE_END_LENGTH;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	3b02      	subs	r3, #2
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	2000fe70 	.word	0x2000fe70
 800270c:	2000fe72 	.word	0x2000fe72

08002710 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	4b0c      	ldr	r3, [pc, #48]	; (800274c <MX_DMA_Init+0x3c>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	4a0b      	ldr	r2, [pc, #44]	; (800274c <MX_DMA_Init+0x3c>)
 8002720:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002724:	6313      	str	r3, [r2, #48]	; 0x30
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <MX_DMA_Init+0x3c>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002732:	2200      	movs	r2, #0
 8002734:	2105      	movs	r1, #5
 8002736:	200f      	movs	r0, #15
 8002738:	f008 f9f8 	bl	800ab2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800273c:	200f      	movs	r0, #15
 800273e:	f008 fa11 	bl	800ab64 <HAL_NVIC_EnableIRQ>

}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800

08002750 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4a07      	ldr	r2, [pc, #28]	; (800277c <vApplicationGetIdleTaskMemory+0x2c>)
 8002760:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	4a06      	ldr	r2, [pc, #24]	; (8002780 <vApplicationGetIdleTaskMemory+0x30>)
 8002766:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800276e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8002770:	bf00      	nop
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	2000440c 	.word	0x2000440c
 8002780:	20004460 	.word	0x20004460

08002784 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002784:	b5b0      	push	{r4, r5, r7, lr}
 8002786:	b094      	sub	sp, #80	; 0x50
 8002788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 800278a:	2300      	movs	r3, #0
 800278c:	64bb      	str	r3, [r7, #72]	; 0x48
 800278e:	2300      	movs	r3, #0
 8002790:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 8002792:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002796:	4618      	mov	r0, r3
 8002798:	f00f fa28 	bl	8011bec <osMutexCreate>
 800279c:	4603      	mov	r3, r0
 800279e:	4a1d      	ldr	r2, [pc, #116]	; (8002814 <MX_FREERTOS_Init+0x90>)
 80027a0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 80027a2:	2301      	movs	r3, #1
 80027a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80027a6:	f44f 73b8 	mov.w	r3, #368	; 0x170
 80027aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027b0:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 80027b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027b6:	2100      	movs	r1, #0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f00f fb2f 	bl	8011e1c <osMailCreate>
 80027be:	4603      	mov	r3, r0
 80027c0:	4a15      	ldr	r2, [pc, #84]	; (8002818 <MX_FREERTOS_Init+0x94>)
 80027c2:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2060);
 80027c4:	4b15      	ldr	r3, [pc, #84]	; (800281c <MX_FREERTOS_Init+0x98>)
 80027c6:	f107 041c 	add.w	r4, r7, #28
 80027ca:	461d      	mov	r5, r3
 80027cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80027d8:	f107 031c 	add.w	r3, r7, #28
 80027dc:	2100      	movs	r1, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	f00f f917 	bl	8011a12 <osThreadCreate>
 80027e4:	4603      	mov	r3, r0
 80027e6:	4a0e      	ldr	r2, [pc, #56]	; (8002820 <MX_FREERTOS_Init+0x9c>)
 80027e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <MX_FREERTOS_Init+0xa0>)
 80027ec:	463c      	mov	r4, r7
 80027ee:	461d      	mov	r5, r3
 80027f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 80027fc:	463b      	mov	r3, r7
 80027fe:	2100      	movs	r1, #0
 8002800:	4618      	mov	r0, r3
 8002802:	f00f f906 	bl	8011a12 <osThreadCreate>
 8002806:	4603      	mov	r3, r0
 8002808:	4a07      	ldr	r2, [pc, #28]	; (8002828 <MX_FREERTOS_Init+0xa4>)
 800280a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800280c:	bf00      	nop
 800280e:	3750      	adds	r7, #80	; 0x50
 8002810:	46bd      	mov	sp, r7
 8002812:	bdb0      	pop	{r4, r5, r7, pc}
 8002814:	2000fe78 	.word	0x2000fe78
 8002818:	2000fe7c 	.word	0x2000fe7c
 800281c:	0801b4dc 	.word	0x0801b4dc
 8002820:	2000fe74 	.word	0x2000fe74
 8002824:	0801b4f8 	.word	0x0801b4f8
 8002828:	2000fe80 	.word	0x2000fe80
 800282c:	00000000 	.word	0x00000000

08002830 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002834:	f6ad 7d28 	subw	sp, sp, #3880	; 0xf28
 8002838:	af58      	add	r7, sp, #352	; 0x160
 800283a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800283e:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002840:	f011 ff4c 	bl	80146dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 8002844:	2201      	movs	r2, #1
 8002846:	2110      	movs	r1, #16
 8002848:	48d9      	ldr	r0, [pc, #868]	; (8002bb0 <StartDefaultTask+0x380>)
 800284a:	f008 fed5 	bl	800b5f8 <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 800284e:	2300      	movs	r3, #0
 8002850:	f887 3dc7 	strb.w	r3, [r7, #3527]	; 0xdc7


  // Report buffer;
  uint8_t				update_pos_counter = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	f887 3dc6 	strb.w	r3, [r7, #3526]	; 0xdc6
//  int32_t				task_usb_lenght;
  int32_t 				total_respond_length;
//  int32_t 				detail_ptr;
  uint8_t				detail_array[80];

  uint8_t 				testing_value = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	f887 3dbf 	strb.w	r3, [r7, #3519]	; 0xdbf
  double 				value1 = 0;
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	f607 5188 	addw	r1, r7, #3464	; 0xd88
 800286c:	e9c1 2300 	strd	r2, r3, [r1]
  double 				value2 = 0;
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	f507 6158 	add.w	r1, r7, #3456	; 0xd80
 800287c:	e9c1 2300 	strd	r2, r3, [r1]
  double  				value3 = 0;
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	f607 5178 	addw	r1, r7, #3448	; 0xd78
 800288c:	e9c1 2300 	strd	r2, r3, [r1]
  int32_t					current_key_speed;
  double						run_time;

  SCARA_Pick_And_Place_Package Object[8];
  SCARA_Pick_And_Place_State  operation_state;
  uint8_t object_tail_pointer = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	f887 3da6 	strb.w	r3, [r7, #3494]	; 0xda6
  uint8_t object_head_pointer = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	f887 3da5 	strb.w	r3, [r7, #3493]	; 0xda5
  double state_time = 0;
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	f607 5198 	addw	r1, r7, #3480	; 0xd98
 80028a8:	e9c1 2300 	strd	r2, r3, [r1]
  int run_point = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f8c7 3d94 	str.w	r3, [r7, #3476]	; 0xd94
  const SCARA_Slot_TypeDef SLot_Cordinate[NUM_OF_OBJECT] = {
 80028b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028b6:	4abf      	ldr	r2, [pc, #764]	; (8002bb4 <StartDefaultTask+0x384>)
 80028b8:	4618      	mov	r0, r3
 80028ba:	4611      	mov	r1, r2
 80028bc:	2390      	movs	r3, #144	; 0x90
 80028be:	461a      	mov	r2, r3
 80028c0:	f012 fc96 	bl	80151f0 <memcpy>
  		{257.2121f, -76.9947f, 0.0f} ,
  		{258.221f, -47.1851f, 0.0f} ,
		{260.695f, -17.075f, 0.0f} ,
		{260.4f, 13.66f, 0.0f}
  };
  const double placement_spacing = -34.0f;
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	4bbb      	ldr	r3, [pc, #748]	; (8002bb8 <StartDefaultTask+0x388>)
 80028ca:	f507 6157 	add.w	r1, r7, #3440	; 0xd70
 80028ce:	e9c1 2300 	strd	r2, r3, [r1]
  uint8_t Slot_Placement[NUM_OF_OBJECT] = {
 80028d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028d6:	4ab9      	ldr	r2, [pc, #740]	; (8002bbc <StartDefaultTask+0x38c>)
 80028d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028dc:	6018      	str	r0, [r3, #0]
 80028de:	3304      	adds	r3, #4
 80028e0:	8019      	strh	r1, [r3, #0]
		  0, 0, 0, 0, 0, 0
  };

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 80028e2:	21f3      	movs	r1, #243	; 0xf3
 80028e4:	48b6      	ldr	r0, [pc, #728]	; (8002bc0 <StartDefaultTask+0x390>)
 80028e6:	f7ff fe5d 	bl	80025a4 <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 80028ea:	f007 f8bb 	bl	8009a64 <scaraGetMethod>
 80028ee:	4603      	mov	r3, r0
 80028f0:	f887 3dbe 	strb.w	r3, [r7, #3518]	; 0xdbe
  current_mode	 = scaraGetMode();
 80028f4:	f007 f8aa 	bl	8009a4c <scaraGetMode>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f887 3dbd 	strb.w	r3, [r7, #3517]	; 0xdbd
  current_duty_state	 = scaraGetDutyState();
 80028fe:	f007 f8bd 	bl	8009a7c <scaraGetDutyState>
 8002902:	4603      	mov	r3, r0
 8002904:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc

  // Start up robot
  scaraStartup();
 8002908:	f003 ff5e 	bl	80067c8 <scaraStartup>
  osDelay(10);
 800290c:	200a      	movs	r0, #10
 800290e:	f00f f8cc 	bl	8011aaa <osDelay>
//   positionNext.Theta2 = PI/3;
//   positionNext.D3 = 10;
//   positionNext.Theta4 = 0;
//   positionNext.t = 0;

  positionNext.Theta1 = -1.4345;
 8002912:	49ac      	ldr	r1, [pc, #688]	; (8002bc4 <StartDefaultTask+0x394>)
 8002914:	a39e      	add	r3, pc, #632	; (adr r3, 8002b90 <StartDefaultTask+0x360>)
 8002916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  positionNext.Theta2 = 1.7213f;
 800291e:	49a9      	ldr	r1, [pc, #676]	; (8002bc4 <StartDefaultTask+0x394>)
 8002920:	a39d      	add	r3, pc, #628	; (adr r3, 8002b98 <StartDefaultTask+0x368>)
 8002922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002926:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
  positionNext.D3 = 9.826;
 800292a:	49a6      	ldr	r1, [pc, #664]	; (8002bc4 <StartDefaultTask+0x394>)
 800292c:	a39c      	add	r3, pc, #624	; (adr r3, 8002ba0 <StartDefaultTask+0x370>)
 800292e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002932:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
  positionNext.Theta4 = 0.28676;
 8002936:	49a3      	ldr	r1, [pc, #652]	; (8002bc4 <StartDefaultTask+0x394>)
 8002938:	a39b      	add	r3, pc, #620	; (adr r3, 8002ba8 <StartDefaultTask+0x378>)
 800293a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
  positionNext.t = 0;
 8002942:	49a0      	ldr	r1, [pc, #640]	; (8002bc4 <StartDefaultTask+0x394>)
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	e9c1 2304 	strd	r2, r3, [r1, #16]

  kinematicForward(&positionNext);
 8002950:	489c      	ldr	r0, [pc, #624]	; (8002bc4 <StartDefaultTask+0x394>)
 8002952:	f002 fae1 	bl	8004f18 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 8002956:	489c      	ldr	r0, [pc, #624]	; (8002bc8 <StartDefaultTask+0x398>)
 8002958:	f00a fd0b 	bl	800d372 <HAL_TIM_Base_Start_IT>

  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 800295c:	f107 0320 	add.w	r3, r7, #32
 8002960:	f04f 32ff 	mov.w	r2, #4294967295
 8002964:	2101      	movs	r1, #1
 8002966:	4618      	mov	r0, r3
 8002968:	f00f f8f4 	bl	8011b54 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 800296c:	2300      	movs	r3, #0
 800296e:	f8c7 3d6c 	str.w	r3, [r7, #3436]	; 0xd6c
//	  respond_packed_lenght = 0;
//	  infor_lenght			= 0;
//	  infor_packed_lenght	= 0;
	  //task_usb_lenght		= 0;
	  //usb_lenght			= 0;
	  total_respond_length  = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
//	  detail_ptr 			= 0;
	  // Update new position
//	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 8002978:	4a94      	ldr	r2, [pc, #592]	; (8002bcc <StartDefaultTask+0x39c>)
 800297a:	4b92      	ldr	r3, [pc, #584]	; (8002bc4 <StartDefaultTask+0x394>)
 800297c:	4610      	mov	r0, r2
 800297e:	4619      	mov	r1, r3
 8002980:	2398      	movs	r3, #152	; 0x98
 8002982:	461a      	mov	r2, r3
 8002984:	f012 fc34 	bl	80151f0 <memcpy>

	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 8002988:	4b91      	ldr	r3, [pc, #580]	; (8002bd0 <StartDefaultTask+0x3a0>)
 800298a:	6819      	ldr	r1, [r3, #0]
 800298c:	f607 5344 	addw	r3, r7, #3396	; 0xd44
 8002990:	2200      	movs	r2, #0
 8002992:	4618      	mov	r0, r3
 8002994:	f00f faee 	bl	8011f74 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 8002998:	f8d7 3d44 	ldr.w	r3, [r7, #3396]	; 0xd44
 800299c:	2b20      	cmp	r3, #32
 800299e:	d116      	bne.n	80029ce <StartDefaultTask+0x19e>
		   dataMail = ret_mail.value.p;
 80029a0:	f8d7 3d48 	ldr.w	r3, [r7, #3400]	; 0xd48
 80029a4:	f8c7 3d68 	str.w	r3, [r7, #3432]	; 0xd68
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 80029a8:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 80029ac:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80029b0:	f8d7 1d68 	ldr.w	r1, [r7, #3432]	; 0xd68
 80029b4:	4618      	mov	r0, r3
 80029b6:	f012 fc1b 	bl	80151f0 <memcpy>
		   isNewDuty = TRUE;
 80029ba:	2301      	movs	r3, #1
 80029bc:	f887 3dc7 	strb.w	r3, [r7, #3527]	; 0xdc7
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 80029c0:	4b83      	ldr	r3, [pc, #524]	; (8002bd0 <StartDefaultTask+0x3a0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f8d7 1d68 	ldr.w	r1, [r7, #3432]	; 0xd68
 80029c8:	4618      	mov	r0, r3
 80029ca:	f00f fb47 	bl	801205c <osMailFree>
	  }
	  if(isNewDuty) {
 80029ce:	f897 3dc7 	ldrb.w	r3, [r7, #3527]	; 0xdc7
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 8409 	beq.w	80031ea <StartDefaultTask+0x9ba>
		  if (duty_cmd.change_method == TRUE) {
 80029d8:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	f040 80f8 	bne.w	8002bd4 <StartDefaultTask+0x3a4>
			  //vPortFree(Gcode_Cor);
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 80029e4:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 80029e8:	785b      	ldrb	r3, [r3, #1]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d122      	bne.n	8002a34 <StartDefaultTask+0x204>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f887 3dbe 	strb.w	r3, [r7, #3518]	; 0xdbe
				  current_duty_state = SCARA_DUTY_STATE_READY;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
				detail_array[0] = MANUAL_METHOD;
 80029fa:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 80029fe:	221d      	movs	r2, #29
 8002a00:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002a02:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002a06:	6899      	ldr	r1, [r3, #8]
 8002a08:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 8002a0c:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 8002a10:	4413      	add	r3, r2
 8002a12:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	2301      	movs	r3, #1
 8002a1a:	2008      	movs	r0, #8
 8002a1c:	f7ff fd5a 	bl	80024d4 <commandRespond1>
 8002a20:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
				total_respond_length += respond_lenght;
 8002a24:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 8002a28:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
 8002a32:	e3d7      	b.n	80031e4 <StartDefaultTask+0x9b4>
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 8002a34:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002a38:	785b      	ldrb	r3, [r3, #1]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d122      	bne.n	8002a84 <StartDefaultTask+0x254>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	f887 3dbe 	strb.w	r3, [r7, #3518]	; 0xdbe
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
				detail_array[0] = SEMI_AUTO_METHOD;
 8002a4a:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 8002a4e:	221e      	movs	r2, #30
 8002a50:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002a52:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002a56:	6899      	ldr	r1, [r3, #8]
 8002a58:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 8002a5c:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 8002a60:	4413      	add	r3, r2
 8002a62:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	2301      	movs	r3, #1
 8002a6a:	2008      	movs	r0, #8
 8002a6c:	f7ff fd32 	bl	80024d4 <commandRespond1>
 8002a70:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
				total_respond_length += respond_lenght;
 8002a74:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 8002a78:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
 8002a82:	e3af      	b.n	80031e4 <StartDefaultTask+0x9b4>
			  } else if (SCARA_METHOD_GCODE == duty_cmd.robot_method) {
 8002a84:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002a88:	785b      	ldrb	r3, [r3, #1]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d122      	bne.n	8002ad4 <StartDefaultTask+0x2a4>
//				  Gcode_Cor = pvPortMalloc(total_num_of_point*sizeof(SCARA_Gcode_Cor_TypeDef));
//					if(Gcode_Cor == NULL){
//					  int t =2;
//					}
				  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
				  current_method = SCARA_METHOD_GCODE;
 8002a94:	2302      	movs	r3, #2
 8002a96:	f887 3dbe 	strb.w	r3, [r7, #3518]	; 0xdbe
				  detail_array[0] = GCODE_METHOD;
 8002a9a:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 8002a9e:	221f      	movs	r2, #31
 8002aa0:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002aa2:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002aa6:	6899      	ldr	r1, [r3, #8]
 8002aa8:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 8002aac:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	2301      	movs	r3, #1
 8002aba:	2008      	movs	r0, #8
 8002abc:	f7ff fd0a 	bl	80024d4 <commandRespond1>
 8002ac0:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
				total_respond_length += respond_lenght;
 8002ac4:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 8002ac8:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 8002acc:	4413      	add	r3, r2
 8002ace:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
 8002ad2:	e387      	b.n	80031e4 <StartDefaultTask+0x9b4>
			  }else if(SCARA_METHOD_TEST == duty_cmd.robot_method){
 8002ad4:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002ad8:	785b      	ldrb	r3, [r3, #1]
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d12f      	bne.n	8002b3e <StartDefaultTask+0x30e>
				  test_value[0] = 0;
 8002ade:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
				  test_value[1] = 0;
 8002ae6:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8002aea:	2200      	movs	r2, #0
 8002aec:	705a      	strb	r2, [r3, #1]
				  test_value[2] = 0;
 8002aee:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8002af2:	2200      	movs	r2, #0
 8002af4:	709a      	strb	r2, [r3, #2]
				  test_value[3] = 0;
 8002af6:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8002afa:	2200      	movs	r2, #0
 8002afc:	70da      	strb	r2, [r3, #3]
				  current_method = SCARA_METHOD_TEST;
 8002afe:	2303      	movs	r3, #3
 8002b00:	f887 3dbe 	strb.w	r3, [r7, #3518]	; 0xdbe
				  detail_array[0] = TEST_METHOD;
 8002b04:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 8002b08:	2220      	movs	r2, #32
 8002b0a:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b0c:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002b10:	6899      	ldr	r1, [r3, #8]
 8002b12:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 8002b16:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	2301      	movs	r3, #1
 8002b24:	2008      	movs	r0, #8
 8002b26:	f7ff fcd5 	bl	80024d4 <commandRespond1>
 8002b2a:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
				  total_respond_length += respond_lenght;
 8002b2e:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 8002b32:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 8002b36:	4413      	add	r3, r2
 8002b38:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
 8002b3c:	e352      	b.n	80031e4 <StartDefaultTask+0x9b4>
			  }else if(SCARA_METHOD_PICK_AND_PLACE == duty_cmd.robot_method){
 8002b3e:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002b42:	785b      	ldrb	r3, [r3, #1]
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	f040 834d 	bne.w	80031e4 <StartDefaultTask+0x9b4>
				  current_method = SCARA_METHOD_PICK_AND_PLACE;
 8002b4a:	2304      	movs	r3, #4
 8002b4c:	f887 3dbe 	strb.w	r3, [r7, #3518]	; 0xdbe
				  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002b50:	2301      	movs	r3, #1
 8002b52:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
				  detail_array[0] = PICK_AND_PLACE_METHOD;
 8002b56:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 8002b5a:	2221      	movs	r2, #33	; 0x21
 8002b5c:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b5e:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002b62:	6899      	ldr	r1, [r3, #8]
 8002b64:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 8002b68:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	2301      	movs	r3, #1
 8002b76:	2008      	movs	r0, #8
 8002b78:	f7ff fcac 	bl	80024d4 <commandRespond1>
 8002b7c:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
				  total_respond_length += respond_lenght;
 8002b80:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 8002b84:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 8002b88:	4413      	add	r3, r2
 8002b8a:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
 8002b8e:	e329      	b.n	80031e4 <StartDefaultTask+0x9b4>
 8002b90:	45a1cac1 	.word	0x45a1cac1
 8002b94:	bff6f3b6 	.word	0xbff6f3b6
 8002b98:	e0000000 	.word	0xe0000000
 8002b9c:	3ffb8a71 	.word	0x3ffb8a71
 8002ba0:	78d4fdf4 	.word	0x78d4fdf4
 8002ba4:	4023a6e9 	.word	0x4023a6e9
 8002ba8:	9d7342ee 	.word	0x9d7342ee
 8002bac:	3fd25a46 	.word	0x3fd25a46
 8002bb0:	40020400 	.word	0x40020400
 8002bb4:	0801b5e8 	.word	0x0801b5e8
 8002bb8:	c0410000 	.word	0xc0410000
 8002bbc:	0801b678 	.word	0x0801b678
 8002bc0:	0801b514 	.word	0x0801b514
 8002bc4:	20010be0 	.word	0x20010be0
 8002bc8:	20010cf8 	.word	0x20010cf8
 8002bcc:	20010ab0 	.word	0x20010ab0
 8002bd0:	2000fe7c 	.word	0x2000fe7c
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 8002bd4:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002bd8:	785b      	ldrb	r3, [r3, #1]
 8002bda:	f897 2dbe 	ldrb.w	r2, [r7, #3518]	; 0xdbe
 8002bde:	429a      	cmp	r2, r3
 8002be0:	f040 82e0 	bne.w	80031a4 <StartDefaultTask+0x974>
				  	  switch( duty_cmd.robot_method) {
 8002be4:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002be8:	785b      	ldrb	r3, [r3, #1]
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	f200 82d4 	bhi.w	8003198 <StartDefaultTask+0x968>
 8002bf0:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <StartDefaultTask+0x3c8>)
 8002bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf6:	bf00      	nop
 8002bf8:	08002c0d 	.word	0x08002c0d
 8002bfc:	08002c63 	.word	0x08002c63
 8002c00:	08002f79 	.word	0x08002f79
 8002c04:	08002e21 	.word	0x08002e21
 8002c08:	080030f7 	.word	0x080030f7
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 8002c0c:	f897 3dba 	ldrb.w	r3, [r7, #3514]	; 0xdba
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10d      	bne.n	8002c30 <StartDefaultTask+0x400>
				  			  current_key = duty_cmd.keyboard;
 8002c14:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002c18:	78db      	ldrb	r3, [r3, #3]
 8002c1a:	f887 3db9 	strb.w	r3, [r7, #3513]	; 0xdb9
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 8002c1e:	2301      	movs	r3, #1
 8002c20:	f887 3dba 	strb.w	r3, [r7, #3514]	; 0xdba
				  			  current_key_speed = duty_cmd.key_speed;
 8002c24:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f8c7 3db4 	str.w	r3, [r7, #3508]	; 0xdb4
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 8002c2e:	e2d6      	b.n	80031de <StartDefaultTask+0x9ae>
				  		  } else if (current_key == duty_cmd.keyboard
 8002c30:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002c34:	78db      	ldrb	r3, [r3, #3]
 8002c36:	f897 2db9 	ldrb.w	r2, [r7, #3513]	; 0xdb9
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	f040 82cf 	bne.w	80031de <StartDefaultTask+0x9ae>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 8002c40:	f897 3dba 	ldrb.w	r3, [r7, #3514]	; 0xdba
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	f040 82ca 	bne.w	80031de <StartDefaultTask+0x9ae>
									  && current_key_speed == duty_cmd.key_speed) {
 8002c4a:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f8d7 2db4 	ldr.w	r2, [r7, #3508]	; 0xdb4
 8002c54:	429a      	cmp	r2, r3
 8002c56:	f040 82c2 	bne.w	80031de <StartDefaultTask+0x9ae>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 3dba 	strb.w	r3, [r7, #3514]	; 0xdba
				  	  break;
 8002c60:	e2bd      	b.n	80031de <StartDefaultTask+0x9ae>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 8002c62:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002c66:	789b      	ldrb	r3, [r3, #2]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d079      	beq.n	8002d60 <StartDefaultTask+0x530>
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	f300 80d0 	bgt.w	8002e12 <StartDefaultTask+0x5e2>
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <StartDefaultTask+0x44c>
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d025      	beq.n	8002cc6 <StartDefaultTask+0x496>
 8002c7a:	e0ca      	b.n	8002e12 <StartDefaultTask+0x5e2>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f887 3dbd 	strb.w	r3, [r7, #3517]	; 0xdbd
								detail_array[0] = STOP_NOW;
 8002c82:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 8002c86:	222a      	movs	r2, #42	; 0x2a
 8002c88:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002c8a:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002c8e:	6899      	ldr	r1, [r3, #8]
 8002c90:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 8002c94:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 8002c98:	4413      	add	r3, r2
 8002c9a:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	2008      	movs	r0, #8
 8002ca4:	f7ff fc16 	bl	80024d4 <commandRespond1>
 8002ca8:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
								total_respond_length += respond_lenght;
 8002cac:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 8002cb0:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 8002cba:	f240 116d 	movw	r1, #365	; 0x16d
 8002cbe:	48ce      	ldr	r0, [pc, #824]	; (8002ff8 <StartDefaultTask+0x7c8>)
 8002cc0:	f7ff fc70 	bl	80025a4 <LOG_REPORT>
							  }
							  break;
 8002cc4:	e0ab      	b.n	8002e1e <StartDefaultTask+0x5ee>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002cc6:	f897 3dbd 	ldrb.w	r3, [r7, #3517]	; 0xdbd
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d126      	bne.n	8002d1c <StartDefaultTask+0x4ec>
 8002cce:	f897 3dbc 	ldrb.w	r3, [r7, #3516]	; 0xdbc
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d122      	bne.n	8002d1c <StartDefaultTask+0x4ec>
									  current_mode = SCARA_MODE_SCAN;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	f887 3dbd 	strb.w	r3, [r7, #3517]	; 0xdbd
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f887 3dbb 	strb.w	r3, [r7, #3515]	; 0xdbb
									detail_array[0] = START_SCAN;
 8002ce2:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 8002ce6:	222b      	movs	r2, #43	; 0x2b
 8002ce8:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002cea:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002cee:	6899      	ldr	r1, [r3, #8]
 8002cf0:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 8002cf4:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	2301      	movs	r3, #1
 8002d02:	2008      	movs	r0, #8
 8002d04:	f7ff fbe6 	bl	80024d4 <commandRespond1>
 8002d08:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
									total_respond_length += respond_lenght;
 8002d0c:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 8002d10:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 8002d14:	4413      	add	r3, r2
 8002d16:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
									total_respond_length += respond_lenght;
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 8002d1a:	e080      	b.n	8002e1e <StartDefaultTask+0x5ee>
									detail_array[0] = BUSY;
 8002d1c:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 8002d20:	222c      	movs	r2, #44	; 0x2c
 8002d22:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002d24:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002d28:	6899      	ldr	r1, [r3, #8]
 8002d2a:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 8002d2e:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 8002d32:	4413      	add	r3, r2
 8002d34:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	2007      	movs	r0, #7
 8002d3e:	f7ff fbc9 	bl	80024d4 <commandRespond1>
 8002d42:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
									total_respond_length += respond_lenght;
 8002d46:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 8002d4a:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 8002d4e:	4413      	add	r3, r2
 8002d50:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 8002d54:	f240 1181 	movw	r1, #385	; 0x181
 8002d58:	48a8      	ldr	r0, [pc, #672]	; (8002ffc <StartDefaultTask+0x7cc>)
 8002d5a:	f7ff fc23 	bl	80025a4 <LOG_REPORT>
							  break;
 8002d5e:	e05e      	b.n	8002e1e <StartDefaultTask+0x5ee>

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002d60:	f897 3dbd 	ldrb.w	r3, [r7, #3517]	; 0xdbd
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d131      	bne.n	8002dcc <StartDefaultTask+0x59c>
 8002d68:	f897 3dbc 	ldrb.w	r3, [r7, #3516]	; 0xdbc
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d12d      	bne.n	8002dcc <StartDefaultTask+0x59c>
									  //scaraSetScanFlag();
//									  if(duty_cmd.modeInit_type == DUTY_MODE_INIT_LINEAR){
//										  current_method = SCARA_METHOD_AUTO;
//									  }
									  if (scaraIsScanLimit()) {
 8002d70:	f006 fe90 	bl	8009a94 <scaraIsScanLimit>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d006      	beq.n	8002d88 <StartDefaultTask+0x558>
										  current_mode	 = SCARA_MODE_DUTY;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	f887 3dbd 	strb.w	r3, [r7, #3517]	; 0xdbd
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 8002d80:	2301      	movs	r3, #1
 8002d82:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
									  if (scaraIsScanLimit()) {
 8002d86:	e043      	b.n	8002e10 <StartDefaultTask+0x5e0>
									  } else {
										detail_array[0] = NOT_SCAN;
 8002d88:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 8002d8c:	222d      	movs	r2, #45	; 0x2d
 8002d8e:	701a      	strb	r2, [r3, #0]
										respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002d90:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002d94:	6899      	ldr	r1, [r3, #8]
 8002d96:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 8002d9a:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 8002d9e:	4413      	add	r3, r2
 8002da0:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	2301      	movs	r3, #1
 8002da8:	2007      	movs	r0, #7
 8002daa:	f7ff fb93 	bl	80024d4 <commandRespond1>
 8002dae:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
										total_respond_length += respond_lenght;
 8002db2:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 8002db6:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 8002dba:	4413      	add	r3, r2
 8002dbc:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 8002dc0:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8002dc4:	488e      	ldr	r0, [pc, #568]	; (8003000 <StartDefaultTask+0x7d0>)
 8002dc6:	f7ff fbed 	bl	80025a4 <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 8002dca:	e021      	b.n	8002e10 <StartDefaultTask+0x5e0>
									  }
								  } else {
									detail_array[0] = BUSY;
 8002dcc:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 8002dd0:	222c      	movs	r2, #44	; 0x2c
 8002dd2:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002dd4:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002dd8:	6899      	ldr	r1, [r3, #8]
 8002dda:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 8002dde:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 8002de2:	4413      	add	r3, r2
 8002de4:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	2301      	movs	r3, #1
 8002dec:	2007      	movs	r0, #7
 8002dee:	f7ff fb71 	bl	80024d4 <commandRespond1>
 8002df2:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
									total_respond_length += respond_lenght;
 8002df6:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 8002dfa:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 8002dfe:	4413      	add	r3, r2
 8002e00:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 8002e04:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8002e08:	487e      	ldr	r0, [pc, #504]	; (8003004 <StartDefaultTask+0x7d4>)
 8002e0a:	f7ff fbcb 	bl	80025a4 <LOG_REPORT>
								  }
							  }
							  break;
 8002e0e:	e006      	b.n	8002e1e <StartDefaultTask+0x5ee>
 8002e10:	e005      	b.n	8002e1e <StartDefaultTask+0x5ee>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 8002e12:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8002e16:	487c      	ldr	r0, [pc, #496]	; (8003008 <StartDefaultTask+0x7d8>)
 8002e18:	f7ff fbc4 	bl	80025a4 <LOG_REPORT>
							  }
						  }
					  }
					  break;
 8002e1c:	e1e2      	b.n	80031e4 <StartDefaultTask+0x9b4>
 8002e1e:	e1e1      	b.n	80031e4 <StartDefaultTask+0x9b4>
					  case SCARA_METHOD_TEST:
					  {
						  test_value[0] = 0;
 8002e20:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8002e24:	2200      	movs	r2, #0
 8002e26:	701a      	strb	r2, [r3, #0]
						  test_value[1] = 0;
 8002e28:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	705a      	strb	r2, [r3, #1]
						  test_value[2] = 0;
 8002e30:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8002e34:	2200      	movs	r2, #0
 8002e36:	709a      	strb	r2, [r3, #2]
						  test_value[3] = 0;
 8002e38:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	70da      	strb	r2, [r3, #3]
						  switch (duty_cmd.test_key)
 8002e40:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002e44:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8002e48:	2b07      	cmp	r3, #7
 8002e4a:	f200 8093 	bhi.w	8002f74 <StartDefaultTask+0x744>
 8002e4e:	a201      	add	r2, pc, #4	; (adr r2, 8002e54 <StartDefaultTask+0x624>)
 8002e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e54:	08002e75 	.word	0x08002e75
 8002e58:	08002e91 	.word	0x08002e91
 8002e5c:	08002eb5 	.word	0x08002eb5
 8002e60:	08002ed1 	.word	0x08002ed1
 8002e64:	08002ef5 	.word	0x08002ef5
 8002e68:	08002f11 	.word	0x08002f11
 8002e6c:	08002f35 	.word	0x08002f35
 8002e70:	08002f51 	.word	0x08002f51
						  {
						  case SCARA_TEST_MOTOR1_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[0];
 8002e74:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002e78:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8002e7c:	085b      	lsrs	r3, r3, #1
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	4b62      	ldr	r3, [pc, #392]	; (800300c <StartDefaultTask+0x7dc>)
 8002e84:	f993 1000 	ldrsb.w	r1, [r3]
 8002e88:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8002e8c:	5499      	strb	r1, [r3, r2]
						  break;
 8002e8e:	e072      	b.n	8002f76 <StartDefaultTask+0x746>
						  case SCARA_TEST_MOTOR1_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[0];
 8002e90:	4b5e      	ldr	r3, [pc, #376]	; (800300c <StartDefaultTask+0x7dc>)
 8002e92:	f993 3000 	ldrsb.w	r3, [r3]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	425b      	negs	r3, r3
 8002e9a:	b2d9      	uxtb	r1, r3
 8002e9c:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002ea0:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8002ea4:	085b      	lsrs	r3, r3, #1
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	b249      	sxtb	r1, r1
 8002eac:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8002eb0:	5499      	strb	r1, [r3, r2]
						  break;
 8002eb2:	e060      	b.n	8002f76 <StartDefaultTask+0x746>
						  case SCARA_TEST_MOTOR2_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[1];
 8002eb4:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002eb8:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8002ebc:	085b      	lsrs	r3, r3, #1
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4b52      	ldr	r3, [pc, #328]	; (800300c <StartDefaultTask+0x7dc>)
 8002ec4:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8002ec8:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8002ecc:	5499      	strb	r1, [r3, r2]
						  break;
 8002ece:	e052      	b.n	8002f76 <StartDefaultTask+0x746>
						  case SCARA_TEST_MOTOR2_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[1];
 8002ed0:	4b4e      	ldr	r3, [pc, #312]	; (800300c <StartDefaultTask+0x7dc>)
 8002ed2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	425b      	negs	r3, r3
 8002eda:	b2d9      	uxtb	r1, r3
 8002edc:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002ee0:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8002ee4:	085b      	lsrs	r3, r3, #1
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	b249      	sxtb	r1, r1
 8002eec:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8002ef0:	5499      	strb	r1, [r3, r2]
						  break;
 8002ef2:	e040      	b.n	8002f76 <StartDefaultTask+0x746>
						  case SCARA_TEST_MOTOR3_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[2];
 8002ef4:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002ef8:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8002efc:	085b      	lsrs	r3, r3, #1
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	4b42      	ldr	r3, [pc, #264]	; (800300c <StartDefaultTask+0x7dc>)
 8002f04:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8002f08:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8002f0c:	5499      	strb	r1, [r3, r2]
						  break;
 8002f0e:	e032      	b.n	8002f76 <StartDefaultTask+0x746>
						  case SCARA_TEST_MOTOR3_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[2];
 8002f10:	4b3e      	ldr	r3, [pc, #248]	; (800300c <StartDefaultTask+0x7dc>)
 8002f12:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	425b      	negs	r3, r3
 8002f1a:	b2d9      	uxtb	r1, r3
 8002f1c:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002f20:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8002f24:	085b      	lsrs	r3, r3, #1
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	b249      	sxtb	r1, r1
 8002f2c:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8002f30:	5499      	strb	r1, [r3, r2]
						  break;
 8002f32:	e020      	b.n	8002f76 <StartDefaultTask+0x746>
						  case SCARA_TEST_MOTOR4_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[3];
 8002f34:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002f38:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8002f3c:	085b      	lsrs	r3, r3, #1
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	461a      	mov	r2, r3
 8002f42:	4b32      	ldr	r3, [pc, #200]	; (800300c <StartDefaultTask+0x7dc>)
 8002f44:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8002f48:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8002f4c:	5499      	strb	r1, [r3, r2]
						  break;
 8002f4e:	e012      	b.n	8002f76 <StartDefaultTask+0x746>
						  case SCARA_TEST_MOTOR4_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[3];
 8002f50:	4b2e      	ldr	r3, [pc, #184]	; (800300c <StartDefaultTask+0x7dc>)
 8002f52:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	425b      	negs	r3, r3
 8002f5a:	b2d9      	uxtb	r1, r3
 8002f5c:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002f60:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8002f64:	085b      	lsrs	r3, r3, #1
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	b249      	sxtb	r1, r1
 8002f6c:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8002f70:	5499      	strb	r1, [r3, r2]
						  break;						  
 8002f72:	e000      	b.n	8002f76 <StartDefaultTask+0x746>
						  default:
							  break;
 8002f74:	bf00      	nop
						  }
					  }
					  break;
 8002f76:	e135      	b.n	80031e4 <StartDefaultTask+0x9b4>
				  	  case SCARA_METHOD_GCODE:
				  	  {
				  		  if(current_duty_state == SCARA_DUTY_STATE_READY && duty_cmd.id_command == CMD_GCODE_RUN && Gcode_data_available && offset_data_available){
 8002f78:	f897 3dbc 	ldrb.w	r3, [r7, #3516]	; 0xdbc
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d14d      	bne.n	800301c <StartDefaultTask+0x7ec>
 8002f80:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b14      	cmp	r3, #20
 8002f88:	d148      	bne.n	800301c <StartDefaultTask+0x7ec>
 8002f8a:	4b21      	ldr	r3, [pc, #132]	; (8003010 <StartDefaultTask+0x7e0>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d044      	beq.n	800301c <StartDefaultTask+0x7ec>
 8002f92:	4b20      	ldr	r3, [pc, #128]	; (8003014 <StartDefaultTask+0x7e4>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d040      	beq.n	800301c <StartDefaultTask+0x7ec>
				  			  if(Gcode_Mode == GCODE_LINEAR){
 8002f9a:	4b1f      	ldr	r3, [pc, #124]	; (8003018 <StartDefaultTask+0x7e8>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d103      	bne.n	8002faa <StartDefaultTask+0x77a>
				  				run_point = 1;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	f8c7 3d94 	str.w	r3, [r7, #3476]	; 0xd94
 8002fa8:	e006      	b.n	8002fb8 <StartDefaultTask+0x788>
				  			  }else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8002faa:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <StartDefaultTask+0x7e8>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b09      	cmp	r3, #9
 8002fb0:	d102      	bne.n	8002fb8 <StartDefaultTask+0x788>
				  				run_point = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f8c7 3d94 	str.w	r3, [r7, #3476]	; 0xd94
				  			  }
				  			detail_array[0] = GCODE_START;
 8002fb8:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 8002fbc:	2224      	movs	r2, #36	; 0x24
 8002fbe:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002fc0:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8002fc4:	6899      	ldr	r1, [r3, #8]
 8002fc6:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 8002fca:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 8002fce:	4413      	add	r3, r2
 8002fd0:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	2003      	movs	r0, #3
 8002fda:	f7ff fa7b 	bl	80024d4 <commandRespond1>
 8002fde:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
							total_respond_length += respond_lenght;
 8002fe2:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 8002fe6:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 8002fea:	4413      	add	r3, r2
 8002fec:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
				  			current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
				  			detail_array[0] = GCODE_OFFSET_MISSING;
							respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
							total_respond_length += respond_lenght;
				  		  }
				  	  }
				  	  break;
 8002ff6:	e0f4      	b.n	80031e2 <StartDefaultTask+0x9b2>
 8002ff8:	0801b534 	.word	0x0801b534
 8002ffc:	0801b544 	.word	0x0801b544
 8003000:	0801b554 	.word	0x0801b554
 8003004:	0801b568 	.word	0x0801b568
 8003008:	0801b578 	.word	0x0801b578
 800300c:	20000000 	.word	0x20000000
 8003010:	20004405 	.word	0x20004405
 8003014:	20004404 	.word	0x20004404
 8003018:	200085d0 	.word	0x200085d0
				  		  }else if(current_duty_state == SCARA_DUTY_STATE_INIT){
 800301c:	f897 3dbc 	ldrb.w	r3, [r7, #3516]	; 0xdbc
 8003020:	2b01      	cmp	r3, #1
 8003022:	d11c      	bne.n	800305e <StartDefaultTask+0x82e>
				  			detail_array[0] = GCODE_MODE_NOT_READY;
 8003024:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 8003028:	2229      	movs	r2, #41	; 0x29
 800302a:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800302c:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003030:	6899      	ldr	r1, [r3, #8]
 8003032:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 8003036:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 800303a:	4413      	add	r3, r2
 800303c:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	2301      	movs	r3, #1
 8003044:	2008      	movs	r0, #8
 8003046:	f7ff fa45 	bl	80024d4 <commandRespond1>
 800304a:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
							total_respond_length += respond_lenght;
 800304e:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 8003052:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 8003056:	4413      	add	r3, r2
 8003058:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
				  	  break;
 800305c:	e0c1      	b.n	80031e2 <StartDefaultTask+0x9b2>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_STOP){
 800305e:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b0e      	cmp	r3, #14
 8003066:	d103      	bne.n	8003070 <StartDefaultTask+0x840>
				  			  current_duty_state = SCARA_DUTY_STATE_READY;
 8003068:	2300      	movs	r3, #0
 800306a:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
				  	  break;
 800306e:	e0b8      	b.n	80031e2 <StartDefaultTask+0x9b2>
				  		  }else if(Gcode_data_available == 0){
 8003070:	4bd5      	ldr	r3, [pc, #852]	; (80033c8 <StartDefaultTask+0xb98>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d11c      	bne.n	80030b2 <StartDefaultTask+0x882>
				  			detail_array[0] = GCODE_DATA_MISSING;
 8003078:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 800307c:	2228      	movs	r2, #40	; 0x28
 800307e:	701a      	strb	r2, [r3, #0]
						    respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003080:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003084:	6899      	ldr	r1, [r3, #8]
 8003086:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 800308a:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 800308e:	4413      	add	r3, r2
 8003090:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	2301      	movs	r3, #1
 8003098:	2008      	movs	r0, #8
 800309a:	f7ff fa1b 	bl	80024d4 <commandRespond1>
 800309e:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
						    total_respond_length += respond_lenght;
 80030a2:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 80030a6:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 80030aa:	4413      	add	r3, r2
 80030ac:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
				  	  break;
 80030b0:	e097      	b.n	80031e2 <StartDefaultTask+0x9b2>
				  		  }else if(offset_data_available == 0){
 80030b2:	4bc6      	ldr	r3, [pc, #792]	; (80033cc <StartDefaultTask+0xb9c>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f040 8093 	bne.w	80031e2 <StartDefaultTask+0x9b2>
				  			detail_array[0] = GCODE_OFFSET_MISSING;
 80030bc:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 80030c0:	2227      	movs	r2, #39	; 0x27
 80030c2:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80030c4:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 80030c8:	6899      	ldr	r1, [r3, #8]
 80030ca:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 80030ce:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 80030d2:	4413      	add	r3, r2
 80030d4:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	2301      	movs	r3, #1
 80030dc:	2008      	movs	r0, #8
 80030de:	f7ff f9f9 	bl	80024d4 <commandRespond1>
 80030e2:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
							total_respond_length += respond_lenght;
 80030e6:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 80030ea:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 80030ee:	4413      	add	r3, r2
 80030f0:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
				  	  break;
 80030f4:	e075      	b.n	80031e2 <StartDefaultTask+0x9b2>
				  	  case SCARA_METHOD_PICK_AND_PLACE:{
				  		  memcpy(&Object[object_head_pointer].object_position, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 80030f6:	f897 3da5 	ldrb.w	r3, [r7, #3493]	; 0xda5
 80030fa:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80030fe:	f44f 719c 	mov.w	r1, #312	; 0x138
 8003102:	fb01 f303 	mul.w	r3, r1, r3
 8003106:	18d0      	adds	r0, r2, r3
 8003108:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 800310c:	3328      	adds	r3, #40	; 0x28
 800310e:	2298      	movs	r2, #152	; 0x98
 8003110:	4619      	mov	r1, r3
 8003112:	f012 f86d 	bl	80151f0 <memcpy>
				  		  //Object[object_head_pointer].timer_value = (uint16_t)duty_cmd.target_point.t;
				  		  Object[object_head_pointer].timer_value = duty_cmd.target_point.packet_time_stamp;
 8003116:	f897 1da5 	ldrb.w	r1, [r7, #3493]	; 0xda5
 800311a:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 800311e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003122:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8003126:	f44f 749c 	mov.w	r4, #312	; 0x138
 800312a:	fb04 f101 	mul.w	r1, r4, r1
 800312e:	4401      	add	r1, r0
 8003130:	f501 7198 	add.w	r1, r1, #304	; 0x130
 8003134:	e9c1 2300 	strd	r2, r3, [r1]
				  		  object_head_pointer = (object_head_pointer+1)%8;
 8003138:	f897 3da5 	ldrb.w	r3, [r7, #3493]	; 0xda5
 800313c:	3301      	adds	r3, #1
 800313e:	425a      	negs	r2, r3
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	f002 0207 	and.w	r2, r2, #7
 8003148:	bf58      	it	pl
 800314a:	4253      	negpl	r3, r2
 800314c:	f887 3da5 	strb.w	r3, [r7, #3493]	; 0xda5
				  		  detail_array[0] = OBJECT_DETECTED;
 8003150:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 8003154:	2222      	movs	r2, #34	; 0x22
 8003156:	701a      	strb	r2, [r3, #0]
				  		  detail_array[1] = duty_cmd.target_point.object_type;
 8003158:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 800315c:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8003160:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 8003164:	705a      	strb	r2, [r3, #1]
						  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 2, &respond[total_respond_length]);
 8003166:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 800316a:	6899      	ldr	r1, [r3, #8]
 800316c:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 8003170:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 8003174:	4413      	add	r3, r2
 8003176:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	2302      	movs	r3, #2
 800317e:	2008      	movs	r0, #8
 8003180:	f7ff f9a8 	bl	80024d4 <commandRespond1>
 8003184:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
						  total_respond_length += respond_lenght;
 8003188:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 800318c:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 8003190:	4413      	add	r3, r2
 8003192:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
				  	  }
				  	  break;
 8003196:	e025      	b.n	80031e4 <StartDefaultTask+0x9b4>
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 8003198:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800319c:	488c      	ldr	r0, [pc, #560]	; (80033d0 <StartDefaultTask+0xba0>)
 800319e:	f7ff fa01 	bl	80025a4 <LOG_REPORT>
 80031a2:	e01f      	b.n	80031e4 <StartDefaultTask+0x9b4>
				  	  }
				  	  }
			  	  } else {
					detail_array[0] = INCORRECT_METHOD;
 80031a4:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 80031a8:	222e      	movs	r2, #46	; 0x2e
 80031aa:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80031ac:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 80031b0:	6899      	ldr	r1, [r3, #8]
 80031b2:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 80031b6:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 80031ba:	4413      	add	r3, r2
 80031bc:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	2301      	movs	r3, #1
 80031c4:	2007      	movs	r0, #7
 80031c6:	f7ff f985 	bl	80024d4 <commandRespond1>
 80031ca:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
					total_respond_length += respond_lenght;
 80031ce:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 80031d2:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 80031d6:	4413      	add	r3, r2
 80031d8:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
 80031dc:	e002      	b.n	80031e4 <StartDefaultTask+0x9b4>
				  	  break;
 80031de:	bf00      	nop
 80031e0:	e000      	b.n	80031e4 <StartDefaultTask+0x9b4>
				  	  break;
 80031e2:	bf00      	nop
			  	  }

			  }
		  isNewDuty = FALSE;
 80031e4:	2300      	movs	r3, #0
 80031e6:	f887 3dc7 	strb.w	r3, [r7, #3527]	; 0xdc7
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 80031ea:	f897 3dbe 	ldrb.w	r3, [r7, #3518]	; 0xdbe
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	f201 8040 	bhi.w	8004274 <StartDefaultTask+0x1a44>
 80031f4:	a201      	add	r2, pc, #4	; (adr r2, 80031fc <StartDefaultTask+0x9cc>)
 80031f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fa:	bf00      	nop
 80031fc:	08003211 	.word	0x08003211
 8003200:	080033e5 	.word	0x080033e5
 8003204:	08003771 	.word	0x08003771
 8003208:	08003b6f 	.word	0x08003b6f
 800320c:	08003b95 	.word	0x08003b95
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 8003210:	f897 3dba 	ldrb.w	r3, [r7, #3514]	; 0xdba
 8003214:	2b03      	cmp	r3, #3
 8003216:	f201 802a 	bhi.w	800426e <StartDefaultTask+0x1a3e>
 800321a:	a201      	add	r2, pc, #4	; (adr r2, 8003220 <StartDefaultTask+0x9f0>)
 800321c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003220:	080033b9 	.word	0x080033b9
 8003224:	08003231 	.word	0x08003231
 8003228:	0800329f 	.word	0x0800329f
 800322c:	0800337b 	.word	0x0800337b
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit1(current_key, current_key_speed1) == SCARA_STATUS_OK) {
 8003230:	4b68      	ldr	r3, [pc, #416]	; (80033d4 <StartDefaultTask+0xba4>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	f897 3db9 	ldrb.w	r3, [r7, #3513]	; 0xdb9
 8003238:	4611      	mov	r1, r2
 800323a:	4618      	mov	r0, r3
 800323c:	f006 fce8 	bl	8009c10 <scaraKeyInit1>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d127      	bne.n	8003296 <StartDefaultTask+0xa66>
				  run_time = 0;
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	f607 51a8 	addw	r1, r7, #3496	; 0xda8
 8003252:	e9c1 2300 	strd	r2, r3, [r1]
				  current_key_state = SCARA_KEY_STATE_FLOW;
 8003256:	2302      	movs	r3, #2
 8003258:	f887 3dba 	strb.w	r3, [r7, #3514]	; 0xdba
					detail_array[0] = NONE;
 800325c:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 8003260:	222f      	movs	r2, #47	; 0x2f
 8003262:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003264:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003268:	6899      	ldr	r1, [r3, #8]
 800326a:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 800326e:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 8003272:	4413      	add	r3, r2
 8003274:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	2301      	movs	r3, #1
 800327c:	2003      	movs	r0, #3
 800327e:	f7ff f929 	bl	80024d4 <commandRespond1>
 8003282:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
					total_respond_length += respond_lenght;
 8003286:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 800328a:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 800328e:	4413      	add	r3, r2
 8003290:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 8003294:	e091      	b.n	80033ba <StartDefaultTask+0xb8a>
				  current_key_state = SCARA_KEY_STATE_READY;
 8003296:	2300      	movs	r3, #0
 8003298:	f887 3dba 	strb.w	r3, [r7, #3514]	; 0xdba
		  break;
 800329c:	e08d      	b.n	80033ba <StartDefaultTask+0xb8a>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 800329e:	a348      	add	r3, pc, #288	; (adr r3, 80033c0 <StartDefaultTask+0xb90>)
 80032a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a4:	f607 51a8 	addw	r1, r7, #3496	; 0xda8
 80032a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80032ac:	f7fc ffee 	bl	800028c <__adddf3>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	f607 51a8 	addw	r1, r7, #3496	; 0xda8
 80032b8:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 80032bc:	f607 53a8 	addw	r3, r7, #3496	; 0xda8
 80032c0:	ed93 0b00 	vldr	d0, [r3]
 80032c4:	f006 fbf2 	bl	8009aac <scaraIsFinish>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <StartDefaultTask+0xaa6>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 80032ce:	2303      	movs	r3, #3
 80032d0:	f887 3dba 	strb.w	r3, [r7, #3514]	; 0xdba
					total_respond_length += respond_lenght;
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 80032d4:	e071      	b.n	80033ba <StartDefaultTask+0xb8a>
				  status = scaraFlowDuty(run_time, &positionNext, positionCurrent);
 80032d6:	4c40      	ldr	r4, [pc, #256]	; (80033d8 <StartDefaultTask+0xba8>)
 80032d8:	4668      	mov	r0, sp
 80032da:	f104 0308 	add.w	r3, r4, #8
 80032de:	2290      	movs	r2, #144	; 0x90
 80032e0:	4619      	mov	r1, r3
 80032e2:	f011 ff85 	bl	80151f0 <memcpy>
 80032e6:	e894 000c 	ldmia.w	r4, {r2, r3}
 80032ea:	483c      	ldr	r0, [pc, #240]	; (80033dc <StartDefaultTask+0xbac>)
 80032ec:	f607 51a8 	addw	r1, r7, #3496	; 0xda8
 80032f0:	ed91 0b00 	vldr	d0, [r1]
 80032f4:	f005 fdbe 	bl	8008e74 <scaraFlowDuty>
 80032f8:	4603      	mov	r3, r0
 80032fa:	f887 3d51 	strb.w	r3, [r7, #3409]	; 0xd51
				  if ( SCARA_STATUS_OK == status) {
 80032fe:	f897 3d51 	ldrb.w	r3, [r7, #3409]	; 0xd51
 8003302:	2b00      	cmp	r3, #0
 8003304:	d113      	bne.n	800332e <StartDefaultTask+0xafe>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003306:	4c34      	ldr	r4, [pc, #208]	; (80033d8 <StartDefaultTask+0xba8>)
 8003308:	4a34      	ldr	r2, [pc, #208]	; (80033dc <StartDefaultTask+0xbac>)
 800330a:	ab22      	add	r3, sp, #136	; 0x88
 800330c:	4611      	mov	r1, r2
 800330e:	2298      	movs	r2, #152	; 0x98
 8003310:	4618      	mov	r0, r3
 8003312:	f011 ff6d 	bl	80151f0 <memcpy>
 8003316:	4668      	mov	r0, sp
 8003318:	f104 0310 	add.w	r3, r4, #16
 800331c:	2288      	movs	r2, #136	; 0x88
 800331e:	4619      	mov	r1, r3
 8003320:	f011 ff66 	bl	80151f0 <memcpy>
 8003324:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003328:	f002 fec2 	bl	80060b0 <lowlayer_computeAndWritePulse>
		  break;
 800332c:	e045      	b.n	80033ba <StartDefaultTask+0xb8a>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 800332e:	2303      	movs	r3, #3
 8003330:	f887 3dba 	strb.w	r3, [r7, #3514]	; 0xdba
					detail_array[0] = status;
 8003334:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 8003338:	f897 2d51 	ldrb.w	r2, [r7, #3409]	; 0xd51
 800333c:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800333e:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003342:	6899      	ldr	r1, [r3, #8]
 8003344:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 8003348:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 800334c:	4413      	add	r3, r2
 800334e:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	2301      	movs	r3, #1
 8003356:	2006      	movs	r0, #6
 8003358:	f7ff f8bc 	bl	80024d4 <commandRespond1>
 800335c:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
					total_respond_length += respond_lenght;
 8003360:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 8003364:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 8003368:	4413      	add	r3, r2
 800336a:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
					  LOG_REPORT("STOP KEY", __LINE__);
 800336e:	f44f 710a 	mov.w	r1, #552	; 0x228
 8003372:	481b      	ldr	r0, [pc, #108]	; (80033e0 <StartDefaultTask+0xbb0>)
 8003374:	f7ff f916 	bl	80025a4 <LOG_REPORT>
		  break;
 8003378:	e01f      	b.n	80033ba <StartDefaultTask+0xb8a>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  lowlayer_readTruePosition(&positionNext);
 800337a:	4818      	ldr	r0, [pc, #96]	; (80033dc <StartDefaultTask+0xbac>)
 800337c:	f002 fd08 	bl	8005d90 <lowlayer_readTruePosition>
			  kinematicForward(&positionNext);
 8003380:	4816      	ldr	r0, [pc, #88]	; (80033dc <StartDefaultTask+0xbac>)
 8003382:	f001 fdc9 	bl	8004f18 <kinematicForward>
			  current_key_state = SCARA_KEY_STATE_READY;
 8003386:	2300      	movs	r3, #0
 8003388:	f887 3dba 	strb.w	r3, [r7, #3514]	; 0xdba
			  positionNext.t = 0;
 800338c:	4913      	ldr	r1, [pc, #76]	; (80033dc <StartDefaultTask+0xbac>)
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	e9c1 2304 	strd	r2, r3, [r1, #16]
			  positionNext.total_time = 0;
 800339a:	4910      	ldr	r1, [pc, #64]	; (80033dc <StartDefaultTask+0xbac>)
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	e9c1 2306 	strd	r2, r3, [r1, #24]
			  positionNext.q = 0;
 80033a8:	490c      	ldr	r1, [pc, #48]	; (80033dc <StartDefaultTask+0xbac>)
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	f04f 0300 	mov.w	r3, #0
 80033b2:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  break;
 80033b6:	e000      	b.n	80033ba <StartDefaultTask+0xb8a>
		  break;
 80033b8:	bf00      	nop
		  }
	  }
	  break;
 80033ba:	f000 bf58 	b.w	800426e <StartDefaultTask+0x1a3e>
 80033be:	bf00      	nop
 80033c0:	40000000 	.word	0x40000000
 80033c4:	3f847ae1 	.word	0x3f847ae1
 80033c8:	20004405 	.word	0x20004405
 80033cc:	20004404 	.word	0x20004404
 80033d0:	0801b58c 	.word	0x0801b58c
 80033d4:	20000060 	.word	0x20000060
 80033d8:	20010ab0 	.word	0x20010ab0
 80033dc:	20010be0 	.word	0x20010be0
 80033e0:	0801b5a4 	.word	0x0801b5a4

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 80033e4:	f897 3dbd 	ldrb.w	r3, [r7, #3517]	; 0xdbd
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d06b      	beq.n	80034c4 <StartDefaultTask+0xc94>
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	f300 81b7 	bgt.w	8003760 <StartDefaultTask+0xf30>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <StartDefaultTask+0xbcc>
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d007      	beq.n	800340a <StartDefaultTask+0xbda>
 80033fa:	e1b1      	b.n	8003760 <StartDefaultTask+0xf30>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 80033fc:	2302      	movs	r3, #2
 80033fe:	f887 3dbd 	strb.w	r3, [r7, #3517]	; 0xdbd
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8003402:	2300      	movs	r3, #0
 8003404:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
			  }
			  break;
 8003408:	e1b0      	b.n	800376c <StartDefaultTask+0xf3c>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 800340a:	f897 3dbb 	ldrb.w	r3, [r7, #3515]	; 0xdbb
 800340e:	2b03      	cmp	r3, #3
 8003410:	d84e      	bhi.n	80034b0 <StartDefaultTask+0xc80>
 8003412:	a201      	add	r2, pc, #4	; (adr r2, 8003418 <StartDefaultTask+0xbe8>)
 8003414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003418:	08003429 	.word	0x08003429
 800341c:	08003435 	.word	0x08003435
 8003420:	08003447 	.word	0x08003447
 8003424:	0800345b 	.word	0x0800345b
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 8003428:	f002 faac 	bl	8005984 <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 800342c:	2301      	movs	r3, #1
 800342e:	f887 3dbb 	strb.w	r3, [r7, #3515]	; 0xdbb
					  }
					  break;
 8003432:	e046      	b.n	80034c2 <StartDefaultTask+0xc92>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 8003434:	f002 fad8 	bl	80059e8 <lowlayer_scanFlow>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d03e      	beq.n	80034bc <StartDefaultTask+0xc8c>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 800343e:	2302      	movs	r3, #2
 8003440:	f887 3dbb 	strb.w	r3, [r7, #3515]	; 0xdbb
						  }
					  }
					  break;
 8003444:	e03a      	b.n	80034bc <StartDefaultTask+0xc8c>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 8003446:	48d6      	ldr	r0, [pc, #856]	; (80037a0 <StartDefaultTask+0xf70>)
 8003448:	f002 fc26 	bl	8005c98 <lowlayer_goToSoftLimit>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d036      	beq.n	80034c0 <StartDefaultTask+0xc90>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 8003452:	2303      	movs	r3, #3
 8003454:	f887 3dbb 	strb.w	r3, [r7, #3515]	; 0xdbb
							}
					  }
					  break;
 8003458:	e032      	b.n	80034c0 <StartDefaultTask+0xc90>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  //lowlayer_readSetPosition(&positionNext);
						  lowlayer_readTruePosition(&positionNext);
 800345a:	48d1      	ldr	r0, [pc, #836]	; (80037a0 <StartDefaultTask+0xf70>)
 800345c:	f002 fc98 	bl	8005d90 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 8003460:	48cf      	ldr	r0, [pc, #828]	; (80037a0 <StartDefaultTask+0xf70>)
 8003462:	f001 fd59 	bl	8004f18 <kinematicForward>
						  current_mode 	= SCARA_MODE_DUTY;
 8003466:	2302      	movs	r3, #2
 8003468:	f887 3dbd 	strb.w	r3, [r7, #3517]	; 0xdbd
						  current_duty_state = SCARA_DUTY_STATE_READY;
 800346c:	2300      	movs	r3, #0
 800346e:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
						  scaraSetScanFlag();
 8003472:	f006 fa8d 	bl	8009990 <scaraSetScanFlag>

						detail_array[0] = NONE;
 8003476:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 800347a:	222f      	movs	r2, #47	; 0x2f
 800347c:	701a      	strb	r2, [r3, #0]
						respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800347e:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003482:	6899      	ldr	r1, [r3, #8]
 8003484:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 8003488:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 800348c:	4413      	add	r3, r2
 800348e:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	2301      	movs	r3, #1
 8003496:	2005      	movs	r0, #5
 8003498:	f7ff f81c 	bl	80024d4 <commandRespond1>
 800349c:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
						total_respond_length += respond_lenght;
 80034a0:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 80034a4:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 80034a8:	4413      	add	r3, r2
 80034aa:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
					  }
					  break;
 80034ae:	e008      	b.n	80034c2 <StartDefaultTask+0xc92>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 80034b0:	f44f 711b 	mov.w	r1, #620	; 0x26c
 80034b4:	48bb      	ldr	r0, [pc, #748]	; (80037a4 <StartDefaultTask+0xf74>)
 80034b6:	f7ff f875 	bl	80025a4 <LOG_REPORT>
						  while(1);
 80034ba:	e7fe      	b.n	80034ba <StartDefaultTask+0xc8a>
					  break;
 80034bc:	bf00      	nop
 80034be:	e155      	b.n	800376c <StartDefaultTask+0xf3c>
					  break;
 80034c0:	bf00      	nop
					  }
				  }

			  }
			  break;
 80034c2:	e153      	b.n	800376c <StartDefaultTask+0xf3c>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 80034c4:	f897 3dbc 	ldrb.w	r3, [r7, #3516]	; 0xdbc
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	f200 8141 	bhi.w	8003750 <StartDefaultTask+0xf20>
 80034ce:	a201      	add	r2, pc, #4	; (adr r2, 80034d4 <StartDefaultTask+0xca4>)
 80034d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d4:	0800375d 	.word	0x0800375d
 80034d8:	080034e5 	.word	0x080034e5
 80034dc:	080035ff 	.word	0x080035ff
 80034e0:	080036db 	.word	0x080036db

				  case SCARA_DUTY_STATE_INIT:
					  {

						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 80034e4:	f507 643d 	add.w	r4, r7, #3024	; 0xbd0
 80034e8:	4668      	mov	r0, sp
 80034ea:	f104 0310 	add.w	r3, r4, #16
 80034ee:	f44f 72b0 	mov.w	r2, #352	; 0x160
 80034f2:	4619      	mov	r1, r3
 80034f4:	f011 fe7c 	bl	80151f0 <memcpy>
 80034f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80034fc:	f003 f970 	bl	80067e0 <scaraInitDuty>
 8003500:	4603      	mov	r3, r0
 8003502:	f887 3d53 	strb.w	r3, [r7, #3411]	; 0xd53
						  if ( SCARA_STATUS_OK == status1) {
 8003506:	f897 3d53 	ldrb.w	r3, [r7, #3411]	; 0xd53
 800350a:	2b00      	cmp	r3, #0
 800350c:	d151      	bne.n	80035b2 <StartDefaultTask+0xd82>
							  status2 = scaraTestDuty();
 800350e:	f006 f9c3 	bl	8009898 <scaraTestDuty>
 8003512:	4603      	mov	r3, r0
 8003514:	f887 3d52 	strb.w	r3, [r7, #3410]	; 0xd52
							  if (SCARA_STATUS_OK == status2) {
 8003518:	f897 3d52 	ldrb.w	r3, [r7, #3410]	; 0xd52
 800351c:	2b00      	cmp	r3, #0
 800351e:	d127      	bne.n	8003570 <StartDefaultTask+0xd40>
							  current_duty_state = SCARA_DUTY_STATE_FLOW;
 8003520:	2302      	movs	r3, #2
 8003522:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
							  //current_duty_state = SCARA_DUTY_STATE_FINISH;
							  run_time			= 0;
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	f607 51a8 	addw	r1, r7, #3496	; 0xda8
 8003532:	e9c1 2300 	strd	r2, r3, [r1]
							  // Respond
//							  detail_array[0] = status1;
//							  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
//							  total_respond_length += respond_lenght;
							  detail_array[0] = NONE;
 8003536:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 800353a:	222f      	movs	r2, #47	; 0x2f
 800353c:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800353e:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003542:	6899      	ldr	r1, [r3, #8]
 8003544:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 8003548:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 800354c:	4413      	add	r3, r2
 800354e:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	2301      	movs	r3, #1
 8003556:	2003      	movs	r0, #3
 8003558:	f7fe ffbc 	bl	80024d4 <commandRespond1>
 800355c:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
							  total_respond_length += respond_lenght;
 8003560:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 8003564:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 8003568:	4413      	add	r3, r2
 800356a:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
							total_respond_length += respond_lenght;
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 800356e:	e0f6      	b.n	800375e <StartDefaultTask+0xf2e>
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8003570:	2300      	movs	r3, #0
 8003572:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
								detail_array[0] = status2;
 8003576:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 800357a:	f897 2d52 	ldrb.w	r2, [r7, #3410]	; 0xd52
 800357e:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003580:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003584:	6899      	ldr	r1, [r3, #8]
 8003586:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 800358a:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 800358e:	4413      	add	r3, r2
 8003590:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	2301      	movs	r3, #1
 8003598:	2007      	movs	r0, #7
 800359a:	f7fe ff9b 	bl	80024d4 <commandRespond1>
 800359e:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
								total_respond_length += respond_lenght;
 80035a2:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 80035a6:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 80035aa:	4413      	add	r3, r2
 80035ac:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
				  break;
 80035b0:	e0d5      	b.n	800375e <StartDefaultTask+0xf2e>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 80035b2:	2300      	movs	r3, #0
 80035b4:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
							detail_array[0] = status1;
 80035b8:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 80035bc:	f897 2d53 	ldrb.w	r2, [r7, #3411]	; 0xd53
 80035c0:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80035c2:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 80035c6:	6899      	ldr	r1, [r3, #8]
 80035c8:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 80035cc:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 80035d0:	4413      	add	r3, r2
 80035d2:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	2301      	movs	r3, #1
 80035da:	2007      	movs	r0, #7
 80035dc:	f7fe ff7a 	bl	80024d4 <commandRespond1>
 80035e0:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
							total_respond_length += respond_lenght;
 80035e4:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 80035e8:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 80035ec:	4413      	add	r3, r2
 80035ee:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
							  LOG_REPORT("INIT FAIL", __LINE__);
 80035f2:	f240 219f 	movw	r1, #671	; 0x29f
 80035f6:	486c      	ldr	r0, [pc, #432]	; (80037a8 <StartDefaultTask+0xf78>)
 80035f8:	f7fe ffd4 	bl	80025a4 <LOG_REPORT>
				  break;
 80035fc:	e0af      	b.n	800375e <StartDefaultTask+0xf2e>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 80035fe:	a366      	add	r3, pc, #408	; (adr r3, 8003798 <StartDefaultTask+0xf68>)
 8003600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003604:	f607 51a8 	addw	r1, r7, #3496	; 0xda8
 8003608:	e9d1 0100 	ldrd	r0, r1, [r1]
 800360c:	f7fc fe3e 	bl	800028c <__adddf3>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	f607 51a8 	addw	r1, r7, #3496	; 0xda8
 8003618:	e9c1 2300 	strd	r2, r3, [r1]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 800361c:	f607 53a8 	addw	r3, r7, #3496	; 0xda8
 8003620:	ed93 0b00 	vldr	d0, [r3]
 8003624:	f006 fa42 	bl	8009aac <scaraIsFinish>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <StartDefaultTask+0xe06>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 800362e:	2303      	movs	r3, #3
 8003630:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
								total_respond_length += respond_lenght;
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 8003634:	e093      	b.n	800375e <StartDefaultTask+0xf2e>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8003636:	4c5d      	ldr	r4, [pc, #372]	; (80037ac <StartDefaultTask+0xf7c>)
 8003638:	4668      	mov	r0, sp
 800363a:	f104 0308 	add.w	r3, r4, #8
 800363e:	2290      	movs	r2, #144	; 0x90
 8003640:	4619      	mov	r1, r3
 8003642:	f011 fdd5 	bl	80151f0 <memcpy>
 8003646:	e894 000c 	ldmia.w	r4, {r2, r3}
 800364a:	4855      	ldr	r0, [pc, #340]	; (80037a0 <StartDefaultTask+0xf70>)
 800364c:	f607 51a8 	addw	r1, r7, #3496	; 0xda8
 8003650:	ed91 0b00 	vldr	d0, [r1]
 8003654:	f005 fc0e 	bl	8008e74 <scaraFlowDuty>
 8003658:	4603      	mov	r3, r0
 800365a:	f887 3d54 	strb.w	r3, [r7, #3412]	; 0xd54
							  if ( SCARA_STATUS_OK == status) {
 800365e:	f897 3d54 	ldrb.w	r3, [r7, #3412]	; 0xd54
 8003662:	2b00      	cmp	r3, #0
 8003664:	d113      	bne.n	800368e <StartDefaultTask+0xe5e>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003666:	4c51      	ldr	r4, [pc, #324]	; (80037ac <StartDefaultTask+0xf7c>)
 8003668:	4a4d      	ldr	r2, [pc, #308]	; (80037a0 <StartDefaultTask+0xf70>)
 800366a:	ab22      	add	r3, sp, #136	; 0x88
 800366c:	4611      	mov	r1, r2
 800366e:	2298      	movs	r2, #152	; 0x98
 8003670:	4618      	mov	r0, r3
 8003672:	f011 fdbd 	bl	80151f0 <memcpy>
 8003676:	4668      	mov	r0, sp
 8003678:	f104 0310 	add.w	r3, r4, #16
 800367c:	2288      	movs	r2, #136	; 0x88
 800367e:	4619      	mov	r1, r3
 8003680:	f011 fdb6 	bl	80151f0 <memcpy>
 8003684:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003688:	f002 fd12 	bl	80060b0 <lowlayer_computeAndWritePulse>
				  break;
 800368c:	e067      	b.n	800375e <StartDefaultTask+0xf2e>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 800368e:	2303      	movs	r3, #3
 8003690:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
								detail_array[0] = status;
 8003694:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 8003698:	f897 2d54 	ldrb.w	r2, [r7, #3412]	; 0xd54
 800369c:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800369e:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 80036a2:	6899      	ldr	r1, [r3, #8]
 80036a4:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 80036a8:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 80036ac:	4413      	add	r3, r2
 80036ae:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	2301      	movs	r3, #1
 80036b6:	2006      	movs	r0, #6
 80036b8:	f7fe ff0c 	bl	80024d4 <commandRespond1>
 80036bc:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
								total_respond_length += respond_lenght;
 80036c0:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 80036c4:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 80036c8:	4413      	add	r3, r2
 80036ca:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
								  LOG_REPORT("STOP DUTY", __LINE__);
 80036ce:	f240 21b7 	movw	r1, #695	; 0x2b7
 80036d2:	4837      	ldr	r0, [pc, #220]	; (80037b0 <StartDefaultTask+0xf80>)
 80036d4:	f7fe ff66 	bl	80025a4 <LOG_REPORT>
				  break;
 80036d8:	e041      	b.n	800375e <StartDefaultTask+0xf2e>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  lowlayer_readTruePosition(&positionNext);
 80036da:	4831      	ldr	r0, [pc, #196]	; (80037a0 <StartDefaultTask+0xf70>)
 80036dc:	f002 fb58 	bl	8005d90 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 80036e0:	482f      	ldr	r0, [pc, #188]	; (80037a0 <StartDefaultTask+0xf70>)
 80036e2:	f001 fc19 	bl	8004f18 <kinematicForward>
						  current_duty_state = SCARA_DUTY_STATE_READY;
 80036e6:	2300      	movs	r3, #0
 80036e8:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
						  positionNext.t = 0;
 80036ec:	492c      	ldr	r1, [pc, #176]	; (80037a0 <StartDefaultTask+0xf70>)
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	e9c1 2304 	strd	r2, r3, [r1, #16]
						  positionNext.total_time = 0;
 80036fa:	4929      	ldr	r1, [pc, #164]	; (80037a0 <StartDefaultTask+0xf70>)
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	e9c1 2306 	strd	r2, r3, [r1, #24]
						  positionNext.q = 0;
 8003708:	4925      	ldr	r1, [pc, #148]	; (80037a0 <StartDefaultTask+0xf70>)
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	e9c1 2300 	strd	r2, r3, [r1]
						  // Done Inform

					detail_array[0] = NONE;
 8003716:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 800371a:	222f      	movs	r2, #47	; 0x2f
 800371c:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800371e:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003722:	6899      	ldr	r1, [r3, #8]
 8003724:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 8003728:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 800372c:	4413      	add	r3, r2
 800372e:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	2301      	movs	r3, #1
 8003736:	2005      	movs	r0, #5
 8003738:	f7fe fecc 	bl	80024d4 <commandRespond1>
 800373c:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
					total_respond_length += respond_lenght;
 8003740:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 8003744:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 8003748:	4413      	add	r3, r2
 800374a:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
					  }
				  break;
 800374e:	e006      	b.n	800375e <StartDefaultTask+0xf2e>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8003750:	f240 21cf 	movw	r1, #719	; 0x2cf
 8003754:	4813      	ldr	r0, [pc, #76]	; (80037a4 <StartDefaultTask+0xf74>)
 8003756:	f7fe ff25 	bl	80025a4 <LOG_REPORT>
						  while(1);
 800375a:	e7fe      	b.n	800375a <StartDefaultTask+0xf2a>
				  break;
 800375c:	bf00      	nop
					  }
				  }

			  }
			  break;
 800375e:	e005      	b.n	800376c <StartDefaultTask+0xf3c>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 8003760:	f240 21d9 	movw	r1, #729	; 0x2d9
 8003764:	4813      	ldr	r0, [pc, #76]	; (80037b4 <StartDefaultTask+0xf84>)
 8003766:	f7fe ff1d 	bl	80025a4 <LOG_REPORT>
				  while(1);
 800376a:	e7fe      	b.n	800376a <StartDefaultTask+0xf3a>
			  }
		  }
	  }
	  break;
 800376c:	f000 bd82 	b.w	8004274 <StartDefaultTask+0x1a44>

	  case SCARA_METHOD_GCODE:
	  {
		  switch (current_duty_state)
 8003770:	f897 3dbc 	ldrb.w	r3, [r7, #3516]	; 0xdbc
 8003774:	2b04      	cmp	r3, #4
 8003776:	f200 81f8 	bhi.w	8003b6a <StartDefaultTask+0x133a>
 800377a:	a201      	add	r2, pc, #4	; (adr r2, 8003780 <StartDefaultTask+0xf50>)
 800377c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003780:	08003b6b 	.word	0x08003b6b
 8003784:	080037b9 	.word	0x080037b9
 8003788:	08003985 	.word	0x08003985
 800378c:	08003b6b 	.word	0x08003b6b
 8003790:	08003857 	.word	0x08003857
 8003794:	f3af 8000 	nop.w
 8003798:	40000000 	.word	0x40000000
 800379c:	3f847ae1 	.word	0x3f847ae1
 80037a0:	20010be0 	.word	0x20010be0
 80037a4:	0801b5b0 	.word	0x0801b5b0
 80037a8:	0801b5c0 	.word	0x0801b5c0
 80037ac:	20010ab0 	.word	0x20010ab0
 80037b0:	0801b5cc 	.word	0x0801b5cc
 80037b4:	0801b5d8 	.word	0x0801b5d8
		  {
		  case SCARA_DUTY_STATE_INIT:{
			  if(fabs(positionCurrent.x - offset_x) < 4 && fabs(positionCurrent.y - offset_y) < 4 && fabs(positionCurrent.z - offset_z) < 4){
 80037b8:	4bb9      	ldr	r3, [pc, #740]	; (8003aa0 <StartDefaultTask+0x1270>)
 80037ba:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80037be:	4bb9      	ldr	r3, [pc, #740]	; (8003aa4 <StartDefaultTask+0x1274>)
 80037c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c4:	f7fc fd60 	bl	8000288 <__aeabi_dsub>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	61ba      	str	r2, [r7, #24]
 80037ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037d2:	61fb      	str	r3, [r7, #28]
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	4bb3      	ldr	r3, [pc, #716]	; (8003aa8 <StartDefaultTask+0x1278>)
 80037da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80037de:	f7fd f97d 	bl	8000adc <__aeabi_dcmplt>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d100      	bne.n	80037ea <StartDefaultTask+0xfba>
				  current_duty_state = SCARA_DUTY_STATE_READY;
			  }
		  }
		  break;
 80037e8:	e1c0      	b.n	8003b6c <StartDefaultTask+0x133c>
			  if(fabs(positionCurrent.x - offset_x) < 4 && fabs(positionCurrent.y - offset_y) < 4 && fabs(positionCurrent.z - offset_z) < 4){
 80037ea:	4bad      	ldr	r3, [pc, #692]	; (8003aa0 <StartDefaultTask+0x1270>)
 80037ec:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80037f0:	4bae      	ldr	r3, [pc, #696]	; (8003aac <StartDefaultTask+0x127c>)
 80037f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f6:	f7fc fd47 	bl	8000288 <__aeabi_dsub>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	613a      	str	r2, [r7, #16]
 8003800:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	4ba7      	ldr	r3, [pc, #668]	; (8003aa8 <StartDefaultTask+0x1278>)
 800380c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003810:	f7fd f964 	bl	8000adc <__aeabi_dcmplt>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d100      	bne.n	800381c <StartDefaultTask+0xfec>
		  break;
 800381a:	e1a7      	b.n	8003b6c <StartDefaultTask+0x133c>
			  if(fabs(positionCurrent.x - offset_x) < 4 && fabs(positionCurrent.y - offset_y) < 4 && fabs(positionCurrent.z - offset_z) < 4){
 800381c:	4ba0      	ldr	r3, [pc, #640]	; (8003aa0 <StartDefaultTask+0x1270>)
 800381e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003822:	4ba3      	ldr	r3, [pc, #652]	; (8003ab0 <StartDefaultTask+0x1280>)
 8003824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003828:	f7fc fd2e 	bl	8000288 <__aeabi_dsub>
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
 8003830:	60ba      	str	r2, [r7, #8]
 8003832:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	4b9a      	ldr	r3, [pc, #616]	; (8003aa8 <StartDefaultTask+0x1278>)
 800383e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003842:	f7fd f94b 	bl	8000adc <__aeabi_dcmplt>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d100      	bne.n	800384e <StartDefaultTask+0x101e>
		  break;
 800384c:	e18e      	b.n	8003b6c <StartDefaultTask+0x133c>
				  current_duty_state = SCARA_DUTY_STATE_READY;
 800384e:	2300      	movs	r3, #0
 8003850:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
		  break;
 8003854:	e18a      	b.n	8003b6c <StartDefaultTask+0x133c>
		  case SCARA_DUTY_STATE_READY:{
			  // do nothing wait for hot key
		  }
		  break;
		  case SCARA_DUTY_STATE_OPERATION:{
			  update_gcode_point(&duty_cmd, run_point);
 8003856:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 800385a:	f8d7 1d94 	ldr.w	r1, [r7, #3476]	; 0xd94
 800385e:	4618      	mov	r0, r3
 8003860:	f000 ff3e 	bl	80046e0 <update_gcode_point>
			  testing_value = 1;
 8003864:	2301      	movs	r3, #1
 8003866:	f887 3dbf 	strb.w	r3, [r7, #3519]	; 0xdbf
			  SCARA_StatusTypeDef status;
			  status = scaraInitDuty(duty_cmd);
 800386a:	f507 643d 	add.w	r4, r7, #3024	; 0xbd0
 800386e:	4668      	mov	r0, sp
 8003870:	f104 0310 	add.w	r3, r4, #16
 8003874:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8003878:	4619      	mov	r1, r3
 800387a:	f011 fcb9 	bl	80151f0 <memcpy>
 800387e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003882:	f002 ffad 	bl	80067e0 <scaraInitDuty>
 8003886:	4603      	mov	r3, r0
 8003888:	f887 3d56 	strb.w	r3, [r7, #3414]	; 0xd56
			  if(status == SCARA_STATUS_OK){
 800388c:	f897 3d56 	ldrb.w	r3, [r7, #3414]	; 0xd56
 8003890:	2b00      	cmp	r3, #0
 8003892:	d156      	bne.n	8003942 <StartDefaultTask+0x1112>
				  if(duty_cmd.trajec_type == DUTY_TRAJECTORY_LINEAR || duty_cmd.trajec_type == DUTY_TRAJECTORY_LSPB){
 8003894:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003898:	7c1b      	ldrb	r3, [r3, #16]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d004      	beq.n	80038a8 <StartDefaultTask+0x1078>
 800389e:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 80038a2:	7c1b      	ldrb	r3, [r3, #16]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d108      	bne.n	80038ba <StartDefaultTask+0x108a>
					  run_time = 0;
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	f607 51a8 	addw	r1, r7, #3496	; 0xda8
 80038b4:	e9c1 2300 	strd	r2, r3, [r1]
 80038b8:	e00b      	b.n	80038d2 <StartDefaultTask+0x10a2>
				  }else if(duty_cmd.trajec_type == DUTY_TRAJECTORY_GCODE_LSPB){
 80038ba:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 80038be:	7c1b      	ldrb	r3, [r3, #16]
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d106      	bne.n	80038d2 <StartDefaultTask+0x10a2>
					  run_time = last_T;
 80038c4:	4b7b      	ldr	r3, [pc, #492]	; (8003ab4 <StartDefaultTask+0x1284>)
 80038c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ca:	f607 51a8 	addw	r1, r7, #3496	; 0xda8
 80038ce:	e9c1 2300 	strd	r2, r3, [r1]
				  }
				  current_duty_state = SCARA_DUTY_STATE_FLOW;
 80038d2:	2302      	movs	r3, #2
 80038d4:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
				  detail_array[0] = (uint8_t)((run_point+1) * 100.0f / total_num_of_point );
 80038d8:	f8d7 3d94 	ldr.w	r3, [r7, #3476]	; 0xd94
 80038dc:	3301      	adds	r3, #1
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038e6:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8003ab8 <StartDefaultTask+0x1288>
 80038ea:	ee67 6a87 	vmul.f32	s13, s15, s14
 80038ee:	4b73      	ldr	r3, [pc, #460]	; (8003abc <StartDefaultTask+0x128c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003902:	edc7 7a01 	vstr	s15, [r7, #4]
 8003906:	793b      	ldrb	r3, [r7, #4]
 8003908:	b2da      	uxtb	r2, r3
 800390a:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 800390e:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RDP_GCODE_PROCESS, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003910:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003914:	6899      	ldr	r1, [r3, #8]
 8003916:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 800391a:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 800391e:	4413      	add	r3, r2
 8003920:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	2301      	movs	r3, #1
 8003928:	200b      	movs	r0, #11
 800392a:	f7fe fdd3 	bl	80024d4 <commandRespond1>
 800392e:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
				  total_respond_length += respond_lenght;
 8003932:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 8003936:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 800393a:	4413      	add	r3, r2
 800393c:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
 8003940:	e020      	b.n	8003984 <StartDefaultTask+0x1154>
			  }else{
				  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003942:	2303      	movs	r3, #3
 8003944:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
				  detail_array[0] = status;
 8003948:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 800394c:	f897 2d56 	ldrb.w	r2, [r7, #3414]	; 0xd56
 8003950:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003952:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003956:	6899      	ldr	r1, [r3, #8]
 8003958:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 800395c:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 8003960:	4413      	add	r3, r2
 8003962:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	2301      	movs	r3, #1
 800396a:	2007      	movs	r0, #7
 800396c:	f7fe fdb2 	bl	80024d4 <commandRespond1>
 8003970:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
				  total_respond_length += respond_lenght;
 8003974:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 8003978:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 800397c:	4413      	add	r3, r2
 800397e:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
				  break;
 8003982:	e0f3      	b.n	8003b6c <StartDefaultTask+0x133c>
			  }
		  }
		  //break;

		  case SCARA_DUTY_STATE_FLOW:{
			  run_time += T_SAMPLING;
 8003984:	a344      	add	r3, pc, #272	; (adr r3, 8003a98 <StartDefaultTask+0x1268>)
 8003986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398a:	f607 51a8 	addw	r1, r7, #3496	; 0xda8
 800398e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003992:	f7fc fc7b 	bl	800028c <__adddf3>
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	f607 51a8 	addw	r1, r7, #3496	; 0xda8
 800399e:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 80039a2:	f607 53a8 	addw	r3, r7, #3496	; 0xda8
 80039a6:	ed93 0b00 	vldr	d0, [r3]
 80039aa:	f006 f87f 	bl	8009aac <scaraIsFinish>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 808d 	beq.w	8003ad0 <StartDefaultTask+0x12a0>
				if(run_point >= total_num_of_point-1){
 80039b6:	4b41      	ldr	r3, [pc, #260]	; (8003abc <StartDefaultTask+0x128c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	f8d7 2d94 	ldr.w	r2, [r7, #3476]	; 0xd94
 80039c0:	429a      	cmp	r2, r3
 80039c2:	db28      	blt.n	8003a16 <StartDefaultTask+0x11e6>
					current_duty_state = SCARA_DUTY_STATE_READY;
 80039c4:	2300      	movs	r3, #0
 80039c6:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
					lowlayer_readTruePosition(&positionNext);
 80039ca:	483d      	ldr	r0, [pc, #244]	; (8003ac0 <StartDefaultTask+0x1290>)
 80039cc:	f002 f9e0 	bl	8005d90 <lowlayer_readTruePosition>
				    kinematicForward(&positionNext);
 80039d0:	483b      	ldr	r0, [pc, #236]	; (8003ac0 <StartDefaultTask+0x1290>)
 80039d2:	f001 faa1 	bl	8004f18 <kinematicForward>
				    Gcode_data_available = 0;
 80039d6:	4b3b      	ldr	r3, [pc, #236]	; (8003ac4 <StartDefaultTask+0x1294>)
 80039d8:	2200      	movs	r2, #0
 80039da:	701a      	strb	r2, [r3, #0]
				    detail_array[0] = GCODE_FINISH;
 80039dc:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 80039e0:	2225      	movs	r2, #37	; 0x25
 80039e2:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80039e4:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 80039e8:	6899      	ldr	r1, [r3, #8]
 80039ea:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 80039ee:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 80039f2:	4413      	add	r3, r2
 80039f4:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	2301      	movs	r3, #1
 80039fc:	2005      	movs	r0, #5
 80039fe:	f7fe fd69 	bl	80024d4 <commandRespond1>
 8003a02:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
					total_respond_length += respond_lenght;
 8003a06:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 8003a0a:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 8003a0e:	4413      	add	r3, r2
 8003a10:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 8003a14:	e0aa      	b.n	8003b6c <StartDefaultTask+0x133c>
					if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8003a16:	4b2c      	ldr	r3, [pc, #176]	; (8003ac8 <StartDefaultTask+0x1298>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b09      	cmp	r3, #9
 8003a1c:	d114      	bne.n	8003a48 <StartDefaultTask+0x1218>
						accumulate_update(Gcode_Cor[run_point++]);
 8003a1e:	f8d7 2d94 	ldr.w	r2, [r7, #3476]	; 0xd94
 8003a22:	1c53      	adds	r3, r2, #1
 8003a24:	f8c7 3d94 	str.w	r3, [r7, #3476]	; 0xd94
 8003a28:	4928      	ldr	r1, [pc, #160]	; (8003acc <StartDefaultTask+0x129c>)
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	466c      	mov	r4, sp
 8003a36:	f103 0210 	add.w	r2, r3, #16
 8003a3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003a40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a42:	f001 f979 	bl	8004d38 <accumulate_update>
 8003a46:	e004      	b.n	8003a52 <StartDefaultTask+0x1222>
						run_point++;
 8003a48:	f8d7 3d94 	ldr.w	r3, [r7, #3476]	; 0xd94
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	f8c7 3d94 	str.w	r3, [r7, #3476]	; 0xd94
					current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003a52:	2304      	movs	r3, #4
 8003a54:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
					positionNext.x = duty_cmd.target_point.x;
 8003a58:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003a5c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8003a60:	4917      	ldr	r1, [pc, #92]	; (8003ac0 <StartDefaultTask+0x1290>)
 8003a62:	e9c1 2308 	strd	r2, r3, [r1, #32]
					positionNext.y = duty_cmd.target_point.y;
 8003a66:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003a6a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003a6e:	4914      	ldr	r1, [pc, #80]	; (8003ac0 <StartDefaultTask+0x1290>)
 8003a70:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
					positionNext.z = duty_cmd.target_point.z;
 8003a74:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003a78:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003a7c:	4910      	ldr	r1, [pc, #64]	; (8003ac0 <StartDefaultTask+0x1290>)
 8003a7e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
					positionNext.roll = duty_cmd.target_point.roll;
 8003a82:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003a86:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003a8a:	490d      	ldr	r1, [pc, #52]	; (8003ac0 <StartDefaultTask+0x1290>)
 8003a8c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		  break;
 8003a90:	e06c      	b.n	8003b6c <StartDefaultTask+0x133c>
 8003a92:	bf00      	nop
 8003a94:	f3af 8000 	nop.w
 8003a98:	40000000 	.word	0x40000000
 8003a9c:	3f847ae1 	.word	0x3f847ae1
 8003aa0:	20010ab0 	.word	0x20010ab0
 8003aa4:	20008fa8 	.word	0x20008fa8
 8003aa8:	40100000 	.word	0x40100000
 8003aac:	2000fd50 	.word	0x2000fd50
 8003ab0:	2000fd40 	.word	0x2000fd40
 8003ab4:	2000fd48 	.word	0x2000fd48
 8003ab8:	42c80000 	.word	0x42c80000
 8003abc:	20008fb0 	.word	0x20008fb0
 8003ac0:	20010be0 	.word	0x20010be0
 8003ac4:	20004405 	.word	0x20004405
 8003ac8:	200085d0 	.word	0x200085d0
 8003acc:	20008fc8 	.word	0x20008fc8
				SCARA_StatusTypeDef status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8003ad0:	4cb9      	ldr	r4, [pc, #740]	; (8003db8 <StartDefaultTask+0x1588>)
 8003ad2:	4668      	mov	r0, sp
 8003ad4:	f104 0308 	add.w	r3, r4, #8
 8003ad8:	2290      	movs	r2, #144	; 0x90
 8003ada:	4619      	mov	r1, r3
 8003adc:	f011 fb88 	bl	80151f0 <memcpy>
 8003ae0:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003ae4:	48b5      	ldr	r0, [pc, #724]	; (8003dbc <StartDefaultTask+0x158c>)
 8003ae6:	f607 51a8 	addw	r1, r7, #3496	; 0xda8
 8003aea:	ed91 0b00 	vldr	d0, [r1]
 8003aee:	f005 f9c1 	bl	8008e74 <scaraFlowDuty>
 8003af2:	4603      	mov	r3, r0
 8003af4:	f887 3d55 	strb.w	r3, [r7, #3413]	; 0xd55
				if ( SCARA_STATUS_OK == status) {
 8003af8:	f897 3d55 	ldrb.w	r3, [r7, #3413]	; 0xd55
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d113      	bne.n	8003b28 <StartDefaultTask+0x12f8>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003b00:	4cad      	ldr	r4, [pc, #692]	; (8003db8 <StartDefaultTask+0x1588>)
 8003b02:	4aae      	ldr	r2, [pc, #696]	; (8003dbc <StartDefaultTask+0x158c>)
 8003b04:	ab22      	add	r3, sp, #136	; 0x88
 8003b06:	4611      	mov	r1, r2
 8003b08:	2298      	movs	r2, #152	; 0x98
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f011 fb70 	bl	80151f0 <memcpy>
 8003b10:	4668      	mov	r0, sp
 8003b12:	f104 0310 	add.w	r3, r4, #16
 8003b16:	2288      	movs	r2, #136	; 0x88
 8003b18:	4619      	mov	r1, r3
 8003b1a:	f011 fb69 	bl	80151f0 <memcpy>
 8003b1e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003b22:	f002 fac5 	bl	80060b0 <lowlayer_computeAndWritePulse>
		  break;
 8003b26:	e021      	b.n	8003b6c <StartDefaultTask+0x133c>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
					  detail_array[0] = status;
 8003b2e:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 8003b32:	f897 2d55 	ldrb.w	r2, [r7, #3413]	; 0xd55
 8003b36:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003b38:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003b3c:	6899      	ldr	r1, [r3, #8]
 8003b3e:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 8003b42:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 8003b46:	4413      	add	r3, r2
 8003b48:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	2301      	movs	r3, #1
 8003b50:	2007      	movs	r0, #7
 8003b52:	f7fe fcbf 	bl	80024d4 <commandRespond1>
 8003b56:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
					  total_respond_length += respond_lenght;
 8003b5a:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 8003b5e:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 8003b62:	4413      	add	r3, r2
 8003b64:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
		  break;
 8003b68:	e000      	b.n	8003b6c <StartDefaultTask+0x133c>

		  }
		  break;
		  
		  default:
			  break;
 8003b6a:	bf00      	nop
		  }
	  }

	  break;
 8003b6c:	e382      	b.n	8004274 <StartDefaultTask+0x1a44>
	  case SCARA_METHOD_TEST:
	  {
		  lowlayer_writePulse(test_value[0], test_value[1], test_value[2], test_value[3]);
 8003b6e:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8003b72:	f993 0000 	ldrsb.w	r0, [r3]
 8003b76:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8003b7a:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8003b7e:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8003b82:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8003b86:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8003b8a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003b8e:	f002 fc37 	bl	8006400 <lowlayer_writePulse>
	  }
	  break;
 8003b92:	e36f      	b.n	8004274 <StartDefaultTask+0x1a44>


	  case SCARA_METHOD_PICK_AND_PLACE:
	  {
		  switch(current_duty_state) {
 8003b94:	f897 3dbc 	ldrb.w	r3, [r7, #3516]	; 0xdbc
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	2b03      	cmp	r3, #3
 8003b9c:	f200 8369 	bhi.w	8004272 <StartDefaultTask+0x1a42>
 8003ba0:	a201      	add	r2, pc, #4	; (adr r2, 8003ba8 <StartDefaultTask+0x1378>)
 8003ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba6:	bf00      	nop
 8003ba8:	08003bb9 	.word	0x08003bb9
 8003bac:	08004113 	.word	0x08004113
 8003bb0:	08004263 	.word	0x08004263
 8003bb4:	08003beb 	.word	0x08003beb
		  case SCARA_DUTY_STATE_INIT:{
			  //HAL_TIM_Base_Start(&htim2);
			  object_tail_pointer = 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f887 3da6 	strb.w	r3, [r7, #3494]	; 0xda6
			  object_head_pointer = 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f887 3da5 	strb.w	r3, [r7, #3493]	; 0xda5
			  operation_state = SCARA_MOVE_TO_TARGET;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f887 3da7 	strb.w	r3, [r7, #3495]	; 0xda7
			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003bca:	2304      	movs	r3, #4
 8003bcc:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
			  duty_cmd.robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8003bd0:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	705a      	strb	r2, [r3, #1]
			  duty_cmd.path_type = DUTY_PATH_LINE;
 8003bd8:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003bdc:	2200      	movs	r2, #0
 8003bde:	739a      	strb	r2, [r3, #14]
			  duty_cmd.space_type = DUTY_SPACE_TASK;
 8003be0:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003be4:	2200      	movs	r2, #0
 8003be6:	735a      	strb	r2, [r3, #13]

		  }
		  break;
 8003be8:	e340      	b.n	800426c <StartDefaultTask+0x1a3c>

		  case SCARA_DUTY_STATE_OPERATION:{
			  if(object_tail_pointer != object_head_pointer){
 8003bea:	f897 2da6 	ldrb.w	r2, [r7, #3494]	; 0xda6
 8003bee:	f897 3da5 	ldrb.w	r3, [r7, #3493]	; 0xda5
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	f000 8337 	beq.w	8004266 <StartDefaultTask+0x1a36>
				  switch(operation_state){
 8003bf8:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 8003bfc:	2b07      	cmp	r3, #7
 8003bfe:	f200 81bf 	bhi.w	8003f80 <StartDefaultTask+0x1750>
 8003c02:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <StartDefaultTask+0x13d8>)
 8003c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c08:	08003c29 	.word	0x08003c29
 8003c0c:	08003d39 	.word	0x08003d39
 8003c10:	08003d67 	.word	0x08003d67
 8003c14:	08003d7f 	.word	0x08003d7f
 8003c18:	08003de9 	.word	0x08003de9
 8003c1c:	08003f0f 	.word	0x08003f0f
 8003c20:	08003f3d 	.word	0x08003f3d
 8003c24:	08003f53 	.word	0x08003f53
					  case SCARA_MOVE_TO_TARGET:{
						  double wait_time = 1e-6*((uint64_t)(GET_MICROS - Object[object_tail_pointer].timer_value)) + MOVE_TIME + PUT_DOWN_TIME_ON_OBJECT + ATTACH_TIME;
 8003c28:	4b65      	ldr	r3, [pc, #404]	; (8003dc0 <StartDefaultTask+0x1590>)
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	4b65      	ldr	r3, [pc, #404]	; (8003dc4 <StartDefaultTask+0x1594>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4965      	ldr	r1, [pc, #404]	; (8003dc8 <StartDefaultTask+0x1598>)
 8003c32:	fba1 1303 	umull	r1, r3, r1, r3
 8003c36:	0c9b      	lsrs	r3, r3, #18
 8003c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f04f 0100 	mov.w	r1, #0
 8003c42:	f897 3da6 	ldrb.w	r3, [r7, #3494]	; 0xda6
 8003c46:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8003c4a:	f44f 749c 	mov.w	r4, #312	; 0x138
 8003c4e:	fb04 f303 	mul.w	r3, r4, r3
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8003c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5c:	ebb0 0a02 	subs.w	sl, r0, r2
 8003c60:	eb61 0b03 	sbc.w	fp, r1, r3
 8003c64:	4650      	mov	r0, sl
 8003c66:	4659      	mov	r1, fp
 8003c68:	f7fc fc90 	bl	800058c <__aeabi_ul2d>
 8003c6c:	a350      	add	r3, pc, #320	; (adr r3, 8003db0 <StartDefaultTask+0x1580>)
 8003c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c72:	f7fc fcc1 	bl	80005f8 <__aeabi_dmul>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4b53      	ldr	r3, [pc, #332]	; (8003dcc <StartDefaultTask+0x159c>)
 8003c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c84:	f7fc fb02 	bl	800028c <__adddf3>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4b4f      	ldr	r3, [pc, #316]	; (8003dd0 <StartDefaultTask+0x15a0>)
 8003c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c96:	f7fc faf9 	bl	800028c <__adddf3>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4b4c      	ldr	r3, [pc, #304]	; (8003dd4 <StartDefaultTask+0x15a4>)
 8003ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca8:	f7fc faf0 	bl	800028c <__adddf3>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	f607 5158 	addw	r1, r7, #3416	; 0xd58
 8003cb4:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.y -= wait_time*conveyor_speed;
 8003cb8:	f897 3da6 	ldrb.w	r3, [r7, #3494]	; 0xda6
 8003cbc:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8003cc0:	f44f 719c 	mov.w	r1, #312	; 0x138
 8003cc4:	fb01 f303 	mul.w	r3, r1, r3
 8003cc8:	4413      	add	r3, r2
 8003cca:	3328      	adds	r3, #40	; 0x28
 8003ccc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003cd0:	4b41      	ldr	r3, [pc, #260]	; (8003dd8 <StartDefaultTask+0x15a8>)
 8003cd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cd6:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8003cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cde:	f7fc fc8b 	bl	80005f8 <__aeabi_dmul>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	f897 4da6 	ldrb.w	r4, [r7, #3494]	; 0xda6
 8003cea:	4640      	mov	r0, r8
 8003cec:	4649      	mov	r1, r9
 8003cee:	f7fc facb 	bl	8000288 <__aeabi_dsub>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8003cfa:	f44f 719c 	mov.w	r1, #312	; 0x138
 8003cfe:	fb01 f104 	mul.w	r1, r1, r4
 8003d02:	4401      	add	r1, r0
 8003d04:	3128      	adds	r1, #40	; 0x28
 8003d06:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003d0a:	f897 1da6 	ldrb.w	r1, [r7, #3494]	; 0xda6
 8003d0e:	4b33      	ldr	r3, [pc, #204]	; (8003ddc <StartDefaultTask+0x15ac>)
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8003d18:	f44f 749c 	mov.w	r4, #312	; 0x138
 8003d1c:	fb04 f101 	mul.w	r1, r4, r1
 8003d20:	4401      	add	r1, r0
 8003d22:	3130      	adds	r1, #48	; 0x30
 8003d24:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = MOVE_TIME;
 8003d28:	4b28      	ldr	r3, [pc, #160]	; (8003dcc <StartDefaultTask+0x159c>)
 8003d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2e:	f607 5198 	addw	r1, r7, #3480	; 0xd98
 8003d32:	e9c1 2300 	strd	r2, r3, [r1]
//						  testing_value = 1;
//						  value1 = Object[object_tail_pointer].object_position.y;
//						  value2 = wait_time;

					  }
					  break;
 8003d36:	e123      	b.n	8003f80 <StartDefaultTask+0x1750>

					  case SCARA_MOVE_DOWN_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_OBJECT;
 8003d38:	f897 1da6 	ldrb.w	r1, [r7, #3494]	; 0xda6
 8003d3c:	4b28      	ldr	r3, [pc, #160]	; (8003de0 <StartDefaultTask+0x15b0>)
 8003d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d42:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8003d46:	f44f 749c 	mov.w	r4, #312	; 0x138
 8003d4a:	fb04 f101 	mul.w	r1, r4, r1
 8003d4e:	4401      	add	r1, r0
 8003d50:	3130      	adds	r1, #48	; 0x30
 8003d52:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PUT_DOWN_TIME_ON_OBJECT;
 8003d56:	4b1e      	ldr	r3, [pc, #120]	; (8003dd0 <StartDefaultTask+0x15a0>)
 8003d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5c:	f607 5198 	addw	r1, r7, #3480	; 0xd98
 8003d60:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003d64:	e10c      	b.n	8003f80 <StartDefaultTask+0x1750>
					  case SCARA_ATTACH:{
//						  state_time = ATTACH_TIME;
						  state_time = 0;
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	f607 5198 	addw	r1, r7, #3480	; 0xd98
 8003d72:	e9c1 2300 	strd	r2, r3, [r1]
						  scaraSetOutput(1);
 8003d76:	2001      	movs	r0, #1
 8003d78:	f005 fe16 	bl	80099a8 <scaraSetOutput>
					  }
					  break;
 8003d7c:	e100      	b.n	8003f80 <StartDefaultTask+0x1750>
					  case SCARA_MOVE_UP_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003d7e:	f897 1da6 	ldrb.w	r1, [r7, #3494]	; 0xda6
 8003d82:	4b16      	ldr	r3, [pc, #88]	; (8003ddc <StartDefaultTask+0x15ac>)
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8003d8c:	f44f 749c 	mov.w	r4, #312	; 0x138
 8003d90:	fb04 f101 	mul.w	r1, r4, r1
 8003d94:	4401      	add	r1, r0
 8003d96:	3130      	adds	r1, #48	; 0x30
 8003d98:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PICK_UP_TIME_ON_OBJECT;
 8003d9c:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <StartDefaultTask+0x15b4>)
 8003d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da2:	f607 5198 	addw	r1, r7, #3480	; 0xd98
 8003da6:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003daa:	e0e9      	b.n	8003f80 <StartDefaultTask+0x1750>
 8003dac:	f3af 8000 	nop.w
 8003db0:	a0b5ed8d 	.word	0xa0b5ed8d
 8003db4:	3eb0c6f7 	.word	0x3eb0c6f7
 8003db8:	20010ab0 	.word	0x20010ab0
 8003dbc:	20010be0 	.word	0x20010be0
 8003dc0:	e0001000 	.word	0xe0001000
 8003dc4:	2000408c 	.word	0x2000408c
 8003dc8:	431bde83 	.word	0x431bde83
 8003dcc:	20000028 	.word	0x20000028
 8003dd0:	20000010 	.word	0x20000010
 8003dd4:	20000030 	.word	0x20000030
 8003dd8:	20000058 	.word	0x20000058
 8003ddc:	20000040 	.word	0x20000040
 8003de0:	20000048 	.word	0x20000048
 8003de4:	20000018 	.word	0x20000018
					  case SCARA_MOVE_TO_SLOT :{
						  ObjectType current_type = Object[object_tail_pointer].object_position.object_type;
 8003de8:	f897 3da6 	ldrb.w	r3, [r7, #3494]	; 0xda6
 8003dec:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8003df0:	f44f 719c 	mov.w	r1, #312	; 0x138
 8003df4:	fb01 f303 	mul.w	r3, r1, r3
 8003df8:	4413      	add	r3, r2
 8003dfa:	3390      	adds	r3, #144	; 0x90
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	f887 3d67 	strb.w	r3, [r7, #3431]	; 0xd67
						  Object[object_tail_pointer].object_position.x = SLot_Cordinate[current_type].posx + Slot_Placement[current_type]*placement_spacing;
 8003e02:	f897 2d67 	ldrb.w	r2, [r7, #3431]	; 0xd67
 8003e06:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	4413      	add	r3, r2
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	440b      	add	r3, r1
 8003e14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003e18:	f897 3d67 	ldrb.w	r3, [r7, #3431]	; 0xd67
 8003e1c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003e20:	5cd3      	ldrb	r3, [r2, r3]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fc fb7e 	bl	8000524 <__aeabi_i2d>
 8003e28:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 8003e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e30:	f7fc fbe2 	bl	80005f8 <__aeabi_dmul>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	f897 4da6 	ldrb.w	r4, [r7, #3494]	; 0xda6
 8003e3c:	4640      	mov	r0, r8
 8003e3e:	4649      	mov	r1, r9
 8003e40:	f7fc fa24 	bl	800028c <__adddf3>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8003e4c:	f44f 719c 	mov.w	r1, #312	; 0x138
 8003e50:	fb01 f104 	mul.w	r1, r1, r4
 8003e54:	4401      	add	r1, r0
 8003e56:	3120      	adds	r1, #32
 8003e58:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.y = SLot_Cordinate[current_type].posy;
 8003e5c:	f897 2d67 	ldrb.w	r2, [r7, #3431]	; 0xd67
 8003e60:	f897 1da6 	ldrb.w	r1, [r7, #3494]	; 0xda6
 8003e64:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8003e68:	4613      	mov	r3, r2
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	4413      	add	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4403      	add	r3, r0
 8003e72:	3308      	adds	r3, #8
 8003e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e78:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8003e7c:	f44f 749c 	mov.w	r4, #312	; 0x138
 8003e80:	fb04 f101 	mul.w	r1, r4, r1
 8003e84:	4401      	add	r1, r0
 8003e86:	3128      	adds	r1, #40	; 0x28
 8003e88:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.roll = SLot_Cordinate[current_type].roll;
 8003e8c:	f897 2d67 	ldrb.w	r2, [r7, #3431]	; 0xd67
 8003e90:	f897 1da6 	ldrb.w	r1, [r7, #3494]	; 0xda6
 8003e94:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8003e98:	4613      	mov	r3, r2
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	4413      	add	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	4403      	add	r3, r0
 8003ea2:	3310      	adds	r3, #16
 8003ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea8:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8003eac:	f44f 749c 	mov.w	r4, #312	; 0x138
 8003eb0:	fb04 f101 	mul.w	r1, r4, r1
 8003eb4:	4401      	add	r1, r0
 8003eb6:	3138      	adds	r1, #56	; 0x38
 8003eb8:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003ebc:	f897 1da6 	ldrb.w	r1, [r7, #3494]	; 0xda6
 8003ec0:	4bcd      	ldr	r3, [pc, #820]	; (80041f8 <StartDefaultTask+0x19c8>)
 8003ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec6:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8003eca:	f44f 749c 	mov.w	r4, #312	; 0x138
 8003ece:	fb04 f101 	mul.w	r1, r4, r1
 8003ed2:	4401      	add	r1, r0
 8003ed4:	3130      	adds	r1, #48	; 0x30
 8003ed6:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = MOVE_TIME;
 8003eda:	4bc8      	ldr	r3, [pc, #800]	; (80041fc <StartDefaultTask+0x19cc>)
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	f607 5198 	addw	r1, r7, #3480	; 0xd98
 8003ee4:	e9c1 2300 	strd	r2, r3, [r1]
						  Slot_Placement[current_type] = (Slot_Placement[current_type] + 1)%2;
 8003ee8:	f897 3d67 	ldrb.w	r3, [r7, #3431]	; 0xd67
 8003eec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003ef0:	5cd3      	ldrb	r3, [r2, r3]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	bfb8      	it	lt
 8003efc:	425b      	neglt	r3, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	f897 3d67 	ldrb.w	r3, [r7, #3431]	; 0xd67
 8003f04:	b2d1      	uxtb	r1, r2
 8003f06:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003f0a:	54d1      	strb	r1, [r2, r3]
					  }
					  break;
 8003f0c:	e038      	b.n	8003f80 <StartDefaultTask+0x1750>
					  case SCARA_MOVE_DOWN_ON_SLOT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_SLOT;
 8003f0e:	f897 1da6 	ldrb.w	r1, [r7, #3494]	; 0xda6
 8003f12:	4bbb      	ldr	r3, [pc, #748]	; (8004200 <StartDefaultTask+0x19d0>)
 8003f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f18:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8003f1c:	f44f 749c 	mov.w	r4, #312	; 0x138
 8003f20:	fb04 f101 	mul.w	r1, r4, r1
 8003f24:	4401      	add	r1, r0
 8003f26:	3130      	adds	r1, #48	; 0x30
 8003f28:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PUT_DOWN_TIME_ON_SLOT;
 8003f2c:	4bb5      	ldr	r3, [pc, #724]	; (8004204 <StartDefaultTask+0x19d4>)
 8003f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f32:	f607 5198 	addw	r1, r7, #3480	; 0xd98
 8003f36:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003f3a:	e021      	b.n	8003f80 <StartDefaultTask+0x1750>
					  case SCARA_RELEASE:{
						  state_time = DETACH_TIME;
 8003f3c:	4bb2      	ldr	r3, [pc, #712]	; (8004208 <StartDefaultTask+0x19d8>)
 8003f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f42:	f607 5198 	addw	r1, r7, #3480	; 0xd98
 8003f46:	e9c1 2300 	strd	r2, r3, [r1]
						  scaraSetOutput(0);
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	f005 fd2c 	bl	80099a8 <scaraSetOutput>
					  }
					  break;
 8003f50:	e016      	b.n	8003f80 <StartDefaultTask+0x1750>
					  case SCARA_MOVE_UP_ON_SLOT:{
						  state_time = PICK_UP_TIME_ON_SLOT;
 8003f52:	4bae      	ldr	r3, [pc, #696]	; (800420c <StartDefaultTask+0x19dc>)
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	f607 5198 	addw	r1, r7, #3480	; 0xd98
 8003f5c:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003f60:	f897 1da6 	ldrb.w	r1, [r7, #3494]	; 0xda6
 8003f64:	4ba4      	ldr	r3, [pc, #656]	; (80041f8 <StartDefaultTask+0x19c8>)
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8003f6e:	f44f 749c 	mov.w	r4, #312	; 0x138
 8003f72:	fb04 f101 	mul.w	r1, r4, r1
 8003f76:	4401      	add	r1, r0
 8003f78:	3130      	adds	r1, #48	; 0x30
 8003f7a:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003f7e:	bf00      	nop
				  }
				  memcpy(&duty_cmd.target_point, &Object[object_tail_pointer].object_position, sizeof(SCARA_PositionTypeDef));
 8003f80:	f897 3da6 	ldrb.w	r3, [r7, #3494]	; 0xda6
 8003f84:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8003f88:	f44f 719c 	mov.w	r1, #312	; 0x138
 8003f8c:	fb01 f303 	mul.w	r3, r1, r3
 8003f90:	18d1      	adds	r1, r2, r3
 8003f92:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003f96:	3328      	adds	r3, #40	; 0x28
 8003f98:	2298      	movs	r2, #152	; 0x98
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f011 f928 	bl	80151f0 <memcpy>
				  duty_cmd.time_total = state_time;
 8003fa0:	f507 613d 	add.w	r1, r7, #3024	; 0xbd0
 8003fa4:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8003fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fac:	e9c1 2308 	strd	r2, r3, [r1, #32]
				  SCARA_StatusTypeDef status1;
				  duty_cmd.v_factor = 0;
 8003fb0:	f507 613d 	add.w	r1, r7, #3024	; 0xbd0
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
				  duty_cmd.coordinate_type = DUTY_COORDINATES_ABS;
 8003fc0:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	731a      	strb	r2, [r3, #12]
				  if(operation_state == SCARA_ATTACH || operation_state == SCARA_RELEASE){
 8003fc8:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d003      	beq.n	8003fd8 <StartDefaultTask+0x17a8>
 8003fd0:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 8003fd4:	2b06      	cmp	r3, #6
 8003fd6:	d103      	bne.n	8003fe0 <StartDefaultTask+0x17b0>
					  status1 = SCARA_STATUS_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f887 3d93 	strb.w	r3, [r7, #3475]	; 0xd93
 8003fde:	e056      	b.n	800408e <StartDefaultTask+0x185e>
				  }else{
					  if(operation_state == SCARA_MOVE_DOWN_ON_OBJECT || operation_state == SCARA_MOVE_DOWN_ON_SLOT || operation_state == SCARA_MOVE_UP_ON_OBJECT || operation_state == SCARA_MOVE_UP_ON_SLOT){
 8003fe0:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d00b      	beq.n	8004000 <StartDefaultTask+0x17d0>
 8003fe8:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 8003fec:	2b05      	cmp	r3, #5
 8003fee:	d007      	beq.n	8004000 <StartDefaultTask+0x17d0>
 8003ff0:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d003      	beq.n	8004000 <StartDefaultTask+0x17d0>
 8003ff8:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 8003ffc:	2b07      	cmp	r3, #7
 8003ffe:	d110      	bne.n	8004022 <StartDefaultTask+0x17f2>
						  duty_cmd.path_type = DUTY_PATH_LINE;
 8004000:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8004004:	2200      	movs	r2, #0
 8004006:	739a      	strb	r2, [r3, #14]
						  duty_cmd.space_type = DUTY_SPACE_TASK;
 8004008:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 800400c:	2200      	movs	r2, #0
 800400e:	735a      	strb	r2, [r3, #13]
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LINEAR;
 8004010:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8004014:	2202      	movs	r2, #2
 8004016:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QT;
 8004018:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 800401c:	2203      	movs	r2, #3
 800401e:	745a      	strb	r2, [r3, #17]
 8004020:	e024      	b.n	800406c <StartDefaultTask+0x183c>
					  }else{
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 8004022:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8004026:	2201      	movs	r2, #1
 8004028:	745a      	strb	r2, [r3, #17]
						  if(pnp_move_option == CMD_MOVE_LINE){
 800402a:	4b79      	ldr	r3, [pc, #484]	; (8004210 <StartDefaultTask+0x19e0>)
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	2b03      	cmp	r3, #3
 8004030:	d10c      	bne.n	800404c <StartDefaultTask+0x181c>
							  duty_cmd.path_type = DUTY_PATH_LINE;
 8004032:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8004036:	2200      	movs	r2, #0
 8004038:	739a      	strb	r2, [r3, #14]
							  duty_cmd.space_type = DUTY_SPACE_TASK;
 800403a:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 800403e:	2200      	movs	r2, #0
 8004040:	735a      	strb	r2, [r3, #13]
							  duty_cmd.trajec_type = DUTY_TRAJECTORY_SCURVE;
 8004042:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8004046:	2201      	movs	r2, #1
 8004048:	741a      	strb	r2, [r3, #16]
 800404a:	e00f      	b.n	800406c <StartDefaultTask+0x183c>
						  }else if(pnp_move_option == CMD_MOVE_JOINT){
 800404c:	4b70      	ldr	r3, [pc, #448]	; (8004210 <StartDefaultTask+0x19e0>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b05      	cmp	r3, #5
 8004052:	d10b      	bne.n	800406c <StartDefaultTask+0x183c>
							  duty_cmd.joint_type = DUTY_JOINT_4DOF;
 8004054:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8004058:	2201      	movs	r2, #1
 800405a:	73da      	strb	r2, [r3, #15]
							  duty_cmd.space_type = DUTY_SPACE_JOINT;
 800405c:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8004060:	2201      	movs	r2, #1
 8004062:	735a      	strb	r2, [r3, #13]
							  duty_cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 8004064:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8004068:	2200      	movs	r2, #0
 800406a:	741a      	strb	r2, [r3, #16]
						  }

					  }
					  status1 = scaraInitDuty(duty_cmd);
 800406c:	f507 643d 	add.w	r4, r7, #3024	; 0xbd0
 8004070:	4668      	mov	r0, sp
 8004072:	f104 0310 	add.w	r3, r4, #16
 8004076:	f44f 72b0 	mov.w	r2, #352	; 0x160
 800407a:	4619      	mov	r1, r3
 800407c:	f011 f8b8 	bl	80151f0 <memcpy>
 8004080:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004084:	f002 fbac 	bl	80067e0 <scaraInitDuty>
 8004088:	4603      	mov	r3, r0
 800408a:	f887 3d93 	strb.w	r3, [r7, #3475]	; 0xd93
				  }
				  if ( SCARA_STATUS_OK == status1) {
 800408e:	f897 3d93 	ldrb.w	r3, [r7, #3475]	; 0xd93
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10b      	bne.n	80040ae <StartDefaultTask+0x187e>
				  	current_duty_state = SCARA_DUTY_STATE_FLOW;
 8004096:	2302      	movs	r3, #2
 8004098:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
				  	run_time = 0;
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	f607 51a8 	addw	r1, r7, #3496	; 0xda8
 80040a8:	e9c1 2300 	strd	r2, r3, [r1]
 80040ac:	e031      	b.n	8004112 <StartDefaultTask+0x18e2>
				  } else {
					object_tail_pointer = (object_tail_pointer+1)%8;
 80040ae:	f897 3da6 	ldrb.w	r3, [r7, #3494]	; 0xda6
 80040b2:	3301      	adds	r3, #1
 80040b4:	425a      	negs	r2, r3
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	f002 0207 	and.w	r2, r2, #7
 80040be:	bf58      	it	pl
 80040c0:	4253      	negpl	r3, r2
 80040c2:	f887 3da6 	strb.w	r3, [r7, #3494]	; 0xda6
					operation_state = SCARA_MOVE_TO_TARGET;
 80040c6:	2300      	movs	r3, #0
 80040c8:	f887 3da7 	strb.w	r3, [r7, #3495]	; 0xda7
					detail_array[0] = status1;
 80040cc:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 80040d0:	f897 2d93 	ldrb.w	r2, [r7, #3475]	; 0xd93
 80040d4:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80040d6:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 80040da:	6899      	ldr	r1, [r3, #8]
 80040dc:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 80040e0:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 80040e4:	4413      	add	r3, r2
 80040e6:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	2301      	movs	r3, #1
 80040ee:	2007      	movs	r0, #7
 80040f0:	f7fe f9f0 	bl	80024d4 <commandRespond1>
 80040f4:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
					total_respond_length += respond_lenght;
 80040f8:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 80040fc:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 8004100:	4413      	add	r3, r2
 8004102:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
					LOG_REPORT("INIT FAIL", __LINE__);
 8004106:	f240 31b3 	movw	r1, #947	; 0x3b3
 800410a:	4842      	ldr	r0, [pc, #264]	; (8004214 <StartDefaultTask+0x19e4>)
 800410c:	f7fe fa4a 	bl	80025a4 <LOG_REPORT>
					break;
 8004110:	e0ac      	b.n	800426c <StartDefaultTask+0x1a3c>


		  case SCARA_DUTY_STATE_FLOW:{
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8004112:	a337      	add	r3, pc, #220	; (adr r3, 80041f0 <StartDefaultTask+0x19c0>)
 8004114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004118:	f607 51a8 	addw	r1, r7, #3496	; 0xda8
 800411c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004120:	f7fc f8b4 	bl	800028c <__adddf3>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	f607 51a8 	addw	r1, r7, #3496	; 0xda8
 800412c:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8004130:	f607 53a8 	addw	r3, r7, #3496	; 0xda8
 8004134:	ed93 0b00 	vldr	d0, [r3]
 8004138:	f005 fcb8 	bl	8009aac <scaraIsFinish>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d022      	beq.n	8004188 <StartDefaultTask+0x1958>
				current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8004142:	2304      	movs	r3, #4
 8004144:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
				if(operation_state == SCARA_MOVE_UP_ON_SLOT){
 8004148:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 800414c:	2b07      	cmp	r3, #7
 800414e:	d10f      	bne.n	8004170 <StartDefaultTask+0x1940>
					operation_state = SCARA_MOVE_TO_TARGET;
 8004150:	2300      	movs	r3, #0
 8004152:	f887 3da7 	strb.w	r3, [r7, #3495]	; 0xda7
					object_tail_pointer = (object_tail_pointer+1)%8;
 8004156:	f897 3da6 	ldrb.w	r3, [r7, #3494]	; 0xda6
 800415a:	3301      	adds	r3, #1
 800415c:	425a      	negs	r2, r3
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	f002 0207 	and.w	r2, r2, #7
 8004166:	bf58      	it	pl
 8004168:	4253      	negpl	r3, r2
 800416a:	f887 3da6 	strb.w	r3, [r7, #3494]	; 0xda6
 800416e:	e004      	b.n	800417a <StartDefaultTask+0x194a>
				}else{
					operation_state += 1; //next state
 8004170:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 8004174:	3301      	adds	r3, #1
 8004176:	f887 3da7 	strb.w	r3, [r7, #3495]	; 0xda7
				}
				lowlayer_readTruePosition(&positionNext);
 800417a:	4827      	ldr	r0, [pc, #156]	; (8004218 <StartDefaultTask+0x19e8>)
 800417c:	f001 fe08 	bl	8005d90 <lowlayer_readTruePosition>
				kinematicForward(&positionNext);
 8004180:	4825      	ldr	r0, [pc, #148]	; (8004218 <StartDefaultTask+0x19e8>)
 8004182:	f000 fec9 	bl	8004f18 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 8004186:	e070      	b.n	800426a <StartDefaultTask+0x1a3a>
			  } else if(operation_state != SCARA_ATTACH && operation_state != SCARA_RELEASE){
 8004188:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 800418c:	2b02      	cmp	r3, #2
 800418e:	d06c      	beq.n	800426a <StartDefaultTask+0x1a3a>
 8004190:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 8004194:	2b06      	cmp	r3, #6
 8004196:	d068      	beq.n	800426a <StartDefaultTask+0x1a3a>
				status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8004198:	4c20      	ldr	r4, [pc, #128]	; (800421c <StartDefaultTask+0x19ec>)
 800419a:	4668      	mov	r0, sp
 800419c:	f104 0308 	add.w	r3, r4, #8
 80041a0:	2290      	movs	r2, #144	; 0x90
 80041a2:	4619      	mov	r1, r3
 80041a4:	f011 f824 	bl	80151f0 <memcpy>
 80041a8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80041ac:	481a      	ldr	r0, [pc, #104]	; (8004218 <StartDefaultTask+0x19e8>)
 80041ae:	f607 51a8 	addw	r1, r7, #3496	; 0xda8
 80041b2:	ed91 0b00 	vldr	d0, [r1]
 80041b6:	f004 fe5d 	bl	8008e74 <scaraFlowDuty>
 80041ba:	4603      	mov	r3, r0
 80041bc:	f887 3d57 	strb.w	r3, [r7, #3415]	; 0xd57
				if ( SCARA_STATUS_OK == status) {
 80041c0:	f897 3d57 	ldrb.w	r3, [r7, #3415]	; 0xd57
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d12b      	bne.n	8004220 <StartDefaultTask+0x19f0>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 80041c8:	4c14      	ldr	r4, [pc, #80]	; (800421c <StartDefaultTask+0x19ec>)
 80041ca:	4a13      	ldr	r2, [pc, #76]	; (8004218 <StartDefaultTask+0x19e8>)
 80041cc:	ab22      	add	r3, sp, #136	; 0x88
 80041ce:	4611      	mov	r1, r2
 80041d0:	2298      	movs	r2, #152	; 0x98
 80041d2:	4618      	mov	r0, r3
 80041d4:	f011 f80c 	bl	80151f0 <memcpy>
 80041d8:	4668      	mov	r0, sp
 80041da:	f104 0310 	add.w	r3, r4, #16
 80041de:	2288      	movs	r2, #136	; 0x88
 80041e0:	4619      	mov	r1, r3
 80041e2:	f011 f805 	bl	80151f0 <memcpy>
 80041e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80041ea:	f001 ff61 	bl	80060b0 <lowlayer_computeAndWritePulse>
		  break;
 80041ee:	e03c      	b.n	800426a <StartDefaultTask+0x1a3a>
 80041f0:	40000000 	.word	0x40000000
 80041f4:	3f847ae1 	.word	0x3f847ae1
 80041f8:	20000040 	.word	0x20000040
 80041fc:	20000028 	.word	0x20000028
 8004200:	20000050 	.word	0x20000050
 8004204:	20000008 	.word	0x20000008
 8004208:	20000038 	.word	0x20000038
 800420c:	20000020 	.word	0x20000020
 8004210:	20000064 	.word	0x20000064
 8004214:	0801b5c0 	.word	0x0801b5c0
 8004218:	20010be0 	.word	0x20010be0
 800421c:	20010ab0 	.word	0x20010ab0
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8004220:	2303      	movs	r3, #3
 8004222:	f887 3dbc 	strb.w	r3, [r7, #3516]	; 0xdbc
					  detail_array[0] = status;
 8004226:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 800422a:	f897 2d57 	ldrb.w	r2, [r7, #3415]	; 0xd57
 800422e:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8004230:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8004234:	6899      	ldr	r1, [r3, #8]
 8004236:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 800423a:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 800423e:	4413      	add	r3, r2
 8004240:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	2301      	movs	r3, #1
 8004248:	2007      	movs	r0, #7
 800424a:	f7fe f943 	bl	80024d4 <commandRespond1>
 800424e:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
					  total_respond_length += respond_lenght;
 8004252:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 8004256:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 800425a:	4413      	add	r3, r2
 800425c:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
		  break;
 8004260:	e003      	b.n	800426a <StartDefaultTask+0x1a3a>

		  case SCARA_DUTY_STATE_FINISH:

			  //error
			  //free(Object);
		  break;
 8004262:	bf00      	nop
 8004264:	e005      	b.n	8004272 <StartDefaultTask+0x1a42>
				  break;
 8004266:	bf00      	nop
 8004268:	e003      	b.n	8004272 <StartDefaultTask+0x1a42>
		  break;
 800426a:	bf00      	nop
		  }
	  }
	  break;
 800426c:	e001      	b.n	8004272 <StartDefaultTask+0x1a42>
	  break;
 800426e:	bf00      	nop
 8004270:	e000      	b.n	8004274 <StartDefaultTask+0x1a44>
	  break;
 8004272:	bf00      	nop
	  default:
	  {

	  }
	  }
	  if(continuous_update == 1 && update_pos_counter++ >= update_pos_cycle){
 8004274:	4b38      	ldr	r3, [pc, #224]	; (8004358 <StartDefaultTask+0x1b28>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d147      	bne.n	800430c <StartDefaultTask+0x1adc>
 800427c:	f897 3dc6 	ldrb.w	r3, [r7, #3526]	; 0xdc6
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	f887 2dc6 	strb.w	r2, [r7, #3526]	; 0xdc6
 8004286:	4a35      	ldr	r2, [pc, #212]	; (800435c <StartDefaultTask+0x1b2c>)
 8004288:	7812      	ldrb	r2, [r2, #0]
 800428a:	4293      	cmp	r3, r2
 800428c:	d33e      	bcc.n	800430c <StartDefaultTask+0x1adc>
		  update_pos_counter = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	f887 3dc6 	strb.w	r3, [r7, #3526]	; 0xdc6
		  lowlayer_readTruePosition(&update_position);
 8004294:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004298:	4618      	mov	r0, r3
 800429a:	f001 fd79 	bl	8005d90 <lowlayer_readTruePosition>
//		  kinematicForward(&update_position);
		  if(testing_value == 1){
 800429e:	f897 3dbf 	ldrb.w	r3, [r7, #3519]	; 0xdbf
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d109      	bne.n	80042ba <StartDefaultTask+0x1a8a>
			  testing_value = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	f887 3dbf 	strb.w	r3, [r7, #3519]	; 0xdbf
			  update_position.D3 = -2000;
 80042ac:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80042b0:	a327      	add	r3, pc, #156	; (adr r3, 8004350 <StartDefaultTask+0x1b20>)
 80042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		  }
		  respond_lenght = scaraPosition_packaging(detail_array, update_position);
 80042ba:	f507 6429 	add.w	r4, r7, #2704	; 0xa90
 80042be:	f607 352c 	addw	r5, r7, #2860	; 0xb2c
 80042c2:	4668      	mov	r0, sp
 80042c4:	f104 0308 	add.w	r3, r4, #8
 80042c8:	2290      	movs	r2, #144	; 0x90
 80042ca:	4619      	mov	r1, r3
 80042cc:	f010 ff90 	bl	80151f0 <memcpy>
 80042d0:	e894 000c 	ldmia.w	r4, {r2, r3}
 80042d4:	4628      	mov	r0, r5
 80042d6:	f005 fc03 	bl	8009ae0 <scaraPosition_packaging>
 80042da:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
		  respond_lenght = commandRespond1(RPD_POSITION, CMD_READ_POSITION, detail_array, respond_lenght, &respond[total_respond_length]);
 80042de:	f607 327c 	addw	r2, r7, #2940	; 0xb7c
 80042e2:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 80042e6:	4413      	add	r3, r2
 80042e8:	f607 322c 	addw	r2, r7, #2860	; 0xb2c
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 80042f2:	2109      	movs	r1, #9
 80042f4:	2002      	movs	r0, #2
 80042f6:	f7fe f8ed 	bl	80024d4 <commandRespond1>
 80042fa:	f8c7 0d6c 	str.w	r0, [r7, #3436]	; 0xd6c
		  total_respond_length += respond_lenght;
 80042fe:	f8d7 2dc0 	ldr.w	r2, [r7, #3520]	; 0xdc0
 8004302:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 8004306:	4413      	add	r3, r2
 8004308:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
//	  if(testing_value == 1){
//		  testing_value = 0;
//		  LOG_REPORT1("info", value1, value2);
//	  }
	  /* 4--- Send to PC Phase ---*/
	if(total_respond_length > 0){
 800430c:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 8004310:	2b00      	cmp	r3, #0
 8004312:	dd08      	ble.n	8004326 <StartDefaultTask+0x1af6>
		CDC_Transmit_FS(respond, total_respond_length);
 8004314:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 8004318:	b29a      	uxth	r2, r3
 800431a:	f607 337c 	addw	r3, r7, #2940	; 0xb7c
 800431e:	4611      	mov	r1, r2
 8004320:	4618      	mov	r0, r3
 8004322:	f010 fae7 	bl	80148f4 <CDC_Transmit_FS>
	}

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 8004326:	f897 3dbe 	ldrb.w	r3, [r7, #3518]	; 0xdbe
 800432a:	4618      	mov	r0, r3
 800432c:	f005 fb6e 	bl	8009a0c <scaraSetMethod>
	  scaraSetMode(current_mode);
 8004330:	f897 3dbd 	ldrb.w	r3, [r7, #3517]	; 0xdbd
 8004334:	4618      	mov	r0, r3
 8004336:	f005 fb59 	bl	80099ec <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 800433a:	f897 3dbc 	ldrb.w	r3, [r7, #3516]	; 0xdbc
 800433e:	4618      	mov	r0, r3
 8004340:	f005 fb44 	bl	80099cc <scaraSetDutyState>

    osDelay(1);
 8004344:	2001      	movs	r0, #1
 8004346:	f00d fbb0 	bl	8011aaa <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 800434a:	f7fe bb07 	b.w	800295c <StartDefaultTask+0x12c>
 800434e:	bf00      	nop
 8004350:	00000000 	.word	0x00000000
 8004354:	c09f4000 	.word	0xc09f4000
 8004358:	2000440a 	.word	0x2000440a
 800435c:	20000004 	.word	0x20000004

08004360 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 8004360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004362:	f2ad 5d34 	subw	sp, sp, #1332	; 0x534
 8004366:	af5c      	add	r7, sp, #368	; 0x170
 8004368:	1d3b      	adds	r3, r7, #4
 800436a:	6018      	str	r0, [r3, #0]
	int32_t				respond_lenght;
	//int32_t				message_lenght;
	int32_t 			detail_length;

	// Default value
	duty_cmd.key_speed = 1;
 800436c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8004370:	2201      	movs	r2, #1
 8004372:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 8004374:	4964      	ldr	r1, [pc, #400]	; (8004508 <Start_USB_RX_Task+0x1a8>)
 8004376:	4865      	ldr	r0, [pc, #404]	; (800450c <Start_USB_RX_Task+0x1ac>)
 8004378:	f001 fa73 	bl	8005862 <ringBuff_DistanceOf>
 800437c:	f8c7 03b8 	str.w	r0, [r7, #952]	; 0x3b8
		  if (distance != -1) {
 8004380:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004388:	d0f4      	beq.n	8004374 <Start_USB_RX_Task+0x14>
 800438a:	466b      	mov	r3, sp
 800438c:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 800438e:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8004392:	1c5c      	adds	r4, r3, #1
 8004394:	1e63      	subs	r3, r4, #1
 8004396:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800439a:	4623      	mov	r3, r4
 800439c:	4618      	mov	r0, r3
 800439e:	f04f 0100 	mov.w	r1, #0
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	00cb      	lsls	r3, r1, #3
 80043ac:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80043b0:	00c2      	lsls	r2, r0, #3
 80043b2:	4623      	mov	r3, r4
 80043b4:	4618      	mov	r0, r3
 80043b6:	f04f 0100 	mov.w	r1, #0
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	00cb      	lsls	r3, r1, #3
 80043c4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80043c8:	00c2      	lsls	r2, r0, #3
 80043ca:	4623      	mov	r3, r4
 80043cc:	3307      	adds	r3, #7
 80043ce:	08db      	lsrs	r3, r3, #3
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	ebad 0d03 	sub.w	sp, sp, r3
 80043d6:	ab5c      	add	r3, sp, #368	; 0x170
 80043d8:	3300      	adds	r3, #0
 80043da:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 80043de:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 80043e2:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 80043e6:	3301      	adds	r3, #1
 80043e8:	461a      	mov	r2, r3
 80043ea:	4848      	ldr	r0, [pc, #288]	; (800450c <Start_USB_RX_Task+0x1ac>)
 80043ec:	f001 fa18 	bl	8005820 <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1, data_packet);
 80043f0:	f8d7 03b0 	ldr.w	r0, [r7, #944]	; 0x3b0
 80043f4:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 80043f8:	3301      	adds	r3, #1
 80043fa:	f107 020c 	add.w	r2, r7, #12
 80043fe:	4619      	mov	r1, r3
 8004400:	f7fe f916 	bl	8002630 <unPackPayload>
 8004404:	f8c7 03ac 	str.w	r0, [r7, #940]	; 0x3ac

			  if( -1 == ret) {
 8004408:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 800440c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004410:	d077      	beq.n	8004502 <Start_USB_RX_Task+0x1a2>
				  //LOG_REPORT("UNPACK FAIL", __LINE__);
			  } else {
				  //LOG_REPORT((char*) temp, __LINE__);
				  cmd_type = packetRead(data_packet, ret, &id_command, &duty_cmd);
 8004412:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8004416:	f507 7267 	add.w	r2, r7, #924	; 0x39c
 800441a:	f107 000c 	add.w	r0, r7, #12
 800441e:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 8004422:	f7fc fde5 	bl	8000ff0 <packetRead>
 8004426:	4603      	mov	r3, r0
 8004428:	f887 33ab 	strb.w	r3, [r7, #939]	; 0x3ab
				  memset(detail, 0, sizeof(detail));
 800442c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004430:	2287      	movs	r2, #135	; 0x87
 8004432:	2100      	movs	r1, #0
 8004434:	4618      	mov	r0, r3
 8004436:	f010 ff03 	bl	8015240 <memset>
				  detail_length = 0;
 800443a:	f107 0308 	add.w	r3, r7, #8
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]
				  rpd_type = commandReply(cmd_type, duty_cmd, detail, &detail_length);
 8004442:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8004446:	f897 53ab 	ldrb.w	r5, [r7, #939]	; 0x3ab
 800444a:	f107 0308 	add.w	r3, r7, #8
 800444e:	935b      	str	r3, [sp, #364]	; 0x16c
 8004450:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004454:	935a      	str	r3, [sp, #360]	; 0x168
 8004456:	4668      	mov	r0, sp
 8004458:	f104 0308 	add.w	r3, r4, #8
 800445c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8004460:	4619      	mov	r1, r3
 8004462:	f010 fec5 	bl	80151f0 <memcpy>
 8004466:	e894 000c 	ldmia.w	r4, {r2, r3}
 800446a:	4628      	mov	r0, r5
 800446c:	f7fd fe30 	bl	80020d0 <commandReply>
 8004470:	4603      	mov	r3, r0
 8004472:	f887 33aa 	strb.w	r3, [r7, #938]	; 0x3aa
				  //LOG_REPORT("tail", usb_rx_ringbuff.tail);
				  if ( RPD_DUTY == rpd_type) {
 8004476:	f897 33aa 	ldrb.w	r3, [r7, #938]	; 0x3aa
 800447a:	2b09      	cmp	r3, #9
 800447c:	d123      	bne.n	80044c6 <Start_USB_RX_Task+0x166>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 800447e:	2300      	movs	r3, #0
 8004480:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
					  // Wait allocate
					  while (dataMail == NULL) {
 8004484:	e008      	b.n	8004498 <Start_USB_RX_Task+0x138>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8004486:	4b22      	ldr	r3, [pc, #136]	; (8004510 <Start_USB_RX_Task+0x1b0>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f04f 31ff 	mov.w	r1, #4294967295
 800448e:	4618      	mov	r0, r3
 8004490:	f00d fd1c 	bl	8011ecc <osMailAlloc>
 8004494:	f8c7 03bc 	str.w	r0, [r7, #956]	; 0x3bc
					  while (dataMail == NULL) {
 8004498:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f2      	beq.n	8004486 <Start_USB_RX_Task+0x126>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 80044a0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80044a4:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80044a8:	4619      	mov	r1, r3
 80044aa:	f8d7 03bc 	ldr.w	r0, [r7, #956]	; 0x3bc
 80044ae:	f010 fe9f 	bl	80151f0 <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 80044b2:	4b17      	ldr	r3, [pc, #92]	; (8004510 <Start_USB_RX_Task+0x1b0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f8d7 13bc 	ldr.w	r1, [r7, #956]	; 0x3bc
 80044ba:	4618      	mov	r0, r3
 80044bc:	f00d fd1c 	bl	8011ef8 <osMailPut>
 80044c0:	f8c7 03a0 	str.w	r0, [r7, #928]	; 0x3a0
 80044c4:	e01d      	b.n	8004502 <Start_USB_RX_Task+0x1a2>
						  //LOG_REPORT("DUTY SEND", __LINE__);
					  }

				//   }else if( RPD_POSITION == rpd_type) { 
				// 	  CDC_Transmit_FS(detail, 84);
				  }else if(rpd_type == RPD_TRANSFER){
 80044c6:	f897 33aa 	ldrb.w	r3, [r7, #938]	; 0x3aa
 80044ca:	2b0a      	cmp	r3, #10
 80044cc:	d019      	beq.n	8004502 <Start_USB_RX_Task+0x1a2>

				  }else {
					  respond_lenght	= commandRespond1(rpd_type, cmd_type,
 80044ce:	f897 13ab 	ldrb.w	r1, [r7, #939]	; 0x3ab
 80044d2:	f107 0308 	add.w	r3, r7, #8
 80044d6:	681c      	ldr	r4, [r3, #0]
 80044d8:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80044dc:	f897 03aa 	ldrb.w	r0, [r7, #938]	; 0x3aa
 80044e0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	4623      	mov	r3, r4
 80044e8:	f7fd fff4 	bl	80024d4 <commandRespond1>
 80044ec:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
							  	  	  	  (char *)detail, detail_length,
										  (char *)respond);
					  CDC_Transmit_FS(respond, respond_lenght);
 80044f0:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80044fa:	4611      	mov	r1, r2
 80044fc:	4618      	mov	r0, r3
 80044fe:	f010 f9f9 	bl	80148f4 <CDC_Transmit_FS>
 8004502:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 8004504:	e736      	b.n	8004374 <Start_USB_RX_Task+0x14>
 8004506:	bf00      	nop
 8004508:	0801b680 	.word	0x0801b680
 800450c:	20000068 	.word	0x20000068
 8004510:	2000fe7c 	.word	0x2000fe7c

08004514 <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	b292      	uxth	r2, r2
 8004524:	801a      	strh	r2, [r3, #0]
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	b29b      	uxth	r3, r3
}
 8004540:	4618      	mov	r0, r3
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8004552:	1d3b      	adds	r3, r7, #4
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	605a      	str	r2, [r3, #4]
 800455a:	609a      	str	r2, [r3, #8]
 800455c:	60da      	str	r2, [r3, #12]
 800455e:	611a      	str	r2, [r3, #16]
 8004560:	615a      	str	r2, [r3, #20]
 8004562:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8004564:	4b27      	ldr	r3, [pc, #156]	; (8004604 <MX_FSMC_Init+0xb8>)
 8004566:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800456a:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800456c:	4b25      	ldr	r3, [pc, #148]	; (8004604 <MX_FSMC_Init+0xb8>)
 800456e:	4a26      	ldr	r2, [pc, #152]	; (8004608 <MX_FSMC_Init+0xbc>)
 8004570:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8004572:	4b24      	ldr	r3, [pc, #144]	; (8004604 <MX_FSMC_Init+0xb8>)
 8004574:	2200      	movs	r2, #0
 8004576:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8004578:	4b22      	ldr	r3, [pc, #136]	; (8004604 <MX_FSMC_Init+0xb8>)
 800457a:	2202      	movs	r2, #2
 800457c:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 800457e:	4b21      	ldr	r3, [pc, #132]	; (8004604 <MX_FSMC_Init+0xb8>)
 8004580:	2208      	movs	r2, #8
 8004582:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004584:	4b1f      	ldr	r3, [pc, #124]	; (8004604 <MX_FSMC_Init+0xb8>)
 8004586:	2210      	movs	r2, #16
 8004588:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800458a:	4b1e      	ldr	r3, [pc, #120]	; (8004604 <MX_FSMC_Init+0xb8>)
 800458c:	2200      	movs	r2, #0
 800458e:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004590:	4b1c      	ldr	r3, [pc, #112]	; (8004604 <MX_FSMC_Init+0xb8>)
 8004592:	2200      	movs	r2, #0
 8004594:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8004596:	4b1b      	ldr	r3, [pc, #108]	; (8004604 <MX_FSMC_Init+0xb8>)
 8004598:	2200      	movs	r2, #0
 800459a:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800459c:	4b19      	ldr	r3, [pc, #100]	; (8004604 <MX_FSMC_Init+0xb8>)
 800459e:	2200      	movs	r2, #0
 80045a0:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80045a2:	4b18      	ldr	r3, [pc, #96]	; (8004604 <MX_FSMC_Init+0xb8>)
 80045a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80045a8:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80045aa:	4b16      	ldr	r3, [pc, #88]	; (8004604 <MX_FSMC_Init+0xb8>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80045b0:	4b14      	ldr	r3, [pc, #80]	; (8004604 <MX_FSMC_Init+0xb8>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80045b6:	4b13      	ldr	r3, [pc, #76]	; (8004604 <MX_FSMC_Init+0xb8>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80045bc:	4b11      	ldr	r3, [pc, #68]	; (8004604 <MX_FSMC_Init+0xb8>)
 80045be:	2200      	movs	r2, #0
 80045c0:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80045c2:	4b10      	ldr	r3, [pc, #64]	; (8004604 <MX_FSMC_Init+0xb8>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80045c8:	230f      	movs	r3, #15
 80045ca:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80045cc:	230f      	movs	r3, #15
 80045ce:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80045d0:	23ff      	movs	r3, #255	; 0xff
 80045d2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80045d4:	230f      	movs	r3, #15
 80045d6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80045d8:	2310      	movs	r3, #16
 80045da:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80045dc:	2311      	movs	r3, #17
 80045de:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80045e0:	2300      	movs	r3, #0
 80045e2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 80045e4:	1d3b      	adds	r3, r7, #4
 80045e6:	2200      	movs	r2, #0
 80045e8:	4619      	mov	r1, r3
 80045ea:	4806      	ldr	r0, [pc, #24]	; (8004604 <MX_FSMC_Init+0xb8>)
 80045ec:	f007 f81e 	bl	800b62c <HAL_NOR_Init>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80045f6:	f001 f859 	bl	80056ac <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80045fa:	bf00      	nop
 80045fc:	3720      	adds	r7, #32
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	2000fe88 	.word	0x2000fe88
 8004608:	a0000104 	.word	0xa0000104

0800460c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004612:	1d3b      	adds	r3, r7, #4
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	605a      	str	r2, [r3, #4]
 800461a:	609a      	str	r2, [r3, #8]
 800461c:	60da      	str	r2, [r3, #12]
 800461e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8004620:	4b24      	ldr	r3, [pc, #144]	; (80046b4 <HAL_FSMC_MspInit+0xa8>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d140      	bne.n	80046aa <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8004628:	4b22      	ldr	r3, [pc, #136]	; (80046b4 <HAL_FSMC_MspInit+0xa8>)
 800462a:	2201      	movs	r2, #1
 800462c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800462e:	2300      	movs	r3, #0
 8004630:	603b      	str	r3, [r7, #0]
 8004632:	4b21      	ldr	r3, [pc, #132]	; (80046b8 <HAL_FSMC_MspInit+0xac>)
 8004634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004636:	4a20      	ldr	r2, [pc, #128]	; (80046b8 <HAL_FSMC_MspInit+0xac>)
 8004638:	f043 0301 	orr.w	r3, r3, #1
 800463c:	6393      	str	r3, [r2, #56]	; 0x38
 800463e:	4b1e      	ldr	r3, [pc, #120]	; (80046b8 <HAL_FSMC_MspInit+0xac>)
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	603b      	str	r3, [r7, #0]
 8004648:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800464a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800464e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004650:	2302      	movs	r3, #2
 8004652:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004654:	2300      	movs	r3, #0
 8004656:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004658:	2303      	movs	r3, #3
 800465a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800465c:	230c      	movs	r3, #12
 800465e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004660:	1d3b      	adds	r3, r7, #4
 8004662:	4619      	mov	r1, r3
 8004664:	4815      	ldr	r0, [pc, #84]	; (80046bc <HAL_FSMC_MspInit+0xb0>)
 8004666:	f006 fe2b 	bl	800b2c0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800466a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800466e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004670:	2302      	movs	r3, #2
 8004672:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004674:	2300      	movs	r3, #0
 8004676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004678:	2303      	movs	r3, #3
 800467a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800467c:	230c      	movs	r3, #12
 800467e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004680:	1d3b      	adds	r3, r7, #4
 8004682:	4619      	mov	r1, r3
 8004684:	480e      	ldr	r0, [pc, #56]	; (80046c0 <HAL_FSMC_MspInit+0xb4>)
 8004686:	f006 fe1b 	bl	800b2c0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800468a:	2380      	movs	r3, #128	; 0x80
 800468c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800468e:	2302      	movs	r3, #2
 8004690:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004692:	2300      	movs	r3, #0
 8004694:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004696:	2303      	movs	r3, #3
 8004698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800469a:	230c      	movs	r3, #12
 800469c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800469e:	1d3b      	adds	r3, r7, #4
 80046a0:	4619      	mov	r1, r3
 80046a2:	4808      	ldr	r0, [pc, #32]	; (80046c4 <HAL_FSMC_MspInit+0xb8>)
 80046a4:	f006 fe0c 	bl	800b2c0 <HAL_GPIO_Init>
 80046a8:	e000      	b.n	80046ac <HAL_FSMC_MspInit+0xa0>
    return;
 80046aa:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20004860 	.word	0x20004860
 80046b8:	40023800 	.word	0x40023800
 80046bc:	40021000 	.word	0x40021000
 80046c0:	40020c00 	.word	0x40020c00
 80046c4:	40020400 	.word	0x40020400

080046c8 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 80046d0:	f7ff ff9c 	bl	800460c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 80046d4:	bf00      	nop
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	0000      	movs	r0, r0
	...

080046e0 <update_gcode_point>:
extern int16_t 							pre_clutch_index;
extern Gcode_Packet_Command_TypeDef 	pre_height;
extern Gcode_Packet_Command_TypeDef 	Gcode_Mode;
extern SCARA_Gcode_Cor_TypeDef			Gcode_Cor[1000];
void update_gcode_point(DUTY_Command_TypeDef *duty_cmd, int32_t run_point)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
//		bezier_y_coeffs[1] = ((double)Gcode_Cor[run_point].Y * COR_INVERSE_SCALE + offset_y)*2.0*bezier_wc;
//		bezier_y_coeffs[2] = duty_cmd->target_point.y;
//	}else{
//
//	}
	duty_cmd->target_point.x = (double)Gcode_Cor[run_point].X * DATA_INVERSE_SCALE + offset_x;
 80046ea:	499d      	ldr	r1, [pc, #628]	; (8004960 <update_gcode_point+0x280>)
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	4613      	mov	r3, r2
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	1a9b      	subs	r3, r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	440b      	add	r3, r1
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fb ff12 	bl	8000524 <__aeabi_i2d>
 8004700:	a395      	add	r3, pc, #596	; (adr r3, 8004958 <update_gcode_point+0x278>)
 8004702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004706:	f7fb ff77 	bl	80005f8 <__aeabi_dmul>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	4610      	mov	r0, r2
 8004710:	4619      	mov	r1, r3
 8004712:	4b94      	ldr	r3, [pc, #592]	; (8004964 <update_gcode_point+0x284>)
 8004714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004718:	f7fb fdb8 	bl	800028c <__adddf3>
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	duty_cmd->target_point.y = (double)Gcode_Cor[run_point].Y * DATA_INVERSE_SCALE + offset_y;
 8004726:	498e      	ldr	r1, [pc, #568]	; (8004960 <update_gcode_point+0x280>)
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	4613      	mov	r3, r2
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	1a9b      	subs	r3, r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	440b      	add	r3, r1
 8004734:	3304      	adds	r3, #4
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f7fb fef3 	bl	8000524 <__aeabi_i2d>
 800473e:	a386      	add	r3, pc, #536	; (adr r3, 8004958 <update_gcode_point+0x278>)
 8004740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004744:	f7fb ff58 	bl	80005f8 <__aeabi_dmul>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4610      	mov	r0, r2
 800474e:	4619      	mov	r1, r3
 8004750:	4b85      	ldr	r3, [pc, #532]	; (8004968 <update_gcode_point+0x288>)
 8004752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004756:	f7fb fd99 	bl	800028c <__adddf3>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	if(Gcode_Cor[run_point].configure.type_define[1] == UP_Z){
 8004764:	497e      	ldr	r1, [pc, #504]	; (8004960 <update_gcode_point+0x280>)
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	4613      	mov	r3, r2
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	331b      	adds	r3, #27
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b06      	cmp	r3, #6
 8004778:	d10d      	bne.n	8004796 <update_gcode_point+0xb6>
	  duty_cmd->target_point.z = up_z_height + offset_z;
 800477a:	4b7c      	ldr	r3, [pc, #496]	; (800496c <update_gcode_point+0x28c>)
 800477c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004780:	4b7b      	ldr	r3, [pc, #492]	; (8004970 <update_gcode_point+0x290>)
 8004782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004786:	f7fb fd81 	bl	800028c <__adddf3>
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8004794:	e00c      	b.n	80047b0 <update_gcode_point+0xd0>
	}else{
	  duty_cmd->target_point.z = down_z_height + offset_z;
 8004796:	4b77      	ldr	r3, [pc, #476]	; (8004974 <update_gcode_point+0x294>)
 8004798:	e9d3 0100 	ldrd	r0, r1, [r3]
 800479c:	4b74      	ldr	r3, [pc, #464]	; (8004970 <update_gcode_point+0x290>)
 800479e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a2:	f7fb fd73 	bl	800028c <__adddf3>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	}
	duty_cmd->target_point.roll = roll_angle;
 80047b0:	4b71      	ldr	r3, [pc, #452]	; (8004978 <update_gcode_point+0x298>)
 80047b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	duty_cmd->space_type = DUTY_SPACE_TASK;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	735a      	strb	r2, [r3, #13]
	duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	731a      	strb	r2, [r3, #12]
	if(Gcode_Cor[run_point].configure.type_define[0] == LINEAR_TYPE){
 80047c8:	4965      	ldr	r1, [pc, #404]	; (8004960 <update_gcode_point+0x280>)
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	4613      	mov	r3, r2
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	1a9b      	subs	r3, r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	440b      	add	r3, r1
 80047d6:	331a      	adds	r3, #26
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d103      	bne.n	80047e6 <update_gcode_point+0x106>
	  duty_cmd->path_type = DUTY_PATH_LINE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	739a      	strb	r2, [r3, #14]
 80047e4:	e07b      	b.n	80048de <update_gcode_point+0x1fe>
	}else if(Gcode_Cor[run_point].configure.type_define[0] == ARC_AW_TYPE){
 80047e6:	495e      	ldr	r1, [pc, #376]	; (8004960 <update_gcode_point+0x280>)
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	4613      	mov	r3, r2
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	331a      	adds	r3, #26
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d132      	bne.n	8004862 <update_gcode_point+0x182>
	  duty_cmd->sub_point.x = (double)Gcode_Cor[run_point].I * DATA_INVERSE_SCALE;
 80047fc:	4958      	ldr	r1, [pc, #352]	; (8004960 <update_gcode_point+0x280>)
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	4613      	mov	r3, r2
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	330c      	adds	r3, #12
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f7fb fe88 	bl	8000524 <__aeabi_i2d>
 8004814:	a350      	add	r3, pc, #320	; (adr r3, 8004958 <update_gcode_point+0x278>)
 8004816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481a:	f7fb feed 	bl	80005f8 <__aeabi_dmul>
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
	  duty_cmd->sub_point.y = (double)Gcode_Cor[run_point].J * DATA_INVERSE_SCALE;
 8004828:	494d      	ldr	r1, [pc, #308]	; (8004960 <update_gcode_point+0x280>)
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	4613      	mov	r3, r2
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	1a9b      	subs	r3, r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	3310      	adds	r3, #16
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f7fb fe72 	bl	8000524 <__aeabi_i2d>
 8004840:	a345      	add	r3, pc, #276	; (adr r3, 8004958 <update_gcode_point+0x278>)
 8004842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004846:	f7fb fed7 	bl	80005f8 <__aeabi_dmul>
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
	  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	739a      	strb	r2, [r3, #14]
	  duty_cmd->arc_dir = 1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	615a      	str	r2, [r3, #20]
 8004860:	e03d      	b.n	80048de <update_gcode_point+0x1fe>
	}else if(Gcode_Cor[run_point].configure.type_define[0] == ARC_CW_TYPE){
 8004862:	493f      	ldr	r1, [pc, #252]	; (8004960 <update_gcode_point+0x280>)
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	4613      	mov	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	1a9b      	subs	r3, r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	440b      	add	r3, r1
 8004870:	331a      	adds	r3, #26
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b03      	cmp	r3, #3
 8004876:	d132      	bne.n	80048de <update_gcode_point+0x1fe>
	  duty_cmd->sub_point.x = (double)Gcode_Cor[run_point].I * DATA_INVERSE_SCALE;
 8004878:	4939      	ldr	r1, [pc, #228]	; (8004960 <update_gcode_point+0x280>)
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	4613      	mov	r3, r2
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	330c      	adds	r3, #12
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f7fb fe4a 	bl	8000524 <__aeabi_i2d>
 8004890:	a331      	add	r3, pc, #196	; (adr r3, 8004958 <update_gcode_point+0x278>)
 8004892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004896:	f7fb feaf 	bl	80005f8 <__aeabi_dmul>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
	  duty_cmd->sub_point.y = (double)Gcode_Cor[run_point].J * DATA_INVERSE_SCALE;
 80048a4:	492e      	ldr	r1, [pc, #184]	; (8004960 <update_gcode_point+0x280>)
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	4613      	mov	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	1a9b      	subs	r3, r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	3310      	adds	r3, #16
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fb fe34 	bl	8000524 <__aeabi_i2d>
 80048bc:	a326      	add	r3, pc, #152	; (adr r3, 8004958 <update_gcode_point+0x278>)
 80048be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c2:	f7fb fe99 	bl	80005f8 <__aeabi_dmul>
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
	  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	739a      	strb	r2, [r3, #14]
	  duty_cmd->arc_dir = -1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f04f 32ff 	mov.w	r2, #4294967295
 80048dc:	615a      	str	r2, [r3, #20]
	}

	if(Gcode_Mode == GCODE_LINEAR){
 80048de:	4b27      	ldr	r3, [pc, #156]	; (800497c <update_gcode_point+0x29c>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d14e      	bne.n	8004984 <update_gcode_point+0x2a4>
		duty_cmd->v_factor = (double)Gcode_Cor[run_point].F * DATA_INVERSE_SCALE / V_MOVE_MAX;
 80048e6:	491e      	ldr	r1, [pc, #120]	; (8004960 <update_gcode_point+0x280>)
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	4613      	mov	r3, r2
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	1a9b      	subs	r3, r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	440b      	add	r3, r1
 80048f4:	3308      	adds	r3, #8
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7fb fe13 	bl	8000524 <__aeabi_i2d>
 80048fe:	a316      	add	r3, pc, #88	; (adr r3, 8004958 <update_gcode_point+0x278>)
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	f7fb fe78 	bl	80005f8 <__aeabi_dmul>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4610      	mov	r0, r2
 800490e:	4619      	mov	r1, r3
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	4b1a      	ldr	r3, [pc, #104]	; (8004980 <update_gcode_point+0x2a0>)
 8004916:	f7fb ff99 	bl	800084c <__aeabi_ddiv>
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
		if(run_point == 1){
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d10d      	bne.n	8004946 <update_gcode_point+0x266>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	745a      	strb	r2, [r3, #17]
			duty_cmd->time_total = 0;
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	e9c1 2308 	strd	r2, r3, [r1, #32]
			duty_cmd->v_factor = (double)gcode_clutch_configure[Gcode_Cor[run_point].configure.clutch_index].Depth_Feed*DATA_INVERSE_SCALE/V_MOVE_MAX;
			pre_height = Gcode_Cor[run_point].configure.type_define[1];
		}
	}

}
 8004944:	e0b6      	b.n	8004ab4 <update_gcode_point+0x3d4>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2202      	movs	r2, #2
 800494a:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	745a      	strb	r2, [r3, #17]
}
 8004952:	e0af      	b.n	8004ab4 <update_gcode_point+0x3d4>
 8004954:	f3af 8000 	nop.w
 8004958:	a0000000 	.word	0xa0000000
 800495c:	3ec0c6f7 	.word	0x3ec0c6f7
 8004960:	20008fc8 	.word	0x20008fc8
 8004964:	20008fa8 	.word	0x20008fa8
 8004968:	2000fd50 	.word	0x2000fd50
 800496c:	200085c8 	.word	0x200085c8
 8004970:	2000fd40 	.word	0x2000fd40
 8004974:	20008f40 	.word	0x20008f40
 8004978:	20008fa0 	.word	0x20008fa0
 800497c:	200085d0 	.word	0x200085d0
 8004980:	40877000 	.word	0x40877000
	}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8004984:	4b50      	ldr	r3, [pc, #320]	; (8004ac8 <update_gcode_point+0x3e8>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b09      	cmp	r3, #9
 800498a:	f040 8093 	bne.w	8004ab4 <update_gcode_point+0x3d4>
		if(Gcode_Cor[run_point].configure.type_define[1] == pre_height){
 800498e:	494f      	ldr	r1, [pc, #316]	; (8004acc <update_gcode_point+0x3ec>)
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	4613      	mov	r3, r2
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	1a9b      	subs	r3, r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	331b      	adds	r3, #27
 800499e:	781a      	ldrb	r2, [r3, #0]
 80049a0:	4b4b      	ldr	r3, [pc, #300]	; (8004ad0 <update_gcode_point+0x3f0>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d14c      	bne.n	8004a42 <update_gcode_point+0x362>
			if(Gcode_Cor[run_point].configure.clutch_index != pre_clutch_index){
 80049a8:	4948      	ldr	r1, [pc, #288]	; (8004acc <update_gcode_point+0x3ec>)
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	4613      	mov	r3, r2
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	1a9b      	subs	r3, r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	440b      	add	r3, r1
 80049b6:	3318      	adds	r3, #24
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	4b45      	ldr	r3, [pc, #276]	; (8004ad4 <update_gcode_point+0x3f4>)
 80049be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d01f      	beq.n	8004a06 <update_gcode_point+0x326>
				LSPB_calculation(gcode_clutch_configure[Gcode_Cor[run_point].configure.clutch_index]);
 80049c6:	4941      	ldr	r1, [pc, #260]	; (8004acc <update_gcode_point+0x3ec>)
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	4613      	mov	r3, r2
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	1a9b      	subs	r3, r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	440b      	add	r3, r1
 80049d4:	3318      	adds	r3, #24
 80049d6:	881b      	ldrh	r3, [r3, #0]
 80049d8:	4619      	mov	r1, r3
 80049da:	4a3f      	ldr	r2, [pc, #252]	; (8004ad8 <update_gcode_point+0x3f8>)
 80049dc:	460b      	mov	r3, r1
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	440b      	add	r3, r1
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80049ea:	f000 f87d 	bl	8004ae8 <LSPB_calculation>
				pre_clutch_index = Gcode_Cor[run_point].configure.clutch_index;
 80049ee:	4937      	ldr	r1, [pc, #220]	; (8004acc <update_gcode_point+0x3ec>)
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	4613      	mov	r3, r2
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	1a9b      	subs	r3, r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	440b      	add	r3, r1
 80049fc:	3318      	adds	r3, #24
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	b21a      	sxth	r2, r3
 8004a02:	4b34      	ldr	r3, [pc, #208]	; (8004ad4 <update_gcode_point+0x3f4>)
 8004a04:	801a      	strh	r2, [r3, #0]
			duty_cmd->trajec_type = DUTY_TRAJECTORY_GCODE_LSPB;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2203      	movs	r2, #3
 8004a0a:	741a      	strb	r2, [r3, #16]
			duty_cmd->time_total = (double)(Gcode_Cor[run_point].T*DATA_INVERSE_SCALE);
 8004a0c:	492f      	ldr	r1, [pc, #188]	; (8004acc <update_gcode_point+0x3ec>)
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	4613      	mov	r3, r2
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	1a9b      	subs	r3, r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	440b      	add	r3, r1
 8004a1a:	3314      	adds	r3, #20
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a26:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004adc <update_gcode_point+0x3fc>
 8004a2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a2e:	ee17 0a90 	vmov	r0, s15
 8004a32:	f7fb fd89 	bl	8000548 <__aeabi_f2d>
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8004a40:	e038      	b.n	8004ab4 <update_gcode_point+0x3d4>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2202      	movs	r2, #2
 8004a46:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	745a      	strb	r2, [r3, #17]
			duty_cmd->v_factor = (double)gcode_clutch_configure[Gcode_Cor[run_point].configure.clutch_index].Depth_Feed*DATA_INVERSE_SCALE/V_MOVE_MAX;
 8004a4e:	491f      	ldr	r1, [pc, #124]	; (8004acc <update_gcode_point+0x3ec>)
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	4613      	mov	r3, r2
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	1a9b      	subs	r3, r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	3318      	adds	r3, #24
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	4619      	mov	r1, r3
 8004a62:	4a1d      	ldr	r2, [pc, #116]	; (8004ad8 <update_gcode_point+0x3f8>)
 8004a64:	460b      	mov	r3, r1
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	440b      	add	r3, r1
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3308      	adds	r3, #8
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fb fd56 	bl	8000524 <__aeabi_i2d>
 8004a78:	a311      	add	r3, pc, #68	; (adr r3, 8004ac0 <update_gcode_point+0x3e0>)
 8004a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7e:	f7fb fdbb 	bl	80005f8 <__aeabi_dmul>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4610      	mov	r0, r2
 8004a88:	4619      	mov	r1, r3
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	4b14      	ldr	r3, [pc, #80]	; (8004ae0 <update_gcode_point+0x400>)
 8004a90:	f7fb fedc 	bl	800084c <__aeabi_ddiv>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
			pre_height = Gcode_Cor[run_point].configure.type_define[1];
 8004a9e:	490b      	ldr	r1, [pc, #44]	; (8004acc <update_gcode_point+0x3ec>)
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	331b      	adds	r3, #27
 8004aae:	781a      	ldrb	r2, [r3, #0]
 8004ab0:	4b07      	ldr	r3, [pc, #28]	; (8004ad0 <update_gcode_point+0x3f0>)
 8004ab2:	701a      	strb	r2, [r3, #0]
}
 8004ab4:	bf00      	nop
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	f3af 8000 	nop.w
 8004ac0:	a0000000 	.word	0xa0000000
 8004ac4:	3ec0c6f7 	.word	0x3ec0c6f7
 8004ac8:	200085d0 	.word	0x200085d0
 8004acc:	20008fc8 	.word	0x20008fc8
 8004ad0:	20008f88 	.word	0x20008f88
 8004ad4:	2000fd3a 	.word	0x2000fd3a
 8004ad8:	200085e0 	.word	0x200085e0
 8004adc:	360637bd 	.word	0x360637bd
 8004ae0:	40877000 	.word	0x40877000
 8004ae4:	00000000 	.word	0x00000000

08004ae8 <LSPB_calculation>:
void LSPB_calculation(SCARA_LSPB_Clutch_TypeDef configure)
{
 8004ae8:	b5b0      	push	{r4, r5, r7, lr}
 8004aea:	b08a      	sub	sp, #40	; 0x28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	1d3b      	adds	r3, r7, #4
 8004af0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	double accel = 0;
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double total_s = (double)configure.total_s*DATA_INVERSE_SCALE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fb fd0e 	bl	8000524 <__aeabi_i2d>
 8004b08:	a388      	add	r3, pc, #544	; (adr r3, 8004d2c <LSPB_calculation+0x244>)
 8004b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0e:	f7fb fd73 	bl	80005f8 <__aeabi_dmul>
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double veloc   = (double)configure.veloc*DATA_INVERSE_SCALE;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7fb fd01 	bl	8000524 <__aeabi_i2d>
 8004b22:	a382      	add	r3, pc, #520	; (adr r3, 8004d2c <LSPB_calculation+0x244>)
 8004b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b28:	f7fb fd66 	bl	80005f8 <__aeabi_dmul>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	e9c7 2304 	strd	r2, r3, [r7, #16]
	time_move = 1.2*total_s/veloc;
 8004b34:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8004b38:	4b71      	ldr	r3, [pc, #452]	; (8004d00 <LSPB_calculation+0x218>)
 8004b3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004b3e:	f7fb fd5b 	bl	80005f8 <__aeabi_dmul>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	4610      	mov	r0, r2
 8004b48:	4619      	mov	r1, r3
 8004b4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b4e:	f7fb fe7d 	bl	800084c <__aeabi_ddiv>
 8004b52:	4602      	mov	r2, r0
 8004b54:	460b      	mov	r3, r1
 8004b56:	496b      	ldr	r1, [pc, #428]	; (8004d04 <LSPB_calculation+0x21c>)
 8004b58:	e9c1 2300 	strd	r2, r3, [r1]
	time_acc = time_move - total_s/veloc;
 8004b5c:	4b69      	ldr	r3, [pc, #420]	; (8004d04 <LSPB_calculation+0x21c>)
 8004b5e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004b62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004b6a:	f7fb fe6f 	bl	800084c <__aeabi_ddiv>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	4620      	mov	r0, r4
 8004b74:	4629      	mov	r1, r5
 8004b76:	f7fb fb87 	bl	8000288 <__aeabi_dsub>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4962      	ldr	r1, [pc, #392]	; (8004d08 <LSPB_calculation+0x220>)
 8004b80:	e9c1 2300 	strd	r2, r3, [r1]
	time_dec = time_move - time_acc;
 8004b84:	4b5f      	ldr	r3, [pc, #380]	; (8004d04 <LSPB_calculation+0x21c>)
 8004b86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b8a:	4b5f      	ldr	r3, [pc, #380]	; (8004d08 <LSPB_calculation+0x220>)
 8004b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b90:	f7fb fb7a 	bl	8000288 <__aeabi_dsub>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	495c      	ldr	r1, [pc, #368]	; (8004d0c <LSPB_calculation+0x224>)
 8004b9a:	e9c1 2300 	strd	r2, r3, [r1]
	accel = veloc / time_acc;
 8004b9e:	4b5a      	ldr	r3, [pc, #360]	; (8004d08 <LSPB_calculation+0x220>)
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ba8:	f7fb fe50 	bl	800084c <__aeabi_ddiv>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	acc0 = 0.5*accel;
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	4b55      	ldr	r3, [pc, #340]	; (8004d10 <LSPB_calculation+0x228>)
 8004bba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004bbe:	f7fb fd1b 	bl	80005f8 <__aeabi_dmul>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4953      	ldr	r1, [pc, #332]	; (8004d14 <LSPB_calculation+0x22c>)
 8004bc8:	e9c1 2300 	strd	r2, r3, [r1]
	constant[0] = veloc;
 8004bcc:	4952      	ldr	r1, [pc, #328]	; (8004d18 <LSPB_calculation+0x230>)
 8004bce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bd2:	e9c1 2300 	strd	r2, r3, [r1]
	constant[1] = -0.5*time_acc*veloc;
 8004bd6:	4b4c      	ldr	r3, [pc, #304]	; (8004d08 <LSPB_calculation+0x220>)
 8004bd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	4b4e      	ldr	r3, [pc, #312]	; (8004d1c <LSPB_calculation+0x234>)
 8004be2:	f7fb fd09 	bl	80005f8 <__aeabi_dmul>
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	4610      	mov	r0, r2
 8004bec:	4619      	mov	r1, r3
 8004bee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bf2:	f7fb fd01 	bl	80005f8 <__aeabi_dmul>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4947      	ldr	r1, [pc, #284]	; (8004d18 <LSPB_calculation+0x230>)
 8004bfc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    deacc[0] 	= -0.5*accel;
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	4b45      	ldr	r3, [pc, #276]	; (8004d1c <LSPB_calculation+0x234>)
 8004c06:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004c0a:	f7fb fcf5 	bl	80005f8 <__aeabi_dmul>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	4943      	ldr	r1, [pc, #268]	; (8004d20 <LSPB_calculation+0x238>)
 8004c14:	e9c1 2300 	strd	r2, r3, [r1]
    deacc[1]	= veloc + accel*time_dec;
 8004c18:	4b3c      	ldr	r3, [pc, #240]	; (8004d0c <LSPB_calculation+0x224>)
 8004c1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c22:	f7fb fce9 	bl	80005f8 <__aeabi_dmul>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c32:	f7fb fb2b 	bl	800028c <__adddf3>
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	4939      	ldr	r1, [pc, #228]	; (8004d20 <LSPB_calculation+0x238>)
 8004c3c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    deacc[2]    = total_s - time_move*(2*veloc + 2*accel*time_dec - accel*time_move)/2;
 8004c40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	f7fb fb20 	bl	800028c <__adddf3>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4614      	mov	r4, r2
 8004c52:	461d      	mov	r5, r3
 8004c54:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	f7fb fb16 	bl	800028c <__adddf3>
 8004c60:	4602      	mov	r2, r0
 8004c62:	460b      	mov	r3, r1
 8004c64:	4610      	mov	r0, r2
 8004c66:	4619      	mov	r1, r3
 8004c68:	4b28      	ldr	r3, [pc, #160]	; (8004d0c <LSPB_calculation+0x224>)
 8004c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6e:	f7fb fcc3 	bl	80005f8 <__aeabi_dmul>
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	4620      	mov	r0, r4
 8004c78:	4629      	mov	r1, r5
 8004c7a:	f7fb fb07 	bl	800028c <__adddf3>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	460b      	mov	r3, r1
 8004c82:	4614      	mov	r4, r2
 8004c84:	461d      	mov	r5, r3
 8004c86:	4b1f      	ldr	r3, [pc, #124]	; (8004d04 <LSPB_calculation+0x21c>)
 8004c88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c8c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c90:	f7fb fcb2 	bl	80005f8 <__aeabi_dmul>
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	4620      	mov	r0, r4
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	f7fb faf4 	bl	8000288 <__aeabi_dsub>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4b16      	ldr	r3, [pc, #88]	; (8004d04 <LSPB_calculation+0x21c>)
 8004caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cae:	f7fb fca3 	bl	80005f8 <__aeabi_dmul>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	4619      	mov	r1, r3
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cc2:	f7fb fdc3 	bl	800084c <__aeabi_ddiv>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004cce:	f7fb fadb 	bl	8000288 <__aeabi_dsub>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4912      	ldr	r1, [pc, #72]	; (8004d20 <LSPB_calculation+0x238>)
 8004cd8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    accumulate_s = 0;
 8004cdc:	4911      	ldr	r1, [pc, #68]	; (8004d24 <LSPB_calculation+0x23c>)
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	e9c1 2300 	strd	r2, r3, [r1]
    last_T = 0;
 8004cea:	490f      	ldr	r1, [pc, #60]	; (8004d28 <LSPB_calculation+0x240>)
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004cf8:	bf00      	nop
 8004cfa:	3728      	adds	r7, #40	; 0x28
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8004d00:	3ff33333 	.word	0x3ff33333
 8004d04:	20008fb8 	.word	0x20008fb8
 8004d08:	20008f48 	.word	0x20008f48
 8004d0c:	20008f68 	.word	0x20008f68
 8004d10:	3fe00000 	.word	0x3fe00000
 8004d14:	2000fd30 	.word	0x2000fd30
 8004d18:	20008f90 	.word	0x20008f90
 8004d1c:	bfe00000 	.word	0xbfe00000
 8004d20:	20008f50 	.word	0x20008f50
 8004d24:	200085d8 	.word	0x200085d8
 8004d28:	2000fd48 	.word	0x2000fd48
 8004d2c:	a0000000 	.word	0xa0000000
 8004d30:	3ec0c6f7 	.word	0x3ec0c6f7
 8004d34:	00000000 	.word	0x00000000

08004d38 <accumulate_update>:
void accumulate_update(SCARA_Gcode_Cor_TypeDef gcode_point){
 8004d38:	b084      	sub	sp, #16
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	f107 0c08 	add.w	ip, r7, #8
 8004d42:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	scaraFlowGCODE(&accumulate_s, (double)gcode_point.T*DATA_INVERSE_SCALE);
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fb fbeb 	bl	8000524 <__aeabi_i2d>
 8004d4e:	a312      	add	r3, pc, #72	; (adr r3, 8004d98 <accumulate_update+0x60>)
 8004d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d54:	f7fb fc50 	bl	80005f8 <__aeabi_dmul>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	ec43 2b17 	vmov	d7, r2, r3
 8004d60:	eeb0 0a47 	vmov.f32	s0, s14
 8004d64:	eef0 0a67 	vmov.f32	s1, s15
 8004d68:	480d      	ldr	r0, [pc, #52]	; (8004da0 <accumulate_update+0x68>)
 8004d6a:	f003 fdd5 	bl	8008918 <scaraFlowGCODE>
	last_T = (double)gcode_point.T*DATA_INVERSE_SCALE;
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fb fbd7 	bl	8000524 <__aeabi_i2d>
 8004d76:	a308      	add	r3, pc, #32	; (adr r3, 8004d98 <accumulate_update+0x60>)
 8004d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7c:	f7fb fc3c 	bl	80005f8 <__aeabi_dmul>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4907      	ldr	r1, [pc, #28]	; (8004da4 <accumulate_update+0x6c>)
 8004d86:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004d8a:	bf00      	nop
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d92:	b004      	add	sp, #16
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	a0000000 	.word	0xa0000000
 8004d9c:	3ec0c6f7 	.word	0x3ec0c6f7
 8004da0:	200085d8 	.word	0x200085d8
 8004da4:	2000fd48 	.word	0x2000fd48

08004da8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08a      	sub	sp, #40	; 0x28
 8004dac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dae:	f107 0314 	add.w	r3, r7, #20
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	605a      	str	r2, [r3, #4]
 8004db8:	609a      	str	r2, [r3, #8]
 8004dba:	60da      	str	r2, [r3, #12]
 8004dbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	613b      	str	r3, [r7, #16]
 8004dc2:	4b51      	ldr	r3, [pc, #324]	; (8004f08 <MX_GPIO_Init+0x160>)
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc6:	4a50      	ldr	r2, [pc, #320]	; (8004f08 <MX_GPIO_Init+0x160>)
 8004dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8004dce:	4b4e      	ldr	r3, [pc, #312]	; (8004f08 <MX_GPIO_Init+0x160>)
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd6:	613b      	str	r3, [r7, #16]
 8004dd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	4b4a      	ldr	r3, [pc, #296]	; (8004f08 <MX_GPIO_Init+0x160>)
 8004de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de2:	4a49      	ldr	r2, [pc, #292]	; (8004f08 <MX_GPIO_Init+0x160>)
 8004de4:	f043 0301 	orr.w	r3, r3, #1
 8004de8:	6313      	str	r3, [r2, #48]	; 0x30
 8004dea:	4b47      	ldr	r3, [pc, #284]	; (8004f08 <MX_GPIO_Init+0x160>)
 8004dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004df6:	2300      	movs	r3, #0
 8004df8:	60bb      	str	r3, [r7, #8]
 8004dfa:	4b43      	ldr	r3, [pc, #268]	; (8004f08 <MX_GPIO_Init+0x160>)
 8004dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfe:	4a42      	ldr	r2, [pc, #264]	; (8004f08 <MX_GPIO_Init+0x160>)
 8004e00:	f043 0310 	orr.w	r3, r3, #16
 8004e04:	6313      	str	r3, [r2, #48]	; 0x30
 8004e06:	4b40      	ldr	r3, [pc, #256]	; (8004f08 <MX_GPIO_Init+0x160>)
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	f003 0310 	and.w	r3, r3, #16
 8004e0e:	60bb      	str	r3, [r7, #8]
 8004e10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e12:	2300      	movs	r3, #0
 8004e14:	607b      	str	r3, [r7, #4]
 8004e16:	4b3c      	ldr	r3, [pc, #240]	; (8004f08 <MX_GPIO_Init+0x160>)
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	4a3b      	ldr	r2, [pc, #236]	; (8004f08 <MX_GPIO_Init+0x160>)
 8004e1c:	f043 0302 	orr.w	r3, r3, #2
 8004e20:	6313      	str	r3, [r2, #48]	; 0x30
 8004e22:	4b39      	ldr	r3, [pc, #228]	; (8004f08 <MX_GPIO_Init+0x160>)
 8004e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	607b      	str	r3, [r7, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e2e:	2300      	movs	r3, #0
 8004e30:	603b      	str	r3, [r7, #0]
 8004e32:	4b35      	ldr	r3, [pc, #212]	; (8004f08 <MX_GPIO_Init+0x160>)
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	4a34      	ldr	r2, [pc, #208]	; (8004f08 <MX_GPIO_Init+0x160>)
 8004e38:	f043 0308 	orr.w	r3, r3, #8
 8004e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e3e:	4b32      	ldr	r3, [pc, #200]	; (8004f08 <MX_GPIO_Init+0x160>)
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8004e50:	482e      	ldr	r0, [pc, #184]	; (8004f0c <MX_GPIO_Init+0x164>)
 8004e52:	f006 fbd1 	bl	800b5f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 8004e56:	2200      	movs	r2, #0
 8004e58:	f641 0148 	movw	r1, #6216	; 0x1848
 8004e5c:	482c      	ldr	r0, [pc, #176]	; (8004f10 <MX_GPIO_Init+0x168>)
 8004e5e:	f006 fbcb 	bl	800b5f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8004e62:	2200      	movs	r2, #0
 8004e64:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004e68:	482a      	ldr	r0, [pc, #168]	; (8004f14 <MX_GPIO_Init+0x16c>)
 8004e6a:	f006 fbc5 	bl	800b5f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 8004e6e:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 8004e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e74:	2301      	movs	r3, #1
 8004e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e80:	f107 0314 	add.w	r3, r7, #20
 8004e84:	4619      	mov	r1, r3
 8004e86:	4821      	ldr	r0, [pc, #132]	; (8004f0c <MX_GPIO_Init+0x164>)
 8004e88:	f006 fa1a 	bl	800b2c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 8004e8c:	f640 0348 	movw	r3, #2120	; 0x848
 8004e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e92:	2301      	movs	r3, #1
 8004e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e96:	2300      	movs	r3, #0
 8004e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e9e:	f107 0314 	add.w	r3, r7, #20
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	481a      	ldr	r0, [pc, #104]	; (8004f10 <MX_GPIO_Init+0x168>)
 8004ea6:	f006 fa0b 	bl	800b2c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 8004eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 8004ebc:	f107 0314 	add.w	r3, r7, #20
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4813      	ldr	r0, [pc, #76]	; (8004f10 <MX_GPIO_Init+0x168>)
 8004ec4:	f006 f9fc 	bl	800b2c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 8004ec8:	f242 0304 	movw	r3, #8196	; 0x2004
 8004ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ed6:	f107 0314 	add.w	r3, r7, #20
 8004eda:	4619      	mov	r1, r3
 8004edc:	480c      	ldr	r0, [pc, #48]	; (8004f10 <MX_GPIO_Init+0x168>)
 8004ede:	f006 f9ef 	bl	800b2c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 8004ee2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eec:	2300      	movs	r3, #0
 8004eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ef4:	f107 0314 	add.w	r3, r7, #20
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4806      	ldr	r0, [pc, #24]	; (8004f14 <MX_GPIO_Init+0x16c>)
 8004efc:	f006 f9e0 	bl	800b2c0 <HAL_GPIO_Init>

}
 8004f00:	bf00      	nop
 8004f02:	3728      	adds	r7, #40	; 0x28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40023800 	.word	0x40023800
 8004f0c:	40020400 	.word	0x40020400
 8004f10:	40020c00 	.word	0x40020c00
 8004f14:	40020000 	.word	0x40020000

08004f18 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8004f18:	b5b0      	push	{r4, r5, r7, lr}
 8004f1a:	b08a      	sub	sp, #40	; 0x28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8004f26:	eeb0 0a47 	vmov.f32	s0, s14
 8004f2a:	eef0 0a67 	vmov.f32	s1, s15
 8004f2e:	f014 fe3f 	bl	8019bb0 <cos>
 8004f32:	ec51 0b10 	vmov	r0, r1, d0
 8004f36:	a382      	add	r3, pc, #520	; (adr r3, 8005140 <kinematicForward+0x228>)
 8004f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3c:	f7fb fb5c 	bl	80005f8 <__aeabi_dmul>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	4614      	mov	r4, r2
 8004f46:	461d      	mov	r5, r3
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8004f54:	f7fb f99a 	bl	800028c <__adddf3>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	ec43 2b17 	vmov	d7, r2, r3
 8004f60:	eeb0 0a47 	vmov.f32	s0, s14
 8004f64:	eef0 0a67 	vmov.f32	s1, s15
 8004f68:	f014 fe22 	bl	8019bb0 <cos>
 8004f6c:	ec51 0b10 	vmov	r0, r1, d0
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	4b78      	ldr	r3, [pc, #480]	; (8005158 <kinematicForward+0x240>)
 8004f76:	f7fb fb3f 	bl	80005f8 <__aeabi_dmul>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4620      	mov	r0, r4
 8004f80:	4629      	mov	r1, r5
 8004f82:	f7fb f983 	bl	800028c <__adddf3>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4614      	mov	r4, r2
 8004f8c:	461d      	mov	r5, r3
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8004f9a:	f7fb f977 	bl	800028c <__adddf3>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8004fac:	f7fb f96c 	bl	8000288 <__aeabi_dsub>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	ec43 2b17 	vmov	d7, r2, r3
 8004fb8:	eeb0 0a47 	vmov.f32	s0, s14
 8004fbc:	eef0 0a67 	vmov.f32	s1, s15
 8004fc0:	f014 fdf6 	bl	8019bb0 <cos>
 8004fc4:	ec51 0b10 	vmov	r0, r1, d0
 8004fc8:	a35b      	add	r3, pc, #364	; (adr r3, 8005138 <kinematicForward+0x220>)
 8004fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fce:	f7fb fb13 	bl	80005f8 <__aeabi_dmul>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
	x =   a1*cos(pnt->Theta1)
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	4629      	mov	r1, r5
 8004fda:	f7fb f957 	bl	800028c <__adddf3>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8004fec:	eeb0 0a47 	vmov.f32	s0, s14
 8004ff0:	eef0 0a67 	vmov.f32	s1, s15
 8004ff4:	f014 fe74 	bl	8019ce0 <sin>
 8004ff8:	ec51 0b10 	vmov	r0, r1, d0
 8004ffc:	a350      	add	r3, pc, #320	; (adr r3, 8005140 <kinematicForward+0x228>)
 8004ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005002:	f7fb faf9 	bl	80005f8 <__aeabi_dmul>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4614      	mov	r4, r2
 800500c:	461d      	mov	r5, r3
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800501a:	f7fb f937 	bl	800028c <__adddf3>
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	ec43 2b17 	vmov	d7, r2, r3
 8005026:	eeb0 0a47 	vmov.f32	s0, s14
 800502a:	eef0 0a67 	vmov.f32	s1, s15
 800502e:	f014 fe57 	bl	8019ce0 <sin>
 8005032:	ec51 0b10 	vmov	r0, r1, d0
 8005036:	f04f 0200 	mov.w	r2, #0
 800503a:	4b47      	ldr	r3, [pc, #284]	; (8005158 <kinematicForward+0x240>)
 800503c:	f7fb fadc 	bl	80005f8 <__aeabi_dmul>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4620      	mov	r0, r4
 8005046:	4629      	mov	r1, r5
 8005048:	f7fb f920 	bl	800028c <__adddf3>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4614      	mov	r4, r2
 8005052:	461d      	mov	r5, r3
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8005060:	f7fb f914 	bl	800028c <__adddf3>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4610      	mov	r0, r2
 800506a:	4619      	mov	r1, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8005072:	f7fb f909 	bl	8000288 <__aeabi_dsub>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	ec43 2b17 	vmov	d7, r2, r3
 800507e:	eeb0 0a47 	vmov.f32	s0, s14
 8005082:	eef0 0a67 	vmov.f32	s1, s15
 8005086:	f014 fe2b 	bl	8019ce0 <sin>
 800508a:	ec51 0b10 	vmov	r0, r1, d0
 800508e:	a32a      	add	r3, pc, #168	; (adr r3, 8005138 <kinematicForward+0x220>)
 8005090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005094:	f7fb fab0 	bl	80005f8 <__aeabi_dmul>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
	y =   a1*sin(pnt->Theta1)
 800509c:	4620      	mov	r0, r4
 800509e:	4629      	mov	r1, r5
 80050a0:	f7fb f8f4 	bl	800028c <__adddf3>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80050b2:	a125      	add	r1, pc, #148	; (adr r1, 8005148 <kinematicForward+0x230>)
 80050b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050b8:	f7fb f8e6 	bl	8000288 <__aeabi_dsub>
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	4610      	mov	r0, r2
 80050c2:	4619      	mov	r1, r3
 80050c4:	a322      	add	r3, pc, #136	; (adr r3, 8005150 <kinematicForward+0x238>)
 80050c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ca:	f7fb f8dd 	bl	8000288 <__aeabi_dsub>
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80050e2:	f7fb f8d3 	bl	800028c <__adddf3>
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	4610      	mov	r0, r2
 80050ec:	4619      	mov	r1, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80050f4:	f7fb f8c8 	bl	8000288 <__aeabi_dsub>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	pnt->x = x;
 8005100:	6879      	ldr	r1, [r7, #4]
 8005102:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005106:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pnt->y = y;
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005110:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	pnt->z = z;
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800511a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	pnt->roll = roll;
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005124:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	return TRUE;
 8005128:	2301      	movs	r3, #1
}
 800512a:	4618      	mov	r0, r3
 800512c:	3728      	adds	r7, #40	; 0x28
 800512e:	46bd      	mov	sp, r7
 8005130:	bdb0      	pop	{r4, r5, r7, pc}
 8005132:	bf00      	nop
 8005134:	f3af 8000 	nop.w
 8005138:	80000000 	.word	0x80000000
 800513c:	40402e14 	.word	0x40402e14
 8005140:	00000000 	.word	0x00000000
 8005144:	4068a000 	.word	0x4068a000
 8005148:	00000000 	.word	0x00000000
 800514c:	406a6000 	.word	0x406a6000
 8005150:	e0000000 	.word	0xe0000000
 8005154:	40536b22 	.word	0x40536b22
 8005158:	40640000 	.word	0x40640000
 800515c:	00000000 	.word	0x00000000

08005160 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8005160:	b082      	sub	sp, #8
 8005162:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005166:	b0a0      	sub	sp, #128	; 0x80
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8005170:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800517a:	a1f0      	add	r1, pc, #960	; (adr r1, 800553c <kinematicInverse+0x3dc>)
 800517c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005180:	f7fb f882 	bl	8000288 <__aeabi_dsub>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	e9d3 ab08 	ldrd	sl, fp, [r3, #32]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8005198:	eeb0 0a47 	vmov.f32	s0, s14
 800519c:	eef0 0a67 	vmov.f32	s1, s15
 80051a0:	f014 fd06 	bl	8019bb0 <cos>
 80051a4:	ec51 0b10 	vmov	r0, r1, d0
 80051a8:	a3e6      	add	r3, pc, #920	; (adr r3, 8005544 <kinematicInverse+0x3e4>)
 80051aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ae:	f7fb fa23 	bl	80005f8 <__aeabi_dmul>
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	4650      	mov	r0, sl
 80051b8:	4659      	mov	r1, fp
 80051ba:	f7fb f865 	bl	8000288 <__aeabi_dsub>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	e9d3 ab0a 	ldrd	sl, fp, [r3, #40]	; 0x28
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80051d2:	eeb0 0a47 	vmov.f32	s0, s14
 80051d6:	eef0 0a67 	vmov.f32	s1, s15
 80051da:	f014 fd81 	bl	8019ce0 <sin>
 80051de:	ec51 0b10 	vmov	r0, r1, d0
 80051e2:	a3d8      	add	r3, pc, #864	; (adr r3, 8005544 <kinematicInverse+0x3e4>)
 80051e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e8:	f7fb fa06 	bl	80005f8 <__aeabi_dmul>
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	4650      	mov	r0, sl
 80051f2:	4659      	mov	r1, fp
 80051f4:	f7fb f848 	bl	8000288 <__aeabi_dsub>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 8005200:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005204:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005208:	f7fb f9f6 	bl	80005f8 <__aeabi_dmul>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4692      	mov	sl, r2
 8005212:	469b      	mov	fp, r3
 8005214:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005218:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800521c:	f7fb f9ec 	bl	80005f8 <__aeabi_dmul>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4650      	mov	r0, sl
 8005226:	4659      	mov	r1, fp
 8005228:	f7fb f830 	bl	800028c <__adddf3>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4610      	mov	r0, r2
 8005232:	4619      	mov	r1, r3
 8005234:	a3c5      	add	r3, pc, #788	; (adr r3, 800554c <kinematicInverse+0x3ec>)
 8005236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523a:	f7fb f825 	bl	8000288 <__aeabi_dsub>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4610      	mov	r0, r2
 8005244:	4619      	mov	r1, r3
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	4bb9      	ldr	r3, [pc, #740]	; (8005530 <kinematicInverse+0x3d0>)
 800524c:	f7fb f81c 	bl	8000288 <__aeabi_dsub>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	4610      	mov	r0, r2
 8005256:	4619      	mov	r1, r3
 8005258:	a3b1      	add	r3, pc, #708	; (adr r3, 8005520 <kinematicInverse+0x3c0>)
 800525a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525e:	f7fb faf5 	bl	800084c <__aeabi_ddiv>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 800526a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800526e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005272:	f7fb f9c1 	bl	80005f8 <__aeabi_dmul>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	f04f 0000 	mov.w	r0, #0
 800527e:	49ad      	ldr	r1, [pc, #692]	; (8005534 <kinematicInverse+0x3d4>)
 8005280:	f7fb f802 	bl	8000288 <__aeabi_dsub>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 800528c:	f04f 0200 	mov.w	r2, #0
 8005290:	f04f 0300 	mov.w	r3, #0
 8005294:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005298:	f7fb fc20 	bl	8000adc <__aeabi_dcmplt>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <kinematicInverse+0x146>
		return FALSE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	e134      	b.n	8005510 <kinematicInverse+0x3b0>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 80052a6:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80052aa:	f014 fdb1 	bl	8019e10 <sqrt>
 80052ae:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 80052b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80052b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80052bc:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 80052be:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80052c2:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80052c6:	f014 fda1 	bl	8019e0c <atan2>
 80052ca:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 80052ce:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80052d2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80052d6:	f014 fd99 	bl	8019e0c <atan2>
 80052da:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 80052de:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80052e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80052e6:	f7fa ffcf 	bl	8000288 <__aeabi_dsub>
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	4614      	mov	r4, r2
 80052f0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80052f4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80052f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80052fc:	f7fa ffc4 	bl	8000288 <__aeabi_dsub>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	4690      	mov	r8, r2
 8005306:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800530a:	4642      	mov	r2, r8
 800530c:	464b      	mov	r3, r9
 800530e:	4620      	mov	r0, r4
 8005310:	4629      	mov	r1, r5
 8005312:	f7fb fbed 	bl	8000af0 <__aeabi_dcmple>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d008      	beq.n	800532e <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 800531c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005320:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 8005324:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005328:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 800532c:	e007      	b.n	800533e <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 800532e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005332:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 8005336:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800533a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	4b7d      	ldr	r3, [pc, #500]	; (8005538 <kinematicInverse+0x3d8>)
 8005344:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005348:	f7fb f956 	bl	80005f8 <__aeabi_dmul>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	4610      	mov	r0, r2
 8005352:	4619      	mov	r1, r3
 8005354:	a374      	add	r3, pc, #464	; (adr r3, 8005528 <kinematicInverse+0x3c8>)
 8005356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535a:	f7fa ff97 	bl	800028c <__adddf3>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	4610      	mov	r0, r2
 8005364:	4619      	mov	r1, r3
 8005366:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800536a:	f7fb f945 	bl	80005f8 <__aeabi_dmul>
 800536e:	4602      	mov	r2, r0
 8005370:	460b      	mov	r3, r1
 8005372:	4614      	mov	r4, r2
 8005374:	461d      	mov	r5, r3
 8005376:	f04f 0200 	mov.w	r2, #0
 800537a:	4b6f      	ldr	r3, [pc, #444]	; (8005538 <kinematicInverse+0x3d8>)
 800537c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005380:	f7fb f93a 	bl	80005f8 <__aeabi_dmul>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4610      	mov	r0, r2
 800538a:	4619      	mov	r1, r3
 800538c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005390:	f7fb f932 	bl	80005f8 <__aeabi_dmul>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4620      	mov	r0, r4
 800539a:	4629      	mov	r1, r5
 800539c:	f7fa ff74 	bl	8000288 <__aeabi_dsub>
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	4614      	mov	r4, r2
 80053a6:	461d      	mov	r5, r3
 80053a8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80053ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80053b0:	f7fb f922 	bl	80005f8 <__aeabi_dmul>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	4690      	mov	r8, r2
 80053ba:	4699      	mov	r9, r3
 80053bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053c0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80053c4:	f7fb f918 	bl	80005f8 <__aeabi_dmul>
 80053c8:	4602      	mov	r2, r0
 80053ca:	460b      	mov	r3, r1
 80053cc:	4640      	mov	r0, r8
 80053ce:	4649      	mov	r1, r9
 80053d0:	f7fa ff5c 	bl	800028c <__adddf3>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	4620      	mov	r0, r4
 80053da:	4629      	mov	r1, r5
 80053dc:	f7fb fa36 	bl	800084c <__aeabi_ddiv>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	4b52      	ldr	r3, [pc, #328]	; (8005538 <kinematicInverse+0x3d8>)
 80053ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80053f2:	f7fb f901 	bl	80005f8 <__aeabi_dmul>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	4610      	mov	r0, r2
 80053fc:	4619      	mov	r1, r3
 80053fe:	a34a      	add	r3, pc, #296	; (adr r3, 8005528 <kinematicInverse+0x3c8>)
 8005400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005404:	f7fa ff42 	bl	800028c <__adddf3>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4610      	mov	r0, r2
 800540e:	4619      	mov	r1, r3
 8005410:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005414:	f7fb f8f0 	bl	80005f8 <__aeabi_dmul>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4614      	mov	r4, r2
 800541e:	461d      	mov	r5, r3
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	4b44      	ldr	r3, [pc, #272]	; (8005538 <kinematicInverse+0x3d8>)
 8005426:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800542a:	f7fb f8e5 	bl	80005f8 <__aeabi_dmul>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	4610      	mov	r0, r2
 8005434:	4619      	mov	r1, r3
 8005436:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800543a:	f7fb f8dd 	bl	80005f8 <__aeabi_dmul>
 800543e:	4602      	mov	r2, r0
 8005440:	460b      	mov	r3, r1
 8005442:	4620      	mov	r0, r4
 8005444:	4629      	mov	r1, r5
 8005446:	f7fa ff21 	bl	800028c <__adddf3>
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	4614      	mov	r4, r2
 8005450:	461d      	mov	r5, r3
 8005452:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005456:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800545a:	f7fb f8cd 	bl	80005f8 <__aeabi_dmul>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4690      	mov	r8, r2
 8005464:	4699      	mov	r9, r3
 8005466:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800546a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800546e:	f7fb f8c3 	bl	80005f8 <__aeabi_dmul>
 8005472:	4602      	mov	r2, r0
 8005474:	460b      	mov	r3, r1
 8005476:	4640      	mov	r0, r8
 8005478:	4649      	mov	r1, r9
 800547a:	f7fa ff07 	bl	800028c <__adddf3>
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	4620      	mov	r0, r4
 8005484:	4629      	mov	r1, r5
 8005486:	f7fb f9e1 	bl	800084c <__aeabi_ddiv>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	theta1 = atan2(s1,c1);
 8005492:	ed97 1b06 	vldr	d1, [r7, #24]
 8005496:	ed97 0b08 	vldr	d0, [r7, #32]
 800549a:	f014 fcb7 	bl	8019e0c <atan2>
 800549e:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 80054a2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80054a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80054aa:	f7fa feef 	bl	800028c <__adddf3>
 80054ae:	4602      	mov	r2, r0
 80054b0:	460b      	mov	r3, r1
 80054b2:	4610      	mov	r0, r2
 80054b4:	4619      	mov	r1, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80054bc:	f7fa fee4 	bl	8000288 <__aeabi_dsub>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 80054c8:	ed97 3b02 	vldr	d3, [r7, #8]
 80054cc:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 80054d0:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 80054d4:	ed97 0b04 	vldr	d0, [r7, #16]
 80054d8:	f004 f956 	bl	8009788 <scaraCheckWorkSpace4>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <kinematicInverse+0x386>
		return FALSE; // Over workspace !!!
 80054e2:	2300      	movs	r3, #0
 80054e4:	e014      	b.n	8005510 <kinematicInverse+0x3b0>
	}
	pnt->Theta1 = theta1;
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80054ec:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pnt->Theta2 = theta2;
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80054f6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	pnt->D3		= d3;
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005500:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	pnt->Theta4 = theta4;
 8005504:	6879      	ldr	r1, [r7, #4]
 8005506:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800550a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	return TRUE; // All is well
 800550e:	2301      	movs	r3, #1
}
 8005510:	4618      	mov	r0, r3
 8005512:	3780      	adds	r7, #128	; 0x80
 8005514:	46bd      	mov	sp, r7
 8005516:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800551a:	b002      	add	sp, #8
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	00000000 	.word	0x00000000
 8005524:	40eec800 	.word	0x40eec800
 8005528:	00000000 	.word	0x00000000
 800552c:	4068a000 	.word	0x4068a000
 8005530:	40d90000 	.word	0x40d90000
 8005534:	3ff00000 	.word	0x3ff00000
 8005538:	40640000 	.word	0x40640000
 800553c:	80000000 	.word	0x80000000
 8005540:	4060aa6e 	.word	0x4060aa6e
 8005544:	80000000 	.word	0x80000000
 8005548:	40402e14 	.word	0x40402e14
 800554c:	00000000 	.word	0x00000000
 8005550:	40e2f320 	.word	0x40e2f320

08005554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005558:	f005 f9ca 	bl	800a8f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800555c:	f000 f82a 	bl	80055b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005560:	f7ff fc22 	bl	8004da8 <MX_GPIO_Init>
  MX_DMA_Init();
 8005564:	f7fd f8d4 	bl	8002710 <MX_DMA_Init>
  MX_UART4_Init();
 8005568:	f005 f8c4 	bl	800a6f4 <MX_UART4_Init>
  MX_FSMC_Init();
 800556c:	f7fe ffee 	bl	800454c <MX_FSMC_Init>
  MX_TIM7_Init();
 8005570:	f005 f84e 	bl	800a610 <MX_TIM7_Init>
  MX_TIM2_Init();
 8005574:	f004 fffe 	bl	800a574 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if(!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)){
 8005578:	4b0c      	ldr	r3, [pc, #48]	; (80055ac <main+0x58>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10b      	bne.n	800559c <main+0x48>
  		CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005584:	4b09      	ldr	r3, [pc, #36]	; (80055ac <main+0x58>)
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	4a08      	ldr	r2, [pc, #32]	; (80055ac <main+0x58>)
 800558a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800558e:	60d3      	str	r3, [r2, #12]
  		DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005590:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <main+0x5c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a06      	ldr	r2, [pc, #24]	; (80055b0 <main+0x5c>)
 8005596:	f043 0301 	orr.w	r3, r3, #1
 800559a:	6013      	str	r3, [r2, #0]
  	}
  	DWT->CYCCNT = 0;
 800559c:	4b04      	ldr	r3, [pc, #16]	; (80055b0 <main+0x5c>)
 800559e:	2200      	movs	r2, #0
 80055a0:	605a      	str	r2, [r3, #4]
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80055a2:	f7fd f8ef 	bl	8002784 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80055a6:	f00c fa2d 	bl	8011a04 <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 80055aa:	e7fe      	b.n	80055aa <main+0x56>
 80055ac:	e000edf0 	.word	0xe000edf0
 80055b0:	e0001000 	.word	0xe0001000

080055b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b094      	sub	sp, #80	; 0x50
 80055b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80055ba:	f107 0320 	add.w	r3, r7, #32
 80055be:	2230      	movs	r2, #48	; 0x30
 80055c0:	2100      	movs	r1, #0
 80055c2:	4618      	mov	r0, r3
 80055c4:	f00f fe3c 	bl	8015240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80055c8:	f107 030c 	add.w	r3, r7, #12
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	605a      	str	r2, [r3, #4]
 80055d2:	609a      	str	r2, [r3, #8]
 80055d4:	60da      	str	r2, [r3, #12]
 80055d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80055d8:	2300      	movs	r3, #0
 80055da:	60bb      	str	r3, [r7, #8]
 80055dc:	4b28      	ldr	r3, [pc, #160]	; (8005680 <SystemClock_Config+0xcc>)
 80055de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e0:	4a27      	ldr	r2, [pc, #156]	; (8005680 <SystemClock_Config+0xcc>)
 80055e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e6:	6413      	str	r3, [r2, #64]	; 0x40
 80055e8:	4b25      	ldr	r3, [pc, #148]	; (8005680 <SystemClock_Config+0xcc>)
 80055ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f0:	60bb      	str	r3, [r7, #8]
 80055f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80055f4:	2300      	movs	r3, #0
 80055f6:	607b      	str	r3, [r7, #4]
 80055f8:	4b22      	ldr	r3, [pc, #136]	; (8005684 <SystemClock_Config+0xd0>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a21      	ldr	r2, [pc, #132]	; (8005684 <SystemClock_Config+0xd0>)
 80055fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005602:	6013      	str	r3, [r2, #0]
 8005604:	4b1f      	ldr	r3, [pc, #124]	; (8005684 <SystemClock_Config+0xd0>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800560c:	607b      	str	r3, [r7, #4]
 800560e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005610:	2301      	movs	r3, #1
 8005612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800561a:	2302      	movs	r3, #2
 800561c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800561e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005622:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005624:	2308      	movs	r3, #8
 8005626:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005628:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800562c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800562e:	2302      	movs	r3, #2
 8005630:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005632:	2307      	movs	r3, #7
 8005634:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005636:	f107 0320 	add.w	r3, r7, #32
 800563a:	4618      	mov	r0, r3
 800563c:	f007 f9d0 	bl	800c9e0 <HAL_RCC_OscConfig>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8005646:	f000 f831 	bl	80056ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800564a:	230f      	movs	r3, #15
 800564c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800564e:	2302      	movs	r3, #2
 8005650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005656:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800565a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800565c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005662:	f107 030c 	add.w	r3, r7, #12
 8005666:	2105      	movs	r1, #5
 8005668:	4618      	mov	r0, r3
 800566a:	f007 fc29 	bl	800cec0 <HAL_RCC_ClockConfig>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8005674:	f000 f81a 	bl	80056ac <Error_Handler>
  }
}
 8005678:	bf00      	nop
 800567a:	3750      	adds	r7, #80	; 0x50
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	40023800 	.word	0x40023800
 8005684:	40007000 	.word	0x40007000

08005688 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a04      	ldr	r2, [pc, #16]	; (80056a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d101      	bne.n	800569e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800569a:	f005 f94b 	bl	800a934 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800569e:	bf00      	nop
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40001000 	.word	0x40001000

080056ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80056b0:	bf00      	nop
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 80056ba:	b480      	push	{r7}
 80056bc:	b083      	sub	sp, #12
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	460b      	mov	r3, r1
 80056c4:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80056cc:	3308      	adds	r3, #8
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <ringBuff_PushChar+0x1e>
		return FALSE;
 80056d4:	2300      	movs	r3, #0
 80056d6:	e02e      	b.n	8005736 <ringBuff_PushChar+0x7c>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	78f9      	ldrb	r1, [r7, #3]
 80056e4:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3301      	adds	r3, #1
 80056f0:	425a      	negs	r2, r3
 80056f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056f6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80056fa:	bf58      	it	pl
 80056fc:	4253      	negpl	r3, r2
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005704:	6013      	str	r3, [r2, #0]
			if (ringbuff->head == ringbuff->tail) {
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005714:	3304      	adds	r3, #4
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d105      	bne.n	8005728 <ringBuff_PushChar+0x6e>
				ringbuff->isFull_Flag = TRUE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005722:	3308      	adds	r3, #8
 8005724:	2201      	movs	r2, #1
 8005726:	701a      	strb	r2, [r3, #0]
			}
			ringbuff->isEmpty_Flag = FALSE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800572e:	3309      	adds	r3, #9
 8005730:	2200      	movs	r2, #0
 8005732:	701a      	strb	r2, [r3, #0]
			return TRUE;
 8005734:	2301      	movs	r3, #1
	}
}
 8005736:	4618      	mov	r0, r3
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 8005742:	b480      	push	{r7}
 8005744:	b083      	sub	sp, #12
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
 800574a:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005752:	3309      	adds	r3, #9
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <ringBuff_PopChar+0x1c>
		return FALSE;
 800575a:	2300      	movs	r3, #0
 800575c:	e032      	b.n	80057c4 <ringBuff_PopChar+0x82>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005764:	3304      	adds	r3, #4
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	5cd2      	ldrb	r2, [r2, r3]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005776:	3304      	adds	r3, #4
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3301      	adds	r3, #1
 800577c:	4259      	negs	r1, r3
 800577e:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8005782:	f3c1 030c 	ubfx	r3, r1, #0, #13
 8005786:	bf58      	it	pl
 8005788:	425a      	negpl	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005790:	3304      	adds	r3, #4
 8005792:	601a      	str	r2, [r3, #0]
			if (ringbuff->head == ringbuff->tail) {
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80057a2:	3304      	adds	r3, #4
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d105      	bne.n	80057b6 <ringBuff_PopChar+0x74>
				ringbuff->isEmpty_Flag = TRUE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80057b0:	3309      	adds	r3, #9
 80057b2:	2201      	movs	r2, #1
 80057b4:	701a      	strb	r2, [r3, #0]
			}
			ringbuff->isFull_Flag = FALSE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80057bc:	3308      	adds	r3, #8
 80057be:	2200      	movs	r2, #0
 80057c0:	701a      	strb	r2, [r3, #0]
			return TRUE;
 80057c2:	2301      	movs	r3, #1
	}
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 80057dc:	2300      	movs	r3, #0
 80057de:	82fb      	strh	r3, [r7, #22]
 80057e0:	e011      	b.n	8005806 <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 80057e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	4413      	add	r3, r2
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	4619      	mov	r1, r3
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f7ff ff63 	bl	80056ba <ringBuff_PushChar>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00b      	beq.n	8005812 <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 80057fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80057fe:	b29b      	uxth	r3, r3
 8005800:	3301      	adds	r3, #1
 8005802:	b29b      	uxth	r3, r3
 8005804:	82fb      	strh	r3, [r7, #22]
 8005806:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	429a      	cmp	r2, r3
 800580e:	dce8      	bgt.n	80057e2 <ringBuff_PushArray+0x12>
 8005810:	e000      	b.n	8005814 <ringBuff_PushArray+0x44>
			break;
 8005812:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 8005814:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 800582c:	2300      	movs	r3, #0
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	e00c      	b.n	800584c <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	4413      	add	r3, r2
 8005838:	4619      	mov	r1, r3
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f7ff ff81 	bl	8005742 <ringBuff_PopChar>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d007      	beq.n	8005856 <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	3301      	adds	r3, #1
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	429a      	cmp	r2, r3
 8005852:	dbee      	blt.n	8005832 <ringBuff_PopArray+0x12>
 8005854:	e000      	b.n	8005858 <ringBuff_PopArray+0x38>
			break;
 8005856:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 8005858:	697b      	ldr	r3, [r7, #20]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, const char* cmp_char) {
 8005862:	b580      	push	{r7, lr}
 8005864:	b088      	sub	sp, #32
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	6039      	str	r1, [r7, #0]
	int32_t index = ringbuff->tail;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005872:	3304      	adds	r3, #4
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	61fb      	str	r3, [r7, #28]
	int32_t distance = 0;
 8005878:	2300      	movs	r3, #0
 800587a:	61bb      	str	r3, [r7, #24]
	int32_t sync_state = 0;
 800587c:	2300      	movs	r3, #0
 800587e:	617b      	str	r3, [r7, #20]
	int32_t head_ptr = ringbuff->head;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	60fb      	str	r3, [r7, #12]
	int32_t number_of_state = strlen(cmp_char);
 800588a:	6838      	ldr	r0, [r7, #0]
 800588c:	f7fa fca0 	bl	80001d0 <strlen>
 8005890:	4603      	mov	r3, r0
 8005892:	60bb      	str	r3, [r7, #8]
	if (ringbuff->isFull_Flag) {
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800589a:	3308      	adds	r3, #8
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d066      	beq.n	8005970 <ringBuff_DistanceOf+0x10e>
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 80058a2:	2300      	movs	r3, #0
 80058a4:	613b      	str	r3, [r7, #16]
 80058a6:	e030      	b.n	800590a <ringBuff_DistanceOf+0xa8>
	            if(ringbuff->Array[index] == cmp_char[sync_state]){
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	4413      	add	r3, r2
 80058ae:	781a      	ldrb	r2, [r3, #0]
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	6839      	ldr	r1, [r7, #0]
 80058b4:	440b      	add	r3, r1
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d103      	bne.n	80058c4 <ringBuff_DistanceOf+0x62>
	                sync_state++;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	3301      	adds	r3, #1
 80058c0:	617b      	str	r3, [r7, #20]
 80058c2:	e00c      	b.n	80058de <ringBuff_DistanceOf+0x7c>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	4413      	add	r3, r2
 80058ca:	781a      	ldrb	r2, [r3, #0]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d102      	bne.n	80058da <ringBuff_DistanceOf+0x78>
	                sync_state = 1;
 80058d4:	2301      	movs	r3, #1
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	e001      	b.n	80058de <ringBuff_DistanceOf+0x7c>
	            }else{
	                sync_state = 0;
 80058da:	2300      	movs	r3, #0
 80058dc:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d101      	bne.n	80058ea <ringBuff_DistanceOf+0x88>
	                return distance;
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	e048      	b.n	800597c <ringBuff_DistanceOf+0x11a>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	3301      	adds	r3, #1
 80058ee:	61bb      	str	r3, [r7, #24]
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	3301      	adds	r3, #1
 80058f4:	613b      	str	r3, [r7, #16]
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	3301      	adds	r3, #1
 80058fa:	425a      	negs	r2, r3
 80058fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005900:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005904:	bf58      	it	pl
 8005906:	4253      	negpl	r3, r2
 8005908:	61fb      	str	r3, [r7, #28]
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005910:	dbca      	blt.n	80058a8 <ringBuff_DistanceOf+0x46>
 8005912:	e031      	b.n	8005978 <ringBuff_DistanceOf+0x116>
	        }
	} else {
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
	        if(ringbuff->Array[index] == cmp_char[sync_state]){
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	4413      	add	r3, r2
 800591a:	781a      	ldrb	r2, [r3, #0]
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	6839      	ldr	r1, [r7, #0]
 8005920:	440b      	add	r3, r1
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	429a      	cmp	r2, r3
 8005926:	d103      	bne.n	8005930 <ringBuff_DistanceOf+0xce>
	                //LOG_REPORT("dis1", ringbuff->.tail);
	                sync_state++;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	3301      	adds	r3, #1
 800592c:	617b      	str	r3, [r7, #20]
 800592e:	e00c      	b.n	800594a <ringBuff_DistanceOf+0xe8>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	4413      	add	r3, r2
 8005936:	781a      	ldrb	r2, [r3, #0]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	429a      	cmp	r2, r3
 800593e:	d102      	bne.n	8005946 <ringBuff_DistanceOf+0xe4>
	                sync_state = 1;
 8005940:	2301      	movs	r3, #1
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	e001      	b.n	800594a <ringBuff_DistanceOf+0xe8>
	            }else{
	                sync_state = 0;
 8005946:	2300      	movs	r3, #0
 8005948:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	429a      	cmp	r2, r3
 8005950:	d101      	bne.n	8005956 <ringBuff_DistanceOf+0xf4>
	                //LOG_REPORT("dis", distance);
	                return distance;
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	e012      	b.n	800597c <ringBuff_DistanceOf+0x11a>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	3301      	adds	r3, #1
 800595a:	61bb      	str	r3, [r7, #24]
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	3301      	adds	r3, #1
 8005960:	425a      	negs	r2, r3
 8005962:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005966:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800596a:	bf58      	it	pl
 800596c:	4253      	negpl	r3, r2
 800596e:	61fb      	str	r3, [r7, #28]
 8005970:	69fa      	ldr	r2, [r7, #28]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	429a      	cmp	r2, r3
 8005976:	d1cd      	bne.n	8005914 <ringBuff_DistanceOf+0xb2>
	        }
	    //LOG_REPORT("hai", 2);
	}

	return -1;
 8005978:	f04f 33ff 	mov.w	r3, #4294967295
}
 800597c:	4618      	mov	r0, r3
 800597e:	3720      	adds	r7, #32
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
	lowlayer_resetEncoder();
 8005988:	f000 fdfe 	bl	8006588 <lowlayer_resetEncoder>
	pulse_accumulate[0] = 0;
 800598c:	4b10      	ldr	r3, [pc, #64]	; (80059d0 <lowlayer_scanReset+0x4c>)
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 8005992:	4b0f      	ldr	r3, [pc, #60]	; (80059d0 <lowlayer_scanReset+0x4c>)
 8005994:	2200      	movs	r2, #0
 8005996:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 8005998:	4b0d      	ldr	r3, [pc, #52]	; (80059d0 <lowlayer_scanReset+0x4c>)
 800599a:	2200      	movs	r2, #0
 800599c:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 800599e:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <lowlayer_scanReset+0x4c>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 80059a4:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <lowlayer_scanReset+0x50>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 80059aa:	4b0a      	ldr	r3, [pc, #40]	; (80059d4 <lowlayer_scanReset+0x50>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 80059b0:	4b08      	ldr	r3, [pc, #32]	; (80059d4 <lowlayer_scanReset+0x50>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 80059b6:	4b08      	ldr	r3, [pc, #32]	; (80059d8 <lowlayer_scanReset+0x54>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 80059bc:	4b07      	ldr	r3, [pc, #28]	; (80059dc <lowlayer_scanReset+0x58>)
 80059be:	2200      	movs	r2, #0
 80059c0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 80059c2:	2200      	movs	r2, #0
 80059c4:	2108      	movs	r1, #8
 80059c6:	4806      	ldr	r0, [pc, #24]	; (80059e0 <lowlayer_scanReset+0x5c>)
 80059c8:	f005 fe16 	bl	800b5f8 <HAL_GPIO_WritePin>
}
 80059cc:	bf00      	nop
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	2000fed8 	.word	0x2000fed8
 80059d4:	2000feec 	.word	0x2000feec
 80059d8:	2000fee8 	.word	0x2000fee8
 80059dc:	2000ff08 	.word	0x2000ff08
 80059e0:	40020c00 	.word	0x40020c00
 80059e4:	00000000 	.word	0x00000000

080059e8 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 80059ee:	2300      	movs	r3, #0
 80059f0:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 80059f2:	f000 fe87 	bl	8006704 <lowlayer_updateLimit>
	if (state_scan < 4) {
 80059f6:	4b96      	ldr	r3, [pc, #600]	; (8005c50 <lowlayer_scanFlow+0x268>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d837      	bhi.n	8005a6e <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 80059fe:	4b94      	ldr	r3, [pc, #592]	; (8005c50 <lowlayer_scanFlow+0x268>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	f1c3 0303 	rsb	r3, r3, #3
 8005a06:	4a93      	ldr	r2, [pc, #588]	; (8005c54 <lowlayer_scanFlow+0x26c>)
 8005a08:	5cd3      	ldrb	r3, [r2, r3]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d121      	bne.n	8005a52 <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 8005a0e:	4b90      	ldr	r3, [pc, #576]	; (8005c50 <lowlayer_scanFlow+0x268>)
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	f1c3 0203 	rsb	r2, r3, #3
 8005a16:	4b8e      	ldr	r3, [pc, #568]	; (8005c50 <lowlayer_scanFlow+0x268>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	f1c3 0303 	rsb	r3, r3, #3
 8005a1e:	498e      	ldr	r1, [pc, #568]	; (8005c58 <lowlayer_scanFlow+0x270>)
 8005a20:	568a      	ldrsb	r2, [r1, r2]
 8005a22:	f107 0108 	add.w	r1, r7, #8
 8005a26:	440b      	add	r3, r1
 8005a28:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 8005a2c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	425b      	negs	r3, r3
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	b258      	sxtb	r0, r3
 8005a38:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005a3c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	425b      	negs	r3, r3
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	b25a      	sxtb	r2, r3
 8005a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a4c:	f000 fcd8 	bl	8006400 <lowlayer_writePulse>
 8005a50:	e00b      	b.n	8005a6a <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 8005a52:	4b7f      	ldr	r3, [pc, #508]	; (8005c50 <lowlayer_scanFlow+0x268>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	3301      	adds	r3, #1
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	4b7d      	ldr	r3, [pc, #500]	; (8005c50 <lowlayer_scanFlow+0x268>)
 8005a5c:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 8005a5e:	2300      	movs	r3, #0
 8005a60:	2200      	movs	r2, #0
 8005a62:	2100      	movs	r1, #0
 8005a64:	2000      	movs	r0, #0
 8005a66:	f000 fccb 	bl	8006400 <lowlayer_writePulse>
		}

		return FALSE;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	e0d2      	b.n	8005c14 <lowlayer_scanFlow+0x22c>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 8005a6e:	2201      	movs	r2, #1
 8005a70:	2108      	movs	r1, #8
 8005a72:	487a      	ldr	r0, [pc, #488]	; (8005c5c <lowlayer_scanFlow+0x274>)
 8005a74:	f005 fdc0 	bl	800b5f8 <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 8005a78:	f000 fe28 	bl	80066cc <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	2200      	movs	r2, #0
 8005a80:	2100      	movs	r1, #0
 8005a82:	2000      	movs	r0, #0
 8005a84:	f000 fcbc 	bl	8006400 <lowlayer_writePulse>
		scan_flag = 1;
 8005a88:	4b75      	ldr	r3, [pc, #468]	; (8005c60 <lowlayer_scanFlow+0x278>)
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 8005a8e:	4b75      	ldr	r3, [pc, #468]	; (8005c64 <lowlayer_scanFlow+0x27c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a75      	ldr	r2, [pc, #468]	; (8005c68 <lowlayer_scanFlow+0x280>)
 8005a94:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 8005a96:	4b73      	ldr	r3, [pc, #460]	; (8005c64 <lowlayer_scanFlow+0x27c>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	4a73      	ldr	r2, [pc, #460]	; (8005c68 <lowlayer_scanFlow+0x280>)
 8005a9c:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 8005a9e:	4b71      	ldr	r3, [pc, #452]	; (8005c64 <lowlayer_scanFlow+0x27c>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	4a71      	ldr	r2, [pc, #452]	; (8005c68 <lowlayer_scanFlow+0x280>)
 8005aa4:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 8005aa6:	4b71      	ldr	r3, [pc, #452]	; (8005c6c <lowlayer_scanFlow+0x284>)
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	4a71      	ldr	r2, [pc, #452]	; (8005c70 <lowlayer_scanFlow+0x288>)
 8005aac:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 8005aae:	4b6e      	ldr	r3, [pc, #440]	; (8005c68 <lowlayer_scanFlow+0x280>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	486f      	ldr	r0, [pc, #444]	; (8005c74 <lowlayer_scanFlow+0x28c>)
 8005ab8:	f7fc fd74 	bl	80025a4 <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 8005abc:	4b6a      	ldr	r3, [pc, #424]	; (8005c68 <lowlayer_scanFlow+0x280>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	486c      	ldr	r0, [pc, #432]	; (8005c78 <lowlayer_scanFlow+0x290>)
 8005ac6:	f7fc fd6d 	bl	80025a4 <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 8005aca:	4b67      	ldr	r3, [pc, #412]	; (8005c68 <lowlayer_scanFlow+0x280>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	486a      	ldr	r0, [pc, #424]	; (8005c7c <lowlayer_scanFlow+0x294>)
 8005ad4:	f7fc fd66 	bl	80025a4 <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 8005ad8:	4b65      	ldr	r3, [pc, #404]	; (8005c70 <lowlayer_scanFlow+0x288>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4867      	ldr	r0, [pc, #412]	; (8005c80 <lowlayer_scanFlow+0x298>)
 8005ae2:	f7fc fd5f 	bl	80025a4 <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 8005ae6:	4b60      	ldr	r3, [pc, #384]	; (8005c68 <lowlayer_scanFlow+0x280>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	ee07 3a90 	vmov	s15, r3
 8005aee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005af2:	ee17 0a90 	vmov	r0, s15
 8005af6:	f7fa fd27 	bl	8000548 <__aeabi_f2d>
 8005afa:	4602      	mov	r2, r0
 8005afc:	460b      	mov	r3, r1
 8005afe:	f7fa fbc5 	bl	800028c <__adddf3>
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	4610      	mov	r0, r2
 8005b08:	4619      	mov	r1, r3
 8005b0a:	a345      	add	r3, pc, #276	; (adr r3, 8005c20 <lowlayer_scanFlow+0x238>)
 8005b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b10:	f7fa fd72 	bl	80005f8 <__aeabi_dmul>
 8005b14:	4602      	mov	r2, r0
 8005b16:	460b      	mov	r3, r1
 8005b18:	4610      	mov	r0, r2
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	a342      	add	r3, pc, #264	; (adr r3, 8005c28 <lowlayer_scanFlow+0x240>)
 8005b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b22:	f7fa fe93 	bl	800084c <__aeabi_ddiv>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	a141      	add	r1, pc, #260	; (adr r1, 8005c30 <lowlayer_scanFlow+0x248>)
 8005b2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b30:	f7fa fbaa 	bl	8000288 <__aeabi_dsub>
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 8005b38:	4952      	ldr	r1, [pc, #328]	; (8005c84 <lowlayer_scanFlow+0x29c>)
 8005b3a:	e9c1 2300 	strd	r2, r3, [r1]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 8005b3e:	4b4a      	ldr	r3, [pc, #296]	; (8005c68 <lowlayer_scanFlow+0x280>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	ee07 3a90 	vmov	s15, r3
 8005b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b4a:	ee17 0a90 	vmov	r0, s15
 8005b4e:	f7fa fcfb 	bl	8000548 <__aeabi_f2d>
 8005b52:	4602      	mov	r2, r0
 8005b54:	460b      	mov	r3, r1
 8005b56:	f7fa fb99 	bl	800028c <__adddf3>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	4610      	mov	r0, r2
 8005b60:	4619      	mov	r1, r3
 8005b62:	a32f      	add	r3, pc, #188	; (adr r3, 8005c20 <lowlayer_scanFlow+0x238>)
 8005b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b68:	f7fa fd46 	bl	80005f8 <__aeabi_dmul>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	4610      	mov	r0, r2
 8005b72:	4619      	mov	r1, r3
 8005b74:	f04f 0200 	mov.w	r2, #0
 8005b78:	4b43      	ldr	r3, [pc, #268]	; (8005c88 <lowlayer_scanFlow+0x2a0>)
 8005b7a:	f7fa fe67 	bl	800084c <__aeabi_ddiv>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	a12d      	add	r1, pc, #180	; (adr r1, 8005c38 <lowlayer_scanFlow+0x250>)
 8005b84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b88:	f7fa fb7e 	bl	8000288 <__aeabi_dsub>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8005b90:	493c      	ldr	r1, [pc, #240]	; (8005c84 <lowlayer_scanFlow+0x29c>)
 8005b92:	e9c1 2302 	strd	r2, r3, [r1, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 8005b96:	4b34      	ldr	r3, [pc, #208]	; (8005c68 <lowlayer_scanFlow+0x280>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	ee07 3a90 	vmov	s15, r3
 8005b9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ba2:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8005c8c <lowlayer_scanFlow+0x2a4>
 8005ba6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005baa:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005c90 <lowlayer_scanFlow+0x2a8>
 8005bae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005bb2:	ee17 0a90 	vmov	r0, s15
 8005bb6:	f7fa fcc7 	bl	8000548 <__aeabi_f2d>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	460b      	mov	r3, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 8005bbe:	4931      	ldr	r1, [pc, #196]	; (8005c84 <lowlayer_scanFlow+0x29c>)
 8005bc0:	e9c1 2304 	strd	r2, r3, [r1, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 8005bc4:	4b2a      	ldr	r3, [pc, #168]	; (8005c70 <lowlayer_scanFlow+0x288>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7fa fcab 	bl	8000524 <__aeabi_i2d>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	f7fa fb5b 	bl	800028c <__adddf3>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	4610      	mov	r0, r2
 8005bdc:	4619      	mov	r1, r3
 8005bde:	a310      	add	r3, pc, #64	; (adr r3, 8005c20 <lowlayer_scanFlow+0x238>)
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	f7fa fd08 	bl	80005f8 <__aeabi_dmul>
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	4610      	mov	r0, r2
 8005bee:	4619      	mov	r1, r3
 8005bf0:	a313      	add	r3, pc, #76	; (adr r3, 8005c40 <lowlayer_scanFlow+0x258>)
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	f7fa fe29 	bl	800084c <__aeabi_ddiv>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	a112      	add	r1, pc, #72	; (adr r1, 8005c48 <lowlayer_scanFlow+0x260>)
 8005c00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c04:	f7fa fb40 	bl	8000288 <__aeabi_dsub>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	460b      	mov	r3, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 8005c0c:	491d      	ldr	r1, [pc, #116]	; (8005c84 <lowlayer_scanFlow+0x29c>)
 8005c0e:	e9c1 2306 	strd	r2, r3, [r1, #24]

		return TRUE;
 8005c12:	2301      	movs	r3, #1
	}
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	f3af 8000 	nop.w
 8005c20:	60000000 	.word	0x60000000
 8005c24:	400921fb 	.word	0x400921fb
 8005c28:	00000000 	.word	0x00000000
 8005c2c:	40f38800 	.word	0x40f38800
 8005c30:	40000000 	.word	0x40000000
 8005c34:	bff9f17a 	.word	0xbff9f17a
 8005c38:	80000000 	.word	0x80000000
 8005c3c:	40039716 	.word	0x40039716
 8005c40:	a0000000 	.word	0xa0000000
 8005c44:	40d3bca1 	.word	0x40d3bca1
 8005c48:	a0000000 	.word	0xa0000000
 8005c4c:	4008330d 	.word	0x4008330d
 8005c50:	2000ff08 	.word	0x2000ff08
 8005c54:	2000fef8 	.word	0x2000fef8
 8005c58:	0801b75c 	.word	0x0801b75c
 8005c5c:	40020c00 	.word	0x40020c00
 8005c60:	2000fee8 	.word	0x2000fee8
 8005c64:	2000fefc 	.word	0x2000fefc
 8005c68:	2000ff30 	.word	0x2000ff30
 8005c6c:	2000fed8 	.word	0x2000fed8
 8005c70:	2000ff0c 	.word	0x2000ff0c
 8005c74:	0801b684 	.word	0x0801b684
 8005c78:	0801b698 	.word	0x0801b698
 8005c7c:	0801b6ac 	.word	0x0801b6ac
 8005c80:	0801b6c0 	.word	0x0801b6c0
 8005c84:	2000ff10 	.word	0x2000ff10
 8005c88:	40ff4000 	.word	0x40ff4000
 8005c8c:	4426aaab 	.word	0x4426aaab
 8005c90:	400f1aa0 	.word	0x400f1aa0
 8005c94:	00000000 	.word	0x00000000

08005c98 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f94d 	bl	8005f48 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005cb4:	a330      	add	r3, pc, #192	; (adr r3, 8005d78 <lowlayer_goToSoftLimit+0xe0>)
 8005cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cba:	f7fa ff0f 	bl	8000adc <__aeabi_dcmplt>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d004      	beq.n	8005cce <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	723b      	strb	r3, [r7, #8]
		check++;
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005cd4:	a32a      	add	r3, pc, #168	; (adr r3, 8005d80 <lowlayer_goToSoftLimit+0xe8>)
 8005cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cda:	f7fa ff1d 	bl	8000b18 <__aeabi_dcmpgt>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d004      	beq.n	8005cee <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 8005ce4:	2305      	movs	r3, #5
 8005ce6:	727b      	strb	r3, [r7, #9]
		check++;
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
 8005cea:	3301      	adds	r3, #1
 8005cec:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005cf4:	f04f 0200 	mov.w	r2, #0
 8005cf8:	f04f 0300 	mov.w	r3, #0
 8005cfc:	f7fa feee 	bl	8000adc <__aeabi_dcmplt>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d004      	beq.n	8005d10 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 8005d06:	2305      	movs	r3, #5
 8005d08:	72bb      	strb	r3, [r7, #10]
		check++;
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8005d16:	a31c      	add	r3, pc, #112	; (adr r3, 8005d88 <lowlayer_goToSoftLimit+0xf0>)
 8005d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1c:	f7fa fefc 	bl	8000b18 <__aeabi_dcmpgt>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d004      	beq.n	8005d30 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 8005d26:	230a      	movs	r3, #10
 8005d28:	72fb      	strb	r3, [r7, #11]
		check++;
 8005d2a:	7bfb      	ldrb	r3, [r7, #15]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d013      	beq.n	8005d5e <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 8005d36:	f997 0008 	ldrsb.w	r0, [r7, #8]
 8005d3a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	425b      	negs	r3, r3
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	b259      	sxtb	r1, r3
 8005d46:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8005d4a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	425b      	negs	r3, r3
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	b25b      	sxtb	r3, r3
 8005d56:	f000 fb53 	bl	8006400 <lowlayer_writePulse>
		return FALSE;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	e006      	b.n	8005d6c <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 8005d5e:	2300      	movs	r3, #0
 8005d60:	2200      	movs	r2, #0
 8005d62:	2100      	movs	r1, #0
 8005d64:	2000      	movs	r0, #0
 8005d66:	f000 fb4b 	bl	8006400 <lowlayer_writePulse>
		return TRUE;
 8005d6a:	2301      	movs	r3, #1
	}
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	f3af 8000 	nop.w
 8005d78:	daaaaaab 	.word	0xdaaaaaab
 8005d7c:	bff7bc89 	.word	0xbff7bc89
 8005d80:	88000000 	.word	0x88000000
 8005d84:	4002d97c 	.word	0x4002d97c
 8005d88:	daaaaaab 	.word	0xdaaaaaab
 8005d8c:	4007bc89 	.word	0x4007bc89

08005d90 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 8005d98:	f000 fc7c 	bl	8006694 <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 8005d9c:	4b62      	ldr	r3, [pc, #392]	; (8005f28 <lowlayer_readTruePosition+0x198>)
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	4b62      	ldr	r3, [pc, #392]	; (8005f2c <lowlayer_readTruePosition+0x19c>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dae:	ee17 0a90 	vmov	r0, s15
 8005db2:	f7fa fbc9 	bl	8000548 <__aeabi_f2d>
 8005db6:	4602      	mov	r2, r0
 8005db8:	460b      	mov	r3, r1
 8005dba:	f7fa fa67 	bl	800028c <__adddf3>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4610      	mov	r0, r2
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	a34c      	add	r3, pc, #304	; (adr r3, 8005ef8 <lowlayer_readTruePosition+0x168>)
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	f7fa fc14 	bl	80005f8 <__aeabi_dmul>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4610      	mov	r0, r2
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	a349      	add	r3, pc, #292	; (adr r3, 8005f00 <lowlayer_readTruePosition+0x170>)
 8005dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dde:	f7fa fd35 	bl	800084c <__aeabi_ddiv>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	4610      	mov	r0, r2
 8005de8:	4619      	mov	r1, r3
 8005dea:	a347      	add	r3, pc, #284	; (adr r3, 8005f08 <lowlayer_readTruePosition+0x178>)
 8005dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df0:	f7fa fa4a 	bl	8000288 <__aeabi_dsub>
 8005df4:	4602      	mov	r2, r0
 8005df6:	460b      	mov	r3, r1
	true->Theta1 = HARD_LIM0_NEG
 8005df8:	6879      	ldr	r1, [r7, #4]
 8005dfa:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 8005dfe:	4b4a      	ldr	r3, [pc, #296]	; (8005f28 <lowlayer_readTruePosition+0x198>)
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	4b4a      	ldr	r3, [pc, #296]	; (8005f2c <lowlayer_readTruePosition+0x19c>)
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	ee07 3a90 	vmov	s15, r3
 8005e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e10:	ee17 0a90 	vmov	r0, s15
 8005e14:	f7fa fb98 	bl	8000548 <__aeabi_f2d>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	f7fa fa36 	bl	800028c <__adddf3>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4610      	mov	r0, r2
 8005e26:	4619      	mov	r1, r3
 8005e28:	a333      	add	r3, pc, #204	; (adr r3, 8005ef8 <lowlayer_readTruePosition+0x168>)
 8005e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2e:	f7fa fbe3 	bl	80005f8 <__aeabi_dmul>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4610      	mov	r0, r2
 8005e38:	4619      	mov	r1, r3
 8005e3a:	f04f 0200 	mov.w	r2, #0
 8005e3e:	4b3c      	ldr	r3, [pc, #240]	; (8005f30 <lowlayer_readTruePosition+0x1a0>)
 8005e40:	f7fa fd04 	bl	800084c <__aeabi_ddiv>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4610      	mov	r0, r2
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	a330      	add	r3, pc, #192	; (adr r3, 8005f10 <lowlayer_readTruePosition+0x180>)
 8005e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e52:	f7fa fa1b 	bl	800028c <__adddf3>
 8005e56:	4602      	mov	r2, r0
 8005e58:	460b      	mov	r3, r1
	true->Theta2 = HARD_LIM1_POS
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 8005e60:	4b31      	ldr	r3, [pc, #196]	; (8005f28 <lowlayer_readTruePosition+0x198>)
 8005e62:	689a      	ldr	r2, [r3, #8]
 8005e64:	4b31      	ldr	r3, [pc, #196]	; (8005f2c <lowlayer_readTruePosition+0x19c>)
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e72:	eeb1 7a67 	vneg.f32	s14, s15
 8005e76:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8005f34 <lowlayer_readTruePosition+0x1a4>
 8005e7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e7e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8005f38 <lowlayer_readTruePosition+0x1a8>
 8005e82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e86:	ee17 0a90 	vmov	r0, s15
 8005e8a:	f7fa fb5d 	bl	8000548 <__aeabi_f2d>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
	true->D3	 = HARD_LIM2_NEG
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 8005e98:	4b28      	ldr	r3, [pc, #160]	; (8005f3c <lowlayer_readTruePosition+0x1ac>)
 8005e9a:	68da      	ldr	r2, [r3, #12]
 8005e9c:	4b28      	ldr	r3, [pc, #160]	; (8005f40 <lowlayer_readTruePosition+0x1b0>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fa fb3e 	bl	8000524 <__aeabi_i2d>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	f7fa f9ee 	bl	800028c <__adddf3>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	a30f      	add	r3, pc, #60	; (adr r3, 8005ef8 <lowlayer_readTruePosition+0x168>)
 8005eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebe:	f7fa fb9b 	bl	80005f8 <__aeabi_dmul>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	4619      	mov	r1, r3
 8005eca:	a313      	add	r3, pc, #76	; (adr r3, 8005f18 <lowlayer_readTruePosition+0x188>)
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	f7fa fcbc 	bl	800084c <__aeabi_ddiv>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	4610      	mov	r0, r2
 8005eda:	4619      	mov	r1, r3
 8005edc:	a310      	add	r3, pc, #64	; (adr r3, 8005f20 <lowlayer_readTruePosition+0x190>)
 8005ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee2:	f7fa f9d3 	bl	800028c <__adddf3>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	460b      	mov	r3, r1
	true->Theta4 = HARD_LIM3_POS
 8005eea:	6879      	ldr	r1, [r7, #4]
 8005eec:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
}
 8005ef0:	bf00      	nop
 8005ef2:	3708      	adds	r7, #8
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	60000000 	.word	0x60000000
 8005efc:	400921fb 	.word	0x400921fb
 8005f00:	00000000 	.word	0x00000000
 8005f04:	40f38800 	.word	0x40f38800
 8005f08:	40000000 	.word	0x40000000
 8005f0c:	3ff9f17a 	.word	0x3ff9f17a
 8005f10:	80000000 	.word	0x80000000
 8005f14:	40039716 	.word	0x40039716
 8005f18:	a0000000 	.word	0xa0000000
 8005f1c:	40d3bca1 	.word	0x40d3bca1
 8005f20:	a0000000 	.word	0xa0000000
 8005f24:	4008330d 	.word	0x4008330d
 8005f28:	2000feec 	.word	0x2000feec
 8005f2c:	2000ff30 	.word	0x2000ff30
 8005f30:	40ff4000 	.word	0x40ff4000
 8005f34:	4426aaab 	.word	0x4426aaab
 8005f38:	400f1aa0 	.word	0x400f1aa0
 8005f3c:	2000fed8 	.word	0x2000fed8
 8005f40:	2000ff0c 	.word	0x2000ff0c
 8005f44:	00000000 	.word	0x00000000

08005f48 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 8005f48:	b5b0      	push	{r4, r5, r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 8005f50:	4b53      	ldr	r3, [pc, #332]	; (80060a0 <lowlayer_readSetPosition+0x158>)
 8005f52:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005f56:	4b53      	ldr	r3, [pc, #332]	; (80060a4 <lowlayer_readSetPosition+0x15c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fa fae2 	bl	8000524 <__aeabi_i2d>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	f7fa f992 	bl	800028c <__adddf3>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	4619      	mov	r1, r3
 8005f70:	a345      	add	r3, pc, #276	; (adr r3, 8006088 <lowlayer_readSetPosition+0x140>)
 8005f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f76:	f7fa fb3f 	bl	80005f8 <__aeabi_dmul>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4610      	mov	r0, r2
 8005f80:	4619      	mov	r1, r3
 8005f82:	a343      	add	r3, pc, #268	; (adr r3, 8006090 <lowlayer_readSetPosition+0x148>)
 8005f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f88:	f7fa fc60 	bl	800084c <__aeabi_ddiv>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4620      	mov	r0, r4
 8005f92:	4629      	mov	r1, r5
 8005f94:	f7fa f97a 	bl	800028c <__adddf3>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 8005fa2:	4b3f      	ldr	r3, [pc, #252]	; (80060a0 <lowlayer_readSetPosition+0x158>)
 8005fa4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8005fa8:	4b3e      	ldr	r3, [pc, #248]	; (80060a4 <lowlayer_readSetPosition+0x15c>)
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fa fab9 	bl	8000524 <__aeabi_i2d>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	f7fa f969 	bl	800028c <__adddf3>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	a331      	add	r3, pc, #196	; (adr r3, 8006088 <lowlayer_readSetPosition+0x140>)
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	f7fa fb16 	bl	80005f8 <__aeabi_dmul>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	4b33      	ldr	r3, [pc, #204]	; (80060a8 <lowlayer_readSetPosition+0x160>)
 8005fda:	f7fa fc37 	bl	800084c <__aeabi_ddiv>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	4629      	mov	r1, r5
 8005fe6:	f7fa f951 	bl	800028c <__adddf3>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 8005ff4:	4b2a      	ldr	r3, [pc, #168]	; (80060a0 <lowlayer_readSetPosition+0x158>)
 8005ff6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8005ffa:	4b2a      	ldr	r3, [pc, #168]	; (80060a4 <lowlayer_readSetPosition+0x15c>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006006:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80060ac <lowlayer_readSetPosition+0x164>
 800600a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800600e:	ee16 0a90 	vmov	r0, s13
 8006012:	f7fa fa99 	bl	8000548 <__aeabi_f2d>
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	4620      	mov	r0, r4
 800601c:	4629      	mov	r1, r5
 800601e:	f7fa f935 	bl	800028c <__adddf3>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 800602c:	4b1c      	ldr	r3, [pc, #112]	; (80060a0 <lowlayer_readSetPosition+0x158>)
 800602e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8006032:	4b1c      	ldr	r3, [pc, #112]	; (80060a4 <lowlayer_readSetPosition+0x15c>)
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	4618      	mov	r0, r3
 8006038:	f7fa fa74 	bl	8000524 <__aeabi_i2d>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	f7fa f924 	bl	800028c <__adddf3>
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	4610      	mov	r0, r2
 800604a:	4619      	mov	r1, r3
 800604c:	a30e      	add	r3, pc, #56	; (adr r3, 8006088 <lowlayer_readSetPosition+0x140>)
 800604e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006052:	f7fa fad1 	bl	80005f8 <__aeabi_dmul>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4610      	mov	r0, r2
 800605c:	4619      	mov	r1, r3
 800605e:	a30e      	add	r3, pc, #56	; (adr r3, 8006098 <lowlayer_readSetPosition+0x150>)
 8006060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006064:	f7fa fbf2 	bl	800084c <__aeabi_ddiv>
 8006068:	4602      	mov	r2, r0
 800606a:	460b      	mov	r3, r1
 800606c:	4620      	mov	r0, r4
 800606e:	4629      	mov	r1, r5
 8006070:	f7fa f90c 	bl	800028c <__adddf3>
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	6879      	ldr	r1, [r7, #4]
 800607a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
}
 800607e:	bf00      	nop
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bdb0      	pop	{r4, r5, r7, pc}
 8006086:	bf00      	nop
 8006088:	60000000 	.word	0x60000000
 800608c:	400921fb 	.word	0x400921fb
 8006090:	00000000 	.word	0x00000000
 8006094:	40d38800 	.word	0x40d38800
 8006098:	a0000000 	.word	0xa0000000
 800609c:	40d3bca1 	.word	0x40d3bca1
 80060a0:	2000ff10 	.word	0x2000ff10
 80060a4:	2000fed8 	.word	0x2000fed8
 80060a8:	40df4000 	.word	0x40df4000
 80060ac:	42c80000 	.word	0x42c80000

080060b0 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 80060b0:	b084      	sub	sp, #16
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b092      	sub	sp, #72	; 0x48
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 80060bc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80060c0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80060c4:	a3c6      	add	r3, pc, #792	; (adr r3, 80063e0 <lowlayer_computeAndWritePulse+0x330>)
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	f7fa f8df 	bl	800028c <__adddf3>
 80060ce:	4602      	mov	r2, r0
 80060d0:	460b      	mov	r3, r1
 80060d2:	4610      	mov	r0, r2
 80060d4:	4619      	mov	r1, r3
 80060d6:	a3c4      	add	r3, pc, #784	; (adr r3, 80063e8 <lowlayer_computeAndWritePulse+0x338>)
 80060d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060dc:	f7fa fa8c 	bl	80005f8 <__aeabi_dmul>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4610      	mov	r0, r2
 80060e6:	4619      	mov	r1, r3
 80060e8:	a3b7      	add	r3, pc, #732	; (adr r3, 80063c8 <lowlayer_computeAndWritePulse+0x318>)
 80060ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ee:	f7fa fbad 	bl	800084c <__aeabi_ddiv>
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	ec43 2b17 	vmov	d7, r2, r3
 80060fa:	eeb0 0a47 	vmov.f32	s0, s14
 80060fe:	eef0 0a67 	vmov.f32	s1, s15
 8006102:	f013 fda5 	bl	8019c50 <round>
 8006106:	ec53 2b10 	vmov	r2, r3, d0
 800610a:	4610      	mov	r0, r2
 800610c:	4619      	mov	r1, r3
 800610e:	f7fa fd4b 	bl	8000ba8 <__aeabi_d2uiz>
 8006112:	4603      	mov	r3, r0
 8006114:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 8006116:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800611a:	a3b5      	add	r3, pc, #724	; (adr r3, 80063f0 <lowlayer_computeAndWritePulse+0x340>)
 800611c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006120:	f7fa f8b4 	bl	800028c <__adddf3>
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	4610      	mov	r0, r2
 800612a:	4619      	mov	r1, r3
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	4bb1      	ldr	r3, [pc, #708]	; (80063f8 <lowlayer_computeAndWritePulse+0x348>)
 8006132:	f7fa fa61 	bl	80005f8 <__aeabi_dmul>
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	4610      	mov	r0, r2
 800613c:	4619      	mov	r1, r3
 800613e:	a3a2      	add	r3, pc, #648	; (adr r3, 80063c8 <lowlayer_computeAndWritePulse+0x318>)
 8006140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006144:	f7fa fb82 	bl	800084c <__aeabi_ddiv>
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	ec43 2b17 	vmov	d7, r2, r3
 8006150:	eeb0 0a47 	vmov.f32	s0, s14
 8006154:	eef0 0a67 	vmov.f32	s1, s15
 8006158:	f013 fd7a 	bl	8019c50 <round>
 800615c:	ec53 2b10 	vmov	r2, r3, d0
 8006160:	4610      	mov	r0, r2
 8006162:	4619      	mov	r1, r3
 8006164:	f7fa fd20 	bl	8000ba8 <__aeabi_d2uiz>
 8006168:	4603      	mov	r3, r0
 800616a:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 800616c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006170:	f04f 0200 	mov.w	r2, #0
 8006174:	4ba1      	ldr	r3, [pc, #644]	; (80063fc <lowlayer_computeAndWritePulse+0x34c>)
 8006176:	f7fa fa3f 	bl	80005f8 <__aeabi_dmul>
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	ec43 2b17 	vmov	d7, r2, r3
 8006182:	eeb0 0a47 	vmov.f32	s0, s14
 8006186:	eef0 0a67 	vmov.f32	s1, s15
 800618a:	f013 fd61 	bl	8019c50 <round>
 800618e:	ec53 2b10 	vmov	r2, r3, d0
 8006192:	4610      	mov	r0, r2
 8006194:	4619      	mov	r1, r3
 8006196:	f7fa fd07 	bl	8000ba8 <__aeabi_d2uiz>
 800619a:	4603      	mov	r3, r0
 800619c:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 800619e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80061a2:	a38b      	add	r3, pc, #556	; (adr r3, 80063d0 <lowlayer_computeAndWritePulse+0x320>)
 80061a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a8:	f7fa f870 	bl	800028c <__adddf3>
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	4610      	mov	r0, r2
 80061b2:	4619      	mov	r1, r3
 80061b4:	a388      	add	r3, pc, #544	; (adr r3, 80063d8 <lowlayer_computeAndWritePulse+0x328>)
 80061b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ba:	f7fa fa1d 	bl	80005f8 <__aeabi_dmul>
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	4610      	mov	r0, r2
 80061c4:	4619      	mov	r1, r3
 80061c6:	a380      	add	r3, pc, #512	; (adr r3, 80063c8 <lowlayer_computeAndWritePulse+0x318>)
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	f7fa fb3e 	bl	800084c <__aeabi_ddiv>
 80061d0:	4602      	mov	r2, r0
 80061d2:	460b      	mov	r3, r1
 80061d4:	ec43 2b17 	vmov	d7, r2, r3
 80061d8:	eeb0 0a47 	vmov.f32	s0, s14
 80061dc:	eef0 0a67 	vmov.f32	s1, s15
 80061e0:	f013 fd36 	bl	8019c50 <round>
 80061e4:	ec53 2b10 	vmov	r2, r3, d0
 80061e8:	4610      	mov	r0, r2
 80061ea:	4619      	mov	r1, r3
 80061ec:	f7fa fcdc 	bl	8000ba8 <__aeabi_d2uiz>
 80061f0:	4603      	mov	r3, r0
 80061f2:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80061f4:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80061f8:	a379      	add	r3, pc, #484	; (adr r3, 80063e0 <lowlayer_computeAndWritePulse+0x330>)
 80061fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fe:	f7fa f845 	bl	800028c <__adddf3>
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
 8006206:	4610      	mov	r0, r2
 8006208:	4619      	mov	r1, r3
 800620a:	a377      	add	r3, pc, #476	; (adr r3, 80063e8 <lowlayer_computeAndWritePulse+0x338>)
 800620c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006210:	f7fa f9f2 	bl	80005f8 <__aeabi_dmul>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	4610      	mov	r0, r2
 800621a:	4619      	mov	r1, r3
 800621c:	a36a      	add	r3, pc, #424	; (adr r3, 80063c8 <lowlayer_computeAndWritePulse+0x318>)
 800621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006222:	f7fa fb13 	bl	800084c <__aeabi_ddiv>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	ec43 2b17 	vmov	d7, r2, r3
 800622e:	eeb0 0a47 	vmov.f32	s0, s14
 8006232:	eef0 0a67 	vmov.f32	s1, s15
 8006236:	f013 fd0b 	bl	8019c50 <round>
 800623a:	ec53 2b10 	vmov	r2, r3, d0
 800623e:	4610      	mov	r0, r2
 8006240:	4619      	mov	r1, r3
 8006242:	f7fa fcb1 	bl	8000ba8 <__aeabi_d2uiz>
 8006246:	4603      	mov	r3, r0
 8006248:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 800624a:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800624e:	a368      	add	r3, pc, #416	; (adr r3, 80063f0 <lowlayer_computeAndWritePulse+0x340>)
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	f7fa f81a 	bl	800028c <__adddf3>
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	4610      	mov	r0, r2
 800625e:	4619      	mov	r1, r3
 8006260:	f04f 0200 	mov.w	r2, #0
 8006264:	4b64      	ldr	r3, [pc, #400]	; (80063f8 <lowlayer_computeAndWritePulse+0x348>)
 8006266:	f7fa f9c7 	bl	80005f8 <__aeabi_dmul>
 800626a:	4602      	mov	r2, r0
 800626c:	460b      	mov	r3, r1
 800626e:	4610      	mov	r0, r2
 8006270:	4619      	mov	r1, r3
 8006272:	a355      	add	r3, pc, #340	; (adr r3, 80063c8 <lowlayer_computeAndWritePulse+0x318>)
 8006274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006278:	f7fa fae8 	bl	800084c <__aeabi_ddiv>
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	ec43 2b17 	vmov	d7, r2, r3
 8006284:	eeb0 0a47 	vmov.f32	s0, s14
 8006288:	eef0 0a67 	vmov.f32	s1, s15
 800628c:	f013 fce0 	bl	8019c50 <round>
 8006290:	ec53 2b10 	vmov	r2, r3, d0
 8006294:	4610      	mov	r0, r2
 8006296:	4619      	mov	r1, r3
 8006298:	f7fa fc86 	bl	8000ba8 <__aeabi_d2uiz>
 800629c:	4603      	mov	r3, r0
 800629e:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 80062a0:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 80062a4:	f04f 0200 	mov.w	r2, #0
 80062a8:	4b54      	ldr	r3, [pc, #336]	; (80063fc <lowlayer_computeAndWritePulse+0x34c>)
 80062aa:	f7fa f9a5 	bl	80005f8 <__aeabi_dmul>
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	ec43 2b17 	vmov	d7, r2, r3
 80062b6:	eeb0 0a47 	vmov.f32	s0, s14
 80062ba:	eef0 0a67 	vmov.f32	s1, s15
 80062be:	f013 fcc7 	bl	8019c50 <round>
 80062c2:	ec53 2b10 	vmov	r2, r3, d0
 80062c6:	4610      	mov	r0, r2
 80062c8:	4619      	mov	r1, r3
 80062ca:	f7fa fc6d 	bl	8000ba8 <__aeabi_d2uiz>
 80062ce:	4603      	mov	r3, r0
 80062d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 80062d2:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80062d6:	a33e      	add	r3, pc, #248	; (adr r3, 80063d0 <lowlayer_computeAndWritePulse+0x320>)
 80062d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062dc:	f7f9 ffd6 	bl	800028c <__adddf3>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4610      	mov	r0, r2
 80062e6:	4619      	mov	r1, r3
 80062e8:	a33b      	add	r3, pc, #236	; (adr r3, 80063d8 <lowlayer_computeAndWritePulse+0x328>)
 80062ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ee:	f7fa f983 	bl	80005f8 <__aeabi_dmul>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	4610      	mov	r0, r2
 80062f8:	4619      	mov	r1, r3
 80062fa:	a333      	add	r3, pc, #204	; (adr r3, 80063c8 <lowlayer_computeAndWritePulse+0x318>)
 80062fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006300:	f7fa faa4 	bl	800084c <__aeabi_ddiv>
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	ec43 2b17 	vmov	d7, r2, r3
 800630c:	eeb0 0a47 	vmov.f32	s0, s14
 8006310:	eef0 0a67 	vmov.f32	s1, s15
 8006314:	f013 fc9c 	bl	8019c50 <round>
 8006318:	ec53 2b10 	vmov	r2, r3, d0
 800631c:	4610      	mov	r0, r2
 800631e:	4619      	mov	r1, r3
 8006320:	f7fa fc42 	bl	8000ba8 <__aeabi_d2uiz>
 8006324:	4603      	mov	r3, r0
 8006326:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 8006328:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800632a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	461a      	mov	r2, r3
 8006330:	f04f 0300 	mov.w	r3, #0
 8006334:	e9c7 2308 	strd	r2, r3, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 8006338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800633a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	461a      	mov	r2, r3
 8006340:	f04f 0300 	mov.w	r3, #0
 8006344:	e9c7 2306 	strd	r2, r3, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 8006348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800634a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	461a      	mov	r2, r3
 8006350:	f04f 0300 	mov.w	r3, #0
 8006354:	e9c7 2304 	strd	r2, r3, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 8006358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800635a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	461a      	mov	r2, r3
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (abs(delta_var0) > 127
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	2b00      	cmp	r3, #0
 800636c:	bfb8      	it	lt
 800636e:	425b      	neglt	r3, r3
 8006370:	2b7f      	cmp	r3, #127	; 0x7f
 8006372:	dc11      	bgt.n	8006398 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var1) > 127
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	2b00      	cmp	r3, #0
 8006378:	bfb8      	it	lt
 800637a:	425b      	neglt	r3, r3
 800637c:	2b7f      	cmp	r3, #127	; 0x7f
 800637e:	dc0b      	bgt.n	8006398 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var2) > 127
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	2b00      	cmp	r3, #0
 8006384:	bfb8      	it	lt
 8006386:	425b      	neglt	r3, r3
 8006388:	2b7f      	cmp	r3, #127	; 0x7f
 800638a:	dc05      	bgt.n	8006398 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var3) > 127) {
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	bfb8      	it	lt
 8006392:	425b      	neglt	r3, r3
 8006394:	2b7f      	cmp	r3, #127	; 0x7f
 8006396:	dd01      	ble.n	800639c <lowlayer_computeAndWritePulse+0x2ec>
		return FALSE;
 8006398:	2300      	movs	r3, #0
 800639a:	e00c      	b.n	80063b6 <lowlayer_computeAndWritePulse+0x306>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 800639c:	f997 0020 	ldrsb.w	r0, [r7, #32]
 80063a0:	f997 1018 	ldrsb.w	r1, [r7, #24]
 80063a4:	f997 2010 	ldrsb.w	r2, [r7, #16]
 80063a8:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80063ac:	f000 f828 	bl	8006400 <lowlayer_writePulse>
 80063b0:	4603      	mov	r3, r0
 80063b2:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 80063b4:	79fb      	ldrb	r3, [r7, #7]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3748      	adds	r7, #72	; 0x48
 80063ba:	46bd      	mov	sp, r7
 80063bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063c0:	b004      	add	sp, #16
 80063c2:	4770      	bx	lr
 80063c4:	f3af 8000 	nop.w
 80063c8:	60000000 	.word	0x60000000
 80063cc:	401921fb 	.word	0x401921fb
 80063d0:	daaaaaab 	.word	0xdaaaaaab
 80063d4:	4007bc89 	.word	0x4007bc89
 80063d8:	a0000000 	.word	0xa0000000
 80063dc:	40d3bca1 	.word	0x40d3bca1
 80063e0:	daaaaaab 	.word	0xdaaaaaab
 80063e4:	3ff7bc89 	.word	0x3ff7bc89
 80063e8:	00000000 	.word	0x00000000
 80063ec:	40d38800 	.word	0x40d38800
 80063f0:	88000000 	.word	0x88000000
 80063f4:	4002d97c 	.word	0x4002d97c
 80063f8:	40df4000 	.word	0x40df4000
 80063fc:	40590000 	.word	0x40590000

08006400 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 8006400:	b590      	push	{r4, r7, lr}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	4604      	mov	r4, r0
 8006408:	4608      	mov	r0, r1
 800640a:	4611      	mov	r1, r2
 800640c:	461a      	mov	r2, r3
 800640e:	4623      	mov	r3, r4
 8006410:	71fb      	strb	r3, [r7, #7]
 8006412:	4603      	mov	r3, r0
 8006414:	71bb      	strb	r3, [r7, #6]
 8006416:	460b      	mov	r3, r1
 8006418:	717b      	strb	r3, [r7, #5]
 800641a:	4613      	mov	r3, r2
 800641c:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 800641e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006422:	2b00      	cmp	r3, #0
 8006424:	da06      	bge.n	8006434 <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 8006426:	79fb      	ldrb	r3, [r7, #7]
 8006428:	425b      	negs	r3, r3
 800642a:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 800642c:	79fb      	ldrb	r3, [r7, #7]
 800642e:	425b      	negs	r3, r3
 8006430:	75fb      	strb	r3, [r7, #23]
 8006432:	e006      	b.n	8006442 <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 8006434:	79fb      	ldrb	r3, [r7, #7]
 8006436:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 8006438:	79fb      	ldrb	r3, [r7, #7]
 800643a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800643e:	b25b      	sxtb	r3, r3
 8006440:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 8006442:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006446:	2b00      	cmp	r3, #0
 8006448:	da06      	bge.n	8006458 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 800644a:	79bb      	ldrb	r3, [r7, #6]
 800644c:	425b      	negs	r3, r3
 800644e:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 8006450:	79bb      	ldrb	r3, [r7, #6]
 8006452:	425b      	negs	r3, r3
 8006454:	75bb      	strb	r3, [r7, #22]
 8006456:	e006      	b.n	8006466 <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 8006458:	79bb      	ldrb	r3, [r7, #6]
 800645a:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 800645c:	79bb      	ldrb	r3, [r7, #6]
 800645e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006462:	b25b      	sxtb	r3, r3
 8006464:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 8006466:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800646a:	2b00      	cmp	r3, #0
 800646c:	da0b      	bge.n	8006486 <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 800646e:	797b      	ldrb	r3, [r7, #5]
 8006470:	425b      	negs	r3, r3
 8006472:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 8006474:	797b      	ldrb	r3, [r7, #5]
 8006476:	425b      	negs	r3, r3
 8006478:	b2db      	uxtb	r3, r3
 800647a:	b25b      	sxtb	r3, r3
 800647c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006480:	b25b      	sxtb	r3, r3
 8006482:	757b      	strb	r3, [r7, #21]
 8006484:	e003      	b.n	800648e <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 8006486:	797b      	ldrb	r3, [r7, #5]
 8006488:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 800648a:	797b      	ldrb	r3, [r7, #5]
 800648c:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 800648e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	da06      	bge.n	80064a4 <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 8006496:	793b      	ldrb	r3, [r7, #4]
 8006498:	425b      	negs	r3, r3
 800649a:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 800649c:	793b      	ldrb	r3, [r7, #4]
 800649e:	425b      	negs	r3, r3
 80064a0:	753b      	strb	r3, [r7, #20]
 80064a2:	e006      	b.n	80064b2 <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 80064a4:	793b      	ldrb	r3, [r7, #4]
 80064a6:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 80064a8:	793b      	ldrb	r3, [r7, #4]
 80064aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064ae:	b25b      	sxtb	r3, r3
 80064b0:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 80064b2:	7cfb      	ldrb	r3, [r7, #19]
 80064b4:	2b4b      	cmp	r3, #75	; 0x4b
 80064b6:	d808      	bhi.n	80064ca <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 80064b8:	7cbb      	ldrb	r3, [r7, #18]
 80064ba:	2b78      	cmp	r3, #120	; 0x78
 80064bc:	d805      	bhi.n	80064ca <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 80064be:	7c7b      	ldrb	r3, [r7, #17]
 80064c0:	2b7d      	cmp	r3, #125	; 0x7d
 80064c2:	d802      	bhi.n	80064ca <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 80064c4:	7c3b      	ldrb	r3, [r7, #16]
 80064c6:	2b65      	cmp	r3, #101	; 0x65
 80064c8:	d901      	bls.n	80064ce <lowlayer_writePulse+0xce>
		return FALSE;
 80064ca:	2300      	movs	r3, #0
 80064cc:	e04b      	b.n	8006566 <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80064ce:	2200      	movs	r2, #0
 80064d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064d4:	4826      	ldr	r0, [pc, #152]	; (8006570 <lowlayer_writePulse+0x170>)
 80064d6:	f005 f88f 	bl	800b5f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 80064da:	2200      	movs	r2, #0
 80064dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80064e0:	4824      	ldr	r0, [pc, #144]	; (8006574 <lowlayer_writePulse+0x174>)
 80064e2:	f005 f889 	bl	800b5f8 <HAL_GPIO_WritePin>
	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 80064e6:	7dfb      	ldrb	r3, [r7, #23]
 80064e8:	4619      	mov	r1, r3
 80064ea:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 80064ee:	f7fe f811 	bl	8004514 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 80064f2:	7dbb      	ldrb	r3, [r7, #22]
 80064f4:	4619      	mov	r1, r3
 80064f6:	4820      	ldr	r0, [pc, #128]	; (8006578 <lowlayer_writePulse+0x178>)
 80064f8:	f7fe f80c 	bl	8004514 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 80064fc:	7d7b      	ldrb	r3, [r7, #21]
 80064fe:	4619      	mov	r1, r3
 8006500:	481e      	ldr	r0, [pc, #120]	; (800657c <lowlayer_writePulse+0x17c>)
 8006502:	f7fe f807 	bl	8004514 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 8006506:	7d3b      	ldrb	r3, [r7, #20]
 8006508:	4619      	mov	r1, r3
 800650a:	481d      	ldr	r0, [pc, #116]	; (8006580 <lowlayer_writePulse+0x180>)
 800650c:	f7fe f802 	bl	8004514 <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 8006510:	2364      	movs	r3, #100	; 0x64
 8006512:	73fb      	strb	r3, [r7, #15]
	
	 while (delay--);
 8006514:	bf00      	nop
 8006516:	7bfb      	ldrb	r3, [r7, #15]
 8006518:	1e5a      	subs	r2, r3, #1
 800651a:	73fa      	strb	r2, [r7, #15]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1fa      	bne.n	8006516 <lowlayer_writePulse+0x116>

//	int16_t wow = HAL_GPIO_ReadPin(CPLD_BUSY_GPIO_Port, CPLD_BUSY_Pin);
//	LOG_REPORT(" Busy: ", wow);
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 8006520:	2201      	movs	r2, #1
 8006522:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006526:	4813      	ldr	r0, [pc, #76]	; (8006574 <lowlayer_writePulse+0x174>)
 8006528:	f005 f866 	bl	800b5f8 <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 800652c:	4b15      	ldr	r3, [pc, #84]	; (8006584 <lowlayer_writePulse+0x184>)
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006534:	4413      	add	r3, r2
 8006536:	4a13      	ldr	r2, [pc, #76]	; (8006584 <lowlayer_writePulse+0x184>)
 8006538:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 800653a:	4b12      	ldr	r3, [pc, #72]	; (8006584 <lowlayer_writePulse+0x184>)
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006542:	4413      	add	r3, r2
 8006544:	4a0f      	ldr	r2, [pc, #60]	; (8006584 <lowlayer_writePulse+0x184>)
 8006546:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 8006548:	4b0e      	ldr	r3, [pc, #56]	; (8006584 <lowlayer_writePulse+0x184>)
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006550:	4413      	add	r3, r2
 8006552:	4a0c      	ldr	r2, [pc, #48]	; (8006584 <lowlayer_writePulse+0x184>)
 8006554:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 8006556:	4b0b      	ldr	r3, [pc, #44]	; (8006584 <lowlayer_writePulse+0x184>)
 8006558:	68da      	ldr	r2, [r3, #12]
 800655a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800655e:	4413      	add	r3, r2
 8006560:	4a08      	ldr	r2, [pc, #32]	; (8006584 <lowlayer_writePulse+0x184>)
 8006562:	60d3      	str	r3, [r2, #12]

	return TRUE;
 8006564:	2301      	movs	r3, #1
}
 8006566:	4618      	mov	r0, r3
 8006568:	371c      	adds	r7, #28
 800656a:	46bd      	mov	sp, r7
 800656c:	bd90      	pop	{r4, r7, pc}
 800656e:	bf00      	nop
 8006570:	40020000 	.word	0x40020000
 8006574:	40020c00 	.word	0x40020c00
 8006578:	60000002 	.word	0x60000002
 800657c:	60000004 	.word	0x60000004
 8006580:	60000006 	.word	0x60000006
 8006584:	2000fed8 	.word	0x2000fed8

08006588 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 800658e:	2364      	movs	r3, #100	; 0x64
 8006590:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 8006592:	2201      	movs	r2, #1
 8006594:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006598:	4809      	ldr	r0, [pc, #36]	; (80065c0 <lowlayer_resetEncoder+0x38>)
 800659a:	f005 f82d 	bl	800b5f8 <HAL_GPIO_WritePin>
	while (delay--);
 800659e:	bf00      	nop
 80065a0:	79fb      	ldrb	r3, [r7, #7]
 80065a2:	1e5a      	subs	r2, r3, #1
 80065a4:	71fa      	strb	r2, [r7, #7]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1fa      	bne.n	80065a0 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 80065aa:	2200      	movs	r2, #0
 80065ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065b0:	4803      	ldr	r0, [pc, #12]	; (80065c0 <lowlayer_resetEncoder+0x38>)
 80065b2:	f005 f821 	bl	800b5f8 <HAL_GPIO_WritePin>
}
 80065b6:	bf00      	nop
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	40020c00 	.word	0x40020c00

080065c4 <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 80065ca:	4805      	ldr	r0, [pc, #20]	; (80065e0 <lowlayer_readLimitSwitch+0x1c>)
 80065cc:	f7fd ffb1 	bl	8004532 <FSMC_Read>
 80065d0:	4603      	mov	r3, r0
 80065d2:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 80065d4:	88fb      	ldrh	r3, [r7, #6]
 80065d6:	b2db      	uxtb	r3, r3
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	60000020 	.word	0x60000020

080065e4 <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	4603      	mov	r3, r0
 80065ec:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 80065ee:	79fb      	ldrb	r3, [r7, #7]
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d81c      	bhi.n	800662e <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 80065f4:	79fb      	ldrb	r3, [r7, #7]
 80065f6:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80065fa:	3310      	adds	r3, #16
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fd ff97 	bl	8004532 <FSMC_Read>
 8006604:	4603      	mov	r3, r0
 8006606:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 8006608:	79fb      	ldrb	r3, [r7, #7]
 800660a:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 800660e:	3310      	adds	r3, #16
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	3302      	adds	r3, #2
 8006614:	4618      	mov	r0, r3
 8006616:	f7fd ff8c 	bl	8004532 <FSMC_Read>
 800661a:	4603      	mov	r3, r0
 800661c:	813b      	strh	r3, [r7, #8]
		data = high_word;
 800661e:	893b      	ldrh	r3, [r7, #8]
 8006620:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	041a      	lsls	r2, r3, #16
 8006626:	897b      	ldrh	r3, [r7, #10]
 8006628:	4313      	orrs	r3, r2
 800662a:	60fb      	str	r3, [r7, #12]
 800662c:	e001      	b.n	8006632 <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 800662e:	2300      	movs	r3, #0
 8006630:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8006632:	68fb      	ldr	r3, [r7, #12]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	4603      	mov	r3, r0
 8006644:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 8006646:	79fb      	ldrb	r3, [r7, #7]
 8006648:	2b02      	cmp	r3, #2
 800664a:	d81c      	bhi.n	8006686 <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 800664c:	79fb      	ldrb	r3, [r7, #7]
 800664e:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006652:	3318      	adds	r3, #24
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4618      	mov	r0, r3
 8006658:	f7fd ff6b 	bl	8004532 <FSMC_Read>
 800665c:	4603      	mov	r3, r0
 800665e:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 8006660:	79fb      	ldrb	r3, [r7, #7]
 8006662:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006666:	3318      	adds	r3, #24
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	3302      	adds	r3, #2
 800666c:	4618      	mov	r0, r3
 800666e:	f7fd ff60 	bl	8004532 <FSMC_Read>
 8006672:	4603      	mov	r3, r0
 8006674:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8006676:	893b      	ldrh	r3, [r7, #8]
 8006678:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	041a      	lsls	r2, r3, #16
 800667e:	897b      	ldrh	r3, [r7, #10]
 8006680:	4313      	orrs	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]
 8006684:	e001      	b.n	800668a <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 8006686:	2300      	movs	r3, #0
 8006688:	60fb      	str	r3, [r7, #12]
	}
	return data;
 800668a:	68fb      	ldr	r3, [r7, #12]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 8006694:	b590      	push	{r4, r7, lr}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 800669a:	2300      	movs	r3, #0
 800669c:	71fb      	strb	r3, [r7, #7]
 800669e:	e00b      	b.n	80066b8 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 80066a0:	79fc      	ldrb	r4, [r7, #7]
 80066a2:	79fb      	ldrb	r3, [r7, #7]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff ff9d 	bl	80065e4 <lowlayer_readEncoder>
 80066aa:	4603      	mov	r3, r0
 80066ac:	4a06      	ldr	r2, [pc, #24]	; (80066c8 <lowlayer_updateEncoder+0x34>)
 80066ae:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 80066b2:	79fb      	ldrb	r3, [r7, #7]
 80066b4:	3301      	adds	r3, #1
 80066b6:	71fb      	strb	r3, [r7, #7]
 80066b8:	79fb      	ldrb	r3, [r7, #7]
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d9f0      	bls.n	80066a0 <lowlayer_updateEncoder+0xc>
	}
}
 80066be:	bf00      	nop
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd90      	pop	{r4, r7, pc}
 80066c8:	2000feec 	.word	0x2000feec

080066cc <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 80066cc:	b590      	push	{r4, r7, lr}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 80066d2:	2300      	movs	r3, #0
 80066d4:	71fb      	strb	r3, [r7, #7]
 80066d6:	e00b      	b.n	80066f0 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 80066d8:	79fc      	ldrb	r4, [r7, #7]
 80066da:	79fb      	ldrb	r3, [r7, #7]
 80066dc:	4618      	mov	r0, r3
 80066de:	f7ff ffad 	bl	800663c <lowlayer_readCapture>
 80066e2:	4603      	mov	r3, r0
 80066e4:	4a06      	ldr	r2, [pc, #24]	; (8006700 <lowlayer_updateCapture+0x34>)
 80066e6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 80066ea:	79fb      	ldrb	r3, [r7, #7]
 80066ec:	3301      	adds	r3, #1
 80066ee:	71fb      	strb	r3, [r7, #7]
 80066f0:	79fb      	ldrb	r3, [r7, #7]
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d9f0      	bls.n	80066d8 <lowlayer_updateCapture+0xc>
	}
}
 80066f6:	bf00      	nop
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd90      	pop	{r4, r7, pc}
 8006700:	2000fefc 	.word	0x2000fefc

08006704 <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 800670a:	f7ff ff5b 	bl	80065c4 <lowlayer_readLimitSwitch>
 800670e:	4603      	mov	r3, r0
 8006710:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 8006712:	2300      	movs	r3, #0
 8006714:	71fb      	strb	r3, [r7, #7]
 8006716:	e00d      	b.n	8006734 <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 8006718:	79ba      	ldrb	r2, [r7, #6]
 800671a:	79fb      	ldrb	r3, [r7, #7]
 800671c:	fa42 f303 	asr.w	r3, r2, r3
 8006720:	b2da      	uxtb	r2, r3
 8006722:	79fb      	ldrb	r3, [r7, #7]
 8006724:	f002 0201 	and.w	r2, r2, #1
 8006728:	b2d1      	uxtb	r1, r2
 800672a:	4a06      	ldr	r2, [pc, #24]	; (8006744 <lowlayer_updateLimit+0x40>)
 800672c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 800672e:	79fb      	ldrb	r3, [r7, #7]
 8006730:	3301      	adds	r3, #1
 8006732:	71fb      	strb	r3, [r7, #7]
 8006734:	79fb      	ldrb	r3, [r7, #7]
 8006736:	2b03      	cmp	r3, #3
 8006738:	d9ee      	bls.n	8006718 <lowlayer_updateLimit+0x14>
	}
}
 800673a:	bf00      	nop
 800673c:	bf00      	nop
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	2000fef8 	.word	0x2000fef8

08006748 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	4603      	mov	r3, r0
 8006750:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 8006752:	79fb      	ldrb	r3, [r7, #7]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d006      	beq.n	8006766 <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 8006758:	2201      	movs	r2, #1
 800675a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800675e:	4807      	ldr	r0, [pc, #28]	; (800677c <lowlayer_setOutput+0x34>)
 8006760:	f004 ff4a 	bl	800b5f8 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 8006764:	e005      	b.n	8006772 <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 8006766:	2200      	movs	r2, #0
 8006768:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800676c:	4803      	ldr	r0, [pc, #12]	; (800677c <lowlayer_setOutput+0x34>)
 800676e:	f004 ff43 	bl	800b5f8 <HAL_GPIO_WritePin>
}
 8006772:	bf00      	nop
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	40020400 	.word	0x40020400

08006780 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 8006784:	2201      	movs	r2, #1
 8006786:	2140      	movs	r1, #64	; 0x40
 8006788:	4802      	ldr	r0, [pc, #8]	; (8006794 <lowlayer_CPLD_Init+0x14>)
 800678a:	f004 ff35 	bl	800b5f8 <HAL_GPIO_WritePin>
}
 800678e:	bf00      	nop
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	40020c00 	.word	0x40020c00

08006798 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8006798:	b580      	push	{r7, lr}
 800679a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 800679c:	2201      	movs	r2, #1
 800679e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80067a2:	4808      	ldr	r0, [pc, #32]	; (80067c4 <lowlayer_stepMotorInit+0x2c>)
 80067a4:	f004 ff28 	bl	800b5f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 80067a8:	2201      	movs	r2, #1
 80067aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067ae:	4805      	ldr	r0, [pc, #20]	; (80067c4 <lowlayer_stepMotorInit+0x2c>)
 80067b0:	f004 ff22 	bl	800b5f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 80067b4:	2201      	movs	r2, #1
 80067b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80067ba:	4802      	ldr	r0, [pc, #8]	; (80067c4 <lowlayer_stepMotorInit+0x2c>)
 80067bc:	f004 ff1c 	bl	800b5f8 <HAL_GPIO_WritePin>
}
 80067c0:	bf00      	nop
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	40020000 	.word	0x40020000

080067c8 <scaraStartup>:
//SCARA_Gcode_Cor_TypeDef		Gcode_Cor[125];

Trajectory_TargetTypeDef	joint_taget[4] = {  TRAJECTORY_J0, TRAJECTORY_J1,
												TRAJECTORY_J2, TRAJECTORY_J3};

void				scaraStartup(void) {
 80067c8:	b580      	push	{r7, lr}
 80067ca:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 80067cc:	f7ff ffd8 	bl	8006780 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 80067d0:	f7ff ffe2 	bl	8006798 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 80067d4:	f7ff fed8 	bl	8006588 <lowlayer_resetEncoder>
	//lowlayer_writePulse(0, 0, 0, 0);
}
 80067d8:	bf00      	nop
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	0000      	movs	r0, r0
	...

080067e0 <scaraInitDuty>:


/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 80067e0:	b084      	sub	sp, #16
 80067e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067e4:	ed2d 8b02 	vpush	{d8}
 80067e8:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
 80067ec:	af72      	add	r7, sp, #456	; 0x1c8
 80067ee:	f507 74c0 	add.w	r4, r7, #384	; 0x180
 80067f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if(DUTY_SPACE_TASK == command.space_type) {
 80067f6:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f040 8359 	bne.w	8006eb2 <scaraInitDuty+0x6d2>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8006800:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 8006804:	a3bd      	add	r3, pc, #756	; (adr r3, 8006afc <scaraInitDuty+0x31c>)
 8006806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680a:	f7f9 fef5 	bl	80005f8 <__aeabi_dmul>
 800680e:	4602      	mov	r2, r0
 8006810:	460b      	mov	r3, r1
 8006812:	4610      	mov	r0, r2
 8006814:	4619      	mov	r1, r3
 8006816:	f04f 0200 	mov.w	r2, #0
 800681a:	4bb1      	ldr	r3, [pc, #708]	; (8006ae0 <scaraInitDuty+0x300>)
 800681c:	f7fa f816 	bl	800084c <__aeabi_ddiv>
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	e9c7 2378 	strd	r2, r3, [r7, #480]	; 0x1e0
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8006828:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 800682c:	2b01      	cmp	r3, #1
 800682e:	d134      	bne.n	800689a <scaraInitDuty+0xba>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8006830:	4bac      	ldr	r3, [pc, #688]	; (8006ae4 <scaraInitDuty+0x304>)
 8006832:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006836:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800683a:	f7f9 fd27 	bl	800028c <__adddf3>
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
 8006842:	f107 0108 	add.w	r1, r7, #8
 8006846:	e9c1 2308 	strd	r2, r3, [r1, #32]
			target_point.y 		= positionCurrent.y + command.target_point.y;
 800684a:	4ba6      	ldr	r3, [pc, #664]	; (8006ae4 <scaraInitDuty+0x304>)
 800684c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8006850:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8006854:	f7f9 fd1a 	bl	800028c <__adddf3>
 8006858:	4602      	mov	r2, r0
 800685a:	460b      	mov	r3, r1
 800685c:	f107 0108 	add.w	r1, r7, #8
 8006860:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8006864:	4b9f      	ldr	r3, [pc, #636]	; (8006ae4 <scaraInitDuty+0x304>)
 8006866:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800686a:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 800686e:	f7f9 fd0d 	bl	800028c <__adddf3>
 8006872:	4602      	mov	r2, r0
 8006874:	460b      	mov	r3, r1
 8006876:	f107 0108 	add.w	r1, r7, #8
 800687a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 800687e:	4b99      	ldr	r3, [pc, #612]	; (8006ae4 <scaraInitDuty+0x304>)
 8006880:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8006884:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8006888:	f7f9 fd00 	bl	800028c <__adddf3>
 800688c:	4602      	mov	r2, r0
 800688e:	460b      	mov	r3, r1
 8006890:	f107 0108 	add.w	r1, r7, #8
 8006894:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8006898:	e01f      	b.n	80068da <scaraInitDuty+0xfa>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 800689a:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d118      	bne.n	80068d4 <scaraInitDuty+0xf4>
			target_point.x 		= command.target_point.x;
 80068a2:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 80068a6:	f107 0108 	add.w	r1, r7, #8
 80068aa:	e9c1 2308 	strd	r2, r3, [r1, #32]
			target_point.y 		= command.target_point.y;
 80068ae:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 80068b2:	f107 0108 	add.w	r1, r7, #8
 80068b6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			target_point.z 		= command.target_point.z;
 80068ba:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 80068be:	f107 0108 	add.w	r1, r7, #8
 80068c2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			target_point.roll	= command.target_point.roll;
 80068c6:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 80068ca:	f107 0108 	add.w	r1, r7, #8
 80068ce:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80068d2:	e002      	b.n	80068da <scaraInitDuty+0xfa>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 80068d4:	230c      	movs	r3, #12
 80068d6:	f000 be95 	b.w	8007604 <scaraInitDuty+0xe24>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 80068da:	f107 0308 	add.w	r3, r7, #8
 80068de:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80068e2:	4b80      	ldr	r3, [pc, #512]	; (8006ae4 <scaraInitDuty+0x304>)
 80068e4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80068e8:	f7f9 fcce 	bl	8000288 <__aeabi_dsub>
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
		dir_angle = 1;
 80068f4:	2301      	movs	r3, #1
 80068f6:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
		if ( angle_s < 0) {
 80068fa:	f04f 0200 	mov.w	r2, #0
 80068fe:	f04f 0300 	mov.w	r3, #0
 8006902:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8006906:	f7fa f8e9 	bl	8000adc <__aeabi_dcmplt>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <scaraInitDuty+0x136>
			dir_angle = -1;
 8006910:	23ff      	movs	r3, #255	; 0xff
 8006912:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
//		if(positionCurrent.roll + angle_s < -3.14 || positionCurrent.roll + angle_s > 3.14){
//			dir_angle = -dir_angle;
//			angle_s = (2*PI - fabs(angle_s))*dir_angle;
//		}

		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 8006916:	4b74      	ldr	r3, [pc, #464]	; (8006ae8 <scaraInitDuty+0x308>)
 8006918:	2200      	movs	r2, #0
 800691a:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 800691c:	4b71      	ldr	r3, [pc, #452]	; (8006ae4 <scaraInitDuty+0x304>)
 800691e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8006922:	4971      	ldr	r1, [pc, #452]	; (8006ae8 <scaraInitDuty+0x308>)
 8006924:	f501 6182 	add.w	r1, r1, #1040	; 0x410
 8006928:	e9c1 2300 	strd	r2, r3, [r1]
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 800692c:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8006930:	2b00      	cmp	r3, #0
 8006932:	d120      	bne.n	8006976 <scaraInitDuty+0x196>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 8006934:	4b6c      	ldr	r3, [pc, #432]	; (8006ae8 <scaraInitDuty+0x308>)
 8006936:	2200      	movs	r2, #0
 8006938:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 800693a:	4c6a      	ldr	r4, [pc, #424]	; (8006ae4 <scaraInitDuty+0x304>)
 800693c:	f107 0208 	add.w	r2, r7, #8
 8006940:	ab24      	add	r3, sp, #144	; 0x90
 8006942:	4611      	mov	r1, r2
 8006944:	2298      	movs	r2, #152	; 0x98
 8006946:	4618      	mov	r0, r3
 8006948:	f00e fc52 	bl	80151f0 <memcpy>
 800694c:	4668      	mov	r0, sp
 800694e:	f104 0308 	add.w	r3, r4, #8
 8006952:	2290      	movs	r2, #144	; 0x90
 8006954:	4619      	mov	r1, r3
 8006956:	f00e fc4b 	bl	80151f0 <memcpy>
 800695a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800695e:	4863      	ldr	r0, [pc, #396]	; (8006aec <scaraInitDuty+0x30c>)
 8006960:	f000 fe64 	bl	800762c <scaraInitLine>
 8006964:	4603      	mov	r3, r0
 8006966:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			total_s = myDUTY.task.path.line.total_s;
 800696a:	4b5f      	ldr	r3, [pc, #380]	; (8006ae8 <scaraInitDuty+0x308>)
 800696c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006970:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 8006974:	e053      	b.n	8006a1e <scaraInitDuty+0x23e>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 8006976:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 800697a:	2b01      	cmp	r3, #1
 800697c:	d14c      	bne.n	8006a18 <scaraInitDuty+0x238>
			SCARA_PositionTypeDef	center_point;
			target_point.z = positionCurrent.z;
 800697e:	4b59      	ldr	r3, [pc, #356]	; (8006ae4 <scaraInitDuty+0x304>)
 8006980:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8006984:	f107 0108 	add.w	r1, r7, #8
 8006988:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

			center_point.x 		= positionCurrent.x + command.sub_point.x;
 800698c:	4b55      	ldr	r3, [pc, #340]	; (8006ae4 <scaraInitDuty+0x304>)
 800698e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006992:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8006996:	f7f9 fc79 	bl	800028c <__adddf3>
 800699a:	4602      	mov	r2, r0
 800699c:	460b      	mov	r3, r1
 800699e:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			center_point.y 		= positionCurrent.y + command.sub_point.y;
 80069a2:	4b50      	ldr	r3, [pc, #320]	; (8006ae4 <scaraInitDuty+0x304>)
 80069a4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80069a8:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 80069ac:	f7f9 fc6e 	bl	800028c <__adddf3>
 80069b0:	4602      	mov	r2, r0
 80069b2:	460b      	mov	r3, r1
 80069b4:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			center_point.z 		= positionCurrent.z;
 80069b8:	4b4a      	ldr	r3, [pc, #296]	; (8006ae4 <scaraInitDuty+0x304>)
 80069ba:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80069be:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 80069c2:	4b49      	ldr	r3, [pc, #292]	; (8006ae8 <scaraInitDuty+0x308>)
 80069c4:	2201      	movs	r2, #1
 80069c6:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 80069c8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80069cc:	4c45      	ldr	r4, [pc, #276]	; (8006ae4 <scaraInitDuty+0x304>)
 80069ce:	9370      	str	r3, [sp, #448]	; 0x1c0
 80069d0:	a84a      	add	r0, sp, #296	; 0x128
 80069d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80069d6:	2298      	movs	r2, #152	; 0x98
 80069d8:	4619      	mov	r1, r3
 80069da:	f00e fc09 	bl	80151f0 <memcpy>
 80069de:	f107 0208 	add.w	r2, r7, #8
 80069e2:	ab24      	add	r3, sp, #144	; 0x90
 80069e4:	4611      	mov	r1, r2
 80069e6:	2298      	movs	r2, #152	; 0x98
 80069e8:	4618      	mov	r0, r3
 80069ea:	f00e fc01 	bl	80151f0 <memcpy>
 80069ee:	4668      	mov	r0, sp
 80069f0:	f104 0308 	add.w	r3, r4, #8
 80069f4:	2290      	movs	r2, #144	; 0x90
 80069f6:	4619      	mov	r1, r3
 80069f8:	f00e fbfa 	bl	80151f0 <memcpy>
 80069fc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006a00:	483b      	ldr	r0, [pc, #236]	; (8006af0 <scaraInitDuty+0x310>)
 8006a02:	f000 fec9 	bl	8007798 <scaraInitCircle>
 8006a06:	4603      	mov	r3, r0
 8006a08:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
										positionCurrent,
										target_point,
										center_point,
										command.arc_dir );
			total_s = myDUTY.task.path.circle.total_s;
 8006a0c:	4b36      	ldr	r3, [pc, #216]	; (8006ae8 <scaraInitDuty+0x308>)
 8006a0e:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8006a12:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 8006a16:	e002      	b.n	8006a1e <scaraInitDuty+0x23e>
//		}else if(DUTY_PATH_BEZIER_CURVE == command.path_type){
//			myDUTY.task.path.path_type = DUTY_PATH_BEZIER_CURVE;
//			myDUTY.task.path.line.z0 = command.target_point.z;
//		}
		}else {
			return SCARA_STATUS_ERROR_TASK;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	f000 bdf3 	b.w	8007604 <scaraInitDuty+0xe24>
		}

		if ( SCARA_STATUS_OK != status) {
 8006a1e:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <scaraInitDuty+0x24e>
			return status;
 8006a26:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8006a2a:	f000 bdeb 	b.w	8007604 <scaraInitDuty+0xe24>
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 8006a2e:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f040 80bb 	bne.w	8006bae <scaraInitDuty+0x3ce>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006a38:	f897 3191 	ldrb.w	r3, [r7, #401]	; 0x191
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d161      	bne.n	8006b04 <scaraInitDuty+0x324>
				//myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006a40:	4b29      	ldr	r3, [pc, #164]	; (8006ae8 <scaraInitDuty+0x308>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8006a48:	ed97 7bb6 	vldr	d7, [r7, #728]	; 0x2d8
 8006a4c:	ed97 6b68 	vldr	d6, [r7, #416]	; 0x1a0
 8006a50:	eeb0 2a46 	vmov.f32	s4, s12
 8006a54:	eef0 2a66 	vmov.f32	s5, s13
 8006a58:	eeb0 1a47 	vmov.f32	s2, s14
 8006a5c:	eef0 1a67 	vmov.f32	s3, s15
 8006a60:	2201      	movs	r2, #1
 8006a62:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 8006a66:	2104      	movs	r1, #4
 8006a68:	4822      	ldr	r0, [pc, #136]	; (8006af4 <scaraInitDuty+0x314>)
 8006a6a:	f001 f875 	bl	8007b58 <scaraInitLSPB1>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006a74:	4a1c      	ldr	r2, [pc, #112]	; (8006ae8 <scaraInitDuty+0x308>)
 8006a76:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8006a7a:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
				myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8006a7e:	4b1a      	ldr	r3, [pc, #104]	; (8006ae8 <scaraInitDuty+0x308>)
 8006a80:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 8006a84:	4918      	ldr	r1, [pc, #96]	; (8006ae8 <scaraInitDuty+0x308>)
 8006a86:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006a8a:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006a8e:	4b16      	ldr	r3, [pc, #88]	; (8006ae8 <scaraInitDuty+0x308>)
 8006a90:	2202      	movs	r2, #2
 8006a92:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006a96:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7f9 fd42 	bl	8000524 <__aeabi_i2d>
 8006aa0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8006aa4:	f7f9 fda8 	bl	80005f8 <__aeabi_dmul>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	ec43 2b16 	vmov	d6, r2, r3
 8006ab0:	4b0d      	ldr	r3, [pc, #52]	; (8006ae8 <scaraInitDuty+0x308>)
 8006ab2:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006ab6:	ed93 7b00 	vldr	d7, [r3]
 8006aba:	eeb0 1a47 	vmov.f32	s2, s14
 8006abe:	eef0 1a67 	vmov.f32	s3, s15
 8006ac2:	2203      	movs	r2, #3
 8006ac4:	eeb0 0a46 	vmov.f32	s0, s12
 8006ac8:	eef0 0a66 	vmov.f32	s1, s13
 8006acc:	2105      	movs	r1, #5
 8006ace:	480a      	ldr	r0, [pc, #40]	; (8006af8 <scaraInitDuty+0x318>)
 8006ad0:	f000 fff4 	bl	8007abc <scaraInitLinear>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
 8006ada:	e1db      	b.n	8006e94 <scaraInitDuty+0x6b4>
 8006adc:	f3af 8000 	nop.w
 8006ae0:	40668000 	.word	0x40668000
 8006ae4:	20010ab0 	.word	0x20010ab0
 8006ae8:	2000ff40 	.word	0x2000ff40
 8006aec:	2000ff50 	.word	0x2000ff50
 8006af0:	2000ffc0 	.word	0x2000ffc0
 8006af4:	20010058 	.word	0x20010058
 8006af8:	20010328 	.word	0x20010328
 8006afc:	60000000 	.word	0x60000000
 8006b00:	400921fb 	.word	0x400921fb
			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006b04:	f897 3191 	ldrb.w	r3, [r7, #401]	; 0x191
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d14d      	bne.n	8006ba8 <scaraInitDuty+0x3c8>
				//myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006b0c:	4bb9      	ldr	r3, [pc, #740]	; (8006df4 <scaraInitDuty+0x614>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8006b14:	ed97 7bb6 	vldr	d7, [r7, #728]	; 0x2d8
 8006b18:	ed97 6bb8 	vldr	d6, [r7, #736]	; 0x2e0
 8006b1c:	eeb0 2a46 	vmov.f32	s4, s12
 8006b20:	eef0 2a66 	vmov.f32	s5, s13
 8006b24:	eeb0 1a47 	vmov.f32	s2, s14
 8006b28:	eef0 1a67 	vmov.f32	s3, s15
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 8006b32:	2104      	movs	r1, #4
 8006b34:	48b0      	ldr	r0, [pc, #704]	; (8006df8 <scaraInitDuty+0x618>)
 8006b36:	f001 f80f 	bl	8007b58 <scaraInitLSPB1>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
										 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006b40:	4aac      	ldr	r2, [pc, #688]	; (8006df4 <scaraInitDuty+0x614>)
 8006b42:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8006b46:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
				myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8006b4a:	4baa      	ldr	r3, [pc, #680]	; (8006df4 <scaraInitDuty+0x614>)
 8006b4c:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 8006b50:	49a8      	ldr	r1, [pc, #672]	; (8006df4 <scaraInitDuty+0x614>)
 8006b52:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006b56:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006b5a:	4ba6      	ldr	r3, [pc, #664]	; (8006df4 <scaraInitDuty+0x614>)
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006b62:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7f9 fcdc 	bl	8000524 <__aeabi_i2d>
 8006b6c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8006b70:	f7f9 fd42 	bl	80005f8 <__aeabi_dmul>
 8006b74:	4602      	mov	r2, r0
 8006b76:	460b      	mov	r3, r1
 8006b78:	ec43 2b16 	vmov	d6, r2, r3
 8006b7c:	4b9d      	ldr	r3, [pc, #628]	; (8006df4 <scaraInitDuty+0x614>)
 8006b7e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006b82:	ed93 7b00 	vldr	d7, [r3]
 8006b86:	eeb0 1a47 	vmov.f32	s2, s14
 8006b8a:	eef0 1a67 	vmov.f32	s3, s15
 8006b8e:	2203      	movs	r2, #3
 8006b90:	eeb0 0a46 	vmov.f32	s0, s12
 8006b94:	eef0 0a66 	vmov.f32	s1, s13
 8006b98:	2105      	movs	r1, #5
 8006b9a:	4898      	ldr	r0, [pc, #608]	; (8006dfc <scaraInitDuty+0x61c>)
 8006b9c:	f000 ff8e 	bl	8007abc <scaraInitLinear>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
 8006ba6:	e175      	b.n	8006e94 <scaraInitDuty+0x6b4>

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 8006ba8:	2308      	movs	r3, #8
 8006baa:	f000 bd2b 	b.w	8007604 <scaraInitDuty+0xe24>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 8006bae:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	f040 80a7 	bne.w	8006d06 <scaraInitDuty+0x526>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006bb8:	f897 3191 	ldrb.w	r3, [r7, #401]	; 0x191
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d14d      	bne.n	8006c5c <scaraInitDuty+0x47c>
				//myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006bc0:	4b8c      	ldr	r3, [pc, #560]	; (8006df4 <scaraInitDuty+0x614>)
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve1(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8006bc8:	ed97 7bb6 	vldr	d7, [r7, #728]	; 0x2d8
 8006bcc:	ed97 6b68 	vldr	d6, [r7, #416]	; 0x1a0
 8006bd0:	eeb0 2a46 	vmov.f32	s4, s12
 8006bd4:	eef0 2a66 	vmov.f32	s5, s13
 8006bd8:	eeb0 1a47 	vmov.f32	s2, s14
 8006bdc:	eef0 1a67 	vmov.f32	s3, s15
 8006be0:	2201      	movs	r2, #1
 8006be2:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 8006be6:	2104      	movs	r1, #4
 8006be8:	4885      	ldr	r0, [pc, #532]	; (8006e00 <scaraInitDuty+0x620>)
 8006bea:	f001 fa35 	bl	8008058 <scaraInitScurve1>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006bf4:	4a7f      	ldr	r2, [pc, #508]	; (8006df4 <scaraInitDuty+0x614>)
 8006bf6:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8006bfa:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
				myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8006bfe:	4b7d      	ldr	r3, [pc, #500]	; (8006df4 <scaraInitDuty+0x614>)
 8006c00:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 8006c04:	497b      	ldr	r1, [pc, #492]	; (8006df4 <scaraInitDuty+0x614>)
 8006c06:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006c0a:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006c0e:	4b79      	ldr	r3, [pc, #484]	; (8006df4 <scaraInitDuty+0x614>)
 8006c10:	2202      	movs	r2, #2
 8006c12:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006c16:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7f9 fc82 	bl	8000524 <__aeabi_i2d>
 8006c20:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8006c24:	f7f9 fce8 	bl	80005f8 <__aeabi_dmul>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	ec43 2b16 	vmov	d6, r2, r3
 8006c30:	4b70      	ldr	r3, [pc, #448]	; (8006df4 <scaraInitDuty+0x614>)
 8006c32:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006c36:	ed93 7b00 	vldr	d7, [r3]
 8006c3a:	eeb0 1a47 	vmov.f32	s2, s14
 8006c3e:	eef0 1a67 	vmov.f32	s3, s15
 8006c42:	2203      	movs	r2, #3
 8006c44:	eeb0 0a46 	vmov.f32	s0, s12
 8006c48:	eef0 0a66 	vmov.f32	s1, s13
 8006c4c:	2105      	movs	r1, #5
 8006c4e:	486b      	ldr	r0, [pc, #428]	; (8006dfc <scaraInitDuty+0x61c>)
 8006c50:	f000 ff34 	bl	8007abc <scaraInitLinear>
 8006c54:	4603      	mov	r3, r0
 8006c56:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
 8006c5a:	e11b      	b.n	8006e94 <scaraInitDuty+0x6b4>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006c5c:	f897 3191 	ldrb.w	r3, [r7, #401]	; 0x191
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d14d      	bne.n	8006d00 <scaraInitDuty+0x520>
				//myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006c64:	4b63      	ldr	r3, [pc, #396]	; (8006df4 <scaraInitDuty+0x614>)
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve1(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8006c6c:	ed97 7bb6 	vldr	d7, [r7, #728]	; 0x2d8
 8006c70:	ed97 6bb8 	vldr	d6, [r7, #736]	; 0x2e0
 8006c74:	eeb0 2a46 	vmov.f32	s4, s12
 8006c78:	eef0 2a66 	vmov.f32	s5, s13
 8006c7c:	eeb0 1a47 	vmov.f32	s2, s14
 8006c80:	eef0 1a67 	vmov.f32	s3, s15
 8006c84:	2200      	movs	r2, #0
 8006c86:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 8006c8a:	2104      	movs	r1, #4
 8006c8c:	485c      	ldr	r0, [pc, #368]	; (8006e00 <scaraInitDuty+0x620>)
 8006c8e:	f001 f9e3 	bl	8008058 <scaraInitScurve1>
 8006c92:	4603      	mov	r3, r0
 8006c94:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
										 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006c98:	4a56      	ldr	r2, [pc, #344]	; (8006df4 <scaraInitDuty+0x614>)
 8006c9a:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8006c9e:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
				myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8006ca2:	4b54      	ldr	r3, [pc, #336]	; (8006df4 <scaraInitDuty+0x614>)
 8006ca4:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 8006ca8:	4952      	ldr	r1, [pc, #328]	; (8006df4 <scaraInitDuty+0x614>)
 8006caa:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006cae:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006cb2:	4b50      	ldr	r3, [pc, #320]	; (8006df4 <scaraInitDuty+0x614>)
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006cba:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7f9 fc30 	bl	8000524 <__aeabi_i2d>
 8006cc4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8006cc8:	f7f9 fc96 	bl	80005f8 <__aeabi_dmul>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	460b      	mov	r3, r1
 8006cd0:	ec43 2b16 	vmov	d6, r2, r3
 8006cd4:	4b47      	ldr	r3, [pc, #284]	; (8006df4 <scaraInitDuty+0x614>)
 8006cd6:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006cda:	ed93 7b00 	vldr	d7, [r3]
 8006cde:	eeb0 1a47 	vmov.f32	s2, s14
 8006ce2:	eef0 1a67 	vmov.f32	s3, s15
 8006ce6:	2203      	movs	r2, #3
 8006ce8:	eeb0 0a46 	vmov.f32	s0, s12
 8006cec:	eef0 0a66 	vmov.f32	s1, s13
 8006cf0:	2105      	movs	r1, #5
 8006cf2:	4842      	ldr	r0, [pc, #264]	; (8006dfc <scaraInitDuty+0x61c>)
 8006cf4:	f000 fee2 	bl	8007abc <scaraInitLinear>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
 8006cfe:	e0c9      	b.n	8006e94 <scaraInitDuty+0x6b4>
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8006d00:	2308      	movs	r3, #8
 8006d02:	f000 bc7f 	b.w	8007604 <scaraInitDuty+0xe24>
			}
		}else if(DUTY_TRAJECTORY_LINEAR == command.trajec_type){
 8006d06:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d17c      	bne.n	8006e08 <scaraInitDuty+0x628>
			//myDUTY.time_total = command.time_total;
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006d0e:	4a39      	ldr	r2, [pc, #228]	; (8006df4 <scaraInitDuty+0x614>)
 8006d10:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8006d14:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006d18:	4b36      	ldr	r3, [pc, #216]	; (8006df4 <scaraInitDuty+0x614>)
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006d20:	4b34      	ldr	r3, [pc, #208]	; (8006df4 <scaraInitDuty+0x614>)
 8006d22:	2202      	movs	r2, #2
 8006d24:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			if(command.modeInit_type == DUTY_MODE_INIT_QT){
 8006d28:	f897 3191 	ldrb.w	r3, [r7, #401]	; 0x191
 8006d2c:	2b03      	cmp	r3, #3
 8006d2e:	d118      	bne.n	8006d62 <scaraInitDuty+0x582>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, fabs(total_s), DUTY_MODE_INIT_QT, command.time_total);
 8006d30:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006d34:	603b      	str	r3, [r7, #0]
 8006d36:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006d3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d3e:	607b      	str	r3, [r7, #4]
 8006d40:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8006d44:	eeb0 1a47 	vmov.f32	s2, s14
 8006d48:	eef0 1a67 	vmov.f32	s3, s15
 8006d4c:	2203      	movs	r2, #3
 8006d4e:	ed97 0b00 	vldr	d0, [r7]
 8006d52:	2104      	movs	r1, #4
 8006d54:	482b      	ldr	r0, [pc, #172]	; (8006e04 <scaraInitDuty+0x624>)
 8006d56:	f000 feb1 	bl	8007abc <scaraInitLinear>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8006d60:	e01d      	b.n	8006d9e <scaraInitDuty+0x5be>
			}else if(command.modeInit_type == DUTY_MODE_INIT_QV){
 8006d62:	f897 3191 	ldrb.w	r3, [r7, #401]	; 0x191
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d116      	bne.n	8006d98 <scaraInitDuty+0x5b8>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, fabs(total_s), DUTY_MODE_INIT_QV, command.v_factor);
 8006d6a:	f8d7 5150 	ldr.w	r5, [r7, #336]	; 0x150
 8006d6e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006d72:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8006d76:	ed97 7bb6 	vldr	d7, [r7, #728]	; 0x2d8
 8006d7a:	eeb0 1a47 	vmov.f32	s2, s14
 8006d7e:	eef0 1a67 	vmov.f32	s3, s15
 8006d82:	2202      	movs	r2, #2
 8006d84:	ec46 5b10 	vmov	d0, r5, r6
 8006d88:	2104      	movs	r1, #4
 8006d8a:	481e      	ldr	r0, [pc, #120]	; (8006e04 <scaraInitDuty+0x624>)
 8006d8c:	f000 fe96 	bl	8007abc <scaraInitLinear>
 8006d90:	4603      	mov	r3, r0
 8006d92:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8006d96:	e002      	b.n	8006d9e <scaraInitDuty+0x5be>
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8006d98:	2308      	movs	r3, #8
 8006d9a:	f000 bc33 	b.w	8007604 <scaraInitDuty+0xe24>
			}
			myDUTY.time_total = myDUTY.task.trajectory_3d.linear.Tf;
 8006d9e:	4b15      	ldr	r3, [pc, #84]	; (8006df4 <scaraInitDuty+0x614>)
 8006da0:	e9d3 23a0 	ldrd	r2, r3, [r3, #640]	; 0x280
 8006da4:	4913      	ldr	r1, [pc, #76]	; (8006df4 <scaraInitDuty+0x614>)
 8006da6:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006daa:	e9c1 2300 	strd	r2, r3, [r1]
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006dae:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7f9 fbb6 	bl	8000524 <__aeabi_i2d>
 8006db8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8006dbc:	f7f9 fc1c 	bl	80005f8 <__aeabi_dmul>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	ec43 2b16 	vmov	d6, r2, r3
 8006dc8:	4b0a      	ldr	r3, [pc, #40]	; (8006df4 <scaraInitDuty+0x614>)
 8006dca:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006dce:	ed93 7b00 	vldr	d7, [r3]
 8006dd2:	eeb0 1a47 	vmov.f32	s2, s14
 8006dd6:	eef0 1a67 	vmov.f32	s3, s15
 8006dda:	2203      	movs	r2, #3
 8006ddc:	eeb0 0a46 	vmov.f32	s0, s12
 8006de0:	eef0 0a66 	vmov.f32	s1, s13
 8006de4:	2105      	movs	r1, #5
 8006de6:	4805      	ldr	r0, [pc, #20]	; (8006dfc <scaraInitDuty+0x61c>)
 8006de8:	f000 fe68 	bl	8007abc <scaraInitLinear>
 8006dec:	4603      	mov	r3, r0
 8006dee:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
 8006df2:	e04f      	b.n	8006e94 <scaraInitDuty+0x6b4>
 8006df4:	2000ff40 	.word	0x2000ff40
 8006df8:	20010058 	.word	0x20010058
 8006dfc:	20010328 	.word	0x20010328
 8006e00:	200100d8 	.word	0x200100d8
 8006e04:	200101a8 	.word	0x200101a8
		}else if(DUTY_TRAJECTORY_GCODE_LSPB == command.trajec_type){
 8006e08:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 8006e0c:	2b03      	cmp	r3, #3
 8006e0e:	d13f      	bne.n	8006e90 <scaraInitDuty+0x6b0>
			status1 = SCARA_STATUS_OK;
 8006e10:	2300      	movs	r3, #0
 8006e12:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006e16:	4a96      	ldr	r2, [pc, #600]	; (8007070 <scaraInitDuty+0x890>)
 8006e18:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8006e1c:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_GCODE_LSPB;
 8006e20:	4b93      	ldr	r3, [pc, #588]	; (8007070 <scaraInitDuty+0x890>)
 8006e22:	2203      	movs	r2, #3
 8006e24:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006e28:	4b91      	ldr	r3, [pc, #580]	; (8007070 <scaraInitDuty+0x890>)
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			myDUTY.time_total = command.time_total;
 8006e30:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8006e34:	498e      	ldr	r1, [pc, #568]	; (8007070 <scaraInitDuty+0x890>)
 8006e36:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006e3a:	e9c1 2300 	strd	r2, r3, [r1]
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total - last_T);
 8006e3e:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7f9 fb6e 	bl	8000524 <__aeabi_i2d>
 8006e48:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8006e4c:	f7f9 fbd4 	bl	80005f8 <__aeabi_dmul>
 8006e50:	4602      	mov	r2, r0
 8006e52:	460b      	mov	r3, r1
 8006e54:	ec43 2b18 	vmov	d8, r2, r3
 8006e58:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8006e5c:	4b85      	ldr	r3, [pc, #532]	; (8007074 <scaraInitDuty+0x894>)
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	f7f9 fa11 	bl	8000288 <__aeabi_dsub>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	ec43 2b17 	vmov	d7, r2, r3
 8006e6e:	eeb0 1a47 	vmov.f32	s2, s14
 8006e72:	eef0 1a67 	vmov.f32	s3, s15
 8006e76:	2203      	movs	r2, #3
 8006e78:	eeb0 0a48 	vmov.f32	s0, s16
 8006e7c:	eef0 0a68 	vmov.f32	s1, s17
 8006e80:	2105      	movs	r1, #5
 8006e82:	487d      	ldr	r0, [pc, #500]	; (8007078 <scaraInitDuty+0x898>)
 8006e84:	f000 fe1a 	bl	8007abc <scaraInitLinear>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
 8006e8e:	e001      	b.n	8006e94 <scaraInitDuty+0x6b4>
//			myDUTY.time_total = command.time_total;
//			status1 = SCARA_STATUS_OK;
//			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
//		}
		else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8006e90:	2305      	movs	r3, #5
 8006e92:	e3b7      	b.n	8007604 <scaraInitDuty+0xe24>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 8006e94:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <scaraInitDuty+0x6c2>
			return status1;
 8006e9c:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8006ea0:	e3b0      	b.n	8007604 <scaraInitDuty+0xe24>
		}
		if ( SCARA_STATUS_OK != status2) {
 8006ea2:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f000 837e 	beq.w	80075a8 <scaraInitDuty+0xdc8>
			return status2;
 8006eac:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8006eb0:	e3a8      	b.n	8007604 <scaraInitDuty+0xe24>
		}


	
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 8006eb2:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	f040 8374 	bne.w	80075a4 <scaraInitDuty+0xdc4>
		/*----------- Space Joint ------------*/
		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 8006ebc:	4b6c      	ldr	r3, [pc, #432]	; (8007070 <scaraInitDuty+0x890>)
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 8006ec2:	4b6e      	ldr	r3, [pc, #440]	; (800707c <scaraInitDuty+0x89c>)
 8006ec4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8006ec8:	4969      	ldr	r1, [pc, #420]	; (8007070 <scaraInitDuty+0x890>)
 8006eca:	f601 2118 	addw	r1, r1, #2584	; 0xa18
 8006ece:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 8006ed2:	4b6a      	ldr	r3, [pc, #424]	; (800707c <scaraInitDuty+0x89c>)
 8006ed4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8006ed8:	4965      	ldr	r1, [pc, #404]	; (8007070 <scaraInitDuty+0x890>)
 8006eda:	f501 6122 	add.w	r1, r1, #2592	; 0xa20
 8006ede:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 8006ee2:	4b66      	ldr	r3, [pc, #408]	; (800707c <scaraInitDuty+0x89c>)
 8006ee4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8006ee8:	4961      	ldr	r1, [pc, #388]	; (8007070 <scaraInitDuty+0x890>)
 8006eea:	f601 2128 	addw	r1, r1, #2600	; 0xa28
 8006eee:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 8006ef2:	4b62      	ldr	r3, [pc, #392]	; (800707c <scaraInitDuty+0x89c>)
 8006ef4:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006ef8:	495d      	ldr	r1, [pc, #372]	; (8007070 <scaraInitDuty+0x890>)
 8006efa:	f501 6123 	add.w	r1, r1, #2608	; 0xa30
 8006efe:	e9c1 2300 	strd	r2, r3, [r1]

		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8006f02:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 8006f06:	a358      	add	r3, pc, #352	; (adr r3, 8007068 <scaraInitDuty+0x888>)
 8006f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0c:	f7f9 fb74 	bl	80005f8 <__aeabi_dmul>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4610      	mov	r0, r2
 8006f16:	4619      	mov	r1, r3
 8006f18:	f04f 0200 	mov.w	r2, #0
 8006f1c:	4b58      	ldr	r3, [pc, #352]	; (8007080 <scaraInitDuty+0x8a0>)
 8006f1e:	f7f9 fc95 	bl	800084c <__aeabi_ddiv>
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	e9c7 2378 	strd	r2, r3, [r7, #480]	; 0x1e0
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8006f2a:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d12c      	bne.n	8006f8c <scaraInitDuty+0x7ac>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8006f32:	4b52      	ldr	r3, [pc, #328]	; (800707c <scaraInitDuty+0x89c>)
 8006f34:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006f38:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8006f3c:	f7f9 f9a6 	bl	800028c <__adddf3>
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8006f48:	4b4c      	ldr	r3, [pc, #304]	; (800707c <scaraInitDuty+0x89c>)
 8006f4a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8006f4e:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8006f52:	f7f9 f99b 	bl	800028c <__adddf3>
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8006f5e:	4b47      	ldr	r3, [pc, #284]	; (800707c <scaraInitDuty+0x89c>)
 8006f60:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8006f64:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 8006f68:	f7f9 f990 	bl	800028c <__adddf3>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8006f74:	4b41      	ldr	r3, [pc, #260]	; (800707c <scaraInitDuty+0x89c>)
 8006f76:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8006f7a:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8006f7e:	f7f9 f985 	bl	800028c <__adddf3>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 8006f8a:	e016      	b.n	8006fba <scaraInitDuty+0x7da>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8006f8c:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d110      	bne.n	8006fb6 <scaraInitDuty+0x7d6>
			target_point.x 		= command.target_point.x;
 8006f94:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8006f98:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			target_point.y 		= command.target_point.y;
 8006f9c:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8006fa0:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			target_point.z 		= command.target_point.z;
 8006fa4:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 8006fa8:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
			target_point.roll	= command.target_point.roll;
 8006fac:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8006fb0:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 8006fb4:	e001      	b.n	8006fba <scaraInitDuty+0x7da>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8006fb6:	230c      	movs	r3, #12
 8006fb8:	e324      	b.n	8007604 <scaraInitDuty+0xe24>
		}

		if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 8006fba:	4c30      	ldr	r4, [pc, #192]	; (800707c <scaraInitDuty+0x89c>)
 8006fbc:	f107 05a0 	add.w	r5, r7, #160	; 0xa0
 8006fc0:	4668      	mov	r0, sp
 8006fc2:	f104 0308 	add.w	r3, r4, #8
 8006fc6:	2290      	movs	r2, #144	; 0x90
 8006fc8:	4619      	mov	r1, r3
 8006fca:	f00e f911 	bl	80151f0 <memcpy>
 8006fce:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	f7fe f8c4 	bl	8005160 <kinematicInverse>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <scaraInitDuty+0x802>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 8006fde:	2307      	movs	r3, #7
 8006fe0:	e310      	b.n	8007604 <scaraInitDuty+0xe24>
		}
		// Trajectory 4 profile
		double q[4];
		q[0] = target_point.Theta1 - positionCurrent.Theta1;
 8006fe2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006fe6:	4b25      	ldr	r3, [pc, #148]	; (800707c <scaraInitDuty+0x89c>)
 8006fe8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8006fec:	f7f9 f94c 	bl	8000288 <__aeabi_dsub>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	f107 0108 	add.w	r1, r7, #8
 8006ff8:	e9c1 2300 	strd	r2, r3, [r1]
		q[1] = target_point.Theta2 - positionCurrent.Theta2;
 8006ffc:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8007000:	4b1e      	ldr	r3, [pc, #120]	; (800707c <scaraInitDuty+0x89c>)
 8007002:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007006:	f7f9 f93f 	bl	8000288 <__aeabi_dsub>
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	f107 0108 	add.w	r1, r7, #8
 8007012:	e9c1 2302 	strd	r2, r3, [r1, #8]
		q[2] = target_point.D3 	   - positionCurrent.D3;
 8007016:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800701a:	4b18      	ldr	r3, [pc, #96]	; (800707c <scaraInitDuty+0x89c>)
 800701c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007020:	f7f9 f932 	bl	8000288 <__aeabi_dsub>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	f107 0108 	add.w	r1, r7, #8
 800702c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		q[3] = target_point.Theta4 - positionCurrent.Theta4;
 8007030:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8007034:	4b11      	ldr	r3, [pc, #68]	; (800707c <scaraInitDuty+0x89c>)
 8007036:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800703a:	f7f9 f925 	bl	8000288 <__aeabi_dsub>
 800703e:	4602      	mov	r2, r0
 8007040:	460b      	mov	r3, r1
 8007042:	f107 0108 	add.w	r1, r7, #8
 8007046:	e9c1 2306 	strd	r2, r3, [r1, #24]

		// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 800704a:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 800704e:	2b00      	cmp	r3, #0
 8007050:	f040 8156 	bne.w	8007300 <scaraInitDuty+0xb20>
			// Mode Init Time
			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8007054:	f897 3191 	ldrb.w	r3, [r7, #401]	; 0x191
 8007058:	2b01      	cmp	r3, #1
 800705a:	d171      	bne.n	8007140 <scaraInitDuty+0x960>
				for ( uint8_t i = 0; i < 4; i++) {
 800705c:	2300      	movs	r3, #0
 800705e:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
 8007062:	e061      	b.n	8007128 <scaraInitDuty+0x948>
 8007064:	f3af 8000 	nop.w
 8007068:	60000000 	.word	0x60000000
 800706c:	400921fb 	.word	0x400921fb
 8007070:	2000ff40 	.word	0x2000ff40
 8007074:	2000fd48 	.word	0x2000fd48
 8007078:	20010328 	.word	0x20010328
 800707c:	20010ab0 	.word	0x20010ab0
 8007080:	40668000 	.word	0x40668000
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8007084:	f897 214e 	ldrb.w	r2, [r7, #334]	; 0x14e
 8007088:	49d3      	ldr	r1, [pc, #844]	; (80073d8 <scaraInitDuty+0xbf8>)
 800708a:	4613      	mov	r3, r2
 800708c:	005b      	lsls	r3, r3, #1
 800708e:	4413      	add	r3, r2
 8007090:	01db      	lsls	r3, r3, #7
 8007092:	440b      	add	r3, r1
 8007094:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007098:	2200      	movs	r2, #0
 800709a:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 800709c:	f897 214e 	ldrb.w	r2, [r7, #334]	; 0x14e
 80070a0:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 80070a4:	4ccc      	ldr	r4, [pc, #816]	; (80073d8 <scaraInitDuty+0xbf8>)
 80070a6:	4613      	mov	r3, r2
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	4413      	add	r3, r2
 80070ac:	01db      	lsls	r3, r3, #7
 80070ae:	4423      	add	r3, r4
 80070b0:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80070b4:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitLSPB1(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80070b8:	f897 214e 	ldrb.w	r2, [r7, #334]	; 0x14e
 80070bc:	4613      	mov	r3, r2
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	4413      	add	r3, r2
 80070c2:	01db      	lsls	r3, r3, #7
 80070c4:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80070c8:	4ac3      	ldr	r2, [pc, #780]	; (80073d8 <scaraInitDuty+0xbf8>)
 80070ca:	1898      	adds	r0, r3, r2
 80070cc:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 80070d0:	4ac2      	ldr	r2, [pc, #776]	; (80073dc <scaraInitDuty+0xbfc>)
 80070d2:	5cd1      	ldrb	r1, [r2, r3]
 80070d4:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 80070d8:	f107 0208 	add.w	r2, r7, #8
 80070dc:	00db      	lsls	r3, r3, #3
 80070de:	4413      	add	r3, r2
 80070e0:	ed93 7b00 	vldr	d7, [r3]
 80070e4:	ed97 6bb6 	vldr	d6, [r7, #728]	; 0x2d8
 80070e8:	ed97 5b68 	vldr	d5, [r7, #416]	; 0x1a0
 80070ec:	eeb0 2a45 	vmov.f32	s4, s10
 80070f0:	eef0 2a65 	vmov.f32	s5, s11
 80070f4:	eeb0 1a46 	vmov.f32	s2, s12
 80070f8:	eef0 1a66 	vmov.f32	s3, s13
 80070fc:	2201      	movs	r2, #1
 80070fe:	eeb0 0a47 	vmov.f32	s0, s14
 8007102:	eef0 0a67 	vmov.f32	s1, s15
 8007106:	f000 fd27 	bl	8007b58 <scaraInitLSPB1>
 800710a:	4603      	mov	r3, r0
 800710c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
					if(status1 != SCARA_STATUS_OK){
 8007110:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <scaraInitDuty+0x93e>
						return status1;
 8007118:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 800711c:	e272      	b.n	8007604 <scaraInitDuty+0xe24>
				for ( uint8_t i = 0; i < 4; i++) {
 800711e:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 8007122:	3301      	adds	r3, #1
 8007124:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
 8007128:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 800712c:	2b03      	cmp	r3, #3
 800712e:	d9a9      	bls.n	8007084 <scaraInitDuty+0x8a4>
					}
				}
				myDUTY.time_total = command.time_total;
 8007130:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8007134:	49a8      	ldr	r1, [pc, #672]	; (80073d8 <scaraInitDuty+0xbf8>)
 8007136:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 800713a:	e9c1 2300 	strd	r2, r3, [r1]
 800713e:	e233      	b.n	80075a8 <scaraInitDuty+0xdc8>
			// Mode Init Acc
			} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8007140:	f897 3191 	ldrb.w	r3, [r7, #401]	; 0x191
 8007144:	2b00      	cmp	r3, #0
 8007146:	f040 80d9 	bne.w	80072fc <scaraInitDuty+0xb1c>
				for ( uint8_t i = 0; i < 4; i++) {
 800714a:	2300      	movs	r3, #0
 800714c:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
 8007150:	e03c      	b.n	80071cc <scaraInitDuty+0x9ec>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8007152:	f897 214d 	ldrb.w	r2, [r7, #333]	; 0x14d
 8007156:	49a0      	ldr	r1, [pc, #640]	; (80073d8 <scaraInitDuty+0xbf8>)
 8007158:	4613      	mov	r3, r2
 800715a:	005b      	lsls	r3, r3, #1
 800715c:	4413      	add	r3, r2
 800715e:	01db      	lsls	r3, r3, #7
 8007160:	440b      	add	r3, r1
 8007162:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007166:	2200      	movs	r2, #0
 8007168:	701a      	strb	r2, [r3, #0]
					status1 = scaraInitLSPB1(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 800716a:	f897 214d 	ldrb.w	r2, [r7, #333]	; 0x14d
 800716e:	4613      	mov	r3, r2
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	4413      	add	r3, r2
 8007174:	01db      	lsls	r3, r3, #7
 8007176:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800717a:	4a97      	ldr	r2, [pc, #604]	; (80073d8 <scaraInitDuty+0xbf8>)
 800717c:	1898      	adds	r0, r3, r2
 800717e:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8007182:	4a96      	ldr	r2, [pc, #600]	; (80073dc <scaraInitDuty+0xbfc>)
 8007184:	5cd1      	ldrb	r1, [r2, r3]
 8007186:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 800718a:	f107 0208 	add.w	r2, r7, #8
 800718e:	00db      	lsls	r3, r3, #3
 8007190:	4413      	add	r3, r2
 8007192:	ed93 7b00 	vldr	d7, [r3]
 8007196:	ed97 6bb6 	vldr	d6, [r7, #728]	; 0x2d8
 800719a:	ed97 5bb8 	vldr	d5, [r7, #736]	; 0x2e0
 800719e:	eeb0 2a45 	vmov.f32	s4, s10
 80071a2:	eef0 2a65 	vmov.f32	s5, s11
 80071a6:	eeb0 1a46 	vmov.f32	s2, s12
 80071aa:	eef0 1a66 	vmov.f32	s3, s13
 80071ae:	2200      	movs	r2, #0
 80071b0:	eeb0 0a47 	vmov.f32	s0, s14
 80071b4:	eef0 0a67 	vmov.f32	s1, s15
 80071b8:	f000 fcce 	bl	8007b58 <scaraInitLSPB1>
 80071bc:	4603      	mov	r3, r0
 80071be:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
				for ( uint8_t i = 0; i < 4; i++) {
 80071c2:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 80071c6:	3301      	adds	r3, #1
 80071c8:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
 80071cc:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 80071d0:	2b03      	cmp	r3, #3
 80071d2:	d9be      	bls.n	8007152 <scaraInitDuty+0x972>
										q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				}
				myDUTY.time_total = 0;
 80071d4:	4b80      	ldr	r3, [pc, #512]	; (80073d8 <scaraInitDuty+0xbf8>)
 80071d6:	f603 2138 	addw	r1, r3, #2616	; 0xa38
 80071da:	f04f 0200 	mov.w	r2, #0
 80071de:	f04f 0300 	mov.w	r3, #0
 80071e2:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 80071e6:	2300      	movs	r3, #0
 80071e8:	f887 314c 	strb.w	r3, [r7, #332]	; 0x14c
 80071ec:	e02b      	b.n	8007246 <scaraInitDuty+0xa66>
					if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 80071ee:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80071f2:	4979      	ldr	r1, [pc, #484]	; (80073d8 <scaraInitDuty+0xbf8>)
 80071f4:	4613      	mov	r3, r2
 80071f6:	005b      	lsls	r3, r3, #1
 80071f8:	4413      	add	r3, r2
 80071fa:	01db      	lsls	r3, r3, #7
 80071fc:	440b      	add	r3, r1
 80071fe:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8007202:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007206:	4b74      	ldr	r3, [pc, #464]	; (80073d8 <scaraInitDuty+0xbf8>)
 8007208:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800720c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007210:	f7f9 fc82 	bl	8000b18 <__aeabi_dcmpgt>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d010      	beq.n	800723c <scaraInitDuty+0xa5c>
						myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 800721a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800721e:	496e      	ldr	r1, [pc, #440]	; (80073d8 <scaraInitDuty+0xbf8>)
 8007220:	4613      	mov	r3, r2
 8007222:	005b      	lsls	r3, r3, #1
 8007224:	4413      	add	r3, r2
 8007226:	01db      	lsls	r3, r3, #7
 8007228:	440b      	add	r3, r1
 800722a:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800722e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007232:	4969      	ldr	r1, [pc, #420]	; (80073d8 <scaraInitDuty+0xbf8>)
 8007234:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007238:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 800723c:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007240:	3301      	adds	r3, #1
 8007242:	f887 314c 	strb.w	r3, [r7, #332]	; 0x14c
 8007246:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800724a:	2b03      	cmp	r3, #3
 800724c:	d9cf      	bls.n	80071ee <scaraInitDuty+0xa0e>
					}
				}
				for ( uint8_t i = 0; i < 4; i++) {
 800724e:	2300      	movs	r3, #0
 8007250:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 8007254:	e04d      	b.n	80072f2 <scaraInitDuty+0xb12>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8007256:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 800725a:	495f      	ldr	r1, [pc, #380]	; (80073d8 <scaraInitDuty+0xbf8>)
 800725c:	4613      	mov	r3, r2
 800725e:	005b      	lsls	r3, r3, #1
 8007260:	4413      	add	r3, r2
 8007262:	01db      	lsls	r3, r3, #7
 8007264:	440b      	add	r3, r1
 8007266:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800726a:	2200      	movs	r2, #0
 800726c:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 800726e:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8007272:	4b59      	ldr	r3, [pc, #356]	; (80073d8 <scaraInitDuty+0xbf8>)
 8007274:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007278:	e9d3 0100 	ldrd	r0, r1, [r3]
 800727c:	4c56      	ldr	r4, [pc, #344]	; (80073d8 <scaraInitDuty+0xbf8>)
 800727e:	4613      	mov	r3, r2
 8007280:	005b      	lsls	r3, r3, #1
 8007282:	4413      	add	r3, r2
 8007284:	01db      	lsls	r3, r3, #7
 8007286:	4423      	add	r3, r4
 8007288:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800728c:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitLSPB1(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8007290:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8007294:	4613      	mov	r3, r2
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	4413      	add	r3, r2
 800729a:	01db      	lsls	r3, r3, #7
 800729c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80072a0:	4a4d      	ldr	r2, [pc, #308]	; (80073d8 <scaraInitDuty+0xbf8>)
 80072a2:	1898      	adds	r0, r3, r2
 80072a4:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80072a8:	4a4c      	ldr	r2, [pc, #304]	; (80073dc <scaraInitDuty+0xbfc>)
 80072aa:	5cd1      	ldrb	r1, [r2, r3]
 80072ac:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80072b0:	f107 0208 	add.w	r2, r7, #8
 80072b4:	00db      	lsls	r3, r3, #3
 80072b6:	4413      	add	r3, r2
 80072b8:	ed93 7b00 	vldr	d7, [r3]
 80072bc:	ed97 6bb6 	vldr	d6, [r7, #728]	; 0x2d8
 80072c0:	ed97 5bb8 	vldr	d5, [r7, #736]	; 0x2e0
 80072c4:	eeb0 2a45 	vmov.f32	s4, s10
 80072c8:	eef0 2a65 	vmov.f32	s5, s11
 80072cc:	eeb0 1a46 	vmov.f32	s2, s12
 80072d0:	eef0 1a66 	vmov.f32	s3, s13
 80072d4:	2201      	movs	r2, #1
 80072d6:	eeb0 0a47 	vmov.f32	s0, s14
 80072da:	eef0 0a67 	vmov.f32	s1, s15
 80072de:	f000 fc3b 	bl	8007b58 <scaraInitLSPB1>
 80072e2:	4603      	mov	r3, r0
 80072e4:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
				for ( uint8_t i = 0; i < 4; i++) {
 80072e8:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80072ec:	3301      	adds	r3, #1
 80072ee:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 80072f2:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80072f6:	2b03      	cmp	r3, #3
 80072f8:	d9ad      	bls.n	8007256 <scaraInitDuty+0xa76>
 80072fa:	e155      	b.n	80075a8 <scaraInitDuty+0xdc8>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				}

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 80072fc:	2308      	movs	r3, #8
 80072fe:	e181      	b.n	8007604 <scaraInitDuty+0xe24>
			}
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8007300:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 8007304:	2b01      	cmp	r3, #1
 8007306:	f040 814b 	bne.w	80075a0 <scaraInitDuty+0xdc0>
			// Mode Init Time
			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800730a:	f897 3191 	ldrb.w	r3, [r7, #401]	; 0x191
 800730e:	2b01      	cmp	r3, #1
 8007310:	d166      	bne.n	80073e0 <scaraInitDuty+0xc00>
				for ( uint8_t i = 0; i < 4; i++) {
 8007312:	2300      	movs	r3, #0
 8007314:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
 8007318:	e051      	b.n	80073be <scaraInitDuty+0xbde>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800731a:	f897 214a 	ldrb.w	r2, [r7, #330]	; 0x14a
 800731e:	492e      	ldr	r1, [pc, #184]	; (80073d8 <scaraInitDuty+0xbf8>)
 8007320:	4613      	mov	r3, r2
 8007322:	005b      	lsls	r3, r3, #1
 8007324:	4413      	add	r3, r2
 8007326:	01db      	lsls	r3, r3, #7
 8007328:	440b      	add	r3, r1
 800732a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800732e:	2201      	movs	r2, #1
 8007330:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8007332:	f897 214a 	ldrb.w	r2, [r7, #330]	; 0x14a
 8007336:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800733a:	4c27      	ldr	r4, [pc, #156]	; (80073d8 <scaraInitDuty+0xbf8>)
 800733c:	4613      	mov	r3, r2
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	4413      	add	r3, r2
 8007342:	01db      	lsls	r3, r3, #7
 8007344:	4423      	add	r3, r4
 8007346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800734a:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitScurve1(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 800734e:	f897 214a 	ldrb.w	r2, [r7, #330]	; 0x14a
 8007352:	4613      	mov	r3, r2
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	4413      	add	r3, r2
 8007358:	01db      	lsls	r3, r3, #7
 800735a:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800735e:	4a1e      	ldr	r2, [pc, #120]	; (80073d8 <scaraInitDuty+0xbf8>)
 8007360:	1898      	adds	r0, r3, r2
 8007362:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 8007366:	4a1d      	ldr	r2, [pc, #116]	; (80073dc <scaraInitDuty+0xbfc>)
 8007368:	5cd1      	ldrb	r1, [r2, r3]
 800736a:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 800736e:	f107 0208 	add.w	r2, r7, #8
 8007372:	00db      	lsls	r3, r3, #3
 8007374:	4413      	add	r3, r2
 8007376:	ed93 7b00 	vldr	d7, [r3]
 800737a:	ed97 6bb6 	vldr	d6, [r7, #728]	; 0x2d8
 800737e:	ed97 5b68 	vldr	d5, [r7, #416]	; 0x1a0
 8007382:	eeb0 2a45 	vmov.f32	s4, s10
 8007386:	eef0 2a65 	vmov.f32	s5, s11
 800738a:	eeb0 1a46 	vmov.f32	s2, s12
 800738e:	eef0 1a66 	vmov.f32	s3, s13
 8007392:	2201      	movs	r2, #1
 8007394:	eeb0 0a47 	vmov.f32	s0, s14
 8007398:	eef0 0a67 	vmov.f32	s1, s15
 800739c:	f000 fe5c 	bl	8008058 <scaraInitScurve1>
 80073a0:	4603      	mov	r3, r0
 80073a2:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
					if(status1 != SCARA_STATUS_OK){
 80073a6:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <scaraInitDuty+0xbd4>
						return status1;
 80073ae:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 80073b2:	e127      	b.n	8007604 <scaraInitDuty+0xe24>
				for ( uint8_t i = 0; i < 4; i++) {
 80073b4:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 80073b8:	3301      	adds	r3, #1
 80073ba:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
 80073be:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d9a9      	bls.n	800731a <scaraInitDuty+0xb3a>
					}
				}
				myDUTY.time_total = command.time_total;
 80073c6:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 80073ca:	4903      	ldr	r1, [pc, #12]	; (80073d8 <scaraInitDuty+0xbf8>)
 80073cc:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80073d0:	e9c1 2300 	strd	r2, r3, [r1]
 80073d4:	e0e8      	b.n	80075a8 <scaraInitDuty+0xdc8>
 80073d6:	bf00      	nop
 80073d8:	2000ff40 	.word	0x2000ff40
 80073dc:	20004088 	.word	0x20004088
			// Mode Init Acc
			} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80073e0:	f897 3191 	ldrb.w	r3, [r7, #401]	; 0x191
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f040 80d9 	bne.w	800759c <scaraInitDuty+0xdbc>
				for ( uint8_t i = 0; i < 4; i++) {
 80073ea:	2300      	movs	r3, #0
 80073ec:	f887 3149 	strb.w	r3, [r7, #329]	; 0x149
 80073f0:	e03c      	b.n	800746c <scaraInitDuty+0xc8c>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80073f2:	f897 2149 	ldrb.w	r2, [r7, #329]	; 0x149
 80073f6:	4988      	ldr	r1, [pc, #544]	; (8007618 <scaraInitDuty+0xe38>)
 80073f8:	4613      	mov	r3, r2
 80073fa:	005b      	lsls	r3, r3, #1
 80073fc:	4413      	add	r3, r2
 80073fe:	01db      	lsls	r3, r3, #7
 8007400:	440b      	add	r3, r1
 8007402:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007406:	2201      	movs	r2, #1
 8007408:	701a      	strb	r2, [r3, #0]
					status1 = scaraInitScurve1(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 800740a:	f897 2149 	ldrb.w	r2, [r7, #329]	; 0x149
 800740e:	4613      	mov	r3, r2
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	4413      	add	r3, r2
 8007414:	01db      	lsls	r3, r3, #7
 8007416:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800741a:	4a7f      	ldr	r2, [pc, #508]	; (8007618 <scaraInitDuty+0xe38>)
 800741c:	1898      	adds	r0, r3, r2
 800741e:	f897 3149 	ldrb.w	r3, [r7, #329]	; 0x149
 8007422:	4a7e      	ldr	r2, [pc, #504]	; (800761c <scaraInitDuty+0xe3c>)
 8007424:	5cd1      	ldrb	r1, [r2, r3]
 8007426:	f897 3149 	ldrb.w	r3, [r7, #329]	; 0x149
 800742a:	f107 0208 	add.w	r2, r7, #8
 800742e:	00db      	lsls	r3, r3, #3
 8007430:	4413      	add	r3, r2
 8007432:	ed93 7b00 	vldr	d7, [r3]
 8007436:	ed97 6bb6 	vldr	d6, [r7, #728]	; 0x2d8
 800743a:	ed97 5bb8 	vldr	d5, [r7, #736]	; 0x2e0
 800743e:	eeb0 2a45 	vmov.f32	s4, s10
 8007442:	eef0 2a65 	vmov.f32	s5, s11
 8007446:	eeb0 1a46 	vmov.f32	s2, s12
 800744a:	eef0 1a66 	vmov.f32	s3, s13
 800744e:	2200      	movs	r2, #0
 8007450:	eeb0 0a47 	vmov.f32	s0, s14
 8007454:	eef0 0a67 	vmov.f32	s1, s15
 8007458:	f000 fdfe 	bl	8008058 <scaraInitScurve1>
 800745c:	4603      	mov	r3, r0
 800745e:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
				for ( uint8_t i = 0; i < 4; i++) {
 8007462:	f897 3149 	ldrb.w	r3, [r7, #329]	; 0x149
 8007466:	3301      	adds	r3, #1
 8007468:	f887 3149 	strb.w	r3, [r7, #329]	; 0x149
 800746c:	f897 3149 	ldrb.w	r3, [r7, #329]	; 0x149
 8007470:	2b03      	cmp	r3, #3
 8007472:	d9be      	bls.n	80073f2 <scaraInitDuty+0xc12>
										q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				}
				myDUTY.time_total = 0;
 8007474:	4b68      	ldr	r3, [pc, #416]	; (8007618 <scaraInitDuty+0xe38>)
 8007476:	f603 2138 	addw	r1, r3, #2616	; 0xa38
 800747a:	f04f 0200 	mov.w	r2, #0
 800747e:	f04f 0300 	mov.w	r3, #0
 8007482:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 8007486:	2300      	movs	r3, #0
 8007488:	f887 3148 	strb.w	r3, [r7, #328]	; 0x148
 800748c:	e02b      	b.n	80074e6 <scaraInitDuty+0xd06>
					if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 800748e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007492:	4961      	ldr	r1, [pc, #388]	; (8007618 <scaraInitDuty+0xe38>)
 8007494:	4613      	mov	r3, r2
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	4413      	add	r3, r2
 800749a:	01db      	lsls	r3, r3, #7
 800749c:	440b      	add	r3, r1
 800749e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80074a6:	4b5c      	ldr	r3, [pc, #368]	; (8007618 <scaraInitDuty+0xe38>)
 80074a8:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	f7f9 fb32 	bl	8000b18 <__aeabi_dcmpgt>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d010      	beq.n	80074dc <scaraInitDuty+0xcfc>
						myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 80074ba:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80074be:	4956      	ldr	r1, [pc, #344]	; (8007618 <scaraInitDuty+0xe38>)
 80074c0:	4613      	mov	r3, r2
 80074c2:	005b      	lsls	r3, r3, #1
 80074c4:	4413      	add	r3, r2
 80074c6:	01db      	lsls	r3, r3, #7
 80074c8:	440b      	add	r3, r1
 80074ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d2:	4951      	ldr	r1, [pc, #324]	; (8007618 <scaraInitDuty+0xe38>)
 80074d4:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80074d8:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 80074dc:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 80074e0:	3301      	adds	r3, #1
 80074e2:	f887 3148 	strb.w	r3, [r7, #328]	; 0x148
 80074e6:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 80074ea:	2b03      	cmp	r3, #3
 80074ec:	d9cf      	bls.n	800748e <scaraInitDuty+0xcae>
					}
				}
				for ( uint8_t i = 0; i < 4; i++) {
 80074ee:	2300      	movs	r3, #0
 80074f0:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 80074f4:	e04d      	b.n	8007592 <scaraInitDuty+0xdb2>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80074f6:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 80074fa:	4947      	ldr	r1, [pc, #284]	; (8007618 <scaraInitDuty+0xe38>)
 80074fc:	4613      	mov	r3, r2
 80074fe:	005b      	lsls	r3, r3, #1
 8007500:	4413      	add	r3, r2
 8007502:	01db      	lsls	r3, r3, #7
 8007504:	440b      	add	r3, r1
 8007506:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800750a:	2201      	movs	r2, #1
 800750c:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 800750e:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 8007512:	4b41      	ldr	r3, [pc, #260]	; (8007618 <scaraInitDuty+0xe38>)
 8007514:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007518:	e9d3 0100 	ldrd	r0, r1, [r3]
 800751c:	4c3e      	ldr	r4, [pc, #248]	; (8007618 <scaraInitDuty+0xe38>)
 800751e:	4613      	mov	r3, r2
 8007520:	005b      	lsls	r3, r3, #1
 8007522:	4413      	add	r3, r2
 8007524:	01db      	lsls	r3, r3, #7
 8007526:	4423      	add	r3, r4
 8007528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800752c:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitScurve1(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8007530:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 8007534:	4613      	mov	r3, r2
 8007536:	005b      	lsls	r3, r3, #1
 8007538:	4413      	add	r3, r2
 800753a:	01db      	lsls	r3, r3, #7
 800753c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8007540:	4a35      	ldr	r2, [pc, #212]	; (8007618 <scaraInitDuty+0xe38>)
 8007542:	1898      	adds	r0, r3, r2
 8007544:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8007548:	4a34      	ldr	r2, [pc, #208]	; (800761c <scaraInitDuty+0xe3c>)
 800754a:	5cd1      	ldrb	r1, [r2, r3]
 800754c:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8007550:	f107 0208 	add.w	r2, r7, #8
 8007554:	00db      	lsls	r3, r3, #3
 8007556:	4413      	add	r3, r2
 8007558:	ed93 7b00 	vldr	d7, [r3]
 800755c:	ed97 6bb6 	vldr	d6, [r7, #728]	; 0x2d8
 8007560:	ed97 5bb8 	vldr	d5, [r7, #736]	; 0x2e0
 8007564:	eeb0 2a45 	vmov.f32	s4, s10
 8007568:	eef0 2a65 	vmov.f32	s5, s11
 800756c:	eeb0 1a46 	vmov.f32	s2, s12
 8007570:	eef0 1a66 	vmov.f32	s3, s13
 8007574:	2201      	movs	r2, #1
 8007576:	eeb0 0a47 	vmov.f32	s0, s14
 800757a:	eef0 0a67 	vmov.f32	s1, s15
 800757e:	f000 fd6b 	bl	8008058 <scaraInitScurve1>
 8007582:	4603      	mov	r3, r0
 8007584:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
				for ( uint8_t i = 0; i < 4; i++) {
 8007588:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800758c:	3301      	adds	r3, #1
 800758e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 8007592:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8007596:	2b03      	cmp	r3, #3
 8007598:	d9ad      	bls.n	80074f6 <scaraInitDuty+0xd16>
 800759a:	e005      	b.n	80075a8 <scaraInitDuty+0xdc8>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				}

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 800759c:	2308      	movs	r3, #8
 800759e:	e031      	b.n	8007604 <scaraInitDuty+0xe24>
			}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 80075a0:	2305      	movs	r3, #5
 80075a2:	e02f      	b.n	8007604 <scaraInitDuty+0xe24>
			}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 80075a4:	2302      	movs	r3, #2
 80075a6:	e02d      	b.n	8007604 <scaraInitDuty+0xe24>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 80075a8:	491d      	ldr	r1, [pc, #116]	; (8007620 <scaraInitDuty+0xe40>)
 80075aa:	f04f 0200 	mov.w	r2, #0
 80075ae:	f04f 0300 	mov.w	r3, #0
 80075b2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	positionCurrent.total_time = myDUTY.time_total;
 80075b6:	4b18      	ldr	r3, [pc, #96]	; (8007618 <scaraInitDuty+0xe38>)
 80075b8:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80075bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c0:	4917      	ldr	r1, [pc, #92]	; (8007620 <scaraInitDuty+0xe40>)
 80075c2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	positionNext.t = 0;
 80075c6:	4917      	ldr	r1, [pc, #92]	; (8007624 <scaraInitDuty+0xe44>)
 80075c8:	f04f 0200 	mov.w	r2, #0
 80075cc:	f04f 0300 	mov.w	r3, #0
 80075d0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	positionNext.total_time = myDUTY.time_total;
 80075d4:	4b10      	ldr	r3, [pc, #64]	; (8007618 <scaraInitDuty+0xe38>)
 80075d6:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80075da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075de:	4911      	ldr	r1, [pc, #68]	; (8007624 <scaraInitDuty+0xe44>)
 80075e0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	positionTrue.t = 0;
 80075e4:	4910      	ldr	r1, [pc, #64]	; (8007628 <scaraInitDuty+0xe48>)
 80075e6:	f04f 0200 	mov.w	r2, #0
 80075ea:	f04f 0300 	mov.w	r3, #0
 80075ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
	positionTrue.total_time = myDUTY.time_total;
 80075f2:	4b09      	ldr	r3, [pc, #36]	; (8007618 <scaraInitDuty+0xe38>)
 80075f4:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	490a      	ldr	r1, [pc, #40]	; (8007628 <scaraInitDuty+0xe48>)
 80075fe:	e9c1 2306 	strd	r2, r3, [r1, #24]

	return SCARA_STATUS_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 800760a:	46bd      	mov	sp, r7
 800760c:	ecbd 8b02 	vpop	{d8}
 8007610:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007614:	b004      	add	sp, #16
 8007616:	4770      	bx	lr
 8007618:	2000ff40 	.word	0x2000ff40
 800761c:	20004088 	.word	0x20004088
 8007620:	20010ab0 	.word	0x20010ab0
 8007624:	20010be0 	.word	0x20010be0
 8007628:	20010b48 	.word	0x20010b48

0800762c <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 800762c:	b082      	sub	sp, #8
 800762e:	b5b0      	push	{r4, r5, r7, lr}
 8007630:	b0a6      	sub	sp, #152	; 0x98
 8007632:	af24      	add	r7, sp, #144	; 0x90
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	f107 0118 	add.w	r1, r7, #24
 800763a:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 800763e:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8007642:	4668      	mov	r0, sp
 8007644:	f107 0320 	add.w	r3, r7, #32
 8007648:	2290      	movs	r2, #144	; 0x90
 800764a:	4619      	mov	r1, r3
 800764c:	f00d fdd0 	bl	80151f0 <memcpy>
 8007650:	f107 0318 	add.w	r3, r7, #24
 8007654:	cb0c      	ldmia	r3, {r2, r3}
 8007656:	4620      	mov	r0, r4
 8007658:	f7fd fd82 	bl	8005160 <kinematicInverse>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007662:	2307      	movs	r3, #7
 8007664:	e08e      	b.n	8007784 <scaraInitLine+0x158>
	}
	// Init line params
	line->x1 = end.x;
 8007666:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800766a:	6879      	ldr	r1, [r7, #4]
 800766c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	line->y1 = end.y;
 8007670:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007674:	6879      	ldr	r1, [r7, #4]
 8007676:	e9c1 2306 	strd	r2, r3, [r1, #24]
	line->z1 = end.z;
 800767a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800767e:	6879      	ldr	r1, [r7, #4]
 8007680:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	line->x0 = start.x;
 8007684:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007688:	6879      	ldr	r1, [r7, #4]
 800768a:	e9c1 2300 	strd	r2, r3, [r1]
	line->y0 = start.y;
 800768e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007692:	6879      	ldr	r1, [r7, #4]
 8007694:	e9c1 2304 	strd	r2, r3, [r1, #16]
	line->z0 = start.z;
 8007698:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800769c:	6879      	ldr	r1, [r7, #4]
 800769e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	line->denta_x = end.x  -  start.x;
 80076a2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80076a6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80076aa:	f7f8 fded 	bl	8000288 <__aeabi_dsub>
 80076ae:	4602      	mov	r2, r0
 80076b0:	460b      	mov	r3, r1
 80076b2:	6879      	ldr	r1, [r7, #4]
 80076b4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 80076b8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80076bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80076c0:	f7f8 fde2 	bl	8000288 <__aeabi_dsub>
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	6879      	ldr	r1, [r7, #4]
 80076ca:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 80076ce:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80076d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80076d6:	f7f8 fdd7 	bl	8000288 <__aeabi_dsub>
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	6879      	ldr	r1, [r7, #4]
 80076e0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80076f0:	f7f8 ff82 	bl	80005f8 <__aeabi_dmul>
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	4614      	mov	r4, r2
 80076fa:	461d      	mov	r5, r3
			       +(line->denta_y)*(line->denta_y)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007708:	f7f8 ff76 	bl	80005f8 <__aeabi_dmul>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	4620      	mov	r0, r4
 8007712:	4629      	mov	r1, r5
 8007714:	f7f8 fdba 	bl	800028c <__adddf3>
 8007718:	4602      	mov	r2, r0
 800771a:	460b      	mov	r3, r1
 800771c:	4614      	mov	r4, r2
 800771e:	461d      	mov	r5, r3
				   +(line->denta_z)*(line->denta_z));
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800772c:	f7f8 ff64 	bl	80005f8 <__aeabi_dmul>
 8007730:	4602      	mov	r2, r0
 8007732:	460b      	mov	r3, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8007734:	4620      	mov	r0, r4
 8007736:	4629      	mov	r1, r5
 8007738:	f7f8 fda8 	bl	800028c <__adddf3>
 800773c:	4602      	mov	r2, r0
 800773e:	460b      	mov	r3, r1
 8007740:	ec43 2b17 	vmov	d7, r2, r3
 8007744:	eeb0 0a47 	vmov.f32	s0, s14
 8007748:	eef0 0a67 	vmov.f32	s1, s15
 800774c:	f012 fb60 	bl	8019e10 <sqrt>
 8007750:	eeb0 7a40 	vmov.f32	s14, s0
 8007754:	eef0 7a60 	vmov.f32	s15, s1
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007764:	6879      	ldr	r1, [r7, #4]
 8007766:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	line->y_current = line->y0;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007770:	6879      	ldr	r1, [r7, #4]
 8007772:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	line->z_current = line->z0;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800777c:	6879      	ldr	r1, [r7, #4]
 800777e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	return SCARA_STATUS_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800778e:	b002      	add	sp, #8
 8007790:	4770      	bx	lr
 8007792:	0000      	movs	r0, r0
 8007794:	0000      	movs	r0, r0
	...

08007798 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8007798:	b082      	sub	sp, #8
 800779a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779e:	b0bb      	sub	sp, #236	; 0xec
 80077a0:	af24      	add	r7, sp, #144	; 0x90
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80077a8:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 80077ac:	f507 768c 	add.w	r6, r7, #280	; 0x118
 80077b0:	4668      	mov	r0, sp
 80077b2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80077b6:	2290      	movs	r2, #144	; 0x90
 80077b8:	4619      	mov	r1, r3
 80077ba:	f00d fd19 	bl	80151f0 <memcpy>
 80077be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80077c2:	cb0c      	ldmia	r3, {r2, r3}
 80077c4:	4630      	mov	r0, r6
 80077c6:	f7fd fccb 	bl	8005160 <kinematicInverse>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80077d0:	2307      	movs	r3, #7
 80077d2:	e165      	b.n	8007aa0 <scaraInitCircle+0x308>
	}

//	if( 1 != dir && -1 != dir) {
//		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
//	}
	if(dir != 1 && dir != -1){
 80077d4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d006      	beq.n	80077ea <scaraInitCircle+0x52>
 80077dc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80077e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e4:	d001      	beq.n	80077ea <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;
 80077e6:	2306      	movs	r3, #6
 80077e8:	e15a      	b.n	8007aa0 <scaraInitCircle+0x308>
	}

	double x_start, y_start, x_stop, y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	x_start = start.x - center.x;
 80077ea:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80077ee:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 80077f2:	f7f8 fd49 	bl	8000288 <__aeabi_dsub>
 80077f6:	4602      	mov	r2, r0
 80077f8:	460b      	mov	r3, r1
 80077fa:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	y_start = start.y - center.y;
 80077fe:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007802:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 8007806:	f7f8 fd3f 	bl	8000288 <__aeabi_dsub>
 800780a:	4602      	mov	r2, r0
 800780c:	460b      	mov	r3, r1
 800780e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	x_stop  = end.x  - center.x;
 8007812:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8007816:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800781a:	f7f8 fd35 	bl	8000288 <__aeabi_dsub>
 800781e:	4602      	mov	r2, r0
 8007820:	460b      	mov	r3, r1
 8007822:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	y_stop  = end.y  - center.y;
 8007826:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800782a:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 800782e:	f7f8 fd2b 	bl	8000288 <__aeabi_dsub>
 8007832:	4602      	mov	r2, r0
 8007834:	460b      	mov	r3, r1
 8007836:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	r1 = sqrt(x_start*x_start + y_start*y_start);
 800783a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800783e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007842:	f7f8 fed9 	bl	80005f8 <__aeabi_dmul>
 8007846:	4602      	mov	r2, r0
 8007848:	460b      	mov	r3, r1
 800784a:	4692      	mov	sl, r2
 800784c:	469b      	mov	fp, r3
 800784e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007852:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007856:	f7f8 fecf 	bl	80005f8 <__aeabi_dmul>
 800785a:	4602      	mov	r2, r0
 800785c:	460b      	mov	r3, r1
 800785e:	4650      	mov	r0, sl
 8007860:	4659      	mov	r1, fp
 8007862:	f7f8 fd13 	bl	800028c <__adddf3>
 8007866:	4602      	mov	r2, r0
 8007868:	460b      	mov	r3, r1
 800786a:	ec43 2b17 	vmov	d7, r2, r3
 800786e:	eeb0 0a47 	vmov.f32	s0, s14
 8007872:	eef0 0a67 	vmov.f32	s1, s15
 8007876:	f012 facb 	bl	8019e10 <sqrt>
 800787a:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	r2 = sqrt(x_stop*x_stop + y_stop*y_stop);
 800787e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007882:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007886:	f7f8 feb7 	bl	80005f8 <__aeabi_dmul>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	4692      	mov	sl, r2
 8007890:	469b      	mov	fp, r3
 8007892:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007896:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800789a:	f7f8 fead 	bl	80005f8 <__aeabi_dmul>
 800789e:	4602      	mov	r2, r0
 80078a0:	460b      	mov	r3, r1
 80078a2:	4650      	mov	r0, sl
 80078a4:	4659      	mov	r1, fp
 80078a6:	f7f8 fcf1 	bl	800028c <__adddf3>
 80078aa:	4602      	mov	r2, r0
 80078ac:	460b      	mov	r3, r1
 80078ae:	ec43 2b17 	vmov	d7, r2, r3
 80078b2:	eeb0 0a47 	vmov.f32	s0, s14
 80078b6:	eef0 0a67 	vmov.f32	s1, s15
 80078ba:	f012 faa9 	bl	8019e10 <sqrt>
 80078be:	ed87 0b08 	vstr	d0, [r7, #32]

	if( 1.0 < fabs(r1 - r2)) {
 80078c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80078ca:	f7f8 fcdd 	bl	8000288 <__aeabi_dsub>
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	4690      	mov	r8, r2
 80078d4:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80078d8:	f04f 0200 	mov.w	r2, #0
 80078dc:	4b76      	ldr	r3, [pc, #472]	; (8007ab8 <scaraInitCircle+0x320>)
 80078de:	4640      	mov	r0, r8
 80078e0:	4649      	mov	r1, r9
 80078e2:	f7f9 f919 	bl	8000b18 <__aeabi_dcmpgt>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d001      	beq.n	80078f0 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 80078ec:	2306      	movs	r3, #6
 80078ee:	e0d7      	b.n	8007aa0 <scaraInitCircle+0x308>

//	if (r1 < 0.1 || r2 < 0.1) {
//		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
//	}

	angle_start = atan2(y_start, x_start);
 80078f0:	ed97 1b12 	vldr	d1, [r7, #72]	; 0x48
 80078f4:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80078f8:	f012 fa88 	bl	8019e0c <atan2>
 80078fc:	ed87 0b06 	vstr	d0, [r7, #24]
	angle_stop  = atan2(y_stop, x_stop);
 8007900:	ed97 1b0e 	vldr	d1, [r7, #56]	; 0x38
 8007904:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8007908:	f012 fa80 	bl	8019e0c <atan2>
 800790c:	ed87 0b04 	vstr	d0, [r7, #16]
	delta_angle = angle_stop - angle_start;
 8007910:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007914:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007918:	f7f8 fcb6 	bl	8000288 <__aeabi_dsub>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	if (delta_angle < 0 && dir > 0) {
 8007924:	f04f 0200 	mov.w	r2, #0
 8007928:	f04f 0300 	mov.w	r3, #0
 800792c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007930:	f7f9 f8d4 	bl	8000adc <__aeabi_dcmplt>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d015      	beq.n	8007966 <scaraInitCircle+0x1ce>
 800793a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800793e:	2b00      	cmp	r3, #0
 8007940:	dd11      	ble.n	8007966 <scaraInitCircle+0x1ce>
		delta_angle = 2*PI - fabs(delta_angle); //this state mean that the arc radius is over 180
 8007942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007944:	603b      	str	r3, [r7, #0]
 8007946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007948:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800794c:	607b      	str	r3, [r7, #4]
 800794e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007952:	a157      	add	r1, pc, #348	; (adr r1, 8007ab0 <scaraInitCircle+0x318>)
 8007954:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007958:	f7f8 fc96 	bl	8000288 <__aeabi_dsub>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8007964:	e01d      	b.n	80079a2 <scaraInitCircle+0x20a>
	}else if(delta_angle > 0 && dir < 0){
 8007966:	f04f 0200 	mov.w	r2, #0
 800796a:	f04f 0300 	mov.w	r3, #0
 800796e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007972:	f7f9 f8d1 	bl	8000b18 <__aeabi_dcmpgt>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d012      	beq.n	80079a2 <scaraInitCircle+0x20a>
 800797c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007980:	2b00      	cmp	r3, #0
 8007982:	da0e      	bge.n	80079a2 <scaraInitCircle+0x20a>
		delta_angle = 2*PI - fabs(delta_angle);
 8007984:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8007986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007988:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800798c:	4622      	mov	r2, r4
 800798e:	462b      	mov	r3, r5
 8007990:	a147      	add	r1, pc, #284	; (adr r1, 8007ab0 <scaraInitCircle+0x318>)
 8007992:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007996:	f7f8 fc77 	bl	8000288 <__aeabi_dsub>
 800799a:	4602      	mov	r2, r0
 800799c:	460b      	mov	r3, r1
 800799e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	}
	if(delta_angle*dir < 0){
 80079a2:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 80079a6:	f7f8 fdbd 	bl	8000524 <__aeabi_i2d>
 80079aa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80079ae:	f7f8 fe23 	bl	80005f8 <__aeabi_dmul>
 80079b2:	4602      	mov	r2, r0
 80079b4:	460b      	mov	r3, r1
 80079b6:	4610      	mov	r0, r2
 80079b8:	4619      	mov	r1, r3
 80079ba:	f04f 0200 	mov.w	r2, #0
 80079be:	f04f 0300 	mov.w	r3, #0
 80079c2:	f7f9 f88b 	bl	8000adc <__aeabi_dcmplt>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d005      	beq.n	80079d8 <scaraInitCircle+0x240>
		delta_angle = fabs(delta_angle);
 80079cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ce:	653b      	str	r3, [r7, #80]	; 0x50
 80079d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079d6:	657b      	str	r3, [r7, #84]	; 0x54

//	if ( 0 > dir) {
//		delta_angle = 2*PI - delta_angle;
//	}
	// Init circle params
	circle->dir = dir;
 80079d8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80079dc:	b25a      	sxtb	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 80079e2:	68f9      	ldr	r1, [r7, #12]
 80079e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80079e8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	circle->angle_start = angle_start;
 80079ec:	68f9      	ldr	r1, [r7, #12]
 80079ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079f2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	circle->angle_stop  = angle_stop;
 80079f6:	68f9      	ldr	r1, [r7, #12]
 80079f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80079fc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	circle->total_angle = delta_angle;
 8007a00:	68f9      	ldr	r1, [r7, #12]
 8007a02:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007a06:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 8007a0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a0e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007a12:	f7f8 fdf1 	bl	80005f8 <__aeabi_dmul>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	68f9      	ldr	r1, [r7, #12]
 8007a1c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	circle->x0 = start.x;
 8007a20:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007a24:	68f9      	ldr	r1, [r7, #12]
 8007a26:	e9c1 2308 	strd	r2, r3, [r1, #32]
	circle->y0 = start.y;
 8007a2a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007a2e:	68f9      	ldr	r1, [r7, #12]
 8007a30:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	circle->x1 = end.x;
 8007a34:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8007a38:	68f9      	ldr	r1, [r7, #12]
 8007a3a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	circle->y1 = end.y;
 8007a3e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8007a42:	68f9      	ldr	r1, [r7, #12]
 8007a44:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	circle->xi = center.x;
 8007a48:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8007a4c:	68f9      	ldr	r1, [r7, #12]
 8007a4e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	circle->yi = center.y;
 8007a52:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 8007a56:	68f9      	ldr	r1, [r7, #12]
 8007a58:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	circle->z0 = start.z;
 8007a5c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8007a60:	68f9      	ldr	r1, [r7, #12]
 8007a62:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	circle->z1 = start.z;
 8007a66:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8007a6a:	68f9      	ldr	r1, [r7, #12]
 8007a6c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	circle->zi = start.z;
 8007a70:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8007a74:	68f9      	ldr	r1, [r7, #12]
 8007a76:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	circle->x_current = circle->x0;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a80:	68f9      	ldr	r1, [r7, #12]
 8007a82:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	circle->y_current = circle->y0;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007a8c:	68f9      	ldr	r1, [r7, #12]
 8007a8e:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	circle->z_current = circle->z0;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007a98:	68f9      	ldr	r1, [r7, #12]
 8007a9a:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

	return SCARA_STATUS_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	375c      	adds	r7, #92	; 0x5c
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aaa:	b002      	add	sp, #8
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	60000000 	.word	0x60000000
 8007ab4:	401921fb 	.word	0x401921fb
 8007ab8:	3ff00000 	.word	0x3ff00000

08007abc <scaraInitLinear>:

SCARA_StatusTypeDef scaraInitLinear(Trajectory_Linear_TypeDef *linear, Trajectory_TargetTypeDef target, double total_s,
									ModeInitTypeDef modeinit, double additional_factor)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6178      	str	r0, [r7, #20]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	ed87 0b02 	vstr	d0, [r7, #8]
 8007aca:	ed87 1b00 	vstr	d1, [r7]
 8007ace:	74fb      	strb	r3, [r7, #19]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	74bb      	strb	r3, [r7, #18]

	if(target == TRAJECTORY_3D){
 8007ad4:	7cfb      	ldrb	r3, [r7, #19]
 8007ad6:	2b04      	cmp	r3, #4
 8007ad8:	d004      	beq.n	8007ae4 <scaraInitLinear+0x28>

	}else if(target == TRAJECTORY_ROLL){
 8007ada:	7cfb      	ldrb	r3, [r7, #19]
 8007adc:	2b05      	cmp	r3, #5
 8007ade:	d001      	beq.n	8007ae4 <scaraInitLinear+0x28>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007ae0:	2306      	movs	r3, #6
 8007ae2:	e032      	b.n	8007b4a <scaraInitLinear+0x8e>
	}

	if(modeinit == DUTY_MODE_INIT_QT){
 8007ae4:	7cbb      	ldrb	r3, [r7, #18]
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d110      	bne.n	8007b0c <scaraInitLinear+0x50>
		linear->constant_v = total_s / additional_factor;
 8007aea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007af2:	f7f8 feab 	bl	800084c <__aeabi_ddiv>
 8007af6:	4602      	mov	r2, r0
 8007af8:	460b      	mov	r3, r1
 8007afa:	6979      	ldr	r1, [r7, #20]
 8007afc:	e9c1 2302 	strd	r2, r3, [r1, #8]
		linear->Tf = additional_factor;
 8007b00:	6979      	ldr	r1, [r7, #20]
 8007b02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b06:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8007b0a:	e01d      	b.n	8007b48 <scaraInitLinear+0x8c>
		//linear->number_of_sample = ceilf(additional_factor / T_SAMPLING); // ceiling
	}else if(modeinit == DUTY_MODE_INIT_QV){
 8007b0c:	7cbb      	ldrb	r3, [r7, #18]
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d118      	bne.n	8007b44 <scaraInitLinear+0x88>
		linear->constant_v = additional_factor * V_MOVE_MAX;
 8007b12:	f04f 0200 	mov.w	r2, #0
 8007b16:	4b0f      	ldr	r3, [pc, #60]	; (8007b54 <scaraInitLinear+0x98>)
 8007b18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b1c:	f7f8 fd6c 	bl	80005f8 <__aeabi_dmul>
 8007b20:	4602      	mov	r2, r0
 8007b22:	460b      	mov	r3, r1
 8007b24:	6979      	ldr	r1, [r7, #20]
 8007b26:	e9c1 2302 	strd	r2, r3, [r1, #8]
		linear->Tf = total_s / linear->constant_v;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007b30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b34:	f7f8 fe8a 	bl	800084c <__aeabi_ddiv>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	6979      	ldr	r1, [r7, #20]
 8007b3e:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8007b42:	e001      	b.n	8007b48 <scaraInitLinear+0x8c>
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007b44:	2306      	movs	r3, #6
 8007b46:	e000      	b.n	8007b4a <scaraInitLinear+0x8e>
	}

	return SCARA_STATUS_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3718      	adds	r7, #24
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	40877000 	.word	0x40877000

08007b58 <scaraInitLSPB1>:
SCARA_StatusTypeDef	scaraInitLSPB1		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double additional_factor){
 8007b58:	b5b0      	push	{r4, r5, r7, lr}
 8007b5a:	b096      	sub	sp, #88	; 0x58
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	61f8      	str	r0, [r7, #28]
 8007b60:	460b      	mov	r3, r1
 8007b62:	ed87 0b04 	vstr	d0, [r7, #16]
 8007b66:	ed87 1b02 	vstr	d1, [r7, #8]
 8007b6a:	ed87 2b00 	vstr	d2, [r7]
 8007b6e:	76fb      	strb	r3, [r7, #27]
 8007b70:	4613      	mov	r3, r2
 8007b72:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	if(total_s < 0){
 8007b74:	f04f 0200 	mov.w	r2, #0
 8007b78:	f04f 0300 	mov.w	r3, #0
 8007b7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007b80:	f7f8 ffac 	bl	8000adc <__aeabi_dcmplt>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d009      	beq.n	8007b9e <scaraInitLSPB1+0x46>
		total_s = -total_s;
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	613b      	str	r3, [r7, #16]
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007b94:	617b      	str	r3, [r7, #20]
		lspb->dir= -1;
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	22ff      	movs	r2, #255	; 0xff
 8007b9a:	701a      	strb	r2, [r3, #0]
 8007b9c:	e002      	b.n	8007ba4 <scaraInitLSPB1+0x4c>
	}else{
		lspb->dir= 1;
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 8007ba4:	7efb      	ldrb	r3, [r7, #27]
 8007ba6:	2b04      	cmp	r3, #4
 8007ba8:	d12c      	bne.n	8007c04 <scaraInitLSPB1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007baa:	7ebb      	ldrb	r3, [r7, #26]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d10f      	bne.n	8007bd0 <scaraInitLSPB1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 8007bb0:	f04f 0200 	mov.w	r2, #0
 8007bb4:	4b98      	ldr	r3, [pc, #608]	; (8007e18 <scaraInitLSPB1+0x2c0>)
 8007bb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bba:	f7f8 fd1d 	bl	80005f8 <__aeabi_dmul>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8007bc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007bce:	e073      	b.n	8007cb8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8007bd0:	7ebb      	ldrb	r3, [r7, #26]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d170      	bne.n	8007cb8 <scaraInitLSPB1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 8007bd6:	f04f 0200 	mov.w	r2, #0
 8007bda:	4b90      	ldr	r3, [pc, #576]	; (8007e1c <scaraInitLSPB1+0x2c4>)
 8007bdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007be0:	f7f8 fd0a 	bl	80005f8 <__aeabi_dmul>
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			v_design = V_MOVE_MAX*v_factor;
 8007bec:	f04f 0200 	mov.w	r2, #0
 8007bf0:	4b89      	ldr	r3, [pc, #548]	; (8007e18 <scaraInitLSPB1+0x2c0>)
 8007bf2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bf6:	f7f8 fcff 	bl	80005f8 <__aeabi_dmul>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8007c02:	e059      	b.n	8007cb8 <scaraInitLSPB1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 8007c04:	7efb      	ldrb	r3, [r7, #27]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d112      	bne.n	8007c30 <scaraInitLSPB1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007c0a:	7ebb      	ldrb	r3, [r7, #26]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d153      	bne.n	8007cb8 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 8007c10:	a373      	add	r3, pc, #460	; (adr r3, 8007de0 <scaraInitLSPB1+0x288>)
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c1a:	f7f8 fced 	bl	80005f8 <__aeabi_dmul>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8007c26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c2a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007c2e:	e043      	b.n	8007cb8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J1){
 8007c30:	7efb      	ldrb	r3, [r7, #27]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d112      	bne.n	8007c5c <scaraInitLSPB1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007c36:	7ebb      	ldrb	r3, [r7, #26]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d13d      	bne.n	8007cb8 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 8007c3c:	a368      	add	r3, pc, #416	; (adr r3, 8007de0 <scaraInitLSPB1+0x288>)
 8007c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c46:	f7f8 fcd7 	bl	80005f8 <__aeabi_dmul>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8007c52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c56:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007c5a:	e02d      	b.n	8007cb8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J2){
 8007c5c:	7efb      	ldrb	r3, [r7, #27]
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d112      	bne.n	8007c88 <scaraInitLSPB1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007c62:	7ebb      	ldrb	r3, [r7, #26]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d127      	bne.n	8007cb8 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 8007c68:	a35f      	add	r3, pc, #380	; (adr r3, 8007de8 <scaraInitLSPB1+0x290>)
 8007c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c72:	f7f8 fcc1 	bl	80005f8 <__aeabi_dmul>
 8007c76:	4602      	mov	r2, r0
 8007c78:	460b      	mov	r3, r1
 8007c7a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8007c7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c82:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007c86:	e017      	b.n	8007cb8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J3){
 8007c88:	7efb      	ldrb	r3, [r7, #27]
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	d112      	bne.n	8007cb4 <scaraInitLSPB1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007c8e:	7ebb      	ldrb	r3, [r7, #26]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d111      	bne.n	8007cb8 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 8007c94:	a356      	add	r3, pc, #344	; (adr r3, 8007df0 <scaraInitLSPB1+0x298>)
 8007c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c9e:	f7f8 fcab 	bl	80005f8 <__aeabi_dmul>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8007caa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007cb2:	e001      	b.n	8007cb8 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007cb4:	2306      	movs	r3, #6
 8007cb6:	e1c6      	b.n	8008046 <scaraInitLSPB1+0x4ee>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8007cb8:	7ebb      	ldrb	r3, [r7, #26]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	f040 80f2 	bne.w	8007ea4 <scaraInitLSPB1+0x34c>
		if(tf < 0.1 && v_design > 3){ //check if time valid or not
 8007cc0:	a34d      	add	r3, pc, #308	; (adr r3, 8007df8 <scaraInitLSPB1+0x2a0>)
 8007cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007cca:	f7f8 ff07 	bl	8000adc <__aeabi_dcmplt>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d01d      	beq.n	8007d10 <scaraInitLSPB1+0x1b8>
 8007cd4:	f04f 0200 	mov.w	r2, #0
 8007cd8:	4b51      	ldr	r3, [pc, #324]	; (8007e20 <scaraInitLSPB1+0x2c8>)
 8007cda:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007cde:	f7f8 ff1b 	bl	8000b18 <__aeabi_dcmpgt>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d013      	beq.n	8007d10 <scaraInitLSPB1+0x1b8>
			tf = 1.5*total_s/v_design;
 8007ce8:	f04f 0200 	mov.w	r2, #0
 8007cec:	4b4d      	ldr	r3, [pc, #308]	; (8007e24 <scaraInitLSPB1+0x2cc>)
 8007cee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007cf2:	f7f8 fc81 	bl	80005f8 <__aeabi_dmul>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007d02:	f7f8 fda3 	bl	800084c <__aeabi_ddiv>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007d0e:	e0a4      	b.n	8007e5a <scaraInitLSPB1+0x302>
			//return SCARA_STATUS_ERROR_OVER_VELOC;
		}else if(v_design < 0.1 && tf > 0.15){ //check if velocity valid or not
 8007d10:	a339      	add	r3, pc, #228	; (adr r3, 8007df8 <scaraInitLSPB1+0x2a0>)
 8007d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d16:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007d1a:	f7f8 fedf 	bl	8000adc <__aeabi_dcmplt>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d01d      	beq.n	8007d60 <scaraInitLSPB1+0x208>
 8007d24:	a336      	add	r3, pc, #216	; (adr r3, 8007e00 <scaraInitLSPB1+0x2a8>)
 8007d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007d2e:	f7f8 fef3 	bl	8000b18 <__aeabi_dcmpgt>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d013      	beq.n	8007d60 <scaraInitLSPB1+0x208>
			v_design = 1.5*total_s/tf;
 8007d38:	f04f 0200 	mov.w	r2, #0
 8007d3c:	4b39      	ldr	r3, [pc, #228]	; (8007e24 <scaraInitLSPB1+0x2cc>)
 8007d3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007d42:	f7f8 fc59 	bl	80005f8 <__aeabi_dmul>
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4610      	mov	r0, r2
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007d52:	f7f8 fd7b 	bl	800084c <__aeabi_ddiv>
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8007d5e:	e07c      	b.n	8007e5a <scaraInitLSPB1+0x302>
		}else if(v_design < 0.1 && tf < 0.1){
 8007d60:	a325      	add	r3, pc, #148	; (adr r3, 8007df8 <scaraInitLSPB1+0x2a0>)
 8007d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d66:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007d6a:	f7f8 feb7 	bl	8000adc <__aeabi_dcmplt>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00b      	beq.n	8007d8c <scaraInitLSPB1+0x234>
 8007d74:	a320      	add	r3, pc, #128	; (adr r3, 8007df8 <scaraInitLSPB1+0x2a0>)
 8007d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007d7e:	f7f8 fead 	bl	8000adc <__aeabi_dcmplt>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <scaraInitLSPB1+0x234>
			return SCARA_STATUS_ERROR_OVER_VELOC;
 8007d88:	2309      	movs	r3, #9
 8007d8a:	e15c      	b.n	8008046 <scaraInitLSPB1+0x4ee>
		}
		else{
			if(tf < 0.001){
 8007d8c:	a31e      	add	r3, pc, #120	; (adr r3, 8007e08 <scaraInitLSPB1+0x2b0>)
 8007d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d92:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007d96:	f7f8 fea1 	bl	8000adc <__aeabi_dcmplt>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d001      	beq.n	8007da4 <scaraInitLSPB1+0x24c>
				return SCARA_STATUS_ERROR_OVER_VELOC;
 8007da0:	2309      	movs	r3, #9
 8007da2:	e150      	b.n	8008046 <scaraInitLSPB1+0x4ee>
			}else{
				v_lim = total_s/tf;
 8007da4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007da8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007dac:	f7f8 fd4e 	bl	800084c <__aeabi_ddiv>
 8007db0:	4602      	mov	r2, r0
 8007db2:	460b      	mov	r3, r1
 8007db4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			if(v_design < 1.1*v_lim){ //the accelaration part is too large
 8007db8:	a315      	add	r3, pc, #84	; (adr r3, 8007e10 <scaraInitLSPB1+0x2b8>)
 8007dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007dc2:	f7f8 fc19 	bl	80005f8 <__aeabi_dmul>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	460b      	mov	r3, r1
 8007dca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007dce:	f7f8 fe85 	bl	8000adc <__aeabi_dcmplt>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d027      	beq.n	8007e28 <scaraInitLSPB1+0x2d0>
				return SCARA_STATUS_ERROR_OVER_ACCEL;
 8007dd8:	230a      	movs	r3, #10
 8007dda:	e134      	b.n	8008046 <scaraInitLSPB1+0x4ee>
 8007ddc:	f3af 8000 	nop.w
 8007de0:	14000000 	.word	0x14000000
 8007de4:	4000f6f0 	.word	0x4000f6f0
 8007de8:	00000000 	.word	0x00000000
 8007dec:	405c2000 	.word	0x405c2000
 8007df0:	6b259425 	.word	0x6b259425
 8007df4:	40069b91 	.word	0x40069b91
 8007df8:	9999999a 	.word	0x9999999a
 8007dfc:	3fb99999 	.word	0x3fb99999
 8007e00:	33333333 	.word	0x33333333
 8007e04:	3fc33333 	.word	0x3fc33333
 8007e08:	d2f1a9fc 	.word	0xd2f1a9fc
 8007e0c:	3f50624d 	.word	0x3f50624d
 8007e10:	9999999a 	.word	0x9999999a
 8007e14:	3ff19999 	.word	0x3ff19999
 8007e18:	40877000 	.word	0x40877000
 8007e1c:	407f4000 	.word	0x407f4000
 8007e20:	40080000 	.word	0x40080000
 8007e24:	3ff80000 	.word	0x3ff80000
			}else if(v_design > 2*v_lim){
 8007e28:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	460b      	mov	r3, r1
 8007e30:	f7f8 fa2c 	bl	800028c <__adddf3>
 8007e34:	4602      	mov	r2, r0
 8007e36:	460b      	mov	r3, r1
 8007e38:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007e3c:	f7f8 fe6c 	bl	8000b18 <__aeabi_dcmpgt>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d009      	beq.n	8007e5a <scaraInitLSPB1+0x302>
				v_design = 2*v_lim;
 8007e46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	f7f8 fa1d 	bl	800028c <__adddf3>
 8007e52:	4602      	mov	r2, r0
 8007e54:	460b      	mov	r3, r1
 8007e56:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			}else{

			}
		}
		ta = tf - total_s/v_design;
 8007e5a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007e5e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007e62:	f7f8 fcf3 	bl	800084c <__aeabi_ddiv>
 8007e66:	4602      	mov	r2, r0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007e6e:	f7f8 fa0b 	bl	8000288 <__aeabi_dsub>
 8007e72:	4602      	mov	r2, r0
 8007e74:	460b      	mov	r3, r1
 8007e76:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		a_design = v_design/ta;
 8007e7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e7e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007e82:	f7f8 fce3 	bl	800084c <__aeabi_ddiv>
 8007e86:	4602      	mov	r2, r0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		td = tf - ta;
 8007e8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e92:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007e96:	f7f8 f9f7 	bl	8000288 <__aeabi_dsub>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8007ea2:	e06e      	b.n	8007f82 <scaraInitLSPB1+0x42a>

	}else if(modeinit == DUTY_MODE_INIT_QVA){
 8007ea4:	7ebb      	ldrb	r3, [r7, #26]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d16b      	bne.n	8007f82 <scaraInitLSPB1+0x42a>
		//check qva condition
		if(total_s*a_design > v_design*v_design){ //condition for ta smaller than td
 8007eaa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007eae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007eb2:	f7f8 fba1 	bl	80005f8 <__aeabi_dmul>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	4614      	mov	r4, r2
 8007ebc:	461d      	mov	r5, r3
 8007ebe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007ec2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007ec6:	f7f8 fb97 	bl	80005f8 <__aeabi_dmul>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	460b      	mov	r3, r1
 8007ece:	4620      	mov	r0, r4
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	f7f8 fe21 	bl	8000b18 <__aeabi_dcmpgt>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d01e      	beq.n	8007f1a <scaraInitLSPB1+0x3c2>
//			}
//			if(v_design/a_design < 0.1){ //ta is too small
//				//recalculate a_design
//				a_design = v_design/0.1;
//			}
			ta = v_design/a_design;
 8007edc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ee0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007ee4:	f7f8 fcb2 	bl	800084c <__aeabi_ddiv>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	460b      	mov	r3, r1
 8007eec:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			td = total_s/v_design;
 8007ef0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007ef4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007ef8:	f7f8 fca8 	bl	800084c <__aeabi_ddiv>
 8007efc:	4602      	mov	r2, r0
 8007efe:	460b      	mov	r3, r1
 8007f00:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			tf = ta + td;
 8007f04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f08:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007f0c:	f7f8 f9be 	bl	800028c <__adddf3>
 8007f10:	4602      	mov	r2, r0
 8007f12:	460b      	mov	r3, r1
 8007f14:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007f18:	e033      	b.n	8007f82 <scaraInitLSPB1+0x42a>

		}else{
			tf = 2*total_s/v_design;
 8007f1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	f7f8 f9b3 	bl	800028c <__adddf3>
 8007f26:	4602      	mov	r2, r0
 8007f28:	460b      	mov	r3, r1
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f32:	f7f8 fc8b 	bl	800084c <__aeabi_ddiv>
 8007f36:	4602      	mov	r2, r0
 8007f38:	460b      	mov	r3, r1
 8007f3a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			ta = tf/2;
 8007f3e:	f04f 0200 	mov.w	r2, #0
 8007f42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f46:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007f4a:	f7f8 fc7f 	bl	800084c <__aeabi_ddiv>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	460b      	mov	r3, r1
 8007f52:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			td = tf/2;
 8007f56:	f04f 0200 	mov.w	r2, #0
 8007f5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f5e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007f62:	f7f8 fc73 	bl	800084c <__aeabi_ddiv>
 8007f66:	4602      	mov	r2, r0
 8007f68:	460b      	mov	r3, r1
 8007f6a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			a_design = v_design/ta;
 8007f6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f72:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007f76:	f7f8 fc69 	bl	800084c <__aeabi_ddiv>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		}
	}
	no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8007f82:	a333      	add	r3, pc, #204	; (adr r3, 8008050 <scaraInitLSPB1+0x4f8>)
 8007f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f88:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007f8c:	f7f8 fc5e 	bl	800084c <__aeabi_ddiv>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	4610      	mov	r0, r2
 8007f96:	4619      	mov	r1, r3
 8007f98:	f7f8 fe26 	bl	8000be8 <__aeabi_d2f>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	ee00 3a10 	vmov	s0, r3
 8007fa2:	f011 fef1 	bl	8019d88 <ceilf>
 8007fa6:	eef0 7a40 	vmov.f32	s15, s0
 8007faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fae:	ee17 3a90 	vmov	r3, s15
 8007fb2:	627b      	str	r3, [r7, #36]	; 0x24
	 // Init lspb params

	 lspb->s0 = 0;
 8007fb4:	69f9      	ldr	r1, [r7, #28]
 8007fb6:	f04f 0200 	mov.w	r2, #0
 8007fba:	f04f 0300 	mov.w	r3, #0
 8007fbe:	e9c1 2302 	strd	r2, r3, [r1, #8]
	 lspb->s1 = total_s;
 8007fc2:	69f9      	ldr	r1, [r7, #28]
 8007fc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007fc8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	 lspb->Ta = ta;
 8007fcc:	69f9      	ldr	r1, [r7, #28]
 8007fce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007fd2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 lspb->Td = td;
 8007fd6:	69f9      	ldr	r1, [r7, #28]
 8007fd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007fdc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 lspb->Tf = tf;
 8007fe0:	69f9      	ldr	r1, [r7, #28]
 8007fe2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007fe6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	 lspb->a_design = a_design;
 8007fea:	69f9      	ldr	r1, [r7, #28]
 8007fec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ff0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 lspb->v_design = v_design;
 8007ff4:	69f9      	ldr	r1, [r7, #28]
 8007ff6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007ffa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 lspb->v_lim = v_design;
 8007ffe:	69f9      	ldr	r1, [r7, #28]
 8008000:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008004:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 lspb->v0 = 0;
 8008008:	69f9      	ldr	r1, [r7, #28]
 800800a:	f04f 0200 	mov.w	r2, #0
 800800e:	f04f 0300 	mov.w	r3, #0
 8008012:	e9c1 2306 	strd	r2, r3, [r1, #24]
	 lspb->v1 = 0;
 8008016:	69f9      	ldr	r1, [r7, #28]
 8008018:	f04f 0200 	mov.w	r2, #0
 800801c:	f04f 0300 	mov.w	r3, #0
 8008020:	e9c1 2308 	strd	r2, r3, [r1, #32]
	 lspb->num_of_sampling = no_sample;
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008028:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008036:	f7f8 f927 	bl	8000288 <__aeabi_dsub>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	69f9      	ldr	r1, [r7, #28]
 8008040:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3758      	adds	r7, #88	; 0x58
 800804a:	46bd      	mov	sp, r7
 800804c:	bdb0      	pop	{r4, r5, r7, pc}
 800804e:	bf00      	nop
 8008050:	40000000 	.word	0x40000000
 8008054:	3f847ae1 	.word	0x3f847ae1

08008058 <scaraInitScurve1>:
												Trajectory_TargetTypeDef target,
												double total_s,
												ModeInitTypeDef modeinit,
												double v_factor,
												double additional_factor)
{
 8008058:	b5b0      	push	{r4, r5, r7, lr}
 800805a:	b094      	sub	sp, #80	; 0x50
 800805c:	af00      	add	r7, sp, #0
 800805e:	61f8      	str	r0, [r7, #28]
 8008060:	460b      	mov	r3, r1
 8008062:	ed87 0b04 	vstr	d0, [r7, #16]
 8008066:	ed87 1b02 	vstr	d1, [r7, #8]
 800806a:	ed87 2b00 	vstr	d2, [r7]
 800806e:	76fb      	strb	r3, [r7, #27]
 8008070:	4613      	mov	r3, r2
 8008072:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	if(total_s < 0){
 8008074:	f04f 0200 	mov.w	r2, #0
 8008078:	f04f 0300 	mov.w	r3, #0
 800807c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008080:	f7f8 fd2c 	bl	8000adc <__aeabi_dcmplt>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d009      	beq.n	800809e <scaraInitScurve1+0x46>
		total_s = -total_s;
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	613b      	str	r3, [r7, #16]
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008094:	617b      	str	r3, [r7, #20]
		scurve->dir= -1;
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	22ff      	movs	r2, #255	; 0xff
 800809a:	701a      	strb	r2, [r3, #0]
 800809c:	e002      	b.n	80080a4 <scaraInitScurve1+0x4c>
	}else{
		scurve->dir= 1;
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	2201      	movs	r2, #1
 80080a2:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 80080a4:	7efb      	ldrb	r3, [r7, #27]
 80080a6:	2b04      	cmp	r3, #4
 80080a8:	d12c      	bne.n	8008104 <scaraInitScurve1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80080aa:	7ebb      	ldrb	r3, [r7, #26]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d10f      	bne.n	80080d0 <scaraInitScurve1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 80080b0:	f04f 0200 	mov.w	r2, #0
 80080b4:	4b90      	ldr	r3, [pc, #576]	; (80082f8 <scaraInitScurve1+0x2a0>)
 80080b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080ba:	f7f8 fa9d 	bl	80005f8 <__aeabi_dmul>
 80080be:	4602      	mov	r2, r0
 80080c0:	460b      	mov	r3, r1
 80080c2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 80080c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080ca:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80080ce:	e073      	b.n	80081b8 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 80080d0:	7ebb      	ldrb	r3, [r7, #26]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d170      	bne.n	80081b8 <scaraInitScurve1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 80080d6:	f04f 0200 	mov.w	r2, #0
 80080da:	4b88      	ldr	r3, [pc, #544]	; (80082fc <scaraInitScurve1+0x2a4>)
 80080dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080e0:	f7f8 fa8a 	bl	80005f8 <__aeabi_dmul>
 80080e4:	4602      	mov	r2, r0
 80080e6:	460b      	mov	r3, r1
 80080e8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			v_design = V_MOVE_MAX*v_factor;
 80080ec:	f04f 0200 	mov.w	r2, #0
 80080f0:	4b81      	ldr	r3, [pc, #516]	; (80082f8 <scaraInitScurve1+0x2a0>)
 80080f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080f6:	f7f8 fa7f 	bl	80005f8 <__aeabi_dmul>
 80080fa:	4602      	mov	r2, r0
 80080fc:	460b      	mov	r3, r1
 80080fe:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8008102:	e059      	b.n	80081b8 <scaraInitScurve1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 8008104:	7efb      	ldrb	r3, [r7, #27]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d112      	bne.n	8008130 <scaraInitScurve1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800810a:	7ebb      	ldrb	r3, [r7, #26]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d153      	bne.n	80081b8 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 8008110:	a36d      	add	r3, pc, #436	; (adr r3, 80082c8 <scaraInitScurve1+0x270>)
 8008112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008116:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800811a:	f7f8 fa6d 	bl	80005f8 <__aeabi_dmul>
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 8008126:	e9d7 2300 	ldrd	r2, r3, [r7]
 800812a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800812e:	e043      	b.n	80081b8 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J1){
 8008130:	7efb      	ldrb	r3, [r7, #27]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d112      	bne.n	800815c <scaraInitScurve1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8008136:	7ebb      	ldrb	r3, [r7, #26]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d13d      	bne.n	80081b8 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 800813c:	a362      	add	r3, pc, #392	; (adr r3, 80082c8 <scaraInitScurve1+0x270>)
 800813e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008142:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008146:	f7f8 fa57 	bl	80005f8 <__aeabi_dmul>
 800814a:	4602      	mov	r2, r0
 800814c:	460b      	mov	r3, r1
 800814e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 8008152:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008156:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800815a:	e02d      	b.n	80081b8 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J2){
 800815c:	7efb      	ldrb	r3, [r7, #27]
 800815e:	2b02      	cmp	r3, #2
 8008160:	d112      	bne.n	8008188 <scaraInitScurve1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8008162:	7ebb      	ldrb	r3, [r7, #26]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d127      	bne.n	80081b8 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 8008168:	a359      	add	r3, pc, #356	; (adr r3, 80082d0 <scaraInitScurve1+0x278>)
 800816a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008172:	f7f8 fa41 	bl	80005f8 <__aeabi_dmul>
 8008176:	4602      	mov	r2, r0
 8008178:	460b      	mov	r3, r1
 800817a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 800817e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008182:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008186:	e017      	b.n	80081b8 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J3){
 8008188:	7efb      	ldrb	r3, [r7, #27]
 800818a:	2b03      	cmp	r3, #3
 800818c:	d112      	bne.n	80081b4 <scaraInitScurve1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800818e:	7ebb      	ldrb	r3, [r7, #26]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d111      	bne.n	80081b8 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 8008194:	a350      	add	r3, pc, #320	; (adr r3, 80082d8 <scaraInitScurve1+0x280>)
 8008196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800819e:	f7f8 fa2b 	bl	80005f8 <__aeabi_dmul>
 80081a2:	4602      	mov	r2, r0
 80081a4:	460b      	mov	r3, r1
 80081a6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 80081aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80081b2:	e001      	b.n	80081b8 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 80081b4:	2306      	movs	r3, #6
 80081b6:	e212      	b.n	80085de <scaraInitScurve1+0x586>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 80081b8:	7ebb      	ldrb	r3, [r7, #26]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	f040 80fc 	bne.w	80083b8 <scaraInitScurve1+0x360>
		if(tf < 0.1 && v_design > 7.5){ //check if time valid or not
 80081c0:	a347      	add	r3, pc, #284	; (adr r3, 80082e0 <scaraInitScurve1+0x288>)
 80081c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80081ca:	f7f8 fc87 	bl	8000adc <__aeabi_dcmplt>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d01d      	beq.n	8008210 <scaraInitScurve1+0x1b8>
 80081d4:	f04f 0200 	mov.w	r2, #0
 80081d8:	4b49      	ldr	r3, [pc, #292]	; (8008300 <scaraInitScurve1+0x2a8>)
 80081da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80081de:	f7f8 fc9b 	bl	8000b18 <__aeabi_dcmpgt>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d013      	beq.n	8008210 <scaraInitScurve1+0x1b8>
			tf = 1.5*total_s/v_design;
 80081e8:	f04f 0200 	mov.w	r2, #0
 80081ec:	4b45      	ldr	r3, [pc, #276]	; (8008304 <scaraInitScurve1+0x2ac>)
 80081ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80081f2:	f7f8 fa01 	bl	80005f8 <__aeabi_dmul>
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	4610      	mov	r0, r2
 80081fc:	4619      	mov	r1, r3
 80081fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008202:	f7f8 fb23 	bl	800084c <__aeabi_ddiv>
 8008206:	4602      	mov	r2, r0
 8008208:	460b      	mov	r3, r1
 800820a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800820e:	e094      	b.n	800833a <scaraInitScurve1+0x2e2>
		}else if(v_design < 0.1 && tf > 0.15){ //check if velocity valid or not
 8008210:	a333      	add	r3, pc, #204	; (adr r3, 80082e0 <scaraInitScurve1+0x288>)
 8008212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008216:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800821a:	f7f8 fc5f 	bl	8000adc <__aeabi_dcmplt>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d01d      	beq.n	8008260 <scaraInitScurve1+0x208>
 8008224:	a330      	add	r3, pc, #192	; (adr r3, 80082e8 <scaraInitScurve1+0x290>)
 8008226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800822e:	f7f8 fc73 	bl	8000b18 <__aeabi_dcmpgt>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d013      	beq.n	8008260 <scaraInitScurve1+0x208>
			v_design = 1.5*total_s/tf;
 8008238:	f04f 0200 	mov.w	r2, #0
 800823c:	4b31      	ldr	r3, [pc, #196]	; (8008304 <scaraInitScurve1+0x2ac>)
 800823e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008242:	f7f8 f9d9 	bl	80005f8 <__aeabi_dmul>
 8008246:	4602      	mov	r2, r0
 8008248:	460b      	mov	r3, r1
 800824a:	4610      	mov	r0, r2
 800824c:	4619      	mov	r1, r3
 800824e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008252:	f7f8 fafb 	bl	800084c <__aeabi_ddiv>
 8008256:	4602      	mov	r2, r0
 8008258:	460b      	mov	r3, r1
 800825a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800825e:	e06c      	b.n	800833a <scaraInitScurve1+0x2e2>
		}else if(tf < 0.1 && v_design < 0.1){
 8008260:	a31f      	add	r3, pc, #124	; (adr r3, 80082e0 <scaraInitScurve1+0x288>)
 8008262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008266:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800826a:	f7f8 fc37 	bl	8000adc <__aeabi_dcmplt>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00b      	beq.n	800828c <scaraInitScurve1+0x234>
 8008274:	a31a      	add	r3, pc, #104	; (adr r3, 80082e0 <scaraInitScurve1+0x288>)
 8008276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800827e:	f7f8 fc2d 	bl	8000adc <__aeabi_dcmplt>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d001      	beq.n	800828c <scaraInitScurve1+0x234>
			return SCARA_STATUS_ERROR_OVER_VELOC;
 8008288:	2309      	movs	r3, #9
 800828a:	e1a8      	b.n	80085de <scaraInitScurve1+0x586>
		}else{
			v_lim = total_s/tf;
 800828c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008290:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008294:	f7f8 fada 	bl	800084c <__aeabi_ddiv>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			if(v_design < 1.1*v_lim){ // the accelaration part is too large
 80082a0:	a313      	add	r3, pc, #76	; (adr r3, 80082f0 <scaraInitScurve1+0x298>)
 80082a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80082aa:	f7f8 f9a5 	bl	80005f8 <__aeabi_dmul>
 80082ae:	4602      	mov	r2, r0
 80082b0:	460b      	mov	r3, r1
 80082b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80082b6:	f7f8 fc11 	bl	8000adc <__aeabi_dcmplt>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d023      	beq.n	8008308 <scaraInitScurve1+0x2b0>
				return SCARA_STATUS_ERROR_OVER_ACCEL;
 80082c0:	230a      	movs	r3, #10
 80082c2:	e18c      	b.n	80085de <scaraInitScurve1+0x586>
 80082c4:	f3af 8000 	nop.w
 80082c8:	14000000 	.word	0x14000000
 80082cc:	4000f6f0 	.word	0x4000f6f0
 80082d0:	00000000 	.word	0x00000000
 80082d4:	405c2000 	.word	0x405c2000
 80082d8:	6b259425 	.word	0x6b259425
 80082dc:	40069b91 	.word	0x40069b91
 80082e0:	9999999a 	.word	0x9999999a
 80082e4:	3fb99999 	.word	0x3fb99999
 80082e8:	33333333 	.word	0x33333333
 80082ec:	3fc33333 	.word	0x3fc33333
 80082f0:	9999999a 	.word	0x9999999a
 80082f4:	3ff19999 	.word	0x3ff19999
 80082f8:	40877000 	.word	0x40877000
 80082fc:	407f4000 	.word	0x407f4000
 8008300:	401e0000 	.word	0x401e0000
 8008304:	3ff80000 	.word	0x3ff80000
			}else if(v_design > 2*v_lim){
 8008308:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	f7f7 ffbc 	bl	800028c <__adddf3>
 8008314:	4602      	mov	r2, r0
 8008316:	460b      	mov	r3, r1
 8008318:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800831c:	f7f8 fbfc 	bl	8000b18 <__aeabi_dcmpgt>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d009      	beq.n	800833a <scaraInitScurve1+0x2e2>
				v_design = 2*v_lim;
 8008326:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	f7f7 ffad 	bl	800028c <__adddf3>
 8008332:	4602      	mov	r2, r0
 8008334:	460b      	mov	r3, r1
 8008336:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}else{
	
			}
		}
		a_design = 2*v_design*v_design/(v_design*tf - total_s);
 800833a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800833e:	4602      	mov	r2, r0
 8008340:	460b      	mov	r3, r1
 8008342:	f7f7 ffa3 	bl	800028c <__adddf3>
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	4610      	mov	r0, r2
 800834c:	4619      	mov	r1, r3
 800834e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008352:	f7f8 f951 	bl	80005f8 <__aeabi_dmul>
 8008356:	4602      	mov	r2, r0
 8008358:	460b      	mov	r3, r1
 800835a:	4614      	mov	r4, r2
 800835c:	461d      	mov	r5, r3
 800835e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008362:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008366:	f7f8 f947 	bl	80005f8 <__aeabi_dmul>
 800836a:	4602      	mov	r2, r0
 800836c:	460b      	mov	r3, r1
 800836e:	4610      	mov	r0, r2
 8008370:	4619      	mov	r1, r3
 8008372:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008376:	f7f7 ff87 	bl	8000288 <__aeabi_dsub>
 800837a:	4602      	mov	r2, r0
 800837c:	460b      	mov	r3, r1
 800837e:	4620      	mov	r0, r4
 8008380:	4629      	mov	r1, r5
 8008382:	f7f8 fa63 	bl	800084c <__aeabi_ddiv>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		ta = v_design/a_design;		
 800838e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008392:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008396:	f7f8 fa59 	bl	800084c <__aeabi_ddiv>
 800839a:	4602      	mov	r2, r0
 800839c:	460b      	mov	r3, r1
 800839e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		td = tf - ta;
 80083a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80083a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80083aa:	f7f7 ff6d 	bl	8000288 <__aeabi_dsub>
 80083ae:	4602      	mov	r2, r0
 80083b0:	460b      	mov	r3, r1
 80083b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80083b6:	e084      	b.n	80084c2 <scaraInitScurve1+0x46a>
	
	}else if(modeinit == DUTY_MODE_INIT_QVA){
 80083b8:	7ebb      	ldrb	r3, [r7, #26]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f040 8081 	bne.w	80084c2 <scaraInitScurve1+0x46a>
		//check qva condition
		if(total_s*a_design > 2*v_design*v_design){ //condition for ta smaller than tc
 80083c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80083c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80083c8:	f7f8 f916 	bl	80005f8 <__aeabi_dmul>
 80083cc:	4602      	mov	r2, r0
 80083ce:	460b      	mov	r3, r1
 80083d0:	4614      	mov	r4, r2
 80083d2:	461d      	mov	r5, r3
 80083d4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	f7f7 ff56 	bl	800028c <__adddf3>
 80083e0:	4602      	mov	r2, r0
 80083e2:	460b      	mov	r3, r1
 80083e4:	4610      	mov	r0, r2
 80083e6:	4619      	mov	r1, r3
 80083e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80083ec:	f7f8 f904 	bl	80005f8 <__aeabi_dmul>
 80083f0:	4602      	mov	r2, r0
 80083f2:	460b      	mov	r3, r1
 80083f4:	4620      	mov	r0, r4
 80083f6:	4629      	mov	r1, r5
 80083f8:	f7f8 fb8e 	bl	8000b18 <__aeabi_dcmpgt>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d024      	beq.n	800844c <scaraInitScurve1+0x3f4>
//			}
//			if(v_design/a_design < 0.1){ //ta is too small
//				//recalculate a_design
//				a_design = v_design/0.1;
//			}
			ta = v_design/a_design;
 8008402:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008406:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800840a:	f7f8 fa1f 	bl	800084c <__aeabi_ddiv>
 800840e:	4602      	mov	r2, r0
 8008410:	460b      	mov	r3, r1
 8008412:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			td = total_s/v_design + ta;
 8008416:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800841a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800841e:	f7f8 fa15 	bl	800084c <__aeabi_ddiv>
 8008422:	4602      	mov	r2, r0
 8008424:	460b      	mov	r3, r1
 8008426:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800842a:	f7f7 ff2f 	bl	800028c <__adddf3>
 800842e:	4602      	mov	r2, r0
 8008430:	460b      	mov	r3, r1
 8008432:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			tf = ta + td;
 8008436:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800843a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800843e:	f7f7 ff25 	bl	800028c <__adddf3>
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800844a:	e03a      	b.n	80084c2 <scaraInitScurve1+0x46a>
//				td = total_s/v_design;
//				tf = ta + td;
//			}
	
		}else{
			tf = 2*total_s/v_design;
 800844c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008450:	4602      	mov	r2, r0
 8008452:	460b      	mov	r3, r1
 8008454:	f7f7 ff1a 	bl	800028c <__adddf3>
 8008458:	4602      	mov	r2, r0
 800845a:	460b      	mov	r3, r1
 800845c:	4610      	mov	r0, r2
 800845e:	4619      	mov	r1, r3
 8008460:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008464:	f7f8 f9f2 	bl	800084c <__aeabi_ddiv>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	e9c7 2308 	strd	r2, r3, [r7, #32]
			ta = tf/4;
 8008470:	f04f 0200 	mov.w	r2, #0
 8008474:	4b5c      	ldr	r3, [pc, #368]	; (80085e8 <scaraInitScurve1+0x590>)
 8008476:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800847a:	f7f8 f9e7 	bl	800084c <__aeabi_ddiv>
 800847e:	4602      	mov	r2, r0
 8008480:	460b      	mov	r3, r1
 8008482:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			td = 3*tf/4;
 8008486:	f04f 0200 	mov.w	r2, #0
 800848a:	4b58      	ldr	r3, [pc, #352]	; (80085ec <scaraInitScurve1+0x594>)
 800848c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008490:	f7f8 f8b2 	bl	80005f8 <__aeabi_dmul>
 8008494:	4602      	mov	r2, r0
 8008496:	460b      	mov	r3, r1
 8008498:	4610      	mov	r0, r2
 800849a:	4619      	mov	r1, r3
 800849c:	f04f 0200 	mov.w	r2, #0
 80084a0:	4b51      	ldr	r3, [pc, #324]	; (80085e8 <scaraInitScurve1+0x590>)
 80084a2:	f7f8 f9d3 	bl	800084c <__aeabi_ddiv>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			a_design = v_design/ta;
 80084ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80084b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80084b6:	f7f8 f9c9 	bl	800084c <__aeabi_ddiv>
 80084ba:	4602      	mov	r2, r0
 80084bc:	460b      	mov	r3, r1
 80084be:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		}
	}
	//no_sample = ceilf(tf / T_SAMPLING); // ceiling
	 // Init lspb params
	
	scurve->Ta = ta;
 80084c2:	69f9      	ldr	r1, [r7, #28]
 80084c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80084c8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	scurve->Tf = tf;
 80084cc:	69f9      	ldr	r1, [r7, #28]
 80084ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084d2:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	scurve->Td = td;
 80084d6:	69f9      	ldr	r1, [r7, #28]
 80084d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084dc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	scurve->a_design = a_design;
 80084e0:	69f9      	ldr	r1, [r7, #28]
 80084e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80084e6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	scurve->v_design = v_design;
 80084ea:	69f9      	ldr	r1, [r7, #28]
 80084ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80084f0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	scurve->v_lim = v_lim;
 80084f4:	69f9      	ldr	r1, [r7, #28]
 80084f6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80084fa:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	scurve->total_s = total_s;
 80084fe:	69f9      	ldr	r1, [r7, #28]
 8008500:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008504:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	scurve->a_current = 0;
 8008508:	69f9      	ldr	r1, [r7, #28]
 800850a:	f04f 0200 	mov.w	r2, #0
 800850e:	f04f 0300 	mov.w	r3, #0
 8008512:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
	scurve->v_current = 0;
 8008516:	69f9      	ldr	r1, [r7, #28]
 8008518:	f04f 0200 	mov.w	r2, #0
 800851c:	f04f 0300 	mov.w	r3, #0
 8008520:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
	scurve->s_current = 0;
 8008524:	69f9      	ldr	r1, [r7, #28]
 8008526:	f04f 0200 	mov.w	r2, #0
 800852a:	f04f 0300 	mov.w	r3, #0
 800852e:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
	//define duplicate value when calculating scurve flow
	scurve->k_1        = v_design/(6*ta*ta);
 8008532:	f04f 0200 	mov.w	r2, #0
 8008536:	4b2e      	ldr	r3, [pc, #184]	; (80085f0 <scaraInitScurve1+0x598>)
 8008538:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800853c:	f7f8 f85c 	bl	80005f8 <__aeabi_dmul>
 8008540:	4602      	mov	r2, r0
 8008542:	460b      	mov	r3, r1
 8008544:	4610      	mov	r0, r2
 8008546:	4619      	mov	r1, r3
 8008548:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800854c:	f7f8 f854 	bl	80005f8 <__aeabi_dmul>
 8008550:	4602      	mov	r2, r0
 8008552:	460b      	mov	r3, r1
 8008554:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008558:	f7f8 f978 	bl	800084c <__aeabi_ddiv>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	69f9      	ldr	r1, [r7, #28]
 8008562:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	scurve->k_2		   = 2*ta*ta*ta;
 8008566:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	f7f7 fe8d 	bl	800028c <__adddf3>
 8008572:	4602      	mov	r2, r0
 8008574:	460b      	mov	r3, r1
 8008576:	4610      	mov	r0, r2
 8008578:	4619      	mov	r1, r3
 800857a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800857e:	f7f8 f83b 	bl	80005f8 <__aeabi_dmul>
 8008582:	4602      	mov	r2, r0
 8008584:	460b      	mov	r3, r1
 8008586:	4610      	mov	r0, r2
 8008588:	4619      	mov	r1, r3
 800858a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800858e:	f7f8 f833 	bl	80005f8 <__aeabi_dmul>
 8008592:	4602      	mov	r2, r0
 8008594:	460b      	mov	r3, r1
 8008596:	69f9      	ldr	r1, [r7, #28]
 8008598:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	scurve->k_3        = 6*ta;
 800859c:	f04f 0200 	mov.w	r2, #0
 80085a0:	4b13      	ldr	r3, [pc, #76]	; (80085f0 <scaraInitScurve1+0x598>)
 80085a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80085a6:	f7f8 f827 	bl	80005f8 <__aeabi_dmul>
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	69f9      	ldr	r1, [r7, #28]
 80085b0:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	scurve->k_4        = 6*ta*ta;
 80085b4:	f04f 0200 	mov.w	r2, #0
 80085b8:	4b0d      	ldr	r3, [pc, #52]	; (80085f0 <scaraInitScurve1+0x598>)
 80085ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80085be:	f7f8 f81b 	bl	80005f8 <__aeabi_dmul>
 80085c2:	4602      	mov	r2, r0
 80085c4:	460b      	mov	r3, r1
 80085c6:	4610      	mov	r0, r2
 80085c8:	4619      	mov	r1, r3
 80085ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80085ce:	f7f8 f813 	bl	80005f8 <__aeabi_dmul>
 80085d2:	4602      	mov	r2, r0
 80085d4:	460b      	mov	r3, r1
 80085d6:	69f9      	ldr	r1, [r7, #28]
 80085d8:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	return SCARA_STATUS_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3750      	adds	r7, #80	; 0x50
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bdb0      	pop	{r4, r5, r7, pc}
 80085e6:	bf00      	nop
 80085e8:	40100000 	.word	0x40100000
 80085ec:	40080000 	.word	0x40080000
 80085f0:	40180000 	.word	0x40180000

080085f4 <scaraFlowLSPB1>:
SCARA_StatusTypeDef	scaraFlowLSPB1	(Trajectory_LSPB_TypeDef *lspb, double time){
 80085f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80085f8:	b08a      	sub	sp, #40	; 0x28
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	60f8      	str	r0, [r7, #12]
 80085fe:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008608:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008612:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800861c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8008620:	f04f 0200 	mov.w	r2, #0
 8008624:	f04f 0300 	mov.w	r3, #0
 8008628:	e9d7 0100 	ldrd	r0, r1, [r7]
 800862c:	f7f8 fa6a 	bl	8000b04 <__aeabi_dcmpge>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d05b      	beq.n	80086ee <scaraFlowLSPB1+0xfa>
 8008636:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800863a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800863e:	f7f8 fa57 	bl	8000af0 <__aeabi_dcmple>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d052      	beq.n	80086ee <scaraFlowLSPB1+0xfa>
		lspb->a_current		=	lspb->a_design;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800864e:	68f9      	ldr	r1, [r7, #12]
 8008650:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008660:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008664:	f7f7 ffc8 	bl	80005f8 <__aeabi_dmul>
 8008668:	4602      	mov	r2, r0
 800866a:	460b      	mov	r3, r1
 800866c:	4620      	mov	r0, r4
 800866e:	4629      	mov	r1, r5
 8008670:	f7f7 fe0c 	bl	800028c <__adddf3>
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	68f9      	ldr	r1, [r7, #12]
 800867a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800868a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800868e:	f7f7 ffb3 	bl	80005f8 <__aeabi_dmul>
 8008692:	4602      	mov	r2, r0
 8008694:	460b      	mov	r3, r1
 8008696:	4620      	mov	r0, r4
 8008698:	4629      	mov	r1, r5
 800869a:	f7f7 fdf7 	bl	800028c <__adddf3>
 800869e:	4602      	mov	r2, r0
 80086a0:	460b      	mov	r3, r1
 80086a2:	4614      	mov	r4, r2
 80086a4:	461d      	mov	r5, r3
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80086ac:	f04f 0200 	mov.w	r2, #0
 80086b0:	4b98      	ldr	r3, [pc, #608]	; (8008914 <scaraFlowLSPB1+0x320>)
 80086b2:	f7f7 ffa1 	bl	80005f8 <__aeabi_dmul>
 80086b6:	4602      	mov	r2, r0
 80086b8:	460b      	mov	r3, r1
 80086ba:	4610      	mov	r0, r2
 80086bc:	4619      	mov	r1, r3
 80086be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086c2:	f7f7 ff99 	bl	80005f8 <__aeabi_dmul>
 80086c6:	4602      	mov	r2, r0
 80086c8:	460b      	mov	r3, r1
 80086ca:	4610      	mov	r0, r2
 80086cc:	4619      	mov	r1, r3
 80086ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086d2:	f7f7 ff91 	bl	80005f8 <__aeabi_dmul>
 80086d6:	4602      	mov	r2, r0
 80086d8:	460b      	mov	r3, r1
 80086da:	4620      	mov	r0, r4
 80086dc:	4629      	mov	r1, r5
 80086de:	f7f7 fdd5 	bl	800028c <__adddf3>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	68f9      	ldr	r1, [r7, #12]
 80086e8:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 80086ec:	e10b      	b.n	8008906 <scaraFlowLSPB1+0x312>
	// Constant velocity
	} else if (ta < time && time <= td) {
 80086ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80086f6:	f7f8 f9f1 	bl	8000adc <__aeabi_dcmplt>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d054      	beq.n	80087aa <scaraFlowLSPB1+0x1b6>
 8008700:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008704:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008708:	f7f8 f9f2 	bl	8000af0 <__aeabi_dcmple>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d04b      	beq.n	80087aa <scaraFlowLSPB1+0x1b6>
		lspb->a_current		=	0;
 8008712:	68f9      	ldr	r1, [r7, #12]
 8008714:	f04f 0200 	mov.w	r2, #0
 8008718:	f04f 0300 	mov.w	r3, #0
 800871c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008726:	68f9      	ldr	r1, [r7, #12]
 8008728:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta*0.5 + lspb->v_design*(time - ta*0.5);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008738:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800873c:	f7f7 ff5c 	bl	80005f8 <__aeabi_dmul>
 8008740:	4602      	mov	r2, r0
 8008742:	460b      	mov	r3, r1
 8008744:	4610      	mov	r0, r2
 8008746:	4619      	mov	r1, r3
 8008748:	f04f 0200 	mov.w	r2, #0
 800874c:	4b71      	ldr	r3, [pc, #452]	; (8008914 <scaraFlowLSPB1+0x320>)
 800874e:	f7f7 ff53 	bl	80005f8 <__aeabi_dmul>
 8008752:	4602      	mov	r2, r0
 8008754:	460b      	mov	r3, r1
 8008756:	4620      	mov	r0, r4
 8008758:	4629      	mov	r1, r5
 800875a:	f7f7 fd97 	bl	800028c <__adddf3>
 800875e:	4602      	mov	r2, r0
 8008760:	460b      	mov	r3, r1
 8008762:	4690      	mov	r8, r2
 8008764:	4699      	mov	r9, r3
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800876c:	f04f 0200 	mov.w	r2, #0
 8008770:	4b68      	ldr	r3, [pc, #416]	; (8008914 <scaraFlowLSPB1+0x320>)
 8008772:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008776:	f7f7 ff3f 	bl	80005f8 <__aeabi_dmul>
 800877a:	4602      	mov	r2, r0
 800877c:	460b      	mov	r3, r1
 800877e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008782:	f7f7 fd81 	bl	8000288 <__aeabi_dsub>
 8008786:	4602      	mov	r2, r0
 8008788:	460b      	mov	r3, r1
 800878a:	4620      	mov	r0, r4
 800878c:	4629      	mov	r1, r5
 800878e:	f7f7 ff33 	bl	80005f8 <__aeabi_dmul>
 8008792:	4602      	mov	r2, r0
 8008794:	460b      	mov	r3, r1
 8008796:	4640      	mov	r0, r8
 8008798:	4649      	mov	r1, r9
 800879a:	f7f7 fd77 	bl	800028c <__adddf3>
 800879e:	4602      	mov	r2, r0
 80087a0:	460b      	mov	r3, r1
 80087a2:	68f9      	ldr	r1, [r7, #12]
 80087a4:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 80087a8:	e0ad      	b.n	8008906 <scaraFlowLSPB1+0x312>
	// Decelerate
	} else if (td < time && time <= tf) {
 80087aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80087b2:	f7f8 f993 	bl	8000adc <__aeabi_dcmplt>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f000 8090 	beq.w	80088de <scaraFlowLSPB1+0x2ea>
 80087be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80087c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087c6:	f7f8 f993 	bl	8000af0 <__aeabi_dcmple>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f000 8086 	beq.w	80088de <scaraFlowLSPB1+0x2ea>
		lspb->a_current		=	-lspb->a_design;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80087d8:	4614      	mov	r4, r2
 80087da:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v_design + lspb->a_design*(td - time);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 80087f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80087f8:	f7f7 fd46 	bl	8000288 <__aeabi_dsub>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	4640      	mov	r0, r8
 8008802:	4649      	mov	r1, r9
 8008804:	f7f7 fef8 	bl	80005f8 <__aeabi_dmul>
 8008808:	4602      	mov	r2, r0
 800880a:	460b      	mov	r3, r1
 800880c:	4620      	mov	r0, r4
 800880e:	4629      	mov	r1, r5
 8008810:	f7f7 fd3c 	bl	800028c <__adddf3>
 8008814:	4602      	mov	r2, r0
 8008816:	460b      	mov	r3, r1
 8008818:	68f9      	ldr	r1, [r7, #12]
 800881a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 800882a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800882e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008832:	f7f7 fd29 	bl	8000288 <__aeabi_dsub>
 8008836:	4602      	mov	r2, r0
 8008838:	460b      	mov	r3, r1
 800883a:	4640      	mov	r0, r8
 800883c:	4649      	mov	r1, r9
 800883e:	f7f7 fedb 	bl	80005f8 <__aeabi_dmul>
 8008842:	4602      	mov	r2, r0
 8008844:	460b      	mov	r3, r1
 8008846:	4620      	mov	r0, r4
 8008848:	4629      	mov	r1, r5
 800884a:	f7f7 fd1d 	bl	8000288 <__aeabi_dsub>
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	4614      	mov	r4, r2
 8008854:	461d      	mov	r5, r3
								- (lspb->v_lim - lspb->v0)*(tf - time)*(tf - time)/(2*ta);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008862:	f7f7 fd11 	bl	8000288 <__aeabi_dsub>
 8008866:	4602      	mov	r2, r0
 8008868:	460b      	mov	r3, r1
 800886a:	4690      	mov	r8, r2
 800886c:	4699      	mov	r9, r3
 800886e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008872:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008876:	f7f7 fd07 	bl	8000288 <__aeabi_dsub>
 800887a:	4602      	mov	r2, r0
 800887c:	460b      	mov	r3, r1
 800887e:	4640      	mov	r0, r8
 8008880:	4649      	mov	r1, r9
 8008882:	f7f7 feb9 	bl	80005f8 <__aeabi_dmul>
 8008886:	4602      	mov	r2, r0
 8008888:	460b      	mov	r3, r1
 800888a:	4690      	mov	r8, r2
 800888c:	4699      	mov	r9, r3
 800888e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008892:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008896:	f7f7 fcf7 	bl	8000288 <__aeabi_dsub>
 800889a:	4602      	mov	r2, r0
 800889c:	460b      	mov	r3, r1
 800889e:	4640      	mov	r0, r8
 80088a0:	4649      	mov	r1, r9
 80088a2:	f7f7 fea9 	bl	80005f8 <__aeabi_dmul>
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	4690      	mov	r8, r2
 80088ac:	4699      	mov	r9, r3
 80088ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80088b2:	4602      	mov	r2, r0
 80088b4:	460b      	mov	r3, r1
 80088b6:	f7f7 fce9 	bl	800028c <__adddf3>
 80088ba:	4602      	mov	r2, r0
 80088bc:	460b      	mov	r3, r1
 80088be:	4640      	mov	r0, r8
 80088c0:	4649      	mov	r1, r9
 80088c2:	f7f7 ffc3 	bl	800084c <__aeabi_ddiv>
 80088c6:	4602      	mov	r2, r0
 80088c8:	460b      	mov	r3, r1
 80088ca:	4620      	mov	r0, r4
 80088cc:	4629      	mov	r1, r5
 80088ce:	f7f7 fcdb 	bl	8000288 <__aeabi_dsub>
 80088d2:	4602      	mov	r2, r0
 80088d4:	460b      	mov	r3, r1
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 80088d6:	68f9      	ldr	r1, [r7, #12]
 80088d8:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 80088dc:	e013      	b.n	8008906 <scaraFlowLSPB1+0x312>
	} else {
		lspb->a_current 	=	0;
 80088de:	68f9      	ldr	r1, [r7, #12]
 80088e0:	f04f 0200 	mov.w	r2, #0
 80088e4:	f04f 0300 	mov.w	r3, #0
 80088e8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	0;
 80088ec:	68f9      	ldr	r1, [r7, #12]
 80088ee:	f04f 0200 	mov.w	r2, #0
 80088f2:	f04f 0300 	mov.w	r3, #0
 80088f6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8008900:	68f9      	ldr	r1, [r7, #12]
 8008902:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3728      	adds	r7, #40	; 0x28
 800890c:	46bd      	mov	sp, r7
 800890e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008912:	bf00      	nop
 8008914:	3fe00000 	.word	0x3fe00000

08008918 <scaraFlowGCODE>:
SCARA_StatusTypeDef	scaraFlowGCODE(double *s, double time)
{
 8008918:	b5b0      	push	{r4, r5, r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	ed87 0b00 	vstr	d0, [r7]
	if ( 0.0f <= time && time <= time_acc) {
 8008924:	f04f 0200 	mov.w	r2, #0
 8008928:	f04f 0300 	mov.w	r3, #0
 800892c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008930:	f7f8 f8e8 	bl	8000b04 <__aeabi_dcmpge>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d01e      	beq.n	8008978 <scaraFlowGCODE+0x60>
 800893a:	4b5f      	ldr	r3, [pc, #380]	; (8008ab8 <scaraFlowGCODE+0x1a0>)
 800893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008940:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008944:	f7f8 f8d4 	bl	8000af0 <__aeabi_dcmple>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d014      	beq.n	8008978 <scaraFlowGCODE+0x60>
		*s = acc0*time*time;
 800894e:	4b5b      	ldr	r3, [pc, #364]	; (8008abc <scaraFlowGCODE+0x1a4>)
 8008950:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008954:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008958:	f7f7 fe4e 	bl	80005f8 <__aeabi_dmul>
 800895c:	4602      	mov	r2, r0
 800895e:	460b      	mov	r3, r1
 8008960:	4610      	mov	r0, r2
 8008962:	4619      	mov	r1, r3
 8008964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008968:	f7f7 fe46 	bl	80005f8 <__aeabi_dmul>
 800896c:	4602      	mov	r2, r0
 800896e:	460b      	mov	r3, r1
 8008970:	68f9      	ldr	r1, [r7, #12]
 8008972:	e9c1 2300 	strd	r2, r3, [r1]
 8008976:	e09a      	b.n	8008aae <scaraFlowGCODE+0x196>
	// Constant velocity
	} else if (time_acc < time && time <= time_dec) {
 8008978:	4b4f      	ldr	r3, [pc, #316]	; (8008ab8 <scaraFlowGCODE+0x1a0>)
 800897a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008982:	f7f8 f8c9 	bl	8000b18 <__aeabi_dcmpgt>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d01f      	beq.n	80089cc <scaraFlowGCODE+0xb4>
 800898c:	4b4c      	ldr	r3, [pc, #304]	; (8008ac0 <scaraFlowGCODE+0x1a8>)
 800898e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008992:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008996:	f7f8 f8ab 	bl	8000af0 <__aeabi_dcmple>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d015      	beq.n	80089cc <scaraFlowGCODE+0xb4>
		*s = constant[0]*time + constant[1];
 80089a0:	4b48      	ldr	r3, [pc, #288]	; (8008ac4 <scaraFlowGCODE+0x1ac>)
 80089a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089aa:	f7f7 fe25 	bl	80005f8 <__aeabi_dmul>
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	4610      	mov	r0, r2
 80089b4:	4619      	mov	r1, r3
 80089b6:	4b43      	ldr	r3, [pc, #268]	; (8008ac4 <scaraFlowGCODE+0x1ac>)
 80089b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80089bc:	f7f7 fc66 	bl	800028c <__adddf3>
 80089c0:	4602      	mov	r2, r0
 80089c2:	460b      	mov	r3, r1
 80089c4:	68f9      	ldr	r1, [r7, #12]
 80089c6:	e9c1 2300 	strd	r2, r3, [r1]
 80089ca:	e070      	b.n	8008aae <scaraFlowGCODE+0x196>
	// Decelerate
	} else if (time_dec < time && time <= time_move) {
 80089cc:	4b3c      	ldr	r3, [pc, #240]	; (8008ac0 <scaraFlowGCODE+0x1a8>)
 80089ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089d6:	f7f8 f89f 	bl	8000b18 <__aeabi_dcmpgt>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d038      	beq.n	8008a52 <scaraFlowGCODE+0x13a>
 80089e0:	4b39      	ldr	r3, [pc, #228]	; (8008ac8 <scaraFlowGCODE+0x1b0>)
 80089e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089ea:	f7f8 f881 	bl	8000af0 <__aeabi_dcmple>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d02e      	beq.n	8008a52 <scaraFlowGCODE+0x13a>
		*s = deacc[0]*time*time + deacc[1]*time + deacc[2];
 80089f4:	4b35      	ldr	r3, [pc, #212]	; (8008acc <scaraFlowGCODE+0x1b4>)
 80089f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089fe:	f7f7 fdfb 	bl	80005f8 <__aeabi_dmul>
 8008a02:	4602      	mov	r2, r0
 8008a04:	460b      	mov	r3, r1
 8008a06:	4610      	mov	r0, r2
 8008a08:	4619      	mov	r1, r3
 8008a0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a0e:	f7f7 fdf3 	bl	80005f8 <__aeabi_dmul>
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	4614      	mov	r4, r2
 8008a18:	461d      	mov	r5, r3
 8008a1a:	4b2c      	ldr	r3, [pc, #176]	; (8008acc <scaraFlowGCODE+0x1b4>)
 8008a1c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a24:	f7f7 fde8 	bl	80005f8 <__aeabi_dmul>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	4629      	mov	r1, r5
 8008a30:	f7f7 fc2c 	bl	800028c <__adddf3>
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	4610      	mov	r0, r2
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	4b23      	ldr	r3, [pc, #140]	; (8008acc <scaraFlowGCODE+0x1b4>)
 8008a3e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008a42:	f7f7 fc23 	bl	800028c <__adddf3>
 8008a46:	4602      	mov	r2, r0
 8008a48:	460b      	mov	r3, r1
 8008a4a:	68f9      	ldr	r1, [r7, #12]
 8008a4c:	e9c1 2300 	strd	r2, r3, [r1]
 8008a50:	e02d      	b.n	8008aae <scaraFlowGCODE+0x196>
	} else {
		*s = deacc[0]*time*time + deacc[1]*time + deacc[2];
 8008a52:	4b1e      	ldr	r3, [pc, #120]	; (8008acc <scaraFlowGCODE+0x1b4>)
 8008a54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a5c:	f7f7 fdcc 	bl	80005f8 <__aeabi_dmul>
 8008a60:	4602      	mov	r2, r0
 8008a62:	460b      	mov	r3, r1
 8008a64:	4610      	mov	r0, r2
 8008a66:	4619      	mov	r1, r3
 8008a68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a6c:	f7f7 fdc4 	bl	80005f8 <__aeabi_dmul>
 8008a70:	4602      	mov	r2, r0
 8008a72:	460b      	mov	r3, r1
 8008a74:	4614      	mov	r4, r2
 8008a76:	461d      	mov	r5, r3
 8008a78:	4b14      	ldr	r3, [pc, #80]	; (8008acc <scaraFlowGCODE+0x1b4>)
 8008a7a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008a7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a82:	f7f7 fdb9 	bl	80005f8 <__aeabi_dmul>
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	4629      	mov	r1, r5
 8008a8e:	f7f7 fbfd 	bl	800028c <__adddf3>
 8008a92:	4602      	mov	r2, r0
 8008a94:	460b      	mov	r3, r1
 8008a96:	4610      	mov	r0, r2
 8008a98:	4619      	mov	r1, r3
 8008a9a:	4b0c      	ldr	r3, [pc, #48]	; (8008acc <scaraFlowGCODE+0x1b4>)
 8008a9c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008aa0:	f7f7 fbf4 	bl	800028c <__adddf3>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	68f9      	ldr	r1, [r7, #12]
 8008aaa:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return SCARA_STATUS_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8008ab8:	20008f48 	.word	0x20008f48
 8008abc:	2000fd30 	.word	0x2000fd30
 8008ac0:	20008f68 	.word	0x20008f68
 8008ac4:	20008f90 	.word	0x20008f90
 8008ac8:	20008fb8 	.word	0x20008fb8
 8008acc:	20008f50 	.word	0x20008f50

08008ad0 <scaraFLowScurve1>:
SCARA_StatusTypeDef	scaraFLowScurve1(Trajectory_Scurve_TypeDef *scurve, double t)
{
 8008ad0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008ad4:	b08c      	sub	sp, #48	; 0x30
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	60f8      	str	r0, [r7, #12]
 8008ada:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta, vc;
	tf = scurve->Tf;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8008ae4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	ta = scurve->Ta;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8008aee:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = scurve->Td;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008af8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	vc = scurve->v_design;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8008b02:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if ( 0.0f <= t && t <= ta) {
 8008b06:	f04f 0200 	mov.w	r2, #0
 8008b0a:	f04f 0300 	mov.w	r3, #0
 8008b0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b12:	f7f7 fff7 	bl	8000b04 <__aeabi_dcmpge>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d025      	beq.n	8008b68 <scaraFLowScurve1+0x98>
 8008b1c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b24:	f7f7 ffe4 	bl	8000af0 <__aeabi_dcmple>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d01c      	beq.n	8008b68 <scaraFLowScurve1+0x98>
//		lspb->a_current		=	(time*vc)/ta*ta;
//		lspb->v_current		=	(time*time*vc)/(2*ta*ta);
		scurve->s_current	=	t*t*t*scurve->k_1;
 8008b2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b36:	f7f7 fd5f 	bl	80005f8 <__aeabi_dmul>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	4610      	mov	r0, r2
 8008b40:	4619      	mov	r1, r3
 8008b42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b46:	f7f7 fd57 	bl	80005f8 <__aeabi_dmul>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	4610      	mov	r0, r2
 8008b50:	4619      	mov	r1, r3
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008b58:	f7f7 fd4e 	bl	80005f8 <__aeabi_dmul>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	460b      	mov	r3, r1
 8008b60:	68f9      	ldr	r1, [r7, #12]
 8008b62:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8008b66:	e17c      	b.n	8008e62 <scaraFLowScurve1+0x392>
	// Constant velocity
	} else if (ta < t && t <= 2*ta) {
 8008b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b6c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008b70:	f7f7 ffb4 	bl	8000adc <__aeabi_dcmplt>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d061      	beq.n	8008c3e <scaraFLowScurve1+0x16e>
 8008b7a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008b7e:	4602      	mov	r2, r0
 8008b80:	460b      	mov	r3, r1
 8008b82:	f7f7 fb83 	bl	800028c <__adddf3>
 8008b86:	4602      	mov	r2, r0
 8008b88:	460b      	mov	r3, r1
 8008b8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b8e:	f7f7 ffaf 	bl	8000af0 <__aeabi_dcmple>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d052      	beq.n	8008c3e <scaraFLowScurve1+0x16e>
//		scurve->a_current   =	-(vc*(time - 2*ta))/(ta*ta);
//		scurve->v_current   =	vc/2 - (vc*(time - ta)*(time - 3*ta))/(2*ta*ta);
		scurve->s_current   =	-(t*t*t - t*t*scurve->k_3 + t*scurve->k_4 - scurve->k_2)*scurve->k_1;
 8008b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ba0:	f7f7 fd2a 	bl	80005f8 <__aeabi_dmul>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	4610      	mov	r0, r2
 8008baa:	4619      	mov	r1, r3
 8008bac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bb0:	f7f7 fd22 	bl	80005f8 <__aeabi_dmul>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	4690      	mov	r8, r2
 8008bba:	4699      	mov	r9, r3
 8008bbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bc4:	f7f7 fd18 	bl	80005f8 <__aeabi_dmul>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4610      	mov	r0, r2
 8008bce:	4619      	mov	r1, r3
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8008bd6:	f7f7 fd0f 	bl	80005f8 <__aeabi_dmul>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	460b      	mov	r3, r1
 8008bde:	4640      	mov	r0, r8
 8008be0:	4649      	mov	r1, r9
 8008be2:	f7f7 fb51 	bl	8000288 <__aeabi_dsub>
 8008be6:	4602      	mov	r2, r0
 8008be8:	460b      	mov	r3, r1
 8008bea:	4690      	mov	r8, r2
 8008bec:	4699      	mov	r9, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8008bf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bf8:	f7f7 fcfe 	bl	80005f8 <__aeabi_dmul>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	460b      	mov	r3, r1
 8008c00:	4640      	mov	r0, r8
 8008c02:	4649      	mov	r1, r9
 8008c04:	f7f7 fb42 	bl	800028c <__adddf3>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	4619      	mov	r1, r3
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8008c16:	f7f7 fb37 	bl	8000288 <__aeabi_dsub>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	4614      	mov	r4, r2
 8008c20:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	4629      	mov	r1, r5
 8008c2e:	f7f7 fce3 	bl	80005f8 <__aeabi_dmul>
 8008c32:	4602      	mov	r2, r0
 8008c34:	460b      	mov	r3, r1
 8008c36:	68f9      	ldr	r1, [r7, #12]
 8008c38:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8008c3c:	e111      	b.n	8008e62 <scaraFLowScurve1+0x392>
	// Decelerate
	} else if (2*ta < t && t <= td - ta) {
 8008c3e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	f7f7 fb21 	bl	800028c <__adddf3>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c52:	f7f7 ff61 	bl	8000b18 <__aeabi_dcmpgt>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d022      	beq.n	8008ca2 <scaraFLowScurve1+0x1d2>
 8008c5c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c60:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008c64:	f7f7 fb10 	bl	8000288 <__aeabi_dsub>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c70:	f7f7 ff3e 	bl	8000af0 <__aeabi_dcmple>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d013      	beq.n	8008ca2 <scaraFLowScurve1+0x1d2>
//		scurve->a_current   =	0;
//		scurve->v_current   =	v_design;
		scurve->s_current   =	vc*(t - ta);
 8008c7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c82:	f7f7 fb01 	bl	8000288 <__aeabi_dsub>
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	4610      	mov	r0, r2
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008c92:	f7f7 fcb1 	bl	80005f8 <__aeabi_dmul>
 8008c96:	4602      	mov	r2, r0
 8008c98:	460b      	mov	r3, r1
 8008c9a:	68f9      	ldr	r1, [r7, #12]
 8008c9c:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8008ca0:	e0df      	b.n	8008e62 <scaraFLowScurve1+0x392>
	} else if(td-ta < t && t <= td){
 8008ca2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ca6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008caa:	f7f7 faed 	bl	8000288 <__aeabi_dsub>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cb6:	f7f7 ff2f 	bl	8000b18 <__aeabi_dcmpgt>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f000 8081 	beq.w	8008dc4 <scaraFLowScurve1+0x2f4>
 8008cc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008cc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cca:	f7f7 ff11 	bl	8000af0 <__aeabi_dcmple>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d077      	beq.n	8008dc4 <scaraFLowScurve1+0x2f4>
//		scurve->a_current 	=	-(vc*(t - td + ta))/ta^2;
//		scurve->v_current   =	vc/2 - (vc*(t + ta - tf)*(t + 3*ta - tf))/(2*ta*ta);
		scurve->s_current   =	scurve->total_s - (ta*vc)/3 - vc*(t - tf) - (t-tf)*(t-tf)*(t + scurve->k_3 - tf)*scurve->k_1;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 8008cda:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008cde:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008ce2:	f7f7 fc89 	bl	80005f8 <__aeabi_dmul>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	460b      	mov	r3, r1
 8008cea:	4610      	mov	r0, r2
 8008cec:	4619      	mov	r1, r3
 8008cee:	f04f 0200 	mov.w	r2, #0
 8008cf2:	4b5f      	ldr	r3, [pc, #380]	; (8008e70 <scaraFLowScurve1+0x3a0>)
 8008cf4:	f7f7 fdaa 	bl	800084c <__aeabi_ddiv>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	4629      	mov	r1, r5
 8008d00:	f7f7 fac2 	bl	8000288 <__aeabi_dsub>
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	4614      	mov	r4, r2
 8008d0a:	461d      	mov	r5, r3
 8008d0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d14:	f7f7 fab8 	bl	8000288 <__aeabi_dsub>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4619      	mov	r1, r3
 8008d20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d24:	f7f7 fc68 	bl	80005f8 <__aeabi_dmul>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	4629      	mov	r1, r5
 8008d30:	f7f7 faaa 	bl	8000288 <__aeabi_dsub>
 8008d34:	4602      	mov	r2, r0
 8008d36:	460b      	mov	r3, r1
 8008d38:	4614      	mov	r4, r2
 8008d3a:	461d      	mov	r5, r3
 8008d3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d44:	f7f7 faa0 	bl	8000288 <__aeabi_dsub>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	4690      	mov	r8, r2
 8008d4e:	4699      	mov	r9, r3
 8008d50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d58:	f7f7 fa96 	bl	8000288 <__aeabi_dsub>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	4640      	mov	r0, r8
 8008d62:	4649      	mov	r1, r9
 8008d64:	f7f7 fc48 	bl	80005f8 <__aeabi_dmul>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	4690      	mov	r8, r2
 8008d6e:	4699      	mov	r9, r3
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8008d76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d7a:	f7f7 fa87 	bl	800028c <__adddf3>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	4610      	mov	r0, r2
 8008d84:	4619      	mov	r1, r3
 8008d86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d8a:	f7f7 fa7d 	bl	8000288 <__aeabi_dsub>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	460b      	mov	r3, r1
 8008d92:	4640      	mov	r0, r8
 8008d94:	4649      	mov	r1, r9
 8008d96:	f7f7 fc2f 	bl	80005f8 <__aeabi_dmul>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	4610      	mov	r0, r2
 8008da0:	4619      	mov	r1, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008da8:	f7f7 fc26 	bl	80005f8 <__aeabi_dmul>
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	4620      	mov	r0, r4
 8008db2:	4629      	mov	r1, r5
 8008db4:	f7f7 fa68 	bl	8000288 <__aeabi_dsub>
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	68f9      	ldr	r1, [r7, #12]
 8008dbe:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8008dc2:	e04e      	b.n	8008e62 <scaraFLowScurve1+0x392>
	} else if(td < t && t <= tf){
 8008dc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dc8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008dcc:	f7f7 fe86 	bl	8000adc <__aeabi_dcmplt>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d045      	beq.n	8008e62 <scaraFLowScurve1+0x392>
 8008dd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008dda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dde:	f7f7 fe87 	bl	8000af0 <__aeabi_dcmple>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d03c      	beq.n	8008e62 <scaraFLowScurve1+0x392>
//		scurve->a_current 	=	-(vc*(ta - t + td))/(ta*ta);
//		scurve->v_current   =	(vc*(t - tf)*(t-tf))/(2*ta*ta);
		scurve->s_current   =	scurve->total_s + (t-tf)*(t-tf)*(t-tf)*scurve->k_1;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 8008dee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008df2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008df6:	f7f7 fa47 	bl	8000288 <__aeabi_dsub>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	4690      	mov	r8, r2
 8008e00:	4699      	mov	r9, r3
 8008e02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e0a:	f7f7 fa3d 	bl	8000288 <__aeabi_dsub>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	460b      	mov	r3, r1
 8008e12:	4640      	mov	r0, r8
 8008e14:	4649      	mov	r1, r9
 8008e16:	f7f7 fbef 	bl	80005f8 <__aeabi_dmul>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	4690      	mov	r8, r2
 8008e20:	4699      	mov	r9, r3
 8008e22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e2a:	f7f7 fa2d 	bl	8000288 <__aeabi_dsub>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	460b      	mov	r3, r1
 8008e32:	4640      	mov	r0, r8
 8008e34:	4649      	mov	r1, r9
 8008e36:	f7f7 fbdf 	bl	80005f8 <__aeabi_dmul>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	4610      	mov	r0, r2
 8008e40:	4619      	mov	r1, r3
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008e48:	f7f7 fbd6 	bl	80005f8 <__aeabi_dmul>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	460b      	mov	r3, r1
 8008e50:	4620      	mov	r0, r4
 8008e52:	4629      	mov	r1, r5
 8008e54:	f7f7 fa1a 	bl	800028c <__adddf3>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	68f9      	ldr	r1, [r7, #12]
 8008e5e:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
	}

	return SCARA_STATUS_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3730      	adds	r7, #48	; 0x30
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008e6e:	bf00      	nop
 8008e70:	40080000 	.word	0x40080000

08008e74 <scaraFlowDuty>:
}

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 8008e74:	b082      	sub	sp, #8
 8008e76:	b5b0      	push	{r4, r5, r7, lr}
 8008e78:	b0f0      	sub	sp, #448	; 0x1c0
 8008e7a:	af24      	add	r7, sp, #144	; 0x90
 8008e7c:	f107 0108 	add.w	r1, r7, #8
 8008e80:	ed81 0b00 	vstr	d0, [r1]
 8008e84:	1d39      	adds	r1, r7, #4
 8008e86:	6008      	str	r0, [r1, #0]
 8008e88:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8008e8c:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 8008e90:	f107 0118 	add.w	r1, r7, #24
 8008e94:	f107 0308 	add.w	r3, r7, #8
 8008e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 8008ea0:	4b91      	ldr	r3, [pc, #580]	; (80090e8 <scaraFlowDuty+0x274>)
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f040 817d 	bne.w	80091a4 <scaraFlowDuty+0x330>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 8008eaa:	4b8f      	ldr	r3, [pc, #572]	; (80090e8 <scaraFlowDuty+0x274>)
 8008eac:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d12b      	bne.n	8008f0c <scaraFlowDuty+0x98>

			status1 = scaraFlowLSPB1(&(myDUTY.task.trajectory_3d.lspb), time);
 8008eb4:	f107 0308 	add.w	r3, r7, #8
 8008eb8:	ed93 0b00 	vldr	d0, [r3]
 8008ebc:	488b      	ldr	r0, [pc, #556]	; (80090ec <scaraFlowDuty+0x278>)
 8008ebe:	f7ff fb99 	bl	80085f4 <scaraFlowLSPB1>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 8008ec8:	4b87      	ldr	r3, [pc, #540]	; (80090e8 <scaraFlowDuty+0x274>)
 8008eca:	e9d3 2362 	ldrd	r2, r3, [r3, #392]	; 0x188
 8008ece:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 8008ed2:	4b85      	ldr	r3, [pc, #532]	; (80090e8 <scaraFlowDuty+0x274>)
 8008ed4:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8008ed8:	f107 0110 	add.w	r1, r7, #16
 8008edc:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8008ee0:	4b81      	ldr	r3, [pc, #516]	; (80090e8 <scaraFlowDuty+0x274>)
 8008ee2:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8008ee6:	f107 0108 	add.w	r1, r7, #8
 8008eea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eee:	f7f7 fb83 	bl	80005f8 <__aeabi_dmul>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8008efa:	4b7b      	ldr	r3, [pc, #492]	; (80090e8 <scaraFlowDuty+0x274>)
 8008efc:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8008f00:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			status2 = SCARA_STATUS_OK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8008f0a:	e099      	b.n	8009040 <scaraFlowDuty+0x1cc>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 8008f0c:	4b76      	ldr	r3, [pc, #472]	; (80090e8 <scaraFlowDuty+0x274>)
 8008f0e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d126      	bne.n	8008f64 <scaraFlowDuty+0xf0>

			status1 = scaraFLowScurve1(&(myDUTY.task.trajectory_3d.scurve), time);
 8008f16:	f107 0308 	add.w	r3, r7, #8
 8008f1a:	ed93 0b00 	vldr	d0, [r3]
 8008f1e:	4874      	ldr	r0, [pc, #464]	; (80090f0 <scaraFlowDuty+0x27c>)
 8008f20:	f7ff fdd6 	bl	8008ad0 <scaraFLowScurve1>
 8008f24:	4603      	mov	r3, r0
 8008f26:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			//v = myDUTY.task.trajectory_3d.lspb.v_current;
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8008f2a:	4b6f      	ldr	r3, [pc, #444]	; (80090e8 <scaraFlowDuty+0x274>)
 8008f2c:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	; 0x260
 8008f30:	f107 0110 	add.w	r1, r7, #16
 8008f34:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8008f38:	4b6b      	ldr	r3, [pc, #428]	; (80090e8 <scaraFlowDuty+0x274>)
 8008f3a:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8008f3e:	f107 0108 	add.w	r1, r7, #8
 8008f42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f46:	f7f7 fb57 	bl	80005f8 <__aeabi_dmul>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8008f52:	4b65      	ldr	r3, [pc, #404]	; (80090e8 <scaraFlowDuty+0x274>)
 8008f54:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8008f58:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			status2 = SCARA_STATUS_OK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8008f62:	e06d      	b.n	8009040 <scaraFlowDuty+0x1cc>
		}else if( DUTY_TRAJECTORY_LINEAR == myDUTY.task.trajectory_3d.trajectory_type){
 8008f64:	4b60      	ldr	r3, [pc, #384]	; (80090e8 <scaraFlowDuty+0x274>)
 8008f66:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d127      	bne.n	8008fbe <scaraFlowDuty+0x14a>
			s = time*myDUTY.task.trajectory_3d.linear.constant_v;
 8008f6e:	4b5e      	ldr	r3, [pc, #376]	; (80090e8 <scaraFlowDuty+0x274>)
 8008f70:	e9d3 019c 	ldrd	r0, r1, [r3, #624]	; 0x270
 8008f74:	f107 0308 	add.w	r3, r7, #8
 8008f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7c:	f7f7 fb3c 	bl	80005f8 <__aeabi_dmul>
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	f107 0110 	add.w	r1, r7, #16
 8008f88:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8008f8c:	4b56      	ldr	r3, [pc, #344]	; (80090e8 <scaraFlowDuty+0x274>)
 8008f8e:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8008f92:	f107 0108 	add.w	r1, r7, #8
 8008f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f9a:	f7f7 fb2d 	bl	80005f8 <__aeabi_dmul>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8008fa6:	4b50      	ldr	r3, [pc, #320]	; (80090e8 <scaraFlowDuty+0x274>)
 8008fa8:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8008fac:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			status1 = SCARA_STATUS_OK;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status2 = SCARA_STATUS_OK;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8008fbc:	e040      	b.n	8009040 <scaraFlowDuty+0x1cc>
		}else if(DUTY_TRAJECTORY_GCODE_LSPB == myDUTY.task.trajectory_3d.trajectory_type){
 8008fbe:	4b4a      	ldr	r3, [pc, #296]	; (80090e8 <scaraFlowDuty+0x274>)
 8008fc0:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008fc4:	2b03      	cmp	r3, #3
 8008fc6:	d139      	bne.n	800903c <scaraFlowDuty+0x1c8>
			scaraFlowGCODE(&s, time);
 8008fc8:	f107 0308 	add.w	r3, r7, #8
 8008fcc:	f107 0210 	add.w	r2, r7, #16
 8008fd0:	ed93 0b00 	vldr	d0, [r3]
 8008fd4:	4610      	mov	r0, r2
 8008fd6:	f7ff fc9f 	bl	8008918 <scaraFlowGCODE>
			s -= accumulate_s;
 8008fda:	f107 0310 	add.w	r3, r7, #16
 8008fde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008fe2:	4b44      	ldr	r3, [pc, #272]	; (80090f4 <scaraFlowDuty+0x280>)
 8008fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe8:	f7f7 f94e 	bl	8000288 <__aeabi_dsub>
 8008fec:	4602      	mov	r2, r0
 8008fee:	460b      	mov	r3, r1
 8008ff0:	f107 0110 	add.w	r1, r7, #16
 8008ff4:	e9c1 2300 	strd	r2, r3, [r1]
			//LOG_REPORT1("s watcher:", s, time);
			angle = myDUTY.task.trajectory_roll.linear.constant_v*(time - last_T);
 8008ff8:	4b3b      	ldr	r3, [pc, #236]	; (80090e8 <scaraFlowDuty+0x274>)
 8008ffa:	e9d3 45fc 	ldrd	r4, r5, [r3, #1008]	; 0x3f0
 8008ffe:	4b3e      	ldr	r3, [pc, #248]	; (80090f8 <scaraFlowDuty+0x284>)
 8009000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009004:	f107 0108 	add.w	r1, r7, #8
 8009008:	e9d1 0100 	ldrd	r0, r1, [r1]
 800900c:	f7f7 f93c 	bl	8000288 <__aeabi_dsub>
 8009010:	4602      	mov	r2, r0
 8009012:	460b      	mov	r3, r1
 8009014:	4620      	mov	r0, r4
 8009016:	4629      	mov	r1, r5
 8009018:	f7f7 faee 	bl	80005f8 <__aeabi_dmul>
 800901c:	4602      	mov	r2, r0
 800901e:	460b      	mov	r3, r1
 8009020:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009024:	4b30      	ldr	r3, [pc, #192]	; (80090e8 <scaraFlowDuty+0x274>)
 8009026:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 800902a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			status1 = SCARA_STATUS_OK;
 800902e:	2300      	movs	r3, #0
 8009030:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status2 = SCARA_STATUS_OK;
 8009034:	2300      	movs	r3, #0
 8009036:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 800903a:	e001      	b.n	8009040 <scaraFlowDuty+0x1cc>
//			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
//			status1 = SCARA_STATUS_OK;
//			status2 = SCARA_STATUS_OK;
//		}
		else{
			return SCARA_STATUS_ERROR_TRAJECTORY;
 800903c:	2305      	movs	r3, #5
 800903e:	e286      	b.n	800954e <scaraFlowDuty+0x6da>
		}

		if ( SCARA_STATUS_OK != status1) {
 8009040:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009044:	2b00      	cmp	r3, #0
 8009046:	d002      	beq.n	800904e <scaraFlowDuty+0x1da>
			return status1;
 8009048:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800904c:	e27f      	b.n	800954e <scaraFlowDuty+0x6da>
		}
		if ( SCARA_STATUS_OK != status2) {
 800904e:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8009052:	2b00      	cmp	r3, #0
 8009054:	d002      	beq.n	800905c <scaraFlowDuty+0x1e8>
			return status2;
 8009056:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800905a:	e278      	b.n	800954e <scaraFlowDuty+0x6da>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 800905c:	4b22      	ldr	r3, [pc, #136]	; (80090e8 <scaraFlowDuty+0x274>)
 800905e:	7a1b      	ldrb	r3, [r3, #8]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d11d      	bne.n	80090a0 <scaraFlowDuty+0x22c>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 8009064:	f107 0310 	add.w	r3, r7, #16
 8009068:	ed93 7b00 	vldr	d7, [r3]
 800906c:	eeb0 0a47 	vmov.f32	s0, s14
 8009070:	eef0 0a67 	vmov.f32	s1, s15
 8009074:	4821      	ldr	r0, [pc, #132]	; (80090fc <scaraFlowDuty+0x288>)
 8009076:	f000 fa77 	bl	8009568 <scaraFlowLine>
 800907a:	4603      	mov	r3, r0
 800907c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			x = myDUTY.task.path.line.x_current;
 8009080:	4b19      	ldr	r3, [pc, #100]	; (80090e8 <scaraFlowDuty+0x274>)
 8009082:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8009086:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			y = myDUTY.task.path.line.y_current;
 800908a:	4b17      	ldr	r3, [pc, #92]	; (80090e8 <scaraFlowDuty+0x274>)
 800908c:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8009090:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			z = myDUTY.task.path.line.z_current;
 8009094:	4b14      	ldr	r3, [pc, #80]	; (80090e8 <scaraFlowDuty+0x274>)
 8009096:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800909a:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
 800909e:	e031      	b.n	8009104 <scaraFlowDuty+0x290>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 80090a0:	4b11      	ldr	r3, [pc, #68]	; (80090e8 <scaraFlowDuty+0x274>)
 80090a2:	7a1b      	ldrb	r3, [r3, #8]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d11d      	bne.n	80090e4 <scaraFlowDuty+0x270>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 80090a8:	f107 0310 	add.w	r3, r7, #16
 80090ac:	ed93 7b00 	vldr	d7, [r3]
 80090b0:	eeb0 0a47 	vmov.f32	s0, s14
 80090b4:	eef0 0a67 	vmov.f32	s1, s15
 80090b8:	4811      	ldr	r0, [pc, #68]	; (8009100 <scaraFlowDuty+0x28c>)
 80090ba:	f000 fadd 	bl	8009678 <scaraFlowCircle>
 80090be:	4603      	mov	r3, r0
 80090c0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			x = myDUTY.task.path.circle.x_current;
 80090c4:	4b08      	ldr	r3, [pc, #32]	; (80090e8 <scaraFlowDuty+0x274>)
 80090c6:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 80090ca:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			y = myDUTY.task.path.circle.y_current;
 80090ce:	4b06      	ldr	r3, [pc, #24]	; (80090e8 <scaraFlowDuty+0x274>)
 80090d0:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 80090d4:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			z = myDUTY.task.path.circle.z_current;
 80090d8:	4b03      	ldr	r3, [pc, #12]	; (80090e8 <scaraFlowDuty+0x274>)
 80090da:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 80090de:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
 80090e2:	e00f      	b.n	8009104 <scaraFlowDuty+0x290>
//			x = myDUTY.task.path.line.x_current;
//			y = myDUTY.task.path.line.y_current;
//			z = myDUTY.task.path.line.z0;
//		}
		else {
			return SCARA_STATUS_ERROR_TASK;
 80090e4:	2303      	movs	r3, #3
 80090e6:	e232      	b.n	800954e <scaraFlowDuty+0x6da>
 80090e8:	2000ff40 	.word	0x2000ff40
 80090ec:	20010058 	.word	0x20010058
 80090f0:	200100d8 	.word	0x200100d8
 80090f4:	200085d8 	.word	0x200085d8
 80090f8:	2000fd48 	.word	0x2000fd48
 80090fc:	2000ff50 	.word	0x2000ff50
 8009100:	2000ffc0 	.word	0x2000ffc0
		}

		positionCompute.x 		= x;
 8009104:	f107 0118 	add.w	r1, r7, #24
 8009108:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800910c:	e9c1 2308 	strd	r2, r3, [r1, #32]
		positionCompute.y		= y;
 8009110:	f107 0118 	add.w	r1, r7, #24
 8009114:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8009118:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		positionCompute.z 		= z;
 800911c:	f107 0118 	add.w	r1, r7, #24
 8009120:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8009124:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 8009128:	4b9c      	ldr	r3, [pc, #624]	; (800939c <scaraFlowDuty+0x528>)
 800912a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800912e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009132:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 8009136:	4618      	mov	r0, r3
 8009138:	f7f7 f9f4 	bl	8000524 <__aeabi_i2d>
 800913c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8009140:	f7f7 fa5a 	bl	80005f8 <__aeabi_dmul>
 8009144:	4602      	mov	r2, r0
 8009146:	460b      	mov	r3, r1
 8009148:	4620      	mov	r0, r4
 800914a:	4629      	mov	r1, r5
 800914c:	f7f7 f89e 	bl	800028c <__adddf3>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	f107 0118 	add.w	r1, r7, #24
 8009158:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

		positionCompute.q		= s;
 800915c:	f107 0310 	add.w	r3, r7, #16
 8009160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009164:	f107 0118 	add.w	r1, r7, #24
 8009168:	e9c1 2300 	strd	r2, r3, [r1]
//		positionCompute.v_3d    = v;
//		positionCompute.v_roll  = v_angle;

//		positionCompute.total_time = myDUTY.time_total;
//		positionCompute.t		= time;
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 800916c:	f107 0418 	add.w	r4, r7, #24
 8009170:	4668      	mov	r0, sp
 8009172:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009176:	2290      	movs	r2, #144	; 0x90
 8009178:	4619      	mov	r1, r3
 800917a:	f00c f839 	bl	80151f0 <memcpy>
 800917e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009182:	cb0c      	ldmia	r3, {r2, r3}
 8009184:	4620      	mov	r0, r4
 8009186:	f7fb ffeb 	bl	8005160 <kinematicInverse>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d101      	bne.n	8009194 <scaraFlowDuty+0x320>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8009190:	2307      	movs	r3, #7
 8009192:	e1dc      	b.n	800954e <scaraFlowDuty+0x6da>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8009194:	f107 0118 	add.w	r1, r7, #24
 8009198:	1d3b      	adds	r3, r7, #4
 800919a:	2298      	movs	r2, #152	; 0x98
 800919c:	6818      	ldr	r0, [r3, #0]
 800919e:	f00c f827 	bl	80151f0 <memcpy>
 80091a2:	e1d3      	b.n	800954c <scaraFlowDuty+0x6d8>
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 80091a4:	4b7d      	ldr	r3, [pc, #500]	; (800939c <scaraFlowDuty+0x528>)
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	f040 81cd 	bne.w	8009548 <scaraFlowDuty+0x6d4>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 80091ae:	4b7b      	ldr	r3, [pc, #492]	; (800939c <scaraFlowDuty+0x528>)
 80091b0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d174      	bne.n	80092a2 <scaraFlowDuty+0x42e>
			status1 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[0].lspb), time);
 80091b8:	f107 0308 	add.w	r3, r7, #8
 80091bc:	ed93 0b00 	vldr	d0, [r3]
 80091c0:	4877      	ldr	r0, [pc, #476]	; (80093a0 <scaraFlowDuty+0x52c>)
 80091c2:	f7ff fa17 	bl	80085f4 <scaraFlowLSPB1>
 80091c6:	4603      	mov	r3, r0
 80091c8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status2 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[1].lspb), time);
 80091cc:	f107 0308 	add.w	r3, r7, #8
 80091d0:	ed93 0b00 	vldr	d0, [r3]
 80091d4:	4873      	ldr	r0, [pc, #460]	; (80093a4 <scaraFlowDuty+0x530>)
 80091d6:	f7ff fa0d 	bl	80085f4 <scaraFlowLSPB1>
 80091da:	4603      	mov	r3, r0
 80091dc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
			status3 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[2].lspb), time);
 80091e0:	f107 0308 	add.w	r3, r7, #8
 80091e4:	ed93 0b00 	vldr	d0, [r3]
 80091e8:	486f      	ldr	r0, [pc, #444]	; (80093a8 <scaraFlowDuty+0x534>)
 80091ea:	f7ff fa03 	bl	80085f4 <scaraFlowLSPB1>
 80091ee:	4603      	mov	r3, r0
 80091f0:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
			status4 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[3].lspb), time);
 80091f4:	f107 0308 	add.w	r3, r7, #8
 80091f8:	ed93 0b00 	vldr	d0, [r3]
 80091fc:	486b      	ldr	r0, [pc, #428]	; (80093ac <scaraFlowDuty+0x538>)
 80091fe:	f7ff f9f9 	bl	80085f4 <scaraFlowLSPB1>
 8009202:	4603      	mov	r3, r0
 8009204:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 8009208:	4b64      	ldr	r3, [pc, #400]	; (800939c <scaraFlowDuty+0x528>)
 800920a:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800920e:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 8009212:	4b62      	ldr	r3, [pc, #392]	; (800939c <scaraFlowDuty+0x528>)
 8009214:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8009218:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 800921c:	4b5f      	ldr	r3, [pc, #380]	; (800939c <scaraFlowDuty+0x528>)
 800921e:	f893 3720 	ldrb.w	r3, [r3, #1824]	; 0x720
 8009222:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 8009226:	4b5d      	ldr	r3, [pc, #372]	; (800939c <scaraFlowDuty+0x528>)
 8009228:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
 800922c:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 8009230:	4b5a      	ldr	r3, [pc, #360]	; (800939c <scaraFlowDuty+0x528>)
 8009232:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8009236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923a:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 800923e:	4b57      	ldr	r3, [pc, #348]	; (800939c <scaraFlowDuty+0x528>)
 8009240:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8009244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009248:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 800924c:	4b53      	ldr	r3, [pc, #332]	; (800939c <scaraFlowDuty+0x528>)
 800924e:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 8009252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009256:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 800925a:	4b50      	ldr	r3, [pc, #320]	; (800939c <scaraFlowDuty+0x528>)
 800925c:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8009260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009264:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 8009268:	4b4c      	ldr	r3, [pc, #304]	; (800939c <scaraFlowDuty+0x528>)
 800926a:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 800926e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009272:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 8009276:	4b49      	ldr	r3, [pc, #292]	; (800939c <scaraFlowDuty+0x528>)
 8009278:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 800927c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009280:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 8009284:	4b45      	ldr	r3, [pc, #276]	; (800939c <scaraFlowDuty+0x528>)
 8009286:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 800928a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928e:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 8009292:	4b42      	ldr	r3, [pc, #264]	; (800939c <scaraFlowDuty+0x528>)
 8009294:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8009298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929c:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
 80092a0:	e05f      	b.n	8009362 <scaraFlowDuty+0x4ee>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 80092a2:	4b3e      	ldr	r3, [pc, #248]	; (800939c <scaraFlowDuty+0x528>)
 80092a4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d158      	bne.n	800935e <scaraFlowDuty+0x4ea>
			status1 = scaraFLowScurve1(&(myDUTY.joint.trajectory[0].scurve), time);
 80092ac:	f107 0308 	add.w	r3, r7, #8
 80092b0:	ed93 0b00 	vldr	d0, [r3]
 80092b4:	483e      	ldr	r0, [pc, #248]	; (80093b0 <scaraFlowDuty+0x53c>)
 80092b6:	f7ff fc0b 	bl	8008ad0 <scaraFLowScurve1>
 80092ba:	4603      	mov	r3, r0
 80092bc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status2 = scaraFLowScurve1(&(myDUTY.joint.trajectory[1].scurve), time);
 80092c0:	f107 0308 	add.w	r3, r7, #8
 80092c4:	ed93 0b00 	vldr	d0, [r3]
 80092c8:	483a      	ldr	r0, [pc, #232]	; (80093b4 <scaraFlowDuty+0x540>)
 80092ca:	f7ff fc01 	bl	8008ad0 <scaraFLowScurve1>
 80092ce:	4603      	mov	r3, r0
 80092d0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
			status3 = scaraFLowScurve1(&(myDUTY.joint.trajectory[2].scurve), time);
 80092d4:	f107 0308 	add.w	r3, r7, #8
 80092d8:	ed93 0b00 	vldr	d0, [r3]
 80092dc:	4836      	ldr	r0, [pc, #216]	; (80093b8 <scaraFlowDuty+0x544>)
 80092de:	f7ff fbf7 	bl	8008ad0 <scaraFLowScurve1>
 80092e2:	4603      	mov	r3, r0
 80092e4:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
			status4 = scaraFLowScurve1(&(myDUTY.joint.trajectory[3].scurve), time);
 80092e8:	f107 0308 	add.w	r3, r7, #8
 80092ec:	ed93 0b00 	vldr	d0, [r3]
 80092f0:	4832      	ldr	r0, [pc, #200]	; (80093bc <scaraFlowDuty+0x548>)
 80092f2:	f7ff fbed 	bl	8008ad0 <scaraFLowScurve1>
 80092f6:	4603      	mov	r3, r0
 80092f8:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 80092fc:	4b27      	ldr	r3, [pc, #156]	; (800939c <scaraFlowDuty+0x528>)
 80092fe:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 8009302:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 8009306:	4b25      	ldr	r3, [pc, #148]	; (800939c <scaraFlowDuty+0x528>)
 8009308:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 800930c:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 8009310:	4b22      	ldr	r3, [pc, #136]	; (800939c <scaraFlowDuty+0x528>)
 8009312:	f893 37a0 	ldrb.w	r3, [r3, #1952]	; 0x7a0
 8009316:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 800931a:	4b20      	ldr	r3, [pc, #128]	; (800939c <scaraFlowDuty+0x528>)
 800931c:	f893 3920 	ldrb.w	r3, [r3, #2336]	; 0x920
 8009320:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 8009324:	4b1d      	ldr	r3, [pc, #116]	; (800939c <scaraFlowDuty+0x528>)
 8009326:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 800932a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932e:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 8009332:	4b1a      	ldr	r3, [pc, #104]	; (800939c <scaraFlowDuty+0x528>)
 8009334:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 8009338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 8009340:	4b16      	ldr	r3, [pc, #88]	; (800939c <scaraFlowDuty+0x528>)
 8009342:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8009346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934a:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 800934e:	4b13      	ldr	r3, [pc, #76]	; (800939c <scaraFlowDuty+0x528>)
 8009350:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8009354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009358:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 800935c:	e001      	b.n	8009362 <scaraFlowDuty+0x4ee>
//			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
//			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
//			v3 = myDUTY.joint.trajectory[3].scurve.v_current;

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 800935e:	2305      	movs	r3, #5
 8009360:	e0f5      	b.n	800954e <scaraFlowDuty+0x6da>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8009362:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009366:	2b00      	cmp	r3, #0
 8009368:	d002      	beq.n	8009370 <scaraFlowDuty+0x4fc>
			return status1;
 800936a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800936e:	e0ee      	b.n	800954e <scaraFlowDuty+0x6da>
		}
		if ( SCARA_STATUS_OK != status2) {
 8009370:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <scaraFlowDuty+0x50a>
			return status2;
 8009378:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800937c:	e0e7      	b.n	800954e <scaraFlowDuty+0x6da>
		}
		if ( SCARA_STATUS_OK != status3) {
 800937e:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8009382:	2b00      	cmp	r3, #0
 8009384:	d002      	beq.n	800938c <scaraFlowDuty+0x518>
			return status3;
 8009386:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800938a:	e0e0      	b.n	800954e <scaraFlowDuty+0x6da>
		}
		if ( SCARA_STATUS_OK != status4) {
 800938c:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8009390:	2b00      	cmp	r3, #0
 8009392:	d015      	beq.n	80093c0 <scaraFlowDuty+0x54c>
			return status4;
 8009394:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8009398:	e0d9      	b.n	800954e <scaraFlowDuty+0x6da>
 800939a:	bf00      	nop
 800939c:	2000ff40 	.word	0x2000ff40
 80093a0:	20010360 	.word	0x20010360
 80093a4:	200104e0 	.word	0x200104e0
 80093a8:	20010660 	.word	0x20010660
 80093ac:	200107e0 	.word	0x200107e0
 80093b0:	200103e0 	.word	0x200103e0
 80093b4:	20010560 	.word	0x20010560
 80093b8:	200106e0 	.word	0x200106e0
 80093bc:	20010860 	.word	0x20010860
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 80093c0:	4b67      	ldr	r3, [pc, #412]	; (8009560 <scaraFlowDuty+0x6ec>)
 80093c2:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 80093c6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80093ca:	f997 30bf 	ldrsb.w	r3, [r7, #191]	; 0xbf
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7f7 f8a8 	bl	8000524 <__aeabi_i2d>
 80093d4:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80093d8:	f7f7 f90e 	bl	80005f8 <__aeabi_dmul>
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	4620      	mov	r0, r4
 80093e2:	4629      	mov	r1, r5
 80093e4:	f7f6 ff52 	bl	800028c <__adddf3>
 80093e8:	4602      	mov	r2, r0
 80093ea:	460b      	mov	r3, r1
 80093ec:	f107 0118 	add.w	r1, r7, #24
 80093f0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 80093f4:	4b5a      	ldr	r3, [pc, #360]	; (8009560 <scaraFlowDuty+0x6ec>)
 80093f6:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 80093fa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80093fe:	f997 30be 	ldrsb.w	r3, [r7, #190]	; 0xbe
 8009402:	4618      	mov	r0, r3
 8009404:	f7f7 f88e 	bl	8000524 <__aeabi_i2d>
 8009408:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800940c:	f7f7 f8f4 	bl	80005f8 <__aeabi_dmul>
 8009410:	4602      	mov	r2, r0
 8009412:	460b      	mov	r3, r1
 8009414:	4620      	mov	r0, r4
 8009416:	4629      	mov	r1, r5
 8009418:	f7f6 ff38 	bl	800028c <__adddf3>
 800941c:	4602      	mov	r2, r0
 800941e:	460b      	mov	r3, r1
 8009420:	f107 0118 	add.w	r1, r7, #24
 8009424:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 8009428:	4b4d      	ldr	r3, [pc, #308]	; (8009560 <scaraFlowDuty+0x6ec>)
 800942a:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800942e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009432:	f997 30bd 	ldrsb.w	r3, [r7, #189]	; 0xbd
 8009436:	4618      	mov	r0, r3
 8009438:	f7f7 f874 	bl	8000524 <__aeabi_i2d>
 800943c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8009440:	f7f7 f8da 	bl	80005f8 <__aeabi_dmul>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	4620      	mov	r0, r4
 800944a:	4629      	mov	r1, r5
 800944c:	f7f6 ff1e 	bl	800028c <__adddf3>
 8009450:	4602      	mov	r2, r0
 8009452:	460b      	mov	r3, r1
 8009454:	f107 0118 	add.w	r1, r7, #24
 8009458:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 800945c:	4b40      	ldr	r3, [pc, #256]	; (8009560 <scaraFlowDuty+0x6ec>)
 800945e:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8009462:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009466:	f997 30bc 	ldrsb.w	r3, [r7, #188]	; 0xbc
 800946a:	4618      	mov	r0, r3
 800946c:	f7f7 f85a 	bl	8000524 <__aeabi_i2d>
 8009470:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8009474:	f7f7 f8c0 	bl	80005f8 <__aeabi_dmul>
 8009478:	4602      	mov	r2, r0
 800947a:	460b      	mov	r3, r1
 800947c:	4620      	mov	r0, r4
 800947e:	4629      	mov	r1, r5
 8009480:	f7f6 ff04 	bl	800028c <__adddf3>
 8009484:	4602      	mov	r2, r0
 8009486:	460b      	mov	r3, r1
 8009488:	f107 0118 	add.w	r1, r7, #24
 800948c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

		positionCompute.v_theta1 	= v0;
 8009490:	f107 0118 	add.w	r1, r7, #24
 8009494:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8009498:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		positionCompute.v_theta2 	= v1;
 800949c:	f107 0118 	add.w	r1, r7, #24
 80094a0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80094a4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		positionCompute.v_d3 		= v2;
 80094a8:	f107 0118 	add.w	r1, r7, #24
 80094ac:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80094b0:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		positionCompute.v_theta4 	= v3;
 80094b4:	f107 0118 	add.w	r1, r7, #24
 80094b8:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80094bc:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
//		positionCompute.q_theta1 = s0;
//		positionCompute.q_theta2 = s1;
//		positionCompute.q_d3	 = s2;
//		positionCompute.q_theta4 = s3;

		positionCompute.total_time = myDUTY.time_total;
 80094c0:	4b27      	ldr	r3, [pc, #156]	; (8009560 <scaraFlowDuty+0x6ec>)
 80094c2:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80094c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ca:	f107 0118 	add.w	r1, r7, #24
 80094ce:	e9c1 2306 	strd	r2, r3, [r1, #24]
		positionCompute.t		= time;
 80094d2:	f107 0118 	add.w	r1, r7, #24
 80094d6:	f107 0308 	add.w	r3, r7, #8
 80094da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094de:	e9c1 2304 	strd	r2, r3, [r1, #16]
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 80094e2:	f107 0318 	add.w	r3, r7, #24
 80094e6:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80094ea:	f107 0318 	add.w	r3, r7, #24
 80094ee:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80094f2:	f107 0318 	add.w	r3, r7, #24
 80094f6:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 80094fa:	f107 0318 	add.w	r3, r7, #24
 80094fe:	ed93 4b16 	vldr	d4, [r3, #88]	; 0x58
 8009502:	eeb0 3a44 	vmov.f32	s6, s8
 8009506:	eef0 3a64 	vmov.f32	s7, s9
 800950a:	eeb0 2a45 	vmov.f32	s4, s10
 800950e:	eef0 2a65 	vmov.f32	s5, s11
 8009512:	eeb0 1a46 	vmov.f32	s2, s12
 8009516:	eef0 1a66 	vmov.f32	s3, s13
 800951a:	eeb0 0a47 	vmov.f32	s0, s14
 800951e:	eef0 0a67 	vmov.f32	s1, s15
 8009522:	f000 f931 	bl	8009788 <scaraCheckWorkSpace4>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d001      	beq.n	8009530 <scaraFlowDuty+0x6bc>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800952c:	2307      	movs	r3, #7
 800952e:	e00e      	b.n	800954e <scaraFlowDuty+0x6da>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8009530:	f107 0118 	add.w	r1, r7, #24
 8009534:	1d3b      	adds	r3, r7, #4
 8009536:	2298      	movs	r2, #152	; 0x98
 8009538:	6818      	ldr	r0, [r3, #0]
 800953a:	f00b fe59 	bl	80151f0 <memcpy>
		}
		kinematicForward(pos_Next);
 800953e:	1d3b      	adds	r3, r7, #4
 8009540:	6818      	ldr	r0, [r3, #0]
 8009542:	f7fb fce9 	bl	8004f18 <kinematicForward>
 8009546:	e001      	b.n	800954c <scaraFlowDuty+0x6d8>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8009548:	2302      	movs	r3, #2
 800954a:	e000      	b.n	800954e <scaraFlowDuty+0x6da>
	}

	return SCARA_STATUS_OK;
 800954c:	2300      	movs	r3, #0
}
 800954e:	4618      	mov	r0, r3
 8009550:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009554:	46bd      	mov	sp, r7
 8009556:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800955a:	b002      	add	sp, #8
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	2000ff40 	.word	0x2000ff40
 8009564:	00000000 	.word	0x00000000

08009568 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 8009568:	b5b0      	push	{r4, r5, r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800957a:	a33d      	add	r3, pc, #244	; (adr r3, 8009670 <scaraFlowLine+0x108>)
 800957c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009580:	f7f7 faca 	bl	8000b18 <__aeabi_dcmpgt>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d05a      	beq.n	8009640 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8009596:	e9d7 2300 	ldrd	r2, r3, [r7]
 800959a:	f7f7 f82d 	bl	80005f8 <__aeabi_dmul>
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
 80095a2:	4610      	mov	r0, r2
 80095a4:	4619      	mov	r1, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80095ac:	f7f7 f94e 	bl	800084c <__aeabi_ddiv>
 80095b0:	4602      	mov	r2, r0
 80095b2:	460b      	mov	r3, r1
 80095b4:	4620      	mov	r0, r4
 80095b6:	4629      	mov	r1, r5
 80095b8:	f7f6 fe68 	bl	800028c <__adddf3>
 80095bc:	4602      	mov	r2, r0
 80095be:	460b      	mov	r3, r1
 80095c0:	68f9      	ldr	r1, [r7, #12]
 80095c2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80095d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095d6:	f7f7 f80f 	bl	80005f8 <__aeabi_dmul>
 80095da:	4602      	mov	r2, r0
 80095dc:	460b      	mov	r3, r1
 80095de:	4610      	mov	r0, r2
 80095e0:	4619      	mov	r1, r3
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80095e8:	f7f7 f930 	bl	800084c <__aeabi_ddiv>
 80095ec:	4602      	mov	r2, r0
 80095ee:	460b      	mov	r3, r1
 80095f0:	4620      	mov	r0, r4
 80095f2:	4629      	mov	r1, r5
 80095f4:	f7f6 fe4a 	bl	800028c <__adddf3>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	68f9      	ldr	r1, [r7, #12]
 80095fe:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800960e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009612:	f7f6 fff1 	bl	80005f8 <__aeabi_dmul>
 8009616:	4602      	mov	r2, r0
 8009618:	460b      	mov	r3, r1
 800961a:	4610      	mov	r0, r2
 800961c:	4619      	mov	r1, r3
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009624:	f7f7 f912 	bl	800084c <__aeabi_ddiv>
 8009628:	4602      	mov	r2, r0
 800962a:	460b      	mov	r3, r1
 800962c:	4620      	mov	r0, r4
 800962e:	4629      	mov	r1, r5
 8009630:	f7f6 fe2c 	bl	800028c <__adddf3>
 8009634:	4602      	mov	r2, r0
 8009636:	460b      	mov	r3, r1
 8009638:	68f9      	ldr	r1, [r7, #12]
 800963a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800963e:	e011      	b.n	8009664 <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009646:	68f9      	ldr	r1, [r7, #12]
 8009648:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		line->y_current = line->y1;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8009652:	68f9      	ldr	r1, [r7, #12]
 8009654:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		line->z_current = line->z1;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800965e:	68f9      	ldr	r1, [r7, #12]
 8009660:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bdb0      	pop	{r4, r5, r7, pc}
 800966e:	bf00      	nop
 8009670:	47ae147b 	.word	0x47ae147b
 8009674:	3f847ae1 	.word	0x3f847ae1

08009678 <scaraFlowCircle>:
	line->y_current = (a*bezier_y_coeffs[0] + b*bezier_y_coeffs[1] + c*bezier_y_coeffs[2])/(a + 2*bezier_wc*b+c);
	return SCARA_STATUS_OK;
}

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 8009678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800967c:	b086      	sub	sp, #24
 800967e:	af00      	add	r7, sp, #0
 8009680:	60f8      	str	r0, [r7, #12]
 8009682:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800968c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009690:	f7f7 f8dc 	bl	800084c <__aeabi_ddiv>
 8009694:	4602      	mov	r2, r0
 8009696:	460b      	mov	r3, r1
 8009698:	e9c7 2304 	strd	r2, r3, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f993 3000 	ldrsb.w	r3, [r3]
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7f6 ff35 	bl	8000524 <__aeabi_i2d>
 80096ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80096be:	f7f6 ff9b 	bl	80005f8 <__aeabi_dmul>
 80096c2:	4602      	mov	r2, r0
 80096c4:	460b      	mov	r3, r1
 80096c6:	4650      	mov	r0, sl
 80096c8:	4659      	mov	r1, fp
 80096ca:	f7f6 fddf 	bl	800028c <__adddf3>
 80096ce:	4602      	mov	r2, r0
 80096d0:	460b      	mov	r3, r1
 80096d2:	ec43 2b17 	vmov	d7, r2, r3
 80096d6:	eeb0 0a47 	vmov.f32	s0, s14
 80096da:	eef0 0a67 	vmov.f32	s1, s15
 80096de:	f010 fa67 	bl	8019bb0 <cos>
 80096e2:	ec53 2b10 	vmov	r2, r3, d0
 80096e6:	4640      	mov	r0, r8
 80096e8:	4649      	mov	r1, r9
 80096ea:	f7f6 ff85 	bl	80005f8 <__aeabi_dmul>
 80096ee:	4602      	mov	r2, r0
 80096f0:	460b      	mov	r3, r1
 80096f2:	4620      	mov	r0, r4
 80096f4:	4629      	mov	r1, r5
 80096f6:	f7f6 fdc9 	bl	800028c <__adddf3>
 80096fa:	4602      	mov	r2, r0
 80096fc:	460b      	mov	r3, r1
 80096fe:	68f9      	ldr	r1, [r7, #12]
 8009700:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f993 3000 	ldrsb.w	r3, [r3]
 800971c:	4618      	mov	r0, r3
 800971e:	f7f6 ff01 	bl	8000524 <__aeabi_i2d>
 8009722:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009726:	f7f6 ff67 	bl	80005f8 <__aeabi_dmul>
 800972a:	4602      	mov	r2, r0
 800972c:	460b      	mov	r3, r1
 800972e:	4650      	mov	r0, sl
 8009730:	4659      	mov	r1, fp
 8009732:	f7f6 fdab 	bl	800028c <__adddf3>
 8009736:	4602      	mov	r2, r0
 8009738:	460b      	mov	r3, r1
 800973a:	ec43 2b17 	vmov	d7, r2, r3
 800973e:	eeb0 0a47 	vmov.f32	s0, s14
 8009742:	eef0 0a67 	vmov.f32	s1, s15
 8009746:	f010 facb 	bl	8019ce0 <sin>
 800974a:	ec53 2b10 	vmov	r2, r3, d0
 800974e:	4640      	mov	r0, r8
 8009750:	4649      	mov	r1, r9
 8009752:	f7f6 ff51 	bl	80005f8 <__aeabi_dmul>
 8009756:	4602      	mov	r2, r0
 8009758:	460b      	mov	r3, r1
 800975a:	4620      	mov	r0, r4
 800975c:	4629      	mov	r1, r5
 800975e:	f7f6 fd95 	bl	800028c <__adddf3>
 8009762:	4602      	mov	r2, r0
 8009764:	460b      	mov	r3, r1
 8009766:	68f9      	ldr	r1, [r7, #12]
 8009768:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8009772:	68f9      	ldr	r1, [r7, #12]
 8009774:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

	return SCARA_STATUS_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3718      	adds	r7, #24
 800977e:	46bd      	mov	sp, r7
 8009780:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009784:	0000      	movs	r0, r0
	...

08009788 <scaraCheckWorkSpace4>:
	return SCARA_STATUS_OK;
}


/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 8009788:	b580      	push	{r7, lr}
 800978a:	b088      	sub	sp, #32
 800978c:	af00      	add	r7, sp, #0
 800978e:	ed87 0b06 	vstr	d0, [r7, #24]
 8009792:	ed87 1b04 	vstr	d1, [r7, #16]
 8009796:	ed87 2b02 	vstr	d2, [r7, #8]
 800979a:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0-0.1 || theta1 > LIM_MAX_J0+0.1) {
 800979e:	a335      	add	r3, pc, #212	; (adr r3, 8009874 <scaraCheckWorkSpace4+0xec>)
 80097a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80097a8:	f7f7 f998 	bl	8000adc <__aeabi_dcmplt>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d109      	bne.n	80097c6 <scaraCheckWorkSpace4+0x3e>
 80097b2:	a332      	add	r3, pc, #200	; (adr r3, 800987c <scaraCheckWorkSpace4+0xf4>)
 80097b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80097bc:	f7f7 f9ac 	bl	8000b18 <__aeabi_dcmpgt>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d001      	beq.n	80097ca <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80097c6:	2307      	movs	r3, #7
 80097c8:	e043      	b.n	8009852 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1-0.1 || theta2 > LIM_MAX_J1+0.1) {
 80097ca:	a32e      	add	r3, pc, #184	; (adr r3, 8009884 <scaraCheckWorkSpace4+0xfc>)
 80097cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80097d4:	f7f7 f982 	bl	8000adc <__aeabi_dcmplt>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d109      	bne.n	80097f2 <scaraCheckWorkSpace4+0x6a>
 80097de:	a32b      	add	r3, pc, #172	; (adr r3, 800988c <scaraCheckWorkSpace4+0x104>)
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80097e8:	f7f7 f996 	bl	8000b18 <__aeabi_dcmpgt>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d001      	beq.n	80097f6 <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80097f2:	2307      	movs	r3, #7
 80097f4:	e02d      	b.n	8009852 <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 80097f6:	f04f 0200 	mov.w	r2, #0
 80097fa:	f04f 0300 	mov.w	r3, #0
 80097fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009802:	f7f7 f96b 	bl	8000adc <__aeabi_dcmplt>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d109      	bne.n	8009820 <scaraCheckWorkSpace4+0x98>
 800980c:	f04f 0200 	mov.w	r2, #0
 8009810:	4b17      	ldr	r3, [pc, #92]	; (8009870 <scaraCheckWorkSpace4+0xe8>)
 8009812:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009816:	f7f7 f97f 	bl	8000b18 <__aeabi_dcmpgt>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d001      	beq.n	8009824 <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8009820:	2307      	movs	r3, #7
 8009822:	e016      	b.n	8009852 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3-0.1 || theta4 > LIM_MAX_J3+0.1) {
 8009824:	a30e      	add	r3, pc, #56	; (adr r3, 8009860 <scaraCheckWorkSpace4+0xd8>)
 8009826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800982e:	f7f7 f955 	bl	8000adc <__aeabi_dcmplt>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d109      	bne.n	800984c <scaraCheckWorkSpace4+0xc4>
 8009838:	a30b      	add	r3, pc, #44	; (adr r3, 8009868 <scaraCheckWorkSpace4+0xe0>)
 800983a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009842:	f7f7 f969 	bl	8000b18 <__aeabi_dcmpgt>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d001      	beq.n	8009850 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800984c:	2307      	movs	r3, #7
 800984e:	e000      	b.n	8009852 <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3720      	adds	r7, #32
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	f3af 8000 	nop.w
 8009860:	a7777778 	.word	0xa7777778
 8009864:	c0088956 	.word	0xc0088956
 8009868:	a7777778 	.word	0xa7777778
 800986c:	40088956 	.word	0x40088956
 8009870:	40590000 	.word	0x40590000
 8009874:	74444445 	.word	0x74444445
 8009878:	bff95623 	.word	0xbff95623
 800987c:	74444445 	.word	0x74444445
 8009880:	3ff95623 	.word	0x3ff95623
 8009884:	54cccccd 	.word	0x54cccccd
 8009888:	c003a649 	.word	0xc003a649
 800988c:	54cccccd 	.word	0x54cccccd
 8009890:	4003a649 	.word	0x4003a649
 8009894:	00000000 	.word	0x00000000

08009898 <scaraTestDuty>:
	double beta = asin(K*sin(alpha));
	return SCARA_STATUS_OK;
}

/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 8009898:	b5b0      	push	{r4, r5, r7, lr}
 800989a:	b0f6      	sub	sp, #472	; 0x1d8
 800989c:	af24      	add	r7, sp, #144	; 0x90
	int32_t sample_count;
	double run_time = 0;
 800989e:	f04f 0200 	mov.w	r2, #0
 80098a2:	f04f 0300 	mov.w	r3, #0
 80098a6:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 80098aa:	463b      	mov	r3, r7
 80098ac:	4a36      	ldr	r2, [pc, #216]	; (8009988 <scaraTestDuty+0xf0>)
 80098ae:	4618      	mov	r0, r3
 80098b0:	4611      	mov	r1, r2
 80098b2:	2398      	movs	r3, #152	; 0x98
 80098b4:	461a      	mov	r2, r3
 80098b6:	f00b fc9b 	bl	80151f0 <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 80098ba:	4b34      	ldr	r3, [pc, #208]	; (800998c <scaraTestDuty+0xf4>)
 80098bc:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80098c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80098c4:	a32e      	add	r3, pc, #184	; (adr r3, 8009980 <scaraTestDuty+0xe8>)
 80098c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ca:	f7f6 ffbf 	bl	800084c <__aeabi_ddiv>
 80098ce:	4602      	mov	r2, r0
 80098d0:	460b      	mov	r3, r1
 80098d2:	ec43 2b17 	vmov	d7, r2, r3
 80098d6:	eeb0 0a47 	vmov.f32	s0, s14
 80098da:	eef0 0a67 	vmov.f32	s1, s15
 80098de:	f010 f8e3 	bl	8019aa8 <ceil>
 80098e2:	ec53 2b10 	vmov	r2, r3, d0
 80098e6:	4610      	mov	r0, r2
 80098e8:	4619      	mov	r1, r3
 80098ea:	f7f7 f935 	bl	8000b58 <__aeabi_d2iz>
 80098ee:	4603      	mov	r3, r0
 80098f0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (int32_t i = 1; i < sample_count; i++) {
 80098f4:	2301      	movs	r3, #1
 80098f6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80098fa:	e032      	b.n	8009962 <scaraTestDuty+0xca>
		run_time += T_SAMPLING;
 80098fc:	a320      	add	r3, pc, #128	; (adr r3, 8009980 <scaraTestDuty+0xe8>)
 80098fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009902:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8009906:	f7f6 fcc1 	bl	800028c <__adddf3>
 800990a:	4602      	mov	r2, r0
 800990c:	460b      	mov	r3, r1
 800990e:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 8009912:	463c      	mov	r4, r7
 8009914:	f107 0598 	add.w	r5, r7, #152	; 0x98
 8009918:	4668      	mov	r0, sp
 800991a:	f104 0308 	add.w	r3, r4, #8
 800991e:	2290      	movs	r2, #144	; 0x90
 8009920:	4619      	mov	r1, r3
 8009922:	f00b fc65 	bl	80151f0 <memcpy>
 8009926:	e894 000c 	ldmia.w	r4, {r2, r3}
 800992a:	4628      	mov	r0, r5
 800992c:	ed97 0b50 	vldr	d0, [r7, #320]	; 0x140
 8009930:	f7ff faa0 	bl	8008e74 <scaraFlowDuty>
 8009934:	4603      	mov	r3, r0
 8009936:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
		if (status != SCARA_STATUS_OK) {
 800993a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800993e:	2b00      	cmp	r3, #0
 8009940:	d002      	beq.n	8009948 <scaraTestDuty+0xb0>
			return status;
 8009942:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009946:	e013      	b.n	8009970 <scaraTestDuty+0xd8>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 8009948:	463a      	mov	r2, r7
 800994a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800994e:	4611      	mov	r1, r2
 8009950:	2298      	movs	r2, #152	; 0x98
 8009952:	4618      	mov	r0, r3
 8009954:	f00b fc4c 	bl	80151f0 <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 8009958:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800995c:	3301      	adds	r3, #1
 800995e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8009962:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8009966:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800996a:	429a      	cmp	r2, r3
 800996c:	dbc6      	blt.n	80098fc <scaraTestDuty+0x64>
	}
	return SCARA_STATUS_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8009976:	46bd      	mov	sp, r7
 8009978:	bdb0      	pop	{r4, r5, r7, pc}
 800997a:	bf00      	nop
 800997c:	f3af 8000 	nop.w
 8009980:	40000000 	.word	0x40000000
 8009984:	3f847ae1 	.word	0x3f847ae1
 8009988:	20010ab0 	.word	0x20010ab0
 800998c:	2000ff40 	.word	0x2000ff40

08009990 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 8009990:	b480      	push	{r7}
 8009992:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 8009994:	4b03      	ldr	r3, [pc, #12]	; (80099a4 <scaraSetScanFlag+0x14>)
 8009996:	2201      	movs	r2, #1
 8009998:	70da      	strb	r2, [r3, #3]
}
 800999a:	bf00      	nop
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr
 80099a4:	20004080 	.word	0x20004080

080099a8 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	4603      	mov	r3, r0
 80099b0:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 80099b2:	4a05      	ldr	r2, [pc, #20]	; (80099c8 <scaraSetOutput+0x20>)
 80099b4:	79fb      	ldrb	r3, [r7, #7]
 80099b6:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 80099b8:	79fb      	ldrb	r3, [r7, #7]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7fc fec4 	bl	8006748 <lowlayer_setOutput>
}
 80099c0:	bf00      	nop
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	20004080 	.word	0x20004080

080099cc <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	4603      	mov	r3, r0
 80099d4:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 80099d6:	4a04      	ldr	r2, [pc, #16]	; (80099e8 <scaraSetDutyState+0x1c>)
 80099d8:	79fb      	ldrb	r3, [r7, #7]
 80099da:	7093      	strb	r3, [r2, #2]
}
 80099dc:	bf00      	nop
 80099de:	370c      	adds	r7, #12
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr
 80099e8:	20004080 	.word	0x20004080

080099ec <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	4603      	mov	r3, r0
 80099f4:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 80099f6:	4a04      	ldr	r2, [pc, #16]	; (8009a08 <scaraSetMode+0x1c>)
 80099f8:	79fb      	ldrb	r3, [r7, #7]
 80099fa:	7053      	strb	r3, [r2, #1]
}
 80099fc:	bf00      	nop
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr
 8009a08:	20004080 	.word	0x20004080

08009a0c <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	4603      	mov	r3, r0
 8009a14:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 8009a16:	4a04      	ldr	r2, [pc, #16]	; (8009a28 <scaraSetMethod+0x1c>)
 8009a18:	79fb      	ldrb	r3, [r7, #7]
 8009a1a:	7013      	strb	r3, [r2, #0]
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr
 8009a28:	20004080 	.word	0x20004080

08009a2c <scaraUpdatePosition>:

void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
}

void				scaraUpdatePosition (SCARA_PositionTypeDef *pos) {
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
	memcpy(&positionNext, pos, sizeof(SCARA_PositionTypeDef));
 8009a34:	2298      	movs	r2, #152	; 0x98
 8009a36:	6879      	ldr	r1, [r7, #4]
 8009a38:	4803      	ldr	r0, [pc, #12]	; (8009a48 <scaraUpdatePosition+0x1c>)
 8009a3a:	f00b fbd9 	bl	80151f0 <memcpy>
}
 8009a3e:	bf00      	nop
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	20010be0 	.word	0x20010be0

08009a4c <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 8009a4c:	b480      	push	{r7}
 8009a4e:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 8009a50:	4b03      	ldr	r3, [pc, #12]	; (8009a60 <scaraGetMode+0x14>)
 8009a52:	785b      	ldrb	r3, [r3, #1]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	20004080 	.word	0x20004080

08009a64 <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 8009a64:	b480      	push	{r7}
 8009a66:	af00      	add	r7, sp, #0
	return mySCARA.method;
 8009a68:	4b03      	ldr	r3, [pc, #12]	; (8009a78 <scaraGetMethod+0x14>)
 8009a6a:	781b      	ldrb	r3, [r3, #0]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	20004080 	.word	0x20004080

08009a7c <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 8009a7c:	b480      	push	{r7}
 8009a7e:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 8009a80:	4b03      	ldr	r3, [pc, #12]	; (8009a90 <scaraGetDutyState+0x14>)
 8009a82:	789b      	ldrb	r3, [r3, #2]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	20004080 	.word	0x20004080

08009a94 <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 8009a94:	b480      	push	{r7}
 8009a96:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 8009a98:	4b03      	ldr	r3, [pc, #12]	; (8009aa8 <scaraIsScanLimit+0x14>)
 8009a9a:	78db      	ldrb	r3, [r3, #3]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop
 8009aa8:	20004080 	.word	0x20004080

08009aac <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total < run_time) {
 8009ab6:	4b09      	ldr	r3, [pc, #36]	; (8009adc <scaraIsFinish+0x30>)
 8009ab8:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8009abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ac4:	f7f7 f828 	bl	8000b18 <__aeabi_dcmpgt>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d001      	beq.n	8009ad2 <scaraIsFinish+0x26>
		return TRUE;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e000      	b.n	8009ad4 <scaraIsFinish+0x28>
	} else {
		return FALSE;
 8009ad2:	2300      	movs	r3, #0
	}
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	2000ff40 	.word	0x2000ff40

08009ae0 <scaraPosition_packaging>:


int32_t scaraPosition_packaging(uint8_t *data_packet, SCARA_PositionTypeDef position)
{
 8009ae0:	b082      	sub	sp, #8
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b084      	sub	sp, #16
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	f107 0118 	add.w	r1, r7, #24
 8009aee:	e881 000c 	stmia.w	r1, {r2, r3}
	int32_t cur_ptr = -4;
 8009af2:	f06f 0303 	mvn.w	r3, #3
 8009af6:	60fb      	str	r3, [r7, #12]
//	Append_Coordinate_Value((int32_t)(position.x*DATA_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
//	Append_Coordinate_Value((int32_t)(position.y*DATA_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
//	Append_Coordinate_Value((int32_t)(position.z*DATA_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
//	Append_Coordinate_Value((int32_t)(position.roll*DATA_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
	Append_Coordinate_Value((int32_t)(position.Theta1*DATA_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 8009af8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009afc:	a330      	add	r3, pc, #192	; (adr r3, 8009bc0 <scaraPosition_packaging+0xe0>)
 8009afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b02:	f7f6 fd79 	bl	80005f8 <__aeabi_dmul>
 8009b06:	4602      	mov	r2, r0
 8009b08:	460b      	mov	r3, r1
 8009b0a:	4610      	mov	r0, r2
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	f7f7 f823 	bl	8000b58 <__aeabi_d2iz>
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	3304      	adds	r3, #4
 8009b16:	60fb      	str	r3, [r7, #12]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	4619      	mov	r1, r3
 8009b20:	f000 f852 	bl	8009bc8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta2*DATA_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 8009b24:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009b28:	a325      	add	r3, pc, #148	; (adr r3, 8009bc0 <scaraPosition_packaging+0xe0>)
 8009b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2e:	f7f6 fd63 	bl	80005f8 <__aeabi_dmul>
 8009b32:	4602      	mov	r2, r0
 8009b34:	460b      	mov	r3, r1
 8009b36:	4610      	mov	r0, r2
 8009b38:	4619      	mov	r1, r3
 8009b3a:	f7f7 f80d 	bl	8000b58 <__aeabi_d2iz>
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	3304      	adds	r3, #4
 8009b42:	60fb      	str	r3, [r7, #12]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	4413      	add	r3, r2
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	f000 f83c 	bl	8009bc8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.D3*DATA_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 8009b50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009b54:	a31a      	add	r3, pc, #104	; (adr r3, 8009bc0 <scaraPosition_packaging+0xe0>)
 8009b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5a:	f7f6 fd4d 	bl	80005f8 <__aeabi_dmul>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	4610      	mov	r0, r2
 8009b64:	4619      	mov	r1, r3
 8009b66:	f7f6 fff7 	bl	8000b58 <__aeabi_d2iz>
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	3304      	adds	r3, #4
 8009b6e:	60fb      	str	r3, [r7, #12]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	4413      	add	r3, r2
 8009b76:	4619      	mov	r1, r3
 8009b78:	f000 f826 	bl	8009bc8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta4*DATA_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 8009b7c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8009b80:	a30f      	add	r3, pc, #60	; (adr r3, 8009bc0 <scaraPosition_packaging+0xe0>)
 8009b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b86:	f7f6 fd37 	bl	80005f8 <__aeabi_dmul>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	4610      	mov	r0, r2
 8009b90:	4619      	mov	r1, r3
 8009b92:	f7f6 ffe1 	bl	8000b58 <__aeabi_d2iz>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	3304      	adds	r3, #4
 8009b9a:	60fb      	str	r3, [r7, #12]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	f000 f810 	bl	8009bc8 <Append_Coordinate_Value>
	return cur_ptr + 4;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	3304      	adds	r3, #4
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3710      	adds	r7, #16
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009bb6:	b002      	add	sp, #8
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	f3af 8000 	nop.w
 8009bc0:	00000000 	.word	0x00000000
 8009bc4:	411e8480 	.word	0x411e8480

08009bc8 <Append_Coordinate_Value>:

void Append_Coordinate_Value(int32_t append_value, uint8_t* append_position)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
	append_position[0] = (uint8_t)(append_value & 0xff);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	701a      	strb	r2, [r3, #0]
	append_position[1] = (uint8_t)(append_value >> 8 & 0xff);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	121a      	asrs	r2, r3, #8
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	3301      	adds	r3, #1
 8009be2:	b2d2      	uxtb	r2, r2
 8009be4:	701a      	strb	r2, [r3, #0]
	append_position[2] = (uint8_t)(append_value >> 16 & 0xff);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	141a      	asrs	r2, r3, #16
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	3302      	adds	r3, #2
 8009bee:	b2d2      	uxtb	r2, r2
 8009bf0:	701a      	strb	r2, [r3, #0]
	append_position[3] = (uint8_t)(append_value >> 24 & 0xff);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	161a      	asrs	r2, r3, #24
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	3303      	adds	r3, #3
 8009bfa:	b2d2      	uxtb	r2, r2
 8009bfc:	701a      	strb	r2, [r3, #0]
}
 8009bfe:	bf00      	nop
 8009c00:	370c      	adds	r7, #12
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
 8009c0a:	0000      	movs	r0, r0
 8009c0c:	0000      	movs	r0, r0
	...

08009c10 <scaraKeyInit1>:
SCARA_StatusTypeDef  scaraKeyInit1(SCARA_KeyTypeDef key, int32_t speed)
{
 8009c10:	b590      	push	{r4, r7, lr}
 8009c12:	f5ad 7d39 	sub.w	sp, sp, #740	; 0x2e4
 8009c16:	af58      	add	r7, sp, #352	; 0x160
 8009c18:	4602      	mov	r2, r0
 8009c1a:	463b      	mov	r3, r7
 8009c1c:	6019      	str	r1, [r3, #0]
 8009c1e:	1dfb      	adds	r3, r7, #7
 8009c20:	701a      	strb	r2, [r3, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef status;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 8009c22:	f107 0308 	add.w	r3, r7, #8
 8009c26:	2201      	movs	r2, #1
 8009c28:	731a      	strb	r2, [r3, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 8009c2a:	f107 0308 	add.w	r3, r7, #8
 8009c2e:	2200      	movs	r2, #0
 8009c30:	741a      	strb	r2, [r3, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 8009c32:	f107 0308 	add.w	r3, r7, #8
 8009c36:	2201      	movs	r2, #1
 8009c38:	745a      	strb	r2, [r3, #17]

	if(speed < SHIFT_SPEED_MIN || speed > SHIFT_SPEED_MAX){
 8009c3a:	463b      	mov	r3, r7
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	dd03      	ble.n	8009c4a <scaraKeyInit1+0x3a>
 8009c42:	463b      	mov	r3, r7
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2b0e      	cmp	r3, #14
 8009c48:	dd01      	ble.n	8009c4e <scaraKeyInit1+0x3e>
		return SCARA_STATUS_ERROR_PARA;
 8009c4a:	2306      	movs	r3, #6
 8009c4c:	e2c0      	b.n	800a1d0 <scaraKeyInit1+0x5c0>
	}
	switch(key){
 8009c4e:	1dfb      	adds	r3, r7, #7
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	2b07      	cmp	r3, #7
 8009c54:	f200 8298 	bhi.w	800a188 <scaraKeyInit1+0x578>
 8009c58:	a201      	add	r2, pc, #4	; (adr r2, 8009c60 <scaraKeyInit1+0x50>)
 8009c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5e:	bf00      	nop
 8009c60:	08009c81 	.word	0x08009c81
 8009c64:	08009d23 	.word	0x08009d23
 8009c68:	08009dc9 	.word	0x08009dc9
 8009c6c:	08009e67 	.word	0x08009e67
 8009c70:	08009f09 	.word	0x08009f09
 8009c74:	08009fa7 	.word	0x08009fa7
 8009c78:	0800a049 	.word	0x0800a049
 8009c7c:	0800a0e7 	.word	0x0800a0e7
		case SCARA_KEY_X_INC:{
			cmd.v_factor = 0;
 8009c80:	f107 0108 	add.w	r1, r7, #8
 8009c84:	f04f 0200 	mov.w	r2, #0
 8009c88:	f04f 0300 	mov.w	r3, #0
 8009c8c:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
			cmd.space_type = DUTY_SPACE_TASK;
 8009c90:	f107 0308 	add.w	r3, r7, #8
 8009c94:	2200      	movs	r2, #0
 8009c96:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 8009c98:	f107 0308 	add.w	r3, r7, #8
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= speed*SHIFT_KEY_S;
 8009ca0:	463b      	mov	r3, r7
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4413      	add	r3, r2
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7f6 fc3a 	bl	8000524 <__aeabi_i2d>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	f107 0108 	add.w	r1, r7, #8
 8009cb8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			cmd.target_point.y 		= 0;
 8009cbc:	f107 0108 	add.w	r1, r7, #8
 8009cc0:	f04f 0200 	mov.w	r2, #0
 8009cc4:	f04f 0300 	mov.w	r3, #0
 8009cc8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			cmd.target_point.z 		= 0;
 8009ccc:	f107 0108 	add.w	r1, r7, #8
 8009cd0:	f04f 0200 	mov.w	r2, #0
 8009cd4:	f04f 0300 	mov.w	r3, #0
 8009cd8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			cmd.target_point.roll 	= 0;
 8009cdc:	f107 0108 	add.w	r1, r7, #8
 8009ce0:	f04f 0200 	mov.w	r2, #0
 8009ce4:	f04f 0300 	mov.w	r3, #0
 8009ce8:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 8009cec:	463b      	mov	r3, r7
 8009cee:	6818      	ldr	r0, [r3, #0]
 8009cf0:	f7f6 fc18 	bl	8000524 <__aeabi_i2d>
 8009cf4:	f20f 43e8 	addw	r3, pc, #1256	; 0x4e8
 8009cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfc:	f7f6 fc7c 	bl	80005f8 <__aeabi_dmul>
 8009d00:	4602      	mov	r2, r0
 8009d02:	460b      	mov	r3, r1
 8009d04:	4610      	mov	r0, r2
 8009d06:	4619      	mov	r1, r3
 8009d08:	f20f 43dc 	addw	r3, pc, #1244	; 0x4dc
 8009d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d10:	f7f6 fabc 	bl	800028c <__adddf3>
 8009d14:	4602      	mov	r2, r0
 8009d16:	460b      	mov	r3, r1
 8009d18:	f107 0108 	add.w	r1, r7, #8
 8009d1c:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 8009d20:	e232      	b.n	800a188 <scaraKeyInit1+0x578>
		case SCARA_KEY_X_DEC:{
			cmd.v_factor = 0;
 8009d22:	f107 0108 	add.w	r1, r7, #8
 8009d26:	f04f 0200 	mov.w	r2, #0
 8009d2a:	f04f 0300 	mov.w	r3, #0
 8009d2e:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
			cmd.space_type = DUTY_SPACE_TASK;
 8009d32:	f107 0308 	add.w	r3, r7, #8
 8009d36:	2200      	movs	r2, #0
 8009d38:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 8009d3a:	f107 0308 	add.w	r3, r7, #8
 8009d3e:	2200      	movs	r2, #0
 8009d40:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= -speed*SHIFT_KEY_S;
 8009d42:	463b      	mov	r3, r7
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	4613      	mov	r3, r2
 8009d48:	079b      	lsls	r3, r3, #30
 8009d4a:	1a9b      	subs	r3, r3, r2
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	1a9b      	subs	r3, r3, r2
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7f6 fbe7 	bl	8000524 <__aeabi_i2d>
 8009d56:	4602      	mov	r2, r0
 8009d58:	460b      	mov	r3, r1
 8009d5a:	f107 0108 	add.w	r1, r7, #8
 8009d5e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			cmd.target_point.y 		= 0;
 8009d62:	f107 0108 	add.w	r1, r7, #8
 8009d66:	f04f 0200 	mov.w	r2, #0
 8009d6a:	f04f 0300 	mov.w	r3, #0
 8009d6e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			cmd.target_point.z 		= 0;
 8009d72:	f107 0108 	add.w	r1, r7, #8
 8009d76:	f04f 0200 	mov.w	r2, #0
 8009d7a:	f04f 0300 	mov.w	r3, #0
 8009d7e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			cmd.target_point.roll 	= 0;
 8009d82:	f107 0108 	add.w	r1, r7, #8
 8009d86:	f04f 0200 	mov.w	r2, #0
 8009d8a:	f04f 0300 	mov.w	r3, #0
 8009d8e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 8009d92:	463b      	mov	r3, r7
 8009d94:	6818      	ldr	r0, [r3, #0]
 8009d96:	f7f6 fbc5 	bl	8000524 <__aeabi_i2d>
 8009d9a:	f20f 4344 	addw	r3, pc, #1092	; 0x444
 8009d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da2:	f7f6 fc29 	bl	80005f8 <__aeabi_dmul>
 8009da6:	4602      	mov	r2, r0
 8009da8:	460b      	mov	r3, r1
 8009daa:	4610      	mov	r0, r2
 8009dac:	4619      	mov	r1, r3
 8009dae:	f20f 4338 	addw	r3, pc, #1080	; 0x438
 8009db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db6:	f7f6 fa69 	bl	800028c <__adddf3>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	f107 0108 	add.w	r1, r7, #8
 8009dc2:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 8009dc6:	e1df      	b.n	800a188 <scaraKeyInit1+0x578>
		case SCARA_KEY_Y_INC:{
			cmd.v_factor = 0;
 8009dc8:	f107 0108 	add.w	r1, r7, #8
 8009dcc:	f04f 0200 	mov.w	r2, #0
 8009dd0:	f04f 0300 	mov.w	r3, #0
 8009dd4:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
			cmd.space_type = DUTY_SPACE_TASK;
 8009dd8:	f107 0308 	add.w	r3, r7, #8
 8009ddc:	2200      	movs	r2, #0
 8009dde:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 8009de0:	f107 0308 	add.w	r3, r7, #8
 8009de4:	2200      	movs	r2, #0
 8009de6:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 8009de8:	f107 0108 	add.w	r1, r7, #8
 8009dec:	f04f 0200 	mov.w	r2, #0
 8009df0:	f04f 0300 	mov.w	r3, #0
 8009df4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			cmd.target_point.y 		= speed*SHIFT_KEY_S;
 8009df8:	463b      	mov	r3, r7
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	4613      	mov	r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	4413      	add	r3, r2
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7f6 fb8e 	bl	8000524 <__aeabi_i2d>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	f107 0108 	add.w	r1, r7, #8
 8009e10:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			cmd.target_point.z 		= 0;
 8009e14:	f107 0108 	add.w	r1, r7, #8
 8009e18:	f04f 0200 	mov.w	r2, #0
 8009e1c:	f04f 0300 	mov.w	r3, #0
 8009e20:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			cmd.target_point.roll 	= 0;
 8009e24:	f107 0108 	add.w	r1, r7, #8
 8009e28:	f04f 0200 	mov.w	r2, #0
 8009e2c:	f04f 0300 	mov.w	r3, #0
 8009e30:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 8009e34:	463b      	mov	r3, r7
 8009e36:	6818      	ldr	r0, [r3, #0]
 8009e38:	f7f6 fb74 	bl	8000524 <__aeabi_i2d>
 8009e3c:	a3e8      	add	r3, pc, #928	; (adr r3, 800a1e0 <scaraKeyInit1+0x5d0>)
 8009e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e42:	f7f6 fbd9 	bl	80005f8 <__aeabi_dmul>
 8009e46:	4602      	mov	r2, r0
 8009e48:	460b      	mov	r3, r1
 8009e4a:	4610      	mov	r0, r2
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	a3e6      	add	r3, pc, #920	; (adr r3, 800a1e8 <scaraKeyInit1+0x5d8>)
 8009e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e54:	f7f6 fa1a 	bl	800028c <__adddf3>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	f107 0108 	add.w	r1, r7, #8
 8009e60:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 8009e64:	e190      	b.n	800a188 <scaraKeyInit1+0x578>

		case SCARA_KEY_Y_DEC:{
			cmd.v_factor = 0;
 8009e66:	f107 0108 	add.w	r1, r7, #8
 8009e6a:	f04f 0200 	mov.w	r2, #0
 8009e6e:	f04f 0300 	mov.w	r3, #0
 8009e72:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
			cmd.space_type = DUTY_SPACE_TASK;
 8009e76:	f107 0308 	add.w	r3, r7, #8
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 8009e7e:	f107 0308 	add.w	r3, r7, #8
 8009e82:	2200      	movs	r2, #0
 8009e84:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 8009e86:	f107 0108 	add.w	r1, r7, #8
 8009e8a:	f04f 0200 	mov.w	r2, #0
 8009e8e:	f04f 0300 	mov.w	r3, #0
 8009e92:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			cmd.target_point.y 		= -speed*SHIFT_KEY_S;
 8009e96:	463b      	mov	r3, r7
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	079b      	lsls	r3, r3, #30
 8009e9e:	1a9b      	subs	r3, r3, r2
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	1a9b      	subs	r3, r3, r2
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7f6 fb3d 	bl	8000524 <__aeabi_i2d>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	460b      	mov	r3, r1
 8009eae:	f107 0108 	add.w	r1, r7, #8
 8009eb2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			cmd.target_point.z 		= 0;
 8009eb6:	f107 0108 	add.w	r1, r7, #8
 8009eba:	f04f 0200 	mov.w	r2, #0
 8009ebe:	f04f 0300 	mov.w	r3, #0
 8009ec2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			cmd.target_point.roll 	= 0;
 8009ec6:	f107 0108 	add.w	r1, r7, #8
 8009eca:	f04f 0200 	mov.w	r2, #0
 8009ece:	f04f 0300 	mov.w	r3, #0
 8009ed2:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 8009ed6:	463b      	mov	r3, r7
 8009ed8:	6818      	ldr	r0, [r3, #0]
 8009eda:	f7f6 fb23 	bl	8000524 <__aeabi_i2d>
 8009ede:	a3c0      	add	r3, pc, #768	; (adr r3, 800a1e0 <scaraKeyInit1+0x5d0>)
 8009ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee4:	f7f6 fb88 	bl	80005f8 <__aeabi_dmul>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	460b      	mov	r3, r1
 8009eec:	4610      	mov	r0, r2
 8009eee:	4619      	mov	r1, r3
 8009ef0:	a3bd      	add	r3, pc, #756	; (adr r3, 800a1e8 <scaraKeyInit1+0x5d8>)
 8009ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef6:	f7f6 f9c9 	bl	800028c <__adddf3>
 8009efa:	4602      	mov	r2, r0
 8009efc:	460b      	mov	r3, r1
 8009efe:	f107 0108 	add.w	r1, r7, #8
 8009f02:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 8009f06:	e13f      	b.n	800a188 <scaraKeyInit1+0x578>
		case SCARA_KEY_Z_INC:{
			cmd.v_factor = 0;
 8009f08:	f107 0108 	add.w	r1, r7, #8
 8009f0c:	f04f 0200 	mov.w	r2, #0
 8009f10:	f04f 0300 	mov.w	r3, #0
 8009f14:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
			cmd.space_type = DUTY_SPACE_TASK;
 8009f18:	f107 0308 	add.w	r3, r7, #8
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 8009f20:	f107 0308 	add.w	r3, r7, #8
 8009f24:	2200      	movs	r2, #0
 8009f26:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 8009f28:	f107 0108 	add.w	r1, r7, #8
 8009f2c:	f04f 0200 	mov.w	r2, #0
 8009f30:	f04f 0300 	mov.w	r3, #0
 8009f34:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			cmd.target_point.y 		= 0;
 8009f38:	f107 0108 	add.w	r1, r7, #8
 8009f3c:	f04f 0200 	mov.w	r2, #0
 8009f40:	f04f 0300 	mov.w	r3, #0
 8009f44:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			cmd.target_point.z 		= speed*SHIFT_KEY_S;
 8009f48:	463b      	mov	r3, r7
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	4413      	add	r3, r2
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7f6 fae6 	bl	8000524 <__aeabi_i2d>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	f107 0108 	add.w	r1, r7, #8
 8009f60:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			cmd.target_point.roll 	= 0;
 8009f64:	f107 0108 	add.w	r1, r7, #8
 8009f68:	f04f 0200 	mov.w	r2, #0
 8009f6c:	f04f 0300 	mov.w	r3, #0
 8009f70:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 8009f74:	463b      	mov	r3, r7
 8009f76:	6818      	ldr	r0, [r3, #0]
 8009f78:	f7f6 fad4 	bl	8000524 <__aeabi_i2d>
 8009f7c:	a398      	add	r3, pc, #608	; (adr r3, 800a1e0 <scaraKeyInit1+0x5d0>)
 8009f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f82:	f7f6 fb39 	bl	80005f8 <__aeabi_dmul>
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	4610      	mov	r0, r2
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	a396      	add	r3, pc, #600	; (adr r3, 800a1e8 <scaraKeyInit1+0x5d8>)
 8009f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f94:	f7f6 f97a 	bl	800028c <__adddf3>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	f107 0108 	add.w	r1, r7, #8
 8009fa0:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 8009fa4:	e0f0      	b.n	800a188 <scaraKeyInit1+0x578>
		case SCARA_KEY_Z_DEC:{
			cmd.v_factor = 0;
 8009fa6:	f107 0108 	add.w	r1, r7, #8
 8009faa:	f04f 0200 	mov.w	r2, #0
 8009fae:	f04f 0300 	mov.w	r3, #0
 8009fb2:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
			cmd.space_type = DUTY_SPACE_TASK;
 8009fb6:	f107 0308 	add.w	r3, r7, #8
 8009fba:	2200      	movs	r2, #0
 8009fbc:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 8009fbe:	f107 0308 	add.w	r3, r7, #8
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 8009fc6:	f107 0108 	add.w	r1, r7, #8
 8009fca:	f04f 0200 	mov.w	r2, #0
 8009fce:	f04f 0300 	mov.w	r3, #0
 8009fd2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			cmd.target_point.y 		= 0;
 8009fd6:	f107 0108 	add.w	r1, r7, #8
 8009fda:	f04f 0200 	mov.w	r2, #0
 8009fde:	f04f 0300 	mov.w	r3, #0
 8009fe2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			cmd.target_point.z 		= -speed*SHIFT_KEY_S;
 8009fe6:	463b      	mov	r3, r7
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	4613      	mov	r3, r2
 8009fec:	079b      	lsls	r3, r3, #30
 8009fee:	1a9b      	subs	r3, r3, r2
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	1a9b      	subs	r3, r3, r2
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7f6 fa95 	bl	8000524 <__aeabi_i2d>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	f107 0108 	add.w	r1, r7, #8
 800a002:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			cmd.target_point.roll 	= 0;
 800a006:	f107 0108 	add.w	r1, r7, #8
 800a00a:	f04f 0200 	mov.w	r2, #0
 800a00e:	f04f 0300 	mov.w	r3, #0
 800a012:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a016:	463b      	mov	r3, r7
 800a018:	6818      	ldr	r0, [r3, #0]
 800a01a:	f7f6 fa83 	bl	8000524 <__aeabi_i2d>
 800a01e:	a370      	add	r3, pc, #448	; (adr r3, 800a1e0 <scaraKeyInit1+0x5d0>)
 800a020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a024:	f7f6 fae8 	bl	80005f8 <__aeabi_dmul>
 800a028:	4602      	mov	r2, r0
 800a02a:	460b      	mov	r3, r1
 800a02c:	4610      	mov	r0, r2
 800a02e:	4619      	mov	r1, r3
 800a030:	a36d      	add	r3, pc, #436	; (adr r3, 800a1e8 <scaraKeyInit1+0x5d8>)
 800a032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a036:	f7f6 f929 	bl	800028c <__adddf3>
 800a03a:	4602      	mov	r2, r0
 800a03c:	460b      	mov	r3, r1
 800a03e:	f107 0108 	add.w	r1, r7, #8
 800a042:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800a046:	e09f      	b.n	800a188 <scaraKeyInit1+0x578>
		case SCARA_KEY_ROLL_INC:{
			cmd.v_factor = 0;
 800a048:	f107 0108 	add.w	r1, r7, #8
 800a04c:	f04f 0200 	mov.w	r2, #0
 800a050:	f04f 0300 	mov.w	r3, #0
 800a054:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
			cmd.space_type = DUTY_SPACE_TASK;
 800a058:	f107 0308 	add.w	r3, r7, #8
 800a05c:	2200      	movs	r2, #0
 800a05e:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a060:	f107 0308 	add.w	r3, r7, #8
 800a064:	2200      	movs	r2, #0
 800a066:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800a068:	f107 0108 	add.w	r1, r7, #8
 800a06c:	f04f 0200 	mov.w	r2, #0
 800a070:	f04f 0300 	mov.w	r3, #0
 800a074:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			cmd.target_point.y 		= 0;
 800a078:	f107 0108 	add.w	r1, r7, #8
 800a07c:	f04f 0200 	mov.w	r2, #0
 800a080:	f04f 0300 	mov.w	r3, #0
 800a084:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			cmd.target_point.z 		= 0;
 800a088:	f107 0108 	add.w	r1, r7, #8
 800a08c:	f04f 0200 	mov.w	r2, #0
 800a090:	f04f 0300 	mov.w	r3, #0
 800a094:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			cmd.target_point.roll 	= speed*SHIFT_KEY_S;
 800a098:	463b      	mov	r3, r7
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	4613      	mov	r3, r2
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	4413      	add	r3, r2
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7f6 fa3e 	bl	8000524 <__aeabi_i2d>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	f107 0108 	add.w	r1, r7, #8
 800a0b0:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a0b4:	463b      	mov	r3, r7
 800a0b6:	6818      	ldr	r0, [r3, #0]
 800a0b8:	f7f6 fa34 	bl	8000524 <__aeabi_i2d>
 800a0bc:	a348      	add	r3, pc, #288	; (adr r3, 800a1e0 <scaraKeyInit1+0x5d0>)
 800a0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c2:	f7f6 fa99 	bl	80005f8 <__aeabi_dmul>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	4610      	mov	r0, r2
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	a346      	add	r3, pc, #280	; (adr r3, 800a1e8 <scaraKeyInit1+0x5d8>)
 800a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d4:	f7f6 f8da 	bl	800028c <__adddf3>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	460b      	mov	r3, r1
 800a0dc:	f107 0108 	add.w	r1, r7, #8
 800a0e0:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800a0e4:	e050      	b.n	800a188 <scaraKeyInit1+0x578>
		case SCARA_KEY_ROLL_DEC:{
			cmd.v_factor = 0;
 800a0e6:	f107 0108 	add.w	r1, r7, #8
 800a0ea:	f04f 0200 	mov.w	r2, #0
 800a0ee:	f04f 0300 	mov.w	r3, #0
 800a0f2:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
			cmd.space_type = DUTY_SPACE_TASK;
 800a0f6:	f107 0308 	add.w	r3, r7, #8
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a0fe:	f107 0308 	add.w	r3, r7, #8
 800a102:	2200      	movs	r2, #0
 800a104:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800a106:	f107 0108 	add.w	r1, r7, #8
 800a10a:	f04f 0200 	mov.w	r2, #0
 800a10e:	f04f 0300 	mov.w	r3, #0
 800a112:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			cmd.target_point.y 		= 0;
 800a116:	f107 0108 	add.w	r1, r7, #8
 800a11a:	f04f 0200 	mov.w	r2, #0
 800a11e:	f04f 0300 	mov.w	r3, #0
 800a122:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			cmd.target_point.z 		= 0;
 800a126:	f107 0108 	add.w	r1, r7, #8
 800a12a:	f04f 0200 	mov.w	r2, #0
 800a12e:	f04f 0300 	mov.w	r3, #0
 800a132:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			cmd.target_point.roll 	= -speed*SHIFT_KEY_S;
 800a136:	463b      	mov	r3, r7
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	4613      	mov	r3, r2
 800a13c:	079b      	lsls	r3, r3, #30
 800a13e:	1a9b      	subs	r3, r3, r2
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	1a9b      	subs	r3, r3, r2
 800a144:	4618      	mov	r0, r3
 800a146:	f7f6 f9ed 	bl	8000524 <__aeabi_i2d>
 800a14a:	4602      	mov	r2, r0
 800a14c:	460b      	mov	r3, r1
 800a14e:	f107 0108 	add.w	r1, r7, #8
 800a152:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a156:	463b      	mov	r3, r7
 800a158:	6818      	ldr	r0, [r3, #0]
 800a15a:	f7f6 f9e3 	bl	8000524 <__aeabi_i2d>
 800a15e:	a320      	add	r3, pc, #128	; (adr r3, 800a1e0 <scaraKeyInit1+0x5d0>)
 800a160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a164:	f7f6 fa48 	bl	80005f8 <__aeabi_dmul>
 800a168:	4602      	mov	r2, r0
 800a16a:	460b      	mov	r3, r1
 800a16c:	4610      	mov	r0, r2
 800a16e:	4619      	mov	r1, r3
 800a170:	a31d      	add	r3, pc, #116	; (adr r3, 800a1e8 <scaraKeyInit1+0x5d8>)
 800a172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a176:	f7f6 f889 	bl	800028c <__adddf3>
 800a17a:	4602      	mov	r2, r0
 800a17c:	460b      	mov	r3, r1
 800a17e:	f107 0108 	add.w	r1, r7, #8
 800a182:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800a186:	bf00      	nop
	}

	status = scaraInitDuty(cmd);
 800a188:	f107 0408 	add.w	r4, r7, #8
 800a18c:	4668      	mov	r0, sp
 800a18e:	f104 0310 	add.w	r3, r4, #16
 800a192:	f44f 72b0 	mov.w	r2, #352	; 0x160
 800a196:	4619      	mov	r1, r3
 800a198:	f00b f82a 	bl	80151f0 <memcpy>
 800a19c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a1a0:	f7fc fb1e 	bl	80067e0 <scaraInitDuty>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
	if (status == SCARA_STATUS_OK) {
 800a1aa:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d10b      	bne.n	800a1ca <scaraKeyInit1+0x5ba>
		status = scaraTestDuty();
 800a1b2:	f7ff fb71 	bl	8009898 <scaraTestDuty>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
		if (status != SCARA_STATUS_OK) {
 800a1bc:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d005      	beq.n	800a1d0 <scaraKeyInit1+0x5c0>
			return status;
 800a1c4:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800a1c8:	e002      	b.n	800a1d0 <scaraKeyInit1+0x5c0>
		}

	} else {
		return status;
 800a1ca:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800a1ce:	e7ff      	b.n	800a1d0 <scaraKeyInit1+0x5c0>
	}
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f507 77c2 	add.w	r7, r7, #388	; 0x184
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd90      	pop	{r4, r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	f3af 8000 	nop.w
 800a1e0:	9999999a 	.word	0x9999999a
 800a1e4:	3fa99999 	.word	0x3fa99999
 800a1e8:	9999999a 	.word	0x9999999a
 800a1ec:	3fe99999 	.word	0x3fe99999

0800a1f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	607b      	str	r3, [r7, #4]
 800a1fa:	4b12      	ldr	r3, [pc, #72]	; (800a244 <HAL_MspInit+0x54>)
 800a1fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1fe:	4a11      	ldr	r2, [pc, #68]	; (800a244 <HAL_MspInit+0x54>)
 800a200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a204:	6453      	str	r3, [r2, #68]	; 0x44
 800a206:	4b0f      	ldr	r3, [pc, #60]	; (800a244 <HAL_MspInit+0x54>)
 800a208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a20a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a20e:	607b      	str	r3, [r7, #4]
 800a210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a212:	2300      	movs	r3, #0
 800a214:	603b      	str	r3, [r7, #0]
 800a216:	4b0b      	ldr	r3, [pc, #44]	; (800a244 <HAL_MspInit+0x54>)
 800a218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21a:	4a0a      	ldr	r2, [pc, #40]	; (800a244 <HAL_MspInit+0x54>)
 800a21c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a220:	6413      	str	r3, [r2, #64]	; 0x40
 800a222:	4b08      	ldr	r3, [pc, #32]	; (800a244 <HAL_MspInit+0x54>)
 800a224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a22a:	603b      	str	r3, [r7, #0]
 800a22c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a22e:	2200      	movs	r2, #0
 800a230:	210f      	movs	r1, #15
 800a232:	f06f 0001 	mvn.w	r0, #1
 800a236:	f000 fc79 	bl	800ab2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a23a:	bf00      	nop
 800a23c:	3708      	adds	r7, #8
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	40023800 	.word	0x40023800

0800a248 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b08c      	sub	sp, #48	; 0x30
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a250:	2300      	movs	r3, #0
 800a252:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a254:	2300      	movs	r3, #0
 800a256:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800a258:	2200      	movs	r2, #0
 800a25a:	6879      	ldr	r1, [r7, #4]
 800a25c:	2036      	movs	r0, #54	; 0x36
 800a25e:	f000 fc65 	bl	800ab2c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800a262:	2036      	movs	r0, #54	; 0x36
 800a264:	f000 fc7e 	bl	800ab64 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a268:	2300      	movs	r3, #0
 800a26a:	60fb      	str	r3, [r7, #12]
 800a26c:	4b1f      	ldr	r3, [pc, #124]	; (800a2ec <HAL_InitTick+0xa4>)
 800a26e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a270:	4a1e      	ldr	r2, [pc, #120]	; (800a2ec <HAL_InitTick+0xa4>)
 800a272:	f043 0310 	orr.w	r3, r3, #16
 800a276:	6413      	str	r3, [r2, #64]	; 0x40
 800a278:	4b1c      	ldr	r3, [pc, #112]	; (800a2ec <HAL_InitTick+0xa4>)
 800a27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27c:	f003 0310 	and.w	r3, r3, #16
 800a280:	60fb      	str	r3, [r7, #12]
 800a282:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a284:	f107 0210 	add.w	r2, r7, #16
 800a288:	f107 0314 	add.w	r3, r7, #20
 800a28c:	4611      	mov	r1, r2
 800a28e:	4618      	mov	r0, r3
 800a290:	f003 f812 	bl	800d2b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800a294:	f002 ffe8 	bl	800d268 <HAL_RCC_GetPCLK1Freq>
 800a298:	4603      	mov	r3, r0
 800a29a:	005b      	lsls	r3, r3, #1
 800a29c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a0:	4a13      	ldr	r2, [pc, #76]	; (800a2f0 <HAL_InitTick+0xa8>)
 800a2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2a6:	0c9b      	lsrs	r3, r3, #18
 800a2a8:	3b01      	subs	r3, #1
 800a2aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800a2ac:	4b11      	ldr	r3, [pc, #68]	; (800a2f4 <HAL_InitTick+0xac>)
 800a2ae:	4a12      	ldr	r2, [pc, #72]	; (800a2f8 <HAL_InitTick+0xb0>)
 800a2b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800a2b2:	4b10      	ldr	r3, [pc, #64]	; (800a2f4 <HAL_InitTick+0xac>)
 800a2b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a2b8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800a2ba:	4a0e      	ldr	r2, [pc, #56]	; (800a2f4 <HAL_InitTick+0xac>)
 800a2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2be:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800a2c0:	4b0c      	ldr	r3, [pc, #48]	; (800a2f4 <HAL_InitTick+0xac>)
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a2c6:	4b0b      	ldr	r3, [pc, #44]	; (800a2f4 <HAL_InitTick+0xac>)
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800a2cc:	4809      	ldr	r0, [pc, #36]	; (800a2f4 <HAL_InitTick+0xac>)
 800a2ce:	f003 f825 	bl	800d31c <HAL_TIM_Base_Init>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d104      	bne.n	800a2e2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800a2d8:	4806      	ldr	r0, [pc, #24]	; (800a2f4 <HAL_InitTick+0xac>)
 800a2da:	f003 f84a 	bl	800d372 <HAL_TIM_Base_Start_IT>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	e000      	b.n	800a2e4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3730      	adds	r7, #48	; 0x30
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	40023800 	.word	0x40023800
 800a2f0:	431bde83 	.word	0x431bde83
 800a2f4:	20010c78 	.word	0x20010c78
 800a2f8:	40001000 	.word	0x40001000

0800a2fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a300:	bf00      	nop
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
	...

0800a30c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800a310:	2162      	movs	r1, #98	; 0x62
 800a312:	4802      	ldr	r0, [pc, #8]	; (800a31c <HardFault_Handler+0x10>)
 800a314:	f7f8 f946 	bl	80025a4 <LOG_REPORT>
 800a318:	e7fa      	b.n	800a310 <HardFault_Handler+0x4>
 800a31a:	bf00      	nop
 800a31c:	0801b6d0 	.word	0x0801b6d0

0800a320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800a324:	2172      	movs	r1, #114	; 0x72
 800a326:	4802      	ldr	r0, [pc, #8]	; (800a330 <MemManage_Handler+0x10>)
 800a328:	f7f8 f93c 	bl	80025a4 <LOG_REPORT>
 800a32c:	e7fa      	b.n	800a324 <MemManage_Handler+0x4>
 800a32e:	bf00      	nop
 800a330:	0801b6e8 	.word	0x0801b6e8

0800a334 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800a338:	2182      	movs	r1, #130	; 0x82
 800a33a:	4802      	ldr	r0, [pc, #8]	; (800a344 <BusFault_Handler+0x10>)
 800a33c:	f7f8 f932 	bl	80025a4 <LOG_REPORT>
 800a340:	e7fa      	b.n	800a338 <BusFault_Handler+0x4>
 800a342:	bf00      	nop
 800a344:	0801b6fc 	.word	0x0801b6fc

0800a348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a348:	b480      	push	{r7}
 800a34a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a34c:	e7fe      	b.n	800a34c <UsageFault_Handler+0x4>

0800a34e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a34e:	b480      	push	{r7}
 800a350:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a352:	bf00      	nop
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800a360:	4802      	ldr	r0, [pc, #8]	; (800a36c <DMA1_Stream4_IRQHandler+0x10>)
 800a362:	f000 fd35 	bl	800add0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800a366:	bf00      	nop
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	20010d78 	.word	0x20010d78

0800a370 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800a374:	4802      	ldr	r0, [pc, #8]	; (800a380 <UART4_IRQHandler+0x10>)
 800a376:	f003 fc99 	bl	800dcac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800a37a:	bf00      	nop
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	20010d38 	.word	0x20010d38

0800a384 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a388:	4802      	ldr	r0, [pc, #8]	; (800a394 <TIM6_DAC_IRQHandler+0x10>)
 800a38a:	f003 f816 	bl	800d3ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a38e:	bf00      	nop
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	20010c78 	.word	0x20010c78

0800a398 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800a39c:	4b05      	ldr	r3, [pc, #20]	; (800a3b4 <TIM7_IRQHandler+0x1c>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2101      	movs	r1, #1
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f007 fb96 	bl	8011ad4 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800a3a8:	4803      	ldr	r0, [pc, #12]	; (800a3b8 <TIM7_IRQHandler+0x20>)
 800a3aa:	f003 f806 	bl	800d3ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800a3ae:	bf00      	nop
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	2000fe74 	.word	0x2000fe74
 800a3b8:	20010cf8 	.word	0x20010cf8

0800a3bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800a3c0:	4802      	ldr	r0, [pc, #8]	; (800a3cc <OTG_FS_IRQHandler+0x10>)
 800a3c2:	f001 fad9 	bl	800b978 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800a3c6:	bf00      	nop
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	200116b4 	.word	0x200116b4

0800a3d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	af00      	add	r7, sp, #0
	return 1;
 800a3d4:	2301      	movs	r3, #1
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <_kill>:

int _kill(int pid, int sig)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800a3ea:	f00a fec7 	bl	801517c <__errno>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2216      	movs	r2, #22
 800a3f2:	601a      	str	r2, [r3, #0]
	return -1;
 800a3f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <_exit>:

void _exit (int status)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800a408:	f04f 31ff 	mov.w	r1, #4294967295
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f7ff ffe7 	bl	800a3e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 800a412:	e7fe      	b.n	800a412 <_exit+0x12>

0800a414 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b086      	sub	sp, #24
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a420:	2300      	movs	r3, #0
 800a422:	617b      	str	r3, [r7, #20]
 800a424:	e00a      	b.n	800a43c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a426:	f3af 8000 	nop.w
 800a42a:	4601      	mov	r1, r0
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	1c5a      	adds	r2, r3, #1
 800a430:	60ba      	str	r2, [r7, #8]
 800a432:	b2ca      	uxtb	r2, r1
 800a434:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	3301      	adds	r3, #1
 800a43a:	617b      	str	r3, [r7, #20]
 800a43c:	697a      	ldr	r2, [r7, #20]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	429a      	cmp	r2, r3
 800a442:	dbf0      	blt.n	800a426 <_read+0x12>
	}

return len;
 800a444:	687b      	ldr	r3, [r7, #4]
}
 800a446:	4618      	mov	r0, r3
 800a448:	3718      	adds	r7, #24
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b086      	sub	sp, #24
 800a452:	af00      	add	r7, sp, #0
 800a454:	60f8      	str	r0, [r7, #12]
 800a456:	60b9      	str	r1, [r7, #8]
 800a458:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a45a:	2300      	movs	r3, #0
 800a45c:	617b      	str	r3, [r7, #20]
 800a45e:	e009      	b.n	800a474 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	1c5a      	adds	r2, r3, #1
 800a464:	60ba      	str	r2, [r7, #8]
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	4618      	mov	r0, r3
 800a46a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	3301      	adds	r3, #1
 800a472:	617b      	str	r3, [r7, #20]
 800a474:	697a      	ldr	r2, [r7, #20]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	429a      	cmp	r2, r3
 800a47a:	dbf1      	blt.n	800a460 <_write+0x12>
	}
	return len;
 800a47c:	687b      	ldr	r3, [r7, #4]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3718      	adds	r7, #24
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <_close>:

int _close(int file)
{
 800a486:	b480      	push	{r7}
 800a488:	b083      	sub	sp, #12
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
	return -1;
 800a48e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a492:	4618      	mov	r0, r3
 800a494:	370c      	adds	r7, #12
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr

0800a49e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a49e:	b480      	push	{r7}
 800a4a0:	b083      	sub	sp, #12
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a4ae:	605a      	str	r2, [r3, #4]
	return 0;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	370c      	adds	r7, #12
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr

0800a4be <_isatty>:

int _isatty(int file)
{
 800a4be:	b480      	push	{r7}
 800a4c0:	b083      	sub	sp, #12
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
	return 1;
 800a4c6:	2301      	movs	r3, #1
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
	return 0;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3714      	adds	r7, #20
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
	...

0800a4f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a4f8:	4b11      	ldr	r3, [pc, #68]	; (800a540 <_sbrk+0x50>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d102      	bne.n	800a506 <_sbrk+0x16>
		heap_end = &end;
 800a500:	4b0f      	ldr	r3, [pc, #60]	; (800a540 <_sbrk+0x50>)
 800a502:	4a10      	ldr	r2, [pc, #64]	; (800a544 <_sbrk+0x54>)
 800a504:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a506:	4b0e      	ldr	r3, [pc, #56]	; (800a540 <_sbrk+0x50>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a50c:	4b0c      	ldr	r3, [pc, #48]	; (800a540 <_sbrk+0x50>)
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4413      	add	r3, r2
 800a514:	466a      	mov	r2, sp
 800a516:	4293      	cmp	r3, r2
 800a518:	d907      	bls.n	800a52a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a51a:	f00a fe2f 	bl	801517c <__errno>
 800a51e:	4603      	mov	r3, r0
 800a520:	220c      	movs	r2, #12
 800a522:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800a524:	f04f 33ff 	mov.w	r3, #4294967295
 800a528:	e006      	b.n	800a538 <_sbrk+0x48>
	}

	heap_end += incr;
 800a52a:	4b05      	ldr	r3, [pc, #20]	; (800a540 <_sbrk+0x50>)
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4413      	add	r3, r2
 800a532:	4a03      	ldr	r2, [pc, #12]	; (800a540 <_sbrk+0x50>)
 800a534:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a536:	68fb      	ldr	r3, [r7, #12]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	20004864 	.word	0x20004864
 800a544:	20011ad0 	.word	0x20011ad0

0800a548 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a548:	b480      	push	{r7}
 800a54a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a54c:	4b08      	ldr	r3, [pc, #32]	; (800a570 <SystemInit+0x28>)
 800a54e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a552:	4a07      	ldr	r2, [pc, #28]	; (800a570 <SystemInit+0x28>)
 800a554:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a558:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a55c:	4b04      	ldr	r3, [pc, #16]	; (800a570 <SystemInit+0x28>)
 800a55e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a562:	609a      	str	r2, [r3, #8]
#endif
}
 800a564:	bf00      	nop
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	e000ed00 	.word	0xe000ed00

0800a574 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b086      	sub	sp, #24
 800a578:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a57a:	f107 0308 	add.w	r3, r7, #8
 800a57e:	2200      	movs	r2, #0
 800a580:	601a      	str	r2, [r3, #0]
 800a582:	605a      	str	r2, [r3, #4]
 800a584:	609a      	str	r2, [r3, #8]
 800a586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a588:	463b      	mov	r3, r7
 800a58a:	2200      	movs	r2, #0
 800a58c:	601a      	str	r2, [r3, #0]
 800a58e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800a590:	4b1e      	ldr	r3, [pc, #120]	; (800a60c <MX_TIM2_Init+0x98>)
 800a592:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a596:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25000;
 800a598:	4b1c      	ldr	r3, [pc, #112]	; (800a60c <MX_TIM2_Init+0x98>)
 800a59a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800a59e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a5a0:	4b1a      	ldr	r3, [pc, #104]	; (800a60c <MX_TIM2_Init+0x98>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800a5a6:	4b19      	ldr	r3, [pc, #100]	; (800a60c <MX_TIM2_Init+0x98>)
 800a5a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a5ae:	4b17      	ldr	r3, [pc, #92]	; (800a60c <MX_TIM2_Init+0x98>)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a5b4:	4b15      	ldr	r3, [pc, #84]	; (800a60c <MX_TIM2_Init+0x98>)
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a5ba:	4814      	ldr	r0, [pc, #80]	; (800a60c <MX_TIM2_Init+0x98>)
 800a5bc:	f002 feae 	bl	800d31c <HAL_TIM_Base_Init>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d001      	beq.n	800a5ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800a5c6:	f7fb f871 	bl	80056ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a5ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a5d0:	f107 0308 	add.w	r3, r7, #8
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	480d      	ldr	r0, [pc, #52]	; (800a60c <MX_TIM2_Init+0x98>)
 800a5d8:	f002 fff7 	bl	800d5ca <HAL_TIM_ConfigClockSource>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d001      	beq.n	800a5e6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800a5e2:	f7fb f863 	bl	80056ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a5ee:	463b      	mov	r3, r7
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	4806      	ldr	r0, [pc, #24]	; (800a60c <MX_TIM2_Init+0x98>)
 800a5f4:	f003 fa10 	bl	800da18 <HAL_TIMEx_MasterConfigSynchronization>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800a5fe:	f7fb f855 	bl	80056ac <Error_Handler>
  }

}
 800a602:	bf00      	nop
 800a604:	3718      	adds	r7, #24
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	20010cb8 	.word	0x20010cb8

0800a610 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a616:	463b      	mov	r3, r7
 800a618:	2200      	movs	r2, #0
 800a61a:	601a      	str	r2, [r3, #0]
 800a61c:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800a61e:	4b15      	ldr	r3, [pc, #84]	; (800a674 <MX_TIM7_Init+0x64>)
 800a620:	4a15      	ldr	r2, [pc, #84]	; (800a678 <MX_TIM7_Init+0x68>)
 800a622:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800a624:	4b13      	ldr	r3, [pc, #76]	; (800a674 <MX_TIM7_Init+0x64>)
 800a626:	2253      	movs	r2, #83	; 0x53
 800a628:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a62a:	4b12      	ldr	r3, [pc, #72]	; (800a674 <MX_TIM7_Init+0x64>)
 800a62c:	2200      	movs	r2, #0
 800a62e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800a630:	4b10      	ldr	r3, [pc, #64]	; (800a674 <MX_TIM7_Init+0x64>)
 800a632:	f242 720f 	movw	r2, #9999	; 0x270f
 800a636:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a638:	4b0e      	ldr	r3, [pc, #56]	; (800a674 <MX_TIM7_Init+0x64>)
 800a63a:	2200      	movs	r2, #0
 800a63c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800a63e:	480d      	ldr	r0, [pc, #52]	; (800a674 <MX_TIM7_Init+0x64>)
 800a640:	f002 fe6c 	bl	800d31c <HAL_TIM_Base_Init>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d001      	beq.n	800a64e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800a64a:	f7fb f82f 	bl	80056ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a64e:	2300      	movs	r3, #0
 800a650:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a652:	2300      	movs	r3, #0
 800a654:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800a656:	463b      	mov	r3, r7
 800a658:	4619      	mov	r1, r3
 800a65a:	4806      	ldr	r0, [pc, #24]	; (800a674 <MX_TIM7_Init+0x64>)
 800a65c:	f003 f9dc 	bl	800da18 <HAL_TIMEx_MasterConfigSynchronization>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d001      	beq.n	800a66a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800a666:	f7fb f821 	bl	80056ac <Error_Handler>
  }

}
 800a66a:	bf00      	nop
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	20010cf8 	.word	0x20010cf8
 800a678:	40001400 	.word	0x40001400

0800a67c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a68c:	d10e      	bne.n	800a6ac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a68e:	2300      	movs	r3, #0
 800a690:	60fb      	str	r3, [r7, #12]
 800a692:	4b16      	ldr	r3, [pc, #88]	; (800a6ec <HAL_TIM_Base_MspInit+0x70>)
 800a694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a696:	4a15      	ldr	r2, [pc, #84]	; (800a6ec <HAL_TIM_Base_MspInit+0x70>)
 800a698:	f043 0301 	orr.w	r3, r3, #1
 800a69c:	6413      	str	r3, [r2, #64]	; 0x40
 800a69e:	4b13      	ldr	r3, [pc, #76]	; (800a6ec <HAL_TIM_Base_MspInit+0x70>)
 800a6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a2:	f003 0301 	and.w	r3, r3, #1
 800a6a6:	60fb      	str	r3, [r7, #12]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800a6aa:	e01a      	b.n	800a6e2 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a0f      	ldr	r2, [pc, #60]	; (800a6f0 <HAL_TIM_Base_MspInit+0x74>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d115      	bne.n	800a6e2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	60bb      	str	r3, [r7, #8]
 800a6ba:	4b0c      	ldr	r3, [pc, #48]	; (800a6ec <HAL_TIM_Base_MspInit+0x70>)
 800a6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6be:	4a0b      	ldr	r2, [pc, #44]	; (800a6ec <HAL_TIM_Base_MspInit+0x70>)
 800a6c0:	f043 0320 	orr.w	r3, r3, #32
 800a6c4:	6413      	str	r3, [r2, #64]	; 0x40
 800a6c6:	4b09      	ldr	r3, [pc, #36]	; (800a6ec <HAL_TIM_Base_MspInit+0x70>)
 800a6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ca:	f003 0320 	and.w	r3, r3, #32
 800a6ce:	60bb      	str	r3, [r7, #8]
 800a6d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	2105      	movs	r1, #5
 800a6d6:	2037      	movs	r0, #55	; 0x37
 800a6d8:	f000 fa28 	bl	800ab2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800a6dc:	2037      	movs	r0, #55	; 0x37
 800a6de:	f000 fa41 	bl	800ab64 <HAL_NVIC_EnableIRQ>
}
 800a6e2:	bf00      	nop
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	40023800 	.word	0x40023800
 800a6f0:	40001400 	.word	0x40001400

0800a6f4 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800a6f8:	4b11      	ldr	r3, [pc, #68]	; (800a740 <MX_UART4_Init+0x4c>)
 800a6fa:	4a12      	ldr	r2, [pc, #72]	; (800a744 <MX_UART4_Init+0x50>)
 800a6fc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800a6fe:	4b10      	ldr	r3, [pc, #64]	; (800a740 <MX_UART4_Init+0x4c>)
 800a700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a704:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800a706:	4b0e      	ldr	r3, [pc, #56]	; (800a740 <MX_UART4_Init+0x4c>)
 800a708:	2200      	movs	r2, #0
 800a70a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800a70c:	4b0c      	ldr	r3, [pc, #48]	; (800a740 <MX_UART4_Init+0x4c>)
 800a70e:	2200      	movs	r2, #0
 800a710:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800a712:	4b0b      	ldr	r3, [pc, #44]	; (800a740 <MX_UART4_Init+0x4c>)
 800a714:	2200      	movs	r2, #0
 800a716:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800a718:	4b09      	ldr	r3, [pc, #36]	; (800a740 <MX_UART4_Init+0x4c>)
 800a71a:	220c      	movs	r2, #12
 800a71c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a71e:	4b08      	ldr	r3, [pc, #32]	; (800a740 <MX_UART4_Init+0x4c>)
 800a720:	2200      	movs	r2, #0
 800a722:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800a724:	4b06      	ldr	r3, [pc, #24]	; (800a740 <MX_UART4_Init+0x4c>)
 800a726:	2200      	movs	r2, #0
 800a728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800a72a:	4805      	ldr	r0, [pc, #20]	; (800a740 <MX_UART4_Init+0x4c>)
 800a72c:	f003 fa04 	bl	800db38 <HAL_UART_Init>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d001      	beq.n	800a73a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800a736:	f7fa ffb9 	bl	80056ac <Error_Handler>
  }

}
 800a73a:	bf00      	nop
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	20010d38 	.word	0x20010d38
 800a744:	40004c00 	.word	0x40004c00

0800a748 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b08a      	sub	sp, #40	; 0x28
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a750:	f107 0314 	add.w	r3, r7, #20
 800a754:	2200      	movs	r2, #0
 800a756:	601a      	str	r2, [r3, #0]
 800a758:	605a      	str	r2, [r3, #4]
 800a75a:	609a      	str	r2, [r3, #8]
 800a75c:	60da      	str	r2, [r3, #12]
 800a75e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a34      	ldr	r2, [pc, #208]	; (800a838 <HAL_UART_MspInit+0xf0>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d161      	bne.n	800a82e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800a76a:	2300      	movs	r3, #0
 800a76c:	613b      	str	r3, [r7, #16]
 800a76e:	4b33      	ldr	r3, [pc, #204]	; (800a83c <HAL_UART_MspInit+0xf4>)
 800a770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a772:	4a32      	ldr	r2, [pc, #200]	; (800a83c <HAL_UART_MspInit+0xf4>)
 800a774:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a778:	6413      	str	r3, [r2, #64]	; 0x40
 800a77a:	4b30      	ldr	r3, [pc, #192]	; (800a83c <HAL_UART_MspInit+0xf4>)
 800a77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a782:	613b      	str	r3, [r7, #16]
 800a784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a786:	2300      	movs	r3, #0
 800a788:	60fb      	str	r3, [r7, #12]
 800a78a:	4b2c      	ldr	r3, [pc, #176]	; (800a83c <HAL_UART_MspInit+0xf4>)
 800a78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a78e:	4a2b      	ldr	r2, [pc, #172]	; (800a83c <HAL_UART_MspInit+0xf4>)
 800a790:	f043 0301 	orr.w	r3, r3, #1
 800a794:	6313      	str	r3, [r2, #48]	; 0x30
 800a796:	4b29      	ldr	r3, [pc, #164]	; (800a83c <HAL_UART_MspInit+0xf4>)
 800a798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79a:	f003 0301 	and.w	r3, r3, #1
 800a79e:	60fb      	str	r3, [r7, #12]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800a7a2:	2303      	movs	r3, #3
 800a7a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7a6:	2302      	movs	r3, #2
 800a7a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7ae:	2303      	movs	r3, #3
 800a7b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800a7b2:	2308      	movs	r3, #8
 800a7b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7b6:	f107 0314 	add.w	r3, r7, #20
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	4820      	ldr	r0, [pc, #128]	; (800a840 <HAL_UART_MspInit+0xf8>)
 800a7be:	f000 fd7f 	bl	800b2c0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800a7c2:	4b20      	ldr	r3, [pc, #128]	; (800a844 <HAL_UART_MspInit+0xfc>)
 800a7c4:	4a20      	ldr	r2, [pc, #128]	; (800a848 <HAL_UART_MspInit+0x100>)
 800a7c6:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800a7c8:	4b1e      	ldr	r3, [pc, #120]	; (800a844 <HAL_UART_MspInit+0xfc>)
 800a7ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a7ce:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a7d0:	4b1c      	ldr	r3, [pc, #112]	; (800a844 <HAL_UART_MspInit+0xfc>)
 800a7d2:	2240      	movs	r2, #64	; 0x40
 800a7d4:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a7d6:	4b1b      	ldr	r3, [pc, #108]	; (800a844 <HAL_UART_MspInit+0xfc>)
 800a7d8:	2200      	movs	r2, #0
 800a7da:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a7dc:	4b19      	ldr	r3, [pc, #100]	; (800a844 <HAL_UART_MspInit+0xfc>)
 800a7de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a7e2:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a7e4:	4b17      	ldr	r3, [pc, #92]	; (800a844 <HAL_UART_MspInit+0xfc>)
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a7ea:	4b16      	ldr	r3, [pc, #88]	; (800a844 <HAL_UART_MspInit+0xfc>)
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800a7f0:	4b14      	ldr	r3, [pc, #80]	; (800a844 <HAL_UART_MspInit+0xfc>)
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a7f6:	4b13      	ldr	r3, [pc, #76]	; (800a844 <HAL_UART_MspInit+0xfc>)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a7fc:	4b11      	ldr	r3, [pc, #68]	; (800a844 <HAL_UART_MspInit+0xfc>)
 800a7fe:	2200      	movs	r2, #0
 800a800:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800a802:	4810      	ldr	r0, [pc, #64]	; (800a844 <HAL_UART_MspInit+0xfc>)
 800a804:	f000 f9bc 	bl	800ab80 <HAL_DMA_Init>
 800a808:	4603      	mov	r3, r0
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d001      	beq.n	800a812 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800a80e:	f7fa ff4d 	bl	80056ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a0b      	ldr	r2, [pc, #44]	; (800a844 <HAL_UART_MspInit+0xfc>)
 800a816:	631a      	str	r2, [r3, #48]	; 0x30
 800a818:	4a0a      	ldr	r2, [pc, #40]	; (800a844 <HAL_UART_MspInit+0xfc>)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800a81e:	2200      	movs	r2, #0
 800a820:	2105      	movs	r1, #5
 800a822:	2034      	movs	r0, #52	; 0x34
 800a824:	f000 f982 	bl	800ab2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800a828:	2034      	movs	r0, #52	; 0x34
 800a82a:	f000 f99b 	bl	800ab64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800a82e:	bf00      	nop
 800a830:	3728      	adds	r7, #40	; 0x28
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	40004c00 	.word	0x40004c00
 800a83c:	40023800 	.word	0x40023800
 800a840:	40020000 	.word	0x40020000
 800a844:	20010d78 	.word	0x20010d78
 800a848:	40026070 	.word	0x40026070

0800a84c <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a0c      	ldr	r2, [pc, #48]	; (800a88c <HAL_UART_TxCpltCallback+0x40>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d112      	bne.n	800a884 <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800a85e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a862:	490b      	ldr	r1, [pc, #44]	; (800a890 <HAL_UART_TxCpltCallback+0x44>)
 800a864:	480b      	ldr	r0, [pc, #44]	; (800a894 <HAL_UART_TxCpltCallback+0x48>)
 800a866:	f7fa ffdb 	bl	8005820 <ringBuff_PopArray>
 800a86a:	4603      	mov	r3, r0
 800a86c:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800a86e:	89fb      	ldrh	r3, [r7, #14]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d006      	beq.n	800a882 <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800a874:	89fb      	ldrh	r3, [r7, #14]
 800a876:	461a      	mov	r2, r3
 800a878:	4905      	ldr	r1, [pc, #20]	; (800a890 <HAL_UART_TxCpltCallback+0x44>)
 800a87a:	4807      	ldr	r0, [pc, #28]	; (800a898 <HAL_UART_TxCpltCallback+0x4c>)
 800a87c:	f003 f9aa 	bl	800dbd4 <HAL_UART_Transmit_DMA>
 800a880:	e000      	b.n	800a884 <HAL_UART_TxCpltCallback+0x38>
			return;
 800a882:	bf00      	nop
	}
}
 800a884:	3710      	adds	r7, #16
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	40004c00 	.word	0x40004c00
 800a890:	2000fd70 	.word	0x2000fd70
 800a894:	20002074 	.word	0x20002074
 800a898:	20010d38 	.word	0x20010d38

0800a89c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a89c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a8d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a8a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a8a2:	e003      	b.n	800a8ac <LoopCopyDataInit>

0800a8a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a8a4:	4b0c      	ldr	r3, [pc, #48]	; (800a8d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a8a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a8a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a8aa:	3104      	adds	r1, #4

0800a8ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a8ac:	480b      	ldr	r0, [pc, #44]	; (800a8dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a8ae:	4b0c      	ldr	r3, [pc, #48]	; (800a8e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a8b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a8b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a8b4:	d3f6      	bcc.n	800a8a4 <CopyDataInit>
  ldr  r2, =_sbss
 800a8b6:	4a0b      	ldr	r2, [pc, #44]	; (800a8e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a8b8:	e002      	b.n	800a8c0 <LoopFillZerobss>

0800a8ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a8ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a8bc:	f842 3b04 	str.w	r3, [r2], #4

0800a8c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a8c0:	4b09      	ldr	r3, [pc, #36]	; (800a8e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a8c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a8c4:	d3f9      	bcc.n	800a8ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a8c6:	f7ff fe3f 	bl	800a548 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a8ca:	f00a fc5d 	bl	8015188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a8ce:	f7fa fe41 	bl	8005554 <main>
  bx  lr    
 800a8d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a8d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800a8d8:	0801be90 	.word	0x0801be90
  ldr  r0, =_sdata
 800a8dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a8e0:	200043e8 	.word	0x200043e8
  ldr  r2, =_sbss
 800a8e4:	200043e8 	.word	0x200043e8
  ldr  r3, = _ebss
 800a8e8:	20011acc 	.word	0x20011acc

0800a8ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a8ec:	e7fe      	b.n	800a8ec <ADC_IRQHandler>
	...

0800a8f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a8f4:	4b0e      	ldr	r3, [pc, #56]	; (800a930 <HAL_Init+0x40>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a0d      	ldr	r2, [pc, #52]	; (800a930 <HAL_Init+0x40>)
 800a8fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a8fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a900:	4b0b      	ldr	r3, [pc, #44]	; (800a930 <HAL_Init+0x40>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a0a      	ldr	r2, [pc, #40]	; (800a930 <HAL_Init+0x40>)
 800a906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a90a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a90c:	4b08      	ldr	r3, [pc, #32]	; (800a930 <HAL_Init+0x40>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a07      	ldr	r2, [pc, #28]	; (800a930 <HAL_Init+0x40>)
 800a912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a918:	2003      	movs	r0, #3
 800a91a:	f000 f8fc 	bl	800ab16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a91e:	2000      	movs	r0, #0
 800a920:	f7ff fc92 	bl	800a248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a924:	f7ff fc64 	bl	800a1f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	40023c00 	.word	0x40023c00

0800a934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a934:	b480      	push	{r7}
 800a936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a938:	4b06      	ldr	r3, [pc, #24]	; (800a954 <HAL_IncTick+0x20>)
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	461a      	mov	r2, r3
 800a93e:	4b06      	ldr	r3, [pc, #24]	; (800a958 <HAL_IncTick+0x24>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4413      	add	r3, r2
 800a944:	4a04      	ldr	r2, [pc, #16]	; (800a958 <HAL_IncTick+0x24>)
 800a946:	6013      	str	r3, [r2, #0]
}
 800a948:	bf00      	nop
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop
 800a954:	20004094 	.word	0x20004094
 800a958:	20010dd8 	.word	0x20010dd8

0800a95c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a95c:	b480      	push	{r7}
 800a95e:	af00      	add	r7, sp, #0
  return uwTick;
 800a960:	4b03      	ldr	r3, [pc, #12]	; (800a970 <HAL_GetTick+0x14>)
 800a962:	681b      	ldr	r3, [r3, #0]
}
 800a964:	4618      	mov	r0, r3
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	20010dd8 	.word	0x20010dd8

0800a974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a97c:	f7ff ffee 	bl	800a95c <HAL_GetTick>
 800a980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a98c:	d005      	beq.n	800a99a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a98e:	4b0a      	ldr	r3, [pc, #40]	; (800a9b8 <HAL_Delay+0x44>)
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	461a      	mov	r2, r3
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	4413      	add	r3, r2
 800a998:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a99a:	bf00      	nop
 800a99c:	f7ff ffde 	bl	800a95c <HAL_GetTick>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	1ad3      	subs	r3, r2, r3
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d8f7      	bhi.n	800a99c <HAL_Delay+0x28>
  {
  }
}
 800a9ac:	bf00      	nop
 800a9ae:	bf00      	nop
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	20004094 	.word	0x20004094

0800a9bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f003 0307 	and.w	r3, r3, #7
 800a9ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a9cc:	4b0c      	ldr	r3, [pc, #48]	; (800aa00 <__NVIC_SetPriorityGrouping+0x44>)
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a9d2:	68ba      	ldr	r2, [r7, #8]
 800a9d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a9d8:	4013      	ands	r3, r2
 800a9da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a9e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a9e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a9ee:	4a04      	ldr	r2, [pc, #16]	; (800aa00 <__NVIC_SetPriorityGrouping+0x44>)
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	60d3      	str	r3, [r2, #12]
}
 800a9f4:	bf00      	nop
 800a9f6:	3714      	adds	r7, #20
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr
 800aa00:	e000ed00 	.word	0xe000ed00

0800aa04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800aa04:	b480      	push	{r7}
 800aa06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800aa08:	4b04      	ldr	r3, [pc, #16]	; (800aa1c <__NVIC_GetPriorityGrouping+0x18>)
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	0a1b      	lsrs	r3, r3, #8
 800aa0e:	f003 0307 	and.w	r3, r3, #7
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr
 800aa1c:	e000ed00 	.word	0xe000ed00

0800aa20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b083      	sub	sp, #12
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	4603      	mov	r3, r0
 800aa28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aa2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	db0b      	blt.n	800aa4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aa32:	79fb      	ldrb	r3, [r7, #7]
 800aa34:	f003 021f 	and.w	r2, r3, #31
 800aa38:	4907      	ldr	r1, [pc, #28]	; (800aa58 <__NVIC_EnableIRQ+0x38>)
 800aa3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa3e:	095b      	lsrs	r3, r3, #5
 800aa40:	2001      	movs	r0, #1
 800aa42:	fa00 f202 	lsl.w	r2, r0, r2
 800aa46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800aa4a:	bf00      	nop
 800aa4c:	370c      	adds	r7, #12
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop
 800aa58:	e000e100 	.word	0xe000e100

0800aa5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	4603      	mov	r3, r0
 800aa64:	6039      	str	r1, [r7, #0]
 800aa66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aa68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	db0a      	blt.n	800aa86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	b2da      	uxtb	r2, r3
 800aa74:	490c      	ldr	r1, [pc, #48]	; (800aaa8 <__NVIC_SetPriority+0x4c>)
 800aa76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa7a:	0112      	lsls	r2, r2, #4
 800aa7c:	b2d2      	uxtb	r2, r2
 800aa7e:	440b      	add	r3, r1
 800aa80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800aa84:	e00a      	b.n	800aa9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	b2da      	uxtb	r2, r3
 800aa8a:	4908      	ldr	r1, [pc, #32]	; (800aaac <__NVIC_SetPriority+0x50>)
 800aa8c:	79fb      	ldrb	r3, [r7, #7]
 800aa8e:	f003 030f 	and.w	r3, r3, #15
 800aa92:	3b04      	subs	r3, #4
 800aa94:	0112      	lsls	r2, r2, #4
 800aa96:	b2d2      	uxtb	r2, r2
 800aa98:	440b      	add	r3, r1
 800aa9a:	761a      	strb	r2, [r3, #24]
}
 800aa9c:	bf00      	nop
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr
 800aaa8:	e000e100 	.word	0xe000e100
 800aaac:	e000ed00 	.word	0xe000ed00

0800aab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b089      	sub	sp, #36	; 0x24
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f003 0307 	and.w	r3, r3, #7
 800aac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	f1c3 0307 	rsb	r3, r3, #7
 800aaca:	2b04      	cmp	r3, #4
 800aacc:	bf28      	it	cs
 800aace:	2304      	movcs	r3, #4
 800aad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	3304      	adds	r3, #4
 800aad6:	2b06      	cmp	r3, #6
 800aad8:	d902      	bls.n	800aae0 <NVIC_EncodePriority+0x30>
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	3b03      	subs	r3, #3
 800aade:	e000      	b.n	800aae2 <NVIC_EncodePriority+0x32>
 800aae0:	2300      	movs	r3, #0
 800aae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800aae4:	f04f 32ff 	mov.w	r2, #4294967295
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	fa02 f303 	lsl.w	r3, r2, r3
 800aaee:	43da      	mvns	r2, r3
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	401a      	ands	r2, r3
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800aaf8:	f04f 31ff 	mov.w	r1, #4294967295
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	fa01 f303 	lsl.w	r3, r1, r3
 800ab02:	43d9      	mvns	r1, r3
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ab08:	4313      	orrs	r3, r2
         );
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3724      	adds	r7, #36	; 0x24
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr

0800ab16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b082      	sub	sp, #8
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f7ff ff4c 	bl	800a9bc <__NVIC_SetPriorityGrouping>
}
 800ab24:	bf00      	nop
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b086      	sub	sp, #24
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	4603      	mov	r3, r0
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	607a      	str	r2, [r7, #4]
 800ab38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ab3e:	f7ff ff61 	bl	800aa04 <__NVIC_GetPriorityGrouping>
 800ab42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	68b9      	ldr	r1, [r7, #8]
 800ab48:	6978      	ldr	r0, [r7, #20]
 800ab4a:	f7ff ffb1 	bl	800aab0 <NVIC_EncodePriority>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab54:	4611      	mov	r1, r2
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7ff ff80 	bl	800aa5c <__NVIC_SetPriority>
}
 800ab5c:	bf00      	nop
 800ab5e:	3718      	adds	r7, #24
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ab6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7ff ff54 	bl	800aa20 <__NVIC_EnableIRQ>
}
 800ab78:	bf00      	nop
 800ab7a:	3708      	adds	r7, #8
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800ab8c:	f7ff fee6 	bl	800a95c <HAL_GetTick>
 800ab90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d101      	bne.n	800ab9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	e099      	b.n	800acd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2202      	movs	r2, #2
 800aba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f022 0201 	bic.w	r2, r2, #1
 800abba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800abbc:	e00f      	b.n	800abde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800abbe:	f7ff fecd 	bl	800a95c <HAL_GetTick>
 800abc2:	4602      	mov	r2, r0
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	1ad3      	subs	r3, r2, r3
 800abc8:	2b05      	cmp	r3, #5
 800abca:	d908      	bls.n	800abde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2220      	movs	r2, #32
 800abd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2203      	movs	r2, #3
 800abd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800abda:	2303      	movs	r3, #3
 800abdc:	e078      	b.n	800acd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f003 0301 	and.w	r3, r3, #1
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d1e8      	bne.n	800abbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800abf4:	697a      	ldr	r2, [r7, #20]
 800abf6:	4b38      	ldr	r3, [pc, #224]	; (800acd8 <HAL_DMA_Init+0x158>)
 800abf8:	4013      	ands	r3, r2
 800abfa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	685a      	ldr	r2, [r3, #4]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ac0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	691b      	ldr	r3, [r3, #16]
 800ac10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ac16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	699b      	ldr	r3, [r3, #24]
 800ac1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ac22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6a1b      	ldr	r3, [r3, #32]
 800ac28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ac2a:	697a      	ldr	r2, [r7, #20]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac34:	2b04      	cmp	r3, #4
 800ac36:	d107      	bne.n	800ac48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac40:	4313      	orrs	r3, r2
 800ac42:	697a      	ldr	r2, [r7, #20]
 800ac44:	4313      	orrs	r3, r2
 800ac46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	697a      	ldr	r2, [r7, #20]
 800ac4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	695b      	ldr	r3, [r3, #20]
 800ac56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	f023 0307 	bic.w	r3, r3, #7
 800ac5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac64:	697a      	ldr	r2, [r7, #20]
 800ac66:	4313      	orrs	r3, r2
 800ac68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6e:	2b04      	cmp	r3, #4
 800ac70:	d117      	bne.n	800aca2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac76:	697a      	ldr	r2, [r7, #20]
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d00e      	beq.n	800aca2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 fa9f 	bl	800b1c8 <DMA_CheckFifoParam>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d008      	beq.n	800aca2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2240      	movs	r2, #64	; 0x40
 800ac94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2201      	movs	r2, #1
 800ac9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e016      	b.n	800acd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	697a      	ldr	r2, [r7, #20]
 800aca8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 fa56 	bl	800b15c <DMA_CalcBaseAndBitshift>
 800acb0:	4603      	mov	r3, r0
 800acb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acb8:	223f      	movs	r2, #63	; 0x3f
 800acba:	409a      	lsls	r2, r3
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2200      	movs	r2, #0
 800acc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2201      	movs	r2, #1
 800acca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3718      	adds	r7, #24
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	f010803f 	.word	0xf010803f

0800acdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b086      	sub	sp, #24
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	607a      	str	r2, [r7, #4]
 800ace8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800acea:	2300      	movs	r3, #0
 800acec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acf2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d101      	bne.n	800ad02 <HAL_DMA_Start_IT+0x26>
 800acfe:	2302      	movs	r3, #2
 800ad00:	e040      	b.n	800ad84 <HAL_DMA_Start_IT+0xa8>
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2201      	movs	r2, #1
 800ad06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d12f      	bne.n	800ad76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2202      	movs	r2, #2
 800ad1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2200      	movs	r2, #0
 800ad22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	68b9      	ldr	r1, [r7, #8]
 800ad2a:	68f8      	ldr	r0, [r7, #12]
 800ad2c:	f000 f9e8 	bl	800b100 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad34:	223f      	movs	r2, #63	; 0x3f
 800ad36:	409a      	lsls	r2, r3
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f042 0216 	orr.w	r2, r2, #22
 800ad4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d007      	beq.n	800ad64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f042 0208 	orr.w	r2, r2, #8
 800ad62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f042 0201 	orr.w	r2, r2, #1
 800ad72:	601a      	str	r2, [r3, #0]
 800ad74:	e005      	b.n	800ad82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800ad7e:	2302      	movs	r3, #2
 800ad80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800ad82:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3718      	adds	r7, #24
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ad9a:	b2db      	uxtb	r3, r3
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	d004      	beq.n	800adaa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2280      	movs	r2, #128	; 0x80
 800ada4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ada6:	2301      	movs	r3, #1
 800ada8:	e00c      	b.n	800adc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2205      	movs	r2, #5
 800adae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f022 0201 	bic.w	r2, r2, #1
 800adc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800adc2:	2300      	movs	r3, #0
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b086      	sub	sp, #24
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800add8:	2300      	movs	r3, #0
 800adda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800addc:	4b92      	ldr	r3, [pc, #584]	; (800b028 <HAL_DMA_IRQHandler+0x258>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a92      	ldr	r2, [pc, #584]	; (800b02c <HAL_DMA_IRQHandler+0x25c>)
 800ade2:	fba2 2303 	umull	r2, r3, r2, r3
 800ade6:	0a9b      	lsrs	r3, r3, #10
 800ade8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adfa:	2208      	movs	r2, #8
 800adfc:	409a      	lsls	r2, r3
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	4013      	ands	r3, r2
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d01a      	beq.n	800ae3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f003 0304 	and.w	r3, r3, #4
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d013      	beq.n	800ae3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f022 0204 	bic.w	r2, r2, #4
 800ae22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae28:	2208      	movs	r2, #8
 800ae2a:	409a      	lsls	r2, r3
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae34:	f043 0201 	orr.w	r2, r3, #1
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae40:	2201      	movs	r2, #1
 800ae42:	409a      	lsls	r2, r3
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	4013      	ands	r3, r2
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d012      	beq.n	800ae72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	695b      	ldr	r3, [r3, #20]
 800ae52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00b      	beq.n	800ae72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae5e:	2201      	movs	r2, #1
 800ae60:	409a      	lsls	r2, r3
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae6a:	f043 0202 	orr.w	r2, r3, #2
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae76:	2204      	movs	r2, #4
 800ae78:	409a      	lsls	r2, r3
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	4013      	ands	r3, r2
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d012      	beq.n	800aea8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f003 0302 	and.w	r3, r3, #2
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00b      	beq.n	800aea8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae94:	2204      	movs	r2, #4
 800ae96:	409a      	lsls	r2, r3
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aea0:	f043 0204 	orr.w	r2, r3, #4
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aeac:	2210      	movs	r2, #16
 800aeae:	409a      	lsls	r2, r3
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	4013      	ands	r3, r2
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d043      	beq.n	800af40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f003 0308 	and.w	r3, r3, #8
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d03c      	beq.n	800af40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aeca:	2210      	movs	r2, #16
 800aecc:	409a      	lsls	r2, r3
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d018      	beq.n	800af12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d108      	bne.n	800af00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d024      	beq.n	800af40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	4798      	blx	r3
 800aefe:	e01f      	b.n	800af40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af04:	2b00      	cmp	r3, #0
 800af06:	d01b      	beq.n	800af40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	4798      	blx	r3
 800af10:	e016      	b.n	800af40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d107      	bne.n	800af30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f022 0208 	bic.w	r2, r2, #8
 800af2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af34:	2b00      	cmp	r3, #0
 800af36:	d003      	beq.n	800af40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af44:	2220      	movs	r2, #32
 800af46:	409a      	lsls	r2, r3
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	4013      	ands	r3, r2
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	f000 808e 	beq.w	800b06e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f003 0310 	and.w	r3, r3, #16
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	f000 8086 	beq.w	800b06e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af66:	2220      	movs	r2, #32
 800af68:	409a      	lsls	r2, r3
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800af74:	b2db      	uxtb	r3, r3
 800af76:	2b05      	cmp	r3, #5
 800af78:	d136      	bne.n	800afe8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f022 0216 	bic.w	r2, r2, #22
 800af88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	695a      	ldr	r2, [r3, #20]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d103      	bne.n	800afaa <HAL_DMA_IRQHandler+0x1da>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d007      	beq.n	800afba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f022 0208 	bic.w	r2, r2, #8
 800afb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afbe:	223f      	movs	r2, #63	; 0x3f
 800afc0:	409a      	lsls	r2, r3
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2200      	movs	r2, #0
 800afca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2201      	movs	r2, #1
 800afd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d07d      	beq.n	800b0da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	4798      	blx	r3
        }
        return;
 800afe6:	e078      	b.n	800b0da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d01c      	beq.n	800b030 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b000:	2b00      	cmp	r3, #0
 800b002:	d108      	bne.n	800b016 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d030      	beq.n	800b06e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	4798      	blx	r3
 800b014:	e02b      	b.n	800b06e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d027      	beq.n	800b06e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	4798      	blx	r3
 800b026:	e022      	b.n	800b06e <HAL_DMA_IRQHandler+0x29e>
 800b028:	2000408c 	.word	0x2000408c
 800b02c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d10f      	bne.n	800b05e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f022 0210 	bic.w	r2, r2, #16
 800b04c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2201      	movs	r2, #1
 800b05a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b062:	2b00      	cmp	r3, #0
 800b064:	d003      	beq.n	800b06e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b072:	2b00      	cmp	r3, #0
 800b074:	d032      	beq.n	800b0dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b07a:	f003 0301 	and.w	r3, r3, #1
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d022      	beq.n	800b0c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2205      	movs	r2, #5
 800b086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f022 0201 	bic.w	r2, r2, #1
 800b098:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	3301      	adds	r3, #1
 800b09e:	60bb      	str	r3, [r7, #8]
 800b0a0:	697a      	ldr	r2, [r7, #20]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d307      	bcc.n	800b0b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f003 0301 	and.w	r3, r3, #1
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d1f2      	bne.n	800b09a <HAL_DMA_IRQHandler+0x2ca>
 800b0b4:	e000      	b.n	800b0b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800b0b6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d005      	beq.n	800b0dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	4798      	blx	r3
 800b0d8:	e000      	b.n	800b0dc <HAL_DMA_IRQHandler+0x30c>
        return;
 800b0da:	bf00      	nop
    }
  }
}
 800b0dc:	3718      	adds	r7, #24
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop

0800b0e4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b0f2:	b2db      	uxtb	r3, r3
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b100:	b480      	push	{r7}
 800b102:	b085      	sub	sp, #20
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
 800b10c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b11c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	683a      	ldr	r2, [r7, #0]
 800b124:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	689b      	ldr	r3, [r3, #8]
 800b12a:	2b40      	cmp	r3, #64	; 0x40
 800b12c:	d108      	bne.n	800b140 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	68ba      	ldr	r2, [r7, #8]
 800b13c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b13e:	e007      	b.n	800b150 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	68ba      	ldr	r2, [r7, #8]
 800b146:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	60da      	str	r2, [r3, #12]
}
 800b150:	bf00      	nop
 800b152:	3714      	adds	r7, #20
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr

0800b15c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	3b10      	subs	r3, #16
 800b16c:	4a14      	ldr	r2, [pc, #80]	; (800b1c0 <DMA_CalcBaseAndBitshift+0x64>)
 800b16e:	fba2 2303 	umull	r2, r3, r2, r3
 800b172:	091b      	lsrs	r3, r3, #4
 800b174:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b176:	4a13      	ldr	r2, [pc, #76]	; (800b1c4 <DMA_CalcBaseAndBitshift+0x68>)
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	4413      	add	r3, r2
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	461a      	mov	r2, r3
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2b03      	cmp	r3, #3
 800b188:	d909      	bls.n	800b19e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b192:	f023 0303 	bic.w	r3, r3, #3
 800b196:	1d1a      	adds	r2, r3, #4
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	659a      	str	r2, [r3, #88]	; 0x58
 800b19c:	e007      	b.n	800b1ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b1a6:	f023 0303 	bic.w	r3, r3, #3
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3714      	adds	r7, #20
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr
 800b1be:	bf00      	nop
 800b1c0:	aaaaaaab 	.word	0xaaaaaaab
 800b1c4:	0801b778 	.word	0x0801b778

0800b1c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	699b      	ldr	r3, [r3, #24]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d11f      	bne.n	800b222 <DMA_CheckFifoParam+0x5a>
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	2b03      	cmp	r3, #3
 800b1e6:	d856      	bhi.n	800b296 <DMA_CheckFifoParam+0xce>
 800b1e8:	a201      	add	r2, pc, #4	; (adr r2, 800b1f0 <DMA_CheckFifoParam+0x28>)
 800b1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ee:	bf00      	nop
 800b1f0:	0800b201 	.word	0x0800b201
 800b1f4:	0800b213 	.word	0x0800b213
 800b1f8:	0800b201 	.word	0x0800b201
 800b1fc:	0800b297 	.word	0x0800b297
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d046      	beq.n	800b29a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b20c:	2301      	movs	r3, #1
 800b20e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b210:	e043      	b.n	800b29a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b216:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b21a:	d140      	bne.n	800b29e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b21c:	2301      	movs	r3, #1
 800b21e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b220:	e03d      	b.n	800b29e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	699b      	ldr	r3, [r3, #24]
 800b226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b22a:	d121      	bne.n	800b270 <DMA_CheckFifoParam+0xa8>
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	2b03      	cmp	r3, #3
 800b230:	d837      	bhi.n	800b2a2 <DMA_CheckFifoParam+0xda>
 800b232:	a201      	add	r2, pc, #4	; (adr r2, 800b238 <DMA_CheckFifoParam+0x70>)
 800b234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b238:	0800b249 	.word	0x0800b249
 800b23c:	0800b24f 	.word	0x0800b24f
 800b240:	0800b249 	.word	0x0800b249
 800b244:	0800b261 	.word	0x0800b261
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b248:	2301      	movs	r3, #1
 800b24a:	73fb      	strb	r3, [r7, #15]
      break;
 800b24c:	e030      	b.n	800b2b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b252:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b256:	2b00      	cmp	r3, #0
 800b258:	d025      	beq.n	800b2a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b25a:	2301      	movs	r3, #1
 800b25c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b25e:	e022      	b.n	800b2a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b264:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b268:	d11f      	bne.n	800b2aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b26a:	2301      	movs	r3, #1
 800b26c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b26e:	e01c      	b.n	800b2aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	2b02      	cmp	r3, #2
 800b274:	d903      	bls.n	800b27e <DMA_CheckFifoParam+0xb6>
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	2b03      	cmp	r3, #3
 800b27a:	d003      	beq.n	800b284 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b27c:	e018      	b.n	800b2b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b27e:	2301      	movs	r3, #1
 800b280:	73fb      	strb	r3, [r7, #15]
      break;
 800b282:	e015      	b.n	800b2b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b288:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00e      	beq.n	800b2ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b290:	2301      	movs	r3, #1
 800b292:	73fb      	strb	r3, [r7, #15]
      break;
 800b294:	e00b      	b.n	800b2ae <DMA_CheckFifoParam+0xe6>
      break;
 800b296:	bf00      	nop
 800b298:	e00a      	b.n	800b2b0 <DMA_CheckFifoParam+0xe8>
      break;
 800b29a:	bf00      	nop
 800b29c:	e008      	b.n	800b2b0 <DMA_CheckFifoParam+0xe8>
      break;
 800b29e:	bf00      	nop
 800b2a0:	e006      	b.n	800b2b0 <DMA_CheckFifoParam+0xe8>
      break;
 800b2a2:	bf00      	nop
 800b2a4:	e004      	b.n	800b2b0 <DMA_CheckFifoParam+0xe8>
      break;
 800b2a6:	bf00      	nop
 800b2a8:	e002      	b.n	800b2b0 <DMA_CheckFifoParam+0xe8>
      break;   
 800b2aa:	bf00      	nop
 800b2ac:	e000      	b.n	800b2b0 <DMA_CheckFifoParam+0xe8>
      break;
 800b2ae:	bf00      	nop
    }
  } 
  
  return status; 
 800b2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3714      	adds	r7, #20
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop

0800b2c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b089      	sub	sp, #36	; 0x24
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	61fb      	str	r3, [r7, #28]
 800b2da:	e16b      	b.n	800b5b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b2dc:	2201      	movs	r2, #1
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	697a      	ldr	r2, [r7, #20]
 800b2ec:	4013      	ands	r3, r2
 800b2ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b2f0:	693a      	ldr	r2, [r7, #16]
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	f040 815a 	bne.w	800b5ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d00b      	beq.n	800b31a <HAL_GPIO_Init+0x5a>
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	2b02      	cmp	r3, #2
 800b308:	d007      	beq.n	800b31a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b30e:	2b11      	cmp	r3, #17
 800b310:	d003      	beq.n	800b31a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	2b12      	cmp	r3, #18
 800b318:	d130      	bne.n	800b37c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	689b      	ldr	r3, [r3, #8]
 800b31e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	005b      	lsls	r3, r3, #1
 800b324:	2203      	movs	r2, #3
 800b326:	fa02 f303 	lsl.w	r3, r2, r3
 800b32a:	43db      	mvns	r3, r3
 800b32c:	69ba      	ldr	r2, [r7, #24]
 800b32e:	4013      	ands	r3, r2
 800b330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	68da      	ldr	r2, [r3, #12]
 800b336:	69fb      	ldr	r3, [r7, #28]
 800b338:	005b      	lsls	r3, r3, #1
 800b33a:	fa02 f303 	lsl.w	r3, r2, r3
 800b33e:	69ba      	ldr	r2, [r7, #24]
 800b340:	4313      	orrs	r3, r2
 800b342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	69ba      	ldr	r2, [r7, #24]
 800b348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b350:	2201      	movs	r2, #1
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	fa02 f303 	lsl.w	r3, r2, r3
 800b358:	43db      	mvns	r3, r3
 800b35a:	69ba      	ldr	r2, [r7, #24]
 800b35c:	4013      	ands	r3, r2
 800b35e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	091b      	lsrs	r3, r3, #4
 800b366:	f003 0201 	and.w	r2, r3, #1
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	fa02 f303 	lsl.w	r3, r2, r3
 800b370:	69ba      	ldr	r2, [r7, #24]
 800b372:	4313      	orrs	r3, r2
 800b374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	69ba      	ldr	r2, [r7, #24]
 800b37a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	005b      	lsls	r3, r3, #1
 800b386:	2203      	movs	r2, #3
 800b388:	fa02 f303 	lsl.w	r3, r2, r3
 800b38c:	43db      	mvns	r3, r3
 800b38e:	69ba      	ldr	r2, [r7, #24]
 800b390:	4013      	ands	r3, r2
 800b392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	689a      	ldr	r2, [r3, #8]
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	005b      	lsls	r3, r3, #1
 800b39c:	fa02 f303 	lsl.w	r3, r2, r3
 800b3a0:	69ba      	ldr	r2, [r7, #24]
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	69ba      	ldr	r2, [r7, #24]
 800b3aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	2b02      	cmp	r3, #2
 800b3b2:	d003      	beq.n	800b3bc <HAL_GPIO_Init+0xfc>
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	2b12      	cmp	r3, #18
 800b3ba:	d123      	bne.n	800b404 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	08da      	lsrs	r2, r3, #3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	3208      	adds	r2, #8
 800b3c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	f003 0307 	and.w	r3, r3, #7
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	220f      	movs	r2, #15
 800b3d4:	fa02 f303 	lsl.w	r3, r2, r3
 800b3d8:	43db      	mvns	r3, r3
 800b3da:	69ba      	ldr	r2, [r7, #24]
 800b3dc:	4013      	ands	r3, r2
 800b3de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	691a      	ldr	r2, [r3, #16]
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	f003 0307 	and.w	r3, r3, #7
 800b3ea:	009b      	lsls	r3, r3, #2
 800b3ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b3f0:	69ba      	ldr	r2, [r7, #24]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b3f6:	69fb      	ldr	r3, [r7, #28]
 800b3f8:	08da      	lsrs	r2, r3, #3
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	3208      	adds	r2, #8
 800b3fe:	69b9      	ldr	r1, [r7, #24]
 800b400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b40a:	69fb      	ldr	r3, [r7, #28]
 800b40c:	005b      	lsls	r3, r3, #1
 800b40e:	2203      	movs	r2, #3
 800b410:	fa02 f303 	lsl.w	r3, r2, r3
 800b414:	43db      	mvns	r3, r3
 800b416:	69ba      	ldr	r2, [r7, #24]
 800b418:	4013      	ands	r3, r2
 800b41a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	f003 0203 	and.w	r2, r3, #3
 800b424:	69fb      	ldr	r3, [r7, #28]
 800b426:	005b      	lsls	r3, r3, #1
 800b428:	fa02 f303 	lsl.w	r3, r2, r3
 800b42c:	69ba      	ldr	r2, [r7, #24]
 800b42e:	4313      	orrs	r3, r2
 800b430:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	69ba      	ldr	r2, [r7, #24]
 800b436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b440:	2b00      	cmp	r3, #0
 800b442:	f000 80b4 	beq.w	800b5ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b446:	2300      	movs	r3, #0
 800b448:	60fb      	str	r3, [r7, #12]
 800b44a:	4b60      	ldr	r3, [pc, #384]	; (800b5cc <HAL_GPIO_Init+0x30c>)
 800b44c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b44e:	4a5f      	ldr	r2, [pc, #380]	; (800b5cc <HAL_GPIO_Init+0x30c>)
 800b450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b454:	6453      	str	r3, [r2, #68]	; 0x44
 800b456:	4b5d      	ldr	r3, [pc, #372]	; (800b5cc <HAL_GPIO_Init+0x30c>)
 800b458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b45a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b45e:	60fb      	str	r3, [r7, #12]
 800b460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b462:	4a5b      	ldr	r2, [pc, #364]	; (800b5d0 <HAL_GPIO_Init+0x310>)
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	089b      	lsrs	r3, r3, #2
 800b468:	3302      	adds	r3, #2
 800b46a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b46e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	f003 0303 	and.w	r3, r3, #3
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	220f      	movs	r2, #15
 800b47a:	fa02 f303 	lsl.w	r3, r2, r3
 800b47e:	43db      	mvns	r3, r3
 800b480:	69ba      	ldr	r2, [r7, #24]
 800b482:	4013      	ands	r3, r2
 800b484:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4a52      	ldr	r2, [pc, #328]	; (800b5d4 <HAL_GPIO_Init+0x314>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d02b      	beq.n	800b4e6 <HAL_GPIO_Init+0x226>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	4a51      	ldr	r2, [pc, #324]	; (800b5d8 <HAL_GPIO_Init+0x318>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d025      	beq.n	800b4e2 <HAL_GPIO_Init+0x222>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4a50      	ldr	r2, [pc, #320]	; (800b5dc <HAL_GPIO_Init+0x31c>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d01f      	beq.n	800b4de <HAL_GPIO_Init+0x21e>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a4f      	ldr	r2, [pc, #316]	; (800b5e0 <HAL_GPIO_Init+0x320>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d019      	beq.n	800b4da <HAL_GPIO_Init+0x21a>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	4a4e      	ldr	r2, [pc, #312]	; (800b5e4 <HAL_GPIO_Init+0x324>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d013      	beq.n	800b4d6 <HAL_GPIO_Init+0x216>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	4a4d      	ldr	r2, [pc, #308]	; (800b5e8 <HAL_GPIO_Init+0x328>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d00d      	beq.n	800b4d2 <HAL_GPIO_Init+0x212>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	4a4c      	ldr	r2, [pc, #304]	; (800b5ec <HAL_GPIO_Init+0x32c>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d007      	beq.n	800b4ce <HAL_GPIO_Init+0x20e>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4a4b      	ldr	r2, [pc, #300]	; (800b5f0 <HAL_GPIO_Init+0x330>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d101      	bne.n	800b4ca <HAL_GPIO_Init+0x20a>
 800b4c6:	2307      	movs	r3, #7
 800b4c8:	e00e      	b.n	800b4e8 <HAL_GPIO_Init+0x228>
 800b4ca:	2308      	movs	r3, #8
 800b4cc:	e00c      	b.n	800b4e8 <HAL_GPIO_Init+0x228>
 800b4ce:	2306      	movs	r3, #6
 800b4d0:	e00a      	b.n	800b4e8 <HAL_GPIO_Init+0x228>
 800b4d2:	2305      	movs	r3, #5
 800b4d4:	e008      	b.n	800b4e8 <HAL_GPIO_Init+0x228>
 800b4d6:	2304      	movs	r3, #4
 800b4d8:	e006      	b.n	800b4e8 <HAL_GPIO_Init+0x228>
 800b4da:	2303      	movs	r3, #3
 800b4dc:	e004      	b.n	800b4e8 <HAL_GPIO_Init+0x228>
 800b4de:	2302      	movs	r3, #2
 800b4e0:	e002      	b.n	800b4e8 <HAL_GPIO_Init+0x228>
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e000      	b.n	800b4e8 <HAL_GPIO_Init+0x228>
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	69fa      	ldr	r2, [r7, #28]
 800b4ea:	f002 0203 	and.w	r2, r2, #3
 800b4ee:	0092      	lsls	r2, r2, #2
 800b4f0:	4093      	lsls	r3, r2
 800b4f2:	69ba      	ldr	r2, [r7, #24]
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b4f8:	4935      	ldr	r1, [pc, #212]	; (800b5d0 <HAL_GPIO_Init+0x310>)
 800b4fa:	69fb      	ldr	r3, [r7, #28]
 800b4fc:	089b      	lsrs	r3, r3, #2
 800b4fe:	3302      	adds	r3, #2
 800b500:	69ba      	ldr	r2, [r7, #24]
 800b502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b506:	4b3b      	ldr	r3, [pc, #236]	; (800b5f4 <HAL_GPIO_Init+0x334>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	43db      	mvns	r3, r3
 800b510:	69ba      	ldr	r2, [r7, #24]
 800b512:	4013      	ands	r3, r2
 800b514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d003      	beq.n	800b52a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b522:	69ba      	ldr	r2, [r7, #24]
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	4313      	orrs	r3, r2
 800b528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b52a:	4a32      	ldr	r2, [pc, #200]	; (800b5f4 <HAL_GPIO_Init+0x334>)
 800b52c:	69bb      	ldr	r3, [r7, #24]
 800b52e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b530:	4b30      	ldr	r3, [pc, #192]	; (800b5f4 <HAL_GPIO_Init+0x334>)
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	43db      	mvns	r3, r3
 800b53a:	69ba      	ldr	r2, [r7, #24]
 800b53c:	4013      	ands	r3, r2
 800b53e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d003      	beq.n	800b554 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b54c:	69ba      	ldr	r2, [r7, #24]
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	4313      	orrs	r3, r2
 800b552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b554:	4a27      	ldr	r2, [pc, #156]	; (800b5f4 <HAL_GPIO_Init+0x334>)
 800b556:	69bb      	ldr	r3, [r7, #24]
 800b558:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b55a:	4b26      	ldr	r3, [pc, #152]	; (800b5f4 <HAL_GPIO_Init+0x334>)
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	43db      	mvns	r3, r3
 800b564:	69ba      	ldr	r2, [r7, #24]
 800b566:	4013      	ands	r3, r2
 800b568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b572:	2b00      	cmp	r3, #0
 800b574:	d003      	beq.n	800b57e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b576:	69ba      	ldr	r2, [r7, #24]
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b57e:	4a1d      	ldr	r2, [pc, #116]	; (800b5f4 <HAL_GPIO_Init+0x334>)
 800b580:	69bb      	ldr	r3, [r7, #24]
 800b582:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b584:	4b1b      	ldr	r3, [pc, #108]	; (800b5f4 <HAL_GPIO_Init+0x334>)
 800b586:	68db      	ldr	r3, [r3, #12]
 800b588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	43db      	mvns	r3, r3
 800b58e:	69ba      	ldr	r2, [r7, #24]
 800b590:	4013      	ands	r3, r2
 800b592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d003      	beq.n	800b5a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b5a0:	69ba      	ldr	r2, [r7, #24]
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b5a8:	4a12      	ldr	r2, [pc, #72]	; (800b5f4 <HAL_GPIO_Init+0x334>)
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	61fb      	str	r3, [r7, #28]
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	2b0f      	cmp	r3, #15
 800b5b8:	f67f ae90 	bls.w	800b2dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b5bc:	bf00      	nop
 800b5be:	bf00      	nop
 800b5c0:	3724      	adds	r7, #36	; 0x24
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop
 800b5cc:	40023800 	.word	0x40023800
 800b5d0:	40013800 	.word	0x40013800
 800b5d4:	40020000 	.word	0x40020000
 800b5d8:	40020400 	.word	0x40020400
 800b5dc:	40020800 	.word	0x40020800
 800b5e0:	40020c00 	.word	0x40020c00
 800b5e4:	40021000 	.word	0x40021000
 800b5e8:	40021400 	.word	0x40021400
 800b5ec:	40021800 	.word	0x40021800
 800b5f0:	40021c00 	.word	0x40021c00
 800b5f4:	40013c00 	.word	0x40013c00

0800b5f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b083      	sub	sp, #12
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	460b      	mov	r3, r1
 800b602:	807b      	strh	r3, [r7, #2]
 800b604:	4613      	mov	r3, r2
 800b606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b608:	787b      	ldrb	r3, [r7, #1]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d003      	beq.n	800b616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b60e:	887a      	ldrh	r2, [r7, #2]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b614:	e003      	b.n	800b61e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b616:	887b      	ldrh	r3, [r7, #2]
 800b618:	041a      	lsls	r2, r3, #16
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	619a      	str	r2, [r3, #24]
}
 800b61e:	bf00      	nop
 800b620:	370c      	adds	r7, #12
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr
	...

0800b62c <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	60b9      	str	r1, [r7, #8]
 800b636:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d101      	bne.n	800b642 <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800b63e:	2301      	movs	r3, #1
 800b640:	e043      	b.n	800b6ca <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d106      	bne.n	800b65c <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2200      	movs	r2, #0
 800b652:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800b656:	68f8      	ldr	r0, [r7, #12]
 800b658:	f7f9 f836 	bl	80046c8 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	3308      	adds	r3, #8
 800b664:	4619      	mov	r1, r3
 800b666:	4610      	mov	r0, r2
 800b668:	f003 f992 	bl	800e990 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6818      	ldr	r0, [r3, #0]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	689b      	ldr	r3, [r3, #8]
 800b674:	461a      	mov	r2, r3
 800b676:	68b9      	ldr	r1, [r7, #8]
 800b678:	f003 f9dc 	bl	800ea34 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	6858      	ldr	r0, [r3, #4]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	689a      	ldr	r2, [r3, #8]
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b688:	6879      	ldr	r1, [r7, #4]
 800b68a:	f003 fa11 	bl	800eab0 <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	68fa      	ldr	r2, [r7, #12]
 800b694:	6892      	ldr	r2, [r2, #8]
 800b696:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	68fa      	ldr	r2, [r7, #12]
 800b6a0:	6892      	ldr	r2, [r2, #8]
 800b6a2:	f041 0101 	orr.w	r1, r1, #1
 800b6a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	695b      	ldr	r3, [r3, #20]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d103      	bne.n	800b6ba <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800b6b2:	4b08      	ldr	r3, [pc, #32]	; (800b6d4 <HAL_NOR_Init+0xa8>)
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	601a      	str	r2, [r3, #0]
 800b6b8:	e002      	b.n	800b6c0 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800b6ba:	4b06      	ldr	r3, [pc, #24]	; (800b6d4 <HAL_NOR_Init+0xa8>)
 800b6bc:	2201      	movs	r2, #1
 800b6be:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800b6c8:	2300      	movs	r3, #0
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3710      	adds	r7, #16
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	20004868 	.word	0x20004868

0800b6d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6da:	b08f      	sub	sp, #60	; 0x3c
 800b6dc:	af0a      	add	r7, sp, #40	; 0x28
 800b6de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d101      	bne.n	800b6ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e10f      	b.n	800b90a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800b6f6:	b2db      	uxtb	r3, r3
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d106      	bne.n	800b70a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f009 fa3d 	bl	8014b84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2203      	movs	r2, #3
 800b70e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d102      	bne.n	800b724 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4618      	mov	r0, r3
 800b72a:	f003 fb16 	bl	800ed5a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	603b      	str	r3, [r7, #0]
 800b734:	687e      	ldr	r6, [r7, #4]
 800b736:	466d      	mov	r5, sp
 800b738:	f106 0410 	add.w	r4, r6, #16
 800b73c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b73e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b744:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b748:	e885 0003 	stmia.w	r5, {r0, r1}
 800b74c:	1d33      	adds	r3, r6, #4
 800b74e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b750:	6838      	ldr	r0, [r7, #0]
 800b752:	f003 f9ed 	bl	800eb30 <USB_CoreInit>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d005      	beq.n	800b768 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2202      	movs	r2, #2
 800b760:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800b764:	2301      	movs	r3, #1
 800b766:	e0d0      	b.n	800b90a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2100      	movs	r1, #0
 800b76e:	4618      	mov	r0, r3
 800b770:	f003 fb04 	bl	800ed7c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b774:	2300      	movs	r3, #0
 800b776:	73fb      	strb	r3, [r7, #15]
 800b778:	e04a      	b.n	800b810 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b77a:	7bfa      	ldrb	r2, [r7, #15]
 800b77c:	6879      	ldr	r1, [r7, #4]
 800b77e:	4613      	mov	r3, r2
 800b780:	00db      	lsls	r3, r3, #3
 800b782:	1a9b      	subs	r3, r3, r2
 800b784:	009b      	lsls	r3, r3, #2
 800b786:	440b      	add	r3, r1
 800b788:	333d      	adds	r3, #61	; 0x3d
 800b78a:	2201      	movs	r2, #1
 800b78c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b78e:	7bfa      	ldrb	r2, [r7, #15]
 800b790:	6879      	ldr	r1, [r7, #4]
 800b792:	4613      	mov	r3, r2
 800b794:	00db      	lsls	r3, r3, #3
 800b796:	1a9b      	subs	r3, r3, r2
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	440b      	add	r3, r1
 800b79c:	333c      	adds	r3, #60	; 0x3c
 800b79e:	7bfa      	ldrb	r2, [r7, #15]
 800b7a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b7a2:	7bfa      	ldrb	r2, [r7, #15]
 800b7a4:	7bfb      	ldrb	r3, [r7, #15]
 800b7a6:	b298      	uxth	r0, r3
 800b7a8:	6879      	ldr	r1, [r7, #4]
 800b7aa:	4613      	mov	r3, r2
 800b7ac:	00db      	lsls	r3, r3, #3
 800b7ae:	1a9b      	subs	r3, r3, r2
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	440b      	add	r3, r1
 800b7b4:	3342      	adds	r3, #66	; 0x42
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b7ba:	7bfa      	ldrb	r2, [r7, #15]
 800b7bc:	6879      	ldr	r1, [r7, #4]
 800b7be:	4613      	mov	r3, r2
 800b7c0:	00db      	lsls	r3, r3, #3
 800b7c2:	1a9b      	subs	r3, r3, r2
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	440b      	add	r3, r1
 800b7c8:	333f      	adds	r3, #63	; 0x3f
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b7ce:	7bfa      	ldrb	r2, [r7, #15]
 800b7d0:	6879      	ldr	r1, [r7, #4]
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	00db      	lsls	r3, r3, #3
 800b7d6:	1a9b      	subs	r3, r3, r2
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	440b      	add	r3, r1
 800b7dc:	3344      	adds	r3, #68	; 0x44
 800b7de:	2200      	movs	r2, #0
 800b7e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b7e2:	7bfa      	ldrb	r2, [r7, #15]
 800b7e4:	6879      	ldr	r1, [r7, #4]
 800b7e6:	4613      	mov	r3, r2
 800b7e8:	00db      	lsls	r3, r3, #3
 800b7ea:	1a9b      	subs	r3, r3, r2
 800b7ec:	009b      	lsls	r3, r3, #2
 800b7ee:	440b      	add	r3, r1
 800b7f0:	3348      	adds	r3, #72	; 0x48
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b7f6:	7bfa      	ldrb	r2, [r7, #15]
 800b7f8:	6879      	ldr	r1, [r7, #4]
 800b7fa:	4613      	mov	r3, r2
 800b7fc:	00db      	lsls	r3, r3, #3
 800b7fe:	1a9b      	subs	r3, r3, r2
 800b800:	009b      	lsls	r3, r3, #2
 800b802:	440b      	add	r3, r1
 800b804:	3350      	adds	r3, #80	; 0x50
 800b806:	2200      	movs	r2, #0
 800b808:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b80a:	7bfb      	ldrb	r3, [r7, #15]
 800b80c:	3301      	adds	r3, #1
 800b80e:	73fb      	strb	r3, [r7, #15]
 800b810:	7bfa      	ldrb	r2, [r7, #15]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	429a      	cmp	r2, r3
 800b818:	d3af      	bcc.n	800b77a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b81a:	2300      	movs	r3, #0
 800b81c:	73fb      	strb	r3, [r7, #15]
 800b81e:	e044      	b.n	800b8aa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b820:	7bfa      	ldrb	r2, [r7, #15]
 800b822:	6879      	ldr	r1, [r7, #4]
 800b824:	4613      	mov	r3, r2
 800b826:	00db      	lsls	r3, r3, #3
 800b828:	1a9b      	subs	r3, r3, r2
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	440b      	add	r3, r1
 800b82e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800b832:	2200      	movs	r2, #0
 800b834:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b836:	7bfa      	ldrb	r2, [r7, #15]
 800b838:	6879      	ldr	r1, [r7, #4]
 800b83a:	4613      	mov	r3, r2
 800b83c:	00db      	lsls	r3, r3, #3
 800b83e:	1a9b      	subs	r3, r3, r2
 800b840:	009b      	lsls	r3, r3, #2
 800b842:	440b      	add	r3, r1
 800b844:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b848:	7bfa      	ldrb	r2, [r7, #15]
 800b84a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b84c:	7bfa      	ldrb	r2, [r7, #15]
 800b84e:	6879      	ldr	r1, [r7, #4]
 800b850:	4613      	mov	r3, r2
 800b852:	00db      	lsls	r3, r3, #3
 800b854:	1a9b      	subs	r3, r3, r2
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	440b      	add	r3, r1
 800b85a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b85e:	2200      	movs	r2, #0
 800b860:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b862:	7bfa      	ldrb	r2, [r7, #15]
 800b864:	6879      	ldr	r1, [r7, #4]
 800b866:	4613      	mov	r3, r2
 800b868:	00db      	lsls	r3, r3, #3
 800b86a:	1a9b      	subs	r3, r3, r2
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	440b      	add	r3, r1
 800b870:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b874:	2200      	movs	r2, #0
 800b876:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b878:	7bfa      	ldrb	r2, [r7, #15]
 800b87a:	6879      	ldr	r1, [r7, #4]
 800b87c:	4613      	mov	r3, r2
 800b87e:	00db      	lsls	r3, r3, #3
 800b880:	1a9b      	subs	r3, r3, r2
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	440b      	add	r3, r1
 800b886:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b88a:	2200      	movs	r2, #0
 800b88c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b88e:	7bfa      	ldrb	r2, [r7, #15]
 800b890:	6879      	ldr	r1, [r7, #4]
 800b892:	4613      	mov	r3, r2
 800b894:	00db      	lsls	r3, r3, #3
 800b896:	1a9b      	subs	r3, r3, r2
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	440b      	add	r3, r1
 800b89c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b8a4:	7bfb      	ldrb	r3, [r7, #15]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	73fb      	strb	r3, [r7, #15]
 800b8aa:	7bfa      	ldrb	r2, [r7, #15]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d3b5      	bcc.n	800b820 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	603b      	str	r3, [r7, #0]
 800b8ba:	687e      	ldr	r6, [r7, #4]
 800b8bc:	466d      	mov	r5, sp
 800b8be:	f106 0410 	add.w	r4, r6, #16
 800b8c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b8c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b8c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b8c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b8ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b8ce:	e885 0003 	stmia.w	r5, {r0, r1}
 800b8d2:	1d33      	adds	r3, r6, #4
 800b8d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b8d6:	6838      	ldr	r0, [r7, #0]
 800b8d8:	f003 fa7a 	bl	800edd0 <USB_DevInit>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d005      	beq.n	800b8ee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2202      	movs	r2, #2
 800b8e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e00d      	b.n	800b90a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4618      	mov	r0, r3
 800b904:	f004 fac2 	bl	800fe8c <USB_DevDisconnect>

  return HAL_OK;
 800b908:	2300      	movs	r3, #0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3714      	adds	r7, #20
 800b90e:	46bd      	mov	sp, r7
 800b910:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b912 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b084      	sub	sp, #16
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b926:	2b01      	cmp	r3, #1
 800b928:	d101      	bne.n	800b92e <HAL_PCD_Start+0x1c>
 800b92a:	2302      	movs	r3, #2
 800b92c:	e020      	b.n	800b970 <HAL_PCD_Start+0x5e>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2201      	movs	r2, #1
 800b932:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d109      	bne.n	800b952 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800b942:	2b01      	cmp	r3, #1
 800b944:	d005      	beq.n	800b952 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b94a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4618      	mov	r0, r3
 800b958:	f003 f9ee 	bl	800ed38 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4618      	mov	r0, r3
 800b962:	f004 fa72 	bl	800fe4a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b96e:	2300      	movs	r3, #0
}
 800b970:	4618      	mov	r0, r3
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b978:	b590      	push	{r4, r7, lr}
 800b97a:	b08d      	sub	sp, #52	; 0x34
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b986:	6a3b      	ldr	r3, [r7, #32]
 800b988:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4618      	mov	r0, r3
 800b990:	f004 fb30 	bl	800fff4 <USB_GetMode>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	f040 839d 	bne.w	800c0d6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f004 fa94 	bl	800fece <USB_ReadInterrupts>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	f000 8393 	beq.w	800c0d4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f004 fa8b 	bl	800fece <USB_ReadInterrupts>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	f003 0302 	and.w	r3, r3, #2
 800b9be:	2b02      	cmp	r3, #2
 800b9c0:	d107      	bne.n	800b9d2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	695a      	ldr	r2, [r3, #20]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f002 0202 	and.w	r2, r2, #2
 800b9d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f004 fa79 	bl	800fece <USB_ReadInterrupts>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	f003 0310 	and.w	r3, r3, #16
 800b9e2:	2b10      	cmp	r3, #16
 800b9e4:	d161      	bne.n	800baaa <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	699a      	ldr	r2, [r3, #24]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f022 0210 	bic.w	r2, r2, #16
 800b9f4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800b9f6:	6a3b      	ldr	r3, [r7, #32]
 800b9f8:	6a1b      	ldr	r3, [r3, #32]
 800b9fa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800b9fc:	69bb      	ldr	r3, [r7, #24]
 800b9fe:	f003 020f 	and.w	r2, r3, #15
 800ba02:	4613      	mov	r3, r2
 800ba04:	00db      	lsls	r3, r3, #3
 800ba06:	1a9b      	subs	r3, r3, r2
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	4413      	add	r3, r2
 800ba12:	3304      	adds	r3, #4
 800ba14:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	0c5b      	lsrs	r3, r3, #17
 800ba1a:	f003 030f 	and.w	r3, r3, #15
 800ba1e:	2b02      	cmp	r3, #2
 800ba20:	d124      	bne.n	800ba6c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800ba22:	69ba      	ldr	r2, [r7, #24]
 800ba24:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800ba28:	4013      	ands	r3, r2
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d035      	beq.n	800ba9a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	091b      	lsrs	r3, r3, #4
 800ba36:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ba38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	461a      	mov	r2, r3
 800ba40:	6a38      	ldr	r0, [r7, #32]
 800ba42:	f004 f8df 	bl	800fc04 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	68da      	ldr	r2, [r3, #12]
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	091b      	lsrs	r3, r3, #4
 800ba4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ba52:	441a      	add	r2, r3
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	699a      	ldr	r2, [r3, #24]
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	091b      	lsrs	r3, r3, #4
 800ba60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ba64:	441a      	add	r2, r3
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	619a      	str	r2, [r3, #24]
 800ba6a:	e016      	b.n	800ba9a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800ba6c:	69bb      	ldr	r3, [r7, #24]
 800ba6e:	0c5b      	lsrs	r3, r3, #17
 800ba70:	f003 030f 	and.w	r3, r3, #15
 800ba74:	2b06      	cmp	r3, #6
 800ba76:	d110      	bne.n	800ba9a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ba7e:	2208      	movs	r2, #8
 800ba80:	4619      	mov	r1, r3
 800ba82:	6a38      	ldr	r0, [r7, #32]
 800ba84:	f004 f8be 	bl	800fc04 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	699a      	ldr	r2, [r3, #24]
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	091b      	lsrs	r3, r3, #4
 800ba90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ba94:	441a      	add	r2, r3
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	699a      	ldr	r2, [r3, #24]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f042 0210 	orr.w	r2, r2, #16
 800baa8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4618      	mov	r0, r3
 800bab0:	f004 fa0d 	bl	800fece <USB_ReadInterrupts>
 800bab4:	4603      	mov	r3, r0
 800bab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800baba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800babe:	d16e      	bne.n	800bb9e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800bac0:	2300      	movs	r3, #0
 800bac2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4618      	mov	r0, r3
 800baca:	f004 fa13 	bl	800fef4 <USB_ReadDevAllOutEpInterrupt>
 800bace:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800bad0:	e062      	b.n	800bb98 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800bad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad4:	f003 0301 	and.w	r3, r3, #1
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d057      	beq.n	800bb8c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bae2:	b2d2      	uxtb	r2, r2
 800bae4:	4611      	mov	r1, r2
 800bae6:	4618      	mov	r0, r3
 800bae8:	f004 fa38 	bl	800ff5c <USB_ReadDevOutEPInterrupt>
 800baec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	f003 0301 	and.w	r3, r3, #1
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d00c      	beq.n	800bb12 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800baf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafa:	015a      	lsls	r2, r3, #5
 800bafc:	69fb      	ldr	r3, [r7, #28]
 800bafe:	4413      	add	r3, r2
 800bb00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb04:	461a      	mov	r2, r3
 800bb06:	2301      	movs	r3, #1
 800bb08:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800bb0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 fdb1 	bl	800c674 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	f003 0308 	and.w	r3, r3, #8
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d00c      	beq.n	800bb36 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1e:	015a      	lsls	r2, r3, #5
 800bb20:	69fb      	ldr	r3, [r7, #28]
 800bb22:	4413      	add	r3, r2
 800bb24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb28:	461a      	mov	r2, r3
 800bb2a:	2308      	movs	r3, #8
 800bb2c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800bb2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 feab 	bl	800c88c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	f003 0310 	and.w	r3, r3, #16
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d008      	beq.n	800bb52 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800bb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb42:	015a      	lsls	r2, r3, #5
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	4413      	add	r3, r2
 800bb48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	2310      	movs	r3, #16
 800bb50:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	f003 0320 	and.w	r3, r3, #32
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d008      	beq.n	800bb6e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5e:	015a      	lsls	r2, r3, #5
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	4413      	add	r3, r2
 800bb64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb68:	461a      	mov	r2, r3
 800bb6a:	2320      	movs	r3, #32
 800bb6c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d009      	beq.n	800bb8c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800bb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb7a:	015a      	lsls	r2, r3, #5
 800bb7c:	69fb      	ldr	r3, [r7, #28]
 800bb7e:	4413      	add	r3, r2
 800bb80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb84:	461a      	mov	r2, r3
 800bb86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb8a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800bb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8e:	3301      	adds	r3, #1
 800bb90:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800bb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb94:	085b      	lsrs	r3, r3, #1
 800bb96:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800bb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d199      	bne.n	800bad2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f004 f993 	bl	800fece <USB_ReadInterrupts>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bbae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bbb2:	f040 80c0 	bne.w	800bd36 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f004 f9b4 	bl	800ff28 <USB_ReadDevAllInEpInterrupt>
 800bbc0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800bbc6:	e0b2      	b.n	800bd2e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800bbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbca:	f003 0301 	and.w	r3, r3, #1
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f000 80a7 	beq.w	800bd22 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbda:	b2d2      	uxtb	r2, r2
 800bbdc:	4611      	mov	r1, r2
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f004 f9da 	bl	800ff98 <USB_ReadDevInEPInterrupt>
 800bbe4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	f003 0301 	and.w	r3, r3, #1
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d057      	beq.n	800bca0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf2:	f003 030f 	and.w	r3, r3, #15
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	fa02 f303 	lsl.w	r3, r2, r3
 800bbfc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	43db      	mvns	r3, r3
 800bc0a:	69f9      	ldr	r1, [r7, #28]
 800bc0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc10:	4013      	ands	r3, r2
 800bc12:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800bc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc16:	015a      	lsls	r2, r3, #5
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc20:	461a      	mov	r2, r3
 800bc22:	2301      	movs	r3, #1
 800bc24:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	691b      	ldr	r3, [r3, #16]
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d132      	bne.n	800bc94 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800bc2e:	6879      	ldr	r1, [r7, #4]
 800bc30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc32:	4613      	mov	r3, r2
 800bc34:	00db      	lsls	r3, r3, #3
 800bc36:	1a9b      	subs	r3, r3, r2
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	440b      	add	r3, r1
 800bc3c:	3348      	adds	r3, #72	; 0x48
 800bc3e:	6819      	ldr	r1, [r3, #0]
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc44:	4613      	mov	r3, r2
 800bc46:	00db      	lsls	r3, r3, #3
 800bc48:	1a9b      	subs	r3, r3, r2
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	4403      	add	r3, r0
 800bc4e:	3344      	adds	r3, #68	; 0x44
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4419      	add	r1, r3
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc58:	4613      	mov	r3, r2
 800bc5a:	00db      	lsls	r3, r3, #3
 800bc5c:	1a9b      	subs	r3, r3, r2
 800bc5e:	009b      	lsls	r3, r3, #2
 800bc60:	4403      	add	r3, r0
 800bc62:	3348      	adds	r3, #72	; 0x48
 800bc64:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800bc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d113      	bne.n	800bc94 <HAL_PCD_IRQHandler+0x31c>
 800bc6c:	6879      	ldr	r1, [r7, #4]
 800bc6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc70:	4613      	mov	r3, r2
 800bc72:	00db      	lsls	r3, r3, #3
 800bc74:	1a9b      	subs	r3, r3, r2
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	440b      	add	r3, r1
 800bc7a:	3350      	adds	r3, #80	; 0x50
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d108      	bne.n	800bc94 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6818      	ldr	r0, [r3, #0]
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	2101      	movs	r1, #1
 800bc90:	f004 f9e2 	bl	8010058 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800bc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	4619      	mov	r1, r3
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f008 fff3 	bl	8014c86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	f003 0308 	and.w	r3, r3, #8
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d008      	beq.n	800bcbc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800bcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcac:	015a      	lsls	r2, r3, #5
 800bcae:	69fb      	ldr	r3, [r7, #28]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	2308      	movs	r3, #8
 800bcba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	f003 0310 	and.w	r3, r3, #16
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d008      	beq.n	800bcd8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800bcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc8:	015a      	lsls	r2, r3, #5
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	4413      	add	r3, r2
 800bcce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	2310      	movs	r3, #16
 800bcd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d008      	beq.n	800bcf4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800bce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce4:	015a      	lsls	r2, r3, #5
 800bce6:	69fb      	ldr	r3, [r7, #28]
 800bce8:	4413      	add	r3, r2
 800bcea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcee:	461a      	mov	r2, r3
 800bcf0:	2340      	movs	r3, #64	; 0x40
 800bcf2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	f003 0302 	and.w	r3, r3, #2
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d008      	beq.n	800bd10 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800bcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd00:	015a      	lsls	r2, r3, #5
 800bd02:	69fb      	ldr	r3, [r7, #28]
 800bd04:	4413      	add	r3, r2
 800bd06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	2302      	movs	r3, #2
 800bd0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d003      	beq.n	800bd22 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800bd1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f000 fc1b 	bl	800c558 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800bd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd24:	3301      	adds	r3, #1
 800bd26:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800bd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2a:	085b      	lsrs	r3, r3, #1
 800bd2c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800bd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	f47f af49 	bne.w	800bbc8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f004 f8c7 	bl	800fece <USB_ReadInterrupts>
 800bd40:	4603      	mov	r3, r0
 800bd42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd4a:	d122      	bne.n	800bd92 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	69fa      	ldr	r2, [r7, #28]
 800bd56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd5a:	f023 0301 	bic.w	r3, r3, #1
 800bd5e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d108      	bne.n	800bd7c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800bd72:	2100      	movs	r1, #0
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f000 fe27 	bl	800c9c8 <HAL_PCDEx_LPM_Callback>
 800bd7a:	e002      	b.n	800bd82 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f008 fff9 	bl	8014d74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	695a      	ldr	r2, [r3, #20]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800bd90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4618      	mov	r0, r3
 800bd98:	f004 f899 	bl	800fece <USB_ReadInterrupts>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bda2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bda6:	d112      	bne.n	800bdce <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdae:	689b      	ldr	r3, [r3, #8]
 800bdb0:	f003 0301 	and.w	r3, r3, #1
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d102      	bne.n	800bdbe <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f008 ffb5 	bl	8014d28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	695a      	ldr	r2, [r3, #20]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800bdcc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f004 f87b 	bl	800fece <USB_ReadInterrupts>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bdde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bde2:	f040 80c7 	bne.w	800bf74 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bde6:	69fb      	ldr	r3, [r7, #28]
 800bde8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	69fa      	ldr	r2, [r7, #28]
 800bdf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bdf4:	f023 0301 	bic.w	r3, r3, #1
 800bdf8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	2110      	movs	r1, #16
 800be00:	4618      	mov	r0, r3
 800be02:	f003 f949 	bl	800f098 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800be06:	2300      	movs	r3, #0
 800be08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be0a:	e056      	b.n	800beba <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800be0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0e:	015a      	lsls	r2, r3, #5
 800be10:	69fb      	ldr	r3, [r7, #28]
 800be12:	4413      	add	r3, r2
 800be14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be18:	461a      	mov	r2, r3
 800be1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800be1e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800be20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be22:	015a      	lsls	r2, r3, #5
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	4413      	add	r3, r2
 800be28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be30:	0151      	lsls	r1, r2, #5
 800be32:	69fa      	ldr	r2, [r7, #28]
 800be34:	440a      	add	r2, r1
 800be36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800be3e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800be40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be42:	015a      	lsls	r2, r3, #5
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	4413      	add	r3, r2
 800be48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be50:	0151      	lsls	r1, r2, #5
 800be52:	69fa      	ldr	r2, [r7, #28]
 800be54:	440a      	add	r2, r1
 800be56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800be5e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800be60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be62:	015a      	lsls	r2, r3, #5
 800be64:	69fb      	ldr	r3, [r7, #28]
 800be66:	4413      	add	r3, r2
 800be68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be6c:	461a      	mov	r2, r3
 800be6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800be72:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800be74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be76:	015a      	lsls	r2, r3, #5
 800be78:	69fb      	ldr	r3, [r7, #28]
 800be7a:	4413      	add	r3, r2
 800be7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be84:	0151      	lsls	r1, r2, #5
 800be86:	69fa      	ldr	r2, [r7, #28]
 800be88:	440a      	add	r2, r1
 800be8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800be92:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800be94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be96:	015a      	lsls	r2, r3, #5
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	4413      	add	r3, r2
 800be9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bea4:	0151      	lsls	r1, r2, #5
 800bea6:	69fa      	ldr	r2, [r7, #28]
 800bea8:	440a      	add	r2, r1
 800beaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800beae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800beb2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800beb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb6:	3301      	adds	r3, #1
 800beb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d3a3      	bcc.n	800be0c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800bec4:	69fb      	ldr	r3, [r7, #28]
 800bec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beca:	69db      	ldr	r3, [r3, #28]
 800becc:	69fa      	ldr	r2, [r7, #28]
 800bece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bed2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800bed6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d016      	beq.n	800bf0e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800beea:	69fa      	ldr	r2, [r7, #28]
 800beec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bef0:	f043 030b 	orr.w	r3, r3, #11
 800bef4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800bef8:	69fb      	ldr	r3, [r7, #28]
 800befa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800befe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf00:	69fa      	ldr	r2, [r7, #28]
 800bf02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf06:	f043 030b 	orr.w	r3, r3, #11
 800bf0a:	6453      	str	r3, [r2, #68]	; 0x44
 800bf0c:	e015      	b.n	800bf3a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800bf0e:	69fb      	ldr	r3, [r7, #28]
 800bf10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf14:	695b      	ldr	r3, [r3, #20]
 800bf16:	69fa      	ldr	r2, [r7, #28]
 800bf18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bf20:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800bf24:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf2c:	691b      	ldr	r3, [r3, #16]
 800bf2e:	69fa      	ldr	r2, [r7, #28]
 800bf30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf34:	f043 030b 	orr.w	r3, r3, #11
 800bf38:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800bf3a:	69fb      	ldr	r3, [r7, #28]
 800bf3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	69fa      	ldr	r2, [r7, #28]
 800bf44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf48:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bf4c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6818      	ldr	r0, [r3, #0]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	691b      	ldr	r3, [r3, #16]
 800bf56:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bf5e:	461a      	mov	r2, r3
 800bf60:	f004 f87a 	bl	8010058 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	695a      	ldr	r2, [r3, #20]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800bf72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f003 ffa8 	bl	800fece <USB_ReadInterrupts>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bf84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf88:	d124      	bne.n	800bfd4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f004 f83e 	bl	8010010 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f003 f8de 	bl	800f15a <USB_GetDevSpeed>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681c      	ldr	r4, [r3, #0]
 800bfaa:	f001 f951 	bl	800d250 <HAL_RCC_GetHCLKFreq>
 800bfae:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	4620      	mov	r0, r4
 800bfba:	f002 fe1b 	bl	800ebf4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f008 fe89 	bl	8014cd6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	695a      	ldr	r2, [r3, #20]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800bfd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f003 ff78 	bl	800fece <USB_ReadInterrupts>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	f003 0308 	and.w	r3, r3, #8
 800bfe4:	2b08      	cmp	r3, #8
 800bfe6:	d10a      	bne.n	800bffe <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f008 fe66 	bl	8014cba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	695a      	ldr	r2, [r3, #20]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f002 0208 	and.w	r2, r2, #8
 800bffc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	4618      	mov	r0, r3
 800c004:	f003 ff63 	bl	800fece <USB_ReadInterrupts>
 800c008:	4603      	mov	r3, r0
 800c00a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c00e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c012:	d10f      	bne.n	800c034 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800c014:	2300      	movs	r3, #0
 800c016:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	4619      	mov	r1, r3
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f008 fec8 	bl	8014db4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	695a      	ldr	r2, [r3, #20]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800c032:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4618      	mov	r0, r3
 800c03a:	f003 ff48 	bl	800fece <USB_ReadInterrupts>
 800c03e:	4603      	mov	r3, r0
 800c040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c044:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c048:	d10f      	bne.n	800c06a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800c04a:	2300      	movs	r3, #0
 800c04c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c050:	b2db      	uxtb	r3, r3
 800c052:	4619      	mov	r1, r3
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f008 fe9b 	bl	8014d90 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	695a      	ldr	r2, [r3, #20]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800c068:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4618      	mov	r0, r3
 800c070:	f003 ff2d 	bl	800fece <USB_ReadInterrupts>
 800c074:	4603      	mov	r3, r0
 800c076:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c07a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c07e:	d10a      	bne.n	800c096 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f008 fea9 	bl	8014dd8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	695a      	ldr	r2, [r3, #20]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800c094:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4618      	mov	r0, r3
 800c09c:	f003 ff17 	bl	800fece <USB_ReadInterrupts>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	f003 0304 	and.w	r3, r3, #4
 800c0a6:	2b04      	cmp	r3, #4
 800c0a8:	d115      	bne.n	800c0d6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c0b2:	69bb      	ldr	r3, [r7, #24]
 800c0b4:	f003 0304 	and.w	r3, r3, #4
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d002      	beq.n	800c0c2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f008 fe99 	bl	8014df4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	6859      	ldr	r1, [r3, #4]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	69ba      	ldr	r2, [r7, #24]
 800c0ce:	430a      	orrs	r2, r1
 800c0d0:	605a      	str	r2, [r3, #4]
 800c0d2:	e000      	b.n	800c0d6 <HAL_PCD_IRQHandler+0x75e>
      return;
 800c0d4:	bf00      	nop
    }
  }
}
 800c0d6:	3734      	adds	r7, #52	; 0x34
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd90      	pop	{r4, r7, pc}

0800c0dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	d101      	bne.n	800c0f6 <HAL_PCD_SetAddress+0x1a>
 800c0f2:	2302      	movs	r3, #2
 800c0f4:	e013      	b.n	800c11e <HAL_PCD_SetAddress+0x42>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	78fa      	ldrb	r2, [r7, #3]
 800c102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	78fa      	ldrb	r2, [r7, #3]
 800c10c:	4611      	mov	r1, r2
 800c10e:	4618      	mov	r0, r3
 800c110:	f003 fe75 	bl	800fdfe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c11c:	2300      	movs	r3, #0
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3708      	adds	r7, #8
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}

0800c126 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c126:	b580      	push	{r7, lr}
 800c128:	b084      	sub	sp, #16
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
 800c12e:	4608      	mov	r0, r1
 800c130:	4611      	mov	r1, r2
 800c132:	461a      	mov	r2, r3
 800c134:	4603      	mov	r3, r0
 800c136:	70fb      	strb	r3, [r7, #3]
 800c138:	460b      	mov	r3, r1
 800c13a:	803b      	strh	r3, [r7, #0]
 800c13c:	4613      	mov	r3, r2
 800c13e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c140:	2300      	movs	r3, #0
 800c142:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c144:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	da0f      	bge.n	800c16c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c14c:	78fb      	ldrb	r3, [r7, #3]
 800c14e:	f003 020f 	and.w	r2, r3, #15
 800c152:	4613      	mov	r3, r2
 800c154:	00db      	lsls	r3, r3, #3
 800c156:	1a9b      	subs	r3, r3, r2
 800c158:	009b      	lsls	r3, r3, #2
 800c15a:	3338      	adds	r3, #56	; 0x38
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	4413      	add	r3, r2
 800c160:	3304      	adds	r3, #4
 800c162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2201      	movs	r2, #1
 800c168:	705a      	strb	r2, [r3, #1]
 800c16a:	e00f      	b.n	800c18c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c16c:	78fb      	ldrb	r3, [r7, #3]
 800c16e:	f003 020f 	and.w	r2, r3, #15
 800c172:	4613      	mov	r3, r2
 800c174:	00db      	lsls	r3, r3, #3
 800c176:	1a9b      	subs	r3, r3, r2
 800c178:	009b      	lsls	r3, r3, #2
 800c17a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	4413      	add	r3, r2
 800c182:	3304      	adds	r3, #4
 800c184:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2200      	movs	r2, #0
 800c18a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c18c:	78fb      	ldrb	r3, [r7, #3]
 800c18e:	f003 030f 	and.w	r3, r3, #15
 800c192:	b2da      	uxtb	r2, r3
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c198:	883a      	ldrh	r2, [r7, #0]
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	78ba      	ldrb	r2, [r7, #2]
 800c1a2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	785b      	ldrb	r3, [r3, #1]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d004      	beq.n	800c1b6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	b29a      	uxth	r2, r3
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c1b6:	78bb      	ldrb	r3, [r7, #2]
 800c1b8:	2b02      	cmp	r3, #2
 800c1ba:	d102      	bne.n	800c1c2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d101      	bne.n	800c1d0 <HAL_PCD_EP_Open+0xaa>
 800c1cc:	2302      	movs	r3, #2
 800c1ce:	e00e      	b.n	800c1ee <HAL_PCD_EP_Open+0xc8>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	68f9      	ldr	r1, [r7, #12]
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f002 ffe0 	bl	800f1a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800c1ec:	7afb      	ldrb	r3, [r7, #11]
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3710      	adds	r7, #16
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}

0800c1f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b084      	sub	sp, #16
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	460b      	mov	r3, r1
 800c200:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c202:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c206:	2b00      	cmp	r3, #0
 800c208:	da0f      	bge.n	800c22a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c20a:	78fb      	ldrb	r3, [r7, #3]
 800c20c:	f003 020f 	and.w	r2, r3, #15
 800c210:	4613      	mov	r3, r2
 800c212:	00db      	lsls	r3, r3, #3
 800c214:	1a9b      	subs	r3, r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	3338      	adds	r3, #56	; 0x38
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	4413      	add	r3, r2
 800c21e:	3304      	adds	r3, #4
 800c220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2201      	movs	r2, #1
 800c226:	705a      	strb	r2, [r3, #1]
 800c228:	e00f      	b.n	800c24a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c22a:	78fb      	ldrb	r3, [r7, #3]
 800c22c:	f003 020f 	and.w	r2, r3, #15
 800c230:	4613      	mov	r3, r2
 800c232:	00db      	lsls	r3, r3, #3
 800c234:	1a9b      	subs	r3, r3, r2
 800c236:	009b      	lsls	r3, r3, #2
 800c238:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	4413      	add	r3, r2
 800c240:	3304      	adds	r3, #4
 800c242:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2200      	movs	r2, #0
 800c248:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800c24a:	78fb      	ldrb	r3, [r7, #3]
 800c24c:	f003 030f 	and.w	r3, r3, #15
 800c250:	b2da      	uxtb	r2, r3
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d101      	bne.n	800c264 <HAL_PCD_EP_Close+0x6e>
 800c260:	2302      	movs	r3, #2
 800c262:	e00e      	b.n	800c282 <HAL_PCD_EP_Close+0x8c>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2201      	movs	r2, #1
 800c268:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	68f9      	ldr	r1, [r7, #12]
 800c272:	4618      	mov	r0, r3
 800c274:	f003 f81e 	bl	800f2b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800c280:	2300      	movs	r3, #0
}
 800c282:	4618      	mov	r0, r3
 800c284:	3710      	adds	r7, #16
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}

0800c28a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c28a:	b580      	push	{r7, lr}
 800c28c:	b086      	sub	sp, #24
 800c28e:	af00      	add	r7, sp, #0
 800c290:	60f8      	str	r0, [r7, #12]
 800c292:	607a      	str	r2, [r7, #4]
 800c294:	603b      	str	r3, [r7, #0]
 800c296:	460b      	mov	r3, r1
 800c298:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c29a:	7afb      	ldrb	r3, [r7, #11]
 800c29c:	f003 020f 	and.w	r2, r3, #15
 800c2a0:	4613      	mov	r3, r2
 800c2a2:	00db      	lsls	r3, r3, #3
 800c2a4:	1a9b      	subs	r3, r3, r2
 800c2a6:	009b      	lsls	r3, r3, #2
 800c2a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c2ac:	68fa      	ldr	r2, [r7, #12]
 800c2ae:	4413      	add	r3, r2
 800c2b0:	3304      	adds	r3, #4
 800c2b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	683a      	ldr	r2, [r7, #0]
 800c2be:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c2cc:	7afb      	ldrb	r3, [r7, #11]
 800c2ce:	f003 030f 	and.w	r3, r3, #15
 800c2d2:	b2da      	uxtb	r2, r3
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	691b      	ldr	r3, [r3, #16]
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	d102      	bne.n	800c2e6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c2e6:	7afb      	ldrb	r3, [r7, #11]
 800c2e8:	f003 030f 	and.w	r3, r3, #15
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d109      	bne.n	800c304 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	6818      	ldr	r0, [r3, #0]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	691b      	ldr	r3, [r3, #16]
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	6979      	ldr	r1, [r7, #20]
 800c2fe:	f003 faf9 	bl	800f8f4 <USB_EP0StartXfer>
 800c302:	e008      	b.n	800c316 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	6818      	ldr	r0, [r3, #0]
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	691b      	ldr	r3, [r3, #16]
 800c30c:	b2db      	uxtb	r3, r3
 800c30e:	461a      	mov	r2, r3
 800c310:	6979      	ldr	r1, [r7, #20]
 800c312:	f003 f8ab 	bl	800f46c <USB_EPStartXfer>
  }

  return HAL_OK;
 800c316:	2300      	movs	r3, #0
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3718      	adds	r7, #24
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c320:	b480      	push	{r7}
 800c322:	b083      	sub	sp, #12
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	460b      	mov	r3, r1
 800c32a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c32c:	78fb      	ldrb	r3, [r7, #3]
 800c32e:	f003 020f 	and.w	r2, r3, #15
 800c332:	6879      	ldr	r1, [r7, #4]
 800c334:	4613      	mov	r3, r2
 800c336:	00db      	lsls	r3, r3, #3
 800c338:	1a9b      	subs	r3, r3, r2
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	440b      	add	r3, r1
 800c33e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800c342:	681b      	ldr	r3, [r3, #0]
}
 800c344:	4618      	mov	r0, r3
 800c346:	370c      	adds	r7, #12
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b086      	sub	sp, #24
 800c354:	af00      	add	r7, sp, #0
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	607a      	str	r2, [r7, #4]
 800c35a:	603b      	str	r3, [r7, #0]
 800c35c:	460b      	mov	r3, r1
 800c35e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c360:	7afb      	ldrb	r3, [r7, #11]
 800c362:	f003 020f 	and.w	r2, r3, #15
 800c366:	4613      	mov	r3, r2
 800c368:	00db      	lsls	r3, r3, #3
 800c36a:	1a9b      	subs	r3, r3, r2
 800c36c:	009b      	lsls	r3, r3, #2
 800c36e:	3338      	adds	r3, #56	; 0x38
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	4413      	add	r3, r2
 800c374:	3304      	adds	r3, #4
 800c376:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	683a      	ldr	r2, [r7, #0]
 800c382:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	2200      	movs	r2, #0
 800c388:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	2201      	movs	r2, #1
 800c38e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c390:	7afb      	ldrb	r3, [r7, #11]
 800c392:	f003 030f 	and.w	r3, r3, #15
 800c396:	b2da      	uxtb	r2, r3
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	691b      	ldr	r3, [r3, #16]
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d102      	bne.n	800c3aa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c3aa:	7afb      	ldrb	r3, [r7, #11]
 800c3ac:	f003 030f 	and.w	r3, r3, #15
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d109      	bne.n	800c3c8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	6818      	ldr	r0, [r3, #0]
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	691b      	ldr	r3, [r3, #16]
 800c3bc:	b2db      	uxtb	r3, r3
 800c3be:	461a      	mov	r2, r3
 800c3c0:	6979      	ldr	r1, [r7, #20]
 800c3c2:	f003 fa97 	bl	800f8f4 <USB_EP0StartXfer>
 800c3c6:	e008      	b.n	800c3da <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	6818      	ldr	r0, [r3, #0]
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	691b      	ldr	r3, [r3, #16]
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	6979      	ldr	r1, [r7, #20]
 800c3d6:	f003 f849 	bl	800f46c <USB_EPStartXfer>
  }

  return HAL_OK;
 800c3da:	2300      	movs	r3, #0
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3718      	adds	r7, #24
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c3f0:	78fb      	ldrb	r3, [r7, #3]
 800c3f2:	f003 020f 	and.w	r2, r3, #15
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d901      	bls.n	800c402 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c3fe:	2301      	movs	r3, #1
 800c400:	e050      	b.n	800c4a4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c402:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c406:	2b00      	cmp	r3, #0
 800c408:	da0f      	bge.n	800c42a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c40a:	78fb      	ldrb	r3, [r7, #3]
 800c40c:	f003 020f 	and.w	r2, r3, #15
 800c410:	4613      	mov	r3, r2
 800c412:	00db      	lsls	r3, r3, #3
 800c414:	1a9b      	subs	r3, r3, r2
 800c416:	009b      	lsls	r3, r3, #2
 800c418:	3338      	adds	r3, #56	; 0x38
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	4413      	add	r3, r2
 800c41e:	3304      	adds	r3, #4
 800c420:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2201      	movs	r2, #1
 800c426:	705a      	strb	r2, [r3, #1]
 800c428:	e00d      	b.n	800c446 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c42a:	78fa      	ldrb	r2, [r7, #3]
 800c42c:	4613      	mov	r3, r2
 800c42e:	00db      	lsls	r3, r3, #3
 800c430:	1a9b      	subs	r3, r3, r2
 800c432:	009b      	lsls	r3, r3, #2
 800c434:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c438:	687a      	ldr	r2, [r7, #4]
 800c43a:	4413      	add	r3, r2
 800c43c:	3304      	adds	r3, #4
 800c43e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2200      	movs	r2, #0
 800c444:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2201      	movs	r2, #1
 800c44a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c44c:	78fb      	ldrb	r3, [r7, #3]
 800c44e:	f003 030f 	and.w	r3, r3, #15
 800c452:	b2da      	uxtb	r2, r3
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c45e:	2b01      	cmp	r3, #1
 800c460:	d101      	bne.n	800c466 <HAL_PCD_EP_SetStall+0x82>
 800c462:	2302      	movs	r3, #2
 800c464:	e01e      	b.n	800c4a4 <HAL_PCD_EP_SetStall+0xc0>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2201      	movs	r2, #1
 800c46a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	68f9      	ldr	r1, [r7, #12]
 800c474:	4618      	mov	r0, r3
 800c476:	f003 fbee 	bl	800fc56 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c47a:	78fb      	ldrb	r3, [r7, #3]
 800c47c:	f003 030f 	and.w	r3, r3, #15
 800c480:	2b00      	cmp	r3, #0
 800c482:	d10a      	bne.n	800c49a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6818      	ldr	r0, [r3, #0]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	691b      	ldr	r3, [r3, #16]
 800c48c:	b2d9      	uxtb	r1, r3
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c494:	461a      	mov	r2, r3
 800c496:	f003 fddf 	bl	8010058 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2200      	movs	r2, #0
 800c49e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c4a2:	2300      	movs	r3, #0
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3710      	adds	r7, #16
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c4b8:	78fb      	ldrb	r3, [r7, #3]
 800c4ba:	f003 020f 	and.w	r2, r3, #15
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d901      	bls.n	800c4ca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e042      	b.n	800c550 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c4ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	da0f      	bge.n	800c4f2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c4d2:	78fb      	ldrb	r3, [r7, #3]
 800c4d4:	f003 020f 	and.w	r2, r3, #15
 800c4d8:	4613      	mov	r3, r2
 800c4da:	00db      	lsls	r3, r3, #3
 800c4dc:	1a9b      	subs	r3, r3, r2
 800c4de:	009b      	lsls	r3, r3, #2
 800c4e0:	3338      	adds	r3, #56	; 0x38
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	4413      	add	r3, r2
 800c4e6:	3304      	adds	r3, #4
 800c4e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	705a      	strb	r2, [r3, #1]
 800c4f0:	e00f      	b.n	800c512 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c4f2:	78fb      	ldrb	r3, [r7, #3]
 800c4f4:	f003 020f 	and.w	r2, r3, #15
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	00db      	lsls	r3, r3, #3
 800c4fc:	1a9b      	subs	r3, r3, r2
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	4413      	add	r3, r2
 800c508:	3304      	adds	r3, #4
 800c50a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2200      	movs	r2, #0
 800c510:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2200      	movs	r2, #0
 800c516:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c518:	78fb      	ldrb	r3, [r7, #3]
 800c51a:	f003 030f 	and.w	r3, r3, #15
 800c51e:	b2da      	uxtb	r2, r3
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c52a:	2b01      	cmp	r3, #1
 800c52c:	d101      	bne.n	800c532 <HAL_PCD_EP_ClrStall+0x86>
 800c52e:	2302      	movs	r3, #2
 800c530:	e00e      	b.n	800c550 <HAL_PCD_EP_ClrStall+0xa4>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2201      	movs	r2, #1
 800c536:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	68f9      	ldr	r1, [r7, #12]
 800c540:	4618      	mov	r0, r3
 800c542:	f003 fbf6 	bl	800fd32 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2200      	movs	r2, #0
 800c54a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c54e:	2300      	movs	r3, #0
}
 800c550:	4618      	mov	r0, r3
 800c552:	3710      	adds	r7, #16
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b08a      	sub	sp, #40	; 0x28
 800c55c:	af02      	add	r7, sp, #8
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c56c:	683a      	ldr	r2, [r7, #0]
 800c56e:	4613      	mov	r3, r2
 800c570:	00db      	lsls	r3, r3, #3
 800c572:	1a9b      	subs	r3, r3, r2
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	3338      	adds	r3, #56	; 0x38
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	4413      	add	r3, r2
 800c57c:	3304      	adds	r3, #4
 800c57e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	699a      	ldr	r2, [r3, #24]
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	695b      	ldr	r3, [r3, #20]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d901      	bls.n	800c590 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c58c:	2301      	movs	r3, #1
 800c58e:	e06c      	b.n	800c66a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	695a      	ldr	r2, [r3, #20]
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	699b      	ldr	r3, [r3, #24]
 800c598:	1ad3      	subs	r3, r2, r3
 800c59a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	689b      	ldr	r3, [r3, #8]
 800c5a0:	69fa      	ldr	r2, [r7, #28]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d902      	bls.n	800c5ac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	689b      	ldr	r3, [r3, #8]
 800c5aa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	3303      	adds	r3, #3
 800c5b0:	089b      	lsrs	r3, r3, #2
 800c5b2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c5b4:	e02b      	b.n	800c60e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	695a      	ldr	r2, [r3, #20]
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	699b      	ldr	r3, [r3, #24]
 800c5be:	1ad3      	subs	r3, r2, r3
 800c5c0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	689b      	ldr	r3, [r3, #8]
 800c5c6:	69fa      	ldr	r2, [r7, #28]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d902      	bls.n	800c5d2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c5d2:	69fb      	ldr	r3, [r7, #28]
 800c5d4:	3303      	adds	r3, #3
 800c5d6:	089b      	lsrs	r3, r3, #2
 800c5d8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	68d9      	ldr	r1, [r3, #12]
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	b2da      	uxtb	r2, r3
 800c5e2:	69fb      	ldr	r3, [r7, #28]
 800c5e4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	9300      	str	r3, [sp, #0]
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	6978      	ldr	r0, [r7, #20]
 800c5f2:	f003 fad2 	bl	800fb9a <USB_WritePacket>

    ep->xfer_buff  += len;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	68da      	ldr	r2, [r3, #12]
 800c5fa:	69fb      	ldr	r3, [r7, #28]
 800c5fc:	441a      	add	r2, r3
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	699a      	ldr	r2, [r3, #24]
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	441a      	add	r2, r3
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	015a      	lsls	r2, r3, #5
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	4413      	add	r3, r2
 800c616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c61a:	699b      	ldr	r3, [r3, #24]
 800c61c:	b29b      	uxth	r3, r3
 800c61e:	69ba      	ldr	r2, [r7, #24]
 800c620:	429a      	cmp	r2, r3
 800c622:	d809      	bhi.n	800c638 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	699a      	ldr	r2, [r3, #24]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d203      	bcs.n	800c638 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	695b      	ldr	r3, [r3, #20]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d1be      	bne.n	800c5b6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	695a      	ldr	r2, [r3, #20]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	699b      	ldr	r3, [r3, #24]
 800c640:	429a      	cmp	r2, r3
 800c642:	d811      	bhi.n	800c668 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	f003 030f 	and.w	r3, r3, #15
 800c64a:	2201      	movs	r2, #1
 800c64c:	fa02 f303 	lsl.w	r3, r2, r3
 800c650:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c658:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	43db      	mvns	r3, r3
 800c65e:	6939      	ldr	r1, [r7, #16]
 800c660:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c664:	4013      	ands	r3, r2
 800c666:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800c668:	2300      	movs	r3, #0
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3720      	adds	r7, #32
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
	...

0800c674 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b086      	sub	sp, #24
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	333c      	adds	r3, #60	; 0x3c
 800c68c:	3304      	adds	r3, #4
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	015a      	lsls	r2, r3, #5
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	4413      	add	r3, r2
 800c69a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c69e:	689b      	ldr	r3, [r3, #8]
 800c6a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	691b      	ldr	r3, [r3, #16]
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	f040 80a0 	bne.w	800c7ec <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	f003 0308 	and.w	r3, r3, #8
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d015      	beq.n	800c6e2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	4a72      	ldr	r2, [pc, #456]	; (800c884 <PCD_EP_OutXfrComplete_int+0x210>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	f240 80dd 	bls.w	800c87a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	f000 80d7 	beq.w	800c87a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	015a      	lsls	r2, r3, #5
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	4413      	add	r3, r2
 800c6d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6d8:	461a      	mov	r2, r3
 800c6da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6de:	6093      	str	r3, [r2, #8]
 800c6e0:	e0cb      	b.n	800c87a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	f003 0320 	and.w	r3, r3, #32
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d009      	beq.n	800c700 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	015a      	lsls	r2, r3, #5
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	4413      	add	r3, r2
 800c6f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	2320      	movs	r3, #32
 800c6fc:	6093      	str	r3, [r2, #8]
 800c6fe:	e0bc      	b.n	800c87a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c706:	2b00      	cmp	r3, #0
 800c708:	f040 80b7 	bne.w	800c87a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	4a5d      	ldr	r2, [pc, #372]	; (800c884 <PCD_EP_OutXfrComplete_int+0x210>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d90f      	bls.n	800c734 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d00a      	beq.n	800c734 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	015a      	lsls	r2, r3, #5
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	4413      	add	r3, r2
 800c726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c72a:	461a      	mov	r2, r3
 800c72c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c730:	6093      	str	r3, [r2, #8]
 800c732:	e0a2      	b.n	800c87a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800c734:	6879      	ldr	r1, [r7, #4]
 800c736:	683a      	ldr	r2, [r7, #0]
 800c738:	4613      	mov	r3, r2
 800c73a:	00db      	lsls	r3, r3, #3
 800c73c:	1a9b      	subs	r3, r3, r2
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	440b      	add	r3, r1
 800c742:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c746:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	0159      	lsls	r1, r3, #5
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	440b      	add	r3, r1
 800c750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c754:	691b      	ldr	r3, [r3, #16]
 800c756:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800c75a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	683a      	ldr	r2, [r7, #0]
 800c760:	4613      	mov	r3, r2
 800c762:	00db      	lsls	r3, r3, #3
 800c764:	1a9b      	subs	r3, r3, r2
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	4403      	add	r3, r0
 800c76a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800c76e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800c770:	6879      	ldr	r1, [r7, #4]
 800c772:	683a      	ldr	r2, [r7, #0]
 800c774:	4613      	mov	r3, r2
 800c776:	00db      	lsls	r3, r3, #3
 800c778:	1a9b      	subs	r3, r3, r2
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	440b      	add	r3, r1
 800c77e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c782:	6819      	ldr	r1, [r3, #0]
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	683a      	ldr	r2, [r7, #0]
 800c788:	4613      	mov	r3, r2
 800c78a:	00db      	lsls	r3, r3, #3
 800c78c:	1a9b      	subs	r3, r3, r2
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	4403      	add	r3, r0
 800c792:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4419      	add	r1, r3
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	683a      	ldr	r2, [r7, #0]
 800c79e:	4613      	mov	r3, r2
 800c7a0:	00db      	lsls	r3, r3, #3
 800c7a2:	1a9b      	subs	r3, r3, r2
 800c7a4:	009b      	lsls	r3, r3, #2
 800c7a6:	4403      	add	r3, r0
 800c7a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c7ac:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d114      	bne.n	800c7de <PCD_EP_OutXfrComplete_int+0x16a>
 800c7b4:	6879      	ldr	r1, [r7, #4]
 800c7b6:	683a      	ldr	r2, [r7, #0]
 800c7b8:	4613      	mov	r3, r2
 800c7ba:	00db      	lsls	r3, r3, #3
 800c7bc:	1a9b      	subs	r3, r3, r2
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	440b      	add	r3, r1
 800c7c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d108      	bne.n	800c7de <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6818      	ldr	r0, [r3, #0]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	2101      	movs	r1, #1
 800c7da:	f003 fc3d 	bl	8010058 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f008 fa33 	bl	8014c50 <HAL_PCD_DataOutStageCallback>
 800c7ea:	e046      	b.n	800c87a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	4a26      	ldr	r2, [pc, #152]	; (800c888 <PCD_EP_OutXfrComplete_int+0x214>)
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d124      	bne.n	800c83e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d00a      	beq.n	800c814 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	015a      	lsls	r2, r3, #5
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	4413      	add	r3, r2
 800c806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c80a:	461a      	mov	r2, r3
 800c80c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c810:	6093      	str	r3, [r2, #8]
 800c812:	e032      	b.n	800c87a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	f003 0320 	and.w	r3, r3, #32
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d008      	beq.n	800c830 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	015a      	lsls	r2, r3, #5
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	4413      	add	r3, r2
 800c826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c82a:	461a      	mov	r2, r3
 800c82c:	2320      	movs	r3, #32
 800c82e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	b2db      	uxtb	r3, r3
 800c834:	4619      	mov	r1, r3
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f008 fa0a 	bl	8014c50 <HAL_PCD_DataOutStageCallback>
 800c83c:	e01d      	b.n	800c87a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d114      	bne.n	800c86e <PCD_EP_OutXfrComplete_int+0x1fa>
 800c844:	6879      	ldr	r1, [r7, #4]
 800c846:	683a      	ldr	r2, [r7, #0]
 800c848:	4613      	mov	r3, r2
 800c84a:	00db      	lsls	r3, r3, #3
 800c84c:	1a9b      	subs	r3, r3, r2
 800c84e:	009b      	lsls	r3, r3, #2
 800c850:	440b      	add	r3, r1
 800c852:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d108      	bne.n	800c86e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6818      	ldr	r0, [r3, #0]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c866:	461a      	mov	r2, r3
 800c868:	2100      	movs	r1, #0
 800c86a:	f003 fbf5 	bl	8010058 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	b2db      	uxtb	r3, r3
 800c872:	4619      	mov	r1, r3
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f008 f9eb 	bl	8014c50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c87a:	2300      	movs	r3, #0
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3718      	adds	r7, #24
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}
 800c884:	4f54300a 	.word	0x4f54300a
 800c888:	4f54310a 	.word	0x4f54310a

0800c88c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b086      	sub	sp, #24
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
 800c894:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	333c      	adds	r3, #60	; 0x3c
 800c8a4:	3304      	adds	r3, #4
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	015a      	lsls	r2, r3, #5
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	4413      	add	r3, r2
 800c8b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8b6:	689b      	ldr	r3, [r3, #8]
 800c8b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	4a15      	ldr	r2, [pc, #84]	; (800c914 <PCD_EP_OutSetupPacket_int+0x88>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d90e      	bls.n	800c8e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d009      	beq.n	800c8e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	015a      	lsls	r2, r3, #5
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8d8:	461a      	mov	r2, r3
 800c8da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f008 f9a3 	bl	8014c2c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	4a0a      	ldr	r2, [pc, #40]	; (800c914 <PCD_EP_OutSetupPacket_int+0x88>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d90c      	bls.n	800c908 <PCD_EP_OutSetupPacket_int+0x7c>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	691b      	ldr	r3, [r3, #16]
 800c8f2:	2b01      	cmp	r3, #1
 800c8f4:	d108      	bne.n	800c908 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6818      	ldr	r0, [r3, #0]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c900:	461a      	mov	r2, r3
 800c902:	2101      	movs	r1, #1
 800c904:	f003 fba8 	bl	8010058 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c908:	2300      	movs	r3, #0
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3718      	adds	r7, #24
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
 800c912:	bf00      	nop
 800c914:	4f54300a 	.word	0x4f54300a

0800c918 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c918:	b480      	push	{r7}
 800c91a:	b085      	sub	sp, #20
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	460b      	mov	r3, r1
 800c922:	70fb      	strb	r3, [r7, #3]
 800c924:	4613      	mov	r3, r2
 800c926:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c92e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c930:	78fb      	ldrb	r3, [r7, #3]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d107      	bne.n	800c946 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c936:	883b      	ldrh	r3, [r7, #0]
 800c938:	0419      	lsls	r1, r3, #16
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	68ba      	ldr	r2, [r7, #8]
 800c940:	430a      	orrs	r2, r1
 800c942:	629a      	str	r2, [r3, #40]	; 0x28
 800c944:	e028      	b.n	800c998 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c94c:	0c1b      	lsrs	r3, r3, #16
 800c94e:	68ba      	ldr	r2, [r7, #8]
 800c950:	4413      	add	r3, r2
 800c952:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c954:	2300      	movs	r3, #0
 800c956:	73fb      	strb	r3, [r7, #15]
 800c958:	e00d      	b.n	800c976 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681a      	ldr	r2, [r3, #0]
 800c95e:	7bfb      	ldrb	r3, [r7, #15]
 800c960:	3340      	adds	r3, #64	; 0x40
 800c962:	009b      	lsls	r3, r3, #2
 800c964:	4413      	add	r3, r2
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	0c1b      	lsrs	r3, r3, #16
 800c96a:	68ba      	ldr	r2, [r7, #8]
 800c96c:	4413      	add	r3, r2
 800c96e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c970:	7bfb      	ldrb	r3, [r7, #15]
 800c972:	3301      	adds	r3, #1
 800c974:	73fb      	strb	r3, [r7, #15]
 800c976:	7bfa      	ldrb	r2, [r7, #15]
 800c978:	78fb      	ldrb	r3, [r7, #3]
 800c97a:	3b01      	subs	r3, #1
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d3ec      	bcc.n	800c95a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c980:	883b      	ldrh	r3, [r7, #0]
 800c982:	0418      	lsls	r0, r3, #16
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6819      	ldr	r1, [r3, #0]
 800c988:	78fb      	ldrb	r3, [r7, #3]
 800c98a:	3b01      	subs	r3, #1
 800c98c:	68ba      	ldr	r2, [r7, #8]
 800c98e:	4302      	orrs	r2, r0
 800c990:	3340      	adds	r3, #64	; 0x40
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	440b      	add	r3, r1
 800c996:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3714      	adds	r7, #20
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr

0800c9a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c9a6:	b480      	push	{r7}
 800c9a8:	b083      	sub	sp, #12
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
 800c9ae:	460b      	mov	r3, r1
 800c9b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	887a      	ldrh	r2, [r7, #2]
 800c9b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800c9ba:	2300      	movs	r3, #0
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	370c      	adds	r7, #12
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr

0800c9c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b083      	sub	sp, #12
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	460b      	mov	r3, r1
 800c9d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c9d4:	bf00      	nop
 800c9d6:	370c      	adds	r7, #12
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr

0800c9e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b086      	sub	sp, #24
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d101      	bne.n	800c9f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	e25b      	b.n	800ceaa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f003 0301 	and.w	r3, r3, #1
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d075      	beq.n	800caea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c9fe:	4ba3      	ldr	r3, [pc, #652]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800ca00:	689b      	ldr	r3, [r3, #8]
 800ca02:	f003 030c 	and.w	r3, r3, #12
 800ca06:	2b04      	cmp	r3, #4
 800ca08:	d00c      	beq.n	800ca24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ca0a:	4ba0      	ldr	r3, [pc, #640]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800ca0c:	689b      	ldr	r3, [r3, #8]
 800ca0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ca12:	2b08      	cmp	r3, #8
 800ca14:	d112      	bne.n	800ca3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ca16:	4b9d      	ldr	r3, [pc, #628]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ca22:	d10b      	bne.n	800ca3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca24:	4b99      	ldr	r3, [pc, #612]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d05b      	beq.n	800cae8 <HAL_RCC_OscConfig+0x108>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d157      	bne.n	800cae8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	e236      	b.n	800ceaa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca44:	d106      	bne.n	800ca54 <HAL_RCC_OscConfig+0x74>
 800ca46:	4b91      	ldr	r3, [pc, #580]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a90      	ldr	r2, [pc, #576]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800ca4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca50:	6013      	str	r3, [r2, #0]
 800ca52:	e01d      	b.n	800ca90 <HAL_RCC_OscConfig+0xb0>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca5c:	d10c      	bne.n	800ca78 <HAL_RCC_OscConfig+0x98>
 800ca5e:	4b8b      	ldr	r3, [pc, #556]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4a8a      	ldr	r2, [pc, #552]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800ca64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ca68:	6013      	str	r3, [r2, #0]
 800ca6a:	4b88      	ldr	r3, [pc, #544]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a87      	ldr	r2, [pc, #540]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800ca70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca74:	6013      	str	r3, [r2, #0]
 800ca76:	e00b      	b.n	800ca90 <HAL_RCC_OscConfig+0xb0>
 800ca78:	4b84      	ldr	r3, [pc, #528]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a83      	ldr	r2, [pc, #524]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800ca7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca82:	6013      	str	r3, [r2, #0]
 800ca84:	4b81      	ldr	r3, [pc, #516]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4a80      	ldr	r2, [pc, #512]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800ca8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ca8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d013      	beq.n	800cac0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca98:	f7fd ff60 	bl	800a95c <HAL_GetTick>
 800ca9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ca9e:	e008      	b.n	800cab2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800caa0:	f7fd ff5c 	bl	800a95c <HAL_GetTick>
 800caa4:	4602      	mov	r2, r0
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	1ad3      	subs	r3, r2, r3
 800caaa:	2b64      	cmp	r3, #100	; 0x64
 800caac:	d901      	bls.n	800cab2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800caae:	2303      	movs	r3, #3
 800cab0:	e1fb      	b.n	800ceaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cab2:	4b76      	ldr	r3, [pc, #472]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d0f0      	beq.n	800caa0 <HAL_RCC_OscConfig+0xc0>
 800cabe:	e014      	b.n	800caea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cac0:	f7fd ff4c 	bl	800a95c <HAL_GetTick>
 800cac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cac6:	e008      	b.n	800cada <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cac8:	f7fd ff48 	bl	800a95c <HAL_GetTick>
 800cacc:	4602      	mov	r2, r0
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	1ad3      	subs	r3, r2, r3
 800cad2:	2b64      	cmp	r3, #100	; 0x64
 800cad4:	d901      	bls.n	800cada <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cad6:	2303      	movs	r3, #3
 800cad8:	e1e7      	b.n	800ceaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cada:	4b6c      	ldr	r3, [pc, #432]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d1f0      	bne.n	800cac8 <HAL_RCC_OscConfig+0xe8>
 800cae6:	e000      	b.n	800caea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f003 0302 	and.w	r3, r3, #2
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d063      	beq.n	800cbbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800caf6:	4b65      	ldr	r3, [pc, #404]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800caf8:	689b      	ldr	r3, [r3, #8]
 800cafa:	f003 030c 	and.w	r3, r3, #12
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d00b      	beq.n	800cb1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cb02:	4b62      	ldr	r3, [pc, #392]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800cb04:	689b      	ldr	r3, [r3, #8]
 800cb06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800cb0a:	2b08      	cmp	r3, #8
 800cb0c:	d11c      	bne.n	800cb48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cb0e:	4b5f      	ldr	r3, [pc, #380]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d116      	bne.n	800cb48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cb1a:	4b5c      	ldr	r3, [pc, #368]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f003 0302 	and.w	r3, r3, #2
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d005      	beq.n	800cb32 <HAL_RCC_OscConfig+0x152>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	68db      	ldr	r3, [r3, #12]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d001      	beq.n	800cb32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	e1bb      	b.n	800ceaa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb32:	4b56      	ldr	r3, [pc, #344]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	691b      	ldr	r3, [r3, #16]
 800cb3e:	00db      	lsls	r3, r3, #3
 800cb40:	4952      	ldr	r1, [pc, #328]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800cb42:	4313      	orrs	r3, r2
 800cb44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cb46:	e03a      	b.n	800cbbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d020      	beq.n	800cb92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cb50:	4b4f      	ldr	r3, [pc, #316]	; (800cc90 <HAL_RCC_OscConfig+0x2b0>)
 800cb52:	2201      	movs	r2, #1
 800cb54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb56:	f7fd ff01 	bl	800a95c <HAL_GetTick>
 800cb5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb5c:	e008      	b.n	800cb70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cb5e:	f7fd fefd 	bl	800a95c <HAL_GetTick>
 800cb62:	4602      	mov	r2, r0
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	1ad3      	subs	r3, r2, r3
 800cb68:	2b02      	cmp	r3, #2
 800cb6a:	d901      	bls.n	800cb70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800cb6c:	2303      	movs	r3, #3
 800cb6e:	e19c      	b.n	800ceaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb70:	4b46      	ldr	r3, [pc, #280]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f003 0302 	and.w	r3, r3, #2
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d0f0      	beq.n	800cb5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb7c:	4b43      	ldr	r3, [pc, #268]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	691b      	ldr	r3, [r3, #16]
 800cb88:	00db      	lsls	r3, r3, #3
 800cb8a:	4940      	ldr	r1, [pc, #256]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	600b      	str	r3, [r1, #0]
 800cb90:	e015      	b.n	800cbbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cb92:	4b3f      	ldr	r3, [pc, #252]	; (800cc90 <HAL_RCC_OscConfig+0x2b0>)
 800cb94:	2200      	movs	r2, #0
 800cb96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb98:	f7fd fee0 	bl	800a95c <HAL_GetTick>
 800cb9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cb9e:	e008      	b.n	800cbb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cba0:	f7fd fedc 	bl	800a95c <HAL_GetTick>
 800cba4:	4602      	mov	r2, r0
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	1ad3      	subs	r3, r2, r3
 800cbaa:	2b02      	cmp	r3, #2
 800cbac:	d901      	bls.n	800cbb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800cbae:	2303      	movs	r3, #3
 800cbb0:	e17b      	b.n	800ceaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cbb2:	4b36      	ldr	r3, [pc, #216]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f003 0302 	and.w	r3, r3, #2
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d1f0      	bne.n	800cba0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f003 0308 	and.w	r3, r3, #8
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d030      	beq.n	800cc2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	695b      	ldr	r3, [r3, #20]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d016      	beq.n	800cc00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cbd2:	4b30      	ldr	r3, [pc, #192]	; (800cc94 <HAL_RCC_OscConfig+0x2b4>)
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cbd8:	f7fd fec0 	bl	800a95c <HAL_GetTick>
 800cbdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cbde:	e008      	b.n	800cbf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cbe0:	f7fd febc 	bl	800a95c <HAL_GetTick>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	1ad3      	subs	r3, r2, r3
 800cbea:	2b02      	cmp	r3, #2
 800cbec:	d901      	bls.n	800cbf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800cbee:	2303      	movs	r3, #3
 800cbf0:	e15b      	b.n	800ceaa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cbf2:	4b26      	ldr	r3, [pc, #152]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800cbf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbf6:	f003 0302 	and.w	r3, r3, #2
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d0f0      	beq.n	800cbe0 <HAL_RCC_OscConfig+0x200>
 800cbfe:	e015      	b.n	800cc2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cc00:	4b24      	ldr	r3, [pc, #144]	; (800cc94 <HAL_RCC_OscConfig+0x2b4>)
 800cc02:	2200      	movs	r2, #0
 800cc04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cc06:	f7fd fea9 	bl	800a95c <HAL_GetTick>
 800cc0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cc0c:	e008      	b.n	800cc20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cc0e:	f7fd fea5 	bl	800a95c <HAL_GetTick>
 800cc12:	4602      	mov	r2, r0
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	1ad3      	subs	r3, r2, r3
 800cc18:	2b02      	cmp	r3, #2
 800cc1a:	d901      	bls.n	800cc20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800cc1c:	2303      	movs	r3, #3
 800cc1e:	e144      	b.n	800ceaa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cc20:	4b1a      	ldr	r3, [pc, #104]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800cc22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc24:	f003 0302 	and.w	r3, r3, #2
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d1f0      	bne.n	800cc0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f003 0304 	and.w	r3, r3, #4
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	f000 80a0 	beq.w	800cd7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cc3e:	4b13      	ldr	r3, [pc, #76]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800cc40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d10f      	bne.n	800cc6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	60bb      	str	r3, [r7, #8]
 800cc4e:	4b0f      	ldr	r3, [pc, #60]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800cc50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc52:	4a0e      	ldr	r2, [pc, #56]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800cc54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc58:	6413      	str	r3, [r2, #64]	; 0x40
 800cc5a:	4b0c      	ldr	r3, [pc, #48]	; (800cc8c <HAL_RCC_OscConfig+0x2ac>)
 800cc5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc62:	60bb      	str	r3, [r7, #8]
 800cc64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cc66:	2301      	movs	r3, #1
 800cc68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cc6a:	4b0b      	ldr	r3, [pc, #44]	; (800cc98 <HAL_RCC_OscConfig+0x2b8>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d121      	bne.n	800ccba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cc76:	4b08      	ldr	r3, [pc, #32]	; (800cc98 <HAL_RCC_OscConfig+0x2b8>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4a07      	ldr	r2, [pc, #28]	; (800cc98 <HAL_RCC_OscConfig+0x2b8>)
 800cc7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cc82:	f7fd fe6b 	bl	800a95c <HAL_GetTick>
 800cc86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cc88:	e011      	b.n	800ccae <HAL_RCC_OscConfig+0x2ce>
 800cc8a:	bf00      	nop
 800cc8c:	40023800 	.word	0x40023800
 800cc90:	42470000 	.word	0x42470000
 800cc94:	42470e80 	.word	0x42470e80
 800cc98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cc9c:	f7fd fe5e 	bl	800a95c <HAL_GetTick>
 800cca0:	4602      	mov	r2, r0
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	1ad3      	subs	r3, r2, r3
 800cca6:	2b02      	cmp	r3, #2
 800cca8:	d901      	bls.n	800ccae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800ccaa:	2303      	movs	r3, #3
 800ccac:	e0fd      	b.n	800ceaa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ccae:	4b81      	ldr	r3, [pc, #516]	; (800ceb4 <HAL_RCC_OscConfig+0x4d4>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d0f0      	beq.n	800cc9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	689b      	ldr	r3, [r3, #8]
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d106      	bne.n	800ccd0 <HAL_RCC_OscConfig+0x2f0>
 800ccc2:	4b7d      	ldr	r3, [pc, #500]	; (800ceb8 <HAL_RCC_OscConfig+0x4d8>)
 800ccc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccc6:	4a7c      	ldr	r2, [pc, #496]	; (800ceb8 <HAL_RCC_OscConfig+0x4d8>)
 800ccc8:	f043 0301 	orr.w	r3, r3, #1
 800cccc:	6713      	str	r3, [r2, #112]	; 0x70
 800ccce:	e01c      	b.n	800cd0a <HAL_RCC_OscConfig+0x32a>
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	689b      	ldr	r3, [r3, #8]
 800ccd4:	2b05      	cmp	r3, #5
 800ccd6:	d10c      	bne.n	800ccf2 <HAL_RCC_OscConfig+0x312>
 800ccd8:	4b77      	ldr	r3, [pc, #476]	; (800ceb8 <HAL_RCC_OscConfig+0x4d8>)
 800ccda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccdc:	4a76      	ldr	r2, [pc, #472]	; (800ceb8 <HAL_RCC_OscConfig+0x4d8>)
 800ccde:	f043 0304 	orr.w	r3, r3, #4
 800cce2:	6713      	str	r3, [r2, #112]	; 0x70
 800cce4:	4b74      	ldr	r3, [pc, #464]	; (800ceb8 <HAL_RCC_OscConfig+0x4d8>)
 800cce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cce8:	4a73      	ldr	r2, [pc, #460]	; (800ceb8 <HAL_RCC_OscConfig+0x4d8>)
 800ccea:	f043 0301 	orr.w	r3, r3, #1
 800ccee:	6713      	str	r3, [r2, #112]	; 0x70
 800ccf0:	e00b      	b.n	800cd0a <HAL_RCC_OscConfig+0x32a>
 800ccf2:	4b71      	ldr	r3, [pc, #452]	; (800ceb8 <HAL_RCC_OscConfig+0x4d8>)
 800ccf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccf6:	4a70      	ldr	r2, [pc, #448]	; (800ceb8 <HAL_RCC_OscConfig+0x4d8>)
 800ccf8:	f023 0301 	bic.w	r3, r3, #1
 800ccfc:	6713      	str	r3, [r2, #112]	; 0x70
 800ccfe:	4b6e      	ldr	r3, [pc, #440]	; (800ceb8 <HAL_RCC_OscConfig+0x4d8>)
 800cd00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd02:	4a6d      	ldr	r2, [pc, #436]	; (800ceb8 <HAL_RCC_OscConfig+0x4d8>)
 800cd04:	f023 0304 	bic.w	r3, r3, #4
 800cd08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	689b      	ldr	r3, [r3, #8]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d015      	beq.n	800cd3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd12:	f7fd fe23 	bl	800a95c <HAL_GetTick>
 800cd16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cd18:	e00a      	b.n	800cd30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cd1a:	f7fd fe1f 	bl	800a95c <HAL_GetTick>
 800cd1e:	4602      	mov	r2, r0
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	1ad3      	subs	r3, r2, r3
 800cd24:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d901      	bls.n	800cd30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800cd2c:	2303      	movs	r3, #3
 800cd2e:	e0bc      	b.n	800ceaa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cd30:	4b61      	ldr	r3, [pc, #388]	; (800ceb8 <HAL_RCC_OscConfig+0x4d8>)
 800cd32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd34:	f003 0302 	and.w	r3, r3, #2
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d0ee      	beq.n	800cd1a <HAL_RCC_OscConfig+0x33a>
 800cd3c:	e014      	b.n	800cd68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cd3e:	f7fd fe0d 	bl	800a95c <HAL_GetTick>
 800cd42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cd44:	e00a      	b.n	800cd5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cd46:	f7fd fe09 	bl	800a95c <HAL_GetTick>
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	1ad3      	subs	r3, r2, r3
 800cd50:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d901      	bls.n	800cd5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800cd58:	2303      	movs	r3, #3
 800cd5a:	e0a6      	b.n	800ceaa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cd5c:	4b56      	ldr	r3, [pc, #344]	; (800ceb8 <HAL_RCC_OscConfig+0x4d8>)
 800cd5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd60:	f003 0302 	and.w	r3, r3, #2
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d1ee      	bne.n	800cd46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cd68:	7dfb      	ldrb	r3, [r7, #23]
 800cd6a:	2b01      	cmp	r3, #1
 800cd6c:	d105      	bne.n	800cd7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cd6e:	4b52      	ldr	r3, [pc, #328]	; (800ceb8 <HAL_RCC_OscConfig+0x4d8>)
 800cd70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd72:	4a51      	ldr	r2, [pc, #324]	; (800ceb8 <HAL_RCC_OscConfig+0x4d8>)
 800cd74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cd78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	699b      	ldr	r3, [r3, #24]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	f000 8092 	beq.w	800cea8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cd84:	4b4c      	ldr	r3, [pc, #304]	; (800ceb8 <HAL_RCC_OscConfig+0x4d8>)
 800cd86:	689b      	ldr	r3, [r3, #8]
 800cd88:	f003 030c 	and.w	r3, r3, #12
 800cd8c:	2b08      	cmp	r3, #8
 800cd8e:	d05c      	beq.n	800ce4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	699b      	ldr	r3, [r3, #24]
 800cd94:	2b02      	cmp	r3, #2
 800cd96:	d141      	bne.n	800ce1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cd98:	4b48      	ldr	r3, [pc, #288]	; (800cebc <HAL_RCC_OscConfig+0x4dc>)
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cd9e:	f7fd fddd 	bl	800a95c <HAL_GetTick>
 800cda2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cda4:	e008      	b.n	800cdb8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cda6:	f7fd fdd9 	bl	800a95c <HAL_GetTick>
 800cdaa:	4602      	mov	r2, r0
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	1ad3      	subs	r3, r2, r3
 800cdb0:	2b02      	cmp	r3, #2
 800cdb2:	d901      	bls.n	800cdb8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800cdb4:	2303      	movs	r3, #3
 800cdb6:	e078      	b.n	800ceaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cdb8:	4b3f      	ldr	r3, [pc, #252]	; (800ceb8 <HAL_RCC_OscConfig+0x4d8>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d1f0      	bne.n	800cda6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	69da      	ldr	r2, [r3, #28]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6a1b      	ldr	r3, [r3, #32]
 800cdcc:	431a      	orrs	r2, r3
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd2:	019b      	lsls	r3, r3, #6
 800cdd4:	431a      	orrs	r2, r3
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdda:	085b      	lsrs	r3, r3, #1
 800cddc:	3b01      	subs	r3, #1
 800cdde:	041b      	lsls	r3, r3, #16
 800cde0:	431a      	orrs	r2, r3
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cde6:	061b      	lsls	r3, r3, #24
 800cde8:	4933      	ldr	r1, [pc, #204]	; (800ceb8 <HAL_RCC_OscConfig+0x4d8>)
 800cdea:	4313      	orrs	r3, r2
 800cdec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cdee:	4b33      	ldr	r3, [pc, #204]	; (800cebc <HAL_RCC_OscConfig+0x4dc>)
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cdf4:	f7fd fdb2 	bl	800a95c <HAL_GetTick>
 800cdf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cdfa:	e008      	b.n	800ce0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cdfc:	f7fd fdae 	bl	800a95c <HAL_GetTick>
 800ce00:	4602      	mov	r2, r0
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	1ad3      	subs	r3, r2, r3
 800ce06:	2b02      	cmp	r3, #2
 800ce08:	d901      	bls.n	800ce0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800ce0a:	2303      	movs	r3, #3
 800ce0c:	e04d      	b.n	800ceaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ce0e:	4b2a      	ldr	r3, [pc, #168]	; (800ceb8 <HAL_RCC_OscConfig+0x4d8>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d0f0      	beq.n	800cdfc <HAL_RCC_OscConfig+0x41c>
 800ce1a:	e045      	b.n	800cea8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ce1c:	4b27      	ldr	r3, [pc, #156]	; (800cebc <HAL_RCC_OscConfig+0x4dc>)
 800ce1e:	2200      	movs	r2, #0
 800ce20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ce22:	f7fd fd9b 	bl	800a95c <HAL_GetTick>
 800ce26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ce28:	e008      	b.n	800ce3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ce2a:	f7fd fd97 	bl	800a95c <HAL_GetTick>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	1ad3      	subs	r3, r2, r3
 800ce34:	2b02      	cmp	r3, #2
 800ce36:	d901      	bls.n	800ce3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800ce38:	2303      	movs	r3, #3
 800ce3a:	e036      	b.n	800ceaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ce3c:	4b1e      	ldr	r3, [pc, #120]	; (800ceb8 <HAL_RCC_OscConfig+0x4d8>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d1f0      	bne.n	800ce2a <HAL_RCC_OscConfig+0x44a>
 800ce48:	e02e      	b.n	800cea8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	699b      	ldr	r3, [r3, #24]
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d101      	bne.n	800ce56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800ce52:	2301      	movs	r3, #1
 800ce54:	e029      	b.n	800ceaa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ce56:	4b18      	ldr	r3, [pc, #96]	; (800ceb8 <HAL_RCC_OscConfig+0x4d8>)
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	69db      	ldr	r3, [r3, #28]
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d11c      	bne.n	800cea4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d115      	bne.n	800cea4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ce78:	68fa      	ldr	r2, [r7, #12]
 800ce7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ce7e:	4013      	ands	r3, r2
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d10d      	bne.n	800cea4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d106      	bne.n	800cea4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d001      	beq.n	800cea8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800cea4:	2301      	movs	r3, #1
 800cea6:	e000      	b.n	800ceaa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800cea8:	2300      	movs	r3, #0
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3718      	adds	r7, #24
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	40007000 	.word	0x40007000
 800ceb8:	40023800 	.word	0x40023800
 800cebc:	42470060 	.word	0x42470060

0800cec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d101      	bne.n	800ced4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ced0:	2301      	movs	r3, #1
 800ced2:	e0cc      	b.n	800d06e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ced4:	4b68      	ldr	r3, [pc, #416]	; (800d078 <HAL_RCC_ClockConfig+0x1b8>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f003 030f 	and.w	r3, r3, #15
 800cedc:	683a      	ldr	r2, [r7, #0]
 800cede:	429a      	cmp	r2, r3
 800cee0:	d90c      	bls.n	800cefc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cee2:	4b65      	ldr	r3, [pc, #404]	; (800d078 <HAL_RCC_ClockConfig+0x1b8>)
 800cee4:	683a      	ldr	r2, [r7, #0]
 800cee6:	b2d2      	uxtb	r2, r2
 800cee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ceea:	4b63      	ldr	r3, [pc, #396]	; (800d078 <HAL_RCC_ClockConfig+0x1b8>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f003 030f 	and.w	r3, r3, #15
 800cef2:	683a      	ldr	r2, [r7, #0]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d001      	beq.n	800cefc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800cef8:	2301      	movs	r3, #1
 800cefa:	e0b8      	b.n	800d06e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f003 0302 	and.w	r3, r3, #2
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d020      	beq.n	800cf4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f003 0304 	and.w	r3, r3, #4
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d005      	beq.n	800cf20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cf14:	4b59      	ldr	r3, [pc, #356]	; (800d07c <HAL_RCC_ClockConfig+0x1bc>)
 800cf16:	689b      	ldr	r3, [r3, #8]
 800cf18:	4a58      	ldr	r2, [pc, #352]	; (800d07c <HAL_RCC_ClockConfig+0x1bc>)
 800cf1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800cf1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f003 0308 	and.w	r3, r3, #8
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d005      	beq.n	800cf38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cf2c:	4b53      	ldr	r3, [pc, #332]	; (800d07c <HAL_RCC_ClockConfig+0x1bc>)
 800cf2e:	689b      	ldr	r3, [r3, #8]
 800cf30:	4a52      	ldr	r2, [pc, #328]	; (800d07c <HAL_RCC_ClockConfig+0x1bc>)
 800cf32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cf36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cf38:	4b50      	ldr	r3, [pc, #320]	; (800d07c <HAL_RCC_ClockConfig+0x1bc>)
 800cf3a:	689b      	ldr	r3, [r3, #8]
 800cf3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	494d      	ldr	r1, [pc, #308]	; (800d07c <HAL_RCC_ClockConfig+0x1bc>)
 800cf46:	4313      	orrs	r3, r2
 800cf48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f003 0301 	and.w	r3, r3, #1
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d044      	beq.n	800cfe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d107      	bne.n	800cf6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cf5e:	4b47      	ldr	r3, [pc, #284]	; (800d07c <HAL_RCC_ClockConfig+0x1bc>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d119      	bne.n	800cf9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	e07f      	b.n	800d06e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	685b      	ldr	r3, [r3, #4]
 800cf72:	2b02      	cmp	r3, #2
 800cf74:	d003      	beq.n	800cf7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cf7a:	2b03      	cmp	r3, #3
 800cf7c:	d107      	bne.n	800cf8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cf7e:	4b3f      	ldr	r3, [pc, #252]	; (800d07c <HAL_RCC_ClockConfig+0x1bc>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d109      	bne.n	800cf9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	e06f      	b.n	800d06e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cf8e:	4b3b      	ldr	r3, [pc, #236]	; (800d07c <HAL_RCC_ClockConfig+0x1bc>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f003 0302 	and.w	r3, r3, #2
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d101      	bne.n	800cf9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	e067      	b.n	800d06e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cf9e:	4b37      	ldr	r3, [pc, #220]	; (800d07c <HAL_RCC_ClockConfig+0x1bc>)
 800cfa0:	689b      	ldr	r3, [r3, #8]
 800cfa2:	f023 0203 	bic.w	r2, r3, #3
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	685b      	ldr	r3, [r3, #4]
 800cfaa:	4934      	ldr	r1, [pc, #208]	; (800d07c <HAL_RCC_ClockConfig+0x1bc>)
 800cfac:	4313      	orrs	r3, r2
 800cfae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cfb0:	f7fd fcd4 	bl	800a95c <HAL_GetTick>
 800cfb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cfb6:	e00a      	b.n	800cfce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cfb8:	f7fd fcd0 	bl	800a95c <HAL_GetTick>
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	1ad3      	subs	r3, r2, r3
 800cfc2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d901      	bls.n	800cfce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cfca:	2303      	movs	r3, #3
 800cfcc:	e04f      	b.n	800d06e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cfce:	4b2b      	ldr	r3, [pc, #172]	; (800d07c <HAL_RCC_ClockConfig+0x1bc>)
 800cfd0:	689b      	ldr	r3, [r3, #8]
 800cfd2:	f003 020c 	and.w	r2, r3, #12
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	009b      	lsls	r3, r3, #2
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d1eb      	bne.n	800cfb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cfe0:	4b25      	ldr	r3, [pc, #148]	; (800d078 <HAL_RCC_ClockConfig+0x1b8>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f003 030f 	and.w	r3, r3, #15
 800cfe8:	683a      	ldr	r2, [r7, #0]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d20c      	bcs.n	800d008 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cfee:	4b22      	ldr	r3, [pc, #136]	; (800d078 <HAL_RCC_ClockConfig+0x1b8>)
 800cff0:	683a      	ldr	r2, [r7, #0]
 800cff2:	b2d2      	uxtb	r2, r2
 800cff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cff6:	4b20      	ldr	r3, [pc, #128]	; (800d078 <HAL_RCC_ClockConfig+0x1b8>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f003 030f 	and.w	r3, r3, #15
 800cffe:	683a      	ldr	r2, [r7, #0]
 800d000:	429a      	cmp	r2, r3
 800d002:	d001      	beq.n	800d008 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d004:	2301      	movs	r3, #1
 800d006:	e032      	b.n	800d06e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f003 0304 	and.w	r3, r3, #4
 800d010:	2b00      	cmp	r3, #0
 800d012:	d008      	beq.n	800d026 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d014:	4b19      	ldr	r3, [pc, #100]	; (800d07c <HAL_RCC_ClockConfig+0x1bc>)
 800d016:	689b      	ldr	r3, [r3, #8]
 800d018:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	68db      	ldr	r3, [r3, #12]
 800d020:	4916      	ldr	r1, [pc, #88]	; (800d07c <HAL_RCC_ClockConfig+0x1bc>)
 800d022:	4313      	orrs	r3, r2
 800d024:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f003 0308 	and.w	r3, r3, #8
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d009      	beq.n	800d046 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d032:	4b12      	ldr	r3, [pc, #72]	; (800d07c <HAL_RCC_ClockConfig+0x1bc>)
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	691b      	ldr	r3, [r3, #16]
 800d03e:	00db      	lsls	r3, r3, #3
 800d040:	490e      	ldr	r1, [pc, #56]	; (800d07c <HAL_RCC_ClockConfig+0x1bc>)
 800d042:	4313      	orrs	r3, r2
 800d044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d046:	f000 f821 	bl	800d08c <HAL_RCC_GetSysClockFreq>
 800d04a:	4602      	mov	r2, r0
 800d04c:	4b0b      	ldr	r3, [pc, #44]	; (800d07c <HAL_RCC_ClockConfig+0x1bc>)
 800d04e:	689b      	ldr	r3, [r3, #8]
 800d050:	091b      	lsrs	r3, r3, #4
 800d052:	f003 030f 	and.w	r3, r3, #15
 800d056:	490a      	ldr	r1, [pc, #40]	; (800d080 <HAL_RCC_ClockConfig+0x1c0>)
 800d058:	5ccb      	ldrb	r3, [r1, r3]
 800d05a:	fa22 f303 	lsr.w	r3, r2, r3
 800d05e:	4a09      	ldr	r2, [pc, #36]	; (800d084 <HAL_RCC_ClockConfig+0x1c4>)
 800d060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d062:	4b09      	ldr	r3, [pc, #36]	; (800d088 <HAL_RCC_ClockConfig+0x1c8>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	4618      	mov	r0, r3
 800d068:	f7fd f8ee 	bl	800a248 <HAL_InitTick>

  return HAL_OK;
 800d06c:	2300      	movs	r3, #0
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	40023c00 	.word	0x40023c00
 800d07c:	40023800 	.word	0x40023800
 800d080:	0801b760 	.word	0x0801b760
 800d084:	2000408c 	.word	0x2000408c
 800d088:	20004090 	.word	0x20004090

0800d08c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d08c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d090:	b084      	sub	sp, #16
 800d092:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d094:	2300      	movs	r3, #0
 800d096:	607b      	str	r3, [r7, #4]
 800d098:	2300      	movs	r3, #0
 800d09a:	60fb      	str	r3, [r7, #12]
 800d09c:	2300      	movs	r3, #0
 800d09e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d0a4:	4b67      	ldr	r3, [pc, #412]	; (800d244 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800d0a6:	689b      	ldr	r3, [r3, #8]
 800d0a8:	f003 030c 	and.w	r3, r3, #12
 800d0ac:	2b08      	cmp	r3, #8
 800d0ae:	d00d      	beq.n	800d0cc <HAL_RCC_GetSysClockFreq+0x40>
 800d0b0:	2b08      	cmp	r3, #8
 800d0b2:	f200 80bd 	bhi.w	800d230 <HAL_RCC_GetSysClockFreq+0x1a4>
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d002      	beq.n	800d0c0 <HAL_RCC_GetSysClockFreq+0x34>
 800d0ba:	2b04      	cmp	r3, #4
 800d0bc:	d003      	beq.n	800d0c6 <HAL_RCC_GetSysClockFreq+0x3a>
 800d0be:	e0b7      	b.n	800d230 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d0c0:	4b61      	ldr	r3, [pc, #388]	; (800d248 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800d0c2:	60bb      	str	r3, [r7, #8]
       break;
 800d0c4:	e0b7      	b.n	800d236 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d0c6:	4b61      	ldr	r3, [pc, #388]	; (800d24c <HAL_RCC_GetSysClockFreq+0x1c0>)
 800d0c8:	60bb      	str	r3, [r7, #8]
      break;
 800d0ca:	e0b4      	b.n	800d236 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d0cc:	4b5d      	ldr	r3, [pc, #372]	; (800d244 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800d0ce:	685b      	ldr	r3, [r3, #4]
 800d0d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d0d6:	4b5b      	ldr	r3, [pc, #364]	; (800d244 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800d0d8:	685b      	ldr	r3, [r3, #4]
 800d0da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d04d      	beq.n	800d17e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d0e2:	4b58      	ldr	r3, [pc, #352]	; (800d244 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800d0e4:	685b      	ldr	r3, [r3, #4]
 800d0e6:	099b      	lsrs	r3, r3, #6
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	f04f 0300 	mov.w	r3, #0
 800d0ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 800d0f2:	f04f 0100 	mov.w	r1, #0
 800d0f6:	ea02 0800 	and.w	r8, r2, r0
 800d0fa:	ea03 0901 	and.w	r9, r3, r1
 800d0fe:	4640      	mov	r0, r8
 800d100:	4649      	mov	r1, r9
 800d102:	f04f 0200 	mov.w	r2, #0
 800d106:	f04f 0300 	mov.w	r3, #0
 800d10a:	014b      	lsls	r3, r1, #5
 800d10c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800d110:	0142      	lsls	r2, r0, #5
 800d112:	4610      	mov	r0, r2
 800d114:	4619      	mov	r1, r3
 800d116:	ebb0 0008 	subs.w	r0, r0, r8
 800d11a:	eb61 0109 	sbc.w	r1, r1, r9
 800d11e:	f04f 0200 	mov.w	r2, #0
 800d122:	f04f 0300 	mov.w	r3, #0
 800d126:	018b      	lsls	r3, r1, #6
 800d128:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800d12c:	0182      	lsls	r2, r0, #6
 800d12e:	1a12      	subs	r2, r2, r0
 800d130:	eb63 0301 	sbc.w	r3, r3, r1
 800d134:	f04f 0000 	mov.w	r0, #0
 800d138:	f04f 0100 	mov.w	r1, #0
 800d13c:	00d9      	lsls	r1, r3, #3
 800d13e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d142:	00d0      	lsls	r0, r2, #3
 800d144:	4602      	mov	r2, r0
 800d146:	460b      	mov	r3, r1
 800d148:	eb12 0208 	adds.w	r2, r2, r8
 800d14c:	eb43 0309 	adc.w	r3, r3, r9
 800d150:	f04f 0000 	mov.w	r0, #0
 800d154:	f04f 0100 	mov.w	r1, #0
 800d158:	0259      	lsls	r1, r3, #9
 800d15a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800d15e:	0250      	lsls	r0, r2, #9
 800d160:	4602      	mov	r2, r0
 800d162:	460b      	mov	r3, r1
 800d164:	4610      	mov	r0, r2
 800d166:	4619      	mov	r1, r3
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	461a      	mov	r2, r3
 800d16c:	f04f 0300 	mov.w	r3, #0
 800d170:	f7f3 fd8a 	bl	8000c88 <__aeabi_uldivmod>
 800d174:	4602      	mov	r2, r0
 800d176:	460b      	mov	r3, r1
 800d178:	4613      	mov	r3, r2
 800d17a:	60fb      	str	r3, [r7, #12]
 800d17c:	e04a      	b.n	800d214 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d17e:	4b31      	ldr	r3, [pc, #196]	; (800d244 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	099b      	lsrs	r3, r3, #6
 800d184:	461a      	mov	r2, r3
 800d186:	f04f 0300 	mov.w	r3, #0
 800d18a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800d18e:	f04f 0100 	mov.w	r1, #0
 800d192:	ea02 0400 	and.w	r4, r2, r0
 800d196:	ea03 0501 	and.w	r5, r3, r1
 800d19a:	4620      	mov	r0, r4
 800d19c:	4629      	mov	r1, r5
 800d19e:	f04f 0200 	mov.w	r2, #0
 800d1a2:	f04f 0300 	mov.w	r3, #0
 800d1a6:	014b      	lsls	r3, r1, #5
 800d1a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800d1ac:	0142      	lsls	r2, r0, #5
 800d1ae:	4610      	mov	r0, r2
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	1b00      	subs	r0, r0, r4
 800d1b4:	eb61 0105 	sbc.w	r1, r1, r5
 800d1b8:	f04f 0200 	mov.w	r2, #0
 800d1bc:	f04f 0300 	mov.w	r3, #0
 800d1c0:	018b      	lsls	r3, r1, #6
 800d1c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800d1c6:	0182      	lsls	r2, r0, #6
 800d1c8:	1a12      	subs	r2, r2, r0
 800d1ca:	eb63 0301 	sbc.w	r3, r3, r1
 800d1ce:	f04f 0000 	mov.w	r0, #0
 800d1d2:	f04f 0100 	mov.w	r1, #0
 800d1d6:	00d9      	lsls	r1, r3, #3
 800d1d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d1dc:	00d0      	lsls	r0, r2, #3
 800d1de:	4602      	mov	r2, r0
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	1912      	adds	r2, r2, r4
 800d1e4:	eb45 0303 	adc.w	r3, r5, r3
 800d1e8:	f04f 0000 	mov.w	r0, #0
 800d1ec:	f04f 0100 	mov.w	r1, #0
 800d1f0:	0299      	lsls	r1, r3, #10
 800d1f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800d1f6:	0290      	lsls	r0, r2, #10
 800d1f8:	4602      	mov	r2, r0
 800d1fa:	460b      	mov	r3, r1
 800d1fc:	4610      	mov	r0, r2
 800d1fe:	4619      	mov	r1, r3
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	461a      	mov	r2, r3
 800d204:	f04f 0300 	mov.w	r3, #0
 800d208:	f7f3 fd3e 	bl	8000c88 <__aeabi_uldivmod>
 800d20c:	4602      	mov	r2, r0
 800d20e:	460b      	mov	r3, r1
 800d210:	4613      	mov	r3, r2
 800d212:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d214:	4b0b      	ldr	r3, [pc, #44]	; (800d244 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800d216:	685b      	ldr	r3, [r3, #4]
 800d218:	0c1b      	lsrs	r3, r3, #16
 800d21a:	f003 0303 	and.w	r3, r3, #3
 800d21e:	3301      	adds	r3, #1
 800d220:	005b      	lsls	r3, r3, #1
 800d222:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800d224:	68fa      	ldr	r2, [r7, #12]
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	fbb2 f3f3 	udiv	r3, r2, r3
 800d22c:	60bb      	str	r3, [r7, #8]
      break;
 800d22e:	e002      	b.n	800d236 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d230:	4b05      	ldr	r3, [pc, #20]	; (800d248 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800d232:	60bb      	str	r3, [r7, #8]
      break;
 800d234:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d236:	68bb      	ldr	r3, [r7, #8]
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3710      	adds	r7, #16
 800d23c:	46bd      	mov	sp, r7
 800d23e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d242:	bf00      	nop
 800d244:	40023800 	.word	0x40023800
 800d248:	00f42400 	.word	0x00f42400
 800d24c:	007a1200 	.word	0x007a1200

0800d250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d250:	b480      	push	{r7}
 800d252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d254:	4b03      	ldr	r3, [pc, #12]	; (800d264 <HAL_RCC_GetHCLKFreq+0x14>)
 800d256:	681b      	ldr	r3, [r3, #0]
}
 800d258:	4618      	mov	r0, r3
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr
 800d262:	bf00      	nop
 800d264:	2000408c 	.word	0x2000408c

0800d268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d26c:	f7ff fff0 	bl	800d250 <HAL_RCC_GetHCLKFreq>
 800d270:	4602      	mov	r2, r0
 800d272:	4b05      	ldr	r3, [pc, #20]	; (800d288 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d274:	689b      	ldr	r3, [r3, #8]
 800d276:	0a9b      	lsrs	r3, r3, #10
 800d278:	f003 0307 	and.w	r3, r3, #7
 800d27c:	4903      	ldr	r1, [pc, #12]	; (800d28c <HAL_RCC_GetPCLK1Freq+0x24>)
 800d27e:	5ccb      	ldrb	r3, [r1, r3]
 800d280:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d284:	4618      	mov	r0, r3
 800d286:	bd80      	pop	{r7, pc}
 800d288:	40023800 	.word	0x40023800
 800d28c:	0801b770 	.word	0x0801b770

0800d290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d294:	f7ff ffdc 	bl	800d250 <HAL_RCC_GetHCLKFreq>
 800d298:	4602      	mov	r2, r0
 800d29a:	4b05      	ldr	r3, [pc, #20]	; (800d2b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d29c:	689b      	ldr	r3, [r3, #8]
 800d29e:	0b5b      	lsrs	r3, r3, #13
 800d2a0:	f003 0307 	and.w	r3, r3, #7
 800d2a4:	4903      	ldr	r1, [pc, #12]	; (800d2b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d2a6:	5ccb      	ldrb	r3, [r1, r3]
 800d2a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	40023800 	.word	0x40023800
 800d2b4:	0801b770 	.word	0x0801b770

0800d2b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	220f      	movs	r2, #15
 800d2c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d2c8:	4b12      	ldr	r3, [pc, #72]	; (800d314 <HAL_RCC_GetClockConfig+0x5c>)
 800d2ca:	689b      	ldr	r3, [r3, #8]
 800d2cc:	f003 0203 	and.w	r2, r3, #3
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d2d4:	4b0f      	ldr	r3, [pc, #60]	; (800d314 <HAL_RCC_GetClockConfig+0x5c>)
 800d2d6:	689b      	ldr	r3, [r3, #8]
 800d2d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d2e0:	4b0c      	ldr	r3, [pc, #48]	; (800d314 <HAL_RCC_GetClockConfig+0x5c>)
 800d2e2:	689b      	ldr	r3, [r3, #8]
 800d2e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800d2ec:	4b09      	ldr	r3, [pc, #36]	; (800d314 <HAL_RCC_GetClockConfig+0x5c>)
 800d2ee:	689b      	ldr	r3, [r3, #8]
 800d2f0:	08db      	lsrs	r3, r3, #3
 800d2f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d2fa:	4b07      	ldr	r3, [pc, #28]	; (800d318 <HAL_RCC_GetClockConfig+0x60>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f003 020f 	and.w	r2, r3, #15
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	601a      	str	r2, [r3, #0]
}
 800d306:	bf00      	nop
 800d308:	370c      	adds	r7, #12
 800d30a:	46bd      	mov	sp, r7
 800d30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d310:	4770      	bx	lr
 800d312:	bf00      	nop
 800d314:	40023800 	.word	0x40023800
 800d318:	40023c00 	.word	0x40023c00

0800d31c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d101      	bne.n	800d32e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d32a:	2301      	movs	r3, #1
 800d32c:	e01d      	b.n	800d36a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d334:	b2db      	uxtb	r3, r3
 800d336:	2b00      	cmp	r3, #0
 800d338:	d106      	bne.n	800d348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2200      	movs	r2, #0
 800d33e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f7fd f99a 	bl	800a67c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2202      	movs	r2, #2
 800d34c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681a      	ldr	r2, [r3, #0]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	3304      	adds	r3, #4
 800d358:	4619      	mov	r1, r3
 800d35a:	4610      	mov	r0, r2
 800d35c:	f000 fa22 	bl	800d7a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2201      	movs	r2, #1
 800d364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d368:	2300      	movs	r3, #0
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3708      	adds	r7, #8
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}

0800d372 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d372:	b480      	push	{r7}
 800d374:	b085      	sub	sp, #20
 800d376:	af00      	add	r7, sp, #0
 800d378:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	68da      	ldr	r2, [r3, #12]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f042 0201 	orr.w	r2, r2, #1
 800d388:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	689b      	ldr	r3, [r3, #8]
 800d390:	f003 0307 	and.w	r3, r3, #7
 800d394:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	2b06      	cmp	r3, #6
 800d39a:	d007      	beq.n	800d3ac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	681a      	ldr	r2, [r3, #0]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f042 0201 	orr.w	r2, r2, #1
 800d3aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d3ac:	2300      	movs	r3, #0
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3714      	adds	r7, #20
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b8:	4770      	bx	lr

0800d3ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d3ba:	b580      	push	{r7, lr}
 800d3bc:	b082      	sub	sp, #8
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	691b      	ldr	r3, [r3, #16]
 800d3c8:	f003 0302 	and.w	r3, r3, #2
 800d3cc:	2b02      	cmp	r3, #2
 800d3ce:	d122      	bne.n	800d416 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	f003 0302 	and.w	r3, r3, #2
 800d3da:	2b02      	cmp	r3, #2
 800d3dc:	d11b      	bne.n	800d416 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f06f 0202 	mvn.w	r2, #2
 800d3e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	699b      	ldr	r3, [r3, #24]
 800d3f4:	f003 0303 	and.w	r3, r3, #3
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d003      	beq.n	800d404 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 f9b2 	bl	800d766 <HAL_TIM_IC_CaptureCallback>
 800d402:	e005      	b.n	800d410 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f000 f9a4 	bl	800d752 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f000 f9b5 	bl	800d77a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2200      	movs	r2, #0
 800d414:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	691b      	ldr	r3, [r3, #16]
 800d41c:	f003 0304 	and.w	r3, r3, #4
 800d420:	2b04      	cmp	r3, #4
 800d422:	d122      	bne.n	800d46a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	68db      	ldr	r3, [r3, #12]
 800d42a:	f003 0304 	and.w	r3, r3, #4
 800d42e:	2b04      	cmp	r3, #4
 800d430:	d11b      	bne.n	800d46a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f06f 0204 	mvn.w	r2, #4
 800d43a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2202      	movs	r2, #2
 800d440:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	699b      	ldr	r3, [r3, #24]
 800d448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d003      	beq.n	800d458 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 f988 	bl	800d766 <HAL_TIM_IC_CaptureCallback>
 800d456:	e005      	b.n	800d464 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f000 f97a 	bl	800d752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f000 f98b 	bl	800d77a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	691b      	ldr	r3, [r3, #16]
 800d470:	f003 0308 	and.w	r3, r3, #8
 800d474:	2b08      	cmp	r3, #8
 800d476:	d122      	bne.n	800d4be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	68db      	ldr	r3, [r3, #12]
 800d47e:	f003 0308 	and.w	r3, r3, #8
 800d482:	2b08      	cmp	r3, #8
 800d484:	d11b      	bne.n	800d4be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f06f 0208 	mvn.w	r2, #8
 800d48e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2204      	movs	r2, #4
 800d494:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	69db      	ldr	r3, [r3, #28]
 800d49c:	f003 0303 	and.w	r3, r3, #3
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d003      	beq.n	800d4ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f000 f95e 	bl	800d766 <HAL_TIM_IC_CaptureCallback>
 800d4aa:	e005      	b.n	800d4b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f000 f950 	bl	800d752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f000 f961 	bl	800d77a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	691b      	ldr	r3, [r3, #16]
 800d4c4:	f003 0310 	and.w	r3, r3, #16
 800d4c8:	2b10      	cmp	r3, #16
 800d4ca:	d122      	bne.n	800d512 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	68db      	ldr	r3, [r3, #12]
 800d4d2:	f003 0310 	and.w	r3, r3, #16
 800d4d6:	2b10      	cmp	r3, #16
 800d4d8:	d11b      	bne.n	800d512 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f06f 0210 	mvn.w	r2, #16
 800d4e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2208      	movs	r2, #8
 800d4e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	69db      	ldr	r3, [r3, #28]
 800d4f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d003      	beq.n	800d500 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f000 f934 	bl	800d766 <HAL_TIM_IC_CaptureCallback>
 800d4fe:	e005      	b.n	800d50c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f000 f926 	bl	800d752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f000 f937 	bl	800d77a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2200      	movs	r2, #0
 800d510:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	691b      	ldr	r3, [r3, #16]
 800d518:	f003 0301 	and.w	r3, r3, #1
 800d51c:	2b01      	cmp	r3, #1
 800d51e:	d10e      	bne.n	800d53e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	68db      	ldr	r3, [r3, #12]
 800d526:	f003 0301 	and.w	r3, r3, #1
 800d52a:	2b01      	cmp	r3, #1
 800d52c:	d107      	bne.n	800d53e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f06f 0201 	mvn.w	r2, #1
 800d536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f7f8 f8a5 	bl	8005688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	691b      	ldr	r3, [r3, #16]
 800d544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d548:	2b80      	cmp	r3, #128	; 0x80
 800d54a:	d10e      	bne.n	800d56a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	68db      	ldr	r3, [r3, #12]
 800d552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d556:	2b80      	cmp	r3, #128	; 0x80
 800d558:	d107      	bne.n	800d56a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f000 fadd 	bl	800db24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	691b      	ldr	r3, [r3, #16]
 800d570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d574:	2b40      	cmp	r3, #64	; 0x40
 800d576:	d10e      	bne.n	800d596 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	68db      	ldr	r3, [r3, #12]
 800d57e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d582:	2b40      	cmp	r3, #64	; 0x40
 800d584:	d107      	bne.n	800d596 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d58e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f000 f8fc 	bl	800d78e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	691b      	ldr	r3, [r3, #16]
 800d59c:	f003 0320 	and.w	r3, r3, #32
 800d5a0:	2b20      	cmp	r3, #32
 800d5a2:	d10e      	bne.n	800d5c2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	68db      	ldr	r3, [r3, #12]
 800d5aa:	f003 0320 	and.w	r3, r3, #32
 800d5ae:	2b20      	cmp	r3, #32
 800d5b0:	d107      	bne.n	800d5c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f06f 0220 	mvn.w	r2, #32
 800d5ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f000 faa7 	bl	800db10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d5c2:	bf00      	nop
 800d5c4:	3708      	adds	r7, #8
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}

0800d5ca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d5ca:	b580      	push	{r7, lr}
 800d5cc:	b084      	sub	sp, #16
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6078      	str	r0, [r7, #4]
 800d5d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	d101      	bne.n	800d5e2 <HAL_TIM_ConfigClockSource+0x18>
 800d5de:	2302      	movs	r3, #2
 800d5e0:	e0b3      	b.n	800d74a <HAL_TIM_ConfigClockSource+0x180>
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2201      	movs	r2, #1
 800d5e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2202      	movs	r2, #2
 800d5ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	689b      	ldr	r3, [r3, #8]
 800d5f8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d600:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d608:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	68fa      	ldr	r2, [r7, #12]
 800d610:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d61a:	d03e      	beq.n	800d69a <HAL_TIM_ConfigClockSource+0xd0>
 800d61c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d620:	f200 8087 	bhi.w	800d732 <HAL_TIM_ConfigClockSource+0x168>
 800d624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d628:	f000 8085 	beq.w	800d736 <HAL_TIM_ConfigClockSource+0x16c>
 800d62c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d630:	d87f      	bhi.n	800d732 <HAL_TIM_ConfigClockSource+0x168>
 800d632:	2b70      	cmp	r3, #112	; 0x70
 800d634:	d01a      	beq.n	800d66c <HAL_TIM_ConfigClockSource+0xa2>
 800d636:	2b70      	cmp	r3, #112	; 0x70
 800d638:	d87b      	bhi.n	800d732 <HAL_TIM_ConfigClockSource+0x168>
 800d63a:	2b60      	cmp	r3, #96	; 0x60
 800d63c:	d050      	beq.n	800d6e0 <HAL_TIM_ConfigClockSource+0x116>
 800d63e:	2b60      	cmp	r3, #96	; 0x60
 800d640:	d877      	bhi.n	800d732 <HAL_TIM_ConfigClockSource+0x168>
 800d642:	2b50      	cmp	r3, #80	; 0x50
 800d644:	d03c      	beq.n	800d6c0 <HAL_TIM_ConfigClockSource+0xf6>
 800d646:	2b50      	cmp	r3, #80	; 0x50
 800d648:	d873      	bhi.n	800d732 <HAL_TIM_ConfigClockSource+0x168>
 800d64a:	2b40      	cmp	r3, #64	; 0x40
 800d64c:	d058      	beq.n	800d700 <HAL_TIM_ConfigClockSource+0x136>
 800d64e:	2b40      	cmp	r3, #64	; 0x40
 800d650:	d86f      	bhi.n	800d732 <HAL_TIM_ConfigClockSource+0x168>
 800d652:	2b30      	cmp	r3, #48	; 0x30
 800d654:	d064      	beq.n	800d720 <HAL_TIM_ConfigClockSource+0x156>
 800d656:	2b30      	cmp	r3, #48	; 0x30
 800d658:	d86b      	bhi.n	800d732 <HAL_TIM_ConfigClockSource+0x168>
 800d65a:	2b20      	cmp	r3, #32
 800d65c:	d060      	beq.n	800d720 <HAL_TIM_ConfigClockSource+0x156>
 800d65e:	2b20      	cmp	r3, #32
 800d660:	d867      	bhi.n	800d732 <HAL_TIM_ConfigClockSource+0x168>
 800d662:	2b00      	cmp	r3, #0
 800d664:	d05c      	beq.n	800d720 <HAL_TIM_ConfigClockSource+0x156>
 800d666:	2b10      	cmp	r3, #16
 800d668:	d05a      	beq.n	800d720 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800d66a:	e062      	b.n	800d732 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6818      	ldr	r0, [r3, #0]
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	6899      	ldr	r1, [r3, #8]
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	685a      	ldr	r2, [r3, #4]
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	68db      	ldr	r3, [r3, #12]
 800d67c:	f000 f9ac 	bl	800d9d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	689b      	ldr	r3, [r3, #8]
 800d686:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d68e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	68fa      	ldr	r2, [r7, #12]
 800d696:	609a      	str	r2, [r3, #8]
      break;
 800d698:	e04e      	b.n	800d738 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6818      	ldr	r0, [r3, #0]
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	6899      	ldr	r1, [r3, #8]
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	685a      	ldr	r2, [r3, #4]
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	68db      	ldr	r3, [r3, #12]
 800d6aa:	f000 f995 	bl	800d9d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	689a      	ldr	r2, [r3, #8]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d6bc:	609a      	str	r2, [r3, #8]
      break;
 800d6be:	e03b      	b.n	800d738 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6818      	ldr	r0, [r3, #0]
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	6859      	ldr	r1, [r3, #4]
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	68db      	ldr	r3, [r3, #12]
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	f000 f909 	bl	800d8e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	2150      	movs	r1, #80	; 0x50
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f000 f962 	bl	800d9a2 <TIM_ITRx_SetConfig>
      break;
 800d6de:	e02b      	b.n	800d738 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6818      	ldr	r0, [r3, #0]
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	6859      	ldr	r1, [r3, #4]
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	f000 f928 	bl	800d942 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	2160      	movs	r1, #96	; 0x60
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f000 f952 	bl	800d9a2 <TIM_ITRx_SetConfig>
      break;
 800d6fe:	e01b      	b.n	800d738 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6818      	ldr	r0, [r3, #0]
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	6859      	ldr	r1, [r3, #4]
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	68db      	ldr	r3, [r3, #12]
 800d70c:	461a      	mov	r2, r3
 800d70e:	f000 f8e9 	bl	800d8e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	2140      	movs	r1, #64	; 0x40
 800d718:	4618      	mov	r0, r3
 800d71a:	f000 f942 	bl	800d9a2 <TIM_ITRx_SetConfig>
      break;
 800d71e:	e00b      	b.n	800d738 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681a      	ldr	r2, [r3, #0]
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	4619      	mov	r1, r3
 800d72a:	4610      	mov	r0, r2
 800d72c:	f000 f939 	bl	800d9a2 <TIM_ITRx_SetConfig>
      break;
 800d730:	e002      	b.n	800d738 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800d732:	bf00      	nop
 800d734:	e000      	b.n	800d738 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800d736:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2201      	movs	r2, #1
 800d73c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2200      	movs	r2, #0
 800d744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d748:	2300      	movs	r3, #0
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3710      	adds	r7, #16
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}

0800d752 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d752:	b480      	push	{r7}
 800d754:	b083      	sub	sp, #12
 800d756:	af00      	add	r7, sp, #0
 800d758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d75a:	bf00      	nop
 800d75c:	370c      	adds	r7, #12
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr

0800d766 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d766:	b480      	push	{r7}
 800d768:	b083      	sub	sp, #12
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d76e:	bf00      	nop
 800d770:	370c      	adds	r7, #12
 800d772:	46bd      	mov	sp, r7
 800d774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d778:	4770      	bx	lr

0800d77a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d77a:	b480      	push	{r7}
 800d77c:	b083      	sub	sp, #12
 800d77e:	af00      	add	r7, sp, #0
 800d780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d782:	bf00      	nop
 800d784:	370c      	adds	r7, #12
 800d786:	46bd      	mov	sp, r7
 800d788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78c:	4770      	bx	lr

0800d78e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d78e:	b480      	push	{r7}
 800d790:	b083      	sub	sp, #12
 800d792:	af00      	add	r7, sp, #0
 800d794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d796:	bf00      	nop
 800d798:	370c      	adds	r7, #12
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr
	...

0800d7a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b085      	sub	sp, #20
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	4a40      	ldr	r2, [pc, #256]	; (800d8b8 <TIM_Base_SetConfig+0x114>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d013      	beq.n	800d7e4 <TIM_Base_SetConfig+0x40>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7c2:	d00f      	beq.n	800d7e4 <TIM_Base_SetConfig+0x40>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	4a3d      	ldr	r2, [pc, #244]	; (800d8bc <TIM_Base_SetConfig+0x118>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	d00b      	beq.n	800d7e4 <TIM_Base_SetConfig+0x40>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	4a3c      	ldr	r2, [pc, #240]	; (800d8c0 <TIM_Base_SetConfig+0x11c>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d007      	beq.n	800d7e4 <TIM_Base_SetConfig+0x40>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	4a3b      	ldr	r2, [pc, #236]	; (800d8c4 <TIM_Base_SetConfig+0x120>)
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d003      	beq.n	800d7e4 <TIM_Base_SetConfig+0x40>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	4a3a      	ldr	r2, [pc, #232]	; (800d8c8 <TIM_Base_SetConfig+0x124>)
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d108      	bne.n	800d7f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	685b      	ldr	r3, [r3, #4]
 800d7f0:	68fa      	ldr	r2, [r7, #12]
 800d7f2:	4313      	orrs	r3, r2
 800d7f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	4a2f      	ldr	r2, [pc, #188]	; (800d8b8 <TIM_Base_SetConfig+0x114>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d02b      	beq.n	800d856 <TIM_Base_SetConfig+0xb2>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d804:	d027      	beq.n	800d856 <TIM_Base_SetConfig+0xb2>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	4a2c      	ldr	r2, [pc, #176]	; (800d8bc <TIM_Base_SetConfig+0x118>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d023      	beq.n	800d856 <TIM_Base_SetConfig+0xb2>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	4a2b      	ldr	r2, [pc, #172]	; (800d8c0 <TIM_Base_SetConfig+0x11c>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d01f      	beq.n	800d856 <TIM_Base_SetConfig+0xb2>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	4a2a      	ldr	r2, [pc, #168]	; (800d8c4 <TIM_Base_SetConfig+0x120>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d01b      	beq.n	800d856 <TIM_Base_SetConfig+0xb2>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4a29      	ldr	r2, [pc, #164]	; (800d8c8 <TIM_Base_SetConfig+0x124>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d017      	beq.n	800d856 <TIM_Base_SetConfig+0xb2>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	4a28      	ldr	r2, [pc, #160]	; (800d8cc <TIM_Base_SetConfig+0x128>)
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d013      	beq.n	800d856 <TIM_Base_SetConfig+0xb2>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	4a27      	ldr	r2, [pc, #156]	; (800d8d0 <TIM_Base_SetConfig+0x12c>)
 800d832:	4293      	cmp	r3, r2
 800d834:	d00f      	beq.n	800d856 <TIM_Base_SetConfig+0xb2>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	4a26      	ldr	r2, [pc, #152]	; (800d8d4 <TIM_Base_SetConfig+0x130>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d00b      	beq.n	800d856 <TIM_Base_SetConfig+0xb2>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	4a25      	ldr	r2, [pc, #148]	; (800d8d8 <TIM_Base_SetConfig+0x134>)
 800d842:	4293      	cmp	r3, r2
 800d844:	d007      	beq.n	800d856 <TIM_Base_SetConfig+0xb2>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	4a24      	ldr	r2, [pc, #144]	; (800d8dc <TIM_Base_SetConfig+0x138>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d003      	beq.n	800d856 <TIM_Base_SetConfig+0xb2>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	4a23      	ldr	r2, [pc, #140]	; (800d8e0 <TIM_Base_SetConfig+0x13c>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d108      	bne.n	800d868 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d85c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	68db      	ldr	r3, [r3, #12]
 800d862:	68fa      	ldr	r2, [r7, #12]
 800d864:	4313      	orrs	r3, r2
 800d866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	695b      	ldr	r3, [r3, #20]
 800d872:	4313      	orrs	r3, r2
 800d874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	68fa      	ldr	r2, [r7, #12]
 800d87a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	689a      	ldr	r2, [r3, #8]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	681a      	ldr	r2, [r3, #0]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	4a0a      	ldr	r2, [pc, #40]	; (800d8b8 <TIM_Base_SetConfig+0x114>)
 800d890:	4293      	cmp	r3, r2
 800d892:	d003      	beq.n	800d89c <TIM_Base_SetConfig+0xf8>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	4a0c      	ldr	r2, [pc, #48]	; (800d8c8 <TIM_Base_SetConfig+0x124>)
 800d898:	4293      	cmp	r3, r2
 800d89a:	d103      	bne.n	800d8a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	691a      	ldr	r2, [r3, #16]
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	615a      	str	r2, [r3, #20]
}
 800d8aa:	bf00      	nop
 800d8ac:	3714      	adds	r7, #20
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b4:	4770      	bx	lr
 800d8b6:	bf00      	nop
 800d8b8:	40010000 	.word	0x40010000
 800d8bc:	40000400 	.word	0x40000400
 800d8c0:	40000800 	.word	0x40000800
 800d8c4:	40000c00 	.word	0x40000c00
 800d8c8:	40010400 	.word	0x40010400
 800d8cc:	40014000 	.word	0x40014000
 800d8d0:	40014400 	.word	0x40014400
 800d8d4:	40014800 	.word	0x40014800
 800d8d8:	40001800 	.word	0x40001800
 800d8dc:	40001c00 	.word	0x40001c00
 800d8e0:	40002000 	.word	0x40002000

0800d8e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b087      	sub	sp, #28
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	60f8      	str	r0, [r7, #12]
 800d8ec:	60b9      	str	r1, [r7, #8]
 800d8ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	6a1b      	ldr	r3, [r3, #32]
 800d8f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	6a1b      	ldr	r3, [r3, #32]
 800d8fa:	f023 0201 	bic.w	r2, r3, #1
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	699b      	ldr	r3, [r3, #24]
 800d906:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d90e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	011b      	lsls	r3, r3, #4
 800d914:	693a      	ldr	r2, [r7, #16]
 800d916:	4313      	orrs	r3, r2
 800d918:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	f023 030a 	bic.w	r3, r3, #10
 800d920:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d922:	697a      	ldr	r2, [r7, #20]
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	4313      	orrs	r3, r2
 800d928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	693a      	ldr	r2, [r7, #16]
 800d92e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	697a      	ldr	r2, [r7, #20]
 800d934:	621a      	str	r2, [r3, #32]
}
 800d936:	bf00      	nop
 800d938:	371c      	adds	r7, #28
 800d93a:	46bd      	mov	sp, r7
 800d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d940:	4770      	bx	lr

0800d942 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d942:	b480      	push	{r7}
 800d944:	b087      	sub	sp, #28
 800d946:	af00      	add	r7, sp, #0
 800d948:	60f8      	str	r0, [r7, #12]
 800d94a:	60b9      	str	r1, [r7, #8]
 800d94c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	6a1b      	ldr	r3, [r3, #32]
 800d952:	f023 0210 	bic.w	r2, r3, #16
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	699b      	ldr	r3, [r3, #24]
 800d95e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	6a1b      	ldr	r3, [r3, #32]
 800d964:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d96c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	031b      	lsls	r3, r3, #12
 800d972:	697a      	ldr	r2, [r7, #20]
 800d974:	4313      	orrs	r3, r2
 800d976:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d97e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	011b      	lsls	r3, r3, #4
 800d984:	693a      	ldr	r2, [r7, #16]
 800d986:	4313      	orrs	r3, r2
 800d988:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	697a      	ldr	r2, [r7, #20]
 800d98e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	693a      	ldr	r2, [r7, #16]
 800d994:	621a      	str	r2, [r3, #32]
}
 800d996:	bf00      	nop
 800d998:	371c      	adds	r7, #28
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr

0800d9a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d9a2:	b480      	push	{r7}
 800d9a4:	b085      	sub	sp, #20
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
 800d9aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	689b      	ldr	r3, [r3, #8]
 800d9b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d9ba:	683a      	ldr	r2, [r7, #0]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	4313      	orrs	r3, r2
 800d9c0:	f043 0307 	orr.w	r3, r3, #7
 800d9c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	68fa      	ldr	r2, [r7, #12]
 800d9ca:	609a      	str	r2, [r3, #8]
}
 800d9cc:	bf00      	nop
 800d9ce:	3714      	adds	r7, #20
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr

0800d9d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b087      	sub	sp, #28
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]
 800d9e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	689b      	ldr	r3, [r3, #8]
 800d9ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d9f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	021a      	lsls	r2, r3, #8
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	431a      	orrs	r2, r3
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	4313      	orrs	r3, r2
 800da00:	697a      	ldr	r2, [r7, #20]
 800da02:	4313      	orrs	r3, r2
 800da04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	697a      	ldr	r2, [r7, #20]
 800da0a:	609a      	str	r2, [r3, #8]
}
 800da0c:	bf00      	nop
 800da0e:	371c      	adds	r7, #28
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800da18:	b480      	push	{r7}
 800da1a:	b085      	sub	sp, #20
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d101      	bne.n	800da30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800da2c:	2302      	movs	r3, #2
 800da2e:	e05a      	b.n	800dae6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2201      	movs	r2, #1
 800da34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2202      	movs	r2, #2
 800da3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	685b      	ldr	r3, [r3, #4]
 800da46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	689b      	ldr	r3, [r3, #8]
 800da4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	68fa      	ldr	r2, [r7, #12]
 800da5e:	4313      	orrs	r3, r2
 800da60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	68fa      	ldr	r2, [r7, #12]
 800da68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	4a21      	ldr	r2, [pc, #132]	; (800daf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800da70:	4293      	cmp	r3, r2
 800da72:	d022      	beq.n	800daba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da7c:	d01d      	beq.n	800daba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	4a1d      	ldr	r2, [pc, #116]	; (800daf8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800da84:	4293      	cmp	r3, r2
 800da86:	d018      	beq.n	800daba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	4a1b      	ldr	r2, [pc, #108]	; (800dafc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800da8e:	4293      	cmp	r3, r2
 800da90:	d013      	beq.n	800daba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	4a1a      	ldr	r2, [pc, #104]	; (800db00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800da98:	4293      	cmp	r3, r2
 800da9a:	d00e      	beq.n	800daba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	4a18      	ldr	r2, [pc, #96]	; (800db04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d009      	beq.n	800daba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	4a17      	ldr	r2, [pc, #92]	; (800db08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800daac:	4293      	cmp	r3, r2
 800daae:	d004      	beq.n	800daba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4a15      	ldr	r2, [pc, #84]	; (800db0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d10c      	bne.n	800dad4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dac0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	68ba      	ldr	r2, [r7, #8]
 800dac8:	4313      	orrs	r3, r2
 800daca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	68ba      	ldr	r2, [r7, #8]
 800dad2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2201      	movs	r2, #1
 800dad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2200      	movs	r2, #0
 800dae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dae4:	2300      	movs	r3, #0
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3714      	adds	r7, #20
 800daea:	46bd      	mov	sp, r7
 800daec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf0:	4770      	bx	lr
 800daf2:	bf00      	nop
 800daf4:	40010000 	.word	0x40010000
 800daf8:	40000400 	.word	0x40000400
 800dafc:	40000800 	.word	0x40000800
 800db00:	40000c00 	.word	0x40000c00
 800db04:	40010400 	.word	0x40010400
 800db08:	40014000 	.word	0x40014000
 800db0c:	40001800 	.word	0x40001800

0800db10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800db10:	b480      	push	{r7}
 800db12:	b083      	sub	sp, #12
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800db18:	bf00      	nop
 800db1a:	370c      	adds	r7, #12
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr

0800db24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800db24:	b480      	push	{r7}
 800db26:	b083      	sub	sp, #12
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800db2c:	bf00      	nop
 800db2e:	370c      	adds	r7, #12
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr

0800db38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d101      	bne.n	800db4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800db46:	2301      	movs	r3, #1
 800db48:	e03f      	b.n	800dbca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800db50:	b2db      	uxtb	r3, r3
 800db52:	2b00      	cmp	r3, #0
 800db54:	d106      	bne.n	800db64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2200      	movs	r2, #0
 800db5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f7fc fdf2 	bl	800a748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2224      	movs	r2, #36	; 0x24
 800db68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	68da      	ldr	r2, [r3, #12]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800db7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f000 fb6b 	bl	800e258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	691a      	ldr	r2, [r3, #16]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800db90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	695a      	ldr	r2, [r3, #20]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dba0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	68da      	ldr	r2, [r3, #12]
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dbb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2220      	movs	r2, #32
 800dbbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2220      	movs	r2, #32
 800dbc4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800dbc8:	2300      	movs	r3, #0
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3708      	adds	r7, #8
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}
	...

0800dbd4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b086      	sub	sp, #24
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	60f8      	str	r0, [r7, #12]
 800dbdc:	60b9      	str	r1, [r7, #8]
 800dbde:	4613      	mov	r3, r2
 800dbe0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dbe8:	b2db      	uxtb	r3, r3
 800dbea:	2b20      	cmp	r3, #32
 800dbec:	d153      	bne.n	800dc96 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d002      	beq.n	800dbfa <HAL_UART_Transmit_DMA+0x26>
 800dbf4:	88fb      	ldrh	r3, [r7, #6]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d101      	bne.n	800dbfe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	e04c      	b.n	800dc98 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d101      	bne.n	800dc0c <HAL_UART_Transmit_DMA+0x38>
 800dc08:	2302      	movs	r3, #2
 800dc0a:	e045      	b.n	800dc98 <HAL_UART_Transmit_DMA+0xc4>
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	2201      	movs	r2, #1
 800dc10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800dc14:	68ba      	ldr	r2, [r7, #8]
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	88fa      	ldrh	r2, [r7, #6]
 800dc1e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	88fa      	ldrh	r2, [r7, #6]
 800dc24:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2221      	movs	r2, #33	; 0x21
 800dc30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc38:	4a19      	ldr	r2, [pc, #100]	; (800dca0 <HAL_UART_Transmit_DMA+0xcc>)
 800dc3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc40:	4a18      	ldr	r2, [pc, #96]	; (800dca4 <HAL_UART_Transmit_DMA+0xd0>)
 800dc42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc48:	4a17      	ldr	r2, [pc, #92]	; (800dca8 <HAL_UART_Transmit_DMA+0xd4>)
 800dc4a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc50:	2200      	movs	r2, #0
 800dc52:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800dc54:	f107 0308 	add.w	r3, r7, #8
 800dc58:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	6819      	ldr	r1, [r3, #0]
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	3304      	adds	r3, #4
 800dc68:	461a      	mov	r2, r3
 800dc6a:	88fb      	ldrh	r3, [r7, #6]
 800dc6c:	f7fd f836 	bl	800acdc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dc78:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	695a      	ldr	r2, [r3, #20]
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dc90:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800dc92:	2300      	movs	r3, #0
 800dc94:	e000      	b.n	800dc98 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800dc96:	2302      	movs	r3, #2
  }
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3718      	adds	r7, #24
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	0800dee9 	.word	0x0800dee9
 800dca4:	0800df3b 	.word	0x0800df3b
 800dca8:	0800df57 	.word	0x0800df57

0800dcac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b088      	sub	sp, #32
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	68db      	ldr	r3, [r3, #12]
 800dcc2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	695b      	ldr	r3, [r3, #20]
 800dcca:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800dccc:	2300      	movs	r3, #0
 800dcce:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	f003 030f 	and.w	r3, r3, #15
 800dcda:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d10d      	bne.n	800dcfe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dce2:	69fb      	ldr	r3, [r7, #28]
 800dce4:	f003 0320 	and.w	r3, r3, #32
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d008      	beq.n	800dcfe <HAL_UART_IRQHandler+0x52>
 800dcec:	69bb      	ldr	r3, [r7, #24]
 800dcee:	f003 0320 	and.w	r3, r3, #32
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d003      	beq.n	800dcfe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f000 fa2d 	bl	800e156 <UART_Receive_IT>
      return;
 800dcfc:	e0d0      	b.n	800dea0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	f000 80b0 	beq.w	800de66 <HAL_UART_IRQHandler+0x1ba>
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	f003 0301 	and.w	r3, r3, #1
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d105      	bne.n	800dd1c <HAL_UART_IRQHandler+0x70>
 800dd10:	69bb      	ldr	r3, [r7, #24]
 800dd12:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	f000 80a5 	beq.w	800de66 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800dd1c:	69fb      	ldr	r3, [r7, #28]
 800dd1e:	f003 0301 	and.w	r3, r3, #1
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d00a      	beq.n	800dd3c <HAL_UART_IRQHandler+0x90>
 800dd26:	69bb      	ldr	r3, [r7, #24]
 800dd28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d005      	beq.n	800dd3c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd34:	f043 0201 	orr.w	r2, r3, #1
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dd3c:	69fb      	ldr	r3, [r7, #28]
 800dd3e:	f003 0304 	and.w	r3, r3, #4
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d00a      	beq.n	800dd5c <HAL_UART_IRQHandler+0xb0>
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	f003 0301 	and.w	r3, r3, #1
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d005      	beq.n	800dd5c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd54:	f043 0202 	orr.w	r2, r3, #2
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dd5c:	69fb      	ldr	r3, [r7, #28]
 800dd5e:	f003 0302 	and.w	r3, r3, #2
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d00a      	beq.n	800dd7c <HAL_UART_IRQHandler+0xd0>
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	f003 0301 	and.w	r3, r3, #1
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d005      	beq.n	800dd7c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd74:	f043 0204 	orr.w	r2, r3, #4
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800dd7c:	69fb      	ldr	r3, [r7, #28]
 800dd7e:	f003 0308 	and.w	r3, r3, #8
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d00f      	beq.n	800dda6 <HAL_UART_IRQHandler+0xfa>
 800dd86:	69bb      	ldr	r3, [r7, #24]
 800dd88:	f003 0320 	and.w	r3, r3, #32
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d104      	bne.n	800dd9a <HAL_UART_IRQHandler+0xee>
 800dd90:	697b      	ldr	r3, [r7, #20]
 800dd92:	f003 0301 	and.w	r3, r3, #1
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d005      	beq.n	800dda6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd9e:	f043 0208 	orr.w	r2, r3, #8
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d077      	beq.n	800de9e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ddae:	69fb      	ldr	r3, [r7, #28]
 800ddb0:	f003 0320 	and.w	r3, r3, #32
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d007      	beq.n	800ddc8 <HAL_UART_IRQHandler+0x11c>
 800ddb8:	69bb      	ldr	r3, [r7, #24]
 800ddba:	f003 0320 	and.w	r3, r3, #32
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d002      	beq.n	800ddc8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f000 f9c7 	bl	800e156 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	695b      	ldr	r3, [r3, #20]
 800ddce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddd2:	2b40      	cmp	r3, #64	; 0x40
 800ddd4:	bf0c      	ite	eq
 800ddd6:	2301      	moveq	r3, #1
 800ddd8:	2300      	movne	r3, #0
 800ddda:	b2db      	uxtb	r3, r3
 800dddc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dde2:	f003 0308 	and.w	r3, r3, #8
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d102      	bne.n	800ddf0 <HAL_UART_IRQHandler+0x144>
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d031      	beq.n	800de54 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f000 f910 	bl	800e016 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	695b      	ldr	r3, [r3, #20]
 800ddfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de00:	2b40      	cmp	r3, #64	; 0x40
 800de02:	d123      	bne.n	800de4c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	695a      	ldr	r2, [r3, #20]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de12:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d013      	beq.n	800de44 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de20:	4a21      	ldr	r2, [pc, #132]	; (800dea8 <HAL_UART_IRQHandler+0x1fc>)
 800de22:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de28:	4618      	mov	r0, r3
 800de2a:	f7fc ffaf 	bl	800ad8c <HAL_DMA_Abort_IT>
 800de2e:	4603      	mov	r3, r0
 800de30:	2b00      	cmp	r3, #0
 800de32:	d016      	beq.n	800de62 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de3a:	687a      	ldr	r2, [r7, #4]
 800de3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800de3e:	4610      	mov	r0, r2
 800de40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de42:	e00e      	b.n	800de62 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f000 f845 	bl	800ded4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de4a:	e00a      	b.n	800de62 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f000 f841 	bl	800ded4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de52:	e006      	b.n	800de62 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f000 f83d 	bl	800ded4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2200      	movs	r2, #0
 800de5e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800de60:	e01d      	b.n	800de9e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de62:	bf00      	nop
    return;
 800de64:	e01b      	b.n	800de9e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800de66:	69fb      	ldr	r3, [r7, #28]
 800de68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d008      	beq.n	800de82 <HAL_UART_IRQHandler+0x1d6>
 800de70:	69bb      	ldr	r3, [r7, #24]
 800de72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de76:	2b00      	cmp	r3, #0
 800de78:	d003      	beq.n	800de82 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	f000 f8fd 	bl	800e07a <UART_Transmit_IT>
    return;
 800de80:	e00e      	b.n	800dea0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800de82:	69fb      	ldr	r3, [r7, #28]
 800de84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d009      	beq.n	800dea0 <HAL_UART_IRQHandler+0x1f4>
 800de8c:	69bb      	ldr	r3, [r7, #24]
 800de8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de92:	2b00      	cmp	r3, #0
 800de94:	d004      	beq.n	800dea0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f000 f945 	bl	800e126 <UART_EndTransmit_IT>
    return;
 800de9c:	e000      	b.n	800dea0 <HAL_UART_IRQHandler+0x1f4>
    return;
 800de9e:	bf00      	nop
  }
}
 800dea0:	3720      	adds	r7, #32
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	0800e053 	.word	0x0800e053

0800deac <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800deac:	b480      	push	{r7}
 800deae:	b083      	sub	sp, #12
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800deb4:	bf00      	nop
 800deb6:	370c      	adds	r7, #12
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr

0800dec0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800dec0:	b480      	push	{r7}
 800dec2:	b083      	sub	sp, #12
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800dec8:	bf00      	nop
 800deca:	370c      	adds	r7, #12
 800decc:	46bd      	mov	sp, r7
 800dece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded2:	4770      	bx	lr

0800ded4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b083      	sub	sp, #12
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800dedc:	bf00      	nop
 800dede:	370c      	adds	r7, #12
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr

0800dee8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df00:	2b00      	cmp	r3, #0
 800df02:	d113      	bne.n	800df2c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2200      	movs	r2, #0
 800df08:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	695a      	ldr	r2, [r3, #20]
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800df18:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	68da      	ldr	r2, [r3, #12]
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800df28:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800df2a:	e002      	b.n	800df32 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800df2c:	68f8      	ldr	r0, [r7, #12]
 800df2e:	f7fc fc8d 	bl	800a84c <HAL_UART_TxCpltCallback>
}
 800df32:	bf00      	nop
 800df34:	3710      	adds	r7, #16
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}

0800df3a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800df3a:	b580      	push	{r7, lr}
 800df3c:	b084      	sub	sp, #16
 800df3e:	af00      	add	r7, sp, #0
 800df40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df46:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800df48:	68f8      	ldr	r0, [r7, #12]
 800df4a:	f7ff ffaf 	bl	800deac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df4e:	bf00      	nop
 800df50:	3710      	adds	r7, #16
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}

0800df56 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800df56:	b580      	push	{r7, lr}
 800df58:	b084      	sub	sp, #16
 800df5a:	af00      	add	r7, sp, #0
 800df5c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800df5e:	2300      	movs	r3, #0
 800df60:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df66:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	695b      	ldr	r3, [r3, #20]
 800df6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df72:	2b80      	cmp	r3, #128	; 0x80
 800df74:	bf0c      	ite	eq
 800df76:	2301      	moveq	r3, #1
 800df78:	2300      	movne	r3, #0
 800df7a:	b2db      	uxtb	r3, r3
 800df7c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800df84:	b2db      	uxtb	r3, r3
 800df86:	2b21      	cmp	r3, #33	; 0x21
 800df88:	d108      	bne.n	800df9c <UART_DMAError+0x46>
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d005      	beq.n	800df9c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	2200      	movs	r2, #0
 800df94:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800df96:	68b8      	ldr	r0, [r7, #8]
 800df98:	f000 f827 	bl	800dfea <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	695b      	ldr	r3, [r3, #20]
 800dfa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfa6:	2b40      	cmp	r3, #64	; 0x40
 800dfa8:	bf0c      	ite	eq
 800dfaa:	2301      	moveq	r3, #1
 800dfac:	2300      	movne	r3, #0
 800dfae:	b2db      	uxtb	r3, r3
 800dfb0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800dfb8:	b2db      	uxtb	r3, r3
 800dfba:	2b22      	cmp	r3, #34	; 0x22
 800dfbc:	d108      	bne.n	800dfd0 <UART_DMAError+0x7a>
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d005      	beq.n	800dfd0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800dfca:	68b8      	ldr	r0, [r7, #8]
 800dfcc:	f000 f823 	bl	800e016 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfd4:	f043 0210 	orr.w	r2, r3, #16
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dfdc:	68b8      	ldr	r0, [r7, #8]
 800dfde:	f7ff ff79 	bl	800ded4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dfe2:	bf00      	nop
 800dfe4:	3710      	adds	r7, #16
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}

0800dfea <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dfea:	b480      	push	{r7}
 800dfec:	b083      	sub	sp, #12
 800dfee:	af00      	add	r7, sp, #0
 800dff0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	68da      	ldr	r2, [r3, #12]
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e000:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2220      	movs	r2, #32
 800e006:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800e00a:	bf00      	nop
 800e00c:	370c      	adds	r7, #12
 800e00e:	46bd      	mov	sp, r7
 800e010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e014:	4770      	bx	lr

0800e016 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e016:	b480      	push	{r7}
 800e018:	b083      	sub	sp, #12
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	68da      	ldr	r2, [r3, #12]
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e02c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	695a      	ldr	r2, [r3, #20]
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f022 0201 	bic.w	r2, r2, #1
 800e03c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2220      	movs	r2, #32
 800e042:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800e046:	bf00      	nop
 800e048:	370c      	adds	r7, #12
 800e04a:	46bd      	mov	sp, r7
 800e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e050:	4770      	bx	lr

0800e052 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e052:	b580      	push	{r7, lr}
 800e054:	b084      	sub	sp, #16
 800e056:	af00      	add	r7, sp, #0
 800e058:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e05e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2200      	movs	r2, #0
 800e064:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	2200      	movs	r2, #0
 800e06a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e06c:	68f8      	ldr	r0, [r7, #12]
 800e06e:	f7ff ff31 	bl	800ded4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e072:	bf00      	nop
 800e074:	3710      	adds	r7, #16
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}

0800e07a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e07a:	b480      	push	{r7}
 800e07c:	b085      	sub	sp, #20
 800e07e:	af00      	add	r7, sp, #0
 800e080:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e088:	b2db      	uxtb	r3, r3
 800e08a:	2b21      	cmp	r3, #33	; 0x21
 800e08c:	d144      	bne.n	800e118 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	689b      	ldr	r3, [r3, #8]
 800e092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e096:	d11a      	bne.n	800e0ce <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6a1b      	ldr	r3, [r3, #32]
 800e09c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	881b      	ldrh	r3, [r3, #0]
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e0ac:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	691b      	ldr	r3, [r3, #16]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d105      	bne.n	800e0c2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6a1b      	ldr	r3, [r3, #32]
 800e0ba:	1c9a      	adds	r2, r3, #2
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	621a      	str	r2, [r3, #32]
 800e0c0:	e00e      	b.n	800e0e0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6a1b      	ldr	r3, [r3, #32]
 800e0c6:	1c5a      	adds	r2, r3, #1
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	621a      	str	r2, [r3, #32]
 800e0cc:	e008      	b.n	800e0e0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6a1b      	ldr	r3, [r3, #32]
 800e0d2:	1c59      	adds	r1, r3, #1
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	6211      	str	r1, [r2, #32]
 800e0d8:	781a      	ldrb	r2, [r3, #0]
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e0e4:	b29b      	uxth	r3, r3
 800e0e6:	3b01      	subs	r3, #1
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	687a      	ldr	r2, [r7, #4]
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d10f      	bne.n	800e114 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	68da      	ldr	r2, [r3, #12]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e102:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	68da      	ldr	r2, [r3, #12]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e112:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e114:	2300      	movs	r3, #0
 800e116:	e000      	b.n	800e11a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e118:	2302      	movs	r3, #2
  }
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3714      	adds	r7, #20
 800e11e:	46bd      	mov	sp, r7
 800e120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e124:	4770      	bx	lr

0800e126 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e126:	b580      	push	{r7, lr}
 800e128:	b082      	sub	sp, #8
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	68da      	ldr	r2, [r3, #12]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e13c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2220      	movs	r2, #32
 800e142:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f7fc fb80 	bl	800a84c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e14c:	2300      	movs	r3, #0
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3708      	adds	r7, #8
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}

0800e156 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e156:	b580      	push	{r7, lr}
 800e158:	b084      	sub	sp, #16
 800e15a:	af00      	add	r7, sp, #0
 800e15c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e164:	b2db      	uxtb	r3, r3
 800e166:	2b22      	cmp	r3, #34	; 0x22
 800e168:	d171      	bne.n	800e24e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	689b      	ldr	r3, [r3, #8]
 800e16e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e172:	d123      	bne.n	800e1bc <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e178:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	691b      	ldr	r3, [r3, #16]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d10e      	bne.n	800e1a0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	685b      	ldr	r3, [r3, #4]
 800e188:	b29b      	uxth	r3, r3
 800e18a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e18e:	b29a      	uxth	r2, r3
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e198:	1c9a      	adds	r2, r3, #2
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	629a      	str	r2, [r3, #40]	; 0x28
 800e19e:	e029      	b.n	800e1f4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	685b      	ldr	r3, [r3, #4]
 800e1a6:	b29b      	uxth	r3, r3
 800e1a8:	b2db      	uxtb	r3, r3
 800e1aa:	b29a      	uxth	r2, r3
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1b4:	1c5a      	adds	r2, r3, #1
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	629a      	str	r2, [r3, #40]	; 0x28
 800e1ba:	e01b      	b.n	800e1f4 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	691b      	ldr	r3, [r3, #16]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d10a      	bne.n	800e1da <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	6858      	ldr	r0, [r3, #4]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1ce:	1c59      	adds	r1, r3, #1
 800e1d0:	687a      	ldr	r2, [r7, #4]
 800e1d2:	6291      	str	r1, [r2, #40]	; 0x28
 800e1d4:	b2c2      	uxtb	r2, r0
 800e1d6:	701a      	strb	r2, [r3, #0]
 800e1d8:	e00c      	b.n	800e1f4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	b2da      	uxtb	r2, r3
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1e6:	1c58      	adds	r0, r3, #1
 800e1e8:	6879      	ldr	r1, [r7, #4]
 800e1ea:	6288      	str	r0, [r1, #40]	; 0x28
 800e1ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e1f0:	b2d2      	uxtb	r2, r2
 800e1f2:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e1f8:	b29b      	uxth	r3, r3
 800e1fa:	3b01      	subs	r3, #1
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	687a      	ldr	r2, [r7, #4]
 800e200:	4619      	mov	r1, r3
 800e202:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800e204:	2b00      	cmp	r3, #0
 800e206:	d120      	bne.n	800e24a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	68da      	ldr	r2, [r3, #12]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f022 0220 	bic.w	r2, r2, #32
 800e216:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	68da      	ldr	r2, [r3, #12]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e226:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	695a      	ldr	r2, [r3, #20]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f022 0201 	bic.w	r2, r2, #1
 800e236:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2220      	movs	r2, #32
 800e23c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f7ff fe3d 	bl	800dec0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800e246:	2300      	movs	r3, #0
 800e248:	e002      	b.n	800e250 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800e24a:	2300      	movs	r3, #0
 800e24c:	e000      	b.n	800e250 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800e24e:	2302      	movs	r3, #2
  }
}
 800e250:	4618      	mov	r0, r3
 800e252:	3710      	adds	r7, #16
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e25c:	b0bd      	sub	sp, #244	; 0xf4
 800e25e:	af00      	add	r7, sp, #0
 800e260:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	691b      	ldr	r3, [r3, #16]
 800e26c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e274:	68d9      	ldr	r1, [r3, #12]
 800e276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	ea40 0301 	orr.w	r3, r0, r1
 800e280:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e286:	689a      	ldr	r2, [r3, #8]
 800e288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e28c:	691b      	ldr	r3, [r3, #16]
 800e28e:	431a      	orrs	r2, r3
 800e290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e294:	695b      	ldr	r3, [r3, #20]
 800e296:	431a      	orrs	r2, r3
 800e298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e29c:	69db      	ldr	r3, [r3, #28]
 800e29e:	4313      	orrs	r3, r2
 800e2a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800e2a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	68db      	ldr	r3, [r3, #12]
 800e2ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e2b0:	f021 010c 	bic.w	r1, r1, #12
 800e2b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e2be:	430b      	orrs	r3, r1
 800e2c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e2c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	695b      	ldr	r3, [r3, #20]
 800e2ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e2ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2d2:	6999      	ldr	r1, [r3, #24]
 800e2d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	ea40 0301 	orr.w	r3, r0, r1
 800e2de:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e2e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2e4:	69db      	ldr	r3, [r3, #28]
 800e2e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2ea:	f040 81a5 	bne.w	800e638 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e2ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2f2:	681a      	ldr	r2, [r3, #0]
 800e2f4:	4bcd      	ldr	r3, [pc, #820]	; (800e62c <UART_SetConfig+0x3d4>)
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d006      	beq.n	800e308 <UART_SetConfig+0xb0>
 800e2fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2fe:	681a      	ldr	r2, [r3, #0]
 800e300:	4bcb      	ldr	r3, [pc, #812]	; (800e630 <UART_SetConfig+0x3d8>)
 800e302:	429a      	cmp	r2, r3
 800e304:	f040 80cb 	bne.w	800e49e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e308:	f7fe ffc2 	bl	800d290 <HAL_RCC_GetPCLK2Freq>
 800e30c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e310:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e314:	461c      	mov	r4, r3
 800e316:	f04f 0500 	mov.w	r5, #0
 800e31a:	4622      	mov	r2, r4
 800e31c:	462b      	mov	r3, r5
 800e31e:	1891      	adds	r1, r2, r2
 800e320:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800e324:	415b      	adcs	r3, r3
 800e326:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e32a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800e32e:	1912      	adds	r2, r2, r4
 800e330:	eb45 0303 	adc.w	r3, r5, r3
 800e334:	f04f 0000 	mov.w	r0, #0
 800e338:	f04f 0100 	mov.w	r1, #0
 800e33c:	00d9      	lsls	r1, r3, #3
 800e33e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e342:	00d0      	lsls	r0, r2, #3
 800e344:	4602      	mov	r2, r0
 800e346:	460b      	mov	r3, r1
 800e348:	1911      	adds	r1, r2, r4
 800e34a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800e34e:	416b      	adcs	r3, r5
 800e350:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	461a      	mov	r2, r3
 800e35c:	f04f 0300 	mov.w	r3, #0
 800e360:	1891      	adds	r1, r2, r2
 800e362:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800e366:	415b      	adcs	r3, r3
 800e368:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e36c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800e370:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800e374:	f7f2 fc88 	bl	8000c88 <__aeabi_uldivmod>
 800e378:	4602      	mov	r2, r0
 800e37a:	460b      	mov	r3, r1
 800e37c:	4bad      	ldr	r3, [pc, #692]	; (800e634 <UART_SetConfig+0x3dc>)
 800e37e:	fba3 2302 	umull	r2, r3, r3, r2
 800e382:	095b      	lsrs	r3, r3, #5
 800e384:	011e      	lsls	r6, r3, #4
 800e386:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e38a:	461c      	mov	r4, r3
 800e38c:	f04f 0500 	mov.w	r5, #0
 800e390:	4622      	mov	r2, r4
 800e392:	462b      	mov	r3, r5
 800e394:	1891      	adds	r1, r2, r2
 800e396:	67b9      	str	r1, [r7, #120]	; 0x78
 800e398:	415b      	adcs	r3, r3
 800e39a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e39c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800e3a0:	1912      	adds	r2, r2, r4
 800e3a2:	eb45 0303 	adc.w	r3, r5, r3
 800e3a6:	f04f 0000 	mov.w	r0, #0
 800e3aa:	f04f 0100 	mov.w	r1, #0
 800e3ae:	00d9      	lsls	r1, r3, #3
 800e3b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e3b4:	00d0      	lsls	r0, r2, #3
 800e3b6:	4602      	mov	r2, r0
 800e3b8:	460b      	mov	r3, r1
 800e3ba:	1911      	adds	r1, r2, r4
 800e3bc:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800e3c0:	416b      	adcs	r3, r5
 800e3c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e3c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3ca:	685b      	ldr	r3, [r3, #4]
 800e3cc:	461a      	mov	r2, r3
 800e3ce:	f04f 0300 	mov.w	r3, #0
 800e3d2:	1891      	adds	r1, r2, r2
 800e3d4:	6739      	str	r1, [r7, #112]	; 0x70
 800e3d6:	415b      	adcs	r3, r3
 800e3d8:	677b      	str	r3, [r7, #116]	; 0x74
 800e3da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800e3de:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800e3e2:	f7f2 fc51 	bl	8000c88 <__aeabi_uldivmod>
 800e3e6:	4602      	mov	r2, r0
 800e3e8:	460b      	mov	r3, r1
 800e3ea:	4b92      	ldr	r3, [pc, #584]	; (800e634 <UART_SetConfig+0x3dc>)
 800e3ec:	fba3 1302 	umull	r1, r3, r3, r2
 800e3f0:	095b      	lsrs	r3, r3, #5
 800e3f2:	2164      	movs	r1, #100	; 0x64
 800e3f4:	fb01 f303 	mul.w	r3, r1, r3
 800e3f8:	1ad3      	subs	r3, r2, r3
 800e3fa:	00db      	lsls	r3, r3, #3
 800e3fc:	3332      	adds	r3, #50	; 0x32
 800e3fe:	4a8d      	ldr	r2, [pc, #564]	; (800e634 <UART_SetConfig+0x3dc>)
 800e400:	fba2 2303 	umull	r2, r3, r2, r3
 800e404:	095b      	lsrs	r3, r3, #5
 800e406:	005b      	lsls	r3, r3, #1
 800e408:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e40c:	441e      	add	r6, r3
 800e40e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e412:	4618      	mov	r0, r3
 800e414:	f04f 0100 	mov.w	r1, #0
 800e418:	4602      	mov	r2, r0
 800e41a:	460b      	mov	r3, r1
 800e41c:	1894      	adds	r4, r2, r2
 800e41e:	66bc      	str	r4, [r7, #104]	; 0x68
 800e420:	415b      	adcs	r3, r3
 800e422:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e424:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e428:	1812      	adds	r2, r2, r0
 800e42a:	eb41 0303 	adc.w	r3, r1, r3
 800e42e:	f04f 0400 	mov.w	r4, #0
 800e432:	f04f 0500 	mov.w	r5, #0
 800e436:	00dd      	lsls	r5, r3, #3
 800e438:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e43c:	00d4      	lsls	r4, r2, #3
 800e43e:	4622      	mov	r2, r4
 800e440:	462b      	mov	r3, r5
 800e442:	1814      	adds	r4, r2, r0
 800e444:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800e448:	414b      	adcs	r3, r1
 800e44a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e44e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e452:	685b      	ldr	r3, [r3, #4]
 800e454:	461a      	mov	r2, r3
 800e456:	f04f 0300 	mov.w	r3, #0
 800e45a:	1891      	adds	r1, r2, r2
 800e45c:	6639      	str	r1, [r7, #96]	; 0x60
 800e45e:	415b      	adcs	r3, r3
 800e460:	667b      	str	r3, [r7, #100]	; 0x64
 800e462:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800e466:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e46a:	f7f2 fc0d 	bl	8000c88 <__aeabi_uldivmod>
 800e46e:	4602      	mov	r2, r0
 800e470:	460b      	mov	r3, r1
 800e472:	4b70      	ldr	r3, [pc, #448]	; (800e634 <UART_SetConfig+0x3dc>)
 800e474:	fba3 1302 	umull	r1, r3, r3, r2
 800e478:	095b      	lsrs	r3, r3, #5
 800e47a:	2164      	movs	r1, #100	; 0x64
 800e47c:	fb01 f303 	mul.w	r3, r1, r3
 800e480:	1ad3      	subs	r3, r2, r3
 800e482:	00db      	lsls	r3, r3, #3
 800e484:	3332      	adds	r3, #50	; 0x32
 800e486:	4a6b      	ldr	r2, [pc, #428]	; (800e634 <UART_SetConfig+0x3dc>)
 800e488:	fba2 2303 	umull	r2, r3, r2, r3
 800e48c:	095b      	lsrs	r3, r3, #5
 800e48e:	f003 0207 	and.w	r2, r3, #7
 800e492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	4432      	add	r2, r6
 800e49a:	609a      	str	r2, [r3, #8]
 800e49c:	e26d      	b.n	800e97a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e49e:	f7fe fee3 	bl	800d268 <HAL_RCC_GetPCLK1Freq>
 800e4a2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e4a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e4aa:	461c      	mov	r4, r3
 800e4ac:	f04f 0500 	mov.w	r5, #0
 800e4b0:	4622      	mov	r2, r4
 800e4b2:	462b      	mov	r3, r5
 800e4b4:	1891      	adds	r1, r2, r2
 800e4b6:	65b9      	str	r1, [r7, #88]	; 0x58
 800e4b8:	415b      	adcs	r3, r3
 800e4ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e4bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e4c0:	1912      	adds	r2, r2, r4
 800e4c2:	eb45 0303 	adc.w	r3, r5, r3
 800e4c6:	f04f 0000 	mov.w	r0, #0
 800e4ca:	f04f 0100 	mov.w	r1, #0
 800e4ce:	00d9      	lsls	r1, r3, #3
 800e4d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e4d4:	00d0      	lsls	r0, r2, #3
 800e4d6:	4602      	mov	r2, r0
 800e4d8:	460b      	mov	r3, r1
 800e4da:	1911      	adds	r1, r2, r4
 800e4dc:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800e4e0:	416b      	adcs	r3, r5
 800e4e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e4e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4ea:	685b      	ldr	r3, [r3, #4]
 800e4ec:	461a      	mov	r2, r3
 800e4ee:	f04f 0300 	mov.w	r3, #0
 800e4f2:	1891      	adds	r1, r2, r2
 800e4f4:	6539      	str	r1, [r7, #80]	; 0x50
 800e4f6:	415b      	adcs	r3, r3
 800e4f8:	657b      	str	r3, [r7, #84]	; 0x54
 800e4fa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e4fe:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800e502:	f7f2 fbc1 	bl	8000c88 <__aeabi_uldivmod>
 800e506:	4602      	mov	r2, r0
 800e508:	460b      	mov	r3, r1
 800e50a:	4b4a      	ldr	r3, [pc, #296]	; (800e634 <UART_SetConfig+0x3dc>)
 800e50c:	fba3 2302 	umull	r2, r3, r3, r2
 800e510:	095b      	lsrs	r3, r3, #5
 800e512:	011e      	lsls	r6, r3, #4
 800e514:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e518:	461c      	mov	r4, r3
 800e51a:	f04f 0500 	mov.w	r5, #0
 800e51e:	4622      	mov	r2, r4
 800e520:	462b      	mov	r3, r5
 800e522:	1891      	adds	r1, r2, r2
 800e524:	64b9      	str	r1, [r7, #72]	; 0x48
 800e526:	415b      	adcs	r3, r3
 800e528:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e52a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e52e:	1912      	adds	r2, r2, r4
 800e530:	eb45 0303 	adc.w	r3, r5, r3
 800e534:	f04f 0000 	mov.w	r0, #0
 800e538:	f04f 0100 	mov.w	r1, #0
 800e53c:	00d9      	lsls	r1, r3, #3
 800e53e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e542:	00d0      	lsls	r0, r2, #3
 800e544:	4602      	mov	r2, r0
 800e546:	460b      	mov	r3, r1
 800e548:	1911      	adds	r1, r2, r4
 800e54a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800e54e:	416b      	adcs	r3, r5
 800e550:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e558:	685b      	ldr	r3, [r3, #4]
 800e55a:	461a      	mov	r2, r3
 800e55c:	f04f 0300 	mov.w	r3, #0
 800e560:	1891      	adds	r1, r2, r2
 800e562:	6439      	str	r1, [r7, #64]	; 0x40
 800e564:	415b      	adcs	r3, r3
 800e566:	647b      	str	r3, [r7, #68]	; 0x44
 800e568:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e56c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800e570:	f7f2 fb8a 	bl	8000c88 <__aeabi_uldivmod>
 800e574:	4602      	mov	r2, r0
 800e576:	460b      	mov	r3, r1
 800e578:	4b2e      	ldr	r3, [pc, #184]	; (800e634 <UART_SetConfig+0x3dc>)
 800e57a:	fba3 1302 	umull	r1, r3, r3, r2
 800e57e:	095b      	lsrs	r3, r3, #5
 800e580:	2164      	movs	r1, #100	; 0x64
 800e582:	fb01 f303 	mul.w	r3, r1, r3
 800e586:	1ad3      	subs	r3, r2, r3
 800e588:	00db      	lsls	r3, r3, #3
 800e58a:	3332      	adds	r3, #50	; 0x32
 800e58c:	4a29      	ldr	r2, [pc, #164]	; (800e634 <UART_SetConfig+0x3dc>)
 800e58e:	fba2 2303 	umull	r2, r3, r2, r3
 800e592:	095b      	lsrs	r3, r3, #5
 800e594:	005b      	lsls	r3, r3, #1
 800e596:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e59a:	441e      	add	r6, r3
 800e59c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f04f 0100 	mov.w	r1, #0
 800e5a6:	4602      	mov	r2, r0
 800e5a8:	460b      	mov	r3, r1
 800e5aa:	1894      	adds	r4, r2, r2
 800e5ac:	63bc      	str	r4, [r7, #56]	; 0x38
 800e5ae:	415b      	adcs	r3, r3
 800e5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5b2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e5b6:	1812      	adds	r2, r2, r0
 800e5b8:	eb41 0303 	adc.w	r3, r1, r3
 800e5bc:	f04f 0400 	mov.w	r4, #0
 800e5c0:	f04f 0500 	mov.w	r5, #0
 800e5c4:	00dd      	lsls	r5, r3, #3
 800e5c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e5ca:	00d4      	lsls	r4, r2, #3
 800e5cc:	4622      	mov	r2, r4
 800e5ce:	462b      	mov	r3, r5
 800e5d0:	1814      	adds	r4, r2, r0
 800e5d2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800e5d6:	414b      	adcs	r3, r1
 800e5d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e5dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	f04f 0300 	mov.w	r3, #0
 800e5e8:	1891      	adds	r1, r2, r2
 800e5ea:	6339      	str	r1, [r7, #48]	; 0x30
 800e5ec:	415b      	adcs	r3, r3
 800e5ee:	637b      	str	r3, [r7, #52]	; 0x34
 800e5f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e5f4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800e5f8:	f7f2 fb46 	bl	8000c88 <__aeabi_uldivmod>
 800e5fc:	4602      	mov	r2, r0
 800e5fe:	460b      	mov	r3, r1
 800e600:	4b0c      	ldr	r3, [pc, #48]	; (800e634 <UART_SetConfig+0x3dc>)
 800e602:	fba3 1302 	umull	r1, r3, r3, r2
 800e606:	095b      	lsrs	r3, r3, #5
 800e608:	2164      	movs	r1, #100	; 0x64
 800e60a:	fb01 f303 	mul.w	r3, r1, r3
 800e60e:	1ad3      	subs	r3, r2, r3
 800e610:	00db      	lsls	r3, r3, #3
 800e612:	3332      	adds	r3, #50	; 0x32
 800e614:	4a07      	ldr	r2, [pc, #28]	; (800e634 <UART_SetConfig+0x3dc>)
 800e616:	fba2 2303 	umull	r2, r3, r2, r3
 800e61a:	095b      	lsrs	r3, r3, #5
 800e61c:	f003 0207 	and.w	r2, r3, #7
 800e620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	4432      	add	r2, r6
 800e628:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800e62a:	e1a6      	b.n	800e97a <UART_SetConfig+0x722>
 800e62c:	40011000 	.word	0x40011000
 800e630:	40011400 	.word	0x40011400
 800e634:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e63c:	681a      	ldr	r2, [r3, #0]
 800e63e:	4bd1      	ldr	r3, [pc, #836]	; (800e984 <UART_SetConfig+0x72c>)
 800e640:	429a      	cmp	r2, r3
 800e642:	d006      	beq.n	800e652 <UART_SetConfig+0x3fa>
 800e644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e648:	681a      	ldr	r2, [r3, #0]
 800e64a:	4bcf      	ldr	r3, [pc, #828]	; (800e988 <UART_SetConfig+0x730>)
 800e64c:	429a      	cmp	r2, r3
 800e64e:	f040 80ca 	bne.w	800e7e6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800e652:	f7fe fe1d 	bl	800d290 <HAL_RCC_GetPCLK2Freq>
 800e656:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e65a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e65e:	461c      	mov	r4, r3
 800e660:	f04f 0500 	mov.w	r5, #0
 800e664:	4622      	mov	r2, r4
 800e666:	462b      	mov	r3, r5
 800e668:	1891      	adds	r1, r2, r2
 800e66a:	62b9      	str	r1, [r7, #40]	; 0x28
 800e66c:	415b      	adcs	r3, r3
 800e66e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e670:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e674:	1912      	adds	r2, r2, r4
 800e676:	eb45 0303 	adc.w	r3, r5, r3
 800e67a:	f04f 0000 	mov.w	r0, #0
 800e67e:	f04f 0100 	mov.w	r1, #0
 800e682:	00d9      	lsls	r1, r3, #3
 800e684:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e688:	00d0      	lsls	r0, r2, #3
 800e68a:	4602      	mov	r2, r0
 800e68c:	460b      	mov	r3, r1
 800e68e:	eb12 0a04 	adds.w	sl, r2, r4
 800e692:	eb43 0b05 	adc.w	fp, r3, r5
 800e696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	4618      	mov	r0, r3
 800e69e:	f04f 0100 	mov.w	r1, #0
 800e6a2:	f04f 0200 	mov.w	r2, #0
 800e6a6:	f04f 0300 	mov.w	r3, #0
 800e6aa:	008b      	lsls	r3, r1, #2
 800e6ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e6b0:	0082      	lsls	r2, r0, #2
 800e6b2:	4650      	mov	r0, sl
 800e6b4:	4659      	mov	r1, fp
 800e6b6:	f7f2 fae7 	bl	8000c88 <__aeabi_uldivmod>
 800e6ba:	4602      	mov	r2, r0
 800e6bc:	460b      	mov	r3, r1
 800e6be:	4bb3      	ldr	r3, [pc, #716]	; (800e98c <UART_SetConfig+0x734>)
 800e6c0:	fba3 2302 	umull	r2, r3, r3, r2
 800e6c4:	095b      	lsrs	r3, r3, #5
 800e6c6:	011e      	lsls	r6, r3, #4
 800e6c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f04f 0100 	mov.w	r1, #0
 800e6d2:	4602      	mov	r2, r0
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	1894      	adds	r4, r2, r2
 800e6d8:	623c      	str	r4, [r7, #32]
 800e6da:	415b      	adcs	r3, r3
 800e6dc:	627b      	str	r3, [r7, #36]	; 0x24
 800e6de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e6e2:	1812      	adds	r2, r2, r0
 800e6e4:	eb41 0303 	adc.w	r3, r1, r3
 800e6e8:	f04f 0400 	mov.w	r4, #0
 800e6ec:	f04f 0500 	mov.w	r5, #0
 800e6f0:	00dd      	lsls	r5, r3, #3
 800e6f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e6f6:	00d4      	lsls	r4, r2, #3
 800e6f8:	4622      	mov	r2, r4
 800e6fa:	462b      	mov	r3, r5
 800e6fc:	1814      	adds	r4, r2, r0
 800e6fe:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800e702:	414b      	adcs	r3, r1
 800e704:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e70c:	685b      	ldr	r3, [r3, #4]
 800e70e:	4618      	mov	r0, r3
 800e710:	f04f 0100 	mov.w	r1, #0
 800e714:	f04f 0200 	mov.w	r2, #0
 800e718:	f04f 0300 	mov.w	r3, #0
 800e71c:	008b      	lsls	r3, r1, #2
 800e71e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e722:	0082      	lsls	r2, r0, #2
 800e724:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800e728:	f7f2 faae 	bl	8000c88 <__aeabi_uldivmod>
 800e72c:	4602      	mov	r2, r0
 800e72e:	460b      	mov	r3, r1
 800e730:	4b96      	ldr	r3, [pc, #600]	; (800e98c <UART_SetConfig+0x734>)
 800e732:	fba3 1302 	umull	r1, r3, r3, r2
 800e736:	095b      	lsrs	r3, r3, #5
 800e738:	2164      	movs	r1, #100	; 0x64
 800e73a:	fb01 f303 	mul.w	r3, r1, r3
 800e73e:	1ad3      	subs	r3, r2, r3
 800e740:	011b      	lsls	r3, r3, #4
 800e742:	3332      	adds	r3, #50	; 0x32
 800e744:	4a91      	ldr	r2, [pc, #580]	; (800e98c <UART_SetConfig+0x734>)
 800e746:	fba2 2303 	umull	r2, r3, r2, r3
 800e74a:	095b      	lsrs	r3, r3, #5
 800e74c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e750:	441e      	add	r6, r3
 800e752:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e756:	4618      	mov	r0, r3
 800e758:	f04f 0100 	mov.w	r1, #0
 800e75c:	4602      	mov	r2, r0
 800e75e:	460b      	mov	r3, r1
 800e760:	1894      	adds	r4, r2, r2
 800e762:	61bc      	str	r4, [r7, #24]
 800e764:	415b      	adcs	r3, r3
 800e766:	61fb      	str	r3, [r7, #28]
 800e768:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e76c:	1812      	adds	r2, r2, r0
 800e76e:	eb41 0303 	adc.w	r3, r1, r3
 800e772:	f04f 0400 	mov.w	r4, #0
 800e776:	f04f 0500 	mov.w	r5, #0
 800e77a:	00dd      	lsls	r5, r3, #3
 800e77c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e780:	00d4      	lsls	r4, r2, #3
 800e782:	4622      	mov	r2, r4
 800e784:	462b      	mov	r3, r5
 800e786:	1814      	adds	r4, r2, r0
 800e788:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800e78c:	414b      	adcs	r3, r1
 800e78e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e796:	685b      	ldr	r3, [r3, #4]
 800e798:	4618      	mov	r0, r3
 800e79a:	f04f 0100 	mov.w	r1, #0
 800e79e:	f04f 0200 	mov.w	r2, #0
 800e7a2:	f04f 0300 	mov.w	r3, #0
 800e7a6:	008b      	lsls	r3, r1, #2
 800e7a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e7ac:	0082      	lsls	r2, r0, #2
 800e7ae:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800e7b2:	f7f2 fa69 	bl	8000c88 <__aeabi_uldivmod>
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	4b74      	ldr	r3, [pc, #464]	; (800e98c <UART_SetConfig+0x734>)
 800e7bc:	fba3 1302 	umull	r1, r3, r3, r2
 800e7c0:	095b      	lsrs	r3, r3, #5
 800e7c2:	2164      	movs	r1, #100	; 0x64
 800e7c4:	fb01 f303 	mul.w	r3, r1, r3
 800e7c8:	1ad3      	subs	r3, r2, r3
 800e7ca:	011b      	lsls	r3, r3, #4
 800e7cc:	3332      	adds	r3, #50	; 0x32
 800e7ce:	4a6f      	ldr	r2, [pc, #444]	; (800e98c <UART_SetConfig+0x734>)
 800e7d0:	fba2 2303 	umull	r2, r3, r2, r3
 800e7d4:	095b      	lsrs	r3, r3, #5
 800e7d6:	f003 020f 	and.w	r2, r3, #15
 800e7da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	4432      	add	r2, r6
 800e7e2:	609a      	str	r2, [r3, #8]
 800e7e4:	e0c9      	b.n	800e97a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800e7e6:	f7fe fd3f 	bl	800d268 <HAL_RCC_GetPCLK1Freq>
 800e7ea:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e7ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e7f2:	461c      	mov	r4, r3
 800e7f4:	f04f 0500 	mov.w	r5, #0
 800e7f8:	4622      	mov	r2, r4
 800e7fa:	462b      	mov	r3, r5
 800e7fc:	1891      	adds	r1, r2, r2
 800e7fe:	6139      	str	r1, [r7, #16]
 800e800:	415b      	adcs	r3, r3
 800e802:	617b      	str	r3, [r7, #20]
 800e804:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e808:	1912      	adds	r2, r2, r4
 800e80a:	eb45 0303 	adc.w	r3, r5, r3
 800e80e:	f04f 0000 	mov.w	r0, #0
 800e812:	f04f 0100 	mov.w	r1, #0
 800e816:	00d9      	lsls	r1, r3, #3
 800e818:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e81c:	00d0      	lsls	r0, r2, #3
 800e81e:	4602      	mov	r2, r0
 800e820:	460b      	mov	r3, r1
 800e822:	eb12 0804 	adds.w	r8, r2, r4
 800e826:	eb43 0905 	adc.w	r9, r3, r5
 800e82a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e82e:	685b      	ldr	r3, [r3, #4]
 800e830:	4618      	mov	r0, r3
 800e832:	f04f 0100 	mov.w	r1, #0
 800e836:	f04f 0200 	mov.w	r2, #0
 800e83a:	f04f 0300 	mov.w	r3, #0
 800e83e:	008b      	lsls	r3, r1, #2
 800e840:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e844:	0082      	lsls	r2, r0, #2
 800e846:	4640      	mov	r0, r8
 800e848:	4649      	mov	r1, r9
 800e84a:	f7f2 fa1d 	bl	8000c88 <__aeabi_uldivmod>
 800e84e:	4602      	mov	r2, r0
 800e850:	460b      	mov	r3, r1
 800e852:	4b4e      	ldr	r3, [pc, #312]	; (800e98c <UART_SetConfig+0x734>)
 800e854:	fba3 2302 	umull	r2, r3, r3, r2
 800e858:	095b      	lsrs	r3, r3, #5
 800e85a:	011e      	lsls	r6, r3, #4
 800e85c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e860:	4618      	mov	r0, r3
 800e862:	f04f 0100 	mov.w	r1, #0
 800e866:	4602      	mov	r2, r0
 800e868:	460b      	mov	r3, r1
 800e86a:	1894      	adds	r4, r2, r2
 800e86c:	60bc      	str	r4, [r7, #8]
 800e86e:	415b      	adcs	r3, r3
 800e870:	60fb      	str	r3, [r7, #12]
 800e872:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e876:	1812      	adds	r2, r2, r0
 800e878:	eb41 0303 	adc.w	r3, r1, r3
 800e87c:	f04f 0400 	mov.w	r4, #0
 800e880:	f04f 0500 	mov.w	r5, #0
 800e884:	00dd      	lsls	r5, r3, #3
 800e886:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e88a:	00d4      	lsls	r4, r2, #3
 800e88c:	4622      	mov	r2, r4
 800e88e:	462b      	mov	r3, r5
 800e890:	1814      	adds	r4, r2, r0
 800e892:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800e896:	414b      	adcs	r3, r1
 800e898:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e89c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f04f 0100 	mov.w	r1, #0
 800e8a8:	f04f 0200 	mov.w	r2, #0
 800e8ac:	f04f 0300 	mov.w	r3, #0
 800e8b0:	008b      	lsls	r3, r1, #2
 800e8b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e8b6:	0082      	lsls	r2, r0, #2
 800e8b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800e8bc:	f7f2 f9e4 	bl	8000c88 <__aeabi_uldivmod>
 800e8c0:	4602      	mov	r2, r0
 800e8c2:	460b      	mov	r3, r1
 800e8c4:	4b31      	ldr	r3, [pc, #196]	; (800e98c <UART_SetConfig+0x734>)
 800e8c6:	fba3 1302 	umull	r1, r3, r3, r2
 800e8ca:	095b      	lsrs	r3, r3, #5
 800e8cc:	2164      	movs	r1, #100	; 0x64
 800e8ce:	fb01 f303 	mul.w	r3, r1, r3
 800e8d2:	1ad3      	subs	r3, r2, r3
 800e8d4:	011b      	lsls	r3, r3, #4
 800e8d6:	3332      	adds	r3, #50	; 0x32
 800e8d8:	4a2c      	ldr	r2, [pc, #176]	; (800e98c <UART_SetConfig+0x734>)
 800e8da:	fba2 2303 	umull	r2, r3, r2, r3
 800e8de:	095b      	lsrs	r3, r3, #5
 800e8e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e8e4:	441e      	add	r6, r3
 800e8e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f04f 0100 	mov.w	r1, #0
 800e8f0:	4602      	mov	r2, r0
 800e8f2:	460b      	mov	r3, r1
 800e8f4:	1894      	adds	r4, r2, r2
 800e8f6:	603c      	str	r4, [r7, #0]
 800e8f8:	415b      	adcs	r3, r3
 800e8fa:	607b      	str	r3, [r7, #4]
 800e8fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e900:	1812      	adds	r2, r2, r0
 800e902:	eb41 0303 	adc.w	r3, r1, r3
 800e906:	f04f 0400 	mov.w	r4, #0
 800e90a:	f04f 0500 	mov.w	r5, #0
 800e90e:	00dd      	lsls	r5, r3, #3
 800e910:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e914:	00d4      	lsls	r4, r2, #3
 800e916:	4622      	mov	r2, r4
 800e918:	462b      	mov	r3, r5
 800e91a:	1814      	adds	r4, r2, r0
 800e91c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800e920:	414b      	adcs	r3, r1
 800e922:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e92a:	685b      	ldr	r3, [r3, #4]
 800e92c:	4618      	mov	r0, r3
 800e92e:	f04f 0100 	mov.w	r1, #0
 800e932:	f04f 0200 	mov.w	r2, #0
 800e936:	f04f 0300 	mov.w	r3, #0
 800e93a:	008b      	lsls	r3, r1, #2
 800e93c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e940:	0082      	lsls	r2, r0, #2
 800e942:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800e946:	f7f2 f99f 	bl	8000c88 <__aeabi_uldivmod>
 800e94a:	4602      	mov	r2, r0
 800e94c:	460b      	mov	r3, r1
 800e94e:	4b0f      	ldr	r3, [pc, #60]	; (800e98c <UART_SetConfig+0x734>)
 800e950:	fba3 1302 	umull	r1, r3, r3, r2
 800e954:	095b      	lsrs	r3, r3, #5
 800e956:	2164      	movs	r1, #100	; 0x64
 800e958:	fb01 f303 	mul.w	r3, r1, r3
 800e95c:	1ad3      	subs	r3, r2, r3
 800e95e:	011b      	lsls	r3, r3, #4
 800e960:	3332      	adds	r3, #50	; 0x32
 800e962:	4a0a      	ldr	r2, [pc, #40]	; (800e98c <UART_SetConfig+0x734>)
 800e964:	fba2 2303 	umull	r2, r3, r2, r3
 800e968:	095b      	lsrs	r3, r3, #5
 800e96a:	f003 020f 	and.w	r2, r3, #15
 800e96e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	4432      	add	r2, r6
 800e976:	609a      	str	r2, [r3, #8]
}
 800e978:	e7ff      	b.n	800e97a <UART_SetConfig+0x722>
 800e97a:	bf00      	nop
 800e97c:	37f4      	adds	r7, #244	; 0xf4
 800e97e:	46bd      	mov	sp, r7
 800e980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e984:	40011000 	.word	0x40011000
 800e988:	40011400 	.word	0x40011400
 800e98c:	51eb851f 	.word	0x51eb851f

0800e990 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800e990:	b480      	push	{r7}
 800e992:	b085      	sub	sp, #20
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800e99a:	2300      	movs	r3, #0
 800e99c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	681a      	ldr	r2, [r3, #0]
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9a8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800e9aa:	68fa      	ldr	r2, [r7, #12]
 800e9ac:	4b20      	ldr	r3, [pc, #128]	; (800ea30 <FSMC_NORSRAM_Init+0xa0>)
 800e9ae:	4013      	ands	r3, r2
 800e9b0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800e9ba:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800e9c0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800e9c6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800e9cc:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800e9d2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800e9d8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800e9de:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800e9e4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800e9ea:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800e9f0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800e9f6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800e9fc:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800e9fe:	68fa      	ldr	r2, [r7, #12]
 800ea00:	4313      	orrs	r3, r2
 800ea02:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	689b      	ldr	r3, [r3, #8]
 800ea08:	2b08      	cmp	r3, #8
 800ea0a:	d103      	bne.n	800ea14 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea12:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	681a      	ldr	r2, [r3, #0]
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	68f9      	ldr	r1, [r7, #12]
 800ea1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800ea20:	2300      	movs	r3, #0
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3714      	adds	r7, #20
 800ea26:	46bd      	mov	sp, r7
 800ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2c:	4770      	bx	lr
 800ea2e:	bf00      	nop
 800ea30:	fff00080 	.word	0xfff00080

0800ea34 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b087      	sub	sp, #28
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	60f8      	str	r0, [r7, #12]
 800ea3c:	60b9      	str	r1, [r7, #8]
 800ea3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800ea40:	2300      	movs	r3, #0
 800ea42:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	1c5a      	adds	r2, r3, #1
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea4e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800ea56:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	685b      	ldr	r3, [r3, #4]
 800ea60:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ea62:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	689b      	ldr	r3, [r3, #8]
 800ea68:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800ea6a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	68db      	ldr	r3, [r3, #12]
 800ea70:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800ea72:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	691b      	ldr	r3, [r3, #16]
 800ea78:	3b01      	subs	r3, #1
 800ea7a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ea7c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	695b      	ldr	r3, [r3, #20]
 800ea82:	3b02      	subs	r3, #2
 800ea84:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800ea86:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ea8c:	4313      	orrs	r3, r2
 800ea8e:	697a      	ldr	r2, [r7, #20]
 800ea90:	4313      	orrs	r3, r2
 800ea92:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	1c5a      	adds	r2, r3, #1
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	6979      	ldr	r1, [r7, #20]
 800ea9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800eaa0:	2300      	movs	r3, #0
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	371c      	adds	r7, #28
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaac:	4770      	bx	lr
	...

0800eab0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800eab0:	b480      	push	{r7}
 800eab2:	b087      	sub	sp, #28
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	60f8      	str	r0, [r7, #12]
 800eab8:	60b9      	str	r1, [r7, #8]
 800eaba:	607a      	str	r2, [r7, #4]
 800eabc:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800eabe:	2300      	movs	r3, #0
 800eac0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eac8:	d122      	bne.n	800eb10 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	687a      	ldr	r2, [r7, #4]
 800eace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ead2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800ead4:	697a      	ldr	r2, [r7, #20]
 800ead6:	4b15      	ldr	r3, [pc, #84]	; (800eb2c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800ead8:	4013      	ands	r3, r2
 800eada:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	685b      	ldr	r3, [r3, #4]
 800eae4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800eae6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	689b      	ldr	r3, [r3, #8]
 800eaec:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800eaee:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	68db      	ldr	r3, [r3, #12]
 800eaf4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800eaf6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800eafc:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800eafe:	697a      	ldr	r2, [r7, #20]
 800eb00:	4313      	orrs	r3, r2
 800eb02:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	6979      	ldr	r1, [r7, #20]
 800eb0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800eb0e:	e005      	b.n	800eb1c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	687a      	ldr	r2, [r7, #4]
 800eb14:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800eb18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800eb1c:	2300      	movs	r3, #0
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	371c      	adds	r7, #28
 800eb22:	46bd      	mov	sp, r7
 800eb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb28:	4770      	bx	lr
 800eb2a:	bf00      	nop
 800eb2c:	cff00000 	.word	0xcff00000

0800eb30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eb30:	b084      	sub	sp, #16
 800eb32:	b580      	push	{r7, lr}
 800eb34:	b084      	sub	sp, #16
 800eb36:	af00      	add	r7, sp, #0
 800eb38:	6078      	str	r0, [r7, #4]
 800eb3a:	f107 001c 	add.w	r0, r7, #28
 800eb3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	d122      	bne.n	800eb8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800eb5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb60:	687a      	ldr	r2, [r7, #4]
 800eb62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	68db      	ldr	r3, [r3, #12]
 800eb68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800eb70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb72:	2b01      	cmp	r3, #1
 800eb74:	d105      	bne.n	800eb82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	68db      	ldr	r3, [r3, #12]
 800eb7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f001 fac6 	bl	8010114 <USB_CoreReset>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	73fb      	strb	r3, [r7, #15]
 800eb8c:	e01a      	b.n	800ebc4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	68db      	ldr	r3, [r3, #12]
 800eb92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f001 faba 	bl	8010114 <USB_CoreReset>
 800eba0:	4603      	mov	r3, r0
 800eba2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800eba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d106      	bne.n	800ebb8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	639a      	str	r2, [r3, #56]	; 0x38
 800ebb6:	e005      	b.n	800ebc4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ebc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc6:	2b01      	cmp	r3, #1
 800ebc8:	d10b      	bne.n	800ebe2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	689b      	ldr	r3, [r3, #8]
 800ebce:	f043 0206 	orr.w	r2, r3, #6
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	689b      	ldr	r3, [r3, #8]
 800ebda:	f043 0220 	orr.w	r2, r3, #32
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ebe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3710      	adds	r7, #16
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ebee:	b004      	add	sp, #16
 800ebf0:	4770      	bx	lr
	...

0800ebf4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b087      	sub	sp, #28
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	60f8      	str	r0, [r7, #12]
 800ebfc:	60b9      	str	r1, [r7, #8]
 800ebfe:	4613      	mov	r3, r2
 800ec00:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ec02:	79fb      	ldrb	r3, [r7, #7]
 800ec04:	2b02      	cmp	r3, #2
 800ec06:	d165      	bne.n	800ecd4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	4a41      	ldr	r2, [pc, #260]	; (800ed10 <USB_SetTurnaroundTime+0x11c>)
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	d906      	bls.n	800ec1e <USB_SetTurnaroundTime+0x2a>
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	4a40      	ldr	r2, [pc, #256]	; (800ed14 <USB_SetTurnaroundTime+0x120>)
 800ec14:	4293      	cmp	r3, r2
 800ec16:	d202      	bcs.n	800ec1e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ec18:	230f      	movs	r3, #15
 800ec1a:	617b      	str	r3, [r7, #20]
 800ec1c:	e062      	b.n	800ece4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ec1e:	68bb      	ldr	r3, [r7, #8]
 800ec20:	4a3c      	ldr	r2, [pc, #240]	; (800ed14 <USB_SetTurnaroundTime+0x120>)
 800ec22:	4293      	cmp	r3, r2
 800ec24:	d306      	bcc.n	800ec34 <USB_SetTurnaroundTime+0x40>
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	4a3b      	ldr	r2, [pc, #236]	; (800ed18 <USB_SetTurnaroundTime+0x124>)
 800ec2a:	4293      	cmp	r3, r2
 800ec2c:	d202      	bcs.n	800ec34 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ec2e:	230e      	movs	r3, #14
 800ec30:	617b      	str	r3, [r7, #20]
 800ec32:	e057      	b.n	800ece4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	4a38      	ldr	r2, [pc, #224]	; (800ed18 <USB_SetTurnaroundTime+0x124>)
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	d306      	bcc.n	800ec4a <USB_SetTurnaroundTime+0x56>
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	4a37      	ldr	r2, [pc, #220]	; (800ed1c <USB_SetTurnaroundTime+0x128>)
 800ec40:	4293      	cmp	r3, r2
 800ec42:	d202      	bcs.n	800ec4a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ec44:	230d      	movs	r3, #13
 800ec46:	617b      	str	r3, [r7, #20]
 800ec48:	e04c      	b.n	800ece4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	4a33      	ldr	r2, [pc, #204]	; (800ed1c <USB_SetTurnaroundTime+0x128>)
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	d306      	bcc.n	800ec60 <USB_SetTurnaroundTime+0x6c>
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	4a32      	ldr	r2, [pc, #200]	; (800ed20 <USB_SetTurnaroundTime+0x12c>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d802      	bhi.n	800ec60 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ec5a:	230c      	movs	r3, #12
 800ec5c:	617b      	str	r3, [r7, #20]
 800ec5e:	e041      	b.n	800ece4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	4a2f      	ldr	r2, [pc, #188]	; (800ed20 <USB_SetTurnaroundTime+0x12c>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d906      	bls.n	800ec76 <USB_SetTurnaroundTime+0x82>
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	4a2e      	ldr	r2, [pc, #184]	; (800ed24 <USB_SetTurnaroundTime+0x130>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d802      	bhi.n	800ec76 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ec70:	230b      	movs	r3, #11
 800ec72:	617b      	str	r3, [r7, #20]
 800ec74:	e036      	b.n	800ece4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	4a2a      	ldr	r2, [pc, #168]	; (800ed24 <USB_SetTurnaroundTime+0x130>)
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	d906      	bls.n	800ec8c <USB_SetTurnaroundTime+0x98>
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	4a29      	ldr	r2, [pc, #164]	; (800ed28 <USB_SetTurnaroundTime+0x134>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d802      	bhi.n	800ec8c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ec86:	230a      	movs	r3, #10
 800ec88:	617b      	str	r3, [r7, #20]
 800ec8a:	e02b      	b.n	800ece4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	4a26      	ldr	r2, [pc, #152]	; (800ed28 <USB_SetTurnaroundTime+0x134>)
 800ec90:	4293      	cmp	r3, r2
 800ec92:	d906      	bls.n	800eca2 <USB_SetTurnaroundTime+0xae>
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	4a25      	ldr	r2, [pc, #148]	; (800ed2c <USB_SetTurnaroundTime+0x138>)
 800ec98:	4293      	cmp	r3, r2
 800ec9a:	d202      	bcs.n	800eca2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ec9c:	2309      	movs	r3, #9
 800ec9e:	617b      	str	r3, [r7, #20]
 800eca0:	e020      	b.n	800ece4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	4a21      	ldr	r2, [pc, #132]	; (800ed2c <USB_SetTurnaroundTime+0x138>)
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d306      	bcc.n	800ecb8 <USB_SetTurnaroundTime+0xc4>
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	4a20      	ldr	r2, [pc, #128]	; (800ed30 <USB_SetTurnaroundTime+0x13c>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d802      	bhi.n	800ecb8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ecb2:	2308      	movs	r3, #8
 800ecb4:	617b      	str	r3, [r7, #20]
 800ecb6:	e015      	b.n	800ece4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	4a1d      	ldr	r2, [pc, #116]	; (800ed30 <USB_SetTurnaroundTime+0x13c>)
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	d906      	bls.n	800ecce <USB_SetTurnaroundTime+0xda>
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	4a1c      	ldr	r2, [pc, #112]	; (800ed34 <USB_SetTurnaroundTime+0x140>)
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	d202      	bcs.n	800ecce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ecc8:	2307      	movs	r3, #7
 800ecca:	617b      	str	r3, [r7, #20]
 800eccc:	e00a      	b.n	800ece4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ecce:	2306      	movs	r3, #6
 800ecd0:	617b      	str	r3, [r7, #20]
 800ecd2:	e007      	b.n	800ece4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ecd4:	79fb      	ldrb	r3, [r7, #7]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d102      	bne.n	800ece0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ecda:	2309      	movs	r3, #9
 800ecdc:	617b      	str	r3, [r7, #20]
 800ecde:	e001      	b.n	800ece4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ece0:	2309      	movs	r3, #9
 800ece2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	68db      	ldr	r3, [r3, #12]
 800ece8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	68da      	ldr	r2, [r3, #12]
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	029b      	lsls	r3, r3, #10
 800ecf8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ecfc:	431a      	orrs	r2, r3
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ed02:	2300      	movs	r3, #0
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	371c      	adds	r7, #28
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0e:	4770      	bx	lr
 800ed10:	00d8acbf 	.word	0x00d8acbf
 800ed14:	00e4e1c0 	.word	0x00e4e1c0
 800ed18:	00f42400 	.word	0x00f42400
 800ed1c:	01067380 	.word	0x01067380
 800ed20:	011a499f 	.word	0x011a499f
 800ed24:	01312cff 	.word	0x01312cff
 800ed28:	014ca43f 	.word	0x014ca43f
 800ed2c:	016e3600 	.word	0x016e3600
 800ed30:	01a6ab1f 	.word	0x01a6ab1f
 800ed34:	01e84800 	.word	0x01e84800

0800ed38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ed38:	b480      	push	{r7}
 800ed3a:	b083      	sub	sp, #12
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	689b      	ldr	r3, [r3, #8]
 800ed44:	f043 0201 	orr.w	r2, r3, #1
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ed4c:	2300      	movs	r3, #0
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	370c      	adds	r7, #12
 800ed52:	46bd      	mov	sp, r7
 800ed54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed58:	4770      	bx	lr

0800ed5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ed5a:	b480      	push	{r7}
 800ed5c:	b083      	sub	sp, #12
 800ed5e:	af00      	add	r7, sp, #0
 800ed60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	689b      	ldr	r3, [r3, #8]
 800ed66:	f023 0201 	bic.w	r2, r3, #1
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ed6e:	2300      	movs	r3, #0
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	370c      	adds	r7, #12
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr

0800ed7c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	460b      	mov	r3, r1
 800ed86:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	68db      	ldr	r3, [r3, #12]
 800ed8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ed94:	78fb      	ldrb	r3, [r7, #3]
 800ed96:	2b01      	cmp	r3, #1
 800ed98:	d106      	bne.n	800eda8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	68db      	ldr	r3, [r3, #12]
 800ed9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	60da      	str	r2, [r3, #12]
 800eda6:	e00b      	b.n	800edc0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800eda8:	78fb      	ldrb	r3, [r7, #3]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d106      	bne.n	800edbc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	68db      	ldr	r3, [r3, #12]
 800edb2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	60da      	str	r2, [r3, #12]
 800edba:	e001      	b.n	800edc0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800edbc:	2301      	movs	r3, #1
 800edbe:	e003      	b.n	800edc8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800edc0:	2032      	movs	r0, #50	; 0x32
 800edc2:	f7fb fdd7 	bl	800a974 <HAL_Delay>

  return HAL_OK;
 800edc6:	2300      	movs	r3, #0
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3708      	adds	r7, #8
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}

0800edd0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800edd0:	b084      	sub	sp, #16
 800edd2:	b580      	push	{r7, lr}
 800edd4:	b086      	sub	sp, #24
 800edd6:	af00      	add	r7, sp, #0
 800edd8:	6078      	str	r0, [r7, #4]
 800edda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800edde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ede2:	2300      	movs	r3, #0
 800ede4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800edea:	2300      	movs	r3, #0
 800edec:	613b      	str	r3, [r7, #16]
 800edee:	e009      	b.n	800ee04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800edf0:	687a      	ldr	r2, [r7, #4]
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	3340      	adds	r3, #64	; 0x40
 800edf6:	009b      	lsls	r3, r3, #2
 800edf8:	4413      	add	r3, r2
 800edfa:	2200      	movs	r2, #0
 800edfc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	3301      	adds	r3, #1
 800ee02:	613b      	str	r3, [r7, #16]
 800ee04:	693b      	ldr	r3, [r7, #16]
 800ee06:	2b0e      	cmp	r3, #14
 800ee08:	d9f2      	bls.n	800edf0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ee0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d11c      	bne.n	800ee4a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee16:	685b      	ldr	r3, [r3, #4]
 800ee18:	68fa      	ldr	r2, [r7, #12]
 800ee1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ee1e:	f043 0302 	orr.w	r3, r3, #2
 800ee22:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee34:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee40:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	639a      	str	r2, [r3, #56]	; 0x38
 800ee48:	e00b      	b.n	800ee62 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee4e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ee68:	461a      	mov	r2, r3
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee74:	4619      	mov	r1, r3
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	680b      	ldr	r3, [r1, #0]
 800ee80:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ee82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee84:	2b01      	cmp	r3, #1
 800ee86:	d10c      	bne.n	800eea2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ee88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d104      	bne.n	800ee98 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ee8e:	2100      	movs	r1, #0
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f000 f949 	bl	800f128 <USB_SetDevSpeed>
 800ee96:	e008      	b.n	800eeaa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ee98:	2101      	movs	r1, #1
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f000 f944 	bl	800f128 <USB_SetDevSpeed>
 800eea0:	e003      	b.n	800eeaa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800eea2:	2103      	movs	r1, #3
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f000 f93f 	bl	800f128 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800eeaa:	2110      	movs	r1, #16
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f000 f8f3 	bl	800f098 <USB_FlushTxFifo>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d001      	beq.n	800eebc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800eeb8:	2301      	movs	r3, #1
 800eeba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f000 f911 	bl	800f0e4 <USB_FlushRxFifo>
 800eec2:	4603      	mov	r3, r0
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d001      	beq.n	800eecc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800eec8:	2301      	movs	r3, #1
 800eeca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eed2:	461a      	mov	r2, r3
 800eed4:	2300      	movs	r3, #0
 800eed6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eede:	461a      	mov	r2, r3
 800eee0:	2300      	movs	r3, #0
 800eee2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eeea:	461a      	mov	r2, r3
 800eeec:	2300      	movs	r3, #0
 800eeee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eef0:	2300      	movs	r3, #0
 800eef2:	613b      	str	r3, [r7, #16]
 800eef4:	e043      	b.n	800ef7e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eef6:	693b      	ldr	r3, [r7, #16]
 800eef8:	015a      	lsls	r2, r3, #5
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	4413      	add	r3, r2
 800eefe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef0c:	d118      	bne.n	800ef40 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800ef0e:	693b      	ldr	r3, [r7, #16]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d10a      	bne.n	800ef2a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ef14:	693b      	ldr	r3, [r7, #16]
 800ef16:	015a      	lsls	r2, r3, #5
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	4413      	add	r3, r2
 800ef1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef20:	461a      	mov	r2, r3
 800ef22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ef26:	6013      	str	r3, [r2, #0]
 800ef28:	e013      	b.n	800ef52 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ef2a:	693b      	ldr	r3, [r7, #16]
 800ef2c:	015a      	lsls	r2, r3, #5
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	4413      	add	r3, r2
 800ef32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef36:	461a      	mov	r2, r3
 800ef38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ef3c:	6013      	str	r3, [r2, #0]
 800ef3e:	e008      	b.n	800ef52 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ef40:	693b      	ldr	r3, [r7, #16]
 800ef42:	015a      	lsls	r2, r3, #5
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	4413      	add	r3, r2
 800ef48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef4c:	461a      	mov	r2, r3
 800ef4e:	2300      	movs	r3, #0
 800ef50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ef52:	693b      	ldr	r3, [r7, #16]
 800ef54:	015a      	lsls	r2, r3, #5
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	4413      	add	r3, r2
 800ef5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef5e:	461a      	mov	r2, r3
 800ef60:	2300      	movs	r3, #0
 800ef62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	015a      	lsls	r2, r3, #5
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	4413      	add	r3, r2
 800ef6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef70:	461a      	mov	r2, r3
 800ef72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ef76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ef78:	693b      	ldr	r3, [r7, #16]
 800ef7a:	3301      	adds	r3, #1
 800ef7c:	613b      	str	r3, [r7, #16]
 800ef7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef80:	693a      	ldr	r2, [r7, #16]
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d3b7      	bcc.n	800eef6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ef86:	2300      	movs	r3, #0
 800ef88:	613b      	str	r3, [r7, #16]
 800ef8a:	e043      	b.n	800f014 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	015a      	lsls	r2, r3, #5
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	4413      	add	r3, r2
 800ef94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800efa2:	d118      	bne.n	800efd6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800efa4:	693b      	ldr	r3, [r7, #16]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d10a      	bne.n	800efc0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800efaa:	693b      	ldr	r3, [r7, #16]
 800efac:	015a      	lsls	r2, r3, #5
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	4413      	add	r3, r2
 800efb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efb6:	461a      	mov	r2, r3
 800efb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800efbc:	6013      	str	r3, [r2, #0]
 800efbe:	e013      	b.n	800efe8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	015a      	lsls	r2, r3, #5
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	4413      	add	r3, r2
 800efc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efcc:	461a      	mov	r2, r3
 800efce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800efd2:	6013      	str	r3, [r2, #0]
 800efd4:	e008      	b.n	800efe8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800efd6:	693b      	ldr	r3, [r7, #16]
 800efd8:	015a      	lsls	r2, r3, #5
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	4413      	add	r3, r2
 800efde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efe2:	461a      	mov	r2, r3
 800efe4:	2300      	movs	r3, #0
 800efe6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	015a      	lsls	r2, r3, #5
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	4413      	add	r3, r2
 800eff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eff4:	461a      	mov	r2, r3
 800eff6:	2300      	movs	r3, #0
 800eff8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800effa:	693b      	ldr	r3, [r7, #16]
 800effc:	015a      	lsls	r2, r3, #5
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	4413      	add	r3, r2
 800f002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f006:	461a      	mov	r2, r3
 800f008:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f00c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f00e:	693b      	ldr	r3, [r7, #16]
 800f010:	3301      	adds	r3, #1
 800f012:	613b      	str	r3, [r7, #16]
 800f014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f016:	693a      	ldr	r2, [r7, #16]
 800f018:	429a      	cmp	r2, r3
 800f01a:	d3b7      	bcc.n	800ef8c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f022:	691b      	ldr	r3, [r3, #16]
 800f024:	68fa      	ldr	r2, [r7, #12]
 800f026:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f02a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f02e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2200      	movs	r2, #0
 800f034:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f03c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f040:	2b00      	cmp	r3, #0
 800f042:	d105      	bne.n	800f050 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	699b      	ldr	r3, [r3, #24]
 800f048:	f043 0210 	orr.w	r2, r3, #16
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	699a      	ldr	r2, [r3, #24]
 800f054:	4b0f      	ldr	r3, [pc, #60]	; (800f094 <USB_DevInit+0x2c4>)
 800f056:	4313      	orrs	r3, r2
 800f058:	687a      	ldr	r2, [r7, #4]
 800f05a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d005      	beq.n	800f06e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	699b      	ldr	r3, [r3, #24]
 800f066:	f043 0208 	orr.w	r2, r3, #8
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f06e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f070:	2b01      	cmp	r3, #1
 800f072:	d107      	bne.n	800f084 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	699b      	ldr	r3, [r3, #24]
 800f078:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f07c:	f043 0304 	orr.w	r3, r3, #4
 800f080:	687a      	ldr	r2, [r7, #4]
 800f082:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f084:	7dfb      	ldrb	r3, [r7, #23]
}
 800f086:	4618      	mov	r0, r3
 800f088:	3718      	adds	r7, #24
 800f08a:	46bd      	mov	sp, r7
 800f08c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f090:	b004      	add	sp, #16
 800f092:	4770      	bx	lr
 800f094:	803c3800 	.word	0x803c3800

0800f098 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f098:	b480      	push	{r7}
 800f09a:	b085      	sub	sp, #20
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
 800f0a0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	019b      	lsls	r3, r3, #6
 800f0aa:	f043 0220 	orr.w	r2, r3, #32
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	3301      	adds	r3, #1
 800f0b6:	60fb      	str	r3, [r7, #12]
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	4a09      	ldr	r2, [pc, #36]	; (800f0e0 <USB_FlushTxFifo+0x48>)
 800f0bc:	4293      	cmp	r3, r2
 800f0be:	d901      	bls.n	800f0c4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f0c0:	2303      	movs	r3, #3
 800f0c2:	e006      	b.n	800f0d2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	691b      	ldr	r3, [r3, #16]
 800f0c8:	f003 0320 	and.w	r3, r3, #32
 800f0cc:	2b20      	cmp	r3, #32
 800f0ce:	d0f0      	beq.n	800f0b2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f0d0:	2300      	movs	r3, #0
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3714      	adds	r7, #20
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0dc:	4770      	bx	lr
 800f0de:	bf00      	nop
 800f0e0:	00030d40 	.word	0x00030d40

0800f0e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b085      	sub	sp, #20
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2210      	movs	r2, #16
 800f0f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	3301      	adds	r3, #1
 800f0fa:	60fb      	str	r3, [r7, #12]
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	4a09      	ldr	r2, [pc, #36]	; (800f124 <USB_FlushRxFifo+0x40>)
 800f100:	4293      	cmp	r3, r2
 800f102:	d901      	bls.n	800f108 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f104:	2303      	movs	r3, #3
 800f106:	e006      	b.n	800f116 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	691b      	ldr	r3, [r3, #16]
 800f10c:	f003 0310 	and.w	r3, r3, #16
 800f110:	2b10      	cmp	r3, #16
 800f112:	d0f0      	beq.n	800f0f6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f114:	2300      	movs	r3, #0
}
 800f116:	4618      	mov	r0, r3
 800f118:	3714      	adds	r7, #20
 800f11a:	46bd      	mov	sp, r7
 800f11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f120:	4770      	bx	lr
 800f122:	bf00      	nop
 800f124:	00030d40 	.word	0x00030d40

0800f128 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f128:	b480      	push	{r7}
 800f12a:	b085      	sub	sp, #20
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	460b      	mov	r3, r1
 800f132:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f13e:	681a      	ldr	r2, [r3, #0]
 800f140:	78fb      	ldrb	r3, [r7, #3]
 800f142:	68f9      	ldr	r1, [r7, #12]
 800f144:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f148:	4313      	orrs	r3, r2
 800f14a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f14c:	2300      	movs	r3, #0
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3714      	adds	r7, #20
 800f152:	46bd      	mov	sp, r7
 800f154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f158:	4770      	bx	lr

0800f15a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f15a:	b480      	push	{r7}
 800f15c:	b087      	sub	sp, #28
 800f15e:	af00      	add	r7, sp, #0
 800f160:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f166:	693b      	ldr	r3, [r7, #16]
 800f168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f16c:	689b      	ldr	r3, [r3, #8]
 800f16e:	f003 0306 	and.w	r3, r3, #6
 800f172:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d102      	bne.n	800f180 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f17a:	2300      	movs	r3, #0
 800f17c:	75fb      	strb	r3, [r7, #23]
 800f17e:	e00a      	b.n	800f196 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2b02      	cmp	r3, #2
 800f184:	d002      	beq.n	800f18c <USB_GetDevSpeed+0x32>
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	2b06      	cmp	r3, #6
 800f18a:	d102      	bne.n	800f192 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f18c:	2302      	movs	r3, #2
 800f18e:	75fb      	strb	r3, [r7, #23]
 800f190:	e001      	b.n	800f196 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f192:	230f      	movs	r3, #15
 800f194:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f196:	7dfb      	ldrb	r3, [r7, #23]
}
 800f198:	4618      	mov	r0, r3
 800f19a:	371c      	adds	r7, #28
 800f19c:	46bd      	mov	sp, r7
 800f19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a2:	4770      	bx	lr

0800f1a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b085      	sub	sp, #20
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	781b      	ldrb	r3, [r3, #0]
 800f1b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	785b      	ldrb	r3, [r3, #1]
 800f1bc:	2b01      	cmp	r3, #1
 800f1be:	d13a      	bne.n	800f236 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1c6:	69da      	ldr	r2, [r3, #28]
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	f003 030f 	and.w	r3, r3, #15
 800f1d0:	2101      	movs	r1, #1
 800f1d2:	fa01 f303 	lsl.w	r3, r1, r3
 800f1d6:	b29b      	uxth	r3, r3
 800f1d8:	68f9      	ldr	r1, [r7, #12]
 800f1da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f1de:	4313      	orrs	r3, r2
 800f1e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	015a      	lsls	r2, r3, #5
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	4413      	add	r3, r2
 800f1ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d155      	bne.n	800f2a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	015a      	lsls	r2, r3, #5
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	4413      	add	r3, r2
 800f200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f204:	681a      	ldr	r2, [r3, #0]
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	689b      	ldr	r3, [r3, #8]
 800f20a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	78db      	ldrb	r3, [r3, #3]
 800f212:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f214:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	059b      	lsls	r3, r3, #22
 800f21a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f21c:	4313      	orrs	r3, r2
 800f21e:	68ba      	ldr	r2, [r7, #8]
 800f220:	0151      	lsls	r1, r2, #5
 800f222:	68fa      	ldr	r2, [r7, #12]
 800f224:	440a      	add	r2, r1
 800f226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f22a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f22e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f232:	6013      	str	r3, [r2, #0]
 800f234:	e036      	b.n	800f2a4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f23c:	69da      	ldr	r2, [r3, #28]
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	f003 030f 	and.w	r3, r3, #15
 800f246:	2101      	movs	r1, #1
 800f248:	fa01 f303 	lsl.w	r3, r1, r3
 800f24c:	041b      	lsls	r3, r3, #16
 800f24e:	68f9      	ldr	r1, [r7, #12]
 800f250:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f254:	4313      	orrs	r3, r2
 800f256:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	015a      	lsls	r2, r3, #5
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	4413      	add	r3, r2
 800f260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d11a      	bne.n	800f2a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	015a      	lsls	r2, r3, #5
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	4413      	add	r3, r2
 800f276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f27a:	681a      	ldr	r2, [r3, #0]
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	689b      	ldr	r3, [r3, #8]
 800f280:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	78db      	ldrb	r3, [r3, #3]
 800f288:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f28a:	430b      	orrs	r3, r1
 800f28c:	4313      	orrs	r3, r2
 800f28e:	68ba      	ldr	r2, [r7, #8]
 800f290:	0151      	lsls	r1, r2, #5
 800f292:	68fa      	ldr	r2, [r7, #12]
 800f294:	440a      	add	r2, r1
 800f296:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f29a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f29e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f2a2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f2a4:	2300      	movs	r3, #0
}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	3714      	adds	r7, #20
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b0:	4770      	bx	lr
	...

0800f2b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f2b4:	b480      	push	{r7}
 800f2b6:	b085      	sub	sp, #20
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	785b      	ldrb	r3, [r3, #1]
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	d161      	bne.n	800f394 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	015a      	lsls	r2, r3, #5
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	4413      	add	r3, r2
 800f2d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f2e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f2e6:	d11f      	bne.n	800f328 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	015a      	lsls	r2, r3, #5
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	4413      	add	r3, r2
 800f2f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	68ba      	ldr	r2, [r7, #8]
 800f2f8:	0151      	lsls	r1, r2, #5
 800f2fa:	68fa      	ldr	r2, [r7, #12]
 800f2fc:	440a      	add	r2, r1
 800f2fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f302:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f306:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	015a      	lsls	r2, r3, #5
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	4413      	add	r3, r2
 800f310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	68ba      	ldr	r2, [r7, #8]
 800f318:	0151      	lsls	r1, r2, #5
 800f31a:	68fa      	ldr	r2, [r7, #12]
 800f31c:	440a      	add	r2, r1
 800f31e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f322:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f326:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f32e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	f003 030f 	and.w	r3, r3, #15
 800f338:	2101      	movs	r1, #1
 800f33a:	fa01 f303 	lsl.w	r3, r1, r3
 800f33e:	b29b      	uxth	r3, r3
 800f340:	43db      	mvns	r3, r3
 800f342:	68f9      	ldr	r1, [r7, #12]
 800f344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f348:	4013      	ands	r3, r2
 800f34a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f352:	69da      	ldr	r2, [r3, #28]
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	f003 030f 	and.w	r3, r3, #15
 800f35c:	2101      	movs	r1, #1
 800f35e:	fa01 f303 	lsl.w	r3, r1, r3
 800f362:	b29b      	uxth	r3, r3
 800f364:	43db      	mvns	r3, r3
 800f366:	68f9      	ldr	r1, [r7, #12]
 800f368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f36c:	4013      	ands	r3, r2
 800f36e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	015a      	lsls	r2, r3, #5
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	4413      	add	r3, r2
 800f378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f37c:	681a      	ldr	r2, [r3, #0]
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	0159      	lsls	r1, r3, #5
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	440b      	add	r3, r1
 800f386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f38a:	4619      	mov	r1, r3
 800f38c:	4b35      	ldr	r3, [pc, #212]	; (800f464 <USB_DeactivateEndpoint+0x1b0>)
 800f38e:	4013      	ands	r3, r2
 800f390:	600b      	str	r3, [r1, #0]
 800f392:	e060      	b.n	800f456 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	015a      	lsls	r2, r3, #5
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	4413      	add	r3, r2
 800f39c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f3a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f3aa:	d11f      	bne.n	800f3ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	015a      	lsls	r2, r3, #5
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	4413      	add	r3, r2
 800f3b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	68ba      	ldr	r2, [r7, #8]
 800f3bc:	0151      	lsls	r1, r2, #5
 800f3be:	68fa      	ldr	r2, [r7, #12]
 800f3c0:	440a      	add	r2, r1
 800f3c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f3ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	015a      	lsls	r2, r3, #5
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	4413      	add	r3, r2
 800f3d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	68ba      	ldr	r2, [r7, #8]
 800f3dc:	0151      	lsls	r1, r2, #5
 800f3de:	68fa      	ldr	r2, [r7, #12]
 800f3e0:	440a      	add	r2, r1
 800f3e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f3ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	781b      	ldrb	r3, [r3, #0]
 800f3f8:	f003 030f 	and.w	r3, r3, #15
 800f3fc:	2101      	movs	r1, #1
 800f3fe:	fa01 f303 	lsl.w	r3, r1, r3
 800f402:	041b      	lsls	r3, r3, #16
 800f404:	43db      	mvns	r3, r3
 800f406:	68f9      	ldr	r1, [r7, #12]
 800f408:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f40c:	4013      	ands	r3, r2
 800f40e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f416:	69da      	ldr	r2, [r3, #28]
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	781b      	ldrb	r3, [r3, #0]
 800f41c:	f003 030f 	and.w	r3, r3, #15
 800f420:	2101      	movs	r1, #1
 800f422:	fa01 f303 	lsl.w	r3, r1, r3
 800f426:	041b      	lsls	r3, r3, #16
 800f428:	43db      	mvns	r3, r3
 800f42a:	68f9      	ldr	r1, [r7, #12]
 800f42c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f430:	4013      	ands	r3, r2
 800f432:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	015a      	lsls	r2, r3, #5
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	4413      	add	r3, r2
 800f43c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f440:	681a      	ldr	r2, [r3, #0]
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	0159      	lsls	r1, r3, #5
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	440b      	add	r3, r1
 800f44a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f44e:	4619      	mov	r1, r3
 800f450:	4b05      	ldr	r3, [pc, #20]	; (800f468 <USB_DeactivateEndpoint+0x1b4>)
 800f452:	4013      	ands	r3, r2
 800f454:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f456:	2300      	movs	r3, #0
}
 800f458:	4618      	mov	r0, r3
 800f45a:	3714      	adds	r7, #20
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr
 800f464:	ec337800 	.word	0xec337800
 800f468:	eff37800 	.word	0xeff37800

0800f46c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b08a      	sub	sp, #40	; 0x28
 800f470:	af02      	add	r7, sp, #8
 800f472:	60f8      	str	r0, [r7, #12]
 800f474:	60b9      	str	r1, [r7, #8]
 800f476:	4613      	mov	r3, r2
 800f478:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	785b      	ldrb	r3, [r3, #1]
 800f488:	2b01      	cmp	r3, #1
 800f48a:	f040 815c 	bne.w	800f746 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	695b      	ldr	r3, [r3, #20]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d132      	bne.n	800f4fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f496:	69bb      	ldr	r3, [r7, #24]
 800f498:	015a      	lsls	r2, r3, #5
 800f49a:	69fb      	ldr	r3, [r7, #28]
 800f49c:	4413      	add	r3, r2
 800f49e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4a2:	691b      	ldr	r3, [r3, #16]
 800f4a4:	69ba      	ldr	r2, [r7, #24]
 800f4a6:	0151      	lsls	r1, r2, #5
 800f4a8:	69fa      	ldr	r2, [r7, #28]
 800f4aa:	440a      	add	r2, r1
 800f4ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f4b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f4b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f4ba:	69bb      	ldr	r3, [r7, #24]
 800f4bc:	015a      	lsls	r2, r3, #5
 800f4be:	69fb      	ldr	r3, [r7, #28]
 800f4c0:	4413      	add	r3, r2
 800f4c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4c6:	691b      	ldr	r3, [r3, #16]
 800f4c8:	69ba      	ldr	r2, [r7, #24]
 800f4ca:	0151      	lsls	r1, r2, #5
 800f4cc:	69fa      	ldr	r2, [r7, #28]
 800f4ce:	440a      	add	r2, r1
 800f4d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f4d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f4da:	69bb      	ldr	r3, [r7, #24]
 800f4dc:	015a      	lsls	r2, r3, #5
 800f4de:	69fb      	ldr	r3, [r7, #28]
 800f4e0:	4413      	add	r3, r2
 800f4e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4e6:	691b      	ldr	r3, [r3, #16]
 800f4e8:	69ba      	ldr	r2, [r7, #24]
 800f4ea:	0151      	lsls	r1, r2, #5
 800f4ec:	69fa      	ldr	r2, [r7, #28]
 800f4ee:	440a      	add	r2, r1
 800f4f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4f4:	0cdb      	lsrs	r3, r3, #19
 800f4f6:	04db      	lsls	r3, r3, #19
 800f4f8:	6113      	str	r3, [r2, #16]
 800f4fa:	e074      	b.n	800f5e6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f4fc:	69bb      	ldr	r3, [r7, #24]
 800f4fe:	015a      	lsls	r2, r3, #5
 800f500:	69fb      	ldr	r3, [r7, #28]
 800f502:	4413      	add	r3, r2
 800f504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f508:	691b      	ldr	r3, [r3, #16]
 800f50a:	69ba      	ldr	r2, [r7, #24]
 800f50c:	0151      	lsls	r1, r2, #5
 800f50e:	69fa      	ldr	r2, [r7, #28]
 800f510:	440a      	add	r2, r1
 800f512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f516:	0cdb      	lsrs	r3, r3, #19
 800f518:	04db      	lsls	r3, r3, #19
 800f51a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f51c:	69bb      	ldr	r3, [r7, #24]
 800f51e:	015a      	lsls	r2, r3, #5
 800f520:	69fb      	ldr	r3, [r7, #28]
 800f522:	4413      	add	r3, r2
 800f524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f528:	691b      	ldr	r3, [r3, #16]
 800f52a:	69ba      	ldr	r2, [r7, #24]
 800f52c:	0151      	lsls	r1, r2, #5
 800f52e:	69fa      	ldr	r2, [r7, #28]
 800f530:	440a      	add	r2, r1
 800f532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f536:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f53a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f53e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f540:	69bb      	ldr	r3, [r7, #24]
 800f542:	015a      	lsls	r2, r3, #5
 800f544:	69fb      	ldr	r3, [r7, #28]
 800f546:	4413      	add	r3, r2
 800f548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f54c:	691a      	ldr	r2, [r3, #16]
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	6959      	ldr	r1, [r3, #20]
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	689b      	ldr	r3, [r3, #8]
 800f556:	440b      	add	r3, r1
 800f558:	1e59      	subs	r1, r3, #1
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	689b      	ldr	r3, [r3, #8]
 800f55e:	fbb1 f3f3 	udiv	r3, r1, r3
 800f562:	04d9      	lsls	r1, r3, #19
 800f564:	4b9d      	ldr	r3, [pc, #628]	; (800f7dc <USB_EPStartXfer+0x370>)
 800f566:	400b      	ands	r3, r1
 800f568:	69b9      	ldr	r1, [r7, #24]
 800f56a:	0148      	lsls	r0, r1, #5
 800f56c:	69f9      	ldr	r1, [r7, #28]
 800f56e:	4401      	add	r1, r0
 800f570:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f574:	4313      	orrs	r3, r2
 800f576:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f578:	69bb      	ldr	r3, [r7, #24]
 800f57a:	015a      	lsls	r2, r3, #5
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	4413      	add	r3, r2
 800f580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f584:	691a      	ldr	r2, [r3, #16]
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	695b      	ldr	r3, [r3, #20]
 800f58a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f58e:	69b9      	ldr	r1, [r7, #24]
 800f590:	0148      	lsls	r0, r1, #5
 800f592:	69f9      	ldr	r1, [r7, #28]
 800f594:	4401      	add	r1, r0
 800f596:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f59a:	4313      	orrs	r3, r2
 800f59c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	78db      	ldrb	r3, [r3, #3]
 800f5a2:	2b01      	cmp	r3, #1
 800f5a4:	d11f      	bne.n	800f5e6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f5a6:	69bb      	ldr	r3, [r7, #24]
 800f5a8:	015a      	lsls	r2, r3, #5
 800f5aa:	69fb      	ldr	r3, [r7, #28]
 800f5ac:	4413      	add	r3, r2
 800f5ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5b2:	691b      	ldr	r3, [r3, #16]
 800f5b4:	69ba      	ldr	r2, [r7, #24]
 800f5b6:	0151      	lsls	r1, r2, #5
 800f5b8:	69fa      	ldr	r2, [r7, #28]
 800f5ba:	440a      	add	r2, r1
 800f5bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f5c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f5c6:	69bb      	ldr	r3, [r7, #24]
 800f5c8:	015a      	lsls	r2, r3, #5
 800f5ca:	69fb      	ldr	r3, [r7, #28]
 800f5cc:	4413      	add	r3, r2
 800f5ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5d2:	691b      	ldr	r3, [r3, #16]
 800f5d4:	69ba      	ldr	r2, [r7, #24]
 800f5d6:	0151      	lsls	r1, r2, #5
 800f5d8:	69fa      	ldr	r2, [r7, #28]
 800f5da:	440a      	add	r2, r1
 800f5dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f5e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f5e6:	79fb      	ldrb	r3, [r7, #7]
 800f5e8:	2b01      	cmp	r3, #1
 800f5ea:	d14b      	bne.n	800f684 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	691b      	ldr	r3, [r3, #16]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d009      	beq.n	800f608 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f5f4:	69bb      	ldr	r3, [r7, #24]
 800f5f6:	015a      	lsls	r2, r3, #5
 800f5f8:	69fb      	ldr	r3, [r7, #28]
 800f5fa:	4413      	add	r3, r2
 800f5fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f600:	461a      	mov	r2, r3
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	691b      	ldr	r3, [r3, #16]
 800f606:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	78db      	ldrb	r3, [r3, #3]
 800f60c:	2b01      	cmp	r3, #1
 800f60e:	d128      	bne.n	800f662 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f610:	69fb      	ldr	r3, [r7, #28]
 800f612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f616:	689b      	ldr	r3, [r3, #8]
 800f618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d110      	bne.n	800f642 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f620:	69bb      	ldr	r3, [r7, #24]
 800f622:	015a      	lsls	r2, r3, #5
 800f624:	69fb      	ldr	r3, [r7, #28]
 800f626:	4413      	add	r3, r2
 800f628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	69ba      	ldr	r2, [r7, #24]
 800f630:	0151      	lsls	r1, r2, #5
 800f632:	69fa      	ldr	r2, [r7, #28]
 800f634:	440a      	add	r2, r1
 800f636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f63a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f63e:	6013      	str	r3, [r2, #0]
 800f640:	e00f      	b.n	800f662 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f642:	69bb      	ldr	r3, [r7, #24]
 800f644:	015a      	lsls	r2, r3, #5
 800f646:	69fb      	ldr	r3, [r7, #28]
 800f648:	4413      	add	r3, r2
 800f64a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	69ba      	ldr	r2, [r7, #24]
 800f652:	0151      	lsls	r1, r2, #5
 800f654:	69fa      	ldr	r2, [r7, #28]
 800f656:	440a      	add	r2, r1
 800f658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f65c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f660:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f662:	69bb      	ldr	r3, [r7, #24]
 800f664:	015a      	lsls	r2, r3, #5
 800f666:	69fb      	ldr	r3, [r7, #28]
 800f668:	4413      	add	r3, r2
 800f66a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	69ba      	ldr	r2, [r7, #24]
 800f672:	0151      	lsls	r1, r2, #5
 800f674:	69fa      	ldr	r2, [r7, #28]
 800f676:	440a      	add	r2, r1
 800f678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f67c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f680:	6013      	str	r3, [r2, #0]
 800f682:	e12f      	b.n	800f8e4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f684:	69bb      	ldr	r3, [r7, #24]
 800f686:	015a      	lsls	r2, r3, #5
 800f688:	69fb      	ldr	r3, [r7, #28]
 800f68a:	4413      	add	r3, r2
 800f68c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	69ba      	ldr	r2, [r7, #24]
 800f694:	0151      	lsls	r1, r2, #5
 800f696:	69fa      	ldr	r2, [r7, #28]
 800f698:	440a      	add	r2, r1
 800f69a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f69e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f6a2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	78db      	ldrb	r3, [r3, #3]
 800f6a8:	2b01      	cmp	r3, #1
 800f6aa:	d015      	beq.n	800f6d8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	695b      	ldr	r3, [r3, #20]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	f000 8117 	beq.w	800f8e4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f6b6:	69fb      	ldr	r3, [r7, #28]
 800f6b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	781b      	ldrb	r3, [r3, #0]
 800f6c2:	f003 030f 	and.w	r3, r3, #15
 800f6c6:	2101      	movs	r1, #1
 800f6c8:	fa01 f303 	lsl.w	r3, r1, r3
 800f6cc:	69f9      	ldr	r1, [r7, #28]
 800f6ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f6d2:	4313      	orrs	r3, r2
 800f6d4:	634b      	str	r3, [r1, #52]	; 0x34
 800f6d6:	e105      	b.n	800f8e4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f6d8:	69fb      	ldr	r3, [r7, #28]
 800f6da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6de:	689b      	ldr	r3, [r3, #8]
 800f6e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d110      	bne.n	800f70a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f6e8:	69bb      	ldr	r3, [r7, #24]
 800f6ea:	015a      	lsls	r2, r3, #5
 800f6ec:	69fb      	ldr	r3, [r7, #28]
 800f6ee:	4413      	add	r3, r2
 800f6f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	69ba      	ldr	r2, [r7, #24]
 800f6f8:	0151      	lsls	r1, r2, #5
 800f6fa:	69fa      	ldr	r2, [r7, #28]
 800f6fc:	440a      	add	r2, r1
 800f6fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f702:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f706:	6013      	str	r3, [r2, #0]
 800f708:	e00f      	b.n	800f72a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f70a:	69bb      	ldr	r3, [r7, #24]
 800f70c:	015a      	lsls	r2, r3, #5
 800f70e:	69fb      	ldr	r3, [r7, #28]
 800f710:	4413      	add	r3, r2
 800f712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	69ba      	ldr	r2, [r7, #24]
 800f71a:	0151      	lsls	r1, r2, #5
 800f71c:	69fa      	ldr	r2, [r7, #28]
 800f71e:	440a      	add	r2, r1
 800f720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f728:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	68d9      	ldr	r1, [r3, #12]
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	781a      	ldrb	r2, [r3, #0]
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	695b      	ldr	r3, [r3, #20]
 800f736:	b298      	uxth	r0, r3
 800f738:	79fb      	ldrb	r3, [r7, #7]
 800f73a:	9300      	str	r3, [sp, #0]
 800f73c:	4603      	mov	r3, r0
 800f73e:	68f8      	ldr	r0, [r7, #12]
 800f740:	f000 fa2b 	bl	800fb9a <USB_WritePacket>
 800f744:	e0ce      	b.n	800f8e4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f746:	69bb      	ldr	r3, [r7, #24]
 800f748:	015a      	lsls	r2, r3, #5
 800f74a:	69fb      	ldr	r3, [r7, #28]
 800f74c:	4413      	add	r3, r2
 800f74e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f752:	691b      	ldr	r3, [r3, #16]
 800f754:	69ba      	ldr	r2, [r7, #24]
 800f756:	0151      	lsls	r1, r2, #5
 800f758:	69fa      	ldr	r2, [r7, #28]
 800f75a:	440a      	add	r2, r1
 800f75c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f760:	0cdb      	lsrs	r3, r3, #19
 800f762:	04db      	lsls	r3, r3, #19
 800f764:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f766:	69bb      	ldr	r3, [r7, #24]
 800f768:	015a      	lsls	r2, r3, #5
 800f76a:	69fb      	ldr	r3, [r7, #28]
 800f76c:	4413      	add	r3, r2
 800f76e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f772:	691b      	ldr	r3, [r3, #16]
 800f774:	69ba      	ldr	r2, [r7, #24]
 800f776:	0151      	lsls	r1, r2, #5
 800f778:	69fa      	ldr	r2, [r7, #28]
 800f77a:	440a      	add	r2, r1
 800f77c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f780:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f784:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f788:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	695b      	ldr	r3, [r3, #20]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d126      	bne.n	800f7e0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f792:	69bb      	ldr	r3, [r7, #24]
 800f794:	015a      	lsls	r2, r3, #5
 800f796:	69fb      	ldr	r3, [r7, #28]
 800f798:	4413      	add	r3, r2
 800f79a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f79e:	691a      	ldr	r2, [r3, #16]
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	689b      	ldr	r3, [r3, #8]
 800f7a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f7a8:	69b9      	ldr	r1, [r7, #24]
 800f7aa:	0148      	lsls	r0, r1, #5
 800f7ac:	69f9      	ldr	r1, [r7, #28]
 800f7ae:	4401      	add	r1, r0
 800f7b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f7b4:	4313      	orrs	r3, r2
 800f7b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f7b8:	69bb      	ldr	r3, [r7, #24]
 800f7ba:	015a      	lsls	r2, r3, #5
 800f7bc:	69fb      	ldr	r3, [r7, #28]
 800f7be:	4413      	add	r3, r2
 800f7c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7c4:	691b      	ldr	r3, [r3, #16]
 800f7c6:	69ba      	ldr	r2, [r7, #24]
 800f7c8:	0151      	lsls	r1, r2, #5
 800f7ca:	69fa      	ldr	r2, [r7, #28]
 800f7cc:	440a      	add	r2, r1
 800f7ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f7d6:	6113      	str	r3, [r2, #16]
 800f7d8:	e036      	b.n	800f848 <USB_EPStartXfer+0x3dc>
 800f7da:	bf00      	nop
 800f7dc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	695a      	ldr	r2, [r3, #20]
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	689b      	ldr	r3, [r3, #8]
 800f7e8:	4413      	add	r3, r2
 800f7ea:	1e5a      	subs	r2, r3, #1
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	689b      	ldr	r3, [r3, #8]
 800f7f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7f4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f7f6:	69bb      	ldr	r3, [r7, #24]
 800f7f8:	015a      	lsls	r2, r3, #5
 800f7fa:	69fb      	ldr	r3, [r7, #28]
 800f7fc:	4413      	add	r3, r2
 800f7fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f802:	691a      	ldr	r2, [r3, #16]
 800f804:	8afb      	ldrh	r3, [r7, #22]
 800f806:	04d9      	lsls	r1, r3, #19
 800f808:	4b39      	ldr	r3, [pc, #228]	; (800f8f0 <USB_EPStartXfer+0x484>)
 800f80a:	400b      	ands	r3, r1
 800f80c:	69b9      	ldr	r1, [r7, #24]
 800f80e:	0148      	lsls	r0, r1, #5
 800f810:	69f9      	ldr	r1, [r7, #28]
 800f812:	4401      	add	r1, r0
 800f814:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f818:	4313      	orrs	r3, r2
 800f81a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f81c:	69bb      	ldr	r3, [r7, #24]
 800f81e:	015a      	lsls	r2, r3, #5
 800f820:	69fb      	ldr	r3, [r7, #28]
 800f822:	4413      	add	r3, r2
 800f824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f828:	691a      	ldr	r2, [r3, #16]
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	689b      	ldr	r3, [r3, #8]
 800f82e:	8af9      	ldrh	r1, [r7, #22]
 800f830:	fb01 f303 	mul.w	r3, r1, r3
 800f834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f838:	69b9      	ldr	r1, [r7, #24]
 800f83a:	0148      	lsls	r0, r1, #5
 800f83c:	69f9      	ldr	r1, [r7, #28]
 800f83e:	4401      	add	r1, r0
 800f840:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f844:	4313      	orrs	r3, r2
 800f846:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f848:	79fb      	ldrb	r3, [r7, #7]
 800f84a:	2b01      	cmp	r3, #1
 800f84c:	d10d      	bne.n	800f86a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	68db      	ldr	r3, [r3, #12]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d009      	beq.n	800f86a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	68d9      	ldr	r1, [r3, #12]
 800f85a:	69bb      	ldr	r3, [r7, #24]
 800f85c:	015a      	lsls	r2, r3, #5
 800f85e:	69fb      	ldr	r3, [r7, #28]
 800f860:	4413      	add	r3, r2
 800f862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f866:	460a      	mov	r2, r1
 800f868:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	78db      	ldrb	r3, [r3, #3]
 800f86e:	2b01      	cmp	r3, #1
 800f870:	d128      	bne.n	800f8c4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f872:	69fb      	ldr	r3, [r7, #28]
 800f874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f878:	689b      	ldr	r3, [r3, #8]
 800f87a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d110      	bne.n	800f8a4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f882:	69bb      	ldr	r3, [r7, #24]
 800f884:	015a      	lsls	r2, r3, #5
 800f886:	69fb      	ldr	r3, [r7, #28]
 800f888:	4413      	add	r3, r2
 800f88a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	69ba      	ldr	r2, [r7, #24]
 800f892:	0151      	lsls	r1, r2, #5
 800f894:	69fa      	ldr	r2, [r7, #28]
 800f896:	440a      	add	r2, r1
 800f898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f89c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f8a0:	6013      	str	r3, [r2, #0]
 800f8a2:	e00f      	b.n	800f8c4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f8a4:	69bb      	ldr	r3, [r7, #24]
 800f8a6:	015a      	lsls	r2, r3, #5
 800f8a8:	69fb      	ldr	r3, [r7, #28]
 800f8aa:	4413      	add	r3, r2
 800f8ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	69ba      	ldr	r2, [r7, #24]
 800f8b4:	0151      	lsls	r1, r2, #5
 800f8b6:	69fa      	ldr	r2, [r7, #28]
 800f8b8:	440a      	add	r2, r1
 800f8ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f8c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f8c4:	69bb      	ldr	r3, [r7, #24]
 800f8c6:	015a      	lsls	r2, r3, #5
 800f8c8:	69fb      	ldr	r3, [r7, #28]
 800f8ca:	4413      	add	r3, r2
 800f8cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	69ba      	ldr	r2, [r7, #24]
 800f8d4:	0151      	lsls	r1, r2, #5
 800f8d6:	69fa      	ldr	r2, [r7, #28]
 800f8d8:	440a      	add	r2, r1
 800f8da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f8e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f8e4:	2300      	movs	r3, #0
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3720      	adds	r7, #32
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd80      	pop	{r7, pc}
 800f8ee:	bf00      	nop
 800f8f0:	1ff80000 	.word	0x1ff80000

0800f8f4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b087      	sub	sp, #28
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	60f8      	str	r0, [r7, #12]
 800f8fc:	60b9      	str	r1, [r7, #8]
 800f8fe:	4613      	mov	r3, r2
 800f900:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f906:	68bb      	ldr	r3, [r7, #8]
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	785b      	ldrb	r3, [r3, #1]
 800f910:	2b01      	cmp	r3, #1
 800f912:	f040 80cd 	bne.w	800fab0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	695b      	ldr	r3, [r3, #20]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d132      	bne.n	800f984 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f91e:	693b      	ldr	r3, [r7, #16]
 800f920:	015a      	lsls	r2, r3, #5
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	4413      	add	r3, r2
 800f926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f92a:	691b      	ldr	r3, [r3, #16]
 800f92c:	693a      	ldr	r2, [r7, #16]
 800f92e:	0151      	lsls	r1, r2, #5
 800f930:	697a      	ldr	r2, [r7, #20]
 800f932:	440a      	add	r2, r1
 800f934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f938:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f93c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f940:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	015a      	lsls	r2, r3, #5
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	4413      	add	r3, r2
 800f94a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f94e:	691b      	ldr	r3, [r3, #16]
 800f950:	693a      	ldr	r2, [r7, #16]
 800f952:	0151      	lsls	r1, r2, #5
 800f954:	697a      	ldr	r2, [r7, #20]
 800f956:	440a      	add	r2, r1
 800f958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f95c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f960:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f962:	693b      	ldr	r3, [r7, #16]
 800f964:	015a      	lsls	r2, r3, #5
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	4413      	add	r3, r2
 800f96a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f96e:	691b      	ldr	r3, [r3, #16]
 800f970:	693a      	ldr	r2, [r7, #16]
 800f972:	0151      	lsls	r1, r2, #5
 800f974:	697a      	ldr	r2, [r7, #20]
 800f976:	440a      	add	r2, r1
 800f978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f97c:	0cdb      	lsrs	r3, r3, #19
 800f97e:	04db      	lsls	r3, r3, #19
 800f980:	6113      	str	r3, [r2, #16]
 800f982:	e04e      	b.n	800fa22 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f984:	693b      	ldr	r3, [r7, #16]
 800f986:	015a      	lsls	r2, r3, #5
 800f988:	697b      	ldr	r3, [r7, #20]
 800f98a:	4413      	add	r3, r2
 800f98c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f990:	691b      	ldr	r3, [r3, #16]
 800f992:	693a      	ldr	r2, [r7, #16]
 800f994:	0151      	lsls	r1, r2, #5
 800f996:	697a      	ldr	r2, [r7, #20]
 800f998:	440a      	add	r2, r1
 800f99a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f99e:	0cdb      	lsrs	r3, r3, #19
 800f9a0:	04db      	lsls	r3, r3, #19
 800f9a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f9a4:	693b      	ldr	r3, [r7, #16]
 800f9a6:	015a      	lsls	r2, r3, #5
 800f9a8:	697b      	ldr	r3, [r7, #20]
 800f9aa:	4413      	add	r3, r2
 800f9ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9b0:	691b      	ldr	r3, [r3, #16]
 800f9b2:	693a      	ldr	r2, [r7, #16]
 800f9b4:	0151      	lsls	r1, r2, #5
 800f9b6:	697a      	ldr	r2, [r7, #20]
 800f9b8:	440a      	add	r2, r1
 800f9ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f9c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f9c6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	695a      	ldr	r2, [r3, #20]
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	689b      	ldr	r3, [r3, #8]
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	d903      	bls.n	800f9dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	689a      	ldr	r2, [r3, #8]
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f9dc:	693b      	ldr	r3, [r7, #16]
 800f9de:	015a      	lsls	r2, r3, #5
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	4413      	add	r3, r2
 800f9e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9e8:	691b      	ldr	r3, [r3, #16]
 800f9ea:	693a      	ldr	r2, [r7, #16]
 800f9ec:	0151      	lsls	r1, r2, #5
 800f9ee:	697a      	ldr	r2, [r7, #20]
 800f9f0:	440a      	add	r2, r1
 800f9f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f9fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f9fc:	693b      	ldr	r3, [r7, #16]
 800f9fe:	015a      	lsls	r2, r3, #5
 800fa00:	697b      	ldr	r3, [r7, #20]
 800fa02:	4413      	add	r3, r2
 800fa04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa08:	691a      	ldr	r2, [r3, #16]
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	695b      	ldr	r3, [r3, #20]
 800fa0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fa12:	6939      	ldr	r1, [r7, #16]
 800fa14:	0148      	lsls	r0, r1, #5
 800fa16:	6979      	ldr	r1, [r7, #20]
 800fa18:	4401      	add	r1, r0
 800fa1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fa1e:	4313      	orrs	r3, r2
 800fa20:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fa22:	79fb      	ldrb	r3, [r7, #7]
 800fa24:	2b01      	cmp	r3, #1
 800fa26:	d11e      	bne.n	800fa66 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	691b      	ldr	r3, [r3, #16]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d009      	beq.n	800fa44 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	015a      	lsls	r2, r3, #5
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	4413      	add	r3, r2
 800fa38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa3c:	461a      	mov	r2, r3
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	691b      	ldr	r3, [r3, #16]
 800fa42:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	015a      	lsls	r2, r3, #5
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	4413      	add	r3, r2
 800fa4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	693a      	ldr	r2, [r7, #16]
 800fa54:	0151      	lsls	r1, r2, #5
 800fa56:	697a      	ldr	r2, [r7, #20]
 800fa58:	440a      	add	r2, r1
 800fa5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fa62:	6013      	str	r3, [r2, #0]
 800fa64:	e092      	b.n	800fb8c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fa66:	693b      	ldr	r3, [r7, #16]
 800fa68:	015a      	lsls	r2, r3, #5
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	4413      	add	r3, r2
 800fa6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	693a      	ldr	r2, [r7, #16]
 800fa76:	0151      	lsls	r1, r2, #5
 800fa78:	697a      	ldr	r2, [r7, #20]
 800fa7a:	440a      	add	r2, r1
 800fa7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fa84:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	695b      	ldr	r3, [r3, #20]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d07e      	beq.n	800fb8c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	781b      	ldrb	r3, [r3, #0]
 800fa9a:	f003 030f 	and.w	r3, r3, #15
 800fa9e:	2101      	movs	r1, #1
 800faa0:	fa01 f303 	lsl.w	r3, r1, r3
 800faa4:	6979      	ldr	r1, [r7, #20]
 800faa6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800faaa:	4313      	orrs	r3, r2
 800faac:	634b      	str	r3, [r1, #52]	; 0x34
 800faae:	e06d      	b.n	800fb8c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fab0:	693b      	ldr	r3, [r7, #16]
 800fab2:	015a      	lsls	r2, r3, #5
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	4413      	add	r3, r2
 800fab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fabc:	691b      	ldr	r3, [r3, #16]
 800fabe:	693a      	ldr	r2, [r7, #16]
 800fac0:	0151      	lsls	r1, r2, #5
 800fac2:	697a      	ldr	r2, [r7, #20]
 800fac4:	440a      	add	r2, r1
 800fac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800faca:	0cdb      	lsrs	r3, r3, #19
 800facc:	04db      	lsls	r3, r3, #19
 800face:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	015a      	lsls	r2, r3, #5
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	4413      	add	r3, r2
 800fad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fadc:	691b      	ldr	r3, [r3, #16]
 800fade:	693a      	ldr	r2, [r7, #16]
 800fae0:	0151      	lsls	r1, r2, #5
 800fae2:	697a      	ldr	r2, [r7, #20]
 800fae4:	440a      	add	r2, r1
 800fae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800faea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800faee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800faf2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	695b      	ldr	r3, [r3, #20]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d003      	beq.n	800fb04 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	689a      	ldr	r2, [r3, #8]
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fb04:	693b      	ldr	r3, [r7, #16]
 800fb06:	015a      	lsls	r2, r3, #5
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	4413      	add	r3, r2
 800fb0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb10:	691b      	ldr	r3, [r3, #16]
 800fb12:	693a      	ldr	r2, [r7, #16]
 800fb14:	0151      	lsls	r1, r2, #5
 800fb16:	697a      	ldr	r2, [r7, #20]
 800fb18:	440a      	add	r2, r1
 800fb1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fb22:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800fb24:	693b      	ldr	r3, [r7, #16]
 800fb26:	015a      	lsls	r2, r3, #5
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	4413      	add	r3, r2
 800fb2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb30:	691a      	ldr	r2, [r3, #16]
 800fb32:	68bb      	ldr	r3, [r7, #8]
 800fb34:	689b      	ldr	r3, [r3, #8]
 800fb36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fb3a:	6939      	ldr	r1, [r7, #16]
 800fb3c:	0148      	lsls	r0, r1, #5
 800fb3e:	6979      	ldr	r1, [r7, #20]
 800fb40:	4401      	add	r1, r0
 800fb42:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fb46:	4313      	orrs	r3, r2
 800fb48:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800fb4a:	79fb      	ldrb	r3, [r7, #7]
 800fb4c:	2b01      	cmp	r3, #1
 800fb4e:	d10d      	bne.n	800fb6c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fb50:	68bb      	ldr	r3, [r7, #8]
 800fb52:	68db      	ldr	r3, [r3, #12]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d009      	beq.n	800fb6c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	68d9      	ldr	r1, [r3, #12]
 800fb5c:	693b      	ldr	r3, [r7, #16]
 800fb5e:	015a      	lsls	r2, r3, #5
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	4413      	add	r3, r2
 800fb64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb68:	460a      	mov	r2, r1
 800fb6a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fb6c:	693b      	ldr	r3, [r7, #16]
 800fb6e:	015a      	lsls	r2, r3, #5
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	4413      	add	r3, r2
 800fb74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	693a      	ldr	r2, [r7, #16]
 800fb7c:	0151      	lsls	r1, r2, #5
 800fb7e:	697a      	ldr	r2, [r7, #20]
 800fb80:	440a      	add	r2, r1
 800fb82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fb8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fb8c:	2300      	movs	r3, #0
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	371c      	adds	r7, #28
 800fb92:	46bd      	mov	sp, r7
 800fb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb98:	4770      	bx	lr

0800fb9a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800fb9a:	b480      	push	{r7}
 800fb9c:	b089      	sub	sp, #36	; 0x24
 800fb9e:	af00      	add	r7, sp, #0
 800fba0:	60f8      	str	r0, [r7, #12]
 800fba2:	60b9      	str	r1, [r7, #8]
 800fba4:	4611      	mov	r1, r2
 800fba6:	461a      	mov	r2, r3
 800fba8:	460b      	mov	r3, r1
 800fbaa:	71fb      	strb	r3, [r7, #7]
 800fbac:	4613      	mov	r3, r2
 800fbae:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800fbb8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d11a      	bne.n	800fbf6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800fbc0:	88bb      	ldrh	r3, [r7, #4]
 800fbc2:	3303      	adds	r3, #3
 800fbc4:	089b      	lsrs	r3, r3, #2
 800fbc6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800fbc8:	2300      	movs	r3, #0
 800fbca:	61bb      	str	r3, [r7, #24]
 800fbcc:	e00f      	b.n	800fbee <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800fbce:	79fb      	ldrb	r3, [r7, #7]
 800fbd0:	031a      	lsls	r2, r3, #12
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	4413      	add	r3, r2
 800fbd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbda:	461a      	mov	r2, r3
 800fbdc:	69fb      	ldr	r3, [r7, #28]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800fbe2:	69fb      	ldr	r3, [r7, #28]
 800fbe4:	3304      	adds	r3, #4
 800fbe6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800fbe8:	69bb      	ldr	r3, [r7, #24]
 800fbea:	3301      	adds	r3, #1
 800fbec:	61bb      	str	r3, [r7, #24]
 800fbee:	69ba      	ldr	r2, [r7, #24]
 800fbf0:	693b      	ldr	r3, [r7, #16]
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	d3eb      	bcc.n	800fbce <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800fbf6:	2300      	movs	r3, #0
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	3724      	adds	r7, #36	; 0x24
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc02:	4770      	bx	lr

0800fc04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800fc04:	b480      	push	{r7}
 800fc06:	b089      	sub	sp, #36	; 0x24
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	60f8      	str	r0, [r7, #12]
 800fc0c:	60b9      	str	r1, [r7, #8]
 800fc0e:	4613      	mov	r3, r2
 800fc10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800fc1a:	88fb      	ldrh	r3, [r7, #6]
 800fc1c:	3303      	adds	r3, #3
 800fc1e:	089b      	lsrs	r3, r3, #2
 800fc20:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800fc22:	2300      	movs	r3, #0
 800fc24:	61bb      	str	r3, [r7, #24]
 800fc26:	e00b      	b.n	800fc40 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc2e:	681a      	ldr	r2, [r3, #0]
 800fc30:	69fb      	ldr	r3, [r7, #28]
 800fc32:	601a      	str	r2, [r3, #0]
    pDest++;
 800fc34:	69fb      	ldr	r3, [r7, #28]
 800fc36:	3304      	adds	r3, #4
 800fc38:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800fc3a:	69bb      	ldr	r3, [r7, #24]
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	61bb      	str	r3, [r7, #24]
 800fc40:	69ba      	ldr	r2, [r7, #24]
 800fc42:	693b      	ldr	r3, [r7, #16]
 800fc44:	429a      	cmp	r2, r3
 800fc46:	d3ef      	bcc.n	800fc28 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800fc48:	69fb      	ldr	r3, [r7, #28]
}
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	3724      	adds	r7, #36	; 0x24
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc54:	4770      	bx	lr

0800fc56 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fc56:	b480      	push	{r7}
 800fc58:	b085      	sub	sp, #20
 800fc5a:	af00      	add	r7, sp, #0
 800fc5c:	6078      	str	r0, [r7, #4]
 800fc5e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	781b      	ldrb	r3, [r3, #0]
 800fc68:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	785b      	ldrb	r3, [r3, #1]
 800fc6e:	2b01      	cmp	r3, #1
 800fc70:	d12c      	bne.n	800fccc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fc72:	68bb      	ldr	r3, [r7, #8]
 800fc74:	015a      	lsls	r2, r3, #5
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	4413      	add	r3, r2
 800fc7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	db12      	blt.n	800fcaa <USB_EPSetStall+0x54>
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d00f      	beq.n	800fcaa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	015a      	lsls	r2, r3, #5
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	4413      	add	r3, r2
 800fc92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	68ba      	ldr	r2, [r7, #8]
 800fc9a:	0151      	lsls	r1, r2, #5
 800fc9c:	68fa      	ldr	r2, [r7, #12]
 800fc9e:	440a      	add	r2, r1
 800fca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fca4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fca8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	015a      	lsls	r2, r3, #5
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	4413      	add	r3, r2
 800fcb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	68ba      	ldr	r2, [r7, #8]
 800fcba:	0151      	lsls	r1, r2, #5
 800fcbc:	68fa      	ldr	r2, [r7, #12]
 800fcbe:	440a      	add	r2, r1
 800fcc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fcc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fcc8:	6013      	str	r3, [r2, #0]
 800fcca:	e02b      	b.n	800fd24 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	015a      	lsls	r2, r3, #5
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	4413      	add	r3, r2
 800fcd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	db12      	blt.n	800fd04 <USB_EPSetStall+0xae>
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d00f      	beq.n	800fd04 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	015a      	lsls	r2, r3, #5
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	4413      	add	r3, r2
 800fcec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	68ba      	ldr	r2, [r7, #8]
 800fcf4:	0151      	lsls	r1, r2, #5
 800fcf6:	68fa      	ldr	r2, [r7, #12]
 800fcf8:	440a      	add	r2, r1
 800fcfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fcfe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fd02:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	015a      	lsls	r2, r3, #5
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	4413      	add	r3, r2
 800fd0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	68ba      	ldr	r2, [r7, #8]
 800fd14:	0151      	lsls	r1, r2, #5
 800fd16:	68fa      	ldr	r2, [r7, #12]
 800fd18:	440a      	add	r2, r1
 800fd1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fd22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fd24:	2300      	movs	r3, #0
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3714      	adds	r7, #20
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd30:	4770      	bx	lr

0800fd32 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fd32:	b480      	push	{r7}
 800fd34:	b085      	sub	sp, #20
 800fd36:	af00      	add	r7, sp, #0
 800fd38:	6078      	str	r0, [r7, #4]
 800fd3a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	781b      	ldrb	r3, [r3, #0]
 800fd44:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	785b      	ldrb	r3, [r3, #1]
 800fd4a:	2b01      	cmp	r3, #1
 800fd4c:	d128      	bne.n	800fda0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	015a      	lsls	r2, r3, #5
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	4413      	add	r3, r2
 800fd56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	68ba      	ldr	r2, [r7, #8]
 800fd5e:	0151      	lsls	r1, r2, #5
 800fd60:	68fa      	ldr	r2, [r7, #12]
 800fd62:	440a      	add	r2, r1
 800fd64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fd6c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fd6e:	683b      	ldr	r3, [r7, #0]
 800fd70:	78db      	ldrb	r3, [r3, #3]
 800fd72:	2b03      	cmp	r3, #3
 800fd74:	d003      	beq.n	800fd7e <USB_EPClearStall+0x4c>
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	78db      	ldrb	r3, [r3, #3]
 800fd7a:	2b02      	cmp	r3, #2
 800fd7c:	d138      	bne.n	800fdf0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	015a      	lsls	r2, r3, #5
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	4413      	add	r3, r2
 800fd86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	68ba      	ldr	r2, [r7, #8]
 800fd8e:	0151      	lsls	r1, r2, #5
 800fd90:	68fa      	ldr	r2, [r7, #12]
 800fd92:	440a      	add	r2, r1
 800fd94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd9c:	6013      	str	r3, [r2, #0]
 800fd9e:	e027      	b.n	800fdf0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	015a      	lsls	r2, r3, #5
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	4413      	add	r3, r2
 800fda8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	68ba      	ldr	r2, [r7, #8]
 800fdb0:	0151      	lsls	r1, r2, #5
 800fdb2:	68fa      	ldr	r2, [r7, #12]
 800fdb4:	440a      	add	r2, r1
 800fdb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fdbe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	78db      	ldrb	r3, [r3, #3]
 800fdc4:	2b03      	cmp	r3, #3
 800fdc6:	d003      	beq.n	800fdd0 <USB_EPClearStall+0x9e>
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	78db      	ldrb	r3, [r3, #3]
 800fdcc:	2b02      	cmp	r3, #2
 800fdce:	d10f      	bne.n	800fdf0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	015a      	lsls	r2, r3, #5
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	4413      	add	r3, r2
 800fdd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	68ba      	ldr	r2, [r7, #8]
 800fde0:	0151      	lsls	r1, r2, #5
 800fde2:	68fa      	ldr	r2, [r7, #12]
 800fde4:	440a      	add	r2, r1
 800fde6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fdee:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800fdf0:	2300      	movs	r3, #0
}
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	3714      	adds	r7, #20
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfc:	4770      	bx	lr

0800fdfe <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800fdfe:	b480      	push	{r7}
 800fe00:	b085      	sub	sp, #20
 800fe02:	af00      	add	r7, sp, #0
 800fe04:	6078      	str	r0, [r7, #4]
 800fe06:	460b      	mov	r3, r1
 800fe08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	68fa      	ldr	r2, [r7, #12]
 800fe18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fe1c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800fe20:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe28:	681a      	ldr	r2, [r3, #0]
 800fe2a:	78fb      	ldrb	r3, [r7, #3]
 800fe2c:	011b      	lsls	r3, r3, #4
 800fe2e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800fe32:	68f9      	ldr	r1, [r7, #12]
 800fe34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe38:	4313      	orrs	r3, r2
 800fe3a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800fe3c:	2300      	movs	r3, #0
}
 800fe3e:	4618      	mov	r0, r3
 800fe40:	3714      	adds	r7, #20
 800fe42:	46bd      	mov	sp, r7
 800fe44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe48:	4770      	bx	lr

0800fe4a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fe4a:	b480      	push	{r7}
 800fe4c:	b085      	sub	sp, #20
 800fe4e:	af00      	add	r7, sp, #0
 800fe50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	68fa      	ldr	r2, [r7, #12]
 800fe60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fe64:	f023 0303 	bic.w	r3, r3, #3
 800fe68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe70:	685b      	ldr	r3, [r3, #4]
 800fe72:	68fa      	ldr	r2, [r7, #12]
 800fe74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fe78:	f023 0302 	bic.w	r3, r3, #2
 800fe7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fe7e:	2300      	movs	r3, #0
}
 800fe80:	4618      	mov	r0, r3
 800fe82:	3714      	adds	r7, #20
 800fe84:	46bd      	mov	sp, r7
 800fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8a:	4770      	bx	lr

0800fe8c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fe8c:	b480      	push	{r7}
 800fe8e:	b085      	sub	sp, #20
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	68fa      	ldr	r2, [r7, #12]
 800fea2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fea6:	f023 0303 	bic.w	r3, r3, #3
 800feaa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800feb2:	685b      	ldr	r3, [r3, #4]
 800feb4:	68fa      	ldr	r2, [r7, #12]
 800feb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800feba:	f043 0302 	orr.w	r3, r3, #2
 800febe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fec0:	2300      	movs	r3, #0
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3714      	adds	r7, #20
 800fec6:	46bd      	mov	sp, r7
 800fec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fecc:	4770      	bx	lr

0800fece <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800fece:	b480      	push	{r7}
 800fed0:	b085      	sub	sp, #20
 800fed2:	af00      	add	r7, sp, #0
 800fed4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	695b      	ldr	r3, [r3, #20]
 800feda:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	699b      	ldr	r3, [r3, #24]
 800fee0:	68fa      	ldr	r2, [r7, #12]
 800fee2:	4013      	ands	r3, r2
 800fee4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800fee6:	68fb      	ldr	r3, [r7, #12]
}
 800fee8:	4618      	mov	r0, r3
 800feea:	3714      	adds	r7, #20
 800feec:	46bd      	mov	sp, r7
 800feee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef2:	4770      	bx	lr

0800fef4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fef4:	b480      	push	{r7}
 800fef6:	b085      	sub	sp, #20
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff06:	699b      	ldr	r3, [r3, #24]
 800ff08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff10:	69db      	ldr	r3, [r3, #28]
 800ff12:	68ba      	ldr	r2, [r7, #8]
 800ff14:	4013      	ands	r3, r2
 800ff16:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	0c1b      	lsrs	r3, r3, #16
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3714      	adds	r7, #20
 800ff20:	46bd      	mov	sp, r7
 800ff22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff26:	4770      	bx	lr

0800ff28 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ff28:	b480      	push	{r7}
 800ff2a:	b085      	sub	sp, #20
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff3a:	699b      	ldr	r3, [r3, #24]
 800ff3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff44:	69db      	ldr	r3, [r3, #28]
 800ff46:	68ba      	ldr	r2, [r7, #8]
 800ff48:	4013      	ands	r3, r2
 800ff4a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ff4c:	68bb      	ldr	r3, [r7, #8]
 800ff4e:	b29b      	uxth	r3, r3
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	3714      	adds	r7, #20
 800ff54:	46bd      	mov	sp, r7
 800ff56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5a:	4770      	bx	lr

0800ff5c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ff5c:	b480      	push	{r7}
 800ff5e:	b085      	sub	sp, #20
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
 800ff64:	460b      	mov	r3, r1
 800ff66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ff6c:	78fb      	ldrb	r3, [r7, #3]
 800ff6e:	015a      	lsls	r2, r3, #5
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	4413      	add	r3, r2
 800ff74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff78:	689b      	ldr	r3, [r3, #8]
 800ff7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff82:	695b      	ldr	r3, [r3, #20]
 800ff84:	68ba      	ldr	r2, [r7, #8]
 800ff86:	4013      	ands	r3, r2
 800ff88:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ff8a:	68bb      	ldr	r3, [r7, #8]
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3714      	adds	r7, #20
 800ff90:	46bd      	mov	sp, r7
 800ff92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff96:	4770      	bx	lr

0800ff98 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ff98:	b480      	push	{r7}
 800ff9a:	b087      	sub	sp, #28
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	460b      	mov	r3, r1
 800ffa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ffa8:	697b      	ldr	r3, [r7, #20]
 800ffaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffae:	691b      	ldr	r3, [r3, #16]
 800ffb0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffba:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ffbc:	78fb      	ldrb	r3, [r7, #3]
 800ffbe:	f003 030f 	and.w	r3, r3, #15
 800ffc2:	68fa      	ldr	r2, [r7, #12]
 800ffc4:	fa22 f303 	lsr.w	r3, r2, r3
 800ffc8:	01db      	lsls	r3, r3, #7
 800ffca:	b2db      	uxtb	r3, r3
 800ffcc:	693a      	ldr	r2, [r7, #16]
 800ffce:	4313      	orrs	r3, r2
 800ffd0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ffd2:	78fb      	ldrb	r3, [r7, #3]
 800ffd4:	015a      	lsls	r2, r3, #5
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	4413      	add	r3, r2
 800ffda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffde:	689b      	ldr	r3, [r3, #8]
 800ffe0:	693a      	ldr	r2, [r7, #16]
 800ffe2:	4013      	ands	r3, r2
 800ffe4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ffe6:	68bb      	ldr	r3, [r7, #8]
}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	371c      	adds	r7, #28
 800ffec:	46bd      	mov	sp, r7
 800ffee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff2:	4770      	bx	lr

0800fff4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fff4:	b480      	push	{r7}
 800fff6:	b083      	sub	sp, #12
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	695b      	ldr	r3, [r3, #20]
 8010000:	f003 0301 	and.w	r3, r3, #1
}
 8010004:	4618      	mov	r0, r3
 8010006:	370c      	adds	r7, #12
 8010008:	46bd      	mov	sp, r7
 801000a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000e:	4770      	bx	lr

08010010 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010010:	b480      	push	{r7}
 8010012:	b085      	sub	sp, #20
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	68fa      	ldr	r2, [r7, #12]
 8010026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801002a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801002e:	f023 0307 	bic.w	r3, r3, #7
 8010032:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801003a:	685b      	ldr	r3, [r3, #4]
 801003c:	68fa      	ldr	r2, [r7, #12]
 801003e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010046:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010048:	2300      	movs	r3, #0
}
 801004a:	4618      	mov	r0, r3
 801004c:	3714      	adds	r7, #20
 801004e:	46bd      	mov	sp, r7
 8010050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010054:	4770      	bx	lr
	...

08010058 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010058:	b480      	push	{r7}
 801005a:	b087      	sub	sp, #28
 801005c:	af00      	add	r7, sp, #0
 801005e:	60f8      	str	r0, [r7, #12]
 8010060:	460b      	mov	r3, r1
 8010062:	607a      	str	r2, [r7, #4]
 8010064:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	333c      	adds	r3, #60	; 0x3c
 801006e:	3304      	adds	r3, #4
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010074:	693b      	ldr	r3, [r7, #16]
 8010076:	4a26      	ldr	r2, [pc, #152]	; (8010110 <USB_EP0_OutStart+0xb8>)
 8010078:	4293      	cmp	r3, r2
 801007a:	d90a      	bls.n	8010092 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801007c:	697b      	ldr	r3, [r7, #20]
 801007e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010088:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801008c:	d101      	bne.n	8010092 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801008e:	2300      	movs	r3, #0
 8010090:	e037      	b.n	8010102 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010098:	461a      	mov	r2, r3
 801009a:	2300      	movs	r3, #0
 801009c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100a4:	691b      	ldr	r3, [r3, #16]
 80100a6:	697a      	ldr	r2, [r7, #20]
 80100a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80100ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80100b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100b8:	691b      	ldr	r3, [r3, #16]
 80100ba:	697a      	ldr	r2, [r7, #20]
 80100bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80100c0:	f043 0318 	orr.w	r3, r3, #24
 80100c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80100c6:	697b      	ldr	r3, [r7, #20]
 80100c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100cc:	691b      	ldr	r3, [r3, #16]
 80100ce:	697a      	ldr	r2, [r7, #20]
 80100d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80100d4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80100d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80100da:	7afb      	ldrb	r3, [r7, #11]
 80100dc:	2b01      	cmp	r3, #1
 80100de:	d10f      	bne.n	8010100 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100e6:	461a      	mov	r2, r3
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80100ec:	697b      	ldr	r3, [r7, #20]
 80100ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	697a      	ldr	r2, [r7, #20]
 80100f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80100fa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80100fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010100:	2300      	movs	r3, #0
}
 8010102:	4618      	mov	r0, r3
 8010104:	371c      	adds	r7, #28
 8010106:	46bd      	mov	sp, r7
 8010108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010c:	4770      	bx	lr
 801010e:	bf00      	nop
 8010110:	4f54300a 	.word	0x4f54300a

08010114 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010114:	b480      	push	{r7}
 8010116:	b085      	sub	sp, #20
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 801011c:	2300      	movs	r3, #0
 801011e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	3301      	adds	r3, #1
 8010124:	60fb      	str	r3, [r7, #12]
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	4a13      	ldr	r2, [pc, #76]	; (8010178 <USB_CoreReset+0x64>)
 801012a:	4293      	cmp	r3, r2
 801012c:	d901      	bls.n	8010132 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801012e:	2303      	movs	r3, #3
 8010130:	e01b      	b.n	801016a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	691b      	ldr	r3, [r3, #16]
 8010136:	2b00      	cmp	r3, #0
 8010138:	daf2      	bge.n	8010120 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801013a:	2300      	movs	r3, #0
 801013c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	691b      	ldr	r3, [r3, #16]
 8010142:	f043 0201 	orr.w	r2, r3, #1
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	3301      	adds	r3, #1
 801014e:	60fb      	str	r3, [r7, #12]
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	4a09      	ldr	r2, [pc, #36]	; (8010178 <USB_CoreReset+0x64>)
 8010154:	4293      	cmp	r3, r2
 8010156:	d901      	bls.n	801015c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010158:	2303      	movs	r3, #3
 801015a:	e006      	b.n	801016a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	691b      	ldr	r3, [r3, #16]
 8010160:	f003 0301 	and.w	r3, r3, #1
 8010164:	2b01      	cmp	r3, #1
 8010166:	d0f0      	beq.n	801014a <USB_CoreReset+0x36>

  return HAL_OK;
 8010168:	2300      	movs	r3, #0
}
 801016a:	4618      	mov	r0, r3
 801016c:	3714      	adds	r7, #20
 801016e:	46bd      	mov	sp, r7
 8010170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010174:	4770      	bx	lr
 8010176:	bf00      	nop
 8010178:	00030d40 	.word	0x00030d40

0801017c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b084      	sub	sp, #16
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
 8010184:	460b      	mov	r3, r1
 8010186:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010188:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801018c:	f005 f820 	bl	80151d0 <malloc>
 8010190:	4603      	mov	r3, r0
 8010192:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d105      	bne.n	80101a6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2200      	movs	r2, #0
 801019e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80101a2:	2302      	movs	r3, #2
 80101a4:	e066      	b.n	8010274 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	68fa      	ldr	r2, [r7, #12]
 80101aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	7c1b      	ldrb	r3, [r3, #16]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d119      	bne.n	80101ea <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80101b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80101ba:	2202      	movs	r2, #2
 80101bc:	2181      	movs	r1, #129	; 0x81
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	f004 fe8d 	bl	8014ede <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2201      	movs	r2, #1
 80101c8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80101ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80101ce:	2202      	movs	r2, #2
 80101d0:	2101      	movs	r1, #1
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f004 fe83 	bl	8014ede <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2201      	movs	r2, #1
 80101dc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2210      	movs	r2, #16
 80101e4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80101e8:	e016      	b.n	8010218 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80101ea:	2340      	movs	r3, #64	; 0x40
 80101ec:	2202      	movs	r2, #2
 80101ee:	2181      	movs	r1, #129	; 0x81
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	f004 fe74 	bl	8014ede <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2201      	movs	r2, #1
 80101fa:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80101fc:	2340      	movs	r3, #64	; 0x40
 80101fe:	2202      	movs	r2, #2
 8010200:	2101      	movs	r1, #1
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f004 fe6b 	bl	8014ede <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2201      	movs	r2, #1
 801020c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2210      	movs	r2, #16
 8010214:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010218:	2308      	movs	r3, #8
 801021a:	2203      	movs	r2, #3
 801021c:	2182      	movs	r1, #130	; 0x82
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	f004 fe5d 	bl	8014ede <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2201      	movs	r2, #1
 8010228:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	2200      	movs	r2, #0
 801023a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	2200      	movs	r2, #0
 8010242:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	7c1b      	ldrb	r3, [r3, #16]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d109      	bne.n	8010262 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010258:	2101      	movs	r1, #1
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f004 ff2e 	bl	80150bc <USBD_LL_PrepareReceive>
 8010260:	e007      	b.n	8010272 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010268:	2340      	movs	r3, #64	; 0x40
 801026a:	2101      	movs	r1, #1
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f004 ff25 	bl	80150bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010272:	2300      	movs	r3, #0
}
 8010274:	4618      	mov	r0, r3
 8010276:	3710      	adds	r7, #16
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}

0801027c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b084      	sub	sp, #16
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
 8010284:	460b      	mov	r3, r1
 8010286:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8010288:	2300      	movs	r3, #0
 801028a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801028c:	2181      	movs	r1, #129	; 0x81
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f004 fe4b 	bl	8014f2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2200      	movs	r2, #0
 8010298:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801029a:	2101      	movs	r1, #1
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	f004 fe44 	bl	8014f2a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2200      	movs	r2, #0
 80102a6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80102aa:	2182      	movs	r1, #130	; 0x82
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f004 fe3c 	bl	8014f2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2200      	movs	r2, #0
 80102b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2200      	movs	r2, #0
 80102be:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d00e      	beq.n	80102ea <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80102d2:	685b      	ldr	r3, [r3, #4]
 80102d4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80102dc:	4618      	mov	r0, r3
 80102de:	f004 ff7f 	bl	80151e0 <free>
    pdev->pClassData = NULL;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2200      	movs	r2, #0
 80102e6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80102ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3710      	adds	r7, #16
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}

080102f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b086      	sub	sp, #24
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
 80102fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010304:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8010306:	2300      	movs	r3, #0
 8010308:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 801030a:	2300      	movs	r3, #0
 801030c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 801030e:	2300      	movs	r3, #0
 8010310:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	781b      	ldrb	r3, [r3, #0]
 8010316:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801031a:	2b00      	cmp	r3, #0
 801031c:	d03a      	beq.n	8010394 <USBD_CDC_Setup+0xa0>
 801031e:	2b20      	cmp	r3, #32
 8010320:	f040 8097 	bne.w	8010452 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	88db      	ldrh	r3, [r3, #6]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d029      	beq.n	8010380 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	781b      	ldrb	r3, [r3, #0]
 8010330:	b25b      	sxtb	r3, r3
 8010332:	2b00      	cmp	r3, #0
 8010334:	da11      	bge.n	801035a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801033c:	689b      	ldr	r3, [r3, #8]
 801033e:	683a      	ldr	r2, [r7, #0]
 8010340:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8010342:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010344:	683a      	ldr	r2, [r7, #0]
 8010346:	88d2      	ldrh	r2, [r2, #6]
 8010348:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 801034a:	6939      	ldr	r1, [r7, #16]
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	88db      	ldrh	r3, [r3, #6]
 8010350:	461a      	mov	r2, r3
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f001 faac 	bl	80118b0 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8010358:	e082      	b.n	8010460 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	785a      	ldrb	r2, [r3, #1]
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	88db      	ldrh	r3, [r3, #6]
 8010368:	b2da      	uxtb	r2, r3
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010370:	6939      	ldr	r1, [r7, #16]
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	88db      	ldrh	r3, [r3, #6]
 8010376:	461a      	mov	r2, r3
 8010378:	6878      	ldr	r0, [r7, #4]
 801037a:	f001 fac5 	bl	8011908 <USBD_CtlPrepareRx>
    break;
 801037e:	e06f      	b.n	8010460 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010386:	689b      	ldr	r3, [r3, #8]
 8010388:	683a      	ldr	r2, [r7, #0]
 801038a:	7850      	ldrb	r0, [r2, #1]
 801038c:	2200      	movs	r2, #0
 801038e:	6839      	ldr	r1, [r7, #0]
 8010390:	4798      	blx	r3
    break;
 8010392:	e065      	b.n	8010460 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	785b      	ldrb	r3, [r3, #1]
 8010398:	2b0b      	cmp	r3, #11
 801039a:	d84f      	bhi.n	801043c <USBD_CDC_Setup+0x148>
 801039c:	a201      	add	r2, pc, #4	; (adr r2, 80103a4 <USBD_CDC_Setup+0xb0>)
 801039e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103a2:	bf00      	nop
 80103a4:	080103d5 	.word	0x080103d5
 80103a8:	0801044b 	.word	0x0801044b
 80103ac:	0801043d 	.word	0x0801043d
 80103b0:	0801043d 	.word	0x0801043d
 80103b4:	0801043d 	.word	0x0801043d
 80103b8:	0801043d 	.word	0x0801043d
 80103bc:	0801043d 	.word	0x0801043d
 80103c0:	0801043d 	.word	0x0801043d
 80103c4:	0801043d 	.word	0x0801043d
 80103c8:	0801043d 	.word	0x0801043d
 80103cc:	080103fd 	.word	0x080103fd
 80103d0:	08010425 	.word	0x08010425
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103da:	2b03      	cmp	r3, #3
 80103dc:	d107      	bne.n	80103ee <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80103de:	f107 030c 	add.w	r3, r7, #12
 80103e2:	2202      	movs	r2, #2
 80103e4:	4619      	mov	r1, r3
 80103e6:	6878      	ldr	r0, [r7, #4]
 80103e8:	f001 fa62 	bl	80118b0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80103ec:	e030      	b.n	8010450 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80103ee:	6839      	ldr	r1, [r7, #0]
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	f001 f9ec 	bl	80117ce <USBD_CtlError>
        ret = USBD_FAIL;
 80103f6:	2303      	movs	r3, #3
 80103f8:	75fb      	strb	r3, [r7, #23]
      break;
 80103fa:	e029      	b.n	8010450 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010402:	2b03      	cmp	r3, #3
 8010404:	d107      	bne.n	8010416 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010406:	f107 030f 	add.w	r3, r7, #15
 801040a:	2201      	movs	r2, #1
 801040c:	4619      	mov	r1, r3
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f001 fa4e 	bl	80118b0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010414:	e01c      	b.n	8010450 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8010416:	6839      	ldr	r1, [r7, #0]
 8010418:	6878      	ldr	r0, [r7, #4]
 801041a:	f001 f9d8 	bl	80117ce <USBD_CtlError>
        ret = USBD_FAIL;
 801041e:	2303      	movs	r3, #3
 8010420:	75fb      	strb	r3, [r7, #23]
      break;
 8010422:	e015      	b.n	8010450 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801042a:	2b03      	cmp	r3, #3
 801042c:	d00f      	beq.n	801044e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 801042e:	6839      	ldr	r1, [r7, #0]
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	f001 f9cc 	bl	80117ce <USBD_CtlError>
        ret = USBD_FAIL;
 8010436:	2303      	movs	r3, #3
 8010438:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801043a:	e008      	b.n	801044e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 801043c:	6839      	ldr	r1, [r7, #0]
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f001 f9c5 	bl	80117ce <USBD_CtlError>
      ret = USBD_FAIL;
 8010444:	2303      	movs	r3, #3
 8010446:	75fb      	strb	r3, [r7, #23]
      break;
 8010448:	e002      	b.n	8010450 <USBD_CDC_Setup+0x15c>
      break;
 801044a:	bf00      	nop
 801044c:	e008      	b.n	8010460 <USBD_CDC_Setup+0x16c>
      break;
 801044e:	bf00      	nop
    }
    break;
 8010450:	e006      	b.n	8010460 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8010452:	6839      	ldr	r1, [r7, #0]
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f001 f9ba 	bl	80117ce <USBD_CtlError>
    ret = USBD_FAIL;
 801045a:	2303      	movs	r3, #3
 801045c:	75fb      	strb	r3, [r7, #23]
    break;
 801045e:	bf00      	nop
  }

  return (uint8_t)ret;
 8010460:	7dfb      	ldrb	r3, [r7, #23]
}
 8010462:	4618      	mov	r0, r3
 8010464:	3718      	adds	r7, #24
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}
 801046a:	bf00      	nop

0801046c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b084      	sub	sp, #16
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
 8010474:	460b      	mov	r3, r1
 8010476:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801047e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010486:	2b00      	cmp	r3, #0
 8010488:	d101      	bne.n	801048e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801048a:	2303      	movs	r3, #3
 801048c:	e049      	b.n	8010522 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010494:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010496:	78fa      	ldrb	r2, [r7, #3]
 8010498:	6879      	ldr	r1, [r7, #4]
 801049a:	4613      	mov	r3, r2
 801049c:	009b      	lsls	r3, r3, #2
 801049e:	4413      	add	r3, r2
 80104a0:	009b      	lsls	r3, r3, #2
 80104a2:	440b      	add	r3, r1
 80104a4:	3318      	adds	r3, #24
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d029      	beq.n	8010500 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80104ac:	78fa      	ldrb	r2, [r7, #3]
 80104ae:	6879      	ldr	r1, [r7, #4]
 80104b0:	4613      	mov	r3, r2
 80104b2:	009b      	lsls	r3, r3, #2
 80104b4:	4413      	add	r3, r2
 80104b6:	009b      	lsls	r3, r3, #2
 80104b8:	440b      	add	r3, r1
 80104ba:	3318      	adds	r3, #24
 80104bc:	681a      	ldr	r2, [r3, #0]
 80104be:	78f9      	ldrb	r1, [r7, #3]
 80104c0:	68f8      	ldr	r0, [r7, #12]
 80104c2:	460b      	mov	r3, r1
 80104c4:	00db      	lsls	r3, r3, #3
 80104c6:	1a5b      	subs	r3, r3, r1
 80104c8:	009b      	lsls	r3, r3, #2
 80104ca:	4403      	add	r3, r0
 80104cc:	3344      	adds	r3, #68	; 0x44
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80104d4:	fb03 f301 	mul.w	r3, r3, r1
 80104d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d110      	bne.n	8010500 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80104de:	78fa      	ldrb	r2, [r7, #3]
 80104e0:	6879      	ldr	r1, [r7, #4]
 80104e2:	4613      	mov	r3, r2
 80104e4:	009b      	lsls	r3, r3, #2
 80104e6:	4413      	add	r3, r2
 80104e8:	009b      	lsls	r3, r3, #2
 80104ea:	440b      	add	r3, r1
 80104ec:	3318      	adds	r3, #24
 80104ee:	2200      	movs	r2, #0
 80104f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80104f2:	78f9      	ldrb	r1, [r7, #3]
 80104f4:	2300      	movs	r3, #0
 80104f6:	2200      	movs	r2, #0
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f004 fdbe 	bl	801507a <USBD_LL_Transmit>
 80104fe:	e00f      	b.n	8010520 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010500:	68bb      	ldr	r3, [r7, #8]
 8010502:	2200      	movs	r2, #0
 8010504:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801050e:	691b      	ldr	r3, [r3, #16]
 8010510:	68ba      	ldr	r2, [r7, #8]
 8010512:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010516:	68ba      	ldr	r2, [r7, #8]
 8010518:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801051c:	78fa      	ldrb	r2, [r7, #3]
 801051e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8010520:	2300      	movs	r3, #0
}
 8010522:	4618      	mov	r0, r3
 8010524:	3710      	adds	r7, #16
 8010526:	46bd      	mov	sp, r7
 8010528:	bd80      	pop	{r7, pc}

0801052a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801052a:	b580      	push	{r7, lr}
 801052c:	b084      	sub	sp, #16
 801052e:	af00      	add	r7, sp, #0
 8010530:	6078      	str	r0, [r7, #4]
 8010532:	460b      	mov	r3, r1
 8010534:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801053c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010544:	2b00      	cmp	r3, #0
 8010546:	d101      	bne.n	801054c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010548:	2303      	movs	r3, #3
 801054a:	e015      	b.n	8010578 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801054c:	78fb      	ldrb	r3, [r7, #3]
 801054e:	4619      	mov	r1, r3
 8010550:	6878      	ldr	r0, [r7, #4]
 8010552:	f004 fdd4 	bl	80150fe <USBD_LL_GetRxDataSize>
 8010556:	4602      	mov	r2, r0
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010564:	68db      	ldr	r3, [r3, #12]
 8010566:	68fa      	ldr	r2, [r7, #12]
 8010568:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801056c:	68fa      	ldr	r2, [r7, #12]
 801056e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010572:	4611      	mov	r1, r2
 8010574:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010576:	2300      	movs	r3, #0
}
 8010578:	4618      	mov	r0, r3
 801057a:	3710      	adds	r7, #16
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}

08010580 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b084      	sub	sp, #16
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801058e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010596:	2b00      	cmp	r3, #0
 8010598:	d015      	beq.n	80105c6 <USBD_CDC_EP0_RxReady+0x46>
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80105a0:	2bff      	cmp	r3, #255	; 0xff
 80105a2:	d010      	beq.n	80105c6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80105aa:	689b      	ldr	r3, [r3, #8]
 80105ac:	68fa      	ldr	r2, [r7, #12]
 80105ae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80105b2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80105b4:	68fa      	ldr	r2, [r7, #12]
 80105b6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80105ba:	b292      	uxth	r2, r2
 80105bc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	22ff      	movs	r2, #255	; 0xff
 80105c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80105c6:	2300      	movs	r3, #0
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	3710      	adds	r7, #16
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}

080105d0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80105d0:	b480      	push	{r7}
 80105d2:	b083      	sub	sp, #12
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2243      	movs	r2, #67	; 0x43
 80105dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80105de:	4b03      	ldr	r3, [pc, #12]	; (80105ec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80105e0:	4618      	mov	r0, r3
 80105e2:	370c      	adds	r7, #12
 80105e4:	46bd      	mov	sp, r7
 80105e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ea:	4770      	bx	lr
 80105ec:	20004120 	.word	0x20004120

080105f0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80105f0:	b480      	push	{r7}
 80105f2:	b083      	sub	sp, #12
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2243      	movs	r2, #67	; 0x43
 80105fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80105fe:	4b03      	ldr	r3, [pc, #12]	; (801060c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010600:	4618      	mov	r0, r3
 8010602:	370c      	adds	r7, #12
 8010604:	46bd      	mov	sp, r7
 8010606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060a:	4770      	bx	lr
 801060c:	200040dc 	.word	0x200040dc

08010610 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010610:	b480      	push	{r7}
 8010612:	b083      	sub	sp, #12
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2243      	movs	r2, #67	; 0x43
 801061c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801061e:	4b03      	ldr	r3, [pc, #12]	; (801062c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010620:	4618      	mov	r0, r3
 8010622:	370c      	adds	r7, #12
 8010624:	46bd      	mov	sp, r7
 8010626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062a:	4770      	bx	lr
 801062c:	20004164 	.word	0x20004164

08010630 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010630:	b480      	push	{r7}
 8010632:	b083      	sub	sp, #12
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	220a      	movs	r2, #10
 801063c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801063e:	4b03      	ldr	r3, [pc, #12]	; (801064c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010640:	4618      	mov	r0, r3
 8010642:	370c      	adds	r7, #12
 8010644:	46bd      	mov	sp, r7
 8010646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064a:	4770      	bx	lr
 801064c:	20004098 	.word	0x20004098

08010650 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010650:	b480      	push	{r7}
 8010652:	b083      	sub	sp, #12
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
 8010658:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d101      	bne.n	8010664 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010660:	2303      	movs	r3, #3
 8010662:	e004      	b.n	801066e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	683a      	ldr	r2, [r7, #0]
 8010668:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801066c:	2300      	movs	r3, #0
}
 801066e:	4618      	mov	r0, r3
 8010670:	370c      	adds	r7, #12
 8010672:	46bd      	mov	sp, r7
 8010674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010678:	4770      	bx	lr

0801067a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801067a:	b480      	push	{r7}
 801067c:	b087      	sub	sp, #28
 801067e:	af00      	add	r7, sp, #0
 8010680:	60f8      	str	r0, [r7, #12]
 8010682:	60b9      	str	r1, [r7, #8]
 8010684:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801068c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801068e:	697b      	ldr	r3, [r7, #20]
 8010690:	68ba      	ldr	r2, [r7, #8]
 8010692:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	687a      	ldr	r2, [r7, #4]
 801069a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801069e:	2300      	movs	r3, #0
}
 80106a0:	4618      	mov	r0, r3
 80106a2:	371c      	adds	r7, #28
 80106a4:	46bd      	mov	sp, r7
 80106a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106aa:	4770      	bx	lr

080106ac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80106ac:	b480      	push	{r7}
 80106ae:	b085      	sub	sp, #20
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
 80106b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80106bc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	683a      	ldr	r2, [r7, #0]
 80106c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80106c6:	2300      	movs	r3, #0
}
 80106c8:	4618      	mov	r0, r3
 80106ca:	3714      	adds	r7, #20
 80106cc:	46bd      	mov	sp, r7
 80106ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d2:	4770      	bx	lr

080106d4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b084      	sub	sp, #16
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80106e2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80106e4:	2301      	movs	r3, #1
 80106e6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d101      	bne.n	80106f6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80106f2:	2303      	movs	r3, #3
 80106f4:	e01a      	b.n	801072c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80106f6:	68bb      	ldr	r3, [r7, #8]
 80106f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d114      	bne.n	801072a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	2201      	movs	r2, #1
 8010704:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8010712:	68bb      	ldr	r3, [r7, #8]
 8010714:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801071e:	2181      	movs	r1, #129	; 0x81
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	f004 fcaa 	bl	801507a <USBD_LL_Transmit>

    ret = USBD_OK;
 8010726:	2300      	movs	r3, #0
 8010728:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801072a:	7bfb      	ldrb	r3, [r7, #15]
}
 801072c:	4618      	mov	r0, r3
 801072e:	3710      	adds	r7, #16
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}

08010734 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b084      	sub	sp, #16
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010742:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801074a:	2b00      	cmp	r3, #0
 801074c:	d101      	bne.n	8010752 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801074e:	2303      	movs	r3, #3
 8010750:	e016      	b.n	8010780 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	7c1b      	ldrb	r3, [r3, #16]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d109      	bne.n	801076e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010760:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010764:	2101      	movs	r1, #1
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f004 fca8 	bl	80150bc <USBD_LL_PrepareReceive>
 801076c:	e007      	b.n	801077e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010774:	2340      	movs	r3, #64	; 0x40
 8010776:	2101      	movs	r1, #1
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	f004 fc9f 	bl	80150bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801077e:	2300      	movs	r3, #0
}
 8010780:	4618      	mov	r0, r3
 8010782:	3710      	adds	r7, #16
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}

08010788 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b086      	sub	sp, #24
 801078c:	af00      	add	r7, sp, #0
 801078e:	60f8      	str	r0, [r7, #12]
 8010790:	60b9      	str	r1, [r7, #8]
 8010792:	4613      	mov	r3, r2
 8010794:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d101      	bne.n	80107a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801079c:	2303      	movs	r3, #3
 801079e:	e025      	b.n	80107ec <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d003      	beq.n	80107b2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	2200      	movs	r2, #0
 80107ae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d003      	beq.n	80107c4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	2200      	movs	r2, #0
 80107c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d003      	beq.n	80107d2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	68ba      	ldr	r2, [r7, #8]
 80107ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	2201      	movs	r2, #1
 80107d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	79fa      	ldrb	r2, [r7, #7]
 80107de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80107e0:	68f8      	ldr	r0, [r7, #12]
 80107e2:	f004 fb15 	bl	8014e10 <USBD_LL_Init>
 80107e6:	4603      	mov	r3, r0
 80107e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80107ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3718      	adds	r7, #24
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}

080107f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b084      	sub	sp, #16
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80107fe:	2300      	movs	r3, #0
 8010800:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d101      	bne.n	801080c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8010808:	2303      	movs	r3, #3
 801080a:	e010      	b.n	801082e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	683a      	ldr	r2, [r7, #0]
 8010810:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801081a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801081c:	f107 020e 	add.w	r2, r7, #14
 8010820:	4610      	mov	r0, r2
 8010822:	4798      	blx	r3
 8010824:	4602      	mov	r2, r0
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 801082c:	2300      	movs	r3, #0
}
 801082e:	4618      	mov	r0, r3
 8010830:	3710      	adds	r7, #16
 8010832:	46bd      	mov	sp, r7
 8010834:	bd80      	pop	{r7, pc}

08010836 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010836:	b580      	push	{r7, lr}
 8010838:	b082      	sub	sp, #8
 801083a:	af00      	add	r7, sp, #0
 801083c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f004 fb32 	bl	8014ea8 <USBD_LL_Start>
 8010844:	4603      	mov	r3, r0
}
 8010846:	4618      	mov	r0, r3
 8010848:	3708      	adds	r7, #8
 801084a:	46bd      	mov	sp, r7
 801084c:	bd80      	pop	{r7, pc}

0801084e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801084e:	b480      	push	{r7}
 8010850:	b083      	sub	sp, #12
 8010852:	af00      	add	r7, sp, #0
 8010854:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010856:	2300      	movs	r3, #0
}
 8010858:	4618      	mov	r0, r3
 801085a:	370c      	adds	r7, #12
 801085c:	46bd      	mov	sp, r7
 801085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010862:	4770      	bx	lr

08010864 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b084      	sub	sp, #16
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	460b      	mov	r3, r1
 801086e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010870:	2303      	movs	r3, #3
 8010872:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801087a:	2b00      	cmp	r3, #0
 801087c:	d009      	beq.n	8010892 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	78fa      	ldrb	r2, [r7, #3]
 8010888:	4611      	mov	r1, r2
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	4798      	blx	r3
 801088e:	4603      	mov	r3, r0
 8010890:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010892:	7bfb      	ldrb	r3, [r7, #15]
}
 8010894:	4618      	mov	r0, r3
 8010896:	3710      	adds	r7, #16
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}

0801089c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b082      	sub	sp, #8
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
 80108a4:	460b      	mov	r3, r1
 80108a6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d007      	beq.n	80108c2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108b8:	685b      	ldr	r3, [r3, #4]
 80108ba:	78fa      	ldrb	r2, [r7, #3]
 80108bc:	4611      	mov	r1, r2
 80108be:	6878      	ldr	r0, [r7, #4]
 80108c0:	4798      	blx	r3
  }

  return USBD_OK;
 80108c2:	2300      	movs	r3, #0
}
 80108c4:	4618      	mov	r0, r3
 80108c6:	3708      	adds	r7, #8
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}

080108cc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b084      	sub	sp, #16
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
 80108d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80108dc:	6839      	ldr	r1, [r7, #0]
 80108de:	4618      	mov	r0, r3
 80108e0:	f000 ff3b 	bl	801175a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2201      	movs	r2, #1
 80108e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80108f2:	461a      	mov	r2, r3
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010900:	f003 031f 	and.w	r3, r3, #31
 8010904:	2b02      	cmp	r3, #2
 8010906:	d01a      	beq.n	801093e <USBD_LL_SetupStage+0x72>
 8010908:	2b02      	cmp	r3, #2
 801090a:	d822      	bhi.n	8010952 <USBD_LL_SetupStage+0x86>
 801090c:	2b00      	cmp	r3, #0
 801090e:	d002      	beq.n	8010916 <USBD_LL_SetupStage+0x4a>
 8010910:	2b01      	cmp	r3, #1
 8010912:	d00a      	beq.n	801092a <USBD_LL_SetupStage+0x5e>
 8010914:	e01d      	b.n	8010952 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801091c:	4619      	mov	r1, r3
 801091e:	6878      	ldr	r0, [r7, #4]
 8010920:	f000 fa18 	bl	8010d54 <USBD_StdDevReq>
 8010924:	4603      	mov	r3, r0
 8010926:	73fb      	strb	r3, [r7, #15]
      break;
 8010928:	e020      	b.n	801096c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010930:	4619      	mov	r1, r3
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f000 fa7c 	bl	8010e30 <USBD_StdItfReq>
 8010938:	4603      	mov	r3, r0
 801093a:	73fb      	strb	r3, [r7, #15]
      break;
 801093c:	e016      	b.n	801096c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010944:	4619      	mov	r1, r3
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	f000 faba 	bl	8010ec0 <USBD_StdEPReq>
 801094c:	4603      	mov	r3, r0
 801094e:	73fb      	strb	r3, [r7, #15]
      break;
 8010950:	e00c      	b.n	801096c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010958:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801095c:	b2db      	uxtb	r3, r3
 801095e:	4619      	mov	r1, r3
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f004 fb01 	bl	8014f68 <USBD_LL_StallEP>
 8010966:	4603      	mov	r3, r0
 8010968:	73fb      	strb	r3, [r7, #15]
      break;
 801096a:	bf00      	nop
  }

  return ret;
 801096c:	7bfb      	ldrb	r3, [r7, #15]
}
 801096e:	4618      	mov	r0, r3
 8010970:	3710      	adds	r7, #16
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}

08010976 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010976:	b580      	push	{r7, lr}
 8010978:	b086      	sub	sp, #24
 801097a:	af00      	add	r7, sp, #0
 801097c:	60f8      	str	r0, [r7, #12]
 801097e:	460b      	mov	r3, r1
 8010980:	607a      	str	r2, [r7, #4]
 8010982:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010984:	7afb      	ldrb	r3, [r7, #11]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d137      	bne.n	80109fa <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010990:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010998:	2b03      	cmp	r3, #3
 801099a:	d14a      	bne.n	8010a32 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801099c:	693b      	ldr	r3, [r7, #16]
 801099e:	689a      	ldr	r2, [r3, #8]
 80109a0:	693b      	ldr	r3, [r7, #16]
 80109a2:	68db      	ldr	r3, [r3, #12]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d913      	bls.n	80109d0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80109a8:	693b      	ldr	r3, [r7, #16]
 80109aa:	689a      	ldr	r2, [r3, #8]
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	68db      	ldr	r3, [r3, #12]
 80109b0:	1ad2      	subs	r2, r2, r3
 80109b2:	693b      	ldr	r3, [r7, #16]
 80109b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80109b6:	693b      	ldr	r3, [r7, #16]
 80109b8:	68da      	ldr	r2, [r3, #12]
 80109ba:	693b      	ldr	r3, [r7, #16]
 80109bc:	689b      	ldr	r3, [r3, #8]
 80109be:	4293      	cmp	r3, r2
 80109c0:	bf28      	it	cs
 80109c2:	4613      	movcs	r3, r2
 80109c4:	461a      	mov	r2, r3
 80109c6:	6879      	ldr	r1, [r7, #4]
 80109c8:	68f8      	ldr	r0, [r7, #12]
 80109ca:	f000 ffba 	bl	8011942 <USBD_CtlContinueRx>
 80109ce:	e030      	b.n	8010a32 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109d6:	691b      	ldr	r3, [r3, #16]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d00a      	beq.n	80109f2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80109e2:	2b03      	cmp	r3, #3
 80109e4:	d105      	bne.n	80109f2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109ec:	691b      	ldr	r3, [r3, #16]
 80109ee:	68f8      	ldr	r0, [r7, #12]
 80109f0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80109f2:	68f8      	ldr	r0, [r7, #12]
 80109f4:	f000 ffb6 	bl	8011964 <USBD_CtlSendStatus>
 80109f8:	e01b      	b.n	8010a32 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a00:	699b      	ldr	r3, [r3, #24]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d013      	beq.n	8010a2e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8010a0c:	2b03      	cmp	r3, #3
 8010a0e:	d10e      	bne.n	8010a2e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a16:	699b      	ldr	r3, [r3, #24]
 8010a18:	7afa      	ldrb	r2, [r7, #11]
 8010a1a:	4611      	mov	r1, r2
 8010a1c:	68f8      	ldr	r0, [r7, #12]
 8010a1e:	4798      	blx	r3
 8010a20:	4603      	mov	r3, r0
 8010a22:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8010a24:	7dfb      	ldrb	r3, [r7, #23]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d003      	beq.n	8010a32 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8010a2a:	7dfb      	ldrb	r3, [r7, #23]
 8010a2c:	e002      	b.n	8010a34 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010a2e:	2303      	movs	r3, #3
 8010a30:	e000      	b.n	8010a34 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8010a32:	2300      	movs	r3, #0
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	3718      	adds	r7, #24
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}

08010a3c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b086      	sub	sp, #24
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	60f8      	str	r0, [r7, #12]
 8010a44:	460b      	mov	r3, r1
 8010a46:	607a      	str	r2, [r7, #4]
 8010a48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010a4a:	7afb      	ldrb	r3, [r7, #11]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d16a      	bne.n	8010b26 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	3314      	adds	r3, #20
 8010a54:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010a5c:	2b02      	cmp	r3, #2
 8010a5e:	d155      	bne.n	8010b0c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8010a60:	693b      	ldr	r3, [r7, #16]
 8010a62:	689a      	ldr	r2, [r3, #8]
 8010a64:	693b      	ldr	r3, [r7, #16]
 8010a66:	68db      	ldr	r3, [r3, #12]
 8010a68:	429a      	cmp	r2, r3
 8010a6a:	d914      	bls.n	8010a96 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010a6c:	693b      	ldr	r3, [r7, #16]
 8010a6e:	689a      	ldr	r2, [r3, #8]
 8010a70:	693b      	ldr	r3, [r7, #16]
 8010a72:	68db      	ldr	r3, [r3, #12]
 8010a74:	1ad2      	subs	r2, r2, r3
 8010a76:	693b      	ldr	r3, [r7, #16]
 8010a78:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010a7a:	693b      	ldr	r3, [r7, #16]
 8010a7c:	689b      	ldr	r3, [r3, #8]
 8010a7e:	461a      	mov	r2, r3
 8010a80:	6879      	ldr	r1, [r7, #4]
 8010a82:	68f8      	ldr	r0, [r7, #12]
 8010a84:	f000 ff2f 	bl	80118e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010a88:	2300      	movs	r3, #0
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	2100      	movs	r1, #0
 8010a8e:	68f8      	ldr	r0, [r7, #12]
 8010a90:	f004 fb14 	bl	80150bc <USBD_LL_PrepareReceive>
 8010a94:	e03a      	b.n	8010b0c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010a96:	693b      	ldr	r3, [r7, #16]
 8010a98:	68da      	ldr	r2, [r3, #12]
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	689b      	ldr	r3, [r3, #8]
 8010a9e:	429a      	cmp	r2, r3
 8010aa0:	d11c      	bne.n	8010adc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010aa2:	693b      	ldr	r3, [r7, #16]
 8010aa4:	685a      	ldr	r2, [r3, #4]
 8010aa6:	693b      	ldr	r3, [r7, #16]
 8010aa8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010aaa:	429a      	cmp	r2, r3
 8010aac:	d316      	bcc.n	8010adc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010aae:	693b      	ldr	r3, [r7, #16]
 8010ab0:	685a      	ldr	r2, [r3, #4]
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010ab8:	429a      	cmp	r2, r3
 8010aba:	d20f      	bcs.n	8010adc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010abc:	2200      	movs	r2, #0
 8010abe:	2100      	movs	r1, #0
 8010ac0:	68f8      	ldr	r0, [r7, #12]
 8010ac2:	f000 ff10 	bl	80118e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010ace:	2300      	movs	r3, #0
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	2100      	movs	r1, #0
 8010ad4:	68f8      	ldr	r0, [r7, #12]
 8010ad6:	f004 faf1 	bl	80150bc <USBD_LL_PrepareReceive>
 8010ada:	e017      	b.n	8010b0c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ae2:	68db      	ldr	r3, [r3, #12]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d00a      	beq.n	8010afe <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8010aee:	2b03      	cmp	r3, #3
 8010af0:	d105      	bne.n	8010afe <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010af8:	68db      	ldr	r3, [r3, #12]
 8010afa:	68f8      	ldr	r0, [r7, #12]
 8010afc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010afe:	2180      	movs	r1, #128	; 0x80
 8010b00:	68f8      	ldr	r0, [r7, #12]
 8010b02:	f004 fa31 	bl	8014f68 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010b06:	68f8      	ldr	r0, [r7, #12]
 8010b08:	f000 ff3f 	bl	801198a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010b12:	2b01      	cmp	r3, #1
 8010b14:	d123      	bne.n	8010b5e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8010b16:	68f8      	ldr	r0, [r7, #12]
 8010b18:	f7ff fe99 	bl	801084e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	2200      	movs	r2, #0
 8010b20:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010b24:	e01b      	b.n	8010b5e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b2c:	695b      	ldr	r3, [r3, #20]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d013      	beq.n	8010b5a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8010b38:	2b03      	cmp	r3, #3
 8010b3a:	d10e      	bne.n	8010b5a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b42:	695b      	ldr	r3, [r3, #20]
 8010b44:	7afa      	ldrb	r2, [r7, #11]
 8010b46:	4611      	mov	r1, r2
 8010b48:	68f8      	ldr	r0, [r7, #12]
 8010b4a:	4798      	blx	r3
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8010b50:	7dfb      	ldrb	r3, [r7, #23]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d003      	beq.n	8010b5e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8010b56:	7dfb      	ldrb	r3, [r7, #23]
 8010b58:	e002      	b.n	8010b60 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010b5a:	2303      	movs	r3, #3
 8010b5c:	e000      	b.n	8010b60 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8010b5e:	2300      	movs	r3, #0
}
 8010b60:	4618      	mov	r0, r3
 8010b62:	3718      	adds	r7, #24
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bd80      	pop	{r7, pc}

08010b68 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b082      	sub	sp, #8
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2201      	movs	r2, #1
 8010b74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2200      	movs	r2, #0
 8010b84:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2200      	movs	r2, #0
 8010b8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d009      	beq.n	8010bac <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b9e:	685b      	ldr	r3, [r3, #4]
 8010ba0:	687a      	ldr	r2, [r7, #4]
 8010ba2:	6852      	ldr	r2, [r2, #4]
 8010ba4:	b2d2      	uxtb	r2, r2
 8010ba6:	4611      	mov	r1, r2
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010bac:	2340      	movs	r3, #64	; 0x40
 8010bae:	2200      	movs	r2, #0
 8010bb0:	2100      	movs	r1, #0
 8010bb2:	6878      	ldr	r0, [r7, #4]
 8010bb4:	f004 f993 	bl	8014ede <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	2201      	movs	r2, #1
 8010bbc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2240      	movs	r2, #64	; 0x40
 8010bc4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010bc8:	2340      	movs	r3, #64	; 0x40
 8010bca:	2200      	movs	r2, #0
 8010bcc:	2180      	movs	r1, #128	; 0x80
 8010bce:	6878      	ldr	r0, [r7, #4]
 8010bd0:	f004 f985 	bl	8014ede <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	2201      	movs	r2, #1
 8010bd8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	2240      	movs	r2, #64	; 0x40
 8010bde:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8010be0:	2300      	movs	r3, #0
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	3708      	adds	r7, #8
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}

08010bea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010bea:	b480      	push	{r7}
 8010bec:	b083      	sub	sp, #12
 8010bee:	af00      	add	r7, sp, #0
 8010bf0:	6078      	str	r0, [r7, #4]
 8010bf2:	460b      	mov	r3, r1
 8010bf4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	78fa      	ldrb	r2, [r7, #3]
 8010bfa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010bfc:	2300      	movs	r3, #0
}
 8010bfe:	4618      	mov	r0, r3
 8010c00:	370c      	adds	r7, #12
 8010c02:	46bd      	mov	sp, r7
 8010c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c08:	4770      	bx	lr

08010c0a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010c0a:	b480      	push	{r7}
 8010c0c:	b083      	sub	sp, #12
 8010c0e:	af00      	add	r7, sp, #0
 8010c10:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2204      	movs	r2, #4
 8010c22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010c26:	2300      	movs	r3, #0
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	370c      	adds	r7, #12
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c32:	4770      	bx	lr

08010c34 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010c34:	b480      	push	{r7}
 8010c36:	b083      	sub	sp, #12
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c42:	2b04      	cmp	r3, #4
 8010c44:	d105      	bne.n	8010c52 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010c52:	2300      	movs	r3, #0
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	370c      	adds	r7, #12
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5e:	4770      	bx	lr

08010c60 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b082      	sub	sp, #8
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c6e:	2b03      	cmp	r3, #3
 8010c70:	d10b      	bne.n	8010c8a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c78:	69db      	ldr	r3, [r3, #28]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d005      	beq.n	8010c8a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c84:	69db      	ldr	r3, [r3, #28]
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010c8a:	2300      	movs	r3, #0
}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3708      	adds	r7, #8
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}

08010c94 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010c94:	b480      	push	{r7}
 8010c96:	b083      	sub	sp, #12
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
 8010c9c:	460b      	mov	r3, r1
 8010c9e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010ca0:	2300      	movs	r3, #0
}
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	370c      	adds	r7, #12
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cac:	4770      	bx	lr

08010cae <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010cae:	b480      	push	{r7}
 8010cb0:	b083      	sub	sp, #12
 8010cb2:	af00      	add	r7, sp, #0
 8010cb4:	6078      	str	r0, [r7, #4]
 8010cb6:	460b      	mov	r3, r1
 8010cb8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010cba:	2300      	movs	r3, #0
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	370c      	adds	r7, #12
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc6:	4770      	bx	lr

08010cc8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010cc8:	b480      	push	{r7}
 8010cca:	b083      	sub	sp, #12
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010cd0:	2300      	movs	r3, #0
}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	370c      	adds	r7, #12
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cdc:	4770      	bx	lr

08010cde <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010cde:	b580      	push	{r7, lr}
 8010ce0:	b082      	sub	sp, #8
 8010ce2:	af00      	add	r7, sp, #0
 8010ce4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	2201      	movs	r2, #1
 8010cea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d009      	beq.n	8010d0c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cfe:	685b      	ldr	r3, [r3, #4]
 8010d00:	687a      	ldr	r2, [r7, #4]
 8010d02:	6852      	ldr	r2, [r2, #4]
 8010d04:	b2d2      	uxtb	r2, r2
 8010d06:	4611      	mov	r1, r2
 8010d08:	6878      	ldr	r0, [r7, #4]
 8010d0a:	4798      	blx	r3
  }

  return USBD_OK;
 8010d0c:	2300      	movs	r3, #0
}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3708      	adds	r7, #8
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}

08010d16 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010d16:	b480      	push	{r7}
 8010d18:	b087      	sub	sp, #28
 8010d1a:	af00      	add	r7, sp, #0
 8010d1c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010d22:	697b      	ldr	r3, [r7, #20]
 8010d24:	781b      	ldrb	r3, [r3, #0]
 8010d26:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	3301      	adds	r3, #1
 8010d2c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010d2e:	697b      	ldr	r3, [r7, #20]
 8010d30:	781b      	ldrb	r3, [r3, #0]
 8010d32:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010d34:	8a3b      	ldrh	r3, [r7, #16]
 8010d36:	021b      	lsls	r3, r3, #8
 8010d38:	b21a      	sxth	r2, r3
 8010d3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010d3e:	4313      	orrs	r3, r2
 8010d40:	b21b      	sxth	r3, r3
 8010d42:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010d44:	89fb      	ldrh	r3, [r7, #14]
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	371c      	adds	r7, #28
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d50:	4770      	bx	lr
	...

08010d54 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b084      	sub	sp, #16
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
 8010d5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010d5e:	2300      	movs	r3, #0
 8010d60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	781b      	ldrb	r3, [r3, #0]
 8010d66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010d6a:	2b40      	cmp	r3, #64	; 0x40
 8010d6c:	d005      	beq.n	8010d7a <USBD_StdDevReq+0x26>
 8010d6e:	2b40      	cmp	r3, #64	; 0x40
 8010d70:	d853      	bhi.n	8010e1a <USBD_StdDevReq+0xc6>
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d00b      	beq.n	8010d8e <USBD_StdDevReq+0x3a>
 8010d76:	2b20      	cmp	r3, #32
 8010d78:	d14f      	bne.n	8010e1a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d80:	689b      	ldr	r3, [r3, #8]
 8010d82:	6839      	ldr	r1, [r7, #0]
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	4798      	blx	r3
 8010d88:	4603      	mov	r3, r0
 8010d8a:	73fb      	strb	r3, [r7, #15]
    break;
 8010d8c:	e04a      	b.n	8010e24 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	785b      	ldrb	r3, [r3, #1]
 8010d92:	2b09      	cmp	r3, #9
 8010d94:	d83b      	bhi.n	8010e0e <USBD_StdDevReq+0xba>
 8010d96:	a201      	add	r2, pc, #4	; (adr r2, 8010d9c <USBD_StdDevReq+0x48>)
 8010d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d9c:	08010df1 	.word	0x08010df1
 8010da0:	08010e05 	.word	0x08010e05
 8010da4:	08010e0f 	.word	0x08010e0f
 8010da8:	08010dfb 	.word	0x08010dfb
 8010dac:	08010e0f 	.word	0x08010e0f
 8010db0:	08010dcf 	.word	0x08010dcf
 8010db4:	08010dc5 	.word	0x08010dc5
 8010db8:	08010e0f 	.word	0x08010e0f
 8010dbc:	08010de7 	.word	0x08010de7
 8010dc0:	08010dd9 	.word	0x08010dd9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8010dc4:	6839      	ldr	r1, [r7, #0]
 8010dc6:	6878      	ldr	r0, [r7, #4]
 8010dc8:	f000 f9d8 	bl	801117c <USBD_GetDescriptor>
      break;
 8010dcc:	e024      	b.n	8010e18 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8010dce:	6839      	ldr	r1, [r7, #0]
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f000 fb3d 	bl	8011450 <USBD_SetAddress>
      break;
 8010dd6:	e01f      	b.n	8010e18 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8010dd8:	6839      	ldr	r1, [r7, #0]
 8010dda:	6878      	ldr	r0, [r7, #4]
 8010ddc:	f000 fb7c 	bl	80114d8 <USBD_SetConfig>
 8010de0:	4603      	mov	r3, r0
 8010de2:	73fb      	strb	r3, [r7, #15]
      break;
 8010de4:	e018      	b.n	8010e18 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8010de6:	6839      	ldr	r1, [r7, #0]
 8010de8:	6878      	ldr	r0, [r7, #4]
 8010dea:	f000 fc19 	bl	8011620 <USBD_GetConfig>
      break;
 8010dee:	e013      	b.n	8010e18 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8010df0:	6839      	ldr	r1, [r7, #0]
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f000 fc49 	bl	801168a <USBD_GetStatus>
      break;
 8010df8:	e00e      	b.n	8010e18 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8010dfa:	6839      	ldr	r1, [r7, #0]
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f000 fc77 	bl	80116f0 <USBD_SetFeature>
      break;
 8010e02:	e009      	b.n	8010e18 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8010e04:	6839      	ldr	r1, [r7, #0]
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	f000 fc86 	bl	8011718 <USBD_ClrFeature>
      break;
 8010e0c:	e004      	b.n	8010e18 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8010e0e:	6839      	ldr	r1, [r7, #0]
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	f000 fcdc 	bl	80117ce <USBD_CtlError>
      break;
 8010e16:	bf00      	nop
    }
    break;
 8010e18:	e004      	b.n	8010e24 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8010e1a:	6839      	ldr	r1, [r7, #0]
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f000 fcd6 	bl	80117ce <USBD_CtlError>
    break;
 8010e22:	bf00      	nop
  }

  return ret;
 8010e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e26:	4618      	mov	r0, r3
 8010e28:	3710      	adds	r7, #16
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	bd80      	pop	{r7, pc}
 8010e2e:	bf00      	nop

08010e30 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b084      	sub	sp, #16
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	781b      	ldrb	r3, [r3, #0]
 8010e42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010e46:	2b40      	cmp	r3, #64	; 0x40
 8010e48:	d005      	beq.n	8010e56 <USBD_StdItfReq+0x26>
 8010e4a:	2b40      	cmp	r3, #64	; 0x40
 8010e4c:	d82e      	bhi.n	8010eac <USBD_StdItfReq+0x7c>
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d001      	beq.n	8010e56 <USBD_StdItfReq+0x26>
 8010e52:	2b20      	cmp	r3, #32
 8010e54:	d12a      	bne.n	8010eac <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e5c:	3b01      	subs	r3, #1
 8010e5e:	2b02      	cmp	r3, #2
 8010e60:	d81d      	bhi.n	8010e9e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	889b      	ldrh	r3, [r3, #4]
 8010e66:	b2db      	uxtb	r3, r3
 8010e68:	2b01      	cmp	r3, #1
 8010e6a:	d813      	bhi.n	8010e94 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e72:	689b      	ldr	r3, [r3, #8]
 8010e74:	6839      	ldr	r1, [r7, #0]
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	4798      	blx	r3
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	88db      	ldrh	r3, [r3, #6]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d110      	bne.n	8010ea8 <USBD_StdItfReq+0x78>
 8010e86:	7bfb      	ldrb	r3, [r7, #15]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d10d      	bne.n	8010ea8 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8010e8c:	6878      	ldr	r0, [r7, #4]
 8010e8e:	f000 fd69 	bl	8011964 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8010e92:	e009      	b.n	8010ea8 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8010e94:	6839      	ldr	r1, [r7, #0]
 8010e96:	6878      	ldr	r0, [r7, #4]
 8010e98:	f000 fc99 	bl	80117ce <USBD_CtlError>
      break;
 8010e9c:	e004      	b.n	8010ea8 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8010e9e:	6839      	ldr	r1, [r7, #0]
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f000 fc94 	bl	80117ce <USBD_CtlError>
      break;
 8010ea6:	e000      	b.n	8010eaa <USBD_StdItfReq+0x7a>
      break;
 8010ea8:	bf00      	nop
    }
    break;
 8010eaa:	e004      	b.n	8010eb6 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8010eac:	6839      	ldr	r1, [r7, #0]
 8010eae:	6878      	ldr	r0, [r7, #4]
 8010eb0:	f000 fc8d 	bl	80117ce <USBD_CtlError>
    break;
 8010eb4:	bf00      	nop
  }

  return ret;
 8010eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010eb8:	4618      	mov	r0, r3
 8010eba:	3710      	adds	r7, #16
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}

08010ec0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b084      	sub	sp, #16
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
 8010ec8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010eca:	2300      	movs	r3, #0
 8010ecc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8010ece:	683b      	ldr	r3, [r7, #0]
 8010ed0:	889b      	ldrh	r3, [r3, #4]
 8010ed2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	781b      	ldrb	r3, [r3, #0]
 8010ed8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010edc:	2b40      	cmp	r3, #64	; 0x40
 8010ede:	d007      	beq.n	8010ef0 <USBD_StdEPReq+0x30>
 8010ee0:	2b40      	cmp	r3, #64	; 0x40
 8010ee2:	f200 8140 	bhi.w	8011166 <USBD_StdEPReq+0x2a6>
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d00c      	beq.n	8010f04 <USBD_StdEPReq+0x44>
 8010eea:	2b20      	cmp	r3, #32
 8010eec:	f040 813b 	bne.w	8011166 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ef6:	689b      	ldr	r3, [r3, #8]
 8010ef8:	6839      	ldr	r1, [r7, #0]
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	4798      	blx	r3
 8010efe:	4603      	mov	r3, r0
 8010f00:	73fb      	strb	r3, [r7, #15]
    break;
 8010f02:	e135      	b.n	8011170 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	785b      	ldrb	r3, [r3, #1]
 8010f08:	2b03      	cmp	r3, #3
 8010f0a:	d007      	beq.n	8010f1c <USBD_StdEPReq+0x5c>
 8010f0c:	2b03      	cmp	r3, #3
 8010f0e:	f300 8124 	bgt.w	801115a <USBD_StdEPReq+0x29a>
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d07b      	beq.n	801100e <USBD_StdEPReq+0x14e>
 8010f16:	2b01      	cmp	r3, #1
 8010f18:	d03b      	beq.n	8010f92 <USBD_StdEPReq+0xd2>
 8010f1a:	e11e      	b.n	801115a <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f22:	2b02      	cmp	r3, #2
 8010f24:	d002      	beq.n	8010f2c <USBD_StdEPReq+0x6c>
 8010f26:	2b03      	cmp	r3, #3
 8010f28:	d016      	beq.n	8010f58 <USBD_StdEPReq+0x98>
 8010f2a:	e02c      	b.n	8010f86 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010f2c:	7bbb      	ldrb	r3, [r7, #14]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d00d      	beq.n	8010f4e <USBD_StdEPReq+0x8e>
 8010f32:	7bbb      	ldrb	r3, [r7, #14]
 8010f34:	2b80      	cmp	r3, #128	; 0x80
 8010f36:	d00a      	beq.n	8010f4e <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8010f38:	7bbb      	ldrb	r3, [r7, #14]
 8010f3a:	4619      	mov	r1, r3
 8010f3c:	6878      	ldr	r0, [r7, #4]
 8010f3e:	f004 f813 	bl	8014f68 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010f42:	2180      	movs	r1, #128	; 0x80
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f004 f80f 	bl	8014f68 <USBD_LL_StallEP>
 8010f4a:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010f4c:	e020      	b.n	8010f90 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8010f4e:	6839      	ldr	r1, [r7, #0]
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	f000 fc3c 	bl	80117ce <USBD_CtlError>
        break;
 8010f56:	e01b      	b.n	8010f90 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010f58:	683b      	ldr	r3, [r7, #0]
 8010f5a:	885b      	ldrh	r3, [r3, #2]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d10e      	bne.n	8010f7e <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010f60:	7bbb      	ldrb	r3, [r7, #14]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d00b      	beq.n	8010f7e <USBD_StdEPReq+0xbe>
 8010f66:	7bbb      	ldrb	r3, [r7, #14]
 8010f68:	2b80      	cmp	r3, #128	; 0x80
 8010f6a:	d008      	beq.n	8010f7e <USBD_StdEPReq+0xbe>
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	88db      	ldrh	r3, [r3, #6]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d104      	bne.n	8010f7e <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8010f74:	7bbb      	ldrb	r3, [r7, #14]
 8010f76:	4619      	mov	r1, r3
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f003 fff5 	bl	8014f68 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	f000 fcf0 	bl	8011964 <USBD_CtlSendStatus>

        break;
 8010f84:	e004      	b.n	8010f90 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8010f86:	6839      	ldr	r1, [r7, #0]
 8010f88:	6878      	ldr	r0, [r7, #4]
 8010f8a:	f000 fc20 	bl	80117ce <USBD_CtlError>
        break;
 8010f8e:	bf00      	nop
      }
      break;
 8010f90:	e0e8      	b.n	8011164 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f98:	2b02      	cmp	r3, #2
 8010f9a:	d002      	beq.n	8010fa2 <USBD_StdEPReq+0xe2>
 8010f9c:	2b03      	cmp	r3, #3
 8010f9e:	d016      	beq.n	8010fce <USBD_StdEPReq+0x10e>
 8010fa0:	e02e      	b.n	8011000 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010fa2:	7bbb      	ldrb	r3, [r7, #14]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d00d      	beq.n	8010fc4 <USBD_StdEPReq+0x104>
 8010fa8:	7bbb      	ldrb	r3, [r7, #14]
 8010faa:	2b80      	cmp	r3, #128	; 0x80
 8010fac:	d00a      	beq.n	8010fc4 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8010fae:	7bbb      	ldrb	r3, [r7, #14]
 8010fb0:	4619      	mov	r1, r3
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f003 ffd8 	bl	8014f68 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010fb8:	2180      	movs	r1, #128	; 0x80
 8010fba:	6878      	ldr	r0, [r7, #4]
 8010fbc:	f003 ffd4 	bl	8014f68 <USBD_LL_StallEP>
 8010fc0:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010fc2:	e023      	b.n	801100c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8010fc4:	6839      	ldr	r1, [r7, #0]
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f000 fc01 	bl	80117ce <USBD_CtlError>
        break;
 8010fcc:	e01e      	b.n	801100c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010fce:	683b      	ldr	r3, [r7, #0]
 8010fd0:	885b      	ldrh	r3, [r3, #2]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d119      	bne.n	801100a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8010fd6:	7bbb      	ldrb	r3, [r7, #14]
 8010fd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d004      	beq.n	8010fea <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010fe0:	7bbb      	ldrb	r3, [r7, #14]
 8010fe2:	4619      	mov	r1, r3
 8010fe4:	6878      	ldr	r0, [r7, #4]
 8010fe6:	f003 ffde 	bl	8014fa6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	f000 fcba 	bl	8011964 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ff6:	689b      	ldr	r3, [r3, #8]
 8010ff8:	6839      	ldr	r1, [r7, #0]
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	4798      	blx	r3
        }
        break;
 8010ffe:	e004      	b.n	801100a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8011000:	6839      	ldr	r1, [r7, #0]
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f000 fbe3 	bl	80117ce <USBD_CtlError>
        break;
 8011008:	e000      	b.n	801100c <USBD_StdEPReq+0x14c>
        break;
 801100a:	bf00      	nop
      }
      break;
 801100c:	e0aa      	b.n	8011164 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011014:	2b02      	cmp	r3, #2
 8011016:	d002      	beq.n	801101e <USBD_StdEPReq+0x15e>
 8011018:	2b03      	cmp	r3, #3
 801101a:	d032      	beq.n	8011082 <USBD_StdEPReq+0x1c2>
 801101c:	e097      	b.n	801114e <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801101e:	7bbb      	ldrb	r3, [r7, #14]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d007      	beq.n	8011034 <USBD_StdEPReq+0x174>
 8011024:	7bbb      	ldrb	r3, [r7, #14]
 8011026:	2b80      	cmp	r3, #128	; 0x80
 8011028:	d004      	beq.n	8011034 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 801102a:	6839      	ldr	r1, [r7, #0]
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f000 fbce 	bl	80117ce <USBD_CtlError>
          break;
 8011032:	e091      	b.n	8011158 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011034:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011038:	2b00      	cmp	r3, #0
 801103a:	da0b      	bge.n	8011054 <USBD_StdEPReq+0x194>
 801103c:	7bbb      	ldrb	r3, [r7, #14]
 801103e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011042:	4613      	mov	r3, r2
 8011044:	009b      	lsls	r3, r3, #2
 8011046:	4413      	add	r3, r2
 8011048:	009b      	lsls	r3, r3, #2
 801104a:	3310      	adds	r3, #16
 801104c:	687a      	ldr	r2, [r7, #4]
 801104e:	4413      	add	r3, r2
 8011050:	3304      	adds	r3, #4
 8011052:	e00b      	b.n	801106c <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011054:	7bbb      	ldrb	r3, [r7, #14]
 8011056:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801105a:	4613      	mov	r3, r2
 801105c:	009b      	lsls	r3, r3, #2
 801105e:	4413      	add	r3, r2
 8011060:	009b      	lsls	r3, r3, #2
 8011062:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011066:	687a      	ldr	r2, [r7, #4]
 8011068:	4413      	add	r3, r2
 801106a:	3304      	adds	r3, #4
 801106c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	2200      	movs	r2, #0
 8011072:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011074:	68bb      	ldr	r3, [r7, #8]
 8011076:	2202      	movs	r2, #2
 8011078:	4619      	mov	r1, r3
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f000 fc18 	bl	80118b0 <USBD_CtlSendData>
        break;
 8011080:	e06a      	b.n	8011158 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8011082:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011086:	2b00      	cmp	r3, #0
 8011088:	da11      	bge.n	80110ae <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801108a:	7bbb      	ldrb	r3, [r7, #14]
 801108c:	f003 020f 	and.w	r2, r3, #15
 8011090:	6879      	ldr	r1, [r7, #4]
 8011092:	4613      	mov	r3, r2
 8011094:	009b      	lsls	r3, r3, #2
 8011096:	4413      	add	r3, r2
 8011098:	009b      	lsls	r3, r3, #2
 801109a:	440b      	add	r3, r1
 801109c:	3324      	adds	r3, #36	; 0x24
 801109e:	881b      	ldrh	r3, [r3, #0]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d117      	bne.n	80110d4 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 80110a4:	6839      	ldr	r1, [r7, #0]
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f000 fb91 	bl	80117ce <USBD_CtlError>
            break;
 80110ac:	e054      	b.n	8011158 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80110ae:	7bbb      	ldrb	r3, [r7, #14]
 80110b0:	f003 020f 	and.w	r2, r3, #15
 80110b4:	6879      	ldr	r1, [r7, #4]
 80110b6:	4613      	mov	r3, r2
 80110b8:	009b      	lsls	r3, r3, #2
 80110ba:	4413      	add	r3, r2
 80110bc:	009b      	lsls	r3, r3, #2
 80110be:	440b      	add	r3, r1
 80110c0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80110c4:	881b      	ldrh	r3, [r3, #0]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d104      	bne.n	80110d4 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 80110ca:	6839      	ldr	r1, [r7, #0]
 80110cc:	6878      	ldr	r0, [r7, #4]
 80110ce:	f000 fb7e 	bl	80117ce <USBD_CtlError>
            break;
 80110d2:	e041      	b.n	8011158 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80110d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	da0b      	bge.n	80110f4 <USBD_StdEPReq+0x234>
 80110dc:	7bbb      	ldrb	r3, [r7, #14]
 80110de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80110e2:	4613      	mov	r3, r2
 80110e4:	009b      	lsls	r3, r3, #2
 80110e6:	4413      	add	r3, r2
 80110e8:	009b      	lsls	r3, r3, #2
 80110ea:	3310      	adds	r3, #16
 80110ec:	687a      	ldr	r2, [r7, #4]
 80110ee:	4413      	add	r3, r2
 80110f0:	3304      	adds	r3, #4
 80110f2:	e00b      	b.n	801110c <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80110f4:	7bbb      	ldrb	r3, [r7, #14]
 80110f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80110fa:	4613      	mov	r3, r2
 80110fc:	009b      	lsls	r3, r3, #2
 80110fe:	4413      	add	r3, r2
 8011100:	009b      	lsls	r3, r3, #2
 8011102:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011106:	687a      	ldr	r2, [r7, #4]
 8011108:	4413      	add	r3, r2
 801110a:	3304      	adds	r3, #4
 801110c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801110e:	7bbb      	ldrb	r3, [r7, #14]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d002      	beq.n	801111a <USBD_StdEPReq+0x25a>
 8011114:	7bbb      	ldrb	r3, [r7, #14]
 8011116:	2b80      	cmp	r3, #128	; 0x80
 8011118:	d103      	bne.n	8011122 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 801111a:	68bb      	ldr	r3, [r7, #8]
 801111c:	2200      	movs	r2, #0
 801111e:	601a      	str	r2, [r3, #0]
 8011120:	e00e      	b.n	8011140 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011122:	7bbb      	ldrb	r3, [r7, #14]
 8011124:	4619      	mov	r1, r3
 8011126:	6878      	ldr	r0, [r7, #4]
 8011128:	f003 ff5c 	bl	8014fe4 <USBD_LL_IsStallEP>
 801112c:	4603      	mov	r3, r0
 801112e:	2b00      	cmp	r3, #0
 8011130:	d003      	beq.n	801113a <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8011132:	68bb      	ldr	r3, [r7, #8]
 8011134:	2201      	movs	r2, #1
 8011136:	601a      	str	r2, [r3, #0]
 8011138:	e002      	b.n	8011140 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 801113a:	68bb      	ldr	r3, [r7, #8]
 801113c:	2200      	movs	r2, #0
 801113e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011140:	68bb      	ldr	r3, [r7, #8]
 8011142:	2202      	movs	r2, #2
 8011144:	4619      	mov	r1, r3
 8011146:	6878      	ldr	r0, [r7, #4]
 8011148:	f000 fbb2 	bl	80118b0 <USBD_CtlSendData>
          break;
 801114c:	e004      	b.n	8011158 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 801114e:	6839      	ldr	r1, [r7, #0]
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	f000 fb3c 	bl	80117ce <USBD_CtlError>
        break;
 8011156:	bf00      	nop
      }
      break;
 8011158:	e004      	b.n	8011164 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 801115a:	6839      	ldr	r1, [r7, #0]
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f000 fb36 	bl	80117ce <USBD_CtlError>
      break;
 8011162:	bf00      	nop
    }
    break;
 8011164:	e004      	b.n	8011170 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8011166:	6839      	ldr	r1, [r7, #0]
 8011168:	6878      	ldr	r0, [r7, #4]
 801116a:	f000 fb30 	bl	80117ce <USBD_CtlError>
    break;
 801116e:	bf00      	nop
  }

  return ret;
 8011170:	7bfb      	ldrb	r3, [r7, #15]
}
 8011172:	4618      	mov	r0, r3
 8011174:	3710      	adds	r7, #16
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}
	...

0801117c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b084      	sub	sp, #16
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011186:	2300      	movs	r3, #0
 8011188:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801118a:	2300      	movs	r3, #0
 801118c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801118e:	2300      	movs	r3, #0
 8011190:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	885b      	ldrh	r3, [r3, #2]
 8011196:	0a1b      	lsrs	r3, r3, #8
 8011198:	b29b      	uxth	r3, r3
 801119a:	3b01      	subs	r3, #1
 801119c:	2b06      	cmp	r3, #6
 801119e:	f200 8128 	bhi.w	80113f2 <USBD_GetDescriptor+0x276>
 80111a2:	a201      	add	r2, pc, #4	; (adr r2, 80111a8 <USBD_GetDescriptor+0x2c>)
 80111a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111a8:	080111c5 	.word	0x080111c5
 80111ac:	080111dd 	.word	0x080111dd
 80111b0:	0801121d 	.word	0x0801121d
 80111b4:	080113f3 	.word	0x080113f3
 80111b8:	080113f3 	.word	0x080113f3
 80111bc:	08011393 	.word	0x08011393
 80111c0:	080113bf 	.word	0x080113bf
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	687a      	ldr	r2, [r7, #4]
 80111ce:	7c12      	ldrb	r2, [r2, #16]
 80111d0:	f107 0108 	add.w	r1, r7, #8
 80111d4:	4610      	mov	r0, r2
 80111d6:	4798      	blx	r3
 80111d8:	60f8      	str	r0, [r7, #12]
    break;
 80111da:	e112      	b.n	8011402 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	7c1b      	ldrb	r3, [r3, #16]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d10d      	bne.n	8011200 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80111ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111ec:	f107 0208 	add.w	r2, r7, #8
 80111f0:	4610      	mov	r0, r2
 80111f2:	4798      	blx	r3
 80111f4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	3301      	adds	r3, #1
 80111fa:	2202      	movs	r2, #2
 80111fc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80111fe:	e100      	b.n	8011402 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011208:	f107 0208 	add.w	r2, r7, #8
 801120c:	4610      	mov	r0, r2
 801120e:	4798      	blx	r3
 8011210:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	3301      	adds	r3, #1
 8011216:	2202      	movs	r2, #2
 8011218:	701a      	strb	r2, [r3, #0]
    break;
 801121a:	e0f2      	b.n	8011402 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	885b      	ldrh	r3, [r3, #2]
 8011220:	b2db      	uxtb	r3, r3
 8011222:	2b05      	cmp	r3, #5
 8011224:	f200 80ac 	bhi.w	8011380 <USBD_GetDescriptor+0x204>
 8011228:	a201      	add	r2, pc, #4	; (adr r2, 8011230 <USBD_GetDescriptor+0xb4>)
 801122a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801122e:	bf00      	nop
 8011230:	08011249 	.word	0x08011249
 8011234:	0801127d 	.word	0x0801127d
 8011238:	080112b1 	.word	0x080112b1
 801123c:	080112e5 	.word	0x080112e5
 8011240:	08011319 	.word	0x08011319
 8011244:	0801134d 	.word	0x0801134d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801124e:	685b      	ldr	r3, [r3, #4]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d00b      	beq.n	801126c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801125a:	685b      	ldr	r3, [r3, #4]
 801125c:	687a      	ldr	r2, [r7, #4]
 801125e:	7c12      	ldrb	r2, [r2, #16]
 8011260:	f107 0108 	add.w	r1, r7, #8
 8011264:	4610      	mov	r0, r2
 8011266:	4798      	blx	r3
 8011268:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801126a:	e091      	b.n	8011390 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801126c:	6839      	ldr	r1, [r7, #0]
 801126e:	6878      	ldr	r0, [r7, #4]
 8011270:	f000 faad 	bl	80117ce <USBD_CtlError>
        err++;
 8011274:	7afb      	ldrb	r3, [r7, #11]
 8011276:	3301      	adds	r3, #1
 8011278:	72fb      	strb	r3, [r7, #11]
      break;
 801127a:	e089      	b.n	8011390 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011282:	689b      	ldr	r3, [r3, #8]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d00b      	beq.n	80112a0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801128e:	689b      	ldr	r3, [r3, #8]
 8011290:	687a      	ldr	r2, [r7, #4]
 8011292:	7c12      	ldrb	r2, [r2, #16]
 8011294:	f107 0108 	add.w	r1, r7, #8
 8011298:	4610      	mov	r0, r2
 801129a:	4798      	blx	r3
 801129c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801129e:	e077      	b.n	8011390 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80112a0:	6839      	ldr	r1, [r7, #0]
 80112a2:	6878      	ldr	r0, [r7, #4]
 80112a4:	f000 fa93 	bl	80117ce <USBD_CtlError>
        err++;
 80112a8:	7afb      	ldrb	r3, [r7, #11]
 80112aa:	3301      	adds	r3, #1
 80112ac:	72fb      	strb	r3, [r7, #11]
      break;
 80112ae:	e06f      	b.n	8011390 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80112b6:	68db      	ldr	r3, [r3, #12]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d00b      	beq.n	80112d4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80112c2:	68db      	ldr	r3, [r3, #12]
 80112c4:	687a      	ldr	r2, [r7, #4]
 80112c6:	7c12      	ldrb	r2, [r2, #16]
 80112c8:	f107 0108 	add.w	r1, r7, #8
 80112cc:	4610      	mov	r0, r2
 80112ce:	4798      	blx	r3
 80112d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80112d2:	e05d      	b.n	8011390 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80112d4:	6839      	ldr	r1, [r7, #0]
 80112d6:	6878      	ldr	r0, [r7, #4]
 80112d8:	f000 fa79 	bl	80117ce <USBD_CtlError>
        err++;
 80112dc:	7afb      	ldrb	r3, [r7, #11]
 80112de:	3301      	adds	r3, #1
 80112e0:	72fb      	strb	r3, [r7, #11]
      break;
 80112e2:	e055      	b.n	8011390 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80112ea:	691b      	ldr	r3, [r3, #16]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d00b      	beq.n	8011308 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80112f6:	691b      	ldr	r3, [r3, #16]
 80112f8:	687a      	ldr	r2, [r7, #4]
 80112fa:	7c12      	ldrb	r2, [r2, #16]
 80112fc:	f107 0108 	add.w	r1, r7, #8
 8011300:	4610      	mov	r0, r2
 8011302:	4798      	blx	r3
 8011304:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011306:	e043      	b.n	8011390 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011308:	6839      	ldr	r1, [r7, #0]
 801130a:	6878      	ldr	r0, [r7, #4]
 801130c:	f000 fa5f 	bl	80117ce <USBD_CtlError>
        err++;
 8011310:	7afb      	ldrb	r3, [r7, #11]
 8011312:	3301      	adds	r3, #1
 8011314:	72fb      	strb	r3, [r7, #11]
      break;
 8011316:	e03b      	b.n	8011390 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801131e:	695b      	ldr	r3, [r3, #20]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d00b      	beq.n	801133c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801132a:	695b      	ldr	r3, [r3, #20]
 801132c:	687a      	ldr	r2, [r7, #4]
 801132e:	7c12      	ldrb	r2, [r2, #16]
 8011330:	f107 0108 	add.w	r1, r7, #8
 8011334:	4610      	mov	r0, r2
 8011336:	4798      	blx	r3
 8011338:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801133a:	e029      	b.n	8011390 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801133c:	6839      	ldr	r1, [r7, #0]
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f000 fa45 	bl	80117ce <USBD_CtlError>
        err++;
 8011344:	7afb      	ldrb	r3, [r7, #11]
 8011346:	3301      	adds	r3, #1
 8011348:	72fb      	strb	r3, [r7, #11]
      break;
 801134a:	e021      	b.n	8011390 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011352:	699b      	ldr	r3, [r3, #24]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d00b      	beq.n	8011370 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801135e:	699b      	ldr	r3, [r3, #24]
 8011360:	687a      	ldr	r2, [r7, #4]
 8011362:	7c12      	ldrb	r2, [r2, #16]
 8011364:	f107 0108 	add.w	r1, r7, #8
 8011368:	4610      	mov	r0, r2
 801136a:	4798      	blx	r3
 801136c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801136e:	e00f      	b.n	8011390 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011370:	6839      	ldr	r1, [r7, #0]
 8011372:	6878      	ldr	r0, [r7, #4]
 8011374:	f000 fa2b 	bl	80117ce <USBD_CtlError>
        err++;
 8011378:	7afb      	ldrb	r3, [r7, #11]
 801137a:	3301      	adds	r3, #1
 801137c:	72fb      	strb	r3, [r7, #11]
      break;
 801137e:	e007      	b.n	8011390 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8011380:	6839      	ldr	r1, [r7, #0]
 8011382:	6878      	ldr	r0, [r7, #4]
 8011384:	f000 fa23 	bl	80117ce <USBD_CtlError>
      err++;
 8011388:	7afb      	ldrb	r3, [r7, #11]
 801138a:	3301      	adds	r3, #1
 801138c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 801138e:	bf00      	nop
    }
    break;
 8011390:	e037      	b.n	8011402 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	7c1b      	ldrb	r3, [r3, #16]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d109      	bne.n	80113ae <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113a2:	f107 0208 	add.w	r2, r7, #8
 80113a6:	4610      	mov	r0, r2
 80113a8:	4798      	blx	r3
 80113aa:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80113ac:	e029      	b.n	8011402 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80113ae:	6839      	ldr	r1, [r7, #0]
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f000 fa0c 	bl	80117ce <USBD_CtlError>
      err++;
 80113b6:	7afb      	ldrb	r3, [r7, #11]
 80113b8:	3301      	adds	r3, #1
 80113ba:	72fb      	strb	r3, [r7, #11]
    break;
 80113bc:	e021      	b.n	8011402 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	7c1b      	ldrb	r3, [r3, #16]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d10d      	bne.n	80113e2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113ce:	f107 0208 	add.w	r2, r7, #8
 80113d2:	4610      	mov	r0, r2
 80113d4:	4798      	blx	r3
 80113d6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	3301      	adds	r3, #1
 80113dc:	2207      	movs	r2, #7
 80113de:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80113e0:	e00f      	b.n	8011402 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80113e2:	6839      	ldr	r1, [r7, #0]
 80113e4:	6878      	ldr	r0, [r7, #4]
 80113e6:	f000 f9f2 	bl	80117ce <USBD_CtlError>
      err++;
 80113ea:	7afb      	ldrb	r3, [r7, #11]
 80113ec:	3301      	adds	r3, #1
 80113ee:	72fb      	strb	r3, [r7, #11]
    break;
 80113f0:	e007      	b.n	8011402 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80113f2:	6839      	ldr	r1, [r7, #0]
 80113f4:	6878      	ldr	r0, [r7, #4]
 80113f6:	f000 f9ea 	bl	80117ce <USBD_CtlError>
    err++;
 80113fa:	7afb      	ldrb	r3, [r7, #11]
 80113fc:	3301      	adds	r3, #1
 80113fe:	72fb      	strb	r3, [r7, #11]
    break;
 8011400:	bf00      	nop
  }

  if (err != 0U)
 8011402:	7afb      	ldrb	r3, [r7, #11]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d11e      	bne.n	8011446 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8011408:	683b      	ldr	r3, [r7, #0]
 801140a:	88db      	ldrh	r3, [r3, #6]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d016      	beq.n	801143e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8011410:	893b      	ldrh	r3, [r7, #8]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d00e      	beq.n	8011434 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	88da      	ldrh	r2, [r3, #6]
 801141a:	893b      	ldrh	r3, [r7, #8]
 801141c:	4293      	cmp	r3, r2
 801141e:	bf28      	it	cs
 8011420:	4613      	movcs	r3, r2
 8011422:	b29b      	uxth	r3, r3
 8011424:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8011426:	893b      	ldrh	r3, [r7, #8]
 8011428:	461a      	mov	r2, r3
 801142a:	68f9      	ldr	r1, [r7, #12]
 801142c:	6878      	ldr	r0, [r7, #4]
 801142e:	f000 fa3f 	bl	80118b0 <USBD_CtlSendData>
 8011432:	e009      	b.n	8011448 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8011434:	6839      	ldr	r1, [r7, #0]
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	f000 f9c9 	bl	80117ce <USBD_CtlError>
 801143c:	e004      	b.n	8011448 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 801143e:	6878      	ldr	r0, [r7, #4]
 8011440:	f000 fa90 	bl	8011964 <USBD_CtlSendStatus>
 8011444:	e000      	b.n	8011448 <USBD_GetDescriptor+0x2cc>
    return;
 8011446:	bf00      	nop
    }
  }
}
 8011448:	3710      	adds	r7, #16
 801144a:	46bd      	mov	sp, r7
 801144c:	bd80      	pop	{r7, pc}
 801144e:	bf00      	nop

08011450 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b084      	sub	sp, #16
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	889b      	ldrh	r3, [r3, #4]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d130      	bne.n	80114c4 <USBD_SetAddress+0x74>
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	88db      	ldrh	r3, [r3, #6]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d12c      	bne.n	80114c4 <USBD_SetAddress+0x74>
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	885b      	ldrh	r3, [r3, #2]
 801146e:	2b7f      	cmp	r3, #127	; 0x7f
 8011470:	d828      	bhi.n	80114c4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011472:	683b      	ldr	r3, [r7, #0]
 8011474:	885b      	ldrh	r3, [r3, #2]
 8011476:	b2db      	uxtb	r3, r3
 8011478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801147c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011484:	2b03      	cmp	r3, #3
 8011486:	d104      	bne.n	8011492 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8011488:	6839      	ldr	r1, [r7, #0]
 801148a:	6878      	ldr	r0, [r7, #4]
 801148c:	f000 f99f 	bl	80117ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011490:	e01d      	b.n	80114ce <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	7bfa      	ldrb	r2, [r7, #15]
 8011496:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801149a:	7bfb      	ldrb	r3, [r7, #15]
 801149c:	4619      	mov	r1, r3
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f003 fdcc 	bl	801503c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80114a4:	6878      	ldr	r0, [r7, #4]
 80114a6:	f000 fa5d 	bl	8011964 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80114aa:	7bfb      	ldrb	r3, [r7, #15]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d004      	beq.n	80114ba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	2202      	movs	r2, #2
 80114b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80114b8:	e009      	b.n	80114ce <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2201      	movs	r2, #1
 80114be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80114c2:	e004      	b.n	80114ce <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80114c4:	6839      	ldr	r1, [r7, #0]
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	f000 f981 	bl	80117ce <USBD_CtlError>
  }
}
 80114cc:	bf00      	nop
 80114ce:	bf00      	nop
 80114d0:	3710      	adds	r7, #16
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}
	...

080114d8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b084      	sub	sp, #16
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
 80114e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80114e2:	2300      	movs	r3, #0
 80114e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	885b      	ldrh	r3, [r3, #2]
 80114ea:	b2da      	uxtb	r2, r3
 80114ec:	4b4b      	ldr	r3, [pc, #300]	; (801161c <USBD_SetConfig+0x144>)
 80114ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80114f0:	4b4a      	ldr	r3, [pc, #296]	; (801161c <USBD_SetConfig+0x144>)
 80114f2:	781b      	ldrb	r3, [r3, #0]
 80114f4:	2b01      	cmp	r3, #1
 80114f6:	d905      	bls.n	8011504 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80114f8:	6839      	ldr	r1, [r7, #0]
 80114fa:	6878      	ldr	r0, [r7, #4]
 80114fc:	f000 f967 	bl	80117ce <USBD_CtlError>
    return USBD_FAIL;
 8011500:	2303      	movs	r3, #3
 8011502:	e087      	b.n	8011614 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801150a:	2b02      	cmp	r3, #2
 801150c:	d002      	beq.n	8011514 <USBD_SetConfig+0x3c>
 801150e:	2b03      	cmp	r3, #3
 8011510:	d025      	beq.n	801155e <USBD_SetConfig+0x86>
 8011512:	e071      	b.n	80115f8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8011514:	4b41      	ldr	r3, [pc, #260]	; (801161c <USBD_SetConfig+0x144>)
 8011516:	781b      	ldrb	r3, [r3, #0]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d01c      	beq.n	8011556 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 801151c:	4b3f      	ldr	r3, [pc, #252]	; (801161c <USBD_SetConfig+0x144>)
 801151e:	781b      	ldrb	r3, [r3, #0]
 8011520:	461a      	mov	r2, r3
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011526:	4b3d      	ldr	r3, [pc, #244]	; (801161c <USBD_SetConfig+0x144>)
 8011528:	781b      	ldrb	r3, [r3, #0]
 801152a:	4619      	mov	r1, r3
 801152c:	6878      	ldr	r0, [r7, #4]
 801152e:	f7ff f999 	bl	8010864 <USBD_SetClassConfig>
 8011532:	4603      	mov	r3, r0
 8011534:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8011536:	7bfb      	ldrb	r3, [r7, #15]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d004      	beq.n	8011546 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 801153c:	6839      	ldr	r1, [r7, #0]
 801153e:	6878      	ldr	r0, [r7, #4]
 8011540:	f000 f945 	bl	80117ce <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8011544:	e065      	b.n	8011612 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8011546:	6878      	ldr	r0, [r7, #4]
 8011548:	f000 fa0c 	bl	8011964 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	2203      	movs	r2, #3
 8011550:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8011554:	e05d      	b.n	8011612 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8011556:	6878      	ldr	r0, [r7, #4]
 8011558:	f000 fa04 	bl	8011964 <USBD_CtlSendStatus>
    break;
 801155c:	e059      	b.n	8011612 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 801155e:	4b2f      	ldr	r3, [pc, #188]	; (801161c <USBD_SetConfig+0x144>)
 8011560:	781b      	ldrb	r3, [r3, #0]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d112      	bne.n	801158c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	2202      	movs	r2, #2
 801156a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 801156e:	4b2b      	ldr	r3, [pc, #172]	; (801161c <USBD_SetConfig+0x144>)
 8011570:	781b      	ldrb	r3, [r3, #0]
 8011572:	461a      	mov	r2, r3
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011578:	4b28      	ldr	r3, [pc, #160]	; (801161c <USBD_SetConfig+0x144>)
 801157a:	781b      	ldrb	r3, [r3, #0]
 801157c:	4619      	mov	r1, r3
 801157e:	6878      	ldr	r0, [r7, #4]
 8011580:	f7ff f98c 	bl	801089c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f000 f9ed 	bl	8011964 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801158a:	e042      	b.n	8011612 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 801158c:	4b23      	ldr	r3, [pc, #140]	; (801161c <USBD_SetConfig+0x144>)
 801158e:	781b      	ldrb	r3, [r3, #0]
 8011590:	461a      	mov	r2, r3
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	685b      	ldr	r3, [r3, #4]
 8011596:	429a      	cmp	r2, r3
 8011598:	d02a      	beq.n	80115f0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	685b      	ldr	r3, [r3, #4]
 801159e:	b2db      	uxtb	r3, r3
 80115a0:	4619      	mov	r1, r3
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f7ff f97a 	bl	801089c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80115a8:	4b1c      	ldr	r3, [pc, #112]	; (801161c <USBD_SetConfig+0x144>)
 80115aa:	781b      	ldrb	r3, [r3, #0]
 80115ac:	461a      	mov	r2, r3
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80115b2:	4b1a      	ldr	r3, [pc, #104]	; (801161c <USBD_SetConfig+0x144>)
 80115b4:	781b      	ldrb	r3, [r3, #0]
 80115b6:	4619      	mov	r1, r3
 80115b8:	6878      	ldr	r0, [r7, #4]
 80115ba:	f7ff f953 	bl	8010864 <USBD_SetClassConfig>
 80115be:	4603      	mov	r3, r0
 80115c0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80115c2:	7bfb      	ldrb	r3, [r7, #15]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d00f      	beq.n	80115e8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80115c8:	6839      	ldr	r1, [r7, #0]
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	f000 f8ff 	bl	80117ce <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	685b      	ldr	r3, [r3, #4]
 80115d4:	b2db      	uxtb	r3, r3
 80115d6:	4619      	mov	r1, r3
 80115d8:	6878      	ldr	r0, [r7, #4]
 80115da:	f7ff f95f 	bl	801089c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	2202      	movs	r2, #2
 80115e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80115e6:	e014      	b.n	8011612 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80115e8:	6878      	ldr	r0, [r7, #4]
 80115ea:	f000 f9bb 	bl	8011964 <USBD_CtlSendStatus>
    break;
 80115ee:	e010      	b.n	8011612 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80115f0:	6878      	ldr	r0, [r7, #4]
 80115f2:	f000 f9b7 	bl	8011964 <USBD_CtlSendStatus>
    break;
 80115f6:	e00c      	b.n	8011612 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80115f8:	6839      	ldr	r1, [r7, #0]
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	f000 f8e7 	bl	80117ce <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011600:	4b06      	ldr	r3, [pc, #24]	; (801161c <USBD_SetConfig+0x144>)
 8011602:	781b      	ldrb	r3, [r3, #0]
 8011604:	4619      	mov	r1, r3
 8011606:	6878      	ldr	r0, [r7, #4]
 8011608:	f7ff f948 	bl	801089c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 801160c:	2303      	movs	r3, #3
 801160e:	73fb      	strb	r3, [r7, #15]
    break;
 8011610:	bf00      	nop
  }

  return ret;
 8011612:	7bfb      	ldrb	r3, [r7, #15]
}
 8011614:	4618      	mov	r0, r3
 8011616:	3710      	adds	r7, #16
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}
 801161c:	2000486c 	.word	0x2000486c

08011620 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b082      	sub	sp, #8
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
 8011628:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801162a:	683b      	ldr	r3, [r7, #0]
 801162c:	88db      	ldrh	r3, [r3, #6]
 801162e:	2b01      	cmp	r3, #1
 8011630:	d004      	beq.n	801163c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011632:	6839      	ldr	r1, [r7, #0]
 8011634:	6878      	ldr	r0, [r7, #4]
 8011636:	f000 f8ca 	bl	80117ce <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 801163a:	e022      	b.n	8011682 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011642:	2b02      	cmp	r3, #2
 8011644:	dc02      	bgt.n	801164c <USBD_GetConfig+0x2c>
 8011646:	2b00      	cmp	r3, #0
 8011648:	dc03      	bgt.n	8011652 <USBD_GetConfig+0x32>
 801164a:	e015      	b.n	8011678 <USBD_GetConfig+0x58>
 801164c:	2b03      	cmp	r3, #3
 801164e:	d00b      	beq.n	8011668 <USBD_GetConfig+0x48>
 8011650:	e012      	b.n	8011678 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	2200      	movs	r2, #0
 8011656:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	3308      	adds	r3, #8
 801165c:	2201      	movs	r2, #1
 801165e:	4619      	mov	r1, r3
 8011660:	6878      	ldr	r0, [r7, #4]
 8011662:	f000 f925 	bl	80118b0 <USBD_CtlSendData>
      break;
 8011666:	e00c      	b.n	8011682 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	3304      	adds	r3, #4
 801166c:	2201      	movs	r2, #1
 801166e:	4619      	mov	r1, r3
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f000 f91d 	bl	80118b0 <USBD_CtlSendData>
      break;
 8011676:	e004      	b.n	8011682 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8011678:	6839      	ldr	r1, [r7, #0]
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f000 f8a7 	bl	80117ce <USBD_CtlError>
      break;
 8011680:	bf00      	nop
}
 8011682:	bf00      	nop
 8011684:	3708      	adds	r7, #8
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}

0801168a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801168a:	b580      	push	{r7, lr}
 801168c:	b082      	sub	sp, #8
 801168e:	af00      	add	r7, sp, #0
 8011690:	6078      	str	r0, [r7, #4]
 8011692:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801169a:	3b01      	subs	r3, #1
 801169c:	2b02      	cmp	r3, #2
 801169e:	d81e      	bhi.n	80116de <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	88db      	ldrh	r3, [r3, #6]
 80116a4:	2b02      	cmp	r3, #2
 80116a6:	d004      	beq.n	80116b2 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80116a8:	6839      	ldr	r1, [r7, #0]
 80116aa:	6878      	ldr	r0, [r7, #4]
 80116ac:	f000 f88f 	bl	80117ce <USBD_CtlError>
      break;
 80116b0:	e01a      	b.n	80116e8 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	2201      	movs	r2, #1
 80116b6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d005      	beq.n	80116ce <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	68db      	ldr	r3, [r3, #12]
 80116c6:	f043 0202 	orr.w	r2, r3, #2
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	330c      	adds	r3, #12
 80116d2:	2202      	movs	r2, #2
 80116d4:	4619      	mov	r1, r3
 80116d6:	6878      	ldr	r0, [r7, #4]
 80116d8:	f000 f8ea 	bl	80118b0 <USBD_CtlSendData>
    break;
 80116dc:	e004      	b.n	80116e8 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80116de:	6839      	ldr	r1, [r7, #0]
 80116e0:	6878      	ldr	r0, [r7, #4]
 80116e2:	f000 f874 	bl	80117ce <USBD_CtlError>
    break;
 80116e6:	bf00      	nop
  }
}
 80116e8:	bf00      	nop
 80116ea:	3708      	adds	r7, #8
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}

080116f0 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b082      	sub	sp, #8
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
 80116f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	885b      	ldrh	r3, [r3, #2]
 80116fe:	2b01      	cmp	r3, #1
 8011700:	d106      	bne.n	8011710 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2201      	movs	r2, #1
 8011706:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801170a:	6878      	ldr	r0, [r7, #4]
 801170c:	f000 f92a 	bl	8011964 <USBD_CtlSendStatus>
  }
}
 8011710:	bf00      	nop
 8011712:	3708      	adds	r7, #8
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}

08011718 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b082      	sub	sp, #8
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
 8011720:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011728:	3b01      	subs	r3, #1
 801172a:	2b02      	cmp	r3, #2
 801172c:	d80b      	bhi.n	8011746 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801172e:	683b      	ldr	r3, [r7, #0]
 8011730:	885b      	ldrh	r3, [r3, #2]
 8011732:	2b01      	cmp	r3, #1
 8011734:	d10c      	bne.n	8011750 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2200      	movs	r2, #0
 801173a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f000 f910 	bl	8011964 <USBD_CtlSendStatus>
      }
      break;
 8011744:	e004      	b.n	8011750 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8011746:	6839      	ldr	r1, [r7, #0]
 8011748:	6878      	ldr	r0, [r7, #4]
 801174a:	f000 f840 	bl	80117ce <USBD_CtlError>
      break;
 801174e:	e000      	b.n	8011752 <USBD_ClrFeature+0x3a>
      break;
 8011750:	bf00      	nop
  }
}
 8011752:	bf00      	nop
 8011754:	3708      	adds	r7, #8
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}

0801175a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801175a:	b580      	push	{r7, lr}
 801175c:	b084      	sub	sp, #16
 801175e:	af00      	add	r7, sp, #0
 8011760:	6078      	str	r0, [r7, #4]
 8011762:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011764:	683b      	ldr	r3, [r7, #0]
 8011766:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	781a      	ldrb	r2, [r3, #0]
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	3301      	adds	r3, #1
 8011774:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	781a      	ldrb	r2, [r3, #0]
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	3301      	adds	r3, #1
 8011782:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011784:	68f8      	ldr	r0, [r7, #12]
 8011786:	f7ff fac6 	bl	8010d16 <SWAPBYTE>
 801178a:	4603      	mov	r3, r0
 801178c:	461a      	mov	r2, r3
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	3301      	adds	r3, #1
 8011796:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	3301      	adds	r3, #1
 801179c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801179e:	68f8      	ldr	r0, [r7, #12]
 80117a0:	f7ff fab9 	bl	8010d16 <SWAPBYTE>
 80117a4:	4603      	mov	r3, r0
 80117a6:	461a      	mov	r2, r3
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	3301      	adds	r3, #1
 80117b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	3301      	adds	r3, #1
 80117b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80117b8:	68f8      	ldr	r0, [r7, #12]
 80117ba:	f7ff faac 	bl	8010d16 <SWAPBYTE>
 80117be:	4603      	mov	r3, r0
 80117c0:	461a      	mov	r2, r3
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	80da      	strh	r2, [r3, #6]
}
 80117c6:	bf00      	nop
 80117c8:	3710      	adds	r7, #16
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bd80      	pop	{r7, pc}

080117ce <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80117ce:	b580      	push	{r7, lr}
 80117d0:	b082      	sub	sp, #8
 80117d2:	af00      	add	r7, sp, #0
 80117d4:	6078      	str	r0, [r7, #4]
 80117d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80117d8:	2180      	movs	r1, #128	; 0x80
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	f003 fbc4 	bl	8014f68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80117e0:	2100      	movs	r1, #0
 80117e2:	6878      	ldr	r0, [r7, #4]
 80117e4:	f003 fbc0 	bl	8014f68 <USBD_LL_StallEP>
}
 80117e8:	bf00      	nop
 80117ea:	3708      	adds	r7, #8
 80117ec:	46bd      	mov	sp, r7
 80117ee:	bd80      	pop	{r7, pc}

080117f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b086      	sub	sp, #24
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	60f8      	str	r0, [r7, #12]
 80117f8:	60b9      	str	r1, [r7, #8]
 80117fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80117fc:	2300      	movs	r3, #0
 80117fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d036      	beq.n	8011874 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801180a:	6938      	ldr	r0, [r7, #16]
 801180c:	f000 f836 	bl	801187c <USBD_GetLen>
 8011810:	4603      	mov	r3, r0
 8011812:	3301      	adds	r3, #1
 8011814:	b29b      	uxth	r3, r3
 8011816:	005b      	lsls	r3, r3, #1
 8011818:	b29a      	uxth	r2, r3
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801181e:	7dfb      	ldrb	r3, [r7, #23]
 8011820:	68ba      	ldr	r2, [r7, #8]
 8011822:	4413      	add	r3, r2
 8011824:	687a      	ldr	r2, [r7, #4]
 8011826:	7812      	ldrb	r2, [r2, #0]
 8011828:	701a      	strb	r2, [r3, #0]
  idx++;
 801182a:	7dfb      	ldrb	r3, [r7, #23]
 801182c:	3301      	adds	r3, #1
 801182e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011830:	7dfb      	ldrb	r3, [r7, #23]
 8011832:	68ba      	ldr	r2, [r7, #8]
 8011834:	4413      	add	r3, r2
 8011836:	2203      	movs	r2, #3
 8011838:	701a      	strb	r2, [r3, #0]
  idx++;
 801183a:	7dfb      	ldrb	r3, [r7, #23]
 801183c:	3301      	adds	r3, #1
 801183e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011840:	e013      	b.n	801186a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011842:	7dfb      	ldrb	r3, [r7, #23]
 8011844:	68ba      	ldr	r2, [r7, #8]
 8011846:	4413      	add	r3, r2
 8011848:	693a      	ldr	r2, [r7, #16]
 801184a:	7812      	ldrb	r2, [r2, #0]
 801184c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801184e:	693b      	ldr	r3, [r7, #16]
 8011850:	3301      	adds	r3, #1
 8011852:	613b      	str	r3, [r7, #16]
    idx++;
 8011854:	7dfb      	ldrb	r3, [r7, #23]
 8011856:	3301      	adds	r3, #1
 8011858:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801185a:	7dfb      	ldrb	r3, [r7, #23]
 801185c:	68ba      	ldr	r2, [r7, #8]
 801185e:	4413      	add	r3, r2
 8011860:	2200      	movs	r2, #0
 8011862:	701a      	strb	r2, [r3, #0]
    idx++;
 8011864:	7dfb      	ldrb	r3, [r7, #23]
 8011866:	3301      	adds	r3, #1
 8011868:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801186a:	693b      	ldr	r3, [r7, #16]
 801186c:	781b      	ldrb	r3, [r3, #0]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d1e7      	bne.n	8011842 <USBD_GetString+0x52>
 8011872:	e000      	b.n	8011876 <USBD_GetString+0x86>
    return;
 8011874:	bf00      	nop
  }
}
 8011876:	3718      	adds	r7, #24
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}

0801187c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801187c:	b480      	push	{r7}
 801187e:	b085      	sub	sp, #20
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011884:	2300      	movs	r3, #0
 8011886:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801188c:	e005      	b.n	801189a <USBD_GetLen+0x1e>
  {
    len++;
 801188e:	7bfb      	ldrb	r3, [r7, #15]
 8011890:	3301      	adds	r3, #1
 8011892:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011894:	68bb      	ldr	r3, [r7, #8]
 8011896:	3301      	adds	r3, #1
 8011898:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801189a:	68bb      	ldr	r3, [r7, #8]
 801189c:	781b      	ldrb	r3, [r3, #0]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d1f5      	bne.n	801188e <USBD_GetLen+0x12>
  }

  return len;
 80118a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80118a4:	4618      	mov	r0, r3
 80118a6:	3714      	adds	r7, #20
 80118a8:	46bd      	mov	sp, r7
 80118aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ae:	4770      	bx	lr

080118b0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b084      	sub	sp, #16
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	60f8      	str	r0, [r7, #12]
 80118b8:	60b9      	str	r1, [r7, #8]
 80118ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	2202      	movs	r2, #2
 80118c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	687a      	ldr	r2, [r7, #4]
 80118c8:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	687a      	ldr	r2, [r7, #4]
 80118ce:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	68ba      	ldr	r2, [r7, #8]
 80118d4:	2100      	movs	r1, #0
 80118d6:	68f8      	ldr	r0, [r7, #12]
 80118d8:	f003 fbcf 	bl	801507a <USBD_LL_Transmit>

  return USBD_OK;
 80118dc:	2300      	movs	r3, #0
}
 80118de:	4618      	mov	r0, r3
 80118e0:	3710      	adds	r7, #16
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}

080118e6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80118e6:	b580      	push	{r7, lr}
 80118e8:	b084      	sub	sp, #16
 80118ea:	af00      	add	r7, sp, #0
 80118ec:	60f8      	str	r0, [r7, #12]
 80118ee:	60b9      	str	r1, [r7, #8]
 80118f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	68ba      	ldr	r2, [r7, #8]
 80118f6:	2100      	movs	r1, #0
 80118f8:	68f8      	ldr	r0, [r7, #12]
 80118fa:	f003 fbbe 	bl	801507a <USBD_LL_Transmit>

  return USBD_OK;
 80118fe:	2300      	movs	r3, #0
}
 8011900:	4618      	mov	r0, r3
 8011902:	3710      	adds	r7, #16
 8011904:	46bd      	mov	sp, r7
 8011906:	bd80      	pop	{r7, pc}

08011908 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b084      	sub	sp, #16
 801190c:	af00      	add	r7, sp, #0
 801190e:	60f8      	str	r0, [r7, #12]
 8011910:	60b9      	str	r1, [r7, #8]
 8011912:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	2203      	movs	r2, #3
 8011918:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	687a      	ldr	r2, [r7, #4]
 8011920:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	687a      	ldr	r2, [r7, #4]
 8011928:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	68ba      	ldr	r2, [r7, #8]
 8011930:	2100      	movs	r1, #0
 8011932:	68f8      	ldr	r0, [r7, #12]
 8011934:	f003 fbc2 	bl	80150bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011938:	2300      	movs	r3, #0
}
 801193a:	4618      	mov	r0, r3
 801193c:	3710      	adds	r7, #16
 801193e:	46bd      	mov	sp, r7
 8011940:	bd80      	pop	{r7, pc}

08011942 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011942:	b580      	push	{r7, lr}
 8011944:	b084      	sub	sp, #16
 8011946:	af00      	add	r7, sp, #0
 8011948:	60f8      	str	r0, [r7, #12]
 801194a:	60b9      	str	r1, [r7, #8]
 801194c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	68ba      	ldr	r2, [r7, #8]
 8011952:	2100      	movs	r1, #0
 8011954:	68f8      	ldr	r0, [r7, #12]
 8011956:	f003 fbb1 	bl	80150bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 801195a:	2300      	movs	r3, #0
}
 801195c:	4618      	mov	r0, r3
 801195e:	3710      	adds	r7, #16
 8011960:	46bd      	mov	sp, r7
 8011962:	bd80      	pop	{r7, pc}

08011964 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b082      	sub	sp, #8
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2204      	movs	r2, #4
 8011970:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011974:	2300      	movs	r3, #0
 8011976:	2200      	movs	r2, #0
 8011978:	2100      	movs	r1, #0
 801197a:	6878      	ldr	r0, [r7, #4]
 801197c:	f003 fb7d 	bl	801507a <USBD_LL_Transmit>

  return USBD_OK;
 8011980:	2300      	movs	r3, #0
}
 8011982:	4618      	mov	r0, r3
 8011984:	3708      	adds	r7, #8
 8011986:	46bd      	mov	sp, r7
 8011988:	bd80      	pop	{r7, pc}

0801198a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801198a:	b580      	push	{r7, lr}
 801198c:	b082      	sub	sp, #8
 801198e:	af00      	add	r7, sp, #0
 8011990:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	2205      	movs	r2, #5
 8011996:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801199a:	2300      	movs	r3, #0
 801199c:	2200      	movs	r2, #0
 801199e:	2100      	movs	r1, #0
 80119a0:	6878      	ldr	r0, [r7, #4]
 80119a2:	f003 fb8b 	bl	80150bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80119a6:	2300      	movs	r3, #0
}
 80119a8:	4618      	mov	r0, r3
 80119aa:	3708      	adds	r7, #8
 80119ac:	46bd      	mov	sp, r7
 80119ae:	bd80      	pop	{r7, pc}

080119b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80119b0:	b480      	push	{r7}
 80119b2:	b085      	sub	sp, #20
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	4603      	mov	r3, r0
 80119b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80119ba:	2300      	movs	r3, #0
 80119bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80119be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119c2:	2b84      	cmp	r3, #132	; 0x84
 80119c4:	d005      	beq.n	80119d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80119c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	4413      	add	r3, r2
 80119ce:	3303      	adds	r3, #3
 80119d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80119d2:	68fb      	ldr	r3, [r7, #12]
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	3714      	adds	r7, #20
 80119d8:	46bd      	mov	sp, r7
 80119da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119de:	4770      	bx	lr

080119e0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80119e0:	b480      	push	{r7}
 80119e2:	b083      	sub	sp, #12
 80119e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80119e6:	f3ef 8305 	mrs	r3, IPSR
 80119ea:	607b      	str	r3, [r7, #4]
  return(result);
 80119ec:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	bf14      	ite	ne
 80119f2:	2301      	movne	r3, #1
 80119f4:	2300      	moveq	r3, #0
 80119f6:	b2db      	uxtb	r3, r3
}
 80119f8:	4618      	mov	r0, r3
 80119fa:	370c      	adds	r7, #12
 80119fc:	46bd      	mov	sp, r7
 80119fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a02:	4770      	bx	lr

08011a04 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011a08:	f001 fb4c 	bl	80130a4 <vTaskStartScheduler>
  
  return osOK;
 8011a0c:	2300      	movs	r3, #0
}
 8011a0e:	4618      	mov	r0, r3
 8011a10:	bd80      	pop	{r7, pc}

08011a12 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011a12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a14:	b089      	sub	sp, #36	; 0x24
 8011a16:	af04      	add	r7, sp, #16
 8011a18:	6078      	str	r0, [r7, #4]
 8011a1a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	695b      	ldr	r3, [r3, #20]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d020      	beq.n	8011a66 <osThreadCreate+0x54>
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	699b      	ldr	r3, [r3, #24]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d01c      	beq.n	8011a66 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	685c      	ldr	r4, [r3, #4]
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681d      	ldr	r5, [r3, #0]
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	691e      	ldr	r6, [r3, #16]
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011a3e:	4618      	mov	r0, r3
 8011a40:	f7ff ffb6 	bl	80119b0 <makeFreeRtosPriority>
 8011a44:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	695b      	ldr	r3, [r3, #20]
 8011a4a:	687a      	ldr	r2, [r7, #4]
 8011a4c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011a4e:	9202      	str	r2, [sp, #8]
 8011a50:	9301      	str	r3, [sp, #4]
 8011a52:	9100      	str	r1, [sp, #0]
 8011a54:	683b      	ldr	r3, [r7, #0]
 8011a56:	4632      	mov	r2, r6
 8011a58:	4629      	mov	r1, r5
 8011a5a:	4620      	mov	r0, r4
 8011a5c:	f001 f95a 	bl	8012d14 <xTaskCreateStatic>
 8011a60:	4603      	mov	r3, r0
 8011a62:	60fb      	str	r3, [r7, #12]
 8011a64:	e01c      	b.n	8011aa0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	685c      	ldr	r4, [r3, #4]
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011a72:	b29e      	uxth	r6, r3
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	f7ff ff98 	bl	80119b0 <makeFreeRtosPriority>
 8011a80:	4602      	mov	r2, r0
 8011a82:	f107 030c 	add.w	r3, r7, #12
 8011a86:	9301      	str	r3, [sp, #4]
 8011a88:	9200      	str	r2, [sp, #0]
 8011a8a:	683b      	ldr	r3, [r7, #0]
 8011a8c:	4632      	mov	r2, r6
 8011a8e:	4629      	mov	r1, r5
 8011a90:	4620      	mov	r0, r4
 8011a92:	f001 f99c 	bl	8012dce <xTaskCreate>
 8011a96:	4603      	mov	r3, r0
 8011a98:	2b01      	cmp	r3, #1
 8011a9a:	d001      	beq.n	8011aa0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	e000      	b.n	8011aa2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011aa0:	68fb      	ldr	r3, [r7, #12]
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3714      	adds	r7, #20
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011aaa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011aaa:	b580      	push	{r7, lr}
 8011aac:	b084      	sub	sp, #16
 8011aae:	af00      	add	r7, sp, #0
 8011ab0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d001      	beq.n	8011ac0 <osDelay+0x16>
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	e000      	b.n	8011ac2 <osDelay+0x18>
 8011ac0:	2301      	movs	r3, #1
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	f001 faba 	bl	801303c <vTaskDelay>
  
  return osOK;
 8011ac8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011aca:	4618      	mov	r0, r3
 8011acc:	3710      	adds	r7, #16
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	bd80      	pop	{r7, pc}
	...

08011ad4 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b086      	sub	sp, #24
 8011ad8:	af02      	add	r7, sp, #8
 8011ada:	6078      	str	r0, [r7, #4]
 8011adc:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8011ae6:	f7ff ff7b 	bl	80119e0 <inHandlerMode>
 8011aea:	4603      	mov	r3, r0
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d01c      	beq.n	8011b2a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8011af0:	6839      	ldr	r1, [r7, #0]
 8011af2:	f107 0208 	add.w	r2, r7, #8
 8011af6:	f107 030c 	add.w	r3, r7, #12
 8011afa:	9300      	str	r3, [sp, #0]
 8011afc:	4613      	mov	r3, r2
 8011afe:	2201      	movs	r2, #1
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f002 f881 	bl	8013c08 <xTaskGenericNotifyFromISR>
 8011b06:	4603      	mov	r3, r0
 8011b08:	2b01      	cmp	r3, #1
 8011b0a:	d002      	beq.n	8011b12 <osSignalSet+0x3e>
      return 0x80000000;
 8011b0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011b10:	e019      	b.n	8011b46 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d015      	beq.n	8011b44 <osSignalSet+0x70>
 8011b18:	4b0d      	ldr	r3, [pc, #52]	; (8011b50 <osSignalSet+0x7c>)
 8011b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b1e:	601a      	str	r2, [r3, #0]
 8011b20:	f3bf 8f4f 	dsb	sy
 8011b24:	f3bf 8f6f 	isb	sy
 8011b28:	e00c      	b.n	8011b44 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8011b2a:	6839      	ldr	r1, [r7, #0]
 8011b2c:	f107 0308 	add.w	r3, r7, #8
 8011b30:	2201      	movs	r2, #1
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f001 ffb2 	bl	8013a9c <xTaskGenericNotify>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	2b01      	cmp	r3, #1
 8011b3c:	d002      	beq.n	8011b44 <osSignalSet+0x70>
    return 0x80000000;
 8011b3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011b42:	e000      	b.n	8011b46 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8011b44:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8011b46:	4618      	mov	r0, r3
 8011b48:	3710      	adds	r7, #16
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	bd80      	pop	{r7, pc}
 8011b4e:	bf00      	nop
 8011b50:	e000ed04 	.word	0xe000ed04

08011b54 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8011b54:	b590      	push	{r4, r7, lr}
 8011b56:	b089      	sub	sp, #36	; 0x24
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	60f8      	str	r0, [r7, #12]
 8011b5c:	60b9      	str	r1, [r7, #8]
 8011b5e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8011b60:	2300      	movs	r3, #0
 8011b62:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8011b64:	2300      	movs	r3, #0
 8011b66:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b6e:	d103      	bne.n	8011b78 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8011b70:	f04f 33ff 	mov.w	r3, #4294967295
 8011b74:	61fb      	str	r3, [r7, #28]
 8011b76:	e009      	b.n	8011b8c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d006      	beq.n	8011b8c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8011b82:	69fb      	ldr	r3, [r7, #28]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d101      	bne.n	8011b8c <osSignalWait+0x38>
      ticks = 1;
 8011b88:	2301      	movs	r3, #1
 8011b8a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8011b8c:	f7ff ff28 	bl	80119e0 <inHandlerMode>
 8011b90:	4603      	mov	r3, r0
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d002      	beq.n	8011b9c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8011b96:	2382      	movs	r3, #130	; 0x82
 8011b98:	613b      	str	r3, [r7, #16]
 8011b9a:	e01b      	b.n	8011bd4 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8011b9c:	68b9      	ldr	r1, [r7, #8]
 8011b9e:	f107 0310 	add.w	r3, r7, #16
 8011ba2:	1d1a      	adds	r2, r3, #4
 8011ba4:	69fb      	ldr	r3, [r7, #28]
 8011ba6:	2000      	movs	r0, #0
 8011ba8:	f001 ff1e 	bl	80139e8 <xTaskNotifyWait>
 8011bac:	4603      	mov	r3, r0
 8011bae:	2b01      	cmp	r3, #1
 8011bb0:	d008      	beq.n	8011bc4 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8011bb2:	69fb      	ldr	r3, [r7, #28]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d102      	bne.n	8011bbe <osSignalWait+0x6a>
 8011bb8:	2300      	movs	r3, #0
 8011bba:	613b      	str	r3, [r7, #16]
 8011bbc:	e00a      	b.n	8011bd4 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8011bbe:	2340      	movs	r3, #64	; 0x40
 8011bc0:	613b      	str	r3, [r7, #16]
 8011bc2:	e007      	b.n	8011bd4 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8011bc4:	697b      	ldr	r3, [r7, #20]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	da02      	bge.n	8011bd0 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8011bca:	2386      	movs	r3, #134	; 0x86
 8011bcc:	613b      	str	r3, [r7, #16]
 8011bce:	e001      	b.n	8011bd4 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8011bd0:	2308      	movs	r3, #8
 8011bd2:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	461c      	mov	r4, r3
 8011bd8:	f107 0310 	add.w	r3, r7, #16
 8011bdc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011be0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011be4:	68f8      	ldr	r0, [r7, #12]
 8011be6:	3724      	adds	r7, #36	; 0x24
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd90      	pop	{r4, r7, pc}

08011bec <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b082      	sub	sp, #8
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	685b      	ldr	r3, [r3, #4]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d007      	beq.n	8011c0c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	685b      	ldr	r3, [r3, #4]
 8011c00:	4619      	mov	r1, r3
 8011c02:	2001      	movs	r0, #1
 8011c04:	f000 fc65 	bl	80124d2 <xQueueCreateMutexStatic>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	e003      	b.n	8011c14 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8011c0c:	2001      	movs	r0, #1
 8011c0e:	f000 fc48 	bl	80124a2 <xQueueCreateMutex>
 8011c12:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8011c14:	4618      	mov	r0, r3
 8011c16:	3708      	adds	r7, #8
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd80      	pop	{r7, pc}

08011c1c <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b086      	sub	sp, #24
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	685b      	ldr	r3, [r3, #4]
 8011c28:	3303      	adds	r3, #3
 8011c2a:	f023 0303 	bic.w	r3, r3, #3
 8011c2e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8011c30:	2014      	movs	r0, #20
 8011c32:	f002 fb79 	bl	8014328 <pvPortMalloc>
 8011c36:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8011c38:	697b      	ldr	r3, [r7, #20]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d046      	beq.n	8011ccc <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681a      	ldr	r2, [r3, #0]
 8011c42:	697b      	ldr	r3, [r7, #20]
 8011c44:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8011c46:	68fa      	ldr	r2, [r7, #12]
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8011c4c:	697b      	ldr	r3, [r7, #20]
 8011c4e:	2200      	movs	r2, #0
 8011c50:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	4618      	mov	r0, r3
 8011c58:	f002 fb66 	bl	8014328 <pvPortMalloc>
 8011c5c:	4602      	mov	r2, r0
 8011c5e:	697b      	ldr	r3, [r7, #20]
 8011c60:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	685b      	ldr	r3, [r3, #4]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d02b      	beq.n	8011cc2 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	68fa      	ldr	r2, [r7, #12]
 8011c70:	fb02 f303 	mul.w	r3, r2, r3
 8011c74:	4618      	mov	r0, r3
 8011c76:	f002 fb57 	bl	8014328 <pvPortMalloc>
 8011c7a:	4602      	mov	r2, r0
 8011c7c:	697b      	ldr	r3, [r7, #20]
 8011c7e:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8011c80:	697b      	ldr	r3, [r7, #20]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d011      	beq.n	8011cac <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8011c88:	2300      	movs	r3, #0
 8011c8a:	613b      	str	r3, [r7, #16]
 8011c8c:	e008      	b.n	8011ca0 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8011c8e:	697b      	ldr	r3, [r7, #20]
 8011c90:	685a      	ldr	r2, [r3, #4]
 8011c92:	693b      	ldr	r3, [r7, #16]
 8011c94:	4413      	add	r3, r2
 8011c96:	2200      	movs	r2, #0
 8011c98:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8011c9a:	693b      	ldr	r3, [r7, #16]
 8011c9c:	3301      	adds	r3, #1
 8011c9e:	613b      	str	r3, [r7, #16]
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	693a      	ldr	r2, [r7, #16]
 8011ca6:	429a      	cmp	r2, r3
 8011ca8:	d3f1      	bcc.n	8011c8e <osPoolCreate+0x72>
 8011caa:	e00f      	b.n	8011ccc <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8011cac:	697b      	ldr	r3, [r7, #20]
 8011cae:	685b      	ldr	r3, [r3, #4]
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	f002 fbfd 	bl	80144b0 <vPortFree>
        vPortFree(thePool);
 8011cb6:	6978      	ldr	r0, [r7, #20]
 8011cb8:	f002 fbfa 	bl	80144b0 <vPortFree>
        thePool = NULL;
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	617b      	str	r3, [r7, #20]
 8011cc0:	e004      	b.n	8011ccc <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8011cc2:	6978      	ldr	r0, [r7, #20]
 8011cc4:	f002 fbf4 	bl	80144b0 <vPortFree>
      thePool = NULL;
 8011cc8:	2300      	movs	r3, #0
 8011cca:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8011ccc:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8011cce:	4618      	mov	r0, r3
 8011cd0:	3718      	adds	r7, #24
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bd80      	pop	{r7, pc}

08011cd6 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8011cd6:	b580      	push	{r7, lr}
 8011cd8:	b08a      	sub	sp, #40	; 0x28
 8011cda:	af00      	add	r7, sp, #0
 8011cdc:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8011cde:	2300      	movs	r3, #0
 8011ce0:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8011ce6:	f7ff fe7b 	bl	80119e0 <inHandlerMode>
 8011cea:	4603      	mov	r3, r0
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d00e      	beq.n	8011d0e <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011cf0:	f3ef 8211 	mrs	r2, BASEPRI
 8011cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cf8:	f383 8811 	msr	BASEPRI, r3
 8011cfc:	f3bf 8f6f 	isb	sy
 8011d00:	f3bf 8f4f 	dsb	sy
 8011d04:	617a      	str	r2, [r7, #20]
 8011d06:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011d08:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8011d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8011d0c:	e001      	b.n	8011d12 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8011d0e:	f002 f9e9 	bl	80140e4 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8011d12:	2300      	movs	r3, #0
 8011d14:	61fb      	str	r3, [r7, #28]
 8011d16:	e029      	b.n	8011d6c <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	691a      	ldr	r2, [r3, #16]
 8011d1c:	69fb      	ldr	r3, [r7, #28]
 8011d1e:	4413      	add	r3, r2
 8011d20:	687a      	ldr	r2, [r7, #4]
 8011d22:	6892      	ldr	r2, [r2, #8]
 8011d24:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d28:	fb02 f201 	mul.w	r2, r2, r1
 8011d2c:	1a9b      	subs	r3, r3, r2
 8011d2e:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	685a      	ldr	r2, [r3, #4]
 8011d34:	69bb      	ldr	r3, [r7, #24]
 8011d36:	4413      	add	r3, r2
 8011d38:	781b      	ldrb	r3, [r3, #0]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d113      	bne.n	8011d66 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	685a      	ldr	r2, [r3, #4]
 8011d42:	69bb      	ldr	r3, [r7, #24]
 8011d44:	4413      	add	r3, r2
 8011d46:	2201      	movs	r2, #1
 8011d48:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	4619      	mov	r1, r3
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	68db      	ldr	r3, [r3, #12]
 8011d54:	69ba      	ldr	r2, [r7, #24]
 8011d56:	fb02 f303 	mul.w	r3, r2, r3
 8011d5a:	440b      	add	r3, r1
 8011d5c:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	69ba      	ldr	r2, [r7, #24]
 8011d62:	611a      	str	r2, [r3, #16]
      break;
 8011d64:	e007      	b.n	8011d76 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8011d66:	69fb      	ldr	r3, [r7, #28]
 8011d68:	3301      	adds	r3, #1
 8011d6a:	61fb      	str	r3, [r7, #28]
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	689b      	ldr	r3, [r3, #8]
 8011d70:	69fa      	ldr	r2, [r7, #28]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d3d0      	bcc.n	8011d18 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8011d76:	f7ff fe33 	bl	80119e0 <inHandlerMode>
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d005      	beq.n	8011d8c <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8011d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d82:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011d8a:	e001      	b.n	8011d90 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8011d8c:	f002 f9da 	bl	8014144 <vPortExitCritical>
  }
  
  return p;
 8011d90:	6a3b      	ldr	r3, [r7, #32]
}
 8011d92:	4618      	mov	r0, r3
 8011d94:	3728      	adds	r7, #40	; 0x28
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bd80      	pop	{r7, pc}

08011d9a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8011d9a:	b480      	push	{r7}
 8011d9c:	b085      	sub	sp, #20
 8011d9e:	af00      	add	r7, sp, #0
 8011da0:	6078      	str	r0, [r7, #4]
 8011da2:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d101      	bne.n	8011dae <osPoolFree+0x14>
    return osErrorParameter;
 8011daa:	2380      	movs	r3, #128	; 0x80
 8011dac:	e030      	b.n	8011e10 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d101      	bne.n	8011db8 <osPoolFree+0x1e>
    return osErrorParameter;
 8011db4:	2380      	movs	r3, #128	; 0x80
 8011db6:	e02b      	b.n	8011e10 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	683a      	ldr	r2, [r7, #0]
 8011dbe:	429a      	cmp	r2, r3
 8011dc0:	d201      	bcs.n	8011dc6 <osPoolFree+0x2c>
    return osErrorParameter;
 8011dc2:	2380      	movs	r3, #128	; 0x80
 8011dc4:	e024      	b.n	8011e10 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8011dc6:	683b      	ldr	r3, [r7, #0]
 8011dc8:	687a      	ldr	r2, [r7, #4]
 8011dca:	6812      	ldr	r2, [r2, #0]
 8011dcc:	1a9b      	subs	r3, r3, r2
 8011dce:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	68da      	ldr	r2, [r3, #12]
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8011dda:	fb02 f201 	mul.w	r2, r2, r1
 8011dde:	1a9b      	subs	r3, r3, r2
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d001      	beq.n	8011de8 <osPoolFree+0x4e>
    return osErrorParameter;
 8011de4:	2380      	movs	r3, #128	; 0x80
 8011de6:	e013      	b.n	8011e10 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	68db      	ldr	r3, [r3, #12]
 8011dec:	68fa      	ldr	r2, [r7, #12]
 8011dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8011df2:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	689b      	ldr	r3, [r3, #8]
 8011df8:	68fa      	ldr	r2, [r7, #12]
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d301      	bcc.n	8011e02 <osPoolFree+0x68>
    return osErrorParameter;
 8011dfe:	2380      	movs	r3, #128	; 0x80
 8011e00:	e006      	b.n	8011e10 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	685a      	ldr	r2, [r3, #4]
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	4413      	add	r3, r2
 8011e0a:	2200      	movs	r2, #0
 8011e0c:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8011e0e:	2300      	movs	r3, #0
}
 8011e10:	4618      	mov	r0, r3
 8011e12:	3714      	adds	r7, #20
 8011e14:	46bd      	mov	sp, r7
 8011e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1a:	4770      	bx	lr

08011e1c <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8011e1c:	b590      	push	{r4, r7, lr}
 8011e1e:	b087      	sub	sp, #28
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	60fb      	str	r3, [r7, #12]
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	685b      	ldr	r3, [r3, #4]
 8011e30:	613b      	str	r3, [r7, #16]
 8011e32:	2300      	movs	r3, #0
 8011e34:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	689c      	ldr	r4, [r3, #8]
 8011e3a:	200c      	movs	r0, #12
 8011e3c:	f002 fa74 	bl	8014328 <pvPortMalloc>
 8011e40:	4603      	mov	r3, r0
 8011e42:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	689b      	ldr	r3, [r3, #8]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d101      	bne.n	8011e52 <osMailCreate+0x36>
    return NULL;
 8011e4e:	2300      	movs	r3, #0
 8011e50:	e038      	b.n	8011ec4 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	689b      	ldr	r3, [r3, #8]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	687a      	ldr	r2, [r7, #4]
 8011e5a:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	6818      	ldr	r0, [r3, #0]
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	689b      	ldr	r3, [r3, #8]
 8011e64:	681c      	ldr	r4, [r3, #0]
 8011e66:	2200      	movs	r2, #0
 8011e68:	2104      	movs	r1, #4
 8011e6a:	f000 faa1 	bl	80123b0 <xQueueGenericCreate>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	689b      	ldr	r3, [r3, #8]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	685b      	ldr	r3, [r3, #4]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d107      	bne.n	8011e8e <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	689b      	ldr	r3, [r3, #8]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	4618      	mov	r0, r3
 8011e86:	f002 fb13 	bl	80144b0 <vPortFree>
    return NULL;
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	e01a      	b.n	8011ec4 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	689b      	ldr	r3, [r3, #8]
 8011e92:	681c      	ldr	r4, [r3, #0]
 8011e94:	f107 030c 	add.w	r3, r7, #12
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7ff febf 	bl	8011c1c <osPoolCreate>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	689b      	ldr	r3, [r3, #8]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	689b      	ldr	r3, [r3, #8]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d107      	bne.n	8011ebe <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	689b      	ldr	r3, [r3, #8]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	f002 fafb 	bl	80144b0 <vPortFree>
    return NULL;
 8011eba:	2300      	movs	r3, #0
 8011ebc:	e002      	b.n	8011ec4 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	689b      	ldr	r3, [r3, #8]
 8011ec2:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	371c      	adds	r7, #28
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	bd90      	pop	{r4, r7, pc}

08011ecc <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b084      	sub	sp, #16
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
 8011ed4:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d101      	bne.n	8011ee0 <osMailAlloc+0x14>
    return NULL;
 8011edc:	2300      	movs	r3, #0
 8011ede:	e006      	b.n	8011eee <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	689b      	ldr	r3, [r3, #8]
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f7ff fef6 	bl	8011cd6 <osPoolAlloc>
 8011eea:	60f8      	str	r0, [r7, #12]
  
  return p;
 8011eec:	68fb      	ldr	r3, [r7, #12]
}
 8011eee:	4618      	mov	r0, r3
 8011ef0:	3710      	adds	r7, #16
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	bd80      	pop	{r7, pc}
	...

08011ef8 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b084      	sub	sp, #16
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
 8011f00:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d101      	bne.n	8011f0c <osMailPut+0x14>
    return osErrorParameter;
 8011f08:	2380      	movs	r3, #128	; 0x80
 8011f0a:	e02c      	b.n	8011f66 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8011f10:	f7ff fd66 	bl	80119e0 <inHandlerMode>
 8011f14:	4603      	mov	r3, r0
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d018      	beq.n	8011f4c <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	6858      	ldr	r0, [r3, #4]
 8011f1e:	f107 020c 	add.w	r2, r7, #12
 8011f22:	4639      	mov	r1, r7
 8011f24:	2300      	movs	r3, #0
 8011f26:	f000 fbed 	bl	8012704 <xQueueGenericSendFromISR>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	2b01      	cmp	r3, #1
 8011f2e:	d001      	beq.n	8011f34 <osMailPut+0x3c>
      return osErrorOS;
 8011f30:	23ff      	movs	r3, #255	; 0xff
 8011f32:	e018      	b.n	8011f66 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d014      	beq.n	8011f64 <osMailPut+0x6c>
 8011f3a:	4b0d      	ldr	r3, [pc, #52]	; (8011f70 <osMailPut+0x78>)
 8011f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f40:	601a      	str	r2, [r3, #0]
 8011f42:	f3bf 8f4f 	dsb	sy
 8011f46:	f3bf 8f6f 	isb	sy
 8011f4a:	e00b      	b.n	8011f64 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	6858      	ldr	r0, [r3, #4]
 8011f50:	4639      	mov	r1, r7
 8011f52:	2300      	movs	r3, #0
 8011f54:	2200      	movs	r2, #0
 8011f56:	f000 fad7 	bl	8012508 <xQueueGenericSend>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	2b01      	cmp	r3, #1
 8011f5e:	d001      	beq.n	8011f64 <osMailPut+0x6c>
      return osErrorOS;
 8011f60:	23ff      	movs	r3, #255	; 0xff
 8011f62:	e000      	b.n	8011f66 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8011f64:	2300      	movs	r3, #0
}
 8011f66:	4618      	mov	r0, r3
 8011f68:	3710      	adds	r7, #16
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	bd80      	pop	{r7, pc}
 8011f6e:	bf00      	nop
 8011f70:	e000ed04 	.word	0xe000ed04

08011f74 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8011f74:	b590      	push	{r4, r7, lr}
 8011f76:	b08b      	sub	sp, #44	; 0x2c
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	60f8      	str	r0, [r7, #12]
 8011f7c:	60b9      	str	r1, [r7, #8]
 8011f7e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8011f84:	68bb      	ldr	r3, [r7, #8]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d10a      	bne.n	8011fa0 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8011f8a:	2380      	movs	r3, #128	; 0x80
 8011f8c:	617b      	str	r3, [r7, #20]
    return event;
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	461c      	mov	r4, r3
 8011f92:	f107 0314 	add.w	r3, r7, #20
 8011f96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011f9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011f9e:	e056      	b.n	801204e <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fae:	d103      	bne.n	8011fb8 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8011fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8011fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8011fb6:	e009      	b.n	8011fcc <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d006      	beq.n	8011fcc <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8011fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d101      	bne.n	8011fcc <osMailGet+0x58>
      ticks = 1;
 8011fc8:	2301      	movs	r3, #1
 8011fca:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8011fcc:	f7ff fd08 	bl	80119e0 <inHandlerMode>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d01d      	beq.n	8012012 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8011fd6:	68bb      	ldr	r3, [r7, #8]
 8011fd8:	6858      	ldr	r0, [r3, #4]
 8011fda:	f107 0220 	add.w	r2, r7, #32
 8011fde:	f107 0314 	add.w	r3, r7, #20
 8011fe2:	3304      	adds	r3, #4
 8011fe4:	4619      	mov	r1, r3
 8011fe6:	f000 fd05 	bl	80129f4 <xQueueReceiveFromISR>
 8011fea:	4603      	mov	r3, r0
 8011fec:	2b01      	cmp	r3, #1
 8011fee:	d102      	bne.n	8011ff6 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8011ff0:	2320      	movs	r3, #32
 8011ff2:	617b      	str	r3, [r7, #20]
 8011ff4:	e001      	b.n	8011ffa <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011ffa:	6a3b      	ldr	r3, [r7, #32]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d01e      	beq.n	801203e <osMailGet+0xca>
 8012000:	4b15      	ldr	r3, [pc, #84]	; (8012058 <osMailGet+0xe4>)
 8012002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012006:	601a      	str	r2, [r3, #0]
 8012008:	f3bf 8f4f 	dsb	sy
 801200c:	f3bf 8f6f 	isb	sy
 8012010:	e015      	b.n	801203e <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8012012:	68bb      	ldr	r3, [r7, #8]
 8012014:	6858      	ldr	r0, [r3, #4]
 8012016:	f107 0314 	add.w	r3, r7, #20
 801201a:	3304      	adds	r3, #4
 801201c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801201e:	4619      	mov	r1, r3
 8012020:	f000 fc08 	bl	8012834 <xQueueReceive>
 8012024:	4603      	mov	r3, r0
 8012026:	2b01      	cmp	r3, #1
 8012028:	d102      	bne.n	8012030 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 801202a:	2320      	movs	r3, #32
 801202c:	617b      	str	r3, [r7, #20]
 801202e:	e006      	b.n	801203e <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012032:	2b00      	cmp	r3, #0
 8012034:	d101      	bne.n	801203a <osMailGet+0xc6>
 8012036:	2300      	movs	r3, #0
 8012038:	e000      	b.n	801203c <osMailGet+0xc8>
 801203a:	2340      	movs	r3, #64	; 0x40
 801203c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	461c      	mov	r4, r3
 8012042:	f107 0314 	add.w	r3, r7, #20
 8012046:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801204a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801204e:	68f8      	ldr	r0, [r7, #12]
 8012050:	372c      	adds	r7, #44	; 0x2c
 8012052:	46bd      	mov	sp, r7
 8012054:	bd90      	pop	{r4, r7, pc}
 8012056:	bf00      	nop
 8012058:	e000ed04 	.word	0xe000ed04

0801205c <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b082      	sub	sp, #8
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
 8012064:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d101      	bne.n	8012070 <osMailFree+0x14>
    return osErrorParameter;
 801206c:	2380      	movs	r3, #128	; 0x80
 801206e:	e006      	b.n	801207e <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	689b      	ldr	r3, [r3, #8]
 8012074:	6839      	ldr	r1, [r7, #0]
 8012076:	4618      	mov	r0, r3
 8012078:	f7ff fe8f 	bl	8011d9a <osPoolFree>
 801207c:	4603      	mov	r3, r0
}
 801207e:	4618      	mov	r0, r3
 8012080:	3708      	adds	r7, #8
 8012082:	46bd      	mov	sp, r7
 8012084:	bd80      	pop	{r7, pc}

08012086 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012086:	b480      	push	{r7}
 8012088:	b083      	sub	sp, #12
 801208a:	af00      	add	r7, sp, #0
 801208c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	f103 0208 	add.w	r2, r3, #8
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	f04f 32ff 	mov.w	r2, #4294967295
 801209e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	f103 0208 	add.w	r2, r3, #8
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	f103 0208 	add.w	r2, r3, #8
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	2200      	movs	r2, #0
 80120b8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80120ba:	bf00      	nop
 80120bc:	370c      	adds	r7, #12
 80120be:	46bd      	mov	sp, r7
 80120c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c4:	4770      	bx	lr

080120c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80120c6:	b480      	push	{r7}
 80120c8:	b083      	sub	sp, #12
 80120ca:	af00      	add	r7, sp, #0
 80120cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	2200      	movs	r2, #0
 80120d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80120d4:	bf00      	nop
 80120d6:	370c      	adds	r7, #12
 80120d8:	46bd      	mov	sp, r7
 80120da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120de:	4770      	bx	lr

080120e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80120e0:	b480      	push	{r7}
 80120e2:	b085      	sub	sp, #20
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
 80120e8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	685b      	ldr	r3, [r3, #4]
 80120ee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80120f0:	683b      	ldr	r3, [r7, #0]
 80120f2:	68fa      	ldr	r2, [r7, #12]
 80120f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	689a      	ldr	r2, [r3, #8]
 80120fa:	683b      	ldr	r3, [r7, #0]
 80120fc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	689b      	ldr	r3, [r3, #8]
 8012102:	683a      	ldr	r2, [r7, #0]
 8012104:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	683a      	ldr	r2, [r7, #0]
 801210a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	687a      	ldr	r2, [r7, #4]
 8012110:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	1c5a      	adds	r2, r3, #1
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	601a      	str	r2, [r3, #0]
}
 801211c:	bf00      	nop
 801211e:	3714      	adds	r7, #20
 8012120:	46bd      	mov	sp, r7
 8012122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012126:	4770      	bx	lr

08012128 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012128:	b480      	push	{r7}
 801212a:	b085      	sub	sp, #20
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
 8012130:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012132:	683b      	ldr	r3, [r7, #0]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801213e:	d103      	bne.n	8012148 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	691b      	ldr	r3, [r3, #16]
 8012144:	60fb      	str	r3, [r7, #12]
 8012146:	e00c      	b.n	8012162 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	3308      	adds	r3, #8
 801214c:	60fb      	str	r3, [r7, #12]
 801214e:	e002      	b.n	8012156 <vListInsert+0x2e>
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	685b      	ldr	r3, [r3, #4]
 8012154:	60fb      	str	r3, [r7, #12]
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	685b      	ldr	r3, [r3, #4]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	68ba      	ldr	r2, [r7, #8]
 801215e:	429a      	cmp	r2, r3
 8012160:	d2f6      	bcs.n	8012150 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	685a      	ldr	r2, [r3, #4]
 8012166:	683b      	ldr	r3, [r7, #0]
 8012168:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801216a:	683b      	ldr	r3, [r7, #0]
 801216c:	685b      	ldr	r3, [r3, #4]
 801216e:	683a      	ldr	r2, [r7, #0]
 8012170:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012172:	683b      	ldr	r3, [r7, #0]
 8012174:	68fa      	ldr	r2, [r7, #12]
 8012176:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	683a      	ldr	r2, [r7, #0]
 801217c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801217e:	683b      	ldr	r3, [r7, #0]
 8012180:	687a      	ldr	r2, [r7, #4]
 8012182:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	1c5a      	adds	r2, r3, #1
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	601a      	str	r2, [r3, #0]
}
 801218e:	bf00      	nop
 8012190:	3714      	adds	r7, #20
 8012192:	46bd      	mov	sp, r7
 8012194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012198:	4770      	bx	lr

0801219a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801219a:	b480      	push	{r7}
 801219c:	b085      	sub	sp, #20
 801219e:	af00      	add	r7, sp, #0
 80121a0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	691b      	ldr	r3, [r3, #16]
 80121a6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	685b      	ldr	r3, [r3, #4]
 80121ac:	687a      	ldr	r2, [r7, #4]
 80121ae:	6892      	ldr	r2, [r2, #8]
 80121b0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	689b      	ldr	r3, [r3, #8]
 80121b6:	687a      	ldr	r2, [r7, #4]
 80121b8:	6852      	ldr	r2, [r2, #4]
 80121ba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	685b      	ldr	r3, [r3, #4]
 80121c0:	687a      	ldr	r2, [r7, #4]
 80121c2:	429a      	cmp	r2, r3
 80121c4:	d103      	bne.n	80121ce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	689a      	ldr	r2, [r3, #8]
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	2200      	movs	r2, #0
 80121d2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	1e5a      	subs	r2, r3, #1
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	681b      	ldr	r3, [r3, #0]
}
 80121e2:	4618      	mov	r0, r3
 80121e4:	3714      	adds	r7, #20
 80121e6:	46bd      	mov	sp, r7
 80121e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ec:	4770      	bx	lr
	...

080121f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b084      	sub	sp, #16
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
 80121f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d10a      	bne.n	801221a <xQueueGenericReset+0x2a>
	__asm volatile
 8012204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012208:	f383 8811 	msr	BASEPRI, r3
 801220c:	f3bf 8f6f 	isb	sy
 8012210:	f3bf 8f4f 	dsb	sy
 8012214:	60bb      	str	r3, [r7, #8]
}
 8012216:	bf00      	nop
 8012218:	e7fe      	b.n	8012218 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801221a:	f001 ff63 	bl	80140e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	681a      	ldr	r2, [r3, #0]
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012226:	68f9      	ldr	r1, [r7, #12]
 8012228:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801222a:	fb01 f303 	mul.w	r3, r1, r3
 801222e:	441a      	add	r2, r3
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	2200      	movs	r2, #0
 8012238:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	681a      	ldr	r2, [r3, #0]
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	681a      	ldr	r2, [r3, #0]
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801224a:	3b01      	subs	r3, #1
 801224c:	68f9      	ldr	r1, [r7, #12]
 801224e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012250:	fb01 f303 	mul.w	r3, r1, r3
 8012254:	441a      	add	r2, r3
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	22ff      	movs	r2, #255	; 0xff
 801225e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	22ff      	movs	r2, #255	; 0xff
 8012266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d114      	bne.n	801229a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	691b      	ldr	r3, [r3, #16]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d01a      	beq.n	80122ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	3310      	adds	r3, #16
 801227c:	4618      	mov	r0, r3
 801227e:	f001 f953 	bl	8013528 <xTaskRemoveFromEventList>
 8012282:	4603      	mov	r3, r0
 8012284:	2b00      	cmp	r3, #0
 8012286:	d012      	beq.n	80122ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012288:	4b0c      	ldr	r3, [pc, #48]	; (80122bc <xQueueGenericReset+0xcc>)
 801228a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801228e:	601a      	str	r2, [r3, #0]
 8012290:	f3bf 8f4f 	dsb	sy
 8012294:	f3bf 8f6f 	isb	sy
 8012298:	e009      	b.n	80122ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	3310      	adds	r3, #16
 801229e:	4618      	mov	r0, r3
 80122a0:	f7ff fef1 	bl	8012086 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	3324      	adds	r3, #36	; 0x24
 80122a8:	4618      	mov	r0, r3
 80122aa:	f7ff feec 	bl	8012086 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80122ae:	f001 ff49 	bl	8014144 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80122b2:	2301      	movs	r3, #1
}
 80122b4:	4618      	mov	r0, r3
 80122b6:	3710      	adds	r7, #16
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bd80      	pop	{r7, pc}
 80122bc:	e000ed04 	.word	0xe000ed04

080122c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b08e      	sub	sp, #56	; 0x38
 80122c4:	af02      	add	r7, sp, #8
 80122c6:	60f8      	str	r0, [r7, #12]
 80122c8:	60b9      	str	r1, [r7, #8]
 80122ca:	607a      	str	r2, [r7, #4]
 80122cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d10a      	bne.n	80122ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80122d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122d8:	f383 8811 	msr	BASEPRI, r3
 80122dc:	f3bf 8f6f 	isb	sy
 80122e0:	f3bf 8f4f 	dsb	sy
 80122e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80122e6:	bf00      	nop
 80122e8:	e7fe      	b.n	80122e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80122ea:	683b      	ldr	r3, [r7, #0]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d10a      	bne.n	8012306 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80122f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122f4:	f383 8811 	msr	BASEPRI, r3
 80122f8:	f3bf 8f6f 	isb	sy
 80122fc:	f3bf 8f4f 	dsb	sy
 8012300:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012302:	bf00      	nop
 8012304:	e7fe      	b.n	8012304 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d002      	beq.n	8012312 <xQueueGenericCreateStatic+0x52>
 801230c:	68bb      	ldr	r3, [r7, #8]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d001      	beq.n	8012316 <xQueueGenericCreateStatic+0x56>
 8012312:	2301      	movs	r3, #1
 8012314:	e000      	b.n	8012318 <xQueueGenericCreateStatic+0x58>
 8012316:	2300      	movs	r3, #0
 8012318:	2b00      	cmp	r3, #0
 801231a:	d10a      	bne.n	8012332 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801231c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012320:	f383 8811 	msr	BASEPRI, r3
 8012324:	f3bf 8f6f 	isb	sy
 8012328:	f3bf 8f4f 	dsb	sy
 801232c:	623b      	str	r3, [r7, #32]
}
 801232e:	bf00      	nop
 8012330:	e7fe      	b.n	8012330 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d102      	bne.n	801233e <xQueueGenericCreateStatic+0x7e>
 8012338:	68bb      	ldr	r3, [r7, #8]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d101      	bne.n	8012342 <xQueueGenericCreateStatic+0x82>
 801233e:	2301      	movs	r3, #1
 8012340:	e000      	b.n	8012344 <xQueueGenericCreateStatic+0x84>
 8012342:	2300      	movs	r3, #0
 8012344:	2b00      	cmp	r3, #0
 8012346:	d10a      	bne.n	801235e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801234c:	f383 8811 	msr	BASEPRI, r3
 8012350:	f3bf 8f6f 	isb	sy
 8012354:	f3bf 8f4f 	dsb	sy
 8012358:	61fb      	str	r3, [r7, #28]
}
 801235a:	bf00      	nop
 801235c:	e7fe      	b.n	801235c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801235e:	2348      	movs	r3, #72	; 0x48
 8012360:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012362:	697b      	ldr	r3, [r7, #20]
 8012364:	2b48      	cmp	r3, #72	; 0x48
 8012366:	d00a      	beq.n	801237e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012368:	f04f 0350 	mov.w	r3, #80	; 0x50
 801236c:	f383 8811 	msr	BASEPRI, r3
 8012370:	f3bf 8f6f 	isb	sy
 8012374:	f3bf 8f4f 	dsb	sy
 8012378:	61bb      	str	r3, [r7, #24]
}
 801237a:	bf00      	nop
 801237c:	e7fe      	b.n	801237c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801237e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012380:	683b      	ldr	r3, [r7, #0]
 8012382:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012386:	2b00      	cmp	r3, #0
 8012388:	d00d      	beq.n	80123a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801238c:	2201      	movs	r2, #1
 801238e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012392:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012398:	9300      	str	r3, [sp, #0]
 801239a:	4613      	mov	r3, r2
 801239c:	687a      	ldr	r2, [r7, #4]
 801239e:	68b9      	ldr	r1, [r7, #8]
 80123a0:	68f8      	ldr	r0, [r7, #12]
 80123a2:	f000 f845 	bl	8012430 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80123a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80123a8:	4618      	mov	r0, r3
 80123aa:	3730      	adds	r7, #48	; 0x30
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}

080123b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b08a      	sub	sp, #40	; 0x28
 80123b4:	af02      	add	r7, sp, #8
 80123b6:	60f8      	str	r0, [r7, #12]
 80123b8:	60b9      	str	r1, [r7, #8]
 80123ba:	4613      	mov	r3, r2
 80123bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d10a      	bne.n	80123da <xQueueGenericCreate+0x2a>
	__asm volatile
 80123c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123c8:	f383 8811 	msr	BASEPRI, r3
 80123cc:	f3bf 8f6f 	isb	sy
 80123d0:	f3bf 8f4f 	dsb	sy
 80123d4:	613b      	str	r3, [r7, #16]
}
 80123d6:	bf00      	nop
 80123d8:	e7fe      	b.n	80123d8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80123da:	68bb      	ldr	r3, [r7, #8]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d102      	bne.n	80123e6 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80123e0:	2300      	movs	r3, #0
 80123e2:	61fb      	str	r3, [r7, #28]
 80123e4:	e004      	b.n	80123f0 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	68ba      	ldr	r2, [r7, #8]
 80123ea:	fb02 f303 	mul.w	r3, r2, r3
 80123ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80123f0:	69fb      	ldr	r3, [r7, #28]
 80123f2:	3348      	adds	r3, #72	; 0x48
 80123f4:	4618      	mov	r0, r3
 80123f6:	f001 ff97 	bl	8014328 <pvPortMalloc>
 80123fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80123fc:	69bb      	ldr	r3, [r7, #24]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d011      	beq.n	8012426 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012402:	69bb      	ldr	r3, [r7, #24]
 8012404:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012406:	697b      	ldr	r3, [r7, #20]
 8012408:	3348      	adds	r3, #72	; 0x48
 801240a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801240c:	69bb      	ldr	r3, [r7, #24]
 801240e:	2200      	movs	r2, #0
 8012410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012414:	79fa      	ldrb	r2, [r7, #7]
 8012416:	69bb      	ldr	r3, [r7, #24]
 8012418:	9300      	str	r3, [sp, #0]
 801241a:	4613      	mov	r3, r2
 801241c:	697a      	ldr	r2, [r7, #20]
 801241e:	68b9      	ldr	r1, [r7, #8]
 8012420:	68f8      	ldr	r0, [r7, #12]
 8012422:	f000 f805 	bl	8012430 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012426:	69bb      	ldr	r3, [r7, #24]
	}
 8012428:	4618      	mov	r0, r3
 801242a:	3720      	adds	r7, #32
 801242c:	46bd      	mov	sp, r7
 801242e:	bd80      	pop	{r7, pc}

08012430 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b084      	sub	sp, #16
 8012434:	af00      	add	r7, sp, #0
 8012436:	60f8      	str	r0, [r7, #12]
 8012438:	60b9      	str	r1, [r7, #8]
 801243a:	607a      	str	r2, [r7, #4]
 801243c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801243e:	68bb      	ldr	r3, [r7, #8]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d103      	bne.n	801244c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012444:	69bb      	ldr	r3, [r7, #24]
 8012446:	69ba      	ldr	r2, [r7, #24]
 8012448:	601a      	str	r2, [r3, #0]
 801244a:	e002      	b.n	8012452 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801244c:	69bb      	ldr	r3, [r7, #24]
 801244e:	687a      	ldr	r2, [r7, #4]
 8012450:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012452:	69bb      	ldr	r3, [r7, #24]
 8012454:	68fa      	ldr	r2, [r7, #12]
 8012456:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012458:	69bb      	ldr	r3, [r7, #24]
 801245a:	68ba      	ldr	r2, [r7, #8]
 801245c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801245e:	2101      	movs	r1, #1
 8012460:	69b8      	ldr	r0, [r7, #24]
 8012462:	f7ff fec5 	bl	80121f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012466:	bf00      	nop
 8012468:	3710      	adds	r7, #16
 801246a:	46bd      	mov	sp, r7
 801246c:	bd80      	pop	{r7, pc}

0801246e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801246e:	b580      	push	{r7, lr}
 8012470:	b082      	sub	sp, #8
 8012472:	af00      	add	r7, sp, #0
 8012474:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d00e      	beq.n	801249a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2200      	movs	r2, #0
 8012480:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	2200      	movs	r2, #0
 8012486:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2200      	movs	r2, #0
 801248c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801248e:	2300      	movs	r3, #0
 8012490:	2200      	movs	r2, #0
 8012492:	2100      	movs	r1, #0
 8012494:	6878      	ldr	r0, [r7, #4]
 8012496:	f000 f837 	bl	8012508 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801249a:	bf00      	nop
 801249c:	3708      	adds	r7, #8
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}

080124a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80124a2:	b580      	push	{r7, lr}
 80124a4:	b086      	sub	sp, #24
 80124a6:	af00      	add	r7, sp, #0
 80124a8:	4603      	mov	r3, r0
 80124aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80124ac:	2301      	movs	r3, #1
 80124ae:	617b      	str	r3, [r7, #20]
 80124b0:	2300      	movs	r3, #0
 80124b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80124b4:	79fb      	ldrb	r3, [r7, #7]
 80124b6:	461a      	mov	r2, r3
 80124b8:	6939      	ldr	r1, [r7, #16]
 80124ba:	6978      	ldr	r0, [r7, #20]
 80124bc:	f7ff ff78 	bl	80123b0 <xQueueGenericCreate>
 80124c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80124c2:	68f8      	ldr	r0, [r7, #12]
 80124c4:	f7ff ffd3 	bl	801246e <prvInitialiseMutex>

		return xNewQueue;
 80124c8:	68fb      	ldr	r3, [r7, #12]
	}
 80124ca:	4618      	mov	r0, r3
 80124cc:	3718      	adds	r7, #24
 80124ce:	46bd      	mov	sp, r7
 80124d0:	bd80      	pop	{r7, pc}

080124d2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80124d2:	b580      	push	{r7, lr}
 80124d4:	b088      	sub	sp, #32
 80124d6:	af02      	add	r7, sp, #8
 80124d8:	4603      	mov	r3, r0
 80124da:	6039      	str	r1, [r7, #0]
 80124dc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80124de:	2301      	movs	r3, #1
 80124e0:	617b      	str	r3, [r7, #20]
 80124e2:	2300      	movs	r3, #0
 80124e4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80124e6:	79fb      	ldrb	r3, [r7, #7]
 80124e8:	9300      	str	r3, [sp, #0]
 80124ea:	683b      	ldr	r3, [r7, #0]
 80124ec:	2200      	movs	r2, #0
 80124ee:	6939      	ldr	r1, [r7, #16]
 80124f0:	6978      	ldr	r0, [r7, #20]
 80124f2:	f7ff fee5 	bl	80122c0 <xQueueGenericCreateStatic>
 80124f6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80124f8:	68f8      	ldr	r0, [r7, #12]
 80124fa:	f7ff ffb8 	bl	801246e <prvInitialiseMutex>

		return xNewQueue;
 80124fe:	68fb      	ldr	r3, [r7, #12]
	}
 8012500:	4618      	mov	r0, r3
 8012502:	3718      	adds	r7, #24
 8012504:	46bd      	mov	sp, r7
 8012506:	bd80      	pop	{r7, pc}

08012508 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b08e      	sub	sp, #56	; 0x38
 801250c:	af00      	add	r7, sp, #0
 801250e:	60f8      	str	r0, [r7, #12]
 8012510:	60b9      	str	r1, [r7, #8]
 8012512:	607a      	str	r2, [r7, #4]
 8012514:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012516:	2300      	movs	r3, #0
 8012518:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012520:	2b00      	cmp	r3, #0
 8012522:	d10a      	bne.n	801253a <xQueueGenericSend+0x32>
	__asm volatile
 8012524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012528:	f383 8811 	msr	BASEPRI, r3
 801252c:	f3bf 8f6f 	isb	sy
 8012530:	f3bf 8f4f 	dsb	sy
 8012534:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012536:	bf00      	nop
 8012538:	e7fe      	b.n	8012538 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d103      	bne.n	8012548 <xQueueGenericSend+0x40>
 8012540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012544:	2b00      	cmp	r3, #0
 8012546:	d101      	bne.n	801254c <xQueueGenericSend+0x44>
 8012548:	2301      	movs	r3, #1
 801254a:	e000      	b.n	801254e <xQueueGenericSend+0x46>
 801254c:	2300      	movs	r3, #0
 801254e:	2b00      	cmp	r3, #0
 8012550:	d10a      	bne.n	8012568 <xQueueGenericSend+0x60>
	__asm volatile
 8012552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012556:	f383 8811 	msr	BASEPRI, r3
 801255a:	f3bf 8f6f 	isb	sy
 801255e:	f3bf 8f4f 	dsb	sy
 8012562:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012564:	bf00      	nop
 8012566:	e7fe      	b.n	8012566 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012568:	683b      	ldr	r3, [r7, #0]
 801256a:	2b02      	cmp	r3, #2
 801256c:	d103      	bne.n	8012576 <xQueueGenericSend+0x6e>
 801256e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012572:	2b01      	cmp	r3, #1
 8012574:	d101      	bne.n	801257a <xQueueGenericSend+0x72>
 8012576:	2301      	movs	r3, #1
 8012578:	e000      	b.n	801257c <xQueueGenericSend+0x74>
 801257a:	2300      	movs	r3, #0
 801257c:	2b00      	cmp	r3, #0
 801257e:	d10a      	bne.n	8012596 <xQueueGenericSend+0x8e>
	__asm volatile
 8012580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012584:	f383 8811 	msr	BASEPRI, r3
 8012588:	f3bf 8f6f 	isb	sy
 801258c:	f3bf 8f4f 	dsb	sy
 8012590:	623b      	str	r3, [r7, #32]
}
 8012592:	bf00      	nop
 8012594:	e7fe      	b.n	8012594 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012596:	f001 f983 	bl	80138a0 <xTaskGetSchedulerState>
 801259a:	4603      	mov	r3, r0
 801259c:	2b00      	cmp	r3, #0
 801259e:	d102      	bne.n	80125a6 <xQueueGenericSend+0x9e>
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d101      	bne.n	80125aa <xQueueGenericSend+0xa2>
 80125a6:	2301      	movs	r3, #1
 80125a8:	e000      	b.n	80125ac <xQueueGenericSend+0xa4>
 80125aa:	2300      	movs	r3, #0
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d10a      	bne.n	80125c6 <xQueueGenericSend+0xbe>
	__asm volatile
 80125b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125b4:	f383 8811 	msr	BASEPRI, r3
 80125b8:	f3bf 8f6f 	isb	sy
 80125bc:	f3bf 8f4f 	dsb	sy
 80125c0:	61fb      	str	r3, [r7, #28]
}
 80125c2:	bf00      	nop
 80125c4:	e7fe      	b.n	80125c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80125c6:	f001 fd8d 	bl	80140e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80125ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80125ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125d2:	429a      	cmp	r2, r3
 80125d4:	d302      	bcc.n	80125dc <xQueueGenericSend+0xd4>
 80125d6:	683b      	ldr	r3, [r7, #0]
 80125d8:	2b02      	cmp	r3, #2
 80125da:	d129      	bne.n	8012630 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80125dc:	683a      	ldr	r2, [r7, #0]
 80125de:	68b9      	ldr	r1, [r7, #8]
 80125e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125e2:	f000 fa87 	bl	8012af4 <prvCopyDataToQueue>
 80125e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80125e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d010      	beq.n	8012612 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80125f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125f2:	3324      	adds	r3, #36	; 0x24
 80125f4:	4618      	mov	r0, r3
 80125f6:	f000 ff97 	bl	8013528 <xTaskRemoveFromEventList>
 80125fa:	4603      	mov	r3, r0
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d013      	beq.n	8012628 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012600:	4b3f      	ldr	r3, [pc, #252]	; (8012700 <xQueueGenericSend+0x1f8>)
 8012602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012606:	601a      	str	r2, [r3, #0]
 8012608:	f3bf 8f4f 	dsb	sy
 801260c:	f3bf 8f6f 	isb	sy
 8012610:	e00a      	b.n	8012628 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012614:	2b00      	cmp	r3, #0
 8012616:	d007      	beq.n	8012628 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012618:	4b39      	ldr	r3, [pc, #228]	; (8012700 <xQueueGenericSend+0x1f8>)
 801261a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801261e:	601a      	str	r2, [r3, #0]
 8012620:	f3bf 8f4f 	dsb	sy
 8012624:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012628:	f001 fd8c 	bl	8014144 <vPortExitCritical>
				return pdPASS;
 801262c:	2301      	movs	r3, #1
 801262e:	e063      	b.n	80126f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d103      	bne.n	801263e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012636:	f001 fd85 	bl	8014144 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801263a:	2300      	movs	r3, #0
 801263c:	e05c      	b.n	80126f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801263e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012640:	2b00      	cmp	r3, #0
 8012642:	d106      	bne.n	8012652 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012644:	f107 0314 	add.w	r3, r7, #20
 8012648:	4618      	mov	r0, r3
 801264a:	f000 ffcf 	bl	80135ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801264e:	2301      	movs	r3, #1
 8012650:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012652:	f001 fd77 	bl	8014144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012656:	f000 fd85 	bl	8013164 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801265a:	f001 fd43 	bl	80140e4 <vPortEnterCritical>
 801265e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012664:	b25b      	sxtb	r3, r3
 8012666:	f1b3 3fff 	cmp.w	r3, #4294967295
 801266a:	d103      	bne.n	8012674 <xQueueGenericSend+0x16c>
 801266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801266e:	2200      	movs	r2, #0
 8012670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012676:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801267a:	b25b      	sxtb	r3, r3
 801267c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012680:	d103      	bne.n	801268a <xQueueGenericSend+0x182>
 8012682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012684:	2200      	movs	r2, #0
 8012686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801268a:	f001 fd5b 	bl	8014144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801268e:	1d3a      	adds	r2, r7, #4
 8012690:	f107 0314 	add.w	r3, r7, #20
 8012694:	4611      	mov	r1, r2
 8012696:	4618      	mov	r0, r3
 8012698:	f000 ffbe 	bl	8013618 <xTaskCheckForTimeOut>
 801269c:	4603      	mov	r3, r0
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d124      	bne.n	80126ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80126a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126a4:	f000 fb1e 	bl	8012ce4 <prvIsQueueFull>
 80126a8:	4603      	mov	r3, r0
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d018      	beq.n	80126e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80126ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126b0:	3310      	adds	r3, #16
 80126b2:	687a      	ldr	r2, [r7, #4]
 80126b4:	4611      	mov	r1, r2
 80126b6:	4618      	mov	r0, r3
 80126b8:	f000 ff12 	bl	80134e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80126bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126be:	f000 faa9 	bl	8012c14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80126c2:	f000 fd5d 	bl	8013180 <xTaskResumeAll>
 80126c6:	4603      	mov	r3, r0
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	f47f af7c 	bne.w	80125c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80126ce:	4b0c      	ldr	r3, [pc, #48]	; (8012700 <xQueueGenericSend+0x1f8>)
 80126d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126d4:	601a      	str	r2, [r3, #0]
 80126d6:	f3bf 8f4f 	dsb	sy
 80126da:	f3bf 8f6f 	isb	sy
 80126de:	e772      	b.n	80125c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80126e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126e2:	f000 fa97 	bl	8012c14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80126e6:	f000 fd4b 	bl	8013180 <xTaskResumeAll>
 80126ea:	e76c      	b.n	80125c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80126ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126ee:	f000 fa91 	bl	8012c14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80126f2:	f000 fd45 	bl	8013180 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80126f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80126f8:	4618      	mov	r0, r3
 80126fa:	3738      	adds	r7, #56	; 0x38
 80126fc:	46bd      	mov	sp, r7
 80126fe:	bd80      	pop	{r7, pc}
 8012700:	e000ed04 	.word	0xe000ed04

08012704 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b08e      	sub	sp, #56	; 0x38
 8012708:	af00      	add	r7, sp, #0
 801270a:	60f8      	str	r0, [r7, #12]
 801270c:	60b9      	str	r1, [r7, #8]
 801270e:	607a      	str	r2, [r7, #4]
 8012710:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012718:	2b00      	cmp	r3, #0
 801271a:	d10a      	bne.n	8012732 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801271c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012720:	f383 8811 	msr	BASEPRI, r3
 8012724:	f3bf 8f6f 	isb	sy
 8012728:	f3bf 8f4f 	dsb	sy
 801272c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801272e:	bf00      	nop
 8012730:	e7fe      	b.n	8012730 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012732:	68bb      	ldr	r3, [r7, #8]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d103      	bne.n	8012740 <xQueueGenericSendFromISR+0x3c>
 8012738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801273c:	2b00      	cmp	r3, #0
 801273e:	d101      	bne.n	8012744 <xQueueGenericSendFromISR+0x40>
 8012740:	2301      	movs	r3, #1
 8012742:	e000      	b.n	8012746 <xQueueGenericSendFromISR+0x42>
 8012744:	2300      	movs	r3, #0
 8012746:	2b00      	cmp	r3, #0
 8012748:	d10a      	bne.n	8012760 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801274a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801274e:	f383 8811 	msr	BASEPRI, r3
 8012752:	f3bf 8f6f 	isb	sy
 8012756:	f3bf 8f4f 	dsb	sy
 801275a:	623b      	str	r3, [r7, #32]
}
 801275c:	bf00      	nop
 801275e:	e7fe      	b.n	801275e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	2b02      	cmp	r3, #2
 8012764:	d103      	bne.n	801276e <xQueueGenericSendFromISR+0x6a>
 8012766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801276a:	2b01      	cmp	r3, #1
 801276c:	d101      	bne.n	8012772 <xQueueGenericSendFromISR+0x6e>
 801276e:	2301      	movs	r3, #1
 8012770:	e000      	b.n	8012774 <xQueueGenericSendFromISR+0x70>
 8012772:	2300      	movs	r3, #0
 8012774:	2b00      	cmp	r3, #0
 8012776:	d10a      	bne.n	801278e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8012778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801277c:	f383 8811 	msr	BASEPRI, r3
 8012780:	f3bf 8f6f 	isb	sy
 8012784:	f3bf 8f4f 	dsb	sy
 8012788:	61fb      	str	r3, [r7, #28]
}
 801278a:	bf00      	nop
 801278c:	e7fe      	b.n	801278c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801278e:	f001 fd8b 	bl	80142a8 <vPortValidateInterruptPriority>
	__asm volatile
 8012792:	f3ef 8211 	mrs	r2, BASEPRI
 8012796:	f04f 0350 	mov.w	r3, #80	; 0x50
 801279a:	f383 8811 	msr	BASEPRI, r3
 801279e:	f3bf 8f6f 	isb	sy
 80127a2:	f3bf 8f4f 	dsb	sy
 80127a6:	61ba      	str	r2, [r7, #24]
 80127a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80127aa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80127ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80127ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80127b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127b6:	429a      	cmp	r2, r3
 80127b8:	d302      	bcc.n	80127c0 <xQueueGenericSendFromISR+0xbc>
 80127ba:	683b      	ldr	r3, [r7, #0]
 80127bc:	2b02      	cmp	r3, #2
 80127be:	d12c      	bne.n	801281a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80127c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80127c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80127ca:	683a      	ldr	r2, [r7, #0]
 80127cc:	68b9      	ldr	r1, [r7, #8]
 80127ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127d0:	f000 f990 	bl	8012af4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80127d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80127d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127dc:	d112      	bne.n	8012804 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80127de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d016      	beq.n	8012814 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80127e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e8:	3324      	adds	r3, #36	; 0x24
 80127ea:	4618      	mov	r0, r3
 80127ec:	f000 fe9c 	bl	8013528 <xTaskRemoveFromEventList>
 80127f0:	4603      	mov	r3, r0
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d00e      	beq.n	8012814 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d00b      	beq.n	8012814 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	2201      	movs	r2, #1
 8012800:	601a      	str	r2, [r3, #0]
 8012802:	e007      	b.n	8012814 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012804:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012808:	3301      	adds	r3, #1
 801280a:	b2db      	uxtb	r3, r3
 801280c:	b25a      	sxtb	r2, r3
 801280e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012814:	2301      	movs	r3, #1
 8012816:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012818:	e001      	b.n	801281e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801281a:	2300      	movs	r3, #0
 801281c:	637b      	str	r3, [r7, #52]	; 0x34
 801281e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012820:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012822:	693b      	ldr	r3, [r7, #16]
 8012824:	f383 8811 	msr	BASEPRI, r3
}
 8012828:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801282a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801282c:	4618      	mov	r0, r3
 801282e:	3738      	adds	r7, #56	; 0x38
 8012830:	46bd      	mov	sp, r7
 8012832:	bd80      	pop	{r7, pc}

08012834 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b08c      	sub	sp, #48	; 0x30
 8012838:	af00      	add	r7, sp, #0
 801283a:	60f8      	str	r0, [r7, #12]
 801283c:	60b9      	str	r1, [r7, #8]
 801283e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012840:	2300      	movs	r3, #0
 8012842:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801284a:	2b00      	cmp	r3, #0
 801284c:	d10a      	bne.n	8012864 <xQueueReceive+0x30>
	__asm volatile
 801284e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012852:	f383 8811 	msr	BASEPRI, r3
 8012856:	f3bf 8f6f 	isb	sy
 801285a:	f3bf 8f4f 	dsb	sy
 801285e:	623b      	str	r3, [r7, #32]
}
 8012860:	bf00      	nop
 8012862:	e7fe      	b.n	8012862 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012864:	68bb      	ldr	r3, [r7, #8]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d103      	bne.n	8012872 <xQueueReceive+0x3e>
 801286a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801286e:	2b00      	cmp	r3, #0
 8012870:	d101      	bne.n	8012876 <xQueueReceive+0x42>
 8012872:	2301      	movs	r3, #1
 8012874:	e000      	b.n	8012878 <xQueueReceive+0x44>
 8012876:	2300      	movs	r3, #0
 8012878:	2b00      	cmp	r3, #0
 801287a:	d10a      	bne.n	8012892 <xQueueReceive+0x5e>
	__asm volatile
 801287c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012880:	f383 8811 	msr	BASEPRI, r3
 8012884:	f3bf 8f6f 	isb	sy
 8012888:	f3bf 8f4f 	dsb	sy
 801288c:	61fb      	str	r3, [r7, #28]
}
 801288e:	bf00      	nop
 8012890:	e7fe      	b.n	8012890 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012892:	f001 f805 	bl	80138a0 <xTaskGetSchedulerState>
 8012896:	4603      	mov	r3, r0
 8012898:	2b00      	cmp	r3, #0
 801289a:	d102      	bne.n	80128a2 <xQueueReceive+0x6e>
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d101      	bne.n	80128a6 <xQueueReceive+0x72>
 80128a2:	2301      	movs	r3, #1
 80128a4:	e000      	b.n	80128a8 <xQueueReceive+0x74>
 80128a6:	2300      	movs	r3, #0
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d10a      	bne.n	80128c2 <xQueueReceive+0x8e>
	__asm volatile
 80128ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128b0:	f383 8811 	msr	BASEPRI, r3
 80128b4:	f3bf 8f6f 	isb	sy
 80128b8:	f3bf 8f4f 	dsb	sy
 80128bc:	61bb      	str	r3, [r7, #24]
}
 80128be:	bf00      	nop
 80128c0:	e7fe      	b.n	80128c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80128c2:	f001 fc0f 	bl	80140e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80128c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80128cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d01f      	beq.n	8012912 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80128d2:	68b9      	ldr	r1, [r7, #8]
 80128d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128d6:	f000 f977 	bl	8012bc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80128da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128dc:	1e5a      	subs	r2, r3, #1
 80128de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80128e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e4:	691b      	ldr	r3, [r3, #16]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d00f      	beq.n	801290a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80128ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ec:	3310      	adds	r3, #16
 80128ee:	4618      	mov	r0, r3
 80128f0:	f000 fe1a 	bl	8013528 <xTaskRemoveFromEventList>
 80128f4:	4603      	mov	r3, r0
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d007      	beq.n	801290a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80128fa:	4b3d      	ldr	r3, [pc, #244]	; (80129f0 <xQueueReceive+0x1bc>)
 80128fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012900:	601a      	str	r2, [r3, #0]
 8012902:	f3bf 8f4f 	dsb	sy
 8012906:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801290a:	f001 fc1b 	bl	8014144 <vPortExitCritical>
				return pdPASS;
 801290e:	2301      	movs	r3, #1
 8012910:	e069      	b.n	80129e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d103      	bne.n	8012920 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012918:	f001 fc14 	bl	8014144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801291c:	2300      	movs	r3, #0
 801291e:	e062      	b.n	80129e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012922:	2b00      	cmp	r3, #0
 8012924:	d106      	bne.n	8012934 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012926:	f107 0310 	add.w	r3, r7, #16
 801292a:	4618      	mov	r0, r3
 801292c:	f000 fe5e 	bl	80135ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012930:	2301      	movs	r3, #1
 8012932:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012934:	f001 fc06 	bl	8014144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012938:	f000 fc14 	bl	8013164 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801293c:	f001 fbd2 	bl	80140e4 <vPortEnterCritical>
 8012940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012942:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012946:	b25b      	sxtb	r3, r3
 8012948:	f1b3 3fff 	cmp.w	r3, #4294967295
 801294c:	d103      	bne.n	8012956 <xQueueReceive+0x122>
 801294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012950:	2200      	movs	r2, #0
 8012952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801295c:	b25b      	sxtb	r3, r3
 801295e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012962:	d103      	bne.n	801296c <xQueueReceive+0x138>
 8012964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012966:	2200      	movs	r2, #0
 8012968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801296c:	f001 fbea 	bl	8014144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012970:	1d3a      	adds	r2, r7, #4
 8012972:	f107 0310 	add.w	r3, r7, #16
 8012976:	4611      	mov	r1, r2
 8012978:	4618      	mov	r0, r3
 801297a:	f000 fe4d 	bl	8013618 <xTaskCheckForTimeOut>
 801297e:	4603      	mov	r3, r0
 8012980:	2b00      	cmp	r3, #0
 8012982:	d123      	bne.n	80129cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012986:	f000 f997 	bl	8012cb8 <prvIsQueueEmpty>
 801298a:	4603      	mov	r3, r0
 801298c:	2b00      	cmp	r3, #0
 801298e:	d017      	beq.n	80129c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012992:	3324      	adds	r3, #36	; 0x24
 8012994:	687a      	ldr	r2, [r7, #4]
 8012996:	4611      	mov	r1, r2
 8012998:	4618      	mov	r0, r3
 801299a:	f000 fda1 	bl	80134e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801299e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129a0:	f000 f938 	bl	8012c14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80129a4:	f000 fbec 	bl	8013180 <xTaskResumeAll>
 80129a8:	4603      	mov	r3, r0
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d189      	bne.n	80128c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80129ae:	4b10      	ldr	r3, [pc, #64]	; (80129f0 <xQueueReceive+0x1bc>)
 80129b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129b4:	601a      	str	r2, [r3, #0]
 80129b6:	f3bf 8f4f 	dsb	sy
 80129ba:	f3bf 8f6f 	isb	sy
 80129be:	e780      	b.n	80128c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80129c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129c2:	f000 f927 	bl	8012c14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80129c6:	f000 fbdb 	bl	8013180 <xTaskResumeAll>
 80129ca:	e77a      	b.n	80128c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80129cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129ce:	f000 f921 	bl	8012c14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80129d2:	f000 fbd5 	bl	8013180 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80129d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129d8:	f000 f96e 	bl	8012cb8 <prvIsQueueEmpty>
 80129dc:	4603      	mov	r3, r0
 80129de:	2b00      	cmp	r3, #0
 80129e0:	f43f af6f 	beq.w	80128c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80129e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80129e6:	4618      	mov	r0, r3
 80129e8:	3730      	adds	r7, #48	; 0x30
 80129ea:	46bd      	mov	sp, r7
 80129ec:	bd80      	pop	{r7, pc}
 80129ee:	bf00      	nop
 80129f0:	e000ed04 	.word	0xe000ed04

080129f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b08e      	sub	sp, #56	; 0x38
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	60f8      	str	r0, [r7, #12]
 80129fc:	60b9      	str	r1, [r7, #8]
 80129fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d10a      	bne.n	8012a20 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8012a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a0e:	f383 8811 	msr	BASEPRI, r3
 8012a12:	f3bf 8f6f 	isb	sy
 8012a16:	f3bf 8f4f 	dsb	sy
 8012a1a:	623b      	str	r3, [r7, #32]
}
 8012a1c:	bf00      	nop
 8012a1e:	e7fe      	b.n	8012a1e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012a20:	68bb      	ldr	r3, [r7, #8]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d103      	bne.n	8012a2e <xQueueReceiveFromISR+0x3a>
 8012a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d101      	bne.n	8012a32 <xQueueReceiveFromISR+0x3e>
 8012a2e:	2301      	movs	r3, #1
 8012a30:	e000      	b.n	8012a34 <xQueueReceiveFromISR+0x40>
 8012a32:	2300      	movs	r3, #0
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d10a      	bne.n	8012a4e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a3c:	f383 8811 	msr	BASEPRI, r3
 8012a40:	f3bf 8f6f 	isb	sy
 8012a44:	f3bf 8f4f 	dsb	sy
 8012a48:	61fb      	str	r3, [r7, #28]
}
 8012a4a:	bf00      	nop
 8012a4c:	e7fe      	b.n	8012a4c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012a4e:	f001 fc2b 	bl	80142a8 <vPortValidateInterruptPriority>
	__asm volatile
 8012a52:	f3ef 8211 	mrs	r2, BASEPRI
 8012a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a5a:	f383 8811 	msr	BASEPRI, r3
 8012a5e:	f3bf 8f6f 	isb	sy
 8012a62:	f3bf 8f4f 	dsb	sy
 8012a66:	61ba      	str	r2, [r7, #24]
 8012a68:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012a6a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a72:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d02f      	beq.n	8012ada <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012a84:	68b9      	ldr	r1, [r7, #8]
 8012a86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a88:	f000 f89e 	bl	8012bc8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a8e:	1e5a      	subs	r2, r3, #1
 8012a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a92:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012a94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a9c:	d112      	bne.n	8012ac4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aa0:	691b      	ldr	r3, [r3, #16]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d016      	beq.n	8012ad4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aa8:	3310      	adds	r3, #16
 8012aaa:	4618      	mov	r0, r3
 8012aac:	f000 fd3c 	bl	8013528 <xTaskRemoveFromEventList>
 8012ab0:	4603      	mov	r3, r0
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d00e      	beq.n	8012ad4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d00b      	beq.n	8012ad4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	2201      	movs	r2, #1
 8012ac0:	601a      	str	r2, [r3, #0]
 8012ac2:	e007      	b.n	8012ad4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ac8:	3301      	adds	r3, #1
 8012aca:	b2db      	uxtb	r3, r3
 8012acc:	b25a      	sxtb	r2, r3
 8012ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012ad4:	2301      	movs	r3, #1
 8012ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8012ad8:	e001      	b.n	8012ade <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8012ada:	2300      	movs	r3, #0
 8012adc:	637b      	str	r3, [r7, #52]	; 0x34
 8012ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ae0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	f383 8811 	msr	BASEPRI, r3
}
 8012ae8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012aec:	4618      	mov	r0, r3
 8012aee:	3738      	adds	r7, #56	; 0x38
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bd80      	pop	{r7, pc}

08012af4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b086      	sub	sp, #24
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	60f8      	str	r0, [r7, #12]
 8012afc:	60b9      	str	r1, [r7, #8]
 8012afe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012b00:	2300      	movs	r3, #0
 8012b02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d10d      	bne.n	8012b2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d14d      	bne.n	8012bb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	689b      	ldr	r3, [r3, #8]
 8012b1e:	4618      	mov	r0, r3
 8012b20:	f000 fedc 	bl	80138dc <xTaskPriorityDisinherit>
 8012b24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	2200      	movs	r2, #0
 8012b2a:	609a      	str	r2, [r3, #8]
 8012b2c:	e043      	b.n	8012bb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d119      	bne.n	8012b68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	6858      	ldr	r0, [r3, #4]
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b3c:	461a      	mov	r2, r3
 8012b3e:	68b9      	ldr	r1, [r7, #8]
 8012b40:	f002 fb56 	bl	80151f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	685a      	ldr	r2, [r3, #4]
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b4c:	441a      	add	r2, r3
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	685a      	ldr	r2, [r3, #4]
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	689b      	ldr	r3, [r3, #8]
 8012b5a:	429a      	cmp	r2, r3
 8012b5c:	d32b      	bcc.n	8012bb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	681a      	ldr	r2, [r3, #0]
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	605a      	str	r2, [r3, #4]
 8012b66:	e026      	b.n	8012bb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	68d8      	ldr	r0, [r3, #12]
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b70:	461a      	mov	r2, r3
 8012b72:	68b9      	ldr	r1, [r7, #8]
 8012b74:	f002 fb3c 	bl	80151f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	68da      	ldr	r2, [r3, #12]
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b80:	425b      	negs	r3, r3
 8012b82:	441a      	add	r2, r3
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	68da      	ldr	r2, [r3, #12]
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	429a      	cmp	r2, r3
 8012b92:	d207      	bcs.n	8012ba4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	689a      	ldr	r2, [r3, #8]
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b9c:	425b      	negs	r3, r3
 8012b9e:	441a      	add	r2, r3
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	2b02      	cmp	r3, #2
 8012ba8:	d105      	bne.n	8012bb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012baa:	693b      	ldr	r3, [r7, #16]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d002      	beq.n	8012bb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012bb0:	693b      	ldr	r3, [r7, #16]
 8012bb2:	3b01      	subs	r3, #1
 8012bb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012bb6:	693b      	ldr	r3, [r7, #16]
 8012bb8:	1c5a      	adds	r2, r3, #1
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012bbe:	697b      	ldr	r3, [r7, #20]
}
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	3718      	adds	r7, #24
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	bd80      	pop	{r7, pc}

08012bc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b082      	sub	sp, #8
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
 8012bd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d018      	beq.n	8012c0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	68da      	ldr	r2, [r3, #12]
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012be2:	441a      	add	r2, r3
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	68da      	ldr	r2, [r3, #12]
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	689b      	ldr	r3, [r3, #8]
 8012bf0:	429a      	cmp	r2, r3
 8012bf2:	d303      	bcc.n	8012bfc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	681a      	ldr	r2, [r3, #0]
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	68d9      	ldr	r1, [r3, #12]
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c04:	461a      	mov	r2, r3
 8012c06:	6838      	ldr	r0, [r7, #0]
 8012c08:	f002 faf2 	bl	80151f0 <memcpy>
	}
}
 8012c0c:	bf00      	nop
 8012c0e:	3708      	adds	r7, #8
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}

08012c14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b084      	sub	sp, #16
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012c1c:	f001 fa62 	bl	80140e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012c26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012c28:	e011      	b.n	8012c4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d012      	beq.n	8012c58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	3324      	adds	r3, #36	; 0x24
 8012c36:	4618      	mov	r0, r3
 8012c38:	f000 fc76 	bl	8013528 <xTaskRemoveFromEventList>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d001      	beq.n	8012c46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012c42:	f000 fd4b 	bl	80136dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012c46:	7bfb      	ldrb	r3, [r7, #15]
 8012c48:	3b01      	subs	r3, #1
 8012c4a:	b2db      	uxtb	r3, r3
 8012c4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	dce9      	bgt.n	8012c2a <prvUnlockQueue+0x16>
 8012c56:	e000      	b.n	8012c5a <prvUnlockQueue+0x46>
					break;
 8012c58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	22ff      	movs	r2, #255	; 0xff
 8012c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012c62:	f001 fa6f 	bl	8014144 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012c66:	f001 fa3d 	bl	80140e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012c70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012c72:	e011      	b.n	8012c98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	691b      	ldr	r3, [r3, #16]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d012      	beq.n	8012ca2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	3310      	adds	r3, #16
 8012c80:	4618      	mov	r0, r3
 8012c82:	f000 fc51 	bl	8013528 <xTaskRemoveFromEventList>
 8012c86:	4603      	mov	r3, r0
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d001      	beq.n	8012c90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012c8c:	f000 fd26 	bl	80136dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012c90:	7bbb      	ldrb	r3, [r7, #14]
 8012c92:	3b01      	subs	r3, #1
 8012c94:	b2db      	uxtb	r3, r3
 8012c96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012c98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	dce9      	bgt.n	8012c74 <prvUnlockQueue+0x60>
 8012ca0:	e000      	b.n	8012ca4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012ca2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	22ff      	movs	r2, #255	; 0xff
 8012ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012cac:	f001 fa4a 	bl	8014144 <vPortExitCritical>
}
 8012cb0:	bf00      	nop
 8012cb2:	3710      	adds	r7, #16
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	bd80      	pop	{r7, pc}

08012cb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b084      	sub	sp, #16
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012cc0:	f001 fa10 	bl	80140e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d102      	bne.n	8012cd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012ccc:	2301      	movs	r3, #1
 8012cce:	60fb      	str	r3, [r7, #12]
 8012cd0:	e001      	b.n	8012cd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012cd6:	f001 fa35 	bl	8014144 <vPortExitCritical>

	return xReturn;
 8012cda:	68fb      	ldr	r3, [r7, #12]
}
 8012cdc:	4618      	mov	r0, r3
 8012cde:	3710      	adds	r7, #16
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	bd80      	pop	{r7, pc}

08012ce4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b084      	sub	sp, #16
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012cec:	f001 f9fa 	bl	80140e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012cf8:	429a      	cmp	r2, r3
 8012cfa:	d102      	bne.n	8012d02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012cfc:	2301      	movs	r3, #1
 8012cfe:	60fb      	str	r3, [r7, #12]
 8012d00:	e001      	b.n	8012d06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012d02:	2300      	movs	r3, #0
 8012d04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012d06:	f001 fa1d 	bl	8014144 <vPortExitCritical>

	return xReturn;
 8012d0a:	68fb      	ldr	r3, [r7, #12]
}
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	3710      	adds	r7, #16
 8012d10:	46bd      	mov	sp, r7
 8012d12:	bd80      	pop	{r7, pc}

08012d14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b08e      	sub	sp, #56	; 0x38
 8012d18:	af04      	add	r7, sp, #16
 8012d1a:	60f8      	str	r0, [r7, #12]
 8012d1c:	60b9      	str	r1, [r7, #8]
 8012d1e:	607a      	str	r2, [r7, #4]
 8012d20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d10a      	bne.n	8012d3e <xTaskCreateStatic+0x2a>
	__asm volatile
 8012d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d2c:	f383 8811 	msr	BASEPRI, r3
 8012d30:	f3bf 8f6f 	isb	sy
 8012d34:	f3bf 8f4f 	dsb	sy
 8012d38:	623b      	str	r3, [r7, #32]
}
 8012d3a:	bf00      	nop
 8012d3c:	e7fe      	b.n	8012d3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d10a      	bne.n	8012d5a <xTaskCreateStatic+0x46>
	__asm volatile
 8012d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d48:	f383 8811 	msr	BASEPRI, r3
 8012d4c:	f3bf 8f6f 	isb	sy
 8012d50:	f3bf 8f4f 	dsb	sy
 8012d54:	61fb      	str	r3, [r7, #28]
}
 8012d56:	bf00      	nop
 8012d58:	e7fe      	b.n	8012d58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012d5a:	2354      	movs	r3, #84	; 0x54
 8012d5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012d5e:	693b      	ldr	r3, [r7, #16]
 8012d60:	2b54      	cmp	r3, #84	; 0x54
 8012d62:	d00a      	beq.n	8012d7a <xTaskCreateStatic+0x66>
	__asm volatile
 8012d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d68:	f383 8811 	msr	BASEPRI, r3
 8012d6c:	f3bf 8f6f 	isb	sy
 8012d70:	f3bf 8f4f 	dsb	sy
 8012d74:	61bb      	str	r3, [r7, #24]
}
 8012d76:	bf00      	nop
 8012d78:	e7fe      	b.n	8012d78 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012d7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d01e      	beq.n	8012dc0 <xTaskCreateStatic+0xac>
 8012d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d01b      	beq.n	8012dc0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d94:	2202      	movs	r2, #2
 8012d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	9303      	str	r3, [sp, #12]
 8012d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da0:	9302      	str	r3, [sp, #8]
 8012da2:	f107 0314 	add.w	r3, r7, #20
 8012da6:	9301      	str	r3, [sp, #4]
 8012da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012daa:	9300      	str	r3, [sp, #0]
 8012dac:	683b      	ldr	r3, [r7, #0]
 8012dae:	687a      	ldr	r2, [r7, #4]
 8012db0:	68b9      	ldr	r1, [r7, #8]
 8012db2:	68f8      	ldr	r0, [r7, #12]
 8012db4:	f000 f850 	bl	8012e58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012db8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012dba:	f000 f8d5 	bl	8012f68 <prvAddNewTaskToReadyList>
 8012dbe:	e001      	b.n	8012dc4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012dc4:	697b      	ldr	r3, [r7, #20]
	}
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	3728      	adds	r7, #40	; 0x28
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}

08012dce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012dce:	b580      	push	{r7, lr}
 8012dd0:	b08c      	sub	sp, #48	; 0x30
 8012dd2:	af04      	add	r7, sp, #16
 8012dd4:	60f8      	str	r0, [r7, #12]
 8012dd6:	60b9      	str	r1, [r7, #8]
 8012dd8:	603b      	str	r3, [r7, #0]
 8012dda:	4613      	mov	r3, r2
 8012ddc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012dde:	88fb      	ldrh	r3, [r7, #6]
 8012de0:	009b      	lsls	r3, r3, #2
 8012de2:	4618      	mov	r0, r3
 8012de4:	f001 faa0 	bl	8014328 <pvPortMalloc>
 8012de8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012dea:	697b      	ldr	r3, [r7, #20]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d00e      	beq.n	8012e0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012df0:	2054      	movs	r0, #84	; 0x54
 8012df2:	f001 fa99 	bl	8014328 <pvPortMalloc>
 8012df6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012df8:	69fb      	ldr	r3, [r7, #28]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d003      	beq.n	8012e06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012dfe:	69fb      	ldr	r3, [r7, #28]
 8012e00:	697a      	ldr	r2, [r7, #20]
 8012e02:	631a      	str	r2, [r3, #48]	; 0x30
 8012e04:	e005      	b.n	8012e12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012e06:	6978      	ldr	r0, [r7, #20]
 8012e08:	f001 fb52 	bl	80144b0 <vPortFree>
 8012e0c:	e001      	b.n	8012e12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012e0e:	2300      	movs	r3, #0
 8012e10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012e12:	69fb      	ldr	r3, [r7, #28]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d017      	beq.n	8012e48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012e18:	69fb      	ldr	r3, [r7, #28]
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012e20:	88fa      	ldrh	r2, [r7, #6]
 8012e22:	2300      	movs	r3, #0
 8012e24:	9303      	str	r3, [sp, #12]
 8012e26:	69fb      	ldr	r3, [r7, #28]
 8012e28:	9302      	str	r3, [sp, #8]
 8012e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e2c:	9301      	str	r3, [sp, #4]
 8012e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e30:	9300      	str	r3, [sp, #0]
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	68b9      	ldr	r1, [r7, #8]
 8012e36:	68f8      	ldr	r0, [r7, #12]
 8012e38:	f000 f80e 	bl	8012e58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012e3c:	69f8      	ldr	r0, [r7, #28]
 8012e3e:	f000 f893 	bl	8012f68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012e42:	2301      	movs	r3, #1
 8012e44:	61bb      	str	r3, [r7, #24]
 8012e46:	e002      	b.n	8012e4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012e48:	f04f 33ff 	mov.w	r3, #4294967295
 8012e4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012e4e:	69bb      	ldr	r3, [r7, #24]
	}
 8012e50:	4618      	mov	r0, r3
 8012e52:	3720      	adds	r7, #32
 8012e54:	46bd      	mov	sp, r7
 8012e56:	bd80      	pop	{r7, pc}

08012e58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b088      	sub	sp, #32
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	60f8      	str	r0, [r7, #12]
 8012e60:	60b9      	str	r1, [r7, #8]
 8012e62:	607a      	str	r2, [r7, #4]
 8012e64:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012e70:	3b01      	subs	r3, #1
 8012e72:	009b      	lsls	r3, r3, #2
 8012e74:	4413      	add	r3, r2
 8012e76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012e78:	69bb      	ldr	r3, [r7, #24]
 8012e7a:	f023 0307 	bic.w	r3, r3, #7
 8012e7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012e80:	69bb      	ldr	r3, [r7, #24]
 8012e82:	f003 0307 	and.w	r3, r3, #7
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d00a      	beq.n	8012ea0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8012e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e8e:	f383 8811 	msr	BASEPRI, r3
 8012e92:	f3bf 8f6f 	isb	sy
 8012e96:	f3bf 8f4f 	dsb	sy
 8012e9a:	617b      	str	r3, [r7, #20]
}
 8012e9c:	bf00      	nop
 8012e9e:	e7fe      	b.n	8012e9e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012ea0:	68bb      	ldr	r3, [r7, #8]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d01f      	beq.n	8012ee6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	61fb      	str	r3, [r7, #28]
 8012eaa:	e012      	b.n	8012ed2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012eac:	68ba      	ldr	r2, [r7, #8]
 8012eae:	69fb      	ldr	r3, [r7, #28]
 8012eb0:	4413      	add	r3, r2
 8012eb2:	7819      	ldrb	r1, [r3, #0]
 8012eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012eb6:	69fb      	ldr	r3, [r7, #28]
 8012eb8:	4413      	add	r3, r2
 8012eba:	3334      	adds	r3, #52	; 0x34
 8012ebc:	460a      	mov	r2, r1
 8012ebe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012ec0:	68ba      	ldr	r2, [r7, #8]
 8012ec2:	69fb      	ldr	r3, [r7, #28]
 8012ec4:	4413      	add	r3, r2
 8012ec6:	781b      	ldrb	r3, [r3, #0]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d006      	beq.n	8012eda <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012ecc:	69fb      	ldr	r3, [r7, #28]
 8012ece:	3301      	adds	r3, #1
 8012ed0:	61fb      	str	r3, [r7, #28]
 8012ed2:	69fb      	ldr	r3, [r7, #28]
 8012ed4:	2b0f      	cmp	r3, #15
 8012ed6:	d9e9      	bls.n	8012eac <prvInitialiseNewTask+0x54>
 8012ed8:	e000      	b.n	8012edc <prvInitialiseNewTask+0x84>
			{
				break;
 8012eda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ede:	2200      	movs	r2, #0
 8012ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012ee4:	e003      	b.n	8012eee <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ee8:	2200      	movs	r2, #0
 8012eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ef0:	2b06      	cmp	r3, #6
 8012ef2:	d901      	bls.n	8012ef8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012ef4:	2306      	movs	r3, #6
 8012ef6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012efa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012efc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f02:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f06:	2200      	movs	r2, #0
 8012f08:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f0c:	3304      	adds	r3, #4
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f7ff f8d9 	bl	80120c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f16:	3318      	adds	r3, #24
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f7ff f8d4 	bl	80120c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f26:	f1c3 0207 	rsb	r2, r3, #7
 8012f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f36:	2200      	movs	r2, #0
 8012f38:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012f42:	683a      	ldr	r2, [r7, #0]
 8012f44:	68f9      	ldr	r1, [r7, #12]
 8012f46:	69b8      	ldr	r0, [r7, #24]
 8012f48:	f000 ff9e 	bl	8013e88 <pxPortInitialiseStack>
 8012f4c:	4602      	mov	r2, r0
 8012f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f50:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d002      	beq.n	8012f5e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012f5e:	bf00      	nop
 8012f60:	3720      	adds	r7, #32
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd80      	pop	{r7, pc}
	...

08012f68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b082      	sub	sp, #8
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012f70:	f001 f8b8 	bl	80140e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012f74:	4b2a      	ldr	r3, [pc, #168]	; (8013020 <prvAddNewTaskToReadyList+0xb8>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	3301      	adds	r3, #1
 8012f7a:	4a29      	ldr	r2, [pc, #164]	; (8013020 <prvAddNewTaskToReadyList+0xb8>)
 8012f7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012f7e:	4b29      	ldr	r3, [pc, #164]	; (8013024 <prvAddNewTaskToReadyList+0xbc>)
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d109      	bne.n	8012f9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012f86:	4a27      	ldr	r2, [pc, #156]	; (8013024 <prvAddNewTaskToReadyList+0xbc>)
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012f8c:	4b24      	ldr	r3, [pc, #144]	; (8013020 <prvAddNewTaskToReadyList+0xb8>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	2b01      	cmp	r3, #1
 8012f92:	d110      	bne.n	8012fb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012f94:	f000 fbc6 	bl	8013724 <prvInitialiseTaskLists>
 8012f98:	e00d      	b.n	8012fb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012f9a:	4b23      	ldr	r3, [pc, #140]	; (8013028 <prvAddNewTaskToReadyList+0xc0>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d109      	bne.n	8012fb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012fa2:	4b20      	ldr	r3, [pc, #128]	; (8013024 <prvAddNewTaskToReadyList+0xbc>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fac:	429a      	cmp	r2, r3
 8012fae:	d802      	bhi.n	8012fb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012fb0:	4a1c      	ldr	r2, [pc, #112]	; (8013024 <prvAddNewTaskToReadyList+0xbc>)
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012fb6:	4b1d      	ldr	r3, [pc, #116]	; (801302c <prvAddNewTaskToReadyList+0xc4>)
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	3301      	adds	r3, #1
 8012fbc:	4a1b      	ldr	r2, [pc, #108]	; (801302c <prvAddNewTaskToReadyList+0xc4>)
 8012fbe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fc4:	2201      	movs	r2, #1
 8012fc6:	409a      	lsls	r2, r3
 8012fc8:	4b19      	ldr	r3, [pc, #100]	; (8013030 <prvAddNewTaskToReadyList+0xc8>)
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	4313      	orrs	r3, r2
 8012fce:	4a18      	ldr	r2, [pc, #96]	; (8013030 <prvAddNewTaskToReadyList+0xc8>)
 8012fd0:	6013      	str	r3, [r2, #0]
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fd6:	4613      	mov	r3, r2
 8012fd8:	009b      	lsls	r3, r3, #2
 8012fda:	4413      	add	r3, r2
 8012fdc:	009b      	lsls	r3, r3, #2
 8012fde:	4a15      	ldr	r2, [pc, #84]	; (8013034 <prvAddNewTaskToReadyList+0xcc>)
 8012fe0:	441a      	add	r2, r3
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	3304      	adds	r3, #4
 8012fe6:	4619      	mov	r1, r3
 8012fe8:	4610      	mov	r0, r2
 8012fea:	f7ff f879 	bl	80120e0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012fee:	f001 f8a9 	bl	8014144 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012ff2:	4b0d      	ldr	r3, [pc, #52]	; (8013028 <prvAddNewTaskToReadyList+0xc0>)
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d00e      	beq.n	8013018 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012ffa:	4b0a      	ldr	r3, [pc, #40]	; (8013024 <prvAddNewTaskToReadyList+0xbc>)
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013004:	429a      	cmp	r2, r3
 8013006:	d207      	bcs.n	8013018 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013008:	4b0b      	ldr	r3, [pc, #44]	; (8013038 <prvAddNewTaskToReadyList+0xd0>)
 801300a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801300e:	601a      	str	r2, [r3, #0]
 8013010:	f3bf 8f4f 	dsb	sy
 8013014:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013018:	bf00      	nop
 801301a:	3708      	adds	r7, #8
 801301c:	46bd      	mov	sp, r7
 801301e:	bd80      	pop	{r7, pc}
 8013020:	20004970 	.word	0x20004970
 8013024:	20004870 	.word	0x20004870
 8013028:	2000497c 	.word	0x2000497c
 801302c:	2000498c 	.word	0x2000498c
 8013030:	20004978 	.word	0x20004978
 8013034:	20004874 	.word	0x20004874
 8013038:	e000ed04 	.word	0xe000ed04

0801303c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801303c:	b580      	push	{r7, lr}
 801303e:	b084      	sub	sp, #16
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013044:	2300      	movs	r3, #0
 8013046:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d017      	beq.n	801307e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801304e:	4b13      	ldr	r3, [pc, #76]	; (801309c <vTaskDelay+0x60>)
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d00a      	beq.n	801306c <vTaskDelay+0x30>
	__asm volatile
 8013056:	f04f 0350 	mov.w	r3, #80	; 0x50
 801305a:	f383 8811 	msr	BASEPRI, r3
 801305e:	f3bf 8f6f 	isb	sy
 8013062:	f3bf 8f4f 	dsb	sy
 8013066:	60bb      	str	r3, [r7, #8]
}
 8013068:	bf00      	nop
 801306a:	e7fe      	b.n	801306a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801306c:	f000 f87a 	bl	8013164 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013070:	2100      	movs	r1, #0
 8013072:	6878      	ldr	r0, [r7, #4]
 8013074:	f000 fea2 	bl	8013dbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013078:	f000 f882 	bl	8013180 <xTaskResumeAll>
 801307c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d107      	bne.n	8013094 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013084:	4b06      	ldr	r3, [pc, #24]	; (80130a0 <vTaskDelay+0x64>)
 8013086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801308a:	601a      	str	r2, [r3, #0]
 801308c:	f3bf 8f4f 	dsb	sy
 8013090:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013094:	bf00      	nop
 8013096:	3710      	adds	r7, #16
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}
 801309c:	20004998 	.word	0x20004998
 80130a0:	e000ed04 	.word	0xe000ed04

080130a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b08a      	sub	sp, #40	; 0x28
 80130a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80130aa:	2300      	movs	r3, #0
 80130ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80130ae:	2300      	movs	r3, #0
 80130b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80130b2:	463a      	mov	r2, r7
 80130b4:	1d39      	adds	r1, r7, #4
 80130b6:	f107 0308 	add.w	r3, r7, #8
 80130ba:	4618      	mov	r0, r3
 80130bc:	f7ef fb48 	bl	8002750 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80130c0:	6839      	ldr	r1, [r7, #0]
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	68ba      	ldr	r2, [r7, #8]
 80130c6:	9202      	str	r2, [sp, #8]
 80130c8:	9301      	str	r3, [sp, #4]
 80130ca:	2300      	movs	r3, #0
 80130cc:	9300      	str	r3, [sp, #0]
 80130ce:	2300      	movs	r3, #0
 80130d0:	460a      	mov	r2, r1
 80130d2:	491e      	ldr	r1, [pc, #120]	; (801314c <vTaskStartScheduler+0xa8>)
 80130d4:	481e      	ldr	r0, [pc, #120]	; (8013150 <vTaskStartScheduler+0xac>)
 80130d6:	f7ff fe1d 	bl	8012d14 <xTaskCreateStatic>
 80130da:	4603      	mov	r3, r0
 80130dc:	4a1d      	ldr	r2, [pc, #116]	; (8013154 <vTaskStartScheduler+0xb0>)
 80130de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80130e0:	4b1c      	ldr	r3, [pc, #112]	; (8013154 <vTaskStartScheduler+0xb0>)
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d002      	beq.n	80130ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80130e8:	2301      	movs	r3, #1
 80130ea:	617b      	str	r3, [r7, #20]
 80130ec:	e001      	b.n	80130f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80130ee:	2300      	movs	r3, #0
 80130f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80130f2:	697b      	ldr	r3, [r7, #20]
 80130f4:	2b01      	cmp	r3, #1
 80130f6:	d116      	bne.n	8013126 <vTaskStartScheduler+0x82>
	__asm volatile
 80130f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130fc:	f383 8811 	msr	BASEPRI, r3
 8013100:	f3bf 8f6f 	isb	sy
 8013104:	f3bf 8f4f 	dsb	sy
 8013108:	613b      	str	r3, [r7, #16]
}
 801310a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801310c:	4b12      	ldr	r3, [pc, #72]	; (8013158 <vTaskStartScheduler+0xb4>)
 801310e:	f04f 32ff 	mov.w	r2, #4294967295
 8013112:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013114:	4b11      	ldr	r3, [pc, #68]	; (801315c <vTaskStartScheduler+0xb8>)
 8013116:	2201      	movs	r2, #1
 8013118:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801311a:	4b11      	ldr	r3, [pc, #68]	; (8013160 <vTaskStartScheduler+0xbc>)
 801311c:	2200      	movs	r2, #0
 801311e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013120:	f000 ff3e 	bl	8013fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013124:	e00e      	b.n	8013144 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013126:	697b      	ldr	r3, [r7, #20]
 8013128:	f1b3 3fff 	cmp.w	r3, #4294967295
 801312c:	d10a      	bne.n	8013144 <vTaskStartScheduler+0xa0>
	__asm volatile
 801312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013132:	f383 8811 	msr	BASEPRI, r3
 8013136:	f3bf 8f6f 	isb	sy
 801313a:	f3bf 8f4f 	dsb	sy
 801313e:	60fb      	str	r3, [r7, #12]
}
 8013140:	bf00      	nop
 8013142:	e7fe      	b.n	8013142 <vTaskStartScheduler+0x9e>
}
 8013144:	bf00      	nop
 8013146:	3718      	adds	r7, #24
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}
 801314c:	0801b70c 	.word	0x0801b70c
 8013150:	080136f5 	.word	0x080136f5
 8013154:	20004994 	.word	0x20004994
 8013158:	20004990 	.word	0x20004990
 801315c:	2000497c 	.word	0x2000497c
 8013160:	20004974 	.word	0x20004974

08013164 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013164:	b480      	push	{r7}
 8013166:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013168:	4b04      	ldr	r3, [pc, #16]	; (801317c <vTaskSuspendAll+0x18>)
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	3301      	adds	r3, #1
 801316e:	4a03      	ldr	r2, [pc, #12]	; (801317c <vTaskSuspendAll+0x18>)
 8013170:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013172:	bf00      	nop
 8013174:	46bd      	mov	sp, r7
 8013176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317a:	4770      	bx	lr
 801317c:	20004998 	.word	0x20004998

08013180 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b084      	sub	sp, #16
 8013184:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013186:	2300      	movs	r3, #0
 8013188:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801318a:	2300      	movs	r3, #0
 801318c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801318e:	4b41      	ldr	r3, [pc, #260]	; (8013294 <xTaskResumeAll+0x114>)
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d10a      	bne.n	80131ac <xTaskResumeAll+0x2c>
	__asm volatile
 8013196:	f04f 0350 	mov.w	r3, #80	; 0x50
 801319a:	f383 8811 	msr	BASEPRI, r3
 801319e:	f3bf 8f6f 	isb	sy
 80131a2:	f3bf 8f4f 	dsb	sy
 80131a6:	603b      	str	r3, [r7, #0]
}
 80131a8:	bf00      	nop
 80131aa:	e7fe      	b.n	80131aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80131ac:	f000 ff9a 	bl	80140e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80131b0:	4b38      	ldr	r3, [pc, #224]	; (8013294 <xTaskResumeAll+0x114>)
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	3b01      	subs	r3, #1
 80131b6:	4a37      	ldr	r2, [pc, #220]	; (8013294 <xTaskResumeAll+0x114>)
 80131b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80131ba:	4b36      	ldr	r3, [pc, #216]	; (8013294 <xTaskResumeAll+0x114>)
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d161      	bne.n	8013286 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80131c2:	4b35      	ldr	r3, [pc, #212]	; (8013298 <xTaskResumeAll+0x118>)
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d05d      	beq.n	8013286 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80131ca:	e02e      	b.n	801322a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131cc:	4b33      	ldr	r3, [pc, #204]	; (801329c <xTaskResumeAll+0x11c>)
 80131ce:	68db      	ldr	r3, [r3, #12]
 80131d0:	68db      	ldr	r3, [r3, #12]
 80131d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	3318      	adds	r3, #24
 80131d8:	4618      	mov	r0, r3
 80131da:	f7fe ffde 	bl	801219a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	3304      	adds	r3, #4
 80131e2:	4618      	mov	r0, r3
 80131e4:	f7fe ffd9 	bl	801219a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131ec:	2201      	movs	r2, #1
 80131ee:	409a      	lsls	r2, r3
 80131f0:	4b2b      	ldr	r3, [pc, #172]	; (80132a0 <xTaskResumeAll+0x120>)
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	4313      	orrs	r3, r2
 80131f6:	4a2a      	ldr	r2, [pc, #168]	; (80132a0 <xTaskResumeAll+0x120>)
 80131f8:	6013      	str	r3, [r2, #0]
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131fe:	4613      	mov	r3, r2
 8013200:	009b      	lsls	r3, r3, #2
 8013202:	4413      	add	r3, r2
 8013204:	009b      	lsls	r3, r3, #2
 8013206:	4a27      	ldr	r2, [pc, #156]	; (80132a4 <xTaskResumeAll+0x124>)
 8013208:	441a      	add	r2, r3
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	3304      	adds	r3, #4
 801320e:	4619      	mov	r1, r3
 8013210:	4610      	mov	r0, r2
 8013212:	f7fe ff65 	bl	80120e0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801321a:	4b23      	ldr	r3, [pc, #140]	; (80132a8 <xTaskResumeAll+0x128>)
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013220:	429a      	cmp	r2, r3
 8013222:	d302      	bcc.n	801322a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8013224:	4b21      	ldr	r3, [pc, #132]	; (80132ac <xTaskResumeAll+0x12c>)
 8013226:	2201      	movs	r2, #1
 8013228:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801322a:	4b1c      	ldr	r3, [pc, #112]	; (801329c <xTaskResumeAll+0x11c>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d1cc      	bne.n	80131cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d001      	beq.n	801323c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013238:	f000 fb12 	bl	8013860 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801323c:	4b1c      	ldr	r3, [pc, #112]	; (80132b0 <xTaskResumeAll+0x130>)
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d010      	beq.n	801326a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013248:	f000 f836 	bl	80132b8 <xTaskIncrementTick>
 801324c:	4603      	mov	r3, r0
 801324e:	2b00      	cmp	r3, #0
 8013250:	d002      	beq.n	8013258 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8013252:	4b16      	ldr	r3, [pc, #88]	; (80132ac <xTaskResumeAll+0x12c>)
 8013254:	2201      	movs	r2, #1
 8013256:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	3b01      	subs	r3, #1
 801325c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d1f1      	bne.n	8013248 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8013264:	4b12      	ldr	r3, [pc, #72]	; (80132b0 <xTaskResumeAll+0x130>)
 8013266:	2200      	movs	r2, #0
 8013268:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801326a:	4b10      	ldr	r3, [pc, #64]	; (80132ac <xTaskResumeAll+0x12c>)
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d009      	beq.n	8013286 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013272:	2301      	movs	r3, #1
 8013274:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013276:	4b0f      	ldr	r3, [pc, #60]	; (80132b4 <xTaskResumeAll+0x134>)
 8013278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801327c:	601a      	str	r2, [r3, #0]
 801327e:	f3bf 8f4f 	dsb	sy
 8013282:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013286:	f000 ff5d 	bl	8014144 <vPortExitCritical>

	return xAlreadyYielded;
 801328a:	68bb      	ldr	r3, [r7, #8]
}
 801328c:	4618      	mov	r0, r3
 801328e:	3710      	adds	r7, #16
 8013290:	46bd      	mov	sp, r7
 8013292:	bd80      	pop	{r7, pc}
 8013294:	20004998 	.word	0x20004998
 8013298:	20004970 	.word	0x20004970
 801329c:	20004930 	.word	0x20004930
 80132a0:	20004978 	.word	0x20004978
 80132a4:	20004874 	.word	0x20004874
 80132a8:	20004870 	.word	0x20004870
 80132ac:	20004984 	.word	0x20004984
 80132b0:	20004980 	.word	0x20004980
 80132b4:	e000ed04 	.word	0xe000ed04

080132b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b086      	sub	sp, #24
 80132bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80132be:	2300      	movs	r3, #0
 80132c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80132c2:	4b4e      	ldr	r3, [pc, #312]	; (80133fc <xTaskIncrementTick+0x144>)
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	f040 8088 	bne.w	80133dc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80132cc:	4b4c      	ldr	r3, [pc, #304]	; (8013400 <xTaskIncrementTick+0x148>)
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	3301      	adds	r3, #1
 80132d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80132d4:	4a4a      	ldr	r2, [pc, #296]	; (8013400 <xTaskIncrementTick+0x148>)
 80132d6:	693b      	ldr	r3, [r7, #16]
 80132d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80132da:	693b      	ldr	r3, [r7, #16]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d120      	bne.n	8013322 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80132e0:	4b48      	ldr	r3, [pc, #288]	; (8013404 <xTaskIncrementTick+0x14c>)
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d00a      	beq.n	8013300 <xTaskIncrementTick+0x48>
	__asm volatile
 80132ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132ee:	f383 8811 	msr	BASEPRI, r3
 80132f2:	f3bf 8f6f 	isb	sy
 80132f6:	f3bf 8f4f 	dsb	sy
 80132fa:	603b      	str	r3, [r7, #0]
}
 80132fc:	bf00      	nop
 80132fe:	e7fe      	b.n	80132fe <xTaskIncrementTick+0x46>
 8013300:	4b40      	ldr	r3, [pc, #256]	; (8013404 <xTaskIncrementTick+0x14c>)
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	60fb      	str	r3, [r7, #12]
 8013306:	4b40      	ldr	r3, [pc, #256]	; (8013408 <xTaskIncrementTick+0x150>)
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	4a3e      	ldr	r2, [pc, #248]	; (8013404 <xTaskIncrementTick+0x14c>)
 801330c:	6013      	str	r3, [r2, #0]
 801330e:	4a3e      	ldr	r2, [pc, #248]	; (8013408 <xTaskIncrementTick+0x150>)
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	6013      	str	r3, [r2, #0]
 8013314:	4b3d      	ldr	r3, [pc, #244]	; (801340c <xTaskIncrementTick+0x154>)
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	3301      	adds	r3, #1
 801331a:	4a3c      	ldr	r2, [pc, #240]	; (801340c <xTaskIncrementTick+0x154>)
 801331c:	6013      	str	r3, [r2, #0]
 801331e:	f000 fa9f 	bl	8013860 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013322:	4b3b      	ldr	r3, [pc, #236]	; (8013410 <xTaskIncrementTick+0x158>)
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	693a      	ldr	r2, [r7, #16]
 8013328:	429a      	cmp	r2, r3
 801332a:	d348      	bcc.n	80133be <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801332c:	4b35      	ldr	r3, [pc, #212]	; (8013404 <xTaskIncrementTick+0x14c>)
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d104      	bne.n	8013340 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013336:	4b36      	ldr	r3, [pc, #216]	; (8013410 <xTaskIncrementTick+0x158>)
 8013338:	f04f 32ff 	mov.w	r2, #4294967295
 801333c:	601a      	str	r2, [r3, #0]
					break;
 801333e:	e03e      	b.n	80133be <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013340:	4b30      	ldr	r3, [pc, #192]	; (8013404 <xTaskIncrementTick+0x14c>)
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	68db      	ldr	r3, [r3, #12]
 8013346:	68db      	ldr	r3, [r3, #12]
 8013348:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801334a:	68bb      	ldr	r3, [r7, #8]
 801334c:	685b      	ldr	r3, [r3, #4]
 801334e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013350:	693a      	ldr	r2, [r7, #16]
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	429a      	cmp	r2, r3
 8013356:	d203      	bcs.n	8013360 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013358:	4a2d      	ldr	r2, [pc, #180]	; (8013410 <xTaskIncrementTick+0x158>)
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801335e:	e02e      	b.n	80133be <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013360:	68bb      	ldr	r3, [r7, #8]
 8013362:	3304      	adds	r3, #4
 8013364:	4618      	mov	r0, r3
 8013366:	f7fe ff18 	bl	801219a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801336a:	68bb      	ldr	r3, [r7, #8]
 801336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801336e:	2b00      	cmp	r3, #0
 8013370:	d004      	beq.n	801337c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013372:	68bb      	ldr	r3, [r7, #8]
 8013374:	3318      	adds	r3, #24
 8013376:	4618      	mov	r0, r3
 8013378:	f7fe ff0f 	bl	801219a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801337c:	68bb      	ldr	r3, [r7, #8]
 801337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013380:	2201      	movs	r2, #1
 8013382:	409a      	lsls	r2, r3
 8013384:	4b23      	ldr	r3, [pc, #140]	; (8013414 <xTaskIncrementTick+0x15c>)
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	4313      	orrs	r3, r2
 801338a:	4a22      	ldr	r2, [pc, #136]	; (8013414 <xTaskIncrementTick+0x15c>)
 801338c:	6013      	str	r3, [r2, #0]
 801338e:	68bb      	ldr	r3, [r7, #8]
 8013390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013392:	4613      	mov	r3, r2
 8013394:	009b      	lsls	r3, r3, #2
 8013396:	4413      	add	r3, r2
 8013398:	009b      	lsls	r3, r3, #2
 801339a:	4a1f      	ldr	r2, [pc, #124]	; (8013418 <xTaskIncrementTick+0x160>)
 801339c:	441a      	add	r2, r3
 801339e:	68bb      	ldr	r3, [r7, #8]
 80133a0:	3304      	adds	r3, #4
 80133a2:	4619      	mov	r1, r3
 80133a4:	4610      	mov	r0, r2
 80133a6:	f7fe fe9b 	bl	80120e0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80133aa:	68bb      	ldr	r3, [r7, #8]
 80133ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133ae:	4b1b      	ldr	r3, [pc, #108]	; (801341c <xTaskIncrementTick+0x164>)
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133b4:	429a      	cmp	r2, r3
 80133b6:	d3b9      	bcc.n	801332c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80133b8:	2301      	movs	r3, #1
 80133ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80133bc:	e7b6      	b.n	801332c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80133be:	4b17      	ldr	r3, [pc, #92]	; (801341c <xTaskIncrementTick+0x164>)
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133c4:	4914      	ldr	r1, [pc, #80]	; (8013418 <xTaskIncrementTick+0x160>)
 80133c6:	4613      	mov	r3, r2
 80133c8:	009b      	lsls	r3, r3, #2
 80133ca:	4413      	add	r3, r2
 80133cc:	009b      	lsls	r3, r3, #2
 80133ce:	440b      	add	r3, r1
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	2b01      	cmp	r3, #1
 80133d4:	d907      	bls.n	80133e6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80133d6:	2301      	movs	r3, #1
 80133d8:	617b      	str	r3, [r7, #20]
 80133da:	e004      	b.n	80133e6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80133dc:	4b10      	ldr	r3, [pc, #64]	; (8013420 <xTaskIncrementTick+0x168>)
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	3301      	adds	r3, #1
 80133e2:	4a0f      	ldr	r2, [pc, #60]	; (8013420 <xTaskIncrementTick+0x168>)
 80133e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80133e6:	4b0f      	ldr	r3, [pc, #60]	; (8013424 <xTaskIncrementTick+0x16c>)
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d001      	beq.n	80133f2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80133ee:	2301      	movs	r3, #1
 80133f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80133f2:	697b      	ldr	r3, [r7, #20]
}
 80133f4:	4618      	mov	r0, r3
 80133f6:	3718      	adds	r7, #24
 80133f8:	46bd      	mov	sp, r7
 80133fa:	bd80      	pop	{r7, pc}
 80133fc:	20004998 	.word	0x20004998
 8013400:	20004974 	.word	0x20004974
 8013404:	20004928 	.word	0x20004928
 8013408:	2000492c 	.word	0x2000492c
 801340c:	20004988 	.word	0x20004988
 8013410:	20004990 	.word	0x20004990
 8013414:	20004978 	.word	0x20004978
 8013418:	20004874 	.word	0x20004874
 801341c:	20004870 	.word	0x20004870
 8013420:	20004980 	.word	0x20004980
 8013424:	20004984 	.word	0x20004984

08013428 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013428:	b480      	push	{r7}
 801342a:	b087      	sub	sp, #28
 801342c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801342e:	4b27      	ldr	r3, [pc, #156]	; (80134cc <vTaskSwitchContext+0xa4>)
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d003      	beq.n	801343e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013436:	4b26      	ldr	r3, [pc, #152]	; (80134d0 <vTaskSwitchContext+0xa8>)
 8013438:	2201      	movs	r2, #1
 801343a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801343c:	e03f      	b.n	80134be <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 801343e:	4b24      	ldr	r3, [pc, #144]	; (80134d0 <vTaskSwitchContext+0xa8>)
 8013440:	2200      	movs	r2, #0
 8013442:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013444:	4b23      	ldr	r3, [pc, #140]	; (80134d4 <vTaskSwitchContext+0xac>)
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	fab3 f383 	clz	r3, r3
 8013450:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013452:	7afb      	ldrb	r3, [r7, #11]
 8013454:	f1c3 031f 	rsb	r3, r3, #31
 8013458:	617b      	str	r3, [r7, #20]
 801345a:	491f      	ldr	r1, [pc, #124]	; (80134d8 <vTaskSwitchContext+0xb0>)
 801345c:	697a      	ldr	r2, [r7, #20]
 801345e:	4613      	mov	r3, r2
 8013460:	009b      	lsls	r3, r3, #2
 8013462:	4413      	add	r3, r2
 8013464:	009b      	lsls	r3, r3, #2
 8013466:	440b      	add	r3, r1
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d10a      	bne.n	8013484 <vTaskSwitchContext+0x5c>
	__asm volatile
 801346e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013472:	f383 8811 	msr	BASEPRI, r3
 8013476:	f3bf 8f6f 	isb	sy
 801347a:	f3bf 8f4f 	dsb	sy
 801347e:	607b      	str	r3, [r7, #4]
}
 8013480:	bf00      	nop
 8013482:	e7fe      	b.n	8013482 <vTaskSwitchContext+0x5a>
 8013484:	697a      	ldr	r2, [r7, #20]
 8013486:	4613      	mov	r3, r2
 8013488:	009b      	lsls	r3, r3, #2
 801348a:	4413      	add	r3, r2
 801348c:	009b      	lsls	r3, r3, #2
 801348e:	4a12      	ldr	r2, [pc, #72]	; (80134d8 <vTaskSwitchContext+0xb0>)
 8013490:	4413      	add	r3, r2
 8013492:	613b      	str	r3, [r7, #16]
 8013494:	693b      	ldr	r3, [r7, #16]
 8013496:	685b      	ldr	r3, [r3, #4]
 8013498:	685a      	ldr	r2, [r3, #4]
 801349a:	693b      	ldr	r3, [r7, #16]
 801349c:	605a      	str	r2, [r3, #4]
 801349e:	693b      	ldr	r3, [r7, #16]
 80134a0:	685a      	ldr	r2, [r3, #4]
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	3308      	adds	r3, #8
 80134a6:	429a      	cmp	r2, r3
 80134a8:	d104      	bne.n	80134b4 <vTaskSwitchContext+0x8c>
 80134aa:	693b      	ldr	r3, [r7, #16]
 80134ac:	685b      	ldr	r3, [r3, #4]
 80134ae:	685a      	ldr	r2, [r3, #4]
 80134b0:	693b      	ldr	r3, [r7, #16]
 80134b2:	605a      	str	r2, [r3, #4]
 80134b4:	693b      	ldr	r3, [r7, #16]
 80134b6:	685b      	ldr	r3, [r3, #4]
 80134b8:	68db      	ldr	r3, [r3, #12]
 80134ba:	4a08      	ldr	r2, [pc, #32]	; (80134dc <vTaskSwitchContext+0xb4>)
 80134bc:	6013      	str	r3, [r2, #0]
}
 80134be:	bf00      	nop
 80134c0:	371c      	adds	r7, #28
 80134c2:	46bd      	mov	sp, r7
 80134c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c8:	4770      	bx	lr
 80134ca:	bf00      	nop
 80134cc:	20004998 	.word	0x20004998
 80134d0:	20004984 	.word	0x20004984
 80134d4:	20004978 	.word	0x20004978
 80134d8:	20004874 	.word	0x20004874
 80134dc:	20004870 	.word	0x20004870

080134e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b084      	sub	sp, #16
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
 80134e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d10a      	bne.n	8013506 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80134f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134f4:	f383 8811 	msr	BASEPRI, r3
 80134f8:	f3bf 8f6f 	isb	sy
 80134fc:	f3bf 8f4f 	dsb	sy
 8013500:	60fb      	str	r3, [r7, #12]
}
 8013502:	bf00      	nop
 8013504:	e7fe      	b.n	8013504 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013506:	4b07      	ldr	r3, [pc, #28]	; (8013524 <vTaskPlaceOnEventList+0x44>)
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	3318      	adds	r3, #24
 801350c:	4619      	mov	r1, r3
 801350e:	6878      	ldr	r0, [r7, #4]
 8013510:	f7fe fe0a 	bl	8012128 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013514:	2101      	movs	r1, #1
 8013516:	6838      	ldr	r0, [r7, #0]
 8013518:	f000 fc50 	bl	8013dbc <prvAddCurrentTaskToDelayedList>
}
 801351c:	bf00      	nop
 801351e:	3710      	adds	r7, #16
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}
 8013524:	20004870 	.word	0x20004870

08013528 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b086      	sub	sp, #24
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	68db      	ldr	r3, [r3, #12]
 8013534:	68db      	ldr	r3, [r3, #12]
 8013536:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013538:	693b      	ldr	r3, [r7, #16]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d10a      	bne.n	8013554 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801353e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013542:	f383 8811 	msr	BASEPRI, r3
 8013546:	f3bf 8f6f 	isb	sy
 801354a:	f3bf 8f4f 	dsb	sy
 801354e:	60fb      	str	r3, [r7, #12]
}
 8013550:	bf00      	nop
 8013552:	e7fe      	b.n	8013552 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013554:	693b      	ldr	r3, [r7, #16]
 8013556:	3318      	adds	r3, #24
 8013558:	4618      	mov	r0, r3
 801355a:	f7fe fe1e 	bl	801219a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801355e:	4b1d      	ldr	r3, [pc, #116]	; (80135d4 <xTaskRemoveFromEventList+0xac>)
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d11c      	bne.n	80135a0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013566:	693b      	ldr	r3, [r7, #16]
 8013568:	3304      	adds	r3, #4
 801356a:	4618      	mov	r0, r3
 801356c:	f7fe fe15 	bl	801219a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013570:	693b      	ldr	r3, [r7, #16]
 8013572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013574:	2201      	movs	r2, #1
 8013576:	409a      	lsls	r2, r3
 8013578:	4b17      	ldr	r3, [pc, #92]	; (80135d8 <xTaskRemoveFromEventList+0xb0>)
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	4313      	orrs	r3, r2
 801357e:	4a16      	ldr	r2, [pc, #88]	; (80135d8 <xTaskRemoveFromEventList+0xb0>)
 8013580:	6013      	str	r3, [r2, #0]
 8013582:	693b      	ldr	r3, [r7, #16]
 8013584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013586:	4613      	mov	r3, r2
 8013588:	009b      	lsls	r3, r3, #2
 801358a:	4413      	add	r3, r2
 801358c:	009b      	lsls	r3, r3, #2
 801358e:	4a13      	ldr	r2, [pc, #76]	; (80135dc <xTaskRemoveFromEventList+0xb4>)
 8013590:	441a      	add	r2, r3
 8013592:	693b      	ldr	r3, [r7, #16]
 8013594:	3304      	adds	r3, #4
 8013596:	4619      	mov	r1, r3
 8013598:	4610      	mov	r0, r2
 801359a:	f7fe fda1 	bl	80120e0 <vListInsertEnd>
 801359e:	e005      	b.n	80135ac <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80135a0:	693b      	ldr	r3, [r7, #16]
 80135a2:	3318      	adds	r3, #24
 80135a4:	4619      	mov	r1, r3
 80135a6:	480e      	ldr	r0, [pc, #56]	; (80135e0 <xTaskRemoveFromEventList+0xb8>)
 80135a8:	f7fe fd9a 	bl	80120e0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80135ac:	693b      	ldr	r3, [r7, #16]
 80135ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135b0:	4b0c      	ldr	r3, [pc, #48]	; (80135e4 <xTaskRemoveFromEventList+0xbc>)
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135b6:	429a      	cmp	r2, r3
 80135b8:	d905      	bls.n	80135c6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80135ba:	2301      	movs	r3, #1
 80135bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80135be:	4b0a      	ldr	r3, [pc, #40]	; (80135e8 <xTaskRemoveFromEventList+0xc0>)
 80135c0:	2201      	movs	r2, #1
 80135c2:	601a      	str	r2, [r3, #0]
 80135c4:	e001      	b.n	80135ca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80135c6:	2300      	movs	r3, #0
 80135c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80135ca:	697b      	ldr	r3, [r7, #20]
}
 80135cc:	4618      	mov	r0, r3
 80135ce:	3718      	adds	r7, #24
 80135d0:	46bd      	mov	sp, r7
 80135d2:	bd80      	pop	{r7, pc}
 80135d4:	20004998 	.word	0x20004998
 80135d8:	20004978 	.word	0x20004978
 80135dc:	20004874 	.word	0x20004874
 80135e0:	20004930 	.word	0x20004930
 80135e4:	20004870 	.word	0x20004870
 80135e8:	20004984 	.word	0x20004984

080135ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80135ec:	b480      	push	{r7}
 80135ee:	b083      	sub	sp, #12
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80135f4:	4b06      	ldr	r3, [pc, #24]	; (8013610 <vTaskInternalSetTimeOutState+0x24>)
 80135f6:	681a      	ldr	r2, [r3, #0]
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80135fc:	4b05      	ldr	r3, [pc, #20]	; (8013614 <vTaskInternalSetTimeOutState+0x28>)
 80135fe:	681a      	ldr	r2, [r3, #0]
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	605a      	str	r2, [r3, #4]
}
 8013604:	bf00      	nop
 8013606:	370c      	adds	r7, #12
 8013608:	46bd      	mov	sp, r7
 801360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360e:	4770      	bx	lr
 8013610:	20004988 	.word	0x20004988
 8013614:	20004974 	.word	0x20004974

08013618 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b088      	sub	sp, #32
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
 8013620:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d10a      	bne.n	801363e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013628:	f04f 0350 	mov.w	r3, #80	; 0x50
 801362c:	f383 8811 	msr	BASEPRI, r3
 8013630:	f3bf 8f6f 	isb	sy
 8013634:	f3bf 8f4f 	dsb	sy
 8013638:	613b      	str	r3, [r7, #16]
}
 801363a:	bf00      	nop
 801363c:	e7fe      	b.n	801363c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801363e:	683b      	ldr	r3, [r7, #0]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d10a      	bne.n	801365a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013648:	f383 8811 	msr	BASEPRI, r3
 801364c:	f3bf 8f6f 	isb	sy
 8013650:	f3bf 8f4f 	dsb	sy
 8013654:	60fb      	str	r3, [r7, #12]
}
 8013656:	bf00      	nop
 8013658:	e7fe      	b.n	8013658 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801365a:	f000 fd43 	bl	80140e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801365e:	4b1d      	ldr	r3, [pc, #116]	; (80136d4 <xTaskCheckForTimeOut+0xbc>)
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	685b      	ldr	r3, [r3, #4]
 8013668:	69ba      	ldr	r2, [r7, #24]
 801366a:	1ad3      	subs	r3, r2, r3
 801366c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013676:	d102      	bne.n	801367e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013678:	2300      	movs	r3, #0
 801367a:	61fb      	str	r3, [r7, #28]
 801367c:	e023      	b.n	80136c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	681a      	ldr	r2, [r3, #0]
 8013682:	4b15      	ldr	r3, [pc, #84]	; (80136d8 <xTaskCheckForTimeOut+0xc0>)
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	429a      	cmp	r2, r3
 8013688:	d007      	beq.n	801369a <xTaskCheckForTimeOut+0x82>
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	685b      	ldr	r3, [r3, #4]
 801368e:	69ba      	ldr	r2, [r7, #24]
 8013690:	429a      	cmp	r2, r3
 8013692:	d302      	bcc.n	801369a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013694:	2301      	movs	r3, #1
 8013696:	61fb      	str	r3, [r7, #28]
 8013698:	e015      	b.n	80136c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801369a:	683b      	ldr	r3, [r7, #0]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	697a      	ldr	r2, [r7, #20]
 80136a0:	429a      	cmp	r2, r3
 80136a2:	d20b      	bcs.n	80136bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80136a4:	683b      	ldr	r3, [r7, #0]
 80136a6:	681a      	ldr	r2, [r3, #0]
 80136a8:	697b      	ldr	r3, [r7, #20]
 80136aa:	1ad2      	subs	r2, r2, r3
 80136ac:	683b      	ldr	r3, [r7, #0]
 80136ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80136b0:	6878      	ldr	r0, [r7, #4]
 80136b2:	f7ff ff9b 	bl	80135ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80136b6:	2300      	movs	r3, #0
 80136b8:	61fb      	str	r3, [r7, #28]
 80136ba:	e004      	b.n	80136c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80136bc:	683b      	ldr	r3, [r7, #0]
 80136be:	2200      	movs	r2, #0
 80136c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80136c2:	2301      	movs	r3, #1
 80136c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80136c6:	f000 fd3d 	bl	8014144 <vPortExitCritical>

	return xReturn;
 80136ca:	69fb      	ldr	r3, [r7, #28]
}
 80136cc:	4618      	mov	r0, r3
 80136ce:	3720      	adds	r7, #32
 80136d0:	46bd      	mov	sp, r7
 80136d2:	bd80      	pop	{r7, pc}
 80136d4:	20004974 	.word	0x20004974
 80136d8:	20004988 	.word	0x20004988

080136dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80136dc:	b480      	push	{r7}
 80136de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80136e0:	4b03      	ldr	r3, [pc, #12]	; (80136f0 <vTaskMissedYield+0x14>)
 80136e2:	2201      	movs	r2, #1
 80136e4:	601a      	str	r2, [r3, #0]
}
 80136e6:	bf00      	nop
 80136e8:	46bd      	mov	sp, r7
 80136ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ee:	4770      	bx	lr
 80136f0:	20004984 	.word	0x20004984

080136f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b082      	sub	sp, #8
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80136fc:	f000 f852 	bl	80137a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013700:	4b06      	ldr	r3, [pc, #24]	; (801371c <prvIdleTask+0x28>)
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	2b01      	cmp	r3, #1
 8013706:	d9f9      	bls.n	80136fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8013708:	4b05      	ldr	r3, [pc, #20]	; (8013720 <prvIdleTask+0x2c>)
 801370a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801370e:	601a      	str	r2, [r3, #0]
 8013710:	f3bf 8f4f 	dsb	sy
 8013714:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013718:	e7f0      	b.n	80136fc <prvIdleTask+0x8>
 801371a:	bf00      	nop
 801371c:	20004874 	.word	0x20004874
 8013720:	e000ed04 	.word	0xe000ed04

08013724 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b082      	sub	sp, #8
 8013728:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801372a:	2300      	movs	r3, #0
 801372c:	607b      	str	r3, [r7, #4]
 801372e:	e00c      	b.n	801374a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013730:	687a      	ldr	r2, [r7, #4]
 8013732:	4613      	mov	r3, r2
 8013734:	009b      	lsls	r3, r3, #2
 8013736:	4413      	add	r3, r2
 8013738:	009b      	lsls	r3, r3, #2
 801373a:	4a12      	ldr	r2, [pc, #72]	; (8013784 <prvInitialiseTaskLists+0x60>)
 801373c:	4413      	add	r3, r2
 801373e:	4618      	mov	r0, r3
 8013740:	f7fe fca1 	bl	8012086 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	3301      	adds	r3, #1
 8013748:	607b      	str	r3, [r7, #4]
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	2b06      	cmp	r3, #6
 801374e:	d9ef      	bls.n	8013730 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013750:	480d      	ldr	r0, [pc, #52]	; (8013788 <prvInitialiseTaskLists+0x64>)
 8013752:	f7fe fc98 	bl	8012086 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013756:	480d      	ldr	r0, [pc, #52]	; (801378c <prvInitialiseTaskLists+0x68>)
 8013758:	f7fe fc95 	bl	8012086 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801375c:	480c      	ldr	r0, [pc, #48]	; (8013790 <prvInitialiseTaskLists+0x6c>)
 801375e:	f7fe fc92 	bl	8012086 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013762:	480c      	ldr	r0, [pc, #48]	; (8013794 <prvInitialiseTaskLists+0x70>)
 8013764:	f7fe fc8f 	bl	8012086 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013768:	480b      	ldr	r0, [pc, #44]	; (8013798 <prvInitialiseTaskLists+0x74>)
 801376a:	f7fe fc8c 	bl	8012086 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801376e:	4b0b      	ldr	r3, [pc, #44]	; (801379c <prvInitialiseTaskLists+0x78>)
 8013770:	4a05      	ldr	r2, [pc, #20]	; (8013788 <prvInitialiseTaskLists+0x64>)
 8013772:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013774:	4b0a      	ldr	r3, [pc, #40]	; (80137a0 <prvInitialiseTaskLists+0x7c>)
 8013776:	4a05      	ldr	r2, [pc, #20]	; (801378c <prvInitialiseTaskLists+0x68>)
 8013778:	601a      	str	r2, [r3, #0]
}
 801377a:	bf00      	nop
 801377c:	3708      	adds	r7, #8
 801377e:	46bd      	mov	sp, r7
 8013780:	bd80      	pop	{r7, pc}
 8013782:	bf00      	nop
 8013784:	20004874 	.word	0x20004874
 8013788:	20004900 	.word	0x20004900
 801378c:	20004914 	.word	0x20004914
 8013790:	20004930 	.word	0x20004930
 8013794:	20004944 	.word	0x20004944
 8013798:	2000495c 	.word	0x2000495c
 801379c:	20004928 	.word	0x20004928
 80137a0:	2000492c 	.word	0x2000492c

080137a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b082      	sub	sp, #8
 80137a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80137aa:	e019      	b.n	80137e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80137ac:	f000 fc9a 	bl	80140e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80137b0:	4b10      	ldr	r3, [pc, #64]	; (80137f4 <prvCheckTasksWaitingTermination+0x50>)
 80137b2:	68db      	ldr	r3, [r3, #12]
 80137b4:	68db      	ldr	r3, [r3, #12]
 80137b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	3304      	adds	r3, #4
 80137bc:	4618      	mov	r0, r3
 80137be:	f7fe fcec 	bl	801219a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80137c2:	4b0d      	ldr	r3, [pc, #52]	; (80137f8 <prvCheckTasksWaitingTermination+0x54>)
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	3b01      	subs	r3, #1
 80137c8:	4a0b      	ldr	r2, [pc, #44]	; (80137f8 <prvCheckTasksWaitingTermination+0x54>)
 80137ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80137cc:	4b0b      	ldr	r3, [pc, #44]	; (80137fc <prvCheckTasksWaitingTermination+0x58>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	3b01      	subs	r3, #1
 80137d2:	4a0a      	ldr	r2, [pc, #40]	; (80137fc <prvCheckTasksWaitingTermination+0x58>)
 80137d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80137d6:	f000 fcb5 	bl	8014144 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80137da:	6878      	ldr	r0, [r7, #4]
 80137dc:	f000 f810 	bl	8013800 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80137e0:	4b06      	ldr	r3, [pc, #24]	; (80137fc <prvCheckTasksWaitingTermination+0x58>)
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d1e1      	bne.n	80137ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80137e8:	bf00      	nop
 80137ea:	bf00      	nop
 80137ec:	3708      	adds	r7, #8
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bd80      	pop	{r7, pc}
 80137f2:	bf00      	nop
 80137f4:	20004944 	.word	0x20004944
 80137f8:	20004970 	.word	0x20004970
 80137fc:	20004958 	.word	0x20004958

08013800 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013800:	b580      	push	{r7, lr}
 8013802:	b084      	sub	sp, #16
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801380e:	2b00      	cmp	r3, #0
 8013810:	d108      	bne.n	8013824 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013816:	4618      	mov	r0, r3
 8013818:	f000 fe4a 	bl	80144b0 <vPortFree>
				vPortFree( pxTCB );
 801381c:	6878      	ldr	r0, [r7, #4]
 801381e:	f000 fe47 	bl	80144b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013822:	e018      	b.n	8013856 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801382a:	2b01      	cmp	r3, #1
 801382c:	d103      	bne.n	8013836 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801382e:	6878      	ldr	r0, [r7, #4]
 8013830:	f000 fe3e 	bl	80144b0 <vPortFree>
	}
 8013834:	e00f      	b.n	8013856 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801383c:	2b02      	cmp	r3, #2
 801383e:	d00a      	beq.n	8013856 <prvDeleteTCB+0x56>
	__asm volatile
 8013840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013844:	f383 8811 	msr	BASEPRI, r3
 8013848:	f3bf 8f6f 	isb	sy
 801384c:	f3bf 8f4f 	dsb	sy
 8013850:	60fb      	str	r3, [r7, #12]
}
 8013852:	bf00      	nop
 8013854:	e7fe      	b.n	8013854 <prvDeleteTCB+0x54>
	}
 8013856:	bf00      	nop
 8013858:	3710      	adds	r7, #16
 801385a:	46bd      	mov	sp, r7
 801385c:	bd80      	pop	{r7, pc}
	...

08013860 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013860:	b480      	push	{r7}
 8013862:	b083      	sub	sp, #12
 8013864:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013866:	4b0c      	ldr	r3, [pc, #48]	; (8013898 <prvResetNextTaskUnblockTime+0x38>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d104      	bne.n	801387a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013870:	4b0a      	ldr	r3, [pc, #40]	; (801389c <prvResetNextTaskUnblockTime+0x3c>)
 8013872:	f04f 32ff 	mov.w	r2, #4294967295
 8013876:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013878:	e008      	b.n	801388c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801387a:	4b07      	ldr	r3, [pc, #28]	; (8013898 <prvResetNextTaskUnblockTime+0x38>)
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	68db      	ldr	r3, [r3, #12]
 8013880:	68db      	ldr	r3, [r3, #12]
 8013882:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	685b      	ldr	r3, [r3, #4]
 8013888:	4a04      	ldr	r2, [pc, #16]	; (801389c <prvResetNextTaskUnblockTime+0x3c>)
 801388a:	6013      	str	r3, [r2, #0]
}
 801388c:	bf00      	nop
 801388e:	370c      	adds	r7, #12
 8013890:	46bd      	mov	sp, r7
 8013892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013896:	4770      	bx	lr
 8013898:	20004928 	.word	0x20004928
 801389c:	20004990 	.word	0x20004990

080138a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80138a0:	b480      	push	{r7}
 80138a2:	b083      	sub	sp, #12
 80138a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80138a6:	4b0b      	ldr	r3, [pc, #44]	; (80138d4 <xTaskGetSchedulerState+0x34>)
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d102      	bne.n	80138b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80138ae:	2301      	movs	r3, #1
 80138b0:	607b      	str	r3, [r7, #4]
 80138b2:	e008      	b.n	80138c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80138b4:	4b08      	ldr	r3, [pc, #32]	; (80138d8 <xTaskGetSchedulerState+0x38>)
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d102      	bne.n	80138c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80138bc:	2302      	movs	r3, #2
 80138be:	607b      	str	r3, [r7, #4]
 80138c0:	e001      	b.n	80138c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80138c2:	2300      	movs	r3, #0
 80138c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80138c6:	687b      	ldr	r3, [r7, #4]
	}
 80138c8:	4618      	mov	r0, r3
 80138ca:	370c      	adds	r7, #12
 80138cc:	46bd      	mov	sp, r7
 80138ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d2:	4770      	bx	lr
 80138d4:	2000497c 	.word	0x2000497c
 80138d8:	20004998 	.word	0x20004998

080138dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b086      	sub	sp, #24
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80138e8:	2300      	movs	r3, #0
 80138ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d06e      	beq.n	80139d0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80138f2:	4b3a      	ldr	r3, [pc, #232]	; (80139dc <xTaskPriorityDisinherit+0x100>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	693a      	ldr	r2, [r7, #16]
 80138f8:	429a      	cmp	r2, r3
 80138fa:	d00a      	beq.n	8013912 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80138fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013900:	f383 8811 	msr	BASEPRI, r3
 8013904:	f3bf 8f6f 	isb	sy
 8013908:	f3bf 8f4f 	dsb	sy
 801390c:	60fb      	str	r3, [r7, #12]
}
 801390e:	bf00      	nop
 8013910:	e7fe      	b.n	8013910 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013912:	693b      	ldr	r3, [r7, #16]
 8013914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013916:	2b00      	cmp	r3, #0
 8013918:	d10a      	bne.n	8013930 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801391a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801391e:	f383 8811 	msr	BASEPRI, r3
 8013922:	f3bf 8f6f 	isb	sy
 8013926:	f3bf 8f4f 	dsb	sy
 801392a:	60bb      	str	r3, [r7, #8]
}
 801392c:	bf00      	nop
 801392e:	e7fe      	b.n	801392e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013930:	693b      	ldr	r3, [r7, #16]
 8013932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013934:	1e5a      	subs	r2, r3, #1
 8013936:	693b      	ldr	r3, [r7, #16]
 8013938:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801393a:	693b      	ldr	r3, [r7, #16]
 801393c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801393e:	693b      	ldr	r3, [r7, #16]
 8013940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013942:	429a      	cmp	r2, r3
 8013944:	d044      	beq.n	80139d0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013946:	693b      	ldr	r3, [r7, #16]
 8013948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801394a:	2b00      	cmp	r3, #0
 801394c:	d140      	bne.n	80139d0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801394e:	693b      	ldr	r3, [r7, #16]
 8013950:	3304      	adds	r3, #4
 8013952:	4618      	mov	r0, r3
 8013954:	f7fe fc21 	bl	801219a <uxListRemove>
 8013958:	4603      	mov	r3, r0
 801395a:	2b00      	cmp	r3, #0
 801395c:	d115      	bne.n	801398a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801395e:	693b      	ldr	r3, [r7, #16]
 8013960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013962:	491f      	ldr	r1, [pc, #124]	; (80139e0 <xTaskPriorityDisinherit+0x104>)
 8013964:	4613      	mov	r3, r2
 8013966:	009b      	lsls	r3, r3, #2
 8013968:	4413      	add	r3, r2
 801396a:	009b      	lsls	r3, r3, #2
 801396c:	440b      	add	r3, r1
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d10a      	bne.n	801398a <xTaskPriorityDisinherit+0xae>
 8013974:	693b      	ldr	r3, [r7, #16]
 8013976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013978:	2201      	movs	r2, #1
 801397a:	fa02 f303 	lsl.w	r3, r2, r3
 801397e:	43da      	mvns	r2, r3
 8013980:	4b18      	ldr	r3, [pc, #96]	; (80139e4 <xTaskPriorityDisinherit+0x108>)
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	4013      	ands	r3, r2
 8013986:	4a17      	ldr	r2, [pc, #92]	; (80139e4 <xTaskPriorityDisinherit+0x108>)
 8013988:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801398a:	693b      	ldr	r3, [r7, #16]
 801398c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801398e:	693b      	ldr	r3, [r7, #16]
 8013990:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013992:	693b      	ldr	r3, [r7, #16]
 8013994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013996:	f1c3 0207 	rsb	r2, r3, #7
 801399a:	693b      	ldr	r3, [r7, #16]
 801399c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801399e:	693b      	ldr	r3, [r7, #16]
 80139a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139a2:	2201      	movs	r2, #1
 80139a4:	409a      	lsls	r2, r3
 80139a6:	4b0f      	ldr	r3, [pc, #60]	; (80139e4 <xTaskPriorityDisinherit+0x108>)
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	4313      	orrs	r3, r2
 80139ac:	4a0d      	ldr	r2, [pc, #52]	; (80139e4 <xTaskPriorityDisinherit+0x108>)
 80139ae:	6013      	str	r3, [r2, #0]
 80139b0:	693b      	ldr	r3, [r7, #16]
 80139b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139b4:	4613      	mov	r3, r2
 80139b6:	009b      	lsls	r3, r3, #2
 80139b8:	4413      	add	r3, r2
 80139ba:	009b      	lsls	r3, r3, #2
 80139bc:	4a08      	ldr	r2, [pc, #32]	; (80139e0 <xTaskPriorityDisinherit+0x104>)
 80139be:	441a      	add	r2, r3
 80139c0:	693b      	ldr	r3, [r7, #16]
 80139c2:	3304      	adds	r3, #4
 80139c4:	4619      	mov	r1, r3
 80139c6:	4610      	mov	r0, r2
 80139c8:	f7fe fb8a 	bl	80120e0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80139cc:	2301      	movs	r3, #1
 80139ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80139d0:	697b      	ldr	r3, [r7, #20]
	}
 80139d2:	4618      	mov	r0, r3
 80139d4:	3718      	adds	r7, #24
 80139d6:	46bd      	mov	sp, r7
 80139d8:	bd80      	pop	{r7, pc}
 80139da:	bf00      	nop
 80139dc:	20004870 	.word	0x20004870
 80139e0:	20004874 	.word	0x20004874
 80139e4:	20004978 	.word	0x20004978

080139e8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b086      	sub	sp, #24
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	60f8      	str	r0, [r7, #12]
 80139f0:	60b9      	str	r1, [r7, #8]
 80139f2:	607a      	str	r2, [r7, #4]
 80139f4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80139f6:	f000 fb75 	bl	80140e4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80139fa:	4b26      	ldr	r3, [pc, #152]	; (8013a94 <xTaskNotifyWait+0xac>)
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013a02:	b2db      	uxtb	r3, r3
 8013a04:	2b02      	cmp	r3, #2
 8013a06:	d01a      	beq.n	8013a3e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8013a08:	4b22      	ldr	r3, [pc, #136]	; (8013a94 <xTaskNotifyWait+0xac>)
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8013a0e:	68fa      	ldr	r2, [r7, #12]
 8013a10:	43d2      	mvns	r2, r2
 8013a12:	400a      	ands	r2, r1
 8013a14:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8013a16:	4b1f      	ldr	r3, [pc, #124]	; (8013a94 <xTaskNotifyWait+0xac>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	2201      	movs	r2, #1
 8013a1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8013a20:	683b      	ldr	r3, [r7, #0]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d00b      	beq.n	8013a3e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013a26:	2101      	movs	r1, #1
 8013a28:	6838      	ldr	r0, [r7, #0]
 8013a2a:	f000 f9c7 	bl	8013dbc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8013a2e:	4b1a      	ldr	r3, [pc, #104]	; (8013a98 <xTaskNotifyWait+0xb0>)
 8013a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a34:	601a      	str	r2, [r3, #0]
 8013a36:	f3bf 8f4f 	dsb	sy
 8013a3a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8013a3e:	f000 fb81 	bl	8014144 <vPortExitCritical>

		taskENTER_CRITICAL();
 8013a42:	f000 fb4f 	bl	80140e4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d004      	beq.n	8013a56 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8013a4c:	4b11      	ldr	r3, [pc, #68]	; (8013a94 <xTaskNotifyWait+0xac>)
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8013a56:	4b0f      	ldr	r3, [pc, #60]	; (8013a94 <xTaskNotifyWait+0xac>)
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013a5e:	b2db      	uxtb	r3, r3
 8013a60:	2b02      	cmp	r3, #2
 8013a62:	d002      	beq.n	8013a6a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8013a64:	2300      	movs	r3, #0
 8013a66:	617b      	str	r3, [r7, #20]
 8013a68:	e008      	b.n	8013a7c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8013a6a:	4b0a      	ldr	r3, [pc, #40]	; (8013a94 <xTaskNotifyWait+0xac>)
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8013a70:	68ba      	ldr	r2, [r7, #8]
 8013a72:	43d2      	mvns	r2, r2
 8013a74:	400a      	ands	r2, r1
 8013a76:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8013a78:	2301      	movs	r3, #1
 8013a7a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013a7c:	4b05      	ldr	r3, [pc, #20]	; (8013a94 <xTaskNotifyWait+0xac>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	2200      	movs	r2, #0
 8013a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8013a86:	f000 fb5d 	bl	8014144 <vPortExitCritical>

		return xReturn;
 8013a8a:	697b      	ldr	r3, [r7, #20]
	}
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	3718      	adds	r7, #24
 8013a90:	46bd      	mov	sp, r7
 8013a92:	bd80      	pop	{r7, pc}
 8013a94:	20004870 	.word	0x20004870
 8013a98:	e000ed04 	.word	0xe000ed04

08013a9c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b08a      	sub	sp, #40	; 0x28
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	60f8      	str	r0, [r7, #12]
 8013aa4:	60b9      	str	r1, [r7, #8]
 8013aa6:	603b      	str	r3, [r7, #0]
 8013aa8:	4613      	mov	r3, r2
 8013aaa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8013aac:	2301      	movs	r3, #1
 8013aae:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d10a      	bne.n	8013acc <xTaskGenericNotify+0x30>
	__asm volatile
 8013ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aba:	f383 8811 	msr	BASEPRI, r3
 8013abe:	f3bf 8f6f 	isb	sy
 8013ac2:	f3bf 8f4f 	dsb	sy
 8013ac6:	61bb      	str	r3, [r7, #24]
}
 8013ac8:	bf00      	nop
 8013aca:	e7fe      	b.n	8013aca <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8013ad0:	f000 fb08 	bl	80140e4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8013ad4:	683b      	ldr	r3, [r7, #0]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d003      	beq.n	8013ae2 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8013ada:	6a3b      	ldr	r3, [r7, #32]
 8013adc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013ade:	683b      	ldr	r3, [r7, #0]
 8013ae0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8013ae2:	6a3b      	ldr	r3, [r7, #32]
 8013ae4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013ae8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8013aea:	6a3b      	ldr	r3, [r7, #32]
 8013aec:	2202      	movs	r2, #2
 8013aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8013af2:	79fb      	ldrb	r3, [r7, #7]
 8013af4:	2b04      	cmp	r3, #4
 8013af6:	d828      	bhi.n	8013b4a <xTaskGenericNotify+0xae>
 8013af8:	a201      	add	r2, pc, #4	; (adr r2, 8013b00 <xTaskGenericNotify+0x64>)
 8013afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013afe:	bf00      	nop
 8013b00:	08013b6b 	.word	0x08013b6b
 8013b04:	08013b15 	.word	0x08013b15
 8013b08:	08013b23 	.word	0x08013b23
 8013b0c:	08013b2f 	.word	0x08013b2f
 8013b10:	08013b37 	.word	0x08013b37
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8013b14:	6a3b      	ldr	r3, [r7, #32]
 8013b16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013b18:	68bb      	ldr	r3, [r7, #8]
 8013b1a:	431a      	orrs	r2, r3
 8013b1c:	6a3b      	ldr	r3, [r7, #32]
 8013b1e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013b20:	e026      	b.n	8013b70 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8013b22:	6a3b      	ldr	r3, [r7, #32]
 8013b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b26:	1c5a      	adds	r2, r3, #1
 8013b28:	6a3b      	ldr	r3, [r7, #32]
 8013b2a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013b2c:	e020      	b.n	8013b70 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8013b2e:	6a3b      	ldr	r3, [r7, #32]
 8013b30:	68ba      	ldr	r2, [r7, #8]
 8013b32:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013b34:	e01c      	b.n	8013b70 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8013b36:	7ffb      	ldrb	r3, [r7, #31]
 8013b38:	2b02      	cmp	r3, #2
 8013b3a:	d003      	beq.n	8013b44 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8013b3c:	6a3b      	ldr	r3, [r7, #32]
 8013b3e:	68ba      	ldr	r2, [r7, #8]
 8013b40:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8013b42:	e015      	b.n	8013b70 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8013b44:	2300      	movs	r3, #0
 8013b46:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8013b48:	e012      	b.n	8013b70 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8013b4a:	6a3b      	ldr	r3, [r7, #32]
 8013b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b52:	d00c      	beq.n	8013b6e <xTaskGenericNotify+0xd2>
	__asm volatile
 8013b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b58:	f383 8811 	msr	BASEPRI, r3
 8013b5c:	f3bf 8f6f 	isb	sy
 8013b60:	f3bf 8f4f 	dsb	sy
 8013b64:	617b      	str	r3, [r7, #20]
}
 8013b66:	bf00      	nop
 8013b68:	e7fe      	b.n	8013b68 <xTaskGenericNotify+0xcc>
					break;
 8013b6a:	bf00      	nop
 8013b6c:	e000      	b.n	8013b70 <xTaskGenericNotify+0xd4>

					break;
 8013b6e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8013b70:	7ffb      	ldrb	r3, [r7, #31]
 8013b72:	2b01      	cmp	r3, #1
 8013b74:	d139      	bne.n	8013bea <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013b76:	6a3b      	ldr	r3, [r7, #32]
 8013b78:	3304      	adds	r3, #4
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f7fe fb0d 	bl	801219a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8013b80:	6a3b      	ldr	r3, [r7, #32]
 8013b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b84:	2201      	movs	r2, #1
 8013b86:	409a      	lsls	r2, r3
 8013b88:	4b1b      	ldr	r3, [pc, #108]	; (8013bf8 <xTaskGenericNotify+0x15c>)
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	4313      	orrs	r3, r2
 8013b8e:	4a1a      	ldr	r2, [pc, #104]	; (8013bf8 <xTaskGenericNotify+0x15c>)
 8013b90:	6013      	str	r3, [r2, #0]
 8013b92:	6a3b      	ldr	r3, [r7, #32]
 8013b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b96:	4613      	mov	r3, r2
 8013b98:	009b      	lsls	r3, r3, #2
 8013b9a:	4413      	add	r3, r2
 8013b9c:	009b      	lsls	r3, r3, #2
 8013b9e:	4a17      	ldr	r2, [pc, #92]	; (8013bfc <xTaskGenericNotify+0x160>)
 8013ba0:	441a      	add	r2, r3
 8013ba2:	6a3b      	ldr	r3, [r7, #32]
 8013ba4:	3304      	adds	r3, #4
 8013ba6:	4619      	mov	r1, r3
 8013ba8:	4610      	mov	r0, r2
 8013baa:	f7fe fa99 	bl	80120e0 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8013bae:	6a3b      	ldr	r3, [r7, #32]
 8013bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d00a      	beq.n	8013bcc <xTaskGenericNotify+0x130>
	__asm volatile
 8013bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bba:	f383 8811 	msr	BASEPRI, r3
 8013bbe:	f3bf 8f6f 	isb	sy
 8013bc2:	f3bf 8f4f 	dsb	sy
 8013bc6:	613b      	str	r3, [r7, #16]
}
 8013bc8:	bf00      	nop
 8013bca:	e7fe      	b.n	8013bca <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013bcc:	6a3b      	ldr	r3, [r7, #32]
 8013bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bd0:	4b0b      	ldr	r3, [pc, #44]	; (8013c00 <xTaskGenericNotify+0x164>)
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bd6:	429a      	cmp	r2, r3
 8013bd8:	d907      	bls.n	8013bea <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8013bda:	4b0a      	ldr	r3, [pc, #40]	; (8013c04 <xTaskGenericNotify+0x168>)
 8013bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013be0:	601a      	str	r2, [r3, #0]
 8013be2:	f3bf 8f4f 	dsb	sy
 8013be6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8013bea:	f000 faab 	bl	8014144 <vPortExitCritical>

		return xReturn;
 8013bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	3728      	adds	r7, #40	; 0x28
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bd80      	pop	{r7, pc}
 8013bf8:	20004978 	.word	0x20004978
 8013bfc:	20004874 	.word	0x20004874
 8013c00:	20004870 	.word	0x20004870
 8013c04:	e000ed04 	.word	0xe000ed04

08013c08 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b08e      	sub	sp, #56	; 0x38
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	60f8      	str	r0, [r7, #12]
 8013c10:	60b9      	str	r1, [r7, #8]
 8013c12:	603b      	str	r3, [r7, #0]
 8013c14:	4613      	mov	r3, r2
 8013c16:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8013c18:	2301      	movs	r3, #1
 8013c1a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d10a      	bne.n	8013c38 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8013c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c26:	f383 8811 	msr	BASEPRI, r3
 8013c2a:	f3bf 8f6f 	isb	sy
 8013c2e:	f3bf 8f4f 	dsb	sy
 8013c32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013c34:	bf00      	nop
 8013c36:	e7fe      	b.n	8013c36 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013c38:	f000 fb36 	bl	80142a8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8013c40:	f3ef 8211 	mrs	r2, BASEPRI
 8013c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c48:	f383 8811 	msr	BASEPRI, r3
 8013c4c:	f3bf 8f6f 	isb	sy
 8013c50:	f3bf 8f4f 	dsb	sy
 8013c54:	623a      	str	r2, [r7, #32]
 8013c56:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8013c58:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8013c5c:	683b      	ldr	r3, [r7, #0]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d003      	beq.n	8013c6a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8013c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013c66:	683b      	ldr	r3, [r7, #0]
 8013c68:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8013c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013c70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8013c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c76:	2202      	movs	r2, #2
 8013c78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8013c7c:	79fb      	ldrb	r3, [r7, #7]
 8013c7e:	2b04      	cmp	r3, #4
 8013c80:	d828      	bhi.n	8013cd4 <xTaskGenericNotifyFromISR+0xcc>
 8013c82:	a201      	add	r2, pc, #4	; (adr r2, 8013c88 <xTaskGenericNotifyFromISR+0x80>)
 8013c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c88:	08013cf5 	.word	0x08013cf5
 8013c8c:	08013c9d 	.word	0x08013c9d
 8013c90:	08013cab 	.word	0x08013cab
 8013c94:	08013cb7 	.word	0x08013cb7
 8013c98:	08013cbf 	.word	0x08013cbf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8013c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013ca0:	68bb      	ldr	r3, [r7, #8]
 8013ca2:	431a      	orrs	r2, r3
 8013ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ca6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013ca8:	e027      	b.n	8013cfa <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8013caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013cae:	1c5a      	adds	r2, r3, #1
 8013cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cb2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013cb4:	e021      	b.n	8013cfa <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8013cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cb8:	68ba      	ldr	r2, [r7, #8]
 8013cba:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013cbc:	e01d      	b.n	8013cfa <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8013cbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013cc2:	2b02      	cmp	r3, #2
 8013cc4:	d003      	beq.n	8013cce <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8013cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cc8:	68ba      	ldr	r2, [r7, #8]
 8013cca:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8013ccc:	e015      	b.n	8013cfa <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8013cce:	2300      	movs	r3, #0
 8013cd0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8013cd2:	e012      	b.n	8013cfa <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8013cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cdc:	d00c      	beq.n	8013cf8 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8013cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ce2:	f383 8811 	msr	BASEPRI, r3
 8013ce6:	f3bf 8f6f 	isb	sy
 8013cea:	f3bf 8f4f 	dsb	sy
 8013cee:	61bb      	str	r3, [r7, #24]
}
 8013cf0:	bf00      	nop
 8013cf2:	e7fe      	b.n	8013cf2 <xTaskGenericNotifyFromISR+0xea>
					break;
 8013cf4:	bf00      	nop
 8013cf6:	e000      	b.n	8013cfa <xTaskGenericNotifyFromISR+0xf2>
					break;
 8013cf8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8013cfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013cfe:	2b01      	cmp	r3, #1
 8013d00:	d145      	bne.n	8013d8e <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8013d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d00a      	beq.n	8013d20 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8013d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d0e:	f383 8811 	msr	BASEPRI, r3
 8013d12:	f3bf 8f6f 	isb	sy
 8013d16:	f3bf 8f4f 	dsb	sy
 8013d1a:	617b      	str	r3, [r7, #20]
}
 8013d1c:	bf00      	nop
 8013d1e:	e7fe      	b.n	8013d1e <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013d20:	4b20      	ldr	r3, [pc, #128]	; (8013da4 <xTaskGenericNotifyFromISR+0x19c>)
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d11c      	bne.n	8013d62 <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d2a:	3304      	adds	r3, #4
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	f7fe fa34 	bl	801219a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d36:	2201      	movs	r2, #1
 8013d38:	409a      	lsls	r2, r3
 8013d3a:	4b1b      	ldr	r3, [pc, #108]	; (8013da8 <xTaskGenericNotifyFromISR+0x1a0>)
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	4313      	orrs	r3, r2
 8013d40:	4a19      	ldr	r2, [pc, #100]	; (8013da8 <xTaskGenericNotifyFromISR+0x1a0>)
 8013d42:	6013      	str	r3, [r2, #0]
 8013d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d48:	4613      	mov	r3, r2
 8013d4a:	009b      	lsls	r3, r3, #2
 8013d4c:	4413      	add	r3, r2
 8013d4e:	009b      	lsls	r3, r3, #2
 8013d50:	4a16      	ldr	r2, [pc, #88]	; (8013dac <xTaskGenericNotifyFromISR+0x1a4>)
 8013d52:	441a      	add	r2, r3
 8013d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d56:	3304      	adds	r3, #4
 8013d58:	4619      	mov	r1, r3
 8013d5a:	4610      	mov	r0, r2
 8013d5c:	f7fe f9c0 	bl	80120e0 <vListInsertEnd>
 8013d60:	e005      	b.n	8013d6e <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8013d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d64:	3318      	adds	r3, #24
 8013d66:	4619      	mov	r1, r3
 8013d68:	4811      	ldr	r0, [pc, #68]	; (8013db0 <xTaskGenericNotifyFromISR+0x1a8>)
 8013d6a:	f7fe f9b9 	bl	80120e0 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d72:	4b10      	ldr	r3, [pc, #64]	; (8013db4 <xTaskGenericNotifyFromISR+0x1ac>)
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d78:	429a      	cmp	r2, r3
 8013d7a:	d908      	bls.n	8013d8e <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8013d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d002      	beq.n	8013d88 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8013d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013d84:	2201      	movs	r2, #1
 8013d86:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8013d88:	4b0b      	ldr	r3, [pc, #44]	; (8013db8 <xTaskGenericNotifyFromISR+0x1b0>)
 8013d8a:	2201      	movs	r2, #1
 8013d8c:	601a      	str	r2, [r3, #0]
 8013d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d90:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013d92:	693b      	ldr	r3, [r7, #16]
 8013d94:	f383 8811 	msr	BASEPRI, r3
}
 8013d98:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8013d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	3738      	adds	r7, #56	; 0x38
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}
 8013da4:	20004998 	.word	0x20004998
 8013da8:	20004978 	.word	0x20004978
 8013dac:	20004874 	.word	0x20004874
 8013db0:	20004930 	.word	0x20004930
 8013db4:	20004870 	.word	0x20004870
 8013db8:	20004984 	.word	0x20004984

08013dbc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b084      	sub	sp, #16
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
 8013dc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013dc6:	4b29      	ldr	r3, [pc, #164]	; (8013e6c <prvAddCurrentTaskToDelayedList+0xb0>)
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013dcc:	4b28      	ldr	r3, [pc, #160]	; (8013e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	3304      	adds	r3, #4
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f7fe f9e1 	bl	801219a <uxListRemove>
 8013dd8:	4603      	mov	r3, r0
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d10b      	bne.n	8013df6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013dde:	4b24      	ldr	r3, [pc, #144]	; (8013e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013de4:	2201      	movs	r2, #1
 8013de6:	fa02 f303 	lsl.w	r3, r2, r3
 8013dea:	43da      	mvns	r2, r3
 8013dec:	4b21      	ldr	r3, [pc, #132]	; (8013e74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	4013      	ands	r3, r2
 8013df2:	4a20      	ldr	r2, [pc, #128]	; (8013e74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013df4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dfc:	d10a      	bne.n	8013e14 <prvAddCurrentTaskToDelayedList+0x58>
 8013dfe:	683b      	ldr	r3, [r7, #0]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d007      	beq.n	8013e14 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013e04:	4b1a      	ldr	r3, [pc, #104]	; (8013e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	3304      	adds	r3, #4
 8013e0a:	4619      	mov	r1, r3
 8013e0c:	481a      	ldr	r0, [pc, #104]	; (8013e78 <prvAddCurrentTaskToDelayedList+0xbc>)
 8013e0e:	f7fe f967 	bl	80120e0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013e12:	e026      	b.n	8013e62 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013e14:	68fa      	ldr	r2, [r7, #12]
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	4413      	add	r3, r2
 8013e1a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013e1c:	4b14      	ldr	r3, [pc, #80]	; (8013e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	68ba      	ldr	r2, [r7, #8]
 8013e22:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013e24:	68ba      	ldr	r2, [r7, #8]
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	429a      	cmp	r2, r3
 8013e2a:	d209      	bcs.n	8013e40 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013e2c:	4b13      	ldr	r3, [pc, #76]	; (8013e7c <prvAddCurrentTaskToDelayedList+0xc0>)
 8013e2e:	681a      	ldr	r2, [r3, #0]
 8013e30:	4b0f      	ldr	r3, [pc, #60]	; (8013e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	3304      	adds	r3, #4
 8013e36:	4619      	mov	r1, r3
 8013e38:	4610      	mov	r0, r2
 8013e3a:	f7fe f975 	bl	8012128 <vListInsert>
}
 8013e3e:	e010      	b.n	8013e62 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013e40:	4b0f      	ldr	r3, [pc, #60]	; (8013e80 <prvAddCurrentTaskToDelayedList+0xc4>)
 8013e42:	681a      	ldr	r2, [r3, #0]
 8013e44:	4b0a      	ldr	r3, [pc, #40]	; (8013e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	3304      	adds	r3, #4
 8013e4a:	4619      	mov	r1, r3
 8013e4c:	4610      	mov	r0, r2
 8013e4e:	f7fe f96b 	bl	8012128 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013e52:	4b0c      	ldr	r3, [pc, #48]	; (8013e84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	68ba      	ldr	r2, [r7, #8]
 8013e58:	429a      	cmp	r2, r3
 8013e5a:	d202      	bcs.n	8013e62 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013e5c:	4a09      	ldr	r2, [pc, #36]	; (8013e84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013e5e:	68bb      	ldr	r3, [r7, #8]
 8013e60:	6013      	str	r3, [r2, #0]
}
 8013e62:	bf00      	nop
 8013e64:	3710      	adds	r7, #16
 8013e66:	46bd      	mov	sp, r7
 8013e68:	bd80      	pop	{r7, pc}
 8013e6a:	bf00      	nop
 8013e6c:	20004974 	.word	0x20004974
 8013e70:	20004870 	.word	0x20004870
 8013e74:	20004978 	.word	0x20004978
 8013e78:	2000495c 	.word	0x2000495c
 8013e7c:	2000492c 	.word	0x2000492c
 8013e80:	20004928 	.word	0x20004928
 8013e84:	20004990 	.word	0x20004990

08013e88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013e88:	b480      	push	{r7}
 8013e8a:	b085      	sub	sp, #20
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	60f8      	str	r0, [r7, #12]
 8013e90:	60b9      	str	r1, [r7, #8]
 8013e92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	3b04      	subs	r3, #4
 8013e98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	3b04      	subs	r3, #4
 8013ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	f023 0201 	bic.w	r2, r3, #1
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	3b04      	subs	r3, #4
 8013eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013eb8:	4a0c      	ldr	r2, [pc, #48]	; (8013eec <pxPortInitialiseStack+0x64>)
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	3b14      	subs	r3, #20
 8013ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013ec4:	687a      	ldr	r2, [r7, #4]
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	3b04      	subs	r3, #4
 8013ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	f06f 0202 	mvn.w	r2, #2
 8013ed6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	3b20      	subs	r3, #32
 8013edc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013ede:	68fb      	ldr	r3, [r7, #12]
}
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	3714      	adds	r7, #20
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eea:	4770      	bx	lr
 8013eec:	08013ef1 	.word	0x08013ef1

08013ef0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013ef0:	b480      	push	{r7}
 8013ef2:	b085      	sub	sp, #20
 8013ef4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013efa:	4b12      	ldr	r3, [pc, #72]	; (8013f44 <prvTaskExitError+0x54>)
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f02:	d00a      	beq.n	8013f1a <prvTaskExitError+0x2a>
	__asm volatile
 8013f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f08:	f383 8811 	msr	BASEPRI, r3
 8013f0c:	f3bf 8f6f 	isb	sy
 8013f10:	f3bf 8f4f 	dsb	sy
 8013f14:	60fb      	str	r3, [r7, #12]
}
 8013f16:	bf00      	nop
 8013f18:	e7fe      	b.n	8013f18 <prvTaskExitError+0x28>
	__asm volatile
 8013f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f1e:	f383 8811 	msr	BASEPRI, r3
 8013f22:	f3bf 8f6f 	isb	sy
 8013f26:	f3bf 8f4f 	dsb	sy
 8013f2a:	60bb      	str	r3, [r7, #8]
}
 8013f2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013f2e:	bf00      	nop
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d0fc      	beq.n	8013f30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013f36:	bf00      	nop
 8013f38:	bf00      	nop
 8013f3a:	3714      	adds	r7, #20
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f42:	4770      	bx	lr
 8013f44:	200041a8 	.word	0x200041a8
	...

08013f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013f50:	4b07      	ldr	r3, [pc, #28]	; (8013f70 <pxCurrentTCBConst2>)
 8013f52:	6819      	ldr	r1, [r3, #0]
 8013f54:	6808      	ldr	r0, [r1, #0]
 8013f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f5a:	f380 8809 	msr	PSP, r0
 8013f5e:	f3bf 8f6f 	isb	sy
 8013f62:	f04f 0000 	mov.w	r0, #0
 8013f66:	f380 8811 	msr	BASEPRI, r0
 8013f6a:	4770      	bx	lr
 8013f6c:	f3af 8000 	nop.w

08013f70 <pxCurrentTCBConst2>:
 8013f70:	20004870 	.word	0x20004870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013f74:	bf00      	nop
 8013f76:	bf00      	nop

08013f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013f78:	4808      	ldr	r0, [pc, #32]	; (8013f9c <prvPortStartFirstTask+0x24>)
 8013f7a:	6800      	ldr	r0, [r0, #0]
 8013f7c:	6800      	ldr	r0, [r0, #0]
 8013f7e:	f380 8808 	msr	MSP, r0
 8013f82:	f04f 0000 	mov.w	r0, #0
 8013f86:	f380 8814 	msr	CONTROL, r0
 8013f8a:	b662      	cpsie	i
 8013f8c:	b661      	cpsie	f
 8013f8e:	f3bf 8f4f 	dsb	sy
 8013f92:	f3bf 8f6f 	isb	sy
 8013f96:	df00      	svc	0
 8013f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013f9a:	bf00      	nop
 8013f9c:	e000ed08 	.word	0xe000ed08

08013fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b086      	sub	sp, #24
 8013fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013fa6:	4b46      	ldr	r3, [pc, #280]	; (80140c0 <xPortStartScheduler+0x120>)
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	4a46      	ldr	r2, [pc, #280]	; (80140c4 <xPortStartScheduler+0x124>)
 8013fac:	4293      	cmp	r3, r2
 8013fae:	d10a      	bne.n	8013fc6 <xPortStartScheduler+0x26>
	__asm volatile
 8013fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fb4:	f383 8811 	msr	BASEPRI, r3
 8013fb8:	f3bf 8f6f 	isb	sy
 8013fbc:	f3bf 8f4f 	dsb	sy
 8013fc0:	613b      	str	r3, [r7, #16]
}
 8013fc2:	bf00      	nop
 8013fc4:	e7fe      	b.n	8013fc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013fc6:	4b3e      	ldr	r3, [pc, #248]	; (80140c0 <xPortStartScheduler+0x120>)
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	4a3f      	ldr	r2, [pc, #252]	; (80140c8 <xPortStartScheduler+0x128>)
 8013fcc:	4293      	cmp	r3, r2
 8013fce:	d10a      	bne.n	8013fe6 <xPortStartScheduler+0x46>
	__asm volatile
 8013fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fd4:	f383 8811 	msr	BASEPRI, r3
 8013fd8:	f3bf 8f6f 	isb	sy
 8013fdc:	f3bf 8f4f 	dsb	sy
 8013fe0:	60fb      	str	r3, [r7, #12]
}
 8013fe2:	bf00      	nop
 8013fe4:	e7fe      	b.n	8013fe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013fe6:	4b39      	ldr	r3, [pc, #228]	; (80140cc <xPortStartScheduler+0x12c>)
 8013fe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013fea:	697b      	ldr	r3, [r7, #20]
 8013fec:	781b      	ldrb	r3, [r3, #0]
 8013fee:	b2db      	uxtb	r3, r3
 8013ff0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013ff2:	697b      	ldr	r3, [r7, #20]
 8013ff4:	22ff      	movs	r2, #255	; 0xff
 8013ff6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013ff8:	697b      	ldr	r3, [r7, #20]
 8013ffa:	781b      	ldrb	r3, [r3, #0]
 8013ffc:	b2db      	uxtb	r3, r3
 8013ffe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014000:	78fb      	ldrb	r3, [r7, #3]
 8014002:	b2db      	uxtb	r3, r3
 8014004:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014008:	b2da      	uxtb	r2, r3
 801400a:	4b31      	ldr	r3, [pc, #196]	; (80140d0 <xPortStartScheduler+0x130>)
 801400c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801400e:	4b31      	ldr	r3, [pc, #196]	; (80140d4 <xPortStartScheduler+0x134>)
 8014010:	2207      	movs	r2, #7
 8014012:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014014:	e009      	b.n	801402a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014016:	4b2f      	ldr	r3, [pc, #188]	; (80140d4 <xPortStartScheduler+0x134>)
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	3b01      	subs	r3, #1
 801401c:	4a2d      	ldr	r2, [pc, #180]	; (80140d4 <xPortStartScheduler+0x134>)
 801401e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014020:	78fb      	ldrb	r3, [r7, #3]
 8014022:	b2db      	uxtb	r3, r3
 8014024:	005b      	lsls	r3, r3, #1
 8014026:	b2db      	uxtb	r3, r3
 8014028:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801402a:	78fb      	ldrb	r3, [r7, #3]
 801402c:	b2db      	uxtb	r3, r3
 801402e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014032:	2b80      	cmp	r3, #128	; 0x80
 8014034:	d0ef      	beq.n	8014016 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014036:	4b27      	ldr	r3, [pc, #156]	; (80140d4 <xPortStartScheduler+0x134>)
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	f1c3 0307 	rsb	r3, r3, #7
 801403e:	2b04      	cmp	r3, #4
 8014040:	d00a      	beq.n	8014058 <xPortStartScheduler+0xb8>
	__asm volatile
 8014042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014046:	f383 8811 	msr	BASEPRI, r3
 801404a:	f3bf 8f6f 	isb	sy
 801404e:	f3bf 8f4f 	dsb	sy
 8014052:	60bb      	str	r3, [r7, #8]
}
 8014054:	bf00      	nop
 8014056:	e7fe      	b.n	8014056 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014058:	4b1e      	ldr	r3, [pc, #120]	; (80140d4 <xPortStartScheduler+0x134>)
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	021b      	lsls	r3, r3, #8
 801405e:	4a1d      	ldr	r2, [pc, #116]	; (80140d4 <xPortStartScheduler+0x134>)
 8014060:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014062:	4b1c      	ldr	r3, [pc, #112]	; (80140d4 <xPortStartScheduler+0x134>)
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801406a:	4a1a      	ldr	r2, [pc, #104]	; (80140d4 <xPortStartScheduler+0x134>)
 801406c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	b2da      	uxtb	r2, r3
 8014072:	697b      	ldr	r3, [r7, #20]
 8014074:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014076:	4b18      	ldr	r3, [pc, #96]	; (80140d8 <xPortStartScheduler+0x138>)
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	4a17      	ldr	r2, [pc, #92]	; (80140d8 <xPortStartScheduler+0x138>)
 801407c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014080:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014082:	4b15      	ldr	r3, [pc, #84]	; (80140d8 <xPortStartScheduler+0x138>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	4a14      	ldr	r2, [pc, #80]	; (80140d8 <xPortStartScheduler+0x138>)
 8014088:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801408c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801408e:	f000 f8dd 	bl	801424c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014092:	4b12      	ldr	r3, [pc, #72]	; (80140dc <xPortStartScheduler+0x13c>)
 8014094:	2200      	movs	r2, #0
 8014096:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014098:	f000 f8fc 	bl	8014294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801409c:	4b10      	ldr	r3, [pc, #64]	; (80140e0 <xPortStartScheduler+0x140>)
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	4a0f      	ldr	r2, [pc, #60]	; (80140e0 <xPortStartScheduler+0x140>)
 80140a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80140a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80140a8:	f7ff ff66 	bl	8013f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80140ac:	f7ff f9bc 	bl	8013428 <vTaskSwitchContext>
	prvTaskExitError();
 80140b0:	f7ff ff1e 	bl	8013ef0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80140b4:	2300      	movs	r3, #0
}
 80140b6:	4618      	mov	r0, r3
 80140b8:	3718      	adds	r7, #24
 80140ba:	46bd      	mov	sp, r7
 80140bc:	bd80      	pop	{r7, pc}
 80140be:	bf00      	nop
 80140c0:	e000ed00 	.word	0xe000ed00
 80140c4:	410fc271 	.word	0x410fc271
 80140c8:	410fc270 	.word	0x410fc270
 80140cc:	e000e400 	.word	0xe000e400
 80140d0:	2000499c 	.word	0x2000499c
 80140d4:	200049a0 	.word	0x200049a0
 80140d8:	e000ed20 	.word	0xe000ed20
 80140dc:	200041a8 	.word	0x200041a8
 80140e0:	e000ef34 	.word	0xe000ef34

080140e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80140e4:	b480      	push	{r7}
 80140e6:	b083      	sub	sp, #12
 80140e8:	af00      	add	r7, sp, #0
	__asm volatile
 80140ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140ee:	f383 8811 	msr	BASEPRI, r3
 80140f2:	f3bf 8f6f 	isb	sy
 80140f6:	f3bf 8f4f 	dsb	sy
 80140fa:	607b      	str	r3, [r7, #4]
}
 80140fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80140fe:	4b0f      	ldr	r3, [pc, #60]	; (801413c <vPortEnterCritical+0x58>)
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	3301      	adds	r3, #1
 8014104:	4a0d      	ldr	r2, [pc, #52]	; (801413c <vPortEnterCritical+0x58>)
 8014106:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014108:	4b0c      	ldr	r3, [pc, #48]	; (801413c <vPortEnterCritical+0x58>)
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	2b01      	cmp	r3, #1
 801410e:	d10f      	bne.n	8014130 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014110:	4b0b      	ldr	r3, [pc, #44]	; (8014140 <vPortEnterCritical+0x5c>)
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	b2db      	uxtb	r3, r3
 8014116:	2b00      	cmp	r3, #0
 8014118:	d00a      	beq.n	8014130 <vPortEnterCritical+0x4c>
	__asm volatile
 801411a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801411e:	f383 8811 	msr	BASEPRI, r3
 8014122:	f3bf 8f6f 	isb	sy
 8014126:	f3bf 8f4f 	dsb	sy
 801412a:	603b      	str	r3, [r7, #0]
}
 801412c:	bf00      	nop
 801412e:	e7fe      	b.n	801412e <vPortEnterCritical+0x4a>
	}
}
 8014130:	bf00      	nop
 8014132:	370c      	adds	r7, #12
 8014134:	46bd      	mov	sp, r7
 8014136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413a:	4770      	bx	lr
 801413c:	200041a8 	.word	0x200041a8
 8014140:	e000ed04 	.word	0xe000ed04

08014144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014144:	b480      	push	{r7}
 8014146:	b083      	sub	sp, #12
 8014148:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801414a:	4b12      	ldr	r3, [pc, #72]	; (8014194 <vPortExitCritical+0x50>)
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d10a      	bne.n	8014168 <vPortExitCritical+0x24>
	__asm volatile
 8014152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014156:	f383 8811 	msr	BASEPRI, r3
 801415a:	f3bf 8f6f 	isb	sy
 801415e:	f3bf 8f4f 	dsb	sy
 8014162:	607b      	str	r3, [r7, #4]
}
 8014164:	bf00      	nop
 8014166:	e7fe      	b.n	8014166 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014168:	4b0a      	ldr	r3, [pc, #40]	; (8014194 <vPortExitCritical+0x50>)
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	3b01      	subs	r3, #1
 801416e:	4a09      	ldr	r2, [pc, #36]	; (8014194 <vPortExitCritical+0x50>)
 8014170:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014172:	4b08      	ldr	r3, [pc, #32]	; (8014194 <vPortExitCritical+0x50>)
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d105      	bne.n	8014186 <vPortExitCritical+0x42>
 801417a:	2300      	movs	r3, #0
 801417c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801417e:	683b      	ldr	r3, [r7, #0]
 8014180:	f383 8811 	msr	BASEPRI, r3
}
 8014184:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014186:	bf00      	nop
 8014188:	370c      	adds	r7, #12
 801418a:	46bd      	mov	sp, r7
 801418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014190:	4770      	bx	lr
 8014192:	bf00      	nop
 8014194:	200041a8 	.word	0x200041a8
	...

080141a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80141a0:	f3ef 8009 	mrs	r0, PSP
 80141a4:	f3bf 8f6f 	isb	sy
 80141a8:	4b15      	ldr	r3, [pc, #84]	; (8014200 <pxCurrentTCBConst>)
 80141aa:	681a      	ldr	r2, [r3, #0]
 80141ac:	f01e 0f10 	tst.w	lr, #16
 80141b0:	bf08      	it	eq
 80141b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80141b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141ba:	6010      	str	r0, [r2, #0]
 80141bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80141c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80141c4:	f380 8811 	msr	BASEPRI, r0
 80141c8:	f3bf 8f4f 	dsb	sy
 80141cc:	f3bf 8f6f 	isb	sy
 80141d0:	f7ff f92a 	bl	8013428 <vTaskSwitchContext>
 80141d4:	f04f 0000 	mov.w	r0, #0
 80141d8:	f380 8811 	msr	BASEPRI, r0
 80141dc:	bc09      	pop	{r0, r3}
 80141de:	6819      	ldr	r1, [r3, #0]
 80141e0:	6808      	ldr	r0, [r1, #0]
 80141e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141e6:	f01e 0f10 	tst.w	lr, #16
 80141ea:	bf08      	it	eq
 80141ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80141f0:	f380 8809 	msr	PSP, r0
 80141f4:	f3bf 8f6f 	isb	sy
 80141f8:	4770      	bx	lr
 80141fa:	bf00      	nop
 80141fc:	f3af 8000 	nop.w

08014200 <pxCurrentTCBConst>:
 8014200:	20004870 	.word	0x20004870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014204:	bf00      	nop
 8014206:	bf00      	nop

08014208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014208:	b580      	push	{r7, lr}
 801420a:	b082      	sub	sp, #8
 801420c:	af00      	add	r7, sp, #0
	__asm volatile
 801420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014212:	f383 8811 	msr	BASEPRI, r3
 8014216:	f3bf 8f6f 	isb	sy
 801421a:	f3bf 8f4f 	dsb	sy
 801421e:	607b      	str	r3, [r7, #4]
}
 8014220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014222:	f7ff f849 	bl	80132b8 <xTaskIncrementTick>
 8014226:	4603      	mov	r3, r0
 8014228:	2b00      	cmp	r3, #0
 801422a:	d003      	beq.n	8014234 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801422c:	4b06      	ldr	r3, [pc, #24]	; (8014248 <SysTick_Handler+0x40>)
 801422e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014232:	601a      	str	r2, [r3, #0]
 8014234:	2300      	movs	r3, #0
 8014236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014238:	683b      	ldr	r3, [r7, #0]
 801423a:	f383 8811 	msr	BASEPRI, r3
}
 801423e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014240:	bf00      	nop
 8014242:	3708      	adds	r7, #8
 8014244:	46bd      	mov	sp, r7
 8014246:	bd80      	pop	{r7, pc}
 8014248:	e000ed04 	.word	0xe000ed04

0801424c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801424c:	b480      	push	{r7}
 801424e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014250:	4b0b      	ldr	r3, [pc, #44]	; (8014280 <vPortSetupTimerInterrupt+0x34>)
 8014252:	2200      	movs	r2, #0
 8014254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014256:	4b0b      	ldr	r3, [pc, #44]	; (8014284 <vPortSetupTimerInterrupt+0x38>)
 8014258:	2200      	movs	r2, #0
 801425a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801425c:	4b0a      	ldr	r3, [pc, #40]	; (8014288 <vPortSetupTimerInterrupt+0x3c>)
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	4a0a      	ldr	r2, [pc, #40]	; (801428c <vPortSetupTimerInterrupt+0x40>)
 8014262:	fba2 2303 	umull	r2, r3, r2, r3
 8014266:	099b      	lsrs	r3, r3, #6
 8014268:	4a09      	ldr	r2, [pc, #36]	; (8014290 <vPortSetupTimerInterrupt+0x44>)
 801426a:	3b01      	subs	r3, #1
 801426c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801426e:	4b04      	ldr	r3, [pc, #16]	; (8014280 <vPortSetupTimerInterrupt+0x34>)
 8014270:	2207      	movs	r2, #7
 8014272:	601a      	str	r2, [r3, #0]
}
 8014274:	bf00      	nop
 8014276:	46bd      	mov	sp, r7
 8014278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427c:	4770      	bx	lr
 801427e:	bf00      	nop
 8014280:	e000e010 	.word	0xe000e010
 8014284:	e000e018 	.word	0xe000e018
 8014288:	2000408c 	.word	0x2000408c
 801428c:	10624dd3 	.word	0x10624dd3
 8014290:	e000e014 	.word	0xe000e014

08014294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014294:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80142a4 <vPortEnableVFP+0x10>
 8014298:	6801      	ldr	r1, [r0, #0]
 801429a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801429e:	6001      	str	r1, [r0, #0]
 80142a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80142a2:	bf00      	nop
 80142a4:	e000ed88 	.word	0xe000ed88

080142a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80142a8:	b480      	push	{r7}
 80142aa:	b085      	sub	sp, #20
 80142ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80142ae:	f3ef 8305 	mrs	r3, IPSR
 80142b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	2b0f      	cmp	r3, #15
 80142b8:	d914      	bls.n	80142e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80142ba:	4a17      	ldr	r2, [pc, #92]	; (8014318 <vPortValidateInterruptPriority+0x70>)
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	4413      	add	r3, r2
 80142c0:	781b      	ldrb	r3, [r3, #0]
 80142c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80142c4:	4b15      	ldr	r3, [pc, #84]	; (801431c <vPortValidateInterruptPriority+0x74>)
 80142c6:	781b      	ldrb	r3, [r3, #0]
 80142c8:	7afa      	ldrb	r2, [r7, #11]
 80142ca:	429a      	cmp	r2, r3
 80142cc:	d20a      	bcs.n	80142e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80142ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142d2:	f383 8811 	msr	BASEPRI, r3
 80142d6:	f3bf 8f6f 	isb	sy
 80142da:	f3bf 8f4f 	dsb	sy
 80142de:	607b      	str	r3, [r7, #4]
}
 80142e0:	bf00      	nop
 80142e2:	e7fe      	b.n	80142e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80142e4:	4b0e      	ldr	r3, [pc, #56]	; (8014320 <vPortValidateInterruptPriority+0x78>)
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80142ec:	4b0d      	ldr	r3, [pc, #52]	; (8014324 <vPortValidateInterruptPriority+0x7c>)
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	429a      	cmp	r2, r3
 80142f2:	d90a      	bls.n	801430a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80142f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142f8:	f383 8811 	msr	BASEPRI, r3
 80142fc:	f3bf 8f6f 	isb	sy
 8014300:	f3bf 8f4f 	dsb	sy
 8014304:	603b      	str	r3, [r7, #0]
}
 8014306:	bf00      	nop
 8014308:	e7fe      	b.n	8014308 <vPortValidateInterruptPriority+0x60>
	}
 801430a:	bf00      	nop
 801430c:	3714      	adds	r7, #20
 801430e:	46bd      	mov	sp, r7
 8014310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014314:	4770      	bx	lr
 8014316:	bf00      	nop
 8014318:	e000e3f0 	.word	0xe000e3f0
 801431c:	2000499c 	.word	0x2000499c
 8014320:	e000ed0c 	.word	0xe000ed0c
 8014324:	200049a0 	.word	0x200049a0

08014328 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014328:	b580      	push	{r7, lr}
 801432a:	b08a      	sub	sp, #40	; 0x28
 801432c:	af00      	add	r7, sp, #0
 801432e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014330:	2300      	movs	r3, #0
 8014332:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014334:	f7fe ff16 	bl	8013164 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014338:	4b58      	ldr	r3, [pc, #352]	; (801449c <pvPortMalloc+0x174>)
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d101      	bne.n	8014344 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014340:	f000 f910 	bl	8014564 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014344:	4b56      	ldr	r3, [pc, #344]	; (80144a0 <pvPortMalloc+0x178>)
 8014346:	681a      	ldr	r2, [r3, #0]
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	4013      	ands	r3, r2
 801434c:	2b00      	cmp	r3, #0
 801434e:	f040 808e 	bne.w	801446e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d01d      	beq.n	8014394 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014358:	2208      	movs	r2, #8
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	4413      	add	r3, r2
 801435e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	f003 0307 	and.w	r3, r3, #7
 8014366:	2b00      	cmp	r3, #0
 8014368:	d014      	beq.n	8014394 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	f023 0307 	bic.w	r3, r3, #7
 8014370:	3308      	adds	r3, #8
 8014372:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	f003 0307 	and.w	r3, r3, #7
 801437a:	2b00      	cmp	r3, #0
 801437c:	d00a      	beq.n	8014394 <pvPortMalloc+0x6c>
	__asm volatile
 801437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014382:	f383 8811 	msr	BASEPRI, r3
 8014386:	f3bf 8f6f 	isb	sy
 801438a:	f3bf 8f4f 	dsb	sy
 801438e:	617b      	str	r3, [r7, #20]
}
 8014390:	bf00      	nop
 8014392:	e7fe      	b.n	8014392 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d069      	beq.n	801446e <pvPortMalloc+0x146>
 801439a:	4b42      	ldr	r3, [pc, #264]	; (80144a4 <pvPortMalloc+0x17c>)
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	687a      	ldr	r2, [r7, #4]
 80143a0:	429a      	cmp	r2, r3
 80143a2:	d864      	bhi.n	801446e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80143a4:	4b40      	ldr	r3, [pc, #256]	; (80144a8 <pvPortMalloc+0x180>)
 80143a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80143a8:	4b3f      	ldr	r3, [pc, #252]	; (80144a8 <pvPortMalloc+0x180>)
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80143ae:	e004      	b.n	80143ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80143b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80143b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80143ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143bc:	685b      	ldr	r3, [r3, #4]
 80143be:	687a      	ldr	r2, [r7, #4]
 80143c0:	429a      	cmp	r2, r3
 80143c2:	d903      	bls.n	80143cc <pvPortMalloc+0xa4>
 80143c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d1f1      	bne.n	80143b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80143cc:	4b33      	ldr	r3, [pc, #204]	; (801449c <pvPortMalloc+0x174>)
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80143d2:	429a      	cmp	r2, r3
 80143d4:	d04b      	beq.n	801446e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80143d6:	6a3b      	ldr	r3, [r7, #32]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	2208      	movs	r2, #8
 80143dc:	4413      	add	r3, r2
 80143de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80143e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143e2:	681a      	ldr	r2, [r3, #0]
 80143e4:	6a3b      	ldr	r3, [r7, #32]
 80143e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80143e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ea:	685a      	ldr	r2, [r3, #4]
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	1ad2      	subs	r2, r2, r3
 80143f0:	2308      	movs	r3, #8
 80143f2:	005b      	lsls	r3, r3, #1
 80143f4:	429a      	cmp	r2, r3
 80143f6:	d91f      	bls.n	8014438 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80143f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	4413      	add	r3, r2
 80143fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014400:	69bb      	ldr	r3, [r7, #24]
 8014402:	f003 0307 	and.w	r3, r3, #7
 8014406:	2b00      	cmp	r3, #0
 8014408:	d00a      	beq.n	8014420 <pvPortMalloc+0xf8>
	__asm volatile
 801440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801440e:	f383 8811 	msr	BASEPRI, r3
 8014412:	f3bf 8f6f 	isb	sy
 8014416:	f3bf 8f4f 	dsb	sy
 801441a:	613b      	str	r3, [r7, #16]
}
 801441c:	bf00      	nop
 801441e:	e7fe      	b.n	801441e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014422:	685a      	ldr	r2, [r3, #4]
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	1ad2      	subs	r2, r2, r3
 8014428:	69bb      	ldr	r3, [r7, #24]
 801442a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801442e:	687a      	ldr	r2, [r7, #4]
 8014430:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014432:	69b8      	ldr	r0, [r7, #24]
 8014434:	f000 f8f8 	bl	8014628 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014438:	4b1a      	ldr	r3, [pc, #104]	; (80144a4 <pvPortMalloc+0x17c>)
 801443a:	681a      	ldr	r2, [r3, #0]
 801443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801443e:	685b      	ldr	r3, [r3, #4]
 8014440:	1ad3      	subs	r3, r2, r3
 8014442:	4a18      	ldr	r2, [pc, #96]	; (80144a4 <pvPortMalloc+0x17c>)
 8014444:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014446:	4b17      	ldr	r3, [pc, #92]	; (80144a4 <pvPortMalloc+0x17c>)
 8014448:	681a      	ldr	r2, [r3, #0]
 801444a:	4b18      	ldr	r3, [pc, #96]	; (80144ac <pvPortMalloc+0x184>)
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	429a      	cmp	r2, r3
 8014450:	d203      	bcs.n	801445a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014452:	4b14      	ldr	r3, [pc, #80]	; (80144a4 <pvPortMalloc+0x17c>)
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	4a15      	ldr	r2, [pc, #84]	; (80144ac <pvPortMalloc+0x184>)
 8014458:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801445c:	685a      	ldr	r2, [r3, #4]
 801445e:	4b10      	ldr	r3, [pc, #64]	; (80144a0 <pvPortMalloc+0x178>)
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	431a      	orrs	r2, r3
 8014464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014466:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801446a:	2200      	movs	r2, #0
 801446c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801446e:	f7fe fe87 	bl	8013180 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014472:	69fb      	ldr	r3, [r7, #28]
 8014474:	f003 0307 	and.w	r3, r3, #7
 8014478:	2b00      	cmp	r3, #0
 801447a:	d00a      	beq.n	8014492 <pvPortMalloc+0x16a>
	__asm volatile
 801447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014480:	f383 8811 	msr	BASEPRI, r3
 8014484:	f3bf 8f6f 	isb	sy
 8014488:	f3bf 8f4f 	dsb	sy
 801448c:	60fb      	str	r3, [r7, #12]
}
 801448e:	bf00      	nop
 8014490:	e7fe      	b.n	8014490 <pvPortMalloc+0x168>
	return pvReturn;
 8014492:	69fb      	ldr	r3, [r7, #28]
}
 8014494:	4618      	mov	r0, r3
 8014496:	3728      	adds	r7, #40	; 0x28
 8014498:	46bd      	mov	sp, r7
 801449a:	bd80      	pop	{r7, pc}
 801449c:	200085ac 	.word	0x200085ac
 80144a0:	200085b8 	.word	0x200085b8
 80144a4:	200085b0 	.word	0x200085b0
 80144a8:	200085a4 	.word	0x200085a4
 80144ac:	200085b4 	.word	0x200085b4

080144b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b086      	sub	sp, #24
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d048      	beq.n	8014554 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80144c2:	2308      	movs	r3, #8
 80144c4:	425b      	negs	r3, r3
 80144c6:	697a      	ldr	r2, [r7, #20]
 80144c8:	4413      	add	r3, r2
 80144ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80144cc:	697b      	ldr	r3, [r7, #20]
 80144ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80144d0:	693b      	ldr	r3, [r7, #16]
 80144d2:	685a      	ldr	r2, [r3, #4]
 80144d4:	4b21      	ldr	r3, [pc, #132]	; (801455c <vPortFree+0xac>)
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	4013      	ands	r3, r2
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d10a      	bne.n	80144f4 <vPortFree+0x44>
	__asm volatile
 80144de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144e2:	f383 8811 	msr	BASEPRI, r3
 80144e6:	f3bf 8f6f 	isb	sy
 80144ea:	f3bf 8f4f 	dsb	sy
 80144ee:	60fb      	str	r3, [r7, #12]
}
 80144f0:	bf00      	nop
 80144f2:	e7fe      	b.n	80144f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80144f4:	693b      	ldr	r3, [r7, #16]
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d00a      	beq.n	8014512 <vPortFree+0x62>
	__asm volatile
 80144fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014500:	f383 8811 	msr	BASEPRI, r3
 8014504:	f3bf 8f6f 	isb	sy
 8014508:	f3bf 8f4f 	dsb	sy
 801450c:	60bb      	str	r3, [r7, #8]
}
 801450e:	bf00      	nop
 8014510:	e7fe      	b.n	8014510 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014512:	693b      	ldr	r3, [r7, #16]
 8014514:	685a      	ldr	r2, [r3, #4]
 8014516:	4b11      	ldr	r3, [pc, #68]	; (801455c <vPortFree+0xac>)
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	4013      	ands	r3, r2
 801451c:	2b00      	cmp	r3, #0
 801451e:	d019      	beq.n	8014554 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014520:	693b      	ldr	r3, [r7, #16]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d115      	bne.n	8014554 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014528:	693b      	ldr	r3, [r7, #16]
 801452a:	685a      	ldr	r2, [r3, #4]
 801452c:	4b0b      	ldr	r3, [pc, #44]	; (801455c <vPortFree+0xac>)
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	43db      	mvns	r3, r3
 8014532:	401a      	ands	r2, r3
 8014534:	693b      	ldr	r3, [r7, #16]
 8014536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014538:	f7fe fe14 	bl	8013164 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801453c:	693b      	ldr	r3, [r7, #16]
 801453e:	685a      	ldr	r2, [r3, #4]
 8014540:	4b07      	ldr	r3, [pc, #28]	; (8014560 <vPortFree+0xb0>)
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	4413      	add	r3, r2
 8014546:	4a06      	ldr	r2, [pc, #24]	; (8014560 <vPortFree+0xb0>)
 8014548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801454a:	6938      	ldr	r0, [r7, #16]
 801454c:	f000 f86c 	bl	8014628 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014550:	f7fe fe16 	bl	8013180 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014554:	bf00      	nop
 8014556:	3718      	adds	r7, #24
 8014558:	46bd      	mov	sp, r7
 801455a:	bd80      	pop	{r7, pc}
 801455c:	200085b8 	.word	0x200085b8
 8014560:	200085b0 	.word	0x200085b0

08014564 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014564:	b480      	push	{r7}
 8014566:	b085      	sub	sp, #20
 8014568:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801456a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801456e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014570:	4b27      	ldr	r3, [pc, #156]	; (8014610 <prvHeapInit+0xac>)
 8014572:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	f003 0307 	and.w	r3, r3, #7
 801457a:	2b00      	cmp	r3, #0
 801457c:	d00c      	beq.n	8014598 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	3307      	adds	r3, #7
 8014582:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	f023 0307 	bic.w	r3, r3, #7
 801458a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801458c:	68ba      	ldr	r2, [r7, #8]
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	1ad3      	subs	r3, r2, r3
 8014592:	4a1f      	ldr	r2, [pc, #124]	; (8014610 <prvHeapInit+0xac>)
 8014594:	4413      	add	r3, r2
 8014596:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801459c:	4a1d      	ldr	r2, [pc, #116]	; (8014614 <prvHeapInit+0xb0>)
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80145a2:	4b1c      	ldr	r3, [pc, #112]	; (8014614 <prvHeapInit+0xb0>)
 80145a4:	2200      	movs	r2, #0
 80145a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	68ba      	ldr	r2, [r7, #8]
 80145ac:	4413      	add	r3, r2
 80145ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80145b0:	2208      	movs	r2, #8
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	1a9b      	subs	r3, r3, r2
 80145b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	f023 0307 	bic.w	r3, r3, #7
 80145be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	4a15      	ldr	r2, [pc, #84]	; (8014618 <prvHeapInit+0xb4>)
 80145c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80145c6:	4b14      	ldr	r3, [pc, #80]	; (8014618 <prvHeapInit+0xb4>)
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	2200      	movs	r2, #0
 80145cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80145ce:	4b12      	ldr	r3, [pc, #72]	; (8014618 <prvHeapInit+0xb4>)
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	2200      	movs	r2, #0
 80145d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80145da:	683b      	ldr	r3, [r7, #0]
 80145dc:	68fa      	ldr	r2, [r7, #12]
 80145de:	1ad2      	subs	r2, r2, r3
 80145e0:	683b      	ldr	r3, [r7, #0]
 80145e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80145e4:	4b0c      	ldr	r3, [pc, #48]	; (8014618 <prvHeapInit+0xb4>)
 80145e6:	681a      	ldr	r2, [r3, #0]
 80145e8:	683b      	ldr	r3, [r7, #0]
 80145ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	685b      	ldr	r3, [r3, #4]
 80145f0:	4a0a      	ldr	r2, [pc, #40]	; (801461c <prvHeapInit+0xb8>)
 80145f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80145f4:	683b      	ldr	r3, [r7, #0]
 80145f6:	685b      	ldr	r3, [r3, #4]
 80145f8:	4a09      	ldr	r2, [pc, #36]	; (8014620 <prvHeapInit+0xbc>)
 80145fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80145fc:	4b09      	ldr	r3, [pc, #36]	; (8014624 <prvHeapInit+0xc0>)
 80145fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014602:	601a      	str	r2, [r3, #0]
}
 8014604:	bf00      	nop
 8014606:	3714      	adds	r7, #20
 8014608:	46bd      	mov	sp, r7
 801460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801460e:	4770      	bx	lr
 8014610:	200049a4 	.word	0x200049a4
 8014614:	200085a4 	.word	0x200085a4
 8014618:	200085ac 	.word	0x200085ac
 801461c:	200085b4 	.word	0x200085b4
 8014620:	200085b0 	.word	0x200085b0
 8014624:	200085b8 	.word	0x200085b8

08014628 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014628:	b480      	push	{r7}
 801462a:	b085      	sub	sp, #20
 801462c:	af00      	add	r7, sp, #0
 801462e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014630:	4b28      	ldr	r3, [pc, #160]	; (80146d4 <prvInsertBlockIntoFreeList+0xac>)
 8014632:	60fb      	str	r3, [r7, #12]
 8014634:	e002      	b.n	801463c <prvInsertBlockIntoFreeList+0x14>
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	60fb      	str	r3, [r7, #12]
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	687a      	ldr	r2, [r7, #4]
 8014642:	429a      	cmp	r2, r3
 8014644:	d8f7      	bhi.n	8014636 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	685b      	ldr	r3, [r3, #4]
 801464e:	68ba      	ldr	r2, [r7, #8]
 8014650:	4413      	add	r3, r2
 8014652:	687a      	ldr	r2, [r7, #4]
 8014654:	429a      	cmp	r2, r3
 8014656:	d108      	bne.n	801466a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	685a      	ldr	r2, [r3, #4]
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	685b      	ldr	r3, [r3, #4]
 8014660:	441a      	add	r2, r3
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	685b      	ldr	r3, [r3, #4]
 8014672:	68ba      	ldr	r2, [r7, #8]
 8014674:	441a      	add	r2, r3
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	429a      	cmp	r2, r3
 801467c:	d118      	bne.n	80146b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	681a      	ldr	r2, [r3, #0]
 8014682:	4b15      	ldr	r3, [pc, #84]	; (80146d8 <prvInsertBlockIntoFreeList+0xb0>)
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	429a      	cmp	r2, r3
 8014688:	d00d      	beq.n	80146a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	685a      	ldr	r2, [r3, #4]
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	685b      	ldr	r3, [r3, #4]
 8014694:	441a      	add	r2, r3
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	681a      	ldr	r2, [r3, #0]
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	601a      	str	r2, [r3, #0]
 80146a4:	e008      	b.n	80146b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80146a6:	4b0c      	ldr	r3, [pc, #48]	; (80146d8 <prvInsertBlockIntoFreeList+0xb0>)
 80146a8:	681a      	ldr	r2, [r3, #0]
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	601a      	str	r2, [r3, #0]
 80146ae:	e003      	b.n	80146b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	681a      	ldr	r2, [r3, #0]
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80146b8:	68fa      	ldr	r2, [r7, #12]
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	429a      	cmp	r2, r3
 80146be:	d002      	beq.n	80146c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	687a      	ldr	r2, [r7, #4]
 80146c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80146c6:	bf00      	nop
 80146c8:	3714      	adds	r7, #20
 80146ca:	46bd      	mov	sp, r7
 80146cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d0:	4770      	bx	lr
 80146d2:	bf00      	nop
 80146d4:	200085a4 	.word	0x200085a4
 80146d8:	200085ac 	.word	0x200085ac

080146dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80146e0:	2200      	movs	r2, #0
 80146e2:	4912      	ldr	r1, [pc, #72]	; (801472c <MX_USB_DEVICE_Init+0x50>)
 80146e4:	4812      	ldr	r0, [pc, #72]	; (8014730 <MX_USB_DEVICE_Init+0x54>)
 80146e6:	f7fc f84f 	bl	8010788 <USBD_Init>
 80146ea:	4603      	mov	r3, r0
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d001      	beq.n	80146f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80146f0:	f7f0 ffdc 	bl	80056ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80146f4:	490f      	ldr	r1, [pc, #60]	; (8014734 <MX_USB_DEVICE_Init+0x58>)
 80146f6:	480e      	ldr	r0, [pc, #56]	; (8014730 <MX_USB_DEVICE_Init+0x54>)
 80146f8:	f7fc f87c 	bl	80107f4 <USBD_RegisterClass>
 80146fc:	4603      	mov	r3, r0
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d001      	beq.n	8014706 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014702:	f7f0 ffd3 	bl	80056ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8014706:	490c      	ldr	r1, [pc, #48]	; (8014738 <MX_USB_DEVICE_Init+0x5c>)
 8014708:	4809      	ldr	r0, [pc, #36]	; (8014730 <MX_USB_DEVICE_Init+0x54>)
 801470a:	f7fb ffa1 	bl	8010650 <USBD_CDC_RegisterInterface>
 801470e:	4603      	mov	r3, r0
 8014710:	2b00      	cmp	r3, #0
 8014712:	d001      	beq.n	8014718 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014714:	f7f0 ffca 	bl	80056ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014718:	4805      	ldr	r0, [pc, #20]	; (8014730 <MX_USB_DEVICE_Init+0x54>)
 801471a:	f7fc f88c 	bl	8010836 <USBD_Start>
 801471e:	4603      	mov	r3, r0
 8014720:	2b00      	cmp	r3, #0
 8014722:	d001      	beq.n	8014728 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014724:	f7f0 ffc2 	bl	80056ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014728:	bf00      	nop
 801472a:	bd80      	pop	{r7, pc}
 801472c:	200041c0 	.word	0x200041c0
 8014730:	20010ddc 	.word	0x20010ddc
 8014734:	200040a4 	.word	0x200040a4
 8014738:	200041ac 	.word	0x200041ac

0801473c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014740:	2200      	movs	r2, #0
 8014742:	4905      	ldr	r1, [pc, #20]	; (8014758 <CDC_Init_FS+0x1c>)
 8014744:	4805      	ldr	r0, [pc, #20]	; (801475c <CDC_Init_FS+0x20>)
 8014746:	f7fb ff98 	bl	801067a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801474a:	4905      	ldr	r1, [pc, #20]	; (8014760 <CDC_Init_FS+0x24>)
 801474c:	4803      	ldr	r0, [pc, #12]	; (801475c <CDC_Init_FS+0x20>)
 801474e:	f7fb ffad 	bl	80106ac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014752:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014754:	4618      	mov	r0, r3
 8014756:	bd80      	pop	{r7, pc}
 8014758:	200112ac 	.word	0x200112ac
 801475c:	20010ddc 	.word	0x20010ddc
 8014760:	200110ac 	.word	0x200110ac

08014764 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014764:	b480      	push	{r7}
 8014766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014768:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801476a:	4618      	mov	r0, r3
 801476c:	46bd      	mov	sp, r7
 801476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014772:	4770      	bx	lr

08014774 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014774:	b480      	push	{r7}
 8014776:	b083      	sub	sp, #12
 8014778:	af00      	add	r7, sp, #0
 801477a:	4603      	mov	r3, r0
 801477c:	6039      	str	r1, [r7, #0]
 801477e:	71fb      	strb	r3, [r7, #7]
 8014780:	4613      	mov	r3, r2
 8014782:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014784:	79fb      	ldrb	r3, [r7, #7]
 8014786:	2b23      	cmp	r3, #35	; 0x23
 8014788:	f200 808c 	bhi.w	80148a4 <CDC_Control_FS+0x130>
 801478c:	a201      	add	r2, pc, #4	; (adr r2, 8014794 <CDC_Control_FS+0x20>)
 801478e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014792:	bf00      	nop
 8014794:	080148a5 	.word	0x080148a5
 8014798:	080148a5 	.word	0x080148a5
 801479c:	080148a5 	.word	0x080148a5
 80147a0:	080148a5 	.word	0x080148a5
 80147a4:	080148a5 	.word	0x080148a5
 80147a8:	080148a5 	.word	0x080148a5
 80147ac:	080148a5 	.word	0x080148a5
 80147b0:	080148a5 	.word	0x080148a5
 80147b4:	080148a5 	.word	0x080148a5
 80147b8:	080148a5 	.word	0x080148a5
 80147bc:	080148a5 	.word	0x080148a5
 80147c0:	080148a5 	.word	0x080148a5
 80147c4:	080148a5 	.word	0x080148a5
 80147c8:	080148a5 	.word	0x080148a5
 80147cc:	080148a5 	.word	0x080148a5
 80147d0:	080148a5 	.word	0x080148a5
 80147d4:	080148a5 	.word	0x080148a5
 80147d8:	080148a5 	.word	0x080148a5
 80147dc:	080148a5 	.word	0x080148a5
 80147e0:	080148a5 	.word	0x080148a5
 80147e4:	080148a5 	.word	0x080148a5
 80147e8:	080148a5 	.word	0x080148a5
 80147ec:	080148a5 	.word	0x080148a5
 80147f0:	080148a5 	.word	0x080148a5
 80147f4:	080148a5 	.word	0x080148a5
 80147f8:	080148a5 	.word	0x080148a5
 80147fc:	080148a5 	.word	0x080148a5
 8014800:	080148a5 	.word	0x080148a5
 8014804:	080148a5 	.word	0x080148a5
 8014808:	080148a5 	.word	0x080148a5
 801480c:	080148a5 	.word	0x080148a5
 8014810:	080148a5 	.word	0x080148a5
 8014814:	08014825 	.word	0x08014825
 8014818:	0801485f 	.word	0x0801485f
 801481c:	080148a5 	.word	0x080148a5
 8014820:	080148a5 	.word	0x080148a5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 8014824:	683b      	ldr	r3, [r7, #0]
 8014826:	781a      	ldrb	r2, [r3, #0]
 8014828:	4b22      	ldr	r3, [pc, #136]	; (80148b4 <CDC_Control_FS+0x140>)
 801482a:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 801482c:	683b      	ldr	r3, [r7, #0]
 801482e:	785a      	ldrb	r2, [r3, #1]
 8014830:	4b20      	ldr	r3, [pc, #128]	; (80148b4 <CDC_Control_FS+0x140>)
 8014832:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	789a      	ldrb	r2, [r3, #2]
 8014838:	4b1e      	ldr	r3, [pc, #120]	; (80148b4 <CDC_Control_FS+0x140>)
 801483a:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 801483c:	683b      	ldr	r3, [r7, #0]
 801483e:	78da      	ldrb	r2, [r3, #3]
 8014840:	4b1c      	ldr	r3, [pc, #112]	; (80148b4 <CDC_Control_FS+0x140>)
 8014842:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 8014844:	683b      	ldr	r3, [r7, #0]
 8014846:	791a      	ldrb	r2, [r3, #4]
 8014848:	4b1a      	ldr	r3, [pc, #104]	; (80148b4 <CDC_Control_FS+0x140>)
 801484a:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 801484c:	683b      	ldr	r3, [r7, #0]
 801484e:	795a      	ldrb	r2, [r3, #5]
 8014850:	4b18      	ldr	r3, [pc, #96]	; (80148b4 <CDC_Control_FS+0x140>)
 8014852:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 8014854:	683b      	ldr	r3, [r7, #0]
 8014856:	799a      	ldrb	r2, [r3, #6]
 8014858:	4b16      	ldr	r3, [pc, #88]	; (80148b4 <CDC_Control_FS+0x140>)
 801485a:	719a      	strb	r2, [r3, #6]
    	break;
 801485c:	e023      	b.n	80148a6 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 801485e:	4b15      	ldr	r3, [pc, #84]	; (80148b4 <CDC_Control_FS+0x140>)
 8014860:	781a      	ldrb	r2, [r3, #0]
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 8014866:	683b      	ldr	r3, [r7, #0]
 8014868:	3301      	adds	r3, #1
 801486a:	4a12      	ldr	r2, [pc, #72]	; (80148b4 <CDC_Control_FS+0x140>)
 801486c:	7852      	ldrb	r2, [r2, #1]
 801486e:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 8014870:	683b      	ldr	r3, [r7, #0]
 8014872:	3302      	adds	r3, #2
 8014874:	4a0f      	ldr	r2, [pc, #60]	; (80148b4 <CDC_Control_FS+0x140>)
 8014876:	7892      	ldrb	r2, [r2, #2]
 8014878:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 801487a:	683b      	ldr	r3, [r7, #0]
 801487c:	3303      	adds	r3, #3
 801487e:	4a0d      	ldr	r2, [pc, #52]	; (80148b4 <CDC_Control_FS+0x140>)
 8014880:	78d2      	ldrb	r2, [r2, #3]
 8014882:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	3304      	adds	r3, #4
 8014888:	4a0a      	ldr	r2, [pc, #40]	; (80148b4 <CDC_Control_FS+0x140>)
 801488a:	7912      	ldrb	r2, [r2, #4]
 801488c:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 801488e:	683b      	ldr	r3, [r7, #0]
 8014890:	3305      	adds	r3, #5
 8014892:	4a08      	ldr	r2, [pc, #32]	; (80148b4 <CDC_Control_FS+0x140>)
 8014894:	7952      	ldrb	r2, [r2, #5]
 8014896:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 8014898:	683b      	ldr	r3, [r7, #0]
 801489a:	3306      	adds	r3, #6
 801489c:	4a05      	ldr	r2, [pc, #20]	; (80148b4 <CDC_Control_FS+0x140>)
 801489e:	7992      	ldrb	r2, [r2, #6]
 80148a0:	701a      	strb	r2, [r3, #0]
    break;
 80148a2:	e000      	b.n	80148a6 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80148a4:	bf00      	nop
  }

  return (USBD_OK);
 80148a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80148a8:	4618      	mov	r0, r3
 80148aa:	370c      	adds	r7, #12
 80148ac:	46bd      	mov	sp, r7
 80148ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b2:	4770      	bx	lr
 80148b4:	200114ac 	.word	0x200114ac

080148b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b082      	sub	sp, #8
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
 80148c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 80148c2:	683b      	ldr	r3, [r7, #0]
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	b29b      	uxth	r3, r3
 80148c8:	461a      	mov	r2, r3
 80148ca:	6879      	ldr	r1, [r7, #4]
 80148cc:	4807      	ldr	r0, [pc, #28]	; (80148ec <CDC_Receive_FS+0x34>)
 80148ce:	f7f0 ff7f 	bl	80057d0 <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80148d2:	6879      	ldr	r1, [r7, #4]
 80148d4:	4806      	ldr	r0, [pc, #24]	; (80148f0 <CDC_Receive_FS+0x38>)
 80148d6:	f7fb fee9 	bl	80106ac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80148da:	4805      	ldr	r0, [pc, #20]	; (80148f0 <CDC_Receive_FS+0x38>)
 80148dc:	f7fb ff2a 	bl	8010734 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80148e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80148e2:	4618      	mov	r0, r3
 80148e4:	3708      	adds	r7, #8
 80148e6:	46bd      	mov	sp, r7
 80148e8:	bd80      	pop	{r7, pc}
 80148ea:	bf00      	nop
 80148ec:	20000068 	.word	0x20000068
 80148f0:	20010ddc 	.word	0x20010ddc

080148f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b084      	sub	sp, #16
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]
 80148fc:	460b      	mov	r3, r1
 80148fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014900:	2300      	movs	r3, #0
 8014902:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8014904:	4b0d      	ldr	r3, [pc, #52]	; (801493c <CDC_Transmit_FS+0x48>)
 8014906:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801490a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801490c:	68bb      	ldr	r3, [r7, #8]
 801490e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014912:	2b00      	cmp	r3, #0
 8014914:	d001      	beq.n	801491a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8014916:	2301      	movs	r3, #1
 8014918:	e00b      	b.n	8014932 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801491a:	887b      	ldrh	r3, [r7, #2]
 801491c:	461a      	mov	r2, r3
 801491e:	6879      	ldr	r1, [r7, #4]
 8014920:	4806      	ldr	r0, [pc, #24]	; (801493c <CDC_Transmit_FS+0x48>)
 8014922:	f7fb feaa 	bl	801067a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8014926:	4805      	ldr	r0, [pc, #20]	; (801493c <CDC_Transmit_FS+0x48>)
 8014928:	f7fb fed4 	bl	80106d4 <USBD_CDC_TransmitPacket>
 801492c:	4603      	mov	r3, r0
 801492e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014930:	7bfb      	ldrb	r3, [r7, #15]
}
 8014932:	4618      	mov	r0, r3
 8014934:	3710      	adds	r7, #16
 8014936:	46bd      	mov	sp, r7
 8014938:	bd80      	pop	{r7, pc}
 801493a:	bf00      	nop
 801493c:	20010ddc 	.word	0x20010ddc

08014940 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014940:	b480      	push	{r7}
 8014942:	b087      	sub	sp, #28
 8014944:	af00      	add	r7, sp, #0
 8014946:	60f8      	str	r0, [r7, #12]
 8014948:	60b9      	str	r1, [r7, #8]
 801494a:	4613      	mov	r3, r2
 801494c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801494e:	2300      	movs	r3, #0
 8014950:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014952:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014956:	4618      	mov	r0, r3
 8014958:	371c      	adds	r7, #28
 801495a:	46bd      	mov	sp, r7
 801495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014960:	4770      	bx	lr
	...

08014964 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014964:	b480      	push	{r7}
 8014966:	b083      	sub	sp, #12
 8014968:	af00      	add	r7, sp, #0
 801496a:	4603      	mov	r3, r0
 801496c:	6039      	str	r1, [r7, #0]
 801496e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014970:	683b      	ldr	r3, [r7, #0]
 8014972:	2212      	movs	r2, #18
 8014974:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014976:	4b03      	ldr	r3, [pc, #12]	; (8014984 <USBD_FS_DeviceDescriptor+0x20>)
}
 8014978:	4618      	mov	r0, r3
 801497a:	370c      	adds	r7, #12
 801497c:	46bd      	mov	sp, r7
 801497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014982:	4770      	bx	lr
 8014984:	200041dc 	.word	0x200041dc

08014988 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014988:	b480      	push	{r7}
 801498a:	b083      	sub	sp, #12
 801498c:	af00      	add	r7, sp, #0
 801498e:	4603      	mov	r3, r0
 8014990:	6039      	str	r1, [r7, #0]
 8014992:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014994:	683b      	ldr	r3, [r7, #0]
 8014996:	2204      	movs	r2, #4
 8014998:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801499a:	4b03      	ldr	r3, [pc, #12]	; (80149a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801499c:	4618      	mov	r0, r3
 801499e:	370c      	adds	r7, #12
 80149a0:	46bd      	mov	sp, r7
 80149a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a6:	4770      	bx	lr
 80149a8:	200041f0 	.word	0x200041f0

080149ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b082      	sub	sp, #8
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	4603      	mov	r3, r0
 80149b4:	6039      	str	r1, [r7, #0]
 80149b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80149b8:	79fb      	ldrb	r3, [r7, #7]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d105      	bne.n	80149ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80149be:	683a      	ldr	r2, [r7, #0]
 80149c0:	4907      	ldr	r1, [pc, #28]	; (80149e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80149c2:	4808      	ldr	r0, [pc, #32]	; (80149e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80149c4:	f7fc ff14 	bl	80117f0 <USBD_GetString>
 80149c8:	e004      	b.n	80149d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80149ca:	683a      	ldr	r2, [r7, #0]
 80149cc:	4904      	ldr	r1, [pc, #16]	; (80149e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80149ce:	4805      	ldr	r0, [pc, #20]	; (80149e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80149d0:	f7fc ff0e 	bl	80117f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80149d4:	4b02      	ldr	r3, [pc, #8]	; (80149e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80149d6:	4618      	mov	r0, r3
 80149d8:	3708      	adds	r7, #8
 80149da:	46bd      	mov	sp, r7
 80149dc:	bd80      	pop	{r7, pc}
 80149de:	bf00      	nop
 80149e0:	200114b4 	.word	0x200114b4
 80149e4:	0801b714 	.word	0x0801b714

080149e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80149e8:	b580      	push	{r7, lr}
 80149ea:	b082      	sub	sp, #8
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	4603      	mov	r3, r0
 80149f0:	6039      	str	r1, [r7, #0]
 80149f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80149f4:	683a      	ldr	r2, [r7, #0]
 80149f6:	4904      	ldr	r1, [pc, #16]	; (8014a08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80149f8:	4804      	ldr	r0, [pc, #16]	; (8014a0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80149fa:	f7fc fef9 	bl	80117f0 <USBD_GetString>
  return USBD_StrDesc;
 80149fe:	4b02      	ldr	r3, [pc, #8]	; (8014a08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014a00:	4618      	mov	r0, r3
 8014a02:	3708      	adds	r7, #8
 8014a04:	46bd      	mov	sp, r7
 8014a06:	bd80      	pop	{r7, pc}
 8014a08:	200114b4 	.word	0x200114b4
 8014a0c:	0801b72c 	.word	0x0801b72c

08014a10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b082      	sub	sp, #8
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	4603      	mov	r3, r0
 8014a18:	6039      	str	r1, [r7, #0]
 8014a1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014a1c:	683b      	ldr	r3, [r7, #0]
 8014a1e:	221a      	movs	r2, #26
 8014a20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014a22:	f000 f843 	bl	8014aac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014a26:	4b02      	ldr	r3, [pc, #8]	; (8014a30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014a28:	4618      	mov	r0, r3
 8014a2a:	3708      	adds	r7, #8
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	bd80      	pop	{r7, pc}
 8014a30:	200041f4 	.word	0x200041f4

08014a34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b082      	sub	sp, #8
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	4603      	mov	r3, r0
 8014a3c:	6039      	str	r1, [r7, #0]
 8014a3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014a40:	79fb      	ldrb	r3, [r7, #7]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d105      	bne.n	8014a52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014a46:	683a      	ldr	r2, [r7, #0]
 8014a48:	4907      	ldr	r1, [pc, #28]	; (8014a68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014a4a:	4808      	ldr	r0, [pc, #32]	; (8014a6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8014a4c:	f7fc fed0 	bl	80117f0 <USBD_GetString>
 8014a50:	e004      	b.n	8014a5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014a52:	683a      	ldr	r2, [r7, #0]
 8014a54:	4904      	ldr	r1, [pc, #16]	; (8014a68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014a56:	4805      	ldr	r0, [pc, #20]	; (8014a6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8014a58:	f7fc feca 	bl	80117f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014a5c:	4b02      	ldr	r3, [pc, #8]	; (8014a68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8014a5e:	4618      	mov	r0, r3
 8014a60:	3708      	adds	r7, #8
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bd80      	pop	{r7, pc}
 8014a66:	bf00      	nop
 8014a68:	200114b4 	.word	0x200114b4
 8014a6c:	0801b740 	.word	0x0801b740

08014a70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b082      	sub	sp, #8
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	4603      	mov	r3, r0
 8014a78:	6039      	str	r1, [r7, #0]
 8014a7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014a7c:	79fb      	ldrb	r3, [r7, #7]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d105      	bne.n	8014a8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014a82:	683a      	ldr	r2, [r7, #0]
 8014a84:	4907      	ldr	r1, [pc, #28]	; (8014aa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014a86:	4808      	ldr	r0, [pc, #32]	; (8014aa8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014a88:	f7fc feb2 	bl	80117f0 <USBD_GetString>
 8014a8c:	e004      	b.n	8014a98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014a8e:	683a      	ldr	r2, [r7, #0]
 8014a90:	4904      	ldr	r1, [pc, #16]	; (8014aa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014a92:	4805      	ldr	r0, [pc, #20]	; (8014aa8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014a94:	f7fc feac 	bl	80117f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014a98:	4b02      	ldr	r3, [pc, #8]	; (8014aa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	3708      	adds	r7, #8
 8014a9e:	46bd      	mov	sp, r7
 8014aa0:	bd80      	pop	{r7, pc}
 8014aa2:	bf00      	nop
 8014aa4:	200114b4 	.word	0x200114b4
 8014aa8:	0801b74c 	.word	0x0801b74c

08014aac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014aac:	b580      	push	{r7, lr}
 8014aae:	b084      	sub	sp, #16
 8014ab0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014ab2:	4b0f      	ldr	r3, [pc, #60]	; (8014af0 <Get_SerialNum+0x44>)
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014ab8:	4b0e      	ldr	r3, [pc, #56]	; (8014af4 <Get_SerialNum+0x48>)
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014abe:	4b0e      	ldr	r3, [pc, #56]	; (8014af8 <Get_SerialNum+0x4c>)
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014ac4:	68fa      	ldr	r2, [r7, #12]
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	4413      	add	r3, r2
 8014aca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d009      	beq.n	8014ae6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014ad2:	2208      	movs	r2, #8
 8014ad4:	4909      	ldr	r1, [pc, #36]	; (8014afc <Get_SerialNum+0x50>)
 8014ad6:	68f8      	ldr	r0, [r7, #12]
 8014ad8:	f000 f814 	bl	8014b04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014adc:	2204      	movs	r2, #4
 8014ade:	4908      	ldr	r1, [pc, #32]	; (8014b00 <Get_SerialNum+0x54>)
 8014ae0:	68b8      	ldr	r0, [r7, #8]
 8014ae2:	f000 f80f 	bl	8014b04 <IntToUnicode>
  }
}
 8014ae6:	bf00      	nop
 8014ae8:	3710      	adds	r7, #16
 8014aea:	46bd      	mov	sp, r7
 8014aec:	bd80      	pop	{r7, pc}
 8014aee:	bf00      	nop
 8014af0:	1fff7a10 	.word	0x1fff7a10
 8014af4:	1fff7a14 	.word	0x1fff7a14
 8014af8:	1fff7a18 	.word	0x1fff7a18
 8014afc:	200041f6 	.word	0x200041f6
 8014b00:	20004206 	.word	0x20004206

08014b04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014b04:	b480      	push	{r7}
 8014b06:	b087      	sub	sp, #28
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	60f8      	str	r0, [r7, #12]
 8014b0c:	60b9      	str	r1, [r7, #8]
 8014b0e:	4613      	mov	r3, r2
 8014b10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014b12:	2300      	movs	r3, #0
 8014b14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014b16:	2300      	movs	r3, #0
 8014b18:	75fb      	strb	r3, [r7, #23]
 8014b1a:	e027      	b.n	8014b6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	0f1b      	lsrs	r3, r3, #28
 8014b20:	2b09      	cmp	r3, #9
 8014b22:	d80b      	bhi.n	8014b3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	0f1b      	lsrs	r3, r3, #28
 8014b28:	b2da      	uxtb	r2, r3
 8014b2a:	7dfb      	ldrb	r3, [r7, #23]
 8014b2c:	005b      	lsls	r3, r3, #1
 8014b2e:	4619      	mov	r1, r3
 8014b30:	68bb      	ldr	r3, [r7, #8]
 8014b32:	440b      	add	r3, r1
 8014b34:	3230      	adds	r2, #48	; 0x30
 8014b36:	b2d2      	uxtb	r2, r2
 8014b38:	701a      	strb	r2, [r3, #0]
 8014b3a:	e00a      	b.n	8014b52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	0f1b      	lsrs	r3, r3, #28
 8014b40:	b2da      	uxtb	r2, r3
 8014b42:	7dfb      	ldrb	r3, [r7, #23]
 8014b44:	005b      	lsls	r3, r3, #1
 8014b46:	4619      	mov	r1, r3
 8014b48:	68bb      	ldr	r3, [r7, #8]
 8014b4a:	440b      	add	r3, r1
 8014b4c:	3237      	adds	r2, #55	; 0x37
 8014b4e:	b2d2      	uxtb	r2, r2
 8014b50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	011b      	lsls	r3, r3, #4
 8014b56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014b58:	7dfb      	ldrb	r3, [r7, #23]
 8014b5a:	005b      	lsls	r3, r3, #1
 8014b5c:	3301      	adds	r3, #1
 8014b5e:	68ba      	ldr	r2, [r7, #8]
 8014b60:	4413      	add	r3, r2
 8014b62:	2200      	movs	r2, #0
 8014b64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014b66:	7dfb      	ldrb	r3, [r7, #23]
 8014b68:	3301      	adds	r3, #1
 8014b6a:	75fb      	strb	r3, [r7, #23]
 8014b6c:	7dfa      	ldrb	r2, [r7, #23]
 8014b6e:	79fb      	ldrb	r3, [r7, #7]
 8014b70:	429a      	cmp	r2, r3
 8014b72:	d3d3      	bcc.n	8014b1c <IntToUnicode+0x18>
  }
}
 8014b74:	bf00      	nop
 8014b76:	bf00      	nop
 8014b78:	371c      	adds	r7, #28
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b80:	4770      	bx	lr
	...

08014b84 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b08a      	sub	sp, #40	; 0x28
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014b8c:	f107 0314 	add.w	r3, r7, #20
 8014b90:	2200      	movs	r2, #0
 8014b92:	601a      	str	r2, [r3, #0]
 8014b94:	605a      	str	r2, [r3, #4]
 8014b96:	609a      	str	r2, [r3, #8]
 8014b98:	60da      	str	r2, [r3, #12]
 8014b9a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014ba4:	d13a      	bne.n	8014c1c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	613b      	str	r3, [r7, #16]
 8014baa:	4b1e      	ldr	r3, [pc, #120]	; (8014c24 <HAL_PCD_MspInit+0xa0>)
 8014bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014bae:	4a1d      	ldr	r2, [pc, #116]	; (8014c24 <HAL_PCD_MspInit+0xa0>)
 8014bb0:	f043 0301 	orr.w	r3, r3, #1
 8014bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8014bb6:	4b1b      	ldr	r3, [pc, #108]	; (8014c24 <HAL_PCD_MspInit+0xa0>)
 8014bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014bba:	f003 0301 	and.w	r3, r3, #1
 8014bbe:	613b      	str	r3, [r7, #16]
 8014bc0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014bc2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8014bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014bc8:	2302      	movs	r3, #2
 8014bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014bcc:	2300      	movs	r3, #0
 8014bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014bd0:	2303      	movs	r3, #3
 8014bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014bd4:	230a      	movs	r3, #10
 8014bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014bd8:	f107 0314 	add.w	r3, r7, #20
 8014bdc:	4619      	mov	r1, r3
 8014bde:	4812      	ldr	r0, [pc, #72]	; (8014c28 <HAL_PCD_MspInit+0xa4>)
 8014be0:	f7f6 fb6e 	bl	800b2c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014be4:	4b0f      	ldr	r3, [pc, #60]	; (8014c24 <HAL_PCD_MspInit+0xa0>)
 8014be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014be8:	4a0e      	ldr	r2, [pc, #56]	; (8014c24 <HAL_PCD_MspInit+0xa0>)
 8014bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014bee:	6353      	str	r3, [r2, #52]	; 0x34
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	60fb      	str	r3, [r7, #12]
 8014bf4:	4b0b      	ldr	r3, [pc, #44]	; (8014c24 <HAL_PCD_MspInit+0xa0>)
 8014bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014bf8:	4a0a      	ldr	r2, [pc, #40]	; (8014c24 <HAL_PCD_MspInit+0xa0>)
 8014bfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014bfe:	6453      	str	r3, [r2, #68]	; 0x44
 8014c00:	4b08      	ldr	r3, [pc, #32]	; (8014c24 <HAL_PCD_MspInit+0xa0>)
 8014c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014c08:	60fb      	str	r3, [r7, #12]
 8014c0a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	2105      	movs	r1, #5
 8014c10:	2043      	movs	r0, #67	; 0x43
 8014c12:	f7f5 ff8b 	bl	800ab2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014c16:	2043      	movs	r0, #67	; 0x43
 8014c18:	f7f5 ffa4 	bl	800ab64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014c1c:	bf00      	nop
 8014c1e:	3728      	adds	r7, #40	; 0x28
 8014c20:	46bd      	mov	sp, r7
 8014c22:	bd80      	pop	{r7, pc}
 8014c24:	40023800 	.word	0x40023800
 8014c28:	40020000 	.word	0x40020000

08014c2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b082      	sub	sp, #8
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014c40:	4619      	mov	r1, r3
 8014c42:	4610      	mov	r0, r2
 8014c44:	f7fb fe42 	bl	80108cc <USBD_LL_SetupStage>
}
 8014c48:	bf00      	nop
 8014c4a:	3708      	adds	r7, #8
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	bd80      	pop	{r7, pc}

08014c50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b082      	sub	sp, #8
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	6078      	str	r0, [r7, #4]
 8014c58:	460b      	mov	r3, r1
 8014c5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014c62:	78fa      	ldrb	r2, [r7, #3]
 8014c64:	6879      	ldr	r1, [r7, #4]
 8014c66:	4613      	mov	r3, r2
 8014c68:	00db      	lsls	r3, r3, #3
 8014c6a:	1a9b      	subs	r3, r3, r2
 8014c6c:	009b      	lsls	r3, r3, #2
 8014c6e:	440b      	add	r3, r1
 8014c70:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014c74:	681a      	ldr	r2, [r3, #0]
 8014c76:	78fb      	ldrb	r3, [r7, #3]
 8014c78:	4619      	mov	r1, r3
 8014c7a:	f7fb fe7c 	bl	8010976 <USBD_LL_DataOutStage>
}
 8014c7e:	bf00      	nop
 8014c80:	3708      	adds	r7, #8
 8014c82:	46bd      	mov	sp, r7
 8014c84:	bd80      	pop	{r7, pc}

08014c86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c86:	b580      	push	{r7, lr}
 8014c88:	b082      	sub	sp, #8
 8014c8a:	af00      	add	r7, sp, #0
 8014c8c:	6078      	str	r0, [r7, #4]
 8014c8e:	460b      	mov	r3, r1
 8014c90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014c98:	78fa      	ldrb	r2, [r7, #3]
 8014c9a:	6879      	ldr	r1, [r7, #4]
 8014c9c:	4613      	mov	r3, r2
 8014c9e:	00db      	lsls	r3, r3, #3
 8014ca0:	1a9b      	subs	r3, r3, r2
 8014ca2:	009b      	lsls	r3, r3, #2
 8014ca4:	440b      	add	r3, r1
 8014ca6:	3348      	adds	r3, #72	; 0x48
 8014ca8:	681a      	ldr	r2, [r3, #0]
 8014caa:	78fb      	ldrb	r3, [r7, #3]
 8014cac:	4619      	mov	r1, r3
 8014cae:	f7fb fec5 	bl	8010a3c <USBD_LL_DataInStage>
}
 8014cb2:	bf00      	nop
 8014cb4:	3708      	adds	r7, #8
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	bd80      	pop	{r7, pc}

08014cba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014cba:	b580      	push	{r7, lr}
 8014cbc:	b082      	sub	sp, #8
 8014cbe:	af00      	add	r7, sp, #0
 8014cc0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014cc8:	4618      	mov	r0, r3
 8014cca:	f7fb ffc9 	bl	8010c60 <USBD_LL_SOF>
}
 8014cce:	bf00      	nop
 8014cd0:	3708      	adds	r7, #8
 8014cd2:	46bd      	mov	sp, r7
 8014cd4:	bd80      	pop	{r7, pc}

08014cd6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014cd6:	b580      	push	{r7, lr}
 8014cd8:	b084      	sub	sp, #16
 8014cda:	af00      	add	r7, sp, #0
 8014cdc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014cde:	2301      	movs	r3, #1
 8014ce0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	68db      	ldr	r3, [r3, #12]
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d102      	bne.n	8014cf0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8014cea:	2300      	movs	r3, #0
 8014cec:	73fb      	strb	r3, [r7, #15]
 8014cee:	e008      	b.n	8014d02 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	68db      	ldr	r3, [r3, #12]
 8014cf4:	2b02      	cmp	r3, #2
 8014cf6:	d102      	bne.n	8014cfe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8014cf8:	2301      	movs	r3, #1
 8014cfa:	73fb      	strb	r3, [r7, #15]
 8014cfc:	e001      	b.n	8014d02 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8014cfe:	f7f0 fcd5 	bl	80056ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014d08:	7bfa      	ldrb	r2, [r7, #15]
 8014d0a:	4611      	mov	r1, r2
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	f7fb ff6c 	bl	8010bea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014d18:	4618      	mov	r0, r3
 8014d1a:	f7fb ff25 	bl	8010b68 <USBD_LL_Reset>
}
 8014d1e:	bf00      	nop
 8014d20:	3710      	adds	r7, #16
 8014d22:	46bd      	mov	sp, r7
 8014d24:	bd80      	pop	{r7, pc}
	...

08014d28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d28:	b580      	push	{r7, lr}
 8014d2a:	b082      	sub	sp, #8
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014d36:	4618      	mov	r0, r3
 8014d38:	f7fb ff67 	bl	8010c0a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	687a      	ldr	r2, [r7, #4]
 8014d48:	6812      	ldr	r2, [r2, #0]
 8014d4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014d4e:	f043 0301 	orr.w	r3, r3, #1
 8014d52:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	6a1b      	ldr	r3, [r3, #32]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d005      	beq.n	8014d68 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014d5c:	4b04      	ldr	r3, [pc, #16]	; (8014d70 <HAL_PCD_SuspendCallback+0x48>)
 8014d5e:	691b      	ldr	r3, [r3, #16]
 8014d60:	4a03      	ldr	r2, [pc, #12]	; (8014d70 <HAL_PCD_SuspendCallback+0x48>)
 8014d62:	f043 0306 	orr.w	r3, r3, #6
 8014d66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014d68:	bf00      	nop
 8014d6a:	3708      	adds	r7, #8
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	bd80      	pop	{r7, pc}
 8014d70:	e000ed00 	.word	0xe000ed00

08014d74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b082      	sub	sp, #8
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014d82:	4618      	mov	r0, r3
 8014d84:	f7fb ff56 	bl	8010c34 <USBD_LL_Resume>
}
 8014d88:	bf00      	nop
 8014d8a:	3708      	adds	r7, #8
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	bd80      	pop	{r7, pc}

08014d90 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b082      	sub	sp, #8
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	6078      	str	r0, [r7, #4]
 8014d98:	460b      	mov	r3, r1
 8014d9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014da2:	78fa      	ldrb	r2, [r7, #3]
 8014da4:	4611      	mov	r1, r2
 8014da6:	4618      	mov	r0, r3
 8014da8:	f7fb ff81 	bl	8010cae <USBD_LL_IsoOUTIncomplete>
}
 8014dac:	bf00      	nop
 8014dae:	3708      	adds	r7, #8
 8014db0:	46bd      	mov	sp, r7
 8014db2:	bd80      	pop	{r7, pc}

08014db4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014db4:	b580      	push	{r7, lr}
 8014db6:	b082      	sub	sp, #8
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	6078      	str	r0, [r7, #4]
 8014dbc:	460b      	mov	r3, r1
 8014dbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014dc6:	78fa      	ldrb	r2, [r7, #3]
 8014dc8:	4611      	mov	r1, r2
 8014dca:	4618      	mov	r0, r3
 8014dcc:	f7fb ff62 	bl	8010c94 <USBD_LL_IsoINIncomplete>
}
 8014dd0:	bf00      	nop
 8014dd2:	3708      	adds	r7, #8
 8014dd4:	46bd      	mov	sp, r7
 8014dd6:	bd80      	pop	{r7, pc}

08014dd8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b082      	sub	sp, #8
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014de6:	4618      	mov	r0, r3
 8014de8:	f7fb ff6e 	bl	8010cc8 <USBD_LL_DevConnected>
}
 8014dec:	bf00      	nop
 8014dee:	3708      	adds	r7, #8
 8014df0:	46bd      	mov	sp, r7
 8014df2:	bd80      	pop	{r7, pc}

08014df4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b082      	sub	sp, #8
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014e02:	4618      	mov	r0, r3
 8014e04:	f7fb ff6b 	bl	8010cde <USBD_LL_DevDisconnected>
}
 8014e08:	bf00      	nop
 8014e0a:	3708      	adds	r7, #8
 8014e0c:	46bd      	mov	sp, r7
 8014e0e:	bd80      	pop	{r7, pc}

08014e10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014e10:	b580      	push	{r7, lr}
 8014e12:	b082      	sub	sp, #8
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	781b      	ldrb	r3, [r3, #0]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d13c      	bne.n	8014e9a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8014e20:	4a20      	ldr	r2, [pc, #128]	; (8014ea4 <USBD_LL_Init+0x94>)
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	4a1e      	ldr	r2, [pc, #120]	; (8014ea4 <USBD_LL_Init+0x94>)
 8014e2c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014e30:	4b1c      	ldr	r3, [pc, #112]	; (8014ea4 <USBD_LL_Init+0x94>)
 8014e32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8014e36:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8014e38:	4b1a      	ldr	r3, [pc, #104]	; (8014ea4 <USBD_LL_Init+0x94>)
 8014e3a:	2204      	movs	r2, #4
 8014e3c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8014e3e:	4b19      	ldr	r3, [pc, #100]	; (8014ea4 <USBD_LL_Init+0x94>)
 8014e40:	2202      	movs	r2, #2
 8014e42:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8014e44:	4b17      	ldr	r3, [pc, #92]	; (8014ea4 <USBD_LL_Init+0x94>)
 8014e46:	2200      	movs	r2, #0
 8014e48:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014e4a:	4b16      	ldr	r3, [pc, #88]	; (8014ea4 <USBD_LL_Init+0x94>)
 8014e4c:	2202      	movs	r2, #2
 8014e4e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014e50:	4b14      	ldr	r3, [pc, #80]	; (8014ea4 <USBD_LL_Init+0x94>)
 8014e52:	2200      	movs	r2, #0
 8014e54:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8014e56:	4b13      	ldr	r3, [pc, #76]	; (8014ea4 <USBD_LL_Init+0x94>)
 8014e58:	2200      	movs	r2, #0
 8014e5a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014e5c:	4b11      	ldr	r3, [pc, #68]	; (8014ea4 <USBD_LL_Init+0x94>)
 8014e5e:	2200      	movs	r2, #0
 8014e60:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8014e62:	4b10      	ldr	r3, [pc, #64]	; (8014ea4 <USBD_LL_Init+0x94>)
 8014e64:	2200      	movs	r2, #0
 8014e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014e68:	4b0e      	ldr	r3, [pc, #56]	; (8014ea4 <USBD_LL_Init+0x94>)
 8014e6a:	2200      	movs	r2, #0
 8014e6c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014e6e:	480d      	ldr	r0, [pc, #52]	; (8014ea4 <USBD_LL_Init+0x94>)
 8014e70:	f7f6 fc32 	bl	800b6d8 <HAL_PCD_Init>
 8014e74:	4603      	mov	r3, r0
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d001      	beq.n	8014e7e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8014e7a:	f7f0 fc17 	bl	80056ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014e7e:	2180      	movs	r1, #128	; 0x80
 8014e80:	4808      	ldr	r0, [pc, #32]	; (8014ea4 <USBD_LL_Init+0x94>)
 8014e82:	f7f7 fd90 	bl	800c9a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8014e86:	2240      	movs	r2, #64	; 0x40
 8014e88:	2100      	movs	r1, #0
 8014e8a:	4806      	ldr	r0, [pc, #24]	; (8014ea4 <USBD_LL_Init+0x94>)
 8014e8c:	f7f7 fd44 	bl	800c918 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014e90:	2280      	movs	r2, #128	; 0x80
 8014e92:	2101      	movs	r1, #1
 8014e94:	4803      	ldr	r0, [pc, #12]	; (8014ea4 <USBD_LL_Init+0x94>)
 8014e96:	f7f7 fd3f 	bl	800c918 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8014e9a:	2300      	movs	r3, #0
}
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	3708      	adds	r7, #8
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bd80      	pop	{r7, pc}
 8014ea4:	200116b4 	.word	0x200116b4

08014ea8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b084      	sub	sp, #16
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f7f6 fd27 	bl	800b912 <HAL_PCD_Start>
 8014ec4:	4603      	mov	r3, r0
 8014ec6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014ec8:	7bfb      	ldrb	r3, [r7, #15]
 8014eca:	4618      	mov	r0, r3
 8014ecc:	f000 f92a 	bl	8015124 <USBD_Get_USB_Status>
 8014ed0:	4603      	mov	r3, r0
 8014ed2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014ed4:	7bbb      	ldrb	r3, [r7, #14]
}
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	3710      	adds	r7, #16
 8014eda:	46bd      	mov	sp, r7
 8014edc:	bd80      	pop	{r7, pc}

08014ede <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014ede:	b580      	push	{r7, lr}
 8014ee0:	b084      	sub	sp, #16
 8014ee2:	af00      	add	r7, sp, #0
 8014ee4:	6078      	str	r0, [r7, #4]
 8014ee6:	4608      	mov	r0, r1
 8014ee8:	4611      	mov	r1, r2
 8014eea:	461a      	mov	r2, r3
 8014eec:	4603      	mov	r3, r0
 8014eee:	70fb      	strb	r3, [r7, #3]
 8014ef0:	460b      	mov	r3, r1
 8014ef2:	70bb      	strb	r3, [r7, #2]
 8014ef4:	4613      	mov	r3, r2
 8014ef6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ef8:	2300      	movs	r3, #0
 8014efa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014efc:	2300      	movs	r3, #0
 8014efe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014f06:	78bb      	ldrb	r3, [r7, #2]
 8014f08:	883a      	ldrh	r2, [r7, #0]
 8014f0a:	78f9      	ldrb	r1, [r7, #3]
 8014f0c:	f7f7 f90b 	bl	800c126 <HAL_PCD_EP_Open>
 8014f10:	4603      	mov	r3, r0
 8014f12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f14:	7bfb      	ldrb	r3, [r7, #15]
 8014f16:	4618      	mov	r0, r3
 8014f18:	f000 f904 	bl	8015124 <USBD_Get_USB_Status>
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014f20:	7bbb      	ldrb	r3, [r7, #14]
}
 8014f22:	4618      	mov	r0, r3
 8014f24:	3710      	adds	r7, #16
 8014f26:	46bd      	mov	sp, r7
 8014f28:	bd80      	pop	{r7, pc}

08014f2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014f2a:	b580      	push	{r7, lr}
 8014f2c:	b084      	sub	sp, #16
 8014f2e:	af00      	add	r7, sp, #0
 8014f30:	6078      	str	r0, [r7, #4]
 8014f32:	460b      	mov	r3, r1
 8014f34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f36:	2300      	movs	r3, #0
 8014f38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014f44:	78fa      	ldrb	r2, [r7, #3]
 8014f46:	4611      	mov	r1, r2
 8014f48:	4618      	mov	r0, r3
 8014f4a:	f7f7 f954 	bl	800c1f6 <HAL_PCD_EP_Close>
 8014f4e:	4603      	mov	r3, r0
 8014f50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f52:	7bfb      	ldrb	r3, [r7, #15]
 8014f54:	4618      	mov	r0, r3
 8014f56:	f000 f8e5 	bl	8015124 <USBD_Get_USB_Status>
 8014f5a:	4603      	mov	r3, r0
 8014f5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014f5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8014f60:	4618      	mov	r0, r3
 8014f62:	3710      	adds	r7, #16
 8014f64:	46bd      	mov	sp, r7
 8014f66:	bd80      	pop	{r7, pc}

08014f68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b084      	sub	sp, #16
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
 8014f70:	460b      	mov	r3, r1
 8014f72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f74:	2300      	movs	r3, #0
 8014f76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f78:	2300      	movs	r3, #0
 8014f7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014f82:	78fa      	ldrb	r2, [r7, #3]
 8014f84:	4611      	mov	r1, r2
 8014f86:	4618      	mov	r0, r3
 8014f88:	f7f7 fa2c 	bl	800c3e4 <HAL_PCD_EP_SetStall>
 8014f8c:	4603      	mov	r3, r0
 8014f8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f90:	7bfb      	ldrb	r3, [r7, #15]
 8014f92:	4618      	mov	r0, r3
 8014f94:	f000 f8c6 	bl	8015124 <USBD_Get_USB_Status>
 8014f98:	4603      	mov	r3, r0
 8014f9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014f9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	3710      	adds	r7, #16
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	bd80      	pop	{r7, pc}

08014fa6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014fa6:	b580      	push	{r7, lr}
 8014fa8:	b084      	sub	sp, #16
 8014faa:	af00      	add	r7, sp, #0
 8014fac:	6078      	str	r0, [r7, #4]
 8014fae:	460b      	mov	r3, r1
 8014fb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014fc0:	78fa      	ldrb	r2, [r7, #3]
 8014fc2:	4611      	mov	r1, r2
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	f7f7 fa71 	bl	800c4ac <HAL_PCD_EP_ClrStall>
 8014fca:	4603      	mov	r3, r0
 8014fcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014fce:	7bfb      	ldrb	r3, [r7, #15]
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	f000 f8a7 	bl	8015124 <USBD_Get_USB_Status>
 8014fd6:	4603      	mov	r3, r0
 8014fd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014fda:	7bbb      	ldrb	r3, [r7, #14]
}
 8014fdc:	4618      	mov	r0, r3
 8014fde:	3710      	adds	r7, #16
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	bd80      	pop	{r7, pc}

08014fe4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014fe4:	b480      	push	{r7}
 8014fe6:	b085      	sub	sp, #20
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	6078      	str	r0, [r7, #4]
 8014fec:	460b      	mov	r3, r1
 8014fee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014ff6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014ff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	da0b      	bge.n	8015018 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015000:	78fb      	ldrb	r3, [r7, #3]
 8015002:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015006:	68f9      	ldr	r1, [r7, #12]
 8015008:	4613      	mov	r3, r2
 801500a:	00db      	lsls	r3, r3, #3
 801500c:	1a9b      	subs	r3, r3, r2
 801500e:	009b      	lsls	r3, r3, #2
 8015010:	440b      	add	r3, r1
 8015012:	333e      	adds	r3, #62	; 0x3e
 8015014:	781b      	ldrb	r3, [r3, #0]
 8015016:	e00b      	b.n	8015030 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015018:	78fb      	ldrb	r3, [r7, #3]
 801501a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801501e:	68f9      	ldr	r1, [r7, #12]
 8015020:	4613      	mov	r3, r2
 8015022:	00db      	lsls	r3, r3, #3
 8015024:	1a9b      	subs	r3, r3, r2
 8015026:	009b      	lsls	r3, r3, #2
 8015028:	440b      	add	r3, r1
 801502a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801502e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015030:	4618      	mov	r0, r3
 8015032:	3714      	adds	r7, #20
 8015034:	46bd      	mov	sp, r7
 8015036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503a:	4770      	bx	lr

0801503c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801503c:	b580      	push	{r7, lr}
 801503e:	b084      	sub	sp, #16
 8015040:	af00      	add	r7, sp, #0
 8015042:	6078      	str	r0, [r7, #4]
 8015044:	460b      	mov	r3, r1
 8015046:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015048:	2300      	movs	r3, #0
 801504a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801504c:	2300      	movs	r3, #0
 801504e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015056:	78fa      	ldrb	r2, [r7, #3]
 8015058:	4611      	mov	r1, r2
 801505a:	4618      	mov	r0, r3
 801505c:	f7f7 f83e 	bl	800c0dc <HAL_PCD_SetAddress>
 8015060:	4603      	mov	r3, r0
 8015062:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015064:	7bfb      	ldrb	r3, [r7, #15]
 8015066:	4618      	mov	r0, r3
 8015068:	f000 f85c 	bl	8015124 <USBD_Get_USB_Status>
 801506c:	4603      	mov	r3, r0
 801506e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015070:	7bbb      	ldrb	r3, [r7, #14]
}
 8015072:	4618      	mov	r0, r3
 8015074:	3710      	adds	r7, #16
 8015076:	46bd      	mov	sp, r7
 8015078:	bd80      	pop	{r7, pc}

0801507a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801507a:	b580      	push	{r7, lr}
 801507c:	b086      	sub	sp, #24
 801507e:	af00      	add	r7, sp, #0
 8015080:	60f8      	str	r0, [r7, #12]
 8015082:	607a      	str	r2, [r7, #4]
 8015084:	603b      	str	r3, [r7, #0]
 8015086:	460b      	mov	r3, r1
 8015088:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801508a:	2300      	movs	r3, #0
 801508c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801508e:	2300      	movs	r3, #0
 8015090:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015098:	7af9      	ldrb	r1, [r7, #11]
 801509a:	683b      	ldr	r3, [r7, #0]
 801509c:	687a      	ldr	r2, [r7, #4]
 801509e:	f7f7 f957 	bl	800c350 <HAL_PCD_EP_Transmit>
 80150a2:	4603      	mov	r3, r0
 80150a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80150a6:	7dfb      	ldrb	r3, [r7, #23]
 80150a8:	4618      	mov	r0, r3
 80150aa:	f000 f83b 	bl	8015124 <USBD_Get_USB_Status>
 80150ae:	4603      	mov	r3, r0
 80150b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80150b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80150b4:	4618      	mov	r0, r3
 80150b6:	3718      	adds	r7, #24
 80150b8:	46bd      	mov	sp, r7
 80150ba:	bd80      	pop	{r7, pc}

080150bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b086      	sub	sp, #24
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	60f8      	str	r0, [r7, #12]
 80150c4:	607a      	str	r2, [r7, #4]
 80150c6:	603b      	str	r3, [r7, #0]
 80150c8:	460b      	mov	r3, r1
 80150ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80150cc:	2300      	movs	r3, #0
 80150ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80150d0:	2300      	movs	r3, #0
 80150d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80150da:	7af9      	ldrb	r1, [r7, #11]
 80150dc:	683b      	ldr	r3, [r7, #0]
 80150de:	687a      	ldr	r2, [r7, #4]
 80150e0:	f7f7 f8d3 	bl	800c28a <HAL_PCD_EP_Receive>
 80150e4:	4603      	mov	r3, r0
 80150e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80150e8:	7dfb      	ldrb	r3, [r7, #23]
 80150ea:	4618      	mov	r0, r3
 80150ec:	f000 f81a 	bl	8015124 <USBD_Get_USB_Status>
 80150f0:	4603      	mov	r3, r0
 80150f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80150f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80150f6:	4618      	mov	r0, r3
 80150f8:	3718      	adds	r7, #24
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd80      	pop	{r7, pc}

080150fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80150fe:	b580      	push	{r7, lr}
 8015100:	b082      	sub	sp, #8
 8015102:	af00      	add	r7, sp, #0
 8015104:	6078      	str	r0, [r7, #4]
 8015106:	460b      	mov	r3, r1
 8015108:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015110:	78fa      	ldrb	r2, [r7, #3]
 8015112:	4611      	mov	r1, r2
 8015114:	4618      	mov	r0, r3
 8015116:	f7f7 f903 	bl	800c320 <HAL_PCD_EP_GetRxCount>
 801511a:	4603      	mov	r3, r0
}
 801511c:	4618      	mov	r0, r3
 801511e:	3708      	adds	r7, #8
 8015120:	46bd      	mov	sp, r7
 8015122:	bd80      	pop	{r7, pc}

08015124 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015124:	b480      	push	{r7}
 8015126:	b085      	sub	sp, #20
 8015128:	af00      	add	r7, sp, #0
 801512a:	4603      	mov	r3, r0
 801512c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801512e:	2300      	movs	r3, #0
 8015130:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015132:	79fb      	ldrb	r3, [r7, #7]
 8015134:	2b03      	cmp	r3, #3
 8015136:	d817      	bhi.n	8015168 <USBD_Get_USB_Status+0x44>
 8015138:	a201      	add	r2, pc, #4	; (adr r2, 8015140 <USBD_Get_USB_Status+0x1c>)
 801513a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801513e:	bf00      	nop
 8015140:	08015151 	.word	0x08015151
 8015144:	08015157 	.word	0x08015157
 8015148:	0801515d 	.word	0x0801515d
 801514c:	08015163 	.word	0x08015163
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015150:	2300      	movs	r3, #0
 8015152:	73fb      	strb	r3, [r7, #15]
    break;
 8015154:	e00b      	b.n	801516e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015156:	2303      	movs	r3, #3
 8015158:	73fb      	strb	r3, [r7, #15]
    break;
 801515a:	e008      	b.n	801516e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801515c:	2301      	movs	r3, #1
 801515e:	73fb      	strb	r3, [r7, #15]
    break;
 8015160:	e005      	b.n	801516e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015162:	2303      	movs	r3, #3
 8015164:	73fb      	strb	r3, [r7, #15]
    break;
 8015166:	e002      	b.n	801516e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015168:	2303      	movs	r3, #3
 801516a:	73fb      	strb	r3, [r7, #15]
    break;
 801516c:	bf00      	nop
  }
  return usb_status;
 801516e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015170:	4618      	mov	r0, r3
 8015172:	3714      	adds	r7, #20
 8015174:	46bd      	mov	sp, r7
 8015176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801517a:	4770      	bx	lr

0801517c <__errno>:
 801517c:	4b01      	ldr	r3, [pc, #4]	; (8015184 <__errno+0x8>)
 801517e:	6818      	ldr	r0, [r3, #0]
 8015180:	4770      	bx	lr
 8015182:	bf00      	nop
 8015184:	20004210 	.word	0x20004210

08015188 <__libc_init_array>:
 8015188:	b570      	push	{r4, r5, r6, lr}
 801518a:	4d0d      	ldr	r5, [pc, #52]	; (80151c0 <__libc_init_array+0x38>)
 801518c:	4c0d      	ldr	r4, [pc, #52]	; (80151c4 <__libc_init_array+0x3c>)
 801518e:	1b64      	subs	r4, r4, r5
 8015190:	10a4      	asrs	r4, r4, #2
 8015192:	2600      	movs	r6, #0
 8015194:	42a6      	cmp	r6, r4
 8015196:	d109      	bne.n	80151ac <__libc_init_array+0x24>
 8015198:	4d0b      	ldr	r5, [pc, #44]	; (80151c8 <__libc_init_array+0x40>)
 801519a:	4c0c      	ldr	r4, [pc, #48]	; (80151cc <__libc_init_array+0x44>)
 801519c:	f006 f972 	bl	801b484 <_init>
 80151a0:	1b64      	subs	r4, r4, r5
 80151a2:	10a4      	asrs	r4, r4, #2
 80151a4:	2600      	movs	r6, #0
 80151a6:	42a6      	cmp	r6, r4
 80151a8:	d105      	bne.n	80151b6 <__libc_init_array+0x2e>
 80151aa:	bd70      	pop	{r4, r5, r6, pc}
 80151ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80151b0:	4798      	blx	r3
 80151b2:	3601      	adds	r6, #1
 80151b4:	e7ee      	b.n	8015194 <__libc_init_array+0xc>
 80151b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80151ba:	4798      	blx	r3
 80151bc:	3601      	adds	r6, #1
 80151be:	e7f2      	b.n	80151a6 <__libc_init_array+0x1e>
 80151c0:	0801be88 	.word	0x0801be88
 80151c4:	0801be88 	.word	0x0801be88
 80151c8:	0801be88 	.word	0x0801be88
 80151cc:	0801be8c 	.word	0x0801be8c

080151d0 <malloc>:
 80151d0:	4b02      	ldr	r3, [pc, #8]	; (80151dc <malloc+0xc>)
 80151d2:	4601      	mov	r1, r0
 80151d4:	6818      	ldr	r0, [r3, #0]
 80151d6:	f000 b88b 	b.w	80152f0 <_malloc_r>
 80151da:	bf00      	nop
 80151dc:	20004210 	.word	0x20004210

080151e0 <free>:
 80151e0:	4b02      	ldr	r3, [pc, #8]	; (80151ec <free+0xc>)
 80151e2:	4601      	mov	r1, r0
 80151e4:	6818      	ldr	r0, [r3, #0]
 80151e6:	f000 b833 	b.w	8015250 <_free_r>
 80151ea:	bf00      	nop
 80151ec:	20004210 	.word	0x20004210

080151f0 <memcpy>:
 80151f0:	440a      	add	r2, r1
 80151f2:	4291      	cmp	r1, r2
 80151f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80151f8:	d100      	bne.n	80151fc <memcpy+0xc>
 80151fa:	4770      	bx	lr
 80151fc:	b510      	push	{r4, lr}
 80151fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015202:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015206:	4291      	cmp	r1, r2
 8015208:	d1f9      	bne.n	80151fe <memcpy+0xe>
 801520a:	bd10      	pop	{r4, pc}

0801520c <memmove>:
 801520c:	4288      	cmp	r0, r1
 801520e:	b510      	push	{r4, lr}
 8015210:	eb01 0402 	add.w	r4, r1, r2
 8015214:	d902      	bls.n	801521c <memmove+0x10>
 8015216:	4284      	cmp	r4, r0
 8015218:	4623      	mov	r3, r4
 801521a:	d807      	bhi.n	801522c <memmove+0x20>
 801521c:	1e43      	subs	r3, r0, #1
 801521e:	42a1      	cmp	r1, r4
 8015220:	d008      	beq.n	8015234 <memmove+0x28>
 8015222:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015226:	f803 2f01 	strb.w	r2, [r3, #1]!
 801522a:	e7f8      	b.n	801521e <memmove+0x12>
 801522c:	4402      	add	r2, r0
 801522e:	4601      	mov	r1, r0
 8015230:	428a      	cmp	r2, r1
 8015232:	d100      	bne.n	8015236 <memmove+0x2a>
 8015234:	bd10      	pop	{r4, pc}
 8015236:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801523a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801523e:	e7f7      	b.n	8015230 <memmove+0x24>

08015240 <memset>:
 8015240:	4402      	add	r2, r0
 8015242:	4603      	mov	r3, r0
 8015244:	4293      	cmp	r3, r2
 8015246:	d100      	bne.n	801524a <memset+0xa>
 8015248:	4770      	bx	lr
 801524a:	f803 1b01 	strb.w	r1, [r3], #1
 801524e:	e7f9      	b.n	8015244 <memset+0x4>

08015250 <_free_r>:
 8015250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015252:	2900      	cmp	r1, #0
 8015254:	d048      	beq.n	80152e8 <_free_r+0x98>
 8015256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801525a:	9001      	str	r0, [sp, #4]
 801525c:	2b00      	cmp	r3, #0
 801525e:	f1a1 0404 	sub.w	r4, r1, #4
 8015262:	bfb8      	it	lt
 8015264:	18e4      	addlt	r4, r4, r3
 8015266:	f003 f835 	bl	80182d4 <__malloc_lock>
 801526a:	4a20      	ldr	r2, [pc, #128]	; (80152ec <_free_r+0x9c>)
 801526c:	9801      	ldr	r0, [sp, #4]
 801526e:	6813      	ldr	r3, [r2, #0]
 8015270:	4615      	mov	r5, r2
 8015272:	b933      	cbnz	r3, 8015282 <_free_r+0x32>
 8015274:	6063      	str	r3, [r4, #4]
 8015276:	6014      	str	r4, [r2, #0]
 8015278:	b003      	add	sp, #12
 801527a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801527e:	f003 b82f 	b.w	80182e0 <__malloc_unlock>
 8015282:	42a3      	cmp	r3, r4
 8015284:	d90b      	bls.n	801529e <_free_r+0x4e>
 8015286:	6821      	ldr	r1, [r4, #0]
 8015288:	1862      	adds	r2, r4, r1
 801528a:	4293      	cmp	r3, r2
 801528c:	bf04      	itt	eq
 801528e:	681a      	ldreq	r2, [r3, #0]
 8015290:	685b      	ldreq	r3, [r3, #4]
 8015292:	6063      	str	r3, [r4, #4]
 8015294:	bf04      	itt	eq
 8015296:	1852      	addeq	r2, r2, r1
 8015298:	6022      	streq	r2, [r4, #0]
 801529a:	602c      	str	r4, [r5, #0]
 801529c:	e7ec      	b.n	8015278 <_free_r+0x28>
 801529e:	461a      	mov	r2, r3
 80152a0:	685b      	ldr	r3, [r3, #4]
 80152a2:	b10b      	cbz	r3, 80152a8 <_free_r+0x58>
 80152a4:	42a3      	cmp	r3, r4
 80152a6:	d9fa      	bls.n	801529e <_free_r+0x4e>
 80152a8:	6811      	ldr	r1, [r2, #0]
 80152aa:	1855      	adds	r5, r2, r1
 80152ac:	42a5      	cmp	r5, r4
 80152ae:	d10b      	bne.n	80152c8 <_free_r+0x78>
 80152b0:	6824      	ldr	r4, [r4, #0]
 80152b2:	4421      	add	r1, r4
 80152b4:	1854      	adds	r4, r2, r1
 80152b6:	42a3      	cmp	r3, r4
 80152b8:	6011      	str	r1, [r2, #0]
 80152ba:	d1dd      	bne.n	8015278 <_free_r+0x28>
 80152bc:	681c      	ldr	r4, [r3, #0]
 80152be:	685b      	ldr	r3, [r3, #4]
 80152c0:	6053      	str	r3, [r2, #4]
 80152c2:	4421      	add	r1, r4
 80152c4:	6011      	str	r1, [r2, #0]
 80152c6:	e7d7      	b.n	8015278 <_free_r+0x28>
 80152c8:	d902      	bls.n	80152d0 <_free_r+0x80>
 80152ca:	230c      	movs	r3, #12
 80152cc:	6003      	str	r3, [r0, #0]
 80152ce:	e7d3      	b.n	8015278 <_free_r+0x28>
 80152d0:	6825      	ldr	r5, [r4, #0]
 80152d2:	1961      	adds	r1, r4, r5
 80152d4:	428b      	cmp	r3, r1
 80152d6:	bf04      	itt	eq
 80152d8:	6819      	ldreq	r1, [r3, #0]
 80152da:	685b      	ldreq	r3, [r3, #4]
 80152dc:	6063      	str	r3, [r4, #4]
 80152de:	bf04      	itt	eq
 80152e0:	1949      	addeq	r1, r1, r5
 80152e2:	6021      	streq	r1, [r4, #0]
 80152e4:	6054      	str	r4, [r2, #4]
 80152e6:	e7c7      	b.n	8015278 <_free_r+0x28>
 80152e8:	b003      	add	sp, #12
 80152ea:	bd30      	pop	{r4, r5, pc}
 80152ec:	200085bc 	.word	0x200085bc

080152f0 <_malloc_r>:
 80152f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152f2:	1ccd      	adds	r5, r1, #3
 80152f4:	f025 0503 	bic.w	r5, r5, #3
 80152f8:	3508      	adds	r5, #8
 80152fa:	2d0c      	cmp	r5, #12
 80152fc:	bf38      	it	cc
 80152fe:	250c      	movcc	r5, #12
 8015300:	2d00      	cmp	r5, #0
 8015302:	4606      	mov	r6, r0
 8015304:	db01      	blt.n	801530a <_malloc_r+0x1a>
 8015306:	42a9      	cmp	r1, r5
 8015308:	d903      	bls.n	8015312 <_malloc_r+0x22>
 801530a:	230c      	movs	r3, #12
 801530c:	6033      	str	r3, [r6, #0]
 801530e:	2000      	movs	r0, #0
 8015310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015312:	f002 ffdf 	bl	80182d4 <__malloc_lock>
 8015316:	4921      	ldr	r1, [pc, #132]	; (801539c <_malloc_r+0xac>)
 8015318:	680a      	ldr	r2, [r1, #0]
 801531a:	4614      	mov	r4, r2
 801531c:	b99c      	cbnz	r4, 8015346 <_malloc_r+0x56>
 801531e:	4f20      	ldr	r7, [pc, #128]	; (80153a0 <_malloc_r+0xb0>)
 8015320:	683b      	ldr	r3, [r7, #0]
 8015322:	b923      	cbnz	r3, 801532e <_malloc_r+0x3e>
 8015324:	4621      	mov	r1, r4
 8015326:	4630      	mov	r0, r6
 8015328:	f000 feb6 	bl	8016098 <_sbrk_r>
 801532c:	6038      	str	r0, [r7, #0]
 801532e:	4629      	mov	r1, r5
 8015330:	4630      	mov	r0, r6
 8015332:	f000 feb1 	bl	8016098 <_sbrk_r>
 8015336:	1c43      	adds	r3, r0, #1
 8015338:	d123      	bne.n	8015382 <_malloc_r+0x92>
 801533a:	230c      	movs	r3, #12
 801533c:	6033      	str	r3, [r6, #0]
 801533e:	4630      	mov	r0, r6
 8015340:	f002 ffce 	bl	80182e0 <__malloc_unlock>
 8015344:	e7e3      	b.n	801530e <_malloc_r+0x1e>
 8015346:	6823      	ldr	r3, [r4, #0]
 8015348:	1b5b      	subs	r3, r3, r5
 801534a:	d417      	bmi.n	801537c <_malloc_r+0x8c>
 801534c:	2b0b      	cmp	r3, #11
 801534e:	d903      	bls.n	8015358 <_malloc_r+0x68>
 8015350:	6023      	str	r3, [r4, #0]
 8015352:	441c      	add	r4, r3
 8015354:	6025      	str	r5, [r4, #0]
 8015356:	e004      	b.n	8015362 <_malloc_r+0x72>
 8015358:	6863      	ldr	r3, [r4, #4]
 801535a:	42a2      	cmp	r2, r4
 801535c:	bf0c      	ite	eq
 801535e:	600b      	streq	r3, [r1, #0]
 8015360:	6053      	strne	r3, [r2, #4]
 8015362:	4630      	mov	r0, r6
 8015364:	f002 ffbc 	bl	80182e0 <__malloc_unlock>
 8015368:	f104 000b 	add.w	r0, r4, #11
 801536c:	1d23      	adds	r3, r4, #4
 801536e:	f020 0007 	bic.w	r0, r0, #7
 8015372:	1ac2      	subs	r2, r0, r3
 8015374:	d0cc      	beq.n	8015310 <_malloc_r+0x20>
 8015376:	1a1b      	subs	r3, r3, r0
 8015378:	50a3      	str	r3, [r4, r2]
 801537a:	e7c9      	b.n	8015310 <_malloc_r+0x20>
 801537c:	4622      	mov	r2, r4
 801537e:	6864      	ldr	r4, [r4, #4]
 8015380:	e7cc      	b.n	801531c <_malloc_r+0x2c>
 8015382:	1cc4      	adds	r4, r0, #3
 8015384:	f024 0403 	bic.w	r4, r4, #3
 8015388:	42a0      	cmp	r0, r4
 801538a:	d0e3      	beq.n	8015354 <_malloc_r+0x64>
 801538c:	1a21      	subs	r1, r4, r0
 801538e:	4630      	mov	r0, r6
 8015390:	f000 fe82 	bl	8016098 <_sbrk_r>
 8015394:	3001      	adds	r0, #1
 8015396:	d1dd      	bne.n	8015354 <_malloc_r+0x64>
 8015398:	e7cf      	b.n	801533a <_malloc_r+0x4a>
 801539a:	bf00      	nop
 801539c:	200085bc 	.word	0x200085bc
 80153a0:	200085c0 	.word	0x200085c0

080153a4 <__cvt>:
 80153a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80153a8:	ec55 4b10 	vmov	r4, r5, d0
 80153ac:	2d00      	cmp	r5, #0
 80153ae:	460e      	mov	r6, r1
 80153b0:	4619      	mov	r1, r3
 80153b2:	462b      	mov	r3, r5
 80153b4:	bfbb      	ittet	lt
 80153b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80153ba:	461d      	movlt	r5, r3
 80153bc:	2300      	movge	r3, #0
 80153be:	232d      	movlt	r3, #45	; 0x2d
 80153c0:	700b      	strb	r3, [r1, #0]
 80153c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80153c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80153c8:	4691      	mov	r9, r2
 80153ca:	f023 0820 	bic.w	r8, r3, #32
 80153ce:	bfbc      	itt	lt
 80153d0:	4622      	movlt	r2, r4
 80153d2:	4614      	movlt	r4, r2
 80153d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80153d8:	d005      	beq.n	80153e6 <__cvt+0x42>
 80153da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80153de:	d100      	bne.n	80153e2 <__cvt+0x3e>
 80153e0:	3601      	adds	r6, #1
 80153e2:	2102      	movs	r1, #2
 80153e4:	e000      	b.n	80153e8 <__cvt+0x44>
 80153e6:	2103      	movs	r1, #3
 80153e8:	ab03      	add	r3, sp, #12
 80153ea:	9301      	str	r3, [sp, #4]
 80153ec:	ab02      	add	r3, sp, #8
 80153ee:	9300      	str	r3, [sp, #0]
 80153f0:	ec45 4b10 	vmov	d0, r4, r5
 80153f4:	4653      	mov	r3, sl
 80153f6:	4632      	mov	r2, r6
 80153f8:	f001 fdfa 	bl	8016ff0 <_dtoa_r>
 80153fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015400:	4607      	mov	r7, r0
 8015402:	d102      	bne.n	801540a <__cvt+0x66>
 8015404:	f019 0f01 	tst.w	r9, #1
 8015408:	d022      	beq.n	8015450 <__cvt+0xac>
 801540a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801540e:	eb07 0906 	add.w	r9, r7, r6
 8015412:	d110      	bne.n	8015436 <__cvt+0x92>
 8015414:	783b      	ldrb	r3, [r7, #0]
 8015416:	2b30      	cmp	r3, #48	; 0x30
 8015418:	d10a      	bne.n	8015430 <__cvt+0x8c>
 801541a:	2200      	movs	r2, #0
 801541c:	2300      	movs	r3, #0
 801541e:	4620      	mov	r0, r4
 8015420:	4629      	mov	r1, r5
 8015422:	f7eb fb51 	bl	8000ac8 <__aeabi_dcmpeq>
 8015426:	b918      	cbnz	r0, 8015430 <__cvt+0x8c>
 8015428:	f1c6 0601 	rsb	r6, r6, #1
 801542c:	f8ca 6000 	str.w	r6, [sl]
 8015430:	f8da 3000 	ldr.w	r3, [sl]
 8015434:	4499      	add	r9, r3
 8015436:	2200      	movs	r2, #0
 8015438:	2300      	movs	r3, #0
 801543a:	4620      	mov	r0, r4
 801543c:	4629      	mov	r1, r5
 801543e:	f7eb fb43 	bl	8000ac8 <__aeabi_dcmpeq>
 8015442:	b108      	cbz	r0, 8015448 <__cvt+0xa4>
 8015444:	f8cd 900c 	str.w	r9, [sp, #12]
 8015448:	2230      	movs	r2, #48	; 0x30
 801544a:	9b03      	ldr	r3, [sp, #12]
 801544c:	454b      	cmp	r3, r9
 801544e:	d307      	bcc.n	8015460 <__cvt+0xbc>
 8015450:	9b03      	ldr	r3, [sp, #12]
 8015452:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015454:	1bdb      	subs	r3, r3, r7
 8015456:	4638      	mov	r0, r7
 8015458:	6013      	str	r3, [r2, #0]
 801545a:	b004      	add	sp, #16
 801545c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015460:	1c59      	adds	r1, r3, #1
 8015462:	9103      	str	r1, [sp, #12]
 8015464:	701a      	strb	r2, [r3, #0]
 8015466:	e7f0      	b.n	801544a <__cvt+0xa6>

08015468 <__exponent>:
 8015468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801546a:	4603      	mov	r3, r0
 801546c:	2900      	cmp	r1, #0
 801546e:	bfb8      	it	lt
 8015470:	4249      	neglt	r1, r1
 8015472:	f803 2b02 	strb.w	r2, [r3], #2
 8015476:	bfb4      	ite	lt
 8015478:	222d      	movlt	r2, #45	; 0x2d
 801547a:	222b      	movge	r2, #43	; 0x2b
 801547c:	2909      	cmp	r1, #9
 801547e:	7042      	strb	r2, [r0, #1]
 8015480:	dd2a      	ble.n	80154d8 <__exponent+0x70>
 8015482:	f10d 0407 	add.w	r4, sp, #7
 8015486:	46a4      	mov	ip, r4
 8015488:	270a      	movs	r7, #10
 801548a:	46a6      	mov	lr, r4
 801548c:	460a      	mov	r2, r1
 801548e:	fb91 f6f7 	sdiv	r6, r1, r7
 8015492:	fb07 1516 	mls	r5, r7, r6, r1
 8015496:	3530      	adds	r5, #48	; 0x30
 8015498:	2a63      	cmp	r2, #99	; 0x63
 801549a:	f104 34ff 	add.w	r4, r4, #4294967295
 801549e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80154a2:	4631      	mov	r1, r6
 80154a4:	dcf1      	bgt.n	801548a <__exponent+0x22>
 80154a6:	3130      	adds	r1, #48	; 0x30
 80154a8:	f1ae 0502 	sub.w	r5, lr, #2
 80154ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80154b0:	1c44      	adds	r4, r0, #1
 80154b2:	4629      	mov	r1, r5
 80154b4:	4561      	cmp	r1, ip
 80154b6:	d30a      	bcc.n	80154ce <__exponent+0x66>
 80154b8:	f10d 0209 	add.w	r2, sp, #9
 80154bc:	eba2 020e 	sub.w	r2, r2, lr
 80154c0:	4565      	cmp	r5, ip
 80154c2:	bf88      	it	hi
 80154c4:	2200      	movhi	r2, #0
 80154c6:	4413      	add	r3, r2
 80154c8:	1a18      	subs	r0, r3, r0
 80154ca:	b003      	add	sp, #12
 80154cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80154d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80154d6:	e7ed      	b.n	80154b4 <__exponent+0x4c>
 80154d8:	2330      	movs	r3, #48	; 0x30
 80154da:	3130      	adds	r1, #48	; 0x30
 80154dc:	7083      	strb	r3, [r0, #2]
 80154de:	70c1      	strb	r1, [r0, #3]
 80154e0:	1d03      	adds	r3, r0, #4
 80154e2:	e7f1      	b.n	80154c8 <__exponent+0x60>

080154e4 <_printf_float>:
 80154e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154e8:	ed2d 8b02 	vpush	{d8}
 80154ec:	b08d      	sub	sp, #52	; 0x34
 80154ee:	460c      	mov	r4, r1
 80154f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80154f4:	4616      	mov	r6, r2
 80154f6:	461f      	mov	r7, r3
 80154f8:	4605      	mov	r5, r0
 80154fa:	f002 fed5 	bl	80182a8 <_localeconv_r>
 80154fe:	f8d0 a000 	ldr.w	sl, [r0]
 8015502:	4650      	mov	r0, sl
 8015504:	f7ea fe64 	bl	80001d0 <strlen>
 8015508:	2300      	movs	r3, #0
 801550a:	930a      	str	r3, [sp, #40]	; 0x28
 801550c:	6823      	ldr	r3, [r4, #0]
 801550e:	9305      	str	r3, [sp, #20]
 8015510:	f8d8 3000 	ldr.w	r3, [r8]
 8015514:	f894 b018 	ldrb.w	fp, [r4, #24]
 8015518:	3307      	adds	r3, #7
 801551a:	f023 0307 	bic.w	r3, r3, #7
 801551e:	f103 0208 	add.w	r2, r3, #8
 8015522:	f8c8 2000 	str.w	r2, [r8]
 8015526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801552a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801552e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015532:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015536:	9307      	str	r3, [sp, #28]
 8015538:	f8cd 8018 	str.w	r8, [sp, #24]
 801553c:	ee08 0a10 	vmov	s16, r0
 8015540:	4b9f      	ldr	r3, [pc, #636]	; (80157c0 <_printf_float+0x2dc>)
 8015542:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015546:	f04f 32ff 	mov.w	r2, #4294967295
 801554a:	f7eb faef 	bl	8000b2c <__aeabi_dcmpun>
 801554e:	bb88      	cbnz	r0, 80155b4 <_printf_float+0xd0>
 8015550:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015554:	4b9a      	ldr	r3, [pc, #616]	; (80157c0 <_printf_float+0x2dc>)
 8015556:	f04f 32ff 	mov.w	r2, #4294967295
 801555a:	f7eb fac9 	bl	8000af0 <__aeabi_dcmple>
 801555e:	bb48      	cbnz	r0, 80155b4 <_printf_float+0xd0>
 8015560:	2200      	movs	r2, #0
 8015562:	2300      	movs	r3, #0
 8015564:	4640      	mov	r0, r8
 8015566:	4649      	mov	r1, r9
 8015568:	f7eb fab8 	bl	8000adc <__aeabi_dcmplt>
 801556c:	b110      	cbz	r0, 8015574 <_printf_float+0x90>
 801556e:	232d      	movs	r3, #45	; 0x2d
 8015570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015574:	4b93      	ldr	r3, [pc, #588]	; (80157c4 <_printf_float+0x2e0>)
 8015576:	4894      	ldr	r0, [pc, #592]	; (80157c8 <_printf_float+0x2e4>)
 8015578:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801557c:	bf94      	ite	ls
 801557e:	4698      	movls	r8, r3
 8015580:	4680      	movhi	r8, r0
 8015582:	2303      	movs	r3, #3
 8015584:	6123      	str	r3, [r4, #16]
 8015586:	9b05      	ldr	r3, [sp, #20]
 8015588:	f023 0204 	bic.w	r2, r3, #4
 801558c:	6022      	str	r2, [r4, #0]
 801558e:	f04f 0900 	mov.w	r9, #0
 8015592:	9700      	str	r7, [sp, #0]
 8015594:	4633      	mov	r3, r6
 8015596:	aa0b      	add	r2, sp, #44	; 0x2c
 8015598:	4621      	mov	r1, r4
 801559a:	4628      	mov	r0, r5
 801559c:	f000 f9d8 	bl	8015950 <_printf_common>
 80155a0:	3001      	adds	r0, #1
 80155a2:	f040 8090 	bne.w	80156c6 <_printf_float+0x1e2>
 80155a6:	f04f 30ff 	mov.w	r0, #4294967295
 80155aa:	b00d      	add	sp, #52	; 0x34
 80155ac:	ecbd 8b02 	vpop	{d8}
 80155b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155b4:	4642      	mov	r2, r8
 80155b6:	464b      	mov	r3, r9
 80155b8:	4640      	mov	r0, r8
 80155ba:	4649      	mov	r1, r9
 80155bc:	f7eb fab6 	bl	8000b2c <__aeabi_dcmpun>
 80155c0:	b140      	cbz	r0, 80155d4 <_printf_float+0xf0>
 80155c2:	464b      	mov	r3, r9
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	bfbc      	itt	lt
 80155c8:	232d      	movlt	r3, #45	; 0x2d
 80155ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80155ce:	487f      	ldr	r0, [pc, #508]	; (80157cc <_printf_float+0x2e8>)
 80155d0:	4b7f      	ldr	r3, [pc, #508]	; (80157d0 <_printf_float+0x2ec>)
 80155d2:	e7d1      	b.n	8015578 <_printf_float+0x94>
 80155d4:	6863      	ldr	r3, [r4, #4]
 80155d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80155da:	9206      	str	r2, [sp, #24]
 80155dc:	1c5a      	adds	r2, r3, #1
 80155de:	d13f      	bne.n	8015660 <_printf_float+0x17c>
 80155e0:	2306      	movs	r3, #6
 80155e2:	6063      	str	r3, [r4, #4]
 80155e4:	9b05      	ldr	r3, [sp, #20]
 80155e6:	6861      	ldr	r1, [r4, #4]
 80155e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80155ec:	2300      	movs	r3, #0
 80155ee:	9303      	str	r3, [sp, #12]
 80155f0:	ab0a      	add	r3, sp, #40	; 0x28
 80155f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80155f6:	ab09      	add	r3, sp, #36	; 0x24
 80155f8:	ec49 8b10 	vmov	d0, r8, r9
 80155fc:	9300      	str	r3, [sp, #0]
 80155fe:	6022      	str	r2, [r4, #0]
 8015600:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015604:	4628      	mov	r0, r5
 8015606:	f7ff fecd 	bl	80153a4 <__cvt>
 801560a:	9b06      	ldr	r3, [sp, #24]
 801560c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801560e:	2b47      	cmp	r3, #71	; 0x47
 8015610:	4680      	mov	r8, r0
 8015612:	d108      	bne.n	8015626 <_printf_float+0x142>
 8015614:	1cc8      	adds	r0, r1, #3
 8015616:	db02      	blt.n	801561e <_printf_float+0x13a>
 8015618:	6863      	ldr	r3, [r4, #4]
 801561a:	4299      	cmp	r1, r3
 801561c:	dd41      	ble.n	80156a2 <_printf_float+0x1be>
 801561e:	f1ab 0b02 	sub.w	fp, fp, #2
 8015622:	fa5f fb8b 	uxtb.w	fp, fp
 8015626:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801562a:	d820      	bhi.n	801566e <_printf_float+0x18a>
 801562c:	3901      	subs	r1, #1
 801562e:	465a      	mov	r2, fp
 8015630:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015634:	9109      	str	r1, [sp, #36]	; 0x24
 8015636:	f7ff ff17 	bl	8015468 <__exponent>
 801563a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801563c:	1813      	adds	r3, r2, r0
 801563e:	2a01      	cmp	r2, #1
 8015640:	4681      	mov	r9, r0
 8015642:	6123      	str	r3, [r4, #16]
 8015644:	dc02      	bgt.n	801564c <_printf_float+0x168>
 8015646:	6822      	ldr	r2, [r4, #0]
 8015648:	07d2      	lsls	r2, r2, #31
 801564a:	d501      	bpl.n	8015650 <_printf_float+0x16c>
 801564c:	3301      	adds	r3, #1
 801564e:	6123      	str	r3, [r4, #16]
 8015650:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015654:	2b00      	cmp	r3, #0
 8015656:	d09c      	beq.n	8015592 <_printf_float+0xae>
 8015658:	232d      	movs	r3, #45	; 0x2d
 801565a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801565e:	e798      	b.n	8015592 <_printf_float+0xae>
 8015660:	9a06      	ldr	r2, [sp, #24]
 8015662:	2a47      	cmp	r2, #71	; 0x47
 8015664:	d1be      	bne.n	80155e4 <_printf_float+0x100>
 8015666:	2b00      	cmp	r3, #0
 8015668:	d1bc      	bne.n	80155e4 <_printf_float+0x100>
 801566a:	2301      	movs	r3, #1
 801566c:	e7b9      	b.n	80155e2 <_printf_float+0xfe>
 801566e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8015672:	d118      	bne.n	80156a6 <_printf_float+0x1c2>
 8015674:	2900      	cmp	r1, #0
 8015676:	6863      	ldr	r3, [r4, #4]
 8015678:	dd0b      	ble.n	8015692 <_printf_float+0x1ae>
 801567a:	6121      	str	r1, [r4, #16]
 801567c:	b913      	cbnz	r3, 8015684 <_printf_float+0x1a0>
 801567e:	6822      	ldr	r2, [r4, #0]
 8015680:	07d0      	lsls	r0, r2, #31
 8015682:	d502      	bpl.n	801568a <_printf_float+0x1a6>
 8015684:	3301      	adds	r3, #1
 8015686:	440b      	add	r3, r1
 8015688:	6123      	str	r3, [r4, #16]
 801568a:	65a1      	str	r1, [r4, #88]	; 0x58
 801568c:	f04f 0900 	mov.w	r9, #0
 8015690:	e7de      	b.n	8015650 <_printf_float+0x16c>
 8015692:	b913      	cbnz	r3, 801569a <_printf_float+0x1b6>
 8015694:	6822      	ldr	r2, [r4, #0]
 8015696:	07d2      	lsls	r2, r2, #31
 8015698:	d501      	bpl.n	801569e <_printf_float+0x1ba>
 801569a:	3302      	adds	r3, #2
 801569c:	e7f4      	b.n	8015688 <_printf_float+0x1a4>
 801569e:	2301      	movs	r3, #1
 80156a0:	e7f2      	b.n	8015688 <_printf_float+0x1a4>
 80156a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80156a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156a8:	4299      	cmp	r1, r3
 80156aa:	db05      	blt.n	80156b8 <_printf_float+0x1d4>
 80156ac:	6823      	ldr	r3, [r4, #0]
 80156ae:	6121      	str	r1, [r4, #16]
 80156b0:	07d8      	lsls	r0, r3, #31
 80156b2:	d5ea      	bpl.n	801568a <_printf_float+0x1a6>
 80156b4:	1c4b      	adds	r3, r1, #1
 80156b6:	e7e7      	b.n	8015688 <_printf_float+0x1a4>
 80156b8:	2900      	cmp	r1, #0
 80156ba:	bfd4      	ite	le
 80156bc:	f1c1 0202 	rsble	r2, r1, #2
 80156c0:	2201      	movgt	r2, #1
 80156c2:	4413      	add	r3, r2
 80156c4:	e7e0      	b.n	8015688 <_printf_float+0x1a4>
 80156c6:	6823      	ldr	r3, [r4, #0]
 80156c8:	055a      	lsls	r2, r3, #21
 80156ca:	d407      	bmi.n	80156dc <_printf_float+0x1f8>
 80156cc:	6923      	ldr	r3, [r4, #16]
 80156ce:	4642      	mov	r2, r8
 80156d0:	4631      	mov	r1, r6
 80156d2:	4628      	mov	r0, r5
 80156d4:	47b8      	blx	r7
 80156d6:	3001      	adds	r0, #1
 80156d8:	d12c      	bne.n	8015734 <_printf_float+0x250>
 80156da:	e764      	b.n	80155a6 <_printf_float+0xc2>
 80156dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80156e0:	f240 80e0 	bls.w	80158a4 <_printf_float+0x3c0>
 80156e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80156e8:	2200      	movs	r2, #0
 80156ea:	2300      	movs	r3, #0
 80156ec:	f7eb f9ec 	bl	8000ac8 <__aeabi_dcmpeq>
 80156f0:	2800      	cmp	r0, #0
 80156f2:	d034      	beq.n	801575e <_printf_float+0x27a>
 80156f4:	4a37      	ldr	r2, [pc, #220]	; (80157d4 <_printf_float+0x2f0>)
 80156f6:	2301      	movs	r3, #1
 80156f8:	4631      	mov	r1, r6
 80156fa:	4628      	mov	r0, r5
 80156fc:	47b8      	blx	r7
 80156fe:	3001      	adds	r0, #1
 8015700:	f43f af51 	beq.w	80155a6 <_printf_float+0xc2>
 8015704:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015708:	429a      	cmp	r2, r3
 801570a:	db02      	blt.n	8015712 <_printf_float+0x22e>
 801570c:	6823      	ldr	r3, [r4, #0]
 801570e:	07d8      	lsls	r0, r3, #31
 8015710:	d510      	bpl.n	8015734 <_printf_float+0x250>
 8015712:	ee18 3a10 	vmov	r3, s16
 8015716:	4652      	mov	r2, sl
 8015718:	4631      	mov	r1, r6
 801571a:	4628      	mov	r0, r5
 801571c:	47b8      	blx	r7
 801571e:	3001      	adds	r0, #1
 8015720:	f43f af41 	beq.w	80155a6 <_printf_float+0xc2>
 8015724:	f04f 0800 	mov.w	r8, #0
 8015728:	f104 091a 	add.w	r9, r4, #26
 801572c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801572e:	3b01      	subs	r3, #1
 8015730:	4543      	cmp	r3, r8
 8015732:	dc09      	bgt.n	8015748 <_printf_float+0x264>
 8015734:	6823      	ldr	r3, [r4, #0]
 8015736:	079b      	lsls	r3, r3, #30
 8015738:	f100 8105 	bmi.w	8015946 <_printf_float+0x462>
 801573c:	68e0      	ldr	r0, [r4, #12]
 801573e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015740:	4298      	cmp	r0, r3
 8015742:	bfb8      	it	lt
 8015744:	4618      	movlt	r0, r3
 8015746:	e730      	b.n	80155aa <_printf_float+0xc6>
 8015748:	2301      	movs	r3, #1
 801574a:	464a      	mov	r2, r9
 801574c:	4631      	mov	r1, r6
 801574e:	4628      	mov	r0, r5
 8015750:	47b8      	blx	r7
 8015752:	3001      	adds	r0, #1
 8015754:	f43f af27 	beq.w	80155a6 <_printf_float+0xc2>
 8015758:	f108 0801 	add.w	r8, r8, #1
 801575c:	e7e6      	b.n	801572c <_printf_float+0x248>
 801575e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015760:	2b00      	cmp	r3, #0
 8015762:	dc39      	bgt.n	80157d8 <_printf_float+0x2f4>
 8015764:	4a1b      	ldr	r2, [pc, #108]	; (80157d4 <_printf_float+0x2f0>)
 8015766:	2301      	movs	r3, #1
 8015768:	4631      	mov	r1, r6
 801576a:	4628      	mov	r0, r5
 801576c:	47b8      	blx	r7
 801576e:	3001      	adds	r0, #1
 8015770:	f43f af19 	beq.w	80155a6 <_printf_float+0xc2>
 8015774:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015778:	4313      	orrs	r3, r2
 801577a:	d102      	bne.n	8015782 <_printf_float+0x29e>
 801577c:	6823      	ldr	r3, [r4, #0]
 801577e:	07d9      	lsls	r1, r3, #31
 8015780:	d5d8      	bpl.n	8015734 <_printf_float+0x250>
 8015782:	ee18 3a10 	vmov	r3, s16
 8015786:	4652      	mov	r2, sl
 8015788:	4631      	mov	r1, r6
 801578a:	4628      	mov	r0, r5
 801578c:	47b8      	blx	r7
 801578e:	3001      	adds	r0, #1
 8015790:	f43f af09 	beq.w	80155a6 <_printf_float+0xc2>
 8015794:	f04f 0900 	mov.w	r9, #0
 8015798:	f104 0a1a 	add.w	sl, r4, #26
 801579c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801579e:	425b      	negs	r3, r3
 80157a0:	454b      	cmp	r3, r9
 80157a2:	dc01      	bgt.n	80157a8 <_printf_float+0x2c4>
 80157a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157a6:	e792      	b.n	80156ce <_printf_float+0x1ea>
 80157a8:	2301      	movs	r3, #1
 80157aa:	4652      	mov	r2, sl
 80157ac:	4631      	mov	r1, r6
 80157ae:	4628      	mov	r0, r5
 80157b0:	47b8      	blx	r7
 80157b2:	3001      	adds	r0, #1
 80157b4:	f43f aef7 	beq.w	80155a6 <_printf_float+0xc2>
 80157b8:	f109 0901 	add.w	r9, r9, #1
 80157bc:	e7ee      	b.n	801579c <_printf_float+0x2b8>
 80157be:	bf00      	nop
 80157c0:	7fefffff 	.word	0x7fefffff
 80157c4:	0801b784 	.word	0x0801b784
 80157c8:	0801b788 	.word	0x0801b788
 80157cc:	0801b790 	.word	0x0801b790
 80157d0:	0801b78c 	.word	0x0801b78c
 80157d4:	0801b794 	.word	0x0801b794
 80157d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80157da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80157dc:	429a      	cmp	r2, r3
 80157de:	bfa8      	it	ge
 80157e0:	461a      	movge	r2, r3
 80157e2:	2a00      	cmp	r2, #0
 80157e4:	4691      	mov	r9, r2
 80157e6:	dc37      	bgt.n	8015858 <_printf_float+0x374>
 80157e8:	f04f 0b00 	mov.w	fp, #0
 80157ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80157f0:	f104 021a 	add.w	r2, r4, #26
 80157f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80157f6:	9305      	str	r3, [sp, #20]
 80157f8:	eba3 0309 	sub.w	r3, r3, r9
 80157fc:	455b      	cmp	r3, fp
 80157fe:	dc33      	bgt.n	8015868 <_printf_float+0x384>
 8015800:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015804:	429a      	cmp	r2, r3
 8015806:	db3b      	blt.n	8015880 <_printf_float+0x39c>
 8015808:	6823      	ldr	r3, [r4, #0]
 801580a:	07da      	lsls	r2, r3, #31
 801580c:	d438      	bmi.n	8015880 <_printf_float+0x39c>
 801580e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015810:	9b05      	ldr	r3, [sp, #20]
 8015812:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015814:	1ad3      	subs	r3, r2, r3
 8015816:	eba2 0901 	sub.w	r9, r2, r1
 801581a:	4599      	cmp	r9, r3
 801581c:	bfa8      	it	ge
 801581e:	4699      	movge	r9, r3
 8015820:	f1b9 0f00 	cmp.w	r9, #0
 8015824:	dc35      	bgt.n	8015892 <_printf_float+0x3ae>
 8015826:	f04f 0800 	mov.w	r8, #0
 801582a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801582e:	f104 0a1a 	add.w	sl, r4, #26
 8015832:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015836:	1a9b      	subs	r3, r3, r2
 8015838:	eba3 0309 	sub.w	r3, r3, r9
 801583c:	4543      	cmp	r3, r8
 801583e:	f77f af79 	ble.w	8015734 <_printf_float+0x250>
 8015842:	2301      	movs	r3, #1
 8015844:	4652      	mov	r2, sl
 8015846:	4631      	mov	r1, r6
 8015848:	4628      	mov	r0, r5
 801584a:	47b8      	blx	r7
 801584c:	3001      	adds	r0, #1
 801584e:	f43f aeaa 	beq.w	80155a6 <_printf_float+0xc2>
 8015852:	f108 0801 	add.w	r8, r8, #1
 8015856:	e7ec      	b.n	8015832 <_printf_float+0x34e>
 8015858:	4613      	mov	r3, r2
 801585a:	4631      	mov	r1, r6
 801585c:	4642      	mov	r2, r8
 801585e:	4628      	mov	r0, r5
 8015860:	47b8      	blx	r7
 8015862:	3001      	adds	r0, #1
 8015864:	d1c0      	bne.n	80157e8 <_printf_float+0x304>
 8015866:	e69e      	b.n	80155a6 <_printf_float+0xc2>
 8015868:	2301      	movs	r3, #1
 801586a:	4631      	mov	r1, r6
 801586c:	4628      	mov	r0, r5
 801586e:	9205      	str	r2, [sp, #20]
 8015870:	47b8      	blx	r7
 8015872:	3001      	adds	r0, #1
 8015874:	f43f ae97 	beq.w	80155a6 <_printf_float+0xc2>
 8015878:	9a05      	ldr	r2, [sp, #20]
 801587a:	f10b 0b01 	add.w	fp, fp, #1
 801587e:	e7b9      	b.n	80157f4 <_printf_float+0x310>
 8015880:	ee18 3a10 	vmov	r3, s16
 8015884:	4652      	mov	r2, sl
 8015886:	4631      	mov	r1, r6
 8015888:	4628      	mov	r0, r5
 801588a:	47b8      	blx	r7
 801588c:	3001      	adds	r0, #1
 801588e:	d1be      	bne.n	801580e <_printf_float+0x32a>
 8015890:	e689      	b.n	80155a6 <_printf_float+0xc2>
 8015892:	9a05      	ldr	r2, [sp, #20]
 8015894:	464b      	mov	r3, r9
 8015896:	4442      	add	r2, r8
 8015898:	4631      	mov	r1, r6
 801589a:	4628      	mov	r0, r5
 801589c:	47b8      	blx	r7
 801589e:	3001      	adds	r0, #1
 80158a0:	d1c1      	bne.n	8015826 <_printf_float+0x342>
 80158a2:	e680      	b.n	80155a6 <_printf_float+0xc2>
 80158a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80158a6:	2a01      	cmp	r2, #1
 80158a8:	dc01      	bgt.n	80158ae <_printf_float+0x3ca>
 80158aa:	07db      	lsls	r3, r3, #31
 80158ac:	d538      	bpl.n	8015920 <_printf_float+0x43c>
 80158ae:	2301      	movs	r3, #1
 80158b0:	4642      	mov	r2, r8
 80158b2:	4631      	mov	r1, r6
 80158b4:	4628      	mov	r0, r5
 80158b6:	47b8      	blx	r7
 80158b8:	3001      	adds	r0, #1
 80158ba:	f43f ae74 	beq.w	80155a6 <_printf_float+0xc2>
 80158be:	ee18 3a10 	vmov	r3, s16
 80158c2:	4652      	mov	r2, sl
 80158c4:	4631      	mov	r1, r6
 80158c6:	4628      	mov	r0, r5
 80158c8:	47b8      	blx	r7
 80158ca:	3001      	adds	r0, #1
 80158cc:	f43f ae6b 	beq.w	80155a6 <_printf_float+0xc2>
 80158d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80158d4:	2200      	movs	r2, #0
 80158d6:	2300      	movs	r3, #0
 80158d8:	f7eb f8f6 	bl	8000ac8 <__aeabi_dcmpeq>
 80158dc:	b9d8      	cbnz	r0, 8015916 <_printf_float+0x432>
 80158de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158e0:	f108 0201 	add.w	r2, r8, #1
 80158e4:	3b01      	subs	r3, #1
 80158e6:	4631      	mov	r1, r6
 80158e8:	4628      	mov	r0, r5
 80158ea:	47b8      	blx	r7
 80158ec:	3001      	adds	r0, #1
 80158ee:	d10e      	bne.n	801590e <_printf_float+0x42a>
 80158f0:	e659      	b.n	80155a6 <_printf_float+0xc2>
 80158f2:	2301      	movs	r3, #1
 80158f4:	4652      	mov	r2, sl
 80158f6:	4631      	mov	r1, r6
 80158f8:	4628      	mov	r0, r5
 80158fa:	47b8      	blx	r7
 80158fc:	3001      	adds	r0, #1
 80158fe:	f43f ae52 	beq.w	80155a6 <_printf_float+0xc2>
 8015902:	f108 0801 	add.w	r8, r8, #1
 8015906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015908:	3b01      	subs	r3, #1
 801590a:	4543      	cmp	r3, r8
 801590c:	dcf1      	bgt.n	80158f2 <_printf_float+0x40e>
 801590e:	464b      	mov	r3, r9
 8015910:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015914:	e6dc      	b.n	80156d0 <_printf_float+0x1ec>
 8015916:	f04f 0800 	mov.w	r8, #0
 801591a:	f104 0a1a 	add.w	sl, r4, #26
 801591e:	e7f2      	b.n	8015906 <_printf_float+0x422>
 8015920:	2301      	movs	r3, #1
 8015922:	4642      	mov	r2, r8
 8015924:	e7df      	b.n	80158e6 <_printf_float+0x402>
 8015926:	2301      	movs	r3, #1
 8015928:	464a      	mov	r2, r9
 801592a:	4631      	mov	r1, r6
 801592c:	4628      	mov	r0, r5
 801592e:	47b8      	blx	r7
 8015930:	3001      	adds	r0, #1
 8015932:	f43f ae38 	beq.w	80155a6 <_printf_float+0xc2>
 8015936:	f108 0801 	add.w	r8, r8, #1
 801593a:	68e3      	ldr	r3, [r4, #12]
 801593c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801593e:	1a5b      	subs	r3, r3, r1
 8015940:	4543      	cmp	r3, r8
 8015942:	dcf0      	bgt.n	8015926 <_printf_float+0x442>
 8015944:	e6fa      	b.n	801573c <_printf_float+0x258>
 8015946:	f04f 0800 	mov.w	r8, #0
 801594a:	f104 0919 	add.w	r9, r4, #25
 801594e:	e7f4      	b.n	801593a <_printf_float+0x456>

08015950 <_printf_common>:
 8015950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015954:	4616      	mov	r6, r2
 8015956:	4699      	mov	r9, r3
 8015958:	688a      	ldr	r2, [r1, #8]
 801595a:	690b      	ldr	r3, [r1, #16]
 801595c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015960:	4293      	cmp	r3, r2
 8015962:	bfb8      	it	lt
 8015964:	4613      	movlt	r3, r2
 8015966:	6033      	str	r3, [r6, #0]
 8015968:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801596c:	4607      	mov	r7, r0
 801596e:	460c      	mov	r4, r1
 8015970:	b10a      	cbz	r2, 8015976 <_printf_common+0x26>
 8015972:	3301      	adds	r3, #1
 8015974:	6033      	str	r3, [r6, #0]
 8015976:	6823      	ldr	r3, [r4, #0]
 8015978:	0699      	lsls	r1, r3, #26
 801597a:	bf42      	ittt	mi
 801597c:	6833      	ldrmi	r3, [r6, #0]
 801597e:	3302      	addmi	r3, #2
 8015980:	6033      	strmi	r3, [r6, #0]
 8015982:	6825      	ldr	r5, [r4, #0]
 8015984:	f015 0506 	ands.w	r5, r5, #6
 8015988:	d106      	bne.n	8015998 <_printf_common+0x48>
 801598a:	f104 0a19 	add.w	sl, r4, #25
 801598e:	68e3      	ldr	r3, [r4, #12]
 8015990:	6832      	ldr	r2, [r6, #0]
 8015992:	1a9b      	subs	r3, r3, r2
 8015994:	42ab      	cmp	r3, r5
 8015996:	dc26      	bgt.n	80159e6 <_printf_common+0x96>
 8015998:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801599c:	1e13      	subs	r3, r2, #0
 801599e:	6822      	ldr	r2, [r4, #0]
 80159a0:	bf18      	it	ne
 80159a2:	2301      	movne	r3, #1
 80159a4:	0692      	lsls	r2, r2, #26
 80159a6:	d42b      	bmi.n	8015a00 <_printf_common+0xb0>
 80159a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80159ac:	4649      	mov	r1, r9
 80159ae:	4638      	mov	r0, r7
 80159b0:	47c0      	blx	r8
 80159b2:	3001      	adds	r0, #1
 80159b4:	d01e      	beq.n	80159f4 <_printf_common+0xa4>
 80159b6:	6823      	ldr	r3, [r4, #0]
 80159b8:	68e5      	ldr	r5, [r4, #12]
 80159ba:	6832      	ldr	r2, [r6, #0]
 80159bc:	f003 0306 	and.w	r3, r3, #6
 80159c0:	2b04      	cmp	r3, #4
 80159c2:	bf08      	it	eq
 80159c4:	1aad      	subeq	r5, r5, r2
 80159c6:	68a3      	ldr	r3, [r4, #8]
 80159c8:	6922      	ldr	r2, [r4, #16]
 80159ca:	bf0c      	ite	eq
 80159cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80159d0:	2500      	movne	r5, #0
 80159d2:	4293      	cmp	r3, r2
 80159d4:	bfc4      	itt	gt
 80159d6:	1a9b      	subgt	r3, r3, r2
 80159d8:	18ed      	addgt	r5, r5, r3
 80159da:	2600      	movs	r6, #0
 80159dc:	341a      	adds	r4, #26
 80159de:	42b5      	cmp	r5, r6
 80159e0:	d11a      	bne.n	8015a18 <_printf_common+0xc8>
 80159e2:	2000      	movs	r0, #0
 80159e4:	e008      	b.n	80159f8 <_printf_common+0xa8>
 80159e6:	2301      	movs	r3, #1
 80159e8:	4652      	mov	r2, sl
 80159ea:	4649      	mov	r1, r9
 80159ec:	4638      	mov	r0, r7
 80159ee:	47c0      	blx	r8
 80159f0:	3001      	adds	r0, #1
 80159f2:	d103      	bne.n	80159fc <_printf_common+0xac>
 80159f4:	f04f 30ff 	mov.w	r0, #4294967295
 80159f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159fc:	3501      	adds	r5, #1
 80159fe:	e7c6      	b.n	801598e <_printf_common+0x3e>
 8015a00:	18e1      	adds	r1, r4, r3
 8015a02:	1c5a      	adds	r2, r3, #1
 8015a04:	2030      	movs	r0, #48	; 0x30
 8015a06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015a0a:	4422      	add	r2, r4
 8015a0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015a10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015a14:	3302      	adds	r3, #2
 8015a16:	e7c7      	b.n	80159a8 <_printf_common+0x58>
 8015a18:	2301      	movs	r3, #1
 8015a1a:	4622      	mov	r2, r4
 8015a1c:	4649      	mov	r1, r9
 8015a1e:	4638      	mov	r0, r7
 8015a20:	47c0      	blx	r8
 8015a22:	3001      	adds	r0, #1
 8015a24:	d0e6      	beq.n	80159f4 <_printf_common+0xa4>
 8015a26:	3601      	adds	r6, #1
 8015a28:	e7d9      	b.n	80159de <_printf_common+0x8e>
	...

08015a2c <_printf_i>:
 8015a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015a30:	460c      	mov	r4, r1
 8015a32:	4691      	mov	r9, r2
 8015a34:	7e27      	ldrb	r7, [r4, #24]
 8015a36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015a38:	2f78      	cmp	r7, #120	; 0x78
 8015a3a:	4680      	mov	r8, r0
 8015a3c:	469a      	mov	sl, r3
 8015a3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015a42:	d807      	bhi.n	8015a54 <_printf_i+0x28>
 8015a44:	2f62      	cmp	r7, #98	; 0x62
 8015a46:	d80a      	bhi.n	8015a5e <_printf_i+0x32>
 8015a48:	2f00      	cmp	r7, #0
 8015a4a:	f000 80d8 	beq.w	8015bfe <_printf_i+0x1d2>
 8015a4e:	2f58      	cmp	r7, #88	; 0x58
 8015a50:	f000 80a3 	beq.w	8015b9a <_printf_i+0x16e>
 8015a54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015a58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015a5c:	e03a      	b.n	8015ad4 <_printf_i+0xa8>
 8015a5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015a62:	2b15      	cmp	r3, #21
 8015a64:	d8f6      	bhi.n	8015a54 <_printf_i+0x28>
 8015a66:	a001      	add	r0, pc, #4	; (adr r0, 8015a6c <_printf_i+0x40>)
 8015a68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015a6c:	08015ac5 	.word	0x08015ac5
 8015a70:	08015ad9 	.word	0x08015ad9
 8015a74:	08015a55 	.word	0x08015a55
 8015a78:	08015a55 	.word	0x08015a55
 8015a7c:	08015a55 	.word	0x08015a55
 8015a80:	08015a55 	.word	0x08015a55
 8015a84:	08015ad9 	.word	0x08015ad9
 8015a88:	08015a55 	.word	0x08015a55
 8015a8c:	08015a55 	.word	0x08015a55
 8015a90:	08015a55 	.word	0x08015a55
 8015a94:	08015a55 	.word	0x08015a55
 8015a98:	08015be5 	.word	0x08015be5
 8015a9c:	08015b09 	.word	0x08015b09
 8015aa0:	08015bc7 	.word	0x08015bc7
 8015aa4:	08015a55 	.word	0x08015a55
 8015aa8:	08015a55 	.word	0x08015a55
 8015aac:	08015c07 	.word	0x08015c07
 8015ab0:	08015a55 	.word	0x08015a55
 8015ab4:	08015b09 	.word	0x08015b09
 8015ab8:	08015a55 	.word	0x08015a55
 8015abc:	08015a55 	.word	0x08015a55
 8015ac0:	08015bcf 	.word	0x08015bcf
 8015ac4:	680b      	ldr	r3, [r1, #0]
 8015ac6:	1d1a      	adds	r2, r3, #4
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	600a      	str	r2, [r1, #0]
 8015acc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015ad0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015ad4:	2301      	movs	r3, #1
 8015ad6:	e0a3      	b.n	8015c20 <_printf_i+0x1f4>
 8015ad8:	6825      	ldr	r5, [r4, #0]
 8015ada:	6808      	ldr	r0, [r1, #0]
 8015adc:	062e      	lsls	r6, r5, #24
 8015ade:	f100 0304 	add.w	r3, r0, #4
 8015ae2:	d50a      	bpl.n	8015afa <_printf_i+0xce>
 8015ae4:	6805      	ldr	r5, [r0, #0]
 8015ae6:	600b      	str	r3, [r1, #0]
 8015ae8:	2d00      	cmp	r5, #0
 8015aea:	da03      	bge.n	8015af4 <_printf_i+0xc8>
 8015aec:	232d      	movs	r3, #45	; 0x2d
 8015aee:	426d      	negs	r5, r5
 8015af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015af4:	485e      	ldr	r0, [pc, #376]	; (8015c70 <_printf_i+0x244>)
 8015af6:	230a      	movs	r3, #10
 8015af8:	e019      	b.n	8015b2e <_printf_i+0x102>
 8015afa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015afe:	6805      	ldr	r5, [r0, #0]
 8015b00:	600b      	str	r3, [r1, #0]
 8015b02:	bf18      	it	ne
 8015b04:	b22d      	sxthne	r5, r5
 8015b06:	e7ef      	b.n	8015ae8 <_printf_i+0xbc>
 8015b08:	680b      	ldr	r3, [r1, #0]
 8015b0a:	6825      	ldr	r5, [r4, #0]
 8015b0c:	1d18      	adds	r0, r3, #4
 8015b0e:	6008      	str	r0, [r1, #0]
 8015b10:	0628      	lsls	r0, r5, #24
 8015b12:	d501      	bpl.n	8015b18 <_printf_i+0xec>
 8015b14:	681d      	ldr	r5, [r3, #0]
 8015b16:	e002      	b.n	8015b1e <_printf_i+0xf2>
 8015b18:	0669      	lsls	r1, r5, #25
 8015b1a:	d5fb      	bpl.n	8015b14 <_printf_i+0xe8>
 8015b1c:	881d      	ldrh	r5, [r3, #0]
 8015b1e:	4854      	ldr	r0, [pc, #336]	; (8015c70 <_printf_i+0x244>)
 8015b20:	2f6f      	cmp	r7, #111	; 0x6f
 8015b22:	bf0c      	ite	eq
 8015b24:	2308      	moveq	r3, #8
 8015b26:	230a      	movne	r3, #10
 8015b28:	2100      	movs	r1, #0
 8015b2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015b2e:	6866      	ldr	r6, [r4, #4]
 8015b30:	60a6      	str	r6, [r4, #8]
 8015b32:	2e00      	cmp	r6, #0
 8015b34:	bfa2      	ittt	ge
 8015b36:	6821      	ldrge	r1, [r4, #0]
 8015b38:	f021 0104 	bicge.w	r1, r1, #4
 8015b3c:	6021      	strge	r1, [r4, #0]
 8015b3e:	b90d      	cbnz	r5, 8015b44 <_printf_i+0x118>
 8015b40:	2e00      	cmp	r6, #0
 8015b42:	d04d      	beq.n	8015be0 <_printf_i+0x1b4>
 8015b44:	4616      	mov	r6, r2
 8015b46:	fbb5 f1f3 	udiv	r1, r5, r3
 8015b4a:	fb03 5711 	mls	r7, r3, r1, r5
 8015b4e:	5dc7      	ldrb	r7, [r0, r7]
 8015b50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015b54:	462f      	mov	r7, r5
 8015b56:	42bb      	cmp	r3, r7
 8015b58:	460d      	mov	r5, r1
 8015b5a:	d9f4      	bls.n	8015b46 <_printf_i+0x11a>
 8015b5c:	2b08      	cmp	r3, #8
 8015b5e:	d10b      	bne.n	8015b78 <_printf_i+0x14c>
 8015b60:	6823      	ldr	r3, [r4, #0]
 8015b62:	07df      	lsls	r7, r3, #31
 8015b64:	d508      	bpl.n	8015b78 <_printf_i+0x14c>
 8015b66:	6923      	ldr	r3, [r4, #16]
 8015b68:	6861      	ldr	r1, [r4, #4]
 8015b6a:	4299      	cmp	r1, r3
 8015b6c:	bfde      	ittt	le
 8015b6e:	2330      	movle	r3, #48	; 0x30
 8015b70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015b74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015b78:	1b92      	subs	r2, r2, r6
 8015b7a:	6122      	str	r2, [r4, #16]
 8015b7c:	f8cd a000 	str.w	sl, [sp]
 8015b80:	464b      	mov	r3, r9
 8015b82:	aa03      	add	r2, sp, #12
 8015b84:	4621      	mov	r1, r4
 8015b86:	4640      	mov	r0, r8
 8015b88:	f7ff fee2 	bl	8015950 <_printf_common>
 8015b8c:	3001      	adds	r0, #1
 8015b8e:	d14c      	bne.n	8015c2a <_printf_i+0x1fe>
 8015b90:	f04f 30ff 	mov.w	r0, #4294967295
 8015b94:	b004      	add	sp, #16
 8015b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b9a:	4835      	ldr	r0, [pc, #212]	; (8015c70 <_printf_i+0x244>)
 8015b9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015ba0:	6823      	ldr	r3, [r4, #0]
 8015ba2:	680e      	ldr	r6, [r1, #0]
 8015ba4:	061f      	lsls	r7, r3, #24
 8015ba6:	f856 5b04 	ldr.w	r5, [r6], #4
 8015baa:	600e      	str	r6, [r1, #0]
 8015bac:	d514      	bpl.n	8015bd8 <_printf_i+0x1ac>
 8015bae:	07d9      	lsls	r1, r3, #31
 8015bb0:	bf44      	itt	mi
 8015bb2:	f043 0320 	orrmi.w	r3, r3, #32
 8015bb6:	6023      	strmi	r3, [r4, #0]
 8015bb8:	b91d      	cbnz	r5, 8015bc2 <_printf_i+0x196>
 8015bba:	6823      	ldr	r3, [r4, #0]
 8015bbc:	f023 0320 	bic.w	r3, r3, #32
 8015bc0:	6023      	str	r3, [r4, #0]
 8015bc2:	2310      	movs	r3, #16
 8015bc4:	e7b0      	b.n	8015b28 <_printf_i+0xfc>
 8015bc6:	6823      	ldr	r3, [r4, #0]
 8015bc8:	f043 0320 	orr.w	r3, r3, #32
 8015bcc:	6023      	str	r3, [r4, #0]
 8015bce:	2378      	movs	r3, #120	; 0x78
 8015bd0:	4828      	ldr	r0, [pc, #160]	; (8015c74 <_printf_i+0x248>)
 8015bd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015bd6:	e7e3      	b.n	8015ba0 <_printf_i+0x174>
 8015bd8:	065e      	lsls	r6, r3, #25
 8015bda:	bf48      	it	mi
 8015bdc:	b2ad      	uxthmi	r5, r5
 8015bde:	e7e6      	b.n	8015bae <_printf_i+0x182>
 8015be0:	4616      	mov	r6, r2
 8015be2:	e7bb      	b.n	8015b5c <_printf_i+0x130>
 8015be4:	680b      	ldr	r3, [r1, #0]
 8015be6:	6826      	ldr	r6, [r4, #0]
 8015be8:	6960      	ldr	r0, [r4, #20]
 8015bea:	1d1d      	adds	r5, r3, #4
 8015bec:	600d      	str	r5, [r1, #0]
 8015bee:	0635      	lsls	r5, r6, #24
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	d501      	bpl.n	8015bf8 <_printf_i+0x1cc>
 8015bf4:	6018      	str	r0, [r3, #0]
 8015bf6:	e002      	b.n	8015bfe <_printf_i+0x1d2>
 8015bf8:	0671      	lsls	r1, r6, #25
 8015bfa:	d5fb      	bpl.n	8015bf4 <_printf_i+0x1c8>
 8015bfc:	8018      	strh	r0, [r3, #0]
 8015bfe:	2300      	movs	r3, #0
 8015c00:	6123      	str	r3, [r4, #16]
 8015c02:	4616      	mov	r6, r2
 8015c04:	e7ba      	b.n	8015b7c <_printf_i+0x150>
 8015c06:	680b      	ldr	r3, [r1, #0]
 8015c08:	1d1a      	adds	r2, r3, #4
 8015c0a:	600a      	str	r2, [r1, #0]
 8015c0c:	681e      	ldr	r6, [r3, #0]
 8015c0e:	6862      	ldr	r2, [r4, #4]
 8015c10:	2100      	movs	r1, #0
 8015c12:	4630      	mov	r0, r6
 8015c14:	f7ea fae4 	bl	80001e0 <memchr>
 8015c18:	b108      	cbz	r0, 8015c1e <_printf_i+0x1f2>
 8015c1a:	1b80      	subs	r0, r0, r6
 8015c1c:	6060      	str	r0, [r4, #4]
 8015c1e:	6863      	ldr	r3, [r4, #4]
 8015c20:	6123      	str	r3, [r4, #16]
 8015c22:	2300      	movs	r3, #0
 8015c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015c28:	e7a8      	b.n	8015b7c <_printf_i+0x150>
 8015c2a:	6923      	ldr	r3, [r4, #16]
 8015c2c:	4632      	mov	r2, r6
 8015c2e:	4649      	mov	r1, r9
 8015c30:	4640      	mov	r0, r8
 8015c32:	47d0      	blx	sl
 8015c34:	3001      	adds	r0, #1
 8015c36:	d0ab      	beq.n	8015b90 <_printf_i+0x164>
 8015c38:	6823      	ldr	r3, [r4, #0]
 8015c3a:	079b      	lsls	r3, r3, #30
 8015c3c:	d413      	bmi.n	8015c66 <_printf_i+0x23a>
 8015c3e:	68e0      	ldr	r0, [r4, #12]
 8015c40:	9b03      	ldr	r3, [sp, #12]
 8015c42:	4298      	cmp	r0, r3
 8015c44:	bfb8      	it	lt
 8015c46:	4618      	movlt	r0, r3
 8015c48:	e7a4      	b.n	8015b94 <_printf_i+0x168>
 8015c4a:	2301      	movs	r3, #1
 8015c4c:	4632      	mov	r2, r6
 8015c4e:	4649      	mov	r1, r9
 8015c50:	4640      	mov	r0, r8
 8015c52:	47d0      	blx	sl
 8015c54:	3001      	adds	r0, #1
 8015c56:	d09b      	beq.n	8015b90 <_printf_i+0x164>
 8015c58:	3501      	adds	r5, #1
 8015c5a:	68e3      	ldr	r3, [r4, #12]
 8015c5c:	9903      	ldr	r1, [sp, #12]
 8015c5e:	1a5b      	subs	r3, r3, r1
 8015c60:	42ab      	cmp	r3, r5
 8015c62:	dcf2      	bgt.n	8015c4a <_printf_i+0x21e>
 8015c64:	e7eb      	b.n	8015c3e <_printf_i+0x212>
 8015c66:	2500      	movs	r5, #0
 8015c68:	f104 0619 	add.w	r6, r4, #25
 8015c6c:	e7f5      	b.n	8015c5a <_printf_i+0x22e>
 8015c6e:	bf00      	nop
 8015c70:	0801b796 	.word	0x0801b796
 8015c74:	0801b7a7 	.word	0x0801b7a7

08015c78 <_scanf_float>:
 8015c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c7c:	b087      	sub	sp, #28
 8015c7e:	4617      	mov	r7, r2
 8015c80:	9303      	str	r3, [sp, #12]
 8015c82:	688b      	ldr	r3, [r1, #8]
 8015c84:	1e5a      	subs	r2, r3, #1
 8015c86:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015c8a:	bf83      	ittte	hi
 8015c8c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015c90:	195b      	addhi	r3, r3, r5
 8015c92:	9302      	strhi	r3, [sp, #8]
 8015c94:	2300      	movls	r3, #0
 8015c96:	bf86      	itte	hi
 8015c98:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015c9c:	608b      	strhi	r3, [r1, #8]
 8015c9e:	9302      	strls	r3, [sp, #8]
 8015ca0:	680b      	ldr	r3, [r1, #0]
 8015ca2:	468b      	mov	fp, r1
 8015ca4:	2500      	movs	r5, #0
 8015ca6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015caa:	f84b 3b1c 	str.w	r3, [fp], #28
 8015cae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015cb2:	4680      	mov	r8, r0
 8015cb4:	460c      	mov	r4, r1
 8015cb6:	465e      	mov	r6, fp
 8015cb8:	46aa      	mov	sl, r5
 8015cba:	46a9      	mov	r9, r5
 8015cbc:	9501      	str	r5, [sp, #4]
 8015cbe:	68a2      	ldr	r2, [r4, #8]
 8015cc0:	b152      	cbz	r2, 8015cd8 <_scanf_float+0x60>
 8015cc2:	683b      	ldr	r3, [r7, #0]
 8015cc4:	781b      	ldrb	r3, [r3, #0]
 8015cc6:	2b4e      	cmp	r3, #78	; 0x4e
 8015cc8:	d864      	bhi.n	8015d94 <_scanf_float+0x11c>
 8015cca:	2b40      	cmp	r3, #64	; 0x40
 8015ccc:	d83c      	bhi.n	8015d48 <_scanf_float+0xd0>
 8015cce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8015cd2:	b2c8      	uxtb	r0, r1
 8015cd4:	280e      	cmp	r0, #14
 8015cd6:	d93a      	bls.n	8015d4e <_scanf_float+0xd6>
 8015cd8:	f1b9 0f00 	cmp.w	r9, #0
 8015cdc:	d003      	beq.n	8015ce6 <_scanf_float+0x6e>
 8015cde:	6823      	ldr	r3, [r4, #0]
 8015ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015ce4:	6023      	str	r3, [r4, #0]
 8015ce6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015cea:	f1ba 0f01 	cmp.w	sl, #1
 8015cee:	f200 8113 	bhi.w	8015f18 <_scanf_float+0x2a0>
 8015cf2:	455e      	cmp	r6, fp
 8015cf4:	f200 8105 	bhi.w	8015f02 <_scanf_float+0x28a>
 8015cf8:	2501      	movs	r5, #1
 8015cfa:	4628      	mov	r0, r5
 8015cfc:	b007      	add	sp, #28
 8015cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d02:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8015d06:	2a0d      	cmp	r2, #13
 8015d08:	d8e6      	bhi.n	8015cd8 <_scanf_float+0x60>
 8015d0a:	a101      	add	r1, pc, #4	; (adr r1, 8015d10 <_scanf_float+0x98>)
 8015d0c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015d10:	08015e4f 	.word	0x08015e4f
 8015d14:	08015cd9 	.word	0x08015cd9
 8015d18:	08015cd9 	.word	0x08015cd9
 8015d1c:	08015cd9 	.word	0x08015cd9
 8015d20:	08015eaf 	.word	0x08015eaf
 8015d24:	08015e87 	.word	0x08015e87
 8015d28:	08015cd9 	.word	0x08015cd9
 8015d2c:	08015cd9 	.word	0x08015cd9
 8015d30:	08015e5d 	.word	0x08015e5d
 8015d34:	08015cd9 	.word	0x08015cd9
 8015d38:	08015cd9 	.word	0x08015cd9
 8015d3c:	08015cd9 	.word	0x08015cd9
 8015d40:	08015cd9 	.word	0x08015cd9
 8015d44:	08015e15 	.word	0x08015e15
 8015d48:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8015d4c:	e7db      	b.n	8015d06 <_scanf_float+0x8e>
 8015d4e:	290e      	cmp	r1, #14
 8015d50:	d8c2      	bhi.n	8015cd8 <_scanf_float+0x60>
 8015d52:	a001      	add	r0, pc, #4	; (adr r0, 8015d58 <_scanf_float+0xe0>)
 8015d54:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8015d58:	08015e07 	.word	0x08015e07
 8015d5c:	08015cd9 	.word	0x08015cd9
 8015d60:	08015e07 	.word	0x08015e07
 8015d64:	08015e9b 	.word	0x08015e9b
 8015d68:	08015cd9 	.word	0x08015cd9
 8015d6c:	08015db5 	.word	0x08015db5
 8015d70:	08015df1 	.word	0x08015df1
 8015d74:	08015df1 	.word	0x08015df1
 8015d78:	08015df1 	.word	0x08015df1
 8015d7c:	08015df1 	.word	0x08015df1
 8015d80:	08015df1 	.word	0x08015df1
 8015d84:	08015df1 	.word	0x08015df1
 8015d88:	08015df1 	.word	0x08015df1
 8015d8c:	08015df1 	.word	0x08015df1
 8015d90:	08015df1 	.word	0x08015df1
 8015d94:	2b6e      	cmp	r3, #110	; 0x6e
 8015d96:	d809      	bhi.n	8015dac <_scanf_float+0x134>
 8015d98:	2b60      	cmp	r3, #96	; 0x60
 8015d9a:	d8b2      	bhi.n	8015d02 <_scanf_float+0x8a>
 8015d9c:	2b54      	cmp	r3, #84	; 0x54
 8015d9e:	d077      	beq.n	8015e90 <_scanf_float+0x218>
 8015da0:	2b59      	cmp	r3, #89	; 0x59
 8015da2:	d199      	bne.n	8015cd8 <_scanf_float+0x60>
 8015da4:	2d07      	cmp	r5, #7
 8015da6:	d197      	bne.n	8015cd8 <_scanf_float+0x60>
 8015da8:	2508      	movs	r5, #8
 8015daa:	e029      	b.n	8015e00 <_scanf_float+0x188>
 8015dac:	2b74      	cmp	r3, #116	; 0x74
 8015dae:	d06f      	beq.n	8015e90 <_scanf_float+0x218>
 8015db0:	2b79      	cmp	r3, #121	; 0x79
 8015db2:	e7f6      	b.n	8015da2 <_scanf_float+0x12a>
 8015db4:	6821      	ldr	r1, [r4, #0]
 8015db6:	05c8      	lsls	r0, r1, #23
 8015db8:	d51a      	bpl.n	8015df0 <_scanf_float+0x178>
 8015dba:	9b02      	ldr	r3, [sp, #8]
 8015dbc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015dc0:	6021      	str	r1, [r4, #0]
 8015dc2:	f109 0901 	add.w	r9, r9, #1
 8015dc6:	b11b      	cbz	r3, 8015dd0 <_scanf_float+0x158>
 8015dc8:	3b01      	subs	r3, #1
 8015dca:	3201      	adds	r2, #1
 8015dcc:	9302      	str	r3, [sp, #8]
 8015dce:	60a2      	str	r2, [r4, #8]
 8015dd0:	68a3      	ldr	r3, [r4, #8]
 8015dd2:	3b01      	subs	r3, #1
 8015dd4:	60a3      	str	r3, [r4, #8]
 8015dd6:	6923      	ldr	r3, [r4, #16]
 8015dd8:	3301      	adds	r3, #1
 8015dda:	6123      	str	r3, [r4, #16]
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	3b01      	subs	r3, #1
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	607b      	str	r3, [r7, #4]
 8015de4:	f340 8084 	ble.w	8015ef0 <_scanf_float+0x278>
 8015de8:	683b      	ldr	r3, [r7, #0]
 8015dea:	3301      	adds	r3, #1
 8015dec:	603b      	str	r3, [r7, #0]
 8015dee:	e766      	b.n	8015cbe <_scanf_float+0x46>
 8015df0:	eb1a 0f05 	cmn.w	sl, r5
 8015df4:	f47f af70 	bne.w	8015cd8 <_scanf_float+0x60>
 8015df8:	6822      	ldr	r2, [r4, #0]
 8015dfa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8015dfe:	6022      	str	r2, [r4, #0]
 8015e00:	f806 3b01 	strb.w	r3, [r6], #1
 8015e04:	e7e4      	b.n	8015dd0 <_scanf_float+0x158>
 8015e06:	6822      	ldr	r2, [r4, #0]
 8015e08:	0610      	lsls	r0, r2, #24
 8015e0a:	f57f af65 	bpl.w	8015cd8 <_scanf_float+0x60>
 8015e0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015e12:	e7f4      	b.n	8015dfe <_scanf_float+0x186>
 8015e14:	f1ba 0f00 	cmp.w	sl, #0
 8015e18:	d10e      	bne.n	8015e38 <_scanf_float+0x1c0>
 8015e1a:	f1b9 0f00 	cmp.w	r9, #0
 8015e1e:	d10e      	bne.n	8015e3e <_scanf_float+0x1c6>
 8015e20:	6822      	ldr	r2, [r4, #0]
 8015e22:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8015e26:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8015e2a:	d108      	bne.n	8015e3e <_scanf_float+0x1c6>
 8015e2c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015e30:	6022      	str	r2, [r4, #0]
 8015e32:	f04f 0a01 	mov.w	sl, #1
 8015e36:	e7e3      	b.n	8015e00 <_scanf_float+0x188>
 8015e38:	f1ba 0f02 	cmp.w	sl, #2
 8015e3c:	d055      	beq.n	8015eea <_scanf_float+0x272>
 8015e3e:	2d01      	cmp	r5, #1
 8015e40:	d002      	beq.n	8015e48 <_scanf_float+0x1d0>
 8015e42:	2d04      	cmp	r5, #4
 8015e44:	f47f af48 	bne.w	8015cd8 <_scanf_float+0x60>
 8015e48:	3501      	adds	r5, #1
 8015e4a:	b2ed      	uxtb	r5, r5
 8015e4c:	e7d8      	b.n	8015e00 <_scanf_float+0x188>
 8015e4e:	f1ba 0f01 	cmp.w	sl, #1
 8015e52:	f47f af41 	bne.w	8015cd8 <_scanf_float+0x60>
 8015e56:	f04f 0a02 	mov.w	sl, #2
 8015e5a:	e7d1      	b.n	8015e00 <_scanf_float+0x188>
 8015e5c:	b97d      	cbnz	r5, 8015e7e <_scanf_float+0x206>
 8015e5e:	f1b9 0f00 	cmp.w	r9, #0
 8015e62:	f47f af3c 	bne.w	8015cde <_scanf_float+0x66>
 8015e66:	6822      	ldr	r2, [r4, #0]
 8015e68:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8015e6c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8015e70:	f47f af39 	bne.w	8015ce6 <_scanf_float+0x6e>
 8015e74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015e78:	6022      	str	r2, [r4, #0]
 8015e7a:	2501      	movs	r5, #1
 8015e7c:	e7c0      	b.n	8015e00 <_scanf_float+0x188>
 8015e7e:	2d03      	cmp	r5, #3
 8015e80:	d0e2      	beq.n	8015e48 <_scanf_float+0x1d0>
 8015e82:	2d05      	cmp	r5, #5
 8015e84:	e7de      	b.n	8015e44 <_scanf_float+0x1cc>
 8015e86:	2d02      	cmp	r5, #2
 8015e88:	f47f af26 	bne.w	8015cd8 <_scanf_float+0x60>
 8015e8c:	2503      	movs	r5, #3
 8015e8e:	e7b7      	b.n	8015e00 <_scanf_float+0x188>
 8015e90:	2d06      	cmp	r5, #6
 8015e92:	f47f af21 	bne.w	8015cd8 <_scanf_float+0x60>
 8015e96:	2507      	movs	r5, #7
 8015e98:	e7b2      	b.n	8015e00 <_scanf_float+0x188>
 8015e9a:	6822      	ldr	r2, [r4, #0]
 8015e9c:	0591      	lsls	r1, r2, #22
 8015e9e:	f57f af1b 	bpl.w	8015cd8 <_scanf_float+0x60>
 8015ea2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8015ea6:	6022      	str	r2, [r4, #0]
 8015ea8:	f8cd 9004 	str.w	r9, [sp, #4]
 8015eac:	e7a8      	b.n	8015e00 <_scanf_float+0x188>
 8015eae:	6822      	ldr	r2, [r4, #0]
 8015eb0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8015eb4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8015eb8:	d006      	beq.n	8015ec8 <_scanf_float+0x250>
 8015eba:	0550      	lsls	r0, r2, #21
 8015ebc:	f57f af0c 	bpl.w	8015cd8 <_scanf_float+0x60>
 8015ec0:	f1b9 0f00 	cmp.w	r9, #0
 8015ec4:	f43f af0f 	beq.w	8015ce6 <_scanf_float+0x6e>
 8015ec8:	0591      	lsls	r1, r2, #22
 8015eca:	bf58      	it	pl
 8015ecc:	9901      	ldrpl	r1, [sp, #4]
 8015ece:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015ed2:	bf58      	it	pl
 8015ed4:	eba9 0101 	subpl.w	r1, r9, r1
 8015ed8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8015edc:	bf58      	it	pl
 8015ede:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8015ee2:	6022      	str	r2, [r4, #0]
 8015ee4:	f04f 0900 	mov.w	r9, #0
 8015ee8:	e78a      	b.n	8015e00 <_scanf_float+0x188>
 8015eea:	f04f 0a03 	mov.w	sl, #3
 8015eee:	e787      	b.n	8015e00 <_scanf_float+0x188>
 8015ef0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015ef4:	4639      	mov	r1, r7
 8015ef6:	4640      	mov	r0, r8
 8015ef8:	4798      	blx	r3
 8015efa:	2800      	cmp	r0, #0
 8015efc:	f43f aedf 	beq.w	8015cbe <_scanf_float+0x46>
 8015f00:	e6ea      	b.n	8015cd8 <_scanf_float+0x60>
 8015f02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015f06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015f0a:	463a      	mov	r2, r7
 8015f0c:	4640      	mov	r0, r8
 8015f0e:	4798      	blx	r3
 8015f10:	6923      	ldr	r3, [r4, #16]
 8015f12:	3b01      	subs	r3, #1
 8015f14:	6123      	str	r3, [r4, #16]
 8015f16:	e6ec      	b.n	8015cf2 <_scanf_float+0x7a>
 8015f18:	1e6b      	subs	r3, r5, #1
 8015f1a:	2b06      	cmp	r3, #6
 8015f1c:	d825      	bhi.n	8015f6a <_scanf_float+0x2f2>
 8015f1e:	2d02      	cmp	r5, #2
 8015f20:	d836      	bhi.n	8015f90 <_scanf_float+0x318>
 8015f22:	455e      	cmp	r6, fp
 8015f24:	f67f aee8 	bls.w	8015cf8 <_scanf_float+0x80>
 8015f28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015f2c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015f30:	463a      	mov	r2, r7
 8015f32:	4640      	mov	r0, r8
 8015f34:	4798      	blx	r3
 8015f36:	6923      	ldr	r3, [r4, #16]
 8015f38:	3b01      	subs	r3, #1
 8015f3a:	6123      	str	r3, [r4, #16]
 8015f3c:	e7f1      	b.n	8015f22 <_scanf_float+0x2aa>
 8015f3e:	9802      	ldr	r0, [sp, #8]
 8015f40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015f44:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8015f48:	9002      	str	r0, [sp, #8]
 8015f4a:	463a      	mov	r2, r7
 8015f4c:	4640      	mov	r0, r8
 8015f4e:	4798      	blx	r3
 8015f50:	6923      	ldr	r3, [r4, #16]
 8015f52:	3b01      	subs	r3, #1
 8015f54:	6123      	str	r3, [r4, #16]
 8015f56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015f5a:	fa5f fa8a 	uxtb.w	sl, sl
 8015f5e:	f1ba 0f02 	cmp.w	sl, #2
 8015f62:	d1ec      	bne.n	8015f3e <_scanf_float+0x2c6>
 8015f64:	3d03      	subs	r5, #3
 8015f66:	b2ed      	uxtb	r5, r5
 8015f68:	1b76      	subs	r6, r6, r5
 8015f6a:	6823      	ldr	r3, [r4, #0]
 8015f6c:	05da      	lsls	r2, r3, #23
 8015f6e:	d52f      	bpl.n	8015fd0 <_scanf_float+0x358>
 8015f70:	055b      	lsls	r3, r3, #21
 8015f72:	d510      	bpl.n	8015f96 <_scanf_float+0x31e>
 8015f74:	455e      	cmp	r6, fp
 8015f76:	f67f aebf 	bls.w	8015cf8 <_scanf_float+0x80>
 8015f7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015f7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015f82:	463a      	mov	r2, r7
 8015f84:	4640      	mov	r0, r8
 8015f86:	4798      	blx	r3
 8015f88:	6923      	ldr	r3, [r4, #16]
 8015f8a:	3b01      	subs	r3, #1
 8015f8c:	6123      	str	r3, [r4, #16]
 8015f8e:	e7f1      	b.n	8015f74 <_scanf_float+0x2fc>
 8015f90:	46aa      	mov	sl, r5
 8015f92:	9602      	str	r6, [sp, #8]
 8015f94:	e7df      	b.n	8015f56 <_scanf_float+0x2de>
 8015f96:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8015f9a:	6923      	ldr	r3, [r4, #16]
 8015f9c:	2965      	cmp	r1, #101	; 0x65
 8015f9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8015fa2:	f106 35ff 	add.w	r5, r6, #4294967295
 8015fa6:	6123      	str	r3, [r4, #16]
 8015fa8:	d00c      	beq.n	8015fc4 <_scanf_float+0x34c>
 8015faa:	2945      	cmp	r1, #69	; 0x45
 8015fac:	d00a      	beq.n	8015fc4 <_scanf_float+0x34c>
 8015fae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015fb2:	463a      	mov	r2, r7
 8015fb4:	4640      	mov	r0, r8
 8015fb6:	4798      	blx	r3
 8015fb8:	6923      	ldr	r3, [r4, #16]
 8015fba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8015fbe:	3b01      	subs	r3, #1
 8015fc0:	1eb5      	subs	r5, r6, #2
 8015fc2:	6123      	str	r3, [r4, #16]
 8015fc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015fc8:	463a      	mov	r2, r7
 8015fca:	4640      	mov	r0, r8
 8015fcc:	4798      	blx	r3
 8015fce:	462e      	mov	r6, r5
 8015fd0:	6825      	ldr	r5, [r4, #0]
 8015fd2:	f015 0510 	ands.w	r5, r5, #16
 8015fd6:	d158      	bne.n	801608a <_scanf_float+0x412>
 8015fd8:	7035      	strb	r5, [r6, #0]
 8015fda:	6823      	ldr	r3, [r4, #0]
 8015fdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015fe4:	d11c      	bne.n	8016020 <_scanf_float+0x3a8>
 8015fe6:	9b01      	ldr	r3, [sp, #4]
 8015fe8:	454b      	cmp	r3, r9
 8015fea:	eba3 0209 	sub.w	r2, r3, r9
 8015fee:	d124      	bne.n	801603a <_scanf_float+0x3c2>
 8015ff0:	2200      	movs	r2, #0
 8015ff2:	4659      	mov	r1, fp
 8015ff4:	4640      	mov	r0, r8
 8015ff6:	f000 fee1 	bl	8016dbc <_strtod_r>
 8015ffa:	9b03      	ldr	r3, [sp, #12]
 8015ffc:	6821      	ldr	r1, [r4, #0]
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	f011 0f02 	tst.w	r1, #2
 8016004:	ec57 6b10 	vmov	r6, r7, d0
 8016008:	f103 0204 	add.w	r2, r3, #4
 801600c:	d020      	beq.n	8016050 <_scanf_float+0x3d8>
 801600e:	9903      	ldr	r1, [sp, #12]
 8016010:	600a      	str	r2, [r1, #0]
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	e9c3 6700 	strd	r6, r7, [r3]
 8016018:	68e3      	ldr	r3, [r4, #12]
 801601a:	3301      	adds	r3, #1
 801601c:	60e3      	str	r3, [r4, #12]
 801601e:	e66c      	b.n	8015cfa <_scanf_float+0x82>
 8016020:	9b04      	ldr	r3, [sp, #16]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d0e4      	beq.n	8015ff0 <_scanf_float+0x378>
 8016026:	9905      	ldr	r1, [sp, #20]
 8016028:	230a      	movs	r3, #10
 801602a:	462a      	mov	r2, r5
 801602c:	3101      	adds	r1, #1
 801602e:	4640      	mov	r0, r8
 8016030:	f000 ff4e 	bl	8016ed0 <_strtol_r>
 8016034:	9b04      	ldr	r3, [sp, #16]
 8016036:	9e05      	ldr	r6, [sp, #20]
 8016038:	1ac2      	subs	r2, r0, r3
 801603a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801603e:	429e      	cmp	r6, r3
 8016040:	bf28      	it	cs
 8016042:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016046:	4912      	ldr	r1, [pc, #72]	; (8016090 <_scanf_float+0x418>)
 8016048:	4630      	mov	r0, r6
 801604a:	f000 f86f 	bl	801612c <siprintf>
 801604e:	e7cf      	b.n	8015ff0 <_scanf_float+0x378>
 8016050:	f011 0f04 	tst.w	r1, #4
 8016054:	9903      	ldr	r1, [sp, #12]
 8016056:	600a      	str	r2, [r1, #0]
 8016058:	d1db      	bne.n	8016012 <_scanf_float+0x39a>
 801605a:	f8d3 8000 	ldr.w	r8, [r3]
 801605e:	ee10 2a10 	vmov	r2, s0
 8016062:	ee10 0a10 	vmov	r0, s0
 8016066:	463b      	mov	r3, r7
 8016068:	4639      	mov	r1, r7
 801606a:	f7ea fd5f 	bl	8000b2c <__aeabi_dcmpun>
 801606e:	b128      	cbz	r0, 801607c <_scanf_float+0x404>
 8016070:	4808      	ldr	r0, [pc, #32]	; (8016094 <_scanf_float+0x41c>)
 8016072:	f000 f821 	bl	80160b8 <nanf>
 8016076:	ed88 0a00 	vstr	s0, [r8]
 801607a:	e7cd      	b.n	8016018 <_scanf_float+0x3a0>
 801607c:	4630      	mov	r0, r6
 801607e:	4639      	mov	r1, r7
 8016080:	f7ea fdb2 	bl	8000be8 <__aeabi_d2f>
 8016084:	f8c8 0000 	str.w	r0, [r8]
 8016088:	e7c6      	b.n	8016018 <_scanf_float+0x3a0>
 801608a:	2500      	movs	r5, #0
 801608c:	e635      	b.n	8015cfa <_scanf_float+0x82>
 801608e:	bf00      	nop
 8016090:	0801b7b8 	.word	0x0801b7b8
 8016094:	0801bbd0 	.word	0x0801bbd0

08016098 <_sbrk_r>:
 8016098:	b538      	push	{r3, r4, r5, lr}
 801609a:	4d06      	ldr	r5, [pc, #24]	; (80160b4 <_sbrk_r+0x1c>)
 801609c:	2300      	movs	r3, #0
 801609e:	4604      	mov	r4, r0
 80160a0:	4608      	mov	r0, r1
 80160a2:	602b      	str	r3, [r5, #0]
 80160a4:	f7f4 fa24 	bl	800a4f0 <_sbrk>
 80160a8:	1c43      	adds	r3, r0, #1
 80160aa:	d102      	bne.n	80160b2 <_sbrk_r+0x1a>
 80160ac:	682b      	ldr	r3, [r5, #0]
 80160ae:	b103      	cbz	r3, 80160b2 <_sbrk_r+0x1a>
 80160b0:	6023      	str	r3, [r4, #0]
 80160b2:	bd38      	pop	{r3, r4, r5, pc}
 80160b4:	20011abc 	.word	0x20011abc

080160b8 <nanf>:
 80160b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80160c0 <nanf+0x8>
 80160bc:	4770      	bx	lr
 80160be:	bf00      	nop
 80160c0:	7fc00000 	.word	0x7fc00000

080160c4 <sniprintf>:
 80160c4:	b40c      	push	{r2, r3}
 80160c6:	b530      	push	{r4, r5, lr}
 80160c8:	4b17      	ldr	r3, [pc, #92]	; (8016128 <sniprintf+0x64>)
 80160ca:	1e0c      	subs	r4, r1, #0
 80160cc:	681d      	ldr	r5, [r3, #0]
 80160ce:	b09d      	sub	sp, #116	; 0x74
 80160d0:	da08      	bge.n	80160e4 <sniprintf+0x20>
 80160d2:	238b      	movs	r3, #139	; 0x8b
 80160d4:	602b      	str	r3, [r5, #0]
 80160d6:	f04f 30ff 	mov.w	r0, #4294967295
 80160da:	b01d      	add	sp, #116	; 0x74
 80160dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80160e0:	b002      	add	sp, #8
 80160e2:	4770      	bx	lr
 80160e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80160e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80160ec:	bf14      	ite	ne
 80160ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 80160f2:	4623      	moveq	r3, r4
 80160f4:	9304      	str	r3, [sp, #16]
 80160f6:	9307      	str	r3, [sp, #28]
 80160f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80160fc:	9002      	str	r0, [sp, #8]
 80160fe:	9006      	str	r0, [sp, #24]
 8016100:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016104:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016106:	ab21      	add	r3, sp, #132	; 0x84
 8016108:	a902      	add	r1, sp, #8
 801610a:	4628      	mov	r0, r5
 801610c:	9301      	str	r3, [sp, #4]
 801610e:	f002 fe13 	bl	8018d38 <_svfiprintf_r>
 8016112:	1c43      	adds	r3, r0, #1
 8016114:	bfbc      	itt	lt
 8016116:	238b      	movlt	r3, #139	; 0x8b
 8016118:	602b      	strlt	r3, [r5, #0]
 801611a:	2c00      	cmp	r4, #0
 801611c:	d0dd      	beq.n	80160da <sniprintf+0x16>
 801611e:	9b02      	ldr	r3, [sp, #8]
 8016120:	2200      	movs	r2, #0
 8016122:	701a      	strb	r2, [r3, #0]
 8016124:	e7d9      	b.n	80160da <sniprintf+0x16>
 8016126:	bf00      	nop
 8016128:	20004210 	.word	0x20004210

0801612c <siprintf>:
 801612c:	b40e      	push	{r1, r2, r3}
 801612e:	b500      	push	{lr}
 8016130:	b09c      	sub	sp, #112	; 0x70
 8016132:	ab1d      	add	r3, sp, #116	; 0x74
 8016134:	9002      	str	r0, [sp, #8]
 8016136:	9006      	str	r0, [sp, #24]
 8016138:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801613c:	4809      	ldr	r0, [pc, #36]	; (8016164 <siprintf+0x38>)
 801613e:	9107      	str	r1, [sp, #28]
 8016140:	9104      	str	r1, [sp, #16]
 8016142:	4909      	ldr	r1, [pc, #36]	; (8016168 <siprintf+0x3c>)
 8016144:	f853 2b04 	ldr.w	r2, [r3], #4
 8016148:	9105      	str	r1, [sp, #20]
 801614a:	6800      	ldr	r0, [r0, #0]
 801614c:	9301      	str	r3, [sp, #4]
 801614e:	a902      	add	r1, sp, #8
 8016150:	f002 fdf2 	bl	8018d38 <_svfiprintf_r>
 8016154:	9b02      	ldr	r3, [sp, #8]
 8016156:	2200      	movs	r2, #0
 8016158:	701a      	strb	r2, [r3, #0]
 801615a:	b01c      	add	sp, #112	; 0x70
 801615c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016160:	b003      	add	sp, #12
 8016162:	4770      	bx	lr
 8016164:	20004210 	.word	0x20004210
 8016168:	ffff0208 	.word	0xffff0208

0801616c <sulp>:
 801616c:	b570      	push	{r4, r5, r6, lr}
 801616e:	4604      	mov	r4, r0
 8016170:	460d      	mov	r5, r1
 8016172:	ec45 4b10 	vmov	d0, r4, r5
 8016176:	4616      	mov	r6, r2
 8016178:	f002 fc24 	bl	80189c4 <__ulp>
 801617c:	ec51 0b10 	vmov	r0, r1, d0
 8016180:	b17e      	cbz	r6, 80161a2 <sulp+0x36>
 8016182:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016186:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801618a:	2b00      	cmp	r3, #0
 801618c:	dd09      	ble.n	80161a2 <sulp+0x36>
 801618e:	051b      	lsls	r3, r3, #20
 8016190:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016194:	2400      	movs	r4, #0
 8016196:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801619a:	4622      	mov	r2, r4
 801619c:	462b      	mov	r3, r5
 801619e:	f7ea fa2b 	bl	80005f8 <__aeabi_dmul>
 80161a2:	bd70      	pop	{r4, r5, r6, pc}
 80161a4:	0000      	movs	r0, r0
	...

080161a8 <_strtod_l>:
 80161a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161ac:	b0a3      	sub	sp, #140	; 0x8c
 80161ae:	461f      	mov	r7, r3
 80161b0:	2300      	movs	r3, #0
 80161b2:	931e      	str	r3, [sp, #120]	; 0x78
 80161b4:	4ba4      	ldr	r3, [pc, #656]	; (8016448 <_strtod_l+0x2a0>)
 80161b6:	9219      	str	r2, [sp, #100]	; 0x64
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	9307      	str	r3, [sp, #28]
 80161bc:	4604      	mov	r4, r0
 80161be:	4618      	mov	r0, r3
 80161c0:	4688      	mov	r8, r1
 80161c2:	f7ea f805 	bl	80001d0 <strlen>
 80161c6:	f04f 0a00 	mov.w	sl, #0
 80161ca:	4605      	mov	r5, r0
 80161cc:	f04f 0b00 	mov.w	fp, #0
 80161d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80161d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80161d6:	781a      	ldrb	r2, [r3, #0]
 80161d8:	2a2b      	cmp	r2, #43	; 0x2b
 80161da:	d04c      	beq.n	8016276 <_strtod_l+0xce>
 80161dc:	d839      	bhi.n	8016252 <_strtod_l+0xaa>
 80161de:	2a0d      	cmp	r2, #13
 80161e0:	d832      	bhi.n	8016248 <_strtod_l+0xa0>
 80161e2:	2a08      	cmp	r2, #8
 80161e4:	d832      	bhi.n	801624c <_strtod_l+0xa4>
 80161e6:	2a00      	cmp	r2, #0
 80161e8:	d03c      	beq.n	8016264 <_strtod_l+0xbc>
 80161ea:	2300      	movs	r3, #0
 80161ec:	930e      	str	r3, [sp, #56]	; 0x38
 80161ee:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80161f0:	7833      	ldrb	r3, [r6, #0]
 80161f2:	2b30      	cmp	r3, #48	; 0x30
 80161f4:	f040 80b4 	bne.w	8016360 <_strtod_l+0x1b8>
 80161f8:	7873      	ldrb	r3, [r6, #1]
 80161fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80161fe:	2b58      	cmp	r3, #88	; 0x58
 8016200:	d16c      	bne.n	80162dc <_strtod_l+0x134>
 8016202:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016204:	9301      	str	r3, [sp, #4]
 8016206:	ab1e      	add	r3, sp, #120	; 0x78
 8016208:	9702      	str	r7, [sp, #8]
 801620a:	9300      	str	r3, [sp, #0]
 801620c:	4a8f      	ldr	r2, [pc, #572]	; (801644c <_strtod_l+0x2a4>)
 801620e:	ab1f      	add	r3, sp, #124	; 0x7c
 8016210:	a91d      	add	r1, sp, #116	; 0x74
 8016212:	4620      	mov	r0, r4
 8016214:	f001 fd40 	bl	8017c98 <__gethex>
 8016218:	f010 0707 	ands.w	r7, r0, #7
 801621c:	4605      	mov	r5, r0
 801621e:	d005      	beq.n	801622c <_strtod_l+0x84>
 8016220:	2f06      	cmp	r7, #6
 8016222:	d12a      	bne.n	801627a <_strtod_l+0xd2>
 8016224:	3601      	adds	r6, #1
 8016226:	2300      	movs	r3, #0
 8016228:	961d      	str	r6, [sp, #116]	; 0x74
 801622a:	930e      	str	r3, [sp, #56]	; 0x38
 801622c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801622e:	2b00      	cmp	r3, #0
 8016230:	f040 8596 	bne.w	8016d60 <_strtod_l+0xbb8>
 8016234:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016236:	b1db      	cbz	r3, 8016270 <_strtod_l+0xc8>
 8016238:	4652      	mov	r2, sl
 801623a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801623e:	ec43 2b10 	vmov	d0, r2, r3
 8016242:	b023      	add	sp, #140	; 0x8c
 8016244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016248:	2a20      	cmp	r2, #32
 801624a:	d1ce      	bne.n	80161ea <_strtod_l+0x42>
 801624c:	3301      	adds	r3, #1
 801624e:	931d      	str	r3, [sp, #116]	; 0x74
 8016250:	e7c0      	b.n	80161d4 <_strtod_l+0x2c>
 8016252:	2a2d      	cmp	r2, #45	; 0x2d
 8016254:	d1c9      	bne.n	80161ea <_strtod_l+0x42>
 8016256:	2201      	movs	r2, #1
 8016258:	920e      	str	r2, [sp, #56]	; 0x38
 801625a:	1c5a      	adds	r2, r3, #1
 801625c:	921d      	str	r2, [sp, #116]	; 0x74
 801625e:	785b      	ldrb	r3, [r3, #1]
 8016260:	2b00      	cmp	r3, #0
 8016262:	d1c4      	bne.n	80161ee <_strtod_l+0x46>
 8016264:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016266:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801626a:	2b00      	cmp	r3, #0
 801626c:	f040 8576 	bne.w	8016d5c <_strtod_l+0xbb4>
 8016270:	4652      	mov	r2, sl
 8016272:	465b      	mov	r3, fp
 8016274:	e7e3      	b.n	801623e <_strtod_l+0x96>
 8016276:	2200      	movs	r2, #0
 8016278:	e7ee      	b.n	8016258 <_strtod_l+0xb0>
 801627a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801627c:	b13a      	cbz	r2, 801628e <_strtod_l+0xe6>
 801627e:	2135      	movs	r1, #53	; 0x35
 8016280:	a820      	add	r0, sp, #128	; 0x80
 8016282:	f002 fcaa 	bl	8018bda <__copybits>
 8016286:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016288:	4620      	mov	r0, r4
 801628a:	f002 f86f 	bl	801836c <_Bfree>
 801628e:	3f01      	subs	r7, #1
 8016290:	2f05      	cmp	r7, #5
 8016292:	d807      	bhi.n	80162a4 <_strtod_l+0xfc>
 8016294:	e8df f007 	tbb	[pc, r7]
 8016298:	1d180b0e 	.word	0x1d180b0e
 801629c:	030e      	.short	0x030e
 801629e:	f04f 0b00 	mov.w	fp, #0
 80162a2:	46da      	mov	sl, fp
 80162a4:	0728      	lsls	r0, r5, #28
 80162a6:	d5c1      	bpl.n	801622c <_strtod_l+0x84>
 80162a8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80162ac:	e7be      	b.n	801622c <_strtod_l+0x84>
 80162ae:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80162b2:	e7f7      	b.n	80162a4 <_strtod_l+0xfc>
 80162b4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80162b8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80162ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80162be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80162c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80162c6:	e7ed      	b.n	80162a4 <_strtod_l+0xfc>
 80162c8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8016450 <_strtod_l+0x2a8>
 80162cc:	f04f 0a00 	mov.w	sl, #0
 80162d0:	e7e8      	b.n	80162a4 <_strtod_l+0xfc>
 80162d2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80162d6:	f04f 3aff 	mov.w	sl, #4294967295
 80162da:	e7e3      	b.n	80162a4 <_strtod_l+0xfc>
 80162dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80162de:	1c5a      	adds	r2, r3, #1
 80162e0:	921d      	str	r2, [sp, #116]	; 0x74
 80162e2:	785b      	ldrb	r3, [r3, #1]
 80162e4:	2b30      	cmp	r3, #48	; 0x30
 80162e6:	d0f9      	beq.n	80162dc <_strtod_l+0x134>
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d09f      	beq.n	801622c <_strtod_l+0x84>
 80162ec:	2301      	movs	r3, #1
 80162ee:	f04f 0900 	mov.w	r9, #0
 80162f2:	9304      	str	r3, [sp, #16]
 80162f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80162f6:	930a      	str	r3, [sp, #40]	; 0x28
 80162f8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80162fc:	464f      	mov	r7, r9
 80162fe:	220a      	movs	r2, #10
 8016300:	981d      	ldr	r0, [sp, #116]	; 0x74
 8016302:	7806      	ldrb	r6, [r0, #0]
 8016304:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8016308:	b2d9      	uxtb	r1, r3
 801630a:	2909      	cmp	r1, #9
 801630c:	d92a      	bls.n	8016364 <_strtod_l+0x1bc>
 801630e:	9907      	ldr	r1, [sp, #28]
 8016310:	462a      	mov	r2, r5
 8016312:	f002 fe19 	bl	8018f48 <strncmp>
 8016316:	b398      	cbz	r0, 8016380 <_strtod_l+0x1d8>
 8016318:	2000      	movs	r0, #0
 801631a:	4633      	mov	r3, r6
 801631c:	463d      	mov	r5, r7
 801631e:	9007      	str	r0, [sp, #28]
 8016320:	4602      	mov	r2, r0
 8016322:	2b65      	cmp	r3, #101	; 0x65
 8016324:	d001      	beq.n	801632a <_strtod_l+0x182>
 8016326:	2b45      	cmp	r3, #69	; 0x45
 8016328:	d118      	bne.n	801635c <_strtod_l+0x1b4>
 801632a:	b91d      	cbnz	r5, 8016334 <_strtod_l+0x18c>
 801632c:	9b04      	ldr	r3, [sp, #16]
 801632e:	4303      	orrs	r3, r0
 8016330:	d098      	beq.n	8016264 <_strtod_l+0xbc>
 8016332:	2500      	movs	r5, #0
 8016334:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8016338:	f108 0301 	add.w	r3, r8, #1
 801633c:	931d      	str	r3, [sp, #116]	; 0x74
 801633e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016342:	2b2b      	cmp	r3, #43	; 0x2b
 8016344:	d075      	beq.n	8016432 <_strtod_l+0x28a>
 8016346:	2b2d      	cmp	r3, #45	; 0x2d
 8016348:	d07b      	beq.n	8016442 <_strtod_l+0x29a>
 801634a:	f04f 0c00 	mov.w	ip, #0
 801634e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016352:	2909      	cmp	r1, #9
 8016354:	f240 8082 	bls.w	801645c <_strtod_l+0x2b4>
 8016358:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801635c:	2600      	movs	r6, #0
 801635e:	e09d      	b.n	801649c <_strtod_l+0x2f4>
 8016360:	2300      	movs	r3, #0
 8016362:	e7c4      	b.n	80162ee <_strtod_l+0x146>
 8016364:	2f08      	cmp	r7, #8
 8016366:	bfd8      	it	le
 8016368:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801636a:	f100 0001 	add.w	r0, r0, #1
 801636e:	bfda      	itte	le
 8016370:	fb02 3301 	mlale	r3, r2, r1, r3
 8016374:	9309      	strle	r3, [sp, #36]	; 0x24
 8016376:	fb02 3909 	mlagt	r9, r2, r9, r3
 801637a:	3701      	adds	r7, #1
 801637c:	901d      	str	r0, [sp, #116]	; 0x74
 801637e:	e7bf      	b.n	8016300 <_strtod_l+0x158>
 8016380:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016382:	195a      	adds	r2, r3, r5
 8016384:	921d      	str	r2, [sp, #116]	; 0x74
 8016386:	5d5b      	ldrb	r3, [r3, r5]
 8016388:	2f00      	cmp	r7, #0
 801638a:	d037      	beq.n	80163fc <_strtod_l+0x254>
 801638c:	9007      	str	r0, [sp, #28]
 801638e:	463d      	mov	r5, r7
 8016390:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8016394:	2a09      	cmp	r2, #9
 8016396:	d912      	bls.n	80163be <_strtod_l+0x216>
 8016398:	2201      	movs	r2, #1
 801639a:	e7c2      	b.n	8016322 <_strtod_l+0x17a>
 801639c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801639e:	1c5a      	adds	r2, r3, #1
 80163a0:	921d      	str	r2, [sp, #116]	; 0x74
 80163a2:	785b      	ldrb	r3, [r3, #1]
 80163a4:	3001      	adds	r0, #1
 80163a6:	2b30      	cmp	r3, #48	; 0x30
 80163a8:	d0f8      	beq.n	801639c <_strtod_l+0x1f4>
 80163aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80163ae:	2a08      	cmp	r2, #8
 80163b0:	f200 84db 	bhi.w	8016d6a <_strtod_l+0xbc2>
 80163b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80163b6:	9007      	str	r0, [sp, #28]
 80163b8:	2000      	movs	r0, #0
 80163ba:	920a      	str	r2, [sp, #40]	; 0x28
 80163bc:	4605      	mov	r5, r0
 80163be:	3b30      	subs	r3, #48	; 0x30
 80163c0:	f100 0201 	add.w	r2, r0, #1
 80163c4:	d014      	beq.n	80163f0 <_strtod_l+0x248>
 80163c6:	9907      	ldr	r1, [sp, #28]
 80163c8:	4411      	add	r1, r2
 80163ca:	9107      	str	r1, [sp, #28]
 80163cc:	462a      	mov	r2, r5
 80163ce:	eb00 0e05 	add.w	lr, r0, r5
 80163d2:	210a      	movs	r1, #10
 80163d4:	4572      	cmp	r2, lr
 80163d6:	d113      	bne.n	8016400 <_strtod_l+0x258>
 80163d8:	182a      	adds	r2, r5, r0
 80163da:	2a08      	cmp	r2, #8
 80163dc:	f105 0501 	add.w	r5, r5, #1
 80163e0:	4405      	add	r5, r0
 80163e2:	dc1c      	bgt.n	801641e <_strtod_l+0x276>
 80163e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80163e6:	220a      	movs	r2, #10
 80163e8:	fb02 3301 	mla	r3, r2, r1, r3
 80163ec:	9309      	str	r3, [sp, #36]	; 0x24
 80163ee:	2200      	movs	r2, #0
 80163f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80163f2:	1c59      	adds	r1, r3, #1
 80163f4:	911d      	str	r1, [sp, #116]	; 0x74
 80163f6:	785b      	ldrb	r3, [r3, #1]
 80163f8:	4610      	mov	r0, r2
 80163fa:	e7c9      	b.n	8016390 <_strtod_l+0x1e8>
 80163fc:	4638      	mov	r0, r7
 80163fe:	e7d2      	b.n	80163a6 <_strtod_l+0x1fe>
 8016400:	2a08      	cmp	r2, #8
 8016402:	dc04      	bgt.n	801640e <_strtod_l+0x266>
 8016404:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8016406:	434e      	muls	r6, r1
 8016408:	9609      	str	r6, [sp, #36]	; 0x24
 801640a:	3201      	adds	r2, #1
 801640c:	e7e2      	b.n	80163d4 <_strtod_l+0x22c>
 801640e:	f102 0c01 	add.w	ip, r2, #1
 8016412:	f1bc 0f10 	cmp.w	ip, #16
 8016416:	bfd8      	it	le
 8016418:	fb01 f909 	mulle.w	r9, r1, r9
 801641c:	e7f5      	b.n	801640a <_strtod_l+0x262>
 801641e:	2d10      	cmp	r5, #16
 8016420:	bfdc      	itt	le
 8016422:	220a      	movle	r2, #10
 8016424:	fb02 3909 	mlale	r9, r2, r9, r3
 8016428:	e7e1      	b.n	80163ee <_strtod_l+0x246>
 801642a:	2300      	movs	r3, #0
 801642c:	9307      	str	r3, [sp, #28]
 801642e:	2201      	movs	r2, #1
 8016430:	e77c      	b.n	801632c <_strtod_l+0x184>
 8016432:	f04f 0c00 	mov.w	ip, #0
 8016436:	f108 0302 	add.w	r3, r8, #2
 801643a:	931d      	str	r3, [sp, #116]	; 0x74
 801643c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8016440:	e785      	b.n	801634e <_strtod_l+0x1a6>
 8016442:	f04f 0c01 	mov.w	ip, #1
 8016446:	e7f6      	b.n	8016436 <_strtod_l+0x28e>
 8016448:	0801ba10 	.word	0x0801ba10
 801644c:	0801b7c0 	.word	0x0801b7c0
 8016450:	7ff00000 	.word	0x7ff00000
 8016454:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016456:	1c59      	adds	r1, r3, #1
 8016458:	911d      	str	r1, [sp, #116]	; 0x74
 801645a:	785b      	ldrb	r3, [r3, #1]
 801645c:	2b30      	cmp	r3, #48	; 0x30
 801645e:	d0f9      	beq.n	8016454 <_strtod_l+0x2ac>
 8016460:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8016464:	2908      	cmp	r1, #8
 8016466:	f63f af79 	bhi.w	801635c <_strtod_l+0x1b4>
 801646a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801646e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016470:	9308      	str	r3, [sp, #32]
 8016472:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016474:	1c59      	adds	r1, r3, #1
 8016476:	911d      	str	r1, [sp, #116]	; 0x74
 8016478:	785b      	ldrb	r3, [r3, #1]
 801647a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801647e:	2e09      	cmp	r6, #9
 8016480:	d937      	bls.n	80164f2 <_strtod_l+0x34a>
 8016482:	9e08      	ldr	r6, [sp, #32]
 8016484:	1b89      	subs	r1, r1, r6
 8016486:	2908      	cmp	r1, #8
 8016488:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801648c:	dc02      	bgt.n	8016494 <_strtod_l+0x2ec>
 801648e:	4576      	cmp	r6, lr
 8016490:	bfa8      	it	ge
 8016492:	4676      	movge	r6, lr
 8016494:	f1bc 0f00 	cmp.w	ip, #0
 8016498:	d000      	beq.n	801649c <_strtod_l+0x2f4>
 801649a:	4276      	negs	r6, r6
 801649c:	2d00      	cmp	r5, #0
 801649e:	d14f      	bne.n	8016540 <_strtod_l+0x398>
 80164a0:	9904      	ldr	r1, [sp, #16]
 80164a2:	4301      	orrs	r1, r0
 80164a4:	f47f aec2 	bne.w	801622c <_strtod_l+0x84>
 80164a8:	2a00      	cmp	r2, #0
 80164aa:	f47f aedb 	bne.w	8016264 <_strtod_l+0xbc>
 80164ae:	2b69      	cmp	r3, #105	; 0x69
 80164b0:	d027      	beq.n	8016502 <_strtod_l+0x35a>
 80164b2:	dc24      	bgt.n	80164fe <_strtod_l+0x356>
 80164b4:	2b49      	cmp	r3, #73	; 0x49
 80164b6:	d024      	beq.n	8016502 <_strtod_l+0x35a>
 80164b8:	2b4e      	cmp	r3, #78	; 0x4e
 80164ba:	f47f aed3 	bne.w	8016264 <_strtod_l+0xbc>
 80164be:	499e      	ldr	r1, [pc, #632]	; (8016738 <_strtod_l+0x590>)
 80164c0:	a81d      	add	r0, sp, #116	; 0x74
 80164c2:	f001 fe41 	bl	8018148 <__match>
 80164c6:	2800      	cmp	r0, #0
 80164c8:	f43f aecc 	beq.w	8016264 <_strtod_l+0xbc>
 80164cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80164ce:	781b      	ldrb	r3, [r3, #0]
 80164d0:	2b28      	cmp	r3, #40	; 0x28
 80164d2:	d12d      	bne.n	8016530 <_strtod_l+0x388>
 80164d4:	4999      	ldr	r1, [pc, #612]	; (801673c <_strtod_l+0x594>)
 80164d6:	aa20      	add	r2, sp, #128	; 0x80
 80164d8:	a81d      	add	r0, sp, #116	; 0x74
 80164da:	f001 fe49 	bl	8018170 <__hexnan>
 80164de:	2805      	cmp	r0, #5
 80164e0:	d126      	bne.n	8016530 <_strtod_l+0x388>
 80164e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80164e4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80164e8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80164ec:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80164f0:	e69c      	b.n	801622c <_strtod_l+0x84>
 80164f2:	210a      	movs	r1, #10
 80164f4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80164f8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80164fc:	e7b9      	b.n	8016472 <_strtod_l+0x2ca>
 80164fe:	2b6e      	cmp	r3, #110	; 0x6e
 8016500:	e7db      	b.n	80164ba <_strtod_l+0x312>
 8016502:	498f      	ldr	r1, [pc, #572]	; (8016740 <_strtod_l+0x598>)
 8016504:	a81d      	add	r0, sp, #116	; 0x74
 8016506:	f001 fe1f 	bl	8018148 <__match>
 801650a:	2800      	cmp	r0, #0
 801650c:	f43f aeaa 	beq.w	8016264 <_strtod_l+0xbc>
 8016510:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016512:	498c      	ldr	r1, [pc, #560]	; (8016744 <_strtod_l+0x59c>)
 8016514:	3b01      	subs	r3, #1
 8016516:	a81d      	add	r0, sp, #116	; 0x74
 8016518:	931d      	str	r3, [sp, #116]	; 0x74
 801651a:	f001 fe15 	bl	8018148 <__match>
 801651e:	b910      	cbnz	r0, 8016526 <_strtod_l+0x37e>
 8016520:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016522:	3301      	adds	r3, #1
 8016524:	931d      	str	r3, [sp, #116]	; 0x74
 8016526:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8016754 <_strtod_l+0x5ac>
 801652a:	f04f 0a00 	mov.w	sl, #0
 801652e:	e67d      	b.n	801622c <_strtod_l+0x84>
 8016530:	4885      	ldr	r0, [pc, #532]	; (8016748 <_strtod_l+0x5a0>)
 8016532:	f002 fd01 	bl	8018f38 <nan>
 8016536:	ed8d 0b04 	vstr	d0, [sp, #16]
 801653a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801653e:	e675      	b.n	801622c <_strtod_l+0x84>
 8016540:	9b07      	ldr	r3, [sp, #28]
 8016542:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016544:	1af3      	subs	r3, r6, r3
 8016546:	2f00      	cmp	r7, #0
 8016548:	bf08      	it	eq
 801654a:	462f      	moveq	r7, r5
 801654c:	2d10      	cmp	r5, #16
 801654e:	9308      	str	r3, [sp, #32]
 8016550:	46a8      	mov	r8, r5
 8016552:	bfa8      	it	ge
 8016554:	f04f 0810 	movge.w	r8, #16
 8016558:	f7e9 ffd4 	bl	8000504 <__aeabi_ui2d>
 801655c:	2d09      	cmp	r5, #9
 801655e:	4682      	mov	sl, r0
 8016560:	468b      	mov	fp, r1
 8016562:	dd13      	ble.n	801658c <_strtod_l+0x3e4>
 8016564:	4b79      	ldr	r3, [pc, #484]	; (801674c <_strtod_l+0x5a4>)
 8016566:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801656a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801656e:	f7ea f843 	bl	80005f8 <__aeabi_dmul>
 8016572:	4682      	mov	sl, r0
 8016574:	4648      	mov	r0, r9
 8016576:	468b      	mov	fp, r1
 8016578:	f7e9 ffc4 	bl	8000504 <__aeabi_ui2d>
 801657c:	4602      	mov	r2, r0
 801657e:	460b      	mov	r3, r1
 8016580:	4650      	mov	r0, sl
 8016582:	4659      	mov	r1, fp
 8016584:	f7e9 fe82 	bl	800028c <__adddf3>
 8016588:	4682      	mov	sl, r0
 801658a:	468b      	mov	fp, r1
 801658c:	2d0f      	cmp	r5, #15
 801658e:	dc38      	bgt.n	8016602 <_strtod_l+0x45a>
 8016590:	9b08      	ldr	r3, [sp, #32]
 8016592:	2b00      	cmp	r3, #0
 8016594:	f43f ae4a 	beq.w	801622c <_strtod_l+0x84>
 8016598:	dd24      	ble.n	80165e4 <_strtod_l+0x43c>
 801659a:	2b16      	cmp	r3, #22
 801659c:	dc0b      	bgt.n	80165b6 <_strtod_l+0x40e>
 801659e:	4d6b      	ldr	r5, [pc, #428]	; (801674c <_strtod_l+0x5a4>)
 80165a0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80165a4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80165a8:	4652      	mov	r2, sl
 80165aa:	465b      	mov	r3, fp
 80165ac:	f7ea f824 	bl	80005f8 <__aeabi_dmul>
 80165b0:	4682      	mov	sl, r0
 80165b2:	468b      	mov	fp, r1
 80165b4:	e63a      	b.n	801622c <_strtod_l+0x84>
 80165b6:	9a08      	ldr	r2, [sp, #32]
 80165b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80165bc:	4293      	cmp	r3, r2
 80165be:	db20      	blt.n	8016602 <_strtod_l+0x45a>
 80165c0:	4c62      	ldr	r4, [pc, #392]	; (801674c <_strtod_l+0x5a4>)
 80165c2:	f1c5 050f 	rsb	r5, r5, #15
 80165c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80165ca:	4652      	mov	r2, sl
 80165cc:	465b      	mov	r3, fp
 80165ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165d2:	f7ea f811 	bl	80005f8 <__aeabi_dmul>
 80165d6:	9b08      	ldr	r3, [sp, #32]
 80165d8:	1b5d      	subs	r5, r3, r5
 80165da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80165de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80165e2:	e7e3      	b.n	80165ac <_strtod_l+0x404>
 80165e4:	9b08      	ldr	r3, [sp, #32]
 80165e6:	3316      	adds	r3, #22
 80165e8:	db0b      	blt.n	8016602 <_strtod_l+0x45a>
 80165ea:	9b07      	ldr	r3, [sp, #28]
 80165ec:	4a57      	ldr	r2, [pc, #348]	; (801674c <_strtod_l+0x5a4>)
 80165ee:	1b9e      	subs	r6, r3, r6
 80165f0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80165f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80165f8:	4650      	mov	r0, sl
 80165fa:	4659      	mov	r1, fp
 80165fc:	f7ea f926 	bl	800084c <__aeabi_ddiv>
 8016600:	e7d6      	b.n	80165b0 <_strtod_l+0x408>
 8016602:	9b08      	ldr	r3, [sp, #32]
 8016604:	eba5 0808 	sub.w	r8, r5, r8
 8016608:	4498      	add	r8, r3
 801660a:	f1b8 0f00 	cmp.w	r8, #0
 801660e:	dd71      	ble.n	80166f4 <_strtod_l+0x54c>
 8016610:	f018 030f 	ands.w	r3, r8, #15
 8016614:	d00a      	beq.n	801662c <_strtod_l+0x484>
 8016616:	494d      	ldr	r1, [pc, #308]	; (801674c <_strtod_l+0x5a4>)
 8016618:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801661c:	4652      	mov	r2, sl
 801661e:	465b      	mov	r3, fp
 8016620:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016624:	f7e9 ffe8 	bl	80005f8 <__aeabi_dmul>
 8016628:	4682      	mov	sl, r0
 801662a:	468b      	mov	fp, r1
 801662c:	f038 080f 	bics.w	r8, r8, #15
 8016630:	d04d      	beq.n	80166ce <_strtod_l+0x526>
 8016632:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016636:	dd22      	ble.n	801667e <_strtod_l+0x4d6>
 8016638:	2500      	movs	r5, #0
 801663a:	462e      	mov	r6, r5
 801663c:	9509      	str	r5, [sp, #36]	; 0x24
 801663e:	9507      	str	r5, [sp, #28]
 8016640:	2322      	movs	r3, #34	; 0x22
 8016642:	f8df b110 	ldr.w	fp, [pc, #272]	; 8016754 <_strtod_l+0x5ac>
 8016646:	6023      	str	r3, [r4, #0]
 8016648:	f04f 0a00 	mov.w	sl, #0
 801664c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801664e:	2b00      	cmp	r3, #0
 8016650:	f43f adec 	beq.w	801622c <_strtod_l+0x84>
 8016654:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016656:	4620      	mov	r0, r4
 8016658:	f001 fe88 	bl	801836c <_Bfree>
 801665c:	9907      	ldr	r1, [sp, #28]
 801665e:	4620      	mov	r0, r4
 8016660:	f001 fe84 	bl	801836c <_Bfree>
 8016664:	4631      	mov	r1, r6
 8016666:	4620      	mov	r0, r4
 8016668:	f001 fe80 	bl	801836c <_Bfree>
 801666c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801666e:	4620      	mov	r0, r4
 8016670:	f001 fe7c 	bl	801836c <_Bfree>
 8016674:	4629      	mov	r1, r5
 8016676:	4620      	mov	r0, r4
 8016678:	f001 fe78 	bl	801836c <_Bfree>
 801667c:	e5d6      	b.n	801622c <_strtod_l+0x84>
 801667e:	2300      	movs	r3, #0
 8016680:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016684:	4650      	mov	r0, sl
 8016686:	4659      	mov	r1, fp
 8016688:	4699      	mov	r9, r3
 801668a:	f1b8 0f01 	cmp.w	r8, #1
 801668e:	dc21      	bgt.n	80166d4 <_strtod_l+0x52c>
 8016690:	b10b      	cbz	r3, 8016696 <_strtod_l+0x4ee>
 8016692:	4682      	mov	sl, r0
 8016694:	468b      	mov	fp, r1
 8016696:	4b2e      	ldr	r3, [pc, #184]	; (8016750 <_strtod_l+0x5a8>)
 8016698:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801669c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80166a0:	4652      	mov	r2, sl
 80166a2:	465b      	mov	r3, fp
 80166a4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80166a8:	f7e9 ffa6 	bl	80005f8 <__aeabi_dmul>
 80166ac:	4b29      	ldr	r3, [pc, #164]	; (8016754 <_strtod_l+0x5ac>)
 80166ae:	460a      	mov	r2, r1
 80166b0:	400b      	ands	r3, r1
 80166b2:	4929      	ldr	r1, [pc, #164]	; (8016758 <_strtod_l+0x5b0>)
 80166b4:	428b      	cmp	r3, r1
 80166b6:	4682      	mov	sl, r0
 80166b8:	d8be      	bhi.n	8016638 <_strtod_l+0x490>
 80166ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80166be:	428b      	cmp	r3, r1
 80166c0:	bf86      	itte	hi
 80166c2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801675c <_strtod_l+0x5b4>
 80166c6:	f04f 3aff 	movhi.w	sl, #4294967295
 80166ca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80166ce:	2300      	movs	r3, #0
 80166d0:	9304      	str	r3, [sp, #16]
 80166d2:	e081      	b.n	80167d8 <_strtod_l+0x630>
 80166d4:	f018 0f01 	tst.w	r8, #1
 80166d8:	d007      	beq.n	80166ea <_strtod_l+0x542>
 80166da:	4b1d      	ldr	r3, [pc, #116]	; (8016750 <_strtod_l+0x5a8>)
 80166dc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80166e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166e4:	f7e9 ff88 	bl	80005f8 <__aeabi_dmul>
 80166e8:	2301      	movs	r3, #1
 80166ea:	f109 0901 	add.w	r9, r9, #1
 80166ee:	ea4f 0868 	mov.w	r8, r8, asr #1
 80166f2:	e7ca      	b.n	801668a <_strtod_l+0x4e2>
 80166f4:	d0eb      	beq.n	80166ce <_strtod_l+0x526>
 80166f6:	f1c8 0800 	rsb	r8, r8, #0
 80166fa:	f018 020f 	ands.w	r2, r8, #15
 80166fe:	d00a      	beq.n	8016716 <_strtod_l+0x56e>
 8016700:	4b12      	ldr	r3, [pc, #72]	; (801674c <_strtod_l+0x5a4>)
 8016702:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016706:	4650      	mov	r0, sl
 8016708:	4659      	mov	r1, fp
 801670a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801670e:	f7ea f89d 	bl	800084c <__aeabi_ddiv>
 8016712:	4682      	mov	sl, r0
 8016714:	468b      	mov	fp, r1
 8016716:	ea5f 1828 	movs.w	r8, r8, asr #4
 801671a:	d0d8      	beq.n	80166ce <_strtod_l+0x526>
 801671c:	f1b8 0f1f 	cmp.w	r8, #31
 8016720:	dd1e      	ble.n	8016760 <_strtod_l+0x5b8>
 8016722:	2500      	movs	r5, #0
 8016724:	462e      	mov	r6, r5
 8016726:	9509      	str	r5, [sp, #36]	; 0x24
 8016728:	9507      	str	r5, [sp, #28]
 801672a:	2322      	movs	r3, #34	; 0x22
 801672c:	f04f 0a00 	mov.w	sl, #0
 8016730:	f04f 0b00 	mov.w	fp, #0
 8016734:	6023      	str	r3, [r4, #0]
 8016736:	e789      	b.n	801664c <_strtod_l+0x4a4>
 8016738:	0801b791 	.word	0x0801b791
 801673c:	0801b7d4 	.word	0x0801b7d4
 8016740:	0801b789 	.word	0x0801b789
 8016744:	0801b914 	.word	0x0801b914
 8016748:	0801bbd0 	.word	0x0801bbd0
 801674c:	0801bab0 	.word	0x0801bab0
 8016750:	0801ba88 	.word	0x0801ba88
 8016754:	7ff00000 	.word	0x7ff00000
 8016758:	7ca00000 	.word	0x7ca00000
 801675c:	7fefffff 	.word	0x7fefffff
 8016760:	f018 0310 	ands.w	r3, r8, #16
 8016764:	bf18      	it	ne
 8016766:	236a      	movne	r3, #106	; 0x6a
 8016768:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8016b20 <_strtod_l+0x978>
 801676c:	9304      	str	r3, [sp, #16]
 801676e:	4650      	mov	r0, sl
 8016770:	4659      	mov	r1, fp
 8016772:	2300      	movs	r3, #0
 8016774:	f018 0f01 	tst.w	r8, #1
 8016778:	d004      	beq.n	8016784 <_strtod_l+0x5dc>
 801677a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801677e:	f7e9 ff3b 	bl	80005f8 <__aeabi_dmul>
 8016782:	2301      	movs	r3, #1
 8016784:	ea5f 0868 	movs.w	r8, r8, asr #1
 8016788:	f109 0908 	add.w	r9, r9, #8
 801678c:	d1f2      	bne.n	8016774 <_strtod_l+0x5cc>
 801678e:	b10b      	cbz	r3, 8016794 <_strtod_l+0x5ec>
 8016790:	4682      	mov	sl, r0
 8016792:	468b      	mov	fp, r1
 8016794:	9b04      	ldr	r3, [sp, #16]
 8016796:	b1bb      	cbz	r3, 80167c8 <_strtod_l+0x620>
 8016798:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801679c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	4659      	mov	r1, fp
 80167a4:	dd10      	ble.n	80167c8 <_strtod_l+0x620>
 80167a6:	2b1f      	cmp	r3, #31
 80167a8:	f340 8128 	ble.w	80169fc <_strtod_l+0x854>
 80167ac:	2b34      	cmp	r3, #52	; 0x34
 80167ae:	bfde      	ittt	le
 80167b0:	3b20      	suble	r3, #32
 80167b2:	f04f 32ff 	movle.w	r2, #4294967295
 80167b6:	fa02 f303 	lslle.w	r3, r2, r3
 80167ba:	f04f 0a00 	mov.w	sl, #0
 80167be:	bfcc      	ite	gt
 80167c0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80167c4:	ea03 0b01 	andle.w	fp, r3, r1
 80167c8:	2200      	movs	r2, #0
 80167ca:	2300      	movs	r3, #0
 80167cc:	4650      	mov	r0, sl
 80167ce:	4659      	mov	r1, fp
 80167d0:	f7ea f97a 	bl	8000ac8 <__aeabi_dcmpeq>
 80167d4:	2800      	cmp	r0, #0
 80167d6:	d1a4      	bne.n	8016722 <_strtod_l+0x57a>
 80167d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167da:	9300      	str	r3, [sp, #0]
 80167dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80167de:	462b      	mov	r3, r5
 80167e0:	463a      	mov	r2, r7
 80167e2:	4620      	mov	r0, r4
 80167e4:	f001 fe2e 	bl	8018444 <__s2b>
 80167e8:	9009      	str	r0, [sp, #36]	; 0x24
 80167ea:	2800      	cmp	r0, #0
 80167ec:	f43f af24 	beq.w	8016638 <_strtod_l+0x490>
 80167f0:	9b07      	ldr	r3, [sp, #28]
 80167f2:	1b9e      	subs	r6, r3, r6
 80167f4:	9b08      	ldr	r3, [sp, #32]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	bfb4      	ite	lt
 80167fa:	4633      	movlt	r3, r6
 80167fc:	2300      	movge	r3, #0
 80167fe:	9310      	str	r3, [sp, #64]	; 0x40
 8016800:	9b08      	ldr	r3, [sp, #32]
 8016802:	2500      	movs	r5, #0
 8016804:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016808:	9318      	str	r3, [sp, #96]	; 0x60
 801680a:	462e      	mov	r6, r5
 801680c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801680e:	4620      	mov	r0, r4
 8016810:	6859      	ldr	r1, [r3, #4]
 8016812:	f001 fd6b 	bl	80182ec <_Balloc>
 8016816:	9007      	str	r0, [sp, #28]
 8016818:	2800      	cmp	r0, #0
 801681a:	f43f af11 	beq.w	8016640 <_strtod_l+0x498>
 801681e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016820:	691a      	ldr	r2, [r3, #16]
 8016822:	3202      	adds	r2, #2
 8016824:	f103 010c 	add.w	r1, r3, #12
 8016828:	0092      	lsls	r2, r2, #2
 801682a:	300c      	adds	r0, #12
 801682c:	f7fe fce0 	bl	80151f0 <memcpy>
 8016830:	ec4b ab10 	vmov	d0, sl, fp
 8016834:	aa20      	add	r2, sp, #128	; 0x80
 8016836:	a91f      	add	r1, sp, #124	; 0x7c
 8016838:	4620      	mov	r0, r4
 801683a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801683e:	f002 f93d 	bl	8018abc <__d2b>
 8016842:	901e      	str	r0, [sp, #120]	; 0x78
 8016844:	2800      	cmp	r0, #0
 8016846:	f43f aefb 	beq.w	8016640 <_strtod_l+0x498>
 801684a:	2101      	movs	r1, #1
 801684c:	4620      	mov	r0, r4
 801684e:	f001 fe93 	bl	8018578 <__i2b>
 8016852:	4606      	mov	r6, r0
 8016854:	2800      	cmp	r0, #0
 8016856:	f43f aef3 	beq.w	8016640 <_strtod_l+0x498>
 801685a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801685c:	9904      	ldr	r1, [sp, #16]
 801685e:	2b00      	cmp	r3, #0
 8016860:	bfab      	itete	ge
 8016862:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8016864:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8016866:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8016868:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801686c:	bfac      	ite	ge
 801686e:	eb03 0902 	addge.w	r9, r3, r2
 8016872:	1ad7      	sublt	r7, r2, r3
 8016874:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016876:	eba3 0801 	sub.w	r8, r3, r1
 801687a:	4490      	add	r8, r2
 801687c:	4ba3      	ldr	r3, [pc, #652]	; (8016b0c <_strtod_l+0x964>)
 801687e:	f108 38ff 	add.w	r8, r8, #4294967295
 8016882:	4598      	cmp	r8, r3
 8016884:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016888:	f280 80cc 	bge.w	8016a24 <_strtod_l+0x87c>
 801688c:	eba3 0308 	sub.w	r3, r3, r8
 8016890:	2b1f      	cmp	r3, #31
 8016892:	eba2 0203 	sub.w	r2, r2, r3
 8016896:	f04f 0101 	mov.w	r1, #1
 801689a:	f300 80b6 	bgt.w	8016a0a <_strtod_l+0x862>
 801689e:	fa01 f303 	lsl.w	r3, r1, r3
 80168a2:	9311      	str	r3, [sp, #68]	; 0x44
 80168a4:	2300      	movs	r3, #0
 80168a6:	930c      	str	r3, [sp, #48]	; 0x30
 80168a8:	eb09 0802 	add.w	r8, r9, r2
 80168ac:	9b04      	ldr	r3, [sp, #16]
 80168ae:	45c1      	cmp	r9, r8
 80168b0:	4417      	add	r7, r2
 80168b2:	441f      	add	r7, r3
 80168b4:	464b      	mov	r3, r9
 80168b6:	bfa8      	it	ge
 80168b8:	4643      	movge	r3, r8
 80168ba:	42bb      	cmp	r3, r7
 80168bc:	bfa8      	it	ge
 80168be:	463b      	movge	r3, r7
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	bfc2      	ittt	gt
 80168c4:	eba8 0803 	subgt.w	r8, r8, r3
 80168c8:	1aff      	subgt	r7, r7, r3
 80168ca:	eba9 0903 	subgt.w	r9, r9, r3
 80168ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	dd17      	ble.n	8016904 <_strtod_l+0x75c>
 80168d4:	4631      	mov	r1, r6
 80168d6:	461a      	mov	r2, r3
 80168d8:	4620      	mov	r0, r4
 80168da:	f001 ff09 	bl	80186f0 <__pow5mult>
 80168de:	4606      	mov	r6, r0
 80168e0:	2800      	cmp	r0, #0
 80168e2:	f43f aead 	beq.w	8016640 <_strtod_l+0x498>
 80168e6:	4601      	mov	r1, r0
 80168e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80168ea:	4620      	mov	r0, r4
 80168ec:	f001 fe5a 	bl	80185a4 <__multiply>
 80168f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80168f2:	2800      	cmp	r0, #0
 80168f4:	f43f aea4 	beq.w	8016640 <_strtod_l+0x498>
 80168f8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80168fa:	4620      	mov	r0, r4
 80168fc:	f001 fd36 	bl	801836c <_Bfree>
 8016900:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016902:	931e      	str	r3, [sp, #120]	; 0x78
 8016904:	f1b8 0f00 	cmp.w	r8, #0
 8016908:	f300 8091 	bgt.w	8016a2e <_strtod_l+0x886>
 801690c:	9b08      	ldr	r3, [sp, #32]
 801690e:	2b00      	cmp	r3, #0
 8016910:	dd08      	ble.n	8016924 <_strtod_l+0x77c>
 8016912:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016914:	9907      	ldr	r1, [sp, #28]
 8016916:	4620      	mov	r0, r4
 8016918:	f001 feea 	bl	80186f0 <__pow5mult>
 801691c:	9007      	str	r0, [sp, #28]
 801691e:	2800      	cmp	r0, #0
 8016920:	f43f ae8e 	beq.w	8016640 <_strtod_l+0x498>
 8016924:	2f00      	cmp	r7, #0
 8016926:	dd08      	ble.n	801693a <_strtod_l+0x792>
 8016928:	9907      	ldr	r1, [sp, #28]
 801692a:	463a      	mov	r2, r7
 801692c:	4620      	mov	r0, r4
 801692e:	f001 ff39 	bl	80187a4 <__lshift>
 8016932:	9007      	str	r0, [sp, #28]
 8016934:	2800      	cmp	r0, #0
 8016936:	f43f ae83 	beq.w	8016640 <_strtod_l+0x498>
 801693a:	f1b9 0f00 	cmp.w	r9, #0
 801693e:	dd08      	ble.n	8016952 <_strtod_l+0x7aa>
 8016940:	4631      	mov	r1, r6
 8016942:	464a      	mov	r2, r9
 8016944:	4620      	mov	r0, r4
 8016946:	f001 ff2d 	bl	80187a4 <__lshift>
 801694a:	4606      	mov	r6, r0
 801694c:	2800      	cmp	r0, #0
 801694e:	f43f ae77 	beq.w	8016640 <_strtod_l+0x498>
 8016952:	9a07      	ldr	r2, [sp, #28]
 8016954:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016956:	4620      	mov	r0, r4
 8016958:	f001 ffac 	bl	80188b4 <__mdiff>
 801695c:	4605      	mov	r5, r0
 801695e:	2800      	cmp	r0, #0
 8016960:	f43f ae6e 	beq.w	8016640 <_strtod_l+0x498>
 8016964:	68c3      	ldr	r3, [r0, #12]
 8016966:	930f      	str	r3, [sp, #60]	; 0x3c
 8016968:	2300      	movs	r3, #0
 801696a:	60c3      	str	r3, [r0, #12]
 801696c:	4631      	mov	r1, r6
 801696e:	f001 ff85 	bl	801887c <__mcmp>
 8016972:	2800      	cmp	r0, #0
 8016974:	da65      	bge.n	8016a42 <_strtod_l+0x89a>
 8016976:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016978:	ea53 030a 	orrs.w	r3, r3, sl
 801697c:	f040 8087 	bne.w	8016a8e <_strtod_l+0x8e6>
 8016980:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016984:	2b00      	cmp	r3, #0
 8016986:	f040 8082 	bne.w	8016a8e <_strtod_l+0x8e6>
 801698a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801698e:	0d1b      	lsrs	r3, r3, #20
 8016990:	051b      	lsls	r3, r3, #20
 8016992:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016996:	d97a      	bls.n	8016a8e <_strtod_l+0x8e6>
 8016998:	696b      	ldr	r3, [r5, #20]
 801699a:	b913      	cbnz	r3, 80169a2 <_strtod_l+0x7fa>
 801699c:	692b      	ldr	r3, [r5, #16]
 801699e:	2b01      	cmp	r3, #1
 80169a0:	dd75      	ble.n	8016a8e <_strtod_l+0x8e6>
 80169a2:	4629      	mov	r1, r5
 80169a4:	2201      	movs	r2, #1
 80169a6:	4620      	mov	r0, r4
 80169a8:	f001 fefc 	bl	80187a4 <__lshift>
 80169ac:	4631      	mov	r1, r6
 80169ae:	4605      	mov	r5, r0
 80169b0:	f001 ff64 	bl	801887c <__mcmp>
 80169b4:	2800      	cmp	r0, #0
 80169b6:	dd6a      	ble.n	8016a8e <_strtod_l+0x8e6>
 80169b8:	9904      	ldr	r1, [sp, #16]
 80169ba:	4a55      	ldr	r2, [pc, #340]	; (8016b10 <_strtod_l+0x968>)
 80169bc:	465b      	mov	r3, fp
 80169be:	2900      	cmp	r1, #0
 80169c0:	f000 8085 	beq.w	8016ace <_strtod_l+0x926>
 80169c4:	ea02 010b 	and.w	r1, r2, fp
 80169c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80169cc:	dc7f      	bgt.n	8016ace <_strtod_l+0x926>
 80169ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80169d2:	f77f aeaa 	ble.w	801672a <_strtod_l+0x582>
 80169d6:	4a4f      	ldr	r2, [pc, #316]	; (8016b14 <_strtod_l+0x96c>)
 80169d8:	2300      	movs	r3, #0
 80169da:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80169de:	4650      	mov	r0, sl
 80169e0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80169e4:	4659      	mov	r1, fp
 80169e6:	f7e9 fe07 	bl	80005f8 <__aeabi_dmul>
 80169ea:	460b      	mov	r3, r1
 80169ec:	4303      	orrs	r3, r0
 80169ee:	bf08      	it	eq
 80169f0:	2322      	moveq	r3, #34	; 0x22
 80169f2:	4682      	mov	sl, r0
 80169f4:	468b      	mov	fp, r1
 80169f6:	bf08      	it	eq
 80169f8:	6023      	streq	r3, [r4, #0]
 80169fa:	e62b      	b.n	8016654 <_strtod_l+0x4ac>
 80169fc:	f04f 32ff 	mov.w	r2, #4294967295
 8016a00:	fa02 f303 	lsl.w	r3, r2, r3
 8016a04:	ea03 0a0a 	and.w	sl, r3, sl
 8016a08:	e6de      	b.n	80167c8 <_strtod_l+0x620>
 8016a0a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8016a0e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8016a12:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8016a16:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8016a1a:	fa01 f308 	lsl.w	r3, r1, r8
 8016a1e:	930c      	str	r3, [sp, #48]	; 0x30
 8016a20:	9111      	str	r1, [sp, #68]	; 0x44
 8016a22:	e741      	b.n	80168a8 <_strtod_l+0x700>
 8016a24:	2300      	movs	r3, #0
 8016a26:	930c      	str	r3, [sp, #48]	; 0x30
 8016a28:	2301      	movs	r3, #1
 8016a2a:	9311      	str	r3, [sp, #68]	; 0x44
 8016a2c:	e73c      	b.n	80168a8 <_strtod_l+0x700>
 8016a2e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016a30:	4642      	mov	r2, r8
 8016a32:	4620      	mov	r0, r4
 8016a34:	f001 feb6 	bl	80187a4 <__lshift>
 8016a38:	901e      	str	r0, [sp, #120]	; 0x78
 8016a3a:	2800      	cmp	r0, #0
 8016a3c:	f47f af66 	bne.w	801690c <_strtod_l+0x764>
 8016a40:	e5fe      	b.n	8016640 <_strtod_l+0x498>
 8016a42:	465f      	mov	r7, fp
 8016a44:	d16e      	bne.n	8016b24 <_strtod_l+0x97c>
 8016a46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016a48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016a4c:	b342      	cbz	r2, 8016aa0 <_strtod_l+0x8f8>
 8016a4e:	4a32      	ldr	r2, [pc, #200]	; (8016b18 <_strtod_l+0x970>)
 8016a50:	4293      	cmp	r3, r2
 8016a52:	d128      	bne.n	8016aa6 <_strtod_l+0x8fe>
 8016a54:	9b04      	ldr	r3, [sp, #16]
 8016a56:	4650      	mov	r0, sl
 8016a58:	b1eb      	cbz	r3, 8016a96 <_strtod_l+0x8ee>
 8016a5a:	4a2d      	ldr	r2, [pc, #180]	; (8016b10 <_strtod_l+0x968>)
 8016a5c:	403a      	ands	r2, r7
 8016a5e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016a62:	f04f 31ff 	mov.w	r1, #4294967295
 8016a66:	d819      	bhi.n	8016a9c <_strtod_l+0x8f4>
 8016a68:	0d12      	lsrs	r2, r2, #20
 8016a6a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8016a72:	4298      	cmp	r0, r3
 8016a74:	d117      	bne.n	8016aa6 <_strtod_l+0x8fe>
 8016a76:	4b29      	ldr	r3, [pc, #164]	; (8016b1c <_strtod_l+0x974>)
 8016a78:	429f      	cmp	r7, r3
 8016a7a:	d102      	bne.n	8016a82 <_strtod_l+0x8da>
 8016a7c:	3001      	adds	r0, #1
 8016a7e:	f43f addf 	beq.w	8016640 <_strtod_l+0x498>
 8016a82:	4b23      	ldr	r3, [pc, #140]	; (8016b10 <_strtod_l+0x968>)
 8016a84:	403b      	ands	r3, r7
 8016a86:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016a8a:	f04f 0a00 	mov.w	sl, #0
 8016a8e:	9b04      	ldr	r3, [sp, #16]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d1a0      	bne.n	80169d6 <_strtod_l+0x82e>
 8016a94:	e5de      	b.n	8016654 <_strtod_l+0x4ac>
 8016a96:	f04f 33ff 	mov.w	r3, #4294967295
 8016a9a:	e7ea      	b.n	8016a72 <_strtod_l+0x8ca>
 8016a9c:	460b      	mov	r3, r1
 8016a9e:	e7e8      	b.n	8016a72 <_strtod_l+0x8ca>
 8016aa0:	ea53 030a 	orrs.w	r3, r3, sl
 8016aa4:	d088      	beq.n	80169b8 <_strtod_l+0x810>
 8016aa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016aa8:	b1db      	cbz	r3, 8016ae2 <_strtod_l+0x93a>
 8016aaa:	423b      	tst	r3, r7
 8016aac:	d0ef      	beq.n	8016a8e <_strtod_l+0x8e6>
 8016aae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ab0:	9a04      	ldr	r2, [sp, #16]
 8016ab2:	4650      	mov	r0, sl
 8016ab4:	4659      	mov	r1, fp
 8016ab6:	b1c3      	cbz	r3, 8016aea <_strtod_l+0x942>
 8016ab8:	f7ff fb58 	bl	801616c <sulp>
 8016abc:	4602      	mov	r2, r0
 8016abe:	460b      	mov	r3, r1
 8016ac0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016ac4:	f7e9 fbe2 	bl	800028c <__adddf3>
 8016ac8:	4682      	mov	sl, r0
 8016aca:	468b      	mov	fp, r1
 8016acc:	e7df      	b.n	8016a8e <_strtod_l+0x8e6>
 8016ace:	4013      	ands	r3, r2
 8016ad0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016ad4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016ad8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016adc:	f04f 3aff 	mov.w	sl, #4294967295
 8016ae0:	e7d5      	b.n	8016a8e <_strtod_l+0x8e6>
 8016ae2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016ae4:	ea13 0f0a 	tst.w	r3, sl
 8016ae8:	e7e0      	b.n	8016aac <_strtod_l+0x904>
 8016aea:	f7ff fb3f 	bl	801616c <sulp>
 8016aee:	4602      	mov	r2, r0
 8016af0:	460b      	mov	r3, r1
 8016af2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016af6:	f7e9 fbc7 	bl	8000288 <__aeabi_dsub>
 8016afa:	2200      	movs	r2, #0
 8016afc:	2300      	movs	r3, #0
 8016afe:	4682      	mov	sl, r0
 8016b00:	468b      	mov	fp, r1
 8016b02:	f7e9 ffe1 	bl	8000ac8 <__aeabi_dcmpeq>
 8016b06:	2800      	cmp	r0, #0
 8016b08:	d0c1      	beq.n	8016a8e <_strtod_l+0x8e6>
 8016b0a:	e60e      	b.n	801672a <_strtod_l+0x582>
 8016b0c:	fffffc02 	.word	0xfffffc02
 8016b10:	7ff00000 	.word	0x7ff00000
 8016b14:	39500000 	.word	0x39500000
 8016b18:	000fffff 	.word	0x000fffff
 8016b1c:	7fefffff 	.word	0x7fefffff
 8016b20:	0801b7e8 	.word	0x0801b7e8
 8016b24:	4631      	mov	r1, r6
 8016b26:	4628      	mov	r0, r5
 8016b28:	f002 f824 	bl	8018b74 <__ratio>
 8016b2c:	ec59 8b10 	vmov	r8, r9, d0
 8016b30:	ee10 0a10 	vmov	r0, s0
 8016b34:	2200      	movs	r2, #0
 8016b36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016b3a:	4649      	mov	r1, r9
 8016b3c:	f7e9 ffd8 	bl	8000af0 <__aeabi_dcmple>
 8016b40:	2800      	cmp	r0, #0
 8016b42:	d07c      	beq.n	8016c3e <_strtod_l+0xa96>
 8016b44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d04c      	beq.n	8016be4 <_strtod_l+0xa3c>
 8016b4a:	4b95      	ldr	r3, [pc, #596]	; (8016da0 <_strtod_l+0xbf8>)
 8016b4c:	2200      	movs	r2, #0
 8016b4e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016b52:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8016da0 <_strtod_l+0xbf8>
 8016b56:	f04f 0800 	mov.w	r8, #0
 8016b5a:	4b92      	ldr	r3, [pc, #584]	; (8016da4 <_strtod_l+0xbfc>)
 8016b5c:	403b      	ands	r3, r7
 8016b5e:	9311      	str	r3, [sp, #68]	; 0x44
 8016b60:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016b62:	4b91      	ldr	r3, [pc, #580]	; (8016da8 <_strtod_l+0xc00>)
 8016b64:	429a      	cmp	r2, r3
 8016b66:	f040 80b2 	bne.w	8016cce <_strtod_l+0xb26>
 8016b6a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016b6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016b72:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8016b76:	ec4b ab10 	vmov	d0, sl, fp
 8016b7a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8016b7e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016b82:	f001 ff1f 	bl	80189c4 <__ulp>
 8016b86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016b8a:	ec53 2b10 	vmov	r2, r3, d0
 8016b8e:	f7e9 fd33 	bl	80005f8 <__aeabi_dmul>
 8016b92:	4652      	mov	r2, sl
 8016b94:	465b      	mov	r3, fp
 8016b96:	f7e9 fb79 	bl	800028c <__adddf3>
 8016b9a:	460b      	mov	r3, r1
 8016b9c:	4981      	ldr	r1, [pc, #516]	; (8016da4 <_strtod_l+0xbfc>)
 8016b9e:	4a83      	ldr	r2, [pc, #524]	; (8016dac <_strtod_l+0xc04>)
 8016ba0:	4019      	ands	r1, r3
 8016ba2:	4291      	cmp	r1, r2
 8016ba4:	4682      	mov	sl, r0
 8016ba6:	d95e      	bls.n	8016c66 <_strtod_l+0xabe>
 8016ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016baa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016bae:	4293      	cmp	r3, r2
 8016bb0:	d103      	bne.n	8016bba <_strtod_l+0xa12>
 8016bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016bb4:	3301      	adds	r3, #1
 8016bb6:	f43f ad43 	beq.w	8016640 <_strtod_l+0x498>
 8016bba:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8016db8 <_strtod_l+0xc10>
 8016bbe:	f04f 3aff 	mov.w	sl, #4294967295
 8016bc2:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016bc4:	4620      	mov	r0, r4
 8016bc6:	f001 fbd1 	bl	801836c <_Bfree>
 8016bca:	9907      	ldr	r1, [sp, #28]
 8016bcc:	4620      	mov	r0, r4
 8016bce:	f001 fbcd 	bl	801836c <_Bfree>
 8016bd2:	4631      	mov	r1, r6
 8016bd4:	4620      	mov	r0, r4
 8016bd6:	f001 fbc9 	bl	801836c <_Bfree>
 8016bda:	4629      	mov	r1, r5
 8016bdc:	4620      	mov	r0, r4
 8016bde:	f001 fbc5 	bl	801836c <_Bfree>
 8016be2:	e613      	b.n	801680c <_strtod_l+0x664>
 8016be4:	f1ba 0f00 	cmp.w	sl, #0
 8016be8:	d11b      	bne.n	8016c22 <_strtod_l+0xa7a>
 8016bea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016bee:	b9f3      	cbnz	r3, 8016c2e <_strtod_l+0xa86>
 8016bf0:	4b6b      	ldr	r3, [pc, #428]	; (8016da0 <_strtod_l+0xbf8>)
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	4640      	mov	r0, r8
 8016bf6:	4649      	mov	r1, r9
 8016bf8:	f7e9 ff70 	bl	8000adc <__aeabi_dcmplt>
 8016bfc:	b9d0      	cbnz	r0, 8016c34 <_strtod_l+0xa8c>
 8016bfe:	4640      	mov	r0, r8
 8016c00:	4649      	mov	r1, r9
 8016c02:	4b6b      	ldr	r3, [pc, #428]	; (8016db0 <_strtod_l+0xc08>)
 8016c04:	2200      	movs	r2, #0
 8016c06:	f7e9 fcf7 	bl	80005f8 <__aeabi_dmul>
 8016c0a:	4680      	mov	r8, r0
 8016c0c:	4689      	mov	r9, r1
 8016c0e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016c12:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8016c16:	931b      	str	r3, [sp, #108]	; 0x6c
 8016c18:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8016c1c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016c20:	e79b      	b.n	8016b5a <_strtod_l+0x9b2>
 8016c22:	f1ba 0f01 	cmp.w	sl, #1
 8016c26:	d102      	bne.n	8016c2e <_strtod_l+0xa86>
 8016c28:	2f00      	cmp	r7, #0
 8016c2a:	f43f ad7e 	beq.w	801672a <_strtod_l+0x582>
 8016c2e:	4b61      	ldr	r3, [pc, #388]	; (8016db4 <_strtod_l+0xc0c>)
 8016c30:	2200      	movs	r2, #0
 8016c32:	e78c      	b.n	8016b4e <_strtod_l+0x9a6>
 8016c34:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8016db0 <_strtod_l+0xc08>
 8016c38:	f04f 0800 	mov.w	r8, #0
 8016c3c:	e7e7      	b.n	8016c0e <_strtod_l+0xa66>
 8016c3e:	4b5c      	ldr	r3, [pc, #368]	; (8016db0 <_strtod_l+0xc08>)
 8016c40:	4640      	mov	r0, r8
 8016c42:	4649      	mov	r1, r9
 8016c44:	2200      	movs	r2, #0
 8016c46:	f7e9 fcd7 	bl	80005f8 <__aeabi_dmul>
 8016c4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c4c:	4680      	mov	r8, r0
 8016c4e:	4689      	mov	r9, r1
 8016c50:	b933      	cbnz	r3, 8016c60 <_strtod_l+0xab8>
 8016c52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016c56:	9012      	str	r0, [sp, #72]	; 0x48
 8016c58:	9313      	str	r3, [sp, #76]	; 0x4c
 8016c5a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016c5e:	e7dd      	b.n	8016c1c <_strtod_l+0xa74>
 8016c60:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8016c64:	e7f9      	b.n	8016c5a <_strtod_l+0xab2>
 8016c66:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016c6a:	9b04      	ldr	r3, [sp, #16]
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d1a8      	bne.n	8016bc2 <_strtod_l+0xa1a>
 8016c70:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016c74:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016c76:	0d1b      	lsrs	r3, r3, #20
 8016c78:	051b      	lsls	r3, r3, #20
 8016c7a:	429a      	cmp	r2, r3
 8016c7c:	d1a1      	bne.n	8016bc2 <_strtod_l+0xa1a>
 8016c7e:	4640      	mov	r0, r8
 8016c80:	4649      	mov	r1, r9
 8016c82:	f7ea f819 	bl	8000cb8 <__aeabi_d2lz>
 8016c86:	f7e9 fc89 	bl	800059c <__aeabi_l2d>
 8016c8a:	4602      	mov	r2, r0
 8016c8c:	460b      	mov	r3, r1
 8016c8e:	4640      	mov	r0, r8
 8016c90:	4649      	mov	r1, r9
 8016c92:	f7e9 faf9 	bl	8000288 <__aeabi_dsub>
 8016c96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016c98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016c9c:	ea43 030a 	orr.w	r3, r3, sl
 8016ca0:	4313      	orrs	r3, r2
 8016ca2:	4680      	mov	r8, r0
 8016ca4:	4689      	mov	r9, r1
 8016ca6:	d053      	beq.n	8016d50 <_strtod_l+0xba8>
 8016ca8:	a335      	add	r3, pc, #212	; (adr r3, 8016d80 <_strtod_l+0xbd8>)
 8016caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cae:	f7e9 ff15 	bl	8000adc <__aeabi_dcmplt>
 8016cb2:	2800      	cmp	r0, #0
 8016cb4:	f47f acce 	bne.w	8016654 <_strtod_l+0x4ac>
 8016cb8:	a333      	add	r3, pc, #204	; (adr r3, 8016d88 <_strtod_l+0xbe0>)
 8016cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cbe:	4640      	mov	r0, r8
 8016cc0:	4649      	mov	r1, r9
 8016cc2:	f7e9 ff29 	bl	8000b18 <__aeabi_dcmpgt>
 8016cc6:	2800      	cmp	r0, #0
 8016cc8:	f43f af7b 	beq.w	8016bc2 <_strtod_l+0xa1a>
 8016ccc:	e4c2      	b.n	8016654 <_strtod_l+0x4ac>
 8016cce:	9b04      	ldr	r3, [sp, #16]
 8016cd0:	b333      	cbz	r3, 8016d20 <_strtod_l+0xb78>
 8016cd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016cd4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016cd8:	d822      	bhi.n	8016d20 <_strtod_l+0xb78>
 8016cda:	a32d      	add	r3, pc, #180	; (adr r3, 8016d90 <_strtod_l+0xbe8>)
 8016cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ce0:	4640      	mov	r0, r8
 8016ce2:	4649      	mov	r1, r9
 8016ce4:	f7e9 ff04 	bl	8000af0 <__aeabi_dcmple>
 8016ce8:	b1a0      	cbz	r0, 8016d14 <_strtod_l+0xb6c>
 8016cea:	4649      	mov	r1, r9
 8016cec:	4640      	mov	r0, r8
 8016cee:	f7e9 ff5b 	bl	8000ba8 <__aeabi_d2uiz>
 8016cf2:	2801      	cmp	r0, #1
 8016cf4:	bf38      	it	cc
 8016cf6:	2001      	movcc	r0, #1
 8016cf8:	f7e9 fc04 	bl	8000504 <__aeabi_ui2d>
 8016cfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016cfe:	4680      	mov	r8, r0
 8016d00:	4689      	mov	r9, r1
 8016d02:	bb13      	cbnz	r3, 8016d4a <_strtod_l+0xba2>
 8016d04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016d08:	9014      	str	r0, [sp, #80]	; 0x50
 8016d0a:	9315      	str	r3, [sp, #84]	; 0x54
 8016d0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016d10:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016d14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016d18:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016d1c:	1a9b      	subs	r3, r3, r2
 8016d1e:	930d      	str	r3, [sp, #52]	; 0x34
 8016d20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016d24:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8016d28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016d2c:	f001 fe4a 	bl	80189c4 <__ulp>
 8016d30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016d34:	ec53 2b10 	vmov	r2, r3, d0
 8016d38:	f7e9 fc5e 	bl	80005f8 <__aeabi_dmul>
 8016d3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016d40:	f7e9 faa4 	bl	800028c <__adddf3>
 8016d44:	4682      	mov	sl, r0
 8016d46:	468b      	mov	fp, r1
 8016d48:	e78f      	b.n	8016c6a <_strtod_l+0xac2>
 8016d4a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8016d4e:	e7dd      	b.n	8016d0c <_strtod_l+0xb64>
 8016d50:	a311      	add	r3, pc, #68	; (adr r3, 8016d98 <_strtod_l+0xbf0>)
 8016d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d56:	f7e9 fec1 	bl	8000adc <__aeabi_dcmplt>
 8016d5a:	e7b4      	b.n	8016cc6 <_strtod_l+0xb1e>
 8016d5c:	2300      	movs	r3, #0
 8016d5e:	930e      	str	r3, [sp, #56]	; 0x38
 8016d60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016d62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016d64:	6013      	str	r3, [r2, #0]
 8016d66:	f7ff ba65 	b.w	8016234 <_strtod_l+0x8c>
 8016d6a:	2b65      	cmp	r3, #101	; 0x65
 8016d6c:	f43f ab5d 	beq.w	801642a <_strtod_l+0x282>
 8016d70:	2b45      	cmp	r3, #69	; 0x45
 8016d72:	f43f ab5a 	beq.w	801642a <_strtod_l+0x282>
 8016d76:	2201      	movs	r2, #1
 8016d78:	f7ff bb92 	b.w	80164a0 <_strtod_l+0x2f8>
 8016d7c:	f3af 8000 	nop.w
 8016d80:	94a03595 	.word	0x94a03595
 8016d84:	3fdfffff 	.word	0x3fdfffff
 8016d88:	35afe535 	.word	0x35afe535
 8016d8c:	3fe00000 	.word	0x3fe00000
 8016d90:	ffc00000 	.word	0xffc00000
 8016d94:	41dfffff 	.word	0x41dfffff
 8016d98:	94a03595 	.word	0x94a03595
 8016d9c:	3fcfffff 	.word	0x3fcfffff
 8016da0:	3ff00000 	.word	0x3ff00000
 8016da4:	7ff00000 	.word	0x7ff00000
 8016da8:	7fe00000 	.word	0x7fe00000
 8016dac:	7c9fffff 	.word	0x7c9fffff
 8016db0:	3fe00000 	.word	0x3fe00000
 8016db4:	bff00000 	.word	0xbff00000
 8016db8:	7fefffff 	.word	0x7fefffff

08016dbc <_strtod_r>:
 8016dbc:	4b01      	ldr	r3, [pc, #4]	; (8016dc4 <_strtod_r+0x8>)
 8016dbe:	f7ff b9f3 	b.w	80161a8 <_strtod_l>
 8016dc2:	bf00      	nop
 8016dc4:	20004278 	.word	0x20004278

08016dc8 <_strtol_l.isra.0>:
 8016dc8:	2b01      	cmp	r3, #1
 8016dca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016dce:	d001      	beq.n	8016dd4 <_strtol_l.isra.0+0xc>
 8016dd0:	2b24      	cmp	r3, #36	; 0x24
 8016dd2:	d906      	bls.n	8016de2 <_strtol_l.isra.0+0x1a>
 8016dd4:	f7fe f9d2 	bl	801517c <__errno>
 8016dd8:	2316      	movs	r3, #22
 8016dda:	6003      	str	r3, [r0, #0]
 8016ddc:	2000      	movs	r0, #0
 8016dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016de2:	4f3a      	ldr	r7, [pc, #232]	; (8016ecc <_strtol_l.isra.0+0x104>)
 8016de4:	468e      	mov	lr, r1
 8016de6:	4676      	mov	r6, lr
 8016de8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8016dec:	5de5      	ldrb	r5, [r4, r7]
 8016dee:	f015 0508 	ands.w	r5, r5, #8
 8016df2:	d1f8      	bne.n	8016de6 <_strtol_l.isra.0+0x1e>
 8016df4:	2c2d      	cmp	r4, #45	; 0x2d
 8016df6:	d134      	bne.n	8016e62 <_strtol_l.isra.0+0x9a>
 8016df8:	f89e 4000 	ldrb.w	r4, [lr]
 8016dfc:	f04f 0801 	mov.w	r8, #1
 8016e00:	f106 0e02 	add.w	lr, r6, #2
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d05c      	beq.n	8016ec2 <_strtol_l.isra.0+0xfa>
 8016e08:	2b10      	cmp	r3, #16
 8016e0a:	d10c      	bne.n	8016e26 <_strtol_l.isra.0+0x5e>
 8016e0c:	2c30      	cmp	r4, #48	; 0x30
 8016e0e:	d10a      	bne.n	8016e26 <_strtol_l.isra.0+0x5e>
 8016e10:	f89e 4000 	ldrb.w	r4, [lr]
 8016e14:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016e18:	2c58      	cmp	r4, #88	; 0x58
 8016e1a:	d14d      	bne.n	8016eb8 <_strtol_l.isra.0+0xf0>
 8016e1c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8016e20:	2310      	movs	r3, #16
 8016e22:	f10e 0e02 	add.w	lr, lr, #2
 8016e26:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8016e2a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016e2e:	2600      	movs	r6, #0
 8016e30:	fbbc f9f3 	udiv	r9, ip, r3
 8016e34:	4635      	mov	r5, r6
 8016e36:	fb03 ca19 	mls	sl, r3, r9, ip
 8016e3a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8016e3e:	2f09      	cmp	r7, #9
 8016e40:	d818      	bhi.n	8016e74 <_strtol_l.isra.0+0xac>
 8016e42:	463c      	mov	r4, r7
 8016e44:	42a3      	cmp	r3, r4
 8016e46:	dd24      	ble.n	8016e92 <_strtol_l.isra.0+0xca>
 8016e48:	2e00      	cmp	r6, #0
 8016e4a:	db1f      	blt.n	8016e8c <_strtol_l.isra.0+0xc4>
 8016e4c:	45a9      	cmp	r9, r5
 8016e4e:	d31d      	bcc.n	8016e8c <_strtol_l.isra.0+0xc4>
 8016e50:	d101      	bne.n	8016e56 <_strtol_l.isra.0+0x8e>
 8016e52:	45a2      	cmp	sl, r4
 8016e54:	db1a      	blt.n	8016e8c <_strtol_l.isra.0+0xc4>
 8016e56:	fb05 4503 	mla	r5, r5, r3, r4
 8016e5a:	2601      	movs	r6, #1
 8016e5c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8016e60:	e7eb      	b.n	8016e3a <_strtol_l.isra.0+0x72>
 8016e62:	2c2b      	cmp	r4, #43	; 0x2b
 8016e64:	bf08      	it	eq
 8016e66:	f89e 4000 	ldrbeq.w	r4, [lr]
 8016e6a:	46a8      	mov	r8, r5
 8016e6c:	bf08      	it	eq
 8016e6e:	f106 0e02 	addeq.w	lr, r6, #2
 8016e72:	e7c7      	b.n	8016e04 <_strtol_l.isra.0+0x3c>
 8016e74:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8016e78:	2f19      	cmp	r7, #25
 8016e7a:	d801      	bhi.n	8016e80 <_strtol_l.isra.0+0xb8>
 8016e7c:	3c37      	subs	r4, #55	; 0x37
 8016e7e:	e7e1      	b.n	8016e44 <_strtol_l.isra.0+0x7c>
 8016e80:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8016e84:	2f19      	cmp	r7, #25
 8016e86:	d804      	bhi.n	8016e92 <_strtol_l.isra.0+0xca>
 8016e88:	3c57      	subs	r4, #87	; 0x57
 8016e8a:	e7db      	b.n	8016e44 <_strtol_l.isra.0+0x7c>
 8016e8c:	f04f 36ff 	mov.w	r6, #4294967295
 8016e90:	e7e4      	b.n	8016e5c <_strtol_l.isra.0+0x94>
 8016e92:	2e00      	cmp	r6, #0
 8016e94:	da05      	bge.n	8016ea2 <_strtol_l.isra.0+0xda>
 8016e96:	2322      	movs	r3, #34	; 0x22
 8016e98:	6003      	str	r3, [r0, #0]
 8016e9a:	4665      	mov	r5, ip
 8016e9c:	b942      	cbnz	r2, 8016eb0 <_strtol_l.isra.0+0xe8>
 8016e9e:	4628      	mov	r0, r5
 8016ea0:	e79d      	b.n	8016dde <_strtol_l.isra.0+0x16>
 8016ea2:	f1b8 0f00 	cmp.w	r8, #0
 8016ea6:	d000      	beq.n	8016eaa <_strtol_l.isra.0+0xe2>
 8016ea8:	426d      	negs	r5, r5
 8016eaa:	2a00      	cmp	r2, #0
 8016eac:	d0f7      	beq.n	8016e9e <_strtol_l.isra.0+0xd6>
 8016eae:	b10e      	cbz	r6, 8016eb4 <_strtol_l.isra.0+0xec>
 8016eb0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8016eb4:	6011      	str	r1, [r2, #0]
 8016eb6:	e7f2      	b.n	8016e9e <_strtol_l.isra.0+0xd6>
 8016eb8:	2430      	movs	r4, #48	; 0x30
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d1b3      	bne.n	8016e26 <_strtol_l.isra.0+0x5e>
 8016ebe:	2308      	movs	r3, #8
 8016ec0:	e7b1      	b.n	8016e26 <_strtol_l.isra.0+0x5e>
 8016ec2:	2c30      	cmp	r4, #48	; 0x30
 8016ec4:	d0a4      	beq.n	8016e10 <_strtol_l.isra.0+0x48>
 8016ec6:	230a      	movs	r3, #10
 8016ec8:	e7ad      	b.n	8016e26 <_strtol_l.isra.0+0x5e>
 8016eca:	bf00      	nop
 8016ecc:	0801b811 	.word	0x0801b811

08016ed0 <_strtol_r>:
 8016ed0:	f7ff bf7a 	b.w	8016dc8 <_strtol_l.isra.0>

08016ed4 <quorem>:
 8016ed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ed8:	6903      	ldr	r3, [r0, #16]
 8016eda:	690c      	ldr	r4, [r1, #16]
 8016edc:	42a3      	cmp	r3, r4
 8016ede:	4607      	mov	r7, r0
 8016ee0:	f2c0 8081 	blt.w	8016fe6 <quorem+0x112>
 8016ee4:	3c01      	subs	r4, #1
 8016ee6:	f101 0814 	add.w	r8, r1, #20
 8016eea:	f100 0514 	add.w	r5, r0, #20
 8016eee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016ef2:	9301      	str	r3, [sp, #4]
 8016ef4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016ef8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016efc:	3301      	adds	r3, #1
 8016efe:	429a      	cmp	r2, r3
 8016f00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016f04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016f08:	fbb2 f6f3 	udiv	r6, r2, r3
 8016f0c:	d331      	bcc.n	8016f72 <quorem+0x9e>
 8016f0e:	f04f 0e00 	mov.w	lr, #0
 8016f12:	4640      	mov	r0, r8
 8016f14:	46ac      	mov	ip, r5
 8016f16:	46f2      	mov	sl, lr
 8016f18:	f850 2b04 	ldr.w	r2, [r0], #4
 8016f1c:	b293      	uxth	r3, r2
 8016f1e:	fb06 e303 	mla	r3, r6, r3, lr
 8016f22:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8016f26:	b29b      	uxth	r3, r3
 8016f28:	ebaa 0303 	sub.w	r3, sl, r3
 8016f2c:	0c12      	lsrs	r2, r2, #16
 8016f2e:	f8dc a000 	ldr.w	sl, [ip]
 8016f32:	fb06 e202 	mla	r2, r6, r2, lr
 8016f36:	fa13 f38a 	uxtah	r3, r3, sl
 8016f3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016f3e:	fa1f fa82 	uxth.w	sl, r2
 8016f42:	f8dc 2000 	ldr.w	r2, [ip]
 8016f46:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8016f4a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016f4e:	b29b      	uxth	r3, r3
 8016f50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016f54:	4581      	cmp	r9, r0
 8016f56:	f84c 3b04 	str.w	r3, [ip], #4
 8016f5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016f5e:	d2db      	bcs.n	8016f18 <quorem+0x44>
 8016f60:	f855 300b 	ldr.w	r3, [r5, fp]
 8016f64:	b92b      	cbnz	r3, 8016f72 <quorem+0x9e>
 8016f66:	9b01      	ldr	r3, [sp, #4]
 8016f68:	3b04      	subs	r3, #4
 8016f6a:	429d      	cmp	r5, r3
 8016f6c:	461a      	mov	r2, r3
 8016f6e:	d32e      	bcc.n	8016fce <quorem+0xfa>
 8016f70:	613c      	str	r4, [r7, #16]
 8016f72:	4638      	mov	r0, r7
 8016f74:	f001 fc82 	bl	801887c <__mcmp>
 8016f78:	2800      	cmp	r0, #0
 8016f7a:	db24      	blt.n	8016fc6 <quorem+0xf2>
 8016f7c:	3601      	adds	r6, #1
 8016f7e:	4628      	mov	r0, r5
 8016f80:	f04f 0c00 	mov.w	ip, #0
 8016f84:	f858 2b04 	ldr.w	r2, [r8], #4
 8016f88:	f8d0 e000 	ldr.w	lr, [r0]
 8016f8c:	b293      	uxth	r3, r2
 8016f8e:	ebac 0303 	sub.w	r3, ip, r3
 8016f92:	0c12      	lsrs	r2, r2, #16
 8016f94:	fa13 f38e 	uxtah	r3, r3, lr
 8016f98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016f9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016fa0:	b29b      	uxth	r3, r3
 8016fa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016fa6:	45c1      	cmp	r9, r8
 8016fa8:	f840 3b04 	str.w	r3, [r0], #4
 8016fac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016fb0:	d2e8      	bcs.n	8016f84 <quorem+0xb0>
 8016fb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016fb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016fba:	b922      	cbnz	r2, 8016fc6 <quorem+0xf2>
 8016fbc:	3b04      	subs	r3, #4
 8016fbe:	429d      	cmp	r5, r3
 8016fc0:	461a      	mov	r2, r3
 8016fc2:	d30a      	bcc.n	8016fda <quorem+0x106>
 8016fc4:	613c      	str	r4, [r7, #16]
 8016fc6:	4630      	mov	r0, r6
 8016fc8:	b003      	add	sp, #12
 8016fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fce:	6812      	ldr	r2, [r2, #0]
 8016fd0:	3b04      	subs	r3, #4
 8016fd2:	2a00      	cmp	r2, #0
 8016fd4:	d1cc      	bne.n	8016f70 <quorem+0x9c>
 8016fd6:	3c01      	subs	r4, #1
 8016fd8:	e7c7      	b.n	8016f6a <quorem+0x96>
 8016fda:	6812      	ldr	r2, [r2, #0]
 8016fdc:	3b04      	subs	r3, #4
 8016fde:	2a00      	cmp	r2, #0
 8016fe0:	d1f0      	bne.n	8016fc4 <quorem+0xf0>
 8016fe2:	3c01      	subs	r4, #1
 8016fe4:	e7eb      	b.n	8016fbe <quorem+0xea>
 8016fe6:	2000      	movs	r0, #0
 8016fe8:	e7ee      	b.n	8016fc8 <quorem+0xf4>
 8016fea:	0000      	movs	r0, r0
 8016fec:	0000      	movs	r0, r0
	...

08016ff0 <_dtoa_r>:
 8016ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ff4:	ed2d 8b02 	vpush	{d8}
 8016ff8:	ec57 6b10 	vmov	r6, r7, d0
 8016ffc:	b095      	sub	sp, #84	; 0x54
 8016ffe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017000:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017004:	9105      	str	r1, [sp, #20]
 8017006:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801700a:	4604      	mov	r4, r0
 801700c:	9209      	str	r2, [sp, #36]	; 0x24
 801700e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017010:	b975      	cbnz	r5, 8017030 <_dtoa_r+0x40>
 8017012:	2010      	movs	r0, #16
 8017014:	f7fe f8dc 	bl	80151d0 <malloc>
 8017018:	4602      	mov	r2, r0
 801701a:	6260      	str	r0, [r4, #36]	; 0x24
 801701c:	b920      	cbnz	r0, 8017028 <_dtoa_r+0x38>
 801701e:	4bb2      	ldr	r3, [pc, #712]	; (80172e8 <_dtoa_r+0x2f8>)
 8017020:	21ea      	movs	r1, #234	; 0xea
 8017022:	48b2      	ldr	r0, [pc, #712]	; (80172ec <_dtoa_r+0x2fc>)
 8017024:	f001 ffb0 	bl	8018f88 <__assert_func>
 8017028:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801702c:	6005      	str	r5, [r0, #0]
 801702e:	60c5      	str	r5, [r0, #12]
 8017030:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017032:	6819      	ldr	r1, [r3, #0]
 8017034:	b151      	cbz	r1, 801704c <_dtoa_r+0x5c>
 8017036:	685a      	ldr	r2, [r3, #4]
 8017038:	604a      	str	r2, [r1, #4]
 801703a:	2301      	movs	r3, #1
 801703c:	4093      	lsls	r3, r2
 801703e:	608b      	str	r3, [r1, #8]
 8017040:	4620      	mov	r0, r4
 8017042:	f001 f993 	bl	801836c <_Bfree>
 8017046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017048:	2200      	movs	r2, #0
 801704a:	601a      	str	r2, [r3, #0]
 801704c:	1e3b      	subs	r3, r7, #0
 801704e:	bfb9      	ittee	lt
 8017050:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017054:	9303      	strlt	r3, [sp, #12]
 8017056:	2300      	movge	r3, #0
 8017058:	f8c8 3000 	strge.w	r3, [r8]
 801705c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017060:	4ba3      	ldr	r3, [pc, #652]	; (80172f0 <_dtoa_r+0x300>)
 8017062:	bfbc      	itt	lt
 8017064:	2201      	movlt	r2, #1
 8017066:	f8c8 2000 	strlt.w	r2, [r8]
 801706a:	ea33 0309 	bics.w	r3, r3, r9
 801706e:	d11b      	bne.n	80170a8 <_dtoa_r+0xb8>
 8017070:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017072:	f242 730f 	movw	r3, #9999	; 0x270f
 8017076:	6013      	str	r3, [r2, #0]
 8017078:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801707c:	4333      	orrs	r3, r6
 801707e:	f000 857a 	beq.w	8017b76 <_dtoa_r+0xb86>
 8017082:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017084:	b963      	cbnz	r3, 80170a0 <_dtoa_r+0xb0>
 8017086:	4b9b      	ldr	r3, [pc, #620]	; (80172f4 <_dtoa_r+0x304>)
 8017088:	e024      	b.n	80170d4 <_dtoa_r+0xe4>
 801708a:	4b9b      	ldr	r3, [pc, #620]	; (80172f8 <_dtoa_r+0x308>)
 801708c:	9300      	str	r3, [sp, #0]
 801708e:	3308      	adds	r3, #8
 8017090:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017092:	6013      	str	r3, [r2, #0]
 8017094:	9800      	ldr	r0, [sp, #0]
 8017096:	b015      	add	sp, #84	; 0x54
 8017098:	ecbd 8b02 	vpop	{d8}
 801709c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170a0:	4b94      	ldr	r3, [pc, #592]	; (80172f4 <_dtoa_r+0x304>)
 80170a2:	9300      	str	r3, [sp, #0]
 80170a4:	3303      	adds	r3, #3
 80170a6:	e7f3      	b.n	8017090 <_dtoa_r+0xa0>
 80170a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80170ac:	2200      	movs	r2, #0
 80170ae:	ec51 0b17 	vmov	r0, r1, d7
 80170b2:	2300      	movs	r3, #0
 80170b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80170b8:	f7e9 fd06 	bl	8000ac8 <__aeabi_dcmpeq>
 80170bc:	4680      	mov	r8, r0
 80170be:	b158      	cbz	r0, 80170d8 <_dtoa_r+0xe8>
 80170c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80170c2:	2301      	movs	r3, #1
 80170c4:	6013      	str	r3, [r2, #0]
 80170c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	f000 8551 	beq.w	8017b70 <_dtoa_r+0xb80>
 80170ce:	488b      	ldr	r0, [pc, #556]	; (80172fc <_dtoa_r+0x30c>)
 80170d0:	6018      	str	r0, [r3, #0]
 80170d2:	1e43      	subs	r3, r0, #1
 80170d4:	9300      	str	r3, [sp, #0]
 80170d6:	e7dd      	b.n	8017094 <_dtoa_r+0xa4>
 80170d8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80170dc:	aa12      	add	r2, sp, #72	; 0x48
 80170de:	a913      	add	r1, sp, #76	; 0x4c
 80170e0:	4620      	mov	r0, r4
 80170e2:	f001 fceb 	bl	8018abc <__d2b>
 80170e6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80170ea:	4683      	mov	fp, r0
 80170ec:	2d00      	cmp	r5, #0
 80170ee:	d07c      	beq.n	80171ea <_dtoa_r+0x1fa>
 80170f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80170f2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80170f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80170fa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80170fe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017102:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017106:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801710a:	4b7d      	ldr	r3, [pc, #500]	; (8017300 <_dtoa_r+0x310>)
 801710c:	2200      	movs	r2, #0
 801710e:	4630      	mov	r0, r6
 8017110:	4639      	mov	r1, r7
 8017112:	f7e9 f8b9 	bl	8000288 <__aeabi_dsub>
 8017116:	a36e      	add	r3, pc, #440	; (adr r3, 80172d0 <_dtoa_r+0x2e0>)
 8017118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801711c:	f7e9 fa6c 	bl	80005f8 <__aeabi_dmul>
 8017120:	a36d      	add	r3, pc, #436	; (adr r3, 80172d8 <_dtoa_r+0x2e8>)
 8017122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017126:	f7e9 f8b1 	bl	800028c <__adddf3>
 801712a:	4606      	mov	r6, r0
 801712c:	4628      	mov	r0, r5
 801712e:	460f      	mov	r7, r1
 8017130:	f7e9 f9f8 	bl	8000524 <__aeabi_i2d>
 8017134:	a36a      	add	r3, pc, #424	; (adr r3, 80172e0 <_dtoa_r+0x2f0>)
 8017136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801713a:	f7e9 fa5d 	bl	80005f8 <__aeabi_dmul>
 801713e:	4602      	mov	r2, r0
 8017140:	460b      	mov	r3, r1
 8017142:	4630      	mov	r0, r6
 8017144:	4639      	mov	r1, r7
 8017146:	f7e9 f8a1 	bl	800028c <__adddf3>
 801714a:	4606      	mov	r6, r0
 801714c:	460f      	mov	r7, r1
 801714e:	f7e9 fd03 	bl	8000b58 <__aeabi_d2iz>
 8017152:	2200      	movs	r2, #0
 8017154:	4682      	mov	sl, r0
 8017156:	2300      	movs	r3, #0
 8017158:	4630      	mov	r0, r6
 801715a:	4639      	mov	r1, r7
 801715c:	f7e9 fcbe 	bl	8000adc <__aeabi_dcmplt>
 8017160:	b148      	cbz	r0, 8017176 <_dtoa_r+0x186>
 8017162:	4650      	mov	r0, sl
 8017164:	f7e9 f9de 	bl	8000524 <__aeabi_i2d>
 8017168:	4632      	mov	r2, r6
 801716a:	463b      	mov	r3, r7
 801716c:	f7e9 fcac 	bl	8000ac8 <__aeabi_dcmpeq>
 8017170:	b908      	cbnz	r0, 8017176 <_dtoa_r+0x186>
 8017172:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017176:	f1ba 0f16 	cmp.w	sl, #22
 801717a:	d854      	bhi.n	8017226 <_dtoa_r+0x236>
 801717c:	4b61      	ldr	r3, [pc, #388]	; (8017304 <_dtoa_r+0x314>)
 801717e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017186:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801718a:	f7e9 fca7 	bl	8000adc <__aeabi_dcmplt>
 801718e:	2800      	cmp	r0, #0
 8017190:	d04b      	beq.n	801722a <_dtoa_r+0x23a>
 8017192:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017196:	2300      	movs	r3, #0
 8017198:	930e      	str	r3, [sp, #56]	; 0x38
 801719a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801719c:	1b5d      	subs	r5, r3, r5
 801719e:	1e6b      	subs	r3, r5, #1
 80171a0:	9304      	str	r3, [sp, #16]
 80171a2:	bf43      	ittte	mi
 80171a4:	2300      	movmi	r3, #0
 80171a6:	f1c5 0801 	rsbmi	r8, r5, #1
 80171aa:	9304      	strmi	r3, [sp, #16]
 80171ac:	f04f 0800 	movpl.w	r8, #0
 80171b0:	f1ba 0f00 	cmp.w	sl, #0
 80171b4:	db3b      	blt.n	801722e <_dtoa_r+0x23e>
 80171b6:	9b04      	ldr	r3, [sp, #16]
 80171b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80171bc:	4453      	add	r3, sl
 80171be:	9304      	str	r3, [sp, #16]
 80171c0:	2300      	movs	r3, #0
 80171c2:	9306      	str	r3, [sp, #24]
 80171c4:	9b05      	ldr	r3, [sp, #20]
 80171c6:	2b09      	cmp	r3, #9
 80171c8:	d869      	bhi.n	801729e <_dtoa_r+0x2ae>
 80171ca:	2b05      	cmp	r3, #5
 80171cc:	bfc4      	itt	gt
 80171ce:	3b04      	subgt	r3, #4
 80171d0:	9305      	strgt	r3, [sp, #20]
 80171d2:	9b05      	ldr	r3, [sp, #20]
 80171d4:	f1a3 0302 	sub.w	r3, r3, #2
 80171d8:	bfcc      	ite	gt
 80171da:	2500      	movgt	r5, #0
 80171dc:	2501      	movle	r5, #1
 80171de:	2b03      	cmp	r3, #3
 80171e0:	d869      	bhi.n	80172b6 <_dtoa_r+0x2c6>
 80171e2:	e8df f003 	tbb	[pc, r3]
 80171e6:	4e2c      	.short	0x4e2c
 80171e8:	5a4c      	.short	0x5a4c
 80171ea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80171ee:	441d      	add	r5, r3
 80171f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80171f4:	2b20      	cmp	r3, #32
 80171f6:	bfc1      	itttt	gt
 80171f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80171fc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8017200:	fa09 f303 	lslgt.w	r3, r9, r3
 8017204:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017208:	bfda      	itte	le
 801720a:	f1c3 0320 	rsble	r3, r3, #32
 801720e:	fa06 f003 	lslle.w	r0, r6, r3
 8017212:	4318      	orrgt	r0, r3
 8017214:	f7e9 f976 	bl	8000504 <__aeabi_ui2d>
 8017218:	2301      	movs	r3, #1
 801721a:	4606      	mov	r6, r0
 801721c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8017220:	3d01      	subs	r5, #1
 8017222:	9310      	str	r3, [sp, #64]	; 0x40
 8017224:	e771      	b.n	801710a <_dtoa_r+0x11a>
 8017226:	2301      	movs	r3, #1
 8017228:	e7b6      	b.n	8017198 <_dtoa_r+0x1a8>
 801722a:	900e      	str	r0, [sp, #56]	; 0x38
 801722c:	e7b5      	b.n	801719a <_dtoa_r+0x1aa>
 801722e:	f1ca 0300 	rsb	r3, sl, #0
 8017232:	9306      	str	r3, [sp, #24]
 8017234:	2300      	movs	r3, #0
 8017236:	eba8 080a 	sub.w	r8, r8, sl
 801723a:	930d      	str	r3, [sp, #52]	; 0x34
 801723c:	e7c2      	b.n	80171c4 <_dtoa_r+0x1d4>
 801723e:	2300      	movs	r3, #0
 8017240:	9308      	str	r3, [sp, #32]
 8017242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017244:	2b00      	cmp	r3, #0
 8017246:	dc39      	bgt.n	80172bc <_dtoa_r+0x2cc>
 8017248:	f04f 0901 	mov.w	r9, #1
 801724c:	f8cd 9004 	str.w	r9, [sp, #4]
 8017250:	464b      	mov	r3, r9
 8017252:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017256:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017258:	2200      	movs	r2, #0
 801725a:	6042      	str	r2, [r0, #4]
 801725c:	2204      	movs	r2, #4
 801725e:	f102 0614 	add.w	r6, r2, #20
 8017262:	429e      	cmp	r6, r3
 8017264:	6841      	ldr	r1, [r0, #4]
 8017266:	d92f      	bls.n	80172c8 <_dtoa_r+0x2d8>
 8017268:	4620      	mov	r0, r4
 801726a:	f001 f83f 	bl	80182ec <_Balloc>
 801726e:	9000      	str	r0, [sp, #0]
 8017270:	2800      	cmp	r0, #0
 8017272:	d14b      	bne.n	801730c <_dtoa_r+0x31c>
 8017274:	4b24      	ldr	r3, [pc, #144]	; (8017308 <_dtoa_r+0x318>)
 8017276:	4602      	mov	r2, r0
 8017278:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801727c:	e6d1      	b.n	8017022 <_dtoa_r+0x32>
 801727e:	2301      	movs	r3, #1
 8017280:	e7de      	b.n	8017240 <_dtoa_r+0x250>
 8017282:	2300      	movs	r3, #0
 8017284:	9308      	str	r3, [sp, #32]
 8017286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017288:	eb0a 0903 	add.w	r9, sl, r3
 801728c:	f109 0301 	add.w	r3, r9, #1
 8017290:	2b01      	cmp	r3, #1
 8017292:	9301      	str	r3, [sp, #4]
 8017294:	bfb8      	it	lt
 8017296:	2301      	movlt	r3, #1
 8017298:	e7dd      	b.n	8017256 <_dtoa_r+0x266>
 801729a:	2301      	movs	r3, #1
 801729c:	e7f2      	b.n	8017284 <_dtoa_r+0x294>
 801729e:	2501      	movs	r5, #1
 80172a0:	2300      	movs	r3, #0
 80172a2:	9305      	str	r3, [sp, #20]
 80172a4:	9508      	str	r5, [sp, #32]
 80172a6:	f04f 39ff 	mov.w	r9, #4294967295
 80172aa:	2200      	movs	r2, #0
 80172ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80172b0:	2312      	movs	r3, #18
 80172b2:	9209      	str	r2, [sp, #36]	; 0x24
 80172b4:	e7cf      	b.n	8017256 <_dtoa_r+0x266>
 80172b6:	2301      	movs	r3, #1
 80172b8:	9308      	str	r3, [sp, #32]
 80172ba:	e7f4      	b.n	80172a6 <_dtoa_r+0x2b6>
 80172bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80172c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80172c4:	464b      	mov	r3, r9
 80172c6:	e7c6      	b.n	8017256 <_dtoa_r+0x266>
 80172c8:	3101      	adds	r1, #1
 80172ca:	6041      	str	r1, [r0, #4]
 80172cc:	0052      	lsls	r2, r2, #1
 80172ce:	e7c6      	b.n	801725e <_dtoa_r+0x26e>
 80172d0:	636f4361 	.word	0x636f4361
 80172d4:	3fd287a7 	.word	0x3fd287a7
 80172d8:	8b60c8b3 	.word	0x8b60c8b3
 80172dc:	3fc68a28 	.word	0x3fc68a28
 80172e0:	509f79fb 	.word	0x509f79fb
 80172e4:	3fd34413 	.word	0x3fd34413
 80172e8:	0801b91e 	.word	0x0801b91e
 80172ec:	0801b935 	.word	0x0801b935
 80172f0:	7ff00000 	.word	0x7ff00000
 80172f4:	0801b91a 	.word	0x0801b91a
 80172f8:	0801b911 	.word	0x0801b911
 80172fc:	0801b795 	.word	0x0801b795
 8017300:	3ff80000 	.word	0x3ff80000
 8017304:	0801bab0 	.word	0x0801bab0
 8017308:	0801b994 	.word	0x0801b994
 801730c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801730e:	9a00      	ldr	r2, [sp, #0]
 8017310:	601a      	str	r2, [r3, #0]
 8017312:	9b01      	ldr	r3, [sp, #4]
 8017314:	2b0e      	cmp	r3, #14
 8017316:	f200 80ad 	bhi.w	8017474 <_dtoa_r+0x484>
 801731a:	2d00      	cmp	r5, #0
 801731c:	f000 80aa 	beq.w	8017474 <_dtoa_r+0x484>
 8017320:	f1ba 0f00 	cmp.w	sl, #0
 8017324:	dd36      	ble.n	8017394 <_dtoa_r+0x3a4>
 8017326:	4ac3      	ldr	r2, [pc, #780]	; (8017634 <_dtoa_r+0x644>)
 8017328:	f00a 030f 	and.w	r3, sl, #15
 801732c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017330:	ed93 7b00 	vldr	d7, [r3]
 8017334:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8017338:	ea4f 172a 	mov.w	r7, sl, asr #4
 801733c:	eeb0 8a47 	vmov.f32	s16, s14
 8017340:	eef0 8a67 	vmov.f32	s17, s15
 8017344:	d016      	beq.n	8017374 <_dtoa_r+0x384>
 8017346:	4bbc      	ldr	r3, [pc, #752]	; (8017638 <_dtoa_r+0x648>)
 8017348:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801734c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017350:	f7e9 fa7c 	bl	800084c <__aeabi_ddiv>
 8017354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017358:	f007 070f 	and.w	r7, r7, #15
 801735c:	2503      	movs	r5, #3
 801735e:	4eb6      	ldr	r6, [pc, #728]	; (8017638 <_dtoa_r+0x648>)
 8017360:	b957      	cbnz	r7, 8017378 <_dtoa_r+0x388>
 8017362:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017366:	ec53 2b18 	vmov	r2, r3, d8
 801736a:	f7e9 fa6f 	bl	800084c <__aeabi_ddiv>
 801736e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017372:	e029      	b.n	80173c8 <_dtoa_r+0x3d8>
 8017374:	2502      	movs	r5, #2
 8017376:	e7f2      	b.n	801735e <_dtoa_r+0x36e>
 8017378:	07f9      	lsls	r1, r7, #31
 801737a:	d508      	bpl.n	801738e <_dtoa_r+0x39e>
 801737c:	ec51 0b18 	vmov	r0, r1, d8
 8017380:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017384:	f7e9 f938 	bl	80005f8 <__aeabi_dmul>
 8017388:	ec41 0b18 	vmov	d8, r0, r1
 801738c:	3501      	adds	r5, #1
 801738e:	107f      	asrs	r7, r7, #1
 8017390:	3608      	adds	r6, #8
 8017392:	e7e5      	b.n	8017360 <_dtoa_r+0x370>
 8017394:	f000 80a6 	beq.w	80174e4 <_dtoa_r+0x4f4>
 8017398:	f1ca 0600 	rsb	r6, sl, #0
 801739c:	4ba5      	ldr	r3, [pc, #660]	; (8017634 <_dtoa_r+0x644>)
 801739e:	4fa6      	ldr	r7, [pc, #664]	; (8017638 <_dtoa_r+0x648>)
 80173a0:	f006 020f 	and.w	r2, r6, #15
 80173a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80173a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80173b0:	f7e9 f922 	bl	80005f8 <__aeabi_dmul>
 80173b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80173b8:	1136      	asrs	r6, r6, #4
 80173ba:	2300      	movs	r3, #0
 80173bc:	2502      	movs	r5, #2
 80173be:	2e00      	cmp	r6, #0
 80173c0:	f040 8085 	bne.w	80174ce <_dtoa_r+0x4de>
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d1d2      	bne.n	801736e <_dtoa_r+0x37e>
 80173c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	f000 808c 	beq.w	80174e8 <_dtoa_r+0x4f8>
 80173d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80173d4:	4b99      	ldr	r3, [pc, #612]	; (801763c <_dtoa_r+0x64c>)
 80173d6:	2200      	movs	r2, #0
 80173d8:	4630      	mov	r0, r6
 80173da:	4639      	mov	r1, r7
 80173dc:	f7e9 fb7e 	bl	8000adc <__aeabi_dcmplt>
 80173e0:	2800      	cmp	r0, #0
 80173e2:	f000 8081 	beq.w	80174e8 <_dtoa_r+0x4f8>
 80173e6:	9b01      	ldr	r3, [sp, #4]
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d07d      	beq.n	80174e8 <_dtoa_r+0x4f8>
 80173ec:	f1b9 0f00 	cmp.w	r9, #0
 80173f0:	dd3c      	ble.n	801746c <_dtoa_r+0x47c>
 80173f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80173f6:	9307      	str	r3, [sp, #28]
 80173f8:	2200      	movs	r2, #0
 80173fa:	4b91      	ldr	r3, [pc, #580]	; (8017640 <_dtoa_r+0x650>)
 80173fc:	4630      	mov	r0, r6
 80173fe:	4639      	mov	r1, r7
 8017400:	f7e9 f8fa 	bl	80005f8 <__aeabi_dmul>
 8017404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017408:	3501      	adds	r5, #1
 801740a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801740e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017412:	4628      	mov	r0, r5
 8017414:	f7e9 f886 	bl	8000524 <__aeabi_i2d>
 8017418:	4632      	mov	r2, r6
 801741a:	463b      	mov	r3, r7
 801741c:	f7e9 f8ec 	bl	80005f8 <__aeabi_dmul>
 8017420:	4b88      	ldr	r3, [pc, #544]	; (8017644 <_dtoa_r+0x654>)
 8017422:	2200      	movs	r2, #0
 8017424:	f7e8 ff32 	bl	800028c <__adddf3>
 8017428:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801742c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017430:	9303      	str	r3, [sp, #12]
 8017432:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017434:	2b00      	cmp	r3, #0
 8017436:	d15c      	bne.n	80174f2 <_dtoa_r+0x502>
 8017438:	4b83      	ldr	r3, [pc, #524]	; (8017648 <_dtoa_r+0x658>)
 801743a:	2200      	movs	r2, #0
 801743c:	4630      	mov	r0, r6
 801743e:	4639      	mov	r1, r7
 8017440:	f7e8 ff22 	bl	8000288 <__aeabi_dsub>
 8017444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017448:	4606      	mov	r6, r0
 801744a:	460f      	mov	r7, r1
 801744c:	f7e9 fb64 	bl	8000b18 <__aeabi_dcmpgt>
 8017450:	2800      	cmp	r0, #0
 8017452:	f040 8296 	bne.w	8017982 <_dtoa_r+0x992>
 8017456:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801745a:	4630      	mov	r0, r6
 801745c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017460:	4639      	mov	r1, r7
 8017462:	f7e9 fb3b 	bl	8000adc <__aeabi_dcmplt>
 8017466:	2800      	cmp	r0, #0
 8017468:	f040 8288 	bne.w	801797c <_dtoa_r+0x98c>
 801746c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017470:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017474:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017476:	2b00      	cmp	r3, #0
 8017478:	f2c0 8158 	blt.w	801772c <_dtoa_r+0x73c>
 801747c:	f1ba 0f0e 	cmp.w	sl, #14
 8017480:	f300 8154 	bgt.w	801772c <_dtoa_r+0x73c>
 8017484:	4b6b      	ldr	r3, [pc, #428]	; (8017634 <_dtoa_r+0x644>)
 8017486:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801748a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801748e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017490:	2b00      	cmp	r3, #0
 8017492:	f280 80e3 	bge.w	801765c <_dtoa_r+0x66c>
 8017496:	9b01      	ldr	r3, [sp, #4]
 8017498:	2b00      	cmp	r3, #0
 801749a:	f300 80df 	bgt.w	801765c <_dtoa_r+0x66c>
 801749e:	f040 826d 	bne.w	801797c <_dtoa_r+0x98c>
 80174a2:	4b69      	ldr	r3, [pc, #420]	; (8017648 <_dtoa_r+0x658>)
 80174a4:	2200      	movs	r2, #0
 80174a6:	4640      	mov	r0, r8
 80174a8:	4649      	mov	r1, r9
 80174aa:	f7e9 f8a5 	bl	80005f8 <__aeabi_dmul>
 80174ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80174b2:	f7e9 fb27 	bl	8000b04 <__aeabi_dcmpge>
 80174b6:	9e01      	ldr	r6, [sp, #4]
 80174b8:	4637      	mov	r7, r6
 80174ba:	2800      	cmp	r0, #0
 80174bc:	f040 8243 	bne.w	8017946 <_dtoa_r+0x956>
 80174c0:	9d00      	ldr	r5, [sp, #0]
 80174c2:	2331      	movs	r3, #49	; 0x31
 80174c4:	f805 3b01 	strb.w	r3, [r5], #1
 80174c8:	f10a 0a01 	add.w	sl, sl, #1
 80174cc:	e23f      	b.n	801794e <_dtoa_r+0x95e>
 80174ce:	07f2      	lsls	r2, r6, #31
 80174d0:	d505      	bpl.n	80174de <_dtoa_r+0x4ee>
 80174d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80174d6:	f7e9 f88f 	bl	80005f8 <__aeabi_dmul>
 80174da:	3501      	adds	r5, #1
 80174dc:	2301      	movs	r3, #1
 80174de:	1076      	asrs	r6, r6, #1
 80174e0:	3708      	adds	r7, #8
 80174e2:	e76c      	b.n	80173be <_dtoa_r+0x3ce>
 80174e4:	2502      	movs	r5, #2
 80174e6:	e76f      	b.n	80173c8 <_dtoa_r+0x3d8>
 80174e8:	9b01      	ldr	r3, [sp, #4]
 80174ea:	f8cd a01c 	str.w	sl, [sp, #28]
 80174ee:	930c      	str	r3, [sp, #48]	; 0x30
 80174f0:	e78d      	b.n	801740e <_dtoa_r+0x41e>
 80174f2:	9900      	ldr	r1, [sp, #0]
 80174f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80174f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80174f8:	4b4e      	ldr	r3, [pc, #312]	; (8017634 <_dtoa_r+0x644>)
 80174fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80174fe:	4401      	add	r1, r0
 8017500:	9102      	str	r1, [sp, #8]
 8017502:	9908      	ldr	r1, [sp, #32]
 8017504:	eeb0 8a47 	vmov.f32	s16, s14
 8017508:	eef0 8a67 	vmov.f32	s17, s15
 801750c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017510:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017514:	2900      	cmp	r1, #0
 8017516:	d045      	beq.n	80175a4 <_dtoa_r+0x5b4>
 8017518:	494c      	ldr	r1, [pc, #304]	; (801764c <_dtoa_r+0x65c>)
 801751a:	2000      	movs	r0, #0
 801751c:	f7e9 f996 	bl	800084c <__aeabi_ddiv>
 8017520:	ec53 2b18 	vmov	r2, r3, d8
 8017524:	f7e8 feb0 	bl	8000288 <__aeabi_dsub>
 8017528:	9d00      	ldr	r5, [sp, #0]
 801752a:	ec41 0b18 	vmov	d8, r0, r1
 801752e:	4639      	mov	r1, r7
 8017530:	4630      	mov	r0, r6
 8017532:	f7e9 fb11 	bl	8000b58 <__aeabi_d2iz>
 8017536:	900c      	str	r0, [sp, #48]	; 0x30
 8017538:	f7e8 fff4 	bl	8000524 <__aeabi_i2d>
 801753c:	4602      	mov	r2, r0
 801753e:	460b      	mov	r3, r1
 8017540:	4630      	mov	r0, r6
 8017542:	4639      	mov	r1, r7
 8017544:	f7e8 fea0 	bl	8000288 <__aeabi_dsub>
 8017548:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801754a:	3330      	adds	r3, #48	; 0x30
 801754c:	f805 3b01 	strb.w	r3, [r5], #1
 8017550:	ec53 2b18 	vmov	r2, r3, d8
 8017554:	4606      	mov	r6, r0
 8017556:	460f      	mov	r7, r1
 8017558:	f7e9 fac0 	bl	8000adc <__aeabi_dcmplt>
 801755c:	2800      	cmp	r0, #0
 801755e:	d165      	bne.n	801762c <_dtoa_r+0x63c>
 8017560:	4632      	mov	r2, r6
 8017562:	463b      	mov	r3, r7
 8017564:	4935      	ldr	r1, [pc, #212]	; (801763c <_dtoa_r+0x64c>)
 8017566:	2000      	movs	r0, #0
 8017568:	f7e8 fe8e 	bl	8000288 <__aeabi_dsub>
 801756c:	ec53 2b18 	vmov	r2, r3, d8
 8017570:	f7e9 fab4 	bl	8000adc <__aeabi_dcmplt>
 8017574:	2800      	cmp	r0, #0
 8017576:	f040 80b9 	bne.w	80176ec <_dtoa_r+0x6fc>
 801757a:	9b02      	ldr	r3, [sp, #8]
 801757c:	429d      	cmp	r5, r3
 801757e:	f43f af75 	beq.w	801746c <_dtoa_r+0x47c>
 8017582:	4b2f      	ldr	r3, [pc, #188]	; (8017640 <_dtoa_r+0x650>)
 8017584:	ec51 0b18 	vmov	r0, r1, d8
 8017588:	2200      	movs	r2, #0
 801758a:	f7e9 f835 	bl	80005f8 <__aeabi_dmul>
 801758e:	4b2c      	ldr	r3, [pc, #176]	; (8017640 <_dtoa_r+0x650>)
 8017590:	ec41 0b18 	vmov	d8, r0, r1
 8017594:	2200      	movs	r2, #0
 8017596:	4630      	mov	r0, r6
 8017598:	4639      	mov	r1, r7
 801759a:	f7e9 f82d 	bl	80005f8 <__aeabi_dmul>
 801759e:	4606      	mov	r6, r0
 80175a0:	460f      	mov	r7, r1
 80175a2:	e7c4      	b.n	801752e <_dtoa_r+0x53e>
 80175a4:	ec51 0b17 	vmov	r0, r1, d7
 80175a8:	f7e9 f826 	bl	80005f8 <__aeabi_dmul>
 80175ac:	9b02      	ldr	r3, [sp, #8]
 80175ae:	9d00      	ldr	r5, [sp, #0]
 80175b0:	930c      	str	r3, [sp, #48]	; 0x30
 80175b2:	ec41 0b18 	vmov	d8, r0, r1
 80175b6:	4639      	mov	r1, r7
 80175b8:	4630      	mov	r0, r6
 80175ba:	f7e9 facd 	bl	8000b58 <__aeabi_d2iz>
 80175be:	9011      	str	r0, [sp, #68]	; 0x44
 80175c0:	f7e8 ffb0 	bl	8000524 <__aeabi_i2d>
 80175c4:	4602      	mov	r2, r0
 80175c6:	460b      	mov	r3, r1
 80175c8:	4630      	mov	r0, r6
 80175ca:	4639      	mov	r1, r7
 80175cc:	f7e8 fe5c 	bl	8000288 <__aeabi_dsub>
 80175d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80175d2:	3330      	adds	r3, #48	; 0x30
 80175d4:	f805 3b01 	strb.w	r3, [r5], #1
 80175d8:	9b02      	ldr	r3, [sp, #8]
 80175da:	429d      	cmp	r5, r3
 80175dc:	4606      	mov	r6, r0
 80175de:	460f      	mov	r7, r1
 80175e0:	f04f 0200 	mov.w	r2, #0
 80175e4:	d134      	bne.n	8017650 <_dtoa_r+0x660>
 80175e6:	4b19      	ldr	r3, [pc, #100]	; (801764c <_dtoa_r+0x65c>)
 80175e8:	ec51 0b18 	vmov	r0, r1, d8
 80175ec:	f7e8 fe4e 	bl	800028c <__adddf3>
 80175f0:	4602      	mov	r2, r0
 80175f2:	460b      	mov	r3, r1
 80175f4:	4630      	mov	r0, r6
 80175f6:	4639      	mov	r1, r7
 80175f8:	f7e9 fa8e 	bl	8000b18 <__aeabi_dcmpgt>
 80175fc:	2800      	cmp	r0, #0
 80175fe:	d175      	bne.n	80176ec <_dtoa_r+0x6fc>
 8017600:	ec53 2b18 	vmov	r2, r3, d8
 8017604:	4911      	ldr	r1, [pc, #68]	; (801764c <_dtoa_r+0x65c>)
 8017606:	2000      	movs	r0, #0
 8017608:	f7e8 fe3e 	bl	8000288 <__aeabi_dsub>
 801760c:	4602      	mov	r2, r0
 801760e:	460b      	mov	r3, r1
 8017610:	4630      	mov	r0, r6
 8017612:	4639      	mov	r1, r7
 8017614:	f7e9 fa62 	bl	8000adc <__aeabi_dcmplt>
 8017618:	2800      	cmp	r0, #0
 801761a:	f43f af27 	beq.w	801746c <_dtoa_r+0x47c>
 801761e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017620:	1e6b      	subs	r3, r5, #1
 8017622:	930c      	str	r3, [sp, #48]	; 0x30
 8017624:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017628:	2b30      	cmp	r3, #48	; 0x30
 801762a:	d0f8      	beq.n	801761e <_dtoa_r+0x62e>
 801762c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8017630:	e04a      	b.n	80176c8 <_dtoa_r+0x6d8>
 8017632:	bf00      	nop
 8017634:	0801bab0 	.word	0x0801bab0
 8017638:	0801ba88 	.word	0x0801ba88
 801763c:	3ff00000 	.word	0x3ff00000
 8017640:	40240000 	.word	0x40240000
 8017644:	401c0000 	.word	0x401c0000
 8017648:	40140000 	.word	0x40140000
 801764c:	3fe00000 	.word	0x3fe00000
 8017650:	4baf      	ldr	r3, [pc, #700]	; (8017910 <_dtoa_r+0x920>)
 8017652:	f7e8 ffd1 	bl	80005f8 <__aeabi_dmul>
 8017656:	4606      	mov	r6, r0
 8017658:	460f      	mov	r7, r1
 801765a:	e7ac      	b.n	80175b6 <_dtoa_r+0x5c6>
 801765c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017660:	9d00      	ldr	r5, [sp, #0]
 8017662:	4642      	mov	r2, r8
 8017664:	464b      	mov	r3, r9
 8017666:	4630      	mov	r0, r6
 8017668:	4639      	mov	r1, r7
 801766a:	f7e9 f8ef 	bl	800084c <__aeabi_ddiv>
 801766e:	f7e9 fa73 	bl	8000b58 <__aeabi_d2iz>
 8017672:	9002      	str	r0, [sp, #8]
 8017674:	f7e8 ff56 	bl	8000524 <__aeabi_i2d>
 8017678:	4642      	mov	r2, r8
 801767a:	464b      	mov	r3, r9
 801767c:	f7e8 ffbc 	bl	80005f8 <__aeabi_dmul>
 8017680:	4602      	mov	r2, r0
 8017682:	460b      	mov	r3, r1
 8017684:	4630      	mov	r0, r6
 8017686:	4639      	mov	r1, r7
 8017688:	f7e8 fdfe 	bl	8000288 <__aeabi_dsub>
 801768c:	9e02      	ldr	r6, [sp, #8]
 801768e:	9f01      	ldr	r7, [sp, #4]
 8017690:	3630      	adds	r6, #48	; 0x30
 8017692:	f805 6b01 	strb.w	r6, [r5], #1
 8017696:	9e00      	ldr	r6, [sp, #0]
 8017698:	1bae      	subs	r6, r5, r6
 801769a:	42b7      	cmp	r7, r6
 801769c:	4602      	mov	r2, r0
 801769e:	460b      	mov	r3, r1
 80176a0:	d137      	bne.n	8017712 <_dtoa_r+0x722>
 80176a2:	f7e8 fdf3 	bl	800028c <__adddf3>
 80176a6:	4642      	mov	r2, r8
 80176a8:	464b      	mov	r3, r9
 80176aa:	4606      	mov	r6, r0
 80176ac:	460f      	mov	r7, r1
 80176ae:	f7e9 fa33 	bl	8000b18 <__aeabi_dcmpgt>
 80176b2:	b9c8      	cbnz	r0, 80176e8 <_dtoa_r+0x6f8>
 80176b4:	4642      	mov	r2, r8
 80176b6:	464b      	mov	r3, r9
 80176b8:	4630      	mov	r0, r6
 80176ba:	4639      	mov	r1, r7
 80176bc:	f7e9 fa04 	bl	8000ac8 <__aeabi_dcmpeq>
 80176c0:	b110      	cbz	r0, 80176c8 <_dtoa_r+0x6d8>
 80176c2:	9b02      	ldr	r3, [sp, #8]
 80176c4:	07d9      	lsls	r1, r3, #31
 80176c6:	d40f      	bmi.n	80176e8 <_dtoa_r+0x6f8>
 80176c8:	4620      	mov	r0, r4
 80176ca:	4659      	mov	r1, fp
 80176cc:	f000 fe4e 	bl	801836c <_Bfree>
 80176d0:	2300      	movs	r3, #0
 80176d2:	702b      	strb	r3, [r5, #0]
 80176d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80176d6:	f10a 0001 	add.w	r0, sl, #1
 80176da:	6018      	str	r0, [r3, #0]
 80176dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80176de:	2b00      	cmp	r3, #0
 80176e0:	f43f acd8 	beq.w	8017094 <_dtoa_r+0xa4>
 80176e4:	601d      	str	r5, [r3, #0]
 80176e6:	e4d5      	b.n	8017094 <_dtoa_r+0xa4>
 80176e8:	f8cd a01c 	str.w	sl, [sp, #28]
 80176ec:	462b      	mov	r3, r5
 80176ee:	461d      	mov	r5, r3
 80176f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80176f4:	2a39      	cmp	r2, #57	; 0x39
 80176f6:	d108      	bne.n	801770a <_dtoa_r+0x71a>
 80176f8:	9a00      	ldr	r2, [sp, #0]
 80176fa:	429a      	cmp	r2, r3
 80176fc:	d1f7      	bne.n	80176ee <_dtoa_r+0x6fe>
 80176fe:	9a07      	ldr	r2, [sp, #28]
 8017700:	9900      	ldr	r1, [sp, #0]
 8017702:	3201      	adds	r2, #1
 8017704:	9207      	str	r2, [sp, #28]
 8017706:	2230      	movs	r2, #48	; 0x30
 8017708:	700a      	strb	r2, [r1, #0]
 801770a:	781a      	ldrb	r2, [r3, #0]
 801770c:	3201      	adds	r2, #1
 801770e:	701a      	strb	r2, [r3, #0]
 8017710:	e78c      	b.n	801762c <_dtoa_r+0x63c>
 8017712:	4b7f      	ldr	r3, [pc, #508]	; (8017910 <_dtoa_r+0x920>)
 8017714:	2200      	movs	r2, #0
 8017716:	f7e8 ff6f 	bl	80005f8 <__aeabi_dmul>
 801771a:	2200      	movs	r2, #0
 801771c:	2300      	movs	r3, #0
 801771e:	4606      	mov	r6, r0
 8017720:	460f      	mov	r7, r1
 8017722:	f7e9 f9d1 	bl	8000ac8 <__aeabi_dcmpeq>
 8017726:	2800      	cmp	r0, #0
 8017728:	d09b      	beq.n	8017662 <_dtoa_r+0x672>
 801772a:	e7cd      	b.n	80176c8 <_dtoa_r+0x6d8>
 801772c:	9a08      	ldr	r2, [sp, #32]
 801772e:	2a00      	cmp	r2, #0
 8017730:	f000 80c4 	beq.w	80178bc <_dtoa_r+0x8cc>
 8017734:	9a05      	ldr	r2, [sp, #20]
 8017736:	2a01      	cmp	r2, #1
 8017738:	f300 80a8 	bgt.w	801788c <_dtoa_r+0x89c>
 801773c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801773e:	2a00      	cmp	r2, #0
 8017740:	f000 80a0 	beq.w	8017884 <_dtoa_r+0x894>
 8017744:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017748:	9e06      	ldr	r6, [sp, #24]
 801774a:	4645      	mov	r5, r8
 801774c:	9a04      	ldr	r2, [sp, #16]
 801774e:	2101      	movs	r1, #1
 8017750:	441a      	add	r2, r3
 8017752:	4620      	mov	r0, r4
 8017754:	4498      	add	r8, r3
 8017756:	9204      	str	r2, [sp, #16]
 8017758:	f000 ff0e 	bl	8018578 <__i2b>
 801775c:	4607      	mov	r7, r0
 801775e:	2d00      	cmp	r5, #0
 8017760:	dd0b      	ble.n	801777a <_dtoa_r+0x78a>
 8017762:	9b04      	ldr	r3, [sp, #16]
 8017764:	2b00      	cmp	r3, #0
 8017766:	dd08      	ble.n	801777a <_dtoa_r+0x78a>
 8017768:	42ab      	cmp	r3, r5
 801776a:	9a04      	ldr	r2, [sp, #16]
 801776c:	bfa8      	it	ge
 801776e:	462b      	movge	r3, r5
 8017770:	eba8 0803 	sub.w	r8, r8, r3
 8017774:	1aed      	subs	r5, r5, r3
 8017776:	1ad3      	subs	r3, r2, r3
 8017778:	9304      	str	r3, [sp, #16]
 801777a:	9b06      	ldr	r3, [sp, #24]
 801777c:	b1fb      	cbz	r3, 80177be <_dtoa_r+0x7ce>
 801777e:	9b08      	ldr	r3, [sp, #32]
 8017780:	2b00      	cmp	r3, #0
 8017782:	f000 809f 	beq.w	80178c4 <_dtoa_r+0x8d4>
 8017786:	2e00      	cmp	r6, #0
 8017788:	dd11      	ble.n	80177ae <_dtoa_r+0x7be>
 801778a:	4639      	mov	r1, r7
 801778c:	4632      	mov	r2, r6
 801778e:	4620      	mov	r0, r4
 8017790:	f000 ffae 	bl	80186f0 <__pow5mult>
 8017794:	465a      	mov	r2, fp
 8017796:	4601      	mov	r1, r0
 8017798:	4607      	mov	r7, r0
 801779a:	4620      	mov	r0, r4
 801779c:	f000 ff02 	bl	80185a4 <__multiply>
 80177a0:	4659      	mov	r1, fp
 80177a2:	9007      	str	r0, [sp, #28]
 80177a4:	4620      	mov	r0, r4
 80177a6:	f000 fde1 	bl	801836c <_Bfree>
 80177aa:	9b07      	ldr	r3, [sp, #28]
 80177ac:	469b      	mov	fp, r3
 80177ae:	9b06      	ldr	r3, [sp, #24]
 80177b0:	1b9a      	subs	r2, r3, r6
 80177b2:	d004      	beq.n	80177be <_dtoa_r+0x7ce>
 80177b4:	4659      	mov	r1, fp
 80177b6:	4620      	mov	r0, r4
 80177b8:	f000 ff9a 	bl	80186f0 <__pow5mult>
 80177bc:	4683      	mov	fp, r0
 80177be:	2101      	movs	r1, #1
 80177c0:	4620      	mov	r0, r4
 80177c2:	f000 fed9 	bl	8018578 <__i2b>
 80177c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	4606      	mov	r6, r0
 80177cc:	dd7c      	ble.n	80178c8 <_dtoa_r+0x8d8>
 80177ce:	461a      	mov	r2, r3
 80177d0:	4601      	mov	r1, r0
 80177d2:	4620      	mov	r0, r4
 80177d4:	f000 ff8c 	bl	80186f0 <__pow5mult>
 80177d8:	9b05      	ldr	r3, [sp, #20]
 80177da:	2b01      	cmp	r3, #1
 80177dc:	4606      	mov	r6, r0
 80177de:	dd76      	ble.n	80178ce <_dtoa_r+0x8de>
 80177e0:	2300      	movs	r3, #0
 80177e2:	9306      	str	r3, [sp, #24]
 80177e4:	6933      	ldr	r3, [r6, #16]
 80177e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80177ea:	6918      	ldr	r0, [r3, #16]
 80177ec:	f000 fe74 	bl	80184d8 <__hi0bits>
 80177f0:	f1c0 0020 	rsb	r0, r0, #32
 80177f4:	9b04      	ldr	r3, [sp, #16]
 80177f6:	4418      	add	r0, r3
 80177f8:	f010 001f 	ands.w	r0, r0, #31
 80177fc:	f000 8086 	beq.w	801790c <_dtoa_r+0x91c>
 8017800:	f1c0 0320 	rsb	r3, r0, #32
 8017804:	2b04      	cmp	r3, #4
 8017806:	dd7f      	ble.n	8017908 <_dtoa_r+0x918>
 8017808:	f1c0 001c 	rsb	r0, r0, #28
 801780c:	9b04      	ldr	r3, [sp, #16]
 801780e:	4403      	add	r3, r0
 8017810:	4480      	add	r8, r0
 8017812:	4405      	add	r5, r0
 8017814:	9304      	str	r3, [sp, #16]
 8017816:	f1b8 0f00 	cmp.w	r8, #0
 801781a:	dd05      	ble.n	8017828 <_dtoa_r+0x838>
 801781c:	4659      	mov	r1, fp
 801781e:	4642      	mov	r2, r8
 8017820:	4620      	mov	r0, r4
 8017822:	f000 ffbf 	bl	80187a4 <__lshift>
 8017826:	4683      	mov	fp, r0
 8017828:	9b04      	ldr	r3, [sp, #16]
 801782a:	2b00      	cmp	r3, #0
 801782c:	dd05      	ble.n	801783a <_dtoa_r+0x84a>
 801782e:	4631      	mov	r1, r6
 8017830:	461a      	mov	r2, r3
 8017832:	4620      	mov	r0, r4
 8017834:	f000 ffb6 	bl	80187a4 <__lshift>
 8017838:	4606      	mov	r6, r0
 801783a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801783c:	2b00      	cmp	r3, #0
 801783e:	d069      	beq.n	8017914 <_dtoa_r+0x924>
 8017840:	4631      	mov	r1, r6
 8017842:	4658      	mov	r0, fp
 8017844:	f001 f81a 	bl	801887c <__mcmp>
 8017848:	2800      	cmp	r0, #0
 801784a:	da63      	bge.n	8017914 <_dtoa_r+0x924>
 801784c:	2300      	movs	r3, #0
 801784e:	4659      	mov	r1, fp
 8017850:	220a      	movs	r2, #10
 8017852:	4620      	mov	r0, r4
 8017854:	f000 fdac 	bl	80183b0 <__multadd>
 8017858:	9b08      	ldr	r3, [sp, #32]
 801785a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801785e:	4683      	mov	fp, r0
 8017860:	2b00      	cmp	r3, #0
 8017862:	f000 818f 	beq.w	8017b84 <_dtoa_r+0xb94>
 8017866:	4639      	mov	r1, r7
 8017868:	2300      	movs	r3, #0
 801786a:	220a      	movs	r2, #10
 801786c:	4620      	mov	r0, r4
 801786e:	f000 fd9f 	bl	80183b0 <__multadd>
 8017872:	f1b9 0f00 	cmp.w	r9, #0
 8017876:	4607      	mov	r7, r0
 8017878:	f300 808e 	bgt.w	8017998 <_dtoa_r+0x9a8>
 801787c:	9b05      	ldr	r3, [sp, #20]
 801787e:	2b02      	cmp	r3, #2
 8017880:	dc50      	bgt.n	8017924 <_dtoa_r+0x934>
 8017882:	e089      	b.n	8017998 <_dtoa_r+0x9a8>
 8017884:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017886:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801788a:	e75d      	b.n	8017748 <_dtoa_r+0x758>
 801788c:	9b01      	ldr	r3, [sp, #4]
 801788e:	1e5e      	subs	r6, r3, #1
 8017890:	9b06      	ldr	r3, [sp, #24]
 8017892:	42b3      	cmp	r3, r6
 8017894:	bfbf      	itttt	lt
 8017896:	9b06      	ldrlt	r3, [sp, #24]
 8017898:	9606      	strlt	r6, [sp, #24]
 801789a:	1af2      	sublt	r2, r6, r3
 801789c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801789e:	bfb6      	itet	lt
 80178a0:	189b      	addlt	r3, r3, r2
 80178a2:	1b9e      	subge	r6, r3, r6
 80178a4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80178a6:	9b01      	ldr	r3, [sp, #4]
 80178a8:	bfb8      	it	lt
 80178aa:	2600      	movlt	r6, #0
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	bfb5      	itete	lt
 80178b0:	eba8 0503 	sublt.w	r5, r8, r3
 80178b4:	9b01      	ldrge	r3, [sp, #4]
 80178b6:	2300      	movlt	r3, #0
 80178b8:	4645      	movge	r5, r8
 80178ba:	e747      	b.n	801774c <_dtoa_r+0x75c>
 80178bc:	9e06      	ldr	r6, [sp, #24]
 80178be:	9f08      	ldr	r7, [sp, #32]
 80178c0:	4645      	mov	r5, r8
 80178c2:	e74c      	b.n	801775e <_dtoa_r+0x76e>
 80178c4:	9a06      	ldr	r2, [sp, #24]
 80178c6:	e775      	b.n	80177b4 <_dtoa_r+0x7c4>
 80178c8:	9b05      	ldr	r3, [sp, #20]
 80178ca:	2b01      	cmp	r3, #1
 80178cc:	dc18      	bgt.n	8017900 <_dtoa_r+0x910>
 80178ce:	9b02      	ldr	r3, [sp, #8]
 80178d0:	b9b3      	cbnz	r3, 8017900 <_dtoa_r+0x910>
 80178d2:	9b03      	ldr	r3, [sp, #12]
 80178d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80178d8:	b9a3      	cbnz	r3, 8017904 <_dtoa_r+0x914>
 80178da:	9b03      	ldr	r3, [sp, #12]
 80178dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80178e0:	0d1b      	lsrs	r3, r3, #20
 80178e2:	051b      	lsls	r3, r3, #20
 80178e4:	b12b      	cbz	r3, 80178f2 <_dtoa_r+0x902>
 80178e6:	9b04      	ldr	r3, [sp, #16]
 80178e8:	3301      	adds	r3, #1
 80178ea:	9304      	str	r3, [sp, #16]
 80178ec:	f108 0801 	add.w	r8, r8, #1
 80178f0:	2301      	movs	r3, #1
 80178f2:	9306      	str	r3, [sp, #24]
 80178f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	f47f af74 	bne.w	80177e4 <_dtoa_r+0x7f4>
 80178fc:	2001      	movs	r0, #1
 80178fe:	e779      	b.n	80177f4 <_dtoa_r+0x804>
 8017900:	2300      	movs	r3, #0
 8017902:	e7f6      	b.n	80178f2 <_dtoa_r+0x902>
 8017904:	9b02      	ldr	r3, [sp, #8]
 8017906:	e7f4      	b.n	80178f2 <_dtoa_r+0x902>
 8017908:	d085      	beq.n	8017816 <_dtoa_r+0x826>
 801790a:	4618      	mov	r0, r3
 801790c:	301c      	adds	r0, #28
 801790e:	e77d      	b.n	801780c <_dtoa_r+0x81c>
 8017910:	40240000 	.word	0x40240000
 8017914:	9b01      	ldr	r3, [sp, #4]
 8017916:	2b00      	cmp	r3, #0
 8017918:	dc38      	bgt.n	801798c <_dtoa_r+0x99c>
 801791a:	9b05      	ldr	r3, [sp, #20]
 801791c:	2b02      	cmp	r3, #2
 801791e:	dd35      	ble.n	801798c <_dtoa_r+0x99c>
 8017920:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017924:	f1b9 0f00 	cmp.w	r9, #0
 8017928:	d10d      	bne.n	8017946 <_dtoa_r+0x956>
 801792a:	4631      	mov	r1, r6
 801792c:	464b      	mov	r3, r9
 801792e:	2205      	movs	r2, #5
 8017930:	4620      	mov	r0, r4
 8017932:	f000 fd3d 	bl	80183b0 <__multadd>
 8017936:	4601      	mov	r1, r0
 8017938:	4606      	mov	r6, r0
 801793a:	4658      	mov	r0, fp
 801793c:	f000 ff9e 	bl	801887c <__mcmp>
 8017940:	2800      	cmp	r0, #0
 8017942:	f73f adbd 	bgt.w	80174c0 <_dtoa_r+0x4d0>
 8017946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017948:	9d00      	ldr	r5, [sp, #0]
 801794a:	ea6f 0a03 	mvn.w	sl, r3
 801794e:	f04f 0800 	mov.w	r8, #0
 8017952:	4631      	mov	r1, r6
 8017954:	4620      	mov	r0, r4
 8017956:	f000 fd09 	bl	801836c <_Bfree>
 801795a:	2f00      	cmp	r7, #0
 801795c:	f43f aeb4 	beq.w	80176c8 <_dtoa_r+0x6d8>
 8017960:	f1b8 0f00 	cmp.w	r8, #0
 8017964:	d005      	beq.n	8017972 <_dtoa_r+0x982>
 8017966:	45b8      	cmp	r8, r7
 8017968:	d003      	beq.n	8017972 <_dtoa_r+0x982>
 801796a:	4641      	mov	r1, r8
 801796c:	4620      	mov	r0, r4
 801796e:	f000 fcfd 	bl	801836c <_Bfree>
 8017972:	4639      	mov	r1, r7
 8017974:	4620      	mov	r0, r4
 8017976:	f000 fcf9 	bl	801836c <_Bfree>
 801797a:	e6a5      	b.n	80176c8 <_dtoa_r+0x6d8>
 801797c:	2600      	movs	r6, #0
 801797e:	4637      	mov	r7, r6
 8017980:	e7e1      	b.n	8017946 <_dtoa_r+0x956>
 8017982:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8017984:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8017988:	4637      	mov	r7, r6
 801798a:	e599      	b.n	80174c0 <_dtoa_r+0x4d0>
 801798c:	9b08      	ldr	r3, [sp, #32]
 801798e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017992:	2b00      	cmp	r3, #0
 8017994:	f000 80fd 	beq.w	8017b92 <_dtoa_r+0xba2>
 8017998:	2d00      	cmp	r5, #0
 801799a:	dd05      	ble.n	80179a8 <_dtoa_r+0x9b8>
 801799c:	4639      	mov	r1, r7
 801799e:	462a      	mov	r2, r5
 80179a0:	4620      	mov	r0, r4
 80179a2:	f000 feff 	bl	80187a4 <__lshift>
 80179a6:	4607      	mov	r7, r0
 80179a8:	9b06      	ldr	r3, [sp, #24]
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d05c      	beq.n	8017a68 <_dtoa_r+0xa78>
 80179ae:	6879      	ldr	r1, [r7, #4]
 80179b0:	4620      	mov	r0, r4
 80179b2:	f000 fc9b 	bl	80182ec <_Balloc>
 80179b6:	4605      	mov	r5, r0
 80179b8:	b928      	cbnz	r0, 80179c6 <_dtoa_r+0x9d6>
 80179ba:	4b80      	ldr	r3, [pc, #512]	; (8017bbc <_dtoa_r+0xbcc>)
 80179bc:	4602      	mov	r2, r0
 80179be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80179c2:	f7ff bb2e 	b.w	8017022 <_dtoa_r+0x32>
 80179c6:	693a      	ldr	r2, [r7, #16]
 80179c8:	3202      	adds	r2, #2
 80179ca:	0092      	lsls	r2, r2, #2
 80179cc:	f107 010c 	add.w	r1, r7, #12
 80179d0:	300c      	adds	r0, #12
 80179d2:	f7fd fc0d 	bl	80151f0 <memcpy>
 80179d6:	2201      	movs	r2, #1
 80179d8:	4629      	mov	r1, r5
 80179da:	4620      	mov	r0, r4
 80179dc:	f000 fee2 	bl	80187a4 <__lshift>
 80179e0:	9b00      	ldr	r3, [sp, #0]
 80179e2:	3301      	adds	r3, #1
 80179e4:	9301      	str	r3, [sp, #4]
 80179e6:	9b00      	ldr	r3, [sp, #0]
 80179e8:	444b      	add	r3, r9
 80179ea:	9307      	str	r3, [sp, #28]
 80179ec:	9b02      	ldr	r3, [sp, #8]
 80179ee:	f003 0301 	and.w	r3, r3, #1
 80179f2:	46b8      	mov	r8, r7
 80179f4:	9306      	str	r3, [sp, #24]
 80179f6:	4607      	mov	r7, r0
 80179f8:	9b01      	ldr	r3, [sp, #4]
 80179fa:	4631      	mov	r1, r6
 80179fc:	3b01      	subs	r3, #1
 80179fe:	4658      	mov	r0, fp
 8017a00:	9302      	str	r3, [sp, #8]
 8017a02:	f7ff fa67 	bl	8016ed4 <quorem>
 8017a06:	4603      	mov	r3, r0
 8017a08:	3330      	adds	r3, #48	; 0x30
 8017a0a:	9004      	str	r0, [sp, #16]
 8017a0c:	4641      	mov	r1, r8
 8017a0e:	4658      	mov	r0, fp
 8017a10:	9308      	str	r3, [sp, #32]
 8017a12:	f000 ff33 	bl	801887c <__mcmp>
 8017a16:	463a      	mov	r2, r7
 8017a18:	4681      	mov	r9, r0
 8017a1a:	4631      	mov	r1, r6
 8017a1c:	4620      	mov	r0, r4
 8017a1e:	f000 ff49 	bl	80188b4 <__mdiff>
 8017a22:	68c2      	ldr	r2, [r0, #12]
 8017a24:	9b08      	ldr	r3, [sp, #32]
 8017a26:	4605      	mov	r5, r0
 8017a28:	bb02      	cbnz	r2, 8017a6c <_dtoa_r+0xa7c>
 8017a2a:	4601      	mov	r1, r0
 8017a2c:	4658      	mov	r0, fp
 8017a2e:	f000 ff25 	bl	801887c <__mcmp>
 8017a32:	9b08      	ldr	r3, [sp, #32]
 8017a34:	4602      	mov	r2, r0
 8017a36:	4629      	mov	r1, r5
 8017a38:	4620      	mov	r0, r4
 8017a3a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8017a3e:	f000 fc95 	bl	801836c <_Bfree>
 8017a42:	9b05      	ldr	r3, [sp, #20]
 8017a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017a46:	9d01      	ldr	r5, [sp, #4]
 8017a48:	ea43 0102 	orr.w	r1, r3, r2
 8017a4c:	9b06      	ldr	r3, [sp, #24]
 8017a4e:	430b      	orrs	r3, r1
 8017a50:	9b08      	ldr	r3, [sp, #32]
 8017a52:	d10d      	bne.n	8017a70 <_dtoa_r+0xa80>
 8017a54:	2b39      	cmp	r3, #57	; 0x39
 8017a56:	d029      	beq.n	8017aac <_dtoa_r+0xabc>
 8017a58:	f1b9 0f00 	cmp.w	r9, #0
 8017a5c:	dd01      	ble.n	8017a62 <_dtoa_r+0xa72>
 8017a5e:	9b04      	ldr	r3, [sp, #16]
 8017a60:	3331      	adds	r3, #49	; 0x31
 8017a62:	9a02      	ldr	r2, [sp, #8]
 8017a64:	7013      	strb	r3, [r2, #0]
 8017a66:	e774      	b.n	8017952 <_dtoa_r+0x962>
 8017a68:	4638      	mov	r0, r7
 8017a6a:	e7b9      	b.n	80179e0 <_dtoa_r+0x9f0>
 8017a6c:	2201      	movs	r2, #1
 8017a6e:	e7e2      	b.n	8017a36 <_dtoa_r+0xa46>
 8017a70:	f1b9 0f00 	cmp.w	r9, #0
 8017a74:	db06      	blt.n	8017a84 <_dtoa_r+0xa94>
 8017a76:	9905      	ldr	r1, [sp, #20]
 8017a78:	ea41 0909 	orr.w	r9, r1, r9
 8017a7c:	9906      	ldr	r1, [sp, #24]
 8017a7e:	ea59 0101 	orrs.w	r1, r9, r1
 8017a82:	d120      	bne.n	8017ac6 <_dtoa_r+0xad6>
 8017a84:	2a00      	cmp	r2, #0
 8017a86:	ddec      	ble.n	8017a62 <_dtoa_r+0xa72>
 8017a88:	4659      	mov	r1, fp
 8017a8a:	2201      	movs	r2, #1
 8017a8c:	4620      	mov	r0, r4
 8017a8e:	9301      	str	r3, [sp, #4]
 8017a90:	f000 fe88 	bl	80187a4 <__lshift>
 8017a94:	4631      	mov	r1, r6
 8017a96:	4683      	mov	fp, r0
 8017a98:	f000 fef0 	bl	801887c <__mcmp>
 8017a9c:	2800      	cmp	r0, #0
 8017a9e:	9b01      	ldr	r3, [sp, #4]
 8017aa0:	dc02      	bgt.n	8017aa8 <_dtoa_r+0xab8>
 8017aa2:	d1de      	bne.n	8017a62 <_dtoa_r+0xa72>
 8017aa4:	07da      	lsls	r2, r3, #31
 8017aa6:	d5dc      	bpl.n	8017a62 <_dtoa_r+0xa72>
 8017aa8:	2b39      	cmp	r3, #57	; 0x39
 8017aaa:	d1d8      	bne.n	8017a5e <_dtoa_r+0xa6e>
 8017aac:	9a02      	ldr	r2, [sp, #8]
 8017aae:	2339      	movs	r3, #57	; 0x39
 8017ab0:	7013      	strb	r3, [r2, #0]
 8017ab2:	462b      	mov	r3, r5
 8017ab4:	461d      	mov	r5, r3
 8017ab6:	3b01      	subs	r3, #1
 8017ab8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017abc:	2a39      	cmp	r2, #57	; 0x39
 8017abe:	d050      	beq.n	8017b62 <_dtoa_r+0xb72>
 8017ac0:	3201      	adds	r2, #1
 8017ac2:	701a      	strb	r2, [r3, #0]
 8017ac4:	e745      	b.n	8017952 <_dtoa_r+0x962>
 8017ac6:	2a00      	cmp	r2, #0
 8017ac8:	dd03      	ble.n	8017ad2 <_dtoa_r+0xae2>
 8017aca:	2b39      	cmp	r3, #57	; 0x39
 8017acc:	d0ee      	beq.n	8017aac <_dtoa_r+0xabc>
 8017ace:	3301      	adds	r3, #1
 8017ad0:	e7c7      	b.n	8017a62 <_dtoa_r+0xa72>
 8017ad2:	9a01      	ldr	r2, [sp, #4]
 8017ad4:	9907      	ldr	r1, [sp, #28]
 8017ad6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8017ada:	428a      	cmp	r2, r1
 8017adc:	d02a      	beq.n	8017b34 <_dtoa_r+0xb44>
 8017ade:	4659      	mov	r1, fp
 8017ae0:	2300      	movs	r3, #0
 8017ae2:	220a      	movs	r2, #10
 8017ae4:	4620      	mov	r0, r4
 8017ae6:	f000 fc63 	bl	80183b0 <__multadd>
 8017aea:	45b8      	cmp	r8, r7
 8017aec:	4683      	mov	fp, r0
 8017aee:	f04f 0300 	mov.w	r3, #0
 8017af2:	f04f 020a 	mov.w	r2, #10
 8017af6:	4641      	mov	r1, r8
 8017af8:	4620      	mov	r0, r4
 8017afa:	d107      	bne.n	8017b0c <_dtoa_r+0xb1c>
 8017afc:	f000 fc58 	bl	80183b0 <__multadd>
 8017b00:	4680      	mov	r8, r0
 8017b02:	4607      	mov	r7, r0
 8017b04:	9b01      	ldr	r3, [sp, #4]
 8017b06:	3301      	adds	r3, #1
 8017b08:	9301      	str	r3, [sp, #4]
 8017b0a:	e775      	b.n	80179f8 <_dtoa_r+0xa08>
 8017b0c:	f000 fc50 	bl	80183b0 <__multadd>
 8017b10:	4639      	mov	r1, r7
 8017b12:	4680      	mov	r8, r0
 8017b14:	2300      	movs	r3, #0
 8017b16:	220a      	movs	r2, #10
 8017b18:	4620      	mov	r0, r4
 8017b1a:	f000 fc49 	bl	80183b0 <__multadd>
 8017b1e:	4607      	mov	r7, r0
 8017b20:	e7f0      	b.n	8017b04 <_dtoa_r+0xb14>
 8017b22:	f1b9 0f00 	cmp.w	r9, #0
 8017b26:	9a00      	ldr	r2, [sp, #0]
 8017b28:	bfcc      	ite	gt
 8017b2a:	464d      	movgt	r5, r9
 8017b2c:	2501      	movle	r5, #1
 8017b2e:	4415      	add	r5, r2
 8017b30:	f04f 0800 	mov.w	r8, #0
 8017b34:	4659      	mov	r1, fp
 8017b36:	2201      	movs	r2, #1
 8017b38:	4620      	mov	r0, r4
 8017b3a:	9301      	str	r3, [sp, #4]
 8017b3c:	f000 fe32 	bl	80187a4 <__lshift>
 8017b40:	4631      	mov	r1, r6
 8017b42:	4683      	mov	fp, r0
 8017b44:	f000 fe9a 	bl	801887c <__mcmp>
 8017b48:	2800      	cmp	r0, #0
 8017b4a:	dcb2      	bgt.n	8017ab2 <_dtoa_r+0xac2>
 8017b4c:	d102      	bne.n	8017b54 <_dtoa_r+0xb64>
 8017b4e:	9b01      	ldr	r3, [sp, #4]
 8017b50:	07db      	lsls	r3, r3, #31
 8017b52:	d4ae      	bmi.n	8017ab2 <_dtoa_r+0xac2>
 8017b54:	462b      	mov	r3, r5
 8017b56:	461d      	mov	r5, r3
 8017b58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017b5c:	2a30      	cmp	r2, #48	; 0x30
 8017b5e:	d0fa      	beq.n	8017b56 <_dtoa_r+0xb66>
 8017b60:	e6f7      	b.n	8017952 <_dtoa_r+0x962>
 8017b62:	9a00      	ldr	r2, [sp, #0]
 8017b64:	429a      	cmp	r2, r3
 8017b66:	d1a5      	bne.n	8017ab4 <_dtoa_r+0xac4>
 8017b68:	f10a 0a01 	add.w	sl, sl, #1
 8017b6c:	2331      	movs	r3, #49	; 0x31
 8017b6e:	e779      	b.n	8017a64 <_dtoa_r+0xa74>
 8017b70:	4b13      	ldr	r3, [pc, #76]	; (8017bc0 <_dtoa_r+0xbd0>)
 8017b72:	f7ff baaf 	b.w	80170d4 <_dtoa_r+0xe4>
 8017b76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	f47f aa86 	bne.w	801708a <_dtoa_r+0x9a>
 8017b7e:	4b11      	ldr	r3, [pc, #68]	; (8017bc4 <_dtoa_r+0xbd4>)
 8017b80:	f7ff baa8 	b.w	80170d4 <_dtoa_r+0xe4>
 8017b84:	f1b9 0f00 	cmp.w	r9, #0
 8017b88:	dc03      	bgt.n	8017b92 <_dtoa_r+0xba2>
 8017b8a:	9b05      	ldr	r3, [sp, #20]
 8017b8c:	2b02      	cmp	r3, #2
 8017b8e:	f73f aec9 	bgt.w	8017924 <_dtoa_r+0x934>
 8017b92:	9d00      	ldr	r5, [sp, #0]
 8017b94:	4631      	mov	r1, r6
 8017b96:	4658      	mov	r0, fp
 8017b98:	f7ff f99c 	bl	8016ed4 <quorem>
 8017b9c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8017ba0:	f805 3b01 	strb.w	r3, [r5], #1
 8017ba4:	9a00      	ldr	r2, [sp, #0]
 8017ba6:	1aaa      	subs	r2, r5, r2
 8017ba8:	4591      	cmp	r9, r2
 8017baa:	ddba      	ble.n	8017b22 <_dtoa_r+0xb32>
 8017bac:	4659      	mov	r1, fp
 8017bae:	2300      	movs	r3, #0
 8017bb0:	220a      	movs	r2, #10
 8017bb2:	4620      	mov	r0, r4
 8017bb4:	f000 fbfc 	bl	80183b0 <__multadd>
 8017bb8:	4683      	mov	fp, r0
 8017bba:	e7eb      	b.n	8017b94 <_dtoa_r+0xba4>
 8017bbc:	0801b994 	.word	0x0801b994
 8017bc0:	0801b794 	.word	0x0801b794
 8017bc4:	0801b911 	.word	0x0801b911

08017bc8 <rshift>:
 8017bc8:	6903      	ldr	r3, [r0, #16]
 8017bca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017bce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017bd2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017bd6:	f100 0414 	add.w	r4, r0, #20
 8017bda:	dd45      	ble.n	8017c68 <rshift+0xa0>
 8017bdc:	f011 011f 	ands.w	r1, r1, #31
 8017be0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017be4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017be8:	d10c      	bne.n	8017c04 <rshift+0x3c>
 8017bea:	f100 0710 	add.w	r7, r0, #16
 8017bee:	4629      	mov	r1, r5
 8017bf0:	42b1      	cmp	r1, r6
 8017bf2:	d334      	bcc.n	8017c5e <rshift+0x96>
 8017bf4:	1a9b      	subs	r3, r3, r2
 8017bf6:	009b      	lsls	r3, r3, #2
 8017bf8:	1eea      	subs	r2, r5, #3
 8017bfa:	4296      	cmp	r6, r2
 8017bfc:	bf38      	it	cc
 8017bfe:	2300      	movcc	r3, #0
 8017c00:	4423      	add	r3, r4
 8017c02:	e015      	b.n	8017c30 <rshift+0x68>
 8017c04:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017c08:	f1c1 0820 	rsb	r8, r1, #32
 8017c0c:	40cf      	lsrs	r7, r1
 8017c0e:	f105 0e04 	add.w	lr, r5, #4
 8017c12:	46a1      	mov	r9, r4
 8017c14:	4576      	cmp	r6, lr
 8017c16:	46f4      	mov	ip, lr
 8017c18:	d815      	bhi.n	8017c46 <rshift+0x7e>
 8017c1a:	1a9b      	subs	r3, r3, r2
 8017c1c:	009a      	lsls	r2, r3, #2
 8017c1e:	3a04      	subs	r2, #4
 8017c20:	3501      	adds	r5, #1
 8017c22:	42ae      	cmp	r6, r5
 8017c24:	bf38      	it	cc
 8017c26:	2200      	movcc	r2, #0
 8017c28:	18a3      	adds	r3, r4, r2
 8017c2a:	50a7      	str	r7, [r4, r2]
 8017c2c:	b107      	cbz	r7, 8017c30 <rshift+0x68>
 8017c2e:	3304      	adds	r3, #4
 8017c30:	1b1a      	subs	r2, r3, r4
 8017c32:	42a3      	cmp	r3, r4
 8017c34:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017c38:	bf08      	it	eq
 8017c3a:	2300      	moveq	r3, #0
 8017c3c:	6102      	str	r2, [r0, #16]
 8017c3e:	bf08      	it	eq
 8017c40:	6143      	streq	r3, [r0, #20]
 8017c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c46:	f8dc c000 	ldr.w	ip, [ip]
 8017c4a:	fa0c fc08 	lsl.w	ip, ip, r8
 8017c4e:	ea4c 0707 	orr.w	r7, ip, r7
 8017c52:	f849 7b04 	str.w	r7, [r9], #4
 8017c56:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017c5a:	40cf      	lsrs	r7, r1
 8017c5c:	e7da      	b.n	8017c14 <rshift+0x4c>
 8017c5e:	f851 cb04 	ldr.w	ip, [r1], #4
 8017c62:	f847 cf04 	str.w	ip, [r7, #4]!
 8017c66:	e7c3      	b.n	8017bf0 <rshift+0x28>
 8017c68:	4623      	mov	r3, r4
 8017c6a:	e7e1      	b.n	8017c30 <rshift+0x68>

08017c6c <__hexdig_fun>:
 8017c6c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017c70:	2b09      	cmp	r3, #9
 8017c72:	d802      	bhi.n	8017c7a <__hexdig_fun+0xe>
 8017c74:	3820      	subs	r0, #32
 8017c76:	b2c0      	uxtb	r0, r0
 8017c78:	4770      	bx	lr
 8017c7a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017c7e:	2b05      	cmp	r3, #5
 8017c80:	d801      	bhi.n	8017c86 <__hexdig_fun+0x1a>
 8017c82:	3847      	subs	r0, #71	; 0x47
 8017c84:	e7f7      	b.n	8017c76 <__hexdig_fun+0xa>
 8017c86:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017c8a:	2b05      	cmp	r3, #5
 8017c8c:	d801      	bhi.n	8017c92 <__hexdig_fun+0x26>
 8017c8e:	3827      	subs	r0, #39	; 0x27
 8017c90:	e7f1      	b.n	8017c76 <__hexdig_fun+0xa>
 8017c92:	2000      	movs	r0, #0
 8017c94:	4770      	bx	lr
	...

08017c98 <__gethex>:
 8017c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c9c:	ed2d 8b02 	vpush	{d8}
 8017ca0:	b089      	sub	sp, #36	; 0x24
 8017ca2:	ee08 0a10 	vmov	s16, r0
 8017ca6:	9304      	str	r3, [sp, #16]
 8017ca8:	4bbc      	ldr	r3, [pc, #752]	; (8017f9c <__gethex+0x304>)
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	9301      	str	r3, [sp, #4]
 8017cae:	4618      	mov	r0, r3
 8017cb0:	468b      	mov	fp, r1
 8017cb2:	4690      	mov	r8, r2
 8017cb4:	f7e8 fa8c 	bl	80001d0 <strlen>
 8017cb8:	9b01      	ldr	r3, [sp, #4]
 8017cba:	f8db 2000 	ldr.w	r2, [fp]
 8017cbe:	4403      	add	r3, r0
 8017cc0:	4682      	mov	sl, r0
 8017cc2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017cc6:	9305      	str	r3, [sp, #20]
 8017cc8:	1c93      	adds	r3, r2, #2
 8017cca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8017cce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8017cd2:	32fe      	adds	r2, #254	; 0xfe
 8017cd4:	18d1      	adds	r1, r2, r3
 8017cd6:	461f      	mov	r7, r3
 8017cd8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017cdc:	9100      	str	r1, [sp, #0]
 8017cde:	2830      	cmp	r0, #48	; 0x30
 8017ce0:	d0f8      	beq.n	8017cd4 <__gethex+0x3c>
 8017ce2:	f7ff ffc3 	bl	8017c6c <__hexdig_fun>
 8017ce6:	4604      	mov	r4, r0
 8017ce8:	2800      	cmp	r0, #0
 8017cea:	d13a      	bne.n	8017d62 <__gethex+0xca>
 8017cec:	9901      	ldr	r1, [sp, #4]
 8017cee:	4652      	mov	r2, sl
 8017cf0:	4638      	mov	r0, r7
 8017cf2:	f001 f929 	bl	8018f48 <strncmp>
 8017cf6:	4605      	mov	r5, r0
 8017cf8:	2800      	cmp	r0, #0
 8017cfa:	d168      	bne.n	8017dce <__gethex+0x136>
 8017cfc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8017d00:	eb07 060a 	add.w	r6, r7, sl
 8017d04:	f7ff ffb2 	bl	8017c6c <__hexdig_fun>
 8017d08:	2800      	cmp	r0, #0
 8017d0a:	d062      	beq.n	8017dd2 <__gethex+0x13a>
 8017d0c:	4633      	mov	r3, r6
 8017d0e:	7818      	ldrb	r0, [r3, #0]
 8017d10:	2830      	cmp	r0, #48	; 0x30
 8017d12:	461f      	mov	r7, r3
 8017d14:	f103 0301 	add.w	r3, r3, #1
 8017d18:	d0f9      	beq.n	8017d0e <__gethex+0x76>
 8017d1a:	f7ff ffa7 	bl	8017c6c <__hexdig_fun>
 8017d1e:	2301      	movs	r3, #1
 8017d20:	fab0 f480 	clz	r4, r0
 8017d24:	0964      	lsrs	r4, r4, #5
 8017d26:	4635      	mov	r5, r6
 8017d28:	9300      	str	r3, [sp, #0]
 8017d2a:	463a      	mov	r2, r7
 8017d2c:	4616      	mov	r6, r2
 8017d2e:	3201      	adds	r2, #1
 8017d30:	7830      	ldrb	r0, [r6, #0]
 8017d32:	f7ff ff9b 	bl	8017c6c <__hexdig_fun>
 8017d36:	2800      	cmp	r0, #0
 8017d38:	d1f8      	bne.n	8017d2c <__gethex+0x94>
 8017d3a:	9901      	ldr	r1, [sp, #4]
 8017d3c:	4652      	mov	r2, sl
 8017d3e:	4630      	mov	r0, r6
 8017d40:	f001 f902 	bl	8018f48 <strncmp>
 8017d44:	b980      	cbnz	r0, 8017d68 <__gethex+0xd0>
 8017d46:	b94d      	cbnz	r5, 8017d5c <__gethex+0xc4>
 8017d48:	eb06 050a 	add.w	r5, r6, sl
 8017d4c:	462a      	mov	r2, r5
 8017d4e:	4616      	mov	r6, r2
 8017d50:	3201      	adds	r2, #1
 8017d52:	7830      	ldrb	r0, [r6, #0]
 8017d54:	f7ff ff8a 	bl	8017c6c <__hexdig_fun>
 8017d58:	2800      	cmp	r0, #0
 8017d5a:	d1f8      	bne.n	8017d4e <__gethex+0xb6>
 8017d5c:	1bad      	subs	r5, r5, r6
 8017d5e:	00ad      	lsls	r5, r5, #2
 8017d60:	e004      	b.n	8017d6c <__gethex+0xd4>
 8017d62:	2400      	movs	r4, #0
 8017d64:	4625      	mov	r5, r4
 8017d66:	e7e0      	b.n	8017d2a <__gethex+0x92>
 8017d68:	2d00      	cmp	r5, #0
 8017d6a:	d1f7      	bne.n	8017d5c <__gethex+0xc4>
 8017d6c:	7833      	ldrb	r3, [r6, #0]
 8017d6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017d72:	2b50      	cmp	r3, #80	; 0x50
 8017d74:	d13b      	bne.n	8017dee <__gethex+0x156>
 8017d76:	7873      	ldrb	r3, [r6, #1]
 8017d78:	2b2b      	cmp	r3, #43	; 0x2b
 8017d7a:	d02c      	beq.n	8017dd6 <__gethex+0x13e>
 8017d7c:	2b2d      	cmp	r3, #45	; 0x2d
 8017d7e:	d02e      	beq.n	8017dde <__gethex+0x146>
 8017d80:	1c71      	adds	r1, r6, #1
 8017d82:	f04f 0900 	mov.w	r9, #0
 8017d86:	7808      	ldrb	r0, [r1, #0]
 8017d88:	f7ff ff70 	bl	8017c6c <__hexdig_fun>
 8017d8c:	1e43      	subs	r3, r0, #1
 8017d8e:	b2db      	uxtb	r3, r3
 8017d90:	2b18      	cmp	r3, #24
 8017d92:	d82c      	bhi.n	8017dee <__gethex+0x156>
 8017d94:	f1a0 0210 	sub.w	r2, r0, #16
 8017d98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017d9c:	f7ff ff66 	bl	8017c6c <__hexdig_fun>
 8017da0:	1e43      	subs	r3, r0, #1
 8017da2:	b2db      	uxtb	r3, r3
 8017da4:	2b18      	cmp	r3, #24
 8017da6:	d91d      	bls.n	8017de4 <__gethex+0x14c>
 8017da8:	f1b9 0f00 	cmp.w	r9, #0
 8017dac:	d000      	beq.n	8017db0 <__gethex+0x118>
 8017dae:	4252      	negs	r2, r2
 8017db0:	4415      	add	r5, r2
 8017db2:	f8cb 1000 	str.w	r1, [fp]
 8017db6:	b1e4      	cbz	r4, 8017df2 <__gethex+0x15a>
 8017db8:	9b00      	ldr	r3, [sp, #0]
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	bf14      	ite	ne
 8017dbe:	2700      	movne	r7, #0
 8017dc0:	2706      	moveq	r7, #6
 8017dc2:	4638      	mov	r0, r7
 8017dc4:	b009      	add	sp, #36	; 0x24
 8017dc6:	ecbd 8b02 	vpop	{d8}
 8017dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dce:	463e      	mov	r6, r7
 8017dd0:	4625      	mov	r5, r4
 8017dd2:	2401      	movs	r4, #1
 8017dd4:	e7ca      	b.n	8017d6c <__gethex+0xd4>
 8017dd6:	f04f 0900 	mov.w	r9, #0
 8017dda:	1cb1      	adds	r1, r6, #2
 8017ddc:	e7d3      	b.n	8017d86 <__gethex+0xee>
 8017dde:	f04f 0901 	mov.w	r9, #1
 8017de2:	e7fa      	b.n	8017dda <__gethex+0x142>
 8017de4:	230a      	movs	r3, #10
 8017de6:	fb03 0202 	mla	r2, r3, r2, r0
 8017dea:	3a10      	subs	r2, #16
 8017dec:	e7d4      	b.n	8017d98 <__gethex+0x100>
 8017dee:	4631      	mov	r1, r6
 8017df0:	e7df      	b.n	8017db2 <__gethex+0x11a>
 8017df2:	1bf3      	subs	r3, r6, r7
 8017df4:	3b01      	subs	r3, #1
 8017df6:	4621      	mov	r1, r4
 8017df8:	2b07      	cmp	r3, #7
 8017dfa:	dc0b      	bgt.n	8017e14 <__gethex+0x17c>
 8017dfc:	ee18 0a10 	vmov	r0, s16
 8017e00:	f000 fa74 	bl	80182ec <_Balloc>
 8017e04:	4604      	mov	r4, r0
 8017e06:	b940      	cbnz	r0, 8017e1a <__gethex+0x182>
 8017e08:	4b65      	ldr	r3, [pc, #404]	; (8017fa0 <__gethex+0x308>)
 8017e0a:	4602      	mov	r2, r0
 8017e0c:	21de      	movs	r1, #222	; 0xde
 8017e0e:	4865      	ldr	r0, [pc, #404]	; (8017fa4 <__gethex+0x30c>)
 8017e10:	f001 f8ba 	bl	8018f88 <__assert_func>
 8017e14:	3101      	adds	r1, #1
 8017e16:	105b      	asrs	r3, r3, #1
 8017e18:	e7ee      	b.n	8017df8 <__gethex+0x160>
 8017e1a:	f100 0914 	add.w	r9, r0, #20
 8017e1e:	f04f 0b00 	mov.w	fp, #0
 8017e22:	f1ca 0301 	rsb	r3, sl, #1
 8017e26:	f8cd 9008 	str.w	r9, [sp, #8]
 8017e2a:	f8cd b000 	str.w	fp, [sp]
 8017e2e:	9306      	str	r3, [sp, #24]
 8017e30:	42b7      	cmp	r7, r6
 8017e32:	d340      	bcc.n	8017eb6 <__gethex+0x21e>
 8017e34:	9802      	ldr	r0, [sp, #8]
 8017e36:	9b00      	ldr	r3, [sp, #0]
 8017e38:	f840 3b04 	str.w	r3, [r0], #4
 8017e3c:	eba0 0009 	sub.w	r0, r0, r9
 8017e40:	1080      	asrs	r0, r0, #2
 8017e42:	0146      	lsls	r6, r0, #5
 8017e44:	6120      	str	r0, [r4, #16]
 8017e46:	4618      	mov	r0, r3
 8017e48:	f000 fb46 	bl	80184d8 <__hi0bits>
 8017e4c:	1a30      	subs	r0, r6, r0
 8017e4e:	f8d8 6000 	ldr.w	r6, [r8]
 8017e52:	42b0      	cmp	r0, r6
 8017e54:	dd63      	ble.n	8017f1e <__gethex+0x286>
 8017e56:	1b87      	subs	r7, r0, r6
 8017e58:	4639      	mov	r1, r7
 8017e5a:	4620      	mov	r0, r4
 8017e5c:	f000 fee0 	bl	8018c20 <__any_on>
 8017e60:	4682      	mov	sl, r0
 8017e62:	b1a8      	cbz	r0, 8017e90 <__gethex+0x1f8>
 8017e64:	1e7b      	subs	r3, r7, #1
 8017e66:	1159      	asrs	r1, r3, #5
 8017e68:	f003 021f 	and.w	r2, r3, #31
 8017e6c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017e70:	f04f 0a01 	mov.w	sl, #1
 8017e74:	fa0a f202 	lsl.w	r2, sl, r2
 8017e78:	420a      	tst	r2, r1
 8017e7a:	d009      	beq.n	8017e90 <__gethex+0x1f8>
 8017e7c:	4553      	cmp	r3, sl
 8017e7e:	dd05      	ble.n	8017e8c <__gethex+0x1f4>
 8017e80:	1eb9      	subs	r1, r7, #2
 8017e82:	4620      	mov	r0, r4
 8017e84:	f000 fecc 	bl	8018c20 <__any_on>
 8017e88:	2800      	cmp	r0, #0
 8017e8a:	d145      	bne.n	8017f18 <__gethex+0x280>
 8017e8c:	f04f 0a02 	mov.w	sl, #2
 8017e90:	4639      	mov	r1, r7
 8017e92:	4620      	mov	r0, r4
 8017e94:	f7ff fe98 	bl	8017bc8 <rshift>
 8017e98:	443d      	add	r5, r7
 8017e9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017e9e:	42ab      	cmp	r3, r5
 8017ea0:	da4c      	bge.n	8017f3c <__gethex+0x2a4>
 8017ea2:	ee18 0a10 	vmov	r0, s16
 8017ea6:	4621      	mov	r1, r4
 8017ea8:	f000 fa60 	bl	801836c <_Bfree>
 8017eac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017eae:	2300      	movs	r3, #0
 8017eb0:	6013      	str	r3, [r2, #0]
 8017eb2:	27a3      	movs	r7, #163	; 0xa3
 8017eb4:	e785      	b.n	8017dc2 <__gethex+0x12a>
 8017eb6:	1e73      	subs	r3, r6, #1
 8017eb8:	9a05      	ldr	r2, [sp, #20]
 8017eba:	9303      	str	r3, [sp, #12]
 8017ebc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017ec0:	4293      	cmp	r3, r2
 8017ec2:	d019      	beq.n	8017ef8 <__gethex+0x260>
 8017ec4:	f1bb 0f20 	cmp.w	fp, #32
 8017ec8:	d107      	bne.n	8017eda <__gethex+0x242>
 8017eca:	9b02      	ldr	r3, [sp, #8]
 8017ecc:	9a00      	ldr	r2, [sp, #0]
 8017ece:	f843 2b04 	str.w	r2, [r3], #4
 8017ed2:	9302      	str	r3, [sp, #8]
 8017ed4:	2300      	movs	r3, #0
 8017ed6:	9300      	str	r3, [sp, #0]
 8017ed8:	469b      	mov	fp, r3
 8017eda:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017ede:	f7ff fec5 	bl	8017c6c <__hexdig_fun>
 8017ee2:	9b00      	ldr	r3, [sp, #0]
 8017ee4:	f000 000f 	and.w	r0, r0, #15
 8017ee8:	fa00 f00b 	lsl.w	r0, r0, fp
 8017eec:	4303      	orrs	r3, r0
 8017eee:	9300      	str	r3, [sp, #0]
 8017ef0:	f10b 0b04 	add.w	fp, fp, #4
 8017ef4:	9b03      	ldr	r3, [sp, #12]
 8017ef6:	e00d      	b.n	8017f14 <__gethex+0x27c>
 8017ef8:	9b03      	ldr	r3, [sp, #12]
 8017efa:	9a06      	ldr	r2, [sp, #24]
 8017efc:	4413      	add	r3, r2
 8017efe:	42bb      	cmp	r3, r7
 8017f00:	d3e0      	bcc.n	8017ec4 <__gethex+0x22c>
 8017f02:	4618      	mov	r0, r3
 8017f04:	9901      	ldr	r1, [sp, #4]
 8017f06:	9307      	str	r3, [sp, #28]
 8017f08:	4652      	mov	r2, sl
 8017f0a:	f001 f81d 	bl	8018f48 <strncmp>
 8017f0e:	9b07      	ldr	r3, [sp, #28]
 8017f10:	2800      	cmp	r0, #0
 8017f12:	d1d7      	bne.n	8017ec4 <__gethex+0x22c>
 8017f14:	461e      	mov	r6, r3
 8017f16:	e78b      	b.n	8017e30 <__gethex+0x198>
 8017f18:	f04f 0a03 	mov.w	sl, #3
 8017f1c:	e7b8      	b.n	8017e90 <__gethex+0x1f8>
 8017f1e:	da0a      	bge.n	8017f36 <__gethex+0x29e>
 8017f20:	1a37      	subs	r7, r6, r0
 8017f22:	4621      	mov	r1, r4
 8017f24:	ee18 0a10 	vmov	r0, s16
 8017f28:	463a      	mov	r2, r7
 8017f2a:	f000 fc3b 	bl	80187a4 <__lshift>
 8017f2e:	1bed      	subs	r5, r5, r7
 8017f30:	4604      	mov	r4, r0
 8017f32:	f100 0914 	add.w	r9, r0, #20
 8017f36:	f04f 0a00 	mov.w	sl, #0
 8017f3a:	e7ae      	b.n	8017e9a <__gethex+0x202>
 8017f3c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017f40:	42a8      	cmp	r0, r5
 8017f42:	dd72      	ble.n	801802a <__gethex+0x392>
 8017f44:	1b45      	subs	r5, r0, r5
 8017f46:	42ae      	cmp	r6, r5
 8017f48:	dc36      	bgt.n	8017fb8 <__gethex+0x320>
 8017f4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017f4e:	2b02      	cmp	r3, #2
 8017f50:	d02a      	beq.n	8017fa8 <__gethex+0x310>
 8017f52:	2b03      	cmp	r3, #3
 8017f54:	d02c      	beq.n	8017fb0 <__gethex+0x318>
 8017f56:	2b01      	cmp	r3, #1
 8017f58:	d115      	bne.n	8017f86 <__gethex+0x2ee>
 8017f5a:	42ae      	cmp	r6, r5
 8017f5c:	d113      	bne.n	8017f86 <__gethex+0x2ee>
 8017f5e:	2e01      	cmp	r6, #1
 8017f60:	d10b      	bne.n	8017f7a <__gethex+0x2e2>
 8017f62:	9a04      	ldr	r2, [sp, #16]
 8017f64:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017f68:	6013      	str	r3, [r2, #0]
 8017f6a:	2301      	movs	r3, #1
 8017f6c:	6123      	str	r3, [r4, #16]
 8017f6e:	f8c9 3000 	str.w	r3, [r9]
 8017f72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017f74:	2762      	movs	r7, #98	; 0x62
 8017f76:	601c      	str	r4, [r3, #0]
 8017f78:	e723      	b.n	8017dc2 <__gethex+0x12a>
 8017f7a:	1e71      	subs	r1, r6, #1
 8017f7c:	4620      	mov	r0, r4
 8017f7e:	f000 fe4f 	bl	8018c20 <__any_on>
 8017f82:	2800      	cmp	r0, #0
 8017f84:	d1ed      	bne.n	8017f62 <__gethex+0x2ca>
 8017f86:	ee18 0a10 	vmov	r0, s16
 8017f8a:	4621      	mov	r1, r4
 8017f8c:	f000 f9ee 	bl	801836c <_Bfree>
 8017f90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017f92:	2300      	movs	r3, #0
 8017f94:	6013      	str	r3, [r2, #0]
 8017f96:	2750      	movs	r7, #80	; 0x50
 8017f98:	e713      	b.n	8017dc2 <__gethex+0x12a>
 8017f9a:	bf00      	nop
 8017f9c:	0801ba10 	.word	0x0801ba10
 8017fa0:	0801b994 	.word	0x0801b994
 8017fa4:	0801b9a5 	.word	0x0801b9a5
 8017fa8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d1eb      	bne.n	8017f86 <__gethex+0x2ee>
 8017fae:	e7d8      	b.n	8017f62 <__gethex+0x2ca>
 8017fb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d1d5      	bne.n	8017f62 <__gethex+0x2ca>
 8017fb6:	e7e6      	b.n	8017f86 <__gethex+0x2ee>
 8017fb8:	1e6f      	subs	r7, r5, #1
 8017fba:	f1ba 0f00 	cmp.w	sl, #0
 8017fbe:	d131      	bne.n	8018024 <__gethex+0x38c>
 8017fc0:	b127      	cbz	r7, 8017fcc <__gethex+0x334>
 8017fc2:	4639      	mov	r1, r7
 8017fc4:	4620      	mov	r0, r4
 8017fc6:	f000 fe2b 	bl	8018c20 <__any_on>
 8017fca:	4682      	mov	sl, r0
 8017fcc:	117b      	asrs	r3, r7, #5
 8017fce:	2101      	movs	r1, #1
 8017fd0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8017fd4:	f007 071f 	and.w	r7, r7, #31
 8017fd8:	fa01 f707 	lsl.w	r7, r1, r7
 8017fdc:	421f      	tst	r7, r3
 8017fde:	4629      	mov	r1, r5
 8017fe0:	4620      	mov	r0, r4
 8017fe2:	bf18      	it	ne
 8017fe4:	f04a 0a02 	orrne.w	sl, sl, #2
 8017fe8:	1b76      	subs	r6, r6, r5
 8017fea:	f7ff fded 	bl	8017bc8 <rshift>
 8017fee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017ff2:	2702      	movs	r7, #2
 8017ff4:	f1ba 0f00 	cmp.w	sl, #0
 8017ff8:	d048      	beq.n	801808c <__gethex+0x3f4>
 8017ffa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017ffe:	2b02      	cmp	r3, #2
 8018000:	d015      	beq.n	801802e <__gethex+0x396>
 8018002:	2b03      	cmp	r3, #3
 8018004:	d017      	beq.n	8018036 <__gethex+0x39e>
 8018006:	2b01      	cmp	r3, #1
 8018008:	d109      	bne.n	801801e <__gethex+0x386>
 801800a:	f01a 0f02 	tst.w	sl, #2
 801800e:	d006      	beq.n	801801e <__gethex+0x386>
 8018010:	f8d9 0000 	ldr.w	r0, [r9]
 8018014:	ea4a 0a00 	orr.w	sl, sl, r0
 8018018:	f01a 0f01 	tst.w	sl, #1
 801801c:	d10e      	bne.n	801803c <__gethex+0x3a4>
 801801e:	f047 0710 	orr.w	r7, r7, #16
 8018022:	e033      	b.n	801808c <__gethex+0x3f4>
 8018024:	f04f 0a01 	mov.w	sl, #1
 8018028:	e7d0      	b.n	8017fcc <__gethex+0x334>
 801802a:	2701      	movs	r7, #1
 801802c:	e7e2      	b.n	8017ff4 <__gethex+0x35c>
 801802e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018030:	f1c3 0301 	rsb	r3, r3, #1
 8018034:	9315      	str	r3, [sp, #84]	; 0x54
 8018036:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018038:	2b00      	cmp	r3, #0
 801803a:	d0f0      	beq.n	801801e <__gethex+0x386>
 801803c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018040:	f104 0314 	add.w	r3, r4, #20
 8018044:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018048:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801804c:	f04f 0c00 	mov.w	ip, #0
 8018050:	4618      	mov	r0, r3
 8018052:	f853 2b04 	ldr.w	r2, [r3], #4
 8018056:	f1b2 3fff 	cmp.w	r2, #4294967295
 801805a:	d01c      	beq.n	8018096 <__gethex+0x3fe>
 801805c:	3201      	adds	r2, #1
 801805e:	6002      	str	r2, [r0, #0]
 8018060:	2f02      	cmp	r7, #2
 8018062:	f104 0314 	add.w	r3, r4, #20
 8018066:	d13f      	bne.n	80180e8 <__gethex+0x450>
 8018068:	f8d8 2000 	ldr.w	r2, [r8]
 801806c:	3a01      	subs	r2, #1
 801806e:	42b2      	cmp	r2, r6
 8018070:	d10a      	bne.n	8018088 <__gethex+0x3f0>
 8018072:	1171      	asrs	r1, r6, #5
 8018074:	2201      	movs	r2, #1
 8018076:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801807a:	f006 061f 	and.w	r6, r6, #31
 801807e:	fa02 f606 	lsl.w	r6, r2, r6
 8018082:	421e      	tst	r6, r3
 8018084:	bf18      	it	ne
 8018086:	4617      	movne	r7, r2
 8018088:	f047 0720 	orr.w	r7, r7, #32
 801808c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801808e:	601c      	str	r4, [r3, #0]
 8018090:	9b04      	ldr	r3, [sp, #16]
 8018092:	601d      	str	r5, [r3, #0]
 8018094:	e695      	b.n	8017dc2 <__gethex+0x12a>
 8018096:	4299      	cmp	r1, r3
 8018098:	f843 cc04 	str.w	ip, [r3, #-4]
 801809c:	d8d8      	bhi.n	8018050 <__gethex+0x3b8>
 801809e:	68a3      	ldr	r3, [r4, #8]
 80180a0:	459b      	cmp	fp, r3
 80180a2:	db19      	blt.n	80180d8 <__gethex+0x440>
 80180a4:	6861      	ldr	r1, [r4, #4]
 80180a6:	ee18 0a10 	vmov	r0, s16
 80180aa:	3101      	adds	r1, #1
 80180ac:	f000 f91e 	bl	80182ec <_Balloc>
 80180b0:	4681      	mov	r9, r0
 80180b2:	b918      	cbnz	r0, 80180bc <__gethex+0x424>
 80180b4:	4b1a      	ldr	r3, [pc, #104]	; (8018120 <__gethex+0x488>)
 80180b6:	4602      	mov	r2, r0
 80180b8:	2184      	movs	r1, #132	; 0x84
 80180ba:	e6a8      	b.n	8017e0e <__gethex+0x176>
 80180bc:	6922      	ldr	r2, [r4, #16]
 80180be:	3202      	adds	r2, #2
 80180c0:	f104 010c 	add.w	r1, r4, #12
 80180c4:	0092      	lsls	r2, r2, #2
 80180c6:	300c      	adds	r0, #12
 80180c8:	f7fd f892 	bl	80151f0 <memcpy>
 80180cc:	4621      	mov	r1, r4
 80180ce:	ee18 0a10 	vmov	r0, s16
 80180d2:	f000 f94b 	bl	801836c <_Bfree>
 80180d6:	464c      	mov	r4, r9
 80180d8:	6923      	ldr	r3, [r4, #16]
 80180da:	1c5a      	adds	r2, r3, #1
 80180dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80180e0:	6122      	str	r2, [r4, #16]
 80180e2:	2201      	movs	r2, #1
 80180e4:	615a      	str	r2, [r3, #20]
 80180e6:	e7bb      	b.n	8018060 <__gethex+0x3c8>
 80180e8:	6922      	ldr	r2, [r4, #16]
 80180ea:	455a      	cmp	r2, fp
 80180ec:	dd0b      	ble.n	8018106 <__gethex+0x46e>
 80180ee:	2101      	movs	r1, #1
 80180f0:	4620      	mov	r0, r4
 80180f2:	f7ff fd69 	bl	8017bc8 <rshift>
 80180f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80180fa:	3501      	adds	r5, #1
 80180fc:	42ab      	cmp	r3, r5
 80180fe:	f6ff aed0 	blt.w	8017ea2 <__gethex+0x20a>
 8018102:	2701      	movs	r7, #1
 8018104:	e7c0      	b.n	8018088 <__gethex+0x3f0>
 8018106:	f016 061f 	ands.w	r6, r6, #31
 801810a:	d0fa      	beq.n	8018102 <__gethex+0x46a>
 801810c:	449a      	add	sl, r3
 801810e:	f1c6 0620 	rsb	r6, r6, #32
 8018112:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018116:	f000 f9df 	bl	80184d8 <__hi0bits>
 801811a:	42b0      	cmp	r0, r6
 801811c:	dbe7      	blt.n	80180ee <__gethex+0x456>
 801811e:	e7f0      	b.n	8018102 <__gethex+0x46a>
 8018120:	0801b994 	.word	0x0801b994

08018124 <L_shift>:
 8018124:	f1c2 0208 	rsb	r2, r2, #8
 8018128:	0092      	lsls	r2, r2, #2
 801812a:	b570      	push	{r4, r5, r6, lr}
 801812c:	f1c2 0620 	rsb	r6, r2, #32
 8018130:	6843      	ldr	r3, [r0, #4]
 8018132:	6804      	ldr	r4, [r0, #0]
 8018134:	fa03 f506 	lsl.w	r5, r3, r6
 8018138:	432c      	orrs	r4, r5
 801813a:	40d3      	lsrs	r3, r2
 801813c:	6004      	str	r4, [r0, #0]
 801813e:	f840 3f04 	str.w	r3, [r0, #4]!
 8018142:	4288      	cmp	r0, r1
 8018144:	d3f4      	bcc.n	8018130 <L_shift+0xc>
 8018146:	bd70      	pop	{r4, r5, r6, pc}

08018148 <__match>:
 8018148:	b530      	push	{r4, r5, lr}
 801814a:	6803      	ldr	r3, [r0, #0]
 801814c:	3301      	adds	r3, #1
 801814e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018152:	b914      	cbnz	r4, 801815a <__match+0x12>
 8018154:	6003      	str	r3, [r0, #0]
 8018156:	2001      	movs	r0, #1
 8018158:	bd30      	pop	{r4, r5, pc}
 801815a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801815e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018162:	2d19      	cmp	r5, #25
 8018164:	bf98      	it	ls
 8018166:	3220      	addls	r2, #32
 8018168:	42a2      	cmp	r2, r4
 801816a:	d0f0      	beq.n	801814e <__match+0x6>
 801816c:	2000      	movs	r0, #0
 801816e:	e7f3      	b.n	8018158 <__match+0x10>

08018170 <__hexnan>:
 8018170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018174:	680b      	ldr	r3, [r1, #0]
 8018176:	6801      	ldr	r1, [r0, #0]
 8018178:	115e      	asrs	r6, r3, #5
 801817a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801817e:	f013 031f 	ands.w	r3, r3, #31
 8018182:	b087      	sub	sp, #28
 8018184:	bf18      	it	ne
 8018186:	3604      	addne	r6, #4
 8018188:	2500      	movs	r5, #0
 801818a:	1f37      	subs	r7, r6, #4
 801818c:	4682      	mov	sl, r0
 801818e:	4690      	mov	r8, r2
 8018190:	9301      	str	r3, [sp, #4]
 8018192:	f846 5c04 	str.w	r5, [r6, #-4]
 8018196:	46b9      	mov	r9, r7
 8018198:	463c      	mov	r4, r7
 801819a:	9502      	str	r5, [sp, #8]
 801819c:	46ab      	mov	fp, r5
 801819e:	784a      	ldrb	r2, [r1, #1]
 80181a0:	1c4b      	adds	r3, r1, #1
 80181a2:	9303      	str	r3, [sp, #12]
 80181a4:	b342      	cbz	r2, 80181f8 <__hexnan+0x88>
 80181a6:	4610      	mov	r0, r2
 80181a8:	9105      	str	r1, [sp, #20]
 80181aa:	9204      	str	r2, [sp, #16]
 80181ac:	f7ff fd5e 	bl	8017c6c <__hexdig_fun>
 80181b0:	2800      	cmp	r0, #0
 80181b2:	d14f      	bne.n	8018254 <__hexnan+0xe4>
 80181b4:	9a04      	ldr	r2, [sp, #16]
 80181b6:	9905      	ldr	r1, [sp, #20]
 80181b8:	2a20      	cmp	r2, #32
 80181ba:	d818      	bhi.n	80181ee <__hexnan+0x7e>
 80181bc:	9b02      	ldr	r3, [sp, #8]
 80181be:	459b      	cmp	fp, r3
 80181c0:	dd13      	ble.n	80181ea <__hexnan+0x7a>
 80181c2:	454c      	cmp	r4, r9
 80181c4:	d206      	bcs.n	80181d4 <__hexnan+0x64>
 80181c6:	2d07      	cmp	r5, #7
 80181c8:	dc04      	bgt.n	80181d4 <__hexnan+0x64>
 80181ca:	462a      	mov	r2, r5
 80181cc:	4649      	mov	r1, r9
 80181ce:	4620      	mov	r0, r4
 80181d0:	f7ff ffa8 	bl	8018124 <L_shift>
 80181d4:	4544      	cmp	r4, r8
 80181d6:	d950      	bls.n	801827a <__hexnan+0x10a>
 80181d8:	2300      	movs	r3, #0
 80181da:	f1a4 0904 	sub.w	r9, r4, #4
 80181de:	f844 3c04 	str.w	r3, [r4, #-4]
 80181e2:	f8cd b008 	str.w	fp, [sp, #8]
 80181e6:	464c      	mov	r4, r9
 80181e8:	461d      	mov	r5, r3
 80181ea:	9903      	ldr	r1, [sp, #12]
 80181ec:	e7d7      	b.n	801819e <__hexnan+0x2e>
 80181ee:	2a29      	cmp	r2, #41	; 0x29
 80181f0:	d156      	bne.n	80182a0 <__hexnan+0x130>
 80181f2:	3102      	adds	r1, #2
 80181f4:	f8ca 1000 	str.w	r1, [sl]
 80181f8:	f1bb 0f00 	cmp.w	fp, #0
 80181fc:	d050      	beq.n	80182a0 <__hexnan+0x130>
 80181fe:	454c      	cmp	r4, r9
 8018200:	d206      	bcs.n	8018210 <__hexnan+0xa0>
 8018202:	2d07      	cmp	r5, #7
 8018204:	dc04      	bgt.n	8018210 <__hexnan+0xa0>
 8018206:	462a      	mov	r2, r5
 8018208:	4649      	mov	r1, r9
 801820a:	4620      	mov	r0, r4
 801820c:	f7ff ff8a 	bl	8018124 <L_shift>
 8018210:	4544      	cmp	r4, r8
 8018212:	d934      	bls.n	801827e <__hexnan+0x10e>
 8018214:	f1a8 0204 	sub.w	r2, r8, #4
 8018218:	4623      	mov	r3, r4
 801821a:	f853 1b04 	ldr.w	r1, [r3], #4
 801821e:	f842 1f04 	str.w	r1, [r2, #4]!
 8018222:	429f      	cmp	r7, r3
 8018224:	d2f9      	bcs.n	801821a <__hexnan+0xaa>
 8018226:	1b3b      	subs	r3, r7, r4
 8018228:	f023 0303 	bic.w	r3, r3, #3
 801822c:	3304      	adds	r3, #4
 801822e:	3401      	adds	r4, #1
 8018230:	3e03      	subs	r6, #3
 8018232:	42b4      	cmp	r4, r6
 8018234:	bf88      	it	hi
 8018236:	2304      	movhi	r3, #4
 8018238:	4443      	add	r3, r8
 801823a:	2200      	movs	r2, #0
 801823c:	f843 2b04 	str.w	r2, [r3], #4
 8018240:	429f      	cmp	r7, r3
 8018242:	d2fb      	bcs.n	801823c <__hexnan+0xcc>
 8018244:	683b      	ldr	r3, [r7, #0]
 8018246:	b91b      	cbnz	r3, 8018250 <__hexnan+0xe0>
 8018248:	4547      	cmp	r7, r8
 801824a:	d127      	bne.n	801829c <__hexnan+0x12c>
 801824c:	2301      	movs	r3, #1
 801824e:	603b      	str	r3, [r7, #0]
 8018250:	2005      	movs	r0, #5
 8018252:	e026      	b.n	80182a2 <__hexnan+0x132>
 8018254:	3501      	adds	r5, #1
 8018256:	2d08      	cmp	r5, #8
 8018258:	f10b 0b01 	add.w	fp, fp, #1
 801825c:	dd06      	ble.n	801826c <__hexnan+0xfc>
 801825e:	4544      	cmp	r4, r8
 8018260:	d9c3      	bls.n	80181ea <__hexnan+0x7a>
 8018262:	2300      	movs	r3, #0
 8018264:	f844 3c04 	str.w	r3, [r4, #-4]
 8018268:	2501      	movs	r5, #1
 801826a:	3c04      	subs	r4, #4
 801826c:	6822      	ldr	r2, [r4, #0]
 801826e:	f000 000f 	and.w	r0, r0, #15
 8018272:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8018276:	6022      	str	r2, [r4, #0]
 8018278:	e7b7      	b.n	80181ea <__hexnan+0x7a>
 801827a:	2508      	movs	r5, #8
 801827c:	e7b5      	b.n	80181ea <__hexnan+0x7a>
 801827e:	9b01      	ldr	r3, [sp, #4]
 8018280:	2b00      	cmp	r3, #0
 8018282:	d0df      	beq.n	8018244 <__hexnan+0xd4>
 8018284:	f04f 32ff 	mov.w	r2, #4294967295
 8018288:	f1c3 0320 	rsb	r3, r3, #32
 801828c:	fa22 f303 	lsr.w	r3, r2, r3
 8018290:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018294:	401a      	ands	r2, r3
 8018296:	f846 2c04 	str.w	r2, [r6, #-4]
 801829a:	e7d3      	b.n	8018244 <__hexnan+0xd4>
 801829c:	3f04      	subs	r7, #4
 801829e:	e7d1      	b.n	8018244 <__hexnan+0xd4>
 80182a0:	2004      	movs	r0, #4
 80182a2:	b007      	add	sp, #28
 80182a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080182a8 <_localeconv_r>:
 80182a8:	4800      	ldr	r0, [pc, #0]	; (80182ac <_localeconv_r+0x4>)
 80182aa:	4770      	bx	lr
 80182ac:	20004368 	.word	0x20004368

080182b0 <__ascii_mbtowc>:
 80182b0:	b082      	sub	sp, #8
 80182b2:	b901      	cbnz	r1, 80182b6 <__ascii_mbtowc+0x6>
 80182b4:	a901      	add	r1, sp, #4
 80182b6:	b142      	cbz	r2, 80182ca <__ascii_mbtowc+0x1a>
 80182b8:	b14b      	cbz	r3, 80182ce <__ascii_mbtowc+0x1e>
 80182ba:	7813      	ldrb	r3, [r2, #0]
 80182bc:	600b      	str	r3, [r1, #0]
 80182be:	7812      	ldrb	r2, [r2, #0]
 80182c0:	1e10      	subs	r0, r2, #0
 80182c2:	bf18      	it	ne
 80182c4:	2001      	movne	r0, #1
 80182c6:	b002      	add	sp, #8
 80182c8:	4770      	bx	lr
 80182ca:	4610      	mov	r0, r2
 80182cc:	e7fb      	b.n	80182c6 <__ascii_mbtowc+0x16>
 80182ce:	f06f 0001 	mvn.w	r0, #1
 80182d2:	e7f8      	b.n	80182c6 <__ascii_mbtowc+0x16>

080182d4 <__malloc_lock>:
 80182d4:	4801      	ldr	r0, [pc, #4]	; (80182dc <__malloc_lock+0x8>)
 80182d6:	f000 be88 	b.w	8018fea <__retarget_lock_acquire_recursive>
 80182da:	bf00      	nop
 80182dc:	20011ac4 	.word	0x20011ac4

080182e0 <__malloc_unlock>:
 80182e0:	4801      	ldr	r0, [pc, #4]	; (80182e8 <__malloc_unlock+0x8>)
 80182e2:	f000 be83 	b.w	8018fec <__retarget_lock_release_recursive>
 80182e6:	bf00      	nop
 80182e8:	20011ac4 	.word	0x20011ac4

080182ec <_Balloc>:
 80182ec:	b570      	push	{r4, r5, r6, lr}
 80182ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80182f0:	4604      	mov	r4, r0
 80182f2:	460d      	mov	r5, r1
 80182f4:	b976      	cbnz	r6, 8018314 <_Balloc+0x28>
 80182f6:	2010      	movs	r0, #16
 80182f8:	f7fc ff6a 	bl	80151d0 <malloc>
 80182fc:	4602      	mov	r2, r0
 80182fe:	6260      	str	r0, [r4, #36]	; 0x24
 8018300:	b920      	cbnz	r0, 801830c <_Balloc+0x20>
 8018302:	4b18      	ldr	r3, [pc, #96]	; (8018364 <_Balloc+0x78>)
 8018304:	4818      	ldr	r0, [pc, #96]	; (8018368 <_Balloc+0x7c>)
 8018306:	2166      	movs	r1, #102	; 0x66
 8018308:	f000 fe3e 	bl	8018f88 <__assert_func>
 801830c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018310:	6006      	str	r6, [r0, #0]
 8018312:	60c6      	str	r6, [r0, #12]
 8018314:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018316:	68f3      	ldr	r3, [r6, #12]
 8018318:	b183      	cbz	r3, 801833c <_Balloc+0x50>
 801831a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801831c:	68db      	ldr	r3, [r3, #12]
 801831e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018322:	b9b8      	cbnz	r0, 8018354 <_Balloc+0x68>
 8018324:	2101      	movs	r1, #1
 8018326:	fa01 f605 	lsl.w	r6, r1, r5
 801832a:	1d72      	adds	r2, r6, #5
 801832c:	0092      	lsls	r2, r2, #2
 801832e:	4620      	mov	r0, r4
 8018330:	f000 fc97 	bl	8018c62 <_calloc_r>
 8018334:	b160      	cbz	r0, 8018350 <_Balloc+0x64>
 8018336:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801833a:	e00e      	b.n	801835a <_Balloc+0x6e>
 801833c:	2221      	movs	r2, #33	; 0x21
 801833e:	2104      	movs	r1, #4
 8018340:	4620      	mov	r0, r4
 8018342:	f000 fc8e 	bl	8018c62 <_calloc_r>
 8018346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018348:	60f0      	str	r0, [r6, #12]
 801834a:	68db      	ldr	r3, [r3, #12]
 801834c:	2b00      	cmp	r3, #0
 801834e:	d1e4      	bne.n	801831a <_Balloc+0x2e>
 8018350:	2000      	movs	r0, #0
 8018352:	bd70      	pop	{r4, r5, r6, pc}
 8018354:	6802      	ldr	r2, [r0, #0]
 8018356:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801835a:	2300      	movs	r3, #0
 801835c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018360:	e7f7      	b.n	8018352 <_Balloc+0x66>
 8018362:	bf00      	nop
 8018364:	0801b91e 	.word	0x0801b91e
 8018368:	0801ba24 	.word	0x0801ba24

0801836c <_Bfree>:
 801836c:	b570      	push	{r4, r5, r6, lr}
 801836e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018370:	4605      	mov	r5, r0
 8018372:	460c      	mov	r4, r1
 8018374:	b976      	cbnz	r6, 8018394 <_Bfree+0x28>
 8018376:	2010      	movs	r0, #16
 8018378:	f7fc ff2a 	bl	80151d0 <malloc>
 801837c:	4602      	mov	r2, r0
 801837e:	6268      	str	r0, [r5, #36]	; 0x24
 8018380:	b920      	cbnz	r0, 801838c <_Bfree+0x20>
 8018382:	4b09      	ldr	r3, [pc, #36]	; (80183a8 <_Bfree+0x3c>)
 8018384:	4809      	ldr	r0, [pc, #36]	; (80183ac <_Bfree+0x40>)
 8018386:	218a      	movs	r1, #138	; 0x8a
 8018388:	f000 fdfe 	bl	8018f88 <__assert_func>
 801838c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018390:	6006      	str	r6, [r0, #0]
 8018392:	60c6      	str	r6, [r0, #12]
 8018394:	b13c      	cbz	r4, 80183a6 <_Bfree+0x3a>
 8018396:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018398:	6862      	ldr	r2, [r4, #4]
 801839a:	68db      	ldr	r3, [r3, #12]
 801839c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80183a0:	6021      	str	r1, [r4, #0]
 80183a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80183a6:	bd70      	pop	{r4, r5, r6, pc}
 80183a8:	0801b91e 	.word	0x0801b91e
 80183ac:	0801ba24 	.word	0x0801ba24

080183b0 <__multadd>:
 80183b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183b4:	690e      	ldr	r6, [r1, #16]
 80183b6:	4607      	mov	r7, r0
 80183b8:	4698      	mov	r8, r3
 80183ba:	460c      	mov	r4, r1
 80183bc:	f101 0014 	add.w	r0, r1, #20
 80183c0:	2300      	movs	r3, #0
 80183c2:	6805      	ldr	r5, [r0, #0]
 80183c4:	b2a9      	uxth	r1, r5
 80183c6:	fb02 8101 	mla	r1, r2, r1, r8
 80183ca:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80183ce:	0c2d      	lsrs	r5, r5, #16
 80183d0:	fb02 c505 	mla	r5, r2, r5, ip
 80183d4:	b289      	uxth	r1, r1
 80183d6:	3301      	adds	r3, #1
 80183d8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80183dc:	429e      	cmp	r6, r3
 80183de:	f840 1b04 	str.w	r1, [r0], #4
 80183e2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80183e6:	dcec      	bgt.n	80183c2 <__multadd+0x12>
 80183e8:	f1b8 0f00 	cmp.w	r8, #0
 80183ec:	d022      	beq.n	8018434 <__multadd+0x84>
 80183ee:	68a3      	ldr	r3, [r4, #8]
 80183f0:	42b3      	cmp	r3, r6
 80183f2:	dc19      	bgt.n	8018428 <__multadd+0x78>
 80183f4:	6861      	ldr	r1, [r4, #4]
 80183f6:	4638      	mov	r0, r7
 80183f8:	3101      	adds	r1, #1
 80183fa:	f7ff ff77 	bl	80182ec <_Balloc>
 80183fe:	4605      	mov	r5, r0
 8018400:	b928      	cbnz	r0, 801840e <__multadd+0x5e>
 8018402:	4602      	mov	r2, r0
 8018404:	4b0d      	ldr	r3, [pc, #52]	; (801843c <__multadd+0x8c>)
 8018406:	480e      	ldr	r0, [pc, #56]	; (8018440 <__multadd+0x90>)
 8018408:	21b5      	movs	r1, #181	; 0xb5
 801840a:	f000 fdbd 	bl	8018f88 <__assert_func>
 801840e:	6922      	ldr	r2, [r4, #16]
 8018410:	3202      	adds	r2, #2
 8018412:	f104 010c 	add.w	r1, r4, #12
 8018416:	0092      	lsls	r2, r2, #2
 8018418:	300c      	adds	r0, #12
 801841a:	f7fc fee9 	bl	80151f0 <memcpy>
 801841e:	4621      	mov	r1, r4
 8018420:	4638      	mov	r0, r7
 8018422:	f7ff ffa3 	bl	801836c <_Bfree>
 8018426:	462c      	mov	r4, r5
 8018428:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801842c:	3601      	adds	r6, #1
 801842e:	f8c3 8014 	str.w	r8, [r3, #20]
 8018432:	6126      	str	r6, [r4, #16]
 8018434:	4620      	mov	r0, r4
 8018436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801843a:	bf00      	nop
 801843c:	0801b994 	.word	0x0801b994
 8018440:	0801ba24 	.word	0x0801ba24

08018444 <__s2b>:
 8018444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018448:	460c      	mov	r4, r1
 801844a:	4615      	mov	r5, r2
 801844c:	461f      	mov	r7, r3
 801844e:	2209      	movs	r2, #9
 8018450:	3308      	adds	r3, #8
 8018452:	4606      	mov	r6, r0
 8018454:	fb93 f3f2 	sdiv	r3, r3, r2
 8018458:	2100      	movs	r1, #0
 801845a:	2201      	movs	r2, #1
 801845c:	429a      	cmp	r2, r3
 801845e:	db09      	blt.n	8018474 <__s2b+0x30>
 8018460:	4630      	mov	r0, r6
 8018462:	f7ff ff43 	bl	80182ec <_Balloc>
 8018466:	b940      	cbnz	r0, 801847a <__s2b+0x36>
 8018468:	4602      	mov	r2, r0
 801846a:	4b19      	ldr	r3, [pc, #100]	; (80184d0 <__s2b+0x8c>)
 801846c:	4819      	ldr	r0, [pc, #100]	; (80184d4 <__s2b+0x90>)
 801846e:	21ce      	movs	r1, #206	; 0xce
 8018470:	f000 fd8a 	bl	8018f88 <__assert_func>
 8018474:	0052      	lsls	r2, r2, #1
 8018476:	3101      	adds	r1, #1
 8018478:	e7f0      	b.n	801845c <__s2b+0x18>
 801847a:	9b08      	ldr	r3, [sp, #32]
 801847c:	6143      	str	r3, [r0, #20]
 801847e:	2d09      	cmp	r5, #9
 8018480:	f04f 0301 	mov.w	r3, #1
 8018484:	6103      	str	r3, [r0, #16]
 8018486:	dd16      	ble.n	80184b6 <__s2b+0x72>
 8018488:	f104 0909 	add.w	r9, r4, #9
 801848c:	46c8      	mov	r8, r9
 801848e:	442c      	add	r4, r5
 8018490:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018494:	4601      	mov	r1, r0
 8018496:	3b30      	subs	r3, #48	; 0x30
 8018498:	220a      	movs	r2, #10
 801849a:	4630      	mov	r0, r6
 801849c:	f7ff ff88 	bl	80183b0 <__multadd>
 80184a0:	45a0      	cmp	r8, r4
 80184a2:	d1f5      	bne.n	8018490 <__s2b+0x4c>
 80184a4:	f1a5 0408 	sub.w	r4, r5, #8
 80184a8:	444c      	add	r4, r9
 80184aa:	1b2d      	subs	r5, r5, r4
 80184ac:	1963      	adds	r3, r4, r5
 80184ae:	42bb      	cmp	r3, r7
 80184b0:	db04      	blt.n	80184bc <__s2b+0x78>
 80184b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80184b6:	340a      	adds	r4, #10
 80184b8:	2509      	movs	r5, #9
 80184ba:	e7f6      	b.n	80184aa <__s2b+0x66>
 80184bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80184c0:	4601      	mov	r1, r0
 80184c2:	3b30      	subs	r3, #48	; 0x30
 80184c4:	220a      	movs	r2, #10
 80184c6:	4630      	mov	r0, r6
 80184c8:	f7ff ff72 	bl	80183b0 <__multadd>
 80184cc:	e7ee      	b.n	80184ac <__s2b+0x68>
 80184ce:	bf00      	nop
 80184d0:	0801b994 	.word	0x0801b994
 80184d4:	0801ba24 	.word	0x0801ba24

080184d8 <__hi0bits>:
 80184d8:	0c03      	lsrs	r3, r0, #16
 80184da:	041b      	lsls	r3, r3, #16
 80184dc:	b9d3      	cbnz	r3, 8018514 <__hi0bits+0x3c>
 80184de:	0400      	lsls	r0, r0, #16
 80184e0:	2310      	movs	r3, #16
 80184e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80184e6:	bf04      	itt	eq
 80184e8:	0200      	lsleq	r0, r0, #8
 80184ea:	3308      	addeq	r3, #8
 80184ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80184f0:	bf04      	itt	eq
 80184f2:	0100      	lsleq	r0, r0, #4
 80184f4:	3304      	addeq	r3, #4
 80184f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80184fa:	bf04      	itt	eq
 80184fc:	0080      	lsleq	r0, r0, #2
 80184fe:	3302      	addeq	r3, #2
 8018500:	2800      	cmp	r0, #0
 8018502:	db05      	blt.n	8018510 <__hi0bits+0x38>
 8018504:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018508:	f103 0301 	add.w	r3, r3, #1
 801850c:	bf08      	it	eq
 801850e:	2320      	moveq	r3, #32
 8018510:	4618      	mov	r0, r3
 8018512:	4770      	bx	lr
 8018514:	2300      	movs	r3, #0
 8018516:	e7e4      	b.n	80184e2 <__hi0bits+0xa>

08018518 <__lo0bits>:
 8018518:	6803      	ldr	r3, [r0, #0]
 801851a:	f013 0207 	ands.w	r2, r3, #7
 801851e:	4601      	mov	r1, r0
 8018520:	d00b      	beq.n	801853a <__lo0bits+0x22>
 8018522:	07da      	lsls	r2, r3, #31
 8018524:	d424      	bmi.n	8018570 <__lo0bits+0x58>
 8018526:	0798      	lsls	r0, r3, #30
 8018528:	bf49      	itett	mi
 801852a:	085b      	lsrmi	r3, r3, #1
 801852c:	089b      	lsrpl	r3, r3, #2
 801852e:	2001      	movmi	r0, #1
 8018530:	600b      	strmi	r3, [r1, #0]
 8018532:	bf5c      	itt	pl
 8018534:	600b      	strpl	r3, [r1, #0]
 8018536:	2002      	movpl	r0, #2
 8018538:	4770      	bx	lr
 801853a:	b298      	uxth	r0, r3
 801853c:	b9b0      	cbnz	r0, 801856c <__lo0bits+0x54>
 801853e:	0c1b      	lsrs	r3, r3, #16
 8018540:	2010      	movs	r0, #16
 8018542:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018546:	bf04      	itt	eq
 8018548:	0a1b      	lsreq	r3, r3, #8
 801854a:	3008      	addeq	r0, #8
 801854c:	071a      	lsls	r2, r3, #28
 801854e:	bf04      	itt	eq
 8018550:	091b      	lsreq	r3, r3, #4
 8018552:	3004      	addeq	r0, #4
 8018554:	079a      	lsls	r2, r3, #30
 8018556:	bf04      	itt	eq
 8018558:	089b      	lsreq	r3, r3, #2
 801855a:	3002      	addeq	r0, #2
 801855c:	07da      	lsls	r2, r3, #31
 801855e:	d403      	bmi.n	8018568 <__lo0bits+0x50>
 8018560:	085b      	lsrs	r3, r3, #1
 8018562:	f100 0001 	add.w	r0, r0, #1
 8018566:	d005      	beq.n	8018574 <__lo0bits+0x5c>
 8018568:	600b      	str	r3, [r1, #0]
 801856a:	4770      	bx	lr
 801856c:	4610      	mov	r0, r2
 801856e:	e7e8      	b.n	8018542 <__lo0bits+0x2a>
 8018570:	2000      	movs	r0, #0
 8018572:	4770      	bx	lr
 8018574:	2020      	movs	r0, #32
 8018576:	4770      	bx	lr

08018578 <__i2b>:
 8018578:	b510      	push	{r4, lr}
 801857a:	460c      	mov	r4, r1
 801857c:	2101      	movs	r1, #1
 801857e:	f7ff feb5 	bl	80182ec <_Balloc>
 8018582:	4602      	mov	r2, r0
 8018584:	b928      	cbnz	r0, 8018592 <__i2b+0x1a>
 8018586:	4b05      	ldr	r3, [pc, #20]	; (801859c <__i2b+0x24>)
 8018588:	4805      	ldr	r0, [pc, #20]	; (80185a0 <__i2b+0x28>)
 801858a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801858e:	f000 fcfb 	bl	8018f88 <__assert_func>
 8018592:	2301      	movs	r3, #1
 8018594:	6144      	str	r4, [r0, #20]
 8018596:	6103      	str	r3, [r0, #16]
 8018598:	bd10      	pop	{r4, pc}
 801859a:	bf00      	nop
 801859c:	0801b994 	.word	0x0801b994
 80185a0:	0801ba24 	.word	0x0801ba24

080185a4 <__multiply>:
 80185a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185a8:	4614      	mov	r4, r2
 80185aa:	690a      	ldr	r2, [r1, #16]
 80185ac:	6923      	ldr	r3, [r4, #16]
 80185ae:	429a      	cmp	r2, r3
 80185b0:	bfb8      	it	lt
 80185b2:	460b      	movlt	r3, r1
 80185b4:	460d      	mov	r5, r1
 80185b6:	bfbc      	itt	lt
 80185b8:	4625      	movlt	r5, r4
 80185ba:	461c      	movlt	r4, r3
 80185bc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80185c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80185c4:	68ab      	ldr	r3, [r5, #8]
 80185c6:	6869      	ldr	r1, [r5, #4]
 80185c8:	eb0a 0709 	add.w	r7, sl, r9
 80185cc:	42bb      	cmp	r3, r7
 80185ce:	b085      	sub	sp, #20
 80185d0:	bfb8      	it	lt
 80185d2:	3101      	addlt	r1, #1
 80185d4:	f7ff fe8a 	bl	80182ec <_Balloc>
 80185d8:	b930      	cbnz	r0, 80185e8 <__multiply+0x44>
 80185da:	4602      	mov	r2, r0
 80185dc:	4b42      	ldr	r3, [pc, #264]	; (80186e8 <__multiply+0x144>)
 80185de:	4843      	ldr	r0, [pc, #268]	; (80186ec <__multiply+0x148>)
 80185e0:	f240 115d 	movw	r1, #349	; 0x15d
 80185e4:	f000 fcd0 	bl	8018f88 <__assert_func>
 80185e8:	f100 0614 	add.w	r6, r0, #20
 80185ec:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80185f0:	4633      	mov	r3, r6
 80185f2:	2200      	movs	r2, #0
 80185f4:	4543      	cmp	r3, r8
 80185f6:	d31e      	bcc.n	8018636 <__multiply+0x92>
 80185f8:	f105 0c14 	add.w	ip, r5, #20
 80185fc:	f104 0314 	add.w	r3, r4, #20
 8018600:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8018604:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8018608:	9202      	str	r2, [sp, #8]
 801860a:	ebac 0205 	sub.w	r2, ip, r5
 801860e:	3a15      	subs	r2, #21
 8018610:	f022 0203 	bic.w	r2, r2, #3
 8018614:	3204      	adds	r2, #4
 8018616:	f105 0115 	add.w	r1, r5, #21
 801861a:	458c      	cmp	ip, r1
 801861c:	bf38      	it	cc
 801861e:	2204      	movcc	r2, #4
 8018620:	9201      	str	r2, [sp, #4]
 8018622:	9a02      	ldr	r2, [sp, #8]
 8018624:	9303      	str	r3, [sp, #12]
 8018626:	429a      	cmp	r2, r3
 8018628:	d808      	bhi.n	801863c <__multiply+0x98>
 801862a:	2f00      	cmp	r7, #0
 801862c:	dc55      	bgt.n	80186da <__multiply+0x136>
 801862e:	6107      	str	r7, [r0, #16]
 8018630:	b005      	add	sp, #20
 8018632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018636:	f843 2b04 	str.w	r2, [r3], #4
 801863a:	e7db      	b.n	80185f4 <__multiply+0x50>
 801863c:	f8b3 a000 	ldrh.w	sl, [r3]
 8018640:	f1ba 0f00 	cmp.w	sl, #0
 8018644:	d020      	beq.n	8018688 <__multiply+0xe4>
 8018646:	f105 0e14 	add.w	lr, r5, #20
 801864a:	46b1      	mov	r9, r6
 801864c:	2200      	movs	r2, #0
 801864e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8018652:	f8d9 b000 	ldr.w	fp, [r9]
 8018656:	b2a1      	uxth	r1, r4
 8018658:	fa1f fb8b 	uxth.w	fp, fp
 801865c:	fb0a b101 	mla	r1, sl, r1, fp
 8018660:	4411      	add	r1, r2
 8018662:	f8d9 2000 	ldr.w	r2, [r9]
 8018666:	0c24      	lsrs	r4, r4, #16
 8018668:	0c12      	lsrs	r2, r2, #16
 801866a:	fb0a 2404 	mla	r4, sl, r4, r2
 801866e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8018672:	b289      	uxth	r1, r1
 8018674:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8018678:	45f4      	cmp	ip, lr
 801867a:	f849 1b04 	str.w	r1, [r9], #4
 801867e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8018682:	d8e4      	bhi.n	801864e <__multiply+0xaa>
 8018684:	9901      	ldr	r1, [sp, #4]
 8018686:	5072      	str	r2, [r6, r1]
 8018688:	9a03      	ldr	r2, [sp, #12]
 801868a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801868e:	3304      	adds	r3, #4
 8018690:	f1b9 0f00 	cmp.w	r9, #0
 8018694:	d01f      	beq.n	80186d6 <__multiply+0x132>
 8018696:	6834      	ldr	r4, [r6, #0]
 8018698:	f105 0114 	add.w	r1, r5, #20
 801869c:	46b6      	mov	lr, r6
 801869e:	f04f 0a00 	mov.w	sl, #0
 80186a2:	880a      	ldrh	r2, [r1, #0]
 80186a4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80186a8:	fb09 b202 	mla	r2, r9, r2, fp
 80186ac:	4492      	add	sl, r2
 80186ae:	b2a4      	uxth	r4, r4
 80186b0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80186b4:	f84e 4b04 	str.w	r4, [lr], #4
 80186b8:	f851 4b04 	ldr.w	r4, [r1], #4
 80186bc:	f8be 2000 	ldrh.w	r2, [lr]
 80186c0:	0c24      	lsrs	r4, r4, #16
 80186c2:	fb09 2404 	mla	r4, r9, r4, r2
 80186c6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80186ca:	458c      	cmp	ip, r1
 80186cc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80186d0:	d8e7      	bhi.n	80186a2 <__multiply+0xfe>
 80186d2:	9a01      	ldr	r2, [sp, #4]
 80186d4:	50b4      	str	r4, [r6, r2]
 80186d6:	3604      	adds	r6, #4
 80186d8:	e7a3      	b.n	8018622 <__multiply+0x7e>
 80186da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d1a5      	bne.n	801862e <__multiply+0x8a>
 80186e2:	3f01      	subs	r7, #1
 80186e4:	e7a1      	b.n	801862a <__multiply+0x86>
 80186e6:	bf00      	nop
 80186e8:	0801b994 	.word	0x0801b994
 80186ec:	0801ba24 	.word	0x0801ba24

080186f0 <__pow5mult>:
 80186f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80186f4:	4615      	mov	r5, r2
 80186f6:	f012 0203 	ands.w	r2, r2, #3
 80186fa:	4606      	mov	r6, r0
 80186fc:	460f      	mov	r7, r1
 80186fe:	d007      	beq.n	8018710 <__pow5mult+0x20>
 8018700:	4c25      	ldr	r4, [pc, #148]	; (8018798 <__pow5mult+0xa8>)
 8018702:	3a01      	subs	r2, #1
 8018704:	2300      	movs	r3, #0
 8018706:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801870a:	f7ff fe51 	bl	80183b0 <__multadd>
 801870e:	4607      	mov	r7, r0
 8018710:	10ad      	asrs	r5, r5, #2
 8018712:	d03d      	beq.n	8018790 <__pow5mult+0xa0>
 8018714:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018716:	b97c      	cbnz	r4, 8018738 <__pow5mult+0x48>
 8018718:	2010      	movs	r0, #16
 801871a:	f7fc fd59 	bl	80151d0 <malloc>
 801871e:	4602      	mov	r2, r0
 8018720:	6270      	str	r0, [r6, #36]	; 0x24
 8018722:	b928      	cbnz	r0, 8018730 <__pow5mult+0x40>
 8018724:	4b1d      	ldr	r3, [pc, #116]	; (801879c <__pow5mult+0xac>)
 8018726:	481e      	ldr	r0, [pc, #120]	; (80187a0 <__pow5mult+0xb0>)
 8018728:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801872c:	f000 fc2c 	bl	8018f88 <__assert_func>
 8018730:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018734:	6004      	str	r4, [r0, #0]
 8018736:	60c4      	str	r4, [r0, #12]
 8018738:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801873c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018740:	b94c      	cbnz	r4, 8018756 <__pow5mult+0x66>
 8018742:	f240 2171 	movw	r1, #625	; 0x271
 8018746:	4630      	mov	r0, r6
 8018748:	f7ff ff16 	bl	8018578 <__i2b>
 801874c:	2300      	movs	r3, #0
 801874e:	f8c8 0008 	str.w	r0, [r8, #8]
 8018752:	4604      	mov	r4, r0
 8018754:	6003      	str	r3, [r0, #0]
 8018756:	f04f 0900 	mov.w	r9, #0
 801875a:	07eb      	lsls	r3, r5, #31
 801875c:	d50a      	bpl.n	8018774 <__pow5mult+0x84>
 801875e:	4639      	mov	r1, r7
 8018760:	4622      	mov	r2, r4
 8018762:	4630      	mov	r0, r6
 8018764:	f7ff ff1e 	bl	80185a4 <__multiply>
 8018768:	4639      	mov	r1, r7
 801876a:	4680      	mov	r8, r0
 801876c:	4630      	mov	r0, r6
 801876e:	f7ff fdfd 	bl	801836c <_Bfree>
 8018772:	4647      	mov	r7, r8
 8018774:	106d      	asrs	r5, r5, #1
 8018776:	d00b      	beq.n	8018790 <__pow5mult+0xa0>
 8018778:	6820      	ldr	r0, [r4, #0]
 801877a:	b938      	cbnz	r0, 801878c <__pow5mult+0x9c>
 801877c:	4622      	mov	r2, r4
 801877e:	4621      	mov	r1, r4
 8018780:	4630      	mov	r0, r6
 8018782:	f7ff ff0f 	bl	80185a4 <__multiply>
 8018786:	6020      	str	r0, [r4, #0]
 8018788:	f8c0 9000 	str.w	r9, [r0]
 801878c:	4604      	mov	r4, r0
 801878e:	e7e4      	b.n	801875a <__pow5mult+0x6a>
 8018790:	4638      	mov	r0, r7
 8018792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018796:	bf00      	nop
 8018798:	0801bb78 	.word	0x0801bb78
 801879c:	0801b91e 	.word	0x0801b91e
 80187a0:	0801ba24 	.word	0x0801ba24

080187a4 <__lshift>:
 80187a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187a8:	460c      	mov	r4, r1
 80187aa:	6849      	ldr	r1, [r1, #4]
 80187ac:	6923      	ldr	r3, [r4, #16]
 80187ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80187b2:	68a3      	ldr	r3, [r4, #8]
 80187b4:	4607      	mov	r7, r0
 80187b6:	4691      	mov	r9, r2
 80187b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80187bc:	f108 0601 	add.w	r6, r8, #1
 80187c0:	42b3      	cmp	r3, r6
 80187c2:	db0b      	blt.n	80187dc <__lshift+0x38>
 80187c4:	4638      	mov	r0, r7
 80187c6:	f7ff fd91 	bl	80182ec <_Balloc>
 80187ca:	4605      	mov	r5, r0
 80187cc:	b948      	cbnz	r0, 80187e2 <__lshift+0x3e>
 80187ce:	4602      	mov	r2, r0
 80187d0:	4b28      	ldr	r3, [pc, #160]	; (8018874 <__lshift+0xd0>)
 80187d2:	4829      	ldr	r0, [pc, #164]	; (8018878 <__lshift+0xd4>)
 80187d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80187d8:	f000 fbd6 	bl	8018f88 <__assert_func>
 80187dc:	3101      	adds	r1, #1
 80187de:	005b      	lsls	r3, r3, #1
 80187e0:	e7ee      	b.n	80187c0 <__lshift+0x1c>
 80187e2:	2300      	movs	r3, #0
 80187e4:	f100 0114 	add.w	r1, r0, #20
 80187e8:	f100 0210 	add.w	r2, r0, #16
 80187ec:	4618      	mov	r0, r3
 80187ee:	4553      	cmp	r3, sl
 80187f0:	db33      	blt.n	801885a <__lshift+0xb6>
 80187f2:	6920      	ldr	r0, [r4, #16]
 80187f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80187f8:	f104 0314 	add.w	r3, r4, #20
 80187fc:	f019 091f 	ands.w	r9, r9, #31
 8018800:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018804:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018808:	d02b      	beq.n	8018862 <__lshift+0xbe>
 801880a:	f1c9 0e20 	rsb	lr, r9, #32
 801880e:	468a      	mov	sl, r1
 8018810:	2200      	movs	r2, #0
 8018812:	6818      	ldr	r0, [r3, #0]
 8018814:	fa00 f009 	lsl.w	r0, r0, r9
 8018818:	4302      	orrs	r2, r0
 801881a:	f84a 2b04 	str.w	r2, [sl], #4
 801881e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018822:	459c      	cmp	ip, r3
 8018824:	fa22 f20e 	lsr.w	r2, r2, lr
 8018828:	d8f3      	bhi.n	8018812 <__lshift+0x6e>
 801882a:	ebac 0304 	sub.w	r3, ip, r4
 801882e:	3b15      	subs	r3, #21
 8018830:	f023 0303 	bic.w	r3, r3, #3
 8018834:	3304      	adds	r3, #4
 8018836:	f104 0015 	add.w	r0, r4, #21
 801883a:	4584      	cmp	ip, r0
 801883c:	bf38      	it	cc
 801883e:	2304      	movcc	r3, #4
 8018840:	50ca      	str	r2, [r1, r3]
 8018842:	b10a      	cbz	r2, 8018848 <__lshift+0xa4>
 8018844:	f108 0602 	add.w	r6, r8, #2
 8018848:	3e01      	subs	r6, #1
 801884a:	4638      	mov	r0, r7
 801884c:	612e      	str	r6, [r5, #16]
 801884e:	4621      	mov	r1, r4
 8018850:	f7ff fd8c 	bl	801836c <_Bfree>
 8018854:	4628      	mov	r0, r5
 8018856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801885a:	f842 0f04 	str.w	r0, [r2, #4]!
 801885e:	3301      	adds	r3, #1
 8018860:	e7c5      	b.n	80187ee <__lshift+0x4a>
 8018862:	3904      	subs	r1, #4
 8018864:	f853 2b04 	ldr.w	r2, [r3], #4
 8018868:	f841 2f04 	str.w	r2, [r1, #4]!
 801886c:	459c      	cmp	ip, r3
 801886e:	d8f9      	bhi.n	8018864 <__lshift+0xc0>
 8018870:	e7ea      	b.n	8018848 <__lshift+0xa4>
 8018872:	bf00      	nop
 8018874:	0801b994 	.word	0x0801b994
 8018878:	0801ba24 	.word	0x0801ba24

0801887c <__mcmp>:
 801887c:	b530      	push	{r4, r5, lr}
 801887e:	6902      	ldr	r2, [r0, #16]
 8018880:	690c      	ldr	r4, [r1, #16]
 8018882:	1b12      	subs	r2, r2, r4
 8018884:	d10e      	bne.n	80188a4 <__mcmp+0x28>
 8018886:	f100 0314 	add.w	r3, r0, #20
 801888a:	3114      	adds	r1, #20
 801888c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018890:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018894:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018898:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801889c:	42a5      	cmp	r5, r4
 801889e:	d003      	beq.n	80188a8 <__mcmp+0x2c>
 80188a0:	d305      	bcc.n	80188ae <__mcmp+0x32>
 80188a2:	2201      	movs	r2, #1
 80188a4:	4610      	mov	r0, r2
 80188a6:	bd30      	pop	{r4, r5, pc}
 80188a8:	4283      	cmp	r3, r0
 80188aa:	d3f3      	bcc.n	8018894 <__mcmp+0x18>
 80188ac:	e7fa      	b.n	80188a4 <__mcmp+0x28>
 80188ae:	f04f 32ff 	mov.w	r2, #4294967295
 80188b2:	e7f7      	b.n	80188a4 <__mcmp+0x28>

080188b4 <__mdiff>:
 80188b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188b8:	460c      	mov	r4, r1
 80188ba:	4606      	mov	r6, r0
 80188bc:	4611      	mov	r1, r2
 80188be:	4620      	mov	r0, r4
 80188c0:	4617      	mov	r7, r2
 80188c2:	f7ff ffdb 	bl	801887c <__mcmp>
 80188c6:	1e05      	subs	r5, r0, #0
 80188c8:	d110      	bne.n	80188ec <__mdiff+0x38>
 80188ca:	4629      	mov	r1, r5
 80188cc:	4630      	mov	r0, r6
 80188ce:	f7ff fd0d 	bl	80182ec <_Balloc>
 80188d2:	b930      	cbnz	r0, 80188e2 <__mdiff+0x2e>
 80188d4:	4b39      	ldr	r3, [pc, #228]	; (80189bc <__mdiff+0x108>)
 80188d6:	4602      	mov	r2, r0
 80188d8:	f240 2132 	movw	r1, #562	; 0x232
 80188dc:	4838      	ldr	r0, [pc, #224]	; (80189c0 <__mdiff+0x10c>)
 80188de:	f000 fb53 	bl	8018f88 <__assert_func>
 80188e2:	2301      	movs	r3, #1
 80188e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80188e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188ec:	bfa4      	itt	ge
 80188ee:	463b      	movge	r3, r7
 80188f0:	4627      	movge	r7, r4
 80188f2:	4630      	mov	r0, r6
 80188f4:	6879      	ldr	r1, [r7, #4]
 80188f6:	bfa6      	itte	ge
 80188f8:	461c      	movge	r4, r3
 80188fa:	2500      	movge	r5, #0
 80188fc:	2501      	movlt	r5, #1
 80188fe:	f7ff fcf5 	bl	80182ec <_Balloc>
 8018902:	b920      	cbnz	r0, 801890e <__mdiff+0x5a>
 8018904:	4b2d      	ldr	r3, [pc, #180]	; (80189bc <__mdiff+0x108>)
 8018906:	4602      	mov	r2, r0
 8018908:	f44f 7110 	mov.w	r1, #576	; 0x240
 801890c:	e7e6      	b.n	80188dc <__mdiff+0x28>
 801890e:	693e      	ldr	r6, [r7, #16]
 8018910:	60c5      	str	r5, [r0, #12]
 8018912:	6925      	ldr	r5, [r4, #16]
 8018914:	f107 0114 	add.w	r1, r7, #20
 8018918:	f104 0914 	add.w	r9, r4, #20
 801891c:	f100 0e14 	add.w	lr, r0, #20
 8018920:	f107 0210 	add.w	r2, r7, #16
 8018924:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8018928:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801892c:	46f2      	mov	sl, lr
 801892e:	2700      	movs	r7, #0
 8018930:	f859 3b04 	ldr.w	r3, [r9], #4
 8018934:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018938:	fa1f f883 	uxth.w	r8, r3
 801893c:	fa17 f78b 	uxtah	r7, r7, fp
 8018940:	0c1b      	lsrs	r3, r3, #16
 8018942:	eba7 0808 	sub.w	r8, r7, r8
 8018946:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801894a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801894e:	fa1f f888 	uxth.w	r8, r8
 8018952:	141f      	asrs	r7, r3, #16
 8018954:	454d      	cmp	r5, r9
 8018956:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801895a:	f84a 3b04 	str.w	r3, [sl], #4
 801895e:	d8e7      	bhi.n	8018930 <__mdiff+0x7c>
 8018960:	1b2b      	subs	r3, r5, r4
 8018962:	3b15      	subs	r3, #21
 8018964:	f023 0303 	bic.w	r3, r3, #3
 8018968:	3304      	adds	r3, #4
 801896a:	3415      	adds	r4, #21
 801896c:	42a5      	cmp	r5, r4
 801896e:	bf38      	it	cc
 8018970:	2304      	movcc	r3, #4
 8018972:	4419      	add	r1, r3
 8018974:	4473      	add	r3, lr
 8018976:	469e      	mov	lr, r3
 8018978:	460d      	mov	r5, r1
 801897a:	4565      	cmp	r5, ip
 801897c:	d30e      	bcc.n	801899c <__mdiff+0xe8>
 801897e:	f10c 0203 	add.w	r2, ip, #3
 8018982:	1a52      	subs	r2, r2, r1
 8018984:	f022 0203 	bic.w	r2, r2, #3
 8018988:	3903      	subs	r1, #3
 801898a:	458c      	cmp	ip, r1
 801898c:	bf38      	it	cc
 801898e:	2200      	movcc	r2, #0
 8018990:	441a      	add	r2, r3
 8018992:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8018996:	b17b      	cbz	r3, 80189b8 <__mdiff+0x104>
 8018998:	6106      	str	r6, [r0, #16]
 801899a:	e7a5      	b.n	80188e8 <__mdiff+0x34>
 801899c:	f855 8b04 	ldr.w	r8, [r5], #4
 80189a0:	fa17 f488 	uxtah	r4, r7, r8
 80189a4:	1422      	asrs	r2, r4, #16
 80189a6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80189aa:	b2a4      	uxth	r4, r4
 80189ac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80189b0:	f84e 4b04 	str.w	r4, [lr], #4
 80189b4:	1417      	asrs	r7, r2, #16
 80189b6:	e7e0      	b.n	801897a <__mdiff+0xc6>
 80189b8:	3e01      	subs	r6, #1
 80189ba:	e7ea      	b.n	8018992 <__mdiff+0xde>
 80189bc:	0801b994 	.word	0x0801b994
 80189c0:	0801ba24 	.word	0x0801ba24

080189c4 <__ulp>:
 80189c4:	b082      	sub	sp, #8
 80189c6:	ed8d 0b00 	vstr	d0, [sp]
 80189ca:	9b01      	ldr	r3, [sp, #4]
 80189cc:	4912      	ldr	r1, [pc, #72]	; (8018a18 <__ulp+0x54>)
 80189ce:	4019      	ands	r1, r3
 80189d0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80189d4:	2900      	cmp	r1, #0
 80189d6:	dd05      	ble.n	80189e4 <__ulp+0x20>
 80189d8:	2200      	movs	r2, #0
 80189da:	460b      	mov	r3, r1
 80189dc:	ec43 2b10 	vmov	d0, r2, r3
 80189e0:	b002      	add	sp, #8
 80189e2:	4770      	bx	lr
 80189e4:	4249      	negs	r1, r1
 80189e6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80189ea:	ea4f 5021 	mov.w	r0, r1, asr #20
 80189ee:	f04f 0200 	mov.w	r2, #0
 80189f2:	f04f 0300 	mov.w	r3, #0
 80189f6:	da04      	bge.n	8018a02 <__ulp+0x3e>
 80189f8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80189fc:	fa41 f300 	asr.w	r3, r1, r0
 8018a00:	e7ec      	b.n	80189dc <__ulp+0x18>
 8018a02:	f1a0 0114 	sub.w	r1, r0, #20
 8018a06:	291e      	cmp	r1, #30
 8018a08:	bfda      	itte	le
 8018a0a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8018a0e:	fa20 f101 	lsrle.w	r1, r0, r1
 8018a12:	2101      	movgt	r1, #1
 8018a14:	460a      	mov	r2, r1
 8018a16:	e7e1      	b.n	80189dc <__ulp+0x18>
 8018a18:	7ff00000 	.word	0x7ff00000

08018a1c <__b2d>:
 8018a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a1e:	6905      	ldr	r5, [r0, #16]
 8018a20:	f100 0714 	add.w	r7, r0, #20
 8018a24:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018a28:	1f2e      	subs	r6, r5, #4
 8018a2a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018a2e:	4620      	mov	r0, r4
 8018a30:	f7ff fd52 	bl	80184d8 <__hi0bits>
 8018a34:	f1c0 0320 	rsb	r3, r0, #32
 8018a38:	280a      	cmp	r0, #10
 8018a3a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8018ab8 <__b2d+0x9c>
 8018a3e:	600b      	str	r3, [r1, #0]
 8018a40:	dc14      	bgt.n	8018a6c <__b2d+0x50>
 8018a42:	f1c0 0e0b 	rsb	lr, r0, #11
 8018a46:	fa24 f10e 	lsr.w	r1, r4, lr
 8018a4a:	42b7      	cmp	r7, r6
 8018a4c:	ea41 030c 	orr.w	r3, r1, ip
 8018a50:	bf34      	ite	cc
 8018a52:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018a56:	2100      	movcs	r1, #0
 8018a58:	3015      	adds	r0, #21
 8018a5a:	fa04 f000 	lsl.w	r0, r4, r0
 8018a5e:	fa21 f10e 	lsr.w	r1, r1, lr
 8018a62:	ea40 0201 	orr.w	r2, r0, r1
 8018a66:	ec43 2b10 	vmov	d0, r2, r3
 8018a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a6c:	42b7      	cmp	r7, r6
 8018a6e:	bf3a      	itte	cc
 8018a70:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018a74:	f1a5 0608 	subcc.w	r6, r5, #8
 8018a78:	2100      	movcs	r1, #0
 8018a7a:	380b      	subs	r0, #11
 8018a7c:	d017      	beq.n	8018aae <__b2d+0x92>
 8018a7e:	f1c0 0c20 	rsb	ip, r0, #32
 8018a82:	fa04 f500 	lsl.w	r5, r4, r0
 8018a86:	42be      	cmp	r6, r7
 8018a88:	fa21 f40c 	lsr.w	r4, r1, ip
 8018a8c:	ea45 0504 	orr.w	r5, r5, r4
 8018a90:	bf8c      	ite	hi
 8018a92:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018a96:	2400      	movls	r4, #0
 8018a98:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8018a9c:	fa01 f000 	lsl.w	r0, r1, r0
 8018aa0:	fa24 f40c 	lsr.w	r4, r4, ip
 8018aa4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018aa8:	ea40 0204 	orr.w	r2, r0, r4
 8018aac:	e7db      	b.n	8018a66 <__b2d+0x4a>
 8018aae:	ea44 030c 	orr.w	r3, r4, ip
 8018ab2:	460a      	mov	r2, r1
 8018ab4:	e7d7      	b.n	8018a66 <__b2d+0x4a>
 8018ab6:	bf00      	nop
 8018ab8:	3ff00000 	.word	0x3ff00000

08018abc <__d2b>:
 8018abc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018ac0:	4689      	mov	r9, r1
 8018ac2:	2101      	movs	r1, #1
 8018ac4:	ec57 6b10 	vmov	r6, r7, d0
 8018ac8:	4690      	mov	r8, r2
 8018aca:	f7ff fc0f 	bl	80182ec <_Balloc>
 8018ace:	4604      	mov	r4, r0
 8018ad0:	b930      	cbnz	r0, 8018ae0 <__d2b+0x24>
 8018ad2:	4602      	mov	r2, r0
 8018ad4:	4b25      	ldr	r3, [pc, #148]	; (8018b6c <__d2b+0xb0>)
 8018ad6:	4826      	ldr	r0, [pc, #152]	; (8018b70 <__d2b+0xb4>)
 8018ad8:	f240 310a 	movw	r1, #778	; 0x30a
 8018adc:	f000 fa54 	bl	8018f88 <__assert_func>
 8018ae0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018ae4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018ae8:	bb35      	cbnz	r5, 8018b38 <__d2b+0x7c>
 8018aea:	2e00      	cmp	r6, #0
 8018aec:	9301      	str	r3, [sp, #4]
 8018aee:	d028      	beq.n	8018b42 <__d2b+0x86>
 8018af0:	4668      	mov	r0, sp
 8018af2:	9600      	str	r6, [sp, #0]
 8018af4:	f7ff fd10 	bl	8018518 <__lo0bits>
 8018af8:	9900      	ldr	r1, [sp, #0]
 8018afa:	b300      	cbz	r0, 8018b3e <__d2b+0x82>
 8018afc:	9a01      	ldr	r2, [sp, #4]
 8018afe:	f1c0 0320 	rsb	r3, r0, #32
 8018b02:	fa02 f303 	lsl.w	r3, r2, r3
 8018b06:	430b      	orrs	r3, r1
 8018b08:	40c2      	lsrs	r2, r0
 8018b0a:	6163      	str	r3, [r4, #20]
 8018b0c:	9201      	str	r2, [sp, #4]
 8018b0e:	9b01      	ldr	r3, [sp, #4]
 8018b10:	61a3      	str	r3, [r4, #24]
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	bf14      	ite	ne
 8018b16:	2202      	movne	r2, #2
 8018b18:	2201      	moveq	r2, #1
 8018b1a:	6122      	str	r2, [r4, #16]
 8018b1c:	b1d5      	cbz	r5, 8018b54 <__d2b+0x98>
 8018b1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018b22:	4405      	add	r5, r0
 8018b24:	f8c9 5000 	str.w	r5, [r9]
 8018b28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018b2c:	f8c8 0000 	str.w	r0, [r8]
 8018b30:	4620      	mov	r0, r4
 8018b32:	b003      	add	sp, #12
 8018b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018b3c:	e7d5      	b.n	8018aea <__d2b+0x2e>
 8018b3e:	6161      	str	r1, [r4, #20]
 8018b40:	e7e5      	b.n	8018b0e <__d2b+0x52>
 8018b42:	a801      	add	r0, sp, #4
 8018b44:	f7ff fce8 	bl	8018518 <__lo0bits>
 8018b48:	9b01      	ldr	r3, [sp, #4]
 8018b4a:	6163      	str	r3, [r4, #20]
 8018b4c:	2201      	movs	r2, #1
 8018b4e:	6122      	str	r2, [r4, #16]
 8018b50:	3020      	adds	r0, #32
 8018b52:	e7e3      	b.n	8018b1c <__d2b+0x60>
 8018b54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018b58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018b5c:	f8c9 0000 	str.w	r0, [r9]
 8018b60:	6918      	ldr	r0, [r3, #16]
 8018b62:	f7ff fcb9 	bl	80184d8 <__hi0bits>
 8018b66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018b6a:	e7df      	b.n	8018b2c <__d2b+0x70>
 8018b6c:	0801b994 	.word	0x0801b994
 8018b70:	0801ba24 	.word	0x0801ba24

08018b74 <__ratio>:
 8018b74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b78:	4688      	mov	r8, r1
 8018b7a:	4669      	mov	r1, sp
 8018b7c:	4681      	mov	r9, r0
 8018b7e:	f7ff ff4d 	bl	8018a1c <__b2d>
 8018b82:	a901      	add	r1, sp, #4
 8018b84:	4640      	mov	r0, r8
 8018b86:	ec55 4b10 	vmov	r4, r5, d0
 8018b8a:	f7ff ff47 	bl	8018a1c <__b2d>
 8018b8e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018b92:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018b96:	eba3 0c02 	sub.w	ip, r3, r2
 8018b9a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018b9e:	1a9b      	subs	r3, r3, r2
 8018ba0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018ba4:	ec51 0b10 	vmov	r0, r1, d0
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	bfd6      	itet	le
 8018bac:	460a      	movle	r2, r1
 8018bae:	462a      	movgt	r2, r5
 8018bb0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018bb4:	468b      	mov	fp, r1
 8018bb6:	462f      	mov	r7, r5
 8018bb8:	bfd4      	ite	le
 8018bba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8018bbe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8018bc2:	4620      	mov	r0, r4
 8018bc4:	ee10 2a10 	vmov	r2, s0
 8018bc8:	465b      	mov	r3, fp
 8018bca:	4639      	mov	r1, r7
 8018bcc:	f7e7 fe3e 	bl	800084c <__aeabi_ddiv>
 8018bd0:	ec41 0b10 	vmov	d0, r0, r1
 8018bd4:	b003      	add	sp, #12
 8018bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018bda <__copybits>:
 8018bda:	3901      	subs	r1, #1
 8018bdc:	b570      	push	{r4, r5, r6, lr}
 8018bde:	1149      	asrs	r1, r1, #5
 8018be0:	6914      	ldr	r4, [r2, #16]
 8018be2:	3101      	adds	r1, #1
 8018be4:	f102 0314 	add.w	r3, r2, #20
 8018be8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018bec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018bf0:	1f05      	subs	r5, r0, #4
 8018bf2:	42a3      	cmp	r3, r4
 8018bf4:	d30c      	bcc.n	8018c10 <__copybits+0x36>
 8018bf6:	1aa3      	subs	r3, r4, r2
 8018bf8:	3b11      	subs	r3, #17
 8018bfa:	f023 0303 	bic.w	r3, r3, #3
 8018bfe:	3211      	adds	r2, #17
 8018c00:	42a2      	cmp	r2, r4
 8018c02:	bf88      	it	hi
 8018c04:	2300      	movhi	r3, #0
 8018c06:	4418      	add	r0, r3
 8018c08:	2300      	movs	r3, #0
 8018c0a:	4288      	cmp	r0, r1
 8018c0c:	d305      	bcc.n	8018c1a <__copybits+0x40>
 8018c0e:	bd70      	pop	{r4, r5, r6, pc}
 8018c10:	f853 6b04 	ldr.w	r6, [r3], #4
 8018c14:	f845 6f04 	str.w	r6, [r5, #4]!
 8018c18:	e7eb      	b.n	8018bf2 <__copybits+0x18>
 8018c1a:	f840 3b04 	str.w	r3, [r0], #4
 8018c1e:	e7f4      	b.n	8018c0a <__copybits+0x30>

08018c20 <__any_on>:
 8018c20:	f100 0214 	add.w	r2, r0, #20
 8018c24:	6900      	ldr	r0, [r0, #16]
 8018c26:	114b      	asrs	r3, r1, #5
 8018c28:	4298      	cmp	r0, r3
 8018c2a:	b510      	push	{r4, lr}
 8018c2c:	db11      	blt.n	8018c52 <__any_on+0x32>
 8018c2e:	dd0a      	ble.n	8018c46 <__any_on+0x26>
 8018c30:	f011 011f 	ands.w	r1, r1, #31
 8018c34:	d007      	beq.n	8018c46 <__any_on+0x26>
 8018c36:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018c3a:	fa24 f001 	lsr.w	r0, r4, r1
 8018c3e:	fa00 f101 	lsl.w	r1, r0, r1
 8018c42:	428c      	cmp	r4, r1
 8018c44:	d10b      	bne.n	8018c5e <__any_on+0x3e>
 8018c46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018c4a:	4293      	cmp	r3, r2
 8018c4c:	d803      	bhi.n	8018c56 <__any_on+0x36>
 8018c4e:	2000      	movs	r0, #0
 8018c50:	bd10      	pop	{r4, pc}
 8018c52:	4603      	mov	r3, r0
 8018c54:	e7f7      	b.n	8018c46 <__any_on+0x26>
 8018c56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018c5a:	2900      	cmp	r1, #0
 8018c5c:	d0f5      	beq.n	8018c4a <__any_on+0x2a>
 8018c5e:	2001      	movs	r0, #1
 8018c60:	e7f6      	b.n	8018c50 <__any_on+0x30>

08018c62 <_calloc_r>:
 8018c62:	b513      	push	{r0, r1, r4, lr}
 8018c64:	434a      	muls	r2, r1
 8018c66:	4611      	mov	r1, r2
 8018c68:	9201      	str	r2, [sp, #4]
 8018c6a:	f7fc fb41 	bl	80152f0 <_malloc_r>
 8018c6e:	4604      	mov	r4, r0
 8018c70:	b118      	cbz	r0, 8018c7a <_calloc_r+0x18>
 8018c72:	9a01      	ldr	r2, [sp, #4]
 8018c74:	2100      	movs	r1, #0
 8018c76:	f7fc fae3 	bl	8015240 <memset>
 8018c7a:	4620      	mov	r0, r4
 8018c7c:	b002      	add	sp, #8
 8018c7e:	bd10      	pop	{r4, pc}

08018c80 <__ssputs_r>:
 8018c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c84:	688e      	ldr	r6, [r1, #8]
 8018c86:	429e      	cmp	r6, r3
 8018c88:	4682      	mov	sl, r0
 8018c8a:	460c      	mov	r4, r1
 8018c8c:	4690      	mov	r8, r2
 8018c8e:	461f      	mov	r7, r3
 8018c90:	d838      	bhi.n	8018d04 <__ssputs_r+0x84>
 8018c92:	898a      	ldrh	r2, [r1, #12]
 8018c94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018c98:	d032      	beq.n	8018d00 <__ssputs_r+0x80>
 8018c9a:	6825      	ldr	r5, [r4, #0]
 8018c9c:	6909      	ldr	r1, [r1, #16]
 8018c9e:	eba5 0901 	sub.w	r9, r5, r1
 8018ca2:	6965      	ldr	r5, [r4, #20]
 8018ca4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018ca8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018cac:	3301      	adds	r3, #1
 8018cae:	444b      	add	r3, r9
 8018cb0:	106d      	asrs	r5, r5, #1
 8018cb2:	429d      	cmp	r5, r3
 8018cb4:	bf38      	it	cc
 8018cb6:	461d      	movcc	r5, r3
 8018cb8:	0553      	lsls	r3, r2, #21
 8018cba:	d531      	bpl.n	8018d20 <__ssputs_r+0xa0>
 8018cbc:	4629      	mov	r1, r5
 8018cbe:	f7fc fb17 	bl	80152f0 <_malloc_r>
 8018cc2:	4606      	mov	r6, r0
 8018cc4:	b950      	cbnz	r0, 8018cdc <__ssputs_r+0x5c>
 8018cc6:	230c      	movs	r3, #12
 8018cc8:	f8ca 3000 	str.w	r3, [sl]
 8018ccc:	89a3      	ldrh	r3, [r4, #12]
 8018cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018cd2:	81a3      	strh	r3, [r4, #12]
 8018cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8018cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018cdc:	6921      	ldr	r1, [r4, #16]
 8018cde:	464a      	mov	r2, r9
 8018ce0:	f7fc fa86 	bl	80151f0 <memcpy>
 8018ce4:	89a3      	ldrh	r3, [r4, #12]
 8018ce6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018cee:	81a3      	strh	r3, [r4, #12]
 8018cf0:	6126      	str	r6, [r4, #16]
 8018cf2:	6165      	str	r5, [r4, #20]
 8018cf4:	444e      	add	r6, r9
 8018cf6:	eba5 0509 	sub.w	r5, r5, r9
 8018cfa:	6026      	str	r6, [r4, #0]
 8018cfc:	60a5      	str	r5, [r4, #8]
 8018cfe:	463e      	mov	r6, r7
 8018d00:	42be      	cmp	r6, r7
 8018d02:	d900      	bls.n	8018d06 <__ssputs_r+0x86>
 8018d04:	463e      	mov	r6, r7
 8018d06:	4632      	mov	r2, r6
 8018d08:	6820      	ldr	r0, [r4, #0]
 8018d0a:	4641      	mov	r1, r8
 8018d0c:	f7fc fa7e 	bl	801520c <memmove>
 8018d10:	68a3      	ldr	r3, [r4, #8]
 8018d12:	6822      	ldr	r2, [r4, #0]
 8018d14:	1b9b      	subs	r3, r3, r6
 8018d16:	4432      	add	r2, r6
 8018d18:	60a3      	str	r3, [r4, #8]
 8018d1a:	6022      	str	r2, [r4, #0]
 8018d1c:	2000      	movs	r0, #0
 8018d1e:	e7db      	b.n	8018cd8 <__ssputs_r+0x58>
 8018d20:	462a      	mov	r2, r5
 8018d22:	f000 f964 	bl	8018fee <_realloc_r>
 8018d26:	4606      	mov	r6, r0
 8018d28:	2800      	cmp	r0, #0
 8018d2a:	d1e1      	bne.n	8018cf0 <__ssputs_r+0x70>
 8018d2c:	6921      	ldr	r1, [r4, #16]
 8018d2e:	4650      	mov	r0, sl
 8018d30:	f7fc fa8e 	bl	8015250 <_free_r>
 8018d34:	e7c7      	b.n	8018cc6 <__ssputs_r+0x46>
	...

08018d38 <_svfiprintf_r>:
 8018d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d3c:	4698      	mov	r8, r3
 8018d3e:	898b      	ldrh	r3, [r1, #12]
 8018d40:	061b      	lsls	r3, r3, #24
 8018d42:	b09d      	sub	sp, #116	; 0x74
 8018d44:	4607      	mov	r7, r0
 8018d46:	460d      	mov	r5, r1
 8018d48:	4614      	mov	r4, r2
 8018d4a:	d50e      	bpl.n	8018d6a <_svfiprintf_r+0x32>
 8018d4c:	690b      	ldr	r3, [r1, #16]
 8018d4e:	b963      	cbnz	r3, 8018d6a <_svfiprintf_r+0x32>
 8018d50:	2140      	movs	r1, #64	; 0x40
 8018d52:	f7fc facd 	bl	80152f0 <_malloc_r>
 8018d56:	6028      	str	r0, [r5, #0]
 8018d58:	6128      	str	r0, [r5, #16]
 8018d5a:	b920      	cbnz	r0, 8018d66 <_svfiprintf_r+0x2e>
 8018d5c:	230c      	movs	r3, #12
 8018d5e:	603b      	str	r3, [r7, #0]
 8018d60:	f04f 30ff 	mov.w	r0, #4294967295
 8018d64:	e0d1      	b.n	8018f0a <_svfiprintf_r+0x1d2>
 8018d66:	2340      	movs	r3, #64	; 0x40
 8018d68:	616b      	str	r3, [r5, #20]
 8018d6a:	2300      	movs	r3, #0
 8018d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8018d6e:	2320      	movs	r3, #32
 8018d70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018d74:	f8cd 800c 	str.w	r8, [sp, #12]
 8018d78:	2330      	movs	r3, #48	; 0x30
 8018d7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018f24 <_svfiprintf_r+0x1ec>
 8018d7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018d82:	f04f 0901 	mov.w	r9, #1
 8018d86:	4623      	mov	r3, r4
 8018d88:	469a      	mov	sl, r3
 8018d8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018d8e:	b10a      	cbz	r2, 8018d94 <_svfiprintf_r+0x5c>
 8018d90:	2a25      	cmp	r2, #37	; 0x25
 8018d92:	d1f9      	bne.n	8018d88 <_svfiprintf_r+0x50>
 8018d94:	ebba 0b04 	subs.w	fp, sl, r4
 8018d98:	d00b      	beq.n	8018db2 <_svfiprintf_r+0x7a>
 8018d9a:	465b      	mov	r3, fp
 8018d9c:	4622      	mov	r2, r4
 8018d9e:	4629      	mov	r1, r5
 8018da0:	4638      	mov	r0, r7
 8018da2:	f7ff ff6d 	bl	8018c80 <__ssputs_r>
 8018da6:	3001      	adds	r0, #1
 8018da8:	f000 80aa 	beq.w	8018f00 <_svfiprintf_r+0x1c8>
 8018dac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018dae:	445a      	add	r2, fp
 8018db0:	9209      	str	r2, [sp, #36]	; 0x24
 8018db2:	f89a 3000 	ldrb.w	r3, [sl]
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	f000 80a2 	beq.w	8018f00 <_svfiprintf_r+0x1c8>
 8018dbc:	2300      	movs	r3, #0
 8018dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8018dc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018dc6:	f10a 0a01 	add.w	sl, sl, #1
 8018dca:	9304      	str	r3, [sp, #16]
 8018dcc:	9307      	str	r3, [sp, #28]
 8018dce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018dd2:	931a      	str	r3, [sp, #104]	; 0x68
 8018dd4:	4654      	mov	r4, sl
 8018dd6:	2205      	movs	r2, #5
 8018dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ddc:	4851      	ldr	r0, [pc, #324]	; (8018f24 <_svfiprintf_r+0x1ec>)
 8018dde:	f7e7 f9ff 	bl	80001e0 <memchr>
 8018de2:	9a04      	ldr	r2, [sp, #16]
 8018de4:	b9d8      	cbnz	r0, 8018e1e <_svfiprintf_r+0xe6>
 8018de6:	06d0      	lsls	r0, r2, #27
 8018de8:	bf44      	itt	mi
 8018dea:	2320      	movmi	r3, #32
 8018dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018df0:	0711      	lsls	r1, r2, #28
 8018df2:	bf44      	itt	mi
 8018df4:	232b      	movmi	r3, #43	; 0x2b
 8018df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8018dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8018e00:	d015      	beq.n	8018e2e <_svfiprintf_r+0xf6>
 8018e02:	9a07      	ldr	r2, [sp, #28]
 8018e04:	4654      	mov	r4, sl
 8018e06:	2000      	movs	r0, #0
 8018e08:	f04f 0c0a 	mov.w	ip, #10
 8018e0c:	4621      	mov	r1, r4
 8018e0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018e12:	3b30      	subs	r3, #48	; 0x30
 8018e14:	2b09      	cmp	r3, #9
 8018e16:	d94e      	bls.n	8018eb6 <_svfiprintf_r+0x17e>
 8018e18:	b1b0      	cbz	r0, 8018e48 <_svfiprintf_r+0x110>
 8018e1a:	9207      	str	r2, [sp, #28]
 8018e1c:	e014      	b.n	8018e48 <_svfiprintf_r+0x110>
 8018e1e:	eba0 0308 	sub.w	r3, r0, r8
 8018e22:	fa09 f303 	lsl.w	r3, r9, r3
 8018e26:	4313      	orrs	r3, r2
 8018e28:	9304      	str	r3, [sp, #16]
 8018e2a:	46a2      	mov	sl, r4
 8018e2c:	e7d2      	b.n	8018dd4 <_svfiprintf_r+0x9c>
 8018e2e:	9b03      	ldr	r3, [sp, #12]
 8018e30:	1d19      	adds	r1, r3, #4
 8018e32:	681b      	ldr	r3, [r3, #0]
 8018e34:	9103      	str	r1, [sp, #12]
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	bfbb      	ittet	lt
 8018e3a:	425b      	neglt	r3, r3
 8018e3c:	f042 0202 	orrlt.w	r2, r2, #2
 8018e40:	9307      	strge	r3, [sp, #28]
 8018e42:	9307      	strlt	r3, [sp, #28]
 8018e44:	bfb8      	it	lt
 8018e46:	9204      	strlt	r2, [sp, #16]
 8018e48:	7823      	ldrb	r3, [r4, #0]
 8018e4a:	2b2e      	cmp	r3, #46	; 0x2e
 8018e4c:	d10c      	bne.n	8018e68 <_svfiprintf_r+0x130>
 8018e4e:	7863      	ldrb	r3, [r4, #1]
 8018e50:	2b2a      	cmp	r3, #42	; 0x2a
 8018e52:	d135      	bne.n	8018ec0 <_svfiprintf_r+0x188>
 8018e54:	9b03      	ldr	r3, [sp, #12]
 8018e56:	1d1a      	adds	r2, r3, #4
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	9203      	str	r2, [sp, #12]
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	bfb8      	it	lt
 8018e60:	f04f 33ff 	movlt.w	r3, #4294967295
 8018e64:	3402      	adds	r4, #2
 8018e66:	9305      	str	r3, [sp, #20]
 8018e68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018f34 <_svfiprintf_r+0x1fc>
 8018e6c:	7821      	ldrb	r1, [r4, #0]
 8018e6e:	2203      	movs	r2, #3
 8018e70:	4650      	mov	r0, sl
 8018e72:	f7e7 f9b5 	bl	80001e0 <memchr>
 8018e76:	b140      	cbz	r0, 8018e8a <_svfiprintf_r+0x152>
 8018e78:	2340      	movs	r3, #64	; 0x40
 8018e7a:	eba0 000a 	sub.w	r0, r0, sl
 8018e7e:	fa03 f000 	lsl.w	r0, r3, r0
 8018e82:	9b04      	ldr	r3, [sp, #16]
 8018e84:	4303      	orrs	r3, r0
 8018e86:	3401      	adds	r4, #1
 8018e88:	9304      	str	r3, [sp, #16]
 8018e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e8e:	4826      	ldr	r0, [pc, #152]	; (8018f28 <_svfiprintf_r+0x1f0>)
 8018e90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018e94:	2206      	movs	r2, #6
 8018e96:	f7e7 f9a3 	bl	80001e0 <memchr>
 8018e9a:	2800      	cmp	r0, #0
 8018e9c:	d038      	beq.n	8018f10 <_svfiprintf_r+0x1d8>
 8018e9e:	4b23      	ldr	r3, [pc, #140]	; (8018f2c <_svfiprintf_r+0x1f4>)
 8018ea0:	bb1b      	cbnz	r3, 8018eea <_svfiprintf_r+0x1b2>
 8018ea2:	9b03      	ldr	r3, [sp, #12]
 8018ea4:	3307      	adds	r3, #7
 8018ea6:	f023 0307 	bic.w	r3, r3, #7
 8018eaa:	3308      	adds	r3, #8
 8018eac:	9303      	str	r3, [sp, #12]
 8018eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018eb0:	4433      	add	r3, r6
 8018eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8018eb4:	e767      	b.n	8018d86 <_svfiprintf_r+0x4e>
 8018eb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8018eba:	460c      	mov	r4, r1
 8018ebc:	2001      	movs	r0, #1
 8018ebe:	e7a5      	b.n	8018e0c <_svfiprintf_r+0xd4>
 8018ec0:	2300      	movs	r3, #0
 8018ec2:	3401      	adds	r4, #1
 8018ec4:	9305      	str	r3, [sp, #20]
 8018ec6:	4619      	mov	r1, r3
 8018ec8:	f04f 0c0a 	mov.w	ip, #10
 8018ecc:	4620      	mov	r0, r4
 8018ece:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018ed2:	3a30      	subs	r2, #48	; 0x30
 8018ed4:	2a09      	cmp	r2, #9
 8018ed6:	d903      	bls.n	8018ee0 <_svfiprintf_r+0x1a8>
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d0c5      	beq.n	8018e68 <_svfiprintf_r+0x130>
 8018edc:	9105      	str	r1, [sp, #20]
 8018ede:	e7c3      	b.n	8018e68 <_svfiprintf_r+0x130>
 8018ee0:	fb0c 2101 	mla	r1, ip, r1, r2
 8018ee4:	4604      	mov	r4, r0
 8018ee6:	2301      	movs	r3, #1
 8018ee8:	e7f0      	b.n	8018ecc <_svfiprintf_r+0x194>
 8018eea:	ab03      	add	r3, sp, #12
 8018eec:	9300      	str	r3, [sp, #0]
 8018eee:	462a      	mov	r2, r5
 8018ef0:	4b0f      	ldr	r3, [pc, #60]	; (8018f30 <_svfiprintf_r+0x1f8>)
 8018ef2:	a904      	add	r1, sp, #16
 8018ef4:	4638      	mov	r0, r7
 8018ef6:	f7fc faf5 	bl	80154e4 <_printf_float>
 8018efa:	1c42      	adds	r2, r0, #1
 8018efc:	4606      	mov	r6, r0
 8018efe:	d1d6      	bne.n	8018eae <_svfiprintf_r+0x176>
 8018f00:	89ab      	ldrh	r3, [r5, #12]
 8018f02:	065b      	lsls	r3, r3, #25
 8018f04:	f53f af2c 	bmi.w	8018d60 <_svfiprintf_r+0x28>
 8018f08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018f0a:	b01d      	add	sp, #116	; 0x74
 8018f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f10:	ab03      	add	r3, sp, #12
 8018f12:	9300      	str	r3, [sp, #0]
 8018f14:	462a      	mov	r2, r5
 8018f16:	4b06      	ldr	r3, [pc, #24]	; (8018f30 <_svfiprintf_r+0x1f8>)
 8018f18:	a904      	add	r1, sp, #16
 8018f1a:	4638      	mov	r0, r7
 8018f1c:	f7fc fd86 	bl	8015a2c <_printf_i>
 8018f20:	e7eb      	b.n	8018efa <_svfiprintf_r+0x1c2>
 8018f22:	bf00      	nop
 8018f24:	0801bb84 	.word	0x0801bb84
 8018f28:	0801bb8e 	.word	0x0801bb8e
 8018f2c:	080154e5 	.word	0x080154e5
 8018f30:	08018c81 	.word	0x08018c81
 8018f34:	0801bb8a 	.word	0x0801bb8a

08018f38 <nan>:
 8018f38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018f40 <nan+0x8>
 8018f3c:	4770      	bx	lr
 8018f3e:	bf00      	nop
 8018f40:	00000000 	.word	0x00000000
 8018f44:	7ff80000 	.word	0x7ff80000

08018f48 <strncmp>:
 8018f48:	b510      	push	{r4, lr}
 8018f4a:	b16a      	cbz	r2, 8018f68 <strncmp+0x20>
 8018f4c:	3901      	subs	r1, #1
 8018f4e:	1884      	adds	r4, r0, r2
 8018f50:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018f54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018f58:	4293      	cmp	r3, r2
 8018f5a:	d103      	bne.n	8018f64 <strncmp+0x1c>
 8018f5c:	42a0      	cmp	r0, r4
 8018f5e:	d001      	beq.n	8018f64 <strncmp+0x1c>
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d1f5      	bne.n	8018f50 <strncmp+0x8>
 8018f64:	1a98      	subs	r0, r3, r2
 8018f66:	bd10      	pop	{r4, pc}
 8018f68:	4610      	mov	r0, r2
 8018f6a:	e7fc      	b.n	8018f66 <strncmp+0x1e>

08018f6c <__ascii_wctomb>:
 8018f6c:	b149      	cbz	r1, 8018f82 <__ascii_wctomb+0x16>
 8018f6e:	2aff      	cmp	r2, #255	; 0xff
 8018f70:	bf85      	ittet	hi
 8018f72:	238a      	movhi	r3, #138	; 0x8a
 8018f74:	6003      	strhi	r3, [r0, #0]
 8018f76:	700a      	strbls	r2, [r1, #0]
 8018f78:	f04f 30ff 	movhi.w	r0, #4294967295
 8018f7c:	bf98      	it	ls
 8018f7e:	2001      	movls	r0, #1
 8018f80:	4770      	bx	lr
 8018f82:	4608      	mov	r0, r1
 8018f84:	4770      	bx	lr
	...

08018f88 <__assert_func>:
 8018f88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018f8a:	4614      	mov	r4, r2
 8018f8c:	461a      	mov	r2, r3
 8018f8e:	4b09      	ldr	r3, [pc, #36]	; (8018fb4 <__assert_func+0x2c>)
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	4605      	mov	r5, r0
 8018f94:	68d8      	ldr	r0, [r3, #12]
 8018f96:	b14c      	cbz	r4, 8018fac <__assert_func+0x24>
 8018f98:	4b07      	ldr	r3, [pc, #28]	; (8018fb8 <__assert_func+0x30>)
 8018f9a:	9100      	str	r1, [sp, #0]
 8018f9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018fa0:	4906      	ldr	r1, [pc, #24]	; (8018fbc <__assert_func+0x34>)
 8018fa2:	462b      	mov	r3, r5
 8018fa4:	f000 f80e 	bl	8018fc4 <fiprintf>
 8018fa8:	f000 fa60 	bl	801946c <abort>
 8018fac:	4b04      	ldr	r3, [pc, #16]	; (8018fc0 <__assert_func+0x38>)
 8018fae:	461c      	mov	r4, r3
 8018fb0:	e7f3      	b.n	8018f9a <__assert_func+0x12>
 8018fb2:	bf00      	nop
 8018fb4:	20004210 	.word	0x20004210
 8018fb8:	0801bb95 	.word	0x0801bb95
 8018fbc:	0801bba2 	.word	0x0801bba2
 8018fc0:	0801bbd0 	.word	0x0801bbd0

08018fc4 <fiprintf>:
 8018fc4:	b40e      	push	{r1, r2, r3}
 8018fc6:	b503      	push	{r0, r1, lr}
 8018fc8:	4601      	mov	r1, r0
 8018fca:	ab03      	add	r3, sp, #12
 8018fcc:	4805      	ldr	r0, [pc, #20]	; (8018fe4 <fiprintf+0x20>)
 8018fce:	f853 2b04 	ldr.w	r2, [r3], #4
 8018fd2:	6800      	ldr	r0, [r0, #0]
 8018fd4:	9301      	str	r3, [sp, #4]
 8018fd6:	f000 f859 	bl	801908c <_vfiprintf_r>
 8018fda:	b002      	add	sp, #8
 8018fdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8018fe0:	b003      	add	sp, #12
 8018fe2:	4770      	bx	lr
 8018fe4:	20004210 	.word	0x20004210

08018fe8 <__retarget_lock_init_recursive>:
 8018fe8:	4770      	bx	lr

08018fea <__retarget_lock_acquire_recursive>:
 8018fea:	4770      	bx	lr

08018fec <__retarget_lock_release_recursive>:
 8018fec:	4770      	bx	lr

08018fee <_realloc_r>:
 8018fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ff0:	4607      	mov	r7, r0
 8018ff2:	4614      	mov	r4, r2
 8018ff4:	460e      	mov	r6, r1
 8018ff6:	b921      	cbnz	r1, 8019002 <_realloc_r+0x14>
 8018ff8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018ffc:	4611      	mov	r1, r2
 8018ffe:	f7fc b977 	b.w	80152f0 <_malloc_r>
 8019002:	b922      	cbnz	r2, 801900e <_realloc_r+0x20>
 8019004:	f7fc f924 	bl	8015250 <_free_r>
 8019008:	4625      	mov	r5, r4
 801900a:	4628      	mov	r0, r5
 801900c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801900e:	f000 fc51 	bl	80198b4 <_malloc_usable_size_r>
 8019012:	42a0      	cmp	r0, r4
 8019014:	d20f      	bcs.n	8019036 <_realloc_r+0x48>
 8019016:	4621      	mov	r1, r4
 8019018:	4638      	mov	r0, r7
 801901a:	f7fc f969 	bl	80152f0 <_malloc_r>
 801901e:	4605      	mov	r5, r0
 8019020:	2800      	cmp	r0, #0
 8019022:	d0f2      	beq.n	801900a <_realloc_r+0x1c>
 8019024:	4631      	mov	r1, r6
 8019026:	4622      	mov	r2, r4
 8019028:	f7fc f8e2 	bl	80151f0 <memcpy>
 801902c:	4631      	mov	r1, r6
 801902e:	4638      	mov	r0, r7
 8019030:	f7fc f90e 	bl	8015250 <_free_r>
 8019034:	e7e9      	b.n	801900a <_realloc_r+0x1c>
 8019036:	4635      	mov	r5, r6
 8019038:	e7e7      	b.n	801900a <_realloc_r+0x1c>

0801903a <__sfputc_r>:
 801903a:	6893      	ldr	r3, [r2, #8]
 801903c:	3b01      	subs	r3, #1
 801903e:	2b00      	cmp	r3, #0
 8019040:	b410      	push	{r4}
 8019042:	6093      	str	r3, [r2, #8]
 8019044:	da08      	bge.n	8019058 <__sfputc_r+0x1e>
 8019046:	6994      	ldr	r4, [r2, #24]
 8019048:	42a3      	cmp	r3, r4
 801904a:	db01      	blt.n	8019050 <__sfputc_r+0x16>
 801904c:	290a      	cmp	r1, #10
 801904e:	d103      	bne.n	8019058 <__sfputc_r+0x1e>
 8019050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019054:	f000 b94a 	b.w	80192ec <__swbuf_r>
 8019058:	6813      	ldr	r3, [r2, #0]
 801905a:	1c58      	adds	r0, r3, #1
 801905c:	6010      	str	r0, [r2, #0]
 801905e:	7019      	strb	r1, [r3, #0]
 8019060:	4608      	mov	r0, r1
 8019062:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019066:	4770      	bx	lr

08019068 <__sfputs_r>:
 8019068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801906a:	4606      	mov	r6, r0
 801906c:	460f      	mov	r7, r1
 801906e:	4614      	mov	r4, r2
 8019070:	18d5      	adds	r5, r2, r3
 8019072:	42ac      	cmp	r4, r5
 8019074:	d101      	bne.n	801907a <__sfputs_r+0x12>
 8019076:	2000      	movs	r0, #0
 8019078:	e007      	b.n	801908a <__sfputs_r+0x22>
 801907a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801907e:	463a      	mov	r2, r7
 8019080:	4630      	mov	r0, r6
 8019082:	f7ff ffda 	bl	801903a <__sfputc_r>
 8019086:	1c43      	adds	r3, r0, #1
 8019088:	d1f3      	bne.n	8019072 <__sfputs_r+0xa>
 801908a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801908c <_vfiprintf_r>:
 801908c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019090:	460d      	mov	r5, r1
 8019092:	b09d      	sub	sp, #116	; 0x74
 8019094:	4614      	mov	r4, r2
 8019096:	4698      	mov	r8, r3
 8019098:	4606      	mov	r6, r0
 801909a:	b118      	cbz	r0, 80190a4 <_vfiprintf_r+0x18>
 801909c:	6983      	ldr	r3, [r0, #24]
 801909e:	b90b      	cbnz	r3, 80190a4 <_vfiprintf_r+0x18>
 80190a0:	f000 fb06 	bl	80196b0 <__sinit>
 80190a4:	4b89      	ldr	r3, [pc, #548]	; (80192cc <_vfiprintf_r+0x240>)
 80190a6:	429d      	cmp	r5, r3
 80190a8:	d11b      	bne.n	80190e2 <_vfiprintf_r+0x56>
 80190aa:	6875      	ldr	r5, [r6, #4]
 80190ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80190ae:	07d9      	lsls	r1, r3, #31
 80190b0:	d405      	bmi.n	80190be <_vfiprintf_r+0x32>
 80190b2:	89ab      	ldrh	r3, [r5, #12]
 80190b4:	059a      	lsls	r2, r3, #22
 80190b6:	d402      	bmi.n	80190be <_vfiprintf_r+0x32>
 80190b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80190ba:	f7ff ff96 	bl	8018fea <__retarget_lock_acquire_recursive>
 80190be:	89ab      	ldrh	r3, [r5, #12]
 80190c0:	071b      	lsls	r3, r3, #28
 80190c2:	d501      	bpl.n	80190c8 <_vfiprintf_r+0x3c>
 80190c4:	692b      	ldr	r3, [r5, #16]
 80190c6:	b9eb      	cbnz	r3, 8019104 <_vfiprintf_r+0x78>
 80190c8:	4629      	mov	r1, r5
 80190ca:	4630      	mov	r0, r6
 80190cc:	f000 f960 	bl	8019390 <__swsetup_r>
 80190d0:	b1c0      	cbz	r0, 8019104 <_vfiprintf_r+0x78>
 80190d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80190d4:	07dc      	lsls	r4, r3, #31
 80190d6:	d50e      	bpl.n	80190f6 <_vfiprintf_r+0x6a>
 80190d8:	f04f 30ff 	mov.w	r0, #4294967295
 80190dc:	b01d      	add	sp, #116	; 0x74
 80190de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190e2:	4b7b      	ldr	r3, [pc, #492]	; (80192d0 <_vfiprintf_r+0x244>)
 80190e4:	429d      	cmp	r5, r3
 80190e6:	d101      	bne.n	80190ec <_vfiprintf_r+0x60>
 80190e8:	68b5      	ldr	r5, [r6, #8]
 80190ea:	e7df      	b.n	80190ac <_vfiprintf_r+0x20>
 80190ec:	4b79      	ldr	r3, [pc, #484]	; (80192d4 <_vfiprintf_r+0x248>)
 80190ee:	429d      	cmp	r5, r3
 80190f0:	bf08      	it	eq
 80190f2:	68f5      	ldreq	r5, [r6, #12]
 80190f4:	e7da      	b.n	80190ac <_vfiprintf_r+0x20>
 80190f6:	89ab      	ldrh	r3, [r5, #12]
 80190f8:	0598      	lsls	r0, r3, #22
 80190fa:	d4ed      	bmi.n	80190d8 <_vfiprintf_r+0x4c>
 80190fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80190fe:	f7ff ff75 	bl	8018fec <__retarget_lock_release_recursive>
 8019102:	e7e9      	b.n	80190d8 <_vfiprintf_r+0x4c>
 8019104:	2300      	movs	r3, #0
 8019106:	9309      	str	r3, [sp, #36]	; 0x24
 8019108:	2320      	movs	r3, #32
 801910a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801910e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019112:	2330      	movs	r3, #48	; 0x30
 8019114:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80192d8 <_vfiprintf_r+0x24c>
 8019118:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801911c:	f04f 0901 	mov.w	r9, #1
 8019120:	4623      	mov	r3, r4
 8019122:	469a      	mov	sl, r3
 8019124:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019128:	b10a      	cbz	r2, 801912e <_vfiprintf_r+0xa2>
 801912a:	2a25      	cmp	r2, #37	; 0x25
 801912c:	d1f9      	bne.n	8019122 <_vfiprintf_r+0x96>
 801912e:	ebba 0b04 	subs.w	fp, sl, r4
 8019132:	d00b      	beq.n	801914c <_vfiprintf_r+0xc0>
 8019134:	465b      	mov	r3, fp
 8019136:	4622      	mov	r2, r4
 8019138:	4629      	mov	r1, r5
 801913a:	4630      	mov	r0, r6
 801913c:	f7ff ff94 	bl	8019068 <__sfputs_r>
 8019140:	3001      	adds	r0, #1
 8019142:	f000 80aa 	beq.w	801929a <_vfiprintf_r+0x20e>
 8019146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019148:	445a      	add	r2, fp
 801914a:	9209      	str	r2, [sp, #36]	; 0x24
 801914c:	f89a 3000 	ldrb.w	r3, [sl]
 8019150:	2b00      	cmp	r3, #0
 8019152:	f000 80a2 	beq.w	801929a <_vfiprintf_r+0x20e>
 8019156:	2300      	movs	r3, #0
 8019158:	f04f 32ff 	mov.w	r2, #4294967295
 801915c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019160:	f10a 0a01 	add.w	sl, sl, #1
 8019164:	9304      	str	r3, [sp, #16]
 8019166:	9307      	str	r3, [sp, #28]
 8019168:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801916c:	931a      	str	r3, [sp, #104]	; 0x68
 801916e:	4654      	mov	r4, sl
 8019170:	2205      	movs	r2, #5
 8019172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019176:	4858      	ldr	r0, [pc, #352]	; (80192d8 <_vfiprintf_r+0x24c>)
 8019178:	f7e7 f832 	bl	80001e0 <memchr>
 801917c:	9a04      	ldr	r2, [sp, #16]
 801917e:	b9d8      	cbnz	r0, 80191b8 <_vfiprintf_r+0x12c>
 8019180:	06d1      	lsls	r1, r2, #27
 8019182:	bf44      	itt	mi
 8019184:	2320      	movmi	r3, #32
 8019186:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801918a:	0713      	lsls	r3, r2, #28
 801918c:	bf44      	itt	mi
 801918e:	232b      	movmi	r3, #43	; 0x2b
 8019190:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019194:	f89a 3000 	ldrb.w	r3, [sl]
 8019198:	2b2a      	cmp	r3, #42	; 0x2a
 801919a:	d015      	beq.n	80191c8 <_vfiprintf_r+0x13c>
 801919c:	9a07      	ldr	r2, [sp, #28]
 801919e:	4654      	mov	r4, sl
 80191a0:	2000      	movs	r0, #0
 80191a2:	f04f 0c0a 	mov.w	ip, #10
 80191a6:	4621      	mov	r1, r4
 80191a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80191ac:	3b30      	subs	r3, #48	; 0x30
 80191ae:	2b09      	cmp	r3, #9
 80191b0:	d94e      	bls.n	8019250 <_vfiprintf_r+0x1c4>
 80191b2:	b1b0      	cbz	r0, 80191e2 <_vfiprintf_r+0x156>
 80191b4:	9207      	str	r2, [sp, #28]
 80191b6:	e014      	b.n	80191e2 <_vfiprintf_r+0x156>
 80191b8:	eba0 0308 	sub.w	r3, r0, r8
 80191bc:	fa09 f303 	lsl.w	r3, r9, r3
 80191c0:	4313      	orrs	r3, r2
 80191c2:	9304      	str	r3, [sp, #16]
 80191c4:	46a2      	mov	sl, r4
 80191c6:	e7d2      	b.n	801916e <_vfiprintf_r+0xe2>
 80191c8:	9b03      	ldr	r3, [sp, #12]
 80191ca:	1d19      	adds	r1, r3, #4
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	9103      	str	r1, [sp, #12]
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	bfbb      	ittet	lt
 80191d4:	425b      	neglt	r3, r3
 80191d6:	f042 0202 	orrlt.w	r2, r2, #2
 80191da:	9307      	strge	r3, [sp, #28]
 80191dc:	9307      	strlt	r3, [sp, #28]
 80191de:	bfb8      	it	lt
 80191e0:	9204      	strlt	r2, [sp, #16]
 80191e2:	7823      	ldrb	r3, [r4, #0]
 80191e4:	2b2e      	cmp	r3, #46	; 0x2e
 80191e6:	d10c      	bne.n	8019202 <_vfiprintf_r+0x176>
 80191e8:	7863      	ldrb	r3, [r4, #1]
 80191ea:	2b2a      	cmp	r3, #42	; 0x2a
 80191ec:	d135      	bne.n	801925a <_vfiprintf_r+0x1ce>
 80191ee:	9b03      	ldr	r3, [sp, #12]
 80191f0:	1d1a      	adds	r2, r3, #4
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	9203      	str	r2, [sp, #12]
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	bfb8      	it	lt
 80191fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80191fe:	3402      	adds	r4, #2
 8019200:	9305      	str	r3, [sp, #20]
 8019202:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80192e8 <_vfiprintf_r+0x25c>
 8019206:	7821      	ldrb	r1, [r4, #0]
 8019208:	2203      	movs	r2, #3
 801920a:	4650      	mov	r0, sl
 801920c:	f7e6 ffe8 	bl	80001e0 <memchr>
 8019210:	b140      	cbz	r0, 8019224 <_vfiprintf_r+0x198>
 8019212:	2340      	movs	r3, #64	; 0x40
 8019214:	eba0 000a 	sub.w	r0, r0, sl
 8019218:	fa03 f000 	lsl.w	r0, r3, r0
 801921c:	9b04      	ldr	r3, [sp, #16]
 801921e:	4303      	orrs	r3, r0
 8019220:	3401      	adds	r4, #1
 8019222:	9304      	str	r3, [sp, #16]
 8019224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019228:	482c      	ldr	r0, [pc, #176]	; (80192dc <_vfiprintf_r+0x250>)
 801922a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801922e:	2206      	movs	r2, #6
 8019230:	f7e6 ffd6 	bl	80001e0 <memchr>
 8019234:	2800      	cmp	r0, #0
 8019236:	d03f      	beq.n	80192b8 <_vfiprintf_r+0x22c>
 8019238:	4b29      	ldr	r3, [pc, #164]	; (80192e0 <_vfiprintf_r+0x254>)
 801923a:	bb1b      	cbnz	r3, 8019284 <_vfiprintf_r+0x1f8>
 801923c:	9b03      	ldr	r3, [sp, #12]
 801923e:	3307      	adds	r3, #7
 8019240:	f023 0307 	bic.w	r3, r3, #7
 8019244:	3308      	adds	r3, #8
 8019246:	9303      	str	r3, [sp, #12]
 8019248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801924a:	443b      	add	r3, r7
 801924c:	9309      	str	r3, [sp, #36]	; 0x24
 801924e:	e767      	b.n	8019120 <_vfiprintf_r+0x94>
 8019250:	fb0c 3202 	mla	r2, ip, r2, r3
 8019254:	460c      	mov	r4, r1
 8019256:	2001      	movs	r0, #1
 8019258:	e7a5      	b.n	80191a6 <_vfiprintf_r+0x11a>
 801925a:	2300      	movs	r3, #0
 801925c:	3401      	adds	r4, #1
 801925e:	9305      	str	r3, [sp, #20]
 8019260:	4619      	mov	r1, r3
 8019262:	f04f 0c0a 	mov.w	ip, #10
 8019266:	4620      	mov	r0, r4
 8019268:	f810 2b01 	ldrb.w	r2, [r0], #1
 801926c:	3a30      	subs	r2, #48	; 0x30
 801926e:	2a09      	cmp	r2, #9
 8019270:	d903      	bls.n	801927a <_vfiprintf_r+0x1ee>
 8019272:	2b00      	cmp	r3, #0
 8019274:	d0c5      	beq.n	8019202 <_vfiprintf_r+0x176>
 8019276:	9105      	str	r1, [sp, #20]
 8019278:	e7c3      	b.n	8019202 <_vfiprintf_r+0x176>
 801927a:	fb0c 2101 	mla	r1, ip, r1, r2
 801927e:	4604      	mov	r4, r0
 8019280:	2301      	movs	r3, #1
 8019282:	e7f0      	b.n	8019266 <_vfiprintf_r+0x1da>
 8019284:	ab03      	add	r3, sp, #12
 8019286:	9300      	str	r3, [sp, #0]
 8019288:	462a      	mov	r2, r5
 801928a:	4b16      	ldr	r3, [pc, #88]	; (80192e4 <_vfiprintf_r+0x258>)
 801928c:	a904      	add	r1, sp, #16
 801928e:	4630      	mov	r0, r6
 8019290:	f7fc f928 	bl	80154e4 <_printf_float>
 8019294:	4607      	mov	r7, r0
 8019296:	1c78      	adds	r0, r7, #1
 8019298:	d1d6      	bne.n	8019248 <_vfiprintf_r+0x1bc>
 801929a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801929c:	07d9      	lsls	r1, r3, #31
 801929e:	d405      	bmi.n	80192ac <_vfiprintf_r+0x220>
 80192a0:	89ab      	ldrh	r3, [r5, #12]
 80192a2:	059a      	lsls	r2, r3, #22
 80192a4:	d402      	bmi.n	80192ac <_vfiprintf_r+0x220>
 80192a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80192a8:	f7ff fea0 	bl	8018fec <__retarget_lock_release_recursive>
 80192ac:	89ab      	ldrh	r3, [r5, #12]
 80192ae:	065b      	lsls	r3, r3, #25
 80192b0:	f53f af12 	bmi.w	80190d8 <_vfiprintf_r+0x4c>
 80192b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80192b6:	e711      	b.n	80190dc <_vfiprintf_r+0x50>
 80192b8:	ab03      	add	r3, sp, #12
 80192ba:	9300      	str	r3, [sp, #0]
 80192bc:	462a      	mov	r2, r5
 80192be:	4b09      	ldr	r3, [pc, #36]	; (80192e4 <_vfiprintf_r+0x258>)
 80192c0:	a904      	add	r1, sp, #16
 80192c2:	4630      	mov	r0, r6
 80192c4:	f7fc fbb2 	bl	8015a2c <_printf_i>
 80192c8:	e7e4      	b.n	8019294 <_vfiprintf_r+0x208>
 80192ca:	bf00      	nop
 80192cc:	0801bbf4 	.word	0x0801bbf4
 80192d0:	0801bc14 	.word	0x0801bc14
 80192d4:	0801bbd4 	.word	0x0801bbd4
 80192d8:	0801bb84 	.word	0x0801bb84
 80192dc:	0801bb8e 	.word	0x0801bb8e
 80192e0:	080154e5 	.word	0x080154e5
 80192e4:	08019069 	.word	0x08019069
 80192e8:	0801bb8a 	.word	0x0801bb8a

080192ec <__swbuf_r>:
 80192ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192ee:	460e      	mov	r6, r1
 80192f0:	4614      	mov	r4, r2
 80192f2:	4605      	mov	r5, r0
 80192f4:	b118      	cbz	r0, 80192fe <__swbuf_r+0x12>
 80192f6:	6983      	ldr	r3, [r0, #24]
 80192f8:	b90b      	cbnz	r3, 80192fe <__swbuf_r+0x12>
 80192fa:	f000 f9d9 	bl	80196b0 <__sinit>
 80192fe:	4b21      	ldr	r3, [pc, #132]	; (8019384 <__swbuf_r+0x98>)
 8019300:	429c      	cmp	r4, r3
 8019302:	d12b      	bne.n	801935c <__swbuf_r+0x70>
 8019304:	686c      	ldr	r4, [r5, #4]
 8019306:	69a3      	ldr	r3, [r4, #24]
 8019308:	60a3      	str	r3, [r4, #8]
 801930a:	89a3      	ldrh	r3, [r4, #12]
 801930c:	071a      	lsls	r2, r3, #28
 801930e:	d52f      	bpl.n	8019370 <__swbuf_r+0x84>
 8019310:	6923      	ldr	r3, [r4, #16]
 8019312:	b36b      	cbz	r3, 8019370 <__swbuf_r+0x84>
 8019314:	6923      	ldr	r3, [r4, #16]
 8019316:	6820      	ldr	r0, [r4, #0]
 8019318:	1ac0      	subs	r0, r0, r3
 801931a:	6963      	ldr	r3, [r4, #20]
 801931c:	b2f6      	uxtb	r6, r6
 801931e:	4283      	cmp	r3, r0
 8019320:	4637      	mov	r7, r6
 8019322:	dc04      	bgt.n	801932e <__swbuf_r+0x42>
 8019324:	4621      	mov	r1, r4
 8019326:	4628      	mov	r0, r5
 8019328:	f000 f92e 	bl	8019588 <_fflush_r>
 801932c:	bb30      	cbnz	r0, 801937c <__swbuf_r+0x90>
 801932e:	68a3      	ldr	r3, [r4, #8]
 8019330:	3b01      	subs	r3, #1
 8019332:	60a3      	str	r3, [r4, #8]
 8019334:	6823      	ldr	r3, [r4, #0]
 8019336:	1c5a      	adds	r2, r3, #1
 8019338:	6022      	str	r2, [r4, #0]
 801933a:	701e      	strb	r6, [r3, #0]
 801933c:	6963      	ldr	r3, [r4, #20]
 801933e:	3001      	adds	r0, #1
 8019340:	4283      	cmp	r3, r0
 8019342:	d004      	beq.n	801934e <__swbuf_r+0x62>
 8019344:	89a3      	ldrh	r3, [r4, #12]
 8019346:	07db      	lsls	r3, r3, #31
 8019348:	d506      	bpl.n	8019358 <__swbuf_r+0x6c>
 801934a:	2e0a      	cmp	r6, #10
 801934c:	d104      	bne.n	8019358 <__swbuf_r+0x6c>
 801934e:	4621      	mov	r1, r4
 8019350:	4628      	mov	r0, r5
 8019352:	f000 f919 	bl	8019588 <_fflush_r>
 8019356:	b988      	cbnz	r0, 801937c <__swbuf_r+0x90>
 8019358:	4638      	mov	r0, r7
 801935a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801935c:	4b0a      	ldr	r3, [pc, #40]	; (8019388 <__swbuf_r+0x9c>)
 801935e:	429c      	cmp	r4, r3
 8019360:	d101      	bne.n	8019366 <__swbuf_r+0x7a>
 8019362:	68ac      	ldr	r4, [r5, #8]
 8019364:	e7cf      	b.n	8019306 <__swbuf_r+0x1a>
 8019366:	4b09      	ldr	r3, [pc, #36]	; (801938c <__swbuf_r+0xa0>)
 8019368:	429c      	cmp	r4, r3
 801936a:	bf08      	it	eq
 801936c:	68ec      	ldreq	r4, [r5, #12]
 801936e:	e7ca      	b.n	8019306 <__swbuf_r+0x1a>
 8019370:	4621      	mov	r1, r4
 8019372:	4628      	mov	r0, r5
 8019374:	f000 f80c 	bl	8019390 <__swsetup_r>
 8019378:	2800      	cmp	r0, #0
 801937a:	d0cb      	beq.n	8019314 <__swbuf_r+0x28>
 801937c:	f04f 37ff 	mov.w	r7, #4294967295
 8019380:	e7ea      	b.n	8019358 <__swbuf_r+0x6c>
 8019382:	bf00      	nop
 8019384:	0801bbf4 	.word	0x0801bbf4
 8019388:	0801bc14 	.word	0x0801bc14
 801938c:	0801bbd4 	.word	0x0801bbd4

08019390 <__swsetup_r>:
 8019390:	4b32      	ldr	r3, [pc, #200]	; (801945c <__swsetup_r+0xcc>)
 8019392:	b570      	push	{r4, r5, r6, lr}
 8019394:	681d      	ldr	r5, [r3, #0]
 8019396:	4606      	mov	r6, r0
 8019398:	460c      	mov	r4, r1
 801939a:	b125      	cbz	r5, 80193a6 <__swsetup_r+0x16>
 801939c:	69ab      	ldr	r3, [r5, #24]
 801939e:	b913      	cbnz	r3, 80193a6 <__swsetup_r+0x16>
 80193a0:	4628      	mov	r0, r5
 80193a2:	f000 f985 	bl	80196b0 <__sinit>
 80193a6:	4b2e      	ldr	r3, [pc, #184]	; (8019460 <__swsetup_r+0xd0>)
 80193a8:	429c      	cmp	r4, r3
 80193aa:	d10f      	bne.n	80193cc <__swsetup_r+0x3c>
 80193ac:	686c      	ldr	r4, [r5, #4]
 80193ae:	89a3      	ldrh	r3, [r4, #12]
 80193b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80193b4:	0719      	lsls	r1, r3, #28
 80193b6:	d42c      	bmi.n	8019412 <__swsetup_r+0x82>
 80193b8:	06dd      	lsls	r5, r3, #27
 80193ba:	d411      	bmi.n	80193e0 <__swsetup_r+0x50>
 80193bc:	2309      	movs	r3, #9
 80193be:	6033      	str	r3, [r6, #0]
 80193c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80193c4:	81a3      	strh	r3, [r4, #12]
 80193c6:	f04f 30ff 	mov.w	r0, #4294967295
 80193ca:	e03e      	b.n	801944a <__swsetup_r+0xba>
 80193cc:	4b25      	ldr	r3, [pc, #148]	; (8019464 <__swsetup_r+0xd4>)
 80193ce:	429c      	cmp	r4, r3
 80193d0:	d101      	bne.n	80193d6 <__swsetup_r+0x46>
 80193d2:	68ac      	ldr	r4, [r5, #8]
 80193d4:	e7eb      	b.n	80193ae <__swsetup_r+0x1e>
 80193d6:	4b24      	ldr	r3, [pc, #144]	; (8019468 <__swsetup_r+0xd8>)
 80193d8:	429c      	cmp	r4, r3
 80193da:	bf08      	it	eq
 80193dc:	68ec      	ldreq	r4, [r5, #12]
 80193de:	e7e6      	b.n	80193ae <__swsetup_r+0x1e>
 80193e0:	0758      	lsls	r0, r3, #29
 80193e2:	d512      	bpl.n	801940a <__swsetup_r+0x7a>
 80193e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80193e6:	b141      	cbz	r1, 80193fa <__swsetup_r+0x6a>
 80193e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80193ec:	4299      	cmp	r1, r3
 80193ee:	d002      	beq.n	80193f6 <__swsetup_r+0x66>
 80193f0:	4630      	mov	r0, r6
 80193f2:	f7fb ff2d 	bl	8015250 <_free_r>
 80193f6:	2300      	movs	r3, #0
 80193f8:	6363      	str	r3, [r4, #52]	; 0x34
 80193fa:	89a3      	ldrh	r3, [r4, #12]
 80193fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019400:	81a3      	strh	r3, [r4, #12]
 8019402:	2300      	movs	r3, #0
 8019404:	6063      	str	r3, [r4, #4]
 8019406:	6923      	ldr	r3, [r4, #16]
 8019408:	6023      	str	r3, [r4, #0]
 801940a:	89a3      	ldrh	r3, [r4, #12]
 801940c:	f043 0308 	orr.w	r3, r3, #8
 8019410:	81a3      	strh	r3, [r4, #12]
 8019412:	6923      	ldr	r3, [r4, #16]
 8019414:	b94b      	cbnz	r3, 801942a <__swsetup_r+0x9a>
 8019416:	89a3      	ldrh	r3, [r4, #12]
 8019418:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801941c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019420:	d003      	beq.n	801942a <__swsetup_r+0x9a>
 8019422:	4621      	mov	r1, r4
 8019424:	4630      	mov	r0, r6
 8019426:	f000 fa05 	bl	8019834 <__smakebuf_r>
 801942a:	89a0      	ldrh	r0, [r4, #12]
 801942c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019430:	f010 0301 	ands.w	r3, r0, #1
 8019434:	d00a      	beq.n	801944c <__swsetup_r+0xbc>
 8019436:	2300      	movs	r3, #0
 8019438:	60a3      	str	r3, [r4, #8]
 801943a:	6963      	ldr	r3, [r4, #20]
 801943c:	425b      	negs	r3, r3
 801943e:	61a3      	str	r3, [r4, #24]
 8019440:	6923      	ldr	r3, [r4, #16]
 8019442:	b943      	cbnz	r3, 8019456 <__swsetup_r+0xc6>
 8019444:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019448:	d1ba      	bne.n	80193c0 <__swsetup_r+0x30>
 801944a:	bd70      	pop	{r4, r5, r6, pc}
 801944c:	0781      	lsls	r1, r0, #30
 801944e:	bf58      	it	pl
 8019450:	6963      	ldrpl	r3, [r4, #20]
 8019452:	60a3      	str	r3, [r4, #8]
 8019454:	e7f4      	b.n	8019440 <__swsetup_r+0xb0>
 8019456:	2000      	movs	r0, #0
 8019458:	e7f7      	b.n	801944a <__swsetup_r+0xba>
 801945a:	bf00      	nop
 801945c:	20004210 	.word	0x20004210
 8019460:	0801bbf4 	.word	0x0801bbf4
 8019464:	0801bc14 	.word	0x0801bc14
 8019468:	0801bbd4 	.word	0x0801bbd4

0801946c <abort>:
 801946c:	b508      	push	{r3, lr}
 801946e:	2006      	movs	r0, #6
 8019470:	f000 fa50 	bl	8019914 <raise>
 8019474:	2001      	movs	r0, #1
 8019476:	f7f0 ffc3 	bl	800a400 <_exit>
	...

0801947c <__sflush_r>:
 801947c:	898a      	ldrh	r2, [r1, #12]
 801947e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019482:	4605      	mov	r5, r0
 8019484:	0710      	lsls	r0, r2, #28
 8019486:	460c      	mov	r4, r1
 8019488:	d458      	bmi.n	801953c <__sflush_r+0xc0>
 801948a:	684b      	ldr	r3, [r1, #4]
 801948c:	2b00      	cmp	r3, #0
 801948e:	dc05      	bgt.n	801949c <__sflush_r+0x20>
 8019490:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019492:	2b00      	cmp	r3, #0
 8019494:	dc02      	bgt.n	801949c <__sflush_r+0x20>
 8019496:	2000      	movs	r0, #0
 8019498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801949c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801949e:	2e00      	cmp	r6, #0
 80194a0:	d0f9      	beq.n	8019496 <__sflush_r+0x1a>
 80194a2:	2300      	movs	r3, #0
 80194a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80194a8:	682f      	ldr	r7, [r5, #0]
 80194aa:	602b      	str	r3, [r5, #0]
 80194ac:	d032      	beq.n	8019514 <__sflush_r+0x98>
 80194ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80194b0:	89a3      	ldrh	r3, [r4, #12]
 80194b2:	075a      	lsls	r2, r3, #29
 80194b4:	d505      	bpl.n	80194c2 <__sflush_r+0x46>
 80194b6:	6863      	ldr	r3, [r4, #4]
 80194b8:	1ac0      	subs	r0, r0, r3
 80194ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80194bc:	b10b      	cbz	r3, 80194c2 <__sflush_r+0x46>
 80194be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80194c0:	1ac0      	subs	r0, r0, r3
 80194c2:	2300      	movs	r3, #0
 80194c4:	4602      	mov	r2, r0
 80194c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80194c8:	6a21      	ldr	r1, [r4, #32]
 80194ca:	4628      	mov	r0, r5
 80194cc:	47b0      	blx	r6
 80194ce:	1c43      	adds	r3, r0, #1
 80194d0:	89a3      	ldrh	r3, [r4, #12]
 80194d2:	d106      	bne.n	80194e2 <__sflush_r+0x66>
 80194d4:	6829      	ldr	r1, [r5, #0]
 80194d6:	291d      	cmp	r1, #29
 80194d8:	d82c      	bhi.n	8019534 <__sflush_r+0xb8>
 80194da:	4a2a      	ldr	r2, [pc, #168]	; (8019584 <__sflush_r+0x108>)
 80194dc:	40ca      	lsrs	r2, r1
 80194de:	07d6      	lsls	r6, r2, #31
 80194e0:	d528      	bpl.n	8019534 <__sflush_r+0xb8>
 80194e2:	2200      	movs	r2, #0
 80194e4:	6062      	str	r2, [r4, #4]
 80194e6:	04d9      	lsls	r1, r3, #19
 80194e8:	6922      	ldr	r2, [r4, #16]
 80194ea:	6022      	str	r2, [r4, #0]
 80194ec:	d504      	bpl.n	80194f8 <__sflush_r+0x7c>
 80194ee:	1c42      	adds	r2, r0, #1
 80194f0:	d101      	bne.n	80194f6 <__sflush_r+0x7a>
 80194f2:	682b      	ldr	r3, [r5, #0]
 80194f4:	b903      	cbnz	r3, 80194f8 <__sflush_r+0x7c>
 80194f6:	6560      	str	r0, [r4, #84]	; 0x54
 80194f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80194fa:	602f      	str	r7, [r5, #0]
 80194fc:	2900      	cmp	r1, #0
 80194fe:	d0ca      	beq.n	8019496 <__sflush_r+0x1a>
 8019500:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019504:	4299      	cmp	r1, r3
 8019506:	d002      	beq.n	801950e <__sflush_r+0x92>
 8019508:	4628      	mov	r0, r5
 801950a:	f7fb fea1 	bl	8015250 <_free_r>
 801950e:	2000      	movs	r0, #0
 8019510:	6360      	str	r0, [r4, #52]	; 0x34
 8019512:	e7c1      	b.n	8019498 <__sflush_r+0x1c>
 8019514:	6a21      	ldr	r1, [r4, #32]
 8019516:	2301      	movs	r3, #1
 8019518:	4628      	mov	r0, r5
 801951a:	47b0      	blx	r6
 801951c:	1c41      	adds	r1, r0, #1
 801951e:	d1c7      	bne.n	80194b0 <__sflush_r+0x34>
 8019520:	682b      	ldr	r3, [r5, #0]
 8019522:	2b00      	cmp	r3, #0
 8019524:	d0c4      	beq.n	80194b0 <__sflush_r+0x34>
 8019526:	2b1d      	cmp	r3, #29
 8019528:	d001      	beq.n	801952e <__sflush_r+0xb2>
 801952a:	2b16      	cmp	r3, #22
 801952c:	d101      	bne.n	8019532 <__sflush_r+0xb6>
 801952e:	602f      	str	r7, [r5, #0]
 8019530:	e7b1      	b.n	8019496 <__sflush_r+0x1a>
 8019532:	89a3      	ldrh	r3, [r4, #12]
 8019534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019538:	81a3      	strh	r3, [r4, #12]
 801953a:	e7ad      	b.n	8019498 <__sflush_r+0x1c>
 801953c:	690f      	ldr	r7, [r1, #16]
 801953e:	2f00      	cmp	r7, #0
 8019540:	d0a9      	beq.n	8019496 <__sflush_r+0x1a>
 8019542:	0793      	lsls	r3, r2, #30
 8019544:	680e      	ldr	r6, [r1, #0]
 8019546:	bf08      	it	eq
 8019548:	694b      	ldreq	r3, [r1, #20]
 801954a:	600f      	str	r7, [r1, #0]
 801954c:	bf18      	it	ne
 801954e:	2300      	movne	r3, #0
 8019550:	eba6 0807 	sub.w	r8, r6, r7
 8019554:	608b      	str	r3, [r1, #8]
 8019556:	f1b8 0f00 	cmp.w	r8, #0
 801955a:	dd9c      	ble.n	8019496 <__sflush_r+0x1a>
 801955c:	6a21      	ldr	r1, [r4, #32]
 801955e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019560:	4643      	mov	r3, r8
 8019562:	463a      	mov	r2, r7
 8019564:	4628      	mov	r0, r5
 8019566:	47b0      	blx	r6
 8019568:	2800      	cmp	r0, #0
 801956a:	dc06      	bgt.n	801957a <__sflush_r+0xfe>
 801956c:	89a3      	ldrh	r3, [r4, #12]
 801956e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019572:	81a3      	strh	r3, [r4, #12]
 8019574:	f04f 30ff 	mov.w	r0, #4294967295
 8019578:	e78e      	b.n	8019498 <__sflush_r+0x1c>
 801957a:	4407      	add	r7, r0
 801957c:	eba8 0800 	sub.w	r8, r8, r0
 8019580:	e7e9      	b.n	8019556 <__sflush_r+0xda>
 8019582:	bf00      	nop
 8019584:	20400001 	.word	0x20400001

08019588 <_fflush_r>:
 8019588:	b538      	push	{r3, r4, r5, lr}
 801958a:	690b      	ldr	r3, [r1, #16]
 801958c:	4605      	mov	r5, r0
 801958e:	460c      	mov	r4, r1
 8019590:	b913      	cbnz	r3, 8019598 <_fflush_r+0x10>
 8019592:	2500      	movs	r5, #0
 8019594:	4628      	mov	r0, r5
 8019596:	bd38      	pop	{r3, r4, r5, pc}
 8019598:	b118      	cbz	r0, 80195a2 <_fflush_r+0x1a>
 801959a:	6983      	ldr	r3, [r0, #24]
 801959c:	b90b      	cbnz	r3, 80195a2 <_fflush_r+0x1a>
 801959e:	f000 f887 	bl	80196b0 <__sinit>
 80195a2:	4b14      	ldr	r3, [pc, #80]	; (80195f4 <_fflush_r+0x6c>)
 80195a4:	429c      	cmp	r4, r3
 80195a6:	d11b      	bne.n	80195e0 <_fflush_r+0x58>
 80195a8:	686c      	ldr	r4, [r5, #4]
 80195aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d0ef      	beq.n	8019592 <_fflush_r+0xa>
 80195b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80195b4:	07d0      	lsls	r0, r2, #31
 80195b6:	d404      	bmi.n	80195c2 <_fflush_r+0x3a>
 80195b8:	0599      	lsls	r1, r3, #22
 80195ba:	d402      	bmi.n	80195c2 <_fflush_r+0x3a>
 80195bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80195be:	f7ff fd14 	bl	8018fea <__retarget_lock_acquire_recursive>
 80195c2:	4628      	mov	r0, r5
 80195c4:	4621      	mov	r1, r4
 80195c6:	f7ff ff59 	bl	801947c <__sflush_r>
 80195ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80195cc:	07da      	lsls	r2, r3, #31
 80195ce:	4605      	mov	r5, r0
 80195d0:	d4e0      	bmi.n	8019594 <_fflush_r+0xc>
 80195d2:	89a3      	ldrh	r3, [r4, #12]
 80195d4:	059b      	lsls	r3, r3, #22
 80195d6:	d4dd      	bmi.n	8019594 <_fflush_r+0xc>
 80195d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80195da:	f7ff fd07 	bl	8018fec <__retarget_lock_release_recursive>
 80195de:	e7d9      	b.n	8019594 <_fflush_r+0xc>
 80195e0:	4b05      	ldr	r3, [pc, #20]	; (80195f8 <_fflush_r+0x70>)
 80195e2:	429c      	cmp	r4, r3
 80195e4:	d101      	bne.n	80195ea <_fflush_r+0x62>
 80195e6:	68ac      	ldr	r4, [r5, #8]
 80195e8:	e7df      	b.n	80195aa <_fflush_r+0x22>
 80195ea:	4b04      	ldr	r3, [pc, #16]	; (80195fc <_fflush_r+0x74>)
 80195ec:	429c      	cmp	r4, r3
 80195ee:	bf08      	it	eq
 80195f0:	68ec      	ldreq	r4, [r5, #12]
 80195f2:	e7da      	b.n	80195aa <_fflush_r+0x22>
 80195f4:	0801bbf4 	.word	0x0801bbf4
 80195f8:	0801bc14 	.word	0x0801bc14
 80195fc:	0801bbd4 	.word	0x0801bbd4

08019600 <std>:
 8019600:	2300      	movs	r3, #0
 8019602:	b510      	push	{r4, lr}
 8019604:	4604      	mov	r4, r0
 8019606:	e9c0 3300 	strd	r3, r3, [r0]
 801960a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801960e:	6083      	str	r3, [r0, #8]
 8019610:	8181      	strh	r1, [r0, #12]
 8019612:	6643      	str	r3, [r0, #100]	; 0x64
 8019614:	81c2      	strh	r2, [r0, #14]
 8019616:	6183      	str	r3, [r0, #24]
 8019618:	4619      	mov	r1, r3
 801961a:	2208      	movs	r2, #8
 801961c:	305c      	adds	r0, #92	; 0x5c
 801961e:	f7fb fe0f 	bl	8015240 <memset>
 8019622:	4b05      	ldr	r3, [pc, #20]	; (8019638 <std+0x38>)
 8019624:	6263      	str	r3, [r4, #36]	; 0x24
 8019626:	4b05      	ldr	r3, [pc, #20]	; (801963c <std+0x3c>)
 8019628:	62a3      	str	r3, [r4, #40]	; 0x28
 801962a:	4b05      	ldr	r3, [pc, #20]	; (8019640 <std+0x40>)
 801962c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801962e:	4b05      	ldr	r3, [pc, #20]	; (8019644 <std+0x44>)
 8019630:	6224      	str	r4, [r4, #32]
 8019632:	6323      	str	r3, [r4, #48]	; 0x30
 8019634:	bd10      	pop	{r4, pc}
 8019636:	bf00      	nop
 8019638:	0801994d 	.word	0x0801994d
 801963c:	0801996f 	.word	0x0801996f
 8019640:	080199a7 	.word	0x080199a7
 8019644:	080199cb 	.word	0x080199cb

08019648 <_cleanup_r>:
 8019648:	4901      	ldr	r1, [pc, #4]	; (8019650 <_cleanup_r+0x8>)
 801964a:	f000 b8af 	b.w	80197ac <_fwalk_reent>
 801964e:	bf00      	nop
 8019650:	08019589 	.word	0x08019589

08019654 <__sfmoreglue>:
 8019654:	b570      	push	{r4, r5, r6, lr}
 8019656:	1e4a      	subs	r2, r1, #1
 8019658:	2568      	movs	r5, #104	; 0x68
 801965a:	4355      	muls	r5, r2
 801965c:	460e      	mov	r6, r1
 801965e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019662:	f7fb fe45 	bl	80152f0 <_malloc_r>
 8019666:	4604      	mov	r4, r0
 8019668:	b140      	cbz	r0, 801967c <__sfmoreglue+0x28>
 801966a:	2100      	movs	r1, #0
 801966c:	e9c0 1600 	strd	r1, r6, [r0]
 8019670:	300c      	adds	r0, #12
 8019672:	60a0      	str	r0, [r4, #8]
 8019674:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019678:	f7fb fde2 	bl	8015240 <memset>
 801967c:	4620      	mov	r0, r4
 801967e:	bd70      	pop	{r4, r5, r6, pc}

08019680 <__sfp_lock_acquire>:
 8019680:	4801      	ldr	r0, [pc, #4]	; (8019688 <__sfp_lock_acquire+0x8>)
 8019682:	f7ff bcb2 	b.w	8018fea <__retarget_lock_acquire_recursive>
 8019686:	bf00      	nop
 8019688:	20011ac8 	.word	0x20011ac8

0801968c <__sfp_lock_release>:
 801968c:	4801      	ldr	r0, [pc, #4]	; (8019694 <__sfp_lock_release+0x8>)
 801968e:	f7ff bcad 	b.w	8018fec <__retarget_lock_release_recursive>
 8019692:	bf00      	nop
 8019694:	20011ac8 	.word	0x20011ac8

08019698 <__sinit_lock_acquire>:
 8019698:	4801      	ldr	r0, [pc, #4]	; (80196a0 <__sinit_lock_acquire+0x8>)
 801969a:	f7ff bca6 	b.w	8018fea <__retarget_lock_acquire_recursive>
 801969e:	bf00      	nop
 80196a0:	20011ac3 	.word	0x20011ac3

080196a4 <__sinit_lock_release>:
 80196a4:	4801      	ldr	r0, [pc, #4]	; (80196ac <__sinit_lock_release+0x8>)
 80196a6:	f7ff bca1 	b.w	8018fec <__retarget_lock_release_recursive>
 80196aa:	bf00      	nop
 80196ac:	20011ac3 	.word	0x20011ac3

080196b0 <__sinit>:
 80196b0:	b510      	push	{r4, lr}
 80196b2:	4604      	mov	r4, r0
 80196b4:	f7ff fff0 	bl	8019698 <__sinit_lock_acquire>
 80196b8:	69a3      	ldr	r3, [r4, #24]
 80196ba:	b11b      	cbz	r3, 80196c4 <__sinit+0x14>
 80196bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80196c0:	f7ff bff0 	b.w	80196a4 <__sinit_lock_release>
 80196c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80196c8:	6523      	str	r3, [r4, #80]	; 0x50
 80196ca:	4b13      	ldr	r3, [pc, #76]	; (8019718 <__sinit+0x68>)
 80196cc:	4a13      	ldr	r2, [pc, #76]	; (801971c <__sinit+0x6c>)
 80196ce:	681b      	ldr	r3, [r3, #0]
 80196d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80196d2:	42a3      	cmp	r3, r4
 80196d4:	bf04      	itt	eq
 80196d6:	2301      	moveq	r3, #1
 80196d8:	61a3      	streq	r3, [r4, #24]
 80196da:	4620      	mov	r0, r4
 80196dc:	f000 f820 	bl	8019720 <__sfp>
 80196e0:	6060      	str	r0, [r4, #4]
 80196e2:	4620      	mov	r0, r4
 80196e4:	f000 f81c 	bl	8019720 <__sfp>
 80196e8:	60a0      	str	r0, [r4, #8]
 80196ea:	4620      	mov	r0, r4
 80196ec:	f000 f818 	bl	8019720 <__sfp>
 80196f0:	2200      	movs	r2, #0
 80196f2:	60e0      	str	r0, [r4, #12]
 80196f4:	2104      	movs	r1, #4
 80196f6:	6860      	ldr	r0, [r4, #4]
 80196f8:	f7ff ff82 	bl	8019600 <std>
 80196fc:	68a0      	ldr	r0, [r4, #8]
 80196fe:	2201      	movs	r2, #1
 8019700:	2109      	movs	r1, #9
 8019702:	f7ff ff7d 	bl	8019600 <std>
 8019706:	68e0      	ldr	r0, [r4, #12]
 8019708:	2202      	movs	r2, #2
 801970a:	2112      	movs	r1, #18
 801970c:	f7ff ff78 	bl	8019600 <std>
 8019710:	2301      	movs	r3, #1
 8019712:	61a3      	str	r3, [r4, #24]
 8019714:	e7d2      	b.n	80196bc <__sinit+0xc>
 8019716:	bf00      	nop
 8019718:	0801b780 	.word	0x0801b780
 801971c:	08019649 	.word	0x08019649

08019720 <__sfp>:
 8019720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019722:	4607      	mov	r7, r0
 8019724:	f7ff ffac 	bl	8019680 <__sfp_lock_acquire>
 8019728:	4b1e      	ldr	r3, [pc, #120]	; (80197a4 <__sfp+0x84>)
 801972a:	681e      	ldr	r6, [r3, #0]
 801972c:	69b3      	ldr	r3, [r6, #24]
 801972e:	b913      	cbnz	r3, 8019736 <__sfp+0x16>
 8019730:	4630      	mov	r0, r6
 8019732:	f7ff ffbd 	bl	80196b0 <__sinit>
 8019736:	3648      	adds	r6, #72	; 0x48
 8019738:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801973c:	3b01      	subs	r3, #1
 801973e:	d503      	bpl.n	8019748 <__sfp+0x28>
 8019740:	6833      	ldr	r3, [r6, #0]
 8019742:	b30b      	cbz	r3, 8019788 <__sfp+0x68>
 8019744:	6836      	ldr	r6, [r6, #0]
 8019746:	e7f7      	b.n	8019738 <__sfp+0x18>
 8019748:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801974c:	b9d5      	cbnz	r5, 8019784 <__sfp+0x64>
 801974e:	4b16      	ldr	r3, [pc, #88]	; (80197a8 <__sfp+0x88>)
 8019750:	60e3      	str	r3, [r4, #12]
 8019752:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019756:	6665      	str	r5, [r4, #100]	; 0x64
 8019758:	f7ff fc46 	bl	8018fe8 <__retarget_lock_init_recursive>
 801975c:	f7ff ff96 	bl	801968c <__sfp_lock_release>
 8019760:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019764:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019768:	6025      	str	r5, [r4, #0]
 801976a:	61a5      	str	r5, [r4, #24]
 801976c:	2208      	movs	r2, #8
 801976e:	4629      	mov	r1, r5
 8019770:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019774:	f7fb fd64 	bl	8015240 <memset>
 8019778:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801977c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019780:	4620      	mov	r0, r4
 8019782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019784:	3468      	adds	r4, #104	; 0x68
 8019786:	e7d9      	b.n	801973c <__sfp+0x1c>
 8019788:	2104      	movs	r1, #4
 801978a:	4638      	mov	r0, r7
 801978c:	f7ff ff62 	bl	8019654 <__sfmoreglue>
 8019790:	4604      	mov	r4, r0
 8019792:	6030      	str	r0, [r6, #0]
 8019794:	2800      	cmp	r0, #0
 8019796:	d1d5      	bne.n	8019744 <__sfp+0x24>
 8019798:	f7ff ff78 	bl	801968c <__sfp_lock_release>
 801979c:	230c      	movs	r3, #12
 801979e:	603b      	str	r3, [r7, #0]
 80197a0:	e7ee      	b.n	8019780 <__sfp+0x60>
 80197a2:	bf00      	nop
 80197a4:	0801b780 	.word	0x0801b780
 80197a8:	ffff0001 	.word	0xffff0001

080197ac <_fwalk_reent>:
 80197ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80197b0:	4606      	mov	r6, r0
 80197b2:	4688      	mov	r8, r1
 80197b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80197b8:	2700      	movs	r7, #0
 80197ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80197be:	f1b9 0901 	subs.w	r9, r9, #1
 80197c2:	d505      	bpl.n	80197d0 <_fwalk_reent+0x24>
 80197c4:	6824      	ldr	r4, [r4, #0]
 80197c6:	2c00      	cmp	r4, #0
 80197c8:	d1f7      	bne.n	80197ba <_fwalk_reent+0xe>
 80197ca:	4638      	mov	r0, r7
 80197cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80197d0:	89ab      	ldrh	r3, [r5, #12]
 80197d2:	2b01      	cmp	r3, #1
 80197d4:	d907      	bls.n	80197e6 <_fwalk_reent+0x3a>
 80197d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80197da:	3301      	adds	r3, #1
 80197dc:	d003      	beq.n	80197e6 <_fwalk_reent+0x3a>
 80197de:	4629      	mov	r1, r5
 80197e0:	4630      	mov	r0, r6
 80197e2:	47c0      	blx	r8
 80197e4:	4307      	orrs	r7, r0
 80197e6:	3568      	adds	r5, #104	; 0x68
 80197e8:	e7e9      	b.n	80197be <_fwalk_reent+0x12>

080197ea <__swhatbuf_r>:
 80197ea:	b570      	push	{r4, r5, r6, lr}
 80197ec:	460e      	mov	r6, r1
 80197ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80197f2:	2900      	cmp	r1, #0
 80197f4:	b096      	sub	sp, #88	; 0x58
 80197f6:	4614      	mov	r4, r2
 80197f8:	461d      	mov	r5, r3
 80197fa:	da07      	bge.n	801980c <__swhatbuf_r+0x22>
 80197fc:	2300      	movs	r3, #0
 80197fe:	602b      	str	r3, [r5, #0]
 8019800:	89b3      	ldrh	r3, [r6, #12]
 8019802:	061a      	lsls	r2, r3, #24
 8019804:	d410      	bmi.n	8019828 <__swhatbuf_r+0x3e>
 8019806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801980a:	e00e      	b.n	801982a <__swhatbuf_r+0x40>
 801980c:	466a      	mov	r2, sp
 801980e:	f000 f903 	bl	8019a18 <_fstat_r>
 8019812:	2800      	cmp	r0, #0
 8019814:	dbf2      	blt.n	80197fc <__swhatbuf_r+0x12>
 8019816:	9a01      	ldr	r2, [sp, #4]
 8019818:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801981c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019820:	425a      	negs	r2, r3
 8019822:	415a      	adcs	r2, r3
 8019824:	602a      	str	r2, [r5, #0]
 8019826:	e7ee      	b.n	8019806 <__swhatbuf_r+0x1c>
 8019828:	2340      	movs	r3, #64	; 0x40
 801982a:	2000      	movs	r0, #0
 801982c:	6023      	str	r3, [r4, #0]
 801982e:	b016      	add	sp, #88	; 0x58
 8019830:	bd70      	pop	{r4, r5, r6, pc}
	...

08019834 <__smakebuf_r>:
 8019834:	898b      	ldrh	r3, [r1, #12]
 8019836:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019838:	079d      	lsls	r5, r3, #30
 801983a:	4606      	mov	r6, r0
 801983c:	460c      	mov	r4, r1
 801983e:	d507      	bpl.n	8019850 <__smakebuf_r+0x1c>
 8019840:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019844:	6023      	str	r3, [r4, #0]
 8019846:	6123      	str	r3, [r4, #16]
 8019848:	2301      	movs	r3, #1
 801984a:	6163      	str	r3, [r4, #20]
 801984c:	b002      	add	sp, #8
 801984e:	bd70      	pop	{r4, r5, r6, pc}
 8019850:	ab01      	add	r3, sp, #4
 8019852:	466a      	mov	r2, sp
 8019854:	f7ff ffc9 	bl	80197ea <__swhatbuf_r>
 8019858:	9900      	ldr	r1, [sp, #0]
 801985a:	4605      	mov	r5, r0
 801985c:	4630      	mov	r0, r6
 801985e:	f7fb fd47 	bl	80152f0 <_malloc_r>
 8019862:	b948      	cbnz	r0, 8019878 <__smakebuf_r+0x44>
 8019864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019868:	059a      	lsls	r2, r3, #22
 801986a:	d4ef      	bmi.n	801984c <__smakebuf_r+0x18>
 801986c:	f023 0303 	bic.w	r3, r3, #3
 8019870:	f043 0302 	orr.w	r3, r3, #2
 8019874:	81a3      	strh	r3, [r4, #12]
 8019876:	e7e3      	b.n	8019840 <__smakebuf_r+0xc>
 8019878:	4b0d      	ldr	r3, [pc, #52]	; (80198b0 <__smakebuf_r+0x7c>)
 801987a:	62b3      	str	r3, [r6, #40]	; 0x28
 801987c:	89a3      	ldrh	r3, [r4, #12]
 801987e:	6020      	str	r0, [r4, #0]
 8019880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019884:	81a3      	strh	r3, [r4, #12]
 8019886:	9b00      	ldr	r3, [sp, #0]
 8019888:	6163      	str	r3, [r4, #20]
 801988a:	9b01      	ldr	r3, [sp, #4]
 801988c:	6120      	str	r0, [r4, #16]
 801988e:	b15b      	cbz	r3, 80198a8 <__smakebuf_r+0x74>
 8019890:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019894:	4630      	mov	r0, r6
 8019896:	f000 f8d1 	bl	8019a3c <_isatty_r>
 801989a:	b128      	cbz	r0, 80198a8 <__smakebuf_r+0x74>
 801989c:	89a3      	ldrh	r3, [r4, #12]
 801989e:	f023 0303 	bic.w	r3, r3, #3
 80198a2:	f043 0301 	orr.w	r3, r3, #1
 80198a6:	81a3      	strh	r3, [r4, #12]
 80198a8:	89a0      	ldrh	r0, [r4, #12]
 80198aa:	4305      	orrs	r5, r0
 80198ac:	81a5      	strh	r5, [r4, #12]
 80198ae:	e7cd      	b.n	801984c <__smakebuf_r+0x18>
 80198b0:	08019649 	.word	0x08019649

080198b4 <_malloc_usable_size_r>:
 80198b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80198b8:	1f18      	subs	r0, r3, #4
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	bfbc      	itt	lt
 80198be:	580b      	ldrlt	r3, [r1, r0]
 80198c0:	18c0      	addlt	r0, r0, r3
 80198c2:	4770      	bx	lr

080198c4 <_raise_r>:
 80198c4:	291f      	cmp	r1, #31
 80198c6:	b538      	push	{r3, r4, r5, lr}
 80198c8:	4604      	mov	r4, r0
 80198ca:	460d      	mov	r5, r1
 80198cc:	d904      	bls.n	80198d8 <_raise_r+0x14>
 80198ce:	2316      	movs	r3, #22
 80198d0:	6003      	str	r3, [r0, #0]
 80198d2:	f04f 30ff 	mov.w	r0, #4294967295
 80198d6:	bd38      	pop	{r3, r4, r5, pc}
 80198d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80198da:	b112      	cbz	r2, 80198e2 <_raise_r+0x1e>
 80198dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80198e0:	b94b      	cbnz	r3, 80198f6 <_raise_r+0x32>
 80198e2:	4620      	mov	r0, r4
 80198e4:	f000 f830 	bl	8019948 <_getpid_r>
 80198e8:	462a      	mov	r2, r5
 80198ea:	4601      	mov	r1, r0
 80198ec:	4620      	mov	r0, r4
 80198ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80198f2:	f000 b817 	b.w	8019924 <_kill_r>
 80198f6:	2b01      	cmp	r3, #1
 80198f8:	d00a      	beq.n	8019910 <_raise_r+0x4c>
 80198fa:	1c59      	adds	r1, r3, #1
 80198fc:	d103      	bne.n	8019906 <_raise_r+0x42>
 80198fe:	2316      	movs	r3, #22
 8019900:	6003      	str	r3, [r0, #0]
 8019902:	2001      	movs	r0, #1
 8019904:	e7e7      	b.n	80198d6 <_raise_r+0x12>
 8019906:	2400      	movs	r4, #0
 8019908:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801990c:	4628      	mov	r0, r5
 801990e:	4798      	blx	r3
 8019910:	2000      	movs	r0, #0
 8019912:	e7e0      	b.n	80198d6 <_raise_r+0x12>

08019914 <raise>:
 8019914:	4b02      	ldr	r3, [pc, #8]	; (8019920 <raise+0xc>)
 8019916:	4601      	mov	r1, r0
 8019918:	6818      	ldr	r0, [r3, #0]
 801991a:	f7ff bfd3 	b.w	80198c4 <_raise_r>
 801991e:	bf00      	nop
 8019920:	20004210 	.word	0x20004210

08019924 <_kill_r>:
 8019924:	b538      	push	{r3, r4, r5, lr}
 8019926:	4d07      	ldr	r5, [pc, #28]	; (8019944 <_kill_r+0x20>)
 8019928:	2300      	movs	r3, #0
 801992a:	4604      	mov	r4, r0
 801992c:	4608      	mov	r0, r1
 801992e:	4611      	mov	r1, r2
 8019930:	602b      	str	r3, [r5, #0]
 8019932:	f7f0 fd55 	bl	800a3e0 <_kill>
 8019936:	1c43      	adds	r3, r0, #1
 8019938:	d102      	bne.n	8019940 <_kill_r+0x1c>
 801993a:	682b      	ldr	r3, [r5, #0]
 801993c:	b103      	cbz	r3, 8019940 <_kill_r+0x1c>
 801993e:	6023      	str	r3, [r4, #0]
 8019940:	bd38      	pop	{r3, r4, r5, pc}
 8019942:	bf00      	nop
 8019944:	20011abc 	.word	0x20011abc

08019948 <_getpid_r>:
 8019948:	f7f0 bd42 	b.w	800a3d0 <_getpid>

0801994c <__sread>:
 801994c:	b510      	push	{r4, lr}
 801994e:	460c      	mov	r4, r1
 8019950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019954:	f000 f894 	bl	8019a80 <_read_r>
 8019958:	2800      	cmp	r0, #0
 801995a:	bfab      	itete	ge
 801995c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801995e:	89a3      	ldrhlt	r3, [r4, #12]
 8019960:	181b      	addge	r3, r3, r0
 8019962:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019966:	bfac      	ite	ge
 8019968:	6563      	strge	r3, [r4, #84]	; 0x54
 801996a:	81a3      	strhlt	r3, [r4, #12]
 801996c:	bd10      	pop	{r4, pc}

0801996e <__swrite>:
 801996e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019972:	461f      	mov	r7, r3
 8019974:	898b      	ldrh	r3, [r1, #12]
 8019976:	05db      	lsls	r3, r3, #23
 8019978:	4605      	mov	r5, r0
 801997a:	460c      	mov	r4, r1
 801997c:	4616      	mov	r6, r2
 801997e:	d505      	bpl.n	801998c <__swrite+0x1e>
 8019980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019984:	2302      	movs	r3, #2
 8019986:	2200      	movs	r2, #0
 8019988:	f000 f868 	bl	8019a5c <_lseek_r>
 801998c:	89a3      	ldrh	r3, [r4, #12]
 801998e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019992:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019996:	81a3      	strh	r3, [r4, #12]
 8019998:	4632      	mov	r2, r6
 801999a:	463b      	mov	r3, r7
 801999c:	4628      	mov	r0, r5
 801999e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80199a2:	f000 b817 	b.w	80199d4 <_write_r>

080199a6 <__sseek>:
 80199a6:	b510      	push	{r4, lr}
 80199a8:	460c      	mov	r4, r1
 80199aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199ae:	f000 f855 	bl	8019a5c <_lseek_r>
 80199b2:	1c43      	adds	r3, r0, #1
 80199b4:	89a3      	ldrh	r3, [r4, #12]
 80199b6:	bf15      	itete	ne
 80199b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80199ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80199be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80199c2:	81a3      	strheq	r3, [r4, #12]
 80199c4:	bf18      	it	ne
 80199c6:	81a3      	strhne	r3, [r4, #12]
 80199c8:	bd10      	pop	{r4, pc}

080199ca <__sclose>:
 80199ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199ce:	f000 b813 	b.w	80199f8 <_close_r>
	...

080199d4 <_write_r>:
 80199d4:	b538      	push	{r3, r4, r5, lr}
 80199d6:	4d07      	ldr	r5, [pc, #28]	; (80199f4 <_write_r+0x20>)
 80199d8:	4604      	mov	r4, r0
 80199da:	4608      	mov	r0, r1
 80199dc:	4611      	mov	r1, r2
 80199de:	2200      	movs	r2, #0
 80199e0:	602a      	str	r2, [r5, #0]
 80199e2:	461a      	mov	r2, r3
 80199e4:	f7f0 fd33 	bl	800a44e <_write>
 80199e8:	1c43      	adds	r3, r0, #1
 80199ea:	d102      	bne.n	80199f2 <_write_r+0x1e>
 80199ec:	682b      	ldr	r3, [r5, #0]
 80199ee:	b103      	cbz	r3, 80199f2 <_write_r+0x1e>
 80199f0:	6023      	str	r3, [r4, #0]
 80199f2:	bd38      	pop	{r3, r4, r5, pc}
 80199f4:	20011abc 	.word	0x20011abc

080199f8 <_close_r>:
 80199f8:	b538      	push	{r3, r4, r5, lr}
 80199fa:	4d06      	ldr	r5, [pc, #24]	; (8019a14 <_close_r+0x1c>)
 80199fc:	2300      	movs	r3, #0
 80199fe:	4604      	mov	r4, r0
 8019a00:	4608      	mov	r0, r1
 8019a02:	602b      	str	r3, [r5, #0]
 8019a04:	f7f0 fd3f 	bl	800a486 <_close>
 8019a08:	1c43      	adds	r3, r0, #1
 8019a0a:	d102      	bne.n	8019a12 <_close_r+0x1a>
 8019a0c:	682b      	ldr	r3, [r5, #0]
 8019a0e:	b103      	cbz	r3, 8019a12 <_close_r+0x1a>
 8019a10:	6023      	str	r3, [r4, #0]
 8019a12:	bd38      	pop	{r3, r4, r5, pc}
 8019a14:	20011abc 	.word	0x20011abc

08019a18 <_fstat_r>:
 8019a18:	b538      	push	{r3, r4, r5, lr}
 8019a1a:	4d07      	ldr	r5, [pc, #28]	; (8019a38 <_fstat_r+0x20>)
 8019a1c:	2300      	movs	r3, #0
 8019a1e:	4604      	mov	r4, r0
 8019a20:	4608      	mov	r0, r1
 8019a22:	4611      	mov	r1, r2
 8019a24:	602b      	str	r3, [r5, #0]
 8019a26:	f7f0 fd3a 	bl	800a49e <_fstat>
 8019a2a:	1c43      	adds	r3, r0, #1
 8019a2c:	d102      	bne.n	8019a34 <_fstat_r+0x1c>
 8019a2e:	682b      	ldr	r3, [r5, #0]
 8019a30:	b103      	cbz	r3, 8019a34 <_fstat_r+0x1c>
 8019a32:	6023      	str	r3, [r4, #0]
 8019a34:	bd38      	pop	{r3, r4, r5, pc}
 8019a36:	bf00      	nop
 8019a38:	20011abc 	.word	0x20011abc

08019a3c <_isatty_r>:
 8019a3c:	b538      	push	{r3, r4, r5, lr}
 8019a3e:	4d06      	ldr	r5, [pc, #24]	; (8019a58 <_isatty_r+0x1c>)
 8019a40:	2300      	movs	r3, #0
 8019a42:	4604      	mov	r4, r0
 8019a44:	4608      	mov	r0, r1
 8019a46:	602b      	str	r3, [r5, #0]
 8019a48:	f7f0 fd39 	bl	800a4be <_isatty>
 8019a4c:	1c43      	adds	r3, r0, #1
 8019a4e:	d102      	bne.n	8019a56 <_isatty_r+0x1a>
 8019a50:	682b      	ldr	r3, [r5, #0]
 8019a52:	b103      	cbz	r3, 8019a56 <_isatty_r+0x1a>
 8019a54:	6023      	str	r3, [r4, #0]
 8019a56:	bd38      	pop	{r3, r4, r5, pc}
 8019a58:	20011abc 	.word	0x20011abc

08019a5c <_lseek_r>:
 8019a5c:	b538      	push	{r3, r4, r5, lr}
 8019a5e:	4d07      	ldr	r5, [pc, #28]	; (8019a7c <_lseek_r+0x20>)
 8019a60:	4604      	mov	r4, r0
 8019a62:	4608      	mov	r0, r1
 8019a64:	4611      	mov	r1, r2
 8019a66:	2200      	movs	r2, #0
 8019a68:	602a      	str	r2, [r5, #0]
 8019a6a:	461a      	mov	r2, r3
 8019a6c:	f7f0 fd32 	bl	800a4d4 <_lseek>
 8019a70:	1c43      	adds	r3, r0, #1
 8019a72:	d102      	bne.n	8019a7a <_lseek_r+0x1e>
 8019a74:	682b      	ldr	r3, [r5, #0]
 8019a76:	b103      	cbz	r3, 8019a7a <_lseek_r+0x1e>
 8019a78:	6023      	str	r3, [r4, #0]
 8019a7a:	bd38      	pop	{r3, r4, r5, pc}
 8019a7c:	20011abc 	.word	0x20011abc

08019a80 <_read_r>:
 8019a80:	b538      	push	{r3, r4, r5, lr}
 8019a82:	4d07      	ldr	r5, [pc, #28]	; (8019aa0 <_read_r+0x20>)
 8019a84:	4604      	mov	r4, r0
 8019a86:	4608      	mov	r0, r1
 8019a88:	4611      	mov	r1, r2
 8019a8a:	2200      	movs	r2, #0
 8019a8c:	602a      	str	r2, [r5, #0]
 8019a8e:	461a      	mov	r2, r3
 8019a90:	f7f0 fcc0 	bl	800a414 <_read>
 8019a94:	1c43      	adds	r3, r0, #1
 8019a96:	d102      	bne.n	8019a9e <_read_r+0x1e>
 8019a98:	682b      	ldr	r3, [r5, #0]
 8019a9a:	b103      	cbz	r3, 8019a9e <_read_r+0x1e>
 8019a9c:	6023      	str	r3, [r4, #0]
 8019a9e:	bd38      	pop	{r3, r4, r5, pc}
 8019aa0:	20011abc 	.word	0x20011abc
 8019aa4:	00000000 	.word	0x00000000

08019aa8 <ceil>:
 8019aa8:	ec51 0b10 	vmov	r0, r1, d0
 8019aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ab0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8019ab4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8019ab8:	2e13      	cmp	r6, #19
 8019aba:	ee10 5a10 	vmov	r5, s0
 8019abe:	ee10 8a10 	vmov	r8, s0
 8019ac2:	460c      	mov	r4, r1
 8019ac4:	dc30      	bgt.n	8019b28 <ceil+0x80>
 8019ac6:	2e00      	cmp	r6, #0
 8019ac8:	da12      	bge.n	8019af0 <ceil+0x48>
 8019aca:	a335      	add	r3, pc, #212	; (adr r3, 8019ba0 <ceil+0xf8>)
 8019acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ad0:	f7e6 fbdc 	bl	800028c <__adddf3>
 8019ad4:	2200      	movs	r2, #0
 8019ad6:	2300      	movs	r3, #0
 8019ad8:	f7e7 f81e 	bl	8000b18 <__aeabi_dcmpgt>
 8019adc:	b128      	cbz	r0, 8019aea <ceil+0x42>
 8019ade:	2c00      	cmp	r4, #0
 8019ae0:	db55      	blt.n	8019b8e <ceil+0xe6>
 8019ae2:	432c      	orrs	r4, r5
 8019ae4:	d057      	beq.n	8019b96 <ceil+0xee>
 8019ae6:	4c30      	ldr	r4, [pc, #192]	; (8019ba8 <ceil+0x100>)
 8019ae8:	2500      	movs	r5, #0
 8019aea:	4621      	mov	r1, r4
 8019aec:	4628      	mov	r0, r5
 8019aee:	e025      	b.n	8019b3c <ceil+0x94>
 8019af0:	4f2e      	ldr	r7, [pc, #184]	; (8019bac <ceil+0x104>)
 8019af2:	4137      	asrs	r7, r6
 8019af4:	ea01 0307 	and.w	r3, r1, r7
 8019af8:	4303      	orrs	r3, r0
 8019afa:	d01f      	beq.n	8019b3c <ceil+0x94>
 8019afc:	a328      	add	r3, pc, #160	; (adr r3, 8019ba0 <ceil+0xf8>)
 8019afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b02:	f7e6 fbc3 	bl	800028c <__adddf3>
 8019b06:	2200      	movs	r2, #0
 8019b08:	2300      	movs	r3, #0
 8019b0a:	f7e7 f805 	bl	8000b18 <__aeabi_dcmpgt>
 8019b0e:	2800      	cmp	r0, #0
 8019b10:	d0eb      	beq.n	8019aea <ceil+0x42>
 8019b12:	2c00      	cmp	r4, #0
 8019b14:	bfc2      	ittt	gt
 8019b16:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8019b1a:	fa43 f606 	asrgt.w	r6, r3, r6
 8019b1e:	19a4      	addgt	r4, r4, r6
 8019b20:	ea24 0407 	bic.w	r4, r4, r7
 8019b24:	2500      	movs	r5, #0
 8019b26:	e7e0      	b.n	8019aea <ceil+0x42>
 8019b28:	2e33      	cmp	r6, #51	; 0x33
 8019b2a:	dd0b      	ble.n	8019b44 <ceil+0x9c>
 8019b2c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019b30:	d104      	bne.n	8019b3c <ceil+0x94>
 8019b32:	ee10 2a10 	vmov	r2, s0
 8019b36:	460b      	mov	r3, r1
 8019b38:	f7e6 fba8 	bl	800028c <__adddf3>
 8019b3c:	ec41 0b10 	vmov	d0, r0, r1
 8019b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b44:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8019b48:	f04f 33ff 	mov.w	r3, #4294967295
 8019b4c:	fa23 f707 	lsr.w	r7, r3, r7
 8019b50:	4207      	tst	r7, r0
 8019b52:	d0f3      	beq.n	8019b3c <ceil+0x94>
 8019b54:	a312      	add	r3, pc, #72	; (adr r3, 8019ba0 <ceil+0xf8>)
 8019b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b5a:	f7e6 fb97 	bl	800028c <__adddf3>
 8019b5e:	2200      	movs	r2, #0
 8019b60:	2300      	movs	r3, #0
 8019b62:	f7e6 ffd9 	bl	8000b18 <__aeabi_dcmpgt>
 8019b66:	2800      	cmp	r0, #0
 8019b68:	d0bf      	beq.n	8019aea <ceil+0x42>
 8019b6a:	2c00      	cmp	r4, #0
 8019b6c:	dd02      	ble.n	8019b74 <ceil+0xcc>
 8019b6e:	2e14      	cmp	r6, #20
 8019b70:	d103      	bne.n	8019b7a <ceil+0xd2>
 8019b72:	3401      	adds	r4, #1
 8019b74:	ea25 0507 	bic.w	r5, r5, r7
 8019b78:	e7b7      	b.n	8019aea <ceil+0x42>
 8019b7a:	2301      	movs	r3, #1
 8019b7c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8019b80:	fa03 f606 	lsl.w	r6, r3, r6
 8019b84:	4435      	add	r5, r6
 8019b86:	4545      	cmp	r5, r8
 8019b88:	bf38      	it	cc
 8019b8a:	18e4      	addcc	r4, r4, r3
 8019b8c:	e7f2      	b.n	8019b74 <ceil+0xcc>
 8019b8e:	2500      	movs	r5, #0
 8019b90:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019b94:	e7a9      	b.n	8019aea <ceil+0x42>
 8019b96:	4625      	mov	r5, r4
 8019b98:	e7a7      	b.n	8019aea <ceil+0x42>
 8019b9a:	bf00      	nop
 8019b9c:	f3af 8000 	nop.w
 8019ba0:	8800759c 	.word	0x8800759c
 8019ba4:	7e37e43c 	.word	0x7e37e43c
 8019ba8:	3ff00000 	.word	0x3ff00000
 8019bac:	000fffff 	.word	0x000fffff

08019bb0 <cos>:
 8019bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019bb2:	ec53 2b10 	vmov	r2, r3, d0
 8019bb6:	4824      	ldr	r0, [pc, #144]	; (8019c48 <cos+0x98>)
 8019bb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019bbc:	4281      	cmp	r1, r0
 8019bbe:	dc06      	bgt.n	8019bce <cos+0x1e>
 8019bc0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8019c40 <cos+0x90>
 8019bc4:	f000 fce4 	bl	801a590 <__kernel_cos>
 8019bc8:	ec51 0b10 	vmov	r0, r1, d0
 8019bcc:	e007      	b.n	8019bde <cos+0x2e>
 8019bce:	481f      	ldr	r0, [pc, #124]	; (8019c4c <cos+0x9c>)
 8019bd0:	4281      	cmp	r1, r0
 8019bd2:	dd09      	ble.n	8019be8 <cos+0x38>
 8019bd4:	ee10 0a10 	vmov	r0, s0
 8019bd8:	4619      	mov	r1, r3
 8019bda:	f7e6 fb55 	bl	8000288 <__aeabi_dsub>
 8019bde:	ec41 0b10 	vmov	d0, r0, r1
 8019be2:	b005      	add	sp, #20
 8019be4:	f85d fb04 	ldr.w	pc, [sp], #4
 8019be8:	4668      	mov	r0, sp
 8019bea:	f000 fa11 	bl	801a010 <__ieee754_rem_pio2>
 8019bee:	f000 0003 	and.w	r0, r0, #3
 8019bf2:	2801      	cmp	r0, #1
 8019bf4:	d007      	beq.n	8019c06 <cos+0x56>
 8019bf6:	2802      	cmp	r0, #2
 8019bf8:	d012      	beq.n	8019c20 <cos+0x70>
 8019bfa:	b9c0      	cbnz	r0, 8019c2e <cos+0x7e>
 8019bfc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019c00:	ed9d 0b00 	vldr	d0, [sp]
 8019c04:	e7de      	b.n	8019bc4 <cos+0x14>
 8019c06:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019c0a:	ed9d 0b00 	vldr	d0, [sp]
 8019c0e:	f001 f8c7 	bl	801ada0 <__kernel_sin>
 8019c12:	ec53 2b10 	vmov	r2, r3, d0
 8019c16:	ee10 0a10 	vmov	r0, s0
 8019c1a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019c1e:	e7de      	b.n	8019bde <cos+0x2e>
 8019c20:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019c24:	ed9d 0b00 	vldr	d0, [sp]
 8019c28:	f000 fcb2 	bl	801a590 <__kernel_cos>
 8019c2c:	e7f1      	b.n	8019c12 <cos+0x62>
 8019c2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019c32:	ed9d 0b00 	vldr	d0, [sp]
 8019c36:	2001      	movs	r0, #1
 8019c38:	f001 f8b2 	bl	801ada0 <__kernel_sin>
 8019c3c:	e7c4      	b.n	8019bc8 <cos+0x18>
 8019c3e:	bf00      	nop
	...
 8019c48:	3fe921fb 	.word	0x3fe921fb
 8019c4c:	7fefffff 	.word	0x7fefffff

08019c50 <round>:
 8019c50:	ec51 0b10 	vmov	r0, r1, d0
 8019c54:	b570      	push	{r4, r5, r6, lr}
 8019c56:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8019c5a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8019c5e:	2c13      	cmp	r4, #19
 8019c60:	ee10 2a10 	vmov	r2, s0
 8019c64:	460b      	mov	r3, r1
 8019c66:	dc19      	bgt.n	8019c9c <round+0x4c>
 8019c68:	2c00      	cmp	r4, #0
 8019c6a:	da09      	bge.n	8019c80 <round+0x30>
 8019c6c:	3401      	adds	r4, #1
 8019c6e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8019c72:	d103      	bne.n	8019c7c <round+0x2c>
 8019c74:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8019c78:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019c7c:	2100      	movs	r1, #0
 8019c7e:	e028      	b.n	8019cd2 <round+0x82>
 8019c80:	4d15      	ldr	r5, [pc, #84]	; (8019cd8 <round+0x88>)
 8019c82:	4125      	asrs	r5, r4
 8019c84:	ea01 0605 	and.w	r6, r1, r5
 8019c88:	4332      	orrs	r2, r6
 8019c8a:	d00e      	beq.n	8019caa <round+0x5a>
 8019c8c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8019c90:	fa42 f404 	asr.w	r4, r2, r4
 8019c94:	4423      	add	r3, r4
 8019c96:	ea23 0305 	bic.w	r3, r3, r5
 8019c9a:	e7ef      	b.n	8019c7c <round+0x2c>
 8019c9c:	2c33      	cmp	r4, #51	; 0x33
 8019c9e:	dd07      	ble.n	8019cb0 <round+0x60>
 8019ca0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8019ca4:	d101      	bne.n	8019caa <round+0x5a>
 8019ca6:	f7e6 faf1 	bl	800028c <__adddf3>
 8019caa:	ec41 0b10 	vmov	d0, r0, r1
 8019cae:	bd70      	pop	{r4, r5, r6, pc}
 8019cb0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8019cb4:	f04f 35ff 	mov.w	r5, #4294967295
 8019cb8:	40f5      	lsrs	r5, r6
 8019cba:	4228      	tst	r0, r5
 8019cbc:	d0f5      	beq.n	8019caa <round+0x5a>
 8019cbe:	2101      	movs	r1, #1
 8019cc0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8019cc4:	fa01 f404 	lsl.w	r4, r1, r4
 8019cc8:	1912      	adds	r2, r2, r4
 8019cca:	bf28      	it	cs
 8019ccc:	185b      	addcs	r3, r3, r1
 8019cce:	ea22 0105 	bic.w	r1, r2, r5
 8019cd2:	4608      	mov	r0, r1
 8019cd4:	4619      	mov	r1, r3
 8019cd6:	e7e8      	b.n	8019caa <round+0x5a>
 8019cd8:	000fffff 	.word	0x000fffff
 8019cdc:	00000000 	.word	0x00000000

08019ce0 <sin>:
 8019ce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019ce2:	ec53 2b10 	vmov	r2, r3, d0
 8019ce6:	4826      	ldr	r0, [pc, #152]	; (8019d80 <sin+0xa0>)
 8019ce8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019cec:	4281      	cmp	r1, r0
 8019cee:	dc07      	bgt.n	8019d00 <sin+0x20>
 8019cf0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8019d78 <sin+0x98>
 8019cf4:	2000      	movs	r0, #0
 8019cf6:	f001 f853 	bl	801ada0 <__kernel_sin>
 8019cfa:	ec51 0b10 	vmov	r0, r1, d0
 8019cfe:	e007      	b.n	8019d10 <sin+0x30>
 8019d00:	4820      	ldr	r0, [pc, #128]	; (8019d84 <sin+0xa4>)
 8019d02:	4281      	cmp	r1, r0
 8019d04:	dd09      	ble.n	8019d1a <sin+0x3a>
 8019d06:	ee10 0a10 	vmov	r0, s0
 8019d0a:	4619      	mov	r1, r3
 8019d0c:	f7e6 fabc 	bl	8000288 <__aeabi_dsub>
 8019d10:	ec41 0b10 	vmov	d0, r0, r1
 8019d14:	b005      	add	sp, #20
 8019d16:	f85d fb04 	ldr.w	pc, [sp], #4
 8019d1a:	4668      	mov	r0, sp
 8019d1c:	f000 f978 	bl	801a010 <__ieee754_rem_pio2>
 8019d20:	f000 0003 	and.w	r0, r0, #3
 8019d24:	2801      	cmp	r0, #1
 8019d26:	d008      	beq.n	8019d3a <sin+0x5a>
 8019d28:	2802      	cmp	r0, #2
 8019d2a:	d00d      	beq.n	8019d48 <sin+0x68>
 8019d2c:	b9d0      	cbnz	r0, 8019d64 <sin+0x84>
 8019d2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019d32:	ed9d 0b00 	vldr	d0, [sp]
 8019d36:	2001      	movs	r0, #1
 8019d38:	e7dd      	b.n	8019cf6 <sin+0x16>
 8019d3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019d3e:	ed9d 0b00 	vldr	d0, [sp]
 8019d42:	f000 fc25 	bl	801a590 <__kernel_cos>
 8019d46:	e7d8      	b.n	8019cfa <sin+0x1a>
 8019d48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019d4c:	ed9d 0b00 	vldr	d0, [sp]
 8019d50:	2001      	movs	r0, #1
 8019d52:	f001 f825 	bl	801ada0 <__kernel_sin>
 8019d56:	ec53 2b10 	vmov	r2, r3, d0
 8019d5a:	ee10 0a10 	vmov	r0, s0
 8019d5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019d62:	e7d5      	b.n	8019d10 <sin+0x30>
 8019d64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019d68:	ed9d 0b00 	vldr	d0, [sp]
 8019d6c:	f000 fc10 	bl	801a590 <__kernel_cos>
 8019d70:	e7f1      	b.n	8019d56 <sin+0x76>
 8019d72:	bf00      	nop
 8019d74:	f3af 8000 	nop.w
	...
 8019d80:	3fe921fb 	.word	0x3fe921fb
 8019d84:	7fefffff 	.word	0x7fefffff

08019d88 <ceilf>:
 8019d88:	ee10 3a10 	vmov	r3, s0
 8019d8c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019d90:	3a7f      	subs	r2, #127	; 0x7f
 8019d92:	2a16      	cmp	r2, #22
 8019d94:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019d98:	dc2a      	bgt.n	8019df0 <ceilf+0x68>
 8019d9a:	2a00      	cmp	r2, #0
 8019d9c:	da11      	bge.n	8019dc2 <ceilf+0x3a>
 8019d9e:	eddf 7a19 	vldr	s15, [pc, #100]	; 8019e04 <ceilf+0x7c>
 8019da2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019da6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dae:	dd05      	ble.n	8019dbc <ceilf+0x34>
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	db23      	blt.n	8019dfc <ceilf+0x74>
 8019db4:	2900      	cmp	r1, #0
 8019db6:	bf18      	it	ne
 8019db8:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8019dbc:	ee00 3a10 	vmov	s0, r3
 8019dc0:	4770      	bx	lr
 8019dc2:	4911      	ldr	r1, [pc, #68]	; (8019e08 <ceilf+0x80>)
 8019dc4:	4111      	asrs	r1, r2
 8019dc6:	420b      	tst	r3, r1
 8019dc8:	d0fa      	beq.n	8019dc0 <ceilf+0x38>
 8019dca:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8019e04 <ceilf+0x7c>
 8019dce:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019dd2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dda:	ddef      	ble.n	8019dbc <ceilf+0x34>
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	bfc2      	ittt	gt
 8019de0:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8019de4:	fa40 f202 	asrgt.w	r2, r0, r2
 8019de8:	189b      	addgt	r3, r3, r2
 8019dea:	ea23 0301 	bic.w	r3, r3, r1
 8019dee:	e7e5      	b.n	8019dbc <ceilf+0x34>
 8019df0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019df4:	d3e4      	bcc.n	8019dc0 <ceilf+0x38>
 8019df6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019dfa:	4770      	bx	lr
 8019dfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8019e00:	e7dc      	b.n	8019dbc <ceilf+0x34>
 8019e02:	bf00      	nop
 8019e04:	7149f2ca 	.word	0x7149f2ca
 8019e08:	007fffff 	.word	0x007fffff

08019e0c <atan2>:
 8019e0c:	f000 b834 	b.w	8019e78 <__ieee754_atan2>

08019e10 <sqrt>:
 8019e10:	b538      	push	{r3, r4, r5, lr}
 8019e12:	ed2d 8b02 	vpush	{d8}
 8019e16:	ec55 4b10 	vmov	r4, r5, d0
 8019e1a:	f000 fb03 	bl	801a424 <__ieee754_sqrt>
 8019e1e:	4b15      	ldr	r3, [pc, #84]	; (8019e74 <sqrt+0x64>)
 8019e20:	eeb0 8a40 	vmov.f32	s16, s0
 8019e24:	eef0 8a60 	vmov.f32	s17, s1
 8019e28:	f993 3000 	ldrsb.w	r3, [r3]
 8019e2c:	3301      	adds	r3, #1
 8019e2e:	d019      	beq.n	8019e64 <sqrt+0x54>
 8019e30:	4622      	mov	r2, r4
 8019e32:	462b      	mov	r3, r5
 8019e34:	4620      	mov	r0, r4
 8019e36:	4629      	mov	r1, r5
 8019e38:	f7e6 fe78 	bl	8000b2c <__aeabi_dcmpun>
 8019e3c:	b990      	cbnz	r0, 8019e64 <sqrt+0x54>
 8019e3e:	2200      	movs	r2, #0
 8019e40:	2300      	movs	r3, #0
 8019e42:	4620      	mov	r0, r4
 8019e44:	4629      	mov	r1, r5
 8019e46:	f7e6 fe49 	bl	8000adc <__aeabi_dcmplt>
 8019e4a:	b158      	cbz	r0, 8019e64 <sqrt+0x54>
 8019e4c:	f7fb f996 	bl	801517c <__errno>
 8019e50:	2321      	movs	r3, #33	; 0x21
 8019e52:	6003      	str	r3, [r0, #0]
 8019e54:	2200      	movs	r2, #0
 8019e56:	2300      	movs	r3, #0
 8019e58:	4610      	mov	r0, r2
 8019e5a:	4619      	mov	r1, r3
 8019e5c:	f7e6 fcf6 	bl	800084c <__aeabi_ddiv>
 8019e60:	ec41 0b18 	vmov	d8, r0, r1
 8019e64:	eeb0 0a48 	vmov.f32	s0, s16
 8019e68:	eef0 0a68 	vmov.f32	s1, s17
 8019e6c:	ecbd 8b02 	vpop	{d8}
 8019e70:	bd38      	pop	{r3, r4, r5, pc}
 8019e72:	bf00      	nop
 8019e74:	200043e4 	.word	0x200043e4

08019e78 <__ieee754_atan2>:
 8019e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e7c:	ec57 6b11 	vmov	r6, r7, d1
 8019e80:	4273      	negs	r3, r6
 8019e82:	f8df e184 	ldr.w	lr, [pc, #388]	; 801a008 <__ieee754_atan2+0x190>
 8019e86:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8019e8a:	4333      	orrs	r3, r6
 8019e8c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8019e90:	4573      	cmp	r3, lr
 8019e92:	ec51 0b10 	vmov	r0, r1, d0
 8019e96:	ee11 8a10 	vmov	r8, s2
 8019e9a:	d80a      	bhi.n	8019eb2 <__ieee754_atan2+0x3a>
 8019e9c:	4244      	negs	r4, r0
 8019e9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019ea2:	4304      	orrs	r4, r0
 8019ea4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8019ea8:	4574      	cmp	r4, lr
 8019eaa:	ee10 9a10 	vmov	r9, s0
 8019eae:	468c      	mov	ip, r1
 8019eb0:	d907      	bls.n	8019ec2 <__ieee754_atan2+0x4a>
 8019eb2:	4632      	mov	r2, r6
 8019eb4:	463b      	mov	r3, r7
 8019eb6:	f7e6 f9e9 	bl	800028c <__adddf3>
 8019eba:	ec41 0b10 	vmov	d0, r0, r1
 8019ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019ec2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8019ec6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019eca:	4334      	orrs	r4, r6
 8019ecc:	d103      	bne.n	8019ed6 <__ieee754_atan2+0x5e>
 8019ece:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019ed2:	f001 b825 	b.w	801af20 <atan>
 8019ed6:	17bc      	asrs	r4, r7, #30
 8019ed8:	f004 0402 	and.w	r4, r4, #2
 8019edc:	ea53 0909 	orrs.w	r9, r3, r9
 8019ee0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8019ee4:	d107      	bne.n	8019ef6 <__ieee754_atan2+0x7e>
 8019ee6:	2c02      	cmp	r4, #2
 8019ee8:	d060      	beq.n	8019fac <__ieee754_atan2+0x134>
 8019eea:	2c03      	cmp	r4, #3
 8019eec:	d1e5      	bne.n	8019eba <__ieee754_atan2+0x42>
 8019eee:	a142      	add	r1, pc, #264	; (adr r1, 8019ff8 <__ieee754_atan2+0x180>)
 8019ef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ef4:	e7e1      	b.n	8019eba <__ieee754_atan2+0x42>
 8019ef6:	ea52 0808 	orrs.w	r8, r2, r8
 8019efa:	d106      	bne.n	8019f0a <__ieee754_atan2+0x92>
 8019efc:	f1bc 0f00 	cmp.w	ip, #0
 8019f00:	da5f      	bge.n	8019fc2 <__ieee754_atan2+0x14a>
 8019f02:	a13f      	add	r1, pc, #252	; (adr r1, 801a000 <__ieee754_atan2+0x188>)
 8019f04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f08:	e7d7      	b.n	8019eba <__ieee754_atan2+0x42>
 8019f0a:	4572      	cmp	r2, lr
 8019f0c:	d10f      	bne.n	8019f2e <__ieee754_atan2+0xb6>
 8019f0e:	4293      	cmp	r3, r2
 8019f10:	f104 34ff 	add.w	r4, r4, #4294967295
 8019f14:	d107      	bne.n	8019f26 <__ieee754_atan2+0xae>
 8019f16:	2c02      	cmp	r4, #2
 8019f18:	d84c      	bhi.n	8019fb4 <__ieee754_atan2+0x13c>
 8019f1a:	4b35      	ldr	r3, [pc, #212]	; (8019ff0 <__ieee754_atan2+0x178>)
 8019f1c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8019f20:	e9d4 0100 	ldrd	r0, r1, [r4]
 8019f24:	e7c9      	b.n	8019eba <__ieee754_atan2+0x42>
 8019f26:	2c02      	cmp	r4, #2
 8019f28:	d848      	bhi.n	8019fbc <__ieee754_atan2+0x144>
 8019f2a:	4b32      	ldr	r3, [pc, #200]	; (8019ff4 <__ieee754_atan2+0x17c>)
 8019f2c:	e7f6      	b.n	8019f1c <__ieee754_atan2+0xa4>
 8019f2e:	4573      	cmp	r3, lr
 8019f30:	d0e4      	beq.n	8019efc <__ieee754_atan2+0x84>
 8019f32:	1a9b      	subs	r3, r3, r2
 8019f34:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8019f38:	ea4f 5223 	mov.w	r2, r3, asr #20
 8019f3c:	da1e      	bge.n	8019f7c <__ieee754_atan2+0x104>
 8019f3e:	2f00      	cmp	r7, #0
 8019f40:	da01      	bge.n	8019f46 <__ieee754_atan2+0xce>
 8019f42:	323c      	adds	r2, #60	; 0x3c
 8019f44:	db1e      	blt.n	8019f84 <__ieee754_atan2+0x10c>
 8019f46:	4632      	mov	r2, r6
 8019f48:	463b      	mov	r3, r7
 8019f4a:	f7e6 fc7f 	bl	800084c <__aeabi_ddiv>
 8019f4e:	ec41 0b10 	vmov	d0, r0, r1
 8019f52:	f001 f985 	bl	801b260 <fabs>
 8019f56:	f000 ffe3 	bl	801af20 <atan>
 8019f5a:	ec51 0b10 	vmov	r0, r1, d0
 8019f5e:	2c01      	cmp	r4, #1
 8019f60:	d013      	beq.n	8019f8a <__ieee754_atan2+0x112>
 8019f62:	2c02      	cmp	r4, #2
 8019f64:	d015      	beq.n	8019f92 <__ieee754_atan2+0x11a>
 8019f66:	2c00      	cmp	r4, #0
 8019f68:	d0a7      	beq.n	8019eba <__ieee754_atan2+0x42>
 8019f6a:	a319      	add	r3, pc, #100	; (adr r3, 8019fd0 <__ieee754_atan2+0x158>)
 8019f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f70:	f7e6 f98a 	bl	8000288 <__aeabi_dsub>
 8019f74:	a318      	add	r3, pc, #96	; (adr r3, 8019fd8 <__ieee754_atan2+0x160>)
 8019f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f7a:	e014      	b.n	8019fa6 <__ieee754_atan2+0x12e>
 8019f7c:	a118      	add	r1, pc, #96	; (adr r1, 8019fe0 <__ieee754_atan2+0x168>)
 8019f7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f82:	e7ec      	b.n	8019f5e <__ieee754_atan2+0xe6>
 8019f84:	2000      	movs	r0, #0
 8019f86:	2100      	movs	r1, #0
 8019f88:	e7e9      	b.n	8019f5e <__ieee754_atan2+0xe6>
 8019f8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019f8e:	4619      	mov	r1, r3
 8019f90:	e793      	b.n	8019eba <__ieee754_atan2+0x42>
 8019f92:	a30f      	add	r3, pc, #60	; (adr r3, 8019fd0 <__ieee754_atan2+0x158>)
 8019f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f98:	f7e6 f976 	bl	8000288 <__aeabi_dsub>
 8019f9c:	4602      	mov	r2, r0
 8019f9e:	460b      	mov	r3, r1
 8019fa0:	a10d      	add	r1, pc, #52	; (adr r1, 8019fd8 <__ieee754_atan2+0x160>)
 8019fa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019fa6:	f7e6 f96f 	bl	8000288 <__aeabi_dsub>
 8019faa:	e786      	b.n	8019eba <__ieee754_atan2+0x42>
 8019fac:	a10a      	add	r1, pc, #40	; (adr r1, 8019fd8 <__ieee754_atan2+0x160>)
 8019fae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019fb2:	e782      	b.n	8019eba <__ieee754_atan2+0x42>
 8019fb4:	a10c      	add	r1, pc, #48	; (adr r1, 8019fe8 <__ieee754_atan2+0x170>)
 8019fb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019fba:	e77e      	b.n	8019eba <__ieee754_atan2+0x42>
 8019fbc:	2000      	movs	r0, #0
 8019fbe:	2100      	movs	r1, #0
 8019fc0:	e77b      	b.n	8019eba <__ieee754_atan2+0x42>
 8019fc2:	a107      	add	r1, pc, #28	; (adr r1, 8019fe0 <__ieee754_atan2+0x168>)
 8019fc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019fc8:	e777      	b.n	8019eba <__ieee754_atan2+0x42>
 8019fca:	bf00      	nop
 8019fcc:	f3af 8000 	nop.w
 8019fd0:	33145c07 	.word	0x33145c07
 8019fd4:	3ca1a626 	.word	0x3ca1a626
 8019fd8:	54442d18 	.word	0x54442d18
 8019fdc:	400921fb 	.word	0x400921fb
 8019fe0:	54442d18 	.word	0x54442d18
 8019fe4:	3ff921fb 	.word	0x3ff921fb
 8019fe8:	54442d18 	.word	0x54442d18
 8019fec:	3fe921fb 	.word	0x3fe921fb
 8019ff0:	0801bc38 	.word	0x0801bc38
 8019ff4:	0801bc50 	.word	0x0801bc50
 8019ff8:	54442d18 	.word	0x54442d18
 8019ffc:	c00921fb 	.word	0xc00921fb
 801a000:	54442d18 	.word	0x54442d18
 801a004:	bff921fb 	.word	0xbff921fb
 801a008:	7ff00000 	.word	0x7ff00000
 801a00c:	00000000 	.word	0x00000000

0801a010 <__ieee754_rem_pio2>:
 801a010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a014:	ed2d 8b02 	vpush	{d8}
 801a018:	ec55 4b10 	vmov	r4, r5, d0
 801a01c:	4bca      	ldr	r3, [pc, #808]	; (801a348 <__ieee754_rem_pio2+0x338>)
 801a01e:	b08b      	sub	sp, #44	; 0x2c
 801a020:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801a024:	4598      	cmp	r8, r3
 801a026:	4682      	mov	sl, r0
 801a028:	9502      	str	r5, [sp, #8]
 801a02a:	dc08      	bgt.n	801a03e <__ieee754_rem_pio2+0x2e>
 801a02c:	2200      	movs	r2, #0
 801a02e:	2300      	movs	r3, #0
 801a030:	ed80 0b00 	vstr	d0, [r0]
 801a034:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a038:	f04f 0b00 	mov.w	fp, #0
 801a03c:	e028      	b.n	801a090 <__ieee754_rem_pio2+0x80>
 801a03e:	4bc3      	ldr	r3, [pc, #780]	; (801a34c <__ieee754_rem_pio2+0x33c>)
 801a040:	4598      	cmp	r8, r3
 801a042:	dc78      	bgt.n	801a136 <__ieee754_rem_pio2+0x126>
 801a044:	9b02      	ldr	r3, [sp, #8]
 801a046:	4ec2      	ldr	r6, [pc, #776]	; (801a350 <__ieee754_rem_pio2+0x340>)
 801a048:	2b00      	cmp	r3, #0
 801a04a:	ee10 0a10 	vmov	r0, s0
 801a04e:	a3b0      	add	r3, pc, #704	; (adr r3, 801a310 <__ieee754_rem_pio2+0x300>)
 801a050:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a054:	4629      	mov	r1, r5
 801a056:	dd39      	ble.n	801a0cc <__ieee754_rem_pio2+0xbc>
 801a058:	f7e6 f916 	bl	8000288 <__aeabi_dsub>
 801a05c:	45b0      	cmp	r8, r6
 801a05e:	4604      	mov	r4, r0
 801a060:	460d      	mov	r5, r1
 801a062:	d01b      	beq.n	801a09c <__ieee754_rem_pio2+0x8c>
 801a064:	a3ac      	add	r3, pc, #688	; (adr r3, 801a318 <__ieee754_rem_pio2+0x308>)
 801a066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a06a:	f7e6 f90d 	bl	8000288 <__aeabi_dsub>
 801a06e:	4602      	mov	r2, r0
 801a070:	460b      	mov	r3, r1
 801a072:	e9ca 2300 	strd	r2, r3, [sl]
 801a076:	4620      	mov	r0, r4
 801a078:	4629      	mov	r1, r5
 801a07a:	f7e6 f905 	bl	8000288 <__aeabi_dsub>
 801a07e:	a3a6      	add	r3, pc, #664	; (adr r3, 801a318 <__ieee754_rem_pio2+0x308>)
 801a080:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a084:	f7e6 f900 	bl	8000288 <__aeabi_dsub>
 801a088:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a08c:	f04f 0b01 	mov.w	fp, #1
 801a090:	4658      	mov	r0, fp
 801a092:	b00b      	add	sp, #44	; 0x2c
 801a094:	ecbd 8b02 	vpop	{d8}
 801a098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a09c:	a3a0      	add	r3, pc, #640	; (adr r3, 801a320 <__ieee754_rem_pio2+0x310>)
 801a09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0a2:	f7e6 f8f1 	bl	8000288 <__aeabi_dsub>
 801a0a6:	a3a0      	add	r3, pc, #640	; (adr r3, 801a328 <__ieee754_rem_pio2+0x318>)
 801a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0ac:	4604      	mov	r4, r0
 801a0ae:	460d      	mov	r5, r1
 801a0b0:	f7e6 f8ea 	bl	8000288 <__aeabi_dsub>
 801a0b4:	4602      	mov	r2, r0
 801a0b6:	460b      	mov	r3, r1
 801a0b8:	e9ca 2300 	strd	r2, r3, [sl]
 801a0bc:	4620      	mov	r0, r4
 801a0be:	4629      	mov	r1, r5
 801a0c0:	f7e6 f8e2 	bl	8000288 <__aeabi_dsub>
 801a0c4:	a398      	add	r3, pc, #608	; (adr r3, 801a328 <__ieee754_rem_pio2+0x318>)
 801a0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0ca:	e7db      	b.n	801a084 <__ieee754_rem_pio2+0x74>
 801a0cc:	f7e6 f8de 	bl	800028c <__adddf3>
 801a0d0:	45b0      	cmp	r8, r6
 801a0d2:	4604      	mov	r4, r0
 801a0d4:	460d      	mov	r5, r1
 801a0d6:	d016      	beq.n	801a106 <__ieee754_rem_pio2+0xf6>
 801a0d8:	a38f      	add	r3, pc, #572	; (adr r3, 801a318 <__ieee754_rem_pio2+0x308>)
 801a0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0de:	f7e6 f8d5 	bl	800028c <__adddf3>
 801a0e2:	4602      	mov	r2, r0
 801a0e4:	460b      	mov	r3, r1
 801a0e6:	e9ca 2300 	strd	r2, r3, [sl]
 801a0ea:	4620      	mov	r0, r4
 801a0ec:	4629      	mov	r1, r5
 801a0ee:	f7e6 f8cb 	bl	8000288 <__aeabi_dsub>
 801a0f2:	a389      	add	r3, pc, #548	; (adr r3, 801a318 <__ieee754_rem_pio2+0x308>)
 801a0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0f8:	f7e6 f8c8 	bl	800028c <__adddf3>
 801a0fc:	f04f 3bff 	mov.w	fp, #4294967295
 801a100:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a104:	e7c4      	b.n	801a090 <__ieee754_rem_pio2+0x80>
 801a106:	a386      	add	r3, pc, #536	; (adr r3, 801a320 <__ieee754_rem_pio2+0x310>)
 801a108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a10c:	f7e6 f8be 	bl	800028c <__adddf3>
 801a110:	a385      	add	r3, pc, #532	; (adr r3, 801a328 <__ieee754_rem_pio2+0x318>)
 801a112:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a116:	4604      	mov	r4, r0
 801a118:	460d      	mov	r5, r1
 801a11a:	f7e6 f8b7 	bl	800028c <__adddf3>
 801a11e:	4602      	mov	r2, r0
 801a120:	460b      	mov	r3, r1
 801a122:	e9ca 2300 	strd	r2, r3, [sl]
 801a126:	4620      	mov	r0, r4
 801a128:	4629      	mov	r1, r5
 801a12a:	f7e6 f8ad 	bl	8000288 <__aeabi_dsub>
 801a12e:	a37e      	add	r3, pc, #504	; (adr r3, 801a328 <__ieee754_rem_pio2+0x318>)
 801a130:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a134:	e7e0      	b.n	801a0f8 <__ieee754_rem_pio2+0xe8>
 801a136:	4b87      	ldr	r3, [pc, #540]	; (801a354 <__ieee754_rem_pio2+0x344>)
 801a138:	4598      	cmp	r8, r3
 801a13a:	f300 80d9 	bgt.w	801a2f0 <__ieee754_rem_pio2+0x2e0>
 801a13e:	f001 f88f 	bl	801b260 <fabs>
 801a142:	ec55 4b10 	vmov	r4, r5, d0
 801a146:	ee10 0a10 	vmov	r0, s0
 801a14a:	a379      	add	r3, pc, #484	; (adr r3, 801a330 <__ieee754_rem_pio2+0x320>)
 801a14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a150:	4629      	mov	r1, r5
 801a152:	f7e6 fa51 	bl	80005f8 <__aeabi_dmul>
 801a156:	4b80      	ldr	r3, [pc, #512]	; (801a358 <__ieee754_rem_pio2+0x348>)
 801a158:	2200      	movs	r2, #0
 801a15a:	f7e6 f897 	bl	800028c <__adddf3>
 801a15e:	f7e6 fcfb 	bl	8000b58 <__aeabi_d2iz>
 801a162:	4683      	mov	fp, r0
 801a164:	f7e6 f9de 	bl	8000524 <__aeabi_i2d>
 801a168:	4602      	mov	r2, r0
 801a16a:	460b      	mov	r3, r1
 801a16c:	ec43 2b18 	vmov	d8, r2, r3
 801a170:	a367      	add	r3, pc, #412	; (adr r3, 801a310 <__ieee754_rem_pio2+0x300>)
 801a172:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a176:	f7e6 fa3f 	bl	80005f8 <__aeabi_dmul>
 801a17a:	4602      	mov	r2, r0
 801a17c:	460b      	mov	r3, r1
 801a17e:	4620      	mov	r0, r4
 801a180:	4629      	mov	r1, r5
 801a182:	f7e6 f881 	bl	8000288 <__aeabi_dsub>
 801a186:	a364      	add	r3, pc, #400	; (adr r3, 801a318 <__ieee754_rem_pio2+0x308>)
 801a188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a18c:	4606      	mov	r6, r0
 801a18e:	460f      	mov	r7, r1
 801a190:	ec51 0b18 	vmov	r0, r1, d8
 801a194:	f7e6 fa30 	bl	80005f8 <__aeabi_dmul>
 801a198:	f1bb 0f1f 	cmp.w	fp, #31
 801a19c:	4604      	mov	r4, r0
 801a19e:	460d      	mov	r5, r1
 801a1a0:	dc0d      	bgt.n	801a1be <__ieee754_rem_pio2+0x1ae>
 801a1a2:	4b6e      	ldr	r3, [pc, #440]	; (801a35c <__ieee754_rem_pio2+0x34c>)
 801a1a4:	f10b 32ff 	add.w	r2, fp, #4294967295
 801a1a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a1ac:	4543      	cmp	r3, r8
 801a1ae:	d006      	beq.n	801a1be <__ieee754_rem_pio2+0x1ae>
 801a1b0:	4622      	mov	r2, r4
 801a1b2:	462b      	mov	r3, r5
 801a1b4:	4630      	mov	r0, r6
 801a1b6:	4639      	mov	r1, r7
 801a1b8:	f7e6 f866 	bl	8000288 <__aeabi_dsub>
 801a1bc:	e00f      	b.n	801a1de <__ieee754_rem_pio2+0x1ce>
 801a1be:	462b      	mov	r3, r5
 801a1c0:	4622      	mov	r2, r4
 801a1c2:	4630      	mov	r0, r6
 801a1c4:	4639      	mov	r1, r7
 801a1c6:	f7e6 f85f 	bl	8000288 <__aeabi_dsub>
 801a1ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a1ce:	9303      	str	r3, [sp, #12]
 801a1d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a1d4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 801a1d8:	f1b8 0f10 	cmp.w	r8, #16
 801a1dc:	dc02      	bgt.n	801a1e4 <__ieee754_rem_pio2+0x1d4>
 801a1de:	e9ca 0100 	strd	r0, r1, [sl]
 801a1e2:	e039      	b.n	801a258 <__ieee754_rem_pio2+0x248>
 801a1e4:	a34e      	add	r3, pc, #312	; (adr r3, 801a320 <__ieee754_rem_pio2+0x310>)
 801a1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1ea:	ec51 0b18 	vmov	r0, r1, d8
 801a1ee:	f7e6 fa03 	bl	80005f8 <__aeabi_dmul>
 801a1f2:	4604      	mov	r4, r0
 801a1f4:	460d      	mov	r5, r1
 801a1f6:	4602      	mov	r2, r0
 801a1f8:	460b      	mov	r3, r1
 801a1fa:	4630      	mov	r0, r6
 801a1fc:	4639      	mov	r1, r7
 801a1fe:	f7e6 f843 	bl	8000288 <__aeabi_dsub>
 801a202:	4602      	mov	r2, r0
 801a204:	460b      	mov	r3, r1
 801a206:	4680      	mov	r8, r0
 801a208:	4689      	mov	r9, r1
 801a20a:	4630      	mov	r0, r6
 801a20c:	4639      	mov	r1, r7
 801a20e:	f7e6 f83b 	bl	8000288 <__aeabi_dsub>
 801a212:	4622      	mov	r2, r4
 801a214:	462b      	mov	r3, r5
 801a216:	f7e6 f837 	bl	8000288 <__aeabi_dsub>
 801a21a:	a343      	add	r3, pc, #268	; (adr r3, 801a328 <__ieee754_rem_pio2+0x318>)
 801a21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a220:	4604      	mov	r4, r0
 801a222:	460d      	mov	r5, r1
 801a224:	ec51 0b18 	vmov	r0, r1, d8
 801a228:	f7e6 f9e6 	bl	80005f8 <__aeabi_dmul>
 801a22c:	4622      	mov	r2, r4
 801a22e:	462b      	mov	r3, r5
 801a230:	f7e6 f82a 	bl	8000288 <__aeabi_dsub>
 801a234:	4602      	mov	r2, r0
 801a236:	460b      	mov	r3, r1
 801a238:	4604      	mov	r4, r0
 801a23a:	460d      	mov	r5, r1
 801a23c:	4640      	mov	r0, r8
 801a23e:	4649      	mov	r1, r9
 801a240:	f7e6 f822 	bl	8000288 <__aeabi_dsub>
 801a244:	9a03      	ldr	r2, [sp, #12]
 801a246:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a24a:	1ad3      	subs	r3, r2, r3
 801a24c:	2b31      	cmp	r3, #49	; 0x31
 801a24e:	dc24      	bgt.n	801a29a <__ieee754_rem_pio2+0x28a>
 801a250:	e9ca 0100 	strd	r0, r1, [sl]
 801a254:	4646      	mov	r6, r8
 801a256:	464f      	mov	r7, r9
 801a258:	e9da 8900 	ldrd	r8, r9, [sl]
 801a25c:	4630      	mov	r0, r6
 801a25e:	4642      	mov	r2, r8
 801a260:	464b      	mov	r3, r9
 801a262:	4639      	mov	r1, r7
 801a264:	f7e6 f810 	bl	8000288 <__aeabi_dsub>
 801a268:	462b      	mov	r3, r5
 801a26a:	4622      	mov	r2, r4
 801a26c:	f7e6 f80c 	bl	8000288 <__aeabi_dsub>
 801a270:	9b02      	ldr	r3, [sp, #8]
 801a272:	2b00      	cmp	r3, #0
 801a274:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a278:	f6bf af0a 	bge.w	801a090 <__ieee754_rem_pio2+0x80>
 801a27c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a280:	f8ca 3004 	str.w	r3, [sl, #4]
 801a284:	f8ca 8000 	str.w	r8, [sl]
 801a288:	f8ca 0008 	str.w	r0, [sl, #8]
 801a28c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a290:	f8ca 300c 	str.w	r3, [sl, #12]
 801a294:	f1cb 0b00 	rsb	fp, fp, #0
 801a298:	e6fa      	b.n	801a090 <__ieee754_rem_pio2+0x80>
 801a29a:	a327      	add	r3, pc, #156	; (adr r3, 801a338 <__ieee754_rem_pio2+0x328>)
 801a29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2a0:	ec51 0b18 	vmov	r0, r1, d8
 801a2a4:	f7e6 f9a8 	bl	80005f8 <__aeabi_dmul>
 801a2a8:	4604      	mov	r4, r0
 801a2aa:	460d      	mov	r5, r1
 801a2ac:	4602      	mov	r2, r0
 801a2ae:	460b      	mov	r3, r1
 801a2b0:	4640      	mov	r0, r8
 801a2b2:	4649      	mov	r1, r9
 801a2b4:	f7e5 ffe8 	bl	8000288 <__aeabi_dsub>
 801a2b8:	4602      	mov	r2, r0
 801a2ba:	460b      	mov	r3, r1
 801a2bc:	4606      	mov	r6, r0
 801a2be:	460f      	mov	r7, r1
 801a2c0:	4640      	mov	r0, r8
 801a2c2:	4649      	mov	r1, r9
 801a2c4:	f7e5 ffe0 	bl	8000288 <__aeabi_dsub>
 801a2c8:	4622      	mov	r2, r4
 801a2ca:	462b      	mov	r3, r5
 801a2cc:	f7e5 ffdc 	bl	8000288 <__aeabi_dsub>
 801a2d0:	a31b      	add	r3, pc, #108	; (adr r3, 801a340 <__ieee754_rem_pio2+0x330>)
 801a2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2d6:	4604      	mov	r4, r0
 801a2d8:	460d      	mov	r5, r1
 801a2da:	ec51 0b18 	vmov	r0, r1, d8
 801a2de:	f7e6 f98b 	bl	80005f8 <__aeabi_dmul>
 801a2e2:	4622      	mov	r2, r4
 801a2e4:	462b      	mov	r3, r5
 801a2e6:	f7e5 ffcf 	bl	8000288 <__aeabi_dsub>
 801a2ea:	4604      	mov	r4, r0
 801a2ec:	460d      	mov	r5, r1
 801a2ee:	e75f      	b.n	801a1b0 <__ieee754_rem_pio2+0x1a0>
 801a2f0:	4b1b      	ldr	r3, [pc, #108]	; (801a360 <__ieee754_rem_pio2+0x350>)
 801a2f2:	4598      	cmp	r8, r3
 801a2f4:	dd36      	ble.n	801a364 <__ieee754_rem_pio2+0x354>
 801a2f6:	ee10 2a10 	vmov	r2, s0
 801a2fa:	462b      	mov	r3, r5
 801a2fc:	4620      	mov	r0, r4
 801a2fe:	4629      	mov	r1, r5
 801a300:	f7e5 ffc2 	bl	8000288 <__aeabi_dsub>
 801a304:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a308:	e9ca 0100 	strd	r0, r1, [sl]
 801a30c:	e694      	b.n	801a038 <__ieee754_rem_pio2+0x28>
 801a30e:	bf00      	nop
 801a310:	54400000 	.word	0x54400000
 801a314:	3ff921fb 	.word	0x3ff921fb
 801a318:	1a626331 	.word	0x1a626331
 801a31c:	3dd0b461 	.word	0x3dd0b461
 801a320:	1a600000 	.word	0x1a600000
 801a324:	3dd0b461 	.word	0x3dd0b461
 801a328:	2e037073 	.word	0x2e037073
 801a32c:	3ba3198a 	.word	0x3ba3198a
 801a330:	6dc9c883 	.word	0x6dc9c883
 801a334:	3fe45f30 	.word	0x3fe45f30
 801a338:	2e000000 	.word	0x2e000000
 801a33c:	3ba3198a 	.word	0x3ba3198a
 801a340:	252049c1 	.word	0x252049c1
 801a344:	397b839a 	.word	0x397b839a
 801a348:	3fe921fb 	.word	0x3fe921fb
 801a34c:	4002d97b 	.word	0x4002d97b
 801a350:	3ff921fb 	.word	0x3ff921fb
 801a354:	413921fb 	.word	0x413921fb
 801a358:	3fe00000 	.word	0x3fe00000
 801a35c:	0801bc68 	.word	0x0801bc68
 801a360:	7fefffff 	.word	0x7fefffff
 801a364:	ea4f 5428 	mov.w	r4, r8, asr #20
 801a368:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801a36c:	ee10 0a10 	vmov	r0, s0
 801a370:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801a374:	ee10 6a10 	vmov	r6, s0
 801a378:	460f      	mov	r7, r1
 801a37a:	f7e6 fbed 	bl	8000b58 <__aeabi_d2iz>
 801a37e:	f7e6 f8d1 	bl	8000524 <__aeabi_i2d>
 801a382:	4602      	mov	r2, r0
 801a384:	460b      	mov	r3, r1
 801a386:	4630      	mov	r0, r6
 801a388:	4639      	mov	r1, r7
 801a38a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a38e:	f7e5 ff7b 	bl	8000288 <__aeabi_dsub>
 801a392:	4b22      	ldr	r3, [pc, #136]	; (801a41c <__ieee754_rem_pio2+0x40c>)
 801a394:	2200      	movs	r2, #0
 801a396:	f7e6 f92f 	bl	80005f8 <__aeabi_dmul>
 801a39a:	460f      	mov	r7, r1
 801a39c:	4606      	mov	r6, r0
 801a39e:	f7e6 fbdb 	bl	8000b58 <__aeabi_d2iz>
 801a3a2:	f7e6 f8bf 	bl	8000524 <__aeabi_i2d>
 801a3a6:	4602      	mov	r2, r0
 801a3a8:	460b      	mov	r3, r1
 801a3aa:	4630      	mov	r0, r6
 801a3ac:	4639      	mov	r1, r7
 801a3ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a3b2:	f7e5 ff69 	bl	8000288 <__aeabi_dsub>
 801a3b6:	4b19      	ldr	r3, [pc, #100]	; (801a41c <__ieee754_rem_pio2+0x40c>)
 801a3b8:	2200      	movs	r2, #0
 801a3ba:	f7e6 f91d 	bl	80005f8 <__aeabi_dmul>
 801a3be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a3c2:	ad04      	add	r5, sp, #16
 801a3c4:	f04f 0803 	mov.w	r8, #3
 801a3c8:	46a9      	mov	r9, r5
 801a3ca:	2600      	movs	r6, #0
 801a3cc:	2700      	movs	r7, #0
 801a3ce:	4632      	mov	r2, r6
 801a3d0:	463b      	mov	r3, r7
 801a3d2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801a3d6:	46c3      	mov	fp, r8
 801a3d8:	3d08      	subs	r5, #8
 801a3da:	f108 38ff 	add.w	r8, r8, #4294967295
 801a3de:	f7e6 fb73 	bl	8000ac8 <__aeabi_dcmpeq>
 801a3e2:	2800      	cmp	r0, #0
 801a3e4:	d1f3      	bne.n	801a3ce <__ieee754_rem_pio2+0x3be>
 801a3e6:	4b0e      	ldr	r3, [pc, #56]	; (801a420 <__ieee754_rem_pio2+0x410>)
 801a3e8:	9301      	str	r3, [sp, #4]
 801a3ea:	2302      	movs	r3, #2
 801a3ec:	9300      	str	r3, [sp, #0]
 801a3ee:	4622      	mov	r2, r4
 801a3f0:	465b      	mov	r3, fp
 801a3f2:	4651      	mov	r1, sl
 801a3f4:	4648      	mov	r0, r9
 801a3f6:	f000 f993 	bl	801a720 <__kernel_rem_pio2>
 801a3fa:	9b02      	ldr	r3, [sp, #8]
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	4683      	mov	fp, r0
 801a400:	f6bf ae46 	bge.w	801a090 <__ieee754_rem_pio2+0x80>
 801a404:	f8da 3004 	ldr.w	r3, [sl, #4]
 801a408:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a40c:	f8ca 3004 	str.w	r3, [sl, #4]
 801a410:	f8da 300c 	ldr.w	r3, [sl, #12]
 801a414:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a418:	e73a      	b.n	801a290 <__ieee754_rem_pio2+0x280>
 801a41a:	bf00      	nop
 801a41c:	41700000 	.word	0x41700000
 801a420:	0801bce8 	.word	0x0801bce8

0801a424 <__ieee754_sqrt>:
 801a424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a428:	ec55 4b10 	vmov	r4, r5, d0
 801a42c:	4e56      	ldr	r6, [pc, #344]	; (801a588 <__ieee754_sqrt+0x164>)
 801a42e:	43ae      	bics	r6, r5
 801a430:	ee10 0a10 	vmov	r0, s0
 801a434:	ee10 3a10 	vmov	r3, s0
 801a438:	4629      	mov	r1, r5
 801a43a:	462a      	mov	r2, r5
 801a43c:	d110      	bne.n	801a460 <__ieee754_sqrt+0x3c>
 801a43e:	ee10 2a10 	vmov	r2, s0
 801a442:	462b      	mov	r3, r5
 801a444:	f7e6 f8d8 	bl	80005f8 <__aeabi_dmul>
 801a448:	4602      	mov	r2, r0
 801a44a:	460b      	mov	r3, r1
 801a44c:	4620      	mov	r0, r4
 801a44e:	4629      	mov	r1, r5
 801a450:	f7e5 ff1c 	bl	800028c <__adddf3>
 801a454:	4604      	mov	r4, r0
 801a456:	460d      	mov	r5, r1
 801a458:	ec45 4b10 	vmov	d0, r4, r5
 801a45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a460:	2d00      	cmp	r5, #0
 801a462:	dc10      	bgt.n	801a486 <__ieee754_sqrt+0x62>
 801a464:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a468:	4330      	orrs	r0, r6
 801a46a:	d0f5      	beq.n	801a458 <__ieee754_sqrt+0x34>
 801a46c:	b15d      	cbz	r5, 801a486 <__ieee754_sqrt+0x62>
 801a46e:	ee10 2a10 	vmov	r2, s0
 801a472:	462b      	mov	r3, r5
 801a474:	ee10 0a10 	vmov	r0, s0
 801a478:	f7e5 ff06 	bl	8000288 <__aeabi_dsub>
 801a47c:	4602      	mov	r2, r0
 801a47e:	460b      	mov	r3, r1
 801a480:	f7e6 f9e4 	bl	800084c <__aeabi_ddiv>
 801a484:	e7e6      	b.n	801a454 <__ieee754_sqrt+0x30>
 801a486:	1509      	asrs	r1, r1, #20
 801a488:	d076      	beq.n	801a578 <__ieee754_sqrt+0x154>
 801a48a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801a48e:	07ce      	lsls	r6, r1, #31
 801a490:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801a494:	bf5e      	ittt	pl
 801a496:	0fda      	lsrpl	r2, r3, #31
 801a498:	005b      	lslpl	r3, r3, #1
 801a49a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801a49e:	0fda      	lsrs	r2, r3, #31
 801a4a0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801a4a4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801a4a8:	2000      	movs	r0, #0
 801a4aa:	106d      	asrs	r5, r5, #1
 801a4ac:	005b      	lsls	r3, r3, #1
 801a4ae:	f04f 0e16 	mov.w	lr, #22
 801a4b2:	4684      	mov	ip, r0
 801a4b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801a4b8:	eb0c 0401 	add.w	r4, ip, r1
 801a4bc:	4294      	cmp	r4, r2
 801a4be:	bfde      	ittt	le
 801a4c0:	1b12      	suble	r2, r2, r4
 801a4c2:	eb04 0c01 	addle.w	ip, r4, r1
 801a4c6:	1840      	addle	r0, r0, r1
 801a4c8:	0052      	lsls	r2, r2, #1
 801a4ca:	f1be 0e01 	subs.w	lr, lr, #1
 801a4ce:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801a4d2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801a4d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a4da:	d1ed      	bne.n	801a4b8 <__ieee754_sqrt+0x94>
 801a4dc:	4671      	mov	r1, lr
 801a4de:	2720      	movs	r7, #32
 801a4e0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801a4e4:	4562      	cmp	r2, ip
 801a4e6:	eb04 060e 	add.w	r6, r4, lr
 801a4ea:	dc02      	bgt.n	801a4f2 <__ieee754_sqrt+0xce>
 801a4ec:	d113      	bne.n	801a516 <__ieee754_sqrt+0xf2>
 801a4ee:	429e      	cmp	r6, r3
 801a4f0:	d811      	bhi.n	801a516 <__ieee754_sqrt+0xf2>
 801a4f2:	2e00      	cmp	r6, #0
 801a4f4:	eb06 0e04 	add.w	lr, r6, r4
 801a4f8:	da43      	bge.n	801a582 <__ieee754_sqrt+0x15e>
 801a4fa:	f1be 0f00 	cmp.w	lr, #0
 801a4fe:	db40      	blt.n	801a582 <__ieee754_sqrt+0x15e>
 801a500:	f10c 0801 	add.w	r8, ip, #1
 801a504:	eba2 020c 	sub.w	r2, r2, ip
 801a508:	429e      	cmp	r6, r3
 801a50a:	bf88      	it	hi
 801a50c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a510:	1b9b      	subs	r3, r3, r6
 801a512:	4421      	add	r1, r4
 801a514:	46c4      	mov	ip, r8
 801a516:	0052      	lsls	r2, r2, #1
 801a518:	3f01      	subs	r7, #1
 801a51a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801a51e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801a522:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a526:	d1dd      	bne.n	801a4e4 <__ieee754_sqrt+0xc0>
 801a528:	4313      	orrs	r3, r2
 801a52a:	d006      	beq.n	801a53a <__ieee754_sqrt+0x116>
 801a52c:	1c4c      	adds	r4, r1, #1
 801a52e:	bf13      	iteet	ne
 801a530:	3101      	addne	r1, #1
 801a532:	3001      	addeq	r0, #1
 801a534:	4639      	moveq	r1, r7
 801a536:	f021 0101 	bicne.w	r1, r1, #1
 801a53a:	1043      	asrs	r3, r0, #1
 801a53c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801a540:	0849      	lsrs	r1, r1, #1
 801a542:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801a546:	07c2      	lsls	r2, r0, #31
 801a548:	bf48      	it	mi
 801a54a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801a54e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801a552:	460c      	mov	r4, r1
 801a554:	463d      	mov	r5, r7
 801a556:	e77f      	b.n	801a458 <__ieee754_sqrt+0x34>
 801a558:	0ada      	lsrs	r2, r3, #11
 801a55a:	3815      	subs	r0, #21
 801a55c:	055b      	lsls	r3, r3, #21
 801a55e:	2a00      	cmp	r2, #0
 801a560:	d0fa      	beq.n	801a558 <__ieee754_sqrt+0x134>
 801a562:	02d7      	lsls	r7, r2, #11
 801a564:	d50a      	bpl.n	801a57c <__ieee754_sqrt+0x158>
 801a566:	f1c1 0420 	rsb	r4, r1, #32
 801a56a:	fa23 f404 	lsr.w	r4, r3, r4
 801a56e:	1e4d      	subs	r5, r1, #1
 801a570:	408b      	lsls	r3, r1
 801a572:	4322      	orrs	r2, r4
 801a574:	1b41      	subs	r1, r0, r5
 801a576:	e788      	b.n	801a48a <__ieee754_sqrt+0x66>
 801a578:	4608      	mov	r0, r1
 801a57a:	e7f0      	b.n	801a55e <__ieee754_sqrt+0x13a>
 801a57c:	0052      	lsls	r2, r2, #1
 801a57e:	3101      	adds	r1, #1
 801a580:	e7ef      	b.n	801a562 <__ieee754_sqrt+0x13e>
 801a582:	46e0      	mov	r8, ip
 801a584:	e7be      	b.n	801a504 <__ieee754_sqrt+0xe0>
 801a586:	bf00      	nop
 801a588:	7ff00000 	.word	0x7ff00000
 801a58c:	00000000 	.word	0x00000000

0801a590 <__kernel_cos>:
 801a590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a594:	ec57 6b10 	vmov	r6, r7, d0
 801a598:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801a59c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801a5a0:	ed8d 1b00 	vstr	d1, [sp]
 801a5a4:	da07      	bge.n	801a5b6 <__kernel_cos+0x26>
 801a5a6:	ee10 0a10 	vmov	r0, s0
 801a5aa:	4639      	mov	r1, r7
 801a5ac:	f7e6 fad4 	bl	8000b58 <__aeabi_d2iz>
 801a5b0:	2800      	cmp	r0, #0
 801a5b2:	f000 8088 	beq.w	801a6c6 <__kernel_cos+0x136>
 801a5b6:	4632      	mov	r2, r6
 801a5b8:	463b      	mov	r3, r7
 801a5ba:	4630      	mov	r0, r6
 801a5bc:	4639      	mov	r1, r7
 801a5be:	f7e6 f81b 	bl	80005f8 <__aeabi_dmul>
 801a5c2:	4b51      	ldr	r3, [pc, #324]	; (801a708 <__kernel_cos+0x178>)
 801a5c4:	2200      	movs	r2, #0
 801a5c6:	4604      	mov	r4, r0
 801a5c8:	460d      	mov	r5, r1
 801a5ca:	f7e6 f815 	bl	80005f8 <__aeabi_dmul>
 801a5ce:	a340      	add	r3, pc, #256	; (adr r3, 801a6d0 <__kernel_cos+0x140>)
 801a5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5d4:	4682      	mov	sl, r0
 801a5d6:	468b      	mov	fp, r1
 801a5d8:	4620      	mov	r0, r4
 801a5da:	4629      	mov	r1, r5
 801a5dc:	f7e6 f80c 	bl	80005f8 <__aeabi_dmul>
 801a5e0:	a33d      	add	r3, pc, #244	; (adr r3, 801a6d8 <__kernel_cos+0x148>)
 801a5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5e6:	f7e5 fe51 	bl	800028c <__adddf3>
 801a5ea:	4622      	mov	r2, r4
 801a5ec:	462b      	mov	r3, r5
 801a5ee:	f7e6 f803 	bl	80005f8 <__aeabi_dmul>
 801a5f2:	a33b      	add	r3, pc, #236	; (adr r3, 801a6e0 <__kernel_cos+0x150>)
 801a5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5f8:	f7e5 fe46 	bl	8000288 <__aeabi_dsub>
 801a5fc:	4622      	mov	r2, r4
 801a5fe:	462b      	mov	r3, r5
 801a600:	f7e5 fffa 	bl	80005f8 <__aeabi_dmul>
 801a604:	a338      	add	r3, pc, #224	; (adr r3, 801a6e8 <__kernel_cos+0x158>)
 801a606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a60a:	f7e5 fe3f 	bl	800028c <__adddf3>
 801a60e:	4622      	mov	r2, r4
 801a610:	462b      	mov	r3, r5
 801a612:	f7e5 fff1 	bl	80005f8 <__aeabi_dmul>
 801a616:	a336      	add	r3, pc, #216	; (adr r3, 801a6f0 <__kernel_cos+0x160>)
 801a618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a61c:	f7e5 fe34 	bl	8000288 <__aeabi_dsub>
 801a620:	4622      	mov	r2, r4
 801a622:	462b      	mov	r3, r5
 801a624:	f7e5 ffe8 	bl	80005f8 <__aeabi_dmul>
 801a628:	a333      	add	r3, pc, #204	; (adr r3, 801a6f8 <__kernel_cos+0x168>)
 801a62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a62e:	f7e5 fe2d 	bl	800028c <__adddf3>
 801a632:	4622      	mov	r2, r4
 801a634:	462b      	mov	r3, r5
 801a636:	f7e5 ffdf 	bl	80005f8 <__aeabi_dmul>
 801a63a:	4622      	mov	r2, r4
 801a63c:	462b      	mov	r3, r5
 801a63e:	f7e5 ffdb 	bl	80005f8 <__aeabi_dmul>
 801a642:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a646:	4604      	mov	r4, r0
 801a648:	460d      	mov	r5, r1
 801a64a:	4630      	mov	r0, r6
 801a64c:	4639      	mov	r1, r7
 801a64e:	f7e5 ffd3 	bl	80005f8 <__aeabi_dmul>
 801a652:	460b      	mov	r3, r1
 801a654:	4602      	mov	r2, r0
 801a656:	4629      	mov	r1, r5
 801a658:	4620      	mov	r0, r4
 801a65a:	f7e5 fe15 	bl	8000288 <__aeabi_dsub>
 801a65e:	4b2b      	ldr	r3, [pc, #172]	; (801a70c <__kernel_cos+0x17c>)
 801a660:	4598      	cmp	r8, r3
 801a662:	4606      	mov	r6, r0
 801a664:	460f      	mov	r7, r1
 801a666:	dc10      	bgt.n	801a68a <__kernel_cos+0xfa>
 801a668:	4602      	mov	r2, r0
 801a66a:	460b      	mov	r3, r1
 801a66c:	4650      	mov	r0, sl
 801a66e:	4659      	mov	r1, fp
 801a670:	f7e5 fe0a 	bl	8000288 <__aeabi_dsub>
 801a674:	460b      	mov	r3, r1
 801a676:	4926      	ldr	r1, [pc, #152]	; (801a710 <__kernel_cos+0x180>)
 801a678:	4602      	mov	r2, r0
 801a67a:	2000      	movs	r0, #0
 801a67c:	f7e5 fe04 	bl	8000288 <__aeabi_dsub>
 801a680:	ec41 0b10 	vmov	d0, r0, r1
 801a684:	b003      	add	sp, #12
 801a686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a68a:	4b22      	ldr	r3, [pc, #136]	; (801a714 <__kernel_cos+0x184>)
 801a68c:	4920      	ldr	r1, [pc, #128]	; (801a710 <__kernel_cos+0x180>)
 801a68e:	4598      	cmp	r8, r3
 801a690:	bfcc      	ite	gt
 801a692:	4d21      	ldrgt	r5, [pc, #132]	; (801a718 <__kernel_cos+0x188>)
 801a694:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801a698:	2400      	movs	r4, #0
 801a69a:	4622      	mov	r2, r4
 801a69c:	462b      	mov	r3, r5
 801a69e:	2000      	movs	r0, #0
 801a6a0:	f7e5 fdf2 	bl	8000288 <__aeabi_dsub>
 801a6a4:	4622      	mov	r2, r4
 801a6a6:	4680      	mov	r8, r0
 801a6a8:	4689      	mov	r9, r1
 801a6aa:	462b      	mov	r3, r5
 801a6ac:	4650      	mov	r0, sl
 801a6ae:	4659      	mov	r1, fp
 801a6b0:	f7e5 fdea 	bl	8000288 <__aeabi_dsub>
 801a6b4:	4632      	mov	r2, r6
 801a6b6:	463b      	mov	r3, r7
 801a6b8:	f7e5 fde6 	bl	8000288 <__aeabi_dsub>
 801a6bc:	4602      	mov	r2, r0
 801a6be:	460b      	mov	r3, r1
 801a6c0:	4640      	mov	r0, r8
 801a6c2:	4649      	mov	r1, r9
 801a6c4:	e7da      	b.n	801a67c <__kernel_cos+0xec>
 801a6c6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801a700 <__kernel_cos+0x170>
 801a6ca:	e7db      	b.n	801a684 <__kernel_cos+0xf4>
 801a6cc:	f3af 8000 	nop.w
 801a6d0:	be8838d4 	.word	0xbe8838d4
 801a6d4:	bda8fae9 	.word	0xbda8fae9
 801a6d8:	bdb4b1c4 	.word	0xbdb4b1c4
 801a6dc:	3e21ee9e 	.word	0x3e21ee9e
 801a6e0:	809c52ad 	.word	0x809c52ad
 801a6e4:	3e927e4f 	.word	0x3e927e4f
 801a6e8:	19cb1590 	.word	0x19cb1590
 801a6ec:	3efa01a0 	.word	0x3efa01a0
 801a6f0:	16c15177 	.word	0x16c15177
 801a6f4:	3f56c16c 	.word	0x3f56c16c
 801a6f8:	5555554c 	.word	0x5555554c
 801a6fc:	3fa55555 	.word	0x3fa55555
 801a700:	00000000 	.word	0x00000000
 801a704:	3ff00000 	.word	0x3ff00000
 801a708:	3fe00000 	.word	0x3fe00000
 801a70c:	3fd33332 	.word	0x3fd33332
 801a710:	3ff00000 	.word	0x3ff00000
 801a714:	3fe90000 	.word	0x3fe90000
 801a718:	3fd20000 	.word	0x3fd20000
 801a71c:	00000000 	.word	0x00000000

0801a720 <__kernel_rem_pio2>:
 801a720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a724:	ed2d 8b02 	vpush	{d8}
 801a728:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801a72c:	f112 0f14 	cmn.w	r2, #20
 801a730:	9308      	str	r3, [sp, #32]
 801a732:	9101      	str	r1, [sp, #4]
 801a734:	4bc6      	ldr	r3, [pc, #792]	; (801aa50 <__kernel_rem_pio2+0x330>)
 801a736:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801a738:	9009      	str	r0, [sp, #36]	; 0x24
 801a73a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a73e:	9304      	str	r3, [sp, #16]
 801a740:	9b08      	ldr	r3, [sp, #32]
 801a742:	f103 33ff 	add.w	r3, r3, #4294967295
 801a746:	bfa8      	it	ge
 801a748:	1ed4      	subge	r4, r2, #3
 801a74a:	9306      	str	r3, [sp, #24]
 801a74c:	bfb2      	itee	lt
 801a74e:	2400      	movlt	r4, #0
 801a750:	2318      	movge	r3, #24
 801a752:	fb94 f4f3 	sdivge	r4, r4, r3
 801a756:	f06f 0317 	mvn.w	r3, #23
 801a75a:	fb04 3303 	mla	r3, r4, r3, r3
 801a75e:	eb03 0a02 	add.w	sl, r3, r2
 801a762:	9b04      	ldr	r3, [sp, #16]
 801a764:	9a06      	ldr	r2, [sp, #24]
 801a766:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801aa40 <__kernel_rem_pio2+0x320>
 801a76a:	eb03 0802 	add.w	r8, r3, r2
 801a76e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801a770:	1aa7      	subs	r7, r4, r2
 801a772:	ae20      	add	r6, sp, #128	; 0x80
 801a774:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801a778:	2500      	movs	r5, #0
 801a77a:	4545      	cmp	r5, r8
 801a77c:	dd18      	ble.n	801a7b0 <__kernel_rem_pio2+0x90>
 801a77e:	9b08      	ldr	r3, [sp, #32]
 801a780:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801a784:	aa20      	add	r2, sp, #128	; 0x80
 801a786:	ed9f 8bae 	vldr	d8, [pc, #696]	; 801aa40 <__kernel_rem_pio2+0x320>
 801a78a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801a78e:	f1c3 0301 	rsb	r3, r3, #1
 801a792:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801a796:	9307      	str	r3, [sp, #28]
 801a798:	9b07      	ldr	r3, [sp, #28]
 801a79a:	9a04      	ldr	r2, [sp, #16]
 801a79c:	4443      	add	r3, r8
 801a79e:	429a      	cmp	r2, r3
 801a7a0:	db2f      	blt.n	801a802 <__kernel_rem_pio2+0xe2>
 801a7a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a7a6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801a7aa:	462f      	mov	r7, r5
 801a7ac:	2600      	movs	r6, #0
 801a7ae:	e01b      	b.n	801a7e8 <__kernel_rem_pio2+0xc8>
 801a7b0:	42ef      	cmn	r7, r5
 801a7b2:	d407      	bmi.n	801a7c4 <__kernel_rem_pio2+0xa4>
 801a7b4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801a7b8:	f7e5 feb4 	bl	8000524 <__aeabi_i2d>
 801a7bc:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a7c0:	3501      	adds	r5, #1
 801a7c2:	e7da      	b.n	801a77a <__kernel_rem_pio2+0x5a>
 801a7c4:	ec51 0b18 	vmov	r0, r1, d8
 801a7c8:	e7f8      	b.n	801a7bc <__kernel_rem_pio2+0x9c>
 801a7ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a7ce:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801a7d2:	f7e5 ff11 	bl	80005f8 <__aeabi_dmul>
 801a7d6:	4602      	mov	r2, r0
 801a7d8:	460b      	mov	r3, r1
 801a7da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a7de:	f7e5 fd55 	bl	800028c <__adddf3>
 801a7e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a7e6:	3601      	adds	r6, #1
 801a7e8:	9b06      	ldr	r3, [sp, #24]
 801a7ea:	429e      	cmp	r6, r3
 801a7ec:	f1a7 0708 	sub.w	r7, r7, #8
 801a7f0:	ddeb      	ble.n	801a7ca <__kernel_rem_pio2+0xaa>
 801a7f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a7f6:	3508      	adds	r5, #8
 801a7f8:	ecab 7b02 	vstmia	fp!, {d7}
 801a7fc:	f108 0801 	add.w	r8, r8, #1
 801a800:	e7ca      	b.n	801a798 <__kernel_rem_pio2+0x78>
 801a802:	9b04      	ldr	r3, [sp, #16]
 801a804:	aa0c      	add	r2, sp, #48	; 0x30
 801a806:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a80a:	930b      	str	r3, [sp, #44]	; 0x2c
 801a80c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801a80e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a812:	9c04      	ldr	r4, [sp, #16]
 801a814:	930a      	str	r3, [sp, #40]	; 0x28
 801a816:	ab98      	add	r3, sp, #608	; 0x260
 801a818:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a81c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801a820:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 801a824:	f8cd b008 	str.w	fp, [sp, #8]
 801a828:	4625      	mov	r5, r4
 801a82a:	2d00      	cmp	r5, #0
 801a82c:	dc78      	bgt.n	801a920 <__kernel_rem_pio2+0x200>
 801a82e:	ec47 6b10 	vmov	d0, r6, r7
 801a832:	4650      	mov	r0, sl
 801a834:	f000 fda0 	bl	801b378 <scalbn>
 801a838:	ec57 6b10 	vmov	r6, r7, d0
 801a83c:	2200      	movs	r2, #0
 801a83e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801a842:	ee10 0a10 	vmov	r0, s0
 801a846:	4639      	mov	r1, r7
 801a848:	f7e5 fed6 	bl	80005f8 <__aeabi_dmul>
 801a84c:	ec41 0b10 	vmov	d0, r0, r1
 801a850:	f000 fd12 	bl	801b278 <floor>
 801a854:	4b7f      	ldr	r3, [pc, #508]	; (801aa54 <__kernel_rem_pio2+0x334>)
 801a856:	ec51 0b10 	vmov	r0, r1, d0
 801a85a:	2200      	movs	r2, #0
 801a85c:	f7e5 fecc 	bl	80005f8 <__aeabi_dmul>
 801a860:	4602      	mov	r2, r0
 801a862:	460b      	mov	r3, r1
 801a864:	4630      	mov	r0, r6
 801a866:	4639      	mov	r1, r7
 801a868:	f7e5 fd0e 	bl	8000288 <__aeabi_dsub>
 801a86c:	460f      	mov	r7, r1
 801a86e:	4606      	mov	r6, r0
 801a870:	f7e6 f972 	bl	8000b58 <__aeabi_d2iz>
 801a874:	9007      	str	r0, [sp, #28]
 801a876:	f7e5 fe55 	bl	8000524 <__aeabi_i2d>
 801a87a:	4602      	mov	r2, r0
 801a87c:	460b      	mov	r3, r1
 801a87e:	4630      	mov	r0, r6
 801a880:	4639      	mov	r1, r7
 801a882:	f7e5 fd01 	bl	8000288 <__aeabi_dsub>
 801a886:	f1ba 0f00 	cmp.w	sl, #0
 801a88a:	4606      	mov	r6, r0
 801a88c:	460f      	mov	r7, r1
 801a88e:	dd70      	ble.n	801a972 <__kernel_rem_pio2+0x252>
 801a890:	1e62      	subs	r2, r4, #1
 801a892:	ab0c      	add	r3, sp, #48	; 0x30
 801a894:	9d07      	ldr	r5, [sp, #28]
 801a896:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a89a:	f1ca 0118 	rsb	r1, sl, #24
 801a89e:	fa40 f301 	asr.w	r3, r0, r1
 801a8a2:	441d      	add	r5, r3
 801a8a4:	408b      	lsls	r3, r1
 801a8a6:	1ac0      	subs	r0, r0, r3
 801a8a8:	ab0c      	add	r3, sp, #48	; 0x30
 801a8aa:	9507      	str	r5, [sp, #28]
 801a8ac:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801a8b0:	f1ca 0317 	rsb	r3, sl, #23
 801a8b4:	fa40 f303 	asr.w	r3, r0, r3
 801a8b8:	9302      	str	r3, [sp, #8]
 801a8ba:	9b02      	ldr	r3, [sp, #8]
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	dd66      	ble.n	801a98e <__kernel_rem_pio2+0x26e>
 801a8c0:	9b07      	ldr	r3, [sp, #28]
 801a8c2:	2200      	movs	r2, #0
 801a8c4:	3301      	adds	r3, #1
 801a8c6:	9307      	str	r3, [sp, #28]
 801a8c8:	4615      	mov	r5, r2
 801a8ca:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801a8ce:	4294      	cmp	r4, r2
 801a8d0:	f300 8099 	bgt.w	801aa06 <__kernel_rem_pio2+0x2e6>
 801a8d4:	f1ba 0f00 	cmp.w	sl, #0
 801a8d8:	dd07      	ble.n	801a8ea <__kernel_rem_pio2+0x1ca>
 801a8da:	f1ba 0f01 	cmp.w	sl, #1
 801a8de:	f000 80a5 	beq.w	801aa2c <__kernel_rem_pio2+0x30c>
 801a8e2:	f1ba 0f02 	cmp.w	sl, #2
 801a8e6:	f000 80c1 	beq.w	801aa6c <__kernel_rem_pio2+0x34c>
 801a8ea:	9b02      	ldr	r3, [sp, #8]
 801a8ec:	2b02      	cmp	r3, #2
 801a8ee:	d14e      	bne.n	801a98e <__kernel_rem_pio2+0x26e>
 801a8f0:	4632      	mov	r2, r6
 801a8f2:	463b      	mov	r3, r7
 801a8f4:	4958      	ldr	r1, [pc, #352]	; (801aa58 <__kernel_rem_pio2+0x338>)
 801a8f6:	2000      	movs	r0, #0
 801a8f8:	f7e5 fcc6 	bl	8000288 <__aeabi_dsub>
 801a8fc:	4606      	mov	r6, r0
 801a8fe:	460f      	mov	r7, r1
 801a900:	2d00      	cmp	r5, #0
 801a902:	d044      	beq.n	801a98e <__kernel_rem_pio2+0x26e>
 801a904:	4650      	mov	r0, sl
 801a906:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801aa48 <__kernel_rem_pio2+0x328>
 801a90a:	f000 fd35 	bl	801b378 <scalbn>
 801a90e:	4630      	mov	r0, r6
 801a910:	4639      	mov	r1, r7
 801a912:	ec53 2b10 	vmov	r2, r3, d0
 801a916:	f7e5 fcb7 	bl	8000288 <__aeabi_dsub>
 801a91a:	4606      	mov	r6, r0
 801a91c:	460f      	mov	r7, r1
 801a91e:	e036      	b.n	801a98e <__kernel_rem_pio2+0x26e>
 801a920:	4b4e      	ldr	r3, [pc, #312]	; (801aa5c <__kernel_rem_pio2+0x33c>)
 801a922:	2200      	movs	r2, #0
 801a924:	4630      	mov	r0, r6
 801a926:	4639      	mov	r1, r7
 801a928:	f7e5 fe66 	bl	80005f8 <__aeabi_dmul>
 801a92c:	f7e6 f914 	bl	8000b58 <__aeabi_d2iz>
 801a930:	f7e5 fdf8 	bl	8000524 <__aeabi_i2d>
 801a934:	4b4a      	ldr	r3, [pc, #296]	; (801aa60 <__kernel_rem_pio2+0x340>)
 801a936:	2200      	movs	r2, #0
 801a938:	4680      	mov	r8, r0
 801a93a:	4689      	mov	r9, r1
 801a93c:	f7e5 fe5c 	bl	80005f8 <__aeabi_dmul>
 801a940:	4602      	mov	r2, r0
 801a942:	460b      	mov	r3, r1
 801a944:	4630      	mov	r0, r6
 801a946:	4639      	mov	r1, r7
 801a948:	f7e5 fc9e 	bl	8000288 <__aeabi_dsub>
 801a94c:	f7e6 f904 	bl	8000b58 <__aeabi_d2iz>
 801a950:	9b02      	ldr	r3, [sp, #8]
 801a952:	f843 0b04 	str.w	r0, [r3], #4
 801a956:	3d01      	subs	r5, #1
 801a958:	9302      	str	r3, [sp, #8]
 801a95a:	ab70      	add	r3, sp, #448	; 0x1c0
 801a95c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a960:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a964:	4640      	mov	r0, r8
 801a966:	4649      	mov	r1, r9
 801a968:	f7e5 fc90 	bl	800028c <__adddf3>
 801a96c:	4606      	mov	r6, r0
 801a96e:	460f      	mov	r7, r1
 801a970:	e75b      	b.n	801a82a <__kernel_rem_pio2+0x10a>
 801a972:	d105      	bne.n	801a980 <__kernel_rem_pio2+0x260>
 801a974:	1e63      	subs	r3, r4, #1
 801a976:	aa0c      	add	r2, sp, #48	; 0x30
 801a978:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a97c:	15c3      	asrs	r3, r0, #23
 801a97e:	e79b      	b.n	801a8b8 <__kernel_rem_pio2+0x198>
 801a980:	4b38      	ldr	r3, [pc, #224]	; (801aa64 <__kernel_rem_pio2+0x344>)
 801a982:	2200      	movs	r2, #0
 801a984:	f7e6 f8be 	bl	8000b04 <__aeabi_dcmpge>
 801a988:	2800      	cmp	r0, #0
 801a98a:	d139      	bne.n	801aa00 <__kernel_rem_pio2+0x2e0>
 801a98c:	9002      	str	r0, [sp, #8]
 801a98e:	2200      	movs	r2, #0
 801a990:	2300      	movs	r3, #0
 801a992:	4630      	mov	r0, r6
 801a994:	4639      	mov	r1, r7
 801a996:	f7e6 f897 	bl	8000ac8 <__aeabi_dcmpeq>
 801a99a:	2800      	cmp	r0, #0
 801a99c:	f000 80b4 	beq.w	801ab08 <__kernel_rem_pio2+0x3e8>
 801a9a0:	f104 3bff 	add.w	fp, r4, #4294967295
 801a9a4:	465b      	mov	r3, fp
 801a9a6:	2200      	movs	r2, #0
 801a9a8:	9904      	ldr	r1, [sp, #16]
 801a9aa:	428b      	cmp	r3, r1
 801a9ac:	da65      	bge.n	801aa7a <__kernel_rem_pio2+0x35a>
 801a9ae:	2a00      	cmp	r2, #0
 801a9b0:	d07b      	beq.n	801aaaa <__kernel_rem_pio2+0x38a>
 801a9b2:	ab0c      	add	r3, sp, #48	; 0x30
 801a9b4:	f1aa 0a18 	sub.w	sl, sl, #24
 801a9b8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	f000 80a0 	beq.w	801ab02 <__kernel_rem_pio2+0x3e2>
 801a9c2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 801aa48 <__kernel_rem_pio2+0x328>
 801a9c6:	4650      	mov	r0, sl
 801a9c8:	f000 fcd6 	bl	801b378 <scalbn>
 801a9cc:	4f23      	ldr	r7, [pc, #140]	; (801aa5c <__kernel_rem_pio2+0x33c>)
 801a9ce:	ec55 4b10 	vmov	r4, r5, d0
 801a9d2:	46d8      	mov	r8, fp
 801a9d4:	2600      	movs	r6, #0
 801a9d6:	f1b8 0f00 	cmp.w	r8, #0
 801a9da:	f280 80cf 	bge.w	801ab7c <__kernel_rem_pio2+0x45c>
 801a9de:	ed9f 8b18 	vldr	d8, [pc, #96]	; 801aa40 <__kernel_rem_pio2+0x320>
 801a9e2:	465f      	mov	r7, fp
 801a9e4:	f04f 0800 	mov.w	r8, #0
 801a9e8:	2f00      	cmp	r7, #0
 801a9ea:	f2c0 80fd 	blt.w	801abe8 <__kernel_rem_pio2+0x4c8>
 801a9ee:	ab70      	add	r3, sp, #448	; 0x1c0
 801a9f0:	f8df a074 	ldr.w	sl, [pc, #116]	; 801aa68 <__kernel_rem_pio2+0x348>
 801a9f4:	ec55 4b18 	vmov	r4, r5, d8
 801a9f8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801a9fc:	2600      	movs	r6, #0
 801a9fe:	e0e5      	b.n	801abcc <__kernel_rem_pio2+0x4ac>
 801aa00:	2302      	movs	r3, #2
 801aa02:	9302      	str	r3, [sp, #8]
 801aa04:	e75c      	b.n	801a8c0 <__kernel_rem_pio2+0x1a0>
 801aa06:	f8db 3000 	ldr.w	r3, [fp]
 801aa0a:	b955      	cbnz	r5, 801aa22 <__kernel_rem_pio2+0x302>
 801aa0c:	b123      	cbz	r3, 801aa18 <__kernel_rem_pio2+0x2f8>
 801aa0e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801aa12:	f8cb 3000 	str.w	r3, [fp]
 801aa16:	2301      	movs	r3, #1
 801aa18:	3201      	adds	r2, #1
 801aa1a:	f10b 0b04 	add.w	fp, fp, #4
 801aa1e:	461d      	mov	r5, r3
 801aa20:	e755      	b.n	801a8ce <__kernel_rem_pio2+0x1ae>
 801aa22:	1acb      	subs	r3, r1, r3
 801aa24:	f8cb 3000 	str.w	r3, [fp]
 801aa28:	462b      	mov	r3, r5
 801aa2a:	e7f5      	b.n	801aa18 <__kernel_rem_pio2+0x2f8>
 801aa2c:	1e62      	subs	r2, r4, #1
 801aa2e:	ab0c      	add	r3, sp, #48	; 0x30
 801aa30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801aa34:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801aa38:	a90c      	add	r1, sp, #48	; 0x30
 801aa3a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801aa3e:	e754      	b.n	801a8ea <__kernel_rem_pio2+0x1ca>
	...
 801aa4c:	3ff00000 	.word	0x3ff00000
 801aa50:	0801be30 	.word	0x0801be30
 801aa54:	40200000 	.word	0x40200000
 801aa58:	3ff00000 	.word	0x3ff00000
 801aa5c:	3e700000 	.word	0x3e700000
 801aa60:	41700000 	.word	0x41700000
 801aa64:	3fe00000 	.word	0x3fe00000
 801aa68:	0801bdf0 	.word	0x0801bdf0
 801aa6c:	1e62      	subs	r2, r4, #1
 801aa6e:	ab0c      	add	r3, sp, #48	; 0x30
 801aa70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801aa74:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801aa78:	e7de      	b.n	801aa38 <__kernel_rem_pio2+0x318>
 801aa7a:	a90c      	add	r1, sp, #48	; 0x30
 801aa7c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801aa80:	3b01      	subs	r3, #1
 801aa82:	430a      	orrs	r2, r1
 801aa84:	e790      	b.n	801a9a8 <__kernel_rem_pio2+0x288>
 801aa86:	3301      	adds	r3, #1
 801aa88:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801aa8c:	2900      	cmp	r1, #0
 801aa8e:	d0fa      	beq.n	801aa86 <__kernel_rem_pio2+0x366>
 801aa90:	9a08      	ldr	r2, [sp, #32]
 801aa92:	18e3      	adds	r3, r4, r3
 801aa94:	18a6      	adds	r6, r4, r2
 801aa96:	aa20      	add	r2, sp, #128	; 0x80
 801aa98:	1c65      	adds	r5, r4, #1
 801aa9a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801aa9e:	9302      	str	r3, [sp, #8]
 801aaa0:	9b02      	ldr	r3, [sp, #8]
 801aaa2:	42ab      	cmp	r3, r5
 801aaa4:	da04      	bge.n	801aab0 <__kernel_rem_pio2+0x390>
 801aaa6:	461c      	mov	r4, r3
 801aaa8:	e6b5      	b.n	801a816 <__kernel_rem_pio2+0xf6>
 801aaaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801aaac:	2301      	movs	r3, #1
 801aaae:	e7eb      	b.n	801aa88 <__kernel_rem_pio2+0x368>
 801aab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aab2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801aab6:	f7e5 fd35 	bl	8000524 <__aeabi_i2d>
 801aaba:	e8e6 0102 	strd	r0, r1, [r6], #8
 801aabe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aac0:	46b3      	mov	fp, r6
 801aac2:	461c      	mov	r4, r3
 801aac4:	2700      	movs	r7, #0
 801aac6:	f04f 0800 	mov.w	r8, #0
 801aaca:	f04f 0900 	mov.w	r9, #0
 801aace:	9b06      	ldr	r3, [sp, #24]
 801aad0:	429f      	cmp	r7, r3
 801aad2:	dd06      	ble.n	801aae2 <__kernel_rem_pio2+0x3c2>
 801aad4:	ab70      	add	r3, sp, #448	; 0x1c0
 801aad6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801aada:	e9c3 8900 	strd	r8, r9, [r3]
 801aade:	3501      	adds	r5, #1
 801aae0:	e7de      	b.n	801aaa0 <__kernel_rem_pio2+0x380>
 801aae2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801aae6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801aaea:	f7e5 fd85 	bl	80005f8 <__aeabi_dmul>
 801aaee:	4602      	mov	r2, r0
 801aaf0:	460b      	mov	r3, r1
 801aaf2:	4640      	mov	r0, r8
 801aaf4:	4649      	mov	r1, r9
 801aaf6:	f7e5 fbc9 	bl	800028c <__adddf3>
 801aafa:	3701      	adds	r7, #1
 801aafc:	4680      	mov	r8, r0
 801aafe:	4689      	mov	r9, r1
 801ab00:	e7e5      	b.n	801aace <__kernel_rem_pio2+0x3ae>
 801ab02:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ab06:	e754      	b.n	801a9b2 <__kernel_rem_pio2+0x292>
 801ab08:	ec47 6b10 	vmov	d0, r6, r7
 801ab0c:	f1ca 0000 	rsb	r0, sl, #0
 801ab10:	f000 fc32 	bl	801b378 <scalbn>
 801ab14:	ec57 6b10 	vmov	r6, r7, d0
 801ab18:	4b9f      	ldr	r3, [pc, #636]	; (801ad98 <__kernel_rem_pio2+0x678>)
 801ab1a:	ee10 0a10 	vmov	r0, s0
 801ab1e:	2200      	movs	r2, #0
 801ab20:	4639      	mov	r1, r7
 801ab22:	f7e5 ffef 	bl	8000b04 <__aeabi_dcmpge>
 801ab26:	b300      	cbz	r0, 801ab6a <__kernel_rem_pio2+0x44a>
 801ab28:	4b9c      	ldr	r3, [pc, #624]	; (801ad9c <__kernel_rem_pio2+0x67c>)
 801ab2a:	2200      	movs	r2, #0
 801ab2c:	4630      	mov	r0, r6
 801ab2e:	4639      	mov	r1, r7
 801ab30:	f7e5 fd62 	bl	80005f8 <__aeabi_dmul>
 801ab34:	f7e6 f810 	bl	8000b58 <__aeabi_d2iz>
 801ab38:	4605      	mov	r5, r0
 801ab3a:	f7e5 fcf3 	bl	8000524 <__aeabi_i2d>
 801ab3e:	4b96      	ldr	r3, [pc, #600]	; (801ad98 <__kernel_rem_pio2+0x678>)
 801ab40:	2200      	movs	r2, #0
 801ab42:	f7e5 fd59 	bl	80005f8 <__aeabi_dmul>
 801ab46:	460b      	mov	r3, r1
 801ab48:	4602      	mov	r2, r0
 801ab4a:	4639      	mov	r1, r7
 801ab4c:	4630      	mov	r0, r6
 801ab4e:	f7e5 fb9b 	bl	8000288 <__aeabi_dsub>
 801ab52:	f7e6 f801 	bl	8000b58 <__aeabi_d2iz>
 801ab56:	f104 0b01 	add.w	fp, r4, #1
 801ab5a:	ab0c      	add	r3, sp, #48	; 0x30
 801ab5c:	f10a 0a18 	add.w	sl, sl, #24
 801ab60:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801ab64:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 801ab68:	e72b      	b.n	801a9c2 <__kernel_rem_pio2+0x2a2>
 801ab6a:	4630      	mov	r0, r6
 801ab6c:	4639      	mov	r1, r7
 801ab6e:	f7e5 fff3 	bl	8000b58 <__aeabi_d2iz>
 801ab72:	ab0c      	add	r3, sp, #48	; 0x30
 801ab74:	46a3      	mov	fp, r4
 801ab76:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801ab7a:	e722      	b.n	801a9c2 <__kernel_rem_pio2+0x2a2>
 801ab7c:	ab70      	add	r3, sp, #448	; 0x1c0
 801ab7e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 801ab82:	ab0c      	add	r3, sp, #48	; 0x30
 801ab84:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801ab88:	f7e5 fccc 	bl	8000524 <__aeabi_i2d>
 801ab8c:	4622      	mov	r2, r4
 801ab8e:	462b      	mov	r3, r5
 801ab90:	f7e5 fd32 	bl	80005f8 <__aeabi_dmul>
 801ab94:	4632      	mov	r2, r6
 801ab96:	e9c9 0100 	strd	r0, r1, [r9]
 801ab9a:	463b      	mov	r3, r7
 801ab9c:	4620      	mov	r0, r4
 801ab9e:	4629      	mov	r1, r5
 801aba0:	f7e5 fd2a 	bl	80005f8 <__aeabi_dmul>
 801aba4:	f108 38ff 	add.w	r8, r8, #4294967295
 801aba8:	4604      	mov	r4, r0
 801abaa:	460d      	mov	r5, r1
 801abac:	e713      	b.n	801a9d6 <__kernel_rem_pio2+0x2b6>
 801abae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801abb2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801abb6:	f7e5 fd1f 	bl	80005f8 <__aeabi_dmul>
 801abba:	4602      	mov	r2, r0
 801abbc:	460b      	mov	r3, r1
 801abbe:	4620      	mov	r0, r4
 801abc0:	4629      	mov	r1, r5
 801abc2:	f7e5 fb63 	bl	800028c <__adddf3>
 801abc6:	3601      	adds	r6, #1
 801abc8:	4604      	mov	r4, r0
 801abca:	460d      	mov	r5, r1
 801abcc:	9b04      	ldr	r3, [sp, #16]
 801abce:	429e      	cmp	r6, r3
 801abd0:	dc01      	bgt.n	801abd6 <__kernel_rem_pio2+0x4b6>
 801abd2:	45b0      	cmp	r8, r6
 801abd4:	daeb      	bge.n	801abae <__kernel_rem_pio2+0x48e>
 801abd6:	ab48      	add	r3, sp, #288	; 0x120
 801abd8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801abdc:	e9c3 4500 	strd	r4, r5, [r3]
 801abe0:	3f01      	subs	r7, #1
 801abe2:	f108 0801 	add.w	r8, r8, #1
 801abe6:	e6ff      	b.n	801a9e8 <__kernel_rem_pio2+0x2c8>
 801abe8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801abea:	2b02      	cmp	r3, #2
 801abec:	dc0b      	bgt.n	801ac06 <__kernel_rem_pio2+0x4e6>
 801abee:	2b00      	cmp	r3, #0
 801abf0:	dc6e      	bgt.n	801acd0 <__kernel_rem_pio2+0x5b0>
 801abf2:	d045      	beq.n	801ac80 <__kernel_rem_pio2+0x560>
 801abf4:	9b07      	ldr	r3, [sp, #28]
 801abf6:	f003 0007 	and.w	r0, r3, #7
 801abfa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801abfe:	ecbd 8b02 	vpop	{d8}
 801ac02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac06:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801ac08:	2b03      	cmp	r3, #3
 801ac0a:	d1f3      	bne.n	801abf4 <__kernel_rem_pio2+0x4d4>
 801ac0c:	ab48      	add	r3, sp, #288	; 0x120
 801ac0e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 801ac12:	46d0      	mov	r8, sl
 801ac14:	46d9      	mov	r9, fp
 801ac16:	f1b9 0f00 	cmp.w	r9, #0
 801ac1a:	f1a8 0808 	sub.w	r8, r8, #8
 801ac1e:	dc64      	bgt.n	801acea <__kernel_rem_pio2+0x5ca>
 801ac20:	465c      	mov	r4, fp
 801ac22:	2c01      	cmp	r4, #1
 801ac24:	f1aa 0a08 	sub.w	sl, sl, #8
 801ac28:	dc7e      	bgt.n	801ad28 <__kernel_rem_pio2+0x608>
 801ac2a:	2000      	movs	r0, #0
 801ac2c:	2100      	movs	r1, #0
 801ac2e:	f1bb 0f01 	cmp.w	fp, #1
 801ac32:	f300 8097 	bgt.w	801ad64 <__kernel_rem_pio2+0x644>
 801ac36:	9b02      	ldr	r3, [sp, #8]
 801ac38:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801ac3c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	f040 8099 	bne.w	801ad78 <__kernel_rem_pio2+0x658>
 801ac46:	9b01      	ldr	r3, [sp, #4]
 801ac48:	e9c3 5600 	strd	r5, r6, [r3]
 801ac4c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801ac50:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801ac54:	e7ce      	b.n	801abf4 <__kernel_rem_pio2+0x4d4>
 801ac56:	ab48      	add	r3, sp, #288	; 0x120
 801ac58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ac5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac60:	f7e5 fb14 	bl	800028c <__adddf3>
 801ac64:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ac68:	f1bb 0f00 	cmp.w	fp, #0
 801ac6c:	daf3      	bge.n	801ac56 <__kernel_rem_pio2+0x536>
 801ac6e:	9b02      	ldr	r3, [sp, #8]
 801ac70:	b113      	cbz	r3, 801ac78 <__kernel_rem_pio2+0x558>
 801ac72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ac76:	4619      	mov	r1, r3
 801ac78:	9b01      	ldr	r3, [sp, #4]
 801ac7a:	e9c3 0100 	strd	r0, r1, [r3]
 801ac7e:	e7b9      	b.n	801abf4 <__kernel_rem_pio2+0x4d4>
 801ac80:	2000      	movs	r0, #0
 801ac82:	2100      	movs	r1, #0
 801ac84:	e7f0      	b.n	801ac68 <__kernel_rem_pio2+0x548>
 801ac86:	ab48      	add	r3, sp, #288	; 0x120
 801ac88:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ac8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac90:	f7e5 fafc 	bl	800028c <__adddf3>
 801ac94:	3c01      	subs	r4, #1
 801ac96:	2c00      	cmp	r4, #0
 801ac98:	daf5      	bge.n	801ac86 <__kernel_rem_pio2+0x566>
 801ac9a:	9b02      	ldr	r3, [sp, #8]
 801ac9c:	b1e3      	cbz	r3, 801acd8 <__kernel_rem_pio2+0x5b8>
 801ac9e:	4602      	mov	r2, r0
 801aca0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aca4:	9c01      	ldr	r4, [sp, #4]
 801aca6:	e9c4 2300 	strd	r2, r3, [r4]
 801acaa:	4602      	mov	r2, r0
 801acac:	460b      	mov	r3, r1
 801acae:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801acb2:	f7e5 fae9 	bl	8000288 <__aeabi_dsub>
 801acb6:	ad4a      	add	r5, sp, #296	; 0x128
 801acb8:	2401      	movs	r4, #1
 801acba:	45a3      	cmp	fp, r4
 801acbc:	da0f      	bge.n	801acde <__kernel_rem_pio2+0x5be>
 801acbe:	9b02      	ldr	r3, [sp, #8]
 801acc0:	b113      	cbz	r3, 801acc8 <__kernel_rem_pio2+0x5a8>
 801acc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801acc6:	4619      	mov	r1, r3
 801acc8:	9b01      	ldr	r3, [sp, #4]
 801acca:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801acce:	e791      	b.n	801abf4 <__kernel_rem_pio2+0x4d4>
 801acd0:	465c      	mov	r4, fp
 801acd2:	2000      	movs	r0, #0
 801acd4:	2100      	movs	r1, #0
 801acd6:	e7de      	b.n	801ac96 <__kernel_rem_pio2+0x576>
 801acd8:	4602      	mov	r2, r0
 801acda:	460b      	mov	r3, r1
 801acdc:	e7e2      	b.n	801aca4 <__kernel_rem_pio2+0x584>
 801acde:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801ace2:	f7e5 fad3 	bl	800028c <__adddf3>
 801ace6:	3401      	adds	r4, #1
 801ace8:	e7e7      	b.n	801acba <__kernel_rem_pio2+0x59a>
 801acea:	e9d8 4500 	ldrd	r4, r5, [r8]
 801acee:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 801acf2:	4620      	mov	r0, r4
 801acf4:	4632      	mov	r2, r6
 801acf6:	463b      	mov	r3, r7
 801acf8:	4629      	mov	r1, r5
 801acfa:	f7e5 fac7 	bl	800028c <__adddf3>
 801acfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ad02:	4602      	mov	r2, r0
 801ad04:	460b      	mov	r3, r1
 801ad06:	4620      	mov	r0, r4
 801ad08:	4629      	mov	r1, r5
 801ad0a:	f7e5 fabd 	bl	8000288 <__aeabi_dsub>
 801ad0e:	4632      	mov	r2, r6
 801ad10:	463b      	mov	r3, r7
 801ad12:	f7e5 fabb 	bl	800028c <__adddf3>
 801ad16:	ed9d 7b04 	vldr	d7, [sp, #16]
 801ad1a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801ad1e:	ed88 7b00 	vstr	d7, [r8]
 801ad22:	f109 39ff 	add.w	r9, r9, #4294967295
 801ad26:	e776      	b.n	801ac16 <__kernel_rem_pio2+0x4f6>
 801ad28:	e9da 8900 	ldrd	r8, r9, [sl]
 801ad2c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801ad30:	4640      	mov	r0, r8
 801ad32:	4632      	mov	r2, r6
 801ad34:	463b      	mov	r3, r7
 801ad36:	4649      	mov	r1, r9
 801ad38:	f7e5 faa8 	bl	800028c <__adddf3>
 801ad3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ad40:	4602      	mov	r2, r0
 801ad42:	460b      	mov	r3, r1
 801ad44:	4640      	mov	r0, r8
 801ad46:	4649      	mov	r1, r9
 801ad48:	f7e5 fa9e 	bl	8000288 <__aeabi_dsub>
 801ad4c:	4632      	mov	r2, r6
 801ad4e:	463b      	mov	r3, r7
 801ad50:	f7e5 fa9c 	bl	800028c <__adddf3>
 801ad54:	ed9d 7b04 	vldr	d7, [sp, #16]
 801ad58:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801ad5c:	ed8a 7b00 	vstr	d7, [sl]
 801ad60:	3c01      	subs	r4, #1
 801ad62:	e75e      	b.n	801ac22 <__kernel_rem_pio2+0x502>
 801ad64:	ab48      	add	r3, sp, #288	; 0x120
 801ad66:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ad6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad6e:	f7e5 fa8d 	bl	800028c <__adddf3>
 801ad72:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ad76:	e75a      	b.n	801ac2e <__kernel_rem_pio2+0x50e>
 801ad78:	9b01      	ldr	r3, [sp, #4]
 801ad7a:	9a01      	ldr	r2, [sp, #4]
 801ad7c:	601d      	str	r5, [r3, #0]
 801ad7e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801ad82:	605c      	str	r4, [r3, #4]
 801ad84:	609f      	str	r7, [r3, #8]
 801ad86:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801ad8a:	60d3      	str	r3, [r2, #12]
 801ad8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ad90:	6110      	str	r0, [r2, #16]
 801ad92:	6153      	str	r3, [r2, #20]
 801ad94:	e72e      	b.n	801abf4 <__kernel_rem_pio2+0x4d4>
 801ad96:	bf00      	nop
 801ad98:	41700000 	.word	0x41700000
 801ad9c:	3e700000 	.word	0x3e700000

0801ada0 <__kernel_sin>:
 801ada0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ada4:	ed2d 8b04 	vpush	{d8-d9}
 801ada8:	eeb0 8a41 	vmov.f32	s16, s2
 801adac:	eef0 8a61 	vmov.f32	s17, s3
 801adb0:	ec55 4b10 	vmov	r4, r5, d0
 801adb4:	b083      	sub	sp, #12
 801adb6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801adba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801adbe:	9001      	str	r0, [sp, #4]
 801adc0:	da06      	bge.n	801add0 <__kernel_sin+0x30>
 801adc2:	ee10 0a10 	vmov	r0, s0
 801adc6:	4629      	mov	r1, r5
 801adc8:	f7e5 fec6 	bl	8000b58 <__aeabi_d2iz>
 801adcc:	2800      	cmp	r0, #0
 801adce:	d051      	beq.n	801ae74 <__kernel_sin+0xd4>
 801add0:	4622      	mov	r2, r4
 801add2:	462b      	mov	r3, r5
 801add4:	4620      	mov	r0, r4
 801add6:	4629      	mov	r1, r5
 801add8:	f7e5 fc0e 	bl	80005f8 <__aeabi_dmul>
 801addc:	4682      	mov	sl, r0
 801adde:	468b      	mov	fp, r1
 801ade0:	4602      	mov	r2, r0
 801ade2:	460b      	mov	r3, r1
 801ade4:	4620      	mov	r0, r4
 801ade6:	4629      	mov	r1, r5
 801ade8:	f7e5 fc06 	bl	80005f8 <__aeabi_dmul>
 801adec:	a341      	add	r3, pc, #260	; (adr r3, 801aef4 <__kernel_sin+0x154>)
 801adee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adf2:	4680      	mov	r8, r0
 801adf4:	4689      	mov	r9, r1
 801adf6:	4650      	mov	r0, sl
 801adf8:	4659      	mov	r1, fp
 801adfa:	f7e5 fbfd 	bl	80005f8 <__aeabi_dmul>
 801adfe:	a33f      	add	r3, pc, #252	; (adr r3, 801aefc <__kernel_sin+0x15c>)
 801ae00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae04:	f7e5 fa40 	bl	8000288 <__aeabi_dsub>
 801ae08:	4652      	mov	r2, sl
 801ae0a:	465b      	mov	r3, fp
 801ae0c:	f7e5 fbf4 	bl	80005f8 <__aeabi_dmul>
 801ae10:	a33c      	add	r3, pc, #240	; (adr r3, 801af04 <__kernel_sin+0x164>)
 801ae12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae16:	f7e5 fa39 	bl	800028c <__adddf3>
 801ae1a:	4652      	mov	r2, sl
 801ae1c:	465b      	mov	r3, fp
 801ae1e:	f7e5 fbeb 	bl	80005f8 <__aeabi_dmul>
 801ae22:	a33a      	add	r3, pc, #232	; (adr r3, 801af0c <__kernel_sin+0x16c>)
 801ae24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae28:	f7e5 fa2e 	bl	8000288 <__aeabi_dsub>
 801ae2c:	4652      	mov	r2, sl
 801ae2e:	465b      	mov	r3, fp
 801ae30:	f7e5 fbe2 	bl	80005f8 <__aeabi_dmul>
 801ae34:	a337      	add	r3, pc, #220	; (adr r3, 801af14 <__kernel_sin+0x174>)
 801ae36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae3a:	f7e5 fa27 	bl	800028c <__adddf3>
 801ae3e:	9b01      	ldr	r3, [sp, #4]
 801ae40:	4606      	mov	r6, r0
 801ae42:	460f      	mov	r7, r1
 801ae44:	b9eb      	cbnz	r3, 801ae82 <__kernel_sin+0xe2>
 801ae46:	4602      	mov	r2, r0
 801ae48:	460b      	mov	r3, r1
 801ae4a:	4650      	mov	r0, sl
 801ae4c:	4659      	mov	r1, fp
 801ae4e:	f7e5 fbd3 	bl	80005f8 <__aeabi_dmul>
 801ae52:	a325      	add	r3, pc, #148	; (adr r3, 801aee8 <__kernel_sin+0x148>)
 801ae54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae58:	f7e5 fa16 	bl	8000288 <__aeabi_dsub>
 801ae5c:	4642      	mov	r2, r8
 801ae5e:	464b      	mov	r3, r9
 801ae60:	f7e5 fbca 	bl	80005f8 <__aeabi_dmul>
 801ae64:	4602      	mov	r2, r0
 801ae66:	460b      	mov	r3, r1
 801ae68:	4620      	mov	r0, r4
 801ae6a:	4629      	mov	r1, r5
 801ae6c:	f7e5 fa0e 	bl	800028c <__adddf3>
 801ae70:	4604      	mov	r4, r0
 801ae72:	460d      	mov	r5, r1
 801ae74:	ec45 4b10 	vmov	d0, r4, r5
 801ae78:	b003      	add	sp, #12
 801ae7a:	ecbd 8b04 	vpop	{d8-d9}
 801ae7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae82:	4b1b      	ldr	r3, [pc, #108]	; (801aef0 <__kernel_sin+0x150>)
 801ae84:	ec51 0b18 	vmov	r0, r1, d8
 801ae88:	2200      	movs	r2, #0
 801ae8a:	f7e5 fbb5 	bl	80005f8 <__aeabi_dmul>
 801ae8e:	4632      	mov	r2, r6
 801ae90:	ec41 0b19 	vmov	d9, r0, r1
 801ae94:	463b      	mov	r3, r7
 801ae96:	4640      	mov	r0, r8
 801ae98:	4649      	mov	r1, r9
 801ae9a:	f7e5 fbad 	bl	80005f8 <__aeabi_dmul>
 801ae9e:	4602      	mov	r2, r0
 801aea0:	460b      	mov	r3, r1
 801aea2:	ec51 0b19 	vmov	r0, r1, d9
 801aea6:	f7e5 f9ef 	bl	8000288 <__aeabi_dsub>
 801aeaa:	4652      	mov	r2, sl
 801aeac:	465b      	mov	r3, fp
 801aeae:	f7e5 fba3 	bl	80005f8 <__aeabi_dmul>
 801aeb2:	ec53 2b18 	vmov	r2, r3, d8
 801aeb6:	f7e5 f9e7 	bl	8000288 <__aeabi_dsub>
 801aeba:	a30b      	add	r3, pc, #44	; (adr r3, 801aee8 <__kernel_sin+0x148>)
 801aebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aec0:	4606      	mov	r6, r0
 801aec2:	460f      	mov	r7, r1
 801aec4:	4640      	mov	r0, r8
 801aec6:	4649      	mov	r1, r9
 801aec8:	f7e5 fb96 	bl	80005f8 <__aeabi_dmul>
 801aecc:	4602      	mov	r2, r0
 801aece:	460b      	mov	r3, r1
 801aed0:	4630      	mov	r0, r6
 801aed2:	4639      	mov	r1, r7
 801aed4:	f7e5 f9da 	bl	800028c <__adddf3>
 801aed8:	4602      	mov	r2, r0
 801aeda:	460b      	mov	r3, r1
 801aedc:	4620      	mov	r0, r4
 801aede:	4629      	mov	r1, r5
 801aee0:	f7e5 f9d2 	bl	8000288 <__aeabi_dsub>
 801aee4:	e7c4      	b.n	801ae70 <__kernel_sin+0xd0>
 801aee6:	bf00      	nop
 801aee8:	55555549 	.word	0x55555549
 801aeec:	3fc55555 	.word	0x3fc55555
 801aef0:	3fe00000 	.word	0x3fe00000
 801aef4:	5acfd57c 	.word	0x5acfd57c
 801aef8:	3de5d93a 	.word	0x3de5d93a
 801aefc:	8a2b9ceb 	.word	0x8a2b9ceb
 801af00:	3e5ae5e6 	.word	0x3e5ae5e6
 801af04:	57b1fe7d 	.word	0x57b1fe7d
 801af08:	3ec71de3 	.word	0x3ec71de3
 801af0c:	19c161d5 	.word	0x19c161d5
 801af10:	3f2a01a0 	.word	0x3f2a01a0
 801af14:	1110f8a6 	.word	0x1110f8a6
 801af18:	3f811111 	.word	0x3f811111
 801af1c:	00000000 	.word	0x00000000

0801af20 <atan>:
 801af20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af24:	ec55 4b10 	vmov	r4, r5, d0
 801af28:	4bc3      	ldr	r3, [pc, #780]	; (801b238 <atan+0x318>)
 801af2a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801af2e:	429e      	cmp	r6, r3
 801af30:	46ab      	mov	fp, r5
 801af32:	dd18      	ble.n	801af66 <atan+0x46>
 801af34:	4bc1      	ldr	r3, [pc, #772]	; (801b23c <atan+0x31c>)
 801af36:	429e      	cmp	r6, r3
 801af38:	dc01      	bgt.n	801af3e <atan+0x1e>
 801af3a:	d109      	bne.n	801af50 <atan+0x30>
 801af3c:	b144      	cbz	r4, 801af50 <atan+0x30>
 801af3e:	4622      	mov	r2, r4
 801af40:	462b      	mov	r3, r5
 801af42:	4620      	mov	r0, r4
 801af44:	4629      	mov	r1, r5
 801af46:	f7e5 f9a1 	bl	800028c <__adddf3>
 801af4a:	4604      	mov	r4, r0
 801af4c:	460d      	mov	r5, r1
 801af4e:	e006      	b.n	801af5e <atan+0x3e>
 801af50:	f1bb 0f00 	cmp.w	fp, #0
 801af54:	f300 8131 	bgt.w	801b1ba <atan+0x29a>
 801af58:	a59b      	add	r5, pc, #620	; (adr r5, 801b1c8 <atan+0x2a8>)
 801af5a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801af5e:	ec45 4b10 	vmov	d0, r4, r5
 801af62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af66:	4bb6      	ldr	r3, [pc, #728]	; (801b240 <atan+0x320>)
 801af68:	429e      	cmp	r6, r3
 801af6a:	dc14      	bgt.n	801af96 <atan+0x76>
 801af6c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801af70:	429e      	cmp	r6, r3
 801af72:	dc0d      	bgt.n	801af90 <atan+0x70>
 801af74:	a396      	add	r3, pc, #600	; (adr r3, 801b1d0 <atan+0x2b0>)
 801af76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af7a:	ee10 0a10 	vmov	r0, s0
 801af7e:	4629      	mov	r1, r5
 801af80:	f7e5 f984 	bl	800028c <__adddf3>
 801af84:	4baf      	ldr	r3, [pc, #700]	; (801b244 <atan+0x324>)
 801af86:	2200      	movs	r2, #0
 801af88:	f7e5 fdc6 	bl	8000b18 <__aeabi_dcmpgt>
 801af8c:	2800      	cmp	r0, #0
 801af8e:	d1e6      	bne.n	801af5e <atan+0x3e>
 801af90:	f04f 3aff 	mov.w	sl, #4294967295
 801af94:	e02b      	b.n	801afee <atan+0xce>
 801af96:	f000 f963 	bl	801b260 <fabs>
 801af9a:	4bab      	ldr	r3, [pc, #684]	; (801b248 <atan+0x328>)
 801af9c:	429e      	cmp	r6, r3
 801af9e:	ec55 4b10 	vmov	r4, r5, d0
 801afa2:	f300 80bf 	bgt.w	801b124 <atan+0x204>
 801afa6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801afaa:	429e      	cmp	r6, r3
 801afac:	f300 80a0 	bgt.w	801b0f0 <atan+0x1d0>
 801afb0:	ee10 2a10 	vmov	r2, s0
 801afb4:	ee10 0a10 	vmov	r0, s0
 801afb8:	462b      	mov	r3, r5
 801afba:	4629      	mov	r1, r5
 801afbc:	f7e5 f966 	bl	800028c <__adddf3>
 801afc0:	4ba0      	ldr	r3, [pc, #640]	; (801b244 <atan+0x324>)
 801afc2:	2200      	movs	r2, #0
 801afc4:	f7e5 f960 	bl	8000288 <__aeabi_dsub>
 801afc8:	2200      	movs	r2, #0
 801afca:	4606      	mov	r6, r0
 801afcc:	460f      	mov	r7, r1
 801afce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801afd2:	4620      	mov	r0, r4
 801afd4:	4629      	mov	r1, r5
 801afd6:	f7e5 f959 	bl	800028c <__adddf3>
 801afda:	4602      	mov	r2, r0
 801afdc:	460b      	mov	r3, r1
 801afde:	4630      	mov	r0, r6
 801afe0:	4639      	mov	r1, r7
 801afe2:	f7e5 fc33 	bl	800084c <__aeabi_ddiv>
 801afe6:	f04f 0a00 	mov.w	sl, #0
 801afea:	4604      	mov	r4, r0
 801afec:	460d      	mov	r5, r1
 801afee:	4622      	mov	r2, r4
 801aff0:	462b      	mov	r3, r5
 801aff2:	4620      	mov	r0, r4
 801aff4:	4629      	mov	r1, r5
 801aff6:	f7e5 faff 	bl	80005f8 <__aeabi_dmul>
 801affa:	4602      	mov	r2, r0
 801affc:	460b      	mov	r3, r1
 801affe:	4680      	mov	r8, r0
 801b000:	4689      	mov	r9, r1
 801b002:	f7e5 faf9 	bl	80005f8 <__aeabi_dmul>
 801b006:	a374      	add	r3, pc, #464	; (adr r3, 801b1d8 <atan+0x2b8>)
 801b008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b00c:	4606      	mov	r6, r0
 801b00e:	460f      	mov	r7, r1
 801b010:	f7e5 faf2 	bl	80005f8 <__aeabi_dmul>
 801b014:	a372      	add	r3, pc, #456	; (adr r3, 801b1e0 <atan+0x2c0>)
 801b016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b01a:	f7e5 f937 	bl	800028c <__adddf3>
 801b01e:	4632      	mov	r2, r6
 801b020:	463b      	mov	r3, r7
 801b022:	f7e5 fae9 	bl	80005f8 <__aeabi_dmul>
 801b026:	a370      	add	r3, pc, #448	; (adr r3, 801b1e8 <atan+0x2c8>)
 801b028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b02c:	f7e5 f92e 	bl	800028c <__adddf3>
 801b030:	4632      	mov	r2, r6
 801b032:	463b      	mov	r3, r7
 801b034:	f7e5 fae0 	bl	80005f8 <__aeabi_dmul>
 801b038:	a36d      	add	r3, pc, #436	; (adr r3, 801b1f0 <atan+0x2d0>)
 801b03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b03e:	f7e5 f925 	bl	800028c <__adddf3>
 801b042:	4632      	mov	r2, r6
 801b044:	463b      	mov	r3, r7
 801b046:	f7e5 fad7 	bl	80005f8 <__aeabi_dmul>
 801b04a:	a36b      	add	r3, pc, #428	; (adr r3, 801b1f8 <atan+0x2d8>)
 801b04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b050:	f7e5 f91c 	bl	800028c <__adddf3>
 801b054:	4632      	mov	r2, r6
 801b056:	463b      	mov	r3, r7
 801b058:	f7e5 face 	bl	80005f8 <__aeabi_dmul>
 801b05c:	a368      	add	r3, pc, #416	; (adr r3, 801b200 <atan+0x2e0>)
 801b05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b062:	f7e5 f913 	bl	800028c <__adddf3>
 801b066:	4642      	mov	r2, r8
 801b068:	464b      	mov	r3, r9
 801b06a:	f7e5 fac5 	bl	80005f8 <__aeabi_dmul>
 801b06e:	a366      	add	r3, pc, #408	; (adr r3, 801b208 <atan+0x2e8>)
 801b070:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b074:	4680      	mov	r8, r0
 801b076:	4689      	mov	r9, r1
 801b078:	4630      	mov	r0, r6
 801b07a:	4639      	mov	r1, r7
 801b07c:	f7e5 fabc 	bl	80005f8 <__aeabi_dmul>
 801b080:	a363      	add	r3, pc, #396	; (adr r3, 801b210 <atan+0x2f0>)
 801b082:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b086:	f7e5 f8ff 	bl	8000288 <__aeabi_dsub>
 801b08a:	4632      	mov	r2, r6
 801b08c:	463b      	mov	r3, r7
 801b08e:	f7e5 fab3 	bl	80005f8 <__aeabi_dmul>
 801b092:	a361      	add	r3, pc, #388	; (adr r3, 801b218 <atan+0x2f8>)
 801b094:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b098:	f7e5 f8f6 	bl	8000288 <__aeabi_dsub>
 801b09c:	4632      	mov	r2, r6
 801b09e:	463b      	mov	r3, r7
 801b0a0:	f7e5 faaa 	bl	80005f8 <__aeabi_dmul>
 801b0a4:	a35e      	add	r3, pc, #376	; (adr r3, 801b220 <atan+0x300>)
 801b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0aa:	f7e5 f8ed 	bl	8000288 <__aeabi_dsub>
 801b0ae:	4632      	mov	r2, r6
 801b0b0:	463b      	mov	r3, r7
 801b0b2:	f7e5 faa1 	bl	80005f8 <__aeabi_dmul>
 801b0b6:	a35c      	add	r3, pc, #368	; (adr r3, 801b228 <atan+0x308>)
 801b0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0bc:	f7e5 f8e4 	bl	8000288 <__aeabi_dsub>
 801b0c0:	4632      	mov	r2, r6
 801b0c2:	463b      	mov	r3, r7
 801b0c4:	f7e5 fa98 	bl	80005f8 <__aeabi_dmul>
 801b0c8:	4602      	mov	r2, r0
 801b0ca:	460b      	mov	r3, r1
 801b0cc:	4640      	mov	r0, r8
 801b0ce:	4649      	mov	r1, r9
 801b0d0:	f7e5 f8dc 	bl	800028c <__adddf3>
 801b0d4:	4622      	mov	r2, r4
 801b0d6:	462b      	mov	r3, r5
 801b0d8:	f7e5 fa8e 	bl	80005f8 <__aeabi_dmul>
 801b0dc:	f1ba 3fff 	cmp.w	sl, #4294967295
 801b0e0:	4602      	mov	r2, r0
 801b0e2:	460b      	mov	r3, r1
 801b0e4:	d14b      	bne.n	801b17e <atan+0x25e>
 801b0e6:	4620      	mov	r0, r4
 801b0e8:	4629      	mov	r1, r5
 801b0ea:	f7e5 f8cd 	bl	8000288 <__aeabi_dsub>
 801b0ee:	e72c      	b.n	801af4a <atan+0x2a>
 801b0f0:	ee10 0a10 	vmov	r0, s0
 801b0f4:	4b53      	ldr	r3, [pc, #332]	; (801b244 <atan+0x324>)
 801b0f6:	2200      	movs	r2, #0
 801b0f8:	4629      	mov	r1, r5
 801b0fa:	f7e5 f8c5 	bl	8000288 <__aeabi_dsub>
 801b0fe:	4b51      	ldr	r3, [pc, #324]	; (801b244 <atan+0x324>)
 801b100:	4606      	mov	r6, r0
 801b102:	460f      	mov	r7, r1
 801b104:	2200      	movs	r2, #0
 801b106:	4620      	mov	r0, r4
 801b108:	4629      	mov	r1, r5
 801b10a:	f7e5 f8bf 	bl	800028c <__adddf3>
 801b10e:	4602      	mov	r2, r0
 801b110:	460b      	mov	r3, r1
 801b112:	4630      	mov	r0, r6
 801b114:	4639      	mov	r1, r7
 801b116:	f7e5 fb99 	bl	800084c <__aeabi_ddiv>
 801b11a:	f04f 0a01 	mov.w	sl, #1
 801b11e:	4604      	mov	r4, r0
 801b120:	460d      	mov	r5, r1
 801b122:	e764      	b.n	801afee <atan+0xce>
 801b124:	4b49      	ldr	r3, [pc, #292]	; (801b24c <atan+0x32c>)
 801b126:	429e      	cmp	r6, r3
 801b128:	da1d      	bge.n	801b166 <atan+0x246>
 801b12a:	ee10 0a10 	vmov	r0, s0
 801b12e:	4b48      	ldr	r3, [pc, #288]	; (801b250 <atan+0x330>)
 801b130:	2200      	movs	r2, #0
 801b132:	4629      	mov	r1, r5
 801b134:	f7e5 f8a8 	bl	8000288 <__aeabi_dsub>
 801b138:	4b45      	ldr	r3, [pc, #276]	; (801b250 <atan+0x330>)
 801b13a:	4606      	mov	r6, r0
 801b13c:	460f      	mov	r7, r1
 801b13e:	2200      	movs	r2, #0
 801b140:	4620      	mov	r0, r4
 801b142:	4629      	mov	r1, r5
 801b144:	f7e5 fa58 	bl	80005f8 <__aeabi_dmul>
 801b148:	4b3e      	ldr	r3, [pc, #248]	; (801b244 <atan+0x324>)
 801b14a:	2200      	movs	r2, #0
 801b14c:	f7e5 f89e 	bl	800028c <__adddf3>
 801b150:	4602      	mov	r2, r0
 801b152:	460b      	mov	r3, r1
 801b154:	4630      	mov	r0, r6
 801b156:	4639      	mov	r1, r7
 801b158:	f7e5 fb78 	bl	800084c <__aeabi_ddiv>
 801b15c:	f04f 0a02 	mov.w	sl, #2
 801b160:	4604      	mov	r4, r0
 801b162:	460d      	mov	r5, r1
 801b164:	e743      	b.n	801afee <atan+0xce>
 801b166:	462b      	mov	r3, r5
 801b168:	ee10 2a10 	vmov	r2, s0
 801b16c:	4939      	ldr	r1, [pc, #228]	; (801b254 <atan+0x334>)
 801b16e:	2000      	movs	r0, #0
 801b170:	f7e5 fb6c 	bl	800084c <__aeabi_ddiv>
 801b174:	f04f 0a03 	mov.w	sl, #3
 801b178:	4604      	mov	r4, r0
 801b17a:	460d      	mov	r5, r1
 801b17c:	e737      	b.n	801afee <atan+0xce>
 801b17e:	4b36      	ldr	r3, [pc, #216]	; (801b258 <atan+0x338>)
 801b180:	4e36      	ldr	r6, [pc, #216]	; (801b25c <atan+0x33c>)
 801b182:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801b186:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801b18a:	e9da 2300 	ldrd	r2, r3, [sl]
 801b18e:	f7e5 f87b 	bl	8000288 <__aeabi_dsub>
 801b192:	4622      	mov	r2, r4
 801b194:	462b      	mov	r3, r5
 801b196:	f7e5 f877 	bl	8000288 <__aeabi_dsub>
 801b19a:	4602      	mov	r2, r0
 801b19c:	460b      	mov	r3, r1
 801b19e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801b1a2:	f7e5 f871 	bl	8000288 <__aeabi_dsub>
 801b1a6:	f1bb 0f00 	cmp.w	fp, #0
 801b1aa:	4604      	mov	r4, r0
 801b1ac:	460d      	mov	r5, r1
 801b1ae:	f6bf aed6 	bge.w	801af5e <atan+0x3e>
 801b1b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b1b6:	461d      	mov	r5, r3
 801b1b8:	e6d1      	b.n	801af5e <atan+0x3e>
 801b1ba:	a51d      	add	r5, pc, #116	; (adr r5, 801b230 <atan+0x310>)
 801b1bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b1c0:	e6cd      	b.n	801af5e <atan+0x3e>
 801b1c2:	bf00      	nop
 801b1c4:	f3af 8000 	nop.w
 801b1c8:	54442d18 	.word	0x54442d18
 801b1cc:	bff921fb 	.word	0xbff921fb
 801b1d0:	8800759c 	.word	0x8800759c
 801b1d4:	7e37e43c 	.word	0x7e37e43c
 801b1d8:	e322da11 	.word	0xe322da11
 801b1dc:	3f90ad3a 	.word	0x3f90ad3a
 801b1e0:	24760deb 	.word	0x24760deb
 801b1e4:	3fa97b4b 	.word	0x3fa97b4b
 801b1e8:	a0d03d51 	.word	0xa0d03d51
 801b1ec:	3fb10d66 	.word	0x3fb10d66
 801b1f0:	c54c206e 	.word	0xc54c206e
 801b1f4:	3fb745cd 	.word	0x3fb745cd
 801b1f8:	920083ff 	.word	0x920083ff
 801b1fc:	3fc24924 	.word	0x3fc24924
 801b200:	5555550d 	.word	0x5555550d
 801b204:	3fd55555 	.word	0x3fd55555
 801b208:	2c6a6c2f 	.word	0x2c6a6c2f
 801b20c:	bfa2b444 	.word	0xbfa2b444
 801b210:	52defd9a 	.word	0x52defd9a
 801b214:	3fadde2d 	.word	0x3fadde2d
 801b218:	af749a6d 	.word	0xaf749a6d
 801b21c:	3fb3b0f2 	.word	0x3fb3b0f2
 801b220:	fe231671 	.word	0xfe231671
 801b224:	3fbc71c6 	.word	0x3fbc71c6
 801b228:	9998ebc4 	.word	0x9998ebc4
 801b22c:	3fc99999 	.word	0x3fc99999
 801b230:	54442d18 	.word	0x54442d18
 801b234:	3ff921fb 	.word	0x3ff921fb
 801b238:	440fffff 	.word	0x440fffff
 801b23c:	7ff00000 	.word	0x7ff00000
 801b240:	3fdbffff 	.word	0x3fdbffff
 801b244:	3ff00000 	.word	0x3ff00000
 801b248:	3ff2ffff 	.word	0x3ff2ffff
 801b24c:	40038000 	.word	0x40038000
 801b250:	3ff80000 	.word	0x3ff80000
 801b254:	bff00000 	.word	0xbff00000
 801b258:	0801be60 	.word	0x0801be60
 801b25c:	0801be40 	.word	0x0801be40

0801b260 <fabs>:
 801b260:	ec51 0b10 	vmov	r0, r1, d0
 801b264:	ee10 2a10 	vmov	r2, s0
 801b268:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b26c:	ec43 2b10 	vmov	d0, r2, r3
 801b270:	4770      	bx	lr
 801b272:	0000      	movs	r0, r0
 801b274:	0000      	movs	r0, r0
	...

0801b278 <floor>:
 801b278:	ec51 0b10 	vmov	r0, r1, d0
 801b27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b280:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801b284:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801b288:	2e13      	cmp	r6, #19
 801b28a:	ee10 5a10 	vmov	r5, s0
 801b28e:	ee10 8a10 	vmov	r8, s0
 801b292:	460c      	mov	r4, r1
 801b294:	dc32      	bgt.n	801b2fc <floor+0x84>
 801b296:	2e00      	cmp	r6, #0
 801b298:	da14      	bge.n	801b2c4 <floor+0x4c>
 801b29a:	a333      	add	r3, pc, #204	; (adr r3, 801b368 <floor+0xf0>)
 801b29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2a0:	f7e4 fff4 	bl	800028c <__adddf3>
 801b2a4:	2200      	movs	r2, #0
 801b2a6:	2300      	movs	r3, #0
 801b2a8:	f7e5 fc36 	bl	8000b18 <__aeabi_dcmpgt>
 801b2ac:	b138      	cbz	r0, 801b2be <floor+0x46>
 801b2ae:	2c00      	cmp	r4, #0
 801b2b0:	da57      	bge.n	801b362 <floor+0xea>
 801b2b2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b2b6:	431d      	orrs	r5, r3
 801b2b8:	d001      	beq.n	801b2be <floor+0x46>
 801b2ba:	4c2d      	ldr	r4, [pc, #180]	; (801b370 <floor+0xf8>)
 801b2bc:	2500      	movs	r5, #0
 801b2be:	4621      	mov	r1, r4
 801b2c0:	4628      	mov	r0, r5
 801b2c2:	e025      	b.n	801b310 <floor+0x98>
 801b2c4:	4f2b      	ldr	r7, [pc, #172]	; (801b374 <floor+0xfc>)
 801b2c6:	4137      	asrs	r7, r6
 801b2c8:	ea01 0307 	and.w	r3, r1, r7
 801b2cc:	4303      	orrs	r3, r0
 801b2ce:	d01f      	beq.n	801b310 <floor+0x98>
 801b2d0:	a325      	add	r3, pc, #148	; (adr r3, 801b368 <floor+0xf0>)
 801b2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2d6:	f7e4 ffd9 	bl	800028c <__adddf3>
 801b2da:	2200      	movs	r2, #0
 801b2dc:	2300      	movs	r3, #0
 801b2de:	f7e5 fc1b 	bl	8000b18 <__aeabi_dcmpgt>
 801b2e2:	2800      	cmp	r0, #0
 801b2e4:	d0eb      	beq.n	801b2be <floor+0x46>
 801b2e6:	2c00      	cmp	r4, #0
 801b2e8:	bfbe      	ittt	lt
 801b2ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b2ee:	fa43 f606 	asrlt.w	r6, r3, r6
 801b2f2:	19a4      	addlt	r4, r4, r6
 801b2f4:	ea24 0407 	bic.w	r4, r4, r7
 801b2f8:	2500      	movs	r5, #0
 801b2fa:	e7e0      	b.n	801b2be <floor+0x46>
 801b2fc:	2e33      	cmp	r6, #51	; 0x33
 801b2fe:	dd0b      	ble.n	801b318 <floor+0xa0>
 801b300:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b304:	d104      	bne.n	801b310 <floor+0x98>
 801b306:	ee10 2a10 	vmov	r2, s0
 801b30a:	460b      	mov	r3, r1
 801b30c:	f7e4 ffbe 	bl	800028c <__adddf3>
 801b310:	ec41 0b10 	vmov	d0, r0, r1
 801b314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b318:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801b31c:	f04f 33ff 	mov.w	r3, #4294967295
 801b320:	fa23 f707 	lsr.w	r7, r3, r7
 801b324:	4207      	tst	r7, r0
 801b326:	d0f3      	beq.n	801b310 <floor+0x98>
 801b328:	a30f      	add	r3, pc, #60	; (adr r3, 801b368 <floor+0xf0>)
 801b32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b32e:	f7e4 ffad 	bl	800028c <__adddf3>
 801b332:	2200      	movs	r2, #0
 801b334:	2300      	movs	r3, #0
 801b336:	f7e5 fbef 	bl	8000b18 <__aeabi_dcmpgt>
 801b33a:	2800      	cmp	r0, #0
 801b33c:	d0bf      	beq.n	801b2be <floor+0x46>
 801b33e:	2c00      	cmp	r4, #0
 801b340:	da02      	bge.n	801b348 <floor+0xd0>
 801b342:	2e14      	cmp	r6, #20
 801b344:	d103      	bne.n	801b34e <floor+0xd6>
 801b346:	3401      	adds	r4, #1
 801b348:	ea25 0507 	bic.w	r5, r5, r7
 801b34c:	e7b7      	b.n	801b2be <floor+0x46>
 801b34e:	2301      	movs	r3, #1
 801b350:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b354:	fa03 f606 	lsl.w	r6, r3, r6
 801b358:	4435      	add	r5, r6
 801b35a:	4545      	cmp	r5, r8
 801b35c:	bf38      	it	cc
 801b35e:	18e4      	addcc	r4, r4, r3
 801b360:	e7f2      	b.n	801b348 <floor+0xd0>
 801b362:	2500      	movs	r5, #0
 801b364:	462c      	mov	r4, r5
 801b366:	e7aa      	b.n	801b2be <floor+0x46>
 801b368:	8800759c 	.word	0x8800759c
 801b36c:	7e37e43c 	.word	0x7e37e43c
 801b370:	bff00000 	.word	0xbff00000
 801b374:	000fffff 	.word	0x000fffff

0801b378 <scalbn>:
 801b378:	b570      	push	{r4, r5, r6, lr}
 801b37a:	ec55 4b10 	vmov	r4, r5, d0
 801b37e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801b382:	4606      	mov	r6, r0
 801b384:	462b      	mov	r3, r5
 801b386:	b99a      	cbnz	r2, 801b3b0 <scalbn+0x38>
 801b388:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b38c:	4323      	orrs	r3, r4
 801b38e:	d036      	beq.n	801b3fe <scalbn+0x86>
 801b390:	4b39      	ldr	r3, [pc, #228]	; (801b478 <scalbn+0x100>)
 801b392:	4629      	mov	r1, r5
 801b394:	ee10 0a10 	vmov	r0, s0
 801b398:	2200      	movs	r2, #0
 801b39a:	f7e5 f92d 	bl	80005f8 <__aeabi_dmul>
 801b39e:	4b37      	ldr	r3, [pc, #220]	; (801b47c <scalbn+0x104>)
 801b3a0:	429e      	cmp	r6, r3
 801b3a2:	4604      	mov	r4, r0
 801b3a4:	460d      	mov	r5, r1
 801b3a6:	da10      	bge.n	801b3ca <scalbn+0x52>
 801b3a8:	a32b      	add	r3, pc, #172	; (adr r3, 801b458 <scalbn+0xe0>)
 801b3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3ae:	e03a      	b.n	801b426 <scalbn+0xae>
 801b3b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801b3b4:	428a      	cmp	r2, r1
 801b3b6:	d10c      	bne.n	801b3d2 <scalbn+0x5a>
 801b3b8:	ee10 2a10 	vmov	r2, s0
 801b3bc:	4620      	mov	r0, r4
 801b3be:	4629      	mov	r1, r5
 801b3c0:	f7e4 ff64 	bl	800028c <__adddf3>
 801b3c4:	4604      	mov	r4, r0
 801b3c6:	460d      	mov	r5, r1
 801b3c8:	e019      	b.n	801b3fe <scalbn+0x86>
 801b3ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b3ce:	460b      	mov	r3, r1
 801b3d0:	3a36      	subs	r2, #54	; 0x36
 801b3d2:	4432      	add	r2, r6
 801b3d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b3d8:	428a      	cmp	r2, r1
 801b3da:	dd08      	ble.n	801b3ee <scalbn+0x76>
 801b3dc:	2d00      	cmp	r5, #0
 801b3de:	a120      	add	r1, pc, #128	; (adr r1, 801b460 <scalbn+0xe8>)
 801b3e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b3e4:	da1c      	bge.n	801b420 <scalbn+0xa8>
 801b3e6:	a120      	add	r1, pc, #128	; (adr r1, 801b468 <scalbn+0xf0>)
 801b3e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b3ec:	e018      	b.n	801b420 <scalbn+0xa8>
 801b3ee:	2a00      	cmp	r2, #0
 801b3f0:	dd08      	ble.n	801b404 <scalbn+0x8c>
 801b3f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b3f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b3fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b3fe:	ec45 4b10 	vmov	d0, r4, r5
 801b402:	bd70      	pop	{r4, r5, r6, pc}
 801b404:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b408:	da19      	bge.n	801b43e <scalbn+0xc6>
 801b40a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b40e:	429e      	cmp	r6, r3
 801b410:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801b414:	dd0a      	ble.n	801b42c <scalbn+0xb4>
 801b416:	a112      	add	r1, pc, #72	; (adr r1, 801b460 <scalbn+0xe8>)
 801b418:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	d1e2      	bne.n	801b3e6 <scalbn+0x6e>
 801b420:	a30f      	add	r3, pc, #60	; (adr r3, 801b460 <scalbn+0xe8>)
 801b422:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b426:	f7e5 f8e7 	bl	80005f8 <__aeabi_dmul>
 801b42a:	e7cb      	b.n	801b3c4 <scalbn+0x4c>
 801b42c:	a10a      	add	r1, pc, #40	; (adr r1, 801b458 <scalbn+0xe0>)
 801b42e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b432:	2b00      	cmp	r3, #0
 801b434:	d0b8      	beq.n	801b3a8 <scalbn+0x30>
 801b436:	a10e      	add	r1, pc, #56	; (adr r1, 801b470 <scalbn+0xf8>)
 801b438:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b43c:	e7b4      	b.n	801b3a8 <scalbn+0x30>
 801b43e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b442:	3236      	adds	r2, #54	; 0x36
 801b444:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b448:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801b44c:	4620      	mov	r0, r4
 801b44e:	4b0c      	ldr	r3, [pc, #48]	; (801b480 <scalbn+0x108>)
 801b450:	2200      	movs	r2, #0
 801b452:	e7e8      	b.n	801b426 <scalbn+0xae>
 801b454:	f3af 8000 	nop.w
 801b458:	c2f8f359 	.word	0xc2f8f359
 801b45c:	01a56e1f 	.word	0x01a56e1f
 801b460:	8800759c 	.word	0x8800759c
 801b464:	7e37e43c 	.word	0x7e37e43c
 801b468:	8800759c 	.word	0x8800759c
 801b46c:	fe37e43c 	.word	0xfe37e43c
 801b470:	c2f8f359 	.word	0xc2f8f359
 801b474:	81a56e1f 	.word	0x81a56e1f
 801b478:	43500000 	.word	0x43500000
 801b47c:	ffff3cb0 	.word	0xffff3cb0
 801b480:	3c900000 	.word	0x3c900000

0801b484 <_init>:
 801b484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b486:	bf00      	nop
 801b488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b48a:	bc08      	pop	{r3}
 801b48c:	469e      	mov	lr, r3
 801b48e:	4770      	bx	lr

0801b490 <_fini>:
 801b490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b492:	bf00      	nop
 801b494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b496:	bc08      	pop	{r3}
 801b498:	469e      	mov	lr, r3
 801b49a:	4770      	bx	lr
