
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c66c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f0  0801c800  0801c800  0002c800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d1f0  0801d1f0  000343e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801d1f0  0801d1f0  0002d1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d1f8  0801d1f8  000343e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d1f8  0801d1f8  0002d1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d1fc  0801d1fc  0002d1fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000043e8  20000000  0801d200  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d79c  200043e8  080215e8  000343e8  2**3
                  ALLOC
 10 ._user_heap_stack 000063c4  20011b84  080215e8  00041b84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000343e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035d2f  00000000  00000000  00034418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000715d  00000000  00000000  0006a147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e90  00000000  00000000  000712a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c50  00000000  00000000  00073138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aefe  00000000  00000000  00074d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000293a1  00000000  00000000  0009fc86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df286  00000000  00000000  000c9027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a82ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096c0  00000000  00000000  001a8300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200043e8 	.word	0x200043e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801c7e4 	.word	0x0801c7e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200043ec 	.word	0x200043ec
 80001cc:	0801c7e4 	.word	0x0801c7e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <packetRead>:
extern SCARA_LSPB_Clutch_TypeDef  gcode_clutch_configure[200];
Position_DataType position_type;
SCARA_Gcode_Cor_TypeDef	Gcode_Cor[1000];
uint16_t point_counter = 0, current_clutch_index = 0;
Robot_CommandTypedef pnp_move_option;
Robot_CommandTypedef 	packetRead	(uint8_t *message, int32_t length, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08e      	sub	sp, #56	; 0x38
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
	Transfer_Protocol protocol_id = message[0];
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    duty_cmd->id_command = message[1];
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3301      	adds	r3, #1
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	609a      	str	r2, [r3, #8]
	int32_t temp_pointer = 2;
 8001012:	2302      	movs	r3, #2
 8001014:	637b      	str	r3, [r7, #52]	; 0x34
    switch(protocol_id) 
 8001016:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <packetRead+0x38>
 800101e:	2b01      	cmp	r3, #1
 8001020:	f000 8240 	beq.w	80014a4 <packetRead+0x4b4>
 8001024:	f001 b828 	b.w	8002078 <packetRead+0x1088>
    {
        // reserved for Gcode file transfer
        case FILE_TRANSMISION:
        {
        	temp_pointer = 1;
 8001028:	2301      	movs	r3, #1
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
        	uint16_t timeout_value = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	867b      	strh	r3, [r7, #50]	; 0x32
        	do {
        		Gcode_Packet_Command_TypeDef move_type 	= message[temp_pointer] & 0x0f;
 8001030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	4413      	add	r3, r2
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	f003 030f 	and.w	r3, r3, #15
 800103c:	763b      	strb	r3, [r7, #24]
				switch (move_type){
 800103e:	7e3b      	ldrb	r3, [r7, #24]
 8001040:	2b05      	cmp	r3, #5
 8001042:	f200 821e 	bhi.w	8001482 <packetRead+0x492>
 8001046:	a201      	add	r2, pc, #4	; (adr r2, 800104c <packetRead+0x5c>)
 8001048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104c:	08001065 	.word	0x08001065
 8001050:	080011ad 	.word	0x080011ad
 8001054:	080011ad 	.word	0x080011ad
 8001058:	08001325 	.word	0x08001325
 800105c:	08001325 	.word	0x08001325
 8001060:	0800112f 	.word	0x0800112f
				case FIRST_PACKET:{
					Gcode_Mode = message[temp_pointer++] >> 4 & 0x0f;
 8001064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	637a      	str	r2, [r7, #52]	; 0x34
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	091b      	lsrs	r3, r3, #4
 8001074:	b2db      	uxtb	r3, r3
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b9e      	ldr	r3, [pc, #632]	; (80012f8 <packetRead+0x308>)
 800107e:	701a      	strb	r2, [r3, #0]
					if(Gcode_Mode == GCODE_LINEAR){
 8001080:	4b9d      	ldr	r3, [pc, #628]	; (80012f8 <packetRead+0x308>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b08      	cmp	r3, #8
 8001086:	d113      	bne.n	80010b0 <packetRead+0xc0>
						bezier_wc = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 8001088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	4413      	add	r3, r2
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fa47 	bl	8000524 <__aeabi_i2d>
 8001096:	a396      	add	r3, pc, #600	; (adr r3, 80012f0 <packetRead+0x300>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff faac 	bl	80005f8 <__aeabi_dmul>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4995      	ldr	r1, [pc, #596]	; (80012fc <packetRead+0x30c>)
 80010a6:	e9c1 2300 	strd	r2, r3, [r1]
 80010aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ac:	3304      	adds	r3, #4
 80010ae:	637b      	str	r3, [r7, #52]	; 0x34
					}
					down_z_height = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 80010b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	4413      	add	r3, r2
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fa33 	bl	8000524 <__aeabi_i2d>
 80010be:	a38c      	add	r3, pc, #560	; (adr r3, 80012f0 <packetRead+0x300>)
 80010c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c4:	f7ff fa98 	bl	80005f8 <__aeabi_dmul>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	498c      	ldr	r1, [pc, #560]	; (8001300 <packetRead+0x310>)
 80010ce:	e9c1 2300 	strd	r2, r3, [r1]
 80010d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d4:	3304      	adds	r3, #4
 80010d6:	637b      	str	r3, [r7, #52]	; 0x34
					up_z_height   = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 80010d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	4413      	add	r3, r2
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fa1f 	bl	8000524 <__aeabi_i2d>
 80010e6:	a382      	add	r3, pc, #520	; (adr r3, 80012f0 <packetRead+0x300>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff fa84 	bl	80005f8 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4983      	ldr	r1, [pc, #524]	; (8001304 <packetRead+0x314>)
 80010f6:	e9c1 2300 	strd	r2, r3, [r1]
 80010fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010fc:	3304      	adds	r3, #4
 80010fe:	637b      	str	r3, [r7, #52]	; 0x34
					total_num_of_point = B2I(temp_pointer);						 temp_pointer+=4;
 8001100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	4413      	add	r3, r2
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a7f      	ldr	r2, [pc, #508]	; (8001308 <packetRead+0x318>)
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800110e:	3304      	adds	r3, #4
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
					point_counter = 0;
 8001112:	4b7e      	ldr	r3, [pc, #504]	; (800130c <packetRead+0x31c>)
 8001114:	2200      	movs	r2, #0
 8001116:	801a      	strh	r2, [r3, #0]
					current_clutch_index = 0;
 8001118:	4b7d      	ldr	r3, [pc, #500]	; (8001310 <packetRead+0x320>)
 800111a:	2200      	movs	r2, #0
 800111c:	801a      	strh	r2, [r3, #0]
					pre_clutch_index = -1;
 800111e:	4b7d      	ldr	r3, [pc, #500]	; (8001314 <packetRead+0x324>)
 8001120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001124:	801a      	strh	r2, [r3, #0]
					pre_height = UP_Z;
 8001126:	4b7c      	ldr	r3, [pc, #496]	; (8001318 <packetRead+0x328>)
 8001128:	2206      	movs	r2, #6
 800112a:	701a      	strb	r2, [r3, #0]
				}
				break;
 800112c:	e1a9      	b.n	8001482 <packetRead+0x492>
				case CLUTCH_HEADER_TYPE:{
					temp_pointer++;
 800112e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001130:	3301      	adds	r3, #1
 8001132:	637b      	str	r3, [r7, #52]	; 0x34
					gcode_clutch_configure[current_clutch_index].total_s     = B2I(temp_pointer); temp_pointer+=4;
 8001134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4413      	add	r3, r2
 800113a:	4a75      	ldr	r2, [pc, #468]	; (8001310 <packetRead+0x320>)
 800113c:	8812      	ldrh	r2, [r2, #0]
 800113e:	4610      	mov	r0, r2
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4976      	ldr	r1, [pc, #472]	; (800131c <packetRead+0x32c>)
 8001144:	4603      	mov	r3, r0
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4403      	add	r3, r0
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001152:	3304      	adds	r3, #4
 8001154:	637b      	str	r3, [r7, #52]	; 0x34
					gcode_clutch_configure[current_clutch_index].veloc 	     = B2I(temp_pointer); temp_pointer+=4;
 8001156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	4a6c      	ldr	r2, [pc, #432]	; (8001310 <packetRead+0x320>)
 800115e:	8812      	ldrh	r2, [r2, #0]
 8001160:	4610      	mov	r0, r2
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	496d      	ldr	r1, [pc, #436]	; (800131c <packetRead+0x32c>)
 8001166:	4603      	mov	r3, r0
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4403      	add	r3, r0
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	440b      	add	r3, r1
 8001170:	3304      	adds	r3, #4
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001176:	3304      	adds	r3, #4
 8001178:	637b      	str	r3, [r7, #52]	; 0x34
					gcode_clutch_configure[current_clutch_index].Depth_Feed  = B2I(temp_pointer); temp_pointer+=4;
 800117a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	4a63      	ldr	r2, [pc, #396]	; (8001310 <packetRead+0x320>)
 8001182:	8812      	ldrh	r2, [r2, #0]
 8001184:	4610      	mov	r0, r2
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4964      	ldr	r1, [pc, #400]	; (800131c <packetRead+0x32c>)
 800118a:	4603      	mov	r3, r0
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	4403      	add	r3, r0
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	440b      	add	r3, r1
 8001194:	3308      	adds	r3, #8
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800119a:	3304      	adds	r3, #4
 800119c:	637b      	str	r3, [r7, #52]	; 0x34
					current_clutch_index++;
 800119e:	4b5c      	ldr	r3, [pc, #368]	; (8001310 <packetRead+0x320>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b5a      	ldr	r3, [pc, #360]	; (8001310 <packetRead+0x320>)
 80011a8:	801a      	strh	r2, [r3, #0]
				}
				break;
 80011aa:	e16a      	b.n	8001482 <packetRead+0x492>
				case BEZIER_TYPE:
				case LINEAR_TYPE:{
					Gcode_Cor[point_counter].configure.type_define[0] = move_type;
 80011ac:	4b57      	ldr	r3, [pc, #348]	; (800130c <packetRead+0x31c>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	4a5b      	ldr	r2, [pc, #364]	; (8001320 <packetRead+0x330>)
 80011b4:	460b      	mov	r3, r1
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	1a5b      	subs	r3, r3, r1
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	331a      	adds	r3, #26
 80011c0:	7e3a      	ldrb	r2, [r7, #24]
 80011c2:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].configure.type_define[1] = message[temp_pointer++] >> 4 & 0x0f;
 80011c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011c6:	1c5a      	adds	r2, r3, #1
 80011c8:	637a      	str	r2, [r7, #52]	; 0x34
 80011ca:	461a      	mov	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4413      	add	r3, r2
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	4a4d      	ldr	r2, [pc, #308]	; (800130c <packetRead+0x31c>)
 80011d8:	8812      	ldrh	r2, [r2, #0]
 80011da:	4611      	mov	r1, r2
 80011dc:	f003 030f 	and.w	r3, r3, #15
 80011e0:	b2d8      	uxtb	r0, r3
 80011e2:	4a4f      	ldr	r2, [pc, #316]	; (8001320 <packetRead+0x330>)
 80011e4:	460b      	mov	r3, r1
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	1a5b      	subs	r3, r3, r1
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	331b      	adds	r3, #27
 80011f0:	4602      	mov	r2, r0
 80011f2:	701a      	strb	r2, [r3, #0]
					if(move_type == BEZIER_TYPE){
 80011f4:	7e3b      	ldrb	r3, [r7, #24]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d111      	bne.n	800121e <packetRead+0x22e>
						Gcode_Cor[point_counter].I = B2I(temp_pointer);	temp_pointer+=4;
 80011fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	4a42      	ldr	r2, [pc, #264]	; (800130c <packetRead+0x31c>)
 8001202:	8812      	ldrh	r2, [r2, #0]
 8001204:	4610      	mov	r0, r2
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4945      	ldr	r1, [pc, #276]	; (8001320 <packetRead+0x330>)
 800120a:	4603      	mov	r3, r0
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	1a1b      	subs	r3, r3, r0
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	440b      	add	r3, r1
 8001214:	330c      	adds	r3, #12
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800121a:	3304      	adds	r3, #4
 800121c:	637b      	str	r3, [r7, #52]	; 0x34
					}
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 800121e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	4a39      	ldr	r2, [pc, #228]	; (800130c <packetRead+0x31c>)
 8001226:	8812      	ldrh	r2, [r2, #0]
 8001228:	4610      	mov	r0, r2
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	493c      	ldr	r1, [pc, #240]	; (8001320 <packetRead+0x330>)
 800122e:	4603      	mov	r3, r0
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	1a1b      	subs	r3, r3, r0
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	440b      	add	r3, r1
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123c:	3304      	adds	r3, #4
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 8001240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	4413      	add	r3, r2
 8001246:	4a31      	ldr	r2, [pc, #196]	; (800130c <packetRead+0x31c>)
 8001248:	8812      	ldrh	r2, [r2, #0]
 800124a:	4610      	mov	r0, r2
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4934      	ldr	r1, [pc, #208]	; (8001320 <packetRead+0x330>)
 8001250:	4603      	mov	r3, r0
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	1a1b      	subs	r3, r3, r0
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	3304      	adds	r3, #4
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001260:	3304      	adds	r3, #4
 8001262:	637b      	str	r3, [r7, #52]	; 0x34
					if(Gcode_Mode == GCODE_LINEAR){
 8001264:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <packetRead+0x308>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b08      	cmp	r3, #8
 800126a:	d112      	bne.n	8001292 <packetRead+0x2a2>
						Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 800126c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	4413      	add	r3, r2
 8001272:	4a26      	ldr	r2, [pc, #152]	; (800130c <packetRead+0x31c>)
 8001274:	8812      	ldrh	r2, [r2, #0]
 8001276:	4610      	mov	r0, r2
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	4929      	ldr	r1, [pc, #164]	; (8001320 <packetRead+0x330>)
 800127c:	4603      	mov	r3, r0
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	1a1b      	subs	r3, r3, r0
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	3308      	adds	r3, #8
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800128c:	3304      	adds	r3, #4
 800128e:	637b      	str	r3, [r7, #52]	; 0x34
 8001290:	e025      	b.n	80012de <packetRead+0x2ee>
					}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <packetRead+0x308>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b09      	cmp	r3, #9
 8001298:	d121      	bne.n	80012de <packetRead+0x2ee>
						Gcode_Cor[point_counter].configure.clutch_index = current_clutch_index - 1;
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <packetRead+0x320>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	4a1b      	ldr	r2, [pc, #108]	; (800130c <packetRead+0x31c>)
 80012a0:	8812      	ldrh	r2, [r2, #0]
 80012a2:	4611      	mov	r1, r2
 80012a4:	3b01      	subs	r3, #1
 80012a6:	b298      	uxth	r0, r3
 80012a8:	4a1d      	ldr	r2, [pc, #116]	; (8001320 <packetRead+0x330>)
 80012aa:	460b      	mov	r3, r1
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	1a5b      	subs	r3, r3, r1
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	3318      	adds	r3, #24
 80012b6:	4602      	mov	r2, r0
 80012b8:	801a      	strh	r2, [r3, #0]
						Gcode_Cor[point_counter].T = B2I(temp_pointer);	temp_pointer+=4;
 80012ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	4413      	add	r3, r2
 80012c0:	4a12      	ldr	r2, [pc, #72]	; (800130c <packetRead+0x31c>)
 80012c2:	8812      	ldrh	r2, [r2, #0]
 80012c4:	4610      	mov	r0, r2
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4915      	ldr	r1, [pc, #84]	; (8001320 <packetRead+0x330>)
 80012ca:	4603      	mov	r3, r0
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	1a1b      	subs	r3, r3, r0
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	440b      	add	r3, r1
 80012d4:	3314      	adds	r3, #20
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012da:	3304      	adds	r3, #4
 80012dc:	637b      	str	r3, [r7, #52]	; 0x34
					}
					point_counter++;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <packetRead+0x31c>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	3301      	adds	r3, #1
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <packetRead+0x31c>)
 80012e8:	801a      	strh	r2, [r3, #0]
				}
				break;
 80012ea:	e0ca      	b.n	8001482 <packetRead+0x492>
 80012ec:	f3af 8000 	nop.w
 80012f0:	a0000000 	.word	0xa0000000
 80012f4:	3eb0c6f7 	.word	0x3eb0c6f7
 80012f8:	200085c8 	.word	0x200085c8
 80012fc:	20008fb8 	.word	0x20008fb8
 8001300:	20008f38 	.word	0x20008f38
 8001304:	200085c0 	.word	0x200085c0
 8001308:	20008fa8 	.word	0x20008fa8
 800130c:	20004404 	.word	0x20004404
 8001310:	20004406 	.word	0x20004406
 8001314:	2000fd2a 	.word	0x2000fd2a
 8001318:	20008f80 	.word	0x20008f80
 800131c:	200085d8 	.word	0x200085d8
 8001320:	20008fc0 	.word	0x20008fc0
				case ARC_CW_TYPE:
				case ARC_AW_TYPE:{
					Gcode_Cor[point_counter].configure.type_define[0] = move_type;
 8001324:	4b8b      	ldr	r3, [pc, #556]	; (8001554 <packetRead+0x564>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	4a8b      	ldr	r2, [pc, #556]	; (8001558 <packetRead+0x568>)
 800132c:	460b      	mov	r3, r1
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	1a5b      	subs	r3, r3, r1
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	331a      	adds	r3, #26
 8001338:	7e3a      	ldrb	r2, [r7, #24]
 800133a:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].configure.type_define[1] = message[temp_pointer++] >> 4 & 0x0f;
 800133c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	637a      	str	r2, [r7, #52]	; 0x34
 8001342:	461a      	mov	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4413      	add	r3, r2
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	091b      	lsrs	r3, r3, #4
 800134c:	b2db      	uxtb	r3, r3
 800134e:	4a81      	ldr	r2, [pc, #516]	; (8001554 <packetRead+0x564>)
 8001350:	8812      	ldrh	r2, [r2, #0]
 8001352:	4611      	mov	r1, r2
 8001354:	f003 030f 	and.w	r3, r3, #15
 8001358:	b2d8      	uxtb	r0, r3
 800135a:	4a7f      	ldr	r2, [pc, #508]	; (8001558 <packetRead+0x568>)
 800135c:	460b      	mov	r3, r1
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	1a5b      	subs	r3, r3, r1
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	331b      	adds	r3, #27
 8001368:	4602      	mov	r2, r0
 800136a:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 800136c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	4413      	add	r3, r2
 8001372:	4a78      	ldr	r2, [pc, #480]	; (8001554 <packetRead+0x564>)
 8001374:	8812      	ldrh	r2, [r2, #0]
 8001376:	4610      	mov	r0, r2
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4977      	ldr	r1, [pc, #476]	; (8001558 <packetRead+0x568>)
 800137c:	4603      	mov	r3, r0
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	1a1b      	subs	r3, r3, r0
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	440b      	add	r3, r1
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800138a:	3304      	adds	r3, #4
 800138c:	637b      	str	r3, [r7, #52]	; 0x34
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 800138e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	4413      	add	r3, r2
 8001394:	4a6f      	ldr	r2, [pc, #444]	; (8001554 <packetRead+0x564>)
 8001396:	8812      	ldrh	r2, [r2, #0]
 8001398:	4610      	mov	r0, r2
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	496e      	ldr	r1, [pc, #440]	; (8001558 <packetRead+0x568>)
 800139e:	4603      	mov	r3, r0
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	1a1b      	subs	r3, r3, r0
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	3304      	adds	r3, #4
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ae:	3304      	adds	r3, #4
 80013b0:	637b      	str	r3, [r7, #52]	; 0x34
					if(Gcode_Mode == GCODE_LINEAR){
 80013b2:	4b6a      	ldr	r3, [pc, #424]	; (800155c <packetRead+0x56c>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d112      	bne.n	80013e0 <packetRead+0x3f0>
						Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 80013ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	4413      	add	r3, r2
 80013c0:	4a64      	ldr	r2, [pc, #400]	; (8001554 <packetRead+0x564>)
 80013c2:	8812      	ldrh	r2, [r2, #0]
 80013c4:	4610      	mov	r0, r2
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4963      	ldr	r1, [pc, #396]	; (8001558 <packetRead+0x568>)
 80013ca:	4603      	mov	r3, r0
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	1a1b      	subs	r3, r3, r0
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	440b      	add	r3, r1
 80013d4:	3308      	adds	r3, #8
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013da:	3304      	adds	r3, #4
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
 80013de:	e025      	b.n	800142c <packetRead+0x43c>
					}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 80013e0:	4b5e      	ldr	r3, [pc, #376]	; (800155c <packetRead+0x56c>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b09      	cmp	r3, #9
 80013e6:	d121      	bne.n	800142c <packetRead+0x43c>
						Gcode_Cor[point_counter].configure.clutch_index = current_clutch_index - 1;
 80013e8:	4b5d      	ldr	r3, [pc, #372]	; (8001560 <packetRead+0x570>)
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	4a59      	ldr	r2, [pc, #356]	; (8001554 <packetRead+0x564>)
 80013ee:	8812      	ldrh	r2, [r2, #0]
 80013f0:	4611      	mov	r1, r2
 80013f2:	3b01      	subs	r3, #1
 80013f4:	b298      	uxth	r0, r3
 80013f6:	4a58      	ldr	r2, [pc, #352]	; (8001558 <packetRead+0x568>)
 80013f8:	460b      	mov	r3, r1
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	1a5b      	subs	r3, r3, r1
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	3318      	adds	r3, #24
 8001404:	4602      	mov	r2, r0
 8001406:	801a      	strh	r2, [r3, #0]
						Gcode_Cor[point_counter].T = B2I(temp_pointer);	temp_pointer+=4;
 8001408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	4413      	add	r3, r2
 800140e:	4a51      	ldr	r2, [pc, #324]	; (8001554 <packetRead+0x564>)
 8001410:	8812      	ldrh	r2, [r2, #0]
 8001412:	4610      	mov	r0, r2
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4950      	ldr	r1, [pc, #320]	; (8001558 <packetRead+0x568>)
 8001418:	4603      	mov	r3, r0
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	1a1b      	subs	r3, r3, r0
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	3314      	adds	r3, #20
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001428:	3304      	adds	r3, #4
 800142a:	637b      	str	r3, [r7, #52]	; 0x34
					}
					Gcode_Cor[point_counter].I = B2I(temp_pointer);	temp_pointer+=4;
 800142c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	4413      	add	r3, r2
 8001432:	4a48      	ldr	r2, [pc, #288]	; (8001554 <packetRead+0x564>)
 8001434:	8812      	ldrh	r2, [r2, #0]
 8001436:	4610      	mov	r0, r2
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4947      	ldr	r1, [pc, #284]	; (8001558 <packetRead+0x568>)
 800143c:	4603      	mov	r3, r0
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	1a1b      	subs	r3, r3, r0
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	330c      	adds	r3, #12
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800144c:	3304      	adds	r3, #4
 800144e:	637b      	str	r3, [r7, #52]	; 0x34
					Gcode_Cor[point_counter].J = B2I(temp_pointer);	temp_pointer+=4;
 8001450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4413      	add	r3, r2
 8001456:	4a3f      	ldr	r2, [pc, #252]	; (8001554 <packetRead+0x564>)
 8001458:	8812      	ldrh	r2, [r2, #0]
 800145a:	4610      	mov	r0, r2
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	493e      	ldr	r1, [pc, #248]	; (8001558 <packetRead+0x568>)
 8001460:	4603      	mov	r3, r0
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	1a1b      	subs	r3, r3, r0
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	3310      	adds	r3, #16
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001470:	3304      	adds	r3, #4
 8001472:	637b      	str	r3, [r7, #52]	; 0x34
					point_counter++;
 8001474:	4b37      	ldr	r3, [pc, #220]	; (8001554 <packetRead+0x564>)
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	b29a      	uxth	r2, r3
 800147c:	4b35      	ldr	r3, [pc, #212]	; (8001554 <packetRead+0x564>)
 800147e:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001480:	bf00      	nop
				}
				if(timeout_value++ == 0xffff) break;
 8001482:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001484:	1c5a      	adds	r2, r3, #1
 8001486:	867a      	strh	r2, [r7, #50]	; 0x32
 8001488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800148c:	4293      	cmp	r3, r2
 800148e:	d005      	beq.n	800149c <packetRead+0x4ac>
        	}while(temp_pointer < length);
 8001490:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	429a      	cmp	r2, r3
 8001496:	f6ff adcb 	blt.w	8001030 <packetRead+0x40>
 800149a:	e000      	b.n	800149e <packetRead+0x4ae>
				if(timeout_value++ == 0xffff) break;
 800149c:	bf00      	nop
        	return CMD_GCODE;
 800149e:	231a      	movs	r3, #26
 80014a0:	f000 bdeb 	b.w	800207a <packetRead+0x108a>
        break;

        // command control from pc
        case COMMAND_TRANSMISION:
        {
        	Robot_CommandTypedef command_id = message[1];
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	785b      	ldrb	r3, [r3, #1]
 80014a8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            switch(command_id)
 80014ac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80014b0:	2b19      	cmp	r3, #25
 80014b2:	f200 85df 	bhi.w	8002074 <packetRead+0x1084>
 80014b6:	a201      	add	r2, pc, #4	; (adr r2, 80014bc <packetRead+0x4cc>)
 80014b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014bc:	08001525 	.word	0x08001525
 80014c0:	0800153d 	.word	0x0800153d
 80014c4:	08001569 	.word	0x08001569
 80014c8:	08001631 	.word	0x08001631
 80014cc:	08001885 	.word	0x08001885
 80014d0:	08001631 	.word	0x08001631
 80014d4:	08001af7 	.word	0x08001af7
 80014d8:	08001afb 	.word	0x08001afb
 80014dc:	08002075 	.word	0x08002075
 80014e0:	08001b1b 	.word	0x08001b1b
 80014e4:	08001b47 	.word	0x08001b47
 80014e8:	08001ba9 	.word	0x08001ba9
 80014ec:	08001c77 	.word	0x08001c77
 80014f0:	08002045 	.word	0x08002045
 80014f4:	08002055 	.word	0x08002055
 80014f8:	08002075 	.word	0x08002075
 80014fc:	08002075 	.word	0x08002075
 8001500:	08001f81 	.word	0x08001f81
 8001504:	08002065 	.word	0x08002065
 8001508:	08002035 	.word	0x08002035
 800150c:	08001c15 	.word	0x08001c15
 8001510:	08001c3f 	.word	0x08001c3f
 8001514:	08002075 	.word	0x08002075
 8001518:	08002075 	.word	0x08002075
 800151c:	08001cb1 	.word	0x08001cb1
 8001520:	08001da1 	.word	0x08001da1
            {
                // Stop now
                case CMD_STOPNOW:
                {
                    duty_cmd->robot_mode = SCARA_MODE_STOP;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	2200      	movs	r2, #0
 8001528:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	2201      	movs	r2, #1
 800152e:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
                    return CMD_STOPNOW;
 8001536:	2300      	movs	r3, #0
 8001538:	f000 bd9f 	b.w	800207a <packetRead+0x108a>
                break;

                // Scan limit
                case CMD_SCAN_LIMIT:
                {
                    duty_cmd->robot_mode = SCARA_MODE_SCAN;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	2201      	movs	r2, #1
 8001540:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2201      	movs	r2, #1
 8001546:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
                    return CMD_SCAN_LIMIT;
 800154e:	2301      	movs	r3, #1
 8001550:	f000 bd93 	b.w	800207a <packetRead+0x108a>
 8001554:	20004404 	.word	0x20004404
 8001558:	20008fc0 	.word	0x20008fc0
 800155c:	200085c8 	.word	0x200085c8
 8001560:	20004406 	.word	0x20004406
 8001564:	358637bd 	.word	0x358637bd
                break;

                // Move home
                case CMD_MOVE_HOME:
                {
                    if (length == 10){ // 2 int32_t number + 2 define byte
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2b0a      	cmp	r3, #10
 800156c:	d15d      	bne.n	800162a <packetRead+0x63a>
						temp_pointer = -2;
 800156e:	f06f 0301 	mvn.w	r3, #1
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
						duty_cmd->v_factor = B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001576:	3304      	adds	r3, #4
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
 800157a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	4413      	add	r3, r2
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	ee07 3a90 	vmov	s15, r3
 8001586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800158a:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8001564 <packetRead+0x574>
 800158e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001592:	ee17 0a90 	vmov	r0, s15
 8001596:	f7fe ffd7 	bl	8000548 <__aeabi_f2d>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	6839      	ldr	r1, [r7, #0]
 80015a0:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
						duty_cmd->a_factor = B2I(temp_pointer)*COR_INVERSE_SCALE;
 80015a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	4413      	add	r3, r2
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b4:	ed1f 7a15 	vldr	s14, [pc, #-84]	; 8001564 <packetRead+0x574>
 80015b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015bc:	ee17 0a90 	vmov	r0, s15
 80015c0:	f7fe ffc2 	bl	8000548 <__aeabi_f2d>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	6839      	ldr	r1, [r7, #0]
 80015ca:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
                    }else{
                        return CMD_ERROR;
                    }
                    duty_cmd->target_point.x = 250;
 80015ce:	6839      	ldr	r1, [r7, #0]
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	4ba8      	ldr	r3, [pc, #672]	; (8001878 <packetRead+0x888>)
 80015d6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
                    duty_cmd->target_point.y = -200;
 80015da:	6839      	ldr	r1, [r7, #0]
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	4ba6      	ldr	r3, [pc, #664]	; (800187c <packetRead+0x88c>)
 80015e2:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
                    duty_cmd->target_point.z = 120;
 80015e6:	6839      	ldr	r1, [r7, #0]
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	4ba4      	ldr	r3, [pc, #656]	; (8001880 <packetRead+0x890>)
 80015ee:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
                    duty_cmd->target_point.roll = 0;
 80015f2:	6839      	ldr	r1, [r7, #0]
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

                    duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2200      	movs	r2, #0
 8001604:	745a      	strb	r2, [r3, #17]
                    duty_cmd->space_type = DUTY_SPACE_JOINT;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	2201      	movs	r2, #1
 800160a:	735a      	strb	r2, [r3, #13]
                    duty_cmd->joint_type = DUTY_JOINT_4DOF;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	2201      	movs	r2, #1
 8001610:	73da      	strb	r2, [r3, #15]
                    duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	2202      	movs	r2, #2
 8001616:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	2201      	movs	r2, #1
 800161c:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
                    return CMD_MOVE_HOME;
 8001624:	2302      	movs	r3, #2
 8001626:	f000 bd28 	b.w	800207a <packetRead+0x108a>
                        return CMD_ERROR;
 800162a:	2316      	movs	r3, #22
 800162c:	f000 bd25 	b.w	800207a <packetRead+0x108a>

                case CMD_MOVE_JOINT:
                // Move line
                case CMD_MOVE_LINE:
                {
                    if (length == 29){ // 6 int32_t number + 3 byte number + 2 define byte
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b1d      	cmp	r3, #29
 8001634:	f040 8109 	bne.w	800184a <packetRead+0x85a>
						//scaraSetScanFlag();
						uint8_t mode_init;
						temp_pointer = -2;
 8001638:	f06f 0301 	mvn.w	r3, #1
 800163c:	637b      	str	r3, [r7, #52]	; 0x34

						duty_cmd->target_point.x = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800163e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001640:	3304      	adds	r3, #4
 8001642:	637b      	str	r3, [r7, #52]	; 0x34
 8001644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	4413      	add	r3, r2
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe ff69 	bl	8000524 <__aeabi_i2d>
 8001652:	a387      	add	r3, pc, #540	; (adr r3, 8001870 <packetRead+0x880>)
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	f7fe ffce 	bl	80005f8 <__aeabi_dmul>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	6839      	ldr	r1, [r7, #0]
 8001662:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
						duty_cmd->target_point.y = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001668:	3304      	adds	r3, #4
 800166a:	637b      	str	r3, [r7, #52]	; 0x34
 800166c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4413      	add	r3, r2
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe ff55 	bl	8000524 <__aeabi_i2d>
 800167a:	a37d      	add	r3, pc, #500	; (adr r3, 8001870 <packetRead+0x880>)
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	f7fe ffba 	bl	80005f8 <__aeabi_dmul>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	6839      	ldr	r1, [r7, #0]
 800168a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
						duty_cmd->target_point.z = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800168e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001690:	3304      	adds	r3, #4
 8001692:	637b      	str	r3, [r7, #52]	; 0x34
 8001694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	4413      	add	r3, r2
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ff41 	bl	8000524 <__aeabi_i2d>
 80016a2:	a373      	add	r3, pc, #460	; (adr r3, 8001870 <packetRead+0x880>)
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	f7fe ffa6 	bl	80005f8 <__aeabi_dmul>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	6839      	ldr	r1, [r7, #0]
 80016b2:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
						duty_cmd->target_point.roll = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80016b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b8:	3304      	adds	r3, #4
 80016ba:	637b      	str	r3, [r7, #52]	; 0x34
 80016bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	4413      	add	r3, r2
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe ff2d 	bl	8000524 <__aeabi_i2d>
 80016ca:	a369      	add	r3, pc, #420	; (adr r3, 8001870 <packetRead+0x880>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7fe ff92 	bl	80005f8 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	6839      	ldr	r1, [r7, #0]
 80016da:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
						duty_cmd->v_factor = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80016de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e0:	3304      	adds	r3, #4
 80016e2:	637b      	str	r3, [r7, #52]	; 0x34
 80016e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	4413      	add	r3, r2
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe ff19 	bl	8000524 <__aeabi_i2d>
 80016f2:	a35f      	add	r3, pc, #380	; (adr r3, 8001870 <packetRead+0x880>)
 80016f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f8:	f7fe ff7e 	bl	80005f8 <__aeabi_dmul>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	6839      	ldr	r1, [r7, #0]
 8001702:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
						mode_init = message[temp_pointer+=4];
 8001706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001708:	3304      	adds	r3, #4
 800170a:	637b      	str	r3, [r7, #52]	; 0x34
 800170c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	4413      	add	r3, r2
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	767b      	strb	r3, [r7, #25]

						if(mode_init == DUTY_MODE_INIT_QVA){
 8001716:	7e7b      	ldrb	r3, [r7, #25]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d117      	bne.n	800174c <packetRead+0x75c>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	2200      	movs	r2, #0
 8001720:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001724:	3301      	adds	r3, #1
 8001726:	637b      	str	r3, [r7, #52]	; 0x34
 8001728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	4413      	add	r3, r2
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe fef7 	bl	8000524 <__aeabi_i2d>
 8001736:	a34e      	add	r3, pc, #312	; (adr r3, 8001870 <packetRead+0x880>)
 8001738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173c:	f7fe ff5c 	bl	80005f8 <__aeabi_dmul>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	6839      	ldr	r1, [r7, #0]
 8001746:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
 800174a:	e053      	b.n	80017f4 <packetRead+0x804>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 800174c:	7e7b      	ldrb	r3, [r7, #25]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d117      	bne.n	8001782 <packetRead+0x792>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2201      	movs	r2, #1
 8001756:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800175a:	3301      	adds	r3, #1
 800175c:	637b      	str	r3, [r7, #52]	; 0x34
 800175e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe fedc 	bl	8000524 <__aeabi_i2d>
 800176c:	a340      	add	r3, pc, #256	; (adr r3, 8001870 <packetRead+0x880>)
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	f7fe ff41 	bl	80005f8 <__aeabi_dmul>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	6839      	ldr	r1, [r7, #0]
 800177c:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001780:	e038      	b.n	80017f4 <packetRead+0x804>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 8001782:	7e7b      	ldrb	r3, [r7, #25]
 8001784:	2b03      	cmp	r3, #3
 8001786:	d117      	bne.n	80017b8 <packetRead+0x7c8>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	2203      	movs	r2, #3
 800178c:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 800178e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001790:	3301      	adds	r3, #1
 8001792:	637b      	str	r3, [r7, #52]	; 0x34
 8001794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	4413      	add	r3, r2
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fec1 	bl	8000524 <__aeabi_i2d>
 80017a2:	a333      	add	r3, pc, #204	; (adr r3, 8001870 <packetRead+0x880>)
 80017a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a8:	f7fe ff26 	bl	80005f8 <__aeabi_dmul>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	6839      	ldr	r1, [r7, #0]
 80017b2:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80017b6:	e01d      	b.n	80017f4 <packetRead+0x804>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 80017b8:	7e7b      	ldrb	r3, [r7, #25]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d117      	bne.n	80017ee <packetRead+0x7fe>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	2202      	movs	r2, #2
 80017c2:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80017c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c6:	3301      	adds	r3, #1
 80017c8:	637b      	str	r3, [r7, #52]	; 0x34
 80017ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	4413      	add	r3, r2
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fea6 	bl	8000524 <__aeabi_i2d>
 80017d8:	a325      	add	r3, pc, #148	; (adr r3, 8001870 <packetRead+0x880>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	f7fe ff0b 	bl	80005f8 <__aeabi_dmul>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	6839      	ldr	r1, [r7, #0]
 80017e8:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
 80017ec:	e002      	b.n	80017f4 <packetRead+0x804>
						}else{
							return CMD_ERROR;
 80017ee:	2316      	movs	r3, #22
 80017f0:	f000 bc43 	b.w	800207a <packetRead+0x108a>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 80017f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f6:	3304      	adds	r3, #4
 80017f8:	637b      	str	r3, [r7, #52]	; 0x34
 80017fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	4413      	add	r3, r2
 8001800:	781a      	ldrb	r2, [r3, #0]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 8001806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001808:	3301      	adds	r3, #1
 800180a:	637b      	str	r3, [r7, #52]	; 0x34
 800180c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	4413      	add	r3, r2
 8001812:	781a      	ldrb	r2, [r3, #0]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	741a      	strb	r2, [r3, #16]
						if(command_id == CMD_MOVE_LINE){
 8001818:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800181c:	2b03      	cmp	r3, #3
 800181e:	d106      	bne.n	800182e <packetRead+0x83e>
							duty_cmd->path_type = DUTY_PATH_LINE;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	2200      	movs	r2, #0
 8001824:	739a      	strb	r2, [r3, #14]
							duty_cmd->space_type = DUTY_SPACE_TASK;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	2200      	movs	r2, #0
 800182a:	735a      	strb	r2, [r3, #13]
 800182c:	e010      	b.n	8001850 <packetRead+0x860>
						}else if(command_id == CMD_MOVE_JOINT){
 800182e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001832:	2b05      	cmp	r3, #5
 8001834:	d106      	bne.n	8001844 <packetRead+0x854>
							duty_cmd->joint_type = DUTY_JOINT_4DOF;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	2201      	movs	r2, #1
 800183a:	73da      	strb	r2, [r3, #15]
							duty_cmd->space_type = DUTY_SPACE_JOINT;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	2201      	movs	r2, #1
 8001840:	735a      	strb	r2, [r3, #13]
 8001842:	e005      	b.n	8001850 <packetRead+0x860>
						}else{
							return CMD_ERROR;
 8001844:	2316      	movs	r3, #22
 8001846:	f000 bc18 	b.w	800207a <packetRead+0x108a>
						}

					}else{
						return CMD_ERROR;
 800184a:	2316      	movs	r3, #22
 800184c:	f000 bc15 	b.w	800207a <packetRead+0x108a>
					}
					duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	2202      	movs	r2, #2
 8001854:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	2201      	movs	r2, #1
 800185a:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
					return command_id;
 8001862:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001866:	f000 bc08 	b.w	800207a <packetRead+0x108a>
 800186a:	bf00      	nop
 800186c:	f3af 8000 	nop.w
 8001870:	a0000000 	.word	0xa0000000
 8001874:	3eb0c6f7 	.word	0x3eb0c6f7
 8001878:	406f4000 	.word	0x406f4000
 800187c:	c0690000 	.word	0xc0690000
 8001880:	405e0000 	.word	0x405e0000
				break;


				// Move circle
                case CMD_MOVE_CIRCLE:{
                	if(length == 34){ // 7 int32_t number + 4 byte number + 2 define byte
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2b22      	cmp	r3, #34	; 0x22
 8001888:	f040 8133 	bne.w	8001af2 <packetRead+0xb02>
                		uint8_t mode_init, arc_type;
                		temp_pointer = -2;
 800188c:	f06f 0301 	mvn.w	r3, #1
 8001890:	637b      	str	r3, [r7, #52]	; 0x34
                		duty_cmd->target_point.x      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001894:	3304      	adds	r3, #4
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
 8001898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	4413      	add	r3, r2
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe3f 	bl	8000524 <__aeabi_i2d>
 80018a6:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 80018aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ae:	f7fe fea3 	bl	80005f8 <__aeabi_dmul>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	6839      	ldr	r1, [r7, #0]
 80018b8:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
                		duty_cmd->target_point.y      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80018bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018be:	3304      	adds	r3, #4
 80018c0:	637b      	str	r3, [r7, #52]	; 0x34
 80018c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fe2a 	bl	8000524 <__aeabi_i2d>
 80018d0:	f20f 43ac 	addw	r3, pc, #1196	; 0x4ac
 80018d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d8:	f7fe fe8e 	bl	80005f8 <__aeabi_dmul>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	6839      	ldr	r1, [r7, #0]
 80018e2:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
                		duty_cmd->sub_point.x 	      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80018e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e8:	3304      	adds	r3, #4
 80018ea:	637b      	str	r3, [r7, #52]	; 0x34
 80018ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	4413      	add	r3, r2
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fe15 	bl	8000524 <__aeabi_i2d>
 80018fa:	f20f 4384 	addw	r3, pc, #1156	; 0x484
 80018fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001902:	f7fe fe79 	bl	80005f8 <__aeabi_dmul>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	6839      	ldr	r1, [r7, #0]
 800190c:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
                		duty_cmd->sub_point.y         = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001912:	3304      	adds	r3, #4
 8001914:	637b      	str	r3, [r7, #52]	; 0x34
 8001916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fe00 	bl	8000524 <__aeabi_i2d>
 8001924:	f20f 4358 	addw	r3, pc, #1112	; 0x458
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f7fe fe64 	bl	80005f8 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	6839      	ldr	r1, [r7, #0]
 8001936:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
                		duty_cmd->target_point.roll   = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800193a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193c:	3304      	adds	r3, #4
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
 8001940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	4413      	add	r3, r2
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fdeb 	bl	8000524 <__aeabi_i2d>
 800194e:	f20f 4330 	addw	r3, pc, #1072	; 0x430
 8001952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001956:	f7fe fe4f 	bl	80005f8 <__aeabi_dmul>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	6839      	ldr	r1, [r7, #0]
 8001960:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
                		duty_cmd->v_factor			  = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001966:	3304      	adds	r3, #4
 8001968:	637b      	str	r3, [r7, #52]	; 0x34
 800196a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	4413      	add	r3, r2
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fdd6 	bl	8000524 <__aeabi_i2d>
 8001978:	f20f 4304 	addw	r3, pc, #1028	; 0x404
 800197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001980:	f7fe fe3a 	bl	80005f8 <__aeabi_dmul>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	6839      	ldr	r1, [r7, #0]
 800198a:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
                		arc_type = message[temp_pointer+=4];
 800198e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001990:	3304      	adds	r3, #4
 8001992:	637b      	str	r3, [r7, #52]	; 0x34
 8001994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	4413      	add	r3, r2
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	76fb      	strb	r3, [r7, #27]
                		if(arc_type == ARC_AW_TYPE){
 800199e:	7efb      	ldrb	r3, [r7, #27]
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d103      	bne.n	80019ac <packetRead+0x9bc>
                			duty_cmd->arc_dir = 1;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	2201      	movs	r2, #1
 80019a8:	615a      	str	r2, [r3, #20]
 80019aa:	e009      	b.n	80019c0 <packetRead+0x9d0>
                		}else if(arc_type == ARC_CW_TYPE){
 80019ac:	7efb      	ldrb	r3, [r7, #27]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d104      	bne.n	80019bc <packetRead+0x9cc>
                			duty_cmd->arc_dir = -1;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	f04f 32ff 	mov.w	r2, #4294967295
 80019b8:	615a      	str	r2, [r3, #20]
 80019ba:	e001      	b.n	80019c0 <packetRead+0x9d0>
                		}else{
                			return CMD_ERROR;
 80019bc:	2316      	movs	r3, #22
 80019be:	e35c      	b.n	800207a <packetRead+0x108a>
                		}
                		mode_init = message[temp_pointer+=1];
 80019c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c2:	3301      	adds	r3, #1
 80019c4:	637b      	str	r3, [r7, #52]	; 0x34
 80019c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	76bb      	strb	r3, [r7, #26]
						if(mode_init == DUTY_MODE_INIT_QVA){
 80019d0:	7ebb      	ldrb	r3, [r7, #26]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d117      	bne.n	8001a06 <packetRead+0xa16>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	2200      	movs	r2, #0
 80019da:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80019dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019de:	3301      	adds	r3, #1
 80019e0:	637b      	str	r3, [r7, #52]	; 0x34
 80019e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	4413      	add	r3, r2
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fd9a 	bl	8000524 <__aeabi_i2d>
 80019f0:	a3e3      	add	r3, pc, #908	; (adr r3, 8001d80 <packetRead+0xd90>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe fdff 	bl	80005f8 <__aeabi_dmul>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	6839      	ldr	r1, [r7, #0]
 8001a00:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
 8001a04:	e052      	b.n	8001aac <packetRead+0xabc>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 8001a06:	7ebb      	ldrb	r3, [r7, #26]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d117      	bne.n	8001a3c <packetRead+0xa4c>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a14:	3301      	adds	r3, #1
 8001a16:	637b      	str	r3, [r7, #52]	; 0x34
 8001a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fd7f 	bl	8000524 <__aeabi_i2d>
 8001a26:	a3d6      	add	r3, pc, #856	; (adr r3, 8001d80 <packetRead+0xd90>)
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	f7fe fde4 	bl	80005f8 <__aeabi_dmul>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	6839      	ldr	r1, [r7, #0]
 8001a36:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001a3a:	e037      	b.n	8001aac <packetRead+0xabc>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 8001a3c:	7ebb      	ldrb	r3, [r7, #26]
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d117      	bne.n	8001a72 <packetRead+0xa82>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	2203      	movs	r2, #3
 8001a46:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	4413      	add	r3, r2
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fd64 	bl	8000524 <__aeabi_i2d>
 8001a5c:	a3c8      	add	r3, pc, #800	; (adr r3, 8001d80 <packetRead+0xd90>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	f7fe fdc9 	bl	80005f8 <__aeabi_dmul>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	6839      	ldr	r1, [r7, #0]
 8001a6c:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001a70:	e01c      	b.n	8001aac <packetRead+0xabc>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 8001a72:	7ebb      	ldrb	r3, [r7, #26]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d117      	bne.n	8001aa8 <packetRead+0xab8>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a80:	3301      	adds	r3, #1
 8001a82:	637b      	str	r3, [r7, #52]	; 0x34
 8001a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	4413      	add	r3, r2
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fd49 	bl	8000524 <__aeabi_i2d>
 8001a92:	a3bb      	add	r3, pc, #748	; (adr r3, 8001d80 <packetRead+0xd90>)
 8001a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a98:	f7fe fdae 	bl	80005f8 <__aeabi_dmul>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	6839      	ldr	r1, [r7, #0]
 8001aa2:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
 8001aa6:	e001      	b.n	8001aac <packetRead+0xabc>
						}else{
							return CMD_ERROR;
 8001aa8:	2316      	movs	r3, #22
 8001aaa:	e2e6      	b.n	800207a <packetRead+0x108a>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 8001aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aae:	3304      	adds	r3, #4
 8001ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	781a      	ldrb	r2, [r3, #0]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 8001abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4413      	add	r3, r2
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	741a      	strb	r2, [r3, #16]
						duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	735a      	strb	r2, [r3, #13]
                	}else{
                		return CMD_ERROR;
                	}
                	duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
					return CMD_MOVE_CIRCLE;
 8001aee:	2304      	movs	r3, #4
 8001af0:	e2c3      	b.n	800207a <packetRead+0x108a>
                		return CMD_ERROR;
 8001af2:	2316      	movs	r3, #22
 8001af4:	e2c1      	b.n	800207a <packetRead+0x108a>
                break;

				// Rotate Single
				case CMD_ROTATE_SINGLE:
				{
					return CMD_ROTATE_SINGLE;
 8001af6:	2306      	movs	r3, #6
 8001af8:	e2bf      	b.n	800207a <packetRead+0x108a>
				break;

				// Set output
				case CMD_OUTPUT:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d10a      	bne.n	8001b16 <packetRead+0xb26>
						temp_pointer = 2;
 8001b00:	2302      	movs	r3, #2
 8001b02:	637b      	str	r3, [r7, #52]	; 0x34
						duty_cmd->arc_dir = message[temp_pointer];
 8001b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	4413      	add	r3, r2
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	615a      	str	r2, [r3, #20]
						return CMD_OUTPUT;
 8001b12:	2307      	movs	r3, #7
 8001b14:	e2b1      	b.n	800207a <packetRead+0x108a>
					}else{
						return CMD_ERROR;
 8001b16:	2316      	movs	r3, #22
 8001b18:	e2af      	b.n	800207a <packetRead+0x108a>
				break;

				// Read position
				case CMD_READ_POSITION:
				{
					if(length == 3){ // 1 byte categorize read type + 2 byte define
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d110      	bne.n	8001b42 <packetRead+0xb52>
						temp_pointer = 2;
 8001b20:	2302      	movs	r3, #2
 8001b22:	637b      	str	r3, [r7, #52]	; 0x34
						position_type = message[temp_pointer];
 8001b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4413      	add	r3, r2
 8001b2a:	781a      	ldrb	r2, [r3, #0]
 8001b2c:	4b96      	ldr	r3, [pc, #600]	; (8001d88 <packetRead+0xd98>)
 8001b2e:	701a      	strb	r2, [r3, #0]
						uint8_t lala[2] = {12, 24};
 8001b30:	f641 030c 	movw	r3, #6156	; 0x180c
 8001b34:	82bb      	strh	r3, [r7, #20]
						uint16_t tes = *(uint16_t*)lala;
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	83bb      	strh	r3, [r7, #28]
						return CMD_READ_POSITION;
 8001b3e:	2309      	movs	r3, #9
 8001b40:	e29b      	b.n	800207a <packetRead+0x108a>
					}else{
						return CMD_ERROR;
 8001b42:	2316      	movs	r3, #22
 8001b44:	e299      	b.n	800207a <packetRead+0x108a>
				break;			

				// Setting
				case CMD_TEST_METHOD_SETTING:
				{
					if (length == 6){ // 4 byte configure + 2 byte define
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b06      	cmp	r3, #6
 8001b4a:	d12b      	bne.n	8001ba4 <packetRead+0xbb4>
						temp_pointer = 2;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	637b      	str	r3, [r7, #52]	; 0x34
						test_value_array[0] = message[temp_pointer++];
 8001b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	637a      	str	r2, [r7, #52]	; 0x34
 8001b56:	461a      	mov	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	b25a      	sxtb	r2, r3
 8001b60:	4b8a      	ldr	r3, [pc, #552]	; (8001d8c <packetRead+0xd9c>)
 8001b62:	701a      	strb	r2, [r3, #0]
						test_value_array[1] = message[temp_pointer++];
 8001b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	637a      	str	r2, [r7, #52]	; 0x34
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	b25a      	sxtb	r2, r3
 8001b74:	4b85      	ldr	r3, [pc, #532]	; (8001d8c <packetRead+0xd9c>)
 8001b76:	705a      	strb	r2, [r3, #1]
						test_value_array[2] = message[temp_pointer++];
 8001b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	637a      	str	r2, [r7, #52]	; 0x34
 8001b7e:	461a      	mov	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4413      	add	r3, r2
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	b25a      	sxtb	r2, r3
 8001b88:	4b80      	ldr	r3, [pc, #512]	; (8001d8c <packetRead+0xd9c>)
 8001b8a:	709a      	strb	r2, [r3, #2]
						test_value_array[3] = message[temp_pointer++];
 8001b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	637a      	str	r2, [r7, #52]	; 0x34
 8001b92:	461a      	mov	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4413      	add	r3, r2
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	b25a      	sxtb	r2, r3
 8001b9c:	4b7b      	ldr	r3, [pc, #492]	; (8001d8c <packetRead+0xd9c>)
 8001b9e:	70da      	strb	r2, [r3, #3]
						return CMD_TEST_METHOD_SETTING;
 8001ba0:	230a      	movs	r3, #10
 8001ba2:	e26a      	b.n	800207a <packetRead+0x108a>
					}else{
						return CMD_ERROR;
 8001ba4:	2316      	movs	r3, #22
 8001ba6:	e268      	b.n	800207a <packetRead+0x108a>
				break;

				// Change method
				case CMD_METHOD_CHANGE:
				{
					if(length == 3){ // 1 byte configure + 2 byte define
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d130      	bne.n	8001c10 <packetRead+0xc20>
						uint8_t method;
						temp_pointer = 2;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	637b      	str	r3, [r7, #52]	; 0x34
						method = message[temp_pointer];
 8001bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	77bb      	strb	r3, [r7, #30]
						if (SCARA_METHOD_MANUAL == method) {
 8001bbc:	7fbb      	ldrb	r3, [r7, #30]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d103      	bne.n	8001bca <packetRead+0xbda>
							duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	705a      	strb	r2, [r3, #1]
 8001bc8:	e01d      	b.n	8001c06 <packetRead+0xc16>
						} else if (SCARA_METHOD_SEMI_AUTO == method) {
 8001bca:	7fbb      	ldrb	r3, [r7, #30]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d103      	bne.n	8001bd8 <packetRead+0xbe8>
							duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	705a      	strb	r2, [r3, #1]
 8001bd6:	e016      	b.n	8001c06 <packetRead+0xc16>
						} else if (SCARA_METHOD_GCODE == method) {
 8001bd8:	7fbb      	ldrb	r3, [r7, #30]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d103      	bne.n	8001be6 <packetRead+0xbf6>
							duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2202      	movs	r2, #2
 8001be2:	705a      	strb	r2, [r3, #1]
 8001be4:	e00f      	b.n	8001c06 <packetRead+0xc16>
						}else if(SCARA_METHOD_TEST == method){
 8001be6:	7fbb      	ldrb	r3, [r7, #30]
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d103      	bne.n	8001bf4 <packetRead+0xc04>
							duty_cmd->robot_method = SCARA_METHOD_TEST;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	2203      	movs	r2, #3
 8001bf0:	705a      	strb	r2, [r3, #1]
 8001bf2:	e008      	b.n	8001c06 <packetRead+0xc16>
						}else if(SCARA_METHOD_PICK_AND_PLACE == method){
 8001bf4:	7fbb      	ldrb	r3, [r7, #30]
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d103      	bne.n	8001c02 <packetRead+0xc12>
							duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	705a      	strb	r2, [r3, #1]
 8001c00:	e001      	b.n	8001c06 <packetRead+0xc16>
						}else {
							return CMD_ERROR;
 8001c02:	2316      	movs	r3, #22
 8001c04:	e239      	b.n	800207a <packetRead+0x108a>
						}
						duty_cmd->change_method = TRUE;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]
						return CMD_METHOD_CHANGE;
 8001c0c:	230b      	movs	r3, #11
 8001c0e:	e234      	b.n	800207a <packetRead+0x108a>
					}else{
						return CMD_ERROR;
 8001c10:	2316      	movs	r3, #22
 8001c12:	e232      	b.n	800207a <packetRead+0x108a>
				break;

				// Set manual key
				case CMD_KEYBOARD:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d10f      	bne.n	8001c3a <packetRead+0xc4a>
						int temp_pointer = 2;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
						duty_cmd->keyboard = (SCARA_KeyTypeDef)message[temp_pointer];
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	4413      	add	r3, r2
 8001c24:	781a      	ldrb	r2, [r3, #0]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	70da      	strb	r2, [r3, #3]
						duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
						return CMD_KEYBOARD;
 8001c36:	2314      	movs	r3, #20
 8001c38:	e21f      	b.n	800207a <packetRead+0x108a>
					}else{
						return CMD_ERROR;
 8001c3a:	2316      	movs	r3, #22
 8001c3c:	e21d      	b.n	800207a <packetRead+0x108a>
				break;

				// Set manual key speed
				case CMD_KEY_SPEED:
				{
					if(length == 3){ // 1 byte key value + 2 byte define
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	d116      	bne.n	8001c72 <packetRead+0xc82>
						int temp_pointer = 2;
 8001c44:	2302      	movs	r3, #2
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
						int32_t speed = (int32_t)message[temp_pointer];
 8001c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	62bb      	str	r3, [r7, #40]	; 0x28
						// check limit
						if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPEED_MAX)) {
 8001c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	dd02      	ble.n	8001c5e <packetRead+0xc6e>
 8001c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5a:	2b0e      	cmp	r3, #14
 8001c5c:	dd01      	ble.n	8001c62 <packetRead+0xc72>
							return CMD_ERROR;
 8001c5e:	2316      	movs	r3, #22
 8001c60:	e20b      	b.n	800207a <packetRead+0x108a>
						}
						duty_cmd->key_speed = speed;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c66:	605a      	str	r2, [r3, #4]
						current_key_speed1 = speed;
 8001c68:	4a49      	ldr	r2, [pc, #292]	; (8001d90 <packetRead+0xda0>)
 8001c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6c:	6013      	str	r3, [r2, #0]
						return CMD_KEY_SPEED;
 8001c6e:	2315      	movs	r3, #21
 8001c70:	e203      	b.n	800207a <packetRead+0x108a>
					}else{
						return CMD_ERROR;
 8001c72:	2316      	movs	r3, #22
 8001c74:	e201      	b.n	800207a <packetRead+0x108a>
				break;

				// Set test mode
				case CMD_MOTOR_TEST:
				{
					if(length == 3){ // 1byte key mode + 2 byte define
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d117      	bne.n	8001cac <packetRead+0xcbc>
						int temp_pointer = 2;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	623b      	str	r3, [r7, #32]
						uint8_t test_key = message[temp_pointer];
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	4413      	add	r3, r2
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	77fb      	strb	r3, [r7, #31]
						if(test_key < 0 || test_key > 8){
 8001c8a:	7ffb      	ldrb	r3, [r7, #31]
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d901      	bls.n	8001c94 <packetRead+0xca4>
							return CMD_ERROR;
 8001c90:	2316      	movs	r3, #22
 8001c92:	e1f2      	b.n	800207a <packetRead+0x108a>
						}
						duty_cmd->test_key = test_key;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	7ffa      	ldrb	r2, [r7, #31]
 8001c98:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
						duty_cmd->robot_method = SCARA_METHOD_TEST;	
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
						return CMD_MOTOR_TEST;
 8001ca8:	230c      	movs	r3, #12
 8001caa:	e1e6      	b.n	800207a <packetRead+0x108a>
					}else{
						return CMD_ERROR;
 8001cac:	2316      	movs	r3, #22
 8001cae:	e1e4      	b.n	800207a <packetRead+0x108a>
				}
				break;

				case CMD_OBJECT_DETECTED:
				{
					if (length == 15){ // 3 int32_t number + 1 byte object type + 2 define byte
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b0f      	cmp	r3, #15
 8001cb4:	d160      	bne.n	8001d78 <packetRead+0xd88>
						temp_pointer = -2;
 8001cb6:	f06f 0301 	mvn.w	r3, #1
 8001cba:	637b      	str	r3, [r7, #52]	; 0x34
						duty_cmd->target_point.x = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8001cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fc2a 	bl	8000524 <__aeabi_i2d>
 8001cd0:	a32b      	add	r3, pc, #172	; (adr r3, 8001d80 <packetRead+0xd90>)
 8001cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd6:	f7fe fc8f 	bl	80005f8 <__aeabi_dmul>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	6839      	ldr	r1, [r7, #0]
 8001ce0:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
						duty_cmd->target_point.y = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8001cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	4413      	add	r3, r2
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fc16 	bl	8000524 <__aeabi_i2d>
 8001cf8:	a321      	add	r3, pc, #132	; (adr r3, 8001d80 <packetRead+0xd90>)
 8001cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfe:	f7fe fc7b 	bl	80005f8 <__aeabi_dmul>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	6839      	ldr	r1, [r7, #0]
 8001d08:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
						//duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
						duty_cmd->target_point.roll = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d0e:	3304      	adds	r3, #4
 8001d10:	637b      	str	r3, [r7, #52]	; 0x34
 8001d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	4413      	add	r3, r2
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fc02 	bl	8000524 <__aeabi_i2d>
 8001d20:	a317      	add	r3, pc, #92	; (adr r3, 8001d80 <packetRead+0xd90>)
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d26:	f7fe fc67 	bl	80005f8 <__aeabi_dmul>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	6839      	ldr	r1, [r7, #0]
 8001d30:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
						duty_cmd->target_point.object_type = message[temp_pointer+=4];
 8001d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d36:	3304      	adds	r3, #4
 8001d38:	637b      	str	r3, [r7, #52]	; 0x34
 8001d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	4413      	add	r3, r2
 8001d40:	781a      	ldrb	r2, [r3, #0]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
						duty_cmd->target_point.packet_time_stamp = GET_MICROS;
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <packetRead+0xda4>)
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <packetRead+0xda8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4912      	ldr	r1, [pc, #72]	; (8001d9c <packetRead+0xdac>)
 8001d52:	fba1 1303 	umull	r1, r3, r1, r3
 8001d56:	0c9b      	lsrs	r3, r3, #18
 8001d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	6839      	ldr	r1, [r7, #0]
 8001d64:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
					return CMD_OBJECT_DETECTED;
 8001d74:	2318      	movs	r3, #24
 8001d76:	e180      	b.n	800207a <packetRead+0x108a>
						return CMD_ERROR;
 8001d78:	2316      	movs	r3, #22
 8001d7a:	e17e      	b.n	800207a <packetRead+0x108a>
 8001d7c:	f3af 8000 	nop.w
 8001d80:	a0000000 	.word	0xa0000000
 8001d84:	3eb0c6f7 	.word	0x3eb0c6f7
 8001d88:	2000fd28 	.word	0x2000fd28
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	20000060 	.word	0x20000060
 8001d94:	e0001000 	.word	0xe0001000
 8001d98:	2000408c 	.word	0x2000408c
 8001d9c:	431bde83 	.word	0x431bde83
				}
				break;

				case CMD_SETUP_CONVEYOR_SPEED:
				{
					if (length == 47) { // 11 int32_t number + 1 byte move type + 2 define byte
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b2f      	cmp	r3, #47	; 0x2f
 8001da4:	f040 80ea 	bne.w	8001f7c <packetRead+0xf8c>
						temp_pointer = -2;
 8001da8:	f06f 0301 	mvn.w	r3, #1
 8001dac:	637b      	str	r3, [r7, #52]	; 0x34
						conveyor_speed           = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db0:	3304      	adds	r3, #4
 8001db2:	637b      	str	r3, [r7, #52]	; 0x34
 8001db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	4413      	add	r3, r2
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fbb1 	bl	8000524 <__aeabi_i2d>
 8001dc2:	a3b1      	add	r3, pc, #708	; (adr r3, 8002088 <packetRead+0x1098>)
 8001dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc8:	f7fe fc16 	bl	80005f8 <__aeabi_dmul>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	49af      	ldr	r1, [pc, #700]	; (8002090 <packetRead+0x10a0>)
 8001dd2:	e9c1 2300 	strd	r2, r3, [r1]
						PUT_DOWN_TIME_ON_SLOT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd8:	3304      	adds	r3, #4
 8001dda:	637b      	str	r3, [r7, #52]	; 0x34
 8001ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	4413      	add	r3, r2
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fb9d 	bl	8000524 <__aeabi_i2d>
 8001dea:	a3a7      	add	r3, pc, #668	; (adr r3, 8002088 <packetRead+0x1098>)
 8001dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df0:	f7fe fc02 	bl	80005f8 <__aeabi_dmul>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	49a6      	ldr	r1, [pc, #664]	; (8002094 <packetRead+0x10a4>)
 8001dfa:	e9c1 2300 	strd	r2, r3, [r1]
						PUT_DOWN_TIME_ON_OBJECT	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e00:	3304      	adds	r3, #4
 8001e02:	637b      	str	r3, [r7, #52]	; 0x34
 8001e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4413      	add	r3, r2
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fb89 	bl	8000524 <__aeabi_i2d>
 8001e12:	a39d      	add	r3, pc, #628	; (adr r3, 8002088 <packetRead+0x1098>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	f7fe fbee 	bl	80005f8 <__aeabi_dmul>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	499d      	ldr	r1, [pc, #628]	; (8002098 <packetRead+0x10a8>)
 8001e22:	e9c1 2300 	strd	r2, r3, [r1]
						PICK_UP_TIME_ON_OBJECT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e28:	3304      	adds	r3, #4
 8001e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8001e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	4413      	add	r3, r2
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fb75 	bl	8000524 <__aeabi_i2d>
 8001e3a:	a393      	add	r3, pc, #588	; (adr r3, 8002088 <packetRead+0x1098>)
 8001e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e40:	f7fe fbda 	bl	80005f8 <__aeabi_dmul>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4994      	ldr	r1, [pc, #592]	; (800209c <packetRead+0x10ac>)
 8001e4a:	e9c1 2300 	strd	r2, r3, [r1]
						PICK_UP_TIME_ON_SLOT	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e50:	3304      	adds	r3, #4
 8001e52:	637b      	str	r3, [r7, #52]	; 0x34
 8001e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4413      	add	r3, r2
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fb61 	bl	8000524 <__aeabi_i2d>
 8001e62:	a389      	add	r3, pc, #548	; (adr r3, 8002088 <packetRead+0x1098>)
 8001e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e68:	f7fe fbc6 	bl	80005f8 <__aeabi_dmul>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	498b      	ldr	r1, [pc, #556]	; (80020a0 <packetRead+0x10b0>)
 8001e72:	e9c1 2300 	strd	r2, r3, [r1]
						MOVE_TIME 				 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e78:	3304      	adds	r3, #4
 8001e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8001e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4413      	add	r3, r2
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fb4d 	bl	8000524 <__aeabi_i2d>
 8001e8a:	a37f      	add	r3, pc, #508	; (adr r3, 8002088 <packetRead+0x1098>)
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e90:	f7fe fbb2 	bl	80005f8 <__aeabi_dmul>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4982      	ldr	r1, [pc, #520]	; (80020a4 <packetRead+0x10b4>)
 8001e9a:	e9c1 2300 	strd	r2, r3, [r1]
						ATTACH_TIME 			 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fb39 	bl	8000524 <__aeabi_i2d>
 8001eb2:	a375      	add	r3, pc, #468	; (adr r3, 8002088 <packetRead+0x1098>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	f7fe fb9e 	bl	80005f8 <__aeabi_dmul>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4979      	ldr	r1, [pc, #484]	; (80020a8 <packetRead+0x10b8>)
 8001ec2:	e9c1 2300 	strd	r2, r3, [r1]
						DETACH_TIME 			 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec8:	3304      	adds	r3, #4
 8001eca:	637b      	str	r3, [r7, #52]	; 0x34
 8001ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fb25 	bl	8000524 <__aeabi_i2d>
 8001eda:	a36b      	add	r3, pc, #428	; (adr r3, 8002088 <packetRead+0x1098>)
 8001edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee0:	f7fe fb8a 	bl	80005f8 <__aeabi_dmul>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4970      	ldr	r1, [pc, #448]	; (80020ac <packetRead+0x10bc>)
 8001eea:	e9c1 2300 	strd	r2, r3, [r1]
						UP_HEIGHT 				 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	4413      	add	r3, r2
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fb11 	bl	8000524 <__aeabi_i2d>
 8001f02:	a361      	add	r3, pc, #388	; (adr r3, 8002088 <packetRead+0x1098>)
 8001f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f08:	f7fe fb76 	bl	80005f8 <__aeabi_dmul>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4967      	ldr	r1, [pc, #412]	; (80020b0 <packetRead+0x10c0>)
 8001f12:	e9c1 2300 	strd	r2, r3, [r1]
						DOWN_HEIGHT_ON_OBJECT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f18:	3304      	adds	r3, #4
 8001f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4413      	add	r3, r2
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fafd 	bl	8000524 <__aeabi_i2d>
 8001f2a:	a357      	add	r3, pc, #348	; (adr r3, 8002088 <packetRead+0x1098>)
 8001f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f30:	f7fe fb62 	bl	80005f8 <__aeabi_dmul>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	495e      	ldr	r1, [pc, #376]	; (80020b4 <packetRead+0x10c4>)
 8001f3a:	e9c1 2300 	strd	r2, r3, [r1]
						DOWN_HEIGHT_ON_SLOT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f40:	3304      	adds	r3, #4
 8001f42:	637b      	str	r3, [r7, #52]	; 0x34
 8001f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	4413      	add	r3, r2
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fae9 	bl	8000524 <__aeabi_i2d>
 8001f52:	a34d      	add	r3, pc, #308	; (adr r3, 8002088 <packetRead+0x1098>)
 8001f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f58:	f7fe fb4e 	bl	80005f8 <__aeabi_dmul>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4955      	ldr	r1, [pc, #340]	; (80020b8 <packetRead+0x10c8>)
 8001f62:	e9c1 2300 	strd	r2, r3, [r1]
						pnp_move_option 		 = message[temp_pointer+=4];
 8001f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f68:	3304      	adds	r3, #4
 8001f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4413      	add	r3, r2
 8001f72:	781a      	ldrb	r2, [r3, #0]
 8001f74:	4b51      	ldr	r3, [pc, #324]	; (80020bc <packetRead+0x10cc>)
 8001f76:	701a      	strb	r2, [r3, #0]
						return CMD_SETUP_CONVEYOR_SPEED;
 8001f78:	2319      	movs	r3, #25
 8001f7a:	e07e      	b.n	800207a <packetRead+0x108a>
					}else{
						return CMD_ERROR;
 8001f7c:	2316      	movs	r3, #22
 8001f7e:	e07c      	b.n	800207a <packetRead+0x108a>
					}
				}
				break;
				case CMD_GCODE_CONFIGURE:
				{
					if(length == 18) { // 4 int32_t number + 2 define byte
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b12      	cmp	r3, #18
 8001f84:	d154      	bne.n	8002030 <packetRead+0x1040>
						temp_pointer = -2;
 8001f86:	f06f 0301 	mvn.w	r3, #1
 8001f8a:	637b      	str	r3, [r7, #52]	; 0x34
						offset_x = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8e:	3304      	adds	r3, #4
 8001f90:	637b      	str	r3, [r7, #52]	; 0x34
 8001f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4413      	add	r3, r2
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe fac2 	bl	8000524 <__aeabi_i2d>
 8001fa0:	a339      	add	r3, pc, #228	; (adr r3, 8002088 <packetRead+0x1098>)
 8001fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa6:	f7fe fb27 	bl	80005f8 <__aeabi_dmul>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4944      	ldr	r1, [pc, #272]	; (80020c0 <packetRead+0x10d0>)
 8001fb0:	e9c1 2300 	strd	r2, r3, [r1]
						offset_y = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8001fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe faae 	bl	8000524 <__aeabi_i2d>
 8001fc8:	a32f      	add	r3, pc, #188	; (adr r3, 8002088 <packetRead+0x1098>)
 8001fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fce:	f7fe fb13 	bl	80005f8 <__aeabi_dmul>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	493b      	ldr	r1, [pc, #236]	; (80020c4 <packetRead+0x10d4>)
 8001fd8:	e9c1 2300 	strd	r2, r3, [r1]
						offset_z = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fde:	3304      	adds	r3, #4
 8001fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8001fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fa9a 	bl	8000524 <__aeabi_i2d>
 8001ff0:	a325      	add	r3, pc, #148	; (adr r3, 8002088 <packetRead+0x1098>)
 8001ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff6:	f7fe faff 	bl	80005f8 <__aeabi_dmul>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4932      	ldr	r1, [pc, #200]	; (80020c8 <packetRead+0x10d8>)
 8002000:	e9c1 2300 	strd	r2, r3, [r1]
						roll_angle =(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8002004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002006:	3304      	adds	r3, #4
 8002008:	637b      	str	r3, [r7, #52]	; 0x34
 800200a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4413      	add	r3, r2
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fa86 	bl	8000524 <__aeabi_i2d>
 8002018:	a31b      	add	r3, pc, #108	; (adr r3, 8002088 <packetRead+0x1098>)
 800201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201e:	f7fe faeb 	bl	80005f8 <__aeabi_dmul>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4929      	ldr	r1, [pc, #164]	; (80020cc <packetRead+0x10dc>)
 8002028:	e9c1 2300 	strd	r2, r3, [r1]
						return CMD_GCODE_CONFIGURE;
 800202c:	2311      	movs	r3, #17
 800202e:	e024      	b.n	800207a <packetRead+0x108a>
					}else{
						return CMD_ERROR;
 8002030:	2316      	movs	r3, #22
 8002032:	e022      	b.n	800207a <packetRead+0x108a>
					}
				}
				break;
				case CMD_GCODE_RUN:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	2202      	movs	r2, #2
 8002038:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RUN;
 8002040:	2313      	movs	r3, #19
 8002042:	e01a      	b.n	800207a <packetRead+0x108a>
				}
				break;
				case CMD_GCODE_STOP:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2202      	movs	r2, #2
 8002048:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_STOP;
 8002050:	230d      	movs	r3, #13
 8002052:	e012      	b.n	800207a <packetRead+0x108a>
				}
				break;
				case CMD_GCODE_PAUSE:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	2202      	movs	r2, #2
 8002058:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_PAUSE;
 8002060:	230e      	movs	r3, #14
 8002062:	e00a      	b.n	800207a <packetRead+0x108a>
				}
				break;
				case CMD_GCODE_RESUME:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	2202      	movs	r2, #2
 8002068:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RESUME;
 8002070:	2312      	movs	r3, #18
 8002072:	e002      	b.n	800207a <packetRead+0x108a>
				}
				break;
				//Unknow command id
				default:
				{
					return CMD_ERROR;
 8002074:	2316      	movs	r3, #22
 8002076:	e000      	b.n	800207a <packetRead+0x108a>
        break;

        //unknow protocol id
        default:
        {
            return PROTOCOL_ERROR;
 8002078:	2317      	movs	r3, #23
        }
    }
}
 800207a:	4618      	mov	r0, r3
 800207c:	3738      	adds	r7, #56	; 0x38
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	f3af 8000 	nop.w
 8002088:	a0000000 	.word	0xa0000000
 800208c:	3eb0c6f7 	.word	0x3eb0c6f7
 8002090:	20000058 	.word	0x20000058
 8002094:	20000008 	.word	0x20000008
 8002098:	20000010 	.word	0x20000010
 800209c:	20000018 	.word	0x20000018
 80020a0:	20000020 	.word	0x20000020
 80020a4:	20000028 	.word	0x20000028
 80020a8:	20000030 	.word	0x20000030
 80020ac:	20000038 	.word	0x20000038
 80020b0:	20000040 	.word	0x20000040
 80020b4:	20000048 	.word	0x20000048
 80020b8:	20000050 	.word	0x20000050
 80020bc:	20000064 	.word	0x20000064
 80020c0:	20008fa0 	.word	0x20008fa0
 80020c4:	2000fd40 	.word	0x2000fd40
 80020c8:	2000fd30 	.word	0x2000fd30
 80020cc:	20008f98 	.word	0x20008f98

080020d0 <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail, int32_t *detail_length) {
 80020d0:	b082      	sub	sp, #8
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b0e2      	sub	sp, #392	; 0x188
 80020d6:	af2e      	add	r7, sp, #184	; 0xb8
 80020d8:	4601      	mov	r1, r0
 80020da:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 80020de:	e880 000c 	stmia.w	r0, {r2, r3}
 80020e2:	460b      	mov	r3, r1
 80020e4:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	2b1a      	cmp	r3, #26
 80020ea:	f200 815e 	bhi.w	80023aa <commandReply+0x2da>
 80020ee:	a201      	add	r2, pc, #4	; (adr r2, 80020f4 <commandReply+0x24>)
 80020f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f4:	08002161 	.word	0x08002161
 80020f8:	08002161 	.word	0x08002161
 80020fc:	08002161 	.word	0x08002161
 8002100:	08002161 	.word	0x08002161
 8002104:	08002161 	.word	0x08002161
 8002108:	08002161 	.word	0x08002161
 800210c:	08002161 	.word	0x08002161
 8002110:	08002169 	.word	0x08002169
 8002114:	080021e3 	.word	0x080021e3
 8002118:	08002217 	.word	0x08002217
 800211c:	080022ad 	.word	0x080022ad
 8002120:	080022d7 	.word	0x080022d7
 8002124:	08002161 	.word	0x08002161
 8002128:	08002339 	.word	0x08002339
 800212c:	08002339 	.word	0x08002339
 8002130:	08002339 	.word	0x08002339
 8002134:	08002339 	.word	0x08002339
 8002138:	08002317 	.word	0x08002317
 800213c:	08002339 	.word	0x08002339
 8002140:	08002339 	.word	0x08002339
 8002144:	08002341 	.word	0x08002341
 8002148:	08002349 	.word	0x08002349
 800214c:	08002389 	.word	0x08002389
 8002150:	080023ab 	.word	0x080023ab
 8002154:	08002161 	.word	0x08002161
 8002158:	080022cf 	.word	0x080022cf
 800215c:	080022df 	.word	0x080022df
	case CMD_MOTOR_TEST:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_OBJECT_DETECTED:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 8002160:	2309      	movs	r3, #9
 8002162:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002166:	e130      	b.n	80023ca <commandReply+0x2fa>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.arc_dir) {
 8002168:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800216c:	2b01      	cmp	r3, #1
 800216e:	d110      	bne.n	8002192 <commandReply+0xc2>
				scaraSetOutput(1);
 8002170:	2001      	movs	r0, #1
 8002172:	f008 fd3d 	bl	800abf0 <scaraSetOutput>
				// strcpy( (char *)detail, "Output ON");
				// detail_length += 9;
				detail[(*detail_length)++] = OUTPUT_ON;
 8002176:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	1c59      	adds	r1, r3, #1
 800217e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002182:	6011      	str	r1, [r2, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800218a:	4413      	add	r3, r2
 800218c:	220d      	movs	r2, #13
 800218e:	701a      	strb	r2, [r3, #0]
 8002190:	e023      	b.n	80021da <commandReply+0x10a>
			} else if (0 == duty_cmd.arc_dir) {
 8002192:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002196:	2b00      	cmp	r3, #0
 8002198:	d110      	bne.n	80021bc <commandReply+0xec>
				scaraSetOutput(0);
 800219a:	2000      	movs	r0, #0
 800219c:	f008 fd28 	bl	800abf0 <scaraSetOutput>
				detail[(*detail_length)++] = OUTPUT_OFF;
 80021a0:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	1c59      	adds	r1, r3, #1
 80021a8:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80021ac:	6011      	str	r1, [r2, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80021b4:	4413      	add	r3, r2
 80021b6:	220e      	movs	r2, #14
 80021b8:	701a      	strb	r2, [r3, #0]
 80021ba:	e00e      	b.n	80021da <commandReply+0x10a>
			} else {
				// strcpy( (char *)detail, "Wrong Value");
				// detail_length += 11;
				detail[(*detail_length)++] = WRONG_OUTPUT_VALUE ;
 80021bc:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	1c59      	adds	r1, r3, #1
 80021c4:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80021c8:	6011      	str	r1, [r2, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80021d0:	4413      	add	r3, r2
 80021d2:	220f      	movs	r2, #15
 80021d4:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 80021d6:	2307      	movs	r3, #7
 80021d8:	e0f9      	b.n	80023ce <commandReply+0x2fe>
			}
			ret = RPD_OK;
 80021da:	2308      	movs	r3, #8
 80021dc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 80021e0:	e0f3      	b.n	80023ca <commandReply+0x2fa>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 80021e2:	f008 fd67 	bl	800acb4 <scaraGetMode>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			current_state	 = scaraGetDutyState();
 80021ec:	f008 fd7a 	bl	800ace4 <scaraGetDutyState>
 80021f0:	4603      	mov	r3, r0
 80021f2:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 80021f6:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d107      	bne.n	800220e <commandReply+0x13e>
 80021fe:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8002202:	2b00      	cmp	r3, #0
 8002204:	d103      	bne.n	800220e <commandReply+0x13e>
				ret = RPD_IDLE;
 8002206:	2300      	movs	r3, #0
 8002208:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 800220c:	e0dd      	b.n	80023ca <commandReply+0x2fa>
				ret = RPD_BUSY;
 800220e:	2301      	movs	r3, #1
 8002210:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002214:	e0d9      	b.n	80023ca <commandReply+0x2fa>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			if(position_type == REAL_POSITION_DATA || position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8002216:	4b71      	ldr	r3, [pc, #452]	; (80023dc <commandReply+0x30c>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <commandReply+0x156>
 800221e:	4b6f      	ldr	r3, [pc, #444]	; (80023dc <commandReply+0x30c>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d113      	bne.n	800224e <commandReply+0x17e>
				lowlayer_readTruePosition(&position);
 8002226:	f107 0308 	add.w	r3, r7, #8
 800222a:	4618      	mov	r0, r3
 800222c:	f004 f880 	bl	8006330 <lowlayer_readTruePosition>
				kinematicForward(&position);
 8002230:	f107 0308 	add.w	r3, r7, #8
 8002234:	4618      	mov	r0, r3
 8002236:	f003 f93f 	bl	80054b8 <kinematicForward>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 800223a:	4b68      	ldr	r3, [pc, #416]	; (80023dc <commandReply+0x30c>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d11e      	bne.n	8002280 <commandReply+0x1b0>
					scaraUpdatePosition(&position);
 8002242:	f107 0308 	add.w	r3, r7, #8
 8002246:	4618      	mov	r0, r3
 8002248:	f008 fd24 	bl	800ac94 <scaraUpdatePosition>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 800224c:	e018      	b.n	8002280 <commandReply+0x1b0>
				}
			}else if(position_type == ESTIMATE_POSITION_DATA){
 800224e:	4b63      	ldr	r3, [pc, #396]	; (80023dc <commandReply+0x30c>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d105      	bne.n	8002262 <commandReply+0x192>
				scaraGetPosition(&position);
 8002256:	f107 0308 	add.w	r3, r7, #8
 800225a:	4618      	mov	r0, r3
 800225c:	f008 fd0a 	bl	800ac74 <scaraGetPosition>
 8002260:	e00e      	b.n	8002280 <commandReply+0x1b0>
			}else{
				detail[(*detail_length)++] = WRONG_READ_POSITION_TYPE;
 8002262:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	1c59      	adds	r1, r3, #1
 800226a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800226e:	6011      	str	r1, [r2, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002276:	4413      	add	r3, r2
 8002278:	2210      	movs	r2, #16
 800227a:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 800227c:	2307      	movs	r3, #7
 800227e:	e0a6      	b.n	80023ce <commandReply+0x2fe>
			}
			*detail_length = scaraPosition_packaging(detail, position);
 8002280:	4668      	mov	r0, sp
 8002282:	f107 0310 	add.w	r3, r7, #16
 8002286:	22b8      	movs	r2, #184	; 0xb8
 8002288:	4619      	mov	r1, r3
 800228a:	f014 f961 	bl	8016550 <memcpy>
 800228e:	f107 0308 	add.w	r3, r7, #8
 8002292:	cb0c      	ldmia	r3, {r2, r3}
 8002294:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 8002298:	f008 fd56 	bl	800ad48 <scaraPosition_packaging>
 800229c:	4602      	mov	r2, r0
 800229e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80022a2:	601a      	str	r2, [r3, #0]
			ret =  RPD_POSITION;
 80022a4:	2302      	movs	r3, #2
 80022a6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 80022aa:	e08e      	b.n	80023ca <commandReply+0x2fa>
	case CMD_TEST_METHOD_SETTING:
		detail[(*detail_length)++] = TEST_VALUE_SETTING;
 80022ac:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	1c59      	adds	r1, r3, #1
 80022b4:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80022b8:	6011      	str	r1, [r2, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80022c0:	4413      	add	r3, r2
 80022c2:	2211      	movs	r2, #17
 80022c4:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 80022c6:	2308      	movs	r3, #8
 80022c8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80022cc:	e07d      	b.n	80023ca <commandReply+0x2fa>
	case CMD_SETUP_CONVEYOR_SPEED:
		ret = RPD_OK;
 80022ce:	2308      	movs	r3, #8
 80022d0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80022d4:	e079      	b.n	80023ca <commandReply+0x2fa>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 80022d6:	2309      	movs	r3, #9
 80022d8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80022dc:	e075      	b.n	80023ca <commandReply+0x2fa>
	case CMD_GCODE:{
		if(point_counter == total_num_of_point){
 80022de:	4b40      	ldr	r3, [pc, #256]	; (80023e0 <commandReply+0x310>)
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	4b3f      	ldr	r3, [pc, #252]	; (80023e4 <commandReply+0x314>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d110      	bne.n	800230e <commandReply+0x23e>
			detail[(*detail_length)++] = GCODE_TRANSFER_FINISH;
 80022ec:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	1c59      	adds	r1, r3, #1
 80022f4:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80022f8:	6011      	str	r1, [r2, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002300:	4413      	add	r3, r2
 8002302:	221e      	movs	r2, #30
 8002304:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 8002306:	2308      	movs	r3, #8
 8002308:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}else{
			ret = RPD_TRANSFER;
		}
	}
	break;
 800230c:	e05d      	b.n	80023ca <commandReply+0x2fa>
			ret = RPD_TRANSFER;
 800230e:	230a      	movs	r3, #10
 8002310:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	break;
 8002314:	e059      	b.n	80023ca <commandReply+0x2fa>
	case CMD_GCODE_CONFIGURE:
	{
		detail[(*detail_length)++] = GCODE_OFFSET_CONFIGURE;
 8002316:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	1c59      	adds	r1, r3, #1
 800231e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002322:	6011      	str	r1, [r2, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800232a:	4413      	add	r3, r2
 800232c:	221f      	movs	r2, #31
 800232e:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8002330:	2308      	movs	r3, #8
 8002332:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	break;
 8002336:	e048      	b.n	80023ca <commandReply+0x2fa>
	case CMD_GCODE_PAUSE:
	case CMD_JOB_PUSH_MOVE_LINE:
	case CMD_JOB_PUSH_MOVE_JOINT:
	case CMD_GCODE_RESUME:
	case CMD_GCODE_RUN:
		ret = RPD_DUTY;
 8002338:	2309      	movs	r3, #9
 800233a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 800233e:	e044      	b.n	80023ca <commandReply+0x2fa>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 8002340:	2309      	movs	r3, #9
 8002342:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002346:	e040      	b.n	80023ca <commandReply+0x2fa>
	case CMD_KEY_SPEED:{
		detail[(*detail_length)++] = MANUAL_SPEED;
 8002348:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	1c59      	adds	r1, r3, #1
 8002350:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002354:	6011      	str	r1, [r2, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800235c:	4413      	add	r3, r2
 800235e:	2216      	movs	r2, #22
 8002360:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = (uint8_t)(duty_cmd.key_speed);
 8002362:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002366:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	1c59      	adds	r1, r3, #1
 800236e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002372:	6011      	str	r1, [r2, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800237a:	4413      	add	r3, r2
 800237c:	b2c2      	uxtb	r2, r0
 800237e:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8002380:	2308      	movs	r3, #8
 8002382:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
		break;
 8002386:	e020      	b.n	80023ca <commandReply+0x2fa>
	case CMD_ERROR:{
		detail[(*detail_length)++] = CHECK_PARAMETER;
 8002388:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	1c59      	adds	r1, r3, #1
 8002390:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002394:	6011      	str	r1, [r2, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800239c:	4413      	add	r3, r2
 800239e:	2215      	movs	r2, #21
 80023a0:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 80023a2:	2307      	movs	r3, #7
 80023a4:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
		break;
 80023a8:	e00f      	b.n	80023ca <commandReply+0x2fa>
	default:
		detail[(*detail_length)++] = UNKNOW_COMMAND;
 80023aa:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	1c59      	adds	r1, r3, #1
 80023b2:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80023b6:	6011      	str	r1, [r2, #0]
 80023b8:	461a      	mov	r2, r3
 80023ba:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80023be:	4413      	add	r3, r2
 80023c0:	2217      	movs	r2, #23
 80023c2:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 80023c4:	2307      	movs	r3, #7
 80023c6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	return ret;
 80023ca:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	37d0      	adds	r7, #208	; 0xd0
 80023d2:	46bd      	mov	sp, r7
 80023d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023d8:	b002      	add	sp, #8
 80023da:	4770      	bx	lr
 80023dc:	2000fd28 	.word	0x2000fd28
 80023e0:	20004404 	.word	0x20004404
 80023e4:	20008fa8 	.word	0x20008fa8

080023e8 <commandRespond1>:

int32_t				commandRespond1	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										int32_t detail_length,
										char *respond) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	4603      	mov	r3, r0
 80023f6:	73fb      	strb	r3, [r7, #15]
	int32_t out_length = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
	respond[out_length++] = 0x28;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	617a      	str	r2, [r7, #20]
 8002402:	461a      	mov	r2, r3
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	4413      	add	r3, r2
 8002408:	2228      	movs	r2, #40	; 0x28
 800240a:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	617a      	str	r2, [r7, #20]
 8002412:	461a      	mov	r2, r3
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	4413      	add	r3, r2
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = RESPONSE_TRANSMISION;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	617a      	str	r2, [r7, #20]
 8002422:	461a      	mov	r2, r3
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	4413      	add	r3, r2
 8002428:	2202      	movs	r2, #2
 800242a:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = rpd;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	1c5a      	adds	r2, r3, #1
 8002430:	617a      	str	r2, [r7, #20]
 8002432:	461a      	mov	r2, r3
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	4413      	add	r3, r2
 8002438:	7bfa      	ldrb	r2, [r7, #15]
 800243a:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = id_command;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	617a      	str	r2, [r7, #20]
 8002442:	461a      	mov	r2, r3
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	4413      	add	r3, r2
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]
	if(detail_length != 0){
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00c      	beq.n	800246e <commandRespond1+0x86>
		memcpy(&respond[out_length], detail, detail_length);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	6a3a      	ldr	r2, [r7, #32]
 8002458:	4413      	add	r3, r2
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4618      	mov	r0, r3
 8002460:	f014 f876 	bl	8016550 <memcpy>
		out_length += detail_length;
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	4413      	add	r3, r2
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	e007      	b.n	800247e <commandRespond1+0x96>
	}else{
		respond[out_length++] = NONE;
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	617a      	str	r2, [r7, #20]
 8002474:	461a      	mov	r2, r3
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	4413      	add	r3, r2
 800247a:	2225      	movs	r2, #37	; 0x25
 800247c:	701a      	strb	r2, [r3, #0]
	}
	respond[out_length++] = 0x7d;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	617a      	str	r2, [r7, #20]
 8002484:	461a      	mov	r2, r3
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	4413      	add	r3, r2
 800248a:	227d      	movs	r2, #125	; 0x7d
 800248c:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0x29;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	617a      	str	r2, [r7, #20]
 8002494:	461a      	mov	r2, r3
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	4413      	add	r3, r2
 800249a:	2229      	movs	r2, #41	; 0x29
 800249c:	701a      	strb	r2, [r3, #0]
	respond[1] = out_length - 2;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	3301      	adds	r3, #1
 80024a6:	3a02      	subs	r2, #2
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	701a      	strb	r2, [r3, #0]
	return out_length;
 80024ac:	697b      	ldr	r3, [r7, #20]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b096      	sub	sp, #88	; 0x58
 80024bc:	af02      	add	r7, sp, #8
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 80024c4:	887a      	ldrh	r2, [r7, #2]
 80024c6:	f107 0008 	add.w	r0, r7, #8
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	4613      	mov	r3, r2
 80024d0:	4a17      	ldr	r2, [pc, #92]	; (8002530 <LOG_REPORT+0x78>)
 80024d2:	213f      	movs	r1, #63	; 0x3f
 80024d4:	f014 ffa6 	bl	8017424 <sniprintf>
 80024d8:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 80024da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e0:	d101      	bne.n	80024e6 <LOG_REPORT+0x2e>
		return FALSE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	e01f      	b.n	8002526 <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 80024e6:	f107 0308 	add.w	r3, r7, #8
 80024ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024ec:	4619      	mov	r1, r3
 80024ee:	4811      	ldr	r0, [pc, #68]	; (8002534 <LOG_REPORT+0x7c>)
 80024f0:	f003 fc3e 	bl	8005d70 <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 80024f4:	4810      	ldr	r0, [pc, #64]	; (8002538 <LOG_REPORT+0x80>)
 80024f6:	f009 ff85 	bl	800c404 <HAL_DMA_GetState>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d101      	bne.n	8002504 <LOG_REPORT+0x4c>
		return TRUE;
 8002500:	2301      	movs	r3, #1
 8002502:	e010      	b.n	8002526 <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 8002504:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002508:	490c      	ldr	r1, [pc, #48]	; (800253c <LOG_REPORT+0x84>)
 800250a:	480a      	ldr	r0, [pc, #40]	; (8002534 <LOG_REPORT+0x7c>)
 800250c:	f003 fc58 	bl	8005dc0 <ringBuff_PopArray>
 8002510:	4603      	mov	r3, r0
 8002512:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 8002516:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800251a:	461a      	mov	r2, r3
 800251c:	4907      	ldr	r1, [pc, #28]	; (800253c <LOG_REPORT+0x84>)
 800251e:	4808      	ldr	r0, [pc, #32]	; (8002540 <LOG_REPORT+0x88>)
 8002520:	f00c fd0c 	bl	800ef3c <HAL_UART_Transmit_DMA>
	return TRUE;
 8002524:	2301      	movs	r3, #1
}
 8002526:	4618      	mov	r0, r3
 8002528:	3750      	adds	r7, #80	; 0x50
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	0801c800 	.word	0x0801c800
 8002534:	20002074 	.word	0x20002074
 8002538:	20010e30 	.word	0x20010e30
 800253c:	2000fd60 	.word	0x2000fd60
 8002540:	20010df0 	.word	0x20010df0

08002544 <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_length, uint8_t*data_packet) {
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]

	int32_t data_length = in_length - 3;
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	3b03      	subs	r3, #3
 8002554:	617b      	str	r3, [r7, #20]
	uint16_t packet_length = *(uint16_t*)(&message_buff[1]);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800255c:	827b      	strh	r3, [r7, #18]
	//check packet length
	if(packet_length == data_length && backup_available == 0){
 800255e:	8a7b      	ldrh	r3, [r7, #18]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	429a      	cmp	r2, r3
 8002564:	d119      	bne.n	800259a <unPackPayload+0x56>
 8002566:	4b2d      	ldr	r3, [pc, #180]	; (800261c <unPackPayload+0xd8>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d115      	bne.n	800259a <unPackPayload+0x56>
		// check minimum lenght
		if (in_length < MIN_MESSAGE_LENGHT) {
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b03      	cmp	r3, #3
 8002572:	dc02      	bgt.n	800257a <unPackPayload+0x36>
			return -1;
 8002574:	f04f 33ff 	mov.w	r3, #4294967295
 8002578:	e04c      	b.n	8002614 <unPackPayload+0xd0>
		}

		// check start char
		if(message_buff[0] != START_CHAR){
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b28      	cmp	r3, #40	; 0x28
 8002580:	d002      	beq.n	8002588 <unPackPayload+0x44>
			return -1;
 8002582:	f04f 33ff 	mov.w	r3, #4294967295
 8002586:	e045      	b.n	8002614 <unPackPayload+0xd0>
		}
		memcpy(data_packet, &message_buff[3], data_length - RECEIVE_END_LENGTH);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1cd9      	adds	r1, r3, #3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	3b02      	subs	r3, #2
 8002590:	461a      	mov	r2, r3
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f013 ffdc 	bl	8016550 <memcpy>
 8002598:	e03a      	b.n	8002610 <unPackPayload+0xcc>
	}else if(packet_length != data_length && backup_available == 0){
 800259a:	8a7b      	ldrh	r3, [r7, #18]
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d01b      	beq.n	80025da <unPackPayload+0x96>
 80025a2:	4b1e      	ldr	r3, [pc, #120]	; (800261c <unPackPayload+0xd8>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d117      	bne.n	80025da <unPackPayload+0x96>
		// check start char
		if(message_buff[0] != START_CHAR){
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b28      	cmp	r3, #40	; 0x28
 80025b0:	d002      	beq.n	80025b8 <unPackPayload+0x74>
			return -1;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
 80025b6:	e02d      	b.n	8002614 <unPackPayload+0xd0>
		}
		backup_available = 1;
 80025b8:	4b18      	ldr	r3, [pc, #96]	; (800261c <unPackPayload+0xd8>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	701a      	strb	r2, [r3, #0]
		memcpy(data_packet, &message_buff[3], data_length);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	3303      	adds	r3, #3
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4619      	mov	r1, r3
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f013 ffc2 	bl	8016550 <memcpy>
		backup_length = data_length;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	4b13      	ldr	r3, [pc, #76]	; (8002620 <unPackPayload+0xdc>)
 80025d2:	801a      	strh	r2, [r3, #0]
		return - 1;
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295
 80025d8:	e01c      	b.n	8002614 <unPackPayload+0xd0>
	}else if(backup_available == 1){
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <unPackPayload+0xd8>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d113      	bne.n	800260a <unPackPayload+0xc6>
		backup_available = 0;
 80025e2:	4b0e      	ldr	r3, [pc, #56]	; (800261c <unPackPayload+0xd8>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]
		memcpy(&data_packet[backup_length], message_buff, in_length);
 80025e8:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <unPackPayload+0xdc>)
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	68f9      	ldr	r1, [r7, #12]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f013 ffaa 	bl	8016550 <memcpy>
		data_length = backup_length + in_length;
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <unPackPayload+0xdc>)
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	4413      	add	r3, r2
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	e002      	b.n	8002610 <unPackPayload+0xcc>
	}else{
		return - 1;
 800260a:	f04f 33ff 	mov.w	r3, #4294967295
 800260e:	e001      	b.n	8002614 <unPackPayload+0xd0>
	}


	return data_length - RECEIVE_END_LENGTH;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	3b02      	subs	r3, #2
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	2000fe60 	.word	0x2000fe60
 8002620:	2000fe62 	.word	0x2000fe62

08002624 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	607b      	str	r3, [r7, #4]
 800262e:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <MX_DMA_Init+0x3c>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	4a0b      	ldr	r2, [pc, #44]	; (8002660 <MX_DMA_Init+0x3c>)
 8002634:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002638:	6313      	str	r3, [r2, #48]	; 0x30
 800263a:	4b09      	ldr	r3, [pc, #36]	; (8002660 <MX_DMA_Init+0x3c>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002642:	607b      	str	r3, [r7, #4]
 8002644:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	2105      	movs	r1, #5
 800264a:	200f      	movs	r0, #15
 800264c:	f009 fbfe 	bl	800be4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002650:	200f      	movs	r0, #15
 8002652:	f009 fc17 	bl	800be84 <HAL_NVIC_EnableIRQ>

}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800

08002664 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4a07      	ldr	r2, [pc, #28]	; (8002690 <vApplicationGetIdleTaskMemory+0x2c>)
 8002674:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	4a06      	ldr	r2, [pc, #24]	; (8002694 <vApplicationGetIdleTaskMemory+0x30>)
 800267a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002682:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8002684:	bf00      	nop
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	20004408 	.word	0x20004408
 8002694:	2000445c 	.word	0x2000445c

08002698 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002698:	b5b0      	push	{r4, r5, r7, lr}
 800269a:	b094      	sub	sp, #80	; 0x50
 800269c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 800269e:	2300      	movs	r3, #0
 80026a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80026a2:	2300      	movs	r3, #0
 80026a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 80026a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026aa:	4618      	mov	r0, r3
 80026ac:	f010 fc52 	bl	8012f54 <osMutexCreate>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4a1d      	ldr	r2, [pc, #116]	; (8002728 <MX_FREERTOS_Init+0x90>)
 80026b4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 80026b6:	2301      	movs	r3, #1
 80026b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80026ba:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80026be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026c4:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 80026c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026ca:	2100      	movs	r1, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f010 fd59 	bl	8013184 <osMailCreate>
 80026d2:	4603      	mov	r3, r0
 80026d4:	4a15      	ldr	r2, [pc, #84]	; (800272c <MX_FREERTOS_Init+0x94>)
 80026d6:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2060);
 80026d8:	4b15      	ldr	r3, [pc, #84]	; (8002730 <MX_FREERTOS_Init+0x98>)
 80026da:	f107 041c 	add.w	r4, r7, #28
 80026de:	461d      	mov	r5, r3
 80026e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80026ec:	f107 031c 	add.w	r3, r7, #28
 80026f0:	2100      	movs	r1, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f010 fb41 	bl	8012d7a <osThreadCreate>
 80026f8:	4603      	mov	r3, r0
 80026fa:	4a0e      	ldr	r2, [pc, #56]	; (8002734 <MX_FREERTOS_Init+0x9c>)
 80026fc:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 80026fe:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <MX_FREERTOS_Init+0xa0>)
 8002700:	463c      	mov	r4, r7
 8002702:	461d      	mov	r5, r3
 8002704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002708:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800270c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8002710:	463b      	mov	r3, r7
 8002712:	2100      	movs	r1, #0
 8002714:	4618      	mov	r0, r3
 8002716:	f010 fb30 	bl	8012d7a <osThreadCreate>
 800271a:	4603      	mov	r3, r0
 800271c:	4a07      	ldr	r2, [pc, #28]	; (800273c <MX_FREERTOS_Init+0xa4>)
 800271e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002720:	bf00      	nop
 8002722:	3750      	adds	r7, #80	; 0x50
 8002724:	46bd      	mov	sp, r7
 8002726:	bdb0      	pop	{r4, r5, r7, pc}
 8002728:	2000fe68 	.word	0x2000fe68
 800272c:	2000fe6c 	.word	0x2000fe6c
 8002730:	0801c83c 	.word	0x0801c83c
 8002734:	2000fe64 	.word	0x2000fe64
 8002738:	0801c858 	.word	0x0801c858
 800273c:	2000fe70 	.word	0x2000fe70

08002740 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002744:	f5ad 5d8f 	sub.w	sp, sp, #4576	; 0x11e0
 8002748:	b087      	sub	sp, #28
 800274a:	af6c      	add	r7, sp, #432	; 0x1b0
 800274c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002750:	3b0c      	subs	r3, #12
 8002752:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002754:	f013 f972 	bl	8015a3c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 8002758:	2201      	movs	r2, #1
 800275a:	2110      	movs	r1, #16
 800275c:	48d2      	ldr	r0, [pc, #840]	; (8002aa8 <StartDefaultTask+0x368>)
 800275e:	f00a f8db 	bl	800c918 <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 8002762:	2300      	movs	r3, #0
 8002764:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002768:	f102 0207 	add.w	r2, r2, #7
 800276c:	7013      	strb	r3, [r2, #0]
  int32_t					current_key_speed;
  double						run_time;

  SCARA_Pick_And_Place_Package Object[8];
  SCARA_Pick_And_Place_State  operation_state;
  uint8_t object_tail_pointer = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002774:	f102 0206 	add.w	r2, r2, #6
 8002778:	7013      	strb	r3, [r2, #0]
  uint8_t object_head_pointer = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002780:	f102 0205 	add.w	r2, r2, #5
 8002784:	7013      	strb	r3, [r2, #0]
  double state_time = 0;
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8002792:	f101 0118 	add.w	r1, r1, #24
 8002796:	e9c1 2300 	strd	r2, r3, [r1]
  int run_point = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80027a0:	f102 0214 	add.w	r2, r2, #20
 80027a4:	6013      	str	r3, [r2, #0]
  const SCARA_Slot_TypeDef SLot_Cordinate[NUM_OF_OBJECT] = {
 80027a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027aa:	4ac0      	ldr	r2, [pc, #768]	; (8002aac <StartDefaultTask+0x36c>)
 80027ac:	4618      	mov	r0, r3
 80027ae:	4611      	mov	r1, r2
 80027b0:	2390      	movs	r3, #144	; 0x90
 80027b2:	461a      	mov	r2, r3
 80027b4:	f013 fecc 	bl	8016550 <memcpy>
  		{257.2121f, -76.9947f, 0.0f} ,
  		{258.221f, -47.1851f, 0.0f} ,
		{260.695f, -17.075f, 0.0f} ,
		{260.4f, 13.66f, 0.0f}
  };
  const double placement_spacing = -34.0f;
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	4bbc      	ldr	r3, [pc, #752]	; (8002ab0 <StartDefaultTask+0x370>)
 80027be:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80027c2:	f101 0108 	add.w	r1, r1, #8
 80027c6:	e9c1 2300 	strd	r2, r3, [r1]
  uint8_t Slot_Placement[NUM_OF_OBJECT] = {
 80027ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027ce:	3b08      	subs	r3, #8
 80027d0:	4ab8      	ldr	r2, [pc, #736]	; (8002ab4 <StartDefaultTask+0x374>)
 80027d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027d6:	6018      	str	r0, [r3, #0]
 80027d8:	3304      	adds	r3, #4
 80027da:	8019      	strh	r1, [r3, #0]
		  0, 0, 0, 0, 0, 0
  };

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 80027dc:	21eb      	movs	r1, #235	; 0xeb
 80027de:	48b6      	ldr	r0, [pc, #728]	; (8002ab8 <StartDefaultTask+0x378>)
 80027e0:	f7ff fe6a 	bl	80024b8 <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 80027e4:	f008 fa72 	bl	800accc <scaraGetMethod>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80027ee:	f102 021f 	add.w	r2, r2, #31
 80027f2:	7013      	strb	r3, [r2, #0]
  current_mode	 = scaraGetMode();
 80027f4:	f008 fa5e 	bl	800acb4 <scaraGetMode>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80027fe:	f102 021e 	add.w	r2, r2, #30
 8002802:	7013      	strb	r3, [r2, #0]
  current_duty_state	 = scaraGetDutyState();
 8002804:	f008 fa6e 	bl	800ace4 <scaraGetDutyState>
 8002808:	4603      	mov	r3, r0
 800280a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800280e:	f102 021d 	add.w	r2, r2, #29
 8002812:	7013      	strb	r3, [r2, #0]

  // Start up robot
  scaraStartup();
 8002814:	f004 faa8 	bl	8006d68 <scaraStartup>
  osDelay(10);
 8002818:	200a      	movs	r0, #10
 800281a:	f010 fafa 	bl	8012e12 <osDelay>
//   positionNext.Theta2 = PI/3;
//   positionNext.D3 = 10;
//   positionNext.Theta4 = 0;
//   positionNext.t = 0;

  positionNext.Theta1 = -1.4345;
 800281e:	49a7      	ldr	r1, [pc, #668]	; (8002abc <StartDefaultTask+0x37c>)
 8002820:	a399      	add	r3, pc, #612	; (adr r3, 8002a88 <StartDefaultTask+0x348>)
 8002822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002826:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
  positionNext.Theta2 = 1.7213f;
 800282a:	49a4      	ldr	r1, [pc, #656]	; (8002abc <StartDefaultTask+0x37c>)
 800282c:	a398      	add	r3, pc, #608	; (adr r3, 8002a90 <StartDefaultTask+0x350>)
 800282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002832:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
  positionNext.D3 = 9.826;
 8002836:	49a1      	ldr	r1, [pc, #644]	; (8002abc <StartDefaultTask+0x37c>)
 8002838:	a397      	add	r3, pc, #604	; (adr r3, 8002a98 <StartDefaultTask+0x358>)
 800283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
  positionNext.Theta4 = 0.28676;
 8002842:	499e      	ldr	r1, [pc, #632]	; (8002abc <StartDefaultTask+0x37c>)
 8002844:	a396      	add	r3, pc, #600	; (adr r3, 8002aa0 <StartDefaultTask+0x360>)
 8002846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
  positionNext.t = 0;
 800284e:	499b      	ldr	r1, [pc, #620]	; (8002abc <StartDefaultTask+0x37c>)
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

  kinematicForward(&positionNext);
 800285c:	4897      	ldr	r0, [pc, #604]	; (8002abc <StartDefaultTask+0x37c>)
 800285e:	f002 fe2b 	bl	80054b8 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 8002862:	4897      	ldr	r0, [pc, #604]	; (8002ac0 <StartDefaultTask+0x380>)
 8002864:	f00b ff39 	bl	800e6da <HAL_TIM_Base_Start_IT>

  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 8002868:	f107 0308 	add.w	r3, r7, #8
 800286c:	f04f 32ff 	mov.w	r2, #4294967295
 8002870:	2101      	movs	r1, #1
 8002872:	4618      	mov	r0, r3
 8002874:	f010 fb22 	bl	8012ebc <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 8002878:	2300      	movs	r3, #0
 800287a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800287e:	f102 0204 	add.w	r2, r2, #4
 8002882:	6013      	str	r3, [r2, #0]
	  respond_packed_lenght = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800288a:	6013      	str	r3, [r2, #0]
	  infor_lenght			= 0;
 800288c:	2300      	movs	r3, #0
 800288e:	f8c7 3ffc 	str.w	r3, [r7, #4092]	; 0xffc
	  infor_packed_lenght	= 0;
 8002892:	2300      	movs	r3, #0
 8002894:	f8c7 3ff8 	str.w	r3, [r7, #4088]	; 0xff8
	  task_usb_lenght		= 0;
 8002898:	2300      	movs	r3, #0
 800289a:	f8c7 3ff4 	str.w	r3, [r7, #4084]	; 0xff4
	  usb_lenght			= 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	f8c7 3ff0 	str.w	r3, [r7, #4080]	; 0xff0
	  total_respond_length  = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80028aa:	6013      	str	r3, [r2, #0]
	  detail_ptr 			= 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f8c7 3fec 	str.w	r3, [r7, #4076]	; 0xfec
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 80028b2:	4a84      	ldr	r2, [pc, #528]	; (8002ac4 <StartDefaultTask+0x384>)
 80028b4:	4b84      	ldr	r3, [pc, #528]	; (8002ac8 <StartDefaultTask+0x388>)
 80028b6:	4610      	mov	r0, r2
 80028b8:	4619      	mov	r1, r3
 80028ba:	23c0      	movs	r3, #192	; 0xc0
 80028bc:	461a      	mov	r2, r3
 80028be:	f013 fe47 	bl	8016550 <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 80028c2:	4a81      	ldr	r2, [pc, #516]	; (8002ac8 <StartDefaultTask+0x388>)
 80028c4:	4b7d      	ldr	r3, [pc, #500]	; (8002abc <StartDefaultTask+0x37c>)
 80028c6:	4610      	mov	r0, r2
 80028c8:	4619      	mov	r1, r3
 80028ca:	23c0      	movs	r3, #192	; 0xc0
 80028cc:	461a      	mov	r2, r3
 80028ce:	f013 fe3f 	bl	8016550 <memcpy>

	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 80028d2:	4b7e      	ldr	r3, [pc, #504]	; (8002acc <StartDefaultTask+0x38c>)
 80028d4:	6819      	ldr	r1, [r3, #0]
 80028d6:	f607 73c4 	addw	r3, r7, #4036	; 0xfc4
 80028da:	2200      	movs	r2, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f010 fcfd 	bl	80132dc <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 80028e2:	f8d7 3fc4 	ldr.w	r3, [r7, #4036]	; 0xfc4
 80028e6:	2b20      	cmp	r3, #32
 80028e8:	d119      	bne.n	800291e <StartDefaultTask+0x1de>
		   dataMail = ret_mail.value.p;
 80028ea:	f8d7 3fc8 	ldr.w	r3, [r7, #4040]	; 0xfc8
 80028ee:	f8c7 3fe8 	str.w	r3, [r7, #4072]	; 0xfe8
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 80028f2:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80028f6:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80028fa:	f8d7 1fe8 	ldr.w	r1, [r7, #4072]	; 0xfe8
 80028fe:	4618      	mov	r0, r3
 8002900:	f013 fe26 	bl	8016550 <memcpy>
		   isNewDuty = TRUE;
 8002904:	2301      	movs	r3, #1
 8002906:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800290a:	f102 0207 	add.w	r2, r2, #7
 800290e:	7013      	strb	r3, [r2, #0]
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 8002910:	4b6e      	ldr	r3, [pc, #440]	; (8002acc <StartDefaultTask+0x38c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f8d7 1fe8 	ldr.w	r1, [r7, #4072]	; 0xfe8
 8002918:	4618      	mov	r0, r3
 800291a:	f010 fd53 	bl	80133c4 <osMailFree>
	  }
	  if(isNewDuty) {
 800291e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002922:	f103 0307 	add.w	r3, r3, #7
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 847e 	beq.w	800322a <StartDefaultTask+0xaea>
		  if (duty_cmd.change_method == TRUE) {
 800292e:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b01      	cmp	r3, #1
 8002936:	f040 8144 	bne.w	8002bc2 <StartDefaultTask+0x482>
			  //vPortFree(Gcode_Cor);
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 800293a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800293e:	785b      	ldrb	r3, [r3, #1]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d132      	bne.n	80029aa <StartDefaultTask+0x26a>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 8002944:	2300      	movs	r3, #0
 8002946:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800294a:	f102 021f 	add.w	r2, r2, #31
 800294e:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002950:	2300      	movs	r3, #0
 8002952:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002956:	f102 021d 	add.w	r2, r2, #29
 800295a:	7013      	strb	r3, [r2, #0]
				detail_array[0] = MANUAL_METHOD;
 800295c:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002960:	2218      	movs	r2, #24
 8002962:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002964:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002968:	6899      	ldr	r1, [r3, #8]
 800296a:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 800296e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4413      	add	r3, r2
 8002976:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	2301      	movs	r3, #1
 800297e:	2008      	movs	r0, #8
 8002980:	f7ff fd32 	bl	80023e8 <commandRespond1>
 8002984:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002988:	f103 0304 	add.w	r3, r3, #4
 800298c:	6018      	str	r0, [r3, #0]
				total_respond_length += respond_lenght;
 800298e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002998:	f103 0304 	add.w	r3, r3, #4
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4413      	add	r3, r2
 80029a0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	f000 bc3a 	b.w	800321e <StartDefaultTask+0xade>
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 80029aa:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80029ae:	785b      	ldrb	r3, [r3, #1]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d132      	bne.n	8002a1a <StartDefaultTask+0x2da>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 80029b4:	2301      	movs	r3, #1
 80029b6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80029ba:	f102 021f 	add.w	r2, r2, #31
 80029be:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 80029c0:	2300      	movs	r3, #0
 80029c2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80029c6:	f102 021d 	add.w	r2, r2, #29
 80029ca:	7013      	strb	r3, [r2, #0]
				detail_array[0] = SEMI_AUTO_METHOD;
 80029cc:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80029d0:	2219      	movs	r2, #25
 80029d2:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80029d4:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80029d8:	6899      	ldr	r1, [r3, #8]
 80029da:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80029de:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4413      	add	r3, r2
 80029e6:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	2301      	movs	r3, #1
 80029ee:	2008      	movs	r0, #8
 80029f0:	f7ff fcfa 	bl	80023e8 <commandRespond1>
 80029f4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80029f8:	f103 0304 	add.w	r3, r3, #4
 80029fc:	6018      	str	r0, [r3, #0]
				total_respond_length += respond_lenght;
 80029fe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a08:	f103 0304 	add.w	r3, r3, #4
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	f000 bc02 	b.w	800321e <StartDefaultTask+0xade>
			  } else if (SCARA_METHOD_GCODE == duty_cmd.robot_method) {
 8002a1a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002a1e:	785b      	ldrb	r3, [r3, #1]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d155      	bne.n	8002ad0 <StartDefaultTask+0x390>
//				  Gcode_Cor = pvPortMalloc(total_num_of_point*sizeof(SCARA_Gcode_Cor_TypeDef));
//					if(Gcode_Cor == NULL){
//					  int t =2;
//					}
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a2a:	f102 021d 	add.w	r2, r2, #29
 8002a2e:	7013      	strb	r3, [r2, #0]
				  current_method = SCARA_METHOD_GCODE;
 8002a30:	2302      	movs	r3, #2
 8002a32:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a36:	f102 021f 	add.w	r2, r2, #31
 8002a3a:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = GCODE_METHOD;
 8002a3c:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002a40:	221a      	movs	r2, #26
 8002a42:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002a44:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002a48:	6899      	ldr	r1, [r3, #8]
 8002a4a:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002a4e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4413      	add	r3, r2
 8002a56:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	2008      	movs	r0, #8
 8002a60:	f7ff fcc2 	bl	80023e8 <commandRespond1>
 8002a64:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a68:	f103 0304 	add.w	r3, r3, #4
 8002a6c:	6018      	str	r0, [r3, #0]
				total_respond_length += respond_lenght;
 8002a6e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a78:	f103 0304 	add.w	r3, r3, #4
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e3ca      	b.n	800321e <StartDefaultTask+0xade>
 8002a88:	45a1cac1 	.word	0x45a1cac1
 8002a8c:	bff6f3b6 	.word	0xbff6f3b6
 8002a90:	e0000000 	.word	0xe0000000
 8002a94:	3ffb8a71 	.word	0x3ffb8a71
 8002a98:	78d4fdf4 	.word	0x78d4fdf4
 8002a9c:	4023a6e9 	.word	0x4023a6e9
 8002aa0:	9d7342ee 	.word	0x9d7342ee
 8002aa4:	3fd25a46 	.word	0x3fd25a46
 8002aa8:	40020400 	.word	0x40020400
 8002aac:	0801c958 	.word	0x0801c958
 8002ab0:	c0410000 	.word	0xc0410000
 8002ab4:	0801c9e8 	.word	0x0801c9e8
 8002ab8:	0801c874 	.word	0x0801c874
 8002abc:	20010c70 	.word	0x20010c70
 8002ac0:	20010db0 	.word	0x20010db0
 8002ac4:	20010970 	.word	0x20010970
 8002ac8:	20010af0 	.word	0x20010af0
 8002acc:	2000fe6c 	.word	0x2000fe6c
			  }else if(SCARA_METHOD_TEST == duty_cmd.robot_method){
 8002ad0:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002ad4:	785b      	ldrb	r3, [r3, #1]
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d13b      	bne.n	8002b52 <StartDefaultTask+0x412>
				  test_value[0] = 0;
 8002ada:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
				  test_value[1] = 0;
 8002ae2:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	705a      	strb	r2, [r3, #1]
				  test_value[2] = 0;
 8002aea:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002aee:	2200      	movs	r2, #0
 8002af0:	709a      	strb	r2, [r3, #2]
				  test_value[3] = 0;
 8002af2:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002af6:	2200      	movs	r2, #0
 8002af8:	70da      	strb	r2, [r3, #3]
				  current_method = SCARA_METHOD_TEST;
 8002afa:	2303      	movs	r3, #3
 8002afc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002b00:	f102 021f 	add.w	r2, r2, #31
 8002b04:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = TEST_METHOD;
 8002b06:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002b0a:	221b      	movs	r2, #27
 8002b0c:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b0e:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002b12:	6899      	ldr	r1, [r3, #8]
 8002b14:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002b18:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	2301      	movs	r3, #1
 8002b28:	2008      	movs	r0, #8
 8002b2a:	f7ff fc5d 	bl	80023e8 <commandRespond1>
 8002b2e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002b32:	f103 0304 	add.w	r3, r3, #4
 8002b36:	6018      	str	r0, [r3, #0]
				  total_respond_length += respond_lenght;
 8002b38:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002b42:	f103 0304 	add.w	r3, r3, #4
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	e365      	b.n	800321e <StartDefaultTask+0xade>
			  }else if(SCARA_METHOD_PICK_AND_PLACE == duty_cmd.robot_method){
 8002b52:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002b56:	785b      	ldrb	r3, [r3, #1]
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	f040 8360 	bne.w	800321e <StartDefaultTask+0xade>
				  current_method = SCARA_METHOD_PICK_AND_PLACE;
 8002b5e:	2304      	movs	r3, #4
 8002b60:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002b64:	f102 021f 	add.w	r2, r2, #31
 8002b68:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002b70:	f102 021d 	add.w	r2, r2, #29
 8002b74:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = PICK_AND_PLACE_METHOD;
 8002b76:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002b7a:	221c      	movs	r2, #28
 8002b7c:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b7e:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002b82:	6899      	ldr	r1, [r3, #8]
 8002b84:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002b88:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	2301      	movs	r3, #1
 8002b98:	2008      	movs	r0, #8
 8002b9a:	f7ff fc25 	bl	80023e8 <commandRespond1>
 8002b9e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002ba2:	f103 0304 	add.w	r3, r3, #4
 8002ba6:	6018      	str	r0, [r3, #0]
				  total_respond_length += respond_lenght;
 8002ba8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002bb2:	f103 0304 	add.w	r3, r3, #4
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	e32d      	b.n	800321e <StartDefaultTask+0xade>
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 8002bc2:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002bc6:	785b      	ldrb	r3, [r3, #1]
 8002bc8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002bcc:	f102 021f 	add.w	r2, r2, #31
 8002bd0:	7812      	ldrb	r2, [r2, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	f040 82fa 	bne.w	80031cc <StartDefaultTask+0xa8c>
				  	  switch( duty_cmd.robot_method) {
 8002bd8:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002bdc:	785b      	ldrb	r3, [r3, #1]
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	f200 82ee 	bhi.w	80031c0 <StartDefaultTask+0xa80>
 8002be4:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <StartDefaultTask+0x4ac>)
 8002be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bea:	bf00      	nop
 8002bec:	08002c01 	.word	0x08002c01
 8002bf0:	08002c87 	.word	0x08002c87
 8002bf4:	0800304d 	.word	0x0800304d
 8002bf8:	08002edb 	.word	0x08002edb
 8002bfc:	08003103 	.word	0x08003103
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 8002c00:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002c04:	f103 031b 	add.w	r3, r3, #27
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d116      	bne.n	8002c3c <StartDefaultTask+0x4fc>
				  			  current_key = duty_cmd.keyboard;
 8002c0e:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002c12:	78db      	ldrb	r3, [r3, #3]
 8002c14:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c18:	f102 021a 	add.w	r2, r2, #26
 8002c1c:	7013      	strb	r3, [r2, #0]
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 8002c1e:	2301      	movs	r3, #1
 8002c20:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c24:	f102 021b 	add.w	r2, r2, #27
 8002c28:	7013      	strb	r3, [r2, #0]
				  			  current_key_speed = duty_cmd.key_speed;
 8002c2a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c34:	f102 0214 	add.w	r2, r2, #20
 8002c38:	6013      	str	r3, [r2, #0]
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 8002c3a:	e2ed      	b.n	8003218 <StartDefaultTask+0xad8>
				  		  } else if (current_key == duty_cmd.keyboard
 8002c3c:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002c40:	78db      	ldrb	r3, [r3, #3]
 8002c42:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c46:	f102 021a 	add.w	r2, r2, #26
 8002c4a:	7812      	ldrb	r2, [r2, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	f040 82e3 	bne.w	8003218 <StartDefaultTask+0xad8>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 8002c52:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002c56:	f103 031b 	add.w	r3, r3, #27
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	f040 82db 	bne.w	8003218 <StartDefaultTask+0xad8>
									  && current_key_speed == duty_cmd.key_speed) {
 8002c62:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c6c:	f102 0214 	add.w	r2, r2, #20
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	f040 82d0 	bne.w	8003218 <StartDefaultTask+0xad8>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 8002c78:	2301      	movs	r3, #1
 8002c7a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c7e:	f102 021b 	add.w	r2, r2, #27
 8002c82:	7013      	strb	r3, [r2, #0]
				  	  break;
 8002c84:	e2c8      	b.n	8003218 <StartDefaultTask+0xad8>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 8002c86:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002c8a:	789b      	ldrb	r3, [r3, #2]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	f000 80a4 	beq.w	8002dda <StartDefaultTask+0x69a>
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	f300 811a 	bgt.w	8002ecc <StartDefaultTask+0x78c>
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <StartDefaultTask+0x562>
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d031      	beq.n	8002d04 <StartDefaultTask+0x5c4>
 8002ca0:	e114      	b.n	8002ecc <StartDefaultTask+0x78c>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002ca8:	f102 021e 	add.w	r2, r2, #30
 8002cac:	7013      	strb	r3, [r2, #0]
								detail_array[0] = STOP_NOW;
 8002cae:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002cb6:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002cba:	6899      	ldr	r1, [r3, #8]
 8002cbc:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002cc0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	2301      	movs	r3, #1
 8002cd0:	2008      	movs	r0, #8
 8002cd2:	f7ff fb89 	bl	80023e8 <commandRespond1>
 8002cd6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002cda:	f103 0304 	add.w	r3, r3, #4
 8002cde:	6018      	str	r0, [r3, #0]
								total_respond_length += respond_lenght;
 8002ce0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002cea:	f103 0304 	add.w	r3, r3, #4
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002cf6:	6013      	str	r3, [r2, #0]
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 8002cf8:	f240 1165 	movw	r1, #357	; 0x165
 8002cfc:	48cd      	ldr	r0, [pc, #820]	; (8003034 <StartDefaultTask+0x8f4>)
 8002cfe:	f7ff fbdb 	bl	80024b8 <LOG_REPORT>
							  }
							  break;
 8002d02:	e0e9      	b.n	8002ed8 <StartDefaultTask+0x798>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002d04:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002d08:	f103 031e 	add.w	r3, r3, #30
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d138      	bne.n	8002d84 <StartDefaultTask+0x644>
 8002d12:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002d16:	f103 031d 	add.w	r3, r3, #29
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d131      	bne.n	8002d84 <StartDefaultTask+0x644>
									  current_mode = SCARA_MODE_SCAN;
 8002d20:	2301      	movs	r3, #1
 8002d22:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002d26:	f102 021e 	add.w	r2, r2, #30
 8002d2a:	7013      	strb	r3, [r2, #0]
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002d32:	f102 021c 	add.w	r2, r2, #28
 8002d36:	7013      	strb	r3, [r2, #0]
									detail_array[0] = START_SCAN;
 8002d38:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002d3c:	2221      	movs	r2, #33	; 0x21
 8002d3e:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002d40:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002d44:	6899      	ldr	r1, [r3, #8]
 8002d46:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002d4a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4413      	add	r3, r2
 8002d52:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	2301      	movs	r3, #1
 8002d5a:	2008      	movs	r0, #8
 8002d5c:	f7ff fb44 	bl	80023e8 <commandRespond1>
 8002d60:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002d64:	f103 0304 	add.w	r3, r3, #4
 8002d68:	6018      	str	r0, [r3, #0]
									total_respond_length += respond_lenght;
 8002d6a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002d74:	f103 0304 	add.w	r3, r3, #4
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002d80:	6013      	str	r3, [r2, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
									total_respond_length += respond_lenght;
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 8002d82:	e0a9      	b.n	8002ed8 <StartDefaultTask+0x798>
									detail_array[0] = BUSY;
 8002d84:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002d88:	2222      	movs	r2, #34	; 0x22
 8002d8a:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002d8c:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002d90:	6899      	ldr	r1, [r3, #8]
 8002d92:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002d96:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	2301      	movs	r3, #1
 8002da6:	2007      	movs	r0, #7
 8002da8:	f7ff fb1e 	bl	80023e8 <commandRespond1>
 8002dac:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002db0:	f103 0304 	add.w	r3, r3, #4
 8002db4:	6018      	str	r0, [r3, #0]
									total_respond_length += respond_lenght;
 8002db6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002dc0:	f103 0304 	add.w	r3, r3, #4
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002dcc:	6013      	str	r3, [r2, #0]
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 8002dce:	f240 1179 	movw	r1, #377	; 0x179
 8002dd2:	4899      	ldr	r0, [pc, #612]	; (8003038 <StartDefaultTask+0x8f8>)
 8002dd4:	f7ff fb70 	bl	80024b8 <LOG_REPORT>
							  break;
 8002dd8:	e07e      	b.n	8002ed8 <StartDefaultTask+0x798>

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002dda:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002dde:	f103 031e 	add.w	r3, r3, #30
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d145      	bne.n	8002e74 <StartDefaultTask+0x734>
 8002de8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002dec:	f103 031d 	add.w	r3, r3, #29
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d13e      	bne.n	8002e74 <StartDefaultTask+0x734>
									  scaraSetScanFlag();
 8002df6:	f007 feef 	bl	800abd8 <scaraSetScanFlag>
//									  if(duty_cmd.modeInit_type == DUTY_MODE_INIT_LINEAR){
//										  current_method = SCARA_METHOD_AUTO;
//									  }
									  if (scaraIsScanLimit()) {
 8002dfa:	f007 ff7f 	bl	800acfc <scaraIsScanLimit>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00c      	beq.n	8002e1e <StartDefaultTask+0x6de>
										  current_mode	 = SCARA_MODE_DUTY;
 8002e04:	2302      	movs	r3, #2
 8002e06:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002e0a:	f102 021e 	add.w	r2, r2, #30
 8002e0e:	7013      	strb	r3, [r2, #0]
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 8002e10:	2301      	movs	r3, #1
 8002e12:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002e16:	f102 021d 	add.w	r2, r2, #29
 8002e1a:	7013      	strb	r3, [r2, #0]
									  if (scaraIsScanLimit()) {
 8002e1c:	e055      	b.n	8002eca <StartDefaultTask+0x78a>
									  } else {
										detail_array[0] = NOT_SCAN;
 8002e1e:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002e22:	2223      	movs	r2, #35	; 0x23
 8002e24:	701a      	strb	r2, [r3, #0]
										respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002e26:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002e2a:	6899      	ldr	r1, [r3, #8]
 8002e2c:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002e30:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4413      	add	r3, r2
 8002e38:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	2301      	movs	r3, #1
 8002e40:	2007      	movs	r0, #7
 8002e42:	f7ff fad1 	bl	80023e8 <commandRespond1>
 8002e46:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002e4a:	f103 0304 	add.w	r3, r3, #4
 8002e4e:	6018      	str	r0, [r3, #0]
										total_respond_length += respond_lenght;
 8002e50:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002e5a:	f103 0304 	add.w	r3, r3, #4
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4413      	add	r3, r2
 8002e62:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002e66:	6013      	str	r3, [r2, #0]
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 8002e68:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002e6c:	4873      	ldr	r0, [pc, #460]	; (800303c <StartDefaultTask+0x8fc>)
 8002e6e:	f7ff fb23 	bl	80024b8 <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 8002e72:	e02a      	b.n	8002eca <StartDefaultTask+0x78a>
									  }
								  } else {
									detail_array[0] = BUSY;
 8002e74:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002e78:	2222      	movs	r2, #34	; 0x22
 8002e7a:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002e7c:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002e80:	6899      	ldr	r1, [r3, #8]
 8002e82:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002e86:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	2301      	movs	r3, #1
 8002e96:	2007      	movs	r0, #7
 8002e98:	f7ff faa6 	bl	80023e8 <commandRespond1>
 8002e9c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002ea0:	f103 0304 	add.w	r3, r3, #4
 8002ea4:	6018      	str	r0, [r3, #0]
									total_respond_length += respond_lenght;
 8002ea6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002eb0:	f103 0304 	add.w	r3, r3, #4
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002ebc:	6013      	str	r3, [r2, #0]
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 8002ebe:	f44f 71c9 	mov.w	r1, #402	; 0x192
 8002ec2:	485f      	ldr	r0, [pc, #380]	; (8003040 <StartDefaultTask+0x900>)
 8002ec4:	f7ff faf8 	bl	80024b8 <LOG_REPORT>
								  }
							  }
							  break;
 8002ec8:	e006      	b.n	8002ed8 <StartDefaultTask+0x798>
 8002eca:	e005      	b.n	8002ed8 <StartDefaultTask+0x798>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 8002ecc:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8002ed0:	485c      	ldr	r0, [pc, #368]	; (8003044 <StartDefaultTask+0x904>)
 8002ed2:	f7ff faf1 	bl	80024b8 <LOG_REPORT>
							  }
						  }
					  }
					  break;
 8002ed6:	e1a2      	b.n	800321e <StartDefaultTask+0xade>
 8002ed8:	e1a1      	b.n	800321e <StartDefaultTask+0xade>
					  case SCARA_METHOD_TEST:
					  {
						  test_value[0] = 0;
 8002eda:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
						  test_value[1] = 0;
 8002ee2:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	705a      	strb	r2, [r3, #1]
						  test_value[2] = 0;
 8002eea:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002eee:	2200      	movs	r2, #0
 8002ef0:	709a      	strb	r2, [r3, #2]
						  test_value[3] = 0;
 8002ef2:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	70da      	strb	r2, [r3, #3]
						  switch (duty_cmd.test_key)
 8002efa:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002efe:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002f02:	2b07      	cmp	r3, #7
 8002f04:	f200 8094 	bhi.w	8003030 <StartDefaultTask+0x8f0>
 8002f08:	a201      	add	r2, pc, #4	; (adr r2, 8002f10 <StartDefaultTask+0x7d0>)
 8002f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0e:	bf00      	nop
 8002f10:	08002f31 	.word	0x08002f31
 8002f14:	08002f4d 	.word	0x08002f4d
 8002f18:	08002f71 	.word	0x08002f71
 8002f1c:	08002f8d 	.word	0x08002f8d
 8002f20:	08002fb1 	.word	0x08002fb1
 8002f24:	08002fcd 	.word	0x08002fcd
 8002f28:	08002ff1 	.word	0x08002ff1
 8002f2c:	0800300d 	.word	0x0800300d
						  {
						  case SCARA_TEST_MOTOR1_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[0];
 8002f30:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002f34:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002f38:	085b      	lsrs	r3, r3, #1
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4b42      	ldr	r3, [pc, #264]	; (8003048 <StartDefaultTask+0x908>)
 8002f40:	f993 1000 	ldrsb.w	r1, [r3]
 8002f44:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002f48:	5499      	strb	r1, [r3, r2]
						  break;
 8002f4a:	e072      	b.n	8003032 <StartDefaultTask+0x8f2>
						  case SCARA_TEST_MOTOR1_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[0];
 8002f4c:	4b3e      	ldr	r3, [pc, #248]	; (8003048 <StartDefaultTask+0x908>)
 8002f4e:	f993 3000 	ldrsb.w	r3, [r3]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	425b      	negs	r3, r3
 8002f56:	b2d9      	uxtb	r1, r3
 8002f58:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002f5c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002f60:	085b      	lsrs	r3, r3, #1
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	461a      	mov	r2, r3
 8002f66:	b249      	sxtb	r1, r1
 8002f68:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002f6c:	5499      	strb	r1, [r3, r2]
						  break;
 8002f6e:	e060      	b.n	8003032 <StartDefaultTask+0x8f2>
						  case SCARA_TEST_MOTOR2_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[1];
 8002f70:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002f74:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002f78:	085b      	lsrs	r3, r3, #1
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b32      	ldr	r3, [pc, #200]	; (8003048 <StartDefaultTask+0x908>)
 8002f80:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8002f84:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002f88:	5499      	strb	r1, [r3, r2]
						  break;
 8002f8a:	e052      	b.n	8003032 <StartDefaultTask+0x8f2>
						  case SCARA_TEST_MOTOR2_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[1];
 8002f8c:	4b2e      	ldr	r3, [pc, #184]	; (8003048 <StartDefaultTask+0x908>)
 8002f8e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	425b      	negs	r3, r3
 8002f96:	b2d9      	uxtb	r1, r3
 8002f98:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002f9c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002fa0:	085b      	lsrs	r3, r3, #1
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	b249      	sxtb	r1, r1
 8002fa8:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002fac:	5499      	strb	r1, [r3, r2]
						  break;
 8002fae:	e040      	b.n	8003032 <StartDefaultTask+0x8f2>
						  case SCARA_TEST_MOTOR3_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[2];
 8002fb0:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002fb4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002fb8:	085b      	lsrs	r3, r3, #1
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4b22      	ldr	r3, [pc, #136]	; (8003048 <StartDefaultTask+0x908>)
 8002fc0:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8002fc4:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002fc8:	5499      	strb	r1, [r3, r2]
						  break;
 8002fca:	e032      	b.n	8003032 <StartDefaultTask+0x8f2>
						  case SCARA_TEST_MOTOR3_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[2];
 8002fcc:	4b1e      	ldr	r3, [pc, #120]	; (8003048 <StartDefaultTask+0x908>)
 8002fce:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	425b      	negs	r3, r3
 8002fd6:	b2d9      	uxtb	r1, r3
 8002fd8:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002fdc:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002fe0:	085b      	lsrs	r3, r3, #1
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	b249      	sxtb	r1, r1
 8002fe8:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002fec:	5499      	strb	r1, [r3, r2]
						  break;
 8002fee:	e020      	b.n	8003032 <StartDefaultTask+0x8f2>
						  case SCARA_TEST_MOTOR4_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[3];
 8002ff0:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002ff4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002ff8:	085b      	lsrs	r3, r3, #1
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4b12      	ldr	r3, [pc, #72]	; (8003048 <StartDefaultTask+0x908>)
 8003000:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003004:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8003008:	5499      	strb	r1, [r3, r2]
						  break;
 800300a:	e012      	b.n	8003032 <StartDefaultTask+0x8f2>
						  case SCARA_TEST_MOTOR4_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[3];
 800300c:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <StartDefaultTask+0x908>)
 800300e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	425b      	negs	r3, r3
 8003016:	b2d9      	uxtb	r1, r3
 8003018:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800301c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8003020:	085b      	lsrs	r3, r3, #1
 8003022:	b2db      	uxtb	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	b249      	sxtb	r1, r1
 8003028:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 800302c:	5499      	strb	r1, [r3, r2]
						  break;						  
 800302e:	e000      	b.n	8003032 <StartDefaultTask+0x8f2>
						  default:
							  break;
 8003030:	bf00      	nop
						  }
					  }
					  break;
 8003032:	e0f4      	b.n	800321e <StartDefaultTask+0xade>
 8003034:	0801c894 	.word	0x0801c894
 8003038:	0801c8a4 	.word	0x0801c8a4
 800303c:	0801c8b4 	.word	0x0801c8b4
 8003040:	0801c8c8 	.word	0x0801c8c8
 8003044:	0801c8d8 	.word	0x0801c8d8
 8003048:	20000000 	.word	0x20000000
				  	  case SCARA_METHOD_GCODE:
				  	  {
				  		  if(current_duty_state == SCARA_DUTY_STATE_READY && duty_cmd.id_command == CMD_GCODE_RUN){
 800304c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003050:	f103 031d 	add.w	r3, r3, #29
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d120      	bne.n	800309c <StartDefaultTask+0x95c>
 800305a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b13      	cmp	r3, #19
 8003062:	d11b      	bne.n	800309c <StartDefaultTask+0x95c>
				  			  if(Gcode_Mode == GCODE_LINEAR){
 8003064:	4bc0      	ldr	r3, [pc, #768]	; (8003368 <StartDefaultTask+0xc28>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b08      	cmp	r3, #8
 800306a:	d106      	bne.n	800307a <StartDefaultTask+0x93a>
				  				run_point = 1;
 800306c:	2301      	movs	r3, #1
 800306e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003072:	f102 0214 	add.w	r2, r2, #20
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	e009      	b.n	800308e <StartDefaultTask+0x94e>
				  			  }else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 800307a:	4bbb      	ldr	r3, [pc, #748]	; (8003368 <StartDefaultTask+0xc28>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b09      	cmp	r3, #9
 8003080:	d105      	bne.n	800308e <StartDefaultTask+0x94e>
				  				run_point = 0;
 8003082:	2300      	movs	r3, #0
 8003084:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003088:	f102 0214 	add.w	r2, r2, #20
 800308c:	6013      	str	r3, [r2, #0]
				  			  }

				  			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 800308e:	2304      	movs	r3, #4
 8003090:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003094:	f102 021d 	add.w	r2, r2, #29
 8003098:	7013      	strb	r3, [r2, #0]
 800309a:	e031      	b.n	8003100 <StartDefaultTask+0x9c0>
				  		  }else if(current_duty_state == SCARA_DUTY_STATE_INIT && duty_cmd.id_command == CMD_GCODE_RESUME){
 800309c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80030a0:	f103 031d 	add.w	r3, r3, #29
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d111      	bne.n	80030ce <StartDefaultTask+0x98e>
 80030aa:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b12      	cmp	r3, #18
 80030b2:	d10c      	bne.n	80030ce <StartDefaultTask+0x98e>
				  			  lowlayer_readTruePosition(&positionCurrent);
 80030b4:	48ad      	ldr	r0, [pc, #692]	; (800336c <StartDefaultTask+0xc2c>)
 80030b6:	f003 f93b 	bl	8006330 <lowlayer_readTruePosition>
				  			  kinematicForward(&positionCurrent);
 80030ba:	48ac      	ldr	r0, [pc, #688]	; (800336c <StartDefaultTask+0xc2c>)
 80030bc:	f002 f9fc 	bl	80054b8 <kinematicForward>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80030c6:	f102 021d 	add.w	r2, r2, #29
 80030ca:	7013      	strb	r3, [r2, #0]
 80030cc:	e018      	b.n	8003100 <StartDefaultTask+0x9c0>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_STOP){
 80030ce:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b0d      	cmp	r3, #13
 80030d6:	d106      	bne.n	80030e6 <StartDefaultTask+0x9a6>
				  			  current_duty_state = SCARA_DUTY_STATE_READY;
 80030d8:	2300      	movs	r3, #0
 80030da:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80030de:	f102 021d 	add.w	r2, r2, #29
 80030e2:	7013      	strb	r3, [r2, #0]
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
				  		  }
				  	  }
				  	  break;
 80030e4:	e09a      	b.n	800321c <StartDefaultTask+0xadc>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
 80030e6:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b0e      	cmp	r3, #14
 80030ee:	f040 8095 	bne.w	800321c <StartDefaultTask+0xadc>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 80030f2:	2301      	movs	r3, #1
 80030f4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80030f8:	f102 021d 	add.w	r2, r2, #29
 80030fc:	7013      	strb	r3, [r2, #0]
				  	  break;
 80030fe:	e08d      	b.n	800321c <StartDefaultTask+0xadc>
 8003100:	e08c      	b.n	800321c <StartDefaultTask+0xadc>
				  	  case SCARA_METHOD_PICK_AND_PLACE:{
				  		  memcpy(&Object[object_head_pointer].object_position, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 8003102:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003106:	f103 0305 	add.w	r3, r3, #5
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003110:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	18d0      	adds	r0, r2, r3
 800311a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800311e:	3328      	adds	r3, #40	; 0x28
 8003120:	22c0      	movs	r2, #192	; 0xc0
 8003122:	4619      	mov	r1, r3
 8003124:	f013 fa14 	bl	8016550 <memcpy>
				  		  //Object[object_head_pointer].timer_value = (uint16_t)duty_cmd.target_point.t;
				  		  Object[object_head_pointer].timer_value = duty_cmd.target_point.packet_time_stamp;
 8003128:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800312c:	f103 0305 	add.w	r3, r3, #5
 8003130:	7819      	ldrb	r1, [r3, #0]
 8003132:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003136:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800313a:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 800313e:	f44f 76c4 	mov.w	r6, #392	; 0x188
 8003142:	fb06 f101 	mul.w	r1, r6, r1
 8003146:	4401      	add	r1, r0
 8003148:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 800314c:	e9c1 2300 	strd	r2, r3, [r1]
				  		  object_head_pointer = (object_head_pointer+1)%8;
 8003150:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003154:	f103 0305 	add.w	r3, r3, #5
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	3301      	adds	r3, #1
 800315c:	425a      	negs	r2, r3
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	f002 0207 	and.w	r2, r2, #7
 8003166:	bf58      	it	pl
 8003168:	4253      	negpl	r3, r2
 800316a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800316e:	f102 0205 	add.w	r2, r2, #5
 8003172:	7013      	strb	r3, [r2, #0]
				  		  detail_array[0] = OBJECT_DETECTED;
 8003174:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003178:	221d      	movs	r2, #29
 800317a:	701a      	strb	r2, [r3, #0]
						  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800317c:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003180:	6899      	ldr	r1, [r3, #8]
 8003182:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003186:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4413      	add	r3, r2
 800318e:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	2301      	movs	r3, #1
 8003196:	2008      	movs	r0, #8
 8003198:	f7ff f926 	bl	80023e8 <commandRespond1>
 800319c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80031a0:	f103 0304 	add.w	r3, r3, #4
 80031a4:	6018      	str	r0, [r3, #0]
						  total_respond_length += respond_lenght;
 80031a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80031b0:	f103 0304 	add.w	r3, r3, #4
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4413      	add	r3, r2
 80031b8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80031bc:	6013      	str	r3, [r2, #0]
				  	  }
				  	  break;
 80031be:	e02e      	b.n	800321e <StartDefaultTask+0xade>
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 80031c0:	f240 11e3 	movw	r1, #483	; 0x1e3
 80031c4:	486a      	ldr	r0, [pc, #424]	; (8003370 <StartDefaultTask+0xc30>)
 80031c6:	f7ff f977 	bl	80024b8 <LOG_REPORT>
 80031ca:	e028      	b.n	800321e <StartDefaultTask+0xade>
				  	  }
				  	  }
			  	  } else {
					detail_array[0] = INCORRECT_METHOD;
 80031cc:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80031d0:	2224      	movs	r2, #36	; 0x24
 80031d2:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80031d4:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80031d8:	6899      	ldr	r1, [r3, #8]
 80031da:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80031de:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4413      	add	r3, r2
 80031e6:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	2301      	movs	r3, #1
 80031ee:	2007      	movs	r0, #7
 80031f0:	f7ff f8fa 	bl	80023e8 <commandRespond1>
 80031f4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80031f8:	f103 0304 	add.w	r3, r3, #4
 80031fc:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 80031fe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003208:	f103 0304 	add.w	r3, r3, #4
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4413      	add	r3, r2
 8003210:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	e002      	b.n	800321e <StartDefaultTask+0xade>
				  	  break;
 8003218:	bf00      	nop
 800321a:	e000      	b.n	800321e <StartDefaultTask+0xade>
				  	  break;
 800321c:	bf00      	nop
			  	  }

			  }
		  isNewDuty = FALSE;
 800321e:	2300      	movs	r3, #0
 8003220:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003224:	f102 0207 	add.w	r2, r2, #7
 8003228:	7013      	strb	r3, [r2, #0]
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 800322a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800322e:	f103 031f 	add.w	r3, r3, #31
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b04      	cmp	r3, #4
 8003236:	f201 81b1 	bhi.w	800459c <StartDefaultTask+0x1e5c>
 800323a:	a201      	add	r2, pc, #4	; (adr r2, 8003240 <StartDefaultTask+0xb00>)
 800323c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003240:	08003255 	.word	0x08003255
 8003244:	08003483 	.word	0x08003483
 8003248:	0800395d 	.word	0x0800395d
 800324c:	08003d0f 	.word	0x08003d0f
 8003250:	08003d5d 	.word	0x08003d5d
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 8003254:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003258:	f103 031b 	add.w	r3, r3, #27
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b03      	cmp	r3, #3
 8003260:	f201 8199 	bhi.w	8004596 <StartDefaultTask+0x1e56>
 8003264:	a201      	add	r2, pc, #4	; (adr r2, 800326c <StartDefaultTask+0xb2c>)
 8003266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326a:	bf00      	nop
 800326c:	0800347d 	.word	0x0800347d
 8003270:	0800327d 	.word	0x0800327d
 8003274:	08003313 	.word	0x08003313
 8003278:	08003439 	.word	0x08003439
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit1(current_key, current_key_speed1) == SCARA_STATUS_OK) {
 800327c:	4b3d      	ldr	r3, [pc, #244]	; (8003374 <StartDefaultTask+0xc34>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003284:	f103 031a 	add.w	r3, r3, #26
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	4611      	mov	r1, r2
 800328c:	4618      	mov	r0, r3
 800328e:	f007 fe4b 	bl	800af28 <scaraKeyInit1>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d135      	bne.n	8003304 <StartDefaultTask+0xbc4>
				  run_time = 0;
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80032a4:	f101 0108 	add.w	r1, r1, #8
 80032a8:	e9c1 2300 	strd	r2, r3, [r1]
				  current_key_state = SCARA_KEY_STATE_FLOW;
 80032ac:	2302      	movs	r3, #2
 80032ae:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80032b2:	f102 021b 	add.w	r2, r2, #27
 80032b6:	7013      	strb	r3, [r2, #0]
					detail_array[0] = NONE;
 80032b8:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80032bc:	2225      	movs	r2, #37	; 0x25
 80032be:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80032c0:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80032c4:	6899      	ldr	r1, [r3, #8]
 80032c6:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80032ca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4413      	add	r3, r2
 80032d2:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	2301      	movs	r3, #1
 80032da:	2003      	movs	r0, #3
 80032dc:	f7ff f884 	bl	80023e8 <commandRespond1>
 80032e0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80032e4:	f103 0304 	add.w	r3, r3, #4
 80032e8:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 80032ea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80032f4:	f103 0304 	add.w	r3, r3, #4
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4413      	add	r3, r2
 80032fc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003300:	6013      	str	r3, [r2, #0]
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 8003302:	e0bc      	b.n	800347e <StartDefaultTask+0xd3e>
				  current_key_state = SCARA_KEY_STATE_READY;
 8003304:	2300      	movs	r3, #0
 8003306:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800330a:	f102 021b 	add.w	r2, r2, #27
 800330e:	7013      	strb	r3, [r2, #0]
		  break;
 8003310:	e0b5      	b.n	800347e <StartDefaultTask+0xd3e>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8003312:	a313      	add	r3, pc, #76	; (adr r3, 8003360 <StartDefaultTask+0xc20>)
 8003314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003318:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800331c:	f101 0108 	add.w	r1, r1, #8
 8003320:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003324:	f7fc ffb2 	bl	800028c <__adddf3>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003330:	f101 0108 	add.w	r1, r1, #8
 8003334:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8003338:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800333c:	f103 0308 	add.w	r3, r3, #8
 8003340:	ed93 0b00 	vldr	d0, [r3]
 8003344:	f007 fce6 	bl	800ad14 <scaraIsFinish>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d014      	beq.n	8003378 <StartDefaultTask+0xc38>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 800334e:	2303      	movs	r3, #3
 8003350:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003354:	f102 021b 	add.w	r2, r2, #27
 8003358:	7013      	strb	r3, [r2, #0]
					total_respond_length += respond_lenght;
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 800335a:	e090      	b.n	800347e <StartDefaultTask+0xd3e>
 800335c:	f3af 8000 	nop.w
 8003360:	40000000 	.word	0x40000000
 8003364:	3f847ae1 	.word	0x3f847ae1
 8003368:	200085c8 	.word	0x200085c8
 800336c:	20010af0 	.word	0x20010af0
 8003370:	0801c8ec 	.word	0x0801c8ec
 8003374:	20000060 	.word	0x20000060
				  status = scaraFlowDuty(run_time, &positionNext, positionCurrent);
 8003378:	4ed4      	ldr	r6, [pc, #848]	; (80036cc <StartDefaultTask+0xf8c>)
 800337a:	4668      	mov	r0, sp
 800337c:	f106 0308 	add.w	r3, r6, #8
 8003380:	22b8      	movs	r2, #184	; 0xb8
 8003382:	4619      	mov	r1, r3
 8003384:	f013 f8e4 	bl	8016550 <memcpy>
 8003388:	e896 000c 	ldmia.w	r6, {r2, r3}
 800338c:	48d0      	ldr	r0, [pc, #832]	; (80036d0 <StartDefaultTask+0xf90>)
 800338e:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003392:	f101 0108 	add.w	r1, r1, #8
 8003396:	ed91 0b00 	vldr	d0, [r1]
 800339a:	f006 fd09 	bl	8009db0 <scaraFlowDuty>
 800339e:	4603      	mov	r3, r0
 80033a0:	f887 3fd1 	strb.w	r3, [r7, #4049]	; 0xfd1
				  if ( SCARA_STATUS_OK == status) {
 80033a4:	f897 3fd1 	ldrb.w	r3, [r7, #4049]	; 0xfd1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d113      	bne.n	80033d4 <StartDefaultTask+0xc94>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 80033ac:	4ec7      	ldr	r6, [pc, #796]	; (80036cc <StartDefaultTask+0xf8c>)
 80033ae:	4ac8      	ldr	r2, [pc, #800]	; (80036d0 <StartDefaultTask+0xf90>)
 80033b0:	ab2c      	add	r3, sp, #176	; 0xb0
 80033b2:	4611      	mov	r1, r2
 80033b4:	22c0      	movs	r2, #192	; 0xc0
 80033b6:	4618      	mov	r0, r3
 80033b8:	f013 f8ca 	bl	8016550 <memcpy>
 80033bc:	4668      	mov	r0, sp
 80033be:	f106 0310 	add.w	r3, r6, #16
 80033c2:	22b0      	movs	r2, #176	; 0xb0
 80033c4:	4619      	mov	r1, r3
 80033c6:	f013 f8c3 	bl	8016550 <memcpy>
 80033ca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80033ce:	f003 f93f 	bl	8006650 <lowlayer_computeAndWritePulse>
		  break;
 80033d2:	e054      	b.n	800347e <StartDefaultTask+0xd3e>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 80033d4:	2303      	movs	r3, #3
 80033d6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80033da:	f102 021b 	add.w	r2, r2, #27
 80033de:	7013      	strb	r3, [r2, #0]
					detail_array[0] = status;
 80033e0:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80033e4:	f897 2fd1 	ldrb.w	r2, [r7, #4049]	; 0xfd1
 80033e8:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80033ea:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80033ee:	6899      	ldr	r1, [r3, #8]
 80033f0:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80033f4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4413      	add	r3, r2
 80033fc:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	2301      	movs	r3, #1
 8003404:	2006      	movs	r0, #6
 8003406:	f7fe ffef 	bl	80023e8 <commandRespond1>
 800340a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800340e:	f103 0304 	add.w	r3, r3, #4
 8003412:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 8003414:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800341e:	f103 0304 	add.w	r3, r3, #4
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4413      	add	r3, r2
 8003426:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800342a:	6013      	str	r3, [r2, #0]
					  LOG_REPORT("STOP KEY", __LINE__);
 800342c:	f240 2117 	movw	r1, #535	; 0x217
 8003430:	48a8      	ldr	r0, [pc, #672]	; (80036d4 <StartDefaultTask+0xf94>)
 8003432:	f7ff f841 	bl	80024b8 <LOG_REPORT>
		  break;
 8003436:	e022      	b.n	800347e <StartDefaultTask+0xd3e>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  lowlayer_readTruePosition(&positionNext);
 8003438:	48a5      	ldr	r0, [pc, #660]	; (80036d0 <StartDefaultTask+0xf90>)
 800343a:	f002 ff79 	bl	8006330 <lowlayer_readTruePosition>
			  kinematicForward(&positionNext);
 800343e:	48a4      	ldr	r0, [pc, #656]	; (80036d0 <StartDefaultTask+0xf90>)
 8003440:	f002 f83a 	bl	80054b8 <kinematicForward>
			  current_key_state = SCARA_KEY_STATE_READY;
 8003444:	2300      	movs	r3, #0
 8003446:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800344a:	f102 021b 	add.w	r2, r2, #27
 800344e:	7013      	strb	r3, [r2, #0]
			  positionNext.t = 0;
 8003450:	499f      	ldr	r1, [pc, #636]	; (80036d0 <StartDefaultTask+0xf90>)
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			  positionNext.total_time = 0;
 800345e:	499c      	ldr	r1, [pc, #624]	; (80036d0 <StartDefaultTask+0xf90>)
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			  positionNext.q = 0;
 800346c:	4998      	ldr	r1, [pc, #608]	; (80036d0 <StartDefaultTask+0xf90>)
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  break;
 800347a:	e000      	b.n	800347e <StartDefaultTask+0xd3e>
		  break;
 800347c:	bf00      	nop
		  }
	  }
	  break;
 800347e:	f001 b88a 	b.w	8004596 <StartDefaultTask+0x1e56>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 8003482:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003486:	f103 031e 	add.w	r3, r3, #30
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b02      	cmp	r3, #2
 800348e:	f000 808d 	beq.w	80035ac <StartDefaultTask+0xe6c>
 8003492:	2b02      	cmp	r3, #2
 8003494:	f300 825a 	bgt.w	800394c <StartDefaultTask+0x120c>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <StartDefaultTask+0xd62>
 800349c:	2b01      	cmp	r3, #1
 800349e:	d00d      	beq.n	80034bc <StartDefaultTask+0xd7c>
 80034a0:	e254      	b.n	800394c <StartDefaultTask+0x120c>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 80034a2:	2302      	movs	r3, #2
 80034a4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80034a8:	f102 021e 	add.w	r2, r2, #30
 80034ac:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 80034ae:	2300      	movs	r3, #0
 80034b0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80034b4:	f102 021d 	add.w	r2, r2, #29
 80034b8:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 80034ba:	e24d      	b.n	8003958 <StartDefaultTask+0x1218>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 80034bc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80034c0:	f103 031c 	add.w	r3, r3, #28
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d866      	bhi.n	8003598 <StartDefaultTask+0xe58>
 80034ca:	a201      	add	r2, pc, #4	; (adr r2, 80034d0 <StartDefaultTask+0xd90>)
 80034cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d0:	080034e1 	.word	0x080034e1
 80034d4:	080034f3 	.word	0x080034f3
 80034d8:	0800350b 	.word	0x0800350b
 80034dc:	08003525 	.word	0x08003525
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 80034e0:	f002 fd20 	bl	8005f24 <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 80034e4:	2301      	movs	r3, #1
 80034e6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80034ea:	f102 021c 	add.w	r2, r2, #28
 80034ee:	7013      	strb	r3, [r2, #0]
					  }
					  break;
 80034f0:	e05b      	b.n	80035aa <StartDefaultTask+0xe6a>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 80034f2:	f002 fd49 	bl	8005f88 <lowlayer_scanFlow>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d053      	beq.n	80035a4 <StartDefaultTask+0xe64>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 80034fc:	2302      	movs	r3, #2
 80034fe:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003502:	f102 021c 	add.w	r2, r2, #28
 8003506:	7013      	strb	r3, [r2, #0]
						  }
					  }
					  break;
 8003508:	e04c      	b.n	80035a4 <StartDefaultTask+0xe64>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 800350a:	4871      	ldr	r0, [pc, #452]	; (80036d0 <StartDefaultTask+0xf90>)
 800350c:	f002 fe94 	bl	8006238 <lowlayer_goToSoftLimit>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d048      	beq.n	80035a8 <StartDefaultTask+0xe68>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 8003516:	2303      	movs	r3, #3
 8003518:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800351c:	f102 021c 	add.w	r2, r2, #28
 8003520:	7013      	strb	r3, [r2, #0]
							}
					  }
					  break;
 8003522:	e041      	b.n	80035a8 <StartDefaultTask+0xe68>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  //lowlayer_readSetPosition(&positionNext);
						  lowlayer_readTruePosition(&positionNext);
 8003524:	486a      	ldr	r0, [pc, #424]	; (80036d0 <StartDefaultTask+0xf90>)
 8003526:	f002 ff03 	bl	8006330 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 800352a:	4869      	ldr	r0, [pc, #420]	; (80036d0 <StartDefaultTask+0xf90>)
 800352c:	f001 ffc4 	bl	80054b8 <kinematicForward>
						  current_mode 	= SCARA_MODE_DUTY;
 8003530:	2302      	movs	r3, #2
 8003532:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003536:	f102 021e 	add.w	r2, r2, #30
 800353a:	7013      	strb	r3, [r2, #0]
						  current_duty_state = SCARA_DUTY_STATE_READY;
 800353c:	2300      	movs	r3, #0
 800353e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003542:	f102 021d 	add.w	r2, r2, #29
 8003546:	7013      	strb	r3, [r2, #0]
						  scaraSetScanFlag();
 8003548:	f007 fb46 	bl	800abd8 <scaraSetScanFlag>

						detail_array[0] = NONE;
 800354c:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003550:	2225      	movs	r2, #37	; 0x25
 8003552:	701a      	strb	r2, [r3, #0]
						respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003554:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003558:	6899      	ldr	r1, [r3, #8]
 800355a:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 800355e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4413      	add	r3, r2
 8003566:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	2301      	movs	r3, #1
 800356e:	2005      	movs	r0, #5
 8003570:	f7fe ff3a 	bl	80023e8 <commandRespond1>
 8003574:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003578:	f103 0304 	add.w	r3, r3, #4
 800357c:	6018      	str	r0, [r3, #0]
						total_respond_length += respond_lenght;
 800357e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003588:	f103 0304 	add.w	r3, r3, #4
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4413      	add	r3, r2
 8003590:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003594:	6013      	str	r3, [r2, #0]
					  }
					  break;
 8003596:	e008      	b.n	80035aa <StartDefaultTask+0xe6a>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8003598:	f240 215b 	movw	r1, #603	; 0x25b
 800359c:	484e      	ldr	r0, [pc, #312]	; (80036d8 <StartDefaultTask+0xf98>)
 800359e:	f7fe ff8b 	bl	80024b8 <LOG_REPORT>
						  while(1);
 80035a2:	e7fe      	b.n	80035a2 <StartDefaultTask+0xe62>
					  break;
 80035a4:	bf00      	nop
 80035a6:	e1d7      	b.n	8003958 <StartDefaultTask+0x1218>
					  break;
 80035a8:	bf00      	nop
					  }
				  }

			  }
			  break;
 80035aa:	e1d5      	b.n	8003958 <StartDefaultTask+0x1218>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 80035ac:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80035b0:	f103 031d 	add.w	r3, r3, #29
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	f200 81c0 	bhi.w	800393c <StartDefaultTask+0x11fc>
 80035bc:	a201      	add	r2, pc, #4	; (adr r2, 80035c4 <StartDefaultTask+0xe84>)
 80035be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c2:	bf00      	nop
 80035c4:	08003949 	.word	0x08003949
 80035c8:	080035d5 	.word	0x080035d5
 80035cc:	080037a5 	.word	0x080037a5
 80035d0:	080038af 	.word	0x080038af

				  case SCARA_DUTY_STATE_INIT:
					  {

						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 80035d4:	f507 6660 	add.w	r6, r7, #3584	; 0xe00
 80035d8:	4668      	mov	r0, sp
 80035da:	f106 0310 	add.w	r3, r6, #16
 80035de:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80035e2:	4619      	mov	r1, r3
 80035e4:	f012 ffb4 	bl	8016550 <memcpy>
 80035e8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80035ec:	f003 fbc8 	bl	8006d80 <scaraInitDuty>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f887 3fd3 	strb.w	r3, [r7, #4051]	; 0xfd3
						  if ( SCARA_STATUS_OK == status1) {
 80035f6:	f897 3fd3 	ldrb.w	r3, [r7, #4051]	; 0xfd3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f040 80a0 	bne.w	8003740 <StartDefaultTask+0x1000>
							  status2 = scaraTestDuty();
 8003600:	f007 fa6e 	bl	800aae0 <scaraTestDuty>
 8003604:	4603      	mov	r3, r0
 8003606:	f887 3fd2 	strb.w	r3, [r7, #4050]	; 0xfd2
							  if (SCARA_STATUS_OK == status2) {
 800360a:	f897 3fd2 	ldrb.w	r3, [r7, #4050]	; 0xfd2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d164      	bne.n	80036dc <StartDefaultTask+0xf9c>
							  current_duty_state = SCARA_DUTY_STATE_FLOW;
 8003612:	2302      	movs	r3, #2
 8003614:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003618:	f102 021d 	add.w	r2, r2, #29
 800361c:	7013      	strb	r3, [r2, #0]
							  //current_duty_state = SCARA_DUTY_STATE_FINISH;
							  run_time			= 0;
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800362a:	f101 0108 	add.w	r1, r1, #8
 800362e:	e9c1 2300 	strd	r2, r3, [r1]
							  // Respond
							  detail_array[0] = status1;
 8003632:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003636:	f897 2fd3 	ldrb.w	r2, [r7, #4051]	; 0xfd3
 800363a:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800363c:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003640:	6899      	ldr	r1, [r3, #8]
 8003642:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003646:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4413      	add	r3, r2
 800364e:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	2301      	movs	r3, #1
 8003656:	2008      	movs	r0, #8
 8003658:	f7fe fec6 	bl	80023e8 <commandRespond1>
 800365c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003660:	f103 0304 	add.w	r3, r3, #4
 8003664:	6018      	str	r0, [r3, #0]
							  total_respond_length += respond_lenght;
 8003666:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003670:	f103 0304 	add.w	r3, r3, #4
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4413      	add	r3, r2
 8003678:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800367c:	6013      	str	r3, [r2, #0]
							  detail_array[0] = NONE;
 800367e:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003682:	2225      	movs	r2, #37	; 0x25
 8003684:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003686:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800368a:	6899      	ldr	r1, [r3, #8]
 800368c:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003690:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4413      	add	r3, r2
 8003698:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	2301      	movs	r3, #1
 80036a0:	2003      	movs	r0, #3
 80036a2:	f7fe fea1 	bl	80023e8 <commandRespond1>
 80036a6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80036aa:	f103 0304 	add.w	r3, r3, #4
 80036ae:	6018      	str	r0, [r3, #0]
							  total_respond_length += respond_lenght;
 80036b0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80036ba:	f103 0304 	add.w	r3, r3, #4
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4413      	add	r3, r2
 80036c2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80036c6:	6013      	str	r3, [r2, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
							total_respond_length += respond_lenght;
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 80036c8:	e13f      	b.n	800394a <StartDefaultTask+0x120a>
 80036ca:	bf00      	nop
 80036cc:	20010af0 	.word	0x20010af0
 80036d0:	20010c70 	.word	0x20010c70
 80036d4:	0801c904 	.word	0x0801c904
 80036d8:	0801c910 	.word	0x0801c910
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 80036dc:	2300      	movs	r3, #0
 80036de:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80036e2:	f102 021d 	add.w	r2, r2, #29
 80036e6:	7013      	strb	r3, [r2, #0]
								  LOG_REPORT("TEST FAIL", __LINE__);
 80036e8:	f240 2183 	movw	r1, #643	; 0x283
 80036ec:	48c2      	ldr	r0, [pc, #776]	; (80039f8 <StartDefaultTask+0x12b8>)
 80036ee:	f7fe fee3 	bl	80024b8 <LOG_REPORT>
								detail_array[0] = status2;
 80036f2:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80036f6:	f897 2fd2 	ldrb.w	r2, [r7, #4050]	; 0xfd2
 80036fa:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80036fc:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003700:	6899      	ldr	r1, [r3, #8]
 8003702:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003706:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4413      	add	r3, r2
 800370e:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	2301      	movs	r3, #1
 8003716:	2007      	movs	r0, #7
 8003718:	f7fe fe66 	bl	80023e8 <commandRespond1>
 800371c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003720:	f103 0304 	add.w	r3, r3, #4
 8003724:	6018      	str	r0, [r3, #0]
								total_respond_length += respond_lenght;
 8003726:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003730:	f103 0304 	add.w	r3, r3, #4
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4413      	add	r3, r2
 8003738:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800373c:	6013      	str	r3, [r2, #0]
				  break;
 800373e:	e104      	b.n	800394a <StartDefaultTask+0x120a>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8003740:	2300      	movs	r3, #0
 8003742:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003746:	f102 021d 	add.w	r2, r2, #29
 800374a:	7013      	strb	r3, [r2, #0]
							detail_array[0] = status1;
 800374c:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003750:	f897 2fd3 	ldrb.w	r2, [r7, #4051]	; 0xfd3
 8003754:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003756:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800375a:	6899      	ldr	r1, [r3, #8]
 800375c:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003760:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4413      	add	r3, r2
 8003768:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	2301      	movs	r3, #1
 8003770:	2007      	movs	r0, #7
 8003772:	f7fe fe39 	bl	80023e8 <commandRespond1>
 8003776:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800377a:	f103 0304 	add.w	r3, r3, #4
 800377e:	6018      	str	r0, [r3, #0]
							total_respond_length += respond_lenght;
 8003780:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800378a:	f103 0304 	add.w	r3, r3, #4
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4413      	add	r3, r2
 8003792:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003796:	6013      	str	r3, [r2, #0]
							  LOG_REPORT("INIT FAIL", __LINE__);
 8003798:	f240 218e 	movw	r1, #654	; 0x28e
 800379c:	4897      	ldr	r0, [pc, #604]	; (80039fc <StartDefaultTask+0x12bc>)
 800379e:	f7fe fe8b 	bl	80024b8 <LOG_REPORT>
				  break;
 80037a2:	e0d2      	b.n	800394a <StartDefaultTask+0x120a>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 80037a4:	a392      	add	r3, pc, #584	; (adr r3, 80039f0 <StartDefaultTask+0x12b0>)
 80037a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037aa:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80037ae:	f101 0108 	add.w	r1, r1, #8
 80037b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037b6:	f7fc fd69 	bl	800028c <__adddf3>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80037c2:	f101 0108 	add.w	r1, r1, #8
 80037c6:	e9c1 2300 	strd	r2, r3, [r1]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 80037ca:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80037ce:	f103 0308 	add.w	r3, r3, #8
 80037d2:	ed93 0b00 	vldr	d0, [r3]
 80037d6:	f007 fa9d 	bl	800ad14 <scaraIsFinish>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d006      	beq.n	80037ee <StartDefaultTask+0x10ae>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 80037e0:	2303      	movs	r3, #3
 80037e2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80037e6:	f102 021d 	add.w	r2, r2, #29
 80037ea:	7013      	strb	r3, [r2, #0]
								total_respond_length += respond_lenght;
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 80037ec:	e0ad      	b.n	800394a <StartDefaultTask+0x120a>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 80037ee:	4e84      	ldr	r6, [pc, #528]	; (8003a00 <StartDefaultTask+0x12c0>)
 80037f0:	4668      	mov	r0, sp
 80037f2:	f106 0308 	add.w	r3, r6, #8
 80037f6:	22b8      	movs	r2, #184	; 0xb8
 80037f8:	4619      	mov	r1, r3
 80037fa:	f012 fea9 	bl	8016550 <memcpy>
 80037fe:	e896 000c 	ldmia.w	r6, {r2, r3}
 8003802:	4880      	ldr	r0, [pc, #512]	; (8003a04 <StartDefaultTask+0x12c4>)
 8003804:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003808:	f101 0108 	add.w	r1, r1, #8
 800380c:	ed91 0b00 	vldr	d0, [r1]
 8003810:	f006 face 	bl	8009db0 <scaraFlowDuty>
 8003814:	4603      	mov	r3, r0
 8003816:	f887 3fd4 	strb.w	r3, [r7, #4052]	; 0xfd4
							  if ( SCARA_STATUS_OK == status) {
 800381a:	f897 3fd4 	ldrb.w	r3, [r7, #4052]	; 0xfd4
 800381e:	2b00      	cmp	r3, #0
 8003820:	d113      	bne.n	800384a <StartDefaultTask+0x110a>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003822:	4e77      	ldr	r6, [pc, #476]	; (8003a00 <StartDefaultTask+0x12c0>)
 8003824:	4a77      	ldr	r2, [pc, #476]	; (8003a04 <StartDefaultTask+0x12c4>)
 8003826:	ab2c      	add	r3, sp, #176	; 0xb0
 8003828:	4611      	mov	r1, r2
 800382a:	22c0      	movs	r2, #192	; 0xc0
 800382c:	4618      	mov	r0, r3
 800382e:	f012 fe8f 	bl	8016550 <memcpy>
 8003832:	4668      	mov	r0, sp
 8003834:	f106 0310 	add.w	r3, r6, #16
 8003838:	22b0      	movs	r2, #176	; 0xb0
 800383a:	4619      	mov	r1, r3
 800383c:	f012 fe88 	bl	8016550 <memcpy>
 8003840:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003844:	f002 ff04 	bl	8006650 <lowlayer_computeAndWritePulse>
				  break;
 8003848:	e07f      	b.n	800394a <StartDefaultTask+0x120a>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 800384a:	2303      	movs	r3, #3
 800384c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003850:	f102 021d 	add.w	r2, r2, #29
 8003854:	7013      	strb	r3, [r2, #0]
								detail_array[0] = status;
 8003856:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800385a:	f897 2fd4 	ldrb.w	r2, [r7, #4052]	; 0xfd4
 800385e:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003860:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003864:	6899      	ldr	r1, [r3, #8]
 8003866:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 800386a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4413      	add	r3, r2
 8003872:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	2301      	movs	r3, #1
 800387a:	2006      	movs	r0, #6
 800387c:	f7fe fdb4 	bl	80023e8 <commandRespond1>
 8003880:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003884:	f103 0304 	add.w	r3, r3, #4
 8003888:	6018      	str	r0, [r3, #0]
								total_respond_length += respond_lenght;
 800388a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003894:	f103 0304 	add.w	r3, r3, #4
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4413      	add	r3, r2
 800389c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80038a0:	6013      	str	r3, [r2, #0]
								  LOG_REPORT("STOP DUTY", __LINE__);
 80038a2:	f240 21a6 	movw	r1, #678	; 0x2a6
 80038a6:	4858      	ldr	r0, [pc, #352]	; (8003a08 <StartDefaultTask+0x12c8>)
 80038a8:	f7fe fe06 	bl	80024b8 <LOG_REPORT>
				  break;
 80038ac:	e04d      	b.n	800394a <StartDefaultTask+0x120a>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  lowlayer_readTruePosition(&positionNext);
 80038ae:	4855      	ldr	r0, [pc, #340]	; (8003a04 <StartDefaultTask+0x12c4>)
 80038b0:	f002 fd3e 	bl	8006330 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 80038b4:	4853      	ldr	r0, [pc, #332]	; (8003a04 <StartDefaultTask+0x12c4>)
 80038b6:	f001 fdff 	bl	80054b8 <kinematicForward>
						  current_duty_state = SCARA_DUTY_STATE_READY;
 80038ba:	2300      	movs	r3, #0
 80038bc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80038c0:	f102 021d 	add.w	r2, r2, #29
 80038c4:	7013      	strb	r3, [r2, #0]
						  positionNext.t = 0;
 80038c6:	494f      	ldr	r1, [pc, #316]	; (8003a04 <StartDefaultTask+0x12c4>)
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
						  positionNext.total_time = 0;
 80038d4:	494b      	ldr	r1, [pc, #300]	; (8003a04 <StartDefaultTask+0x12c4>)
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
						  positionNext.q = 0;
 80038e2:	4948      	ldr	r1, [pc, #288]	; (8003a04 <StartDefaultTask+0x12c4>)
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	e9c1 2300 	strd	r2, r3, [r1]
						  // Done Inform

					detail_array[0] = NONE;
 80038f0:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80038f4:	2225      	movs	r2, #37	; 0x25
 80038f6:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80038f8:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80038fc:	6899      	ldr	r1, [r3, #8]
 80038fe:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003902:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4413      	add	r3, r2
 800390a:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	2301      	movs	r3, #1
 8003912:	2005      	movs	r0, #5
 8003914:	f7fe fd68 	bl	80023e8 <commandRespond1>
 8003918:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800391c:	f103 0304 	add.w	r3, r3, #4
 8003920:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 8003922:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800392c:	f103 0304 	add.w	r3, r3, #4
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4413      	add	r3, r2
 8003934:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003938:	6013      	str	r3, [r2, #0]
					  }
				  break;
 800393a:	e006      	b.n	800394a <StartDefaultTask+0x120a>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 800393c:	f240 21be 	movw	r1, #702	; 0x2be
 8003940:	4832      	ldr	r0, [pc, #200]	; (8003a0c <StartDefaultTask+0x12cc>)
 8003942:	f7fe fdb9 	bl	80024b8 <LOG_REPORT>
						  while(1);
 8003946:	e7fe      	b.n	8003946 <StartDefaultTask+0x1206>
				  break;
 8003948:	bf00      	nop
					  }
				  }

			  }
			  break;
 800394a:	e005      	b.n	8003958 <StartDefaultTask+0x1218>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 800394c:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 8003950:	482f      	ldr	r0, [pc, #188]	; (8003a10 <StartDefaultTask+0x12d0>)
 8003952:	f7fe fdb1 	bl	80024b8 <LOG_REPORT>
				  while(1);
 8003956:	e7fe      	b.n	8003956 <StartDefaultTask+0x1216>
			  }
		  }
	  }
	  break;
 8003958:	f000 be20 	b.w	800459c <StartDefaultTask+0x1e5c>

	  case SCARA_METHOD_GCODE:
	  {
		  switch (current_duty_state)
 800395c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003960:	f103 031d 	add.w	r3, r3, #29
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b04      	cmp	r3, #4
 8003968:	f200 81ce 	bhi.w	8003d08 <StartDefaultTask+0x15c8>
 800396c:	a201      	add	r2, pc, #4	; (adr r2, 8003974 <StartDefaultTask+0x1234>)
 800396e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003972:	bf00      	nop
 8003974:	08003d09 	.word	0x08003d09
 8003978:	08003d09 	.word	0x08003d09
 800397c:	08003b19 	.word	0x08003b19
 8003980:	08003d09 	.word	0x08003d09
 8003984:	08003989 	.word	0x08003989
		  case SCARA_DUTY_STATE_INIT:{

		  }
		  break;
		  case SCARA_DUTY_STATE_OPERATION:{
			  update_gcode_point(&duty_cmd, run_point);
 8003988:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800398c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003990:	f102 0214 	add.w	r2, r2, #20
 8003994:	6811      	ldr	r1, [r2, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fff6 	bl	8004988 <update_gcode_point>
			  SCARA_StatusTypeDef status;
			  status = scaraInitDuty(duty_cmd);
 800399c:	f507 6660 	add.w	r6, r7, #3584	; 0xe00
 80039a0:	4668      	mov	r0, sp
 80039a2:	f106 0310 	add.w	r3, r6, #16
 80039a6:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80039aa:	4619      	mov	r1, r3
 80039ac:	f012 fdd0 	bl	8016550 <memcpy>
 80039b0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80039b4:	f003 f9e4 	bl	8006d80 <scaraInitDuty>
 80039b8:	4603      	mov	r3, r0
 80039ba:	f887 3fd6 	strb.w	r3, [r7, #4054]	; 0xfd6
			  if(status == SCARA_STATUS_OK){
 80039be:	f897 3fd6 	ldrb.w	r3, [r7, #4054]	; 0xfd6
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d17b      	bne.n	8003abe <StartDefaultTask+0x137e>
				  if(duty_cmd.trajec_type == DUTY_TRAJECTORY_LINEAR || duty_cmd.trajec_type == DUTY_TRAJECTORY_BEZIER_CURVE){
 80039c6:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80039ca:	7c1b      	ldrb	r3, [r3, #16]
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d004      	beq.n	80039da <StartDefaultTask+0x129a>
 80039d0:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80039d4:	7c1b      	ldrb	r3, [r3, #16]
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d11c      	bne.n	8003a14 <StartDefaultTask+0x12d4>
					  run_time = 0;
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	f04f 0300 	mov.w	r3, #0
 80039e2:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80039e6:	f101 0108 	add.w	r1, r1, #8
 80039ea:	e9c1 2300 	strd	r2, r3, [r1]
 80039ee:	e01f      	b.n	8003a30 <StartDefaultTask+0x12f0>
 80039f0:	40000000 	.word	0x40000000
 80039f4:	3f847ae1 	.word	0x3f847ae1
 80039f8:	0801c920 	.word	0x0801c920
 80039fc:	0801c92c 	.word	0x0801c92c
 8003a00:	20010af0 	.word	0x20010af0
 8003a04:	20010c70 	.word	0x20010c70
 8003a08:	0801c938 	.word	0x0801c938
 8003a0c:	0801c910 	.word	0x0801c910
 8003a10:	0801c944 	.word	0x0801c944
				  }else if(duty_cmd.trajec_type == DUTY_TRAJECTORY_GCODE_LSPB){
 8003a14:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003a18:	7c1b      	ldrb	r3, [r3, #16]
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d108      	bne.n	8003a30 <StartDefaultTask+0x12f0>
					  run_time = last_T;
 8003a1e:	4bc8      	ldr	r3, [pc, #800]	; (8003d40 <StartDefaultTask+0x1600>)
 8003a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a24:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003a28:	f101 0108 	add.w	r1, r1, #8
 8003a2c:	e9c1 2300 	strd	r2, r3, [r1]
				  }
				  current_duty_state = SCARA_DUTY_STATE_FLOW;
 8003a30:	2302      	movs	r3, #2
 8003a32:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003a36:	f102 021d 	add.w	r2, r2, #29
 8003a3a:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = (uint8_t)((run_point+1) * 100.0f / total_num_of_point );
 8003a3c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003a40:	f103 0314 	add.w	r3, r3, #20
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3301      	adds	r3, #1
 8003a48:	ee07 3a90 	vmov	s15, r3
 8003a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a50:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8003d44 <StartDefaultTask+0x1604>
 8003a54:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003a58:	4bbb      	ldr	r3, [pc, #748]	; (8003d48 <StartDefaultTask+0x1608>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	ee07 3a90 	vmov	s15, r3
 8003a60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a6c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003a70:	793b      	ldrb	r3, [r7, #4]
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003a78:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RDP_GCODE_PROCESS, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003a7a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003a7e:	6899      	ldr	r1, [r3, #8]
 8003a80:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003a84:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	2301      	movs	r3, #1
 8003a94:	200b      	movs	r0, #11
 8003a96:	f7fe fca7 	bl	80023e8 <commandRespond1>
 8003a9a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003a9e:	f103 0304 	add.w	r3, r3, #4
 8003aa2:	6018      	str	r0, [r3, #0]
				  total_respond_length += respond_lenght;
 8003aa4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003aae:	f103 0304 	add.w	r3, r3, #4
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	e02c      	b.n	8003b18 <StartDefaultTask+0x13d8>
			  }else{
				  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003ac4:	f102 021d 	add.w	r2, r2, #29
 8003ac8:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = status;
 8003aca:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003ace:	f897 2fd6 	ldrb.w	r2, [r7, #4054]	; 0xfd6
 8003ad2:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003ad4:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003ad8:	6899      	ldr	r1, [r3, #8]
 8003ada:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003ade:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	2301      	movs	r3, #1
 8003aee:	2007      	movs	r0, #7
 8003af0:	f7fe fc7a 	bl	80023e8 <commandRespond1>
 8003af4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003af8:	f103 0304 	add.w	r3, r3, #4
 8003afc:	6018      	str	r0, [r3, #0]
				  total_respond_length += respond_lenght;
 8003afe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003b08:	f103 0304 	add.w	r3, r3, #4
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003b14:	6013      	str	r3, [r2, #0]
				  break;
 8003b16:	e0f8      	b.n	8003d0a <StartDefaultTask+0x15ca>
			  }
		  }
		  //break;

		  case SCARA_DUTY_STATE_FLOW:{
			  run_time += T_SAMPLING;
 8003b18:	a387      	add	r3, pc, #540	; (adr r3, 8003d38 <StartDefaultTask+0x15f8>)
 8003b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1e:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003b22:	f101 0108 	add.w	r1, r1, #8
 8003b26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b2a:	f7fc fbaf 	bl	800028c <__adddf3>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003b36:	f101 0108 	add.w	r1, r1, #8
 8003b3a:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8003b3e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003b42:	f103 0308 	add.w	r3, r3, #8
 8003b46:	ed93 0b00 	vldr	d0, [r3]
 8003b4a:	f007 f8e3 	bl	800ad14 <scaraIsFinish>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d07e      	beq.n	8003c52 <StartDefaultTask+0x1512>
				if(run_point >= total_num_of_point-1){
 8003b54:	4b7c      	ldr	r3, [pc, #496]	; (8003d48 <StartDefaultTask+0x1608>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003b5e:	f102 0214 	add.w	r2, r2, #20
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	db0c      	blt.n	8003b82 <StartDefaultTask+0x1442>
					current_duty_state = SCARA_DUTY_STATE_READY;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003b6e:	f102 021d 	add.w	r2, r2, #29
 8003b72:	7013      	strb	r3, [r2, #0]
					lowlayer_readTruePosition(&positionNext);
 8003b74:	4875      	ldr	r0, [pc, #468]	; (8003d4c <StartDefaultTask+0x160c>)
 8003b76:	f002 fbdb 	bl	8006330 <lowlayer_readTruePosition>
				    kinematicForward(&positionNext);
 8003b7a:	4874      	ldr	r0, [pc, #464]	; (8003d4c <StartDefaultTask+0x160c>)
 8003b7c:	f001 fc9c 	bl	80054b8 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 8003b80:	e0c3      	b.n	8003d0a <StartDefaultTask+0x15ca>
					if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8003b82:	4b73      	ldr	r3, [pc, #460]	; (8003d50 <StartDefaultTask+0x1610>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b09      	cmp	r3, #9
 8003b88:	d11a      	bne.n	8003bc0 <StartDefaultTask+0x1480>
						accumulate_update(Gcode_Cor[run_point++]);
 8003b8a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003b8e:	f103 0314 	add.w	r3, r3, #20
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	1c53      	adds	r3, r2, #1
 8003b96:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003b9a:	f101 0114 	add.w	r1, r1, #20
 8003b9e:	600b      	str	r3, [r1, #0]
 8003ba0:	496c      	ldr	r1, [pc, #432]	; (8003d54 <StartDefaultTask+0x1614>)
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	466e      	mov	r6, sp
 8003bae:	f103 0210 	add.w	r2, r3, #16
 8003bb2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bb4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003bb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bba:	f001 fb8d 	bl	80052d8 <accumulate_update>
 8003bbe:	e025      	b.n	8003c0c <StartDefaultTask+0x14cc>
					}else if(Gcode_Cor[run_point].configure.type_define[0] == BEZIER_TYPE){
 8003bc0:	4964      	ldr	r1, [pc, #400]	; (8003d54 <StartDefaultTask+0x1614>)
 8003bc2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003bc6:	f103 0314 	add.w	r3, r3, #20
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	331a      	adds	r3, #26
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d10b      	bne.n	8003bf6 <StartDefaultTask+0x14b6>
						run_point+=2;
 8003bde:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003be2:	f103 0314 	add.w	r3, r3, #20
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3302      	adds	r3, #2
 8003bea:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003bee:	f102 0214 	add.w	r2, r2, #20
 8003bf2:	6013      	str	r3, [r2, #0]
 8003bf4:	e00a      	b.n	8003c0c <StartDefaultTask+0x14cc>
						run_point++;
 8003bf6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003bfa:	f103 0314 	add.w	r3, r3, #20
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3301      	adds	r3, #1
 8003c02:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003c06:	f102 0214 	add.w	r2, r2, #20
 8003c0a:	6013      	str	r3, [r2, #0]
					current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003c12:	f102 021d 	add.w	r2, r2, #29
 8003c16:	7013      	strb	r3, [r2, #0]
					positionNext.x = duty_cmd.target_point.x;
 8003c18:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003c1c:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8003c20:	494a      	ldr	r1, [pc, #296]	; (8003d4c <StartDefaultTask+0x160c>)
 8003c22:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
					positionNext.y = duty_cmd.target_point.y;
 8003c26:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003c2a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003c2e:	4947      	ldr	r1, [pc, #284]	; (8003d4c <StartDefaultTask+0x160c>)
 8003c30:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
					positionNext.z = duty_cmd.target_point.z;
 8003c34:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003c38:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003c3c:	4943      	ldr	r1, [pc, #268]	; (8003d4c <StartDefaultTask+0x160c>)
 8003c3e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
					positionNext.roll = duty_cmd.target_point.roll;
 8003c42:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003c46:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8003c4a:	4940      	ldr	r1, [pc, #256]	; (8003d4c <StartDefaultTask+0x160c>)
 8003c4c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		  break;
 8003c50:	e05b      	b.n	8003d0a <StartDefaultTask+0x15ca>
				SCARA_StatusTypeDef status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8003c52:	4e41      	ldr	r6, [pc, #260]	; (8003d58 <StartDefaultTask+0x1618>)
 8003c54:	4668      	mov	r0, sp
 8003c56:	f106 0308 	add.w	r3, r6, #8
 8003c5a:	22b8      	movs	r2, #184	; 0xb8
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	f012 fc77 	bl	8016550 <memcpy>
 8003c62:	e896 000c 	ldmia.w	r6, {r2, r3}
 8003c66:	4839      	ldr	r0, [pc, #228]	; (8003d4c <StartDefaultTask+0x160c>)
 8003c68:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003c6c:	f101 0108 	add.w	r1, r1, #8
 8003c70:	ed91 0b00 	vldr	d0, [r1]
 8003c74:	f006 f89c 	bl	8009db0 <scaraFlowDuty>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	f887 3fd5 	strb.w	r3, [r7, #4053]	; 0xfd5
				if ( SCARA_STATUS_OK == status) {
 8003c7e:	f897 3fd5 	ldrb.w	r3, [r7, #4053]	; 0xfd5
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d113      	bne.n	8003cae <StartDefaultTask+0x156e>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003c86:	4e34      	ldr	r6, [pc, #208]	; (8003d58 <StartDefaultTask+0x1618>)
 8003c88:	4a30      	ldr	r2, [pc, #192]	; (8003d4c <StartDefaultTask+0x160c>)
 8003c8a:	ab2c      	add	r3, sp, #176	; 0xb0
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	22c0      	movs	r2, #192	; 0xc0
 8003c90:	4618      	mov	r0, r3
 8003c92:	f012 fc5d 	bl	8016550 <memcpy>
 8003c96:	4668      	mov	r0, sp
 8003c98:	f106 0310 	add.w	r3, r6, #16
 8003c9c:	22b0      	movs	r2, #176	; 0xb0
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	f012 fc56 	bl	8016550 <memcpy>
 8003ca4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003ca8:	f002 fcd2 	bl	8006650 <lowlayer_computeAndWritePulse>
		  break;
 8003cac:	e02d      	b.n	8003d0a <StartDefaultTask+0x15ca>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003cb4:	f102 021d 	add.w	r2, r2, #29
 8003cb8:	7013      	strb	r3, [r2, #0]
					  detail_array[0] = status;
 8003cba:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003cbe:	f897 2fd5 	ldrb.w	r2, [r7, #4053]	; 0xfd5
 8003cc2:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003cc4:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003cc8:	6899      	ldr	r1, [r3, #8]
 8003cca:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003cce:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	2301      	movs	r3, #1
 8003cde:	2007      	movs	r0, #7
 8003ce0:	f7fe fb82 	bl	80023e8 <commandRespond1>
 8003ce4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003ce8:	f103 0304 	add.w	r3, r3, #4
 8003cec:	6018      	str	r0, [r3, #0]
					  total_respond_length += respond_lenght;
 8003cee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003cf8:	f103 0304 	add.w	r3, r3, #4
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003d04:	6013      	str	r3, [r2, #0]
		  break;
 8003d06:	e000      	b.n	8003d0a <StartDefaultTask+0x15ca>

		  }
		  break;
		  
		  default:
			  break;
 8003d08:	bf00      	nop
		  }
	  }

	  break;
 8003d0a:	f000 bc47 	b.w	800459c <StartDefaultTask+0x1e5c>
	  case SCARA_METHOD_TEST:
	  {
		  lowlayer_writePulse(test_value[0], test_value[1], test_value[2], test_value[3]);
 8003d0e:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8003d12:	f993 0000 	ldrsb.w	r0, [r3]
 8003d16:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8003d1a:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8003d1e:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8003d22:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8003d26:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8003d2a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003d2e:	f002 fe37 	bl	80069a0 <lowlayer_writePulse>
	  }
	  break;
 8003d32:	f000 bc33 	b.w	800459c <StartDefaultTask+0x1e5c>
 8003d36:	bf00      	nop
 8003d38:	40000000 	.word	0x40000000
 8003d3c:	3f847ae1 	.word	0x3f847ae1
 8003d40:	2000fd38 	.word	0x2000fd38
 8003d44:	42c80000 	.word	0x42c80000
 8003d48:	20008fa8 	.word	0x20008fa8
 8003d4c:	20010c70 	.word	0x20010c70
 8003d50:	200085c8 	.word	0x200085c8
 8003d54:	20008fc0 	.word	0x20008fc0
 8003d58:	20010af0 	.word	0x20010af0


	  case SCARA_METHOD_PICK_AND_PLACE:
	  {
		  switch(current_duty_state) {
 8003d5c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003d60:	f103 031d 	add.w	r3, r3, #29
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	f200 8416 	bhi.w	800459a <StartDefaultTask+0x1e5a>
 8003d6e:	a201      	add	r2, pc, #4	; (adr r2, 8003d74 <StartDefaultTask+0x1634>)
 8003d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d74:	08003d85 	.word	0x08003d85
 8003d78:	0800440d 	.word	0x0800440d
 8003d7c:	0800458b 	.word	0x0800458b
 8003d80:	08003dd5 	.word	0x08003dd5
		  case SCARA_DUTY_STATE_INIT:{
			  HAL_TIM_Base_Start(&htim2);
 8003d84:	4896      	ldr	r0, [pc, #600]	; (8003fe0 <StartDefaultTask+0x18a0>)
 8003d86:	f00a fc84 	bl	800e692 <HAL_TIM_Base_Start>
			  object_tail_pointer = 0;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003d90:	f102 0206 	add.w	r2, r2, #6
 8003d94:	7013      	strb	r3, [r2, #0]
			  object_head_pointer = 0;
 8003d96:	2300      	movs	r3, #0
 8003d98:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003d9c:	f102 0205 	add.w	r2, r2, #5
 8003da0:	7013      	strb	r3, [r2, #0]
			  operation_state = SCARA_MOVE_TO_TARGET;
 8003da2:	2300      	movs	r3, #0
 8003da4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003da8:	f102 0207 	add.w	r2, r2, #7
 8003dac:	7013      	strb	r3, [r2, #0]
			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003dae:	2304      	movs	r3, #4
 8003db0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003db4:	f102 021d 	add.w	r2, r2, #29
 8003db8:	7013      	strb	r3, [r2, #0]
			  duty_cmd.robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8003dba:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003dbe:	2204      	movs	r2, #4
 8003dc0:	705a      	strb	r2, [r3, #1]
			  duty_cmd.path_type = DUTY_PATH_LINE;
 8003dc2:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	739a      	strb	r2, [r3, #14]
			  duty_cmd.space_type = DUTY_SPACE_TASK;
 8003dca:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003dce:	2200      	movs	r2, #0
 8003dd0:	735a      	strb	r2, [r3, #13]
		  }
		  break;
 8003dd2:	e3df      	b.n	8004594 <StartDefaultTask+0x1e54>

		  case SCARA_DUTY_STATE_OPERATION:{
			  if(object_tail_pointer != object_head_pointer){
 8003dd4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003dd8:	f103 0306 	add.w	r3, r3, #6
 8003ddc:	781a      	ldrb	r2, [r3, #0]
 8003dde:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003de2:	f103 0305 	add.w	r3, r3, #5
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	f000 83d0 	beq.w	800458e <StartDefaultTask+0x1e4e>
				  switch(operation_state){
 8003dee:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003df2:	f103 0307 	add.w	r3, r3, #7
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b07      	cmp	r3, #7
 8003dfa:	f200 81f4 	bhi.w	80041e6 <StartDefaultTask+0x1aa6>
 8003dfe:	a201      	add	r2, pc, #4	; (adr r2, 8003e04 <StartDefaultTask+0x16c4>)
 8003e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e04:	08003e25 	.word	0x08003e25
 8003e08:	08003f4f 	.word	0x08003f4f
 8003e0c:	08003f87 	.word	0x08003f87
 8003e10:	08003fa1 	.word	0x08003fa1
 8003e14:	0800400d 	.word	0x0800400d
 8003e18:	0800415d 	.word	0x0800415d
 8003e1c:	08004195 	.word	0x08004195
 8003e20:	080041af 	.word	0x080041af
					  case SCARA_MOVE_TO_TARGET:{
						  double wait_time = 1e-6*((uint64_t)(GET_MICROS - Object[object_tail_pointer].timer_value)) + MOVE_TIME + PUT_DOWN_TIME_ON_OBJECT + ATTACH_TIME;
 8003e24:	4b6f      	ldr	r3, [pc, #444]	; (8003fe4 <StartDefaultTask+0x18a4>)
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	4b6f      	ldr	r3, [pc, #444]	; (8003fe8 <StartDefaultTask+0x18a8>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	496f      	ldr	r1, [pc, #444]	; (8003fec <StartDefaultTask+0x18ac>)
 8003e2e:	fba1 1303 	umull	r1, r3, r1, r3
 8003e32:	0c9b      	lsrs	r3, r3, #18
 8003e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f04f 0100 	mov.w	r1, #0
 8003e3e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003e42:	f103 0306 	add.w	r3, r3, #6
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003e4c:	f44f 76c4 	mov.w	r6, #392	; 0x188
 8003e50:	fb06 f303 	mul.w	r3, r6, r3
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5e:	1a84      	subs	r4, r0, r2
 8003e60:	eb61 0503 	sbc.w	r5, r1, r3
 8003e64:	4620      	mov	r0, r4
 8003e66:	4629      	mov	r1, r5
 8003e68:	f7fc fb90 	bl	800058c <__aeabi_ul2d>
 8003e6c:	a35a      	add	r3, pc, #360	; (adr r3, 8003fd8 <StartDefaultTask+0x1898>)
 8003e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e72:	f7fc fbc1 	bl	80005f8 <__aeabi_dmul>
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4b5c      	ldr	r3, [pc, #368]	; (8003ff0 <StartDefaultTask+0x18b0>)
 8003e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e84:	f7fc fa02 	bl	800028c <__adddf3>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4b58      	ldr	r3, [pc, #352]	; (8003ff4 <StartDefaultTask+0x18b4>)
 8003e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e96:	f7fc f9f9 	bl	800028c <__adddf3>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4b55      	ldr	r3, [pc, #340]	; (8003ff8 <StartDefaultTask+0x18b8>)
 8003ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea8:	f7fc f9f0 	bl	800028c <__adddf3>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	f607 71d8 	addw	r1, r7, #4056	; 0xfd8
 8003eb4:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.y -= wait_time*conveyor_speed;
 8003eb8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003ebc:	f103 0306 	add.w	r3, r3, #6
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003ec6:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003eca:	fb01 f303 	mul.w	r3, r1, r3
 8003ece:	4413      	add	r3, r2
 8003ed0:	3350      	adds	r3, #80	; 0x50
 8003ed2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003ed6:	4b49      	ldr	r3, [pc, #292]	; (8003ffc <StartDefaultTask+0x18bc>)
 8003ed8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003edc:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8003ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee4:	f7fc fb88 	bl	80005f8 <__aeabi_dmul>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003ef0:	f101 0106 	add.w	r1, r1, #6
 8003ef4:	780e      	ldrb	r6, [r1, #0]
 8003ef6:	4640      	mov	r0, r8
 8003ef8:	4649      	mov	r1, r9
 8003efa:	f7fc f9c5 	bl	8000288 <__aeabi_dsub>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8003f06:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003f0a:	fb01 f106 	mul.w	r1, r1, r6
 8003f0e:	4401      	add	r1, r0
 8003f10:	3150      	adds	r1, #80	; 0x50
 8003f12:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003f16:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003f1a:	f103 0306 	add.w	r3, r3, #6
 8003f1e:	7819      	ldrb	r1, [r3, #0]
 8003f20:	4b37      	ldr	r3, [pc, #220]	; (8004000 <StartDefaultTask+0x18c0>)
 8003f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f26:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8003f2a:	f44f 76c4 	mov.w	r6, #392	; 0x188
 8003f2e:	fb06 f101 	mul.w	r1, r6, r1
 8003f32:	4401      	add	r1, r0
 8003f34:	3158      	adds	r1, #88	; 0x58
 8003f36:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = MOVE_TIME;
 8003f3a:	4b2d      	ldr	r3, [pc, #180]	; (8003ff0 <StartDefaultTask+0x18b0>)
 8003f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f40:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003f44:	f101 0118 	add.w	r1, r1, #24
 8003f48:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003f4c:	e14b      	b.n	80041e6 <StartDefaultTask+0x1aa6>

					  case SCARA_MOVE_DOWN_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_OBJECT;
 8003f4e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003f52:	f103 0306 	add.w	r3, r3, #6
 8003f56:	7819      	ldrb	r1, [r3, #0]
 8003f58:	4b2a      	ldr	r3, [pc, #168]	; (8004004 <StartDefaultTask+0x18c4>)
 8003f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5e:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8003f62:	f44f 76c4 	mov.w	r6, #392	; 0x188
 8003f66:	fb06 f101 	mul.w	r1, r6, r1
 8003f6a:	4401      	add	r1, r0
 8003f6c:	3158      	adds	r1, #88	; 0x58
 8003f6e:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PUT_DOWN_TIME_ON_OBJECT;
 8003f72:	4b20      	ldr	r3, [pc, #128]	; (8003ff4 <StartDefaultTask+0x18b4>)
 8003f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f78:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003f7c:	f101 0118 	add.w	r1, r1, #24
 8003f80:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003f84:	e12f      	b.n	80041e6 <StartDefaultTask+0x1aa6>
					  case SCARA_ATTACH:{
						  state_time = ATTACH_TIME;
 8003f86:	4b1c      	ldr	r3, [pc, #112]	; (8003ff8 <StartDefaultTask+0x18b8>)
 8003f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8c:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003f90:	f101 0118 	add.w	r1, r1, #24
 8003f94:	e9c1 2300 	strd	r2, r3, [r1]
						  scaraSetOutput(1);
 8003f98:	2001      	movs	r0, #1
 8003f9a:	f006 fe29 	bl	800abf0 <scaraSetOutput>
					  }
					  break;
 8003f9e:	e122      	b.n	80041e6 <StartDefaultTask+0x1aa6>
					  case SCARA_MOVE_UP_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003fa0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003fa4:	f103 0306 	add.w	r3, r3, #6
 8003fa8:	7819      	ldrb	r1, [r3, #0]
 8003faa:	4b15      	ldr	r3, [pc, #84]	; (8004000 <StartDefaultTask+0x18c0>)
 8003fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb0:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8003fb4:	f44f 76c4 	mov.w	r6, #392	; 0x188
 8003fb8:	fb06 f101 	mul.w	r1, r6, r1
 8003fbc:	4401      	add	r1, r0
 8003fbe:	3158      	adds	r1, #88	; 0x58
 8003fc0:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PICK_UP_TIME_ON_OBJECT;
 8003fc4:	4b10      	ldr	r3, [pc, #64]	; (8004008 <StartDefaultTask+0x18c8>)
 8003fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fca:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003fce:	f101 0118 	add.w	r1, r1, #24
 8003fd2:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003fd6:	e106      	b.n	80041e6 <StartDefaultTask+0x1aa6>
 8003fd8:	a0b5ed8d 	.word	0xa0b5ed8d
 8003fdc:	3eb0c6f7 	.word	0x3eb0c6f7
 8003fe0:	20010d70 	.word	0x20010d70
 8003fe4:	e0001000 	.word	0xe0001000
 8003fe8:	2000408c 	.word	0x2000408c
 8003fec:	431bde83 	.word	0x431bde83
 8003ff0:	20000028 	.word	0x20000028
 8003ff4:	20000010 	.word	0x20000010
 8003ff8:	20000030 	.word	0x20000030
 8003ffc:	20000058 	.word	0x20000058
 8004000:	20000040 	.word	0x20000040
 8004004:	20000048 	.word	0x20000048
 8004008:	20000018 	.word	0x20000018
					  case SCARA_MOVE_TO_SLOT :{
						  ObjectType current_type = Object[object_tail_pointer].object_position.object_type;
 800400c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004010:	f103 0306 	add.w	r3, r3, #6
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800401a:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800401e:	fb01 f303 	mul.w	r3, r1, r3
 8004022:	4413      	add	r3, r2
 8004024:	33b8      	adds	r3, #184	; 0xb8
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	f887 3fe7 	strb.w	r3, [r7, #4071]	; 0xfe7
						  Object[object_tail_pointer].object_position.x = SLot_Cordinate[current_type].posx + Slot_Placement[current_type]*placement_spacing;
 800402c:	f897 2fe7 	ldrb.w	r2, [r7, #4071]	; 0xfe7
 8004030:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004034:	4613      	mov	r3, r2
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	4413      	add	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	440b      	add	r3, r1
 800403e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004042:	f897 2fe7 	ldrb.w	r2, [r7, #4071]	; 0xfe7
 8004046:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800404a:	3b08      	subs	r3, #8
 800404c:	5c9b      	ldrb	r3, [r3, r2]
 800404e:	4618      	mov	r0, r3
 8004050:	f7fc fa68 	bl	8000524 <__aeabi_i2d>
 8004054:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004058:	f103 0308 	add.w	r3, r3, #8
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	f7fc faca 	bl	80005f8 <__aeabi_dmul>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800406c:	f101 0106 	add.w	r1, r1, #6
 8004070:	780e      	ldrb	r6, [r1, #0]
 8004072:	4640      	mov	r0, r8
 8004074:	4649      	mov	r1, r9
 8004076:	f7fc f909 	bl	800028c <__adddf3>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8004082:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8004086:	fb01 f106 	mul.w	r1, r1, r6
 800408a:	4401      	add	r1, r0
 800408c:	3148      	adds	r1, #72	; 0x48
 800408e:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.y = SLot_Cordinate[current_type].posy;
 8004092:	f897 2fe7 	ldrb.w	r2, [r7, #4071]	; 0xfe7
 8004096:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800409a:	f103 0306 	add.w	r3, r3, #6
 800409e:	7819      	ldrb	r1, [r3, #0]
 80040a0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80040a4:	4613      	mov	r3, r2
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	4413      	add	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4403      	add	r3, r0
 80040ae:	3308      	adds	r3, #8
 80040b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b4:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 80040b8:	f44f 76c4 	mov.w	r6, #392	; 0x188
 80040bc:	fb06 f101 	mul.w	r1, r6, r1
 80040c0:	4401      	add	r1, r0
 80040c2:	3150      	adds	r1, #80	; 0x50
 80040c4:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.roll = SLot_Cordinate[current_type].roll;
 80040c8:	f897 2fe7 	ldrb.w	r2, [r7, #4071]	; 0xfe7
 80040cc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80040d0:	f103 0306 	add.w	r3, r3, #6
 80040d4:	7819      	ldrb	r1, [r3, #0]
 80040d6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80040da:	4613      	mov	r3, r2
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	4413      	add	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	4403      	add	r3, r0
 80040e4:	3310      	adds	r3, #16
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 80040ee:	f44f 76c4 	mov.w	r6, #392	; 0x188
 80040f2:	fb06 f101 	mul.w	r1, r6, r1
 80040f6:	4401      	add	r1, r0
 80040f8:	3160      	adds	r1, #96	; 0x60
 80040fa:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 80040fe:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004102:	f103 0306 	add.w	r3, r3, #6
 8004106:	7819      	ldrb	r1, [r3, #0]
 8004108:	4bb8      	ldr	r3, [pc, #736]	; (80043ec <StartDefaultTask+0x1cac>)
 800410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410e:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8004112:	f44f 76c4 	mov.w	r6, #392	; 0x188
 8004116:	fb06 f101 	mul.w	r1, r6, r1
 800411a:	4401      	add	r1, r0
 800411c:	3158      	adds	r1, #88	; 0x58
 800411e:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = MOVE_TIME;
 8004122:	4bb3      	ldr	r3, [pc, #716]	; (80043f0 <StartDefaultTask+0x1cb0>)
 8004124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004128:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800412c:	f101 0118 	add.w	r1, r1, #24
 8004130:	e9c1 2300 	strd	r2, r3, [r1]
						  Slot_Placement[current_type] = (Slot_Placement[current_type] + 1)%2;
 8004134:	f897 2fe7 	ldrb.w	r2, [r7, #4071]	; 0xfe7
 8004138:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800413c:	3b08      	subs	r3, #8
 800413e:	5c9b      	ldrb	r3, [r3, r2]
 8004140:	3301      	adds	r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	bfb8      	it	lt
 800414a:	425b      	neglt	r3, r3
 800414c:	f897 2fe7 	ldrb.w	r2, [r7, #4071]	; 0xfe7
 8004150:	b2d9      	uxtb	r1, r3
 8004152:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004156:	3b08      	subs	r3, #8
 8004158:	5499      	strb	r1, [r3, r2]
					  }
					  break;
 800415a:	e044      	b.n	80041e6 <StartDefaultTask+0x1aa6>
					  case SCARA_MOVE_DOWN_ON_SLOT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_SLOT;
 800415c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004160:	f103 0306 	add.w	r3, r3, #6
 8004164:	7819      	ldrb	r1, [r3, #0]
 8004166:	4ba3      	ldr	r3, [pc, #652]	; (80043f4 <StartDefaultTask+0x1cb4>)
 8004168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416c:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8004170:	f44f 76c4 	mov.w	r6, #392	; 0x188
 8004174:	fb06 f101 	mul.w	r1, r6, r1
 8004178:	4401      	add	r1, r0
 800417a:	3158      	adds	r1, #88	; 0x58
 800417c:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PUT_DOWN_TIME_ON_SLOT;
 8004180:	4b9d      	ldr	r3, [pc, #628]	; (80043f8 <StartDefaultTask+0x1cb8>)
 8004182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004186:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800418a:	f101 0118 	add.w	r1, r1, #24
 800418e:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8004192:	e028      	b.n	80041e6 <StartDefaultTask+0x1aa6>
					  case SCARA_RELEASE:{
						  state_time = DETACH_TIME;
 8004194:	4b99      	ldr	r3, [pc, #612]	; (80043fc <StartDefaultTask+0x1cbc>)
 8004196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419a:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800419e:	f101 0118 	add.w	r1, r1, #24
 80041a2:	e9c1 2300 	strd	r2, r3, [r1]
						  scaraSetOutput(0);
 80041a6:	2000      	movs	r0, #0
 80041a8:	f006 fd22 	bl	800abf0 <scaraSetOutput>
					  }
					  break;
 80041ac:	e01b      	b.n	80041e6 <StartDefaultTask+0x1aa6>
					  case SCARA_MOVE_UP_ON_SLOT:{
						  state_time = PICK_UP_TIME_ON_SLOT;
 80041ae:	4b94      	ldr	r3, [pc, #592]	; (8004400 <StartDefaultTask+0x1cc0>)
 80041b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b4:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80041b8:	f101 0118 	add.w	r1, r1, #24
 80041bc:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 80041c0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80041c4:	f103 0306 	add.w	r3, r3, #6
 80041c8:	7819      	ldrb	r1, [r3, #0]
 80041ca:	4b88      	ldr	r3, [pc, #544]	; (80043ec <StartDefaultTask+0x1cac>)
 80041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d0:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 80041d4:	f44f 76c4 	mov.w	r6, #392	; 0x188
 80041d8:	fb06 f101 	mul.w	r1, r6, r1
 80041dc:	4401      	add	r1, r0
 80041de:	3158      	adds	r1, #88	; 0x58
 80041e0:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 80041e4:	bf00      	nop
				  }
				  memcpy(&duty_cmd.target_point, &Object[object_tail_pointer].object_position, sizeof(SCARA_PositionTypeDef));
 80041e6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80041ea:	f103 0306 	add.w	r3, r3, #6
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80041f4:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80041f8:	fb01 f303 	mul.w	r3, r1, r3
 80041fc:	18d1      	adds	r1, r2, r3
 80041fe:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8004202:	3328      	adds	r3, #40	; 0x28
 8004204:	22c0      	movs	r2, #192	; 0xc0
 8004206:	4618      	mov	r0, r3
 8004208:	f012 f9a2 	bl	8016550 <memcpy>
				  duty_cmd.time_total = state_time;
 800420c:	f507 6160 	add.w	r1, r7, #3584	; 0xe00
 8004210:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004214:	f103 0318 	add.w	r3, r3, #24
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	e9c1 2308 	strd	r2, r3, [r1, #32]
				  SCARA_StatusTypeDef status1;
				  duty_cmd.v_factor = 0;
 8004220:	f507 6160 	add.w	r1, r7, #3584	; 0xe00
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
				  duty_cmd.coordinate_type = DUTY_COORDINATES_ABS;
 8004230:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8004234:	2200      	movs	r2, #0
 8004236:	731a      	strb	r2, [r3, #12]
				  if(operation_state == SCARA_ATTACH || operation_state == SCARA_RELEASE){
 8004238:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800423c:	f103 0307 	add.w	r3, r3, #7
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d006      	beq.n	8004254 <StartDefaultTask+0x1b14>
 8004246:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800424a:	f103 0307 	add.w	r3, r3, #7
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b06      	cmp	r3, #6
 8004252:	d106      	bne.n	8004262 <StartDefaultTask+0x1b22>
					  status1 = SCARA_STATUS_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800425a:	f102 0213 	add.w	r2, r2, #19
 800425e:	7013      	strb	r3, [r2, #0]
 8004260:	e065      	b.n	800432e <StartDefaultTask+0x1bee>
				  }else{
					  if(operation_state == SCARA_MOVE_DOWN_ON_OBJECT || operation_state == SCARA_MOVE_DOWN_ON_SLOT || operation_state == SCARA_MOVE_UP_ON_OBJECT || operation_state == SCARA_MOVE_UP_ON_SLOT){
 8004262:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004266:	f103 0307 	add.w	r3, r3, #7
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d014      	beq.n	800429a <StartDefaultTask+0x1b5a>
 8004270:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004274:	f103 0307 	add.w	r3, r3, #7
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b05      	cmp	r3, #5
 800427c:	d00d      	beq.n	800429a <StartDefaultTask+0x1b5a>
 800427e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004282:	f103 0307 	add.w	r3, r3, #7
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b03      	cmp	r3, #3
 800428a:	d006      	beq.n	800429a <StartDefaultTask+0x1b5a>
 800428c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004290:	f103 0307 	add.w	r3, r3, #7
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b07      	cmp	r3, #7
 8004298:	d110      	bne.n	80042bc <StartDefaultTask+0x1b7c>
						  duty_cmd.path_type = DUTY_PATH_LINE;
 800429a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800429e:	2200      	movs	r2, #0
 80042a0:	739a      	strb	r2, [r3, #14]
						  duty_cmd.space_type = DUTY_SPACE_TASK;
 80042a2:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80042a6:	2200      	movs	r2, #0
 80042a8:	735a      	strb	r2, [r3, #13]
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LINEAR;
 80042aa:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80042ae:	2202      	movs	r2, #2
 80042b0:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QT;
 80042b2:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80042b6:	2203      	movs	r2, #3
 80042b8:	745a      	strb	r2, [r3, #17]
 80042ba:	e024      	b.n	8004306 <StartDefaultTask+0x1bc6>
					  }else{
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 80042bc:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80042c0:	2201      	movs	r2, #1
 80042c2:	745a      	strb	r2, [r3, #17]
						  if(pnp_move_option == CMD_MOVE_LINE){
 80042c4:	4b4f      	ldr	r3, [pc, #316]	; (8004404 <StartDefaultTask+0x1cc4>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	d10c      	bne.n	80042e6 <StartDefaultTask+0x1ba6>
							  duty_cmd.path_type = DUTY_PATH_LINE;
 80042cc:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80042d0:	2200      	movs	r2, #0
 80042d2:	739a      	strb	r2, [r3, #14]
							  duty_cmd.space_type = DUTY_SPACE_TASK;
 80042d4:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80042d8:	2200      	movs	r2, #0
 80042da:	735a      	strb	r2, [r3, #13]
							  duty_cmd.trajec_type = DUTY_TRAJECTORY_SCURVE;
 80042dc:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80042e0:	2201      	movs	r2, #1
 80042e2:	741a      	strb	r2, [r3, #16]
 80042e4:	e00f      	b.n	8004306 <StartDefaultTask+0x1bc6>
						  }else if(pnp_move_option == CMD_MOVE_JOINT){
 80042e6:	4b47      	ldr	r3, [pc, #284]	; (8004404 <StartDefaultTask+0x1cc4>)
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b05      	cmp	r3, #5
 80042ec:	d10b      	bne.n	8004306 <StartDefaultTask+0x1bc6>
							  duty_cmd.joint_type = DUTY_JOINT_4DOF;
 80042ee:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80042f2:	2201      	movs	r2, #1
 80042f4:	73da      	strb	r2, [r3, #15]
							  duty_cmd.space_type = DUTY_SPACE_JOINT;
 80042f6:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80042fa:	2201      	movs	r2, #1
 80042fc:	735a      	strb	r2, [r3, #13]
							  duty_cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 80042fe:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8004302:	2200      	movs	r2, #0
 8004304:	741a      	strb	r2, [r3, #16]
						  }

					  }
					  status1 = scaraInitDuty(duty_cmd);
 8004306:	f507 6660 	add.w	r6, r7, #3584	; 0xe00
 800430a:	4668      	mov	r0, sp
 800430c:	f106 0310 	add.w	r3, r6, #16
 8004310:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8004314:	4619      	mov	r1, r3
 8004316:	f012 f91b 	bl	8016550 <memcpy>
 800431a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800431e:	f002 fd2f 	bl	8006d80 <scaraInitDuty>
 8004322:	4603      	mov	r3, r0
 8004324:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004328:	f102 0213 	add.w	r2, r2, #19
 800432c:	7013      	strb	r3, [r2, #0]
				  }
				  if ( SCARA_STATUS_OK == status1) {
 800432e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004332:	f103 0313 	add.w	r3, r3, #19
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d110      	bne.n	800435e <StartDefaultTask+0x1c1e>
				  	current_duty_state = SCARA_DUTY_STATE_FLOW;
 800433c:	2302      	movs	r3, #2
 800433e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004342:	f102 021d 	add.w	r2, r2, #29
 8004346:	7013      	strb	r3, [r2, #0]
				  	run_time = 0;
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8004354:	f101 0108 	add.w	r1, r1, #8
 8004358:	e9c1 2300 	strd	r2, r3, [r1]
 800435c:	e056      	b.n	800440c <StartDefaultTask+0x1ccc>
				  } else {
					object_tail_pointer = (object_tail_pointer+1)%8;
 800435e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004362:	f103 0306 	add.w	r3, r3, #6
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	3301      	adds	r3, #1
 800436a:	425a      	negs	r2, r3
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	f002 0207 	and.w	r2, r2, #7
 8004374:	bf58      	it	pl
 8004376:	4253      	negpl	r3, r2
 8004378:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800437c:	f102 0206 	add.w	r2, r2, #6
 8004380:	7013      	strb	r3, [r2, #0]
					operation_state = SCARA_MOVE_TO_TARGET;
 8004382:	2300      	movs	r3, #0
 8004384:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004388:	f102 0207 	add.w	r2, r2, #7
 800438c:	7013      	strb	r3, [r2, #0]
					detail_array[0] = status1;
 800438e:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8004392:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004396:	f102 0213 	add.w	r2, r2, #19
 800439a:	7812      	ldrb	r2, [r2, #0]
 800439c:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800439e:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80043a2:	6899      	ldr	r1, [r3, #8]
 80043a4:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80043a8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4413      	add	r3, r2
 80043b0:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	2301      	movs	r3, #1
 80043b8:	2007      	movs	r0, #7
 80043ba:	f7fe f815 	bl	80023e8 <commandRespond1>
 80043be:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80043c2:	f103 0304 	add.w	r3, r3, #4
 80043c6:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 80043c8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80043d2:	f103 0304 	add.w	r3, r3, #4
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4413      	add	r3, r2
 80043da:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80043de:	6013      	str	r3, [r2, #0]
					LOG_REPORT("INIT FAIL", __LINE__);
 80043e0:	f240 3195 	movw	r1, #917	; 0x395
 80043e4:	4808      	ldr	r0, [pc, #32]	; (8004408 <StartDefaultTask+0x1cc8>)
 80043e6:	f7fe f867 	bl	80024b8 <LOG_REPORT>
					break;
 80043ea:	e0d3      	b.n	8004594 <StartDefaultTask+0x1e54>
 80043ec:	20000040 	.word	0x20000040
 80043f0:	20000028 	.word	0x20000028
 80043f4:	20000050 	.word	0x20000050
 80043f8:	20000008 	.word	0x20000008
 80043fc:	20000038 	.word	0x20000038
 8004400:	20000020 	.word	0x20000020
 8004404:	20000064 	.word	0x20000064
 8004408:	0801c92c 	.word	0x0801c92c


		  case SCARA_DUTY_STATE_FLOW:{
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 800440c:	a37c      	add	r3, pc, #496	; (adr r3, 8004600 <StartDefaultTask+0x1ec0>)
 800440e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004412:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8004416:	f101 0108 	add.w	r1, r1, #8
 800441a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800441e:	f7fb ff35 	bl	800028c <__adddf3>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800442a:	f101 0108 	add.w	r1, r1, #8
 800442e:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8004432:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004436:	f103 0308 	add.w	r3, r3, #8
 800443a:	ed93 0b00 	vldr	d0, [r3]
 800443e:	f006 fc69 	bl	800ad14 <scaraIsFinish>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d037      	beq.n	80044b8 <StartDefaultTask+0x1d78>
				current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8004448:	2304      	movs	r3, #4
 800444a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800444e:	f102 021d 	add.w	r2, r2, #29
 8004452:	7013      	strb	r3, [r2, #0]
				if(operation_state == SCARA_MOVE_UP_ON_SLOT){
 8004454:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004458:	f103 0307 	add.w	r3, r3, #7
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b07      	cmp	r3, #7
 8004460:	d118      	bne.n	8004494 <StartDefaultTask+0x1d54>
					operation_state = SCARA_MOVE_TO_TARGET;
 8004462:	2300      	movs	r3, #0
 8004464:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004468:	f102 0207 	add.w	r2, r2, #7
 800446c:	7013      	strb	r3, [r2, #0]
					object_tail_pointer = (object_tail_pointer+1)%8;
 800446e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004472:	f103 0306 	add.w	r3, r3, #6
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	3301      	adds	r3, #1
 800447a:	425a      	negs	r2, r3
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	f002 0207 	and.w	r2, r2, #7
 8004484:	bf58      	it	pl
 8004486:	4253      	negpl	r3, r2
 8004488:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800448c:	f102 0206 	add.w	r2, r2, #6
 8004490:	7013      	strb	r3, [r2, #0]
 8004492:	e00a      	b.n	80044aa <StartDefaultTask+0x1d6a>
				}else{
					operation_state += 1; //next state
 8004494:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004498:	f103 0307 	add.w	r3, r3, #7
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	3301      	adds	r3, #1
 80044a0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80044a4:	f102 0207 	add.w	r2, r2, #7
 80044a8:	7013      	strb	r3, [r2, #0]
				}
				lowlayer_readTruePosition(&positionNext);
 80044aa:	4853      	ldr	r0, [pc, #332]	; (80045f8 <StartDefaultTask+0x1eb8>)
 80044ac:	f001 ff40 	bl	8006330 <lowlayer_readTruePosition>
				kinematicForward(&positionNext);
 80044b0:	4851      	ldr	r0, [pc, #324]	; (80045f8 <StartDefaultTask+0x1eb8>)
 80044b2:	f001 f801 	bl	80054b8 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 80044b6:	e06c      	b.n	8004592 <StartDefaultTask+0x1e52>
			  } else if(operation_state != SCARA_ATTACH && operation_state != SCARA_RELEASE){
 80044b8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80044bc:	f103 0307 	add.w	r3, r3, #7
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d065      	beq.n	8004592 <StartDefaultTask+0x1e52>
 80044c6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80044ca:	f103 0307 	add.w	r3, r3, #7
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b06      	cmp	r3, #6
 80044d2:	d05e      	beq.n	8004592 <StartDefaultTask+0x1e52>
				status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 80044d4:	4e49      	ldr	r6, [pc, #292]	; (80045fc <StartDefaultTask+0x1ebc>)
 80044d6:	4668      	mov	r0, sp
 80044d8:	f106 0308 	add.w	r3, r6, #8
 80044dc:	22b8      	movs	r2, #184	; 0xb8
 80044de:	4619      	mov	r1, r3
 80044e0:	f012 f836 	bl	8016550 <memcpy>
 80044e4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80044e8:	4843      	ldr	r0, [pc, #268]	; (80045f8 <StartDefaultTask+0x1eb8>)
 80044ea:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80044ee:	f101 0108 	add.w	r1, r1, #8
 80044f2:	ed91 0b00 	vldr	d0, [r1]
 80044f6:	f005 fc5b 	bl	8009db0 <scaraFlowDuty>
 80044fa:	4603      	mov	r3, r0
 80044fc:	f887 3fd7 	strb.w	r3, [r7, #4055]	; 0xfd7
				if ( SCARA_STATUS_OK == status) {
 8004500:	f897 3fd7 	ldrb.w	r3, [r7, #4055]	; 0xfd7
 8004504:	2b00      	cmp	r3, #0
 8004506:	d113      	bne.n	8004530 <StartDefaultTask+0x1df0>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8004508:	4e3c      	ldr	r6, [pc, #240]	; (80045fc <StartDefaultTask+0x1ebc>)
 800450a:	4a3b      	ldr	r2, [pc, #236]	; (80045f8 <StartDefaultTask+0x1eb8>)
 800450c:	ab2c      	add	r3, sp, #176	; 0xb0
 800450e:	4611      	mov	r1, r2
 8004510:	22c0      	movs	r2, #192	; 0xc0
 8004512:	4618      	mov	r0, r3
 8004514:	f012 f81c 	bl	8016550 <memcpy>
 8004518:	4668      	mov	r0, sp
 800451a:	f106 0310 	add.w	r3, r6, #16
 800451e:	22b0      	movs	r2, #176	; 0xb0
 8004520:	4619      	mov	r1, r3
 8004522:	f012 f815 	bl	8016550 <memcpy>
 8004526:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800452a:	f002 f891 	bl	8006650 <lowlayer_computeAndWritePulse>
		  break;
 800452e:	e030      	b.n	8004592 <StartDefaultTask+0x1e52>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8004530:	2303      	movs	r3, #3
 8004532:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004536:	f102 021d 	add.w	r2, r2, #29
 800453a:	7013      	strb	r3, [r2, #0]
					  detail_array[0] = status;
 800453c:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8004540:	f897 2fd7 	ldrb.w	r2, [r7, #4055]	; 0xfd7
 8004544:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8004546:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800454a:	6899      	ldr	r1, [r3, #8]
 800454c:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8004550:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4413      	add	r3, r2
 8004558:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	2301      	movs	r3, #1
 8004560:	2007      	movs	r0, #7
 8004562:	f7fd ff41 	bl	80023e8 <commandRespond1>
 8004566:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800456a:	f103 0304 	add.w	r3, r3, #4
 800456e:	6018      	str	r0, [r3, #0]
					  total_respond_length += respond_lenght;
 8004570:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800457a:	f103 0304 	add.w	r3, r3, #4
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4413      	add	r3, r2
 8004582:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8004586:	6013      	str	r3, [r2, #0]
		  break;
 8004588:	e003      	b.n	8004592 <StartDefaultTask+0x1e52>

		  case SCARA_DUTY_STATE_FINISH:

			  //error
			  //free(Object);
		  break;
 800458a:	bf00      	nop
 800458c:	e005      	b.n	800459a <StartDefaultTask+0x1e5a>
				  break;
 800458e:	bf00      	nop
 8004590:	e003      	b.n	800459a <StartDefaultTask+0x1e5a>
		  break;
 8004592:	bf00      	nop
		  }
	  }
	  break;
 8004594:	e001      	b.n	800459a <StartDefaultTask+0x1e5a>
	  break;
 8004596:	bf00      	nop
 8004598:	e000      	b.n	800459c <StartDefaultTask+0x1e5c>
	  break;
 800459a:	bf00      	nop

	  }
	  }

	  /* 4--- Send to PC Phase ---*/
	if(total_respond_length > 0){
 800459c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	dd09      	ble.n	80045ba <StartDefaultTask+0x1e7a>
		CDC_Transmit_FS(respond, total_respond_length);
 80045a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 80045b2:	4611      	mov	r1, r2
 80045b4:	4618      	mov	r0, r3
 80045b6:	f011 fb4d 	bl	8015c54 <CDC_Transmit_FS>
	}

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 80045ba:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80045be:	f103 031f 	add.w	r3, r3, #31
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f006 fb45 	bl	800ac54 <scaraSetMethod>
	  scaraSetMode(current_mode);
 80045ca:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80045ce:	f103 031e 	add.w	r3, r3, #30
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f006 fb2d 	bl	800ac34 <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 80045da:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80045de:	f103 031d 	add.w	r3, r3, #29
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f006 fb15 	bl	800ac14 <scaraSetDutyState>

    osDelay(1);
 80045ea:	2001      	movs	r0, #1
 80045ec:	f00e fc11 	bl	8012e12 <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 80045f0:	f7fe b93a 	b.w	8002868 <StartDefaultTask+0x128>
 80045f4:	f3af 8000 	nop.w
 80045f8:	20010c70 	.word	0x20010c70
 80045fc:	20010af0 	.word	0x20010af0
 8004600:	40000000 	.word	0x40000000
 8004604:	3f847ae1 	.word	0x3f847ae1

08004608 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 8004608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800460a:	f2ad 5dd4 	subw	sp, sp, #1492	; 0x5d4
 800460e:	af70      	add	r7, sp, #448	; 0x1c0
 8004610:	1d3b      	adds	r3, r7, #4
 8004612:	6018      	str	r0, [r3, #0]
	int32_t				respond_lenght;
	//int32_t				message_lenght;
	int32_t 			detail_length;

	// Default value
	duty_cmd.key_speed = 1;
 8004614:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8004618:	2201      	movs	r2, #1
 800461a:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 800461c:	4964      	ldr	r1, [pc, #400]	; (80047b0 <Start_USB_RX_Task+0x1a8>)
 800461e:	4865      	ldr	r0, [pc, #404]	; (80047b4 <Start_USB_RX_Task+0x1ac>)
 8004620:	f001 fbef 	bl	8005e02 <ringBuff_DistanceOf>
 8004624:	f8c7 0408 	str.w	r0, [r7, #1032]	; 0x408
		  if (distance != -1) {
 8004628:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004630:	d0f4      	beq.n	800461c <Start_USB_RX_Task+0x14>
 8004632:	466b      	mov	r3, sp
 8004634:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 8004636:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800463a:	1c5c      	adds	r4, r3, #1
 800463c:	1e63      	subs	r3, r4, #1
 800463e:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8004642:	4623      	mov	r3, r4
 8004644:	4618      	mov	r0, r3
 8004646:	f04f 0100 	mov.w	r1, #0
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	00cb      	lsls	r3, r1, #3
 8004654:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004658:	00c2      	lsls	r2, r0, #3
 800465a:	4623      	mov	r3, r4
 800465c:	4618      	mov	r0, r3
 800465e:	f04f 0100 	mov.w	r1, #0
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	00cb      	lsls	r3, r1, #3
 800466c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004670:	00c2      	lsls	r2, r0, #3
 8004672:	4623      	mov	r3, r4
 8004674:	3307      	adds	r3, #7
 8004676:	08db      	lsrs	r3, r3, #3
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	ebad 0d03 	sub.w	sp, sp, r3
 800467e:	ab70      	add	r3, sp, #448	; 0x1c0
 8004680:	3300      	adds	r3, #0
 8004682:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 8004686:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 800468a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800468e:	3301      	adds	r3, #1
 8004690:	461a      	mov	r2, r3
 8004692:	4848      	ldr	r0, [pc, #288]	; (80047b4 <Start_USB_RX_Task+0x1ac>)
 8004694:	f001 fb94 	bl	8005dc0 <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1, data_packet);
 8004698:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
 800469c:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80046a0:	3301      	adds	r3, #1
 80046a2:	f107 020c 	add.w	r2, r7, #12
 80046a6:	4619      	mov	r1, r3
 80046a8:	f7fd ff4c 	bl	8002544 <unPackPayload>
 80046ac:	f8c7 03fc 	str.w	r0, [r7, #1020]	; 0x3fc

			  if( -1 == ret) {
 80046b0:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b8:	d077      	beq.n	80047aa <Start_USB_RX_Task+0x1a2>
				  //LOG_REPORT("UNPACK FAIL", __LINE__);
			  } else {
				  //LOG_REPORT((char*) temp, __LINE__);
				  cmd_type = packetRead(data_packet, ret, &id_command, &duty_cmd);
 80046ba:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80046be:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 80046c2:	f107 000c 	add.w	r0, r7, #12
 80046c6:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 80046ca:	f7fc fc91 	bl	8000ff0 <packetRead>
 80046ce:	4603      	mov	r3, r0
 80046d0:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb
				  memset(detail, 0, sizeof(detail));
 80046d4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80046d8:	2287      	movs	r2, #135	; 0x87
 80046da:	2100      	movs	r1, #0
 80046dc:	4618      	mov	r0, r3
 80046de:	f011 ff5f 	bl	80165a0 <memset>
				  detail_length = 0;
 80046e2:	f107 0308 	add.w	r3, r7, #8
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
				  rpd_type = commandReply(cmd_type, duty_cmd, detail, &detail_length);
 80046ea:	f507 740a 	add.w	r4, r7, #552	; 0x228
 80046ee:	f897 53fb 	ldrb.w	r5, [r7, #1019]	; 0x3fb
 80046f2:	f107 0308 	add.w	r3, r7, #8
 80046f6:	936f      	str	r3, [sp, #444]	; 0x1bc
 80046f8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80046fc:	936e      	str	r3, [sp, #440]	; 0x1b8
 80046fe:	4668      	mov	r0, sp
 8004700:	f104 0308 	add.w	r3, r4, #8
 8004704:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8004708:	4619      	mov	r1, r3
 800470a:	f011 ff21 	bl	8016550 <memcpy>
 800470e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8004712:	4628      	mov	r0, r5
 8004714:	f7fd fcdc 	bl	80020d0 <commandReply>
 8004718:	4603      	mov	r3, r0
 800471a:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
				  //LOG_REPORT("tail", usb_rx_ringbuff.tail);
				  if ( RPD_DUTY == rpd_type) {
 800471e:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8004722:	2b09      	cmp	r3, #9
 8004724:	d123      	bne.n	800476e <Start_USB_RX_Task+0x166>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 8004726:	2300      	movs	r3, #0
 8004728:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
					  // Wait allocate
					  while (dataMail == NULL) {
 800472c:	e008      	b.n	8004740 <Start_USB_RX_Task+0x138>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 800472e:	4b22      	ldr	r3, [pc, #136]	; (80047b8 <Start_USB_RX_Task+0x1b0>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f04f 31ff 	mov.w	r1, #4294967295
 8004736:	4618      	mov	r0, r3
 8004738:	f00e fd7c 	bl	8013234 <osMailAlloc>
 800473c:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
					  while (dataMail == NULL) {
 8004740:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f2      	beq.n	800472e <Start_USB_RX_Task+0x126>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 8004748:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800474c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8004750:	4619      	mov	r1, r3
 8004752:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 8004756:	f011 fefb 	bl	8016550 <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 800475a:	4b17      	ldr	r3, [pc, #92]	; (80047b8 <Start_USB_RX_Task+0x1b0>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 8004762:	4618      	mov	r0, r3
 8004764:	f00e fd7c 	bl	8013260 <osMailPut>
 8004768:	f8c7 03f0 	str.w	r0, [r7, #1008]	; 0x3f0
 800476c:	e01d      	b.n	80047aa <Start_USB_RX_Task+0x1a2>
						  //LOG_REPORT("DUTY SEND", __LINE__);
					  }

				//   }else if( RPD_POSITION == rpd_type) { 
				// 	  CDC_Transmit_FS(detail, 84);
				  }else if(rpd_type == RPD_TRANSFER){
 800476e:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8004772:	2b0a      	cmp	r3, #10
 8004774:	d019      	beq.n	80047aa <Start_USB_RX_Task+0x1a2>

				  }else {
					  respond_lenght	= commandRespond1(rpd_type, cmd_type,
 8004776:	f897 13fb 	ldrb.w	r1, [r7, #1019]	; 0x3fb
 800477a:	f107 0308 	add.w	r3, r7, #8
 800477e:	681c      	ldr	r4, [r3, #0]
 8004780:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8004784:	f897 03fa 	ldrb.w	r0, [r7, #1018]	; 0x3fa
 8004788:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	4623      	mov	r3, r4
 8004790:	f7fd fe2a 	bl	80023e8 <commandRespond1>
 8004794:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
							  	  	  	  (char *)detail, detail_length,
										  (char *)respond);
					  CDC_Transmit_FS(respond, respond_lenght);
 8004798:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800479c:	b29a      	uxth	r2, r3
 800479e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80047a2:	4611      	mov	r1, r2
 80047a4:	4618      	mov	r0, r3
 80047a6:	f011 fa55 	bl	8015c54 <CDC_Transmit_FS>
 80047aa:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 80047ac:	e736      	b.n	800461c <Start_USB_RX_Task+0x14>
 80047ae:	bf00      	nop
 80047b0:	0801c9f0 	.word	0x0801c9f0
 80047b4:	20000068 	.word	0x20000068
 80047b8:	2000fe6c 	.word	0x2000fe6c

080047bc <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	b292      	uxth	r2, r2
 80047cc:	801a      	strh	r2, [r3, #0]
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	b29b      	uxth	r3, r3
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80047fa:	1d3b      	adds	r3, r7, #4
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	605a      	str	r2, [r3, #4]
 8004802:	609a      	str	r2, [r3, #8]
 8004804:	60da      	str	r2, [r3, #12]
 8004806:	611a      	str	r2, [r3, #16]
 8004808:	615a      	str	r2, [r3, #20]
 800480a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 800480c:	4b27      	ldr	r3, [pc, #156]	; (80048ac <MX_FSMC_Init+0xb8>)
 800480e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8004812:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004814:	4b25      	ldr	r3, [pc, #148]	; (80048ac <MX_FSMC_Init+0xb8>)
 8004816:	4a26      	ldr	r2, [pc, #152]	; (80048b0 <MX_FSMC_Init+0xbc>)
 8004818:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800481a:	4b24      	ldr	r3, [pc, #144]	; (80048ac <MX_FSMC_Init+0xb8>)
 800481c:	2200      	movs	r2, #0
 800481e:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8004820:	4b22      	ldr	r3, [pc, #136]	; (80048ac <MX_FSMC_Init+0xb8>)
 8004822:	2202      	movs	r2, #2
 8004824:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8004826:	4b21      	ldr	r3, [pc, #132]	; (80048ac <MX_FSMC_Init+0xb8>)
 8004828:	2208      	movs	r2, #8
 800482a:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800482c:	4b1f      	ldr	r3, [pc, #124]	; (80048ac <MX_FSMC_Init+0xb8>)
 800482e:	2210      	movs	r2, #16
 8004830:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004832:	4b1e      	ldr	r3, [pc, #120]	; (80048ac <MX_FSMC_Init+0xb8>)
 8004834:	2200      	movs	r2, #0
 8004836:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004838:	4b1c      	ldr	r3, [pc, #112]	; (80048ac <MX_FSMC_Init+0xb8>)
 800483a:	2200      	movs	r2, #0
 800483c:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800483e:	4b1b      	ldr	r3, [pc, #108]	; (80048ac <MX_FSMC_Init+0xb8>)
 8004840:	2200      	movs	r2, #0
 8004842:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004844:	4b19      	ldr	r3, [pc, #100]	; (80048ac <MX_FSMC_Init+0xb8>)
 8004846:	2200      	movs	r2, #0
 8004848:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800484a:	4b18      	ldr	r3, [pc, #96]	; (80048ac <MX_FSMC_Init+0xb8>)
 800484c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004850:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8004852:	4b16      	ldr	r3, [pc, #88]	; (80048ac <MX_FSMC_Init+0xb8>)
 8004854:	2200      	movs	r2, #0
 8004856:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8004858:	4b14      	ldr	r3, [pc, #80]	; (80048ac <MX_FSMC_Init+0xb8>)
 800485a:	2200      	movs	r2, #0
 800485c:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800485e:	4b13      	ldr	r3, [pc, #76]	; (80048ac <MX_FSMC_Init+0xb8>)
 8004860:	2200      	movs	r2, #0
 8004862:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004864:	4b11      	ldr	r3, [pc, #68]	; (80048ac <MX_FSMC_Init+0xb8>)
 8004866:	2200      	movs	r2, #0
 8004868:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800486a:	4b10      	ldr	r3, [pc, #64]	; (80048ac <MX_FSMC_Init+0xb8>)
 800486c:	2200      	movs	r2, #0
 800486e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8004870:	230f      	movs	r3, #15
 8004872:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8004874:	230f      	movs	r3, #15
 8004876:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8004878:	23ff      	movs	r3, #255	; 0xff
 800487a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800487c:	230f      	movs	r3, #15
 800487e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8004880:	2310      	movs	r3, #16
 8004882:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8004884:	2311      	movs	r3, #17
 8004886:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8004888:	2300      	movs	r3, #0
 800488a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 800488c:	1d3b      	adds	r3, r7, #4
 800488e:	2200      	movs	r2, #0
 8004890:	4619      	mov	r1, r3
 8004892:	4806      	ldr	r0, [pc, #24]	; (80048ac <MX_FSMC_Init+0xb8>)
 8004894:	f008 f85a 	bl	800c94c <HAL_NOR_Init>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 800489e:	f001 f9d5 	bl	8005c4c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80048a2:	bf00      	nop
 80048a4:	3720      	adds	r7, #32
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	2000fe78 	.word	0x2000fe78
 80048b0:	a0000104 	.word	0xa0000104

080048b4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ba:	1d3b      	adds	r3, r7, #4
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	605a      	str	r2, [r3, #4]
 80048c2:	609a      	str	r2, [r3, #8]
 80048c4:	60da      	str	r2, [r3, #12]
 80048c6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80048c8:	4b24      	ldr	r3, [pc, #144]	; (800495c <HAL_FSMC_MspInit+0xa8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d140      	bne.n	8004952 <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 80048d0:	4b22      	ldr	r3, [pc, #136]	; (800495c <HAL_FSMC_MspInit+0xa8>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80048d6:	2300      	movs	r3, #0
 80048d8:	603b      	str	r3, [r7, #0]
 80048da:	4b21      	ldr	r3, [pc, #132]	; (8004960 <HAL_FSMC_MspInit+0xac>)
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	4a20      	ldr	r2, [pc, #128]	; (8004960 <HAL_FSMC_MspInit+0xac>)
 80048e0:	f043 0301 	orr.w	r3, r3, #1
 80048e4:	6393      	str	r3, [r2, #56]	; 0x38
 80048e6:	4b1e      	ldr	r3, [pc, #120]	; (8004960 <HAL_FSMC_MspInit+0xac>)
 80048e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80048f2:	f64f 7380 	movw	r3, #65408	; 0xff80
 80048f6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048f8:	2302      	movs	r3, #2
 80048fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048fc:	2300      	movs	r3, #0
 80048fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004900:	2303      	movs	r3, #3
 8004902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004904:	230c      	movs	r3, #12
 8004906:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004908:	1d3b      	adds	r3, r7, #4
 800490a:	4619      	mov	r1, r3
 800490c:	4815      	ldr	r0, [pc, #84]	; (8004964 <HAL_FSMC_MspInit+0xb0>)
 800490e:	f007 fe67 	bl	800c5e0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8004912:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8004916:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004918:	2302      	movs	r3, #2
 800491a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491c:	2300      	movs	r3, #0
 800491e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004920:	2303      	movs	r3, #3
 8004922:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004924:	230c      	movs	r3, #12
 8004926:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004928:	1d3b      	adds	r3, r7, #4
 800492a:	4619      	mov	r1, r3
 800492c:	480e      	ldr	r0, [pc, #56]	; (8004968 <HAL_FSMC_MspInit+0xb4>)
 800492e:	f007 fe57 	bl	800c5e0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004932:	2380      	movs	r3, #128	; 0x80
 8004934:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004936:	2302      	movs	r3, #2
 8004938:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800493e:	2303      	movs	r3, #3
 8004940:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004942:	230c      	movs	r3, #12
 8004944:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004946:	1d3b      	adds	r3, r7, #4
 8004948:	4619      	mov	r1, r3
 800494a:	4808      	ldr	r0, [pc, #32]	; (800496c <HAL_FSMC_MspInit+0xb8>)
 800494c:	f007 fe48 	bl	800c5e0 <HAL_GPIO_Init>
 8004950:	e000      	b.n	8004954 <HAL_FSMC_MspInit+0xa0>
    return;
 8004952:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	2000485c 	.word	0x2000485c
 8004960:	40023800 	.word	0x40023800
 8004964:	40021000 	.word	0x40021000
 8004968:	40020c00 	.word	0x40020c00
 800496c:	40020400 	.word	0x40020400

08004970 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8004978:	f7ff ff9c 	bl	80048b4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 800497c:	bf00      	nop
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	0000      	movs	r0, r0
	...

08004988 <update_gcode_point>:
extern int16_t 							pre_clutch_index;
extern Gcode_Packet_Command_TypeDef 	pre_height;
extern Gcode_Packet_Command_TypeDef 	Gcode_Mode;
extern SCARA_Gcode_Cor_TypeDef			Gcode_Cor[1000];
void update_gcode_point(DUTY_Command_TypeDef *duty_cmd, int32_t run_point)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
	if(Gcode_Cor[run_point].configure.type_define[0] == BEZIER_TYPE){
 8004992:	49b3      	ldr	r1, [pc, #716]	; (8004c60 <update_gcode_point+0x2d8>)
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	4613      	mov	r3, r2
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	1a9b      	subs	r3, r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	440b      	add	r3, r1
 80049a0:	331a      	adds	r3, #26
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	f040 816f 	bne.w	8004c88 <update_gcode_point+0x300>
		duty_cmd->target_point.x = (double)Gcode_Cor[run_point + 1].X * COR_INVERSE_SCALE + offset_x;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	49ac      	ldr	r1, [pc, #688]	; (8004c60 <update_gcode_point+0x2d8>)
 80049b0:	4613      	mov	r3, r2
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	1a9b      	subs	r3, r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fb fdb1 	bl	8000524 <__aeabi_i2d>
 80049c2:	a3a5      	add	r3, pc, #660	; (adr r3, 8004c58 <update_gcode_point+0x2d0>)
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	f7fb fe16 	bl	80005f8 <__aeabi_dmul>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4610      	mov	r0, r2
 80049d2:	4619      	mov	r1, r3
 80049d4:	4ba3      	ldr	r3, [pc, #652]	; (8004c64 <update_gcode_point+0x2dc>)
 80049d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049da:	f7fb fc57 	bl	800028c <__adddf3>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		duty_cmd->target_point.y = (double)Gcode_Cor[run_point + 1].Y * COR_INVERSE_SCALE + offset_y;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	499c      	ldr	r1, [pc, #624]	; (8004c60 <update_gcode_point+0x2d8>)
 80049ee:	4613      	mov	r3, r2
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	3304      	adds	r3, #4
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fb fd91 	bl	8000524 <__aeabi_i2d>
 8004a02:	a395      	add	r3, pc, #596	; (adr r3, 8004c58 <update_gcode_point+0x2d0>)
 8004a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a08:	f7fb fdf6 	bl	80005f8 <__aeabi_dmul>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4610      	mov	r0, r2
 8004a12:	4619      	mov	r1, r3
 8004a14:	4b94      	ldr	r3, [pc, #592]	; (8004c68 <update_gcode_point+0x2e0>)
 8004a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1a:	f7fb fc37 	bl	800028c <__adddf3>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
		if(Gcode_Cor[run_point].configure.type_define[1] == UP_Z){
 8004a28:	498d      	ldr	r1, [pc, #564]	; (8004c60 <update_gcode_point+0x2d8>)
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	1a9b      	subs	r3, r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	331b      	adds	r3, #27
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b06      	cmp	r3, #6
 8004a3c:	d10d      	bne.n	8004a5a <update_gcode_point+0xd2>
		  duty_cmd->target_point.z = up_z_height + offset_z;
 8004a3e:	4b8b      	ldr	r3, [pc, #556]	; (8004c6c <update_gcode_point+0x2e4>)
 8004a40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a44:	4b8a      	ldr	r3, [pc, #552]	; (8004c70 <update_gcode_point+0x2e8>)
 8004a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4a:	f7fb fc1f 	bl	800028c <__adddf3>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8004a58:	e00c      	b.n	8004a74 <update_gcode_point+0xec>
		}else{
		  duty_cmd->target_point.z = down_z_height + offset_z;
 8004a5a:	4b86      	ldr	r3, [pc, #536]	; (8004c74 <update_gcode_point+0x2ec>)
 8004a5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a60:	4b83      	ldr	r3, [pc, #524]	; (8004c70 <update_gcode_point+0x2e8>)
 8004a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a66:	f7fb fc11 	bl	800028c <__adddf3>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	6879      	ldr	r1, [r7, #4]
 8004a70:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
		}
		duty_cmd->target_point.roll = roll_angle;
 8004a74:	4b80      	ldr	r3, [pc, #512]	; (8004c78 <update_gcode_point+0x2f0>)
 8004a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
		duty_cmd->space_type = DUTY_SPACE_TASK;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	735a      	strb	r2, [r3, #13]
		duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	731a      	strb	r2, [r3, #12]
		duty_cmd->path_type = DUTY_PATH_BEZIER_CURVE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	739a      	strb	r2, [r3, #14]
		duty_cmd->trajec_type = DUTY_TRAJECTORY_BEZIER_CURVE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2204      	movs	r2, #4
 8004a96:	741a      	strb	r2, [r3, #16]
		double feedrate = (double)Gcode_Cor[run_point].F * COR_INVERSE_SCALE;
 8004a98:	4971      	ldr	r1, [pc, #452]	; (8004c60 <update_gcode_point+0x2d8>)
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	1a9b      	subs	r3, r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	3308      	adds	r3, #8
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fb fd3a 	bl	8000524 <__aeabi_i2d>
 8004ab0:	a369      	add	r3, pc, #420	; (adr r3, 8004c58 <update_gcode_point+0x2d0>)
 8004ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab6:	f7fb fd9f 	bl	80005f8 <__aeabi_dmul>
 8004aba:	4602      	mov	r2, r0
 8004abc:	460b      	mov	r3, r1
 8004abe:	e9c7 2304 	strd	r2, r3, [r7, #16]
		double distance = (double)Gcode_Cor[run_point].I * COR_INVERSE_SCALE;
 8004ac2:	4967      	ldr	r1, [pc, #412]	; (8004c60 <update_gcode_point+0x2d8>)
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	1a9b      	subs	r3, r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	440b      	add	r3, r1
 8004ad0:	330c      	adds	r3, #12
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fb fd25 	bl	8000524 <__aeabi_i2d>
 8004ada:	a35f      	add	r3, pc, #380	; (adr r3, 8004c58 <update_gcode_point+0x2d0>)
 8004adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae0:	f7fb fd8a 	bl	80005f8 <__aeabi_dmul>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	e9c7 2302 	strd	r2, r3, [r7, #8]
		duty_cmd->time_total = distance/feedrate;
 8004aec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004af0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004af4:	f7fb feaa 	bl	800084c <__aeabi_ddiv>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	6879      	ldr	r1, [r7, #4]
 8004afe:	e9c1 2308 	strd	r2, r3, [r1, #32]
		bezier_x_coeffs[0] = (double)Gcode_Cor[run_point-1].X * COR_INVERSE_SCALE + offset_x;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	1e5a      	subs	r2, r3, #1
 8004b06:	4956      	ldr	r1, [pc, #344]	; (8004c60 <update_gcode_point+0x2d8>)
 8004b08:	4613      	mov	r3, r2
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fb fd05 	bl	8000524 <__aeabi_i2d>
 8004b1a:	a34f      	add	r3, pc, #316	; (adr r3, 8004c58 <update_gcode_point+0x2d0>)
 8004b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b20:	f7fb fd6a 	bl	80005f8 <__aeabi_dmul>
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	4610      	mov	r0, r2
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4b4d      	ldr	r3, [pc, #308]	; (8004c64 <update_gcode_point+0x2dc>)
 8004b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b32:	f7fb fbab 	bl	800028c <__adddf3>
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4950      	ldr	r1, [pc, #320]	; (8004c7c <update_gcode_point+0x2f4>)
 8004b3c:	e9c1 2300 	strd	r2, r3, [r1]
		bezier_x_coeffs[1] = ((double)Gcode_Cor[run_point].X * COR_INVERSE_SCALE + offset_x)*2.0*bezier_wc;
 8004b40:	4947      	ldr	r1, [pc, #284]	; (8004c60 <update_gcode_point+0x2d8>)
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	4613      	mov	r3, r2
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	1a9b      	subs	r3, r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7fb fce7 	bl	8000524 <__aeabi_i2d>
 8004b56:	a340      	add	r3, pc, #256	; (adr r3, 8004c58 <update_gcode_point+0x2d0>)
 8004b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5c:	f7fb fd4c 	bl	80005f8 <__aeabi_dmul>
 8004b60:	4602      	mov	r2, r0
 8004b62:	460b      	mov	r3, r1
 8004b64:	4610      	mov	r0, r2
 8004b66:	4619      	mov	r1, r3
 8004b68:	4b3e      	ldr	r3, [pc, #248]	; (8004c64 <update_gcode_point+0x2dc>)
 8004b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6e:	f7fb fb8d 	bl	800028c <__adddf3>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4610      	mov	r0, r2
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	f7fb fb85 	bl	800028c <__adddf3>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4610      	mov	r0, r2
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4b3d      	ldr	r3, [pc, #244]	; (8004c80 <update_gcode_point+0x2f8>)
 8004b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b90:	f7fb fd32 	bl	80005f8 <__aeabi_dmul>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4938      	ldr	r1, [pc, #224]	; (8004c7c <update_gcode_point+0x2f4>)
 8004b9a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		bezier_x_coeffs[2] = duty_cmd->target_point.x;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004ba4:	4935      	ldr	r1, [pc, #212]	; (8004c7c <update_gcode_point+0x2f4>)
 8004ba6:	e9c1 2304 	strd	r2, r3, [r1, #16]
		bezier_y_coeffs[0] = (double)Gcode_Cor[run_point-1].Y * COR_INVERSE_SCALE + offset_y;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	1e5a      	subs	r2, r3, #1
 8004bae:	492c      	ldr	r1, [pc, #176]	; (8004c60 <update_gcode_point+0x2d8>)
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	1a9b      	subs	r3, r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	3304      	adds	r3, #4
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fb fcb0 	bl	8000524 <__aeabi_i2d>
 8004bc4:	a324      	add	r3, pc, #144	; (adr r3, 8004c58 <update_gcode_point+0x2d0>)
 8004bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bca:	f7fb fd15 	bl	80005f8 <__aeabi_dmul>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4610      	mov	r0, r2
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4b24      	ldr	r3, [pc, #144]	; (8004c68 <update_gcode_point+0x2e0>)
 8004bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bdc:	f7fb fb56 	bl	800028c <__adddf3>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4927      	ldr	r1, [pc, #156]	; (8004c84 <update_gcode_point+0x2fc>)
 8004be6:	e9c1 2300 	strd	r2, r3, [r1]
		bezier_y_coeffs[1] = ((double)Gcode_Cor[run_point].Y * COR_INVERSE_SCALE + offset_y)*2.0*bezier_wc;
 8004bea:	491d      	ldr	r1, [pc, #116]	; (8004c60 <update_gcode_point+0x2d8>)
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	1a9b      	subs	r3, r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fb fc91 	bl	8000524 <__aeabi_i2d>
 8004c02:	a315      	add	r3, pc, #84	; (adr r3, 8004c58 <update_gcode_point+0x2d0>)
 8004c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c08:	f7fb fcf6 	bl	80005f8 <__aeabi_dmul>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4610      	mov	r0, r2
 8004c12:	4619      	mov	r1, r3
 8004c14:	4b14      	ldr	r3, [pc, #80]	; (8004c68 <update_gcode_point+0x2e0>)
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	f7fb fb37 	bl	800028c <__adddf3>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4610      	mov	r0, r2
 8004c24:	4619      	mov	r1, r3
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	f7fb fb2f 	bl	800028c <__adddf3>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	4610      	mov	r0, r2
 8004c34:	4619      	mov	r1, r3
 8004c36:	4b12      	ldr	r3, [pc, #72]	; (8004c80 <update_gcode_point+0x2f8>)
 8004c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3c:	f7fb fcdc 	bl	80005f8 <__aeabi_dmul>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	490f      	ldr	r1, [pc, #60]	; (8004c84 <update_gcode_point+0x2fc>)
 8004c46:	e9c1 2302 	strd	r2, r3, [r1, #8]
		bezier_y_coeffs[2] = duty_cmd->target_point.y;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004c50:	490c      	ldr	r1, [pc, #48]	; (8004c84 <update_gcode_point+0x2fc>)
 8004c52:	e9c1 2304 	strd	r2, r3, [r1, #16]
			}
		}
	}


}
 8004c56:	e1fd      	b.n	8005054 <update_gcode_point+0x6cc>
 8004c58:	a0000000 	.word	0xa0000000
 8004c5c:	3eb0c6f7 	.word	0x3eb0c6f7
 8004c60:	20008fc0 	.word	0x20008fc0
 8004c64:	20008fa0 	.word	0x20008fa0
 8004c68:	2000fd40 	.word	0x2000fd40
 8004c6c:	200085c0 	.word	0x200085c0
 8004c70:	2000fd30 	.word	0x2000fd30
 8004c74:	20008f38 	.word	0x20008f38
 8004c78:	20008f98 	.word	0x20008f98
 8004c7c:	20008f68 	.word	0x20008f68
 8004c80:	20008fb8 	.word	0x20008fb8
 8004c84:	2000fd48 	.word	0x2000fd48
		duty_cmd->target_point.x = (double)Gcode_Cor[run_point].X * COR_INVERSE_SCALE + offset_x;
 8004c88:	499d      	ldr	r1, [pc, #628]	; (8004f00 <update_gcode_point+0x578>)
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	1a9b      	subs	r3, r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fb fc43 	bl	8000524 <__aeabi_i2d>
 8004c9e:	a396      	add	r3, pc, #600	; (adr r3, 8004ef8 <update_gcode_point+0x570>)
 8004ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca4:	f7fb fca8 	bl	80005f8 <__aeabi_dmul>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4610      	mov	r0, r2
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4b94      	ldr	r3, [pc, #592]	; (8004f04 <update_gcode_point+0x57c>)
 8004cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb6:	f7fb fae9 	bl	800028c <__adddf3>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		duty_cmd->target_point.y = (double)Gcode_Cor[run_point].Y * COR_INVERSE_SCALE + offset_y;
 8004cc4:	498e      	ldr	r1, [pc, #568]	; (8004f00 <update_gcode_point+0x578>)
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	1a9b      	subs	r3, r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fb fc24 	bl	8000524 <__aeabi_i2d>
 8004cdc:	a386      	add	r3, pc, #536	; (adr r3, 8004ef8 <update_gcode_point+0x570>)
 8004cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce2:	f7fb fc89 	bl	80005f8 <__aeabi_dmul>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	4610      	mov	r0, r2
 8004cec:	4619      	mov	r1, r3
 8004cee:	4b86      	ldr	r3, [pc, #536]	; (8004f08 <update_gcode_point+0x580>)
 8004cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf4:	f7fb faca 	bl	800028c <__adddf3>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
		if(Gcode_Cor[run_point].configure.type_define[1] == UP_Z){
 8004d02:	497f      	ldr	r1, [pc, #508]	; (8004f00 <update_gcode_point+0x578>)
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	4613      	mov	r3, r2
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	1a9b      	subs	r3, r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	331b      	adds	r3, #27
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b06      	cmp	r3, #6
 8004d16:	d10d      	bne.n	8004d34 <update_gcode_point+0x3ac>
		  duty_cmd->target_point.z = up_z_height + offset_z;
 8004d18:	4b7c      	ldr	r3, [pc, #496]	; (8004f0c <update_gcode_point+0x584>)
 8004d1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d1e:	4b7c      	ldr	r3, [pc, #496]	; (8004f10 <update_gcode_point+0x588>)
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	f7fb fab2 	bl	800028c <__adddf3>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8004d32:	e00c      	b.n	8004d4e <update_gcode_point+0x3c6>
		  duty_cmd->target_point.z = down_z_height + offset_z;
 8004d34:	4b77      	ldr	r3, [pc, #476]	; (8004f14 <update_gcode_point+0x58c>)
 8004d36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d3a:	4b75      	ldr	r3, [pc, #468]	; (8004f10 <update_gcode_point+0x588>)
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	f7fb faa4 	bl	800028c <__adddf3>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
		duty_cmd->target_point.roll = roll_angle;
 8004d4e:	4b72      	ldr	r3, [pc, #456]	; (8004f18 <update_gcode_point+0x590>)
 8004d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
		duty_cmd->space_type = DUTY_SPACE_TASK;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	735a      	strb	r2, [r3, #13]
		duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	731a      	strb	r2, [r3, #12]
		if(Gcode_Cor[run_point].configure.type_define[0] == LINEAR_TYPE){
 8004d66:	4966      	ldr	r1, [pc, #408]	; (8004f00 <update_gcode_point+0x578>)
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	1a9b      	subs	r3, r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	440b      	add	r3, r1
 8004d74:	331a      	adds	r3, #26
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d103      	bne.n	8004d84 <update_gcode_point+0x3fc>
		  duty_cmd->path_type = DUTY_PATH_LINE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	739a      	strb	r2, [r3, #14]
 8004d82:	e07b      	b.n	8004e7c <update_gcode_point+0x4f4>
		}else if(Gcode_Cor[run_point].configure.type_define[0] == ARC_AW_TYPE){
 8004d84:	495e      	ldr	r1, [pc, #376]	; (8004f00 <update_gcode_point+0x578>)
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	1a9b      	subs	r3, r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	331a      	adds	r3, #26
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d132      	bne.n	8004e00 <update_gcode_point+0x478>
		  duty_cmd->sub_point.x = (double)Gcode_Cor[run_point].I * COR_INVERSE_SCALE;
 8004d9a:	4959      	ldr	r1, [pc, #356]	; (8004f00 <update_gcode_point+0x578>)
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	1a9b      	subs	r3, r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	440b      	add	r3, r1
 8004da8:	330c      	adds	r3, #12
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fb fbb9 	bl	8000524 <__aeabi_i2d>
 8004db2:	a351      	add	r3, pc, #324	; (adr r3, 8004ef8 <update_gcode_point+0x570>)
 8004db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db8:	f7fb fc1e 	bl	80005f8 <__aeabi_dmul>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	6879      	ldr	r1, [r7, #4]
 8004dc2:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
		  duty_cmd->sub_point.y = (double)Gcode_Cor[run_point].J * COR_INVERSE_SCALE;
 8004dc6:	494e      	ldr	r1, [pc, #312]	; (8004f00 <update_gcode_point+0x578>)
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	1a9b      	subs	r3, r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	440b      	add	r3, r1
 8004dd4:	3310      	adds	r3, #16
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fb fba3 	bl	8000524 <__aeabi_i2d>
 8004dde:	a346      	add	r3, pc, #280	; (adr r3, 8004ef8 <update_gcode_point+0x570>)
 8004de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de4:	f7fb fc08 	bl	80005f8 <__aeabi_dmul>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	6879      	ldr	r1, [r7, #4]
 8004dee:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
		  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	739a      	strb	r2, [r3, #14]
		  duty_cmd->arc_dir = 1;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	615a      	str	r2, [r3, #20]
 8004dfe:	e03d      	b.n	8004e7c <update_gcode_point+0x4f4>
		}else if(Gcode_Cor[run_point].configure.type_define[0] == ARC_CW_TYPE){
 8004e00:	493f      	ldr	r1, [pc, #252]	; (8004f00 <update_gcode_point+0x578>)
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	4613      	mov	r3, r2
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	1a9b      	subs	r3, r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	331a      	adds	r3, #26
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b03      	cmp	r3, #3
 8004e14:	d132      	bne.n	8004e7c <update_gcode_point+0x4f4>
		  duty_cmd->sub_point.x = (double)Gcode_Cor[run_point].I * COR_INVERSE_SCALE;
 8004e16:	493a      	ldr	r1, [pc, #232]	; (8004f00 <update_gcode_point+0x578>)
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	00db      	lsls	r3, r3, #3
 8004e1e:	1a9b      	subs	r3, r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	440b      	add	r3, r1
 8004e24:	330c      	adds	r3, #12
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7fb fb7b 	bl	8000524 <__aeabi_i2d>
 8004e2e:	a332      	add	r3, pc, #200	; (adr r3, 8004ef8 <update_gcode_point+0x570>)
 8004e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e34:	f7fb fbe0 	bl	80005f8 <__aeabi_dmul>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	6879      	ldr	r1, [r7, #4]
 8004e3e:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
		  duty_cmd->sub_point.y = (double)Gcode_Cor[run_point].J * COR_INVERSE_SCALE;
 8004e42:	492f      	ldr	r1, [pc, #188]	; (8004f00 <update_gcode_point+0x578>)
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	4613      	mov	r3, r2
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	1a9b      	subs	r3, r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	440b      	add	r3, r1
 8004e50:	3310      	adds	r3, #16
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fb fb65 	bl	8000524 <__aeabi_i2d>
 8004e5a:	a327      	add	r3, pc, #156	; (adr r3, 8004ef8 <update_gcode_point+0x570>)
 8004e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e60:	f7fb fbca 	bl	80005f8 <__aeabi_dmul>
 8004e64:	4602      	mov	r2, r0
 8004e66:	460b      	mov	r3, r1
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
		  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	739a      	strb	r2, [r3, #14]
		  duty_cmd->arc_dir = -1;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f04f 32ff 	mov.w	r2, #4294967295
 8004e7a:	615a      	str	r2, [r3, #20]
		if(Gcode_Mode == GCODE_LINEAR){
 8004e7c:	4b27      	ldr	r3, [pc, #156]	; (8004f1c <update_gcode_point+0x594>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d14f      	bne.n	8004f24 <update_gcode_point+0x59c>
			duty_cmd->v_factor = (double)Gcode_Cor[run_point].F * COR_INVERSE_SCALE / V_MOVE_MAX;
 8004e84:	491e      	ldr	r1, [pc, #120]	; (8004f00 <update_gcode_point+0x578>)
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	1a9b      	subs	r3, r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	3308      	adds	r3, #8
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fb fb44 	bl	8000524 <__aeabi_i2d>
 8004e9c:	a316      	add	r3, pc, #88	; (adr r3, 8004ef8 <update_gcode_point+0x570>)
 8004e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea2:	f7fb fba9 	bl	80005f8 <__aeabi_dmul>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	4610      	mov	r0, r2
 8004eac:	4619      	mov	r1, r3
 8004eae:	f04f 0200 	mov.w	r2, #0
 8004eb2:	4b1b      	ldr	r3, [pc, #108]	; (8004f20 <update_gcode_point+0x598>)
 8004eb4:	f7fb fcca 	bl	800084c <__aeabi_ddiv>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			if(run_point == 1){
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d10d      	bne.n	8004ee4 <update_gcode_point+0x55c>
				duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	741a      	strb	r2, [r3, #16]
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	745a      	strb	r2, [r3, #17]
				duty_cmd->time_total = 0;
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	f04f 0200 	mov.w	r2, #0
 8004eda:	f04f 0300 	mov.w	r3, #0
 8004ede:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8004ee2:	e0b7      	b.n	8005054 <update_gcode_point+0x6cc>
				duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	741a      	strb	r2, [r3, #16]
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2202      	movs	r2, #2
 8004eee:	745a      	strb	r2, [r3, #17]
}
 8004ef0:	e0b0      	b.n	8005054 <update_gcode_point+0x6cc>
 8004ef2:	bf00      	nop
 8004ef4:	f3af 8000 	nop.w
 8004ef8:	a0000000 	.word	0xa0000000
 8004efc:	3eb0c6f7 	.word	0x3eb0c6f7
 8004f00:	20008fc0 	.word	0x20008fc0
 8004f04:	20008fa0 	.word	0x20008fa0
 8004f08:	2000fd40 	.word	0x2000fd40
 8004f0c:	200085c0 	.word	0x200085c0
 8004f10:	2000fd30 	.word	0x2000fd30
 8004f14:	20008f38 	.word	0x20008f38
 8004f18:	20008f98 	.word	0x20008f98
 8004f1c:	200085c8 	.word	0x200085c8
 8004f20:	40877000 	.word	0x40877000
		}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8004f24:	4b50      	ldr	r3, [pc, #320]	; (8005068 <update_gcode_point+0x6e0>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b09      	cmp	r3, #9
 8004f2a:	f040 8093 	bne.w	8005054 <update_gcode_point+0x6cc>
			if(Gcode_Cor[run_point].configure.type_define[1] == pre_height){
 8004f2e:	494f      	ldr	r1, [pc, #316]	; (800506c <update_gcode_point+0x6e4>)
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	4613      	mov	r3, r2
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	1a9b      	subs	r3, r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	440b      	add	r3, r1
 8004f3c:	331b      	adds	r3, #27
 8004f3e:	781a      	ldrb	r2, [r3, #0]
 8004f40:	4b4b      	ldr	r3, [pc, #300]	; (8005070 <update_gcode_point+0x6e8>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d14c      	bne.n	8004fe2 <update_gcode_point+0x65a>
				if(Gcode_Cor[run_point].configure.clutch_index != pre_clutch_index){
 8004f48:	4948      	ldr	r1, [pc, #288]	; (800506c <update_gcode_point+0x6e4>)
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	1a9b      	subs	r3, r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	3318      	adds	r3, #24
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	4b45      	ldr	r3, [pc, #276]	; (8005074 <update_gcode_point+0x6ec>)
 8004f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d01f      	beq.n	8004fa6 <update_gcode_point+0x61e>
					LSPB_calculation(gcode_clutch_configure[Gcode_Cor[run_point].configure.clutch_index]);
 8004f66:	4941      	ldr	r1, [pc, #260]	; (800506c <update_gcode_point+0x6e4>)
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	3318      	adds	r3, #24
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4a3f      	ldr	r2, [pc, #252]	; (8005078 <update_gcode_point+0x6f0>)
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	440b      	add	r3, r1
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004f8a:	f000 f87d 	bl	8005088 <LSPB_calculation>
					pre_clutch_index = Gcode_Cor[run_point].configure.clutch_index;
 8004f8e:	4937      	ldr	r1, [pc, #220]	; (800506c <update_gcode_point+0x6e4>)
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	4613      	mov	r3, r2
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	1a9b      	subs	r3, r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	3318      	adds	r3, #24
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b21a      	sxth	r2, r3
 8004fa2:	4b34      	ldr	r3, [pc, #208]	; (8005074 <update_gcode_point+0x6ec>)
 8004fa4:	801a      	strh	r2, [r3, #0]
				duty_cmd->trajec_type = DUTY_TRAJECTORY_GCODE_LSPB;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2203      	movs	r2, #3
 8004faa:	741a      	strb	r2, [r3, #16]
				duty_cmd->time_total = (double)(Gcode_Cor[run_point].T*COR_INVERSE_SCALE);
 8004fac:	492f      	ldr	r1, [pc, #188]	; (800506c <update_gcode_point+0x6e4>)
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	1a9b      	subs	r3, r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	3314      	adds	r3, #20
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	ee07 3a90 	vmov	s15, r3
 8004fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fc6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800507c <update_gcode_point+0x6f4>
 8004fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fce:	ee17 0a90 	vmov	r0, s15
 8004fd2:	f7fb fab9 	bl	8000548 <__aeabi_f2d>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8004fe0:	e038      	b.n	8005054 <update_gcode_point+0x6cc>
				duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	741a      	strb	r2, [r3, #16]
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	745a      	strb	r2, [r3, #17]
				duty_cmd->v_factor = (double)gcode_clutch_configure[Gcode_Cor[run_point].configure.clutch_index].Depth_Feed*COR_INVERSE_SCALE/V_MOVE_MAX;
 8004fee:	491f      	ldr	r1, [pc, #124]	; (800506c <update_gcode_point+0x6e4>)
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	1a9b      	subs	r3, r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	3318      	adds	r3, #24
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	4619      	mov	r1, r3
 8005002:	4a1d      	ldr	r2, [pc, #116]	; (8005078 <update_gcode_point+0x6f0>)
 8005004:	460b      	mov	r3, r1
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	440b      	add	r3, r1
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	3308      	adds	r3, #8
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4618      	mov	r0, r3
 8005014:	f7fb fa86 	bl	8000524 <__aeabi_i2d>
 8005018:	a311      	add	r3, pc, #68	; (adr r3, 8005060 <update_gcode_point+0x6d8>)
 800501a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501e:	f7fb faeb 	bl	80005f8 <__aeabi_dmul>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4610      	mov	r0, r2
 8005028:	4619      	mov	r1, r3
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	4b14      	ldr	r3, [pc, #80]	; (8005080 <update_gcode_point+0x6f8>)
 8005030:	f7fb fc0c 	bl	800084c <__aeabi_ddiv>
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
				pre_height = Gcode_Cor[run_point].configure.type_define[1];
 800503e:	490b      	ldr	r1, [pc, #44]	; (800506c <update_gcode_point+0x6e4>)
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	4613      	mov	r3, r2
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	1a9b      	subs	r3, r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	440b      	add	r3, r1
 800504c:	331b      	adds	r3, #27
 800504e:	781a      	ldrb	r2, [r3, #0]
 8005050:	4b07      	ldr	r3, [pc, #28]	; (8005070 <update_gcode_point+0x6e8>)
 8005052:	701a      	strb	r2, [r3, #0]
}
 8005054:	bf00      	nop
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	f3af 8000 	nop.w
 8005060:	a0000000 	.word	0xa0000000
 8005064:	3eb0c6f7 	.word	0x3eb0c6f7
 8005068:	200085c8 	.word	0x200085c8
 800506c:	20008fc0 	.word	0x20008fc0
 8005070:	20008f80 	.word	0x20008f80
 8005074:	2000fd2a 	.word	0x2000fd2a
 8005078:	200085d8 	.word	0x200085d8
 800507c:	358637bd 	.word	0x358637bd
 8005080:	40877000 	.word	0x40877000
 8005084:	00000000 	.word	0x00000000

08005088 <LSPB_calculation>:
void LSPB_calculation(SCARA_LSPB_Clutch_TypeDef configure)
{
 8005088:	b5b0      	push	{r4, r5, r7, lr}
 800508a:	b08a      	sub	sp, #40	; 0x28
 800508c:	af00      	add	r7, sp, #0
 800508e:	1d3b      	adds	r3, r7, #4
 8005090:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	double accel = 0;
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double total_s = (double)configure.total_s*COR_INVERSE_SCALE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fb fa3e 	bl	8000524 <__aeabi_i2d>
 80050a8:	a388      	add	r3, pc, #544	; (adr r3, 80052cc <LSPB_calculation+0x244>)
 80050aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ae:	f7fb faa3 	bl	80005f8 <__aeabi_dmul>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double veloc   = (double)configure.veloc*COR_INVERSE_SCALE;
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7fb fa31 	bl	8000524 <__aeabi_i2d>
 80050c2:	a382      	add	r3, pc, #520	; (adr r3, 80052cc <LSPB_calculation+0x244>)
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	f7fb fa96 	bl	80005f8 <__aeabi_dmul>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	time_move = 1.2*total_s/veloc;
 80050d4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80050d8:	4b71      	ldr	r3, [pc, #452]	; (80052a0 <LSPB_calculation+0x218>)
 80050da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80050de:	f7fb fa8b 	bl	80005f8 <__aeabi_dmul>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	4610      	mov	r0, r2
 80050e8:	4619      	mov	r1, r3
 80050ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050ee:	f7fb fbad 	bl	800084c <__aeabi_ddiv>
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	496b      	ldr	r1, [pc, #428]	; (80052a4 <LSPB_calculation+0x21c>)
 80050f8:	e9c1 2300 	strd	r2, r3, [r1]
	time_acc = time_move - total_s/veloc;
 80050fc:	4b69      	ldr	r3, [pc, #420]	; (80052a4 <LSPB_calculation+0x21c>)
 80050fe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005102:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005106:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800510a:	f7fb fb9f 	bl	800084c <__aeabi_ddiv>
 800510e:	4602      	mov	r2, r0
 8005110:	460b      	mov	r3, r1
 8005112:	4620      	mov	r0, r4
 8005114:	4629      	mov	r1, r5
 8005116:	f7fb f8b7 	bl	8000288 <__aeabi_dsub>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	4962      	ldr	r1, [pc, #392]	; (80052a8 <LSPB_calculation+0x220>)
 8005120:	e9c1 2300 	strd	r2, r3, [r1]
	time_dec = time_move - time_acc;
 8005124:	4b5f      	ldr	r3, [pc, #380]	; (80052a4 <LSPB_calculation+0x21c>)
 8005126:	e9d3 0100 	ldrd	r0, r1, [r3]
 800512a:	4b5f      	ldr	r3, [pc, #380]	; (80052a8 <LSPB_calculation+0x220>)
 800512c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005130:	f7fb f8aa 	bl	8000288 <__aeabi_dsub>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	495c      	ldr	r1, [pc, #368]	; (80052ac <LSPB_calculation+0x224>)
 800513a:	e9c1 2300 	strd	r2, r3, [r1]
	accel = veloc / time_acc;
 800513e:	4b5a      	ldr	r3, [pc, #360]	; (80052a8 <LSPB_calculation+0x220>)
 8005140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005144:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005148:	f7fb fb80 	bl	800084c <__aeabi_ddiv>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	e9c7 2308 	strd	r2, r3, [r7, #32]
	acc0 = 0.5*accel;
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	4b55      	ldr	r3, [pc, #340]	; (80052b0 <LSPB_calculation+0x228>)
 800515a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800515e:	f7fb fa4b 	bl	80005f8 <__aeabi_dmul>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4953      	ldr	r1, [pc, #332]	; (80052b4 <LSPB_calculation+0x22c>)
 8005168:	e9c1 2300 	strd	r2, r3, [r1]
	constant[0] = veloc;
 800516c:	4952      	ldr	r1, [pc, #328]	; (80052b8 <LSPB_calculation+0x230>)
 800516e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005172:	e9c1 2300 	strd	r2, r3, [r1]
	constant[1] = -0.5*time_acc*veloc;
 8005176:	4b4c      	ldr	r3, [pc, #304]	; (80052a8 <LSPB_calculation+0x220>)
 8005178:	e9d3 0100 	ldrd	r0, r1, [r3]
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	4b4e      	ldr	r3, [pc, #312]	; (80052bc <LSPB_calculation+0x234>)
 8005182:	f7fb fa39 	bl	80005f8 <__aeabi_dmul>
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	4610      	mov	r0, r2
 800518c:	4619      	mov	r1, r3
 800518e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005192:	f7fb fa31 	bl	80005f8 <__aeabi_dmul>
 8005196:	4602      	mov	r2, r0
 8005198:	460b      	mov	r3, r1
 800519a:	4947      	ldr	r1, [pc, #284]	; (80052b8 <LSPB_calculation+0x230>)
 800519c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    deacc[0] 	= -0.5*accel;
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	4b45      	ldr	r3, [pc, #276]	; (80052bc <LSPB_calculation+0x234>)
 80051a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80051aa:	f7fb fa25 	bl	80005f8 <__aeabi_dmul>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4943      	ldr	r1, [pc, #268]	; (80052c0 <LSPB_calculation+0x238>)
 80051b4:	e9c1 2300 	strd	r2, r3, [r1]
    deacc[1]	= veloc + accel*time_dec;
 80051b8:	4b3c      	ldr	r3, [pc, #240]	; (80052ac <LSPB_calculation+0x224>)
 80051ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051c2:	f7fb fa19 	bl	80005f8 <__aeabi_dmul>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	4610      	mov	r0, r2
 80051cc:	4619      	mov	r1, r3
 80051ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051d2:	f7fb f85b 	bl	800028c <__adddf3>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4939      	ldr	r1, [pc, #228]	; (80052c0 <LSPB_calculation+0x238>)
 80051dc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    deacc[2]    = total_s - time_move*(2*veloc + 2*accel*time_dec - accel*time_move)/2;
 80051e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	f7fb f850 	bl	800028c <__adddf3>
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	4614      	mov	r4, r2
 80051f2:	461d      	mov	r5, r3
 80051f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	f7fb f846 	bl	800028c <__adddf3>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4610      	mov	r0, r2
 8005206:	4619      	mov	r1, r3
 8005208:	4b28      	ldr	r3, [pc, #160]	; (80052ac <LSPB_calculation+0x224>)
 800520a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520e:	f7fb f9f3 	bl	80005f8 <__aeabi_dmul>
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	4620      	mov	r0, r4
 8005218:	4629      	mov	r1, r5
 800521a:	f7fb f837 	bl	800028c <__adddf3>
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	4614      	mov	r4, r2
 8005224:	461d      	mov	r5, r3
 8005226:	4b1f      	ldr	r3, [pc, #124]	; (80052a4 <LSPB_calculation+0x21c>)
 8005228:	e9d3 0100 	ldrd	r0, r1, [r3]
 800522c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005230:	f7fb f9e2 	bl	80005f8 <__aeabi_dmul>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4620      	mov	r0, r4
 800523a:	4629      	mov	r1, r5
 800523c:	f7fb f824 	bl	8000288 <__aeabi_dsub>
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	4610      	mov	r0, r2
 8005246:	4619      	mov	r1, r3
 8005248:	4b16      	ldr	r3, [pc, #88]	; (80052a4 <LSPB_calculation+0x21c>)
 800524a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524e:	f7fb f9d3 	bl	80005f8 <__aeabi_dmul>
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	4610      	mov	r0, r2
 8005258:	4619      	mov	r1, r3
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005262:	f7fb faf3 	bl	800084c <__aeabi_ddiv>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800526e:	f7fb f80b 	bl	8000288 <__aeabi_dsub>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4912      	ldr	r1, [pc, #72]	; (80052c0 <LSPB_calculation+0x238>)
 8005278:	e9c1 2304 	strd	r2, r3, [r1, #16]
    accumulate_s = 0;
 800527c:	4911      	ldr	r1, [pc, #68]	; (80052c4 <LSPB_calculation+0x23c>)
 800527e:	f04f 0200 	mov.w	r2, #0
 8005282:	f04f 0300 	mov.w	r3, #0
 8005286:	e9c1 2300 	strd	r2, r3, [r1]
    last_T = 0;
 800528a:	490f      	ldr	r1, [pc, #60]	; (80052c8 <LSPB_calculation+0x240>)
 800528c:	f04f 0200 	mov.w	r2, #0
 8005290:	f04f 0300 	mov.w	r3, #0
 8005294:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005298:	bf00      	nop
 800529a:	3728      	adds	r7, #40	; 0x28
 800529c:	46bd      	mov	sp, r7
 800529e:	bdb0      	pop	{r4, r5, r7, pc}
 80052a0:	3ff33333 	.word	0x3ff33333
 80052a4:	20008fb0 	.word	0x20008fb0
 80052a8:	20008f40 	.word	0x20008f40
 80052ac:	20008f60 	.word	0x20008f60
 80052b0:	3fe00000 	.word	0x3fe00000
 80052b4:	2000fd20 	.word	0x2000fd20
 80052b8:	20008f88 	.word	0x20008f88
 80052bc:	bfe00000 	.word	0xbfe00000
 80052c0:	20008f48 	.word	0x20008f48
 80052c4:	200085d0 	.word	0x200085d0
 80052c8:	2000fd38 	.word	0x2000fd38
 80052cc:	a0000000 	.word	0xa0000000
 80052d0:	3eb0c6f7 	.word	0x3eb0c6f7
 80052d4:	00000000 	.word	0x00000000

080052d8 <accumulate_update>:
void accumulate_update(SCARA_Gcode_Cor_TypeDef gcode_point){
 80052d8:	b084      	sub	sp, #16
 80052da:	b580      	push	{r7, lr}
 80052dc:	af00      	add	r7, sp, #0
 80052de:	f107 0c08 	add.w	ip, r7, #8
 80052e2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	scaraFlowGCODE(&accumulate_s, (double)gcode_point.T*COR_INVERSE_SCALE);
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7fb f91b 	bl	8000524 <__aeabi_i2d>
 80052ee:	a312      	add	r3, pc, #72	; (adr r3, 8005338 <accumulate_update+0x60>)
 80052f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f4:	f7fb f980 	bl	80005f8 <__aeabi_dmul>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	ec43 2b17 	vmov	d7, r2, r3
 8005300:	eeb0 0a47 	vmov.f32	s0, s14
 8005304:	eef0 0a67 	vmov.f32	s1, s15
 8005308:	480d      	ldr	r0, [pc, #52]	; (8005340 <accumulate_update+0x68>)
 800530a:	f003 feb9 	bl	8009080 <scaraFlowGCODE>
	last_T = (double)gcode_point.T*COR_INVERSE_SCALE;
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	4618      	mov	r0, r3
 8005312:	f7fb f907 	bl	8000524 <__aeabi_i2d>
 8005316:	a308      	add	r3, pc, #32	; (adr r3, 8005338 <accumulate_update+0x60>)
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	f7fb f96c 	bl	80005f8 <__aeabi_dmul>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4907      	ldr	r1, [pc, #28]	; (8005344 <accumulate_update+0x6c>)
 8005326:	e9c1 2300 	strd	r2, r3, [r1]
}
 800532a:	bf00      	nop
 800532c:	46bd      	mov	sp, r7
 800532e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005332:	b004      	add	sp, #16
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	a0000000 	.word	0xa0000000
 800533c:	3eb0c6f7 	.word	0x3eb0c6f7
 8005340:	200085d0 	.word	0x200085d0
 8005344:	2000fd38 	.word	0x2000fd38

08005348 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b08a      	sub	sp, #40	; 0x28
 800534c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800534e:	f107 0314 	add.w	r3, r7, #20
 8005352:	2200      	movs	r2, #0
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	605a      	str	r2, [r3, #4]
 8005358:	609a      	str	r2, [r3, #8]
 800535a:	60da      	str	r2, [r3, #12]
 800535c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800535e:	2300      	movs	r3, #0
 8005360:	613b      	str	r3, [r7, #16]
 8005362:	4b51      	ldr	r3, [pc, #324]	; (80054a8 <MX_GPIO_Init+0x160>)
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	4a50      	ldr	r2, [pc, #320]	; (80054a8 <MX_GPIO_Init+0x160>)
 8005368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800536c:	6313      	str	r3, [r2, #48]	; 0x30
 800536e:	4b4e      	ldr	r3, [pc, #312]	; (80054a8 <MX_GPIO_Init+0x160>)
 8005370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005376:	613b      	str	r3, [r7, #16]
 8005378:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	4b4a      	ldr	r3, [pc, #296]	; (80054a8 <MX_GPIO_Init+0x160>)
 8005380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005382:	4a49      	ldr	r2, [pc, #292]	; (80054a8 <MX_GPIO_Init+0x160>)
 8005384:	f043 0301 	orr.w	r3, r3, #1
 8005388:	6313      	str	r3, [r2, #48]	; 0x30
 800538a:	4b47      	ldr	r3, [pc, #284]	; (80054a8 <MX_GPIO_Init+0x160>)
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005396:	2300      	movs	r3, #0
 8005398:	60bb      	str	r3, [r7, #8]
 800539a:	4b43      	ldr	r3, [pc, #268]	; (80054a8 <MX_GPIO_Init+0x160>)
 800539c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539e:	4a42      	ldr	r2, [pc, #264]	; (80054a8 <MX_GPIO_Init+0x160>)
 80053a0:	f043 0310 	orr.w	r3, r3, #16
 80053a4:	6313      	str	r3, [r2, #48]	; 0x30
 80053a6:	4b40      	ldr	r3, [pc, #256]	; (80054a8 <MX_GPIO_Init+0x160>)
 80053a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053aa:	f003 0310 	and.w	r3, r3, #16
 80053ae:	60bb      	str	r3, [r7, #8]
 80053b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80053b2:	2300      	movs	r3, #0
 80053b4:	607b      	str	r3, [r7, #4]
 80053b6:	4b3c      	ldr	r3, [pc, #240]	; (80054a8 <MX_GPIO_Init+0x160>)
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	4a3b      	ldr	r2, [pc, #236]	; (80054a8 <MX_GPIO_Init+0x160>)
 80053bc:	f043 0302 	orr.w	r3, r3, #2
 80053c0:	6313      	str	r3, [r2, #48]	; 0x30
 80053c2:	4b39      	ldr	r3, [pc, #228]	; (80054a8 <MX_GPIO_Init+0x160>)
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	607b      	str	r3, [r7, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80053ce:	2300      	movs	r3, #0
 80053d0:	603b      	str	r3, [r7, #0]
 80053d2:	4b35      	ldr	r3, [pc, #212]	; (80054a8 <MX_GPIO_Init+0x160>)
 80053d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d6:	4a34      	ldr	r2, [pc, #208]	; (80054a8 <MX_GPIO_Init+0x160>)
 80053d8:	f043 0308 	orr.w	r3, r3, #8
 80053dc:	6313      	str	r3, [r2, #48]	; 0x30
 80053de:	4b32      	ldr	r3, [pc, #200]	; (80054a8 <MX_GPIO_Init+0x160>)
 80053e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	603b      	str	r3, [r7, #0]
 80053e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 80053ea:	2200      	movs	r2, #0
 80053ec:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 80053f0:	482e      	ldr	r0, [pc, #184]	; (80054ac <MX_GPIO_Init+0x164>)
 80053f2:	f007 fa91 	bl	800c918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 80053f6:	2200      	movs	r2, #0
 80053f8:	f641 0148 	movw	r1, #6216	; 0x1848
 80053fc:	482c      	ldr	r0, [pc, #176]	; (80054b0 <MX_GPIO_Init+0x168>)
 80053fe:	f007 fa8b 	bl	800c918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8005402:	2200      	movs	r2, #0
 8005404:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005408:	482a      	ldr	r0, [pc, #168]	; (80054b4 <MX_GPIO_Init+0x16c>)
 800540a:	f007 fa85 	bl	800c918 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 800540e:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 8005412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005414:	2301      	movs	r3, #1
 8005416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005418:	2300      	movs	r3, #0
 800541a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800541c:	2300      	movs	r3, #0
 800541e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005420:	f107 0314 	add.w	r3, r7, #20
 8005424:	4619      	mov	r1, r3
 8005426:	4821      	ldr	r0, [pc, #132]	; (80054ac <MX_GPIO_Init+0x164>)
 8005428:	f007 f8da 	bl	800c5e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 800542c:	f640 0348 	movw	r3, #2120	; 0x848
 8005430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005432:	2301      	movs	r3, #1
 8005434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005436:	2300      	movs	r3, #0
 8005438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800543a:	2300      	movs	r3, #0
 800543c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800543e:	f107 0314 	add.w	r3, r7, #20
 8005442:	4619      	mov	r1, r3
 8005444:	481a      	ldr	r0, [pc, #104]	; (80054b0 <MX_GPIO_Init+0x168>)
 8005446:	f007 f8cb 	bl	800c5e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 800544a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800544e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005450:	2301      	movs	r3, #1
 8005452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005454:	2300      	movs	r3, #0
 8005456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005458:	2303      	movs	r3, #3
 800545a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 800545c:	f107 0314 	add.w	r3, r7, #20
 8005460:	4619      	mov	r1, r3
 8005462:	4813      	ldr	r0, [pc, #76]	; (80054b0 <MX_GPIO_Init+0x168>)
 8005464:	f007 f8bc 	bl	800c5e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 8005468:	f242 0304 	movw	r3, #8196	; 0x2004
 800546c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800546e:	2300      	movs	r3, #0
 8005470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005472:	2301      	movs	r3, #1
 8005474:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005476:	f107 0314 	add.w	r3, r7, #20
 800547a:	4619      	mov	r1, r3
 800547c:	480c      	ldr	r0, [pc, #48]	; (80054b0 <MX_GPIO_Init+0x168>)
 800547e:	f007 f8af 	bl	800c5e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 8005482:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005488:	2301      	movs	r3, #1
 800548a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800548c:	2300      	movs	r3, #0
 800548e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005490:	2300      	movs	r3, #0
 8005492:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005494:	f107 0314 	add.w	r3, r7, #20
 8005498:	4619      	mov	r1, r3
 800549a:	4806      	ldr	r0, [pc, #24]	; (80054b4 <MX_GPIO_Init+0x16c>)
 800549c:	f007 f8a0 	bl	800c5e0 <HAL_GPIO_Init>

}
 80054a0:	bf00      	nop
 80054a2:	3728      	adds	r7, #40	; 0x28
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	40023800 	.word	0x40023800
 80054ac:	40020400 	.word	0x40020400
 80054b0:	40020c00 	.word	0x40020c00
 80054b4:	40020000 	.word	0x40020000

080054b8 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 80054b8:	b5b0      	push	{r4, r5, r7, lr}
 80054ba:	b08a      	sub	sp, #40	; 0x28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80054c6:	eeb0 0a47 	vmov.f32	s0, s14
 80054ca:	eef0 0a67 	vmov.f32	s1, s15
 80054ce:	f015 fd1f 	bl	801af10 <cos>
 80054d2:	ec51 0b10 	vmov	r0, r1, d0
 80054d6:	a382      	add	r3, pc, #520	; (adr r3, 80056e0 <kinematicForward+0x228>)
 80054d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054dc:	f7fb f88c 	bl	80005f8 <__aeabi_dmul>
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	4614      	mov	r4, r2
 80054e6:	461d      	mov	r5, r3
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80054f4:	f7fa feca 	bl	800028c <__adddf3>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	ec43 2b17 	vmov	d7, r2, r3
 8005500:	eeb0 0a47 	vmov.f32	s0, s14
 8005504:	eef0 0a67 	vmov.f32	s1, s15
 8005508:	f015 fd02 	bl	801af10 <cos>
 800550c:	ec51 0b10 	vmov	r0, r1, d0
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	4b78      	ldr	r3, [pc, #480]	; (80056f8 <kinematicForward+0x240>)
 8005516:	f7fb f86f 	bl	80005f8 <__aeabi_dmul>
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	4620      	mov	r0, r4
 8005520:	4629      	mov	r1, r5
 8005522:	f7fa feb3 	bl	800028c <__adddf3>
 8005526:	4602      	mov	r2, r0
 8005528:	460b      	mov	r3, r1
 800552a:	4614      	mov	r4, r2
 800552c:	461d      	mov	r5, r3
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800553a:	f7fa fea7 	bl	800028c <__adddf3>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	4610      	mov	r0, r2
 8005544:	4619      	mov	r1, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800554c:	f7fa fe9c 	bl	8000288 <__aeabi_dsub>
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	ec43 2b17 	vmov	d7, r2, r3
 8005558:	eeb0 0a47 	vmov.f32	s0, s14
 800555c:	eef0 0a67 	vmov.f32	s1, s15
 8005560:	f015 fcd6 	bl	801af10 <cos>
 8005564:	ec51 0b10 	vmov	r0, r1, d0
 8005568:	a35b      	add	r3, pc, #364	; (adr r3, 80056d8 <kinematicForward+0x220>)
 800556a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556e:	f7fb f843 	bl	80005f8 <__aeabi_dmul>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
	x =   a1*cos(pnt->Theta1)
 8005576:	4620      	mov	r0, r4
 8005578:	4629      	mov	r1, r5
 800557a:	f7fa fe87 	bl	800028c <__adddf3>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	e9c7 2308 	strd	r2, r3, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800558c:	eeb0 0a47 	vmov.f32	s0, s14
 8005590:	eef0 0a67 	vmov.f32	s1, s15
 8005594:	f015 fd54 	bl	801b040 <sin>
 8005598:	ec51 0b10 	vmov	r0, r1, d0
 800559c:	a350      	add	r3, pc, #320	; (adr r3, 80056e0 <kinematicForward+0x228>)
 800559e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a2:	f7fb f829 	bl	80005f8 <__aeabi_dmul>
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	4614      	mov	r4, r2
 80055ac:	461d      	mov	r5, r3
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80055ba:	f7fa fe67 	bl	800028c <__adddf3>
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	ec43 2b17 	vmov	d7, r2, r3
 80055c6:	eeb0 0a47 	vmov.f32	s0, s14
 80055ca:	eef0 0a67 	vmov.f32	s1, s15
 80055ce:	f015 fd37 	bl	801b040 <sin>
 80055d2:	ec51 0b10 	vmov	r0, r1, d0
 80055d6:	f04f 0200 	mov.w	r2, #0
 80055da:	4b47      	ldr	r3, [pc, #284]	; (80056f8 <kinematicForward+0x240>)
 80055dc:	f7fb f80c 	bl	80005f8 <__aeabi_dmul>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4620      	mov	r0, r4
 80055e6:	4629      	mov	r1, r5
 80055e8:	f7fa fe50 	bl	800028c <__adddf3>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4614      	mov	r4, r2
 80055f2:	461d      	mov	r5, r3
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8005600:	f7fa fe44 	bl	800028c <__adddf3>
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	4610      	mov	r0, r2
 800560a:	4619      	mov	r1, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8005612:	f7fa fe39 	bl	8000288 <__aeabi_dsub>
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	ec43 2b17 	vmov	d7, r2, r3
 800561e:	eeb0 0a47 	vmov.f32	s0, s14
 8005622:	eef0 0a67 	vmov.f32	s1, s15
 8005626:	f015 fd0b 	bl	801b040 <sin>
 800562a:	ec51 0b10 	vmov	r0, r1, d0
 800562e:	a32a      	add	r3, pc, #168	; (adr r3, 80056d8 <kinematicForward+0x220>)
 8005630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005634:	f7fa ffe0 	bl	80005f8 <__aeabi_dmul>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
	y =   a1*sin(pnt->Theta1)
 800563c:	4620      	mov	r0, r4
 800563e:	4629      	mov	r1, r5
 8005640:	f7fa fe24 	bl	800028c <__adddf3>
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	e9c7 2306 	strd	r2, r3, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8005652:	a125      	add	r1, pc, #148	; (adr r1, 80056e8 <kinematicForward+0x230>)
 8005654:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005658:	f7fa fe16 	bl	8000288 <__aeabi_dsub>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4610      	mov	r0, r2
 8005662:	4619      	mov	r1, r3
 8005664:	a322      	add	r3, pc, #136	; (adr r3, 80056f0 <kinematicForward+0x238>)
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	f7fa fe0d 	bl	8000288 <__aeabi_dsub>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	e9c7 2304 	strd	r2, r3, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8005682:	f7fa fe03 	bl	800028c <__adddf3>
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	4610      	mov	r0, r2
 800568c:	4619      	mov	r1, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8005694:	f7fa fdf8 	bl	8000288 <__aeabi_dsub>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	pnt->x = x;
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056a6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	pnt->y = y;
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056b0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	pnt->z = z;
 80056b4:	6879      	ldr	r1, [r7, #4]
 80056b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80056ba:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	pnt->roll = roll;
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056c4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	return TRUE;
 80056c8:	2301      	movs	r3, #1
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3728      	adds	r7, #40	; 0x28
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bdb0      	pop	{r4, r5, r7, pc}
 80056d2:	bf00      	nop
 80056d4:	f3af 8000 	nop.w
 80056d8:	80000000 	.word	0x80000000
 80056dc:	40402e14 	.word	0x40402e14
 80056e0:	00000000 	.word	0x00000000
 80056e4:	4068a000 	.word	0x4068a000
 80056e8:	00000000 	.word	0x00000000
 80056ec:	406a6000 	.word	0x406a6000
 80056f0:	e0000000 	.word	0xe0000000
 80056f4:	40536b22 	.word	0x40536b22
 80056f8:	40640000 	.word	0x40640000
 80056fc:	00000000 	.word	0x00000000

08005700 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8005700:	b082      	sub	sp, #8
 8005702:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005706:	b0a0      	sub	sp, #128	; 0x80
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8005710:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800571a:	a1f0      	add	r1, pc, #960	; (adr r1, 8005adc <kinematicInverse+0x3dc>)
 800571c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005720:	f7fa fdb2 	bl	8000288 <__aeabi_dsub>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8005738:	eeb0 0a47 	vmov.f32	s0, s14
 800573c:	eef0 0a67 	vmov.f32	s1, s15
 8005740:	f015 fbe6 	bl	801af10 <cos>
 8005744:	ec51 0b10 	vmov	r0, r1, d0
 8005748:	a3e6      	add	r3, pc, #920	; (adr r3, 8005ae4 <kinematicInverse+0x3e4>)
 800574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574e:	f7fa ff53 	bl	80005f8 <__aeabi_dmul>
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	4650      	mov	r0, sl
 8005758:	4659      	mov	r1, fp
 800575a:	f7fa fd95 	bl	8000288 <__aeabi_dsub>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8005772:	eeb0 0a47 	vmov.f32	s0, s14
 8005776:	eef0 0a67 	vmov.f32	s1, s15
 800577a:	f015 fc61 	bl	801b040 <sin>
 800577e:	ec51 0b10 	vmov	r0, r1, d0
 8005782:	a3d8      	add	r3, pc, #864	; (adr r3, 8005ae4 <kinematicInverse+0x3e4>)
 8005784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005788:	f7fa ff36 	bl	80005f8 <__aeabi_dmul>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4650      	mov	r0, sl
 8005792:	4659      	mov	r1, fp
 8005794:	f7fa fd78 	bl	8000288 <__aeabi_dsub>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 80057a0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80057a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80057a8:	f7fa ff26 	bl	80005f8 <__aeabi_dmul>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4692      	mov	sl, r2
 80057b2:	469b      	mov	fp, r3
 80057b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80057b8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80057bc:	f7fa ff1c 	bl	80005f8 <__aeabi_dmul>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	4650      	mov	r0, sl
 80057c6:	4659      	mov	r1, fp
 80057c8:	f7fa fd60 	bl	800028c <__adddf3>
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4610      	mov	r0, r2
 80057d2:	4619      	mov	r1, r3
 80057d4:	a3c5      	add	r3, pc, #788	; (adr r3, 8005aec <kinematicInverse+0x3ec>)
 80057d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057da:	f7fa fd55 	bl	8000288 <__aeabi_dsub>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	4610      	mov	r0, r2
 80057e4:	4619      	mov	r1, r3
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	4bb9      	ldr	r3, [pc, #740]	; (8005ad0 <kinematicInverse+0x3d0>)
 80057ec:	f7fa fd4c 	bl	8000288 <__aeabi_dsub>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	4610      	mov	r0, r2
 80057f6:	4619      	mov	r1, r3
 80057f8:	a3b1      	add	r3, pc, #708	; (adr r3, 8005ac0 <kinematicInverse+0x3c0>)
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	f7fb f825 	bl	800084c <__aeabi_ddiv>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 800580a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800580e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005812:	f7fa fef1 	bl	80005f8 <__aeabi_dmul>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	f04f 0000 	mov.w	r0, #0
 800581e:	49ad      	ldr	r1, [pc, #692]	; (8005ad4 <kinematicInverse+0x3d4>)
 8005820:	f7fa fd32 	bl	8000288 <__aeabi_dsub>
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	f04f 0300 	mov.w	r3, #0
 8005834:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005838:	f7fb f950 	bl	8000adc <__aeabi_dcmplt>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <kinematicInverse+0x146>
		return FALSE;
 8005842:	2300      	movs	r3, #0
 8005844:	e134      	b.n	8005ab0 <kinematicInverse+0x3b0>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 8005846:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 800584a:	f015 fc91 	bl	801b170 <sqrt>
 800584e:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 8005852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005854:	63bb      	str	r3, [r7, #56]	; 0x38
 8005856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005858:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800585c:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 800585e:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8005862:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8005866:	f015 fc81 	bl	801b16c <atan2>
 800586a:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 800586e:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8005872:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8005876:	f015 fc79 	bl	801b16c <atan2>
 800587a:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 800587e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8005882:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005886:	f7fa fcff 	bl	8000288 <__aeabi_dsub>
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4614      	mov	r4, r2
 8005890:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005894:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8005898:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800589c:	f7fa fcf4 	bl	8000288 <__aeabi_dsub>
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	4690      	mov	r8, r2
 80058a6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80058aa:	4642      	mov	r2, r8
 80058ac:	464b      	mov	r3, r9
 80058ae:	4620      	mov	r0, r4
 80058b0:	4629      	mov	r1, r5
 80058b2:	f7fb f91d 	bl	8000af0 <__aeabi_dcmple>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d008      	beq.n	80058ce <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 80058bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058c0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 80058c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80058c8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 80058cc:	e007      	b.n	80058de <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 80058ce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80058d2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 80058d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058da:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 80058de:	f04f 0200 	mov.w	r2, #0
 80058e2:	4b7d      	ldr	r3, [pc, #500]	; (8005ad8 <kinematicInverse+0x3d8>)
 80058e4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80058e8:	f7fa fe86 	bl	80005f8 <__aeabi_dmul>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4610      	mov	r0, r2
 80058f2:	4619      	mov	r1, r3
 80058f4:	a374      	add	r3, pc, #464	; (adr r3, 8005ac8 <kinematicInverse+0x3c8>)
 80058f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fa:	f7fa fcc7 	bl	800028c <__adddf3>
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	4610      	mov	r0, r2
 8005904:	4619      	mov	r1, r3
 8005906:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800590a:	f7fa fe75 	bl	80005f8 <__aeabi_dmul>
 800590e:	4602      	mov	r2, r0
 8005910:	460b      	mov	r3, r1
 8005912:	4614      	mov	r4, r2
 8005914:	461d      	mov	r5, r3
 8005916:	f04f 0200 	mov.w	r2, #0
 800591a:	4b6f      	ldr	r3, [pc, #444]	; (8005ad8 <kinematicInverse+0x3d8>)
 800591c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005920:	f7fa fe6a 	bl	80005f8 <__aeabi_dmul>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	4610      	mov	r0, r2
 800592a:	4619      	mov	r1, r3
 800592c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005930:	f7fa fe62 	bl	80005f8 <__aeabi_dmul>
 8005934:	4602      	mov	r2, r0
 8005936:	460b      	mov	r3, r1
 8005938:	4620      	mov	r0, r4
 800593a:	4629      	mov	r1, r5
 800593c:	f7fa fca4 	bl	8000288 <__aeabi_dsub>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4614      	mov	r4, r2
 8005946:	461d      	mov	r5, r3
 8005948:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800594c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005950:	f7fa fe52 	bl	80005f8 <__aeabi_dmul>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	4690      	mov	r8, r2
 800595a:	4699      	mov	r9, r3
 800595c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005960:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005964:	f7fa fe48 	bl	80005f8 <__aeabi_dmul>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4640      	mov	r0, r8
 800596e:	4649      	mov	r1, r9
 8005970:	f7fa fc8c 	bl	800028c <__adddf3>
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	4620      	mov	r0, r4
 800597a:	4629      	mov	r1, r5
 800597c:	f7fa ff66 	bl	800084c <__aeabi_ddiv>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	e9c7 2308 	strd	r2, r3, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	4b52      	ldr	r3, [pc, #328]	; (8005ad8 <kinematicInverse+0x3d8>)
 800598e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005992:	f7fa fe31 	bl	80005f8 <__aeabi_dmul>
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	4610      	mov	r0, r2
 800599c:	4619      	mov	r1, r3
 800599e:	a34a      	add	r3, pc, #296	; (adr r3, 8005ac8 <kinematicInverse+0x3c8>)
 80059a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a4:	f7fa fc72 	bl	800028c <__adddf3>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	4610      	mov	r0, r2
 80059ae:	4619      	mov	r1, r3
 80059b0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80059b4:	f7fa fe20 	bl	80005f8 <__aeabi_dmul>
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	4614      	mov	r4, r2
 80059be:	461d      	mov	r5, r3
 80059c0:	f04f 0200 	mov.w	r2, #0
 80059c4:	4b44      	ldr	r3, [pc, #272]	; (8005ad8 <kinematicInverse+0x3d8>)
 80059c6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80059ca:	f7fa fe15 	bl	80005f8 <__aeabi_dmul>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	4610      	mov	r0, r2
 80059d4:	4619      	mov	r1, r3
 80059d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059da:	f7fa fe0d 	bl	80005f8 <__aeabi_dmul>
 80059de:	4602      	mov	r2, r0
 80059e0:	460b      	mov	r3, r1
 80059e2:	4620      	mov	r0, r4
 80059e4:	4629      	mov	r1, r5
 80059e6:	f7fa fc51 	bl	800028c <__adddf3>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	4614      	mov	r4, r2
 80059f0:	461d      	mov	r5, r3
 80059f2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80059f6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80059fa:	f7fa fdfd 	bl	80005f8 <__aeabi_dmul>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4690      	mov	r8, r2
 8005a04:	4699      	mov	r9, r3
 8005a06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a0a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005a0e:	f7fa fdf3 	bl	80005f8 <__aeabi_dmul>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	4640      	mov	r0, r8
 8005a18:	4649      	mov	r1, r9
 8005a1a:	f7fa fc37 	bl	800028c <__adddf3>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	4620      	mov	r0, r4
 8005a24:	4629      	mov	r1, r5
 8005a26:	f7fa ff11 	bl	800084c <__aeabi_ddiv>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	theta1 = atan2(s1,c1);
 8005a32:	ed97 1b06 	vldr	d1, [r7, #24]
 8005a36:	ed97 0b08 	vldr	d0, [r7, #32]
 8005a3a:	f015 fb97 	bl	801b16c <atan2>
 8005a3e:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 8005a42:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005a46:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a4a:	f7fa fc1f 	bl	800028c <__adddf3>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	4610      	mov	r0, r2
 8005a54:	4619      	mov	r1, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005a5c:	f7fa fc14 	bl	8000288 <__aeabi_dsub>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 8005a68:	ed97 3b02 	vldr	d3, [r7, #8]
 8005a6c:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 8005a70:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 8005a74:	ed97 0b04 	vldr	d0, [r7, #16]
 8005a78:	f004 ffaa 	bl	800a9d0 <scaraCheckWorkSpace4>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <kinematicInverse+0x386>
		return FALSE; // Over workspace !!!
 8005a82:	2300      	movs	r3, #0
 8005a84:	e014      	b.n	8005ab0 <kinematicInverse+0x3b0>
	}
	pnt->Theta1 = theta1;
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005a8c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	pnt->Theta2 = theta2;
 8005a90:	6879      	ldr	r1, [r7, #4]
 8005a92:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005a96:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	pnt->D3		= d3;
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005aa0:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	pnt->Theta4 = theta4;
 8005aa4:	6879      	ldr	r1, [r7, #4]
 8005aa6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005aaa:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	return TRUE; // All is well
 8005aae:	2301      	movs	r3, #1
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3780      	adds	r7, #128	; 0x80
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005aba:	b002      	add	sp, #8
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	00000000 	.word	0x00000000
 8005ac4:	40eec800 	.word	0x40eec800
 8005ac8:	00000000 	.word	0x00000000
 8005acc:	4068a000 	.word	0x4068a000
 8005ad0:	40d90000 	.word	0x40d90000
 8005ad4:	3ff00000 	.word	0x3ff00000
 8005ad8:	40640000 	.word	0x40640000
 8005adc:	80000000 	.word	0x80000000
 8005ae0:	4060aa6e 	.word	0x4060aa6e
 8005ae4:	80000000 	.word	0x80000000
 8005ae8:	40402e14 	.word	0x40402e14
 8005aec:	00000000 	.word	0x00000000
 8005af0:	40e2f320 	.word	0x40e2f320

08005af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005af8:	f006 f88a 	bl	800bc10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005afc:	f000 f82a 	bl	8005b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005b00:	f7ff fc22 	bl	8005348 <MX_GPIO_Init>
  MX_DMA_Init();
 8005b04:	f7fc fd8e 	bl	8002624 <MX_DMA_Init>
  MX_UART4_Init();
 8005b08:	f005 ff84 	bl	800ba14 <MX_UART4_Init>
  MX_FSMC_Init();
 8005b0c:	f7fe fe72 	bl	80047f4 <MX_FSMC_Init>
  MX_TIM7_Init();
 8005b10:	f005 ff0e 	bl	800b930 <MX_TIM7_Init>
  MX_TIM2_Init();
 8005b14:	f005 febe 	bl	800b894 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if(!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)){
 8005b18:	4b0c      	ldr	r3, [pc, #48]	; (8005b4c <main+0x58>)
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10b      	bne.n	8005b3c <main+0x48>
  		CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005b24:	4b09      	ldr	r3, [pc, #36]	; (8005b4c <main+0x58>)
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	4a08      	ldr	r2, [pc, #32]	; (8005b4c <main+0x58>)
 8005b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b2e:	60d3      	str	r3, [r2, #12]
  		DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005b30:	4b07      	ldr	r3, [pc, #28]	; (8005b50 <main+0x5c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a06      	ldr	r2, [pc, #24]	; (8005b50 <main+0x5c>)
 8005b36:	f043 0301 	orr.w	r3, r3, #1
 8005b3a:	6013      	str	r3, [r2, #0]
  	}
  	DWT->CYCCNT = 0;
 8005b3c:	4b04      	ldr	r3, [pc, #16]	; (8005b50 <main+0x5c>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	605a      	str	r2, [r3, #4]
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8005b42:	f7fc fda9 	bl	8002698 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8005b46:	f00d f911 	bl	8012d6c <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 8005b4a:	e7fe      	b.n	8005b4a <main+0x56>
 8005b4c:	e000edf0 	.word	0xe000edf0
 8005b50:	e0001000 	.word	0xe0001000

08005b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b094      	sub	sp, #80	; 0x50
 8005b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b5a:	f107 0320 	add.w	r3, r7, #32
 8005b5e:	2230      	movs	r2, #48	; 0x30
 8005b60:	2100      	movs	r1, #0
 8005b62:	4618      	mov	r0, r3
 8005b64:	f010 fd1c 	bl	80165a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005b68:	f107 030c 	add.w	r3, r7, #12
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	605a      	str	r2, [r3, #4]
 8005b72:	609a      	str	r2, [r3, #8]
 8005b74:	60da      	str	r2, [r3, #12]
 8005b76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60bb      	str	r3, [r7, #8]
 8005b7c:	4b28      	ldr	r3, [pc, #160]	; (8005c20 <SystemClock_Config+0xcc>)
 8005b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b80:	4a27      	ldr	r2, [pc, #156]	; (8005c20 <SystemClock_Config+0xcc>)
 8005b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b86:	6413      	str	r3, [r2, #64]	; 0x40
 8005b88:	4b25      	ldr	r3, [pc, #148]	; (8005c20 <SystemClock_Config+0xcc>)
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b90:	60bb      	str	r3, [r7, #8]
 8005b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b94:	2300      	movs	r3, #0
 8005b96:	607b      	str	r3, [r7, #4]
 8005b98:	4b22      	ldr	r3, [pc, #136]	; (8005c24 <SystemClock_Config+0xd0>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a21      	ldr	r2, [pc, #132]	; (8005c24 <SystemClock_Config+0xd0>)
 8005b9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ba2:	6013      	str	r3, [r2, #0]
 8005ba4:	4b1f      	ldr	r3, [pc, #124]	; (8005c24 <SystemClock_Config+0xd0>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bac:	607b      	str	r3, [r7, #4]
 8005bae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005bb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005bb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005bba:	2302      	movs	r3, #2
 8005bbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005bbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005bc4:	2308      	movs	r3, #8
 8005bc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005bc8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8005bcc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005bce:	2302      	movs	r3, #2
 8005bd0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005bd2:	2307      	movs	r3, #7
 8005bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005bd6:	f107 0320 	add.w	r3, r7, #32
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f008 f890 	bl	800dd00 <HAL_RCC_OscConfig>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <SystemClock_Config+0x96>
  {
    Error_Handler();
 8005be6:	f000 f831 	bl	8005c4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005bea:	230f      	movs	r3, #15
 8005bec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005bee:	2302      	movs	r3, #2
 8005bf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005bf6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005bfa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005c02:	f107 030c 	add.w	r3, r7, #12
 8005c06:	2105      	movs	r1, #5
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f008 fae9 	bl	800e1e0 <HAL_RCC_ClockConfig>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8005c14:	f000 f81a 	bl	8005c4c <Error_Handler>
  }
}
 8005c18:	bf00      	nop
 8005c1a:	3750      	adds	r7, #80	; 0x50
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	40023800 	.word	0x40023800
 8005c24:	40007000 	.word	0x40007000

08005c28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a04      	ldr	r2, [pc, #16]	; (8005c48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d101      	bne.n	8005c3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005c3a:	f006 f80b 	bl	800bc54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005c3e:	bf00      	nop
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	40001000 	.word	0x40001000

08005c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005c50:	bf00      	nop
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 8005c5a:	b480      	push	{r7}
 8005c5c:	b083      	sub	sp, #12
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	460b      	mov	r3, r1
 8005c64:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c6c:	3308      	adds	r3, #8
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <ringBuff_PushChar+0x1e>
		return FALSE;
 8005c74:	2300      	movs	r3, #0
 8005c76:	e02e      	b.n	8005cd6 <ringBuff_PushChar+0x7c>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	78f9      	ldrb	r1, [r7, #3]
 8005c84:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	425a      	negs	r2, r3
 8005c92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c96:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005c9a:	bf58      	it	pl
 8005c9c:	4253      	negpl	r3, r2
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005ca4:	6013      	str	r3, [r2, #0]
			if (ringbuff->head == ringbuff->tail) {
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d105      	bne.n	8005cc8 <ringBuff_PushChar+0x6e>
				ringbuff->isFull_Flag = TRUE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005cc2:	3308      	adds	r3, #8
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	701a      	strb	r2, [r3, #0]
			}
			ringbuff->isEmpty_Flag = FALSE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005cce:	3309      	adds	r3, #9
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	701a      	strb	r2, [r3, #0]
			return TRUE;
 8005cd4:	2301      	movs	r3, #1
	}
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 8005ce2:	b480      	push	{r7}
 8005ce4:	b083      	sub	sp, #12
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005cf2:	3309      	adds	r3, #9
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <ringBuff_PopChar+0x1c>
		return FALSE;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	e032      	b.n	8005d64 <ringBuff_PopChar+0x82>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d04:	3304      	adds	r3, #4
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	5cd2      	ldrb	r2, [r2, r3]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d16:	3304      	adds	r3, #4
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	4259      	negs	r1, r3
 8005d1e:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8005d22:	f3c1 030c 	ubfx	r3, r1, #0, #13
 8005d26:	bf58      	it	pl
 8005d28:	425a      	negpl	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d30:	3304      	adds	r3, #4
 8005d32:	601a      	str	r2, [r3, #0]
			if (ringbuff->head == ringbuff->tail) {
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d42:	3304      	adds	r3, #4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d105      	bne.n	8005d56 <ringBuff_PopChar+0x74>
				ringbuff->isEmpty_Flag = TRUE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d50:	3309      	adds	r3, #9
 8005d52:	2201      	movs	r2, #1
 8005d54:	701a      	strb	r2, [r3, #0]
			}
			ringbuff->isFull_Flag = FALSE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d5c:	3308      	adds	r3, #8
 8005d5e:	2200      	movs	r2, #0
 8005d60:	701a      	strb	r2, [r3, #0]
			return TRUE;
 8005d62:	2301      	movs	r3, #1
	}
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	82fb      	strh	r3, [r7, #22]
 8005d80:	e011      	b.n	8005da6 <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 8005d82:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	4413      	add	r3, r2
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f7ff ff63 	bl	8005c5a <ringBuff_PushChar>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00b      	beq.n	8005db2 <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 8005d9a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	3301      	adds	r3, #1
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	82fb      	strh	r3, [r7, #22]
 8005da6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	dce8      	bgt.n	8005d82 <ringBuff_PushArray+0x12>
 8005db0:	e000      	b.n	8005db4 <ringBuff_PushArray+0x44>
			break;
 8005db2:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 8005db4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8005dcc:	2300      	movs	r3, #0
 8005dce:	617b      	str	r3, [r7, #20]
 8005dd0:	e00c      	b.n	8005dec <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	4619      	mov	r1, r3
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f7ff ff81 	bl	8005ce2 <ringBuff_PopChar>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d007      	beq.n	8005df6 <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	3301      	adds	r3, #1
 8005dea:	617b      	str	r3, [r7, #20]
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	dbee      	blt.n	8005dd2 <ringBuff_PopArray+0x12>
 8005df4:	e000      	b.n	8005df8 <ringBuff_PopArray+0x38>
			break;
 8005df6:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 8005df8:	697b      	ldr	r3, [r7, #20]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3718      	adds	r7, #24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, const char* cmp_char) {
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b088      	sub	sp, #32
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	6039      	str	r1, [r7, #0]
	int32_t index = ringbuff->tail;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005e12:	3304      	adds	r3, #4
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	61fb      	str	r3, [r7, #28]
	int32_t distance = 0;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	61bb      	str	r3, [r7, #24]
	int32_t sync_state = 0;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	617b      	str	r3, [r7, #20]
	int32_t head_ptr = ringbuff->head;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	60fb      	str	r3, [r7, #12]
	int32_t number_of_state = strlen(cmp_char);
 8005e2a:	6838      	ldr	r0, [r7, #0]
 8005e2c:	f7fa f9d0 	bl	80001d0 <strlen>
 8005e30:	4603      	mov	r3, r0
 8005e32:	60bb      	str	r3, [r7, #8]
	if (ringbuff->isFull_Flag) {
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005e3a:	3308      	adds	r3, #8
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d066      	beq.n	8005f10 <ringBuff_DistanceOf+0x10e>
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8005e42:	2300      	movs	r3, #0
 8005e44:	613b      	str	r3, [r7, #16]
 8005e46:	e030      	b.n	8005eaa <ringBuff_DistanceOf+0xa8>
	            if(ringbuff->Array[index] == cmp_char[sync_state]){
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	781a      	ldrb	r2, [r3, #0]
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	6839      	ldr	r1, [r7, #0]
 8005e54:	440b      	add	r3, r1
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d103      	bne.n	8005e64 <ringBuff_DistanceOf+0x62>
	                sync_state++;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	617b      	str	r3, [r7, #20]
 8005e62:	e00c      	b.n	8005e7e <ringBuff_DistanceOf+0x7c>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	4413      	add	r3, r2
 8005e6a:	781a      	ldrb	r2, [r3, #0]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d102      	bne.n	8005e7a <ringBuff_DistanceOf+0x78>
	                sync_state = 1;
 8005e74:	2301      	movs	r3, #1
 8005e76:	617b      	str	r3, [r7, #20]
 8005e78:	e001      	b.n	8005e7e <ringBuff_DistanceOf+0x7c>
	            }else{
	                sync_state = 0;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d101      	bne.n	8005e8a <ringBuff_DistanceOf+0x88>
	                return distance;
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	e048      	b.n	8005f1c <ringBuff_DistanceOf+0x11a>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	61bb      	str	r3, [r7, #24]
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	3301      	adds	r3, #1
 8005e94:	613b      	str	r3, [r7, #16]
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	425a      	negs	r2, r3
 8005e9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ea0:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005ea4:	bf58      	it	pl
 8005ea6:	4253      	negpl	r3, r2
 8005ea8:	61fb      	str	r3, [r7, #28]
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eb0:	dbca      	blt.n	8005e48 <ringBuff_DistanceOf+0x46>
 8005eb2:	e031      	b.n	8005f18 <ringBuff_DistanceOf+0x116>
	        }
	} else {
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
	        if(ringbuff->Array[index] == cmp_char[sync_state]){
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	4413      	add	r3, r2
 8005eba:	781a      	ldrb	r2, [r3, #0]
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	6839      	ldr	r1, [r7, #0]
 8005ec0:	440b      	add	r3, r1
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d103      	bne.n	8005ed0 <ringBuff_DistanceOf+0xce>
	                //LOG_REPORT("dis1", ringbuff->.tail);
	                sync_state++;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	617b      	str	r3, [r7, #20]
 8005ece:	e00c      	b.n	8005eea <ringBuff_DistanceOf+0xe8>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	781a      	ldrb	r2, [r3, #0]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d102      	bne.n	8005ee6 <ringBuff_DistanceOf+0xe4>
	                sync_state = 1;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	e001      	b.n	8005eea <ringBuff_DistanceOf+0xe8>
	            }else{
	                sync_state = 0;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d101      	bne.n	8005ef6 <ringBuff_DistanceOf+0xf4>
	                //LOG_REPORT("dis", distance);
	                return distance;
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	e012      	b.n	8005f1c <ringBuff_DistanceOf+0x11a>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	61bb      	str	r3, [r7, #24]
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	3301      	adds	r3, #1
 8005f00:	425a      	negs	r2, r3
 8005f02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f06:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005f0a:	bf58      	it	pl
 8005f0c:	4253      	negpl	r3, r2
 8005f0e:	61fb      	str	r3, [r7, #28]
 8005f10:	69fa      	ldr	r2, [r7, #28]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d1cd      	bne.n	8005eb4 <ringBuff_DistanceOf+0xb2>
	        }
	    //LOG_REPORT("hai", 2);
	}

	return -1;
 8005f18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3720      	adds	r7, #32
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 8005f24:	b580      	push	{r7, lr}
 8005f26:	af00      	add	r7, sp, #0
	lowlayer_resetEncoder();
 8005f28:	f000 fdfe 	bl	8006b28 <lowlayer_resetEncoder>
	pulse_accumulate[0] = 0;
 8005f2c:	4b10      	ldr	r3, [pc, #64]	; (8005f70 <lowlayer_scanReset+0x4c>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 8005f32:	4b0f      	ldr	r3, [pc, #60]	; (8005f70 <lowlayer_scanReset+0x4c>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 8005f38:	4b0d      	ldr	r3, [pc, #52]	; (8005f70 <lowlayer_scanReset+0x4c>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 8005f3e:	4b0c      	ldr	r3, [pc, #48]	; (8005f70 <lowlayer_scanReset+0x4c>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 8005f44:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <lowlayer_scanReset+0x50>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 8005f4a:	4b0a      	ldr	r3, [pc, #40]	; (8005f74 <lowlayer_scanReset+0x50>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 8005f50:	4b08      	ldr	r3, [pc, #32]	; (8005f74 <lowlayer_scanReset+0x50>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 8005f56:	4b08      	ldr	r3, [pc, #32]	; (8005f78 <lowlayer_scanReset+0x54>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 8005f5c:	4b07      	ldr	r3, [pc, #28]	; (8005f7c <lowlayer_scanReset+0x58>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 8005f62:	2200      	movs	r2, #0
 8005f64:	2108      	movs	r1, #8
 8005f66:	4806      	ldr	r0, [pc, #24]	; (8005f80 <lowlayer_scanReset+0x5c>)
 8005f68:	f006 fcd6 	bl	800c918 <HAL_GPIO_WritePin>
}
 8005f6c:	bf00      	nop
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	2000fec8 	.word	0x2000fec8
 8005f74:	2000fedc 	.word	0x2000fedc
 8005f78:	2000fed8 	.word	0x2000fed8
 8005f7c:	2000fef8 	.word	0x2000fef8
 8005f80:	40020c00 	.word	0x40020c00
 8005f84:	00000000 	.word	0x00000000

08005f88 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 8005f8e:	2300      	movs	r3, #0
 8005f90:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 8005f92:	f000 fe87 	bl	8006ca4 <lowlayer_updateLimit>
	if (state_scan < 4) {
 8005f96:	4b96      	ldr	r3, [pc, #600]	; (80061f0 <lowlayer_scanFlow+0x268>)
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	d837      	bhi.n	800600e <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 8005f9e:	4b94      	ldr	r3, [pc, #592]	; (80061f0 <lowlayer_scanFlow+0x268>)
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	f1c3 0303 	rsb	r3, r3, #3
 8005fa6:	4a93      	ldr	r2, [pc, #588]	; (80061f4 <lowlayer_scanFlow+0x26c>)
 8005fa8:	5cd3      	ldrb	r3, [r2, r3]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d121      	bne.n	8005ff2 <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 8005fae:	4b90      	ldr	r3, [pc, #576]	; (80061f0 <lowlayer_scanFlow+0x268>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	f1c3 0203 	rsb	r2, r3, #3
 8005fb6:	4b8e      	ldr	r3, [pc, #568]	; (80061f0 <lowlayer_scanFlow+0x268>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	f1c3 0303 	rsb	r3, r3, #3
 8005fbe:	498e      	ldr	r1, [pc, #568]	; (80061f8 <lowlayer_scanFlow+0x270>)
 8005fc0:	568a      	ldrsb	r2, [r1, r2]
 8005fc2:	f107 0108 	add.w	r1, r7, #8
 8005fc6:	440b      	add	r3, r1
 8005fc8:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 8005fcc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	425b      	negs	r3, r3
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	b258      	sxtb	r0, r3
 8005fd8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005fdc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	425b      	negs	r3, r3
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	b25a      	sxtb	r2, r3
 8005fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fec:	f000 fcd8 	bl	80069a0 <lowlayer_writePulse>
 8005ff0:	e00b      	b.n	800600a <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 8005ff2:	4b7f      	ldr	r3, [pc, #508]	; (80061f0 <lowlayer_scanFlow+0x268>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	4b7d      	ldr	r3, [pc, #500]	; (80061f0 <lowlayer_scanFlow+0x268>)
 8005ffc:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 8005ffe:	2300      	movs	r3, #0
 8006000:	2200      	movs	r2, #0
 8006002:	2100      	movs	r1, #0
 8006004:	2000      	movs	r0, #0
 8006006:	f000 fccb 	bl	80069a0 <lowlayer_writePulse>
		}

		return FALSE;
 800600a:	2300      	movs	r3, #0
 800600c:	e0d2      	b.n	80061b4 <lowlayer_scanFlow+0x22c>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 800600e:	2201      	movs	r2, #1
 8006010:	2108      	movs	r1, #8
 8006012:	487a      	ldr	r0, [pc, #488]	; (80061fc <lowlayer_scanFlow+0x274>)
 8006014:	f006 fc80 	bl	800c918 <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 8006018:	f000 fe28 	bl	8006c6c <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 800601c:	2300      	movs	r3, #0
 800601e:	2200      	movs	r2, #0
 8006020:	2100      	movs	r1, #0
 8006022:	2000      	movs	r0, #0
 8006024:	f000 fcbc 	bl	80069a0 <lowlayer_writePulse>
		scan_flag = 1;
 8006028:	4b75      	ldr	r3, [pc, #468]	; (8006200 <lowlayer_scanFlow+0x278>)
 800602a:	2201      	movs	r2, #1
 800602c:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 800602e:	4b75      	ldr	r3, [pc, #468]	; (8006204 <lowlayer_scanFlow+0x27c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a75      	ldr	r2, [pc, #468]	; (8006208 <lowlayer_scanFlow+0x280>)
 8006034:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 8006036:	4b73      	ldr	r3, [pc, #460]	; (8006204 <lowlayer_scanFlow+0x27c>)
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	4a73      	ldr	r2, [pc, #460]	; (8006208 <lowlayer_scanFlow+0x280>)
 800603c:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 800603e:	4b71      	ldr	r3, [pc, #452]	; (8006204 <lowlayer_scanFlow+0x27c>)
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	4a71      	ldr	r2, [pc, #452]	; (8006208 <lowlayer_scanFlow+0x280>)
 8006044:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 8006046:	4b71      	ldr	r3, [pc, #452]	; (800620c <lowlayer_scanFlow+0x284>)
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	4a71      	ldr	r2, [pc, #452]	; (8006210 <lowlayer_scanFlow+0x288>)
 800604c:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 800604e:	4b6e      	ldr	r3, [pc, #440]	; (8006208 <lowlayer_scanFlow+0x280>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	b29b      	uxth	r3, r3
 8006054:	4619      	mov	r1, r3
 8006056:	486f      	ldr	r0, [pc, #444]	; (8006214 <lowlayer_scanFlow+0x28c>)
 8006058:	f7fc fa2e 	bl	80024b8 <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 800605c:	4b6a      	ldr	r3, [pc, #424]	; (8006208 <lowlayer_scanFlow+0x280>)
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	b29b      	uxth	r3, r3
 8006062:	4619      	mov	r1, r3
 8006064:	486c      	ldr	r0, [pc, #432]	; (8006218 <lowlayer_scanFlow+0x290>)
 8006066:	f7fc fa27 	bl	80024b8 <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 800606a:	4b67      	ldr	r3, [pc, #412]	; (8006208 <lowlayer_scanFlow+0x280>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	b29b      	uxth	r3, r3
 8006070:	4619      	mov	r1, r3
 8006072:	486a      	ldr	r0, [pc, #424]	; (800621c <lowlayer_scanFlow+0x294>)
 8006074:	f7fc fa20 	bl	80024b8 <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 8006078:	4b65      	ldr	r3, [pc, #404]	; (8006210 <lowlayer_scanFlow+0x288>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	b29b      	uxth	r3, r3
 800607e:	4619      	mov	r1, r3
 8006080:	4867      	ldr	r0, [pc, #412]	; (8006220 <lowlayer_scanFlow+0x298>)
 8006082:	f7fc fa19 	bl	80024b8 <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 8006086:	4b60      	ldr	r3, [pc, #384]	; (8006208 <lowlayer_scanFlow+0x280>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	ee07 3a90 	vmov	s15, r3
 800608e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006092:	ee17 0a90 	vmov	r0, s15
 8006096:	f7fa fa57 	bl	8000548 <__aeabi_f2d>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	f7fa f8f5 	bl	800028c <__adddf3>
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	4610      	mov	r0, r2
 80060a8:	4619      	mov	r1, r3
 80060aa:	a345      	add	r3, pc, #276	; (adr r3, 80061c0 <lowlayer_scanFlow+0x238>)
 80060ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b0:	f7fa faa2 	bl	80005f8 <__aeabi_dmul>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4610      	mov	r0, r2
 80060ba:	4619      	mov	r1, r3
 80060bc:	a342      	add	r3, pc, #264	; (adr r3, 80061c8 <lowlayer_scanFlow+0x240>)
 80060be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c2:	f7fa fbc3 	bl	800084c <__aeabi_ddiv>
 80060c6:	4602      	mov	r2, r0
 80060c8:	460b      	mov	r3, r1
 80060ca:	a141      	add	r1, pc, #260	; (adr r1, 80061d0 <lowlayer_scanFlow+0x248>)
 80060cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060d0:	f7fa f8da 	bl	8000288 <__aeabi_dsub>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 80060d8:	4952      	ldr	r1, [pc, #328]	; (8006224 <lowlayer_scanFlow+0x29c>)
 80060da:	e9c1 2300 	strd	r2, r3, [r1]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 80060de:	4b4a      	ldr	r3, [pc, #296]	; (8006208 <lowlayer_scanFlow+0x280>)
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060ea:	ee17 0a90 	vmov	r0, s15
 80060ee:	f7fa fa2b 	bl	8000548 <__aeabi_f2d>
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	f7fa f8c9 	bl	800028c <__adddf3>
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	4610      	mov	r0, r2
 8006100:	4619      	mov	r1, r3
 8006102:	a32f      	add	r3, pc, #188	; (adr r3, 80061c0 <lowlayer_scanFlow+0x238>)
 8006104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006108:	f7fa fa76 	bl	80005f8 <__aeabi_dmul>
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	4610      	mov	r0, r2
 8006112:	4619      	mov	r1, r3
 8006114:	f04f 0200 	mov.w	r2, #0
 8006118:	4b43      	ldr	r3, [pc, #268]	; (8006228 <lowlayer_scanFlow+0x2a0>)
 800611a:	f7fa fb97 	bl	800084c <__aeabi_ddiv>
 800611e:	4602      	mov	r2, r0
 8006120:	460b      	mov	r3, r1
 8006122:	a12d      	add	r1, pc, #180	; (adr r1, 80061d8 <lowlayer_scanFlow+0x250>)
 8006124:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006128:	f7fa f8ae 	bl	8000288 <__aeabi_dsub>
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8006130:	493c      	ldr	r1, [pc, #240]	; (8006224 <lowlayer_scanFlow+0x29c>)
 8006132:	e9c1 2302 	strd	r2, r3, [r1, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 8006136:	4b34      	ldr	r3, [pc, #208]	; (8006208 <lowlayer_scanFlow+0x280>)
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006142:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800622c <lowlayer_scanFlow+0x2a4>
 8006146:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800614a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8006230 <lowlayer_scanFlow+0x2a8>
 800614e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006152:	ee17 0a90 	vmov	r0, s15
 8006156:	f7fa f9f7 	bl	8000548 <__aeabi_f2d>
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 800615e:	4931      	ldr	r1, [pc, #196]	; (8006224 <lowlayer_scanFlow+0x29c>)
 8006160:	e9c1 2304 	strd	r2, r3, [r1, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 8006164:	4b2a      	ldr	r3, [pc, #168]	; (8006210 <lowlayer_scanFlow+0x288>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4618      	mov	r0, r3
 800616a:	f7fa f9db 	bl	8000524 <__aeabi_i2d>
 800616e:	4602      	mov	r2, r0
 8006170:	460b      	mov	r3, r1
 8006172:	f7fa f88b 	bl	800028c <__adddf3>
 8006176:	4602      	mov	r2, r0
 8006178:	460b      	mov	r3, r1
 800617a:	4610      	mov	r0, r2
 800617c:	4619      	mov	r1, r3
 800617e:	a310      	add	r3, pc, #64	; (adr r3, 80061c0 <lowlayer_scanFlow+0x238>)
 8006180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006184:	f7fa fa38 	bl	80005f8 <__aeabi_dmul>
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	4610      	mov	r0, r2
 800618e:	4619      	mov	r1, r3
 8006190:	a313      	add	r3, pc, #76	; (adr r3, 80061e0 <lowlayer_scanFlow+0x258>)
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	f7fa fb59 	bl	800084c <__aeabi_ddiv>
 800619a:	4602      	mov	r2, r0
 800619c:	460b      	mov	r3, r1
 800619e:	a112      	add	r1, pc, #72	; (adr r1, 80061e8 <lowlayer_scanFlow+0x260>)
 80061a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061a4:	f7fa f870 	bl	8000288 <__aeabi_dsub>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 80061ac:	491d      	ldr	r1, [pc, #116]	; (8006224 <lowlayer_scanFlow+0x29c>)
 80061ae:	e9c1 2306 	strd	r2, r3, [r1, #24]

		return TRUE;
 80061b2:	2301      	movs	r3, #1
	}
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	f3af 8000 	nop.w
 80061c0:	60000000 	.word	0x60000000
 80061c4:	400921fb 	.word	0x400921fb
 80061c8:	00000000 	.word	0x00000000
 80061cc:	40f38800 	.word	0x40f38800
 80061d0:	40000000 	.word	0x40000000
 80061d4:	bff9f17a 	.word	0xbff9f17a
 80061d8:	80000000 	.word	0x80000000
 80061dc:	40039716 	.word	0x40039716
 80061e0:	a0000000 	.word	0xa0000000
 80061e4:	40d3bca1 	.word	0x40d3bca1
 80061e8:	a0000000 	.word	0xa0000000
 80061ec:	4008330d 	.word	0x4008330d
 80061f0:	2000fef8 	.word	0x2000fef8
 80061f4:	2000fee8 	.word	0x2000fee8
 80061f8:	0801cacc 	.word	0x0801cacc
 80061fc:	40020c00 	.word	0x40020c00
 8006200:	2000fed8 	.word	0x2000fed8
 8006204:	2000feec 	.word	0x2000feec
 8006208:	2000ff20 	.word	0x2000ff20
 800620c:	2000fec8 	.word	0x2000fec8
 8006210:	2000fefc 	.word	0x2000fefc
 8006214:	0801c9f4 	.word	0x0801c9f4
 8006218:	0801ca08 	.word	0x0801ca08
 800621c:	0801ca1c 	.word	0x0801ca1c
 8006220:	0801ca30 	.word	0x0801ca30
 8006224:	2000ff00 	.word	0x2000ff00
 8006228:	40ff4000 	.word	0x40ff4000
 800622c:	4426aaab 	.word	0x4426aaab
 8006230:	400f1aa0 	.word	0x400f1aa0
 8006234:	00000000 	.word	0x00000000

08006238 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 8006240:	2300      	movs	r3, #0
 8006242:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 8006244:	2300      	movs	r3, #0
 8006246:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f94d 	bl	80064e8 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8006254:	a330      	add	r3, pc, #192	; (adr r3, 8006318 <lowlayer_goToSoftLimit+0xe0>)
 8006256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625a:	f7fa fc3f 	bl	8000adc <__aeabi_dcmplt>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d004      	beq.n	800626e <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 8006264:	2303      	movs	r3, #3
 8006266:	723b      	strb	r3, [r7, #8]
		check++;
 8006268:	7bfb      	ldrb	r3, [r7, #15]
 800626a:	3301      	adds	r3, #1
 800626c:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8006274:	a32a      	add	r3, pc, #168	; (adr r3, 8006320 <lowlayer_goToSoftLimit+0xe8>)
 8006276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627a:	f7fa fc4d 	bl	8000b18 <__aeabi_dcmpgt>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d004      	beq.n	800628e <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 8006284:	2305      	movs	r3, #5
 8006286:	727b      	strb	r3, [r7, #9]
		check++;
 8006288:	7bfb      	ldrb	r3, [r7, #15]
 800628a:	3301      	adds	r3, #1
 800628c:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8006294:	f04f 0200 	mov.w	r2, #0
 8006298:	f04f 0300 	mov.w	r3, #0
 800629c:	f7fa fc1e 	bl	8000adc <__aeabi_dcmplt>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d004      	beq.n	80062b0 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 80062a6:	2305      	movs	r3, #5
 80062a8:	72bb      	strb	r3, [r7, #10]
		check++;
 80062aa:	7bfb      	ldrb	r3, [r7, #15]
 80062ac:	3301      	adds	r3, #1
 80062ae:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 80062b6:	a31c      	add	r3, pc, #112	; (adr r3, 8006328 <lowlayer_goToSoftLimit+0xf0>)
 80062b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062bc:	f7fa fc2c 	bl	8000b18 <__aeabi_dcmpgt>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d004      	beq.n	80062d0 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 80062c6:	230a      	movs	r3, #10
 80062c8:	72fb      	strb	r3, [r7, #11]
		check++;
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	3301      	adds	r3, #1
 80062ce:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d013      	beq.n	80062fe <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 80062d6:	f997 0008 	ldrsb.w	r0, [r7, #8]
 80062da:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	425b      	negs	r3, r3
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	b259      	sxtb	r1, r3
 80062e6:	f997 200a 	ldrsb.w	r2, [r7, #10]
 80062ea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	425b      	negs	r3, r3
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	b25b      	sxtb	r3, r3
 80062f6:	f000 fb53 	bl	80069a0 <lowlayer_writePulse>
		return FALSE;
 80062fa:	2300      	movs	r3, #0
 80062fc:	e006      	b.n	800630c <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 80062fe:	2300      	movs	r3, #0
 8006300:	2200      	movs	r2, #0
 8006302:	2100      	movs	r1, #0
 8006304:	2000      	movs	r0, #0
 8006306:	f000 fb4b 	bl	80069a0 <lowlayer_writePulse>
		return TRUE;
 800630a:	2301      	movs	r3, #1
	}
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	f3af 8000 	nop.w
 8006318:	daaaaaab 	.word	0xdaaaaaab
 800631c:	bff7bc89 	.word	0xbff7bc89
 8006320:	88000000 	.word	0x88000000
 8006324:	4002d97c 	.word	0x4002d97c
 8006328:	daaaaaab 	.word	0xdaaaaaab
 800632c:	4007bc89 	.word	0x4007bc89

08006330 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 8006338:	f000 fc7c 	bl	8006c34 <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 800633c:	4b62      	ldr	r3, [pc, #392]	; (80064c8 <lowlayer_readTruePosition+0x198>)
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	4b62      	ldr	r3, [pc, #392]	; (80064cc <lowlayer_readTruePosition+0x19c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	ee07 3a90 	vmov	s15, r3
 800634a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800634e:	ee17 0a90 	vmov	r0, s15
 8006352:	f7fa f8f9 	bl	8000548 <__aeabi_f2d>
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	f7f9 ff97 	bl	800028c <__adddf3>
 800635e:	4602      	mov	r2, r0
 8006360:	460b      	mov	r3, r1
 8006362:	4610      	mov	r0, r2
 8006364:	4619      	mov	r1, r3
 8006366:	a34c      	add	r3, pc, #304	; (adr r3, 8006498 <lowlayer_readTruePosition+0x168>)
 8006368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636c:	f7fa f944 	bl	80005f8 <__aeabi_dmul>
 8006370:	4602      	mov	r2, r0
 8006372:	460b      	mov	r3, r1
 8006374:	4610      	mov	r0, r2
 8006376:	4619      	mov	r1, r3
 8006378:	a349      	add	r3, pc, #292	; (adr r3, 80064a0 <lowlayer_readTruePosition+0x170>)
 800637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637e:	f7fa fa65 	bl	800084c <__aeabi_ddiv>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4610      	mov	r0, r2
 8006388:	4619      	mov	r1, r3
 800638a:	a347      	add	r3, pc, #284	; (adr r3, 80064a8 <lowlayer_readTruePosition+0x178>)
 800638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006390:	f7f9 ff7a 	bl	8000288 <__aeabi_dsub>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
	true->Theta1 = HARD_LIM0_NEG
 8006398:	6879      	ldr	r1, [r7, #4]
 800639a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 800639e:	4b4a      	ldr	r3, [pc, #296]	; (80064c8 <lowlayer_readTruePosition+0x198>)
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	4b4a      	ldr	r3, [pc, #296]	; (80064cc <lowlayer_readTruePosition+0x19c>)
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	ee07 3a90 	vmov	s15, r3
 80063ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063b0:	ee17 0a90 	vmov	r0, s15
 80063b4:	f7fa f8c8 	bl	8000548 <__aeabi_f2d>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	f7f9 ff66 	bl	800028c <__adddf3>
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	4610      	mov	r0, r2
 80063c6:	4619      	mov	r1, r3
 80063c8:	a333      	add	r3, pc, #204	; (adr r3, 8006498 <lowlayer_readTruePosition+0x168>)
 80063ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ce:	f7fa f913 	bl	80005f8 <__aeabi_dmul>
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	4610      	mov	r0, r2
 80063d8:	4619      	mov	r1, r3
 80063da:	f04f 0200 	mov.w	r2, #0
 80063de:	4b3c      	ldr	r3, [pc, #240]	; (80064d0 <lowlayer_readTruePosition+0x1a0>)
 80063e0:	f7fa fa34 	bl	800084c <__aeabi_ddiv>
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	4610      	mov	r0, r2
 80063ea:	4619      	mov	r1, r3
 80063ec:	a330      	add	r3, pc, #192	; (adr r3, 80064b0 <lowlayer_readTruePosition+0x180>)
 80063ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f2:	f7f9 ff4b 	bl	800028c <__adddf3>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
	true->Theta2 = HARD_LIM1_POS
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 8006400:	4b31      	ldr	r3, [pc, #196]	; (80064c8 <lowlayer_readTruePosition+0x198>)
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	4b31      	ldr	r3, [pc, #196]	; (80064cc <lowlayer_readTruePosition+0x19c>)
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	ee07 3a90 	vmov	s15, r3
 800640e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006412:	eeb1 7a67 	vneg.f32	s14, s15
 8006416:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80064d4 <lowlayer_readTruePosition+0x1a4>
 800641a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800641e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80064d8 <lowlayer_readTruePosition+0x1a8>
 8006422:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006426:	ee17 0a90 	vmov	r0, s15
 800642a:	f7fa f88d 	bl	8000548 <__aeabi_f2d>
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
	true->D3	 = HARD_LIM2_NEG
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 8006438:	4b28      	ldr	r3, [pc, #160]	; (80064dc <lowlayer_readTruePosition+0x1ac>)
 800643a:	68da      	ldr	r2, [r3, #12]
 800643c:	4b28      	ldr	r3, [pc, #160]	; (80064e0 <lowlayer_readTruePosition+0x1b0>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	4618      	mov	r0, r3
 8006444:	f7fa f86e 	bl	8000524 <__aeabi_i2d>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	f7f9 ff1e 	bl	800028c <__adddf3>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	4610      	mov	r0, r2
 8006456:	4619      	mov	r1, r3
 8006458:	a30f      	add	r3, pc, #60	; (adr r3, 8006498 <lowlayer_readTruePosition+0x168>)
 800645a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645e:	f7fa f8cb 	bl	80005f8 <__aeabi_dmul>
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	4610      	mov	r0, r2
 8006468:	4619      	mov	r1, r3
 800646a:	a313      	add	r3, pc, #76	; (adr r3, 80064b8 <lowlayer_readTruePosition+0x188>)
 800646c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006470:	f7fa f9ec 	bl	800084c <__aeabi_ddiv>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	4610      	mov	r0, r2
 800647a:	4619      	mov	r1, r3
 800647c:	a310      	add	r3, pc, #64	; (adr r3, 80064c0 <lowlayer_readTruePosition+0x190>)
 800647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006482:	f7f9 ff03 	bl	800028c <__adddf3>
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
	true->Theta4 = HARD_LIM3_POS
 800648a:	6879      	ldr	r1, [r7, #4]
 800648c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
}
 8006490:	bf00      	nop
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	60000000 	.word	0x60000000
 800649c:	400921fb 	.word	0x400921fb
 80064a0:	00000000 	.word	0x00000000
 80064a4:	40f38800 	.word	0x40f38800
 80064a8:	40000000 	.word	0x40000000
 80064ac:	3ff9f17a 	.word	0x3ff9f17a
 80064b0:	80000000 	.word	0x80000000
 80064b4:	40039716 	.word	0x40039716
 80064b8:	a0000000 	.word	0xa0000000
 80064bc:	40d3bca1 	.word	0x40d3bca1
 80064c0:	a0000000 	.word	0xa0000000
 80064c4:	4008330d 	.word	0x4008330d
 80064c8:	2000fedc 	.word	0x2000fedc
 80064cc:	2000ff20 	.word	0x2000ff20
 80064d0:	40ff4000 	.word	0x40ff4000
 80064d4:	4426aaab 	.word	0x4426aaab
 80064d8:	400f1aa0 	.word	0x400f1aa0
 80064dc:	2000fec8 	.word	0x2000fec8
 80064e0:	2000fefc 	.word	0x2000fefc
 80064e4:	00000000 	.word	0x00000000

080064e8 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 80064e8:	b5b0      	push	{r4, r5, r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 80064f0:	4b53      	ldr	r3, [pc, #332]	; (8006640 <lowlayer_readSetPosition+0x158>)
 80064f2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80064f6:	4b53      	ldr	r3, [pc, #332]	; (8006644 <lowlayer_readSetPosition+0x15c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fa f812 	bl	8000524 <__aeabi_i2d>
 8006500:	4602      	mov	r2, r0
 8006502:	460b      	mov	r3, r1
 8006504:	f7f9 fec2 	bl	800028c <__adddf3>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	4610      	mov	r0, r2
 800650e:	4619      	mov	r1, r3
 8006510:	a345      	add	r3, pc, #276	; (adr r3, 8006628 <lowlayer_readSetPosition+0x140>)
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	f7fa f86f 	bl	80005f8 <__aeabi_dmul>
 800651a:	4602      	mov	r2, r0
 800651c:	460b      	mov	r3, r1
 800651e:	4610      	mov	r0, r2
 8006520:	4619      	mov	r1, r3
 8006522:	a343      	add	r3, pc, #268	; (adr r3, 8006630 <lowlayer_readSetPosition+0x148>)
 8006524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006528:	f7fa f990 	bl	800084c <__aeabi_ddiv>
 800652c:	4602      	mov	r2, r0
 800652e:	460b      	mov	r3, r1
 8006530:	4620      	mov	r0, r4
 8006532:	4629      	mov	r1, r5
 8006534:	f7f9 feaa 	bl	800028c <__adddf3>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	6879      	ldr	r1, [r7, #4]
 800653e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 8006542:	4b3f      	ldr	r3, [pc, #252]	; (8006640 <lowlayer_readSetPosition+0x158>)
 8006544:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8006548:	4b3e      	ldr	r3, [pc, #248]	; (8006644 <lowlayer_readSetPosition+0x15c>)
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	4618      	mov	r0, r3
 800654e:	f7f9 ffe9 	bl	8000524 <__aeabi_i2d>
 8006552:	4602      	mov	r2, r0
 8006554:	460b      	mov	r3, r1
 8006556:	f7f9 fe99 	bl	800028c <__adddf3>
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	4610      	mov	r0, r2
 8006560:	4619      	mov	r1, r3
 8006562:	a331      	add	r3, pc, #196	; (adr r3, 8006628 <lowlayer_readSetPosition+0x140>)
 8006564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006568:	f7fa f846 	bl	80005f8 <__aeabi_dmul>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4610      	mov	r0, r2
 8006572:	4619      	mov	r1, r3
 8006574:	f04f 0200 	mov.w	r2, #0
 8006578:	4b33      	ldr	r3, [pc, #204]	; (8006648 <lowlayer_readSetPosition+0x160>)
 800657a:	f7fa f967 	bl	800084c <__aeabi_ddiv>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	4620      	mov	r0, r4
 8006584:	4629      	mov	r1, r5
 8006586:	f7f9 fe81 	bl	800028c <__adddf3>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	6879      	ldr	r1, [r7, #4]
 8006590:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 8006594:	4b2a      	ldr	r3, [pc, #168]	; (8006640 <lowlayer_readSetPosition+0x158>)
 8006596:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800659a:	4b2a      	ldr	r3, [pc, #168]	; (8006644 <lowlayer_readSetPosition+0x15c>)
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	ee07 3a90 	vmov	s15, r3
 80065a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065a6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800664c <lowlayer_readSetPosition+0x164>
 80065aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80065ae:	ee16 0a90 	vmov	r0, s13
 80065b2:	f7f9 ffc9 	bl	8000548 <__aeabi_f2d>
 80065b6:	4602      	mov	r2, r0
 80065b8:	460b      	mov	r3, r1
 80065ba:	4620      	mov	r0, r4
 80065bc:	4629      	mov	r1, r5
 80065be:	f7f9 fe65 	bl	800028c <__adddf3>
 80065c2:	4602      	mov	r2, r0
 80065c4:	460b      	mov	r3, r1
 80065c6:	6879      	ldr	r1, [r7, #4]
 80065c8:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 80065cc:	4b1c      	ldr	r3, [pc, #112]	; (8006640 <lowlayer_readSetPosition+0x158>)
 80065ce:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80065d2:	4b1c      	ldr	r3, [pc, #112]	; (8006644 <lowlayer_readSetPosition+0x15c>)
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7f9 ffa4 	bl	8000524 <__aeabi_i2d>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	f7f9 fe54 	bl	800028c <__adddf3>
 80065e4:	4602      	mov	r2, r0
 80065e6:	460b      	mov	r3, r1
 80065e8:	4610      	mov	r0, r2
 80065ea:	4619      	mov	r1, r3
 80065ec:	a30e      	add	r3, pc, #56	; (adr r3, 8006628 <lowlayer_readSetPosition+0x140>)
 80065ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f2:	f7fa f801 	bl	80005f8 <__aeabi_dmul>
 80065f6:	4602      	mov	r2, r0
 80065f8:	460b      	mov	r3, r1
 80065fa:	4610      	mov	r0, r2
 80065fc:	4619      	mov	r1, r3
 80065fe:	a30e      	add	r3, pc, #56	; (adr r3, 8006638 <lowlayer_readSetPosition+0x150>)
 8006600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006604:	f7fa f922 	bl	800084c <__aeabi_ddiv>
 8006608:	4602      	mov	r2, r0
 800660a:	460b      	mov	r3, r1
 800660c:	4620      	mov	r0, r4
 800660e:	4629      	mov	r1, r5
 8006610:	f7f9 fe3c 	bl	800028c <__adddf3>
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	6879      	ldr	r1, [r7, #4]
 800661a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
}
 800661e:	bf00      	nop
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bdb0      	pop	{r4, r5, r7, pc}
 8006626:	bf00      	nop
 8006628:	60000000 	.word	0x60000000
 800662c:	400921fb 	.word	0x400921fb
 8006630:	00000000 	.word	0x00000000
 8006634:	40d38800 	.word	0x40d38800
 8006638:	a0000000 	.word	0xa0000000
 800663c:	40d3bca1 	.word	0x40d3bca1
 8006640:	2000ff00 	.word	0x2000ff00
 8006644:	2000fec8 	.word	0x2000fec8
 8006648:	40df4000 	.word	0x40df4000
 800664c:	42c80000 	.word	0x42c80000

08006650 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 8006650:	b084      	sub	sp, #16
 8006652:	b580      	push	{r7, lr}
 8006654:	b092      	sub	sp, #72	; 0x48
 8006656:	af00      	add	r7, sp, #0
 8006658:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 800665c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8006660:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006664:	a3c6      	add	r3, pc, #792	; (adr r3, 8006980 <lowlayer_computeAndWritePulse+0x330>)
 8006666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666a:	f7f9 fe0f 	bl	800028c <__adddf3>
 800666e:	4602      	mov	r2, r0
 8006670:	460b      	mov	r3, r1
 8006672:	4610      	mov	r0, r2
 8006674:	4619      	mov	r1, r3
 8006676:	a3c4      	add	r3, pc, #784	; (adr r3, 8006988 <lowlayer_computeAndWritePulse+0x338>)
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	f7f9 ffbc 	bl	80005f8 <__aeabi_dmul>
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	4610      	mov	r0, r2
 8006686:	4619      	mov	r1, r3
 8006688:	a3b7      	add	r3, pc, #732	; (adr r3, 8006968 <lowlayer_computeAndWritePulse+0x318>)
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	f7fa f8dd 	bl	800084c <__aeabi_ddiv>
 8006692:	4602      	mov	r2, r0
 8006694:	460b      	mov	r3, r1
 8006696:	ec43 2b17 	vmov	d7, r2, r3
 800669a:	eeb0 0a47 	vmov.f32	s0, s14
 800669e:	eef0 0a67 	vmov.f32	s1, s15
 80066a2:	f014 fc85 	bl	801afb0 <round>
 80066a6:	ec53 2b10 	vmov	r2, r3, d0
 80066aa:	4610      	mov	r0, r2
 80066ac:	4619      	mov	r1, r3
 80066ae:	f7fa fa7b 	bl	8000ba8 <__aeabi_d2uiz>
 80066b2:	4603      	mov	r3, r0
 80066b4:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 80066b6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80066ba:	a3b5      	add	r3, pc, #724	; (adr r3, 8006990 <lowlayer_computeAndWritePulse+0x340>)
 80066bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c0:	f7f9 fde4 	bl	800028c <__adddf3>
 80066c4:	4602      	mov	r2, r0
 80066c6:	460b      	mov	r3, r1
 80066c8:	4610      	mov	r0, r2
 80066ca:	4619      	mov	r1, r3
 80066cc:	f04f 0200 	mov.w	r2, #0
 80066d0:	4bb1      	ldr	r3, [pc, #708]	; (8006998 <lowlayer_computeAndWritePulse+0x348>)
 80066d2:	f7f9 ff91 	bl	80005f8 <__aeabi_dmul>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4610      	mov	r0, r2
 80066dc:	4619      	mov	r1, r3
 80066de:	a3a2      	add	r3, pc, #648	; (adr r3, 8006968 <lowlayer_computeAndWritePulse+0x318>)
 80066e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e4:	f7fa f8b2 	bl	800084c <__aeabi_ddiv>
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	ec43 2b17 	vmov	d7, r2, r3
 80066f0:	eeb0 0a47 	vmov.f32	s0, s14
 80066f4:	eef0 0a67 	vmov.f32	s1, s15
 80066f8:	f014 fc5a 	bl	801afb0 <round>
 80066fc:	ec53 2b10 	vmov	r2, r3, d0
 8006700:	4610      	mov	r0, r2
 8006702:	4619      	mov	r1, r3
 8006704:	f7fa fa50 	bl	8000ba8 <__aeabi_d2uiz>
 8006708:	4603      	mov	r3, r0
 800670a:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 800670c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006710:	f04f 0200 	mov.w	r2, #0
 8006714:	4ba1      	ldr	r3, [pc, #644]	; (800699c <lowlayer_computeAndWritePulse+0x34c>)
 8006716:	f7f9 ff6f 	bl	80005f8 <__aeabi_dmul>
 800671a:	4602      	mov	r2, r0
 800671c:	460b      	mov	r3, r1
 800671e:	ec43 2b17 	vmov	d7, r2, r3
 8006722:	eeb0 0a47 	vmov.f32	s0, s14
 8006726:	eef0 0a67 	vmov.f32	s1, s15
 800672a:	f014 fc41 	bl	801afb0 <round>
 800672e:	ec53 2b10 	vmov	r2, r3, d0
 8006732:	4610      	mov	r0, r2
 8006734:	4619      	mov	r1, r3
 8006736:	f7fa fa37 	bl	8000ba8 <__aeabi_d2uiz>
 800673a:	4603      	mov	r3, r0
 800673c:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 800673e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8006742:	a38b      	add	r3, pc, #556	; (adr r3, 8006970 <lowlayer_computeAndWritePulse+0x320>)
 8006744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006748:	f7f9 fda0 	bl	800028c <__adddf3>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	4610      	mov	r0, r2
 8006752:	4619      	mov	r1, r3
 8006754:	a388      	add	r3, pc, #544	; (adr r3, 8006978 <lowlayer_computeAndWritePulse+0x328>)
 8006756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675a:	f7f9 ff4d 	bl	80005f8 <__aeabi_dmul>
 800675e:	4602      	mov	r2, r0
 8006760:	460b      	mov	r3, r1
 8006762:	4610      	mov	r0, r2
 8006764:	4619      	mov	r1, r3
 8006766:	a380      	add	r3, pc, #512	; (adr r3, 8006968 <lowlayer_computeAndWritePulse+0x318>)
 8006768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676c:	f7fa f86e 	bl	800084c <__aeabi_ddiv>
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	ec43 2b17 	vmov	d7, r2, r3
 8006778:	eeb0 0a47 	vmov.f32	s0, s14
 800677c:	eef0 0a67 	vmov.f32	s1, s15
 8006780:	f014 fc16 	bl	801afb0 <round>
 8006784:	ec53 2b10 	vmov	r2, r3, d0
 8006788:	4610      	mov	r0, r2
 800678a:	4619      	mov	r1, r3
 800678c:	f7fa fa0c 	bl	8000ba8 <__aeabi_d2uiz>
 8006790:	4603      	mov	r3, r0
 8006792:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8006794:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006798:	a379      	add	r3, pc, #484	; (adr r3, 8006980 <lowlayer_computeAndWritePulse+0x330>)
 800679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679e:	f7f9 fd75 	bl	800028c <__adddf3>
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	4610      	mov	r0, r2
 80067a8:	4619      	mov	r1, r3
 80067aa:	a377      	add	r3, pc, #476	; (adr r3, 8006988 <lowlayer_computeAndWritePulse+0x338>)
 80067ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b0:	f7f9 ff22 	bl	80005f8 <__aeabi_dmul>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4610      	mov	r0, r2
 80067ba:	4619      	mov	r1, r3
 80067bc:	a36a      	add	r3, pc, #424	; (adr r3, 8006968 <lowlayer_computeAndWritePulse+0x318>)
 80067be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c2:	f7fa f843 	bl	800084c <__aeabi_ddiv>
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	ec43 2b17 	vmov	d7, r2, r3
 80067ce:	eeb0 0a47 	vmov.f32	s0, s14
 80067d2:	eef0 0a67 	vmov.f32	s1, s15
 80067d6:	f014 fbeb 	bl	801afb0 <round>
 80067da:	ec53 2b10 	vmov	r2, r3, d0
 80067de:	4610      	mov	r0, r2
 80067e0:	4619      	mov	r1, r3
 80067e2:	f7fa f9e1 	bl	8000ba8 <__aeabi_d2uiz>
 80067e6:	4603      	mov	r3, r0
 80067e8:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 80067ea:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 80067ee:	a368      	add	r3, pc, #416	; (adr r3, 8006990 <lowlayer_computeAndWritePulse+0x340>)
 80067f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f4:	f7f9 fd4a 	bl	800028c <__adddf3>
 80067f8:	4602      	mov	r2, r0
 80067fa:	460b      	mov	r3, r1
 80067fc:	4610      	mov	r0, r2
 80067fe:	4619      	mov	r1, r3
 8006800:	f04f 0200 	mov.w	r2, #0
 8006804:	4b64      	ldr	r3, [pc, #400]	; (8006998 <lowlayer_computeAndWritePulse+0x348>)
 8006806:	f7f9 fef7 	bl	80005f8 <__aeabi_dmul>
 800680a:	4602      	mov	r2, r0
 800680c:	460b      	mov	r3, r1
 800680e:	4610      	mov	r0, r2
 8006810:	4619      	mov	r1, r3
 8006812:	a355      	add	r3, pc, #340	; (adr r3, 8006968 <lowlayer_computeAndWritePulse+0x318>)
 8006814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006818:	f7fa f818 	bl	800084c <__aeabi_ddiv>
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	ec43 2b17 	vmov	d7, r2, r3
 8006824:	eeb0 0a47 	vmov.f32	s0, s14
 8006828:	eef0 0a67 	vmov.f32	s1, s15
 800682c:	f014 fbc0 	bl	801afb0 <round>
 8006830:	ec53 2b10 	vmov	r2, r3, d0
 8006834:	4610      	mov	r0, r2
 8006836:	4619      	mov	r1, r3
 8006838:	f7fa f9b6 	bl	8000ba8 <__aeabi_d2uiz>
 800683c:	4603      	mov	r3, r0
 800683e:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 8006840:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8006844:	f04f 0200 	mov.w	r2, #0
 8006848:	4b54      	ldr	r3, [pc, #336]	; (800699c <lowlayer_computeAndWritePulse+0x34c>)
 800684a:	f7f9 fed5 	bl	80005f8 <__aeabi_dmul>
 800684e:	4602      	mov	r2, r0
 8006850:	460b      	mov	r3, r1
 8006852:	ec43 2b17 	vmov	d7, r2, r3
 8006856:	eeb0 0a47 	vmov.f32	s0, s14
 800685a:	eef0 0a67 	vmov.f32	s1, s15
 800685e:	f014 fba7 	bl	801afb0 <round>
 8006862:	ec53 2b10 	vmov	r2, r3, d0
 8006866:	4610      	mov	r0, r2
 8006868:	4619      	mov	r1, r3
 800686a:	f7fa f99d 	bl	8000ba8 <__aeabi_d2uiz>
 800686e:	4603      	mov	r3, r0
 8006870:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 8006872:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8006876:	a33e      	add	r3, pc, #248	; (adr r3, 8006970 <lowlayer_computeAndWritePulse+0x320>)
 8006878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687c:	f7f9 fd06 	bl	800028c <__adddf3>
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	4610      	mov	r0, r2
 8006886:	4619      	mov	r1, r3
 8006888:	a33b      	add	r3, pc, #236	; (adr r3, 8006978 <lowlayer_computeAndWritePulse+0x328>)
 800688a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688e:	f7f9 feb3 	bl	80005f8 <__aeabi_dmul>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	4610      	mov	r0, r2
 8006898:	4619      	mov	r1, r3
 800689a:	a333      	add	r3, pc, #204	; (adr r3, 8006968 <lowlayer_computeAndWritePulse+0x318>)
 800689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a0:	f7f9 ffd4 	bl	800084c <__aeabi_ddiv>
 80068a4:	4602      	mov	r2, r0
 80068a6:	460b      	mov	r3, r1
 80068a8:	ec43 2b17 	vmov	d7, r2, r3
 80068ac:	eeb0 0a47 	vmov.f32	s0, s14
 80068b0:	eef0 0a67 	vmov.f32	s1, s15
 80068b4:	f014 fb7c 	bl	801afb0 <round>
 80068b8:	ec53 2b10 	vmov	r2, r3, d0
 80068bc:	4610      	mov	r0, r2
 80068be:	4619      	mov	r1, r3
 80068c0:	f7fa f972 	bl	8000ba8 <__aeabi_d2uiz>
 80068c4:	4603      	mov	r3, r0
 80068c6:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 80068c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	461a      	mov	r2, r3
 80068d0:	f04f 0300 	mov.w	r3, #0
 80068d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 80068d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	461a      	mov	r2, r3
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 80068e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	461a      	mov	r2, r3
 80068f0:	f04f 0300 	mov.w	r3, #0
 80068f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 80068f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	461a      	mov	r2, r3
 8006900:	f04f 0300 	mov.w	r3, #0
 8006904:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (abs(delta_var0) > 127
 8006908:	6a3b      	ldr	r3, [r7, #32]
 800690a:	2b00      	cmp	r3, #0
 800690c:	bfb8      	it	lt
 800690e:	425b      	neglt	r3, r3
 8006910:	2b7f      	cmp	r3, #127	; 0x7f
 8006912:	dc11      	bgt.n	8006938 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var1) > 127
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	2b00      	cmp	r3, #0
 8006918:	bfb8      	it	lt
 800691a:	425b      	neglt	r3, r3
 800691c:	2b7f      	cmp	r3, #127	; 0x7f
 800691e:	dc0b      	bgt.n	8006938 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var2) > 127
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	2b00      	cmp	r3, #0
 8006924:	bfb8      	it	lt
 8006926:	425b      	neglt	r3, r3
 8006928:	2b7f      	cmp	r3, #127	; 0x7f
 800692a:	dc05      	bgt.n	8006938 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var3) > 127) {
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2b00      	cmp	r3, #0
 8006930:	bfb8      	it	lt
 8006932:	425b      	neglt	r3, r3
 8006934:	2b7f      	cmp	r3, #127	; 0x7f
 8006936:	dd01      	ble.n	800693c <lowlayer_computeAndWritePulse+0x2ec>
		return FALSE;
 8006938:	2300      	movs	r3, #0
 800693a:	e00c      	b.n	8006956 <lowlayer_computeAndWritePulse+0x306>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 800693c:	f997 0020 	ldrsb.w	r0, [r7, #32]
 8006940:	f997 1018 	ldrsb.w	r1, [r7, #24]
 8006944:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8006948:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800694c:	f000 f828 	bl	80069a0 <lowlayer_writePulse>
 8006950:	4603      	mov	r3, r0
 8006952:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 8006954:	79fb      	ldrb	r3, [r7, #7]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3748      	adds	r7, #72	; 0x48
 800695a:	46bd      	mov	sp, r7
 800695c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006960:	b004      	add	sp, #16
 8006962:	4770      	bx	lr
 8006964:	f3af 8000 	nop.w
 8006968:	60000000 	.word	0x60000000
 800696c:	401921fb 	.word	0x401921fb
 8006970:	daaaaaab 	.word	0xdaaaaaab
 8006974:	4007bc89 	.word	0x4007bc89
 8006978:	a0000000 	.word	0xa0000000
 800697c:	40d3bca1 	.word	0x40d3bca1
 8006980:	daaaaaab 	.word	0xdaaaaaab
 8006984:	3ff7bc89 	.word	0x3ff7bc89
 8006988:	00000000 	.word	0x00000000
 800698c:	40d38800 	.word	0x40d38800
 8006990:	88000000 	.word	0x88000000
 8006994:	4002d97c 	.word	0x4002d97c
 8006998:	40df4000 	.word	0x40df4000
 800699c:	40590000 	.word	0x40590000

080069a0 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 80069a0:	b590      	push	{r4, r7, lr}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	4604      	mov	r4, r0
 80069a8:	4608      	mov	r0, r1
 80069aa:	4611      	mov	r1, r2
 80069ac:	461a      	mov	r2, r3
 80069ae:	4623      	mov	r3, r4
 80069b0:	71fb      	strb	r3, [r7, #7]
 80069b2:	4603      	mov	r3, r0
 80069b4:	71bb      	strb	r3, [r7, #6]
 80069b6:	460b      	mov	r3, r1
 80069b8:	717b      	strb	r3, [r7, #5]
 80069ba:	4613      	mov	r3, r2
 80069bc:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 80069be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	da06      	bge.n	80069d4 <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 80069c6:	79fb      	ldrb	r3, [r7, #7]
 80069c8:	425b      	negs	r3, r3
 80069ca:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 80069cc:	79fb      	ldrb	r3, [r7, #7]
 80069ce:	425b      	negs	r3, r3
 80069d0:	75fb      	strb	r3, [r7, #23]
 80069d2:	e006      	b.n	80069e2 <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 80069d4:	79fb      	ldrb	r3, [r7, #7]
 80069d6:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 80069d8:	79fb      	ldrb	r3, [r7, #7]
 80069da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80069de:	b25b      	sxtb	r3, r3
 80069e0:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 80069e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	da06      	bge.n	80069f8 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 80069ea:	79bb      	ldrb	r3, [r7, #6]
 80069ec:	425b      	negs	r3, r3
 80069ee:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 80069f0:	79bb      	ldrb	r3, [r7, #6]
 80069f2:	425b      	negs	r3, r3
 80069f4:	75bb      	strb	r3, [r7, #22]
 80069f6:	e006      	b.n	8006a06 <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 80069f8:	79bb      	ldrb	r3, [r7, #6]
 80069fa:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 80069fc:	79bb      	ldrb	r3, [r7, #6]
 80069fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a02:	b25b      	sxtb	r3, r3
 8006a04:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 8006a06:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	da0b      	bge.n	8006a26 <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 8006a0e:	797b      	ldrb	r3, [r7, #5]
 8006a10:	425b      	negs	r3, r3
 8006a12:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 8006a14:	797b      	ldrb	r3, [r7, #5]
 8006a16:	425b      	negs	r3, r3
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	b25b      	sxtb	r3, r3
 8006a1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a20:	b25b      	sxtb	r3, r3
 8006a22:	757b      	strb	r3, [r7, #21]
 8006a24:	e003      	b.n	8006a2e <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 8006a26:	797b      	ldrb	r3, [r7, #5]
 8006a28:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 8006a2a:	797b      	ldrb	r3, [r7, #5]
 8006a2c:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 8006a2e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	da06      	bge.n	8006a44 <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 8006a36:	793b      	ldrb	r3, [r7, #4]
 8006a38:	425b      	negs	r3, r3
 8006a3a:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 8006a3c:	793b      	ldrb	r3, [r7, #4]
 8006a3e:	425b      	negs	r3, r3
 8006a40:	753b      	strb	r3, [r7, #20]
 8006a42:	e006      	b.n	8006a52 <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 8006a44:	793b      	ldrb	r3, [r7, #4]
 8006a46:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 8006a48:	793b      	ldrb	r3, [r7, #4]
 8006a4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a4e:	b25b      	sxtb	r3, r3
 8006a50:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 8006a52:	7cfb      	ldrb	r3, [r7, #19]
 8006a54:	2b4b      	cmp	r3, #75	; 0x4b
 8006a56:	d808      	bhi.n	8006a6a <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 8006a58:	7cbb      	ldrb	r3, [r7, #18]
 8006a5a:	2b78      	cmp	r3, #120	; 0x78
 8006a5c:	d805      	bhi.n	8006a6a <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 8006a5e:	7c7b      	ldrb	r3, [r7, #17]
 8006a60:	2b7d      	cmp	r3, #125	; 0x7d
 8006a62:	d802      	bhi.n	8006a6a <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 8006a64:	7c3b      	ldrb	r3, [r7, #16]
 8006a66:	2b65      	cmp	r3, #101	; 0x65
 8006a68:	d901      	bls.n	8006a6e <lowlayer_writePulse+0xce>
		return FALSE;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	e04b      	b.n	8006b06 <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a74:	4826      	ldr	r0, [pc, #152]	; (8006b10 <lowlayer_writePulse+0x170>)
 8006a76:	f005 ff4f 	bl	800c918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a80:	4824      	ldr	r0, [pc, #144]	; (8006b14 <lowlayer_writePulse+0x174>)
 8006a82:	f005 ff49 	bl	800c918 <HAL_GPIO_WritePin>
	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 8006a86:	7dfb      	ldrb	r3, [r7, #23]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8006a8e:	f7fd fe95 	bl	80047bc <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 8006a92:	7dbb      	ldrb	r3, [r7, #22]
 8006a94:	4619      	mov	r1, r3
 8006a96:	4820      	ldr	r0, [pc, #128]	; (8006b18 <lowlayer_writePulse+0x178>)
 8006a98:	f7fd fe90 	bl	80047bc <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 8006a9c:	7d7b      	ldrb	r3, [r7, #21]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	481e      	ldr	r0, [pc, #120]	; (8006b1c <lowlayer_writePulse+0x17c>)
 8006aa2:	f7fd fe8b 	bl	80047bc <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 8006aa6:	7d3b      	ldrb	r3, [r7, #20]
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	481d      	ldr	r0, [pc, #116]	; (8006b20 <lowlayer_writePulse+0x180>)
 8006aac:	f7fd fe86 	bl	80047bc <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 8006ab0:	2364      	movs	r3, #100	; 0x64
 8006ab2:	73fb      	strb	r3, [r7, #15]
	
	 while (delay--);
 8006ab4:	bf00      	nop
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
 8006ab8:	1e5a      	subs	r2, r3, #1
 8006aba:	73fa      	strb	r2, [r7, #15]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1fa      	bne.n	8006ab6 <lowlayer_writePulse+0x116>

//	int16_t wow = HAL_GPIO_ReadPin(CPLD_BUSY_GPIO_Port, CPLD_BUSY_Pin);
//	LOG_REPORT(" Busy: ", wow);
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ac6:	4813      	ldr	r0, [pc, #76]	; (8006b14 <lowlayer_writePulse+0x174>)
 8006ac8:	f005 ff26 	bl	800c918 <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 8006acc:	4b15      	ldr	r3, [pc, #84]	; (8006b24 <lowlayer_writePulse+0x184>)
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	4a13      	ldr	r2, [pc, #76]	; (8006b24 <lowlayer_writePulse+0x184>)
 8006ad8:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 8006ada:	4b12      	ldr	r3, [pc, #72]	; (8006b24 <lowlayer_writePulse+0x184>)
 8006adc:	685a      	ldr	r2, [r3, #4]
 8006ade:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	4a0f      	ldr	r2, [pc, #60]	; (8006b24 <lowlayer_writePulse+0x184>)
 8006ae6:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 8006ae8:	4b0e      	ldr	r3, [pc, #56]	; (8006b24 <lowlayer_writePulse+0x184>)
 8006aea:	689a      	ldr	r2, [r3, #8]
 8006aec:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006af0:	4413      	add	r3, r2
 8006af2:	4a0c      	ldr	r2, [pc, #48]	; (8006b24 <lowlayer_writePulse+0x184>)
 8006af4:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 8006af6:	4b0b      	ldr	r3, [pc, #44]	; (8006b24 <lowlayer_writePulse+0x184>)
 8006af8:	68da      	ldr	r2, [r3, #12]
 8006afa:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8006afe:	4413      	add	r3, r2
 8006b00:	4a08      	ldr	r2, [pc, #32]	; (8006b24 <lowlayer_writePulse+0x184>)
 8006b02:	60d3      	str	r3, [r2, #12]

	return TRUE;
 8006b04:	2301      	movs	r3, #1
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	371c      	adds	r7, #28
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd90      	pop	{r4, r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	40020000 	.word	0x40020000
 8006b14:	40020c00 	.word	0x40020c00
 8006b18:	60000002 	.word	0x60000002
 8006b1c:	60000004 	.word	0x60000004
 8006b20:	60000006 	.word	0x60000006
 8006b24:	2000fec8 	.word	0x2000fec8

08006b28 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 8006b2e:	2364      	movs	r3, #100	; 0x64
 8006b30:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 8006b32:	2201      	movs	r2, #1
 8006b34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b38:	4809      	ldr	r0, [pc, #36]	; (8006b60 <lowlayer_resetEncoder+0x38>)
 8006b3a:	f005 feed 	bl	800c918 <HAL_GPIO_WritePin>
	while (delay--);
 8006b3e:	bf00      	nop
 8006b40:	79fb      	ldrb	r3, [r7, #7]
 8006b42:	1e5a      	subs	r2, r3, #1
 8006b44:	71fa      	strb	r2, [r7, #7]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1fa      	bne.n	8006b40 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b50:	4803      	ldr	r0, [pc, #12]	; (8006b60 <lowlayer_resetEncoder+0x38>)
 8006b52:	f005 fee1 	bl	800c918 <HAL_GPIO_WritePin>
}
 8006b56:	bf00      	nop
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	40020c00 	.word	0x40020c00

08006b64 <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 8006b6a:	4805      	ldr	r0, [pc, #20]	; (8006b80 <lowlayer_readLimitSwitch+0x1c>)
 8006b6c:	f7fd fe35 	bl	80047da <FSMC_Read>
 8006b70:	4603      	mov	r3, r0
 8006b72:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 8006b74:	88fb      	ldrh	r3, [r7, #6]
 8006b76:	b2db      	uxtb	r3, r3
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	60000020 	.word	0x60000020

08006b84 <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 8006b8e:	79fb      	ldrb	r3, [r7, #7]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d81c      	bhi.n	8006bce <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 8006b94:	79fb      	ldrb	r3, [r7, #7]
 8006b96:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006b9a:	3310      	adds	r3, #16
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fd fe1b 	bl	80047da <FSMC_Read>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 8006ba8:	79fb      	ldrb	r3, [r7, #7]
 8006baa:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006bae:	3310      	adds	r3, #16
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	3302      	adds	r3, #2
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fd fe10 	bl	80047da <FSMC_Read>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8006bbe:	893b      	ldrh	r3, [r7, #8]
 8006bc0:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	041a      	lsls	r2, r3, #16
 8006bc6:	897b      	ldrh	r3, [r7, #10]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	60fb      	str	r3, [r7, #12]
 8006bcc:	e001      	b.n	8006bd2 <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	4603      	mov	r3, r0
 8006be4:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 8006be6:	79fb      	ldrb	r3, [r7, #7]
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d81c      	bhi.n	8006c26 <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 8006bec:	79fb      	ldrb	r3, [r7, #7]
 8006bee:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006bf2:	3318      	adds	r3, #24
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fd fdef 	bl	80047da <FSMC_Read>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 8006c00:	79fb      	ldrb	r3, [r7, #7]
 8006c02:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006c06:	3318      	adds	r3, #24
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	3302      	adds	r3, #2
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7fd fde4 	bl	80047da <FSMC_Read>
 8006c12:	4603      	mov	r3, r0
 8006c14:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8006c16:	893b      	ldrh	r3, [r7, #8]
 8006c18:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	041a      	lsls	r2, r3, #16
 8006c1e:	897b      	ldrh	r3, [r7, #10]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	e001      	b.n	8006c2a <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 8006c26:	2300      	movs	r3, #0
 8006c28:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 8006c34:	b590      	push	{r4, r7, lr}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	71fb      	strb	r3, [r7, #7]
 8006c3e:	e00b      	b.n	8006c58 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 8006c40:	79fc      	ldrb	r4, [r7, #7]
 8006c42:	79fb      	ldrb	r3, [r7, #7]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7ff ff9d 	bl	8006b84 <lowlayer_readEncoder>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	4a06      	ldr	r2, [pc, #24]	; (8006c68 <lowlayer_updateEncoder+0x34>)
 8006c4e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8006c52:	79fb      	ldrb	r3, [r7, #7]
 8006c54:	3301      	adds	r3, #1
 8006c56:	71fb      	strb	r3, [r7, #7]
 8006c58:	79fb      	ldrb	r3, [r7, #7]
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d9f0      	bls.n	8006c40 <lowlayer_updateEncoder+0xc>
	}
}
 8006c5e:	bf00      	nop
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd90      	pop	{r4, r7, pc}
 8006c68:	2000fedc 	.word	0x2000fedc

08006c6c <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 8006c6c:	b590      	push	{r4, r7, lr}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8006c72:	2300      	movs	r3, #0
 8006c74:	71fb      	strb	r3, [r7, #7]
 8006c76:	e00b      	b.n	8006c90 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 8006c78:	79fc      	ldrb	r4, [r7, #7]
 8006c7a:	79fb      	ldrb	r3, [r7, #7]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7ff ffad 	bl	8006bdc <lowlayer_readCapture>
 8006c82:	4603      	mov	r3, r0
 8006c84:	4a06      	ldr	r2, [pc, #24]	; (8006ca0 <lowlayer_updateCapture+0x34>)
 8006c86:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8006c8a:	79fb      	ldrb	r3, [r7, #7]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	71fb      	strb	r3, [r7, #7]
 8006c90:	79fb      	ldrb	r3, [r7, #7]
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d9f0      	bls.n	8006c78 <lowlayer_updateCapture+0xc>
	}
}
 8006c96:	bf00      	nop
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd90      	pop	{r4, r7, pc}
 8006ca0:	2000feec 	.word	0x2000feec

08006ca4 <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 8006caa:	f7ff ff5b 	bl	8006b64 <lowlayer_readLimitSwitch>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	71fb      	strb	r3, [r7, #7]
 8006cb6:	e00d      	b.n	8006cd4 <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 8006cb8:	79ba      	ldrb	r2, [r7, #6]
 8006cba:	79fb      	ldrb	r3, [r7, #7]
 8006cbc:	fa42 f303 	asr.w	r3, r2, r3
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	79fb      	ldrb	r3, [r7, #7]
 8006cc4:	f002 0201 	and.w	r2, r2, #1
 8006cc8:	b2d1      	uxtb	r1, r2
 8006cca:	4a06      	ldr	r2, [pc, #24]	; (8006ce4 <lowlayer_updateLimit+0x40>)
 8006ccc:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 8006cce:	79fb      	ldrb	r3, [r7, #7]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	71fb      	strb	r3, [r7, #7]
 8006cd4:	79fb      	ldrb	r3, [r7, #7]
 8006cd6:	2b03      	cmp	r3, #3
 8006cd8:	d9ee      	bls.n	8006cb8 <lowlayer_updateLimit+0x14>
	}
}
 8006cda:	bf00      	nop
 8006cdc:	bf00      	nop
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	2000fee8 	.word	0x2000fee8

08006ce8 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	4603      	mov	r3, r0
 8006cf0:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 8006cf2:	79fb      	ldrb	r3, [r7, #7]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d006      	beq.n	8006d06 <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006cfe:	4807      	ldr	r0, [pc, #28]	; (8006d1c <lowlayer_setOutput+0x34>)
 8006d00:	f005 fe0a 	bl	800c918 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 8006d04:	e005      	b.n	8006d12 <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 8006d06:	2200      	movs	r2, #0
 8006d08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d0c:	4803      	ldr	r0, [pc, #12]	; (8006d1c <lowlayer_setOutput+0x34>)
 8006d0e:	f005 fe03 	bl	800c918 <HAL_GPIO_WritePin>
}
 8006d12:	bf00      	nop
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	40020400 	.word	0x40020400

08006d20 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 8006d20:	b580      	push	{r7, lr}
 8006d22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 8006d24:	2201      	movs	r2, #1
 8006d26:	2140      	movs	r1, #64	; 0x40
 8006d28:	4802      	ldr	r0, [pc, #8]	; (8006d34 <lowlayer_CPLD_Init+0x14>)
 8006d2a:	f005 fdf5 	bl	800c918 <HAL_GPIO_WritePin>
}
 8006d2e:	bf00      	nop
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	40020c00 	.word	0x40020c00

08006d38 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d42:	4808      	ldr	r0, [pc, #32]	; (8006d64 <lowlayer_stepMotorInit+0x2c>)
 8006d44:	f005 fde8 	bl	800c918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d4e:	4805      	ldr	r0, [pc, #20]	; (8006d64 <lowlayer_stepMotorInit+0x2c>)
 8006d50:	f005 fde2 	bl	800c918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 8006d54:	2201      	movs	r2, #1
 8006d56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d5a:	4802      	ldr	r0, [pc, #8]	; (8006d64 <lowlayer_stepMotorInit+0x2c>)
 8006d5c:	f005 fddc 	bl	800c918 <HAL_GPIO_WritePin>
}
 8006d60:	bf00      	nop
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	40020000 	.word	0x40020000

08006d68 <scaraStartup>:
//SCARA_Gcode_Cor_TypeDef		Gcode_Cor[125];

Trajectory_TargetTypeDef	joint_taget[4] = {  TRAJECTORY_J0, TRAJECTORY_J1,
												TRAJECTORY_J2, TRAJECTORY_J3};

void				scaraStartup(void) {
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 8006d6c:	f7ff ffd8 	bl	8006d20 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 8006d70:	f7ff ffe2 	bl	8006d38 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 8006d74:	f7ff fed8 	bl	8006b28 <lowlayer_resetEncoder>
	//lowlayer_writePulse(0, 0, 0, 0);
}
 8006d78:	bf00      	nop
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	0000      	movs	r0, r0
	...

08006d80 <scaraInitDuty>:
	return SCARA_STATUS_OK;
	
}

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8006d80:	b084      	sub	sp, #16
 8006d82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d84:	ed2d 8b02 	vpush	{d8}
 8006d88:	f5ad 7d7d 	sub.w	sp, sp, #1012	; 0x3f4
 8006d8c:	af90      	add	r7, sp, #576	; 0x240
 8006d8e:	f507 74e8 	add.w	r4, r7, #464	; 0x1d0
 8006d92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if(DUTY_SPACE_TASK == command.space_type) {
 8006d96:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f040 839a 	bne.w	80074d4 <scaraInitDuty+0x754>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8006da0:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 8006da4:	a395      	add	r3, pc, #596	; (adr r3, 8006ffc <scaraInitDuty+0x27c>)
 8006da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006daa:	f7f9 fc25 	bl	80005f8 <__aeabi_dmul>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	4610      	mov	r0, r2
 8006db4:	4619      	mov	r1, r3
 8006db6:	f04f 0200 	mov.w	r2, #0
 8006dba:	4b8b      	ldr	r3, [pc, #556]	; (8006fe8 <scaraInitDuty+0x268>)
 8006dbc:	f7f9 fd46 	bl	800084c <__aeabi_ddiv>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8006dc8:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d134      	bne.n	8006e3a <scaraInitDuty+0xba>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8006dd0:	4b86      	ldr	r3, [pc, #536]	; (8006fec <scaraInitDuty+0x26c>)
 8006dd2:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006dd6:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006dda:	f7f9 fa57 	bl	800028c <__adddf3>
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	f107 0108 	add.w	r1, r7, #8
 8006de6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8006dea:	4b80      	ldr	r3, [pc, #512]	; (8006fec <scaraInitDuty+0x26c>)
 8006dec:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006df0:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8006df4:	f7f9 fa4a 	bl	800028c <__adddf3>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	f107 0108 	add.w	r1, r7, #8
 8006e00:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8006e04:	4b79      	ldr	r3, [pc, #484]	; (8006fec <scaraInitDuty+0x26c>)
 8006e06:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8006e0a:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8006e0e:	f7f9 fa3d 	bl	800028c <__adddf3>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	f107 0108 	add.w	r1, r7, #8
 8006e1a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8006e1e:	4b73      	ldr	r3, [pc, #460]	; (8006fec <scaraInitDuty+0x26c>)
 8006e20:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006e24:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8006e28:	f7f9 fa30 	bl	800028c <__adddf3>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	f107 0108 	add.w	r1, r7, #8
 8006e34:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8006e38:	e01f      	b.n	8006e7a <scaraInitDuty+0xfa>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8006e3a:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d118      	bne.n	8006e74 <scaraInitDuty+0xf4>
			target_point.x 		= command.target_point.x;
 8006e42:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006e46:	f107 0108 	add.w	r1, r7, #8
 8006e4a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 8006e4e:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8006e52:	f107 0108 	add.w	r1, r7, #8
 8006e56:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 8006e5a:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8006e5e:	f107 0108 	add.w	r1, r7, #8
 8006e62:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 8006e66:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8006e6a:	f107 0108 	add.w	r1, r7, #8
 8006e6e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8006e72:	e002      	b.n	8006e7a <scaraInitDuty+0xfa>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8006e74:	230c      	movs	r3, #12
 8006e76:	f000 bed7 	b.w	8007c28 <scaraInitDuty+0xea8>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 8006e7a:	f107 0308 	add.w	r3, r7, #8
 8006e7e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006e82:	4b5a      	ldr	r3, [pc, #360]	; (8006fec <scaraInitDuty+0x26c>)
 8006e84:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006e88:	f7f9 f9fe 	bl	8000288 <__aeabi_dsub>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	460b      	mov	r3, r1
 8006e90:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
		dir_angle = 1;
 8006e94:	2301      	movs	r3, #1
 8006e96:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
		if ( angle_s < 0) {
 8006e9a:	f04f 0200 	mov.w	r2, #0
 8006e9e:	f04f 0300 	mov.w	r3, #0
 8006ea2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8006ea6:	f7f9 fe19 	bl	8000adc <__aeabi_dcmplt>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <scaraInitDuty+0x136>
			dir_angle = -1;
 8006eb0:	23ff      	movs	r3, #255	; 0xff
 8006eb2:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
//		if(positionCurrent.roll + angle_s < -3.14 || positionCurrent.roll + angle_s > 3.14){
//			dir_angle = -dir_angle;
//			angle_s = (2*PI - fabs(angle_s))*dir_angle;
//		}

		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 8006eb6:	4b4e      	ldr	r3, [pc, #312]	; (8006ff0 <scaraInitDuty+0x270>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 8006ebc:	4b4b      	ldr	r3, [pc, #300]	; (8006fec <scaraInitDuty+0x26c>)
 8006ebe:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006ec2:	494b      	ldr	r1, [pc, #300]	; (8006ff0 <scaraInitDuty+0x270>)
 8006ec4:	f501 6182 	add.w	r1, r1, #1040	; 0x410
 8006ec8:	e9c1 2300 	strd	r2, r3, [r1]
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 8006ecc:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d120      	bne.n	8006f16 <scaraInitDuty+0x196>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 8006ed4:	4b46      	ldr	r3, [pc, #280]	; (8006ff0 <scaraInitDuty+0x270>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 8006eda:	4c44      	ldr	r4, [pc, #272]	; (8006fec <scaraInitDuty+0x26c>)
 8006edc:	f107 0208 	add.w	r2, r7, #8
 8006ee0:	ab2e      	add	r3, sp, #184	; 0xb8
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	22c0      	movs	r2, #192	; 0xc0
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f00f fb32 	bl	8016550 <memcpy>
 8006eec:	4668      	mov	r0, sp
 8006eee:	f104 0308 	add.w	r3, r4, #8
 8006ef2:	22b8      	movs	r2, #184	; 0xb8
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	f00f fb2b 	bl	8016550 <memcpy>
 8006efa:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006efe:	483d      	ldr	r0, [pc, #244]	; (8006ff4 <scaraInitDuty+0x274>)
 8006f00:	f000 fea6 	bl	8007c50 <scaraInitLine>
 8006f04:	4603      	mov	r3, r0
 8006f06:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
			total_s = myDUTY.task.path.line.total_s;
 8006f0a:	4b39      	ldr	r3, [pc, #228]	; (8006ff0 <scaraInitDuty+0x270>)
 8006f0c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006f10:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
 8006f14:	e060      	b.n	8006fd8 <scaraInitDuty+0x258>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 8006f16:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d14c      	bne.n	8006fb8 <scaraInitDuty+0x238>
			SCARA_PositionTypeDef	center_point;
			target_point.z = positionCurrent.z;
 8006f1e:	4b33      	ldr	r3, [pc, #204]	; (8006fec <scaraInitDuty+0x26c>)
 8006f20:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006f24:	f107 0108 	add.w	r1, r7, #8
 8006f28:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

			center_point.x 		= positionCurrent.x + command.sub_point.x;
 8006f2c:	4b2f      	ldr	r3, [pc, #188]	; (8006fec <scaraInitDuty+0x26c>)
 8006f2e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006f32:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8006f36:	f7f9 f9a9 	bl	800028c <__adddf3>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			center_point.y 		= positionCurrent.y + command.sub_point.y;
 8006f42:	4b2a      	ldr	r3, [pc, #168]	; (8006fec <scaraInitDuty+0x26c>)
 8006f44:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006f48:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8006f4c:	f7f9 f99e 	bl	800028c <__adddf3>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			center_point.z 		= positionCurrent.z;
 8006f58:	4b24      	ldr	r3, [pc, #144]	; (8006fec <scaraInitDuty+0x26c>)
 8006f5a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006f5e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 8006f62:	4b23      	ldr	r3, [pc, #140]	; (8006ff0 <scaraInitDuty+0x270>)
 8006f64:	2201      	movs	r2, #1
 8006f66:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8006f68:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006f6c:	4c1f      	ldr	r4, [pc, #124]	; (8006fec <scaraInitDuty+0x26c>)
 8006f6e:	938e      	str	r3, [sp, #568]	; 0x238
 8006f70:	a85e      	add	r0, sp, #376	; 0x178
 8006f72:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006f76:	22c0      	movs	r2, #192	; 0xc0
 8006f78:	4619      	mov	r1, r3
 8006f7a:	f00f fae9 	bl	8016550 <memcpy>
 8006f7e:	f107 0208 	add.w	r2, r7, #8
 8006f82:	ab2e      	add	r3, sp, #184	; 0xb8
 8006f84:	4611      	mov	r1, r2
 8006f86:	22c0      	movs	r2, #192	; 0xc0
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f00f fae1 	bl	8016550 <memcpy>
 8006f8e:	4668      	mov	r0, sp
 8006f90:	f104 0308 	add.w	r3, r4, #8
 8006f94:	22b8      	movs	r2, #184	; 0xb8
 8006f96:	4619      	mov	r1, r3
 8006f98:	f00f fada 	bl	8016550 <memcpy>
 8006f9c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006fa0:	4815      	ldr	r0, [pc, #84]	; (8006ff8 <scaraInitDuty+0x278>)
 8006fa2:	f000 ff09 	bl	8007db8 <scaraInitCircle>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
										positionCurrent,
										target_point,
										center_point,
										command.arc_dir );
			total_s = myDUTY.task.path.circle.total_s;
 8006fac:	4b10      	ldr	r3, [pc, #64]	; (8006ff0 <scaraInitDuty+0x270>)
 8006fae:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8006fb2:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
 8006fb6:	e00f      	b.n	8006fd8 <scaraInitDuty+0x258>

		}else if(DUTY_PATH_BEZIER_CURVE == command.path_type){
 8006fb8:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d108      	bne.n	8006fd2 <scaraInitDuty+0x252>
			myDUTY.task.path.path_type = DUTY_PATH_BEZIER_CURVE;
 8006fc0:	4b0b      	ldr	r3, [pc, #44]	; (8006ff0 <scaraInitDuty+0x270>)
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	721a      	strb	r2, [r3, #8]
			myDUTY.task.path.line.z0 = command.target_point.z;
 8006fc6:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8006fca:	4909      	ldr	r1, [pc, #36]	; (8006ff0 <scaraInitDuty+0x270>)
 8006fcc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8006fd0:	e002      	b.n	8006fd8 <scaraInitDuty+0x258>
		}else {
			return SCARA_STATUS_ERROR_TASK;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	f000 be28 	b.w	8007c28 <scaraInitDuty+0xea8>
		}

		if ( SCARA_STATUS_OK != status) {
 8006fd8:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d011      	beq.n	8007004 <scaraInitDuty+0x284>
			return status;
 8006fe0:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8006fe4:	f000 be20 	b.w	8007c28 <scaraInitDuty+0xea8>
 8006fe8:	40668000 	.word	0x40668000
 8006fec:	20010af0 	.word	0x20010af0
 8006ff0:	2000ff30 	.word	0x2000ff30
 8006ff4:	2000ff40 	.word	0x2000ff40
 8006ff8:	2000ffb0 	.word	0x2000ffb0
 8006ffc:	60000000 	.word	0x60000000
 8007000:	400921fb 	.word	0x400921fb
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 8007004:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8007008:	2b00      	cmp	r3, #0
 800700a:	f040 80a7 	bne.w	800715c <scaraInitDuty+0x3dc>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800700e:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007012:	2b01      	cmp	r3, #1
 8007014:	d14d      	bne.n	80070b2 <scaraInitDuty+0x332>
				//myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8007016:	4bcd      	ldr	r3, [pc, #820]	; (800734c <scaraInitDuty+0x5cc>)
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 800701e:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8007022:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 8007026:	eeb0 2a46 	vmov.f32	s4, s12
 800702a:	eef0 2a66 	vmov.f32	s5, s13
 800702e:	eeb0 1a47 	vmov.f32	s2, s14
 8007032:	eef0 1a67 	vmov.f32	s3, s15
 8007036:	2201      	movs	r2, #1
 8007038:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 800703c:	2104      	movs	r1, #4
 800703e:	48c4      	ldr	r0, [pc, #784]	; (8007350 <scaraInitDuty+0x5d0>)
 8007040:	f001 f8b6 	bl	80081b0 <scaraInitLSPB1>
 8007044:	4603      	mov	r3, r0
 8007046:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 800704a:	4ac0      	ldr	r2, [pc, #768]	; (800734c <scaraInitDuty+0x5cc>)
 800704c:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8007050:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
				myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8007054:	4bbd      	ldr	r3, [pc, #756]	; (800734c <scaraInitDuty+0x5cc>)
 8007056:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 800705a:	49bc      	ldr	r1, [pc, #752]	; (800734c <scaraInitDuty+0x5cc>)
 800705c:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007060:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8007064:	4bb9      	ldr	r3, [pc, #740]	; (800734c <scaraInitDuty+0x5cc>)
 8007066:	2202      	movs	r2, #2
 8007068:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 800706c:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8007070:	4618      	mov	r0, r3
 8007072:	f7f9 fa57 	bl	8000524 <__aeabi_i2d>
 8007076:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800707a:	f7f9 fabd 	bl	80005f8 <__aeabi_dmul>
 800707e:	4602      	mov	r2, r0
 8007080:	460b      	mov	r3, r1
 8007082:	ec43 2b16 	vmov	d6, r2, r3
 8007086:	4bb1      	ldr	r3, [pc, #708]	; (800734c <scaraInitDuty+0x5cc>)
 8007088:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800708c:	ed93 7b00 	vldr	d7, [r3]
 8007090:	eeb0 1a47 	vmov.f32	s2, s14
 8007094:	eef0 1a67 	vmov.f32	s3, s15
 8007098:	2203      	movs	r2, #3
 800709a:	eeb0 0a46 	vmov.f32	s0, s12
 800709e:	eef0 0a66 	vmov.f32	s1, s13
 80070a2:	2105      	movs	r1, #5
 80070a4:	48ab      	ldr	r0, [pc, #684]	; (8007354 <scaraInitDuty+0x5d4>)
 80070a6:	f001 f835 	bl	8008114 <scaraInitLinear>
 80070aa:	4603      	mov	r3, r0
 80070ac:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 80070b0:	e201      	b.n	80074b6 <scaraInitDuty+0x736>
			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80070b2:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d14d      	bne.n	8007156 <scaraInitDuty+0x3d6>
				//myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 80070ba:	4ba4      	ldr	r3, [pc, #656]	; (800734c <scaraInitDuty+0x5cc>)
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 80070c2:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80070c6:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80070ca:	eeb0 2a46 	vmov.f32	s4, s12
 80070ce:	eef0 2a66 	vmov.f32	s5, s13
 80070d2:	eeb0 1a47 	vmov.f32	s2, s14
 80070d6:	eef0 1a67 	vmov.f32	s3, s15
 80070da:	2200      	movs	r2, #0
 80070dc:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 80070e0:	2104      	movs	r1, #4
 80070e2:	489b      	ldr	r0, [pc, #620]	; (8007350 <scaraInitDuty+0x5d0>)
 80070e4:	f001 f864 	bl	80081b0 <scaraInitLSPB1>
 80070e8:	4603      	mov	r3, r0
 80070ea:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 80070ee:	4a97      	ldr	r2, [pc, #604]	; (800734c <scaraInitDuty+0x5cc>)
 80070f0:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80070f4:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
				myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 80070f8:	4b94      	ldr	r3, [pc, #592]	; (800734c <scaraInitDuty+0x5cc>)
 80070fa:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 80070fe:	4993      	ldr	r1, [pc, #588]	; (800734c <scaraInitDuty+0x5cc>)
 8007100:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007104:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8007108:	4b90      	ldr	r3, [pc, #576]	; (800734c <scaraInitDuty+0x5cc>)
 800710a:	2202      	movs	r2, #2
 800710c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8007110:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8007114:	4618      	mov	r0, r3
 8007116:	f7f9 fa05 	bl	8000524 <__aeabi_i2d>
 800711a:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800711e:	f7f9 fa6b 	bl	80005f8 <__aeabi_dmul>
 8007122:	4602      	mov	r2, r0
 8007124:	460b      	mov	r3, r1
 8007126:	ec43 2b16 	vmov	d6, r2, r3
 800712a:	4b88      	ldr	r3, [pc, #544]	; (800734c <scaraInitDuty+0x5cc>)
 800712c:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007130:	ed93 7b00 	vldr	d7, [r3]
 8007134:	eeb0 1a47 	vmov.f32	s2, s14
 8007138:	eef0 1a67 	vmov.f32	s3, s15
 800713c:	2203      	movs	r2, #3
 800713e:	eeb0 0a46 	vmov.f32	s0, s12
 8007142:	eef0 0a66 	vmov.f32	s1, s13
 8007146:	2105      	movs	r1, #5
 8007148:	4882      	ldr	r0, [pc, #520]	; (8007354 <scaraInitDuty+0x5d4>)
 800714a:	f000 ffe3 	bl	8008114 <scaraInitLinear>
 800714e:	4603      	mov	r3, r0
 8007150:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8007154:	e1af      	b.n	80074b6 <scaraInitDuty+0x736>

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 8007156:	2308      	movs	r3, #8
 8007158:	f000 bd66 	b.w	8007c28 <scaraInitDuty+0xea8>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 800715c:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8007160:	2b01      	cmp	r3, #1
 8007162:	f040 80a7 	bne.w	80072b4 <scaraInitDuty+0x534>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8007166:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800716a:	2b01      	cmp	r3, #1
 800716c:	d14d      	bne.n	800720a <scaraInitDuty+0x48a>
				//myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800716e:	4b77      	ldr	r3, [pc, #476]	; (800734c <scaraInitDuty+0x5cc>)
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve1(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8007176:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 800717a:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 800717e:	eeb0 2a46 	vmov.f32	s4, s12
 8007182:	eef0 2a66 	vmov.f32	s5, s13
 8007186:	eeb0 1a47 	vmov.f32	s2, s14
 800718a:	eef0 1a67 	vmov.f32	s3, s15
 800718e:	2201      	movs	r2, #1
 8007190:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8007194:	2104      	movs	r1, #4
 8007196:	4870      	ldr	r0, [pc, #448]	; (8007358 <scaraInitDuty+0x5d8>)
 8007198:	f001 face 	bl	8008738 <scaraInitScurve1>
 800719c:	4603      	mov	r3, r0
 800719e:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 80071a2:	4a6a      	ldr	r2, [pc, #424]	; (800734c <scaraInitDuty+0x5cc>)
 80071a4:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80071a8:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
				myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 80071ac:	4b67      	ldr	r3, [pc, #412]	; (800734c <scaraInitDuty+0x5cc>)
 80071ae:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 80071b2:	4966      	ldr	r1, [pc, #408]	; (800734c <scaraInitDuty+0x5cc>)
 80071b4:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80071b8:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 80071bc:	4b63      	ldr	r3, [pc, #396]	; (800734c <scaraInitDuty+0x5cc>)
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 80071c4:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7f9 f9ab 	bl	8000524 <__aeabi_i2d>
 80071ce:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80071d2:	f7f9 fa11 	bl	80005f8 <__aeabi_dmul>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	ec43 2b16 	vmov	d6, r2, r3
 80071de:	4b5b      	ldr	r3, [pc, #364]	; (800734c <scaraInitDuty+0x5cc>)
 80071e0:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80071e4:	ed93 7b00 	vldr	d7, [r3]
 80071e8:	eeb0 1a47 	vmov.f32	s2, s14
 80071ec:	eef0 1a67 	vmov.f32	s3, s15
 80071f0:	2203      	movs	r2, #3
 80071f2:	eeb0 0a46 	vmov.f32	s0, s12
 80071f6:	eef0 0a66 	vmov.f32	s1, s13
 80071fa:	2105      	movs	r1, #5
 80071fc:	4855      	ldr	r0, [pc, #340]	; (8007354 <scaraInitDuty+0x5d4>)
 80071fe:	f000 ff89 	bl	8008114 <scaraInitLinear>
 8007202:	4603      	mov	r3, r0
 8007204:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8007208:	e155      	b.n	80074b6 <scaraInitDuty+0x736>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800720a:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800720e:	2b00      	cmp	r3, #0
 8007210:	d14d      	bne.n	80072ae <scaraInitDuty+0x52e>
				//myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8007212:	4b4e      	ldr	r3, [pc, #312]	; (800734c <scaraInitDuty+0x5cc>)
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve1(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 800721a:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 800721e:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8007222:	eeb0 2a46 	vmov.f32	s4, s12
 8007226:	eef0 2a66 	vmov.f32	s5, s13
 800722a:	eeb0 1a47 	vmov.f32	s2, s14
 800722e:	eef0 1a67 	vmov.f32	s3, s15
 8007232:	2200      	movs	r2, #0
 8007234:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8007238:	2104      	movs	r1, #4
 800723a:	4847      	ldr	r0, [pc, #284]	; (8007358 <scaraInitDuty+0x5d8>)
 800723c:	f001 fa7c 	bl	8008738 <scaraInitScurve1>
 8007240:	4603      	mov	r3, r0
 8007242:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8007246:	4a41      	ldr	r2, [pc, #260]	; (800734c <scaraInitDuty+0x5cc>)
 8007248:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 800724c:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
				myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8007250:	4b3e      	ldr	r3, [pc, #248]	; (800734c <scaraInitDuty+0x5cc>)
 8007252:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 8007256:	493d      	ldr	r1, [pc, #244]	; (800734c <scaraInitDuty+0x5cc>)
 8007258:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 800725c:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8007260:	4b3a      	ldr	r3, [pc, #232]	; (800734c <scaraInitDuty+0x5cc>)
 8007262:	2202      	movs	r2, #2
 8007264:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8007268:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 800726c:	4618      	mov	r0, r3
 800726e:	f7f9 f959 	bl	8000524 <__aeabi_i2d>
 8007272:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8007276:	f7f9 f9bf 	bl	80005f8 <__aeabi_dmul>
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	ec43 2b16 	vmov	d6, r2, r3
 8007282:	4b32      	ldr	r3, [pc, #200]	; (800734c <scaraInitDuty+0x5cc>)
 8007284:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007288:	ed93 7b00 	vldr	d7, [r3]
 800728c:	eeb0 1a47 	vmov.f32	s2, s14
 8007290:	eef0 1a67 	vmov.f32	s3, s15
 8007294:	2203      	movs	r2, #3
 8007296:	eeb0 0a46 	vmov.f32	s0, s12
 800729a:	eef0 0a66 	vmov.f32	s1, s13
 800729e:	2105      	movs	r1, #5
 80072a0:	482c      	ldr	r0, [pc, #176]	; (8007354 <scaraInitDuty+0x5d4>)
 80072a2:	f000 ff37 	bl	8008114 <scaraInitLinear>
 80072a6:	4603      	mov	r3, r0
 80072a8:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 80072ac:	e103      	b.n	80074b6 <scaraInitDuty+0x736>
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 80072ae:	2308      	movs	r3, #8
 80072b0:	f000 bcba 	b.w	8007c28 <scaraInitDuty+0xea8>
			}
		}else if(DUTY_TRAJECTORY_LINEAR == command.trajec_type){
 80072b4:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d17c      	bne.n	80073b6 <scaraInitDuty+0x636>
			//myDUTY.time_total = command.time_total;
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 80072bc:	4a23      	ldr	r2, [pc, #140]	; (800734c <scaraInitDuty+0x5cc>)
 80072be:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80072c2:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 80072c6:	4b21      	ldr	r3, [pc, #132]	; (800734c <scaraInitDuty+0x5cc>)
 80072c8:	2202      	movs	r2, #2
 80072ca:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 80072ce:	4b1f      	ldr	r3, [pc, #124]	; (800734c <scaraInitDuty+0x5cc>)
 80072d0:	2202      	movs	r2, #2
 80072d2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			if(command.modeInit_type == DUTY_MODE_INIT_QT){
 80072d6:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d118      	bne.n	8007310 <scaraInitDuty+0x590>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, fabs(total_s), DUTY_MODE_INIT_QT, command.time_total);
 80072de:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80072e2:	603b      	str	r3, [r7, #0]
 80072e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80072e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072ec:	607b      	str	r3, [r7, #4]
 80072ee:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 80072f2:	eeb0 1a47 	vmov.f32	s2, s14
 80072f6:	eef0 1a67 	vmov.f32	s3, s15
 80072fa:	2203      	movs	r2, #3
 80072fc:	ed97 0b00 	vldr	d0, [r7]
 8007300:	2104      	movs	r1, #4
 8007302:	4816      	ldr	r0, [pc, #88]	; (800735c <scaraInitDuty+0x5dc>)
 8007304:	f000 ff06 	bl	8008114 <scaraInitLinear>
 8007308:	4603      	mov	r3, r0
 800730a:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 800730e:	e027      	b.n	8007360 <scaraInitDuty+0x5e0>
			}else if(command.modeInit_type == DUTY_MODE_INIT_QV){
 8007310:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007314:	2b02      	cmp	r3, #2
 8007316:	d116      	bne.n	8007346 <scaraInitDuty+0x5c6>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, fabs(total_s), DUTY_MODE_INIT_QV, command.v_factor);
 8007318:	f8d7 51a0 	ldr.w	r5, [r7, #416]	; 0x1a0
 800731c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007320:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8007324:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8007328:	eeb0 1a47 	vmov.f32	s2, s14
 800732c:	eef0 1a67 	vmov.f32	s3, s15
 8007330:	2202      	movs	r2, #2
 8007332:	ec46 5b10 	vmov	d0, r5, r6
 8007336:	2104      	movs	r1, #4
 8007338:	4808      	ldr	r0, [pc, #32]	; (800735c <scaraInitDuty+0x5dc>)
 800733a:	f000 feeb 	bl	8008114 <scaraInitLinear>
 800733e:	4603      	mov	r3, r0
 8007340:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8007344:	e00c      	b.n	8007360 <scaraInitDuty+0x5e0>
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8007346:	2308      	movs	r3, #8
 8007348:	f000 bc6e 	b.w	8007c28 <scaraInitDuty+0xea8>
 800734c:	2000ff30 	.word	0x2000ff30
 8007350:	20010048 	.word	0x20010048
 8007354:	20010318 	.word	0x20010318
 8007358:	200100c8 	.word	0x200100c8
 800735c:	20010198 	.word	0x20010198
			}
			myDUTY.time_total = myDUTY.task.trajectory_3d.linear.Tf;
 8007360:	4bab      	ldr	r3, [pc, #684]	; (8007610 <scaraInitDuty+0x890>)
 8007362:	e9d3 23a0 	ldrd	r2, r3, [r3, #640]	; 0x280
 8007366:	49aa      	ldr	r1, [pc, #680]	; (8007610 <scaraInitDuty+0x890>)
 8007368:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 800736c:	e9c1 2300 	strd	r2, r3, [r1]
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8007370:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8007374:	4618      	mov	r0, r3
 8007376:	f7f9 f8d5 	bl	8000524 <__aeabi_i2d>
 800737a:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800737e:	f7f9 f93b 	bl	80005f8 <__aeabi_dmul>
 8007382:	4602      	mov	r2, r0
 8007384:	460b      	mov	r3, r1
 8007386:	ec43 2b16 	vmov	d6, r2, r3
 800738a:	4ba1      	ldr	r3, [pc, #644]	; (8007610 <scaraInitDuty+0x890>)
 800738c:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007390:	ed93 7b00 	vldr	d7, [r3]
 8007394:	eeb0 1a47 	vmov.f32	s2, s14
 8007398:	eef0 1a67 	vmov.f32	s3, s15
 800739c:	2203      	movs	r2, #3
 800739e:	eeb0 0a46 	vmov.f32	s0, s12
 80073a2:	eef0 0a66 	vmov.f32	s1, s13
 80073a6:	2105      	movs	r1, #5
 80073a8:	489a      	ldr	r0, [pc, #616]	; (8007614 <scaraInitDuty+0x894>)
 80073aa:	f000 feb3 	bl	8008114 <scaraInitLinear>
 80073ae:	4603      	mov	r3, r0
 80073b0:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 80073b4:	e07f      	b.n	80074b6 <scaraInitDuty+0x736>
		}else if(DUTY_TRAJECTORY_GCODE_LSPB == command.trajec_type){
 80073b6:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80073ba:	2b03      	cmp	r3, #3
 80073bc:	d13f      	bne.n	800743e <scaraInitDuty+0x6be>
			status1 = SCARA_STATUS_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 80073c4:	4a92      	ldr	r2, [pc, #584]	; (8007610 <scaraInitDuty+0x890>)
 80073c6:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80073ca:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_GCODE_LSPB;
 80073ce:	4b90      	ldr	r3, [pc, #576]	; (8007610 <scaraInitDuty+0x890>)
 80073d0:	2203      	movs	r2, #3
 80073d2:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 80073d6:	4b8e      	ldr	r3, [pc, #568]	; (8007610 <scaraInitDuty+0x890>)
 80073d8:	2202      	movs	r2, #2
 80073da:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			myDUTY.time_total = command.time_total;
 80073de:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 80073e2:	498b      	ldr	r1, [pc, #556]	; (8007610 <scaraInitDuty+0x890>)
 80073e4:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80073e8:	e9c1 2300 	strd	r2, r3, [r1]
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total - last_T);
 80073ec:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7f9 f897 	bl	8000524 <__aeabi_i2d>
 80073f6:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80073fa:	f7f9 f8fd 	bl	80005f8 <__aeabi_dmul>
 80073fe:	4602      	mov	r2, r0
 8007400:	460b      	mov	r3, r1
 8007402:	ec43 2b18 	vmov	d8, r2, r3
 8007406:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 800740a:	4b83      	ldr	r3, [pc, #524]	; (8007618 <scaraInitDuty+0x898>)
 800740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007410:	f7f8 ff3a 	bl	8000288 <__aeabi_dsub>
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	ec43 2b17 	vmov	d7, r2, r3
 800741c:	eeb0 1a47 	vmov.f32	s2, s14
 8007420:	eef0 1a67 	vmov.f32	s3, s15
 8007424:	2203      	movs	r2, #3
 8007426:	eeb0 0a48 	vmov.f32	s0, s16
 800742a:	eef0 0a68 	vmov.f32	s1, s17
 800742e:	2105      	movs	r1, #5
 8007430:	4878      	ldr	r0, [pc, #480]	; (8007614 <scaraInitDuty+0x894>)
 8007432:	f000 fe6f 	bl	8008114 <scaraInitLinear>
 8007436:	4603      	mov	r3, r0
 8007438:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 800743c:	e03b      	b.n	80074b6 <scaraInitDuty+0x736>
		}else if(DUTY_TRAJECTORY_BEZIER_CURVE == command.trajec_type){
 800743e:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8007442:	2b04      	cmp	r3, #4
 8007444:	d135      	bne.n	80074b2 <scaraInitDuty+0x732>
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8007446:	4a72      	ldr	r2, [pc, #456]	; (8007610 <scaraInitDuty+0x890>)
 8007448:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 800744c:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_BEZIER_CURVE;
 8007450:	4b6f      	ldr	r3, [pc, #444]	; (8007610 <scaraInitDuty+0x890>)
 8007452:	2204      	movs	r2, #4
 8007454:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.time_total = command.time_total;
 8007458:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 800745c:	496c      	ldr	r1, [pc, #432]	; (8007610 <scaraInitDuty+0x890>)
 800745e:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007462:	e9c1 2300 	strd	r2, r3, [r1]
			status1 = SCARA_STATUS_OK;
 8007466:	2300      	movs	r3, #0
 8007468:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 800746c:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8007470:	4618      	mov	r0, r3
 8007472:	f7f9 f857 	bl	8000524 <__aeabi_i2d>
 8007476:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800747a:	f7f9 f8bd 	bl	80005f8 <__aeabi_dmul>
 800747e:	4602      	mov	r2, r0
 8007480:	460b      	mov	r3, r1
 8007482:	ec43 2b16 	vmov	d6, r2, r3
 8007486:	4b62      	ldr	r3, [pc, #392]	; (8007610 <scaraInitDuty+0x890>)
 8007488:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800748c:	ed93 7b00 	vldr	d7, [r3]
 8007490:	eeb0 1a47 	vmov.f32	s2, s14
 8007494:	eef0 1a67 	vmov.f32	s3, s15
 8007498:	2203      	movs	r2, #3
 800749a:	eeb0 0a46 	vmov.f32	s0, s12
 800749e:	eef0 0a66 	vmov.f32	s1, s13
 80074a2:	2105      	movs	r1, #5
 80074a4:	485b      	ldr	r0, [pc, #364]	; (8007614 <scaraInitDuty+0x894>)
 80074a6:	f000 fe35 	bl	8008114 <scaraInitLinear>
 80074aa:	4603      	mov	r3, r0
 80074ac:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 80074b0:	e001      	b.n	80074b6 <scaraInitDuty+0x736>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 80074b2:	2305      	movs	r3, #5
 80074b4:	e3b8      	b.n	8007c28 <scaraInitDuty+0xea8>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 80074b6:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d002      	beq.n	80074c4 <scaraInitDuty+0x744>
			return status1;
 80074be:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80074c2:	e3b1      	b.n	8007c28 <scaraInitDuty+0xea8>
		}
		if ( SCARA_STATUS_OK != status2) {
 80074c4:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 837f 	beq.w	8007bcc <scaraInitDuty+0xe4c>
			return status2;
 80074ce:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80074d2:	e3a9      	b.n	8007c28 <scaraInitDuty+0xea8>
		}


	
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 80074d4:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 80074d8:	2b01      	cmp	r3, #1
 80074da:	f040 8375 	bne.w	8007bc8 <scaraInitDuty+0xe48>
		/*----------- Space Joint ------------*/
		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 80074de:	4b4c      	ldr	r3, [pc, #304]	; (8007610 <scaraInitDuty+0x890>)
 80074e0:	2201      	movs	r2, #1
 80074e2:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 80074e4:	4b4d      	ldr	r3, [pc, #308]	; (800761c <scaraInitDuty+0x89c>)
 80074e6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80074ea:	4949      	ldr	r1, [pc, #292]	; (8007610 <scaraInitDuty+0x890>)
 80074ec:	f601 2118 	addw	r1, r1, #2584	; 0xa18
 80074f0:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 80074f4:	4b49      	ldr	r3, [pc, #292]	; (800761c <scaraInitDuty+0x89c>)
 80074f6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80074fa:	4945      	ldr	r1, [pc, #276]	; (8007610 <scaraInitDuty+0x890>)
 80074fc:	f501 6122 	add.w	r1, r1, #2592	; 0xa20
 8007500:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 8007504:	4b45      	ldr	r3, [pc, #276]	; (800761c <scaraInitDuty+0x89c>)
 8007506:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800750a:	4941      	ldr	r1, [pc, #260]	; (8007610 <scaraInitDuty+0x890>)
 800750c:	f601 2128 	addw	r1, r1, #2600	; 0xa28
 8007510:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 8007514:	4b41      	ldr	r3, [pc, #260]	; (800761c <scaraInitDuty+0x89c>)
 8007516:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800751a:	493d      	ldr	r1, [pc, #244]	; (8007610 <scaraInitDuty+0x890>)
 800751c:	f501 6123 	add.w	r1, r1, #2608	; 0xa30
 8007520:	e9c1 2300 	strd	r2, r3, [r1]

		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8007524:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 8007528:	a337      	add	r3, pc, #220	; (adr r3, 8007608 <scaraInitDuty+0x888>)
 800752a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752e:	f7f9 f863 	bl	80005f8 <__aeabi_dmul>
 8007532:	4602      	mov	r2, r0
 8007534:	460b      	mov	r3, r1
 8007536:	4610      	mov	r0, r2
 8007538:	4619      	mov	r1, r3
 800753a:	f04f 0200 	mov.w	r2, #0
 800753e:	4b38      	ldr	r3, [pc, #224]	; (8007620 <scaraInitDuty+0x8a0>)
 8007540:	f7f9 f984 	bl	800084c <__aeabi_ddiv>
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 800754c:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8007550:	2b01      	cmp	r3, #1
 8007552:	d12c      	bne.n	80075ae <scaraInitDuty+0x82e>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8007554:	4b31      	ldr	r3, [pc, #196]	; (800761c <scaraInitDuty+0x89c>)
 8007556:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800755a:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 800755e:	f7f8 fe95 	bl	800028c <__adddf3>
 8007562:	4602      	mov	r2, r0
 8007564:	460b      	mov	r3, r1
 8007566:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			target_point.y 		= positionCurrent.y + command.target_point.y;
 800756a:	4b2c      	ldr	r3, [pc, #176]	; (800761c <scaraInitDuty+0x89c>)
 800756c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8007570:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8007574:	f7f8 fe8a 	bl	800028c <__adddf3>
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8007580:	4b26      	ldr	r3, [pc, #152]	; (800761c <scaraInitDuty+0x89c>)
 8007582:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8007586:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800758a:	f7f8 fe7f 	bl	800028c <__adddf3>
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8007596:	4b21      	ldr	r3, [pc, #132]	; (800761c <scaraInitDuty+0x89c>)
 8007598:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800759c:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80075a0:	f7f8 fe74 	bl	800028c <__adddf3>
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
 80075ac:	e016      	b.n	80075dc <scaraInitDuty+0x85c>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80075ae:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d110      	bne.n	80075d8 <scaraInitDuty+0x858>
			target_point.x 		= command.target_point.x;
 80075b6:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 80075ba:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			target_point.y 		= command.target_point.y;
 80075be:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80075c2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			target_point.z 		= command.target_point.z;
 80075c6:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 80075ca:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			target_point.roll	= command.target_point.roll;
 80075ce:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80075d2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
 80075d6:	e001      	b.n	80075dc <scaraInitDuty+0x85c>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 80075d8:	230c      	movs	r3, #12
 80075da:	e325      	b.n	8007c28 <scaraInitDuty+0xea8>
		}

		if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 80075dc:	4c0f      	ldr	r4, [pc, #60]	; (800761c <scaraInitDuty+0x89c>)
 80075de:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
 80075e2:	4668      	mov	r0, sp
 80075e4:	f104 0308 	add.w	r3, r4, #8
 80075e8:	22b8      	movs	r2, #184	; 0xb8
 80075ea:	4619      	mov	r1, r3
 80075ec:	f00e ffb0 	bl	8016550 <memcpy>
 80075f0:	e894 000c 	ldmia.w	r4, {r2, r3}
 80075f4:	4628      	mov	r0, r5
 80075f6:	f7fe f883 	bl	8005700 <kinematicInverse>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d111      	bne.n	8007624 <scaraInitDuty+0x8a4>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 8007600:	2307      	movs	r3, #7
 8007602:	e311      	b.n	8007c28 <scaraInitDuty+0xea8>
 8007604:	f3af 8000 	nop.w
 8007608:	60000000 	.word	0x60000000
 800760c:	400921fb 	.word	0x400921fb
 8007610:	2000ff30 	.word	0x2000ff30
 8007614:	20010318 	.word	0x20010318
 8007618:	2000fd38 	.word	0x2000fd38
 800761c:	20010af0 	.word	0x20010af0
 8007620:	40668000 	.word	0x40668000
		}
		// Trajectory 4 profile
		double q[4];
		q[0] = target_point.Theta1 - positionCurrent.Theta1;
 8007624:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8007628:	4bc4      	ldr	r3, [pc, #784]	; (800793c <scaraInitDuty+0xbbc>)
 800762a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800762e:	f7f8 fe2b 	bl	8000288 <__aeabi_dsub>
 8007632:	4602      	mov	r2, r0
 8007634:	460b      	mov	r3, r1
 8007636:	f107 0108 	add.w	r1, r7, #8
 800763a:	e9c1 2300 	strd	r2, r3, [r1]
		q[1] = target_point.Theta2 - positionCurrent.Theta2;
 800763e:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8007642:	4bbe      	ldr	r3, [pc, #760]	; (800793c <scaraInitDuty+0xbbc>)
 8007644:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8007648:	f7f8 fe1e 	bl	8000288 <__aeabi_dsub>
 800764c:	4602      	mov	r2, r0
 800764e:	460b      	mov	r3, r1
 8007650:	f107 0108 	add.w	r1, r7, #8
 8007654:	e9c1 2302 	strd	r2, r3, [r1, #8]
		q[2] = target_point.D3 	   - positionCurrent.D3;
 8007658:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800765c:	4bb7      	ldr	r3, [pc, #732]	; (800793c <scaraInitDuty+0xbbc>)
 800765e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8007662:	f7f8 fe11 	bl	8000288 <__aeabi_dsub>
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	f107 0108 	add.w	r1, r7, #8
 800766e:	e9c1 2304 	strd	r2, r3, [r1, #16]
		q[3] = target_point.Theta4 - positionCurrent.Theta4;
 8007672:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8007676:	4bb1      	ldr	r3, [pc, #708]	; (800793c <scaraInitDuty+0xbbc>)
 8007678:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800767c:	f7f8 fe04 	bl	8000288 <__aeabi_dsub>
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	f107 0108 	add.w	r1, r7, #8
 8007688:	e9c1 2306 	strd	r2, r3, [r1, #24]

		// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 800768c:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8007690:	2b00      	cmp	r3, #0
 8007692:	f040 8146 	bne.w	8007922 <scaraInitDuty+0xba2>
			// Mode Init Time
			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8007696:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800769a:	2b01      	cmp	r3, #1
 800769c:	d161      	bne.n	8007762 <scaraInitDuty+0x9e2>
				for ( uint8_t i = 0; i < 4; i++) {
 800769e:	2300      	movs	r3, #0
 80076a0:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 80076a4:	e051      	b.n	800774a <scaraInitDuty+0x9ca>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80076a6:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 80076aa:	49a5      	ldr	r1, [pc, #660]	; (8007940 <scaraInitDuty+0xbc0>)
 80076ac:	4613      	mov	r3, r2
 80076ae:	005b      	lsls	r3, r3, #1
 80076b0:	4413      	add	r3, r2
 80076b2:	01db      	lsls	r3, r3, #7
 80076b4:	440b      	add	r3, r1
 80076b6:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80076ba:	2200      	movs	r2, #0
 80076bc:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 80076be:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 80076c2:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 80076c6:	4c9e      	ldr	r4, [pc, #632]	; (8007940 <scaraInitDuty+0xbc0>)
 80076c8:	4613      	mov	r3, r2
 80076ca:	005b      	lsls	r3, r3, #1
 80076cc:	4413      	add	r3, r2
 80076ce:	01db      	lsls	r3, r3, #7
 80076d0:	4423      	add	r3, r4
 80076d2:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80076d6:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitLSPB1(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80076da:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 80076de:	4613      	mov	r3, r2
 80076e0:	005b      	lsls	r3, r3, #1
 80076e2:	4413      	add	r3, r2
 80076e4:	01db      	lsls	r3, r3, #7
 80076e6:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80076ea:	4a95      	ldr	r2, [pc, #596]	; (8007940 <scaraInitDuty+0xbc0>)
 80076ec:	1898      	adds	r0, r3, r2
 80076ee:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 80076f2:	4a94      	ldr	r2, [pc, #592]	; (8007944 <scaraInitDuty+0xbc4>)
 80076f4:	5cd1      	ldrb	r1, [r2, r3]
 80076f6:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 80076fa:	f107 0208 	add.w	r2, r7, #8
 80076fe:	00db      	lsls	r3, r3, #3
 8007700:	4413      	add	r3, r2
 8007702:	ed93 7b00 	vldr	d7, [r3]
 8007706:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 800770a:	ed97 5b7c 	vldr	d5, [r7, #496]	; 0x1f0
 800770e:	eeb0 2a45 	vmov.f32	s4, s10
 8007712:	eef0 2a65 	vmov.f32	s5, s11
 8007716:	eeb0 1a46 	vmov.f32	s2, s12
 800771a:	eef0 1a66 	vmov.f32	s3, s13
 800771e:	2201      	movs	r2, #1
 8007720:	eeb0 0a47 	vmov.f32	s0, s14
 8007724:	eef0 0a67 	vmov.f32	s1, s15
 8007728:	f000 fd42 	bl	80081b0 <scaraInitLSPB1>
 800772c:	4603      	mov	r3, r0
 800772e:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
					if(status1 != SCARA_STATUS_OK){
 8007732:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8007736:	2b00      	cmp	r3, #0
 8007738:	d002      	beq.n	8007740 <scaraInitDuty+0x9c0>
						return status1;
 800773a:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800773e:	e273      	b.n	8007c28 <scaraInitDuty+0xea8>
				for ( uint8_t i = 0; i < 4; i++) {
 8007740:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8007744:	3301      	adds	r3, #1
 8007746:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 800774a:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 800774e:	2b03      	cmp	r3, #3
 8007750:	d9a9      	bls.n	80076a6 <scaraInitDuty+0x926>
					}
				}
				myDUTY.time_total = command.time_total;
 8007752:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8007756:	497a      	ldr	r1, [pc, #488]	; (8007940 <scaraInitDuty+0xbc0>)
 8007758:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 800775c:	e9c1 2300 	strd	r2, r3, [r1]
 8007760:	e234      	b.n	8007bcc <scaraInitDuty+0xe4c>
			// Mode Init Acc
			} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8007762:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007766:	2b00      	cmp	r3, #0
 8007768:	f040 80d9 	bne.w	800791e <scaraInitDuty+0xb9e>
				for ( uint8_t i = 0; i < 4; i++) {
 800776c:	2300      	movs	r3, #0
 800776e:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
 8007772:	e03c      	b.n	80077ee <scaraInitDuty+0xa6e>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8007774:	f897 219d 	ldrb.w	r2, [r7, #413]	; 0x19d
 8007778:	4971      	ldr	r1, [pc, #452]	; (8007940 <scaraInitDuty+0xbc0>)
 800777a:	4613      	mov	r3, r2
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	4413      	add	r3, r2
 8007780:	01db      	lsls	r3, r3, #7
 8007782:	440b      	add	r3, r1
 8007784:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007788:	2200      	movs	r2, #0
 800778a:	701a      	strb	r2, [r3, #0]
					status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 800778c:	f897 219d 	ldrb.w	r2, [r7, #413]	; 0x19d
 8007790:	4613      	mov	r3, r2
 8007792:	005b      	lsls	r3, r3, #1
 8007794:	4413      	add	r3, r2
 8007796:	01db      	lsls	r3, r3, #7
 8007798:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800779c:	4a68      	ldr	r2, [pc, #416]	; (8007940 <scaraInitDuty+0xbc0>)
 800779e:	1898      	adds	r0, r3, r2
 80077a0:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 80077a4:	4a67      	ldr	r2, [pc, #412]	; (8007944 <scaraInitDuty+0xbc4>)
 80077a6:	5cd1      	ldrb	r1, [r2, r3]
 80077a8:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 80077ac:	f107 0208 	add.w	r2, r7, #8
 80077b0:	00db      	lsls	r3, r3, #3
 80077b2:	4413      	add	r3, r2
 80077b4:	ed93 7b00 	vldr	d7, [r3]
 80077b8:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80077bc:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80077c0:	eeb0 2a45 	vmov.f32	s4, s10
 80077c4:	eef0 2a65 	vmov.f32	s5, s11
 80077c8:	eeb0 1a46 	vmov.f32	s2, s12
 80077cc:	eef0 1a66 	vmov.f32	s3, s13
 80077d0:	2200      	movs	r2, #0
 80077d2:	eeb0 0a47 	vmov.f32	s0, s14
 80077d6:	eef0 0a67 	vmov.f32	s1, s15
 80077da:	f001 ff01 	bl	80095e0 <scaraInitLSPB>
 80077de:	4603      	mov	r3, r0
 80077e0:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 80077e4:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 80077e8:	3301      	adds	r3, #1
 80077ea:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
 80077ee:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 80077f2:	2b03      	cmp	r3, #3
 80077f4:	d9be      	bls.n	8007774 <scaraInitDuty+0x9f4>
										q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				}
				myDUTY.time_total = 0;
 80077f6:	4b52      	ldr	r3, [pc, #328]	; (8007940 <scaraInitDuty+0xbc0>)
 80077f8:	f603 2138 	addw	r1, r3, #2616	; 0xa38
 80077fc:	f04f 0200 	mov.w	r2, #0
 8007800:	f04f 0300 	mov.w	r3, #0
 8007804:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 8007808:	2300      	movs	r3, #0
 800780a:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 800780e:	e02b      	b.n	8007868 <scaraInitDuty+0xae8>
					if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 8007810:	f897 219c 	ldrb.w	r2, [r7, #412]	; 0x19c
 8007814:	494a      	ldr	r1, [pc, #296]	; (8007940 <scaraInitDuty+0xbc0>)
 8007816:	4613      	mov	r3, r2
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	4413      	add	r3, r2
 800781c:	01db      	lsls	r3, r3, #7
 800781e:	440b      	add	r3, r1
 8007820:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8007824:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007828:	4b45      	ldr	r3, [pc, #276]	; (8007940 <scaraInitDuty+0xbc0>)
 800782a:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	f7f9 f971 	bl	8000b18 <__aeabi_dcmpgt>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d010      	beq.n	800785e <scaraInitDuty+0xade>
						myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 800783c:	f897 219c 	ldrb.w	r2, [r7, #412]	; 0x19c
 8007840:	493f      	ldr	r1, [pc, #252]	; (8007940 <scaraInitDuty+0xbc0>)
 8007842:	4613      	mov	r3, r2
 8007844:	005b      	lsls	r3, r3, #1
 8007846:	4413      	add	r3, r2
 8007848:	01db      	lsls	r3, r3, #7
 800784a:	440b      	add	r3, r1
 800784c:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8007850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007854:	493a      	ldr	r1, [pc, #232]	; (8007940 <scaraInitDuty+0xbc0>)
 8007856:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 800785a:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 800785e:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 8007862:	3301      	adds	r3, #1
 8007864:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 8007868:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 800786c:	2b03      	cmp	r3, #3
 800786e:	d9cf      	bls.n	8007810 <scaraInitDuty+0xa90>
					}
				}
				for ( uint8_t i = 0; i < 4; i++) {
 8007870:	2300      	movs	r3, #0
 8007872:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 8007876:	e04d      	b.n	8007914 <scaraInitDuty+0xb94>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8007878:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 800787c:	4930      	ldr	r1, [pc, #192]	; (8007940 <scaraInitDuty+0xbc0>)
 800787e:	4613      	mov	r3, r2
 8007880:	005b      	lsls	r3, r3, #1
 8007882:	4413      	add	r3, r2
 8007884:	01db      	lsls	r3, r3, #7
 8007886:	440b      	add	r3, r1
 8007888:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800788c:	2200      	movs	r2, #0
 800788e:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 8007890:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 8007894:	4b2a      	ldr	r3, [pc, #168]	; (8007940 <scaraInitDuty+0xbc0>)
 8007896:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800789a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800789e:	4c28      	ldr	r4, [pc, #160]	; (8007940 <scaraInitDuty+0xbc0>)
 80078a0:	4613      	mov	r3, r2
 80078a2:	005b      	lsls	r3, r3, #1
 80078a4:	4413      	add	r3, r2
 80078a6:	01db      	lsls	r3, r3, #7
 80078a8:	4423      	add	r3, r4
 80078aa:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80078ae:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80078b2:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 80078b6:	4613      	mov	r3, r2
 80078b8:	005b      	lsls	r3, r3, #1
 80078ba:	4413      	add	r3, r2
 80078bc:	01db      	lsls	r3, r3, #7
 80078be:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80078c2:	4a1f      	ldr	r2, [pc, #124]	; (8007940 <scaraInitDuty+0xbc0>)
 80078c4:	1898      	adds	r0, r3, r2
 80078c6:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80078ca:	4a1e      	ldr	r2, [pc, #120]	; (8007944 <scaraInitDuty+0xbc4>)
 80078cc:	5cd1      	ldrb	r1, [r2, r3]
 80078ce:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80078d2:	f107 0208 	add.w	r2, r7, #8
 80078d6:	00db      	lsls	r3, r3, #3
 80078d8:	4413      	add	r3, r2
 80078da:	ed93 7b00 	vldr	d7, [r3]
 80078de:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80078e2:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80078e6:	eeb0 2a45 	vmov.f32	s4, s10
 80078ea:	eef0 2a65 	vmov.f32	s5, s11
 80078ee:	eeb0 1a46 	vmov.f32	s2, s12
 80078f2:	eef0 1a66 	vmov.f32	s3, s13
 80078f6:	2201      	movs	r2, #1
 80078f8:	eeb0 0a47 	vmov.f32	s0, s14
 80078fc:	eef0 0a67 	vmov.f32	s1, s15
 8007900:	f001 fe6e 	bl	80095e0 <scaraInitLSPB>
 8007904:	4603      	mov	r3, r0
 8007906:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 800790a:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 800790e:	3301      	adds	r3, #1
 8007910:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 8007914:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8007918:	2b03      	cmp	r3, #3
 800791a:	d9ad      	bls.n	8007878 <scaraInitDuty+0xaf8>
 800791c:	e156      	b.n	8007bcc <scaraInitDuty+0xe4c>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				}

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 800791e:	2308      	movs	r3, #8
 8007920:	e182      	b.n	8007c28 <scaraInitDuty+0xea8>
			}
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8007922:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8007926:	2b01      	cmp	r3, #1
 8007928:	f040 814c 	bne.w	8007bc4 <scaraInitDuty+0xe44>
			// Mode Init Time
			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800792c:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007930:	2b01      	cmp	r3, #1
 8007932:	d167      	bne.n	8007a04 <scaraInitDuty+0xc84>
				for ( uint8_t i = 0; i < 4; i++) {
 8007934:	2300      	movs	r3, #0
 8007936:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 800793a:	e057      	b.n	80079ec <scaraInitDuty+0xc6c>
 800793c:	20010af0 	.word	0x20010af0
 8007940:	2000ff30 	.word	0x2000ff30
 8007944:	20004088 	.word	0x20004088
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8007948:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 800794c:	49bb      	ldr	r1, [pc, #748]	; (8007c3c <scaraInitDuty+0xebc>)
 800794e:	4613      	mov	r3, r2
 8007950:	005b      	lsls	r3, r3, #1
 8007952:	4413      	add	r3, r2
 8007954:	01db      	lsls	r3, r3, #7
 8007956:	440b      	add	r3, r1
 8007958:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800795c:	2201      	movs	r2, #1
 800795e:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8007960:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 8007964:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8007968:	4cb4      	ldr	r4, [pc, #720]	; (8007c3c <scaraInitDuty+0xebc>)
 800796a:	4613      	mov	r3, r2
 800796c:	005b      	lsls	r3, r3, #1
 800796e:	4413      	add	r3, r2
 8007970:	01db      	lsls	r3, r3, #7
 8007972:	4423      	add	r3, r4
 8007974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007978:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitScurve1(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 800797c:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 8007980:	4613      	mov	r3, r2
 8007982:	005b      	lsls	r3, r3, #1
 8007984:	4413      	add	r3, r2
 8007986:	01db      	lsls	r3, r3, #7
 8007988:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800798c:	4aab      	ldr	r2, [pc, #684]	; (8007c3c <scaraInitDuty+0xebc>)
 800798e:	1898      	adds	r0, r3, r2
 8007990:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8007994:	4aaa      	ldr	r2, [pc, #680]	; (8007c40 <scaraInitDuty+0xec0>)
 8007996:	5cd1      	ldrb	r1, [r2, r3]
 8007998:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 800799c:	f107 0208 	add.w	r2, r7, #8
 80079a0:	00db      	lsls	r3, r3, #3
 80079a2:	4413      	add	r3, r2
 80079a4:	ed93 7b00 	vldr	d7, [r3]
 80079a8:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80079ac:	ed97 5b7c 	vldr	d5, [r7, #496]	; 0x1f0
 80079b0:	eeb0 2a45 	vmov.f32	s4, s10
 80079b4:	eef0 2a65 	vmov.f32	s5, s11
 80079b8:	eeb0 1a46 	vmov.f32	s2, s12
 80079bc:	eef0 1a66 	vmov.f32	s3, s13
 80079c0:	2201      	movs	r2, #1
 80079c2:	eeb0 0a47 	vmov.f32	s0, s14
 80079c6:	eef0 0a67 	vmov.f32	s1, s15
 80079ca:	f000 feb5 	bl	8008738 <scaraInitScurve1>
 80079ce:	4603      	mov	r3, r0
 80079d0:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
					if(status1 != SCARA_STATUS_OK){
 80079d4:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <scaraInitDuty+0xc62>
						return status1;
 80079dc:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80079e0:	e122      	b.n	8007c28 <scaraInitDuty+0xea8>
				for ( uint8_t i = 0; i < 4; i++) {
 80079e2:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 80079e6:	3301      	adds	r3, #1
 80079e8:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 80079ec:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 80079f0:	2b03      	cmp	r3, #3
 80079f2:	d9a9      	bls.n	8007948 <scaraInitDuty+0xbc8>
					}
				}
				myDUTY.time_total = command.time_total;
 80079f4:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 80079f8:	4990      	ldr	r1, [pc, #576]	; (8007c3c <scaraInitDuty+0xebc>)
 80079fa:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80079fe:	e9c1 2300 	strd	r2, r3, [r1]
 8007a02:	e0e3      	b.n	8007bcc <scaraInitDuty+0xe4c>
			// Mode Init Acc
			} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8007a04:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f040 80d9 	bne.w	8007bc0 <scaraInitDuty+0xe40>
				for ( uint8_t i = 0; i < 4; i++) {
 8007a0e:	2300      	movs	r3, #0
 8007a10:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199
 8007a14:	e03c      	b.n	8007a90 <scaraInitDuty+0xd10>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8007a16:	f897 2199 	ldrb.w	r2, [r7, #409]	; 0x199
 8007a1a:	4988      	ldr	r1, [pc, #544]	; (8007c3c <scaraInitDuty+0xebc>)
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	005b      	lsls	r3, r3, #1
 8007a20:	4413      	add	r3, r2
 8007a22:	01db      	lsls	r3, r3, #7
 8007a24:	440b      	add	r3, r1
 8007a26:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	701a      	strb	r2, [r3, #0]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8007a2e:	f897 2199 	ldrb.w	r2, [r7, #409]	; 0x199
 8007a32:	4613      	mov	r3, r2
 8007a34:	005b      	lsls	r3, r3, #1
 8007a36:	4413      	add	r3, r2
 8007a38:	01db      	lsls	r3, r3, #7
 8007a3a:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8007a3e:	4a7f      	ldr	r2, [pc, #508]	; (8007c3c <scaraInitDuty+0xebc>)
 8007a40:	1898      	adds	r0, r3, r2
 8007a42:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 8007a46:	4a7e      	ldr	r2, [pc, #504]	; (8007c40 <scaraInitDuty+0xec0>)
 8007a48:	5cd1      	ldrb	r1, [r2, r3]
 8007a4a:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 8007a4e:	f107 0208 	add.w	r2, r7, #8
 8007a52:	00db      	lsls	r3, r3, #3
 8007a54:	4413      	add	r3, r2
 8007a56:	ed93 7b00 	vldr	d7, [r3]
 8007a5a:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007a5e:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8007a62:	eeb0 2a45 	vmov.f32	s4, s10
 8007a66:	eef0 2a65 	vmov.f32	s5, s11
 8007a6a:	eeb0 1a46 	vmov.f32	s2, s12
 8007a6e:	eef0 1a66 	vmov.f32	s3, s13
 8007a72:	2200      	movs	r2, #0
 8007a74:	eeb0 0a47 	vmov.f32	s0, s14
 8007a78:	eef0 0a67 	vmov.f32	s1, s15
 8007a7c:	f002 f982 	bl	8009d84 <scaraInitScurve>
 8007a80:	4603      	mov	r3, r0
 8007a82:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 8007a86:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199
 8007a90:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 8007a94:	2b03      	cmp	r3, #3
 8007a96:	d9be      	bls.n	8007a16 <scaraInitDuty+0xc96>
										q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				}
				myDUTY.time_total = 0;
 8007a98:	4b68      	ldr	r3, [pc, #416]	; (8007c3c <scaraInitDuty+0xebc>)
 8007a9a:	f603 2138 	addw	r1, r3, #2616	; 0xa38
 8007a9e:	f04f 0200 	mov.w	r2, #0
 8007aa2:	f04f 0300 	mov.w	r3, #0
 8007aa6:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
 8007ab0:	e02b      	b.n	8007b0a <scaraInitDuty+0xd8a>
					if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 8007ab2:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 8007ab6:	4961      	ldr	r1, [pc, #388]	; (8007c3c <scaraInitDuty+0xebc>)
 8007ab8:	4613      	mov	r3, r2
 8007aba:	005b      	lsls	r3, r3, #1
 8007abc:	4413      	add	r3, r2
 8007abe:	01db      	lsls	r3, r3, #7
 8007ac0:	440b      	add	r3, r1
 8007ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ac6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007aca:	4b5c      	ldr	r3, [pc, #368]	; (8007c3c <scaraInitDuty+0xebc>)
 8007acc:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad4:	f7f9 f820 	bl	8000b18 <__aeabi_dcmpgt>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d010      	beq.n	8007b00 <scaraInitDuty+0xd80>
						myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8007ade:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 8007ae2:	4956      	ldr	r1, [pc, #344]	; (8007c3c <scaraInitDuty+0xebc>)
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	005b      	lsls	r3, r3, #1
 8007ae8:	4413      	add	r3, r2
 8007aea:	01db      	lsls	r3, r3, #7
 8007aec:	440b      	add	r3, r1
 8007aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af6:	4951      	ldr	r1, [pc, #324]	; (8007c3c <scaraInitDuty+0xebc>)
 8007af8:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007afc:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 8007b00:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8007b04:	3301      	adds	r3, #1
 8007b06:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
 8007b0a:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	d9cf      	bls.n	8007ab2 <scaraInitDuty+0xd32>
					}
				}
				for ( uint8_t i = 0; i < 4; i++) {
 8007b12:	2300      	movs	r3, #0
 8007b14:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8007b18:	e04d      	b.n	8007bb6 <scaraInitDuty+0xe36>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8007b1a:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 8007b1e:	4947      	ldr	r1, [pc, #284]	; (8007c3c <scaraInitDuty+0xebc>)
 8007b20:	4613      	mov	r3, r2
 8007b22:	005b      	lsls	r3, r3, #1
 8007b24:	4413      	add	r3, r2
 8007b26:	01db      	lsls	r3, r3, #7
 8007b28:	440b      	add	r3, r1
 8007b2a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007b2e:	2201      	movs	r2, #1
 8007b30:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 8007b32:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 8007b36:	4b41      	ldr	r3, [pc, #260]	; (8007c3c <scaraInitDuty+0xebc>)
 8007b38:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007b3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b40:	4c3e      	ldr	r4, [pc, #248]	; (8007c3c <scaraInitDuty+0xebc>)
 8007b42:	4613      	mov	r3, r2
 8007b44:	005b      	lsls	r3, r3, #1
 8007b46:	4413      	add	r3, r2
 8007b48:	01db      	lsls	r3, r3, #7
 8007b4a:	4423      	add	r3, r4
 8007b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b50:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8007b54:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 8007b58:	4613      	mov	r3, r2
 8007b5a:	005b      	lsls	r3, r3, #1
 8007b5c:	4413      	add	r3, r2
 8007b5e:	01db      	lsls	r3, r3, #7
 8007b60:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8007b64:	4a35      	ldr	r2, [pc, #212]	; (8007c3c <scaraInitDuty+0xebc>)
 8007b66:	1898      	adds	r0, r3, r2
 8007b68:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007b6c:	4a34      	ldr	r2, [pc, #208]	; (8007c40 <scaraInitDuty+0xec0>)
 8007b6e:	5cd1      	ldrb	r1, [r2, r3]
 8007b70:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007b74:	f107 0208 	add.w	r2, r7, #8
 8007b78:	00db      	lsls	r3, r3, #3
 8007b7a:	4413      	add	r3, r2
 8007b7c:	ed93 7b00 	vldr	d7, [r3]
 8007b80:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007b84:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8007b88:	eeb0 2a45 	vmov.f32	s4, s10
 8007b8c:	eef0 2a65 	vmov.f32	s5, s11
 8007b90:	eeb0 1a46 	vmov.f32	s2, s12
 8007b94:	eef0 1a66 	vmov.f32	s3, s13
 8007b98:	2201      	movs	r2, #1
 8007b9a:	eeb0 0a47 	vmov.f32	s0, s14
 8007b9e:	eef0 0a67 	vmov.f32	s1, s15
 8007ba2:	f002 f8ef 	bl	8009d84 <scaraInitScurve>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 8007bac:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8007bb6:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007bba:	2b03      	cmp	r3, #3
 8007bbc:	d9ad      	bls.n	8007b1a <scaraInitDuty+0xd9a>
 8007bbe:	e005      	b.n	8007bcc <scaraInitDuty+0xe4c>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				}

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8007bc0:	2308      	movs	r3, #8
 8007bc2:	e031      	b.n	8007c28 <scaraInitDuty+0xea8>
			}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8007bc4:	2305      	movs	r3, #5
 8007bc6:	e02f      	b.n	8007c28 <scaraInitDuty+0xea8>
			}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8007bc8:	2302      	movs	r3, #2
 8007bca:	e02d      	b.n	8007c28 <scaraInitDuty+0xea8>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 8007bcc:	491d      	ldr	r1, [pc, #116]	; (8007c44 <scaraInitDuty+0xec4>)
 8007bce:	f04f 0200 	mov.w	r2, #0
 8007bd2:	f04f 0300 	mov.w	r3, #0
 8007bd6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 8007bda:	4b18      	ldr	r3, [pc, #96]	; (8007c3c <scaraInitDuty+0xebc>)
 8007bdc:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be4:	4917      	ldr	r1, [pc, #92]	; (8007c44 <scaraInitDuty+0xec4>)
 8007be6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	positionNext.t = 0;
 8007bea:	4917      	ldr	r1, [pc, #92]	; (8007c48 <scaraInitDuty+0xec8>)
 8007bec:	f04f 0200 	mov.w	r2, #0
 8007bf0:	f04f 0300 	mov.w	r3, #0
 8007bf4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 8007bf8:	4b10      	ldr	r3, [pc, #64]	; (8007c3c <scaraInitDuty+0xebc>)
 8007bfa:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	4911      	ldr	r1, [pc, #68]	; (8007c48 <scaraInitDuty+0xec8>)
 8007c04:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	positionTrue.t = 0;
 8007c08:	4910      	ldr	r1, [pc, #64]	; (8007c4c <scaraInitDuty+0xecc>)
 8007c0a:	f04f 0200 	mov.w	r2, #0
 8007c0e:	f04f 0300 	mov.w	r3, #0
 8007c12:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 8007c16:	4b09      	ldr	r3, [pc, #36]	; (8007c3c <scaraInitDuty+0xebc>)
 8007c18:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c20:	490a      	ldr	r1, [pc, #40]	; (8007c4c <scaraInitDuty+0xecc>)
 8007c22:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	return SCARA_STATUS_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	ecbd 8b02 	vpop	{d8}
 8007c34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007c38:	b004      	add	sp, #16
 8007c3a:	4770      	bx	lr
 8007c3c:	2000ff30 	.word	0x2000ff30
 8007c40:	20004088 	.word	0x20004088
 8007c44:	20010af0 	.word	0x20010af0
 8007c48:	20010c70 	.word	0x20010c70
 8007c4c:	20010bb0 	.word	0x20010bb0

08007c50 <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 8007c50:	b082      	sub	sp, #8
 8007c52:	b5b0      	push	{r4, r5, r7, lr}
 8007c54:	b0b0      	sub	sp, #192	; 0xc0
 8007c56:	af2e      	add	r7, sp, #184	; 0xb8
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	f107 0118 	add.w	r1, r7, #24
 8007c5e:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 8007c62:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8007c66:	4668      	mov	r0, sp
 8007c68:	f107 0320 	add.w	r3, r7, #32
 8007c6c:	22b8      	movs	r2, #184	; 0xb8
 8007c6e:	4619      	mov	r1, r3
 8007c70:	f00e fc6e 	bl	8016550 <memcpy>
 8007c74:	f107 0318 	add.w	r3, r7, #24
 8007c78:	cb0c      	ldmia	r3, {r2, r3}
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f7fd fd40 	bl	8005700 <kinematicInverse>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d101      	bne.n	8007c8a <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007c86:	2307      	movs	r3, #7
 8007c88:	e08e      	b.n	8007da8 <scaraInitLine+0x158>
	}
	// Init line params
	line->x1 = end.x;
 8007c8a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8007c8e:	6879      	ldr	r1, [r7, #4]
 8007c90:	e9c1 2302 	strd	r2, r3, [r1, #8]
	line->y1 = end.y;
 8007c94:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8007c98:	6879      	ldr	r1, [r7, #4]
 8007c9a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	line->z1 = end.z;
 8007c9e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8007ca2:	6879      	ldr	r1, [r7, #4]
 8007ca4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	line->x0 = start.x;
 8007ca8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007cac:	6879      	ldr	r1, [r7, #4]
 8007cae:	e9c1 2300 	strd	r2, r3, [r1]
	line->y0 = start.y;
 8007cb2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007cb6:	6879      	ldr	r1, [r7, #4]
 8007cb8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	line->z0 = start.z;
 8007cbc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007cc0:	6879      	ldr	r1, [r7, #4]
 8007cc2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	line->denta_x = end.x  -  start.x;
 8007cc6:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8007cca:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007cce:	f7f8 fadb 	bl	8000288 <__aeabi_dsub>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	6879      	ldr	r1, [r7, #4]
 8007cd8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 8007cdc:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8007ce0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007ce4:	f7f8 fad0 	bl	8000288 <__aeabi_dsub>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	460b      	mov	r3, r1
 8007cec:	6879      	ldr	r1, [r7, #4]
 8007cee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 8007cf2:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8007cf6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007cfa:	f7f8 fac5 	bl	8000288 <__aeabi_dsub>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	6879      	ldr	r1, [r7, #4]
 8007d04:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007d14:	f7f8 fc70 	bl	80005f8 <__aeabi_dmul>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	4614      	mov	r4, r2
 8007d1e:	461d      	mov	r5, r3
			       +(line->denta_y)*(line->denta_y)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007d2c:	f7f8 fc64 	bl	80005f8 <__aeabi_dmul>
 8007d30:	4602      	mov	r2, r0
 8007d32:	460b      	mov	r3, r1
 8007d34:	4620      	mov	r0, r4
 8007d36:	4629      	mov	r1, r5
 8007d38:	f7f8 faa8 	bl	800028c <__adddf3>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4614      	mov	r4, r2
 8007d42:	461d      	mov	r5, r3
				   +(line->denta_z)*(line->denta_z));
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8007d50:	f7f8 fc52 	bl	80005f8 <__aeabi_dmul>
 8007d54:	4602      	mov	r2, r0
 8007d56:	460b      	mov	r3, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8007d58:	4620      	mov	r0, r4
 8007d5a:	4629      	mov	r1, r5
 8007d5c:	f7f8 fa96 	bl	800028c <__adddf3>
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	ec43 2b17 	vmov	d7, r2, r3
 8007d68:	eeb0 0a47 	vmov.f32	s0, s14
 8007d6c:	eef0 0a67 	vmov.f32	s1, s15
 8007d70:	f013 f9fe 	bl	801b170 <sqrt>
 8007d74:	eeb0 7a40 	vmov.f32	s14, s0
 8007d78:	eef0 7a60 	vmov.f32	s15, s1
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	6879      	ldr	r1, [r7, #4]
 8007d8a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	line->y_current = line->y0;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007d94:	6879      	ldr	r1, [r7, #4]
 8007d96:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	line->z_current = line->z0;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007da0:	6879      	ldr	r1, [r7, #4]
 8007da2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	return SCARA_STATUS_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8007db2:	b002      	add	sp, #8
 8007db4:	4770      	bx	lr
	...

08007db8 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8007db8:	b082      	sub	sp, #8
 8007dba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dbe:	b0c5      	sub	sp, #276	; 0x114
 8007dc0:	af2e      	add	r7, sp, #184	; 0xb8
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8007dc8:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 8007dcc:	f507 76a0 	add.w	r6, r7, #320	; 0x140
 8007dd0:	4668      	mov	r0, sp
 8007dd2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007dd6:	22b8      	movs	r2, #184	; 0xb8
 8007dd8:	4619      	mov	r1, r3
 8007dda:	f00e fbb9 	bl	8016550 <memcpy>
 8007dde:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007de2:	cb0c      	ldmia	r3, {r2, r3}
 8007de4:	4630      	mov	r0, r6
 8007de6:	f7fd fc8b 	bl	8005700 <kinematicInverse>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d101      	bne.n	8007df4 <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007df0:	2307      	movs	r3, #7
 8007df2:	e17b      	b.n	80080ec <scaraInitCircle+0x334>
	}

//	if( 1 != dir && -1 != dir) {
//		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
//	}
	if(dir != 1 && dir != -1){
 8007df4:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d006      	beq.n	8007e0a <scaraInitCircle+0x52>
 8007dfc:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e04:	d001      	beq.n	8007e0a <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;
 8007e06:	2306      	movs	r3, #6
 8007e08:	e170      	b.n	80080ec <scaraInitCircle+0x334>
	}

	double x_start, y_start, x_stop, y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	x_start = start.x - center.x;
 8007e0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007e0e:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8007e12:	f7f8 fa39 	bl	8000288 <__aeabi_dsub>
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	y_start = start.y - center.y;
 8007e1e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8007e22:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8007e26:	f7f8 fa2f 	bl	8000288 <__aeabi_dsub>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	x_stop  = end.x  - center.x;
 8007e32:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8007e36:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8007e3a:	f7f8 fa25 	bl	8000288 <__aeabi_dsub>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	460b      	mov	r3, r1
 8007e42:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	y_stop  = end.y  - center.y;
 8007e46:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8007e4a:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8007e4e:	f7f8 fa1b 	bl	8000288 <__aeabi_dsub>
 8007e52:	4602      	mov	r2, r0
 8007e54:	460b      	mov	r3, r1
 8007e56:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	r1 = sqrt(x_start*x_start + y_start*y_start);
 8007e5a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007e62:	f7f8 fbc9 	bl	80005f8 <__aeabi_dmul>
 8007e66:	4602      	mov	r2, r0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	4692      	mov	sl, r2
 8007e6c:	469b      	mov	fp, r3
 8007e6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e72:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007e76:	f7f8 fbbf 	bl	80005f8 <__aeabi_dmul>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	4650      	mov	r0, sl
 8007e80:	4659      	mov	r1, fp
 8007e82:	f7f8 fa03 	bl	800028c <__adddf3>
 8007e86:	4602      	mov	r2, r0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	ec43 2b17 	vmov	d7, r2, r3
 8007e8e:	eeb0 0a47 	vmov.f32	s0, s14
 8007e92:	eef0 0a67 	vmov.f32	s1, s15
 8007e96:	f013 f96b 	bl	801b170 <sqrt>
 8007e9a:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	r2 = sqrt(x_stop*x_stop + y_stop*y_stop);
 8007e9e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ea2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007ea6:	f7f8 fba7 	bl	80005f8 <__aeabi_dmul>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	4692      	mov	sl, r2
 8007eb0:	469b      	mov	fp, r3
 8007eb2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007eb6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007eba:	f7f8 fb9d 	bl	80005f8 <__aeabi_dmul>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	4650      	mov	r0, sl
 8007ec4:	4659      	mov	r1, fp
 8007ec6:	f7f8 f9e1 	bl	800028c <__adddf3>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	460b      	mov	r3, r1
 8007ece:	ec43 2b17 	vmov	d7, r2, r3
 8007ed2:	eeb0 0a47 	vmov.f32	s0, s14
 8007ed6:	eef0 0a67 	vmov.f32	s1, s15
 8007eda:	f013 f949 	bl	801b170 <sqrt>
 8007ede:	ed87 0b08 	vstr	d0, [r7, #32]

	if( 1.0 < fabs(r1 - r2)) {
 8007ee2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ee6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007eea:	f7f8 f9cd 	bl	8000288 <__aeabi_dsub>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4690      	mov	r8, r2
 8007ef4:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8007ef8:	f04f 0200 	mov.w	r2, #0
 8007efc:	4b84      	ldr	r3, [pc, #528]	; (8008110 <scaraInitCircle+0x358>)
 8007efe:	4640      	mov	r0, r8
 8007f00:	4649      	mov	r1, r9
 8007f02:	f7f8 fe09 	bl	8000b18 <__aeabi_dcmpgt>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 8007f0c:	2306      	movs	r3, #6
 8007f0e:	e0ed      	b.n	80080ec <scaraInitCircle+0x334>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 8007f10:	a37b      	add	r3, pc, #492	; (adr r3, 8008100 <scaraInitCircle+0x348>)
 8007f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007f1a:	f7f8 fddf 	bl	8000adc <__aeabi_dcmplt>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d109      	bne.n	8007f38 <scaraInitCircle+0x180>
 8007f24:	a376      	add	r3, pc, #472	; (adr r3, 8008100 <scaraInitCircle+0x348>)
 8007f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007f2e:	f7f8 fdd5 	bl	8000adc <__aeabi_dcmplt>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8007f38:	2306      	movs	r3, #6
 8007f3a:	e0d7      	b.n	80080ec <scaraInitCircle+0x334>
	}

	angle_start = atan2(y_start, x_start);
 8007f3c:	ed97 1b12 	vldr	d1, [r7, #72]	; 0x48
 8007f40:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8007f44:	f013 f912 	bl	801b16c <atan2>
 8007f48:	ed87 0b06 	vstr	d0, [r7, #24]
	angle_stop  = atan2(y_stop, x_stop);
 8007f4c:	ed97 1b0e 	vldr	d1, [r7, #56]	; 0x38
 8007f50:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8007f54:	f013 f90a 	bl	801b16c <atan2>
 8007f58:	ed87 0b04 	vstr	d0, [r7, #16]
	delta_angle = angle_stop - angle_start;
 8007f5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f64:	f7f8 f990 	bl	8000288 <__aeabi_dsub>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	if (delta_angle < 0 && dir > 0) {
 8007f70:	f04f 0200 	mov.w	r2, #0
 8007f74:	f04f 0300 	mov.w	r3, #0
 8007f78:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007f7c:	f7f8 fdae 	bl	8000adc <__aeabi_dcmplt>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d015      	beq.n	8007fb2 <scaraInitCircle+0x1fa>
 8007f86:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	dd11      	ble.n	8007fb2 <scaraInitCircle+0x1fa>
		delta_angle = 2*PI - fabs(delta_angle); //this state mean that the arc radius is over 180
 8007f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f90:	603b      	str	r3, [r7, #0]
 8007f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f98:	607b      	str	r3, [r7, #4]
 8007f9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f9e:	a15a      	add	r1, pc, #360	; (adr r1, 8008108 <scaraInitCircle+0x350>)
 8007fa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fa4:	f7f8 f970 	bl	8000288 <__aeabi_dsub>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8007fb0:	e01d      	b.n	8007fee <scaraInitCircle+0x236>
	}else if(delta_angle > 0 && dir < 0){
 8007fb2:	f04f 0200 	mov.w	r2, #0
 8007fb6:	f04f 0300 	mov.w	r3, #0
 8007fba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007fbe:	f7f8 fdab 	bl	8000b18 <__aeabi_dcmpgt>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d012      	beq.n	8007fee <scaraInitCircle+0x236>
 8007fc8:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	da0e      	bge.n	8007fee <scaraInitCircle+0x236>
		delta_angle = 2*PI - fabs(delta_angle);
 8007fd0:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8007fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fd4:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8007fd8:	4622      	mov	r2, r4
 8007fda:	462b      	mov	r3, r5
 8007fdc:	a14a      	add	r1, pc, #296	; (adr r1, 8008108 <scaraInitCircle+0x350>)
 8007fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fe2:	f7f8 f951 	bl	8000288 <__aeabi_dsub>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	460b      	mov	r3, r1
 8007fea:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	}
	if(delta_angle*dir < 0){
 8007fee:	f8d7 02c0 	ldr.w	r0, [r7, #704]	; 0x2c0
 8007ff2:	f7f8 fa97 	bl	8000524 <__aeabi_i2d>
 8007ff6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007ffa:	f7f8 fafd 	bl	80005f8 <__aeabi_dmul>
 8007ffe:	4602      	mov	r2, r0
 8008000:	460b      	mov	r3, r1
 8008002:	4610      	mov	r0, r2
 8008004:	4619      	mov	r1, r3
 8008006:	f04f 0200 	mov.w	r2, #0
 800800a:	f04f 0300 	mov.w	r3, #0
 800800e:	f7f8 fd65 	bl	8000adc <__aeabi_dcmplt>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d005      	beq.n	8008024 <scaraInitCircle+0x26c>
		delta_angle = fabs(delta_angle);
 8008018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800801a:	653b      	str	r3, [r7, #80]	; 0x50
 800801c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800801e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008022:	657b      	str	r3, [r7, #84]	; 0x54

//	if ( 0 > dir) {
//		delta_angle = 2*PI - delta_angle;
//	}
	// Init circle params
	circle->dir = dir;
 8008024:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8008028:	b25a      	sxtb	r2, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 800802e:	68f9      	ldr	r1, [r7, #12]
 8008030:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008034:	e9c1 2302 	strd	r2, r3, [r1, #8]
	circle->angle_start = angle_start;
 8008038:	68f9      	ldr	r1, [r7, #12]
 800803a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800803e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	circle->angle_stop  = angle_stop;
 8008042:	68f9      	ldr	r1, [r7, #12]
 8008044:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008048:	e9c1 2306 	strd	r2, r3, [r1, #24]
	circle->total_angle = delta_angle;
 800804c:	68f9      	ldr	r1, [r7, #12]
 800804e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008052:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 8008056:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800805a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800805e:	f7f8 facb 	bl	80005f8 <__aeabi_dmul>
 8008062:	4602      	mov	r2, r0
 8008064:	460b      	mov	r3, r1
 8008066:	68f9      	ldr	r1, [r7, #12]
 8008068:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	circle->x0 = start.x;
 800806c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8008070:	68f9      	ldr	r1, [r7, #12]
 8008072:	e9c1 2308 	strd	r2, r3, [r1, #32]
	circle->y0 = start.y;
 8008076:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800807a:	68f9      	ldr	r1, [r7, #12]
 800807c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	circle->x1 = end.x;
 8008080:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8008084:	68f9      	ldr	r1, [r7, #12]
 8008086:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	circle->y1 = end.y;
 800808a:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800808e:	68f9      	ldr	r1, [r7, #12]
 8008090:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	circle->xi = center.x;
 8008094:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8008098:	68f9      	ldr	r1, [r7, #12]
 800809a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	circle->yi = center.y;
 800809e:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 80080a2:	68f9      	ldr	r1, [r7, #12]
 80080a4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	circle->z0 = start.z;
 80080a8:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80080ac:	68f9      	ldr	r1, [r7, #12]
 80080ae:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	circle->z1 = start.z;
 80080b2:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80080b6:	68f9      	ldr	r1, [r7, #12]
 80080b8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	circle->zi = start.z;
 80080bc:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80080c0:	68f9      	ldr	r1, [r7, #12]
 80080c2:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	circle->x_current = circle->x0;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080cc:	68f9      	ldr	r1, [r7, #12]
 80080ce:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	circle->y_current = circle->y0;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80080d8:	68f9      	ldr	r1, [r7, #12]
 80080da:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	circle->z_current = circle->z0;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80080e4:	68f9      	ldr	r1, [r7, #12]
 80080e6:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

	return SCARA_STATUS_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	375c      	adds	r7, #92	; 0x5c
 80080f0:	46bd      	mov	sp, r7
 80080f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f6:	b002      	add	sp, #8
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	f3af 8000 	nop.w
 8008100:	9999999a 	.word	0x9999999a
 8008104:	3fb99999 	.word	0x3fb99999
 8008108:	60000000 	.word	0x60000000
 800810c:	401921fb 	.word	0x401921fb
 8008110:	3ff00000 	.word	0x3ff00000

08008114 <scaraInitLinear>:

SCARA_StatusTypeDef scaraInitLinear(Trajectory_Linear_TypeDef *linear, Trajectory_TargetTypeDef target, double total_s,
									ModeInitTypeDef modeinit, double additional_factor)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b086      	sub	sp, #24
 8008118:	af00      	add	r7, sp, #0
 800811a:	6178      	str	r0, [r7, #20]
 800811c:	460b      	mov	r3, r1
 800811e:	ed87 0b02 	vstr	d0, [r7, #8]
 8008122:	ed87 1b00 	vstr	d1, [r7]
 8008126:	74fb      	strb	r3, [r7, #19]
 8008128:	4613      	mov	r3, r2
 800812a:	74bb      	strb	r3, [r7, #18]

	if(target == TRAJECTORY_3D){
 800812c:	7cfb      	ldrb	r3, [r7, #19]
 800812e:	2b04      	cmp	r3, #4
 8008130:	d004      	beq.n	800813c <scaraInitLinear+0x28>

	}else if(target == TRAJECTORY_ROLL){
 8008132:	7cfb      	ldrb	r3, [r7, #19]
 8008134:	2b05      	cmp	r3, #5
 8008136:	d001      	beq.n	800813c <scaraInitLinear+0x28>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 8008138:	2306      	movs	r3, #6
 800813a:	e032      	b.n	80081a2 <scaraInitLinear+0x8e>
	}

	if(modeinit == DUTY_MODE_INIT_QT){
 800813c:	7cbb      	ldrb	r3, [r7, #18]
 800813e:	2b03      	cmp	r3, #3
 8008140:	d110      	bne.n	8008164 <scaraInitLinear+0x50>
		linear->constant_v = total_s / additional_factor;
 8008142:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008146:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800814a:	f7f8 fb7f 	bl	800084c <__aeabi_ddiv>
 800814e:	4602      	mov	r2, r0
 8008150:	460b      	mov	r3, r1
 8008152:	6979      	ldr	r1, [r7, #20]
 8008154:	e9c1 2302 	strd	r2, r3, [r1, #8]
		linear->Tf = additional_factor;
 8008158:	6979      	ldr	r1, [r7, #20]
 800815a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800815e:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8008162:	e01d      	b.n	80081a0 <scaraInitLinear+0x8c>
		//linear->number_of_sample = ceilf(additional_factor / T_SAMPLING); // ceiling
	}else if(modeinit == DUTY_MODE_INIT_QV){
 8008164:	7cbb      	ldrb	r3, [r7, #18]
 8008166:	2b02      	cmp	r3, #2
 8008168:	d118      	bne.n	800819c <scaraInitLinear+0x88>
		linear->constant_v = additional_factor * V_MOVE_MAX;
 800816a:	f04f 0200 	mov.w	r2, #0
 800816e:	4b0f      	ldr	r3, [pc, #60]	; (80081ac <scaraInitLinear+0x98>)
 8008170:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008174:	f7f8 fa40 	bl	80005f8 <__aeabi_dmul>
 8008178:	4602      	mov	r2, r0
 800817a:	460b      	mov	r3, r1
 800817c:	6979      	ldr	r1, [r7, #20]
 800817e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		linear->Tf = total_s / linear->constant_v;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008188:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800818c:	f7f8 fb5e 	bl	800084c <__aeabi_ddiv>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	6979      	ldr	r1, [r7, #20]
 8008196:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800819a:	e001      	b.n	80081a0 <scaraInitLinear+0x8c>
	}else{
		return SCARA_STATUS_ERROR_PARA;
 800819c:	2306      	movs	r3, #6
 800819e:	e000      	b.n	80081a2 <scaraInitLinear+0x8e>
	}

	return SCARA_STATUS_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3718      	adds	r7, #24
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	40877000 	.word	0x40877000

080081b0 <scaraInitLSPB1>:
SCARA_StatusTypeDef	scaraInitLSPB1		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double additional_factor){
 80081b0:	b5b0      	push	{r4, r5, r7, lr}
 80081b2:	b096      	sub	sp, #88	; 0x58
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	61f8      	str	r0, [r7, #28]
 80081b8:	460b      	mov	r3, r1
 80081ba:	ed87 0b04 	vstr	d0, [r7, #16]
 80081be:	ed87 1b02 	vstr	d1, [r7, #8]
 80081c2:	ed87 2b00 	vstr	d2, [r7]
 80081c6:	76fb      	strb	r3, [r7, #27]
 80081c8:	4613      	mov	r3, r2
 80081ca:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	if(total_s < 0){
 80081cc:	f04f 0200 	mov.w	r2, #0
 80081d0:	f04f 0300 	mov.w	r3, #0
 80081d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80081d8:	f7f8 fc80 	bl	8000adc <__aeabi_dcmplt>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d009      	beq.n	80081f6 <scaraInitLSPB1+0x46>
		total_s = -total_s;
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	613b      	str	r3, [r7, #16]
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80081ec:	617b      	str	r3, [r7, #20]
		lspb->dir= -1;
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	22ff      	movs	r2, #255	; 0xff
 80081f2:	701a      	strb	r2, [r3, #0]
 80081f4:	e002      	b.n	80081fc <scaraInitLSPB1+0x4c>
	}else{
		lspb->dir= 1;
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	2201      	movs	r2, #1
 80081fa:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 80081fc:	7efb      	ldrb	r3, [r7, #27]
 80081fe:	2b04      	cmp	r3, #4
 8008200:	d12c      	bne.n	800825c <scaraInitLSPB1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8008202:	7ebb      	ldrb	r3, [r7, #26]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d10f      	bne.n	8008228 <scaraInitLSPB1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 8008208:	f04f 0200 	mov.w	r2, #0
 800820c:	4b98      	ldr	r3, [pc, #608]	; (8008470 <scaraInitLSPB1+0x2c0>)
 800820e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008212:	f7f8 f9f1 	bl	80005f8 <__aeabi_dmul>
 8008216:	4602      	mov	r2, r0
 8008218:	460b      	mov	r3, r1
 800821a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 800821e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008222:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8008226:	e073      	b.n	8008310 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8008228:	7ebb      	ldrb	r3, [r7, #26]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d170      	bne.n	8008310 <scaraInitLSPB1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 800822e:	f04f 0200 	mov.w	r2, #0
 8008232:	4b90      	ldr	r3, [pc, #576]	; (8008474 <scaraInitLSPB1+0x2c4>)
 8008234:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008238:	f7f8 f9de 	bl	80005f8 <__aeabi_dmul>
 800823c:	4602      	mov	r2, r0
 800823e:	460b      	mov	r3, r1
 8008240:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			v_design = V_MOVE_MAX*v_factor;
 8008244:	f04f 0200 	mov.w	r2, #0
 8008248:	4b89      	ldr	r3, [pc, #548]	; (8008470 <scaraInitLSPB1+0x2c0>)
 800824a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800824e:	f7f8 f9d3 	bl	80005f8 <__aeabi_dmul>
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
 8008256:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 800825a:	e059      	b.n	8008310 <scaraInitLSPB1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 800825c:	7efb      	ldrb	r3, [r7, #27]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d112      	bne.n	8008288 <scaraInitLSPB1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8008262:	7ebb      	ldrb	r3, [r7, #26]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d153      	bne.n	8008310 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 8008268:	a373      	add	r3, pc, #460	; (adr r3, 8008438 <scaraInitLSPB1+0x288>)
 800826a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008272:	f7f8 f9c1 	bl	80005f8 <__aeabi_dmul>
 8008276:	4602      	mov	r2, r0
 8008278:	460b      	mov	r3, r1
 800827a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 800827e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008282:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8008286:	e043      	b.n	8008310 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J1){
 8008288:	7efb      	ldrb	r3, [r7, #27]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d112      	bne.n	80082b4 <scaraInitLSPB1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800828e:	7ebb      	ldrb	r3, [r7, #26]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d13d      	bne.n	8008310 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 8008294:	a368      	add	r3, pc, #416	; (adr r3, 8008438 <scaraInitLSPB1+0x288>)
 8008296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800829e:	f7f8 f9ab 	bl	80005f8 <__aeabi_dmul>
 80082a2:	4602      	mov	r2, r0
 80082a4:	460b      	mov	r3, r1
 80082a6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 80082aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80082b2:	e02d      	b.n	8008310 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J2){
 80082b4:	7efb      	ldrb	r3, [r7, #27]
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d112      	bne.n	80082e0 <scaraInitLSPB1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80082ba:	7ebb      	ldrb	r3, [r7, #26]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d127      	bne.n	8008310 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 80082c0:	a35f      	add	r3, pc, #380	; (adr r3, 8008440 <scaraInitLSPB1+0x290>)
 80082c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082ca:	f7f8 f995 	bl	80005f8 <__aeabi_dmul>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 80082d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082da:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80082de:	e017      	b.n	8008310 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J3){
 80082e0:	7efb      	ldrb	r3, [r7, #27]
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d112      	bne.n	800830c <scaraInitLSPB1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80082e6:	7ebb      	ldrb	r3, [r7, #26]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d111      	bne.n	8008310 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 80082ec:	a356      	add	r3, pc, #344	; (adr r3, 8008448 <scaraInitLSPB1+0x298>)
 80082ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082f6:	f7f8 f97f 	bl	80005f8 <__aeabi_dmul>
 80082fa:	4602      	mov	r2, r0
 80082fc:	460b      	mov	r3, r1
 80082fe:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8008302:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008306:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800830a:	e001      	b.n	8008310 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 800830c:	2306      	movs	r3, #6
 800830e:	e201      	b.n	8008714 <scaraInitLSPB1+0x564>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8008310:	7ebb      	ldrb	r3, [r7, #26]
 8008312:	2b01      	cmp	r3, #1
 8008314:	f040 80f2 	bne.w	80084fc <scaraInitLSPB1+0x34c>
		if(tf < 0.1 && v_design > 3){ //check if time valid or not
 8008318:	a34d      	add	r3, pc, #308	; (adr r3, 8008450 <scaraInitLSPB1+0x2a0>)
 800831a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008322:	f7f8 fbdb 	bl	8000adc <__aeabi_dcmplt>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d01d      	beq.n	8008368 <scaraInitLSPB1+0x1b8>
 800832c:	f04f 0200 	mov.w	r2, #0
 8008330:	4b51      	ldr	r3, [pc, #324]	; (8008478 <scaraInitLSPB1+0x2c8>)
 8008332:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008336:	f7f8 fbef 	bl	8000b18 <__aeabi_dcmpgt>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d013      	beq.n	8008368 <scaraInitLSPB1+0x1b8>
			tf = 1.5*total_s/v_design;
 8008340:	f04f 0200 	mov.w	r2, #0
 8008344:	4b4d      	ldr	r3, [pc, #308]	; (800847c <scaraInitLSPB1+0x2cc>)
 8008346:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800834a:	f7f8 f955 	bl	80005f8 <__aeabi_dmul>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	4610      	mov	r0, r2
 8008354:	4619      	mov	r1, r3
 8008356:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800835a:	f7f8 fa77 	bl	800084c <__aeabi_ddiv>
 800835e:	4602      	mov	r2, r0
 8008360:	460b      	mov	r3, r1
 8008362:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8008366:	e0a4      	b.n	80084b2 <scaraInitLSPB1+0x302>
			//return SCARA_STATUS_ERROR_OVER_VELOC;
		}else if(v_design < 0.1 && tf > 0.15){ //check if velocity valid or not
 8008368:	a339      	add	r3, pc, #228	; (adr r3, 8008450 <scaraInitLSPB1+0x2a0>)
 800836a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008372:	f7f8 fbb3 	bl	8000adc <__aeabi_dcmplt>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d01d      	beq.n	80083b8 <scaraInitLSPB1+0x208>
 800837c:	a336      	add	r3, pc, #216	; (adr r3, 8008458 <scaraInitLSPB1+0x2a8>)
 800837e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008382:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008386:	f7f8 fbc7 	bl	8000b18 <__aeabi_dcmpgt>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d013      	beq.n	80083b8 <scaraInitLSPB1+0x208>
			v_design = 1.5*total_s/tf;
 8008390:	f04f 0200 	mov.w	r2, #0
 8008394:	4b39      	ldr	r3, [pc, #228]	; (800847c <scaraInitLSPB1+0x2cc>)
 8008396:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800839a:	f7f8 f92d 	bl	80005f8 <__aeabi_dmul>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	4610      	mov	r0, r2
 80083a4:	4619      	mov	r1, r3
 80083a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80083aa:	f7f8 fa4f 	bl	800084c <__aeabi_ddiv>
 80083ae:	4602      	mov	r2, r0
 80083b0:	460b      	mov	r3, r1
 80083b2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 80083b6:	e07c      	b.n	80084b2 <scaraInitLSPB1+0x302>
		}else if(v_design < 0.1 && tf < 0.1){
 80083b8:	a325      	add	r3, pc, #148	; (adr r3, 8008450 <scaraInitLSPB1+0x2a0>)
 80083ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083be:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80083c2:	f7f8 fb8b 	bl	8000adc <__aeabi_dcmplt>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00b      	beq.n	80083e4 <scaraInitLSPB1+0x234>
 80083cc:	a320      	add	r3, pc, #128	; (adr r3, 8008450 <scaraInitLSPB1+0x2a0>)
 80083ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80083d6:	f7f8 fb81 	bl	8000adc <__aeabi_dcmplt>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <scaraInitLSPB1+0x234>
			return SCARA_STATUS_ERROR_OVER_VELOC;
 80083e0:	2309      	movs	r3, #9
 80083e2:	e197      	b.n	8008714 <scaraInitLSPB1+0x564>
		}
		else{
			if(tf < 0.001){
 80083e4:	a31e      	add	r3, pc, #120	; (adr r3, 8008460 <scaraInitLSPB1+0x2b0>)
 80083e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80083ee:	f7f8 fb75 	bl	8000adc <__aeabi_dcmplt>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d001      	beq.n	80083fc <scaraInitLSPB1+0x24c>
				return SCARA_STATUS_ERROR_OVER_VELOC;
 80083f8:	2309      	movs	r3, #9
 80083fa:	e18b      	b.n	8008714 <scaraInitLSPB1+0x564>
			}else{
				v_lim = total_s/tf;
 80083fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008400:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008404:	f7f8 fa22 	bl	800084c <__aeabi_ddiv>
 8008408:	4602      	mov	r2, r0
 800840a:	460b      	mov	r3, r1
 800840c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			if(v_design < 1.1*v_lim){ //the accelaration part is too large
 8008410:	a315      	add	r3, pc, #84	; (adr r3, 8008468 <scaraInitLSPB1+0x2b8>)
 8008412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008416:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800841a:	f7f8 f8ed 	bl	80005f8 <__aeabi_dmul>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008426:	f7f8 fb59 	bl	8000adc <__aeabi_dcmplt>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d027      	beq.n	8008480 <scaraInitLSPB1+0x2d0>
				return SCARA_STATUS_ERROR_OVER_ACCEL;
 8008430:	230a      	movs	r3, #10
 8008432:	e16f      	b.n	8008714 <scaraInitLSPB1+0x564>
 8008434:	f3af 8000 	nop.w
 8008438:	14000000 	.word	0x14000000
 800843c:	4000f6f0 	.word	0x4000f6f0
 8008440:	00000000 	.word	0x00000000
 8008444:	405c2000 	.word	0x405c2000
 8008448:	6b259425 	.word	0x6b259425
 800844c:	40069b91 	.word	0x40069b91
 8008450:	9999999a 	.word	0x9999999a
 8008454:	3fb99999 	.word	0x3fb99999
 8008458:	33333333 	.word	0x33333333
 800845c:	3fc33333 	.word	0x3fc33333
 8008460:	d2f1a9fc 	.word	0xd2f1a9fc
 8008464:	3f50624d 	.word	0x3f50624d
 8008468:	9999999a 	.word	0x9999999a
 800846c:	3ff19999 	.word	0x3ff19999
 8008470:	40877000 	.word	0x40877000
 8008474:	407f4000 	.word	0x407f4000
 8008478:	40080000 	.word	0x40080000
 800847c:	3ff80000 	.word	0x3ff80000
			}else if(v_design > 2*v_lim){
 8008480:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	f7f7 ff00 	bl	800028c <__adddf3>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008494:	f7f8 fb40 	bl	8000b18 <__aeabi_dcmpgt>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d009      	beq.n	80084b2 <scaraInitLSPB1+0x302>
				v_design = 2*v_lim;
 800849e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80084a2:	4602      	mov	r2, r0
 80084a4:	460b      	mov	r3, r1
 80084a6:	f7f7 fef1 	bl	800028c <__adddf3>
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			}else{

			}
		}
		ta = tf - total_s/v_design;
 80084b2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80084b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80084ba:	f7f8 f9c7 	bl	800084c <__aeabi_ddiv>
 80084be:	4602      	mov	r2, r0
 80084c0:	460b      	mov	r3, r1
 80084c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80084c6:	f7f7 fedf 	bl	8000288 <__aeabi_dsub>
 80084ca:	4602      	mov	r2, r0
 80084cc:	460b      	mov	r3, r1
 80084ce:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		a_design = v_design/ta;
 80084d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80084d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80084da:	f7f8 f9b7 	bl	800084c <__aeabi_ddiv>
 80084de:	4602      	mov	r2, r0
 80084e0:	460b      	mov	r3, r1
 80084e2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		td = tf - ta;
 80084e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80084ea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80084ee:	f7f7 fecb 	bl	8000288 <__aeabi_dsub>
 80084f2:	4602      	mov	r2, r0
 80084f4:	460b      	mov	r3, r1
 80084f6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80084fa:	e0a9      	b.n	8008650 <scaraInitLSPB1+0x4a0>

	}else if(modeinit == DUTY_MODE_INIT_QVA){
 80084fc:	7ebb      	ldrb	r3, [r7, #26]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f040 80a6 	bne.w	8008650 <scaraInitLSPB1+0x4a0>
		//check qva condition
		if(total_s*a_design > v_design*v_design){ //condition for ta smaller than td
 8008504:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008508:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800850c:	f7f8 f874 	bl	80005f8 <__aeabi_dmul>
 8008510:	4602      	mov	r2, r0
 8008512:	460b      	mov	r3, r1
 8008514:	4614      	mov	r4, r2
 8008516:	461d      	mov	r5, r3
 8008518:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800851c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008520:	f7f8 f86a 	bl	80005f8 <__aeabi_dmul>
 8008524:	4602      	mov	r2, r0
 8008526:	460b      	mov	r3, r1
 8008528:	4620      	mov	r0, r4
 800852a:	4629      	mov	r1, r5
 800852c:	f7f8 faf4 	bl	8000b18 <__aeabi_dcmpgt>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d058      	beq.n	80085e8 <scaraInitLSPB1+0x438>
			if(total_s/v_design < 0.3){ //td too small
 8008536:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800853a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800853e:	f7f8 f985 	bl	800084c <__aeabi_ddiv>
 8008542:	4602      	mov	r2, r0
 8008544:	460b      	mov	r3, r1
 8008546:	4610      	mov	r0, r2
 8008548:	4619      	mov	r1, r3
 800854a:	a375      	add	r3, pc, #468	; (adr r3, 8008720 <scaraInitLSPB1+0x570>)
 800854c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008550:	f7f8 fac4 	bl	8000adc <__aeabi_dcmplt>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00a      	beq.n	8008570 <scaraInitLSPB1+0x3c0>
				//recalculate v_design
				v_design = total_s/0.3;
 800855a:	a371      	add	r3, pc, #452	; (adr r3, 8008720 <scaraInitLSPB1+0x570>)
 800855c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008560:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008564:	f7f8 f972 	bl	800084c <__aeabi_ddiv>
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			}
			if(v_design/a_design < 0.1){ //ta is too small
 8008570:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008574:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008578:	f7f8 f968 	bl	800084c <__aeabi_ddiv>
 800857c:	4602      	mov	r2, r0
 800857e:	460b      	mov	r3, r1
 8008580:	4610      	mov	r0, r2
 8008582:	4619      	mov	r1, r3
 8008584:	a368      	add	r3, pc, #416	; (adr r3, 8008728 <scaraInitLSPB1+0x578>)
 8008586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858a:	f7f8 faa7 	bl	8000adc <__aeabi_dcmplt>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00a      	beq.n	80085aa <scaraInitLSPB1+0x3fa>
				//recalculate a_design
				a_design = v_design/0.1;
 8008594:	a364      	add	r3, pc, #400	; (adr r3, 8008728 <scaraInitLSPB1+0x578>)
 8008596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800859e:	f7f8 f955 	bl	800084c <__aeabi_ddiv>
 80085a2:	4602      	mov	r2, r0
 80085a4:	460b      	mov	r3, r1
 80085a6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}
			ta = v_design/a_design;
 80085aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80085ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80085b2:	f7f8 f94b 	bl	800084c <__aeabi_ddiv>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			td = total_s/v_design;
 80085be:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80085c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80085c6:	f7f8 f941 	bl	800084c <__aeabi_ddiv>
 80085ca:	4602      	mov	r2, r0
 80085cc:	460b      	mov	r3, r1
 80085ce:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			tf = ta + td;
 80085d2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80085d6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80085da:	f7f7 fe57 	bl	800028c <__adddf3>
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80085e6:	e033      	b.n	8008650 <scaraInitLSPB1+0x4a0>
//				td = total_s/v_design;
//				tf = ta + td;
//			}

		}else{
			tf = 2*total_s/v_design;
 80085e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	f7f7 fe4c 	bl	800028c <__adddf3>
 80085f4:	4602      	mov	r2, r0
 80085f6:	460b      	mov	r3, r1
 80085f8:	4610      	mov	r0, r2
 80085fa:	4619      	mov	r1, r3
 80085fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008600:	f7f8 f924 	bl	800084c <__aeabi_ddiv>
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			ta = tf/2;
 800860c:	f04f 0200 	mov.w	r2, #0
 8008610:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008614:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008618:	f7f8 f918 	bl	800084c <__aeabi_ddiv>
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			td = tf/2;
 8008624:	f04f 0200 	mov.w	r2, #0
 8008628:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800862c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008630:	f7f8 f90c 	bl	800084c <__aeabi_ddiv>
 8008634:	4602      	mov	r2, r0
 8008636:	460b      	mov	r3, r1
 8008638:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			a_design = v_design/ta;
 800863c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008640:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008644:	f7f8 f902 	bl	800084c <__aeabi_ddiv>
 8008648:	4602      	mov	r2, r0
 800864a:	460b      	mov	r3, r1
 800864c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		}
	}
	no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8008650:	a337      	add	r3, pc, #220	; (adr r3, 8008730 <scaraInitLSPB1+0x580>)
 8008652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008656:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800865a:	f7f8 f8f7 	bl	800084c <__aeabi_ddiv>
 800865e:	4602      	mov	r2, r0
 8008660:	460b      	mov	r3, r1
 8008662:	4610      	mov	r0, r2
 8008664:	4619      	mov	r1, r3
 8008666:	f7f8 fabf 	bl	8000be8 <__aeabi_d2f>
 800866a:	4603      	mov	r3, r0
 800866c:	ee00 3a10 	vmov	s0, r3
 8008670:	f012 fd3a 	bl	801b0e8 <ceilf>
 8008674:	eef0 7a40 	vmov.f32	s15, s0
 8008678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800867c:	ee17 3a90 	vmov	r3, s15
 8008680:	627b      	str	r3, [r7, #36]	; 0x24
	 // Init lspb params

	 lspb->s0 = 0;
 8008682:	69f9      	ldr	r1, [r7, #28]
 8008684:	f04f 0200 	mov.w	r2, #0
 8008688:	f04f 0300 	mov.w	r3, #0
 800868c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	 lspb->s1 = total_s;
 8008690:	69f9      	ldr	r1, [r7, #28]
 8008692:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008696:	e9c1 2304 	strd	r2, r3, [r1, #16]
	 lspb->Ta = ta;
 800869a:	69f9      	ldr	r1, [r7, #28]
 800869c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80086a0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 lspb->Td = td;
 80086a4:	69f9      	ldr	r1, [r7, #28]
 80086a6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80086aa:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 lspb->Tf = tf;
 80086ae:	69f9      	ldr	r1, [r7, #28]
 80086b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80086b4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	 lspb->a_design = a_design;
 80086b8:	69f9      	ldr	r1, [r7, #28]
 80086ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80086be:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 lspb->v_design = v_design;
 80086c2:	69f9      	ldr	r1, [r7, #28]
 80086c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80086c8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 lspb->v_lim = v_design;
 80086cc:	69f9      	ldr	r1, [r7, #28]
 80086ce:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80086d2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 lspb->v0 = 0;
 80086d6:	69f9      	ldr	r1, [r7, #28]
 80086d8:	f04f 0200 	mov.w	r2, #0
 80086dc:	f04f 0300 	mov.w	r3, #0
 80086e0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	 lspb->v1 = 0;
 80086e4:	69f9      	ldr	r1, [r7, #28]
 80086e6:	f04f 0200 	mov.w	r2, #0
 80086ea:	f04f 0300 	mov.w	r3, #0
 80086ee:	e9c1 2308 	strd	r2, r3, [r1, #32]
	 lspb->num_of_sampling = no_sample;
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086f6:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008704:	f7f7 fdc0 	bl	8000288 <__aeabi_dsub>
 8008708:	4602      	mov	r2, r0
 800870a:	460b      	mov	r3, r1
 800870c:	69f9      	ldr	r1, [r7, #28]
 800870e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3758      	adds	r7, #88	; 0x58
 8008718:	46bd      	mov	sp, r7
 800871a:	bdb0      	pop	{r4, r5, r7, pc}
 800871c:	f3af 8000 	nop.w
 8008720:	33333333 	.word	0x33333333
 8008724:	3fd33333 	.word	0x3fd33333
 8008728:	9999999a 	.word	0x9999999a
 800872c:	3fb99999 	.word	0x3fb99999
 8008730:	40000000 	.word	0x40000000
 8008734:	3f847ae1 	.word	0x3f847ae1

08008738 <scaraInitScurve1>:
												Trajectory_TargetTypeDef target,
												double total_s,
												ModeInitTypeDef modeinit,
												double v_factor,
												double additional_factor)
{
 8008738:	b5b0      	push	{r4, r5, r7, lr}
 800873a:	b094      	sub	sp, #80	; 0x50
 800873c:	af00      	add	r7, sp, #0
 800873e:	61f8      	str	r0, [r7, #28]
 8008740:	460b      	mov	r3, r1
 8008742:	ed87 0b04 	vstr	d0, [r7, #16]
 8008746:	ed87 1b02 	vstr	d1, [r7, #8]
 800874a:	ed87 2b00 	vstr	d2, [r7]
 800874e:	76fb      	strb	r3, [r7, #27]
 8008750:	4613      	mov	r3, r2
 8008752:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	if(total_s < 0){
 8008754:	f04f 0200 	mov.w	r2, #0
 8008758:	f04f 0300 	mov.w	r3, #0
 800875c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008760:	f7f8 f9bc 	bl	8000adc <__aeabi_dcmplt>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d009      	beq.n	800877e <scaraInitScurve1+0x46>
		total_s = -total_s;
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	613b      	str	r3, [r7, #16]
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008774:	617b      	str	r3, [r7, #20]
		scurve->dir= -1;
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	22ff      	movs	r2, #255	; 0xff
 800877a:	701a      	strb	r2, [r3, #0]
 800877c:	e002      	b.n	8008784 <scaraInitScurve1+0x4c>
	}else{
		scurve->dir= 1;
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	2201      	movs	r2, #1
 8008782:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 8008784:	7efb      	ldrb	r3, [r7, #27]
 8008786:	2b04      	cmp	r3, #4
 8008788:	d12c      	bne.n	80087e4 <scaraInitScurve1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800878a:	7ebb      	ldrb	r3, [r7, #26]
 800878c:	2b01      	cmp	r3, #1
 800878e:	d10f      	bne.n	80087b0 <scaraInitScurve1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 8008790:	f04f 0200 	mov.w	r2, #0
 8008794:	4b90      	ldr	r3, [pc, #576]	; (80089d8 <scaraInitScurve1+0x2a0>)
 8008796:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800879a:	f7f7 ff2d 	bl	80005f8 <__aeabi_dmul>
 800879e:	4602      	mov	r2, r0
 80087a0:	460b      	mov	r3, r1
 80087a2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 80087a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80087ae:	e073      	b.n	8008898 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 80087b0:	7ebb      	ldrb	r3, [r7, #26]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d170      	bne.n	8008898 <scaraInitScurve1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 80087b6:	f04f 0200 	mov.w	r2, #0
 80087ba:	4b88      	ldr	r3, [pc, #544]	; (80089dc <scaraInitScurve1+0x2a4>)
 80087bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087c0:	f7f7 ff1a 	bl	80005f8 <__aeabi_dmul>
 80087c4:	4602      	mov	r2, r0
 80087c6:	460b      	mov	r3, r1
 80087c8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			v_design = V_MOVE_MAX*v_factor;
 80087cc:	f04f 0200 	mov.w	r2, #0
 80087d0:	4b81      	ldr	r3, [pc, #516]	; (80089d8 <scaraInitScurve1+0x2a0>)
 80087d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087d6:	f7f7 ff0f 	bl	80005f8 <__aeabi_dmul>
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
 80087de:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80087e2:	e059      	b.n	8008898 <scaraInitScurve1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 80087e4:	7efb      	ldrb	r3, [r7, #27]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d112      	bne.n	8008810 <scaraInitScurve1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80087ea:	7ebb      	ldrb	r3, [r7, #26]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d153      	bne.n	8008898 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 80087f0:	a36d      	add	r3, pc, #436	; (adr r3, 80089a8 <scaraInitScurve1+0x270>)
 80087f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087fa:	f7f7 fefd 	bl	80005f8 <__aeabi_dmul>
 80087fe:	4602      	mov	r2, r0
 8008800:	460b      	mov	r3, r1
 8008802:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 8008806:	e9d7 2300 	ldrd	r2, r3, [r7]
 800880a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800880e:	e043      	b.n	8008898 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J1){
 8008810:	7efb      	ldrb	r3, [r7, #27]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d112      	bne.n	800883c <scaraInitScurve1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8008816:	7ebb      	ldrb	r3, [r7, #26]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d13d      	bne.n	8008898 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 800881c:	a362      	add	r3, pc, #392	; (adr r3, 80089a8 <scaraInitScurve1+0x270>)
 800881e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008822:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008826:	f7f7 fee7 	bl	80005f8 <__aeabi_dmul>
 800882a:	4602      	mov	r2, r0
 800882c:	460b      	mov	r3, r1
 800882e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 8008832:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008836:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800883a:	e02d      	b.n	8008898 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J2){
 800883c:	7efb      	ldrb	r3, [r7, #27]
 800883e:	2b02      	cmp	r3, #2
 8008840:	d112      	bne.n	8008868 <scaraInitScurve1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8008842:	7ebb      	ldrb	r3, [r7, #26]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d127      	bne.n	8008898 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 8008848:	a359      	add	r3, pc, #356	; (adr r3, 80089b0 <scaraInitScurve1+0x278>)
 800884a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008852:	f7f7 fed1 	bl	80005f8 <__aeabi_dmul>
 8008856:	4602      	mov	r2, r0
 8008858:	460b      	mov	r3, r1
 800885a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 800885e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008862:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008866:	e017      	b.n	8008898 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J3){
 8008868:	7efb      	ldrb	r3, [r7, #27]
 800886a:	2b03      	cmp	r3, #3
 800886c:	d112      	bne.n	8008894 <scaraInitScurve1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800886e:	7ebb      	ldrb	r3, [r7, #26]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d111      	bne.n	8008898 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 8008874:	a350      	add	r3, pc, #320	; (adr r3, 80089b8 <scaraInitScurve1+0x280>)
 8008876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800887e:	f7f7 febb 	bl	80005f8 <__aeabi_dmul>
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 800888a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800888e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008892:	e001      	b.n	8008898 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8008894:	2306      	movs	r3, #6
 8008896:	e24c      	b.n	8008d32 <scaraInitScurve1+0x5fa>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8008898:	7ebb      	ldrb	r3, [r7, #26]
 800889a:	2b01      	cmp	r3, #1
 800889c:	f040 80fc 	bne.w	8008a98 <scaraInitScurve1+0x360>
		if(tf < 0.1 && v_design > 7.5){ //check if time valid or not
 80088a0:	a347      	add	r3, pc, #284	; (adr r3, 80089c0 <scaraInitScurve1+0x288>)
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80088aa:	f7f8 f917 	bl	8000adc <__aeabi_dcmplt>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d01d      	beq.n	80088f0 <scaraInitScurve1+0x1b8>
 80088b4:	f04f 0200 	mov.w	r2, #0
 80088b8:	4b49      	ldr	r3, [pc, #292]	; (80089e0 <scaraInitScurve1+0x2a8>)
 80088ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80088be:	f7f8 f92b 	bl	8000b18 <__aeabi_dcmpgt>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d013      	beq.n	80088f0 <scaraInitScurve1+0x1b8>
			tf = 1.5*total_s/v_design;
 80088c8:	f04f 0200 	mov.w	r2, #0
 80088cc:	4b45      	ldr	r3, [pc, #276]	; (80089e4 <scaraInitScurve1+0x2ac>)
 80088ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80088d2:	f7f7 fe91 	bl	80005f8 <__aeabi_dmul>
 80088d6:	4602      	mov	r2, r0
 80088d8:	460b      	mov	r3, r1
 80088da:	4610      	mov	r0, r2
 80088dc:	4619      	mov	r1, r3
 80088de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80088e2:	f7f7 ffb3 	bl	800084c <__aeabi_ddiv>
 80088e6:	4602      	mov	r2, r0
 80088e8:	460b      	mov	r3, r1
 80088ea:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80088ee:	e094      	b.n	8008a1a <scaraInitScurve1+0x2e2>
		}else if(v_design < 0.1 && tf > 0.15){ //check if velocity valid or not
 80088f0:	a333      	add	r3, pc, #204	; (adr r3, 80089c0 <scaraInitScurve1+0x288>)
 80088f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80088fa:	f7f8 f8ef 	bl	8000adc <__aeabi_dcmplt>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d01d      	beq.n	8008940 <scaraInitScurve1+0x208>
 8008904:	a330      	add	r3, pc, #192	; (adr r3, 80089c8 <scaraInitScurve1+0x290>)
 8008906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800890e:	f7f8 f903 	bl	8000b18 <__aeabi_dcmpgt>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d013      	beq.n	8008940 <scaraInitScurve1+0x208>
			v_design = 1.5*total_s/tf;
 8008918:	f04f 0200 	mov.w	r2, #0
 800891c:	4b31      	ldr	r3, [pc, #196]	; (80089e4 <scaraInitScurve1+0x2ac>)
 800891e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008922:	f7f7 fe69 	bl	80005f8 <__aeabi_dmul>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4610      	mov	r0, r2
 800892c:	4619      	mov	r1, r3
 800892e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008932:	f7f7 ff8b 	bl	800084c <__aeabi_ddiv>
 8008936:	4602      	mov	r2, r0
 8008938:	460b      	mov	r3, r1
 800893a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800893e:	e06c      	b.n	8008a1a <scaraInitScurve1+0x2e2>
		}else if(tf < 0.1 && v_design < 0.1){
 8008940:	a31f      	add	r3, pc, #124	; (adr r3, 80089c0 <scaraInitScurve1+0x288>)
 8008942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008946:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800894a:	f7f8 f8c7 	bl	8000adc <__aeabi_dcmplt>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00b      	beq.n	800896c <scaraInitScurve1+0x234>
 8008954:	a31a      	add	r3, pc, #104	; (adr r3, 80089c0 <scaraInitScurve1+0x288>)
 8008956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800895e:	f7f8 f8bd 	bl	8000adc <__aeabi_dcmplt>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d001      	beq.n	800896c <scaraInitScurve1+0x234>
			return SCARA_STATUS_ERROR_OVER_VELOC;
 8008968:	2309      	movs	r3, #9
 800896a:	e1e2      	b.n	8008d32 <scaraInitScurve1+0x5fa>
		}else{
			v_lim = total_s/tf;
 800896c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008970:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008974:	f7f7 ff6a 	bl	800084c <__aeabi_ddiv>
 8008978:	4602      	mov	r2, r0
 800897a:	460b      	mov	r3, r1
 800897c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			if(v_design < 1.1*v_lim){ // the accelaration part is too large
 8008980:	a313      	add	r3, pc, #76	; (adr r3, 80089d0 <scaraInitScurve1+0x298>)
 8008982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008986:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800898a:	f7f7 fe35 	bl	80005f8 <__aeabi_dmul>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008996:	f7f8 f8a1 	bl	8000adc <__aeabi_dcmplt>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d023      	beq.n	80089e8 <scaraInitScurve1+0x2b0>
				return SCARA_STATUS_ERROR_OVER_ACCEL;
 80089a0:	230a      	movs	r3, #10
 80089a2:	e1c6      	b.n	8008d32 <scaraInitScurve1+0x5fa>
 80089a4:	f3af 8000 	nop.w
 80089a8:	14000000 	.word	0x14000000
 80089ac:	4000f6f0 	.word	0x4000f6f0
 80089b0:	00000000 	.word	0x00000000
 80089b4:	405c2000 	.word	0x405c2000
 80089b8:	6b259425 	.word	0x6b259425
 80089bc:	40069b91 	.word	0x40069b91
 80089c0:	9999999a 	.word	0x9999999a
 80089c4:	3fb99999 	.word	0x3fb99999
 80089c8:	33333333 	.word	0x33333333
 80089cc:	3fc33333 	.word	0x3fc33333
 80089d0:	9999999a 	.word	0x9999999a
 80089d4:	3ff19999 	.word	0x3ff19999
 80089d8:	40877000 	.word	0x40877000
 80089dc:	407f4000 	.word	0x407f4000
 80089e0:	401e0000 	.word	0x401e0000
 80089e4:	3ff80000 	.word	0x3ff80000
			}else if(v_design > 2*v_lim){
 80089e8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	f7f7 fc4c 	bl	800028c <__adddf3>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80089fc:	f7f8 f88c 	bl	8000b18 <__aeabi_dcmpgt>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d009      	beq.n	8008a1a <scaraInitScurve1+0x2e2>
				v_design = 2*v_lim;
 8008a06:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	f7f7 fc3d 	bl	800028c <__adddf3>
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}else{
	
			}
		}
		a_design = 2*v_design*v_design/(v_design*tf - total_s);
 8008a1a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008a1e:	4602      	mov	r2, r0
 8008a20:	460b      	mov	r3, r1
 8008a22:	f7f7 fc33 	bl	800028c <__adddf3>
 8008a26:	4602      	mov	r2, r0
 8008a28:	460b      	mov	r3, r1
 8008a2a:	4610      	mov	r0, r2
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008a32:	f7f7 fde1 	bl	80005f8 <__aeabi_dmul>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4614      	mov	r4, r2
 8008a3c:	461d      	mov	r5, r3
 8008a3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a42:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008a46:	f7f7 fdd7 	bl	80005f8 <__aeabi_dmul>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	4610      	mov	r0, r2
 8008a50:	4619      	mov	r1, r3
 8008a52:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008a56:	f7f7 fc17 	bl	8000288 <__aeabi_dsub>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	4620      	mov	r0, r4
 8008a60:	4629      	mov	r1, r5
 8008a62:	f7f7 fef3 	bl	800084c <__aeabi_ddiv>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		ta = v_design/a_design;		
 8008a6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008a72:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008a76:	f7f7 fee9 	bl	800084c <__aeabi_ddiv>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		td = tf - ta;
 8008a82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008a86:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008a8a:	f7f7 fbfd 	bl	8000288 <__aeabi_dsub>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	460b      	mov	r3, r1
 8008a92:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8008a96:	e0be      	b.n	8008c16 <scaraInitScurve1+0x4de>
	
	}else if(modeinit == DUTY_MODE_INIT_QVA){
 8008a98:	7ebb      	ldrb	r3, [r7, #26]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f040 80bb 	bne.w	8008c16 <scaraInitScurve1+0x4de>
		//check qva condition
		if(total_s*a_design > 2*v_design*v_design){ //condition for ta smaller than tc
 8008aa0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008aa4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008aa8:	f7f7 fda6 	bl	80005f8 <__aeabi_dmul>
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	4614      	mov	r4, r2
 8008ab2:	461d      	mov	r5, r3
 8008ab4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008ab8:	4602      	mov	r2, r0
 8008aba:	460b      	mov	r3, r1
 8008abc:	f7f7 fbe6 	bl	800028c <__adddf3>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	4610      	mov	r0, r2
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008acc:	f7f7 fd94 	bl	80005f8 <__aeabi_dmul>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	f7f8 f81e 	bl	8000b18 <__aeabi_dcmpgt>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d05e      	beq.n	8008ba0 <scaraInitScurve1+0x468>
			if(total_s/v_design < 0.3){ //tc too small
 8008ae2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ae6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008aea:	f7f7 feaf 	bl	800084c <__aeabi_ddiv>
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	4610      	mov	r0, r2
 8008af4:	4619      	mov	r1, r3
 8008af6:	a395      	add	r3, pc, #596	; (adr r3, 8008d4c <scaraInitScurve1+0x614>)
 8008af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afc:	f7f7 ffee 	bl	8000adc <__aeabi_dcmplt>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00a      	beq.n	8008b1c <scaraInitScurve1+0x3e4>
				//recalculate v_design
				v_design = total_s/0.3;
 8008b06:	a391      	add	r3, pc, #580	; (adr r3, 8008d4c <scaraInitScurve1+0x614>)
 8008b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008b10:	f7f7 fe9c 	bl	800084c <__aeabi_ddiv>
 8008b14:	4602      	mov	r2, r0
 8008b16:	460b      	mov	r3, r1
 8008b18:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}
			if(v_design/a_design < 0.1){ //ta is too small
 8008b1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b20:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008b24:	f7f7 fe92 	bl	800084c <__aeabi_ddiv>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4610      	mov	r0, r2
 8008b2e:	4619      	mov	r1, r3
 8008b30:	a388      	add	r3, pc, #544	; (adr r3, 8008d54 <scaraInitScurve1+0x61c>)
 8008b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b36:	f7f7 ffd1 	bl	8000adc <__aeabi_dcmplt>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00a      	beq.n	8008b56 <scaraInitScurve1+0x41e>
				//recalculate a_design
				a_design = v_design/0.1;
 8008b40:	a384      	add	r3, pc, #528	; (adr r3, 8008d54 <scaraInitScurve1+0x61c>)
 8008b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b46:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008b4a:	f7f7 fe7f 	bl	800084c <__aeabi_ddiv>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			}
			ta = v_design/a_design;
 8008b56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b5a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008b5e:	f7f7 fe75 	bl	800084c <__aeabi_ddiv>
 8008b62:	4602      	mov	r2, r0
 8008b64:	460b      	mov	r3, r1
 8008b66:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			td = total_s/v_design + ta;
 8008b6a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008b6e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008b72:	f7f7 fe6b 	bl	800084c <__aeabi_ddiv>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008b7e:	f7f7 fb85 	bl	800028c <__adddf3>
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			tf = ta + td;
 8008b8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b8e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008b92:	f7f7 fb7b 	bl	800028c <__adddf3>
 8008b96:	4602      	mov	r2, r0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008b9e:	e03a      	b.n	8008c16 <scaraInitScurve1+0x4de>
//				td = total_s/v_design;
//				tf = ta + td;
//			}
	
		}else{
			tf = 2*total_s/v_design;
 8008ba0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	f7f7 fb70 	bl	800028c <__adddf3>
 8008bac:	4602      	mov	r2, r0
 8008bae:	460b      	mov	r3, r1
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008bb8:	f7f7 fe48 	bl	800084c <__aeabi_ddiv>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	e9c7 2308 	strd	r2, r3, [r7, #32]
			ta = tf/4;
 8008bc4:	f04f 0200 	mov.w	r2, #0
 8008bc8:	4b5d      	ldr	r3, [pc, #372]	; (8008d40 <scaraInitScurve1+0x608>)
 8008bca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008bce:	f7f7 fe3d 	bl	800084c <__aeabi_ddiv>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			td = 3*tf/4;
 8008bda:	f04f 0200 	mov.w	r2, #0
 8008bde:	4b59      	ldr	r3, [pc, #356]	; (8008d44 <scaraInitScurve1+0x60c>)
 8008be0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008be4:	f7f7 fd08 	bl	80005f8 <__aeabi_dmul>
 8008be8:	4602      	mov	r2, r0
 8008bea:	460b      	mov	r3, r1
 8008bec:	4610      	mov	r0, r2
 8008bee:	4619      	mov	r1, r3
 8008bf0:	f04f 0200 	mov.w	r2, #0
 8008bf4:	4b52      	ldr	r3, [pc, #328]	; (8008d40 <scaraInitScurve1+0x608>)
 8008bf6:	f7f7 fe29 	bl	800084c <__aeabi_ddiv>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			a_design = v_design/ta;
 8008c02:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008c06:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008c0a:	f7f7 fe1f 	bl	800084c <__aeabi_ddiv>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	460b      	mov	r3, r1
 8008c12:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		}
	}
	//no_sample = ceilf(tf / T_SAMPLING); // ceiling
	 // Init lspb params
	
	scurve->Ta = ta;
 8008c16:	69f9      	ldr	r1, [r7, #28]
 8008c18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008c1c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	scurve->Tf = tf;
 8008c20:	69f9      	ldr	r1, [r7, #28]
 8008c22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c26:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	scurve->Td = td;
 8008c2a:	69f9      	ldr	r1, [r7, #28]
 8008c2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c30:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	scurve->a_design = a_design;
 8008c34:	69f9      	ldr	r1, [r7, #28]
 8008c36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c3a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	scurve->v_design = v_design;
 8008c3e:	69f9      	ldr	r1, [r7, #28]
 8008c40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c44:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	scurve->v_lim = v_lim;
 8008c48:	69f9      	ldr	r1, [r7, #28]
 8008c4a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008c4e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	scurve->total_s = total_s;
 8008c52:	69f9      	ldr	r1, [r7, #28]
 8008c54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008c58:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	scurve->a_current = 0;
 8008c5c:	69f9      	ldr	r1, [r7, #28]
 8008c5e:	f04f 0200 	mov.w	r2, #0
 8008c62:	f04f 0300 	mov.w	r3, #0
 8008c66:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
	scurve->v_current = 0;
 8008c6a:	69f9      	ldr	r1, [r7, #28]
 8008c6c:	f04f 0200 	mov.w	r2, #0
 8008c70:	f04f 0300 	mov.w	r3, #0
 8008c74:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
	scurve->s_current = 0;
 8008c78:	69f9      	ldr	r1, [r7, #28]
 8008c7a:	f04f 0200 	mov.w	r2, #0
 8008c7e:	f04f 0300 	mov.w	r3, #0
 8008c82:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
	//define duplicate value when calculating scurve flow
	scurve->k_1        = v_design/(6*ta*ta);
 8008c86:	f04f 0200 	mov.w	r2, #0
 8008c8a:	4b2f      	ldr	r3, [pc, #188]	; (8008d48 <scaraInitScurve1+0x610>)
 8008c8c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008c90:	f7f7 fcb2 	bl	80005f8 <__aeabi_dmul>
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	4610      	mov	r0, r2
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008ca0:	f7f7 fcaa 	bl	80005f8 <__aeabi_dmul>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008cac:	f7f7 fdce 	bl	800084c <__aeabi_ddiv>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	69f9      	ldr	r1, [r7, #28]
 8008cb6:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	scurve->k_2		   = 2*ta*ta*ta;
 8008cba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	f7f7 fae3 	bl	800028c <__adddf3>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	4610      	mov	r0, r2
 8008ccc:	4619      	mov	r1, r3
 8008cce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008cd2:	f7f7 fc91 	bl	80005f8 <__aeabi_dmul>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	460b      	mov	r3, r1
 8008cda:	4610      	mov	r0, r2
 8008cdc:	4619      	mov	r1, r3
 8008cde:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008ce2:	f7f7 fc89 	bl	80005f8 <__aeabi_dmul>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	460b      	mov	r3, r1
 8008cea:	69f9      	ldr	r1, [r7, #28]
 8008cec:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	scurve->k_3        = 6*ta;
 8008cf0:	f04f 0200 	mov.w	r2, #0
 8008cf4:	4b14      	ldr	r3, [pc, #80]	; (8008d48 <scaraInitScurve1+0x610>)
 8008cf6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008cfa:	f7f7 fc7d 	bl	80005f8 <__aeabi_dmul>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	69f9      	ldr	r1, [r7, #28]
 8008d04:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	scurve->k_4        = 6*ta*ta;
 8008d08:	f04f 0200 	mov.w	r2, #0
 8008d0c:	4b0e      	ldr	r3, [pc, #56]	; (8008d48 <scaraInitScurve1+0x610>)
 8008d0e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008d12:	f7f7 fc71 	bl	80005f8 <__aeabi_dmul>
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008d22:	f7f7 fc69 	bl	80005f8 <__aeabi_dmul>
 8008d26:	4602      	mov	r2, r0
 8008d28:	460b      	mov	r3, r1
 8008d2a:	69f9      	ldr	r1, [r7, #28]
 8008d2c:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	return SCARA_STATUS_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3750      	adds	r7, #80	; 0x50
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bdb0      	pop	{r4, r5, r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	f3af 8000 	nop.w
 8008d40:	40100000 	.word	0x40100000
 8008d44:	40080000 	.word	0x40080000
 8008d48:	40180000 	.word	0x40180000
 8008d4c:	33333333 	.word	0x33333333
 8008d50:	3fd33333 	.word	0x3fd33333
 8008d54:	9999999a 	.word	0x9999999a
 8008d58:	3fb99999 	.word	0x3fb99999

08008d5c <scaraFlowLSPB1>:
SCARA_StatusTypeDef	scaraFlowLSPB1	(Trajectory_LSPB_TypeDef *lspb, double time){
 8008d5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008d60:	b08a      	sub	sp, #40	; 0x28
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	60f8      	str	r0, [r7, #12]
 8008d66:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008d70:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008d7a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8008d84:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8008d88:	f04f 0200 	mov.w	r2, #0
 8008d8c:	f04f 0300 	mov.w	r3, #0
 8008d90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d94:	f7f7 feb6 	bl	8000b04 <__aeabi_dcmpge>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d05b      	beq.n	8008e56 <scaraFlowLSPB1+0xfa>
 8008d9e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008da2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008da6:	f7f7 fea3 	bl	8000af0 <__aeabi_dcmple>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d052      	beq.n	8008e56 <scaraFlowLSPB1+0xfa>
		lspb->a_current		=	lspb->a_design;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008db6:	68f9      	ldr	r1, [r7, #12]
 8008db8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008dc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dcc:	f7f7 fc14 	bl	80005f8 <__aeabi_dmul>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	f7f7 fa58 	bl	800028c <__adddf3>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	460b      	mov	r3, r1
 8008de0:	68f9      	ldr	r1, [r7, #12]
 8008de2:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008df2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008df6:	f7f7 fbff 	bl	80005f8 <__aeabi_dmul>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	4620      	mov	r0, r4
 8008e00:	4629      	mov	r1, r5
 8008e02:	f7f7 fa43 	bl	800028c <__adddf3>
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	4614      	mov	r4, r2
 8008e0c:	461d      	mov	r5, r3
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008e14:	f04f 0200 	mov.w	r2, #0
 8008e18:	4b98      	ldr	r3, [pc, #608]	; (800907c <scaraFlowLSPB1+0x320>)
 8008e1a:	f7f7 fbed 	bl	80005f8 <__aeabi_dmul>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	460b      	mov	r3, r1
 8008e22:	4610      	mov	r0, r2
 8008e24:	4619      	mov	r1, r3
 8008e26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e2a:	f7f7 fbe5 	bl	80005f8 <__aeabi_dmul>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	460b      	mov	r3, r1
 8008e32:	4610      	mov	r0, r2
 8008e34:	4619      	mov	r1, r3
 8008e36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e3a:	f7f7 fbdd 	bl	80005f8 <__aeabi_dmul>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	460b      	mov	r3, r1
 8008e42:	4620      	mov	r0, r4
 8008e44:	4629      	mov	r1, r5
 8008e46:	f7f7 fa21 	bl	800028c <__adddf3>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	68f9      	ldr	r1, [r7, #12]
 8008e50:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8008e54:	e10b      	b.n	800906e <scaraFlowLSPB1+0x312>
	// Constant velocity
	} else if (ta < time && time <= td) {
 8008e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008e5e:	f7f7 fe3d 	bl	8000adc <__aeabi_dcmplt>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d054      	beq.n	8008f12 <scaraFlowLSPB1+0x1b6>
 8008e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e70:	f7f7 fe3e 	bl	8000af0 <__aeabi_dcmple>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d04b      	beq.n	8008f12 <scaraFlowLSPB1+0x1b6>
		lspb->a_current		=	0;
 8008e7a:	68f9      	ldr	r1, [r7, #12]
 8008e7c:	f04f 0200 	mov.w	r2, #0
 8008e80:	f04f 0300 	mov.w	r3, #0
 8008e84:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008e8e:	68f9      	ldr	r1, [r7, #12]
 8008e90:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta*0.5 + lspb->v_design*(time - ta*0.5);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008ea0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008ea4:	f7f7 fba8 	bl	80005f8 <__aeabi_dmul>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	460b      	mov	r3, r1
 8008eac:	4610      	mov	r0, r2
 8008eae:	4619      	mov	r1, r3
 8008eb0:	f04f 0200 	mov.w	r2, #0
 8008eb4:	4b71      	ldr	r3, [pc, #452]	; (800907c <scaraFlowLSPB1+0x320>)
 8008eb6:	f7f7 fb9f 	bl	80005f8 <__aeabi_dmul>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	4629      	mov	r1, r5
 8008ec2:	f7f7 f9e3 	bl	800028c <__adddf3>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	4690      	mov	r8, r2
 8008ecc:	4699      	mov	r9, r3
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008ed4:	f04f 0200 	mov.w	r2, #0
 8008ed8:	4b68      	ldr	r3, [pc, #416]	; (800907c <scaraFlowLSPB1+0x320>)
 8008eda:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008ede:	f7f7 fb8b 	bl	80005f8 <__aeabi_dmul>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008eea:	f7f7 f9cd 	bl	8000288 <__aeabi_dsub>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	f7f7 fb7f 	bl	80005f8 <__aeabi_dmul>
 8008efa:	4602      	mov	r2, r0
 8008efc:	460b      	mov	r3, r1
 8008efe:	4640      	mov	r0, r8
 8008f00:	4649      	mov	r1, r9
 8008f02:	f7f7 f9c3 	bl	800028c <__adddf3>
 8008f06:	4602      	mov	r2, r0
 8008f08:	460b      	mov	r3, r1
 8008f0a:	68f9      	ldr	r1, [r7, #12]
 8008f0c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8008f10:	e0ad      	b.n	800906e <scaraFlowLSPB1+0x312>
	// Decelerate
	} else if (td < time && time <= tf) {
 8008f12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008f1a:	f7f7 fddf 	bl	8000adc <__aeabi_dcmplt>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f000 8090 	beq.w	8009046 <scaraFlowLSPB1+0x2ea>
 8008f26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f2e:	f7f7 fddf 	bl	8000af0 <__aeabi_dcmple>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f000 8086 	beq.w	8009046 <scaraFlowLSPB1+0x2ea>
		lspb->a_current		=	-lspb->a_design;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008f40:	4614      	mov	r4, r2
 8008f42:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v_design + lspb->a_design*(td - time);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8008f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f5c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008f60:	f7f7 f992 	bl	8000288 <__aeabi_dsub>
 8008f64:	4602      	mov	r2, r0
 8008f66:	460b      	mov	r3, r1
 8008f68:	4640      	mov	r0, r8
 8008f6a:	4649      	mov	r1, r9
 8008f6c:	f7f7 fb44 	bl	80005f8 <__aeabi_dmul>
 8008f70:	4602      	mov	r2, r0
 8008f72:	460b      	mov	r3, r1
 8008f74:	4620      	mov	r0, r4
 8008f76:	4629      	mov	r1, r5
 8008f78:	f7f7 f988 	bl	800028c <__adddf3>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	68f9      	ldr	r1, [r7, #12]
 8008f82:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8008f92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f96:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008f9a:	f7f7 f975 	bl	8000288 <__aeabi_dsub>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	4640      	mov	r0, r8
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	f7f7 fb27 	bl	80005f8 <__aeabi_dmul>
 8008faa:	4602      	mov	r2, r0
 8008fac:	460b      	mov	r3, r1
 8008fae:	4620      	mov	r0, r4
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	f7f7 f969 	bl	8000288 <__aeabi_dsub>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	4614      	mov	r4, r2
 8008fbc:	461d      	mov	r5, r3
								- (lspb->v_lim - lspb->v0)*(tf - time)*(tf - time)/(2*ta);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008fca:	f7f7 f95d 	bl	8000288 <__aeabi_dsub>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	4690      	mov	r8, r2
 8008fd4:	4699      	mov	r9, r3
 8008fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fda:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008fde:	f7f7 f953 	bl	8000288 <__aeabi_dsub>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	4640      	mov	r0, r8
 8008fe8:	4649      	mov	r1, r9
 8008fea:	f7f7 fb05 	bl	80005f8 <__aeabi_dmul>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	4690      	mov	r8, r2
 8008ff4:	4699      	mov	r9, r3
 8008ff6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ffa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008ffe:	f7f7 f943 	bl	8000288 <__aeabi_dsub>
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	4640      	mov	r0, r8
 8009008:	4649      	mov	r1, r9
 800900a:	f7f7 faf5 	bl	80005f8 <__aeabi_dmul>
 800900e:	4602      	mov	r2, r0
 8009010:	460b      	mov	r3, r1
 8009012:	4690      	mov	r8, r2
 8009014:	4699      	mov	r9, r3
 8009016:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	f7f7 f935 	bl	800028c <__adddf3>
 8009022:	4602      	mov	r2, r0
 8009024:	460b      	mov	r3, r1
 8009026:	4640      	mov	r0, r8
 8009028:	4649      	mov	r1, r9
 800902a:	f7f7 fc0f 	bl	800084c <__aeabi_ddiv>
 800902e:	4602      	mov	r2, r0
 8009030:	460b      	mov	r3, r1
 8009032:	4620      	mov	r0, r4
 8009034:	4629      	mov	r1, r5
 8009036:	f7f7 f927 	bl	8000288 <__aeabi_dsub>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 800903e:	68f9      	ldr	r1, [r7, #12]
 8009040:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8009044:	e013      	b.n	800906e <scaraFlowLSPB1+0x312>
	} else {
		lspb->a_current 	=	0;
 8009046:	68f9      	ldr	r1, [r7, #12]
 8009048:	f04f 0200 	mov.w	r2, #0
 800904c:	f04f 0300 	mov.w	r3, #0
 8009050:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	0;
 8009054:	68f9      	ldr	r1, [r7, #12]
 8009056:	f04f 0200 	mov.w	r2, #0
 800905a:	f04f 0300 	mov.w	r3, #0
 800905e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8009068:	68f9      	ldr	r1, [r7, #12]
 800906a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3728      	adds	r7, #40	; 0x28
 8009074:	46bd      	mov	sp, r7
 8009076:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800907a:	bf00      	nop
 800907c:	3fe00000 	.word	0x3fe00000

08009080 <scaraFlowGCODE>:
SCARA_StatusTypeDef	scaraFlowGCODE(double *s, double time)
{
 8009080:	b5b0      	push	{r4, r5, r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	ed87 0b00 	vstr	d0, [r7]
	if ( 0.0f <= time && time <= time_acc) {
 800908c:	f04f 0200 	mov.w	r2, #0
 8009090:	f04f 0300 	mov.w	r3, #0
 8009094:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009098:	f7f7 fd34 	bl	8000b04 <__aeabi_dcmpge>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d01e      	beq.n	80090e0 <scaraFlowGCODE+0x60>
 80090a2:	4b5f      	ldr	r3, [pc, #380]	; (8009220 <scaraFlowGCODE+0x1a0>)
 80090a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090ac:	f7f7 fd20 	bl	8000af0 <__aeabi_dcmple>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d014      	beq.n	80090e0 <scaraFlowGCODE+0x60>
		*s = acc0*time*time;
 80090b6:	4b5b      	ldr	r3, [pc, #364]	; (8009224 <scaraFlowGCODE+0x1a4>)
 80090b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80090bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090c0:	f7f7 fa9a 	bl	80005f8 <__aeabi_dmul>
 80090c4:	4602      	mov	r2, r0
 80090c6:	460b      	mov	r3, r1
 80090c8:	4610      	mov	r0, r2
 80090ca:	4619      	mov	r1, r3
 80090cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090d0:	f7f7 fa92 	bl	80005f8 <__aeabi_dmul>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	68f9      	ldr	r1, [r7, #12]
 80090da:	e9c1 2300 	strd	r2, r3, [r1]
 80090de:	e09a      	b.n	8009216 <scaraFlowGCODE+0x196>
	// Constant velocity
	} else if (time_acc < time && time <= time_dec) {
 80090e0:	4b4f      	ldr	r3, [pc, #316]	; (8009220 <scaraFlowGCODE+0x1a0>)
 80090e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090ea:	f7f7 fd15 	bl	8000b18 <__aeabi_dcmpgt>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d01f      	beq.n	8009134 <scaraFlowGCODE+0xb4>
 80090f4:	4b4c      	ldr	r3, [pc, #304]	; (8009228 <scaraFlowGCODE+0x1a8>)
 80090f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090fe:	f7f7 fcf7 	bl	8000af0 <__aeabi_dcmple>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d015      	beq.n	8009134 <scaraFlowGCODE+0xb4>
		*s = constant[0]*time + constant[1];
 8009108:	4b48      	ldr	r3, [pc, #288]	; (800922c <scaraFlowGCODE+0x1ac>)
 800910a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800910e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009112:	f7f7 fa71 	bl	80005f8 <__aeabi_dmul>
 8009116:	4602      	mov	r2, r0
 8009118:	460b      	mov	r3, r1
 800911a:	4610      	mov	r0, r2
 800911c:	4619      	mov	r1, r3
 800911e:	4b43      	ldr	r3, [pc, #268]	; (800922c <scaraFlowGCODE+0x1ac>)
 8009120:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009124:	f7f7 f8b2 	bl	800028c <__adddf3>
 8009128:	4602      	mov	r2, r0
 800912a:	460b      	mov	r3, r1
 800912c:	68f9      	ldr	r1, [r7, #12]
 800912e:	e9c1 2300 	strd	r2, r3, [r1]
 8009132:	e070      	b.n	8009216 <scaraFlowGCODE+0x196>
	// Decelerate
	} else if (time_dec < time && time <= time_move) {
 8009134:	4b3c      	ldr	r3, [pc, #240]	; (8009228 <scaraFlowGCODE+0x1a8>)
 8009136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800913e:	f7f7 fceb 	bl	8000b18 <__aeabi_dcmpgt>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d038      	beq.n	80091ba <scaraFlowGCODE+0x13a>
 8009148:	4b39      	ldr	r3, [pc, #228]	; (8009230 <scaraFlowGCODE+0x1b0>)
 800914a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009152:	f7f7 fccd 	bl	8000af0 <__aeabi_dcmple>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d02e      	beq.n	80091ba <scaraFlowGCODE+0x13a>
		*s = deacc[0]*time*time + deacc[1]*time + deacc[2];
 800915c:	4b35      	ldr	r3, [pc, #212]	; (8009234 <scaraFlowGCODE+0x1b4>)
 800915e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009166:	f7f7 fa47 	bl	80005f8 <__aeabi_dmul>
 800916a:	4602      	mov	r2, r0
 800916c:	460b      	mov	r3, r1
 800916e:	4610      	mov	r0, r2
 8009170:	4619      	mov	r1, r3
 8009172:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009176:	f7f7 fa3f 	bl	80005f8 <__aeabi_dmul>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	4614      	mov	r4, r2
 8009180:	461d      	mov	r5, r3
 8009182:	4b2c      	ldr	r3, [pc, #176]	; (8009234 <scaraFlowGCODE+0x1b4>)
 8009184:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8009188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800918c:	f7f7 fa34 	bl	80005f8 <__aeabi_dmul>
 8009190:	4602      	mov	r2, r0
 8009192:	460b      	mov	r3, r1
 8009194:	4620      	mov	r0, r4
 8009196:	4629      	mov	r1, r5
 8009198:	f7f7 f878 	bl	800028c <__adddf3>
 800919c:	4602      	mov	r2, r0
 800919e:	460b      	mov	r3, r1
 80091a0:	4610      	mov	r0, r2
 80091a2:	4619      	mov	r1, r3
 80091a4:	4b23      	ldr	r3, [pc, #140]	; (8009234 <scaraFlowGCODE+0x1b4>)
 80091a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80091aa:	f7f7 f86f 	bl	800028c <__adddf3>
 80091ae:	4602      	mov	r2, r0
 80091b0:	460b      	mov	r3, r1
 80091b2:	68f9      	ldr	r1, [r7, #12]
 80091b4:	e9c1 2300 	strd	r2, r3, [r1]
 80091b8:	e02d      	b.n	8009216 <scaraFlowGCODE+0x196>
	} else {
		*s = deacc[0]*time*time + deacc[1]*time + deacc[2];
 80091ba:	4b1e      	ldr	r3, [pc, #120]	; (8009234 <scaraFlowGCODE+0x1b4>)
 80091bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80091c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091c4:	f7f7 fa18 	bl	80005f8 <__aeabi_dmul>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	4610      	mov	r0, r2
 80091ce:	4619      	mov	r1, r3
 80091d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091d4:	f7f7 fa10 	bl	80005f8 <__aeabi_dmul>
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	4614      	mov	r4, r2
 80091de:	461d      	mov	r5, r3
 80091e0:	4b14      	ldr	r3, [pc, #80]	; (8009234 <scaraFlowGCODE+0x1b4>)
 80091e2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80091e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ea:	f7f7 fa05 	bl	80005f8 <__aeabi_dmul>
 80091ee:	4602      	mov	r2, r0
 80091f0:	460b      	mov	r3, r1
 80091f2:	4620      	mov	r0, r4
 80091f4:	4629      	mov	r1, r5
 80091f6:	f7f7 f849 	bl	800028c <__adddf3>
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	4610      	mov	r0, r2
 8009200:	4619      	mov	r1, r3
 8009202:	4b0c      	ldr	r3, [pc, #48]	; (8009234 <scaraFlowGCODE+0x1b4>)
 8009204:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009208:	f7f7 f840 	bl	800028c <__adddf3>
 800920c:	4602      	mov	r2, r0
 800920e:	460b      	mov	r3, r1
 8009210:	68f9      	ldr	r1, [r7, #12]
 8009212:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return SCARA_STATUS_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bdb0      	pop	{r4, r5, r7, pc}
 8009220:	20008f40 	.word	0x20008f40
 8009224:	2000fd20 	.word	0x2000fd20
 8009228:	20008f60 	.word	0x20008f60
 800922c:	20008f88 	.word	0x20008f88
 8009230:	20008fb0 	.word	0x20008fb0
 8009234:	20008f48 	.word	0x20008f48

08009238 <scaraFLowScurve1>:
SCARA_StatusTypeDef	scaraFLowScurve1(Trajectory_Scurve_TypeDef *scurve, double t)
{
 8009238:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800923c:	b08c      	sub	sp, #48	; 0x30
 800923e:	af00      	add	r7, sp, #0
 8009240:	60f8      	str	r0, [r7, #12]
 8009242:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta, vc;
	tf = scurve->Tf;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800924c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	ta = scurve->Ta;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8009256:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = scurve->Td;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8009260:	e9c7 2306 	strd	r2, r3, [r7, #24]
	vc = scurve->v_design;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800926a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if ( 0.0f <= t && t <= ta) {
 800926e:	f04f 0200 	mov.w	r2, #0
 8009272:	f04f 0300 	mov.w	r3, #0
 8009276:	e9d7 0100 	ldrd	r0, r1, [r7]
 800927a:	f7f7 fc43 	bl	8000b04 <__aeabi_dcmpge>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d025      	beq.n	80092d0 <scaraFLowScurve1+0x98>
 8009284:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009288:	e9d7 0100 	ldrd	r0, r1, [r7]
 800928c:	f7f7 fc30 	bl	8000af0 <__aeabi_dcmple>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d01c      	beq.n	80092d0 <scaraFLowScurve1+0x98>
//		lspb->a_current		=	(time*vc)/ta*ta;
//		lspb->v_current		=	(time*time*vc)/(2*ta*ta);
		scurve->s_current	=	t*t*t*scurve->k_1;
 8009296:	e9d7 2300 	ldrd	r2, r3, [r7]
 800929a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800929e:	f7f7 f9ab 	bl	80005f8 <__aeabi_dmul>
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	4610      	mov	r0, r2
 80092a8:	4619      	mov	r1, r3
 80092aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092ae:	f7f7 f9a3 	bl	80005f8 <__aeabi_dmul>
 80092b2:	4602      	mov	r2, r0
 80092b4:	460b      	mov	r3, r1
 80092b6:	4610      	mov	r0, r2
 80092b8:	4619      	mov	r1, r3
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80092c0:	f7f7 f99a 	bl	80005f8 <__aeabi_dmul>
 80092c4:	4602      	mov	r2, r0
 80092c6:	460b      	mov	r3, r1
 80092c8:	68f9      	ldr	r1, [r7, #12]
 80092ca:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 80092ce:	e17c      	b.n	80095ca <scaraFLowScurve1+0x392>
	// Constant velocity
	} else if (ta < t && t <= 2*ta) {
 80092d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80092d8:	f7f7 fc00 	bl	8000adc <__aeabi_dcmplt>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d061      	beq.n	80093a6 <scaraFLowScurve1+0x16e>
 80092e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80092e6:	4602      	mov	r2, r0
 80092e8:	460b      	mov	r3, r1
 80092ea:	f7f6 ffcf 	bl	800028c <__adddf3>
 80092ee:	4602      	mov	r2, r0
 80092f0:	460b      	mov	r3, r1
 80092f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092f6:	f7f7 fbfb 	bl	8000af0 <__aeabi_dcmple>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d052      	beq.n	80093a6 <scaraFLowScurve1+0x16e>
//		scurve->a_current   =	-(vc*(time - 2*ta))/(ta*ta);
//		scurve->v_current   =	vc/2 - (vc*(time - ta)*(time - 3*ta))/(2*ta*ta);
		scurve->s_current   =	-(t*t*t - t*t*scurve->k_3 + t*scurve->k_4 - scurve->k_2)*scurve->k_1;
 8009300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009304:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009308:	f7f7 f976 	bl	80005f8 <__aeabi_dmul>
 800930c:	4602      	mov	r2, r0
 800930e:	460b      	mov	r3, r1
 8009310:	4610      	mov	r0, r2
 8009312:	4619      	mov	r1, r3
 8009314:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009318:	f7f7 f96e 	bl	80005f8 <__aeabi_dmul>
 800931c:	4602      	mov	r2, r0
 800931e:	460b      	mov	r3, r1
 8009320:	4690      	mov	r8, r2
 8009322:	4699      	mov	r9, r3
 8009324:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009328:	e9d7 0100 	ldrd	r0, r1, [r7]
 800932c:	f7f7 f964 	bl	80005f8 <__aeabi_dmul>
 8009330:	4602      	mov	r2, r0
 8009332:	460b      	mov	r3, r1
 8009334:	4610      	mov	r0, r2
 8009336:	4619      	mov	r1, r3
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800933e:	f7f7 f95b 	bl	80005f8 <__aeabi_dmul>
 8009342:	4602      	mov	r2, r0
 8009344:	460b      	mov	r3, r1
 8009346:	4640      	mov	r0, r8
 8009348:	4649      	mov	r1, r9
 800934a:	f7f6 ff9d 	bl	8000288 <__aeabi_dsub>
 800934e:	4602      	mov	r2, r0
 8009350:	460b      	mov	r3, r1
 8009352:	4690      	mov	r8, r2
 8009354:	4699      	mov	r9, r3
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 800935c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009360:	f7f7 f94a 	bl	80005f8 <__aeabi_dmul>
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	4640      	mov	r0, r8
 800936a:	4649      	mov	r1, r9
 800936c:	f7f6 ff8e 	bl	800028c <__adddf3>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	4610      	mov	r0, r2
 8009376:	4619      	mov	r1, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800937e:	f7f6 ff83 	bl	8000288 <__aeabi_dsub>
 8009382:	4602      	mov	r2, r0
 8009384:	460b      	mov	r3, r1
 8009386:	4614      	mov	r4, r2
 8009388:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8009392:	4620      	mov	r0, r4
 8009394:	4629      	mov	r1, r5
 8009396:	f7f7 f92f 	bl	80005f8 <__aeabi_dmul>
 800939a:	4602      	mov	r2, r0
 800939c:	460b      	mov	r3, r1
 800939e:	68f9      	ldr	r1, [r7, #12]
 80093a0:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 80093a4:	e111      	b.n	80095ca <scaraFLowScurve1+0x392>
	// Decelerate
	} else if (2*ta < t && t <= td - ta) {
 80093a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80093aa:	4602      	mov	r2, r0
 80093ac:	460b      	mov	r3, r1
 80093ae:	f7f6 ff6d 	bl	800028c <__adddf3>
 80093b2:	4602      	mov	r2, r0
 80093b4:	460b      	mov	r3, r1
 80093b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093ba:	f7f7 fbad 	bl	8000b18 <__aeabi_dcmpgt>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d022      	beq.n	800940a <scaraFLowScurve1+0x1d2>
 80093c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80093cc:	f7f6 ff5c 	bl	8000288 <__aeabi_dsub>
 80093d0:	4602      	mov	r2, r0
 80093d2:	460b      	mov	r3, r1
 80093d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093d8:	f7f7 fb8a 	bl	8000af0 <__aeabi_dcmple>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d013      	beq.n	800940a <scaraFLowScurve1+0x1d2>
//		scurve->a_current   =	0;
//		scurve->v_current   =	v_design;
		scurve->s_current   =	vc*(t - ta);
 80093e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093ea:	f7f6 ff4d 	bl	8000288 <__aeabi_dsub>
 80093ee:	4602      	mov	r2, r0
 80093f0:	460b      	mov	r3, r1
 80093f2:	4610      	mov	r0, r2
 80093f4:	4619      	mov	r1, r3
 80093f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80093fa:	f7f7 f8fd 	bl	80005f8 <__aeabi_dmul>
 80093fe:	4602      	mov	r2, r0
 8009400:	460b      	mov	r3, r1
 8009402:	68f9      	ldr	r1, [r7, #12]
 8009404:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8009408:	e0df      	b.n	80095ca <scaraFLowScurve1+0x392>
	} else if(td-ta < t && t <= td){
 800940a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800940e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009412:	f7f6 ff39 	bl	8000288 <__aeabi_dsub>
 8009416:	4602      	mov	r2, r0
 8009418:	460b      	mov	r3, r1
 800941a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800941e:	f7f7 fb7b 	bl	8000b18 <__aeabi_dcmpgt>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	f000 8081 	beq.w	800952c <scaraFLowScurve1+0x2f4>
 800942a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800942e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009432:	f7f7 fb5d 	bl	8000af0 <__aeabi_dcmple>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d077      	beq.n	800952c <scaraFLowScurve1+0x2f4>
//		scurve->a_current 	=	-(vc*(t - td + ta))/ta^2;
//		scurve->v_current   =	vc/2 - (vc*(t + ta - tf)*(t + 3*ta - tf))/(2*ta*ta);
		scurve->s_current   =	scurve->total_s - (ta*vc)/3 - vc*(t - tf) - (t-tf)*(t-tf)*(t + scurve->k_3 - tf)*scurve->k_1;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 8009442:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009446:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800944a:	f7f7 f8d5 	bl	80005f8 <__aeabi_dmul>
 800944e:	4602      	mov	r2, r0
 8009450:	460b      	mov	r3, r1
 8009452:	4610      	mov	r0, r2
 8009454:	4619      	mov	r1, r3
 8009456:	f04f 0200 	mov.w	r2, #0
 800945a:	4b5f      	ldr	r3, [pc, #380]	; (80095d8 <scaraFLowScurve1+0x3a0>)
 800945c:	f7f7 f9f6 	bl	800084c <__aeabi_ddiv>
 8009460:	4602      	mov	r2, r0
 8009462:	460b      	mov	r3, r1
 8009464:	4620      	mov	r0, r4
 8009466:	4629      	mov	r1, r5
 8009468:	f7f6 ff0e 	bl	8000288 <__aeabi_dsub>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	4614      	mov	r4, r2
 8009472:	461d      	mov	r5, r3
 8009474:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009478:	e9d7 0100 	ldrd	r0, r1, [r7]
 800947c:	f7f6 ff04 	bl	8000288 <__aeabi_dsub>
 8009480:	4602      	mov	r2, r0
 8009482:	460b      	mov	r3, r1
 8009484:	4610      	mov	r0, r2
 8009486:	4619      	mov	r1, r3
 8009488:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800948c:	f7f7 f8b4 	bl	80005f8 <__aeabi_dmul>
 8009490:	4602      	mov	r2, r0
 8009492:	460b      	mov	r3, r1
 8009494:	4620      	mov	r0, r4
 8009496:	4629      	mov	r1, r5
 8009498:	f7f6 fef6 	bl	8000288 <__aeabi_dsub>
 800949c:	4602      	mov	r2, r0
 800949e:	460b      	mov	r3, r1
 80094a0:	4614      	mov	r4, r2
 80094a2:	461d      	mov	r5, r3
 80094a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094ac:	f7f6 feec 	bl	8000288 <__aeabi_dsub>
 80094b0:	4602      	mov	r2, r0
 80094b2:	460b      	mov	r3, r1
 80094b4:	4690      	mov	r8, r2
 80094b6:	4699      	mov	r9, r3
 80094b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094c0:	f7f6 fee2 	bl	8000288 <__aeabi_dsub>
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	4640      	mov	r0, r8
 80094ca:	4649      	mov	r1, r9
 80094cc:	f7f7 f894 	bl	80005f8 <__aeabi_dmul>
 80094d0:	4602      	mov	r2, r0
 80094d2:	460b      	mov	r3, r1
 80094d4:	4690      	mov	r8, r2
 80094d6:	4699      	mov	r9, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80094de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094e2:	f7f6 fed3 	bl	800028c <__adddf3>
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	4610      	mov	r0, r2
 80094ec:	4619      	mov	r1, r3
 80094ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094f2:	f7f6 fec9 	bl	8000288 <__aeabi_dsub>
 80094f6:	4602      	mov	r2, r0
 80094f8:	460b      	mov	r3, r1
 80094fa:	4640      	mov	r0, r8
 80094fc:	4649      	mov	r1, r9
 80094fe:	f7f7 f87b 	bl	80005f8 <__aeabi_dmul>
 8009502:	4602      	mov	r2, r0
 8009504:	460b      	mov	r3, r1
 8009506:	4610      	mov	r0, r2
 8009508:	4619      	mov	r1, r3
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8009510:	f7f7 f872 	bl	80005f8 <__aeabi_dmul>
 8009514:	4602      	mov	r2, r0
 8009516:	460b      	mov	r3, r1
 8009518:	4620      	mov	r0, r4
 800951a:	4629      	mov	r1, r5
 800951c:	f7f6 feb4 	bl	8000288 <__aeabi_dsub>
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	68f9      	ldr	r1, [r7, #12]
 8009526:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 800952a:	e04e      	b.n	80095ca <scaraFLowScurve1+0x392>
	} else if(td < t && t <= tf){
 800952c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009530:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009534:	f7f7 fad2 	bl	8000adc <__aeabi_dcmplt>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d045      	beq.n	80095ca <scaraFLowScurve1+0x392>
 800953e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009542:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009546:	f7f7 fad3 	bl	8000af0 <__aeabi_dcmple>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d03c      	beq.n	80095ca <scaraFLowScurve1+0x392>
//		scurve->a_current 	=	-(vc*(ta - t + td))/(ta*ta);
//		scurve->v_current   =	(vc*(t - tf)*(t-tf))/(2*ta*ta);
		scurve->s_current   =	scurve->total_s + (t-tf)*(t-tf)*(t-tf)*scurve->k_1;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 8009556:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800955a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800955e:	f7f6 fe93 	bl	8000288 <__aeabi_dsub>
 8009562:	4602      	mov	r2, r0
 8009564:	460b      	mov	r3, r1
 8009566:	4690      	mov	r8, r2
 8009568:	4699      	mov	r9, r3
 800956a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800956e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009572:	f7f6 fe89 	bl	8000288 <__aeabi_dsub>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	4640      	mov	r0, r8
 800957c:	4649      	mov	r1, r9
 800957e:	f7f7 f83b 	bl	80005f8 <__aeabi_dmul>
 8009582:	4602      	mov	r2, r0
 8009584:	460b      	mov	r3, r1
 8009586:	4690      	mov	r8, r2
 8009588:	4699      	mov	r9, r3
 800958a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800958e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009592:	f7f6 fe79 	bl	8000288 <__aeabi_dsub>
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	4640      	mov	r0, r8
 800959c:	4649      	mov	r1, r9
 800959e:	f7f7 f82b 	bl	80005f8 <__aeabi_dmul>
 80095a2:	4602      	mov	r2, r0
 80095a4:	460b      	mov	r3, r1
 80095a6:	4610      	mov	r0, r2
 80095a8:	4619      	mov	r1, r3
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80095b0:	f7f7 f822 	bl	80005f8 <__aeabi_dmul>
 80095b4:	4602      	mov	r2, r0
 80095b6:	460b      	mov	r3, r1
 80095b8:	4620      	mov	r0, r4
 80095ba:	4629      	mov	r1, r5
 80095bc:	f7f6 fe66 	bl	800028c <__adddf3>
 80095c0:	4602      	mov	r2, r0
 80095c2:	460b      	mov	r3, r1
 80095c4:	68f9      	ldr	r1, [r7, #12]
 80095c6:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
	}

	return SCARA_STATUS_OK;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3730      	adds	r7, #48	; 0x30
 80095d0:	46bd      	mov	sp, r7
 80095d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80095d6:	bf00      	nop
 80095d8:	40080000 	.word	0x40080000
 80095dc:	00000000 	.word	0x00000000

080095e0 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 80095e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095e4:	b0ac      	sub	sp, #176	; 0xb0
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80095ea:	460b      	mov	r3, r1
 80095ec:	ed87 0b08 	vstr	d0, [r7, #32]
 80095f0:	ed87 1b06 	vstr	d1, [r7, #24]
 80095f4:	ed87 2b04 	vstr	d2, [r7, #16]
 80095f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095fc:	4613      	mov	r3, r2
 80095fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 8009602:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009606:	2b04      	cmp	r3, #4
 8009608:	d118      	bne.n	800963c <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 800960a:	f20f 7350 	addw	r3, pc, #1872	; 0x750
 800960e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009612:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009616:	f7f6 ffef 	bl	80005f8 <__aeabi_dmul>
 800961a:	4602      	mov	r2, r0
 800961c:	460b      	mov	r3, r1
 800961e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 8009622:	f20f 7338 	addw	r3, pc, #1848	; 0x738
 8009626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800962e:	f7f6 ffe3 	bl	80005f8 <__aeabi_dmul>
 8009632:	4602      	mov	r2, r0
 8009634:	460b      	mov	r3, r1
 8009636:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 800963a:	e092      	b.n	8009762 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 800963c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009640:	2b05      	cmp	r3, #5
 8009642:	d118      	bne.n	8009676 <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 8009644:	f20f 731c 	addw	r3, pc, #1820	; 0x71c
 8009648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009650:	f7f6 ffd2 	bl	80005f8 <__aeabi_dmul>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 800965c:	f20f 7304 	addw	r3, pc, #1796	; 0x704
 8009660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009664:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009668:	f7f6 ffc6 	bl	80005f8 <__aeabi_dmul>
 800966c:	4602      	mov	r2, r0
 800966e:	460b      	mov	r3, r1
 8009670:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8009674:	e075      	b.n	8009762 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 8009676:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800967a:	2b00      	cmp	r3, #0
 800967c:	d118      	bne.n	80096b0 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 800967e:	f20f 63e4 	addw	r3, pc, #1764	; 0x6e4
 8009682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009686:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800968a:	f7f6 ffb5 	bl	80005f8 <__aeabi_dmul>
 800968e:	4602      	mov	r2, r0
 8009690:	460b      	mov	r3, r1
 8009692:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 8009696:	f20f 63cc 	addw	r3, pc, #1740	; 0x6cc
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80096a2:	f7f6 ffa9 	bl	80005f8 <__aeabi_dmul>
 80096a6:	4602      	mov	r2, r0
 80096a8:	460b      	mov	r3, r1
 80096aa:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 80096ae:	e058      	b.n	8009762 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 80096b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d118      	bne.n	80096ea <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 80096b8:	f20f 63a8 	addw	r3, pc, #1704	; 0x6a8
 80096bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80096c4:	f7f6 ff98 	bl	80005f8 <__aeabi_dmul>
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 80096d0:	f20f 6390 	addw	r3, pc, #1680	; 0x690
 80096d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80096dc:	f7f6 ff8c 	bl	80005f8 <__aeabi_dmul>
 80096e0:	4602      	mov	r2, r0
 80096e2:	460b      	mov	r3, r1
 80096e4:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 80096e8:	e03b      	b.n	8009762 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 80096ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d118      	bne.n	8009724 <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 80096f2:	f20f 6368 	addw	r3, pc, #1640	; 0x668
 80096f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80096fe:	f7f6 ff7b 	bl	80005f8 <__aeabi_dmul>
 8009702:	4602      	mov	r2, r0
 8009704:	460b      	mov	r3, r1
 8009706:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 800970a:	f20f 6350 	addw	r3, pc, #1616	; 0x650
 800970e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009712:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009716:	f7f6 ff6f 	bl	80005f8 <__aeabi_dmul>
 800971a:	4602      	mov	r2, r0
 800971c:	460b      	mov	r3, r1
 800971e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8009722:	e01e      	b.n	8009762 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 8009724:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009728:	2b03      	cmp	r3, #3
 800972a:	d118      	bne.n	800975e <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 800972c:	f20f 633c 	addw	r3, pc, #1596	; 0x63c
 8009730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009734:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009738:	f7f6 ff5e 	bl	80005f8 <__aeabi_dmul>
 800973c:	4602      	mov	r2, r0
 800973e:	460b      	mov	r3, r1
 8009740:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 8009744:	f20f 6324 	addw	r3, pc, #1572	; 0x624
 8009748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009750:	f7f6 ff52 	bl	80005f8 <__aeabi_dmul>
 8009754:	4602      	mov	r2, r0
 8009756:	460b      	mov	r3, r1
 8009758:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 800975c:	e001      	b.n	8009762 <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 800975e:	2306      	movs	r3, #6
 8009760:	e2ef      	b.n	8009d42 <scaraInitLSPB+0x762>
	 }

	 q0 = 0;
 8009762:	f04f 0200 	mov.w	r2, #0
 8009766:	f04f 0300 	mov.w	r3, #0
 800976a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	 q1 = total_s;
 800976e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009772:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	 v0 = 0;
 8009776:	f04f 0200 	mov.w	r2, #0
 800977a:	f04f 0300 	mov.w	r3, #0
 800977e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	 v1 = 0;
 8009782:	f04f 0200 	mov.w	r2, #0
 8009786:	f04f 0300 	mov.w	r3, #0
 800978a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 800978e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8009792:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009796:	f7f7 f9ab 	bl	8000af0 <__aeabi_dcmple>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d003      	beq.n	80097a8 <scaraInitLSPB+0x1c8>
		 dir = 1;
 80097a0:	2301      	movs	r3, #1
 80097a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80097a6:	e00c      	b.n	80097c2 <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 80097a8:	23ff      	movs	r3, #255	; 0xff
 80097aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 80097ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80097b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097ba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80097be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 80097c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	f040 809b 	bne.w	8009902 <scaraInitLSPB+0x322>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 80097cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ce:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80097d2:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 80097d6:	f20f 539c 	addw	r3, pc, #1436	; 0x59c
 80097da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097de:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80097e2:	f7f7 f999 	bl	8000b18 <__aeabi_dcmpgt>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d07e      	beq.n	80098ea <scaraInitLSPB+0x30a>
			 v_lower 	= (q1 - q0) / tf;
 80097ec:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80097f0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80097f4:	f7f6 fd48 	bl	8000288 <__aeabi_dsub>
 80097f8:	4602      	mov	r2, r0
 80097fa:	460b      	mov	r3, r1
 80097fc:	4610      	mov	r0, r2
 80097fe:	4619      	mov	r1, r3
 8009800:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009804:	f7f7 f822 	bl	800084c <__aeabi_ddiv>
 8009808:	4602      	mov	r2, r0
 800980a:	460b      	mov	r3, r1
 800980c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 8009810:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009814:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009818:	f7f6 fd36 	bl	8000288 <__aeabi_dsub>
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	4610      	mov	r0, r2
 8009822:	4619      	mov	r1, r3
 8009824:	4602      	mov	r2, r0
 8009826:	460b      	mov	r3, r1
 8009828:	f7f6 fd30 	bl	800028c <__adddf3>
 800982c:	4602      	mov	r2, r0
 800982e:	460b      	mov	r3, r1
 8009830:	4610      	mov	r0, r2
 8009832:	4619      	mov	r1, r3
 8009834:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009838:	f7f7 f808 	bl	800084c <__aeabi_ddiv>
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 8009844:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009848:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800984c:	f7f7 f946 	bl	8000adc <__aeabi_dcmplt>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d001      	beq.n	800985a <scaraInitLSPB+0x27a>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 8009856:	2309      	movs	r3, #9
 8009858:	e273      	b.n	8009d42 <scaraInitLSPB+0x762>
			 } else {
				 if ( v_upper <= v_design) {
 800985a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800985e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009862:	f7f7 f945 	bl	8000af0 <__aeabi_dcmple>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d003      	beq.n	8009874 <scaraInitLSPB+0x294>
					 v_design = v_upper;
 800986c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009870:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 8009874:	f20f 5304 	addw	r3, pc, #1284	; 0x504
 8009878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009880:	f7f7 f94a 	bl	8000b18 <__aeabi_dcmpgt>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d018      	beq.n	80098bc <scaraInitLSPB+0x2dc>
					 tc_upper	= tf - (q1 - q0)/v_design;
 800988a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800988e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009892:	f7f6 fcf9 	bl	8000288 <__aeabi_dsub>
 8009896:	4602      	mov	r2, r0
 8009898:	460b      	mov	r3, r1
 800989a:	4610      	mov	r0, r2
 800989c:	4619      	mov	r1, r3
 800989e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80098a2:	f7f6 ffd3 	bl	800084c <__aeabi_ddiv>
 80098a6:	4602      	mov	r2, r0
 80098a8:	460b      	mov	r3, r1
 80098aa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80098ae:	f7f6 fceb 	bl	8000288 <__aeabi_dsub>
 80098b2:	4602      	mov	r2, r0
 80098b4:	460b      	mov	r3, r1
 80098b6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 80098ba:	e00b      	b.n	80098d4 <scaraInitLSPB+0x2f4>
				 } else {
					 tc_upper = tf / 2;
 80098bc:	f04f 0200 	mov.w	r2, #0
 80098c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098c4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80098c8:	f7f6 ffc0 	bl	800084c <__aeabi_ddiv>
 80098cc:	4602      	mov	r2, r0
 80098ce:	460b      	mov	r3, r1
 80098d0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 80098d4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80098d8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80098dc:	f7f6 ffb6 	bl	800084c <__aeabi_ddiv>
 80098e0:	4602      	mov	r2, r0
 80098e2:	460b      	mov	r3, r1
 80098e4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80098e8:	e00b      	b.n	8009902 <scaraInitLSPB+0x322>
				//  } else {
				// 	 a_design = a_upper;
				//  }
			 }
		 } else {
			 v_design = 0;
 80098ea:	f04f 0200 	mov.w	r2, #0
 80098ee:	f04f 0300 	mov.w	r3, #0
 80098f2:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			 a_design = 0;
 80098f6:	f04f 0200 	mov.w	r2, #0
 80098fa:	f04f 0300 	mov.w	r3, #0
 80098fe:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8009902:	f20f 4378 	addw	r3, pc, #1144	; 0x478
 8009906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800990e:	f7f7 f903 	bl	8000b18 <__aeabi_dcmpgt>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	f000 8196 	beq.w	8009c46 <scaraInitLSPB+0x666>
 800991a:	f20f 4360 	addw	r3, pc, #1120	; 0x460
 800991e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009922:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009926:	f7f7 f8f7 	bl	8000b18 <__aeabi_dcmpgt>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	f000 818a 	beq.w	8009c46 <scaraInitLSPB+0x666>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8009932:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009936:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800993a:	f7f6 fca5 	bl	8000288 <__aeabi_dsub>
 800993e:	4602      	mov	r2, r0
 8009940:	460b      	mov	r3, r1
 8009942:	4614      	mov	r4, r2
 8009944:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8009948:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800994c:	4620      	mov	r0, r4
 800994e:	4629      	mov	r1, r5
 8009950:	f7f6 fe52 	bl	80005f8 <__aeabi_dmul>
 8009954:	4602      	mov	r2, r0
 8009956:	460b      	mov	r3, r1
 8009958:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800995c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009960:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009964:	f7f6 fe48 	bl	80005f8 <__aeabi_dmul>
 8009968:	4602      	mov	r2, r0
 800996a:	460b      	mov	r3, r1
 800996c:	e9c7 2300 	strd	r2, r3, [r7]
 8009970:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009974:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009978:	f7f6 fe3e 	bl	80005f8 <__aeabi_dmul>
 800997c:	4602      	mov	r2, r0
 800997e:	460b      	mov	r3, r1
 8009980:	4614      	mov	r4, r2
 8009982:	461d      	mov	r5, r3
 8009984:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009988:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800998c:	f7f6 fe34 	bl	80005f8 <__aeabi_dmul>
 8009990:	4602      	mov	r2, r0
 8009992:	460b      	mov	r3, r1
 8009994:	4620      	mov	r0, r4
 8009996:	4629      	mov	r1, r5
 8009998:	f7f6 fc78 	bl	800028c <__adddf3>
 800999c:	4602      	mov	r2, r0
 800999e:	460b      	mov	r3, r1
 80099a0:	4610      	mov	r0, r2
 80099a2:	4619      	mov	r1, r3
 80099a4:	f04f 0200 	mov.w	r2, #0
 80099a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80099ac:	f7f6 ff4e 	bl	800084c <__aeabi_ddiv>
 80099b0:	4602      	mov	r2, r0
 80099b2:	460b      	mov	r3, r1
 80099b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099b8:	f7f6 fc66 	bl	8000288 <__aeabi_dsub>
 80099bc:	4602      	mov	r2, r0
 80099be:	460b      	mov	r3, r1
 80099c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80099c4:	f7f7 f894 	bl	8000af0 <__aeabi_dcmple>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d075      	beq.n	8009aba <scaraInitLSPB+0x4da>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 80099ce:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80099d2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80099d6:	f7f6 fc57 	bl	8000288 <__aeabi_dsub>
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	4692      	mov	sl, r2
 80099e0:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80099e4:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80099e8:	4650      	mov	r0, sl
 80099ea:	4659      	mov	r1, fp
 80099ec:	f7f6 fe04 	bl	80005f8 <__aeabi_dmul>
 80099f0:	4602      	mov	r2, r0
 80099f2:	460b      	mov	r3, r1
 80099f4:	4614      	mov	r4, r2
 80099f6:	461d      	mov	r5, r3
 80099f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80099fc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009a00:	f7f6 fdfa 	bl	80005f8 <__aeabi_dmul>
 8009a04:	4602      	mov	r2, r0
 8009a06:	460b      	mov	r3, r1
 8009a08:	4690      	mov	r8, r2
 8009a0a:	4699      	mov	r9, r3
 8009a0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009a10:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009a14:	f7f6 fdf0 	bl	80005f8 <__aeabi_dmul>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4640      	mov	r0, r8
 8009a1e:	4649      	mov	r1, r9
 8009a20:	f7f6 fc34 	bl	800028c <__adddf3>
 8009a24:	4602      	mov	r2, r0
 8009a26:	460b      	mov	r3, r1
 8009a28:	4610      	mov	r0, r2
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	f04f 0200 	mov.w	r2, #0
 8009a30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a34:	f7f6 ff0a 	bl	800084c <__aeabi_ddiv>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	4629      	mov	r1, r5
 8009a40:	f7f6 fc24 	bl	800028c <__adddf3>
 8009a44:	4602      	mov	r2, r0
 8009a46:	460b      	mov	r3, r1
 8009a48:	ec43 2b17 	vmov	d7, r2, r3
 8009a4c:	eeb0 0a47 	vmov.f32	s0, s14
 8009a50:	eef0 0a67 	vmov.f32	s1, s15
 8009a54:	f011 fb8c 	bl	801b170 <sqrt>
 8009a58:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8009a5c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009a60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009a64:	f7f6 fc10 	bl	8000288 <__aeabi_dsub>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	4619      	mov	r1, r3
 8009a70:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009a74:	f7f6 feea 	bl	800084c <__aeabi_ddiv>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8009a80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009a84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009a88:	f7f6 fbfe 	bl	8000288 <__aeabi_dsub>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	4610      	mov	r0, r2
 8009a92:	4619      	mov	r1, r3
 8009a94:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009a98:	f7f6 fed8 	bl	800084c <__aeabi_ddiv>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			 tf		= ta + td;
 8009aa4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009aa8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8009aac:	f7f6 fbee 	bl	800028c <__adddf3>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8009ab8:	e0e3      	b.n	8009c82 <scaraInitLSPB+0x6a2>
		 } else {
			 v_lim	= v_design;
 8009aba:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009abe:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8009ac2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009ac6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009aca:	f7f6 fbdd 	bl	8000288 <__aeabi_dsub>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	4610      	mov	r0, r2
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009ada:	f7f6 feb7 	bl	800084c <__aeabi_ddiv>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8009ae6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009aea:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009aee:	f7f6 fbcb 	bl	8000288 <__aeabi_dsub>
 8009af2:	4602      	mov	r2, r0
 8009af4:	460b      	mov	r3, r1
 8009af6:	4610      	mov	r0, r2
 8009af8:	4619      	mov	r1, r3
 8009afa:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009afe:	f7f6 fea5 	bl	800084c <__aeabi_ddiv>
 8009b02:	4602      	mov	r2, r0
 8009b04:	460b      	mov	r3, r1
 8009b06:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8009b0a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8009b0e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009b12:	f7f6 fbb9 	bl	8000288 <__aeabi_dsub>
 8009b16:	4602      	mov	r2, r0
 8009b18:	460b      	mov	r3, r1
 8009b1a:	4690      	mov	r8, r2
 8009b1c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8009b20:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009b24:	4640      	mov	r0, r8
 8009b26:	4649      	mov	r1, r9
 8009b28:	f7f6 fe90 	bl	800084c <__aeabi_ddiv>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	4614      	mov	r4, r2
 8009b32:	461d      	mov	r5, r3
 8009b34:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009b38:	4602      	mov	r2, r0
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	f7f6 fba6 	bl	800028c <__adddf3>
 8009b40:	4602      	mov	r2, r0
 8009b42:	460b      	mov	r3, r1
 8009b44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009b48:	f7f6 fe80 	bl	800084c <__aeabi_ddiv>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	460b      	mov	r3, r1
 8009b50:	4690      	mov	r8, r2
 8009b52:	4699      	mov	r9, r3
 8009b54:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009b58:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009b5c:	f7f6 fe76 	bl	800084c <__aeabi_ddiv>
 8009b60:	4602      	mov	r2, r0
 8009b62:	460b      	mov	r3, r1
 8009b64:	f04f 0000 	mov.w	r0, #0
 8009b68:	497b      	ldr	r1, [pc, #492]	; (8009d58 <scaraInitLSPB+0x778>)
 8009b6a:	f7f6 fb8d 	bl	8000288 <__aeabi_dsub>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	460b      	mov	r3, r1
 8009b72:	4640      	mov	r0, r8
 8009b74:	4649      	mov	r1, r9
 8009b76:	f7f6 fd3f 	bl	80005f8 <__aeabi_dmul>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	4690      	mov	r8, r2
 8009b80:	4699      	mov	r9, r3
 8009b82:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009b86:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009b8a:	f7f6 fe5f 	bl	800084c <__aeabi_ddiv>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	f04f 0000 	mov.w	r0, #0
 8009b96:	4970      	ldr	r1, [pc, #448]	; (8009d58 <scaraInitLSPB+0x778>)
 8009b98:	f7f6 fb76 	bl	8000288 <__aeabi_dsub>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	4640      	mov	r0, r8
 8009ba2:	4649      	mov	r1, r9
 8009ba4:	f7f6 fd28 	bl	80005f8 <__aeabi_dmul>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	460b      	mov	r3, r1
 8009bac:	4620      	mov	r0, r4
 8009bae:	4629      	mov	r1, r5
 8009bb0:	f7f6 fb6c 	bl	800028c <__adddf3>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	4614      	mov	r4, r2
 8009bba:	461d      	mov	r5, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 8009bbc:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	f7f6 fb62 	bl	800028c <__adddf3>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	460b      	mov	r3, r1
 8009bcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009bd0:	f7f6 fe3c 	bl	800084c <__aeabi_ddiv>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	4690      	mov	r8, r2
 8009bda:	4699      	mov	r9, r3
 8009bdc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009be0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009be4:	f7f6 fe32 	bl	800084c <__aeabi_ddiv>
 8009be8:	4602      	mov	r2, r0
 8009bea:	460b      	mov	r3, r1
 8009bec:	f04f 0000 	mov.w	r0, #0
 8009bf0:	4959      	ldr	r1, [pc, #356]	; (8009d58 <scaraInitLSPB+0x778>)
 8009bf2:	f7f6 fb49 	bl	8000288 <__aeabi_dsub>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	4640      	mov	r0, r8
 8009bfc:	4649      	mov	r1, r9
 8009bfe:	f7f6 fcfb 	bl	80005f8 <__aeabi_dmul>
 8009c02:	4602      	mov	r2, r0
 8009c04:	460b      	mov	r3, r1
 8009c06:	4690      	mov	r8, r2
 8009c08:	4699      	mov	r9, r3
 8009c0a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009c0e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009c12:	f7f6 fe1b 	bl	800084c <__aeabi_ddiv>
 8009c16:	4602      	mov	r2, r0
 8009c18:	460b      	mov	r3, r1
 8009c1a:	f04f 0000 	mov.w	r0, #0
 8009c1e:	494e      	ldr	r1, [pc, #312]	; (8009d58 <scaraInitLSPB+0x778>)
 8009c20:	f7f6 fb32 	bl	8000288 <__aeabi_dsub>
 8009c24:	4602      	mov	r2, r0
 8009c26:	460b      	mov	r3, r1
 8009c28:	4640      	mov	r0, r8
 8009c2a:	4649      	mov	r1, r9
 8009c2c:	f7f6 fce4 	bl	80005f8 <__aeabi_dmul>
 8009c30:	4602      	mov	r2, r0
 8009c32:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8009c34:	4620      	mov	r0, r4
 8009c36:	4629      	mov	r1, r5
 8009c38:	f7f6 fb28 	bl	800028c <__adddf3>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	460b      	mov	r3, r1
 8009c40:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8009c44:	e01d      	b.n	8009c82 <scaraInitLSPB+0x6a2>
		 }
	 } else {
		 v_lim	= 0;
 8009c46:	f04f 0200 	mov.w	r2, #0
 8009c4a:	f04f 0300 	mov.w	r3, #0
 8009c4e:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		 ta = tf/2;
 8009c52:	f04f 0200 	mov.w	r2, #0
 8009c56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c5a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009c5e:	f7f6 fdf5 	bl	800084c <__aeabi_ddiv>
 8009c62:	4602      	mov	r2, r0
 8009c64:	460b      	mov	r3, r1
 8009c66:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		 td = tf/2;
 8009c6a:	f04f 0200 	mov.w	r2, #0
 8009c6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c72:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009c76:	f7f6 fde9 	bl	800084c <__aeabi_ddiv>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8009c82:	a333      	add	r3, pc, #204	; (adr r3, 8009d50 <scaraInitLSPB+0x770>)
 8009c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c88:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009c8c:	f7f6 fdde 	bl	800084c <__aeabi_ddiv>
 8009c90:	4602      	mov	r2, r0
 8009c92:	460b      	mov	r3, r1
 8009c94:	4610      	mov	r0, r2
 8009c96:	4619      	mov	r1, r3
 8009c98:	f7f6 ffa6 	bl	8000be8 <__aeabi_d2f>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	ee00 3a10 	vmov	s0, r3
 8009ca2:	f011 fa21 	bl	801b0e8 <ceilf>
 8009ca6:	eef0 7a40 	vmov.f32	s15, s0
 8009caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cae:	ee17 3a90 	vmov	r3, s15
 8009cb2:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 8009cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb6:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8009cba:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 8009cbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cbe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009cc2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	 lspb->s1 = q1;
 8009cc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cc8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8009ccc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	 lspb->Ta = ta;
 8009cd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cd2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009cd6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 lspb->Td = td;
 8009cda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cdc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009ce0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 lspb->Tf = tf;
 8009ce4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ce6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009cea:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	 lspb->a_design = a_design;
 8009cee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cf0:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009cf4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 lspb->v_design = v_design;
 8009cf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cfa:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009cfe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 lspb->v_lim = v_lim;
 8009d02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d04:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009d08:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 lspb->v0 = v0;
 8009d0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009d12:	e9c1 2306 	strd	r2, r3, [r1, #24]
	 lspb->v1 = v1;
 8009d16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009d1c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	 lspb->num_of_sampling = no_sample;
 8009d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d24:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8009d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d28:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8009d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d2e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009d32:	f7f6 faa9 	bl	8000288 <__aeabi_dsub>
 8009d36:	4602      	mov	r2, r0
 8009d38:	460b      	mov	r3, r1
 8009d3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d3c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	37b0      	adds	r7, #176	; 0xb0
 8009d46:	46bd      	mov	sp, r7
 8009d48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d4c:	f3af 8000 	nop.w
 8009d50:	40000000 	.word	0x40000000
 8009d54:	3f847ae1 	.word	0x3f847ae1
 8009d58:	3ff00000 	.word	0x3ff00000
 8009d5c:	00000000 	.word	0x00000000
 8009d60:	405c2000 	.word	0x405c2000
 8009d64:	14000000 	.word	0x14000000
 8009d68:	4000f6f0 	.word	0x4000f6f0
 8009d6c:	6b259425 	.word	0x6b259425
 8009d70:	40069b91 	.word	0x40069b91
 8009d74:	d2f1a9fc 	.word	0xd2f1a9fc
 8009d78:	3f50624d 	.word	0x3f50624d
 8009d7c:	9abcaf48 	.word	0x9abcaf48
 8009d80:	3e7ad7f2 	.word	0x3e7ad7f2

08009d84 <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8009d84:	b480      	push	{r7}
 8009d86:	b089      	sub	sp, #36	; 0x24
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	61f8      	str	r0, [r7, #28]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	ed87 0b04 	vstr	d0, [r7, #16]
 8009d92:	ed87 1b02 	vstr	d1, [r7, #8]
 8009d96:	ed87 2b00 	vstr	d2, [r7]
 8009d9a:	76fb      	strb	r3, [r7, #27]
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	76bb      	strb	r3, [r7, #26]
//	 scurve->s_1 = s_1;
//	 scurve->s_2 = s_2;
//	 scurve->s_3 = s_3;
//	 scurve->s_4 = s_4;

	 return SCARA_STATUS_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3724      	adds	r7, #36	; 0x24
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr
	...

08009db0 <scaraFlowDuty>:
}

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 8009db0:	b082      	sub	sp, #8
 8009db2:	b5b0      	push	{r4, r5, r7, lr}
 8009db4:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8009db8:	af2e      	add	r7, sp, #184	; 0xb8
 8009dba:	f107 0108 	add.w	r1, r7, #8
 8009dbe:	ed81 0b00 	vstr	d0, [r1]
 8009dc2:	1d39      	adds	r1, r7, #4
 8009dc4:	6008      	str	r0, [r1, #0]
 8009dc6:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8009dca:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 8009dce:	f107 0118 	add.w	r1, r7, #24
 8009dd2:	f107 0308 	add.w	r3, r7, #8
 8009dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dda:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 8009dde:	4ba8      	ldr	r3, [pc, #672]	; (800a080 <scaraFlowDuty+0x2d0>)
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	f040 81f1 	bne.w	800a1ca <scaraFlowDuty+0x41a>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 8009de8:	4ba5      	ldr	r3, [pc, #660]	; (800a080 <scaraFlowDuty+0x2d0>)
 8009dea:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d12b      	bne.n	8009e4a <scaraFlowDuty+0x9a>

			status1 = scaraFlowLSPB1(&(myDUTY.task.trajectory_3d.lspb), time);
 8009df2:	f107 0308 	add.w	r3, r7, #8
 8009df6:	ed93 0b00 	vldr	d0, [r3]
 8009dfa:	48a2      	ldr	r0, [pc, #648]	; (800a084 <scaraFlowDuty+0x2d4>)
 8009dfc:	f7fe ffae 	bl	8008d5c <scaraFlowLSPB1>
 8009e00:	4603      	mov	r3, r0
 8009e02:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 8009e06:	4b9e      	ldr	r3, [pc, #632]	; (800a080 <scaraFlowDuty+0x2d0>)
 8009e08:	e9d3 2362 	ldrd	r2, r3, [r3, #392]	; 0x188
 8009e0c:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 8009e10:	4b9b      	ldr	r3, [pc, #620]	; (800a080 <scaraFlowDuty+0x2d0>)
 8009e12:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8009e16:	f107 0110 	add.w	r1, r7, #16
 8009e1a:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009e1e:	4b98      	ldr	r3, [pc, #608]	; (800a080 <scaraFlowDuty+0x2d0>)
 8009e20:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8009e24:	f107 0108 	add.w	r1, r7, #8
 8009e28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e2c:	f7f6 fbe4 	bl	80005f8 <__aeabi_dmul>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009e38:	4b91      	ldr	r3, [pc, #580]	; (800a080 <scaraFlowDuty+0x2d0>)
 8009e3a:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009e3e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status2 = SCARA_STATUS_OK;
 8009e42:	2300      	movs	r3, #0
 8009e44:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009e48:	e0c8      	b.n	8009fdc <scaraFlowDuty+0x22c>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 8009e4a:	4b8d      	ldr	r3, [pc, #564]	; (800a080 <scaraFlowDuty+0x2d0>)
 8009e4c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d126      	bne.n	8009ea2 <scaraFlowDuty+0xf2>

			status1 = scaraFLowScurve1(&(myDUTY.task.trajectory_3d.scurve), time);
 8009e54:	f107 0308 	add.w	r3, r7, #8
 8009e58:	ed93 0b00 	vldr	d0, [r3]
 8009e5c:	488a      	ldr	r0, [pc, #552]	; (800a088 <scaraFlowDuty+0x2d8>)
 8009e5e:	f7ff f9eb 	bl	8009238 <scaraFLowScurve1>
 8009e62:	4603      	mov	r3, r0
 8009e64:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			//v = myDUTY.task.trajectory_3d.lspb.v_current;
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8009e68:	4b85      	ldr	r3, [pc, #532]	; (800a080 <scaraFlowDuty+0x2d0>)
 8009e6a:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	; 0x260
 8009e6e:	f107 0110 	add.w	r1, r7, #16
 8009e72:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009e76:	4b82      	ldr	r3, [pc, #520]	; (800a080 <scaraFlowDuty+0x2d0>)
 8009e78:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8009e7c:	f107 0108 	add.w	r1, r7, #8
 8009e80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e84:	f7f6 fbb8 	bl	80005f8 <__aeabi_dmul>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009e90:	4b7b      	ldr	r3, [pc, #492]	; (800a080 <scaraFlowDuty+0x2d0>)
 8009e92:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009e96:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status2 = SCARA_STATUS_OK;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009ea0:	e09c      	b.n	8009fdc <scaraFlowDuty+0x22c>
		}else if( DUTY_TRAJECTORY_LINEAR == myDUTY.task.trajectory_3d.trajectory_type){
 8009ea2:	4b77      	ldr	r3, [pc, #476]	; (800a080 <scaraFlowDuty+0x2d0>)
 8009ea4:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d127      	bne.n	8009efc <scaraFlowDuty+0x14c>
			s = time*myDUTY.task.trajectory_3d.linear.constant_v;
 8009eac:	4b74      	ldr	r3, [pc, #464]	; (800a080 <scaraFlowDuty+0x2d0>)
 8009eae:	e9d3 019c 	ldrd	r0, r1, [r3, #624]	; 0x270
 8009eb2:	f107 0308 	add.w	r3, r7, #8
 8009eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eba:	f7f6 fb9d 	bl	80005f8 <__aeabi_dmul>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	f107 0110 	add.w	r1, r7, #16
 8009ec6:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009eca:	4b6d      	ldr	r3, [pc, #436]	; (800a080 <scaraFlowDuty+0x2d0>)
 8009ecc:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8009ed0:	f107 0108 	add.w	r1, r7, #8
 8009ed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ed8:	f7f6 fb8e 	bl	80005f8 <__aeabi_dmul>
 8009edc:	4602      	mov	r2, r0
 8009ede:	460b      	mov	r3, r1
 8009ee0:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009ee4:	4b66      	ldr	r3, [pc, #408]	; (800a080 <scaraFlowDuty+0x2d0>)
 8009ee6:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009eea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status1 = SCARA_STATUS_OK;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009efa:	e06f      	b.n	8009fdc <scaraFlowDuty+0x22c>
		}else if(DUTY_TRAJECTORY_GCODE_LSPB == myDUTY.task.trajectory_3d.trajectory_type){
 8009efc:	4b60      	ldr	r3, [pc, #384]	; (800a080 <scaraFlowDuty+0x2d0>)
 8009efe:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009f02:	2b03      	cmp	r3, #3
 8009f04:	d139      	bne.n	8009f7a <scaraFlowDuty+0x1ca>
			scaraFlowGCODE(&s, time);
 8009f06:	f107 0308 	add.w	r3, r7, #8
 8009f0a:	f107 0210 	add.w	r2, r7, #16
 8009f0e:	ed93 0b00 	vldr	d0, [r3]
 8009f12:	4610      	mov	r0, r2
 8009f14:	f7ff f8b4 	bl	8009080 <scaraFlowGCODE>
			s -= accumulate_s;
 8009f18:	f107 0310 	add.w	r3, r7, #16
 8009f1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009f20:	4b5a      	ldr	r3, [pc, #360]	; (800a08c <scaraFlowDuty+0x2dc>)
 8009f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f26:	f7f6 f9af 	bl	8000288 <__aeabi_dsub>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	f107 0110 	add.w	r1, r7, #16
 8009f32:	e9c1 2300 	strd	r2, r3, [r1]
			//LOG_REPORT1("s watcher:", s, time);
			angle = myDUTY.task.trajectory_roll.linear.constant_v*(time - last_T);
 8009f36:	4b52      	ldr	r3, [pc, #328]	; (800a080 <scaraFlowDuty+0x2d0>)
 8009f38:	e9d3 45fc 	ldrd	r4, r5, [r3, #1008]	; 0x3f0
 8009f3c:	4b54      	ldr	r3, [pc, #336]	; (800a090 <scaraFlowDuty+0x2e0>)
 8009f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f42:	f107 0108 	add.w	r1, r7, #8
 8009f46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f4a:	f7f6 f99d 	bl	8000288 <__aeabi_dsub>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	460b      	mov	r3, r1
 8009f52:	4620      	mov	r0, r4
 8009f54:	4629      	mov	r1, r5
 8009f56:	f7f6 fb4f 	bl	80005f8 <__aeabi_dmul>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009f62:	4b47      	ldr	r3, [pc, #284]	; (800a080 <scaraFlowDuty+0x2d0>)
 8009f64:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009f68:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status1 = SCARA_STATUS_OK;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 8009f72:	2300      	movs	r3, #0
 8009f74:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009f78:	e030      	b.n	8009fdc <scaraFlowDuty+0x22c>

		}else if(DUTY_TRAJECTORY_BEZIER_CURVE == myDUTY.task.trajectory_3d.trajectory_type){
 8009f7a:	4b41      	ldr	r3, [pc, #260]	; (800a080 <scaraFlowDuty+0x2d0>)
 8009f7c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009f80:	2b04      	cmp	r3, #4
 8009f82:	d129      	bne.n	8009fd8 <scaraFlowDuty+0x228>
			s = time/myDUTY.time_total;
 8009f84:	4b3e      	ldr	r3, [pc, #248]	; (800a080 <scaraFlowDuty+0x2d0>)
 8009f86:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8009f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8e:	f107 0108 	add.w	r1, r7, #8
 8009f92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f96:	f7f6 fc59 	bl	800084c <__aeabi_ddiv>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	f107 0110 	add.w	r1, r7, #16
 8009fa2:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009fa6:	4b36      	ldr	r3, [pc, #216]	; (800a080 <scaraFlowDuty+0x2d0>)
 8009fa8:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8009fac:	f107 0108 	add.w	r1, r7, #8
 8009fb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fb4:	f7f6 fb20 	bl	80005f8 <__aeabi_dmul>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	460b      	mov	r3, r1
 8009fbc:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009fc0:	4b2f      	ldr	r3, [pc, #188]	; (800a080 <scaraFlowDuty+0x2d0>)
 8009fc2:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009fc6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status1 = SCARA_STATUS_OK;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009fd6:	e001      	b.n	8009fdc <scaraFlowDuty+0x22c>
		}else{
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8009fd8:	2305      	movs	r3, #5
 8009fda:	e2de      	b.n	800a59a <scaraFlowDuty+0x7ea>
		}

		if ( SCARA_STATUS_OK != status1) {
 8009fdc:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d002      	beq.n	8009fea <scaraFlowDuty+0x23a>
			return status1;
 8009fe4:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009fe8:	e2d7      	b.n	800a59a <scaraFlowDuty+0x7ea>
		}
		if ( SCARA_STATUS_OK != status2) {
 8009fea:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d002      	beq.n	8009ff8 <scaraFlowDuty+0x248>
			return status2;
 8009ff2:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009ff6:	e2d0      	b.n	800a59a <scaraFlowDuty+0x7ea>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 8009ff8:	4b21      	ldr	r3, [pc, #132]	; (800a080 <scaraFlowDuty+0x2d0>)
 8009ffa:	7a1b      	ldrb	r3, [r3, #8]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d11d      	bne.n	800a03c <scaraFlowDuty+0x28c>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 800a000:	f107 0310 	add.w	r3, r7, #16
 800a004:	ed93 7b00 	vldr	d7, [r3]
 800a008:	eeb0 0a47 	vmov.f32	s0, s14
 800a00c:	eef0 0a67 	vmov.f32	s1, s15
 800a010:	4820      	ldr	r0, [pc, #128]	; (800a094 <scaraFlowDuty+0x2e4>)
 800a012:	f000 fad5 	bl	800a5c0 <scaraFlowLine>
 800a016:	4603      	mov	r3, r0
 800a018:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.line.x_current;
 800a01c:	4b18      	ldr	r3, [pc, #96]	; (800a080 <scaraFlowDuty+0x2d0>)
 800a01e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800a022:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			y = myDUTY.task.path.line.y_current;
 800a026:	4b16      	ldr	r3, [pc, #88]	; (800a080 <scaraFlowDuty+0x2d0>)
 800a028:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800a02c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			z = myDUTY.task.path.line.z_current;
 800a030:	4b13      	ldr	r3, [pc, #76]	; (800a080 <scaraFlowDuty+0x2d0>)
 800a032:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800a036:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 800a03a:	e053      	b.n	800a0e4 <scaraFlowDuty+0x334>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 800a03c:	4b10      	ldr	r3, [pc, #64]	; (800a080 <scaraFlowDuty+0x2d0>)
 800a03e:	7a1b      	ldrb	r3, [r3, #8]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d12b      	bne.n	800a09c <scaraFlowDuty+0x2ec>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 800a044:	f107 0310 	add.w	r3, r7, #16
 800a048:	ed93 7b00 	vldr	d7, [r3]
 800a04c:	eeb0 0a47 	vmov.f32	s0, s14
 800a050:	eef0 0a67 	vmov.f32	s1, s15
 800a054:	4810      	ldr	r0, [pc, #64]	; (800a098 <scaraFlowDuty+0x2e8>)
 800a056:	f000 fc33 	bl	800a8c0 <scaraFlowCircle>
 800a05a:	4603      	mov	r3, r0
 800a05c:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.circle.x_current;
 800a060:	4b07      	ldr	r3, [pc, #28]	; (800a080 <scaraFlowDuty+0x2d0>)
 800a062:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 800a066:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			y = myDUTY.task.path.circle.y_current;
 800a06a:	4b05      	ldr	r3, [pc, #20]	; (800a080 <scaraFlowDuty+0x2d0>)
 800a06c:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 800a070:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			z = myDUTY.task.path.circle.z_current;
 800a074:	4b02      	ldr	r3, [pc, #8]	; (800a080 <scaraFlowDuty+0x2d0>)
 800a076:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 800a07a:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 800a07e:	e031      	b.n	800a0e4 <scaraFlowDuty+0x334>
 800a080:	2000ff30 	.word	0x2000ff30
 800a084:	20010048 	.word	0x20010048
 800a088:	200100c8 	.word	0x200100c8
 800a08c:	200085d0 	.word	0x200085d0
 800a090:	2000fd38 	.word	0x2000fd38
 800a094:	2000ff40 	.word	0x2000ff40
 800a098:	2000ffb0 	.word	0x2000ffb0
		} else if(DUTY_PATH_BEZIER_CURVE == myDUTY.task.path.path_type){
 800a09c:	4b8b      	ldr	r3, [pc, #556]	; (800a2cc <scaraFlowDuty+0x51c>)
 800a09e:	7a1b      	ldrb	r3, [r3, #8]
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d11d      	bne.n	800a0e0 <scaraFlowDuty+0x330>
			status1 = scaraFlowBezierCurve(&(myDUTY.task.path.line), s);
 800a0a4:	f107 0310 	add.w	r3, r7, #16
 800a0a8:	ed93 7b00 	vldr	d7, [r3]
 800a0ac:	eeb0 0a47 	vmov.f32	s0, s14
 800a0b0:	eef0 0a67 	vmov.f32	s1, s15
 800a0b4:	4886      	ldr	r0, [pc, #536]	; (800a2d0 <scaraFlowDuty+0x520>)
 800a0b6:	f000 fb0b 	bl	800a6d0 <scaraFlowBezierCurve>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.line.x_current;
 800a0c0:	4b82      	ldr	r3, [pc, #520]	; (800a2cc <scaraFlowDuty+0x51c>)
 800a0c2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800a0c6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			y = myDUTY.task.path.line.y_current;
 800a0ca:	4b80      	ldr	r3, [pc, #512]	; (800a2cc <scaraFlowDuty+0x51c>)
 800a0cc:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800a0d0:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			z = myDUTY.task.path.line.z0;
 800a0d4:	4b7d      	ldr	r3, [pc, #500]	; (800a2cc <scaraFlowDuty+0x51c>)
 800a0d6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800a0da:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 800a0de:	e001      	b.n	800a0e4 <scaraFlowDuty+0x334>
		}else {
			return SCARA_STATUS_ERROR_TASK;
 800a0e0:	2303      	movs	r3, #3
 800a0e2:	e25a      	b.n	800a59a <scaraFlowDuty+0x7ea>
		}

		positionCompute.x 		= x;
 800a0e4:	f107 0118 	add.w	r1, r7, #24
 800a0e8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800a0ec:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		positionCompute.y		= y;
 800a0f0:	f107 0118 	add.w	r1, r7, #24
 800a0f4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800a0f8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		positionCompute.z 		= z;
 800a0fc:	f107 0118 	add.w	r1, r7, #24
 800a100:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800a104:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 800a108:	4b70      	ldr	r3, [pc, #448]	; (800a2cc <scaraFlowDuty+0x51c>)
 800a10a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800a10e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a112:	f997 312f 	ldrsb.w	r3, [r7, #303]	; 0x12f
 800a116:	4618      	mov	r0, r3
 800a118:	f7f6 fa04 	bl	8000524 <__aeabi_i2d>
 800a11c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800a120:	f7f6 fa6a 	bl	80005f8 <__aeabi_dmul>
 800a124:	4602      	mov	r2, r0
 800a126:	460b      	mov	r3, r1
 800a128:	4620      	mov	r0, r4
 800a12a:	4629      	mov	r1, r5
 800a12c:	f7f6 f8ae 	bl	800028c <__adddf3>
 800a130:	4602      	mov	r2, r0
 800a132:	460b      	mov	r3, r1
 800a134:	f107 0118 	add.w	r1, r7, #24
 800a138:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

		positionCompute.q		= s;
 800a13c:	f107 0310 	add.w	r3, r7, #16
 800a140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a144:	f107 0118 	add.w	r1, r7, #24
 800a148:	e9c1 2300 	strd	r2, r3, [r1]
		positionCompute.q_roll  = angle;
 800a14c:	f107 0118 	add.w	r1, r7, #24
 800a150:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800a154:	e9c1 2302 	strd	r2, r3, [r1, #8]

		positionCompute.v_3d    = v;
 800a158:	f107 0118 	add.w	r1, r7, #24
 800a15c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800a160:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 800a164:	f107 0118 	add.w	r1, r7, #24
 800a168:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800a16c:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 800a170:	4b56      	ldr	r3, [pc, #344]	; (800a2cc <scaraFlowDuty+0x51c>)
 800a172:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17a:	f107 0118 	add.w	r1, r7, #24
 800a17e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		positionCompute.t		= time;
 800a182:	f107 0118 	add.w	r1, r7, #24
 800a186:	f107 0308 	add.w	r3, r7, #8
 800a18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 800a192:	f107 0418 	add.w	r4, r7, #24
 800a196:	4668      	mov	r0, sp
 800a198:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800a19c:	22b8      	movs	r2, #184	; 0xb8
 800a19e:	4619      	mov	r1, r3
 800a1a0:	f00c f9d6 	bl	8016550 <memcpy>
 800a1a4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800a1a8:	cb0c      	ldmia	r3, {r2, r3}
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f7fb faa8 	bl	8005700 <kinematicInverse>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d101      	bne.n	800a1ba <scaraFlowDuty+0x40a>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a1b6:	2307      	movs	r3, #7
 800a1b8:	e1ef      	b.n	800a59a <scaraFlowDuty+0x7ea>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800a1ba:	f107 0118 	add.w	r1, r7, #24
 800a1be:	1d3b      	adds	r3, r7, #4
 800a1c0:	22c0      	movs	r2, #192	; 0xc0
 800a1c2:	6818      	ldr	r0, [r3, #0]
 800a1c4:	f00c f9c4 	bl	8016550 <memcpy>
 800a1c8:	e1e6      	b.n	800a598 <scaraFlowDuty+0x7e8>
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 800a1ca:	4b40      	ldr	r3, [pc, #256]	; (800a2cc <scaraFlowDuty+0x51c>)
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	f040 81e0 	bne.w	800a594 <scaraFlowDuty+0x7e4>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 800a1d4:	4b3d      	ldr	r3, [pc, #244]	; (800a2cc <scaraFlowDuty+0x51c>)
 800a1d6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f040 8082 	bne.w	800a2e4 <scaraFlowDuty+0x534>
			status1 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[0].lspb), time);
 800a1e0:	f107 0308 	add.w	r3, r7, #8
 800a1e4:	ed93 0b00 	vldr	d0, [r3]
 800a1e8:	483a      	ldr	r0, [pc, #232]	; (800a2d4 <scaraFlowDuty+0x524>)
 800a1ea:	f7fe fdb7 	bl	8008d5c <scaraFlowLSPB1>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[1].lspb), time);
 800a1f4:	f107 0308 	add.w	r3, r7, #8
 800a1f8:	ed93 0b00 	vldr	d0, [r3]
 800a1fc:	4836      	ldr	r0, [pc, #216]	; (800a2d8 <scaraFlowDuty+0x528>)
 800a1fe:	f7fe fdad 	bl	8008d5c <scaraFlowLSPB1>
 800a202:	4603      	mov	r3, r0
 800a204:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[2].lspb), time);
 800a208:	f107 0308 	add.w	r3, r7, #8
 800a20c:	ed93 0b00 	vldr	d0, [r3]
 800a210:	4832      	ldr	r0, [pc, #200]	; (800a2dc <scaraFlowDuty+0x52c>)
 800a212:	f7fe fda3 	bl	8008d5c <scaraFlowLSPB1>
 800a216:	4603      	mov	r3, r0
 800a218:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[3].lspb), time);
 800a21c:	f107 0308 	add.w	r3, r7, #8
 800a220:	ed93 0b00 	vldr	d0, [r3]
 800a224:	482e      	ldr	r0, [pc, #184]	; (800a2e0 <scaraFlowDuty+0x530>)
 800a226:	f7fe fd99 	bl	8008d5c <scaraFlowLSPB1>
 800a22a:	4603      	mov	r3, r0
 800a22c:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 800a230:	4b26      	ldr	r3, [pc, #152]	; (800a2cc <scaraFlowDuty+0x51c>)
 800a232:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800a236:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 800a23a:	4b24      	ldr	r3, [pc, #144]	; (800a2cc <scaraFlowDuty+0x51c>)
 800a23c:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 800a240:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 800a244:	4b21      	ldr	r3, [pc, #132]	; (800a2cc <scaraFlowDuty+0x51c>)
 800a246:	f893 3720 	ldrb.w	r3, [r3, #1824]	; 0x720
 800a24a:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 800a24e:	4b1f      	ldr	r3, [pc, #124]	; (800a2cc <scaraFlowDuty+0x51c>)
 800a250:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
 800a254:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 800a258:	4b1c      	ldr	r3, [pc, #112]	; (800a2cc <scaraFlowDuty+0x51c>)
 800a25a:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800a25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a262:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 800a266:	4b19      	ldr	r3, [pc, #100]	; (800a2cc <scaraFlowDuty+0x51c>)
 800a268:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 800a26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a270:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 800a274:	4b15      	ldr	r3, [pc, #84]	; (800a2cc <scaraFlowDuty+0x51c>)
 800a276:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 800a27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 800a282:	4b12      	ldr	r3, [pc, #72]	; (800a2cc <scaraFlowDuty+0x51c>)
 800a284:	f603 1318 	addw	r3, r3, #2328	; 0x918
 800a288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28c:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 800a290:	4b0e      	ldr	r3, [pc, #56]	; (800a2cc <scaraFlowDuty+0x51c>)
 800a292:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 800a296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29a:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 800a29e:	4b0b      	ldr	r3, [pc, #44]	; (800a2cc <scaraFlowDuty+0x51c>)
 800a2a0:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 800a2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a8:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 800a2ac:	4b07      	ldr	r3, [pc, #28]	; (800a2cc <scaraFlowDuty+0x51c>)
 800a2ae:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 800a2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b6:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 800a2ba:	4b04      	ldr	r3, [pc, #16]	; (800a2cc <scaraFlowDuty+0x51c>)
 800a2bc:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 800a2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c4:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800a2c8:	e06c      	b.n	800a3a4 <scaraFlowDuty+0x5f4>
 800a2ca:	bf00      	nop
 800a2cc:	2000ff30 	.word	0x2000ff30
 800a2d0:	2000ff40 	.word	0x2000ff40
 800a2d4:	20010350 	.word	0x20010350
 800a2d8:	200104d0 	.word	0x200104d0
 800a2dc:	20010650 	.word	0x20010650
 800a2e0:	200107d0 	.word	0x200107d0

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 800a2e4:	4bb1      	ldr	r3, [pc, #708]	; (800a5ac <scaraFlowDuty+0x7fc>)
 800a2e6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d158      	bne.n	800a3a0 <scaraFlowDuty+0x5f0>
			status1 = scaraFLowScurve1(&(myDUTY.joint.trajectory[0].scurve), time);
 800a2ee:	f107 0308 	add.w	r3, r7, #8
 800a2f2:	ed93 0b00 	vldr	d0, [r3]
 800a2f6:	48ae      	ldr	r0, [pc, #696]	; (800a5b0 <scaraFlowDuty+0x800>)
 800a2f8:	f7fe ff9e 	bl	8009238 <scaraFLowScurve1>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve1(&(myDUTY.joint.trajectory[1].scurve), time);
 800a302:	f107 0308 	add.w	r3, r7, #8
 800a306:	ed93 0b00 	vldr	d0, [r3]
 800a30a:	48aa      	ldr	r0, [pc, #680]	; (800a5b4 <scaraFlowDuty+0x804>)
 800a30c:	f7fe ff94 	bl	8009238 <scaraFLowScurve1>
 800a310:	4603      	mov	r3, r0
 800a312:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFLowScurve1(&(myDUTY.joint.trajectory[2].scurve), time);
 800a316:	f107 0308 	add.w	r3, r7, #8
 800a31a:	ed93 0b00 	vldr	d0, [r3]
 800a31e:	48a6      	ldr	r0, [pc, #664]	; (800a5b8 <scaraFlowDuty+0x808>)
 800a320:	f7fe ff8a 	bl	8009238 <scaraFLowScurve1>
 800a324:	4603      	mov	r3, r0
 800a326:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFLowScurve1(&(myDUTY.joint.trajectory[3].scurve), time);
 800a32a:	f107 0308 	add.w	r3, r7, #8
 800a32e:	ed93 0b00 	vldr	d0, [r3]
 800a332:	48a2      	ldr	r0, [pc, #648]	; (800a5bc <scaraFlowDuty+0x80c>)
 800a334:	f7fe ff80 	bl	8009238 <scaraFLowScurve1>
 800a338:	4603      	mov	r3, r0
 800a33a:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 800a33e:	4b9b      	ldr	r3, [pc, #620]	; (800a5ac <scaraFlowDuty+0x7fc>)
 800a340:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 800a344:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 800a348:	4b98      	ldr	r3, [pc, #608]	; (800a5ac <scaraFlowDuty+0x7fc>)
 800a34a:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 800a34e:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 800a352:	4b96      	ldr	r3, [pc, #600]	; (800a5ac <scaraFlowDuty+0x7fc>)
 800a354:	f893 37a0 	ldrb.w	r3, [r3, #1952]	; 0x7a0
 800a358:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 800a35c:	4b93      	ldr	r3, [pc, #588]	; (800a5ac <scaraFlowDuty+0x7fc>)
 800a35e:	f893 3920 	ldrb.w	r3, [r3, #2336]	; 0x920
 800a362:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 800a366:	4b91      	ldr	r3, [pc, #580]	; (800a5ac <scaraFlowDuty+0x7fc>)
 800a368:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 800a36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a370:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 800a374:	4b8d      	ldr	r3, [pc, #564]	; (800a5ac <scaraFlowDuty+0x7fc>)
 800a376:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 800a37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 800a382:	4b8a      	ldr	r3, [pc, #552]	; (800a5ac <scaraFlowDuty+0x7fc>)
 800a384:	f603 0368 	addw	r3, r3, #2152	; 0x868
 800a388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 800a390:	4b86      	ldr	r3, [pc, #536]	; (800a5ac <scaraFlowDuty+0x7fc>)
 800a392:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 800a396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39a:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
 800a39e:	e001      	b.n	800a3a4 <scaraFlowDuty+0x5f4>
//			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
//			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
//			v3 = myDUTY.joint.trajectory[3].scurve.v_current;

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 800a3a0:	2305      	movs	r3, #5
 800a3a2:	e0fa      	b.n	800a59a <scaraFlowDuty+0x7ea>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 800a3a4:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <scaraFlowDuty+0x602>
			return status1;
 800a3ac:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800a3b0:	e0f3      	b.n	800a59a <scaraFlowDuty+0x7ea>
		}
		if ( SCARA_STATUS_OK != status2) {
 800a3b2:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d002      	beq.n	800a3c0 <scaraFlowDuty+0x610>
			return status2;
 800a3ba:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 800a3be:	e0ec      	b.n	800a59a <scaraFlowDuty+0x7ea>
		}
		if ( SCARA_STATUS_OK != status3) {
 800a3c0:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d002      	beq.n	800a3ce <scaraFlowDuty+0x61e>
			return status3;
 800a3c8:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 800a3cc:	e0e5      	b.n	800a59a <scaraFlowDuty+0x7ea>
		}
		if ( SCARA_STATUS_OK != status4) {
 800a3ce:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d002      	beq.n	800a3dc <scaraFlowDuty+0x62c>
			return status4;
 800a3d6:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800a3da:	e0de      	b.n	800a59a <scaraFlowDuty+0x7ea>
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 800a3dc:	4b73      	ldr	r3, [pc, #460]	; (800a5ac <scaraFlowDuty+0x7fc>)
 800a3de:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 800a3e2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a3e6:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7f6 f89a 	bl	8000524 <__aeabi_i2d>
 800a3f0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800a3f4:	f7f6 f900 	bl	80005f8 <__aeabi_dmul>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	4629      	mov	r1, r5
 800a400:	f7f5 ff44 	bl	800028c <__adddf3>
 800a404:	4602      	mov	r2, r0
 800a406:	460b      	mov	r3, r1
 800a408:	f107 0118 	add.w	r1, r7, #24
 800a40c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 800a410:	4b66      	ldr	r3, [pc, #408]	; (800a5ac <scaraFlowDuty+0x7fc>)
 800a412:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 800a416:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a41a:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 800a41e:	4618      	mov	r0, r3
 800a420:	f7f6 f880 	bl	8000524 <__aeabi_i2d>
 800a424:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800a428:	f7f6 f8e6 	bl	80005f8 <__aeabi_dmul>
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	4620      	mov	r0, r4
 800a432:	4629      	mov	r1, r5
 800a434:	f7f5 ff2a 	bl	800028c <__adddf3>
 800a438:	4602      	mov	r2, r0
 800a43a:	460b      	mov	r3, r1
 800a43c:	f107 0118 	add.w	r1, r7, #24
 800a440:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 800a444:	4b59      	ldr	r3, [pc, #356]	; (800a5ac <scaraFlowDuty+0x7fc>)
 800a446:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800a44a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a44e:	f997 30e5 	ldrsb.w	r3, [r7, #229]	; 0xe5
 800a452:	4618      	mov	r0, r3
 800a454:	f7f6 f866 	bl	8000524 <__aeabi_i2d>
 800a458:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800a45c:	f7f6 f8cc 	bl	80005f8 <__aeabi_dmul>
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	4620      	mov	r0, r4
 800a466:	4629      	mov	r1, r5
 800a468:	f7f5 ff10 	bl	800028c <__adddf3>
 800a46c:	4602      	mov	r2, r0
 800a46e:	460b      	mov	r3, r1
 800a470:	f107 0118 	add.w	r1, r7, #24
 800a474:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 800a478:	4b4c      	ldr	r3, [pc, #304]	; (800a5ac <scaraFlowDuty+0x7fc>)
 800a47a:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 800a47e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a482:	f997 30e4 	ldrsb.w	r3, [r7, #228]	; 0xe4
 800a486:	4618      	mov	r0, r3
 800a488:	f7f6 f84c 	bl	8000524 <__aeabi_i2d>
 800a48c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800a490:	f7f6 f8b2 	bl	80005f8 <__aeabi_dmul>
 800a494:	4602      	mov	r2, r0
 800a496:	460b      	mov	r3, r1
 800a498:	4620      	mov	r0, r4
 800a49a:	4629      	mov	r1, r5
 800a49c:	f7f5 fef6 	bl	800028c <__adddf3>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	f107 0118 	add.w	r1, r7, #24
 800a4a8:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 800a4ac:	f107 0118 	add.w	r1, r7, #24
 800a4b0:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 800a4b4:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 800a4b8:	f107 0118 	add.w	r1, r7, #24
 800a4bc:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800a4c0:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 800a4c4:	f107 0118 	add.w	r1, r7, #24
 800a4c8:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800a4cc:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 800a4d0:	f107 0118 	add.w	r1, r7, #24
 800a4d4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a4d8:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 800a4dc:	f107 0118 	add.w	r1, r7, #24
 800a4e0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800a4e4:	e9c1 2304 	strd	r2, r3, [r1, #16]
		positionCompute.q_theta2 = s1;
 800a4e8:	f107 0118 	add.w	r1, r7, #24
 800a4ec:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800a4f0:	e9c1 2306 	strd	r2, r3, [r1, #24]
		positionCompute.q_d3	 = s2;
 800a4f4:	f107 0118 	add.w	r1, r7, #24
 800a4f8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800a4fc:	e9c1 2308 	strd	r2, r3, [r1, #32]
		positionCompute.q_theta4 = s3;
 800a500:	f107 0118 	add.w	r1, r7, #24
 800a504:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800a508:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 800a50c:	4b27      	ldr	r3, [pc, #156]	; (800a5ac <scaraFlowDuty+0x7fc>)
 800a50e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a516:	f107 0118 	add.w	r1, r7, #24
 800a51a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		positionCompute.t		= time;
 800a51e:	f107 0118 	add.w	r1, r7, #24
 800a522:	f107 0308 	add.w	r3, r7, #8
 800a526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 800a52e:	f107 0318 	add.w	r3, r7, #24
 800a532:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800a536:	f107 0318 	add.w	r3, r7, #24
 800a53a:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 800a53e:	f107 0318 	add.w	r3, r7, #24
 800a542:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 800a546:	f107 0318 	add.w	r3, r7, #24
 800a54a:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 800a54e:	eeb0 3a44 	vmov.f32	s6, s8
 800a552:	eef0 3a64 	vmov.f32	s7, s9
 800a556:	eeb0 2a45 	vmov.f32	s4, s10
 800a55a:	eef0 2a65 	vmov.f32	s5, s11
 800a55e:	eeb0 1a46 	vmov.f32	s2, s12
 800a562:	eef0 1a66 	vmov.f32	s3, s13
 800a566:	eeb0 0a47 	vmov.f32	s0, s14
 800a56a:	eef0 0a67 	vmov.f32	s1, s15
 800a56e:	f000 fa2f 	bl	800a9d0 <scaraCheckWorkSpace4>
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d001      	beq.n	800a57c <scaraFlowDuty+0x7cc>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a578:	2307      	movs	r3, #7
 800a57a:	e00e      	b.n	800a59a <scaraFlowDuty+0x7ea>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800a57c:	f107 0118 	add.w	r1, r7, #24
 800a580:	1d3b      	adds	r3, r7, #4
 800a582:	22c0      	movs	r2, #192	; 0xc0
 800a584:	6818      	ldr	r0, [r3, #0]
 800a586:	f00b ffe3 	bl	8016550 <memcpy>
		}
		kinematicForward(pos_Next);
 800a58a:	1d3b      	adds	r3, r7, #4
 800a58c:	6818      	ldr	r0, [r3, #0]
 800a58e:	f7fa ff93 	bl	80054b8 <kinematicForward>
 800a592:	e001      	b.n	800a598 <scaraFlowDuty+0x7e8>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 800a594:	2302      	movs	r3, #2
 800a596:	e000      	b.n	800a59a <scaraFlowDuty+0x7ea>
	}

	return SCARA_STATUS_OK;
 800a598:	2300      	movs	r3, #0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a5a6:	b002      	add	sp, #8
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	2000ff30 	.word	0x2000ff30
 800a5b0:	200103d0 	.word	0x200103d0
 800a5b4:	20010550 	.word	0x20010550
 800a5b8:	200106d0 	.word	0x200106d0
 800a5bc:	20010850 	.word	0x20010850

0800a5c0 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 800a5c0:	b5b0      	push	{r4, r5, r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800a5d2:	a33d      	add	r3, pc, #244	; (adr r3, 800a6c8 <scaraFlowLine+0x108>)
 800a5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d8:	f7f6 fa9e 	bl	8000b18 <__aeabi_dcmpgt>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d05a      	beq.n	800a698 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800a5ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5f2:	f7f6 f801 	bl	80005f8 <__aeabi_dmul>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	4610      	mov	r0, r2
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a604:	f7f6 f922 	bl	800084c <__aeabi_ddiv>
 800a608:	4602      	mov	r2, r0
 800a60a:	460b      	mov	r3, r1
 800a60c:	4620      	mov	r0, r4
 800a60e:	4629      	mov	r1, r5
 800a610:	f7f5 fe3c 	bl	800028c <__adddf3>
 800a614:	4602      	mov	r2, r0
 800a616:	460b      	mov	r3, r1
 800a618:	68f9      	ldr	r1, [r7, #12]
 800a61a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800a62a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a62e:	f7f5 ffe3 	bl	80005f8 <__aeabi_dmul>
 800a632:	4602      	mov	r2, r0
 800a634:	460b      	mov	r3, r1
 800a636:	4610      	mov	r0, r2
 800a638:	4619      	mov	r1, r3
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a640:	f7f6 f904 	bl	800084c <__aeabi_ddiv>
 800a644:	4602      	mov	r2, r0
 800a646:	460b      	mov	r3, r1
 800a648:	4620      	mov	r0, r4
 800a64a:	4629      	mov	r1, r5
 800a64c:	f7f5 fe1e 	bl	800028c <__adddf3>
 800a650:	4602      	mov	r2, r0
 800a652:	460b      	mov	r3, r1
 800a654:	68f9      	ldr	r1, [r7, #12]
 800a656:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800a666:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a66a:	f7f5 ffc5 	bl	80005f8 <__aeabi_dmul>
 800a66e:	4602      	mov	r2, r0
 800a670:	460b      	mov	r3, r1
 800a672:	4610      	mov	r0, r2
 800a674:	4619      	mov	r1, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a67c:	f7f6 f8e6 	bl	800084c <__aeabi_ddiv>
 800a680:	4602      	mov	r2, r0
 800a682:	460b      	mov	r3, r1
 800a684:	4620      	mov	r0, r4
 800a686:	4629      	mov	r1, r5
 800a688:	f7f5 fe00 	bl	800028c <__adddf3>
 800a68c:	4602      	mov	r2, r0
 800a68e:	460b      	mov	r3, r1
 800a690:	68f9      	ldr	r1, [r7, #12]
 800a692:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800a696:	e011      	b.n	800a6bc <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a69e:	68f9      	ldr	r1, [r7, #12]
 800a6a0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		line->y_current = line->y1;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800a6aa:	68f9      	ldr	r1, [r7, #12]
 800a6ac:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		line->z_current = line->z1;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800a6b6:	68f9      	ldr	r1, [r7, #12]
 800a6b8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bdb0      	pop	{r4, r5, r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	47ae147b 	.word	0x47ae147b
 800a6cc:	3f847ae1 	.word	0x3f847ae1

0800a6d0 <scaraFlowBezierCurve>:
SCARA_StatusTypeDef	scaraFlowBezierCurve	(Path_Line_TypeDef *line, double s) {
 800a6d0:	b5b0      	push	{r4, r5, r7, lr}
 800a6d2:	b08a      	sub	sp, #40	; 0x28
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	ed87 0b00 	vstr	d0, [r7]
	double a,b,c;
	a = (1-s)*(1-s);
 800a6dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6e0:	f04f 0000 	mov.w	r0, #0
 800a6e4:	4972      	ldr	r1, [pc, #456]	; (800a8b0 <scaraFlowBezierCurve+0x1e0>)
 800a6e6:	f7f5 fdcf 	bl	8000288 <__aeabi_dsub>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	4614      	mov	r4, r2
 800a6f0:	461d      	mov	r5, r3
 800a6f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6f6:	f04f 0000 	mov.w	r0, #0
 800a6fa:	496d      	ldr	r1, [pc, #436]	; (800a8b0 <scaraFlowBezierCurve+0x1e0>)
 800a6fc:	f7f5 fdc4 	bl	8000288 <__aeabi_dsub>
 800a700:	4602      	mov	r2, r0
 800a702:	460b      	mov	r3, r1
 800a704:	4620      	mov	r0, r4
 800a706:	4629      	mov	r1, r5
 800a708:	f7f5 ff76 	bl	80005f8 <__aeabi_dmul>
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	e9c7 2308 	strd	r2, r3, [r7, #32]
	b = s*(1-s);
 800a714:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a718:	f04f 0000 	mov.w	r0, #0
 800a71c:	4964      	ldr	r1, [pc, #400]	; (800a8b0 <scaraFlowBezierCurve+0x1e0>)
 800a71e:	f7f5 fdb3 	bl	8000288 <__aeabi_dsub>
 800a722:	4602      	mov	r2, r0
 800a724:	460b      	mov	r3, r1
 800a726:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a72a:	f7f5 ff65 	bl	80005f8 <__aeabi_dmul>
 800a72e:	4602      	mov	r2, r0
 800a730:	460b      	mov	r3, r1
 800a732:	e9c7 2306 	strd	r2, r3, [r7, #24]
	c = s*s;
 800a736:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a73a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a73e:	f7f5 ff5b 	bl	80005f8 <__aeabi_dmul>
 800a742:	4602      	mov	r2, r0
 800a744:	460b      	mov	r3, r1
 800a746:	e9c7 2304 	strd	r2, r3, [r7, #16]
	line->x_current = (a*bezier_x_coeffs[0] + b*bezier_x_coeffs[1] + c*bezier_x_coeffs[2])/(a + 2*bezier_wc*b+c);
 800a74a:	4b5a      	ldr	r3, [pc, #360]	; (800a8b4 <scaraFlowBezierCurve+0x1e4>)
 800a74c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a750:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a754:	f7f5 ff50 	bl	80005f8 <__aeabi_dmul>
 800a758:	4602      	mov	r2, r0
 800a75a:	460b      	mov	r3, r1
 800a75c:	4614      	mov	r4, r2
 800a75e:	461d      	mov	r5, r3
 800a760:	4b54      	ldr	r3, [pc, #336]	; (800a8b4 <scaraFlowBezierCurve+0x1e4>)
 800a762:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a766:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a76a:	f7f5 ff45 	bl	80005f8 <__aeabi_dmul>
 800a76e:	4602      	mov	r2, r0
 800a770:	460b      	mov	r3, r1
 800a772:	4620      	mov	r0, r4
 800a774:	4629      	mov	r1, r5
 800a776:	f7f5 fd89 	bl	800028c <__adddf3>
 800a77a:	4602      	mov	r2, r0
 800a77c:	460b      	mov	r3, r1
 800a77e:	4614      	mov	r4, r2
 800a780:	461d      	mov	r5, r3
 800a782:	4b4c      	ldr	r3, [pc, #304]	; (800a8b4 <scaraFlowBezierCurve+0x1e4>)
 800a784:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800a788:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a78c:	f7f5 ff34 	bl	80005f8 <__aeabi_dmul>
 800a790:	4602      	mov	r2, r0
 800a792:	460b      	mov	r3, r1
 800a794:	4620      	mov	r0, r4
 800a796:	4629      	mov	r1, r5
 800a798:	f7f5 fd78 	bl	800028c <__adddf3>
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	4614      	mov	r4, r2
 800a7a2:	461d      	mov	r5, r3
 800a7a4:	4b44      	ldr	r3, [pc, #272]	; (800a8b8 <scaraFlowBezierCurve+0x1e8>)
 800a7a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	f7f5 fd6d 	bl	800028c <__adddf3>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	4610      	mov	r0, r2
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a7be:	f7f5 ff1b 	bl	80005f8 <__aeabi_dmul>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	4610      	mov	r0, r2
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a7ce:	f7f5 fd5d 	bl	800028c <__adddf3>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	4610      	mov	r0, r2
 800a7d8:	4619      	mov	r1, r3
 800a7da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a7de:	f7f5 fd55 	bl	800028c <__adddf3>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	4629      	mov	r1, r5
 800a7ea:	f7f6 f82f 	bl	800084c <__aeabi_ddiv>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	68f9      	ldr	r1, [r7, #12]
 800a7f4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	line->y_current = (a*bezier_y_coeffs[0] + b*bezier_y_coeffs[1] + c*bezier_y_coeffs[2])/(a + 2*bezier_wc*b+c);
 800a7f8:	4b30      	ldr	r3, [pc, #192]	; (800a8bc <scaraFlowBezierCurve+0x1ec>)
 800a7fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a7fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a802:	f7f5 fef9 	bl	80005f8 <__aeabi_dmul>
 800a806:	4602      	mov	r2, r0
 800a808:	460b      	mov	r3, r1
 800a80a:	4614      	mov	r4, r2
 800a80c:	461d      	mov	r5, r3
 800a80e:	4b2b      	ldr	r3, [pc, #172]	; (800a8bc <scaraFlowBezierCurve+0x1ec>)
 800a810:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a814:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a818:	f7f5 feee 	bl	80005f8 <__aeabi_dmul>
 800a81c:	4602      	mov	r2, r0
 800a81e:	460b      	mov	r3, r1
 800a820:	4620      	mov	r0, r4
 800a822:	4629      	mov	r1, r5
 800a824:	f7f5 fd32 	bl	800028c <__adddf3>
 800a828:	4602      	mov	r2, r0
 800a82a:	460b      	mov	r3, r1
 800a82c:	4614      	mov	r4, r2
 800a82e:	461d      	mov	r5, r3
 800a830:	4b22      	ldr	r3, [pc, #136]	; (800a8bc <scaraFlowBezierCurve+0x1ec>)
 800a832:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800a836:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a83a:	f7f5 fedd 	bl	80005f8 <__aeabi_dmul>
 800a83e:	4602      	mov	r2, r0
 800a840:	460b      	mov	r3, r1
 800a842:	4620      	mov	r0, r4
 800a844:	4629      	mov	r1, r5
 800a846:	f7f5 fd21 	bl	800028c <__adddf3>
 800a84a:	4602      	mov	r2, r0
 800a84c:	460b      	mov	r3, r1
 800a84e:	4614      	mov	r4, r2
 800a850:	461d      	mov	r5, r3
 800a852:	4b19      	ldr	r3, [pc, #100]	; (800a8b8 <scaraFlowBezierCurve+0x1e8>)
 800a854:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a858:	4602      	mov	r2, r0
 800a85a:	460b      	mov	r3, r1
 800a85c:	f7f5 fd16 	bl	800028c <__adddf3>
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	4610      	mov	r0, r2
 800a866:	4619      	mov	r1, r3
 800a868:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a86c:	f7f5 fec4 	bl	80005f8 <__aeabi_dmul>
 800a870:	4602      	mov	r2, r0
 800a872:	460b      	mov	r3, r1
 800a874:	4610      	mov	r0, r2
 800a876:	4619      	mov	r1, r3
 800a878:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a87c:	f7f5 fd06 	bl	800028c <__adddf3>
 800a880:	4602      	mov	r2, r0
 800a882:	460b      	mov	r3, r1
 800a884:	4610      	mov	r0, r2
 800a886:	4619      	mov	r1, r3
 800a888:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a88c:	f7f5 fcfe 	bl	800028c <__adddf3>
 800a890:	4602      	mov	r2, r0
 800a892:	460b      	mov	r3, r1
 800a894:	4620      	mov	r0, r4
 800a896:	4629      	mov	r1, r5
 800a898:	f7f5 ffd8 	bl	800084c <__aeabi_ddiv>
 800a89c:	4602      	mov	r2, r0
 800a89e:	460b      	mov	r3, r1
 800a8a0:	68f9      	ldr	r1, [r7, #12]
 800a8a2:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	return SCARA_STATUS_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3728      	adds	r7, #40	; 0x28
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bdb0      	pop	{r4, r5, r7, pc}
 800a8b0:	3ff00000 	.word	0x3ff00000
 800a8b4:	20008f68 	.word	0x20008f68
 800a8b8:	20008fb8 	.word	0x20008fb8
 800a8bc:	2000fd48 	.word	0x2000fd48

0800a8c0 <scaraFlowCircle>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 800a8c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8c4:	b086      	sub	sp, #24
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	60f8      	str	r0, [r7, #12]
 800a8ca:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a8d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a8d8:	f7f5 ffb8 	bl	800084c <__aeabi_ddiv>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	460b      	mov	r3, r1
 800a8e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f993 3000 	ldrsb.w	r3, [r3]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7f5 fe11 	bl	8000524 <__aeabi_i2d>
 800a902:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a906:	f7f5 fe77 	bl	80005f8 <__aeabi_dmul>
 800a90a:	4602      	mov	r2, r0
 800a90c:	460b      	mov	r3, r1
 800a90e:	4650      	mov	r0, sl
 800a910:	4659      	mov	r1, fp
 800a912:	f7f5 fcbb 	bl	800028c <__adddf3>
 800a916:	4602      	mov	r2, r0
 800a918:	460b      	mov	r3, r1
 800a91a:	ec43 2b17 	vmov	d7, r2, r3
 800a91e:	eeb0 0a47 	vmov.f32	s0, s14
 800a922:	eef0 0a67 	vmov.f32	s1, s15
 800a926:	f010 faf3 	bl	801af10 <cos>
 800a92a:	ec53 2b10 	vmov	r2, r3, d0
 800a92e:	4640      	mov	r0, r8
 800a930:	4649      	mov	r1, r9
 800a932:	f7f5 fe61 	bl	80005f8 <__aeabi_dmul>
 800a936:	4602      	mov	r2, r0
 800a938:	460b      	mov	r3, r1
 800a93a:	4620      	mov	r0, r4
 800a93c:	4629      	mov	r1, r5
 800a93e:	f7f5 fca5 	bl	800028c <__adddf3>
 800a942:	4602      	mov	r2, r0
 800a944:	460b      	mov	r3, r1
 800a946:	68f9      	ldr	r1, [r7, #12]
 800a948:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f993 3000 	ldrsb.w	r3, [r3]
 800a964:	4618      	mov	r0, r3
 800a966:	f7f5 fddd 	bl	8000524 <__aeabi_i2d>
 800a96a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a96e:	f7f5 fe43 	bl	80005f8 <__aeabi_dmul>
 800a972:	4602      	mov	r2, r0
 800a974:	460b      	mov	r3, r1
 800a976:	4650      	mov	r0, sl
 800a978:	4659      	mov	r1, fp
 800a97a:	f7f5 fc87 	bl	800028c <__adddf3>
 800a97e:	4602      	mov	r2, r0
 800a980:	460b      	mov	r3, r1
 800a982:	ec43 2b17 	vmov	d7, r2, r3
 800a986:	eeb0 0a47 	vmov.f32	s0, s14
 800a98a:	eef0 0a67 	vmov.f32	s1, s15
 800a98e:	f010 fb57 	bl	801b040 <sin>
 800a992:	ec53 2b10 	vmov	r2, r3, d0
 800a996:	4640      	mov	r0, r8
 800a998:	4649      	mov	r1, r9
 800a99a:	f7f5 fe2d 	bl	80005f8 <__aeabi_dmul>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	f7f5 fc71 	bl	800028c <__adddf3>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	68f9      	ldr	r1, [r7, #12]
 800a9b0:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800a9ba:	68f9      	ldr	r1, [r7, #12]
 800a9bc:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

	return SCARA_STATUS_OK;
 800a9c0:	2300      	movs	r3, #0
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3718      	adds	r7, #24
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9cc:	0000      	movs	r0, r0
	...

0800a9d0 <scaraCheckWorkSpace4>:

	 return SCARA_STATUS_OK;
}

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b088      	sub	sp, #32
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	ed87 0b06 	vstr	d0, [r7, #24]
 800a9da:	ed87 1b04 	vstr	d1, [r7, #16]
 800a9de:	ed87 2b02 	vstr	d2, [r7, #8]
 800a9e2:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0-0.1 || theta1 > LIM_MAX_J0+0.1) {
 800a9e6:	a335      	add	r3, pc, #212	; (adr r3, 800aabc <scaraCheckWorkSpace4+0xec>)
 800a9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a9f0:	f7f6 f874 	bl	8000adc <__aeabi_dcmplt>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d109      	bne.n	800aa0e <scaraCheckWorkSpace4+0x3e>
 800a9fa:	a332      	add	r3, pc, #200	; (adr r3, 800aac4 <scaraCheckWorkSpace4+0xf4>)
 800a9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa00:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800aa04:	f7f6 f888 	bl	8000b18 <__aeabi_dcmpgt>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d001      	beq.n	800aa12 <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800aa0e:	2307      	movs	r3, #7
 800aa10:	e043      	b.n	800aa9a <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1-0.1 || theta2 > LIM_MAX_J1+0.1) {
 800aa12:	a32e      	add	r3, pc, #184	; (adr r3, 800aacc <scaraCheckWorkSpace4+0xfc>)
 800aa14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800aa1c:	f7f6 f85e 	bl	8000adc <__aeabi_dcmplt>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d109      	bne.n	800aa3a <scaraCheckWorkSpace4+0x6a>
 800aa26:	a32b      	add	r3, pc, #172	; (adr r3, 800aad4 <scaraCheckWorkSpace4+0x104>)
 800aa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800aa30:	f7f6 f872 	bl	8000b18 <__aeabi_dcmpgt>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d001      	beq.n	800aa3e <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800aa3a:	2307      	movs	r3, #7
 800aa3c:	e02d      	b.n	800aa9a <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 800aa3e:	f04f 0200 	mov.w	r2, #0
 800aa42:	f04f 0300 	mov.w	r3, #0
 800aa46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aa4a:	f7f6 f847 	bl	8000adc <__aeabi_dcmplt>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d109      	bne.n	800aa68 <scaraCheckWorkSpace4+0x98>
 800aa54:	f04f 0200 	mov.w	r2, #0
 800aa58:	4b17      	ldr	r3, [pc, #92]	; (800aab8 <scaraCheckWorkSpace4+0xe8>)
 800aa5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aa5e:	f7f6 f85b 	bl	8000b18 <__aeabi_dcmpgt>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d001      	beq.n	800aa6c <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800aa68:	2307      	movs	r3, #7
 800aa6a:	e016      	b.n	800aa9a <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3-0.1 || theta4 > LIM_MAX_J3+0.1) {
 800aa6c:	a30e      	add	r3, pc, #56	; (adr r3, 800aaa8 <scaraCheckWorkSpace4+0xd8>)
 800aa6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa72:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa76:	f7f6 f831 	bl	8000adc <__aeabi_dcmplt>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d109      	bne.n	800aa94 <scaraCheckWorkSpace4+0xc4>
 800aa80:	a30b      	add	r3, pc, #44	; (adr r3, 800aab0 <scaraCheckWorkSpace4+0xe0>)
 800aa82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa86:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa8a:	f7f6 f845 	bl	8000b18 <__aeabi_dcmpgt>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d001      	beq.n	800aa98 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800aa94:	2307      	movs	r3, #7
 800aa96:	e000      	b.n	800aa9a <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 800aa98:	2300      	movs	r3, #0
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3720      	adds	r7, #32
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	f3af 8000 	nop.w
 800aaa8:	a7777778 	.word	0xa7777778
 800aaac:	c0088956 	.word	0xc0088956
 800aab0:	a7777778 	.word	0xa7777778
 800aab4:	40088956 	.word	0x40088956
 800aab8:	40590000 	.word	0x40590000
 800aabc:	74444445 	.word	0x74444445
 800aac0:	bff95623 	.word	0xbff95623
 800aac4:	74444445 	.word	0x74444445
 800aac8:	3ff95623 	.word	0x3ff95623
 800aacc:	54cccccd 	.word	0x54cccccd
 800aad0:	c003a649 	.word	0xc003a649
 800aad4:	54cccccd 	.word	0x54cccccd
 800aad8:	4003a649 	.word	0x4003a649
 800aadc:	00000000 	.word	0x00000000

0800aae0 <scaraTestDuty>:
	}
}


/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 800aae0:	b5b0      	push	{r4, r5, r7, lr}
 800aae2:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800aae6:	af2e      	add	r7, sp, #184	; 0xb8
	int32_t sample_count;
	double run_time = 0;
 800aae8:	f04f 0200 	mov.w	r2, #0
 800aaec:	f04f 0300 	mov.w	r3, #0
 800aaf0:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800aaf4:	463b      	mov	r3, r7
 800aaf6:	4a36      	ldr	r2, [pc, #216]	; (800abd0 <scaraTestDuty+0xf0>)
 800aaf8:	4618      	mov	r0, r3
 800aafa:	4611      	mov	r1, r2
 800aafc:	23c0      	movs	r3, #192	; 0xc0
 800aafe:	461a      	mov	r2, r3
 800ab00:	f00b fd26 	bl	8016550 <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800ab04:	4b33      	ldr	r3, [pc, #204]	; (800abd4 <scaraTestDuty+0xf4>)
 800ab06:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800ab0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ab0e:	a32e      	add	r3, pc, #184	; (adr r3, 800abc8 <scaraTestDuty+0xe8>)
 800ab10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab14:	f7f5 fe9a 	bl	800084c <__aeabi_ddiv>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	ec43 2b17 	vmov	d7, r2, r3
 800ab20:	eeb0 0a47 	vmov.f32	s0, s14
 800ab24:	eef0 0a67 	vmov.f32	s1, s15
 800ab28:	f010 f96e 	bl	801ae08 <ceil>
 800ab2c:	ec53 2b10 	vmov	r2, r3, d0
 800ab30:	4610      	mov	r0, r2
 800ab32:	4619      	mov	r1, r3
 800ab34:	f7f6 f810 	bl	8000b58 <__aeabi_d2iz>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	for (int32_t i = 1; i < sample_count; i++) {
 800ab3e:	2301      	movs	r3, #1
 800ab40:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800ab44:	e032      	b.n	800abac <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 800ab46:	a320      	add	r3, pc, #128	; (adr r3, 800abc8 <scaraTestDuty+0xe8>)
 800ab48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800ab50:	f7f5 fb9c 	bl	800028c <__adddf3>
 800ab54:	4602      	mov	r2, r0
 800ab56:	460b      	mov	r3, r1
 800ab58:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 800ab5c:	463c      	mov	r4, r7
 800ab5e:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800ab62:	4668      	mov	r0, sp
 800ab64:	f104 0308 	add.w	r3, r4, #8
 800ab68:	22b8      	movs	r2, #184	; 0xb8
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	f00b fcf0 	bl	8016550 <memcpy>
 800ab70:	e894 000c 	ldmia.w	r4, {r2, r3}
 800ab74:	4628      	mov	r0, r5
 800ab76:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800ab7a:	f7ff f919 	bl	8009db0 <scaraFlowDuty>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		if (status != SCARA_STATUS_OK) {
 800ab84:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d002      	beq.n	800ab92 <scaraTestDuty+0xb2>
			return status;
 800ab8c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800ab90:	e013      	b.n	800abba <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 800ab92:	463a      	mov	r2, r7
 800ab94:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800ab98:	4611      	mov	r1, r2
 800ab9a:	22c0      	movs	r2, #192	; 0xc0
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f00b fcd7 	bl	8016550 <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 800aba2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800aba6:	3301      	adds	r3, #1
 800aba8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800abac:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800abb0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800abb4:	429a      	cmp	r2, r3
 800abb6:	dbc6      	blt.n	800ab46 <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bdb0      	pop	{r4, r5, r7, pc}
 800abc4:	f3af 8000 	nop.w
 800abc8:	40000000 	.word	0x40000000
 800abcc:	3f847ae1 	.word	0x3f847ae1
 800abd0:	20010af0 	.word	0x20010af0
 800abd4:	2000ff30 	.word	0x2000ff30

0800abd8 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 800abd8:	b480      	push	{r7}
 800abda:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 800abdc:	4b03      	ldr	r3, [pc, #12]	; (800abec <scaraSetScanFlag+0x14>)
 800abde:	2201      	movs	r2, #1
 800abe0:	70da      	strb	r2, [r3, #3]
}
 800abe2:	bf00      	nop
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr
 800abec:	20004080 	.word	0x20004080

0800abf0 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	4603      	mov	r3, r0
 800abf8:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 800abfa:	4a05      	ldr	r2, [pc, #20]	; (800ac10 <scaraSetOutput+0x20>)
 800abfc:	79fb      	ldrb	r3, [r7, #7]
 800abfe:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 800ac00:	79fb      	ldrb	r3, [r7, #7]
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7fc f870 	bl	8006ce8 <lowlayer_setOutput>
}
 800ac08:	bf00      	nop
 800ac0a:	3708      	adds	r7, #8
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	20004080 	.word	0x20004080

0800ac14 <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 800ac14:	b480      	push	{r7}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 800ac1e:	4a04      	ldr	r2, [pc, #16]	; (800ac30 <scaraSetDutyState+0x1c>)
 800ac20:	79fb      	ldrb	r3, [r7, #7]
 800ac22:	7093      	strb	r3, [r2, #2]
}
 800ac24:	bf00      	nop
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr
 800ac30:	20004080 	.word	0x20004080

0800ac34 <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 800ac3e:	4a04      	ldr	r2, [pc, #16]	; (800ac50 <scaraSetMode+0x1c>)
 800ac40:	79fb      	ldrb	r3, [r7, #7]
 800ac42:	7053      	strb	r3, [r2, #1]
}
 800ac44:	bf00      	nop
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr
 800ac50:	20004080 	.word	0x20004080

0800ac54 <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 800ac5e:	4a04      	ldr	r2, [pc, #16]	; (800ac70 <scaraSetMethod+0x1c>)
 800ac60:	79fb      	ldrb	r3, [r7, #7]
 800ac62:	7013      	strb	r3, [r2, #0]
}
 800ac64:	bf00      	nop
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr
 800ac70:	20004080 	.word	0x20004080

0800ac74 <scaraGetPosition>:


void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800ac7c:	22c0      	movs	r2, #192	; 0xc0
 800ac7e:	4904      	ldr	r1, [pc, #16]	; (800ac90 <scaraGetPosition+0x1c>)
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f00b fc65 	bl	8016550 <memcpy>
}
 800ac86:	bf00      	nop
 800ac88:	3708      	adds	r7, #8
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	20010af0 	.word	0x20010af0

0800ac94 <scaraUpdatePosition>:

void				scaraUpdatePosition (SCARA_PositionTypeDef *pos) {
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
	memcpy(&positionNext, pos, sizeof(SCARA_PositionTypeDef));
 800ac9c:	22c0      	movs	r2, #192	; 0xc0
 800ac9e:	6879      	ldr	r1, [r7, #4]
 800aca0:	4803      	ldr	r0, [pc, #12]	; (800acb0 <scaraUpdatePosition+0x1c>)
 800aca2:	f00b fc55 	bl	8016550 <memcpy>
}
 800aca6:	bf00      	nop
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	20010c70 	.word	0x20010c70

0800acb4 <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 800acb4:	b480      	push	{r7}
 800acb6:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 800acb8:	4b03      	ldr	r3, [pc, #12]	; (800acc8 <scaraGetMode+0x14>)
 800acba:	785b      	ldrb	r3, [r3, #1]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop
 800acc8:	20004080 	.word	0x20004080

0800accc <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 800accc:	b480      	push	{r7}
 800acce:	af00      	add	r7, sp, #0
	return mySCARA.method;
 800acd0:	4b03      	ldr	r3, [pc, #12]	; (800ace0 <scaraGetMethod+0x14>)
 800acd2:	781b      	ldrb	r3, [r3, #0]
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr
 800acde:	bf00      	nop
 800ace0:	20004080 	.word	0x20004080

0800ace4 <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 800ace4:	b480      	push	{r7}
 800ace6:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 800ace8:	4b03      	ldr	r3, [pc, #12]	; (800acf8 <scaraGetDutyState+0x14>)
 800acea:	789b      	ldrb	r3, [r3, #2]
}
 800acec:	4618      	mov	r0, r3
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr
 800acf6:	bf00      	nop
 800acf8:	20004080 	.word	0x20004080

0800acfc <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 800acfc:	b480      	push	{r7}
 800acfe:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 800ad00:	4b03      	ldr	r3, [pc, #12]	; (800ad10 <scaraIsScanLimit+0x14>)
 800ad02:	78db      	ldrb	r3, [r3, #3]
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	20004080 	.word	0x20004080

0800ad14 <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total < run_time) {
 800ad1e:	4b09      	ldr	r3, [pc, #36]	; (800ad44 <scaraIsFinish+0x30>)
 800ad20:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800ad24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad28:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad2c:	f7f5 fef4 	bl	8000b18 <__aeabi_dcmpgt>
 800ad30:	4603      	mov	r3, r0
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d001      	beq.n	800ad3a <scaraIsFinish+0x26>
		return TRUE;
 800ad36:	2301      	movs	r3, #1
 800ad38:	e000      	b.n	800ad3c <scaraIsFinish+0x28>
	} else {
		return FALSE;
 800ad3a:	2300      	movs	r3, #0
	}
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	2000ff30 	.word	0x2000ff30

0800ad48 <scaraPosition_packaging>:


int32_t scaraPosition_packaging(uint8_t *data_packet, SCARA_PositionTypeDef position)
{
 800ad48:	b082      	sub	sp, #8
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b084      	sub	sp, #16
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
 800ad52:	f107 0118 	add.w	r1, r7, #24
 800ad56:	e881 000c 	stmia.w	r1, {r2, r3}
	int32_t cur_ptr = -4;
 800ad5a:	f06f 0303 	mvn.w	r3, #3
 800ad5e:	60fb      	str	r3, [r7, #12]
	Append_Coordinate_Value((int32_t)(position.x*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800ad60:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800ad64:	a35c      	add	r3, pc, #368	; (adr r3, 800aed8 <scaraPosition_packaging+0x190>)
 800ad66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6a:	f7f5 fc45 	bl	80005f8 <__aeabi_dmul>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	460b      	mov	r3, r1
 800ad72:	4610      	mov	r0, r2
 800ad74:	4619      	mov	r1, r3
 800ad76:	f7f5 feef 	bl	8000b58 <__aeabi_d2iz>
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	3304      	adds	r3, #4
 800ad7e:	60fb      	str	r3, [r7, #12]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	4413      	add	r3, r2
 800ad86:	4619      	mov	r1, r3
 800ad88:	f000 f8aa 	bl	800aee0 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.y*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800ad8c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ad90:	a351      	add	r3, pc, #324	; (adr r3, 800aed8 <scaraPosition_packaging+0x190>)
 800ad92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad96:	f7f5 fc2f 	bl	80005f8 <__aeabi_dmul>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	460b      	mov	r3, r1
 800ad9e:	4610      	mov	r0, r2
 800ada0:	4619      	mov	r1, r3
 800ada2:	f7f5 fed9 	bl	8000b58 <__aeabi_d2iz>
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	3304      	adds	r3, #4
 800adaa:	60fb      	str	r3, [r7, #12]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	4413      	add	r3, r2
 800adb2:	4619      	mov	r1, r3
 800adb4:	f000 f894 	bl	800aee0 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.z*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800adb8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800adbc:	a346      	add	r3, pc, #280	; (adr r3, 800aed8 <scaraPosition_packaging+0x190>)
 800adbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc2:	f7f5 fc19 	bl	80005f8 <__aeabi_dmul>
 800adc6:	4602      	mov	r2, r0
 800adc8:	460b      	mov	r3, r1
 800adca:	4610      	mov	r0, r2
 800adcc:	4619      	mov	r1, r3
 800adce:	f7f5 fec3 	bl	8000b58 <__aeabi_d2iz>
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	3304      	adds	r3, #4
 800add6:	60fb      	str	r3, [r7, #12]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	4413      	add	r3, r2
 800adde:	4619      	mov	r1, r3
 800ade0:	f000 f87e 	bl	800aee0 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.roll*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800ade4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800ade8:	a33b      	add	r3, pc, #236	; (adr r3, 800aed8 <scaraPosition_packaging+0x190>)
 800adea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adee:	f7f5 fc03 	bl	80005f8 <__aeabi_dmul>
 800adf2:	4602      	mov	r2, r0
 800adf4:	460b      	mov	r3, r1
 800adf6:	4610      	mov	r0, r2
 800adf8:	4619      	mov	r1, r3
 800adfa:	f7f5 fead 	bl	8000b58 <__aeabi_d2iz>
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	3304      	adds	r3, #4
 800ae02:	60fb      	str	r3, [r7, #12]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	4413      	add	r3, r2
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	f000 f868 	bl	800aee0 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta1*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800ae10:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ae14:	a330      	add	r3, pc, #192	; (adr r3, 800aed8 <scaraPosition_packaging+0x190>)
 800ae16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1a:	f7f5 fbed 	bl	80005f8 <__aeabi_dmul>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	460b      	mov	r3, r1
 800ae22:	4610      	mov	r0, r2
 800ae24:	4619      	mov	r1, r3
 800ae26:	f7f5 fe97 	bl	8000b58 <__aeabi_d2iz>
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	3304      	adds	r3, #4
 800ae2e:	60fb      	str	r3, [r7, #12]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	4413      	add	r3, r2
 800ae36:	4619      	mov	r1, r3
 800ae38:	f000 f852 	bl	800aee0 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta2*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800ae3c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800ae40:	a325      	add	r3, pc, #148	; (adr r3, 800aed8 <scaraPosition_packaging+0x190>)
 800ae42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae46:	f7f5 fbd7 	bl	80005f8 <__aeabi_dmul>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	4610      	mov	r0, r2
 800ae50:	4619      	mov	r1, r3
 800ae52:	f7f5 fe81 	bl	8000b58 <__aeabi_d2iz>
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	3304      	adds	r3, #4
 800ae5a:	60fb      	str	r3, [r7, #12]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	4413      	add	r3, r2
 800ae62:	4619      	mov	r1, r3
 800ae64:	f000 f83c 	bl	800aee0 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.D3*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800ae68:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800ae6c:	a31a      	add	r3, pc, #104	; (adr r3, 800aed8 <scaraPosition_packaging+0x190>)
 800ae6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae72:	f7f5 fbc1 	bl	80005f8 <__aeabi_dmul>
 800ae76:	4602      	mov	r2, r0
 800ae78:	460b      	mov	r3, r1
 800ae7a:	4610      	mov	r0, r2
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	f7f5 fe6b 	bl	8000b58 <__aeabi_d2iz>
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	3304      	adds	r3, #4
 800ae86:	60fb      	str	r3, [r7, #12]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	4413      	add	r3, r2
 800ae8e:	4619      	mov	r1, r3
 800ae90:	f000 f826 	bl	800aee0 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta4*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800ae94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ae98:	a30f      	add	r3, pc, #60	; (adr r3, 800aed8 <scaraPosition_packaging+0x190>)
 800ae9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9e:	f7f5 fbab 	bl	80005f8 <__aeabi_dmul>
 800aea2:	4602      	mov	r2, r0
 800aea4:	460b      	mov	r3, r1
 800aea6:	4610      	mov	r0, r2
 800aea8:	4619      	mov	r1, r3
 800aeaa:	f7f5 fe55 	bl	8000b58 <__aeabi_d2iz>
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	3304      	adds	r3, #4
 800aeb2:	60fb      	str	r3, [r7, #12]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	4413      	add	r3, r2
 800aeba:	4619      	mov	r1, r3
 800aebc:	f000 f810 	bl	800aee0 <Append_Coordinate_Value>
	return cur_ptr + 4;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	3304      	adds	r3, #4
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aece:	b002      	add	sp, #8
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop
 800aed4:	f3af 8000 	nop.w
 800aed8:	00000000 	.word	0x00000000
 800aedc:	412e8480 	.word	0x412e8480

0800aee0 <Append_Coordinate_Value>:

void Append_Coordinate_Value(int32_t append_value, uint8_t* append_position)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
	append_position[0] = (uint8_t)(append_value & 0xff);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	b2da      	uxtb	r2, r3
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	701a      	strb	r2, [r3, #0]
	append_position[1] = (uint8_t)(append_value >> 8 & 0xff);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	121a      	asrs	r2, r3, #8
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	3301      	adds	r3, #1
 800aefa:	b2d2      	uxtb	r2, r2
 800aefc:	701a      	strb	r2, [r3, #0]
	append_position[2] = (uint8_t)(append_value >> 16 & 0xff);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	141a      	asrs	r2, r3, #16
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	3302      	adds	r3, #2
 800af06:	b2d2      	uxtb	r2, r2
 800af08:	701a      	strb	r2, [r3, #0]
	append_position[3] = (uint8_t)(append_value >> 24 & 0xff);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	161a      	asrs	r2, r3, #24
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	3303      	adds	r3, #3
 800af12:	b2d2      	uxtb	r2, r2
 800af14:	701a      	strb	r2, [r3, #0]
}
 800af16:	bf00      	nop
 800af18:	370c      	adds	r7, #12
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr
 800af22:	0000      	movs	r0, r0
 800af24:	0000      	movs	r0, r0
	...

0800af28 <scaraKeyInit1>:
SCARA_StatusTypeDef  scaraKeyInit1(SCARA_KeyTypeDef key, int32_t speed)
{
 800af28:	b590      	push	{r4, r7, lr}
 800af2a:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 800af2e:	af6c      	add	r7, sp, #432	; 0x1b0
 800af30:	4602      	mov	r2, r0
 800af32:	463b      	mov	r3, r7
 800af34:	6019      	str	r1, [r3, #0]
 800af36:	1dfb      	adds	r3, r7, #7
 800af38:	701a      	strb	r2, [r3, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef status;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 800af3a:	f107 0308 	add.w	r3, r7, #8
 800af3e:	2201      	movs	r2, #1
 800af40:	731a      	strb	r2, [r3, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800af42:	f107 0308 	add.w	r3, r7, #8
 800af46:	2200      	movs	r2, #0
 800af48:	741a      	strb	r2, [r3, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 800af4a:	f107 0308 	add.w	r3, r7, #8
 800af4e:	2201      	movs	r2, #1
 800af50:	745a      	strb	r2, [r3, #17]
	double v_current = 0;
 800af52:	f04f 0200 	mov.w	r2, #0
 800af56:	f04f 0300 	mov.w	r3, #0
 800af5a:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
	Trajectory_LSPB_TypeDef *lspb;
	if(speed < SHIFT_SPEED_MIN || speed > SHIFT_SPEED_MAX){
 800af5e:	463b      	mov	r3, r7
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	dd03      	ble.n	800af6e <scaraKeyInit1+0x46>
 800af66:	463b      	mov	r3, r7
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2b0e      	cmp	r3, #14
 800af6c:	dd01      	ble.n	800af72 <scaraKeyInit1+0x4a>
		return SCARA_STATUS_ERROR_PARA;
 800af6e:	2306      	movs	r3, #6
 800af70:	e2c0      	b.n	800b4f4 <scaraKeyInit1+0x5cc>
	}
	switch(key){
 800af72:	1dfb      	adds	r3, r7, #7
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	2b07      	cmp	r3, #7
 800af78:	f200 8298 	bhi.w	800b4ac <scaraKeyInit1+0x584>
 800af7c:	a201      	add	r2, pc, #4	; (adr r2, 800af84 <scaraKeyInit1+0x5c>)
 800af7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af82:	bf00      	nop
 800af84:	0800afa5 	.word	0x0800afa5
 800af88:	0800b047 	.word	0x0800b047
 800af8c:	0800b0ed 	.word	0x0800b0ed
 800af90:	0800b18b 	.word	0x0800b18b
 800af94:	0800b22d 	.word	0x0800b22d
 800af98:	0800b2cb 	.word	0x0800b2cb
 800af9c:	0800b36d 	.word	0x0800b36d
 800afa0:	0800b40b 	.word	0x0800b40b
		case SCARA_KEY_X_INC:{
			cmd.v_factor = 0;
 800afa4:	f107 0108 	add.w	r1, r7, #8
 800afa8:	f04f 0200 	mov.w	r2, #0
 800afac:	f04f 0300 	mov.w	r3, #0
 800afb0:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800afb4:	f107 0308 	add.w	r3, r7, #8
 800afb8:	2200      	movs	r2, #0
 800afba:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800afbc:	f107 0308 	add.w	r3, r7, #8
 800afc0:	2200      	movs	r2, #0
 800afc2:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= speed*SHIFT_KEY_S;
 800afc4:	463b      	mov	r3, r7
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	4613      	mov	r3, r2
 800afca:	009b      	lsls	r3, r3, #2
 800afcc:	4413      	add	r3, r2
 800afce:	4618      	mov	r0, r3
 800afd0:	f7f5 faa8 	bl	8000524 <__aeabi_i2d>
 800afd4:	4602      	mov	r2, r0
 800afd6:	460b      	mov	r3, r1
 800afd8:	f107 0108 	add.w	r1, r7, #8
 800afdc:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800afe0:	f107 0108 	add.w	r1, r7, #8
 800afe4:	f04f 0200 	mov.w	r2, #0
 800afe8:	f04f 0300 	mov.w	r3, #0
 800afec:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800aff0:	f107 0108 	add.w	r1, r7, #8
 800aff4:	f04f 0200 	mov.w	r2, #0
 800aff8:	f04f 0300 	mov.w	r3, #0
 800affc:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800b000:	f107 0108 	add.w	r1, r7, #8
 800b004:	f04f 0200 	mov.w	r2, #0
 800b008:	f04f 0300 	mov.w	r3, #0
 800b00c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800b010:	463b      	mov	r3, r7
 800b012:	6818      	ldr	r0, [r3, #0]
 800b014:	f7f5 fa86 	bl	8000524 <__aeabi_i2d>
 800b018:	f20f 43e4 	addw	r3, pc, #1252	; 0x4e4
 800b01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b020:	f7f5 faea 	bl	80005f8 <__aeabi_dmul>
 800b024:	4602      	mov	r2, r0
 800b026:	460b      	mov	r3, r1
 800b028:	4610      	mov	r0, r2
 800b02a:	4619      	mov	r1, r3
 800b02c:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 800b030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b034:	f7f5 f92a 	bl	800028c <__adddf3>
 800b038:	4602      	mov	r2, r0
 800b03a:	460b      	mov	r3, r1
 800b03c:	f107 0108 	add.w	r1, r7, #8
 800b040:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800b044:	e232      	b.n	800b4ac <scaraKeyInit1+0x584>
		case SCARA_KEY_X_DEC:{
			cmd.v_factor = 0;
 800b046:	f107 0108 	add.w	r1, r7, #8
 800b04a:	f04f 0200 	mov.w	r2, #0
 800b04e:	f04f 0300 	mov.w	r3, #0
 800b052:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800b056:	f107 0308 	add.w	r3, r7, #8
 800b05a:	2200      	movs	r2, #0
 800b05c:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800b05e:	f107 0308 	add.w	r3, r7, #8
 800b062:	2200      	movs	r2, #0
 800b064:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= -speed*SHIFT_KEY_S;
 800b066:	463b      	mov	r3, r7
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	4613      	mov	r3, r2
 800b06c:	079b      	lsls	r3, r3, #30
 800b06e:	1a9b      	subs	r3, r3, r2
 800b070:	009b      	lsls	r3, r3, #2
 800b072:	1a9b      	subs	r3, r3, r2
 800b074:	4618      	mov	r0, r3
 800b076:	f7f5 fa55 	bl	8000524 <__aeabi_i2d>
 800b07a:	4602      	mov	r2, r0
 800b07c:	460b      	mov	r3, r1
 800b07e:	f107 0108 	add.w	r1, r7, #8
 800b082:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800b086:	f107 0108 	add.w	r1, r7, #8
 800b08a:	f04f 0200 	mov.w	r2, #0
 800b08e:	f04f 0300 	mov.w	r3, #0
 800b092:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800b096:	f107 0108 	add.w	r1, r7, #8
 800b09a:	f04f 0200 	mov.w	r2, #0
 800b09e:	f04f 0300 	mov.w	r3, #0
 800b0a2:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800b0a6:	f107 0108 	add.w	r1, r7, #8
 800b0aa:	f04f 0200 	mov.w	r2, #0
 800b0ae:	f04f 0300 	mov.w	r3, #0
 800b0b2:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800b0b6:	463b      	mov	r3, r7
 800b0b8:	6818      	ldr	r0, [r3, #0]
 800b0ba:	f7f5 fa33 	bl	8000524 <__aeabi_i2d>
 800b0be:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 800b0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c6:	f7f5 fa97 	bl	80005f8 <__aeabi_dmul>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	4610      	mov	r0, r2
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 800b0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0da:	f7f5 f8d7 	bl	800028c <__adddf3>
 800b0de:	4602      	mov	r2, r0
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	f107 0108 	add.w	r1, r7, #8
 800b0e6:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800b0ea:	e1df      	b.n	800b4ac <scaraKeyInit1+0x584>
		case SCARA_KEY_Y_INC:{
			cmd.v_factor = 0;
 800b0ec:	f107 0108 	add.w	r1, r7, #8
 800b0f0:	f04f 0200 	mov.w	r2, #0
 800b0f4:	f04f 0300 	mov.w	r3, #0
 800b0f8:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800b0fc:	f107 0308 	add.w	r3, r7, #8
 800b100:	2200      	movs	r2, #0
 800b102:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800b104:	f107 0308 	add.w	r3, r7, #8
 800b108:	2200      	movs	r2, #0
 800b10a:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800b10c:	f107 0108 	add.w	r1, r7, #8
 800b110:	f04f 0200 	mov.w	r2, #0
 800b114:	f04f 0300 	mov.w	r3, #0
 800b118:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= speed*SHIFT_KEY_S;
 800b11c:	463b      	mov	r3, r7
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	4613      	mov	r3, r2
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	4413      	add	r3, r2
 800b126:	4618      	mov	r0, r3
 800b128:	f7f5 f9fc 	bl	8000524 <__aeabi_i2d>
 800b12c:	4602      	mov	r2, r0
 800b12e:	460b      	mov	r3, r1
 800b130:	f107 0108 	add.w	r1, r7, #8
 800b134:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800b138:	f107 0108 	add.w	r1, r7, #8
 800b13c:	f04f 0200 	mov.w	r2, #0
 800b140:	f04f 0300 	mov.w	r3, #0
 800b144:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800b148:	f107 0108 	add.w	r1, r7, #8
 800b14c:	f04f 0200 	mov.w	r2, #0
 800b150:	f04f 0300 	mov.w	r3, #0
 800b154:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800b158:	463b      	mov	r3, r7
 800b15a:	6818      	ldr	r0, [r3, #0]
 800b15c:	f7f5 f9e2 	bl	8000524 <__aeabi_i2d>
 800b160:	a3e7      	add	r3, pc, #924	; (adr r3, 800b500 <scaraKeyInit1+0x5d8>)
 800b162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b166:	f7f5 fa47 	bl	80005f8 <__aeabi_dmul>
 800b16a:	4602      	mov	r2, r0
 800b16c:	460b      	mov	r3, r1
 800b16e:	4610      	mov	r0, r2
 800b170:	4619      	mov	r1, r3
 800b172:	a3e5      	add	r3, pc, #916	; (adr r3, 800b508 <scaraKeyInit1+0x5e0>)
 800b174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b178:	f7f5 f888 	bl	800028c <__adddf3>
 800b17c:	4602      	mov	r2, r0
 800b17e:	460b      	mov	r3, r1
 800b180:	f107 0108 	add.w	r1, r7, #8
 800b184:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800b188:	e190      	b.n	800b4ac <scaraKeyInit1+0x584>

		case SCARA_KEY_Y_DEC:{
			cmd.v_factor = 0;
 800b18a:	f107 0108 	add.w	r1, r7, #8
 800b18e:	f04f 0200 	mov.w	r2, #0
 800b192:	f04f 0300 	mov.w	r3, #0
 800b196:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800b19a:	f107 0308 	add.w	r3, r7, #8
 800b19e:	2200      	movs	r2, #0
 800b1a0:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800b1a2:	f107 0308 	add.w	r3, r7, #8
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800b1aa:	f107 0108 	add.w	r1, r7, #8
 800b1ae:	f04f 0200 	mov.w	r2, #0
 800b1b2:	f04f 0300 	mov.w	r3, #0
 800b1b6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= -speed*SHIFT_KEY_S;
 800b1ba:	463b      	mov	r3, r7
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	4613      	mov	r3, r2
 800b1c0:	079b      	lsls	r3, r3, #30
 800b1c2:	1a9b      	subs	r3, r3, r2
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	1a9b      	subs	r3, r3, r2
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7f5 f9ab 	bl	8000524 <__aeabi_i2d>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	f107 0108 	add.w	r1, r7, #8
 800b1d6:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800b1da:	f107 0108 	add.w	r1, r7, #8
 800b1de:	f04f 0200 	mov.w	r2, #0
 800b1e2:	f04f 0300 	mov.w	r3, #0
 800b1e6:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800b1ea:	f107 0108 	add.w	r1, r7, #8
 800b1ee:	f04f 0200 	mov.w	r2, #0
 800b1f2:	f04f 0300 	mov.w	r3, #0
 800b1f6:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800b1fa:	463b      	mov	r3, r7
 800b1fc:	6818      	ldr	r0, [r3, #0]
 800b1fe:	f7f5 f991 	bl	8000524 <__aeabi_i2d>
 800b202:	a3bf      	add	r3, pc, #764	; (adr r3, 800b500 <scaraKeyInit1+0x5d8>)
 800b204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b208:	f7f5 f9f6 	bl	80005f8 <__aeabi_dmul>
 800b20c:	4602      	mov	r2, r0
 800b20e:	460b      	mov	r3, r1
 800b210:	4610      	mov	r0, r2
 800b212:	4619      	mov	r1, r3
 800b214:	a3bc      	add	r3, pc, #752	; (adr r3, 800b508 <scaraKeyInit1+0x5e0>)
 800b216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21a:	f7f5 f837 	bl	800028c <__adddf3>
 800b21e:	4602      	mov	r2, r0
 800b220:	460b      	mov	r3, r1
 800b222:	f107 0108 	add.w	r1, r7, #8
 800b226:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800b22a:	e13f      	b.n	800b4ac <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_INC:{
			cmd.v_factor = 0;
 800b22c:	f107 0108 	add.w	r1, r7, #8
 800b230:	f04f 0200 	mov.w	r2, #0
 800b234:	f04f 0300 	mov.w	r3, #0
 800b238:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800b23c:	f107 0308 	add.w	r3, r7, #8
 800b240:	2200      	movs	r2, #0
 800b242:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800b244:	f107 0308 	add.w	r3, r7, #8
 800b248:	2200      	movs	r2, #0
 800b24a:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800b24c:	f107 0108 	add.w	r1, r7, #8
 800b250:	f04f 0200 	mov.w	r2, #0
 800b254:	f04f 0300 	mov.w	r3, #0
 800b258:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800b25c:	f107 0108 	add.w	r1, r7, #8
 800b260:	f04f 0200 	mov.w	r2, #0
 800b264:	f04f 0300 	mov.w	r3, #0
 800b268:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= speed*SHIFT_KEY_S;
 800b26c:	463b      	mov	r3, r7
 800b26e:	681a      	ldr	r2, [r3, #0]
 800b270:	4613      	mov	r3, r2
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	4413      	add	r3, r2
 800b276:	4618      	mov	r0, r3
 800b278:	f7f5 f954 	bl	8000524 <__aeabi_i2d>
 800b27c:	4602      	mov	r2, r0
 800b27e:	460b      	mov	r3, r1
 800b280:	f107 0108 	add.w	r1, r7, #8
 800b284:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800b288:	f107 0108 	add.w	r1, r7, #8
 800b28c:	f04f 0200 	mov.w	r2, #0
 800b290:	f04f 0300 	mov.w	r3, #0
 800b294:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800b298:	463b      	mov	r3, r7
 800b29a:	6818      	ldr	r0, [r3, #0]
 800b29c:	f7f5 f942 	bl	8000524 <__aeabi_i2d>
 800b2a0:	a397      	add	r3, pc, #604	; (adr r3, 800b500 <scaraKeyInit1+0x5d8>)
 800b2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a6:	f7f5 f9a7 	bl	80005f8 <__aeabi_dmul>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	4610      	mov	r0, r2
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	a395      	add	r3, pc, #596	; (adr r3, 800b508 <scaraKeyInit1+0x5e0>)
 800b2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b8:	f7f4 ffe8 	bl	800028c <__adddf3>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	460b      	mov	r3, r1
 800b2c0:	f107 0108 	add.w	r1, r7, #8
 800b2c4:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800b2c8:	e0f0      	b.n	800b4ac <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_DEC:{
			cmd.v_factor = 0;
 800b2ca:	f107 0108 	add.w	r1, r7, #8
 800b2ce:	f04f 0200 	mov.w	r2, #0
 800b2d2:	f04f 0300 	mov.w	r3, #0
 800b2d6:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800b2da:	f107 0308 	add.w	r3, r7, #8
 800b2de:	2200      	movs	r2, #0
 800b2e0:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800b2e2:	f107 0308 	add.w	r3, r7, #8
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800b2ea:	f107 0108 	add.w	r1, r7, #8
 800b2ee:	f04f 0200 	mov.w	r2, #0
 800b2f2:	f04f 0300 	mov.w	r3, #0
 800b2f6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800b2fa:	f107 0108 	add.w	r1, r7, #8
 800b2fe:	f04f 0200 	mov.w	r2, #0
 800b302:	f04f 0300 	mov.w	r3, #0
 800b306:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= -speed*SHIFT_KEY_S;
 800b30a:	463b      	mov	r3, r7
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	4613      	mov	r3, r2
 800b310:	079b      	lsls	r3, r3, #30
 800b312:	1a9b      	subs	r3, r3, r2
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	1a9b      	subs	r3, r3, r2
 800b318:	4618      	mov	r0, r3
 800b31a:	f7f5 f903 	bl	8000524 <__aeabi_i2d>
 800b31e:	4602      	mov	r2, r0
 800b320:	460b      	mov	r3, r1
 800b322:	f107 0108 	add.w	r1, r7, #8
 800b326:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800b32a:	f107 0108 	add.w	r1, r7, #8
 800b32e:	f04f 0200 	mov.w	r2, #0
 800b332:	f04f 0300 	mov.w	r3, #0
 800b336:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800b33a:	463b      	mov	r3, r7
 800b33c:	6818      	ldr	r0, [r3, #0]
 800b33e:	f7f5 f8f1 	bl	8000524 <__aeabi_i2d>
 800b342:	a36f      	add	r3, pc, #444	; (adr r3, 800b500 <scaraKeyInit1+0x5d8>)
 800b344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b348:	f7f5 f956 	bl	80005f8 <__aeabi_dmul>
 800b34c:	4602      	mov	r2, r0
 800b34e:	460b      	mov	r3, r1
 800b350:	4610      	mov	r0, r2
 800b352:	4619      	mov	r1, r3
 800b354:	a36c      	add	r3, pc, #432	; (adr r3, 800b508 <scaraKeyInit1+0x5e0>)
 800b356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35a:	f7f4 ff97 	bl	800028c <__adddf3>
 800b35e:	4602      	mov	r2, r0
 800b360:	460b      	mov	r3, r1
 800b362:	f107 0108 	add.w	r1, r7, #8
 800b366:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800b36a:	e09f      	b.n	800b4ac <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_INC:{
			cmd.v_factor = 0;
 800b36c:	f107 0108 	add.w	r1, r7, #8
 800b370:	f04f 0200 	mov.w	r2, #0
 800b374:	f04f 0300 	mov.w	r3, #0
 800b378:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800b37c:	f107 0308 	add.w	r3, r7, #8
 800b380:	2200      	movs	r2, #0
 800b382:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800b384:	f107 0308 	add.w	r3, r7, #8
 800b388:	2200      	movs	r2, #0
 800b38a:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800b38c:	f107 0108 	add.w	r1, r7, #8
 800b390:	f04f 0200 	mov.w	r2, #0
 800b394:	f04f 0300 	mov.w	r3, #0
 800b398:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800b39c:	f107 0108 	add.w	r1, r7, #8
 800b3a0:	f04f 0200 	mov.w	r2, #0
 800b3a4:	f04f 0300 	mov.w	r3, #0
 800b3a8:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800b3ac:	f107 0108 	add.w	r1, r7, #8
 800b3b0:	f04f 0200 	mov.w	r2, #0
 800b3b4:	f04f 0300 	mov.w	r3, #0
 800b3b8:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= speed*SHIFT_KEY_S;
 800b3bc:	463b      	mov	r3, r7
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	4413      	add	r3, r2
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7f5 f8ac 	bl	8000524 <__aeabi_i2d>
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	f107 0108 	add.w	r1, r7, #8
 800b3d4:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800b3d8:	463b      	mov	r3, r7
 800b3da:	6818      	ldr	r0, [r3, #0]
 800b3dc:	f7f5 f8a2 	bl	8000524 <__aeabi_i2d>
 800b3e0:	a347      	add	r3, pc, #284	; (adr r3, 800b500 <scaraKeyInit1+0x5d8>)
 800b3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e6:	f7f5 f907 	bl	80005f8 <__aeabi_dmul>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	4610      	mov	r0, r2
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	a345      	add	r3, pc, #276	; (adr r3, 800b508 <scaraKeyInit1+0x5e0>)
 800b3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f8:	f7f4 ff48 	bl	800028c <__adddf3>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	460b      	mov	r3, r1
 800b400:	f107 0108 	add.w	r1, r7, #8
 800b404:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800b408:	e050      	b.n	800b4ac <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_DEC:{
			cmd.v_factor = 0;
 800b40a:	f107 0108 	add.w	r1, r7, #8
 800b40e:	f04f 0200 	mov.w	r2, #0
 800b412:	f04f 0300 	mov.w	r3, #0
 800b416:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800b41a:	f107 0308 	add.w	r3, r7, #8
 800b41e:	2200      	movs	r2, #0
 800b420:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800b422:	f107 0308 	add.w	r3, r7, #8
 800b426:	2200      	movs	r2, #0
 800b428:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800b42a:	f107 0108 	add.w	r1, r7, #8
 800b42e:	f04f 0200 	mov.w	r2, #0
 800b432:	f04f 0300 	mov.w	r3, #0
 800b436:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800b43a:	f107 0108 	add.w	r1, r7, #8
 800b43e:	f04f 0200 	mov.w	r2, #0
 800b442:	f04f 0300 	mov.w	r3, #0
 800b446:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800b44a:	f107 0108 	add.w	r1, r7, #8
 800b44e:	f04f 0200 	mov.w	r2, #0
 800b452:	f04f 0300 	mov.w	r3, #0
 800b456:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= -speed*SHIFT_KEY_S;
 800b45a:	463b      	mov	r3, r7
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	4613      	mov	r3, r2
 800b460:	079b      	lsls	r3, r3, #30
 800b462:	1a9b      	subs	r3, r3, r2
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	1a9b      	subs	r3, r3, r2
 800b468:	4618      	mov	r0, r3
 800b46a:	f7f5 f85b 	bl	8000524 <__aeabi_i2d>
 800b46e:	4602      	mov	r2, r0
 800b470:	460b      	mov	r3, r1
 800b472:	f107 0108 	add.w	r1, r7, #8
 800b476:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800b47a:	463b      	mov	r3, r7
 800b47c:	6818      	ldr	r0, [r3, #0]
 800b47e:	f7f5 f851 	bl	8000524 <__aeabi_i2d>
 800b482:	a31f      	add	r3, pc, #124	; (adr r3, 800b500 <scaraKeyInit1+0x5d8>)
 800b484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b488:	f7f5 f8b6 	bl	80005f8 <__aeabi_dmul>
 800b48c:	4602      	mov	r2, r0
 800b48e:	460b      	mov	r3, r1
 800b490:	4610      	mov	r0, r2
 800b492:	4619      	mov	r1, r3
 800b494:	a31c      	add	r3, pc, #112	; (adr r3, 800b508 <scaraKeyInit1+0x5e0>)
 800b496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49a:	f7f4 fef7 	bl	800028c <__adddf3>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	f107 0108 	add.w	r1, r7, #8
 800b4a6:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800b4aa:	bf00      	nop
	}

	status = scaraInitDuty(cmd);
 800b4ac:	f107 0408 	add.w	r4, r7, #8
 800b4b0:	4668      	mov	r0, sp
 800b4b2:	f104 0310 	add.w	r3, r4, #16
 800b4b6:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	f00b f848 	bl	8016550 <memcpy>
 800b4c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b4c4:	f7fb fc5c 	bl	8006d80 <scaraInitDuty>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
	if (status == SCARA_STATUS_OK) {
 800b4ce:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d10b      	bne.n	800b4ee <scaraKeyInit1+0x5c6>
		status = scaraTestDuty();
 800b4d6:	f7ff fb03 	bl	800aae0 <scaraTestDuty>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		if (status != SCARA_STATUS_OK) {
 800b4e0:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d005      	beq.n	800b4f4 <scaraKeyInit1+0x5cc>
			return status;
 800b4e8:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b4ec:	e002      	b.n	800b4f4 <scaraKeyInit1+0x5cc>
		// tinh lai run time so vs v hien tai
//		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
//		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
//		return status;
	} else {
		return status;
 800b4ee:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b4f2:	e7ff      	b.n	800b4f4 <scaraKeyInit1+0x5cc>
	}
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd90      	pop	{r4, r7, pc}
 800b4fe:	bf00      	nop
 800b500:	9999999a 	.word	0x9999999a
 800b504:	3fa99999 	.word	0x3fa99999
 800b508:	9999999a 	.word	0x9999999a
 800b50c:	3fe99999 	.word	0x3fe99999

0800b510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b516:	2300      	movs	r3, #0
 800b518:	607b      	str	r3, [r7, #4]
 800b51a:	4b12      	ldr	r3, [pc, #72]	; (800b564 <HAL_MspInit+0x54>)
 800b51c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b51e:	4a11      	ldr	r2, [pc, #68]	; (800b564 <HAL_MspInit+0x54>)
 800b520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b524:	6453      	str	r3, [r2, #68]	; 0x44
 800b526:	4b0f      	ldr	r3, [pc, #60]	; (800b564 <HAL_MspInit+0x54>)
 800b528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b52a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b52e:	607b      	str	r3, [r7, #4]
 800b530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b532:	2300      	movs	r3, #0
 800b534:	603b      	str	r3, [r7, #0]
 800b536:	4b0b      	ldr	r3, [pc, #44]	; (800b564 <HAL_MspInit+0x54>)
 800b538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b53a:	4a0a      	ldr	r2, [pc, #40]	; (800b564 <HAL_MspInit+0x54>)
 800b53c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b540:	6413      	str	r3, [r2, #64]	; 0x40
 800b542:	4b08      	ldr	r3, [pc, #32]	; (800b564 <HAL_MspInit+0x54>)
 800b544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b54a:	603b      	str	r3, [r7, #0]
 800b54c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b54e:	2200      	movs	r2, #0
 800b550:	210f      	movs	r1, #15
 800b552:	f06f 0001 	mvn.w	r0, #1
 800b556:	f000 fc79 	bl	800be4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b55a:	bf00      	nop
 800b55c:	3708      	adds	r7, #8
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	40023800 	.word	0x40023800

0800b568 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b08c      	sub	sp, #48	; 0x30
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800b570:	2300      	movs	r3, #0
 800b572:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800b574:	2300      	movs	r3, #0
 800b576:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800b578:	2200      	movs	r2, #0
 800b57a:	6879      	ldr	r1, [r7, #4]
 800b57c:	2036      	movs	r0, #54	; 0x36
 800b57e:	f000 fc65 	bl	800be4c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b582:	2036      	movs	r0, #54	; 0x36
 800b584:	f000 fc7e 	bl	800be84 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b588:	2300      	movs	r3, #0
 800b58a:	60fb      	str	r3, [r7, #12]
 800b58c:	4b1f      	ldr	r3, [pc, #124]	; (800b60c <HAL_InitTick+0xa4>)
 800b58e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b590:	4a1e      	ldr	r2, [pc, #120]	; (800b60c <HAL_InitTick+0xa4>)
 800b592:	f043 0310 	orr.w	r3, r3, #16
 800b596:	6413      	str	r3, [r2, #64]	; 0x40
 800b598:	4b1c      	ldr	r3, [pc, #112]	; (800b60c <HAL_InitTick+0xa4>)
 800b59a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b59c:	f003 0310 	and.w	r3, r3, #16
 800b5a0:	60fb      	str	r3, [r7, #12]
 800b5a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b5a4:	f107 0210 	add.w	r2, r7, #16
 800b5a8:	f107 0314 	add.w	r3, r7, #20
 800b5ac:	4611      	mov	r1, r2
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f003 f812 	bl	800e5d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b5b4:	f002 ffe8 	bl	800e588 <HAL_RCC_GetPCLK1Freq>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	005b      	lsls	r3, r3, #1
 800b5bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c0:	4a13      	ldr	r2, [pc, #76]	; (800b610 <HAL_InitTick+0xa8>)
 800b5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5c6:	0c9b      	lsrs	r3, r3, #18
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b5cc:	4b11      	ldr	r3, [pc, #68]	; (800b614 <HAL_InitTick+0xac>)
 800b5ce:	4a12      	ldr	r2, [pc, #72]	; (800b618 <HAL_InitTick+0xb0>)
 800b5d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800b5d2:	4b10      	ldr	r3, [pc, #64]	; (800b614 <HAL_InitTick+0xac>)
 800b5d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b5d8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b5da:	4a0e      	ldr	r2, [pc, #56]	; (800b614 <HAL_InitTick+0xac>)
 800b5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5de:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b5e0:	4b0c      	ldr	r3, [pc, #48]	; (800b614 <HAL_InitTick+0xac>)
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b5e6:	4b0b      	ldr	r3, [pc, #44]	; (800b614 <HAL_InitTick+0xac>)
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800b5ec:	4809      	ldr	r0, [pc, #36]	; (800b614 <HAL_InitTick+0xac>)
 800b5ee:	f003 f825 	bl	800e63c <HAL_TIM_Base_Init>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d104      	bne.n	800b602 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800b5f8:	4806      	ldr	r0, [pc, #24]	; (800b614 <HAL_InitTick+0xac>)
 800b5fa:	f003 f86e 	bl	800e6da <HAL_TIM_Base_Start_IT>
 800b5fe:	4603      	mov	r3, r0
 800b600:	e000      	b.n	800b604 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800b602:	2301      	movs	r3, #1
}
 800b604:	4618      	mov	r0, r3
 800b606:	3730      	adds	r7, #48	; 0x30
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	40023800 	.word	0x40023800
 800b610:	431bde83 	.word	0x431bde83
 800b614:	20010d30 	.word	0x20010d30
 800b618:	40001000 	.word	0x40001000

0800b61c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b61c:	b480      	push	{r7}
 800b61e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b620:	bf00      	nop
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr
	...

0800b62c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800b630:	2162      	movs	r1, #98	; 0x62
 800b632:	4802      	ldr	r0, [pc, #8]	; (800b63c <HardFault_Handler+0x10>)
 800b634:	f7f6 ff40 	bl	80024b8 <LOG_REPORT>
 800b638:	e7fa      	b.n	800b630 <HardFault_Handler+0x4>
 800b63a:	bf00      	nop
 800b63c:	0801ca40 	.word	0x0801ca40

0800b640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800b644:	2172      	movs	r1, #114	; 0x72
 800b646:	4802      	ldr	r0, [pc, #8]	; (800b650 <MemManage_Handler+0x10>)
 800b648:	f7f6 ff36 	bl	80024b8 <LOG_REPORT>
 800b64c:	e7fa      	b.n	800b644 <MemManage_Handler+0x4>
 800b64e:	bf00      	nop
 800b650:	0801ca58 	.word	0x0801ca58

0800b654 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800b658:	2182      	movs	r1, #130	; 0x82
 800b65a:	4802      	ldr	r0, [pc, #8]	; (800b664 <BusFault_Handler+0x10>)
 800b65c:	f7f6 ff2c 	bl	80024b8 <LOG_REPORT>
 800b660:	e7fa      	b.n	800b658 <BusFault_Handler+0x4>
 800b662:	bf00      	nop
 800b664:	0801ca6c 	.word	0x0801ca6c

0800b668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b668:	b480      	push	{r7}
 800b66a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b66c:	e7fe      	b.n	800b66c <UsageFault_Handler+0x4>

0800b66e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b66e:	b480      	push	{r7}
 800b670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b672:	bf00      	nop
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr

0800b67c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800b680:	4802      	ldr	r0, [pc, #8]	; (800b68c <DMA1_Stream4_IRQHandler+0x10>)
 800b682:	f000 fd35 	bl	800c0f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800b686:	bf00      	nop
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	20010e30 	.word	0x20010e30

0800b690 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800b694:	4802      	ldr	r0, [pc, #8]	; (800b6a0 <UART4_IRQHandler+0x10>)
 800b696:	f003 fcbd 	bl	800f014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800b69a:	bf00      	nop
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	20010df0 	.word	0x20010df0

0800b6a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b6a8:	4802      	ldr	r0, [pc, #8]	; (800b6b4 <TIM6_DAC_IRQHandler+0x10>)
 800b6aa:	f003 f83a 	bl	800e722 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b6ae:	bf00      	nop
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	20010d30 	.word	0x20010d30

0800b6b8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800b6bc:	4b05      	ldr	r3, [pc, #20]	; (800b6d4 <TIM7_IRQHandler+0x1c>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2101      	movs	r1, #1
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f007 fbba 	bl	8012e3c <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800b6c8:	4803      	ldr	r0, [pc, #12]	; (800b6d8 <TIM7_IRQHandler+0x20>)
 800b6ca:	f003 f82a 	bl	800e722 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800b6ce:	bf00      	nop
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	2000fe64 	.word	0x2000fe64
 800b6d8:	20010db0 	.word	0x20010db0

0800b6dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b6e0:	4802      	ldr	r0, [pc, #8]	; (800b6ec <OTG_FS_IRQHandler+0x10>)
 800b6e2:	f001 fad9 	bl	800cc98 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b6e6:	bf00      	nop
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	2001176c 	.word	0x2001176c

0800b6f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	af00      	add	r7, sp, #0
	return 1;
 800b6f4:	2301      	movs	r3, #1
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr

0800b700 <_kill>:

int _kill(int pid, int sig)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b082      	sub	sp, #8
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b70a:	f00a fee7 	bl	80164dc <__errno>
 800b70e:	4603      	mov	r3, r0
 800b710:	2216      	movs	r2, #22
 800b712:	601a      	str	r2, [r3, #0]
	return -1;
 800b714:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <_exit>:

void _exit (int status)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b082      	sub	sp, #8
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b728:	f04f 31ff 	mov.w	r1, #4294967295
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f7ff ffe7 	bl	800b700 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b732:	e7fe      	b.n	800b732 <_exit+0x12>

0800b734 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b086      	sub	sp, #24
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b740:	2300      	movs	r3, #0
 800b742:	617b      	str	r3, [r7, #20]
 800b744:	e00a      	b.n	800b75c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b746:	f3af 8000 	nop.w
 800b74a:	4601      	mov	r1, r0
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	1c5a      	adds	r2, r3, #1
 800b750:	60ba      	str	r2, [r7, #8]
 800b752:	b2ca      	uxtb	r2, r1
 800b754:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	3301      	adds	r3, #1
 800b75a:	617b      	str	r3, [r7, #20]
 800b75c:	697a      	ldr	r2, [r7, #20]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	429a      	cmp	r2, r3
 800b762:	dbf0      	blt.n	800b746 <_read+0x12>
	}

return len;
 800b764:	687b      	ldr	r3, [r7, #4]
}
 800b766:	4618      	mov	r0, r3
 800b768:	3718      	adds	r7, #24
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}

0800b76e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b76e:	b580      	push	{r7, lr}
 800b770:	b086      	sub	sp, #24
 800b772:	af00      	add	r7, sp, #0
 800b774:	60f8      	str	r0, [r7, #12]
 800b776:	60b9      	str	r1, [r7, #8]
 800b778:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b77a:	2300      	movs	r3, #0
 800b77c:	617b      	str	r3, [r7, #20]
 800b77e:	e009      	b.n	800b794 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	1c5a      	adds	r2, r3, #1
 800b784:	60ba      	str	r2, [r7, #8]
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	4618      	mov	r0, r3
 800b78a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	3301      	adds	r3, #1
 800b792:	617b      	str	r3, [r7, #20]
 800b794:	697a      	ldr	r2, [r7, #20]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	429a      	cmp	r2, r3
 800b79a:	dbf1      	blt.n	800b780 <_write+0x12>
	}
	return len;
 800b79c:	687b      	ldr	r3, [r7, #4]
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3718      	adds	r7, #24
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <_close>:

int _close(int file)
{
 800b7a6:	b480      	push	{r7}
 800b7a8:	b083      	sub	sp, #12
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
	return -1;
 800b7ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	370c      	adds	r7, #12
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr

0800b7be <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b7be:	b480      	push	{r7}
 800b7c0:	b083      	sub	sp, #12
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b7ce:	605a      	str	r2, [r3, #4]
	return 0;
 800b7d0:	2300      	movs	r3, #0
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	370c      	adds	r7, #12
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr

0800b7de <_isatty>:

int _isatty(int file)
{
 800b7de:	b480      	push	{r7}
 800b7e0:	b083      	sub	sp, #12
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
	return 1;
 800b7e6:	2301      	movs	r3, #1
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr

0800b7f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b085      	sub	sp, #20
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	607a      	str	r2, [r7, #4]
	return 0;
 800b800:	2300      	movs	r3, #0
}
 800b802:	4618      	mov	r0, r3
 800b804:	3714      	adds	r7, #20
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr
	...

0800b810 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b818:	4b11      	ldr	r3, [pc, #68]	; (800b860 <_sbrk+0x50>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d102      	bne.n	800b826 <_sbrk+0x16>
		heap_end = &end;
 800b820:	4b0f      	ldr	r3, [pc, #60]	; (800b860 <_sbrk+0x50>)
 800b822:	4a10      	ldr	r2, [pc, #64]	; (800b864 <_sbrk+0x54>)
 800b824:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b826:	4b0e      	ldr	r3, [pc, #56]	; (800b860 <_sbrk+0x50>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b82c:	4b0c      	ldr	r3, [pc, #48]	; (800b860 <_sbrk+0x50>)
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4413      	add	r3, r2
 800b834:	466a      	mov	r2, sp
 800b836:	4293      	cmp	r3, r2
 800b838:	d907      	bls.n	800b84a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b83a:	f00a fe4f 	bl	80164dc <__errno>
 800b83e:	4603      	mov	r3, r0
 800b840:	220c      	movs	r2, #12
 800b842:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800b844:	f04f 33ff 	mov.w	r3, #4294967295
 800b848:	e006      	b.n	800b858 <_sbrk+0x48>
	}

	heap_end += incr;
 800b84a:	4b05      	ldr	r3, [pc, #20]	; (800b860 <_sbrk+0x50>)
 800b84c:	681a      	ldr	r2, [r3, #0]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	4413      	add	r3, r2
 800b852:	4a03      	ldr	r2, [pc, #12]	; (800b860 <_sbrk+0x50>)
 800b854:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b856:	68fb      	ldr	r3, [r7, #12]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	20004860 	.word	0x20004860
 800b864:	20011b88 	.word	0x20011b88

0800b868 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b868:	b480      	push	{r7}
 800b86a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b86c:	4b08      	ldr	r3, [pc, #32]	; (800b890 <SystemInit+0x28>)
 800b86e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b872:	4a07      	ldr	r2, [pc, #28]	; (800b890 <SystemInit+0x28>)
 800b874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b87c:	4b04      	ldr	r3, [pc, #16]	; (800b890 <SystemInit+0x28>)
 800b87e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b882:	609a      	str	r2, [r3, #8]
#endif
}
 800b884:	bf00      	nop
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop
 800b890:	e000ed00 	.word	0xe000ed00

0800b894 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b086      	sub	sp, #24
 800b898:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b89a:	f107 0308 	add.w	r3, r7, #8
 800b89e:	2200      	movs	r2, #0
 800b8a0:	601a      	str	r2, [r3, #0]
 800b8a2:	605a      	str	r2, [r3, #4]
 800b8a4:	609a      	str	r2, [r3, #8]
 800b8a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b8a8:	463b      	mov	r3, r7
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	601a      	str	r2, [r3, #0]
 800b8ae:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800b8b0:	4b1e      	ldr	r3, [pc, #120]	; (800b92c <MX_TIM2_Init+0x98>)
 800b8b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b8b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25000;
 800b8b8:	4b1c      	ldr	r3, [pc, #112]	; (800b92c <MX_TIM2_Init+0x98>)
 800b8ba:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800b8be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b8c0:	4b1a      	ldr	r3, [pc, #104]	; (800b92c <MX_TIM2_Init+0x98>)
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800b8c6:	4b19      	ldr	r3, [pc, #100]	; (800b92c <MX_TIM2_Init+0x98>)
 800b8c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b8ce:	4b17      	ldr	r3, [pc, #92]	; (800b92c <MX_TIM2_Init+0x98>)
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b8d4:	4b15      	ldr	r3, [pc, #84]	; (800b92c <MX_TIM2_Init+0x98>)
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b8da:	4814      	ldr	r0, [pc, #80]	; (800b92c <MX_TIM2_Init+0x98>)
 800b8dc:	f002 feae 	bl	800e63c <HAL_TIM_Base_Init>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d001      	beq.n	800b8ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800b8e6:	f7fa f9b1 	bl	8005c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b8ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b8f0:	f107 0308 	add.w	r3, r7, #8
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	480d      	ldr	r0, [pc, #52]	; (800b92c <MX_TIM2_Init+0x98>)
 800b8f8:	f003 f81b 	bl	800e932 <HAL_TIM_ConfigClockSource>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d001      	beq.n	800b906 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800b902:	f7fa f9a3 	bl	8005c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b906:	2300      	movs	r3, #0
 800b908:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b90a:	2300      	movs	r3, #0
 800b90c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b90e:	463b      	mov	r3, r7
 800b910:	4619      	mov	r1, r3
 800b912:	4806      	ldr	r0, [pc, #24]	; (800b92c <MX_TIM2_Init+0x98>)
 800b914:	f003 fa34 	bl	800ed80 <HAL_TIMEx_MasterConfigSynchronization>
 800b918:	4603      	mov	r3, r0
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d001      	beq.n	800b922 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800b91e:	f7fa f995 	bl	8005c4c <Error_Handler>
  }

}
 800b922:	bf00      	nop
 800b924:	3718      	adds	r7, #24
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	20010d70 	.word	0x20010d70

0800b930 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b936:	463b      	mov	r3, r7
 800b938:	2200      	movs	r2, #0
 800b93a:	601a      	str	r2, [r3, #0]
 800b93c:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800b93e:	4b15      	ldr	r3, [pc, #84]	; (800b994 <MX_TIM7_Init+0x64>)
 800b940:	4a15      	ldr	r2, [pc, #84]	; (800b998 <MX_TIM7_Init+0x68>)
 800b942:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800b944:	4b13      	ldr	r3, [pc, #76]	; (800b994 <MX_TIM7_Init+0x64>)
 800b946:	2253      	movs	r2, #83	; 0x53
 800b948:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b94a:	4b12      	ldr	r3, [pc, #72]	; (800b994 <MX_TIM7_Init+0x64>)
 800b94c:	2200      	movs	r2, #0
 800b94e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800b950:	4b10      	ldr	r3, [pc, #64]	; (800b994 <MX_TIM7_Init+0x64>)
 800b952:	f242 720f 	movw	r2, #9999	; 0x270f
 800b956:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b958:	4b0e      	ldr	r3, [pc, #56]	; (800b994 <MX_TIM7_Init+0x64>)
 800b95a:	2200      	movs	r2, #0
 800b95c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b95e:	480d      	ldr	r0, [pc, #52]	; (800b994 <MX_TIM7_Init+0x64>)
 800b960:	f002 fe6c 	bl	800e63c <HAL_TIM_Base_Init>
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d001      	beq.n	800b96e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800b96a:	f7fa f96f 	bl	8005c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b96e:	2300      	movs	r3, #0
 800b970:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b972:	2300      	movs	r3, #0
 800b974:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b976:	463b      	mov	r3, r7
 800b978:	4619      	mov	r1, r3
 800b97a:	4806      	ldr	r0, [pc, #24]	; (800b994 <MX_TIM7_Init+0x64>)
 800b97c:	f003 fa00 	bl	800ed80 <HAL_TIMEx_MasterConfigSynchronization>
 800b980:	4603      	mov	r3, r0
 800b982:	2b00      	cmp	r3, #0
 800b984:	d001      	beq.n	800b98a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800b986:	f7fa f961 	bl	8005c4c <Error_Handler>
  }

}
 800b98a:	bf00      	nop
 800b98c:	3708      	adds	r7, #8
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	20010db0 	.word	0x20010db0
 800b998:	40001400 	.word	0x40001400

0800b99c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b084      	sub	sp, #16
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9ac:	d10e      	bne.n	800b9cc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	60fb      	str	r3, [r7, #12]
 800b9b2:	4b16      	ldr	r3, [pc, #88]	; (800ba0c <HAL_TIM_Base_MspInit+0x70>)
 800b9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b6:	4a15      	ldr	r2, [pc, #84]	; (800ba0c <HAL_TIM_Base_MspInit+0x70>)
 800b9b8:	f043 0301 	orr.w	r3, r3, #1
 800b9bc:	6413      	str	r3, [r2, #64]	; 0x40
 800b9be:	4b13      	ldr	r3, [pc, #76]	; (800ba0c <HAL_TIM_Base_MspInit+0x70>)
 800b9c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9c2:	f003 0301 	and.w	r3, r3, #1
 800b9c6:	60fb      	str	r3, [r7, #12]
 800b9c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800b9ca:	e01a      	b.n	800ba02 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a0f      	ldr	r2, [pc, #60]	; (800ba10 <HAL_TIM_Base_MspInit+0x74>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d115      	bne.n	800ba02 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	60bb      	str	r3, [r7, #8]
 800b9da:	4b0c      	ldr	r3, [pc, #48]	; (800ba0c <HAL_TIM_Base_MspInit+0x70>)
 800b9dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9de:	4a0b      	ldr	r2, [pc, #44]	; (800ba0c <HAL_TIM_Base_MspInit+0x70>)
 800b9e0:	f043 0320 	orr.w	r3, r3, #32
 800b9e4:	6413      	str	r3, [r2, #64]	; 0x40
 800b9e6:	4b09      	ldr	r3, [pc, #36]	; (800ba0c <HAL_TIM_Base_MspInit+0x70>)
 800b9e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ea:	f003 0320 	and.w	r3, r3, #32
 800b9ee:	60bb      	str	r3, [r7, #8]
 800b9f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	2105      	movs	r1, #5
 800b9f6:	2037      	movs	r0, #55	; 0x37
 800b9f8:	f000 fa28 	bl	800be4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b9fc:	2037      	movs	r0, #55	; 0x37
 800b9fe:	f000 fa41 	bl	800be84 <HAL_NVIC_EnableIRQ>
}
 800ba02:	bf00      	nop
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	40023800 	.word	0x40023800
 800ba10:	40001400 	.word	0x40001400

0800ba14 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800ba18:	4b11      	ldr	r3, [pc, #68]	; (800ba60 <MX_UART4_Init+0x4c>)
 800ba1a:	4a12      	ldr	r2, [pc, #72]	; (800ba64 <MX_UART4_Init+0x50>)
 800ba1c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800ba1e:	4b10      	ldr	r3, [pc, #64]	; (800ba60 <MX_UART4_Init+0x4c>)
 800ba20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ba24:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800ba26:	4b0e      	ldr	r3, [pc, #56]	; (800ba60 <MX_UART4_Init+0x4c>)
 800ba28:	2200      	movs	r2, #0
 800ba2a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800ba2c:	4b0c      	ldr	r3, [pc, #48]	; (800ba60 <MX_UART4_Init+0x4c>)
 800ba2e:	2200      	movs	r2, #0
 800ba30:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800ba32:	4b0b      	ldr	r3, [pc, #44]	; (800ba60 <MX_UART4_Init+0x4c>)
 800ba34:	2200      	movs	r2, #0
 800ba36:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800ba38:	4b09      	ldr	r3, [pc, #36]	; (800ba60 <MX_UART4_Init+0x4c>)
 800ba3a:	220c      	movs	r2, #12
 800ba3c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ba3e:	4b08      	ldr	r3, [pc, #32]	; (800ba60 <MX_UART4_Init+0x4c>)
 800ba40:	2200      	movs	r2, #0
 800ba42:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800ba44:	4b06      	ldr	r3, [pc, #24]	; (800ba60 <MX_UART4_Init+0x4c>)
 800ba46:	2200      	movs	r2, #0
 800ba48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800ba4a:	4805      	ldr	r0, [pc, #20]	; (800ba60 <MX_UART4_Init+0x4c>)
 800ba4c:	f003 fa28 	bl	800eea0 <HAL_UART_Init>
 800ba50:	4603      	mov	r3, r0
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d001      	beq.n	800ba5a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800ba56:	f7fa f8f9 	bl	8005c4c <Error_Handler>
  }

}
 800ba5a:	bf00      	nop
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	20010df0 	.word	0x20010df0
 800ba64:	40004c00 	.word	0x40004c00

0800ba68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b08a      	sub	sp, #40	; 0x28
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba70:	f107 0314 	add.w	r3, r7, #20
 800ba74:	2200      	movs	r2, #0
 800ba76:	601a      	str	r2, [r3, #0]
 800ba78:	605a      	str	r2, [r3, #4]
 800ba7a:	609a      	str	r2, [r3, #8]
 800ba7c:	60da      	str	r2, [r3, #12]
 800ba7e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a34      	ldr	r2, [pc, #208]	; (800bb58 <HAL_UART_MspInit+0xf0>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d161      	bne.n	800bb4e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	613b      	str	r3, [r7, #16]
 800ba8e:	4b33      	ldr	r3, [pc, #204]	; (800bb5c <HAL_UART_MspInit+0xf4>)
 800ba90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba92:	4a32      	ldr	r2, [pc, #200]	; (800bb5c <HAL_UART_MspInit+0xf4>)
 800ba94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba98:	6413      	str	r3, [r2, #64]	; 0x40
 800ba9a:	4b30      	ldr	r3, [pc, #192]	; (800bb5c <HAL_UART_MspInit+0xf4>)
 800ba9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800baa2:	613b      	str	r3, [r7, #16]
 800baa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800baa6:	2300      	movs	r3, #0
 800baa8:	60fb      	str	r3, [r7, #12]
 800baaa:	4b2c      	ldr	r3, [pc, #176]	; (800bb5c <HAL_UART_MspInit+0xf4>)
 800baac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baae:	4a2b      	ldr	r2, [pc, #172]	; (800bb5c <HAL_UART_MspInit+0xf4>)
 800bab0:	f043 0301 	orr.w	r3, r3, #1
 800bab4:	6313      	str	r3, [r2, #48]	; 0x30
 800bab6:	4b29      	ldr	r3, [pc, #164]	; (800bb5c <HAL_UART_MspInit+0xf4>)
 800bab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baba:	f003 0301 	and.w	r3, r3, #1
 800babe:	60fb      	str	r3, [r7, #12]
 800bac0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800bac2:	2303      	movs	r3, #3
 800bac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bac6:	2302      	movs	r3, #2
 800bac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800baca:	2301      	movs	r3, #1
 800bacc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bace:	2303      	movs	r3, #3
 800bad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800bad2:	2308      	movs	r3, #8
 800bad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bad6:	f107 0314 	add.w	r3, r7, #20
 800bada:	4619      	mov	r1, r3
 800badc:	4820      	ldr	r0, [pc, #128]	; (800bb60 <HAL_UART_MspInit+0xf8>)
 800bade:	f000 fd7f 	bl	800c5e0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800bae2:	4b20      	ldr	r3, [pc, #128]	; (800bb64 <HAL_UART_MspInit+0xfc>)
 800bae4:	4a20      	ldr	r2, [pc, #128]	; (800bb68 <HAL_UART_MspInit+0x100>)
 800bae6:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800bae8:	4b1e      	ldr	r3, [pc, #120]	; (800bb64 <HAL_UART_MspInit+0xfc>)
 800baea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800baee:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800baf0:	4b1c      	ldr	r3, [pc, #112]	; (800bb64 <HAL_UART_MspInit+0xfc>)
 800baf2:	2240      	movs	r2, #64	; 0x40
 800baf4:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800baf6:	4b1b      	ldr	r3, [pc, #108]	; (800bb64 <HAL_UART_MspInit+0xfc>)
 800baf8:	2200      	movs	r2, #0
 800bafa:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800bafc:	4b19      	ldr	r3, [pc, #100]	; (800bb64 <HAL_UART_MspInit+0xfc>)
 800bafe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bb02:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bb04:	4b17      	ldr	r3, [pc, #92]	; (800bb64 <HAL_UART_MspInit+0xfc>)
 800bb06:	2200      	movs	r2, #0
 800bb08:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bb0a:	4b16      	ldr	r3, [pc, #88]	; (800bb64 <HAL_UART_MspInit+0xfc>)
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800bb10:	4b14      	ldr	r3, [pc, #80]	; (800bb64 <HAL_UART_MspInit+0xfc>)
 800bb12:	2200      	movs	r2, #0
 800bb14:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800bb16:	4b13      	ldr	r3, [pc, #76]	; (800bb64 <HAL_UART_MspInit+0xfc>)
 800bb18:	2200      	movs	r2, #0
 800bb1a:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800bb1c:	4b11      	ldr	r3, [pc, #68]	; (800bb64 <HAL_UART_MspInit+0xfc>)
 800bb1e:	2200      	movs	r2, #0
 800bb20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800bb22:	4810      	ldr	r0, [pc, #64]	; (800bb64 <HAL_UART_MspInit+0xfc>)
 800bb24:	f000 f9bc 	bl	800bea0 <HAL_DMA_Init>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d001      	beq.n	800bb32 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800bb2e:	f7fa f88d 	bl	8005c4c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	4a0b      	ldr	r2, [pc, #44]	; (800bb64 <HAL_UART_MspInit+0xfc>)
 800bb36:	631a      	str	r2, [r3, #48]	; 0x30
 800bb38:	4a0a      	ldr	r2, [pc, #40]	; (800bb64 <HAL_UART_MspInit+0xfc>)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800bb3e:	2200      	movs	r2, #0
 800bb40:	2105      	movs	r1, #5
 800bb42:	2034      	movs	r0, #52	; 0x34
 800bb44:	f000 f982 	bl	800be4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800bb48:	2034      	movs	r0, #52	; 0x34
 800bb4a:	f000 f99b 	bl	800be84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800bb4e:	bf00      	nop
 800bb50:	3728      	adds	r7, #40	; 0x28
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	40004c00 	.word	0x40004c00
 800bb5c:	40023800 	.word	0x40023800
 800bb60:	40020000 	.word	0x40020000
 800bb64:	20010e30 	.word	0x20010e30
 800bb68:	40026070 	.word	0x40026070

0800bb6c <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b084      	sub	sp, #16
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a0c      	ldr	r2, [pc, #48]	; (800bbac <HAL_UART_TxCpltCallback+0x40>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d112      	bne.n	800bba4 <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800bb7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bb82:	490b      	ldr	r1, [pc, #44]	; (800bbb0 <HAL_UART_TxCpltCallback+0x44>)
 800bb84:	480b      	ldr	r0, [pc, #44]	; (800bbb4 <HAL_UART_TxCpltCallback+0x48>)
 800bb86:	f7fa f91b 	bl	8005dc0 <ringBuff_PopArray>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800bb8e:	89fb      	ldrh	r3, [r7, #14]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d006      	beq.n	800bba2 <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800bb94:	89fb      	ldrh	r3, [r7, #14]
 800bb96:	461a      	mov	r2, r3
 800bb98:	4905      	ldr	r1, [pc, #20]	; (800bbb0 <HAL_UART_TxCpltCallback+0x44>)
 800bb9a:	4807      	ldr	r0, [pc, #28]	; (800bbb8 <HAL_UART_TxCpltCallback+0x4c>)
 800bb9c:	f003 f9ce 	bl	800ef3c <HAL_UART_Transmit_DMA>
 800bba0:	e000      	b.n	800bba4 <HAL_UART_TxCpltCallback+0x38>
			return;
 800bba2:	bf00      	nop
	}
}
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	40004c00 	.word	0x40004c00
 800bbb0:	2000fd60 	.word	0x2000fd60
 800bbb4:	20002074 	.word	0x20002074
 800bbb8:	20010df0 	.word	0x20010df0

0800bbbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800bbbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bbf4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800bbc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800bbc2:	e003      	b.n	800bbcc <LoopCopyDataInit>

0800bbc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800bbc4:	4b0c      	ldr	r3, [pc, #48]	; (800bbf8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800bbc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800bbc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800bbca:	3104      	adds	r1, #4

0800bbcc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800bbcc:	480b      	ldr	r0, [pc, #44]	; (800bbfc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800bbce:	4b0c      	ldr	r3, [pc, #48]	; (800bc00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800bbd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800bbd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800bbd4:	d3f6      	bcc.n	800bbc4 <CopyDataInit>
  ldr  r2, =_sbss
 800bbd6:	4a0b      	ldr	r2, [pc, #44]	; (800bc04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800bbd8:	e002      	b.n	800bbe0 <LoopFillZerobss>

0800bbda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800bbda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800bbdc:	f842 3b04 	str.w	r3, [r2], #4

0800bbe0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800bbe0:	4b09      	ldr	r3, [pc, #36]	; (800bc08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800bbe2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800bbe4:	d3f9      	bcc.n	800bbda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800bbe6:	f7ff fe3f 	bl	800b868 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bbea:	f00a fc7d 	bl	80164e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bbee:	f7f9 ff81 	bl	8005af4 <main>
  bx  lr    
 800bbf2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800bbf4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800bbf8:	0801d200 	.word	0x0801d200
  ldr  r0, =_sdata
 800bbfc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800bc00:	200043e8 	.word	0x200043e8
  ldr  r2, =_sbss
 800bc04:	200043e8 	.word	0x200043e8
  ldr  r3, = _ebss
 800bc08:	20011b84 	.word	0x20011b84

0800bc0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bc0c:	e7fe      	b.n	800bc0c <ADC_IRQHandler>
	...

0800bc10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800bc14:	4b0e      	ldr	r3, [pc, #56]	; (800bc50 <HAL_Init+0x40>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4a0d      	ldr	r2, [pc, #52]	; (800bc50 <HAL_Init+0x40>)
 800bc1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bc1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800bc20:	4b0b      	ldr	r3, [pc, #44]	; (800bc50 <HAL_Init+0x40>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4a0a      	ldr	r2, [pc, #40]	; (800bc50 <HAL_Init+0x40>)
 800bc26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bc2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800bc2c:	4b08      	ldr	r3, [pc, #32]	; (800bc50 <HAL_Init+0x40>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4a07      	ldr	r2, [pc, #28]	; (800bc50 <HAL_Init+0x40>)
 800bc32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bc38:	2003      	movs	r0, #3
 800bc3a:	f000 f8fc 	bl	800be36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800bc3e:	2000      	movs	r0, #0
 800bc40:	f7ff fc92 	bl	800b568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800bc44:	f7ff fc64 	bl	800b510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bc48:	2300      	movs	r3, #0
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	40023c00 	.word	0x40023c00

0800bc54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bc54:	b480      	push	{r7}
 800bc56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bc58:	4b06      	ldr	r3, [pc, #24]	; (800bc74 <HAL_IncTick+0x20>)
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	4b06      	ldr	r3, [pc, #24]	; (800bc78 <HAL_IncTick+0x24>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4413      	add	r3, r2
 800bc64:	4a04      	ldr	r2, [pc, #16]	; (800bc78 <HAL_IncTick+0x24>)
 800bc66:	6013      	str	r3, [r2, #0]
}
 800bc68:	bf00      	nop
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	20004094 	.word	0x20004094
 800bc78:	20010e90 	.word	0x20010e90

0800bc7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	af00      	add	r7, sp, #0
  return uwTick;
 800bc80:	4b03      	ldr	r3, [pc, #12]	; (800bc90 <HAL_GetTick+0x14>)
 800bc82:	681b      	ldr	r3, [r3, #0]
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr
 800bc8e:	bf00      	nop
 800bc90:	20010e90 	.word	0x20010e90

0800bc94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bc9c:	f7ff ffee 	bl	800bc7c <HAL_GetTick>
 800bca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcac:	d005      	beq.n	800bcba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bcae:	4b0a      	ldr	r3, [pc, #40]	; (800bcd8 <HAL_Delay+0x44>)
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	4413      	add	r3, r2
 800bcb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800bcba:	bf00      	nop
 800bcbc:	f7ff ffde 	bl	800bc7c <HAL_GetTick>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	1ad3      	subs	r3, r2, r3
 800bcc6:	68fa      	ldr	r2, [r7, #12]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d8f7      	bhi.n	800bcbc <HAL_Delay+0x28>
  {
  }
}
 800bccc:	bf00      	nop
 800bcce:	bf00      	nop
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	20004094 	.word	0x20004094

0800bcdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b085      	sub	sp, #20
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f003 0307 	and.w	r3, r3, #7
 800bcea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bcec:	4b0c      	ldr	r3, [pc, #48]	; (800bd20 <__NVIC_SetPriorityGrouping+0x44>)
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bcf8:	4013      	ands	r3, r2
 800bcfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bd04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800bd08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bd0e:	4a04      	ldr	r2, [pc, #16]	; (800bd20 <__NVIC_SetPriorityGrouping+0x44>)
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	60d3      	str	r3, [r2, #12]
}
 800bd14:	bf00      	nop
 800bd16:	3714      	adds	r7, #20
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr
 800bd20:	e000ed00 	.word	0xe000ed00

0800bd24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bd24:	b480      	push	{r7}
 800bd26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bd28:	4b04      	ldr	r3, [pc, #16]	; (800bd3c <__NVIC_GetPriorityGrouping+0x18>)
 800bd2a:	68db      	ldr	r3, [r3, #12]
 800bd2c:	0a1b      	lsrs	r3, r3, #8
 800bd2e:	f003 0307 	and.w	r3, r3, #7
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr
 800bd3c:	e000ed00 	.word	0xe000ed00

0800bd40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b083      	sub	sp, #12
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	4603      	mov	r3, r0
 800bd48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bd4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	db0b      	blt.n	800bd6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bd52:	79fb      	ldrb	r3, [r7, #7]
 800bd54:	f003 021f 	and.w	r2, r3, #31
 800bd58:	4907      	ldr	r1, [pc, #28]	; (800bd78 <__NVIC_EnableIRQ+0x38>)
 800bd5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd5e:	095b      	lsrs	r3, r3, #5
 800bd60:	2001      	movs	r0, #1
 800bd62:	fa00 f202 	lsl.w	r2, r0, r2
 800bd66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800bd6a:	bf00      	nop
 800bd6c:	370c      	adds	r7, #12
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr
 800bd76:	bf00      	nop
 800bd78:	e000e100 	.word	0xe000e100

0800bd7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	4603      	mov	r3, r0
 800bd84:	6039      	str	r1, [r7, #0]
 800bd86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bd88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	db0a      	blt.n	800bda6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	b2da      	uxtb	r2, r3
 800bd94:	490c      	ldr	r1, [pc, #48]	; (800bdc8 <__NVIC_SetPriority+0x4c>)
 800bd96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd9a:	0112      	lsls	r2, r2, #4
 800bd9c:	b2d2      	uxtb	r2, r2
 800bd9e:	440b      	add	r3, r1
 800bda0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800bda4:	e00a      	b.n	800bdbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	b2da      	uxtb	r2, r3
 800bdaa:	4908      	ldr	r1, [pc, #32]	; (800bdcc <__NVIC_SetPriority+0x50>)
 800bdac:	79fb      	ldrb	r3, [r7, #7]
 800bdae:	f003 030f 	and.w	r3, r3, #15
 800bdb2:	3b04      	subs	r3, #4
 800bdb4:	0112      	lsls	r2, r2, #4
 800bdb6:	b2d2      	uxtb	r2, r2
 800bdb8:	440b      	add	r3, r1
 800bdba:	761a      	strb	r2, [r3, #24]
}
 800bdbc:	bf00      	nop
 800bdbe:	370c      	adds	r7, #12
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr
 800bdc8:	e000e100 	.word	0xe000e100
 800bdcc:	e000ed00 	.word	0xe000ed00

0800bdd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b089      	sub	sp, #36	; 0x24
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f003 0307 	and.w	r3, r3, #7
 800bde2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bde4:	69fb      	ldr	r3, [r7, #28]
 800bde6:	f1c3 0307 	rsb	r3, r3, #7
 800bdea:	2b04      	cmp	r3, #4
 800bdec:	bf28      	it	cs
 800bdee:	2304      	movcs	r3, #4
 800bdf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bdf2:	69fb      	ldr	r3, [r7, #28]
 800bdf4:	3304      	adds	r3, #4
 800bdf6:	2b06      	cmp	r3, #6
 800bdf8:	d902      	bls.n	800be00 <NVIC_EncodePriority+0x30>
 800bdfa:	69fb      	ldr	r3, [r7, #28]
 800bdfc:	3b03      	subs	r3, #3
 800bdfe:	e000      	b.n	800be02 <NVIC_EncodePriority+0x32>
 800be00:	2300      	movs	r3, #0
 800be02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800be04:	f04f 32ff 	mov.w	r2, #4294967295
 800be08:	69bb      	ldr	r3, [r7, #24]
 800be0a:	fa02 f303 	lsl.w	r3, r2, r3
 800be0e:	43da      	mvns	r2, r3
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	401a      	ands	r2, r3
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800be18:	f04f 31ff 	mov.w	r1, #4294967295
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	fa01 f303 	lsl.w	r3, r1, r3
 800be22:	43d9      	mvns	r1, r3
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800be28:	4313      	orrs	r3, r2
         );
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3724      	adds	r7, #36	; 0x24
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr

0800be36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b082      	sub	sp, #8
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f7ff ff4c 	bl	800bcdc <__NVIC_SetPriorityGrouping>
}
 800be44:	bf00      	nop
 800be46:	3708      	adds	r7, #8
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b086      	sub	sp, #24
 800be50:	af00      	add	r7, sp, #0
 800be52:	4603      	mov	r3, r0
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	607a      	str	r2, [r7, #4]
 800be58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800be5a:	2300      	movs	r3, #0
 800be5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800be5e:	f7ff ff61 	bl	800bd24 <__NVIC_GetPriorityGrouping>
 800be62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	68b9      	ldr	r1, [r7, #8]
 800be68:	6978      	ldr	r0, [r7, #20]
 800be6a:	f7ff ffb1 	bl	800bdd0 <NVIC_EncodePriority>
 800be6e:	4602      	mov	r2, r0
 800be70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be74:	4611      	mov	r1, r2
 800be76:	4618      	mov	r0, r3
 800be78:	f7ff ff80 	bl	800bd7c <__NVIC_SetPriority>
}
 800be7c:	bf00      	nop
 800be7e:	3718      	adds	r7, #24
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	4603      	mov	r3, r0
 800be8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800be8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be92:	4618      	mov	r0, r3
 800be94:	f7ff ff54 	bl	800bd40 <__NVIC_EnableIRQ>
}
 800be98:	bf00      	nop
 800be9a:	3708      	adds	r7, #8
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b086      	sub	sp, #24
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800bea8:	2300      	movs	r3, #0
 800beaa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800beac:	f7ff fee6 	bl	800bc7c <HAL_GetTick>
 800beb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d101      	bne.n	800bebc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800beb8:	2301      	movs	r3, #1
 800beba:	e099      	b.n	800bff0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2200      	movs	r2, #0
 800bec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2202      	movs	r2, #2
 800bec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	681a      	ldr	r2, [r3, #0]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f022 0201 	bic.w	r2, r2, #1
 800beda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bedc:	e00f      	b.n	800befe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bede:	f7ff fecd 	bl	800bc7c <HAL_GetTick>
 800bee2:	4602      	mov	r2, r0
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	1ad3      	subs	r3, r2, r3
 800bee8:	2b05      	cmp	r3, #5
 800beea:	d908      	bls.n	800befe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2220      	movs	r2, #32
 800bef0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2203      	movs	r2, #3
 800bef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800befa:	2303      	movs	r3, #3
 800befc:	e078      	b.n	800bff0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f003 0301 	and.w	r3, r3, #1
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d1e8      	bne.n	800bede <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800bf14:	697a      	ldr	r2, [r7, #20]
 800bf16:	4b38      	ldr	r3, [pc, #224]	; (800bff8 <HAL_DMA_Init+0x158>)
 800bf18:	4013      	ands	r3, r2
 800bf1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	685a      	ldr	r2, [r3, #4]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	689b      	ldr	r3, [r3, #8]
 800bf24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bf2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	691b      	ldr	r3, [r3, #16]
 800bf30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bf36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	699b      	ldr	r3, [r3, #24]
 800bf3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bf42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6a1b      	ldr	r3, [r3, #32]
 800bf48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bf4a:	697a      	ldr	r2, [r7, #20]
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf54:	2b04      	cmp	r3, #4
 800bf56:	d107      	bne.n	800bf68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf60:	4313      	orrs	r3, r2
 800bf62:	697a      	ldr	r2, [r7, #20]
 800bf64:	4313      	orrs	r3, r2
 800bf66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	697a      	ldr	r2, [r7, #20]
 800bf6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	695b      	ldr	r3, [r3, #20]
 800bf76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	f023 0307 	bic.w	r3, r3, #7
 800bf7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf84:	697a      	ldr	r2, [r7, #20]
 800bf86:	4313      	orrs	r3, r2
 800bf88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf8e:	2b04      	cmp	r3, #4
 800bf90:	d117      	bne.n	800bfc2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf96:	697a      	ldr	r2, [r7, #20]
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d00e      	beq.n	800bfc2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 fa9f 	bl	800c4e8 <DMA_CheckFifoParam>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d008      	beq.n	800bfc2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2240      	movs	r2, #64	; 0x40
 800bfb4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	e016      	b.n	800bff0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	697a      	ldr	r2, [r7, #20]
 800bfc8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 fa56 	bl	800c47c <DMA_CalcBaseAndBitshift>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfd8:	223f      	movs	r2, #63	; 0x3f
 800bfda:	409a      	lsls	r2, r3
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2201      	movs	r2, #1
 800bfea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800bfee:	2300      	movs	r3, #0
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3718      	adds	r7, #24
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	f010803f 	.word	0xf010803f

0800bffc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b086      	sub	sp, #24
 800c000:	af00      	add	r7, sp, #0
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	60b9      	str	r1, [r7, #8]
 800c006:	607a      	str	r2, [r7, #4]
 800c008:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c00a:	2300      	movs	r3, #0
 800c00c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c012:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d101      	bne.n	800c022 <HAL_DMA_Start_IT+0x26>
 800c01e:	2302      	movs	r3, #2
 800c020:	e040      	b.n	800c0a4 <HAL_DMA_Start_IT+0xa8>
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2201      	movs	r2, #1
 800c026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c030:	b2db      	uxtb	r3, r3
 800c032:	2b01      	cmp	r3, #1
 800c034:	d12f      	bne.n	800c096 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2202      	movs	r2, #2
 800c03a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2200      	movs	r2, #0
 800c042:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	68b9      	ldr	r1, [r7, #8]
 800c04a:	68f8      	ldr	r0, [r7, #12]
 800c04c:	f000 f9e8 	bl	800c420 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c054:	223f      	movs	r2, #63	; 0x3f
 800c056:	409a      	lsls	r2, r3
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	681a      	ldr	r2, [r3, #0]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f042 0216 	orr.w	r2, r2, #22
 800c06a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c070:	2b00      	cmp	r3, #0
 800c072:	d007      	beq.n	800c084 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f042 0208 	orr.w	r2, r2, #8
 800c082:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f042 0201 	orr.w	r2, r2, #1
 800c092:	601a      	str	r2, [r3, #0]
 800c094:	e005      	b.n	800c0a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2200      	movs	r2, #0
 800c09a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c09e:	2302      	movs	r3, #2
 800c0a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c0a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3718      	adds	r7, #24
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c0ba:	b2db      	uxtb	r3, r3
 800c0bc:	2b02      	cmp	r3, #2
 800c0be:	d004      	beq.n	800c0ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2280      	movs	r2, #128	; 0x80
 800c0c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	e00c      	b.n	800c0e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2205      	movs	r2, #5
 800c0ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	681a      	ldr	r2, [r3, #0]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f022 0201 	bic.w	r2, r2, #1
 800c0e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c0e2:	2300      	movs	r3, #0
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	370c      	adds	r7, #12
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr

0800c0f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b086      	sub	sp, #24
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c0fc:	4b92      	ldr	r3, [pc, #584]	; (800c348 <HAL_DMA_IRQHandler+0x258>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4a92      	ldr	r2, [pc, #584]	; (800c34c <HAL_DMA_IRQHandler+0x25c>)
 800c102:	fba2 2303 	umull	r2, r3, r2, r3
 800c106:	0a9b      	lsrs	r3, r3, #10
 800c108:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c10e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c11a:	2208      	movs	r2, #8
 800c11c:	409a      	lsls	r2, r3
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	4013      	ands	r3, r2
 800c122:	2b00      	cmp	r3, #0
 800c124:	d01a      	beq.n	800c15c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f003 0304 	and.w	r3, r3, #4
 800c130:	2b00      	cmp	r3, #0
 800c132:	d013      	beq.n	800c15c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f022 0204 	bic.w	r2, r2, #4
 800c142:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c148:	2208      	movs	r2, #8
 800c14a:	409a      	lsls	r2, r3
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c154:	f043 0201 	orr.w	r2, r3, #1
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c160:	2201      	movs	r2, #1
 800c162:	409a      	lsls	r2, r3
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	4013      	ands	r3, r2
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d012      	beq.n	800c192 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	695b      	ldr	r3, [r3, #20]
 800c172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c176:	2b00      	cmp	r3, #0
 800c178:	d00b      	beq.n	800c192 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c17e:	2201      	movs	r2, #1
 800c180:	409a      	lsls	r2, r3
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c18a:	f043 0202 	orr.w	r2, r3, #2
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c196:	2204      	movs	r2, #4
 800c198:	409a      	lsls	r2, r3
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	4013      	ands	r3, r2
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d012      	beq.n	800c1c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f003 0302 	and.w	r3, r3, #2
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d00b      	beq.n	800c1c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1b4:	2204      	movs	r2, #4
 800c1b6:	409a      	lsls	r2, r3
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1c0:	f043 0204 	orr.w	r2, r3, #4
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1cc:	2210      	movs	r2, #16
 800c1ce:	409a      	lsls	r2, r3
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	4013      	ands	r3, r2
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d043      	beq.n	800c260 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f003 0308 	and.w	r3, r3, #8
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d03c      	beq.n	800c260 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1ea:	2210      	movs	r2, #16
 800c1ec:	409a      	lsls	r2, r3
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d018      	beq.n	800c232 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d108      	bne.n	800c220 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c212:	2b00      	cmp	r3, #0
 800c214:	d024      	beq.n	800c260 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	4798      	blx	r3
 800c21e:	e01f      	b.n	800c260 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c224:	2b00      	cmp	r3, #0
 800c226:	d01b      	beq.n	800c260 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	4798      	blx	r3
 800c230:	e016      	b.n	800c260 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d107      	bne.n	800c250 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	681a      	ldr	r2, [r3, #0]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f022 0208 	bic.w	r2, r2, #8
 800c24e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c254:	2b00      	cmp	r3, #0
 800c256:	d003      	beq.n	800c260 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c264:	2220      	movs	r2, #32
 800c266:	409a      	lsls	r2, r3
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	4013      	ands	r3, r2
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	f000 808e 	beq.w	800c38e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f003 0310 	and.w	r3, r3, #16
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	f000 8086 	beq.w	800c38e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c286:	2220      	movs	r2, #32
 800c288:	409a      	lsls	r2, r3
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c294:	b2db      	uxtb	r3, r3
 800c296:	2b05      	cmp	r3, #5
 800c298:	d136      	bne.n	800c308 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f022 0216 	bic.w	r2, r2, #22
 800c2a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	695a      	ldr	r2, [r3, #20]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c2b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d103      	bne.n	800c2ca <HAL_DMA_IRQHandler+0x1da>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d007      	beq.n	800c2da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	681a      	ldr	r2, [r3, #0]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f022 0208 	bic.w	r2, r2, #8
 800c2d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2de:	223f      	movs	r2, #63	; 0x3f
 800c2e0:	409a      	lsls	r2, r3
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d07d      	beq.n	800c3fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	4798      	blx	r3
        }
        return;
 800c306:	e078      	b.n	800c3fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c312:	2b00      	cmp	r3, #0
 800c314:	d01c      	beq.n	800c350 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c320:	2b00      	cmp	r3, #0
 800c322:	d108      	bne.n	800c336 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d030      	beq.n	800c38e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	4798      	blx	r3
 800c334:	e02b      	b.n	800c38e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d027      	beq.n	800c38e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	4798      	blx	r3
 800c346:	e022      	b.n	800c38e <HAL_DMA_IRQHandler+0x29e>
 800c348:	2000408c 	.word	0x2000408c
 800c34c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d10f      	bne.n	800c37e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f022 0210 	bic.w	r2, r2, #16
 800c36c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2200      	movs	r2, #0
 800c372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2201      	movs	r2, #1
 800c37a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c382:	2b00      	cmp	r3, #0
 800c384:	d003      	beq.n	800c38e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c392:	2b00      	cmp	r3, #0
 800c394:	d032      	beq.n	800c3fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c39a:	f003 0301 	and.w	r3, r3, #1
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d022      	beq.n	800c3e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2205      	movs	r2, #5
 800c3a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	681a      	ldr	r2, [r3, #0]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f022 0201 	bic.w	r2, r2, #1
 800c3b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	3301      	adds	r3, #1
 800c3be:	60bb      	str	r3, [r7, #8]
 800c3c0:	697a      	ldr	r2, [r7, #20]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d307      	bcc.n	800c3d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f003 0301 	and.w	r3, r3, #1
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d1f2      	bne.n	800c3ba <HAL_DMA_IRQHandler+0x2ca>
 800c3d4:	e000      	b.n	800c3d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800c3d6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d005      	beq.n	800c3fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	4798      	blx	r3
 800c3f8:	e000      	b.n	800c3fc <HAL_DMA_IRQHandler+0x30c>
        return;
 800c3fa:	bf00      	nop
    }
  }
}
 800c3fc:	3718      	adds	r7, #24
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop

0800c404 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c412:	b2db      	uxtb	r3, r3
}
 800c414:	4618      	mov	r0, r3
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	607a      	str	r2, [r7, #4]
 800c42c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c43c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	683a      	ldr	r2, [r7, #0]
 800c444:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	2b40      	cmp	r3, #64	; 0x40
 800c44c:	d108      	bne.n	800c460 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	68ba      	ldr	r2, [r7, #8]
 800c45c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c45e:	e007      	b.n	800c470 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	68ba      	ldr	r2, [r7, #8]
 800c466:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	687a      	ldr	r2, [r7, #4]
 800c46e:	60da      	str	r2, [r3, #12]
}
 800c470:	bf00      	nop
 800c472:	3714      	adds	r7, #20
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr

0800c47c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b085      	sub	sp, #20
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	3b10      	subs	r3, #16
 800c48c:	4a14      	ldr	r2, [pc, #80]	; (800c4e0 <DMA_CalcBaseAndBitshift+0x64>)
 800c48e:	fba2 2303 	umull	r2, r3, r2, r3
 800c492:	091b      	lsrs	r3, r3, #4
 800c494:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c496:	4a13      	ldr	r2, [pc, #76]	; (800c4e4 <DMA_CalcBaseAndBitshift+0x68>)
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	4413      	add	r3, r2
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	461a      	mov	r2, r3
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2b03      	cmp	r3, #3
 800c4a8:	d909      	bls.n	800c4be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c4b2:	f023 0303 	bic.w	r3, r3, #3
 800c4b6:	1d1a      	adds	r2, r3, #4
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	659a      	str	r2, [r3, #88]	; 0x58
 800c4bc:	e007      	b.n	800c4ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c4c6:	f023 0303 	bic.w	r3, r3, #3
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3714      	adds	r7, #20
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop
 800c4e0:	aaaaaaab 	.word	0xaaaaaaab
 800c4e4:	0801cae8 	.word	0x0801cae8

0800c4e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b085      	sub	sp, #20
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	699b      	ldr	r3, [r3, #24]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d11f      	bne.n	800c542 <DMA_CheckFifoParam+0x5a>
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	2b03      	cmp	r3, #3
 800c506:	d856      	bhi.n	800c5b6 <DMA_CheckFifoParam+0xce>
 800c508:	a201      	add	r2, pc, #4	; (adr r2, 800c510 <DMA_CheckFifoParam+0x28>)
 800c50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c50e:	bf00      	nop
 800c510:	0800c521 	.word	0x0800c521
 800c514:	0800c533 	.word	0x0800c533
 800c518:	0800c521 	.word	0x0800c521
 800c51c:	0800c5b7 	.word	0x0800c5b7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c524:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d046      	beq.n	800c5ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800c52c:	2301      	movs	r3, #1
 800c52e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c530:	e043      	b.n	800c5ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c536:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c53a:	d140      	bne.n	800c5be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800c53c:	2301      	movs	r3, #1
 800c53e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c540:	e03d      	b.n	800c5be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	699b      	ldr	r3, [r3, #24]
 800c546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c54a:	d121      	bne.n	800c590 <DMA_CheckFifoParam+0xa8>
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	2b03      	cmp	r3, #3
 800c550:	d837      	bhi.n	800c5c2 <DMA_CheckFifoParam+0xda>
 800c552:	a201      	add	r2, pc, #4	; (adr r2, 800c558 <DMA_CheckFifoParam+0x70>)
 800c554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c558:	0800c569 	.word	0x0800c569
 800c55c:	0800c56f 	.word	0x0800c56f
 800c560:	0800c569 	.word	0x0800c569
 800c564:	0800c581 	.word	0x0800c581
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c568:	2301      	movs	r3, #1
 800c56a:	73fb      	strb	r3, [r7, #15]
      break;
 800c56c:	e030      	b.n	800c5d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c572:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c576:	2b00      	cmp	r3, #0
 800c578:	d025      	beq.n	800c5c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800c57a:	2301      	movs	r3, #1
 800c57c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c57e:	e022      	b.n	800c5c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c584:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c588:	d11f      	bne.n	800c5ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800c58a:	2301      	movs	r3, #1
 800c58c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c58e:	e01c      	b.n	800c5ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	2b02      	cmp	r3, #2
 800c594:	d903      	bls.n	800c59e <DMA_CheckFifoParam+0xb6>
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	2b03      	cmp	r3, #3
 800c59a:	d003      	beq.n	800c5a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c59c:	e018      	b.n	800c5d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	73fb      	strb	r3, [r7, #15]
      break;
 800c5a2:	e015      	b.n	800c5d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d00e      	beq.n	800c5ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	73fb      	strb	r3, [r7, #15]
      break;
 800c5b4:	e00b      	b.n	800c5ce <DMA_CheckFifoParam+0xe6>
      break;
 800c5b6:	bf00      	nop
 800c5b8:	e00a      	b.n	800c5d0 <DMA_CheckFifoParam+0xe8>
      break;
 800c5ba:	bf00      	nop
 800c5bc:	e008      	b.n	800c5d0 <DMA_CheckFifoParam+0xe8>
      break;
 800c5be:	bf00      	nop
 800c5c0:	e006      	b.n	800c5d0 <DMA_CheckFifoParam+0xe8>
      break;
 800c5c2:	bf00      	nop
 800c5c4:	e004      	b.n	800c5d0 <DMA_CheckFifoParam+0xe8>
      break;
 800c5c6:	bf00      	nop
 800c5c8:	e002      	b.n	800c5d0 <DMA_CheckFifoParam+0xe8>
      break;   
 800c5ca:	bf00      	nop
 800c5cc:	e000      	b.n	800c5d0 <DMA_CheckFifoParam+0xe8>
      break;
 800c5ce:	bf00      	nop
    }
  } 
  
  return status; 
 800c5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3714      	adds	r7, #20
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop

0800c5e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b089      	sub	sp, #36	; 0x24
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	61fb      	str	r3, [r7, #28]
 800c5fa:	e16b      	b.n	800c8d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	69fb      	ldr	r3, [r7, #28]
 800c600:	fa02 f303 	lsl.w	r3, r2, r3
 800c604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	697a      	ldr	r2, [r7, #20]
 800c60c:	4013      	ands	r3, r2
 800c60e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c610:	693a      	ldr	r2, [r7, #16]
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	429a      	cmp	r2, r3
 800c616:	f040 815a 	bne.w	800c8ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	685b      	ldr	r3, [r3, #4]
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d00b      	beq.n	800c63a <HAL_GPIO_Init+0x5a>
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	685b      	ldr	r3, [r3, #4]
 800c626:	2b02      	cmp	r3, #2
 800c628:	d007      	beq.n	800c63a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c62e:	2b11      	cmp	r3, #17
 800c630:	d003      	beq.n	800c63a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	2b12      	cmp	r3, #18
 800c638:	d130      	bne.n	800c69c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	689b      	ldr	r3, [r3, #8]
 800c63e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c640:	69fb      	ldr	r3, [r7, #28]
 800c642:	005b      	lsls	r3, r3, #1
 800c644:	2203      	movs	r2, #3
 800c646:	fa02 f303 	lsl.w	r3, r2, r3
 800c64a:	43db      	mvns	r3, r3
 800c64c:	69ba      	ldr	r2, [r7, #24]
 800c64e:	4013      	ands	r3, r2
 800c650:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	68da      	ldr	r2, [r3, #12]
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	005b      	lsls	r3, r3, #1
 800c65a:	fa02 f303 	lsl.w	r3, r2, r3
 800c65e:	69ba      	ldr	r2, [r7, #24]
 800c660:	4313      	orrs	r3, r2
 800c662:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	69ba      	ldr	r2, [r7, #24]
 800c668:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c670:	2201      	movs	r2, #1
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	fa02 f303 	lsl.w	r3, r2, r3
 800c678:	43db      	mvns	r3, r3
 800c67a:	69ba      	ldr	r2, [r7, #24]
 800c67c:	4013      	ands	r3, r2
 800c67e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	091b      	lsrs	r3, r3, #4
 800c686:	f003 0201 	and.w	r2, r3, #1
 800c68a:	69fb      	ldr	r3, [r7, #28]
 800c68c:	fa02 f303 	lsl.w	r3, r2, r3
 800c690:	69ba      	ldr	r2, [r7, #24]
 800c692:	4313      	orrs	r3, r2
 800c694:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	69ba      	ldr	r2, [r7, #24]
 800c69a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	68db      	ldr	r3, [r3, #12]
 800c6a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c6a2:	69fb      	ldr	r3, [r7, #28]
 800c6a4:	005b      	lsls	r3, r3, #1
 800c6a6:	2203      	movs	r2, #3
 800c6a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c6ac:	43db      	mvns	r3, r3
 800c6ae:	69ba      	ldr	r2, [r7, #24]
 800c6b0:	4013      	ands	r3, r2
 800c6b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	689a      	ldr	r2, [r3, #8]
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	005b      	lsls	r3, r3, #1
 800c6bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c6c0:	69ba      	ldr	r2, [r7, #24]
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	69ba      	ldr	r2, [r7, #24]
 800c6ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	2b02      	cmp	r3, #2
 800c6d2:	d003      	beq.n	800c6dc <HAL_GPIO_Init+0xfc>
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	2b12      	cmp	r3, #18
 800c6da:	d123      	bne.n	800c724 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	08da      	lsrs	r2, r3, #3
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	3208      	adds	r2, #8
 800c6e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c6ea:	69fb      	ldr	r3, [r7, #28]
 800c6ec:	f003 0307 	and.w	r3, r3, #7
 800c6f0:	009b      	lsls	r3, r3, #2
 800c6f2:	220f      	movs	r2, #15
 800c6f4:	fa02 f303 	lsl.w	r3, r2, r3
 800c6f8:	43db      	mvns	r3, r3
 800c6fa:	69ba      	ldr	r2, [r7, #24]
 800c6fc:	4013      	ands	r3, r2
 800c6fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	691a      	ldr	r2, [r3, #16]
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	f003 0307 	and.w	r3, r3, #7
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	fa02 f303 	lsl.w	r3, r2, r3
 800c710:	69ba      	ldr	r2, [r7, #24]
 800c712:	4313      	orrs	r3, r2
 800c714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c716:	69fb      	ldr	r3, [r7, #28]
 800c718:	08da      	lsrs	r2, r3, #3
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	3208      	adds	r2, #8
 800c71e:	69b9      	ldr	r1, [r7, #24]
 800c720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c72a:	69fb      	ldr	r3, [r7, #28]
 800c72c:	005b      	lsls	r3, r3, #1
 800c72e:	2203      	movs	r2, #3
 800c730:	fa02 f303 	lsl.w	r3, r2, r3
 800c734:	43db      	mvns	r3, r3
 800c736:	69ba      	ldr	r2, [r7, #24]
 800c738:	4013      	ands	r3, r2
 800c73a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	f003 0203 	and.w	r2, r3, #3
 800c744:	69fb      	ldr	r3, [r7, #28]
 800c746:	005b      	lsls	r3, r3, #1
 800c748:	fa02 f303 	lsl.w	r3, r2, r3
 800c74c:	69ba      	ldr	r2, [r7, #24]
 800c74e:	4313      	orrs	r3, r2
 800c750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	69ba      	ldr	r2, [r7, #24]
 800c756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c760:	2b00      	cmp	r3, #0
 800c762:	f000 80b4 	beq.w	800c8ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c766:	2300      	movs	r3, #0
 800c768:	60fb      	str	r3, [r7, #12]
 800c76a:	4b60      	ldr	r3, [pc, #384]	; (800c8ec <HAL_GPIO_Init+0x30c>)
 800c76c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c76e:	4a5f      	ldr	r2, [pc, #380]	; (800c8ec <HAL_GPIO_Init+0x30c>)
 800c770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c774:	6453      	str	r3, [r2, #68]	; 0x44
 800c776:	4b5d      	ldr	r3, [pc, #372]	; (800c8ec <HAL_GPIO_Init+0x30c>)
 800c778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c77a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c77e:	60fb      	str	r3, [r7, #12]
 800c780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c782:	4a5b      	ldr	r2, [pc, #364]	; (800c8f0 <HAL_GPIO_Init+0x310>)
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	089b      	lsrs	r3, r3, #2
 800c788:	3302      	adds	r3, #2
 800c78a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c78e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c790:	69fb      	ldr	r3, [r7, #28]
 800c792:	f003 0303 	and.w	r3, r3, #3
 800c796:	009b      	lsls	r3, r3, #2
 800c798:	220f      	movs	r2, #15
 800c79a:	fa02 f303 	lsl.w	r3, r2, r3
 800c79e:	43db      	mvns	r3, r3
 800c7a0:	69ba      	ldr	r2, [r7, #24]
 800c7a2:	4013      	ands	r3, r2
 800c7a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	4a52      	ldr	r2, [pc, #328]	; (800c8f4 <HAL_GPIO_Init+0x314>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d02b      	beq.n	800c806 <HAL_GPIO_Init+0x226>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	4a51      	ldr	r2, [pc, #324]	; (800c8f8 <HAL_GPIO_Init+0x318>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d025      	beq.n	800c802 <HAL_GPIO_Init+0x222>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	4a50      	ldr	r2, [pc, #320]	; (800c8fc <HAL_GPIO_Init+0x31c>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d01f      	beq.n	800c7fe <HAL_GPIO_Init+0x21e>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	4a4f      	ldr	r2, [pc, #316]	; (800c900 <HAL_GPIO_Init+0x320>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d019      	beq.n	800c7fa <HAL_GPIO_Init+0x21a>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	4a4e      	ldr	r2, [pc, #312]	; (800c904 <HAL_GPIO_Init+0x324>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d013      	beq.n	800c7f6 <HAL_GPIO_Init+0x216>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	4a4d      	ldr	r2, [pc, #308]	; (800c908 <HAL_GPIO_Init+0x328>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d00d      	beq.n	800c7f2 <HAL_GPIO_Init+0x212>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	4a4c      	ldr	r2, [pc, #304]	; (800c90c <HAL_GPIO_Init+0x32c>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d007      	beq.n	800c7ee <HAL_GPIO_Init+0x20e>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	4a4b      	ldr	r2, [pc, #300]	; (800c910 <HAL_GPIO_Init+0x330>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d101      	bne.n	800c7ea <HAL_GPIO_Init+0x20a>
 800c7e6:	2307      	movs	r3, #7
 800c7e8:	e00e      	b.n	800c808 <HAL_GPIO_Init+0x228>
 800c7ea:	2308      	movs	r3, #8
 800c7ec:	e00c      	b.n	800c808 <HAL_GPIO_Init+0x228>
 800c7ee:	2306      	movs	r3, #6
 800c7f0:	e00a      	b.n	800c808 <HAL_GPIO_Init+0x228>
 800c7f2:	2305      	movs	r3, #5
 800c7f4:	e008      	b.n	800c808 <HAL_GPIO_Init+0x228>
 800c7f6:	2304      	movs	r3, #4
 800c7f8:	e006      	b.n	800c808 <HAL_GPIO_Init+0x228>
 800c7fa:	2303      	movs	r3, #3
 800c7fc:	e004      	b.n	800c808 <HAL_GPIO_Init+0x228>
 800c7fe:	2302      	movs	r3, #2
 800c800:	e002      	b.n	800c808 <HAL_GPIO_Init+0x228>
 800c802:	2301      	movs	r3, #1
 800c804:	e000      	b.n	800c808 <HAL_GPIO_Init+0x228>
 800c806:	2300      	movs	r3, #0
 800c808:	69fa      	ldr	r2, [r7, #28]
 800c80a:	f002 0203 	and.w	r2, r2, #3
 800c80e:	0092      	lsls	r2, r2, #2
 800c810:	4093      	lsls	r3, r2
 800c812:	69ba      	ldr	r2, [r7, #24]
 800c814:	4313      	orrs	r3, r2
 800c816:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c818:	4935      	ldr	r1, [pc, #212]	; (800c8f0 <HAL_GPIO_Init+0x310>)
 800c81a:	69fb      	ldr	r3, [r7, #28]
 800c81c:	089b      	lsrs	r3, r3, #2
 800c81e:	3302      	adds	r3, #2
 800c820:	69ba      	ldr	r2, [r7, #24]
 800c822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c826:	4b3b      	ldr	r3, [pc, #236]	; (800c914 <HAL_GPIO_Init+0x334>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	43db      	mvns	r3, r3
 800c830:	69ba      	ldr	r2, [r7, #24]
 800c832:	4013      	ands	r3, r2
 800c834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d003      	beq.n	800c84a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800c842:	69ba      	ldr	r2, [r7, #24]
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	4313      	orrs	r3, r2
 800c848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c84a:	4a32      	ldr	r2, [pc, #200]	; (800c914 <HAL_GPIO_Init+0x334>)
 800c84c:	69bb      	ldr	r3, [r7, #24]
 800c84e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c850:	4b30      	ldr	r3, [pc, #192]	; (800c914 <HAL_GPIO_Init+0x334>)
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	43db      	mvns	r3, r3
 800c85a:	69ba      	ldr	r2, [r7, #24]
 800c85c:	4013      	ands	r3, r2
 800c85e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d003      	beq.n	800c874 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800c86c:	69ba      	ldr	r2, [r7, #24]
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	4313      	orrs	r3, r2
 800c872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c874:	4a27      	ldr	r2, [pc, #156]	; (800c914 <HAL_GPIO_Init+0x334>)
 800c876:	69bb      	ldr	r3, [r7, #24]
 800c878:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c87a:	4b26      	ldr	r3, [pc, #152]	; (800c914 <HAL_GPIO_Init+0x334>)
 800c87c:	689b      	ldr	r3, [r3, #8]
 800c87e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	43db      	mvns	r3, r3
 800c884:	69ba      	ldr	r2, [r7, #24]
 800c886:	4013      	ands	r3, r2
 800c888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c892:	2b00      	cmp	r3, #0
 800c894:	d003      	beq.n	800c89e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c896:	69ba      	ldr	r2, [r7, #24]
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	4313      	orrs	r3, r2
 800c89c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c89e:	4a1d      	ldr	r2, [pc, #116]	; (800c914 <HAL_GPIO_Init+0x334>)
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c8a4:	4b1b      	ldr	r3, [pc, #108]	; (800c914 <HAL_GPIO_Init+0x334>)
 800c8a6:	68db      	ldr	r3, [r3, #12]
 800c8a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	43db      	mvns	r3, r3
 800c8ae:	69ba      	ldr	r2, [r7, #24]
 800c8b0:	4013      	ands	r3, r2
 800c8b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d003      	beq.n	800c8c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c8c0:	69ba      	ldr	r2, [r7, #24]
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c8c8:	4a12      	ldr	r2, [pc, #72]	; (800c914 <HAL_GPIO_Init+0x334>)
 800c8ca:	69bb      	ldr	r3, [r7, #24]
 800c8cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c8ce:	69fb      	ldr	r3, [r7, #28]
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	61fb      	str	r3, [r7, #28]
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	2b0f      	cmp	r3, #15
 800c8d8:	f67f ae90 	bls.w	800c5fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c8dc:	bf00      	nop
 800c8de:	bf00      	nop
 800c8e0:	3724      	adds	r7, #36	; 0x24
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr
 800c8ea:	bf00      	nop
 800c8ec:	40023800 	.word	0x40023800
 800c8f0:	40013800 	.word	0x40013800
 800c8f4:	40020000 	.word	0x40020000
 800c8f8:	40020400 	.word	0x40020400
 800c8fc:	40020800 	.word	0x40020800
 800c900:	40020c00 	.word	0x40020c00
 800c904:	40021000 	.word	0x40021000
 800c908:	40021400 	.word	0x40021400
 800c90c:	40021800 	.word	0x40021800
 800c910:	40021c00 	.word	0x40021c00
 800c914:	40013c00 	.word	0x40013c00

0800c918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	460b      	mov	r3, r1
 800c922:	807b      	strh	r3, [r7, #2]
 800c924:	4613      	mov	r3, r2
 800c926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c928:	787b      	ldrb	r3, [r7, #1]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d003      	beq.n	800c936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c92e:	887a      	ldrh	r2, [r7, #2]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c934:	e003      	b.n	800c93e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c936:	887b      	ldrh	r3, [r7, #2]
 800c938:	041a      	lsls	r2, r3, #16
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	619a      	str	r2, [r3, #24]
}
 800c93e:	bf00      	nop
 800c940:	370c      	adds	r7, #12
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr
	...

0800c94c <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b084      	sub	sp, #16
 800c950:	af00      	add	r7, sp, #0
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	60b9      	str	r1, [r7, #8]
 800c956:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d101      	bne.n	800c962 <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800c95e:	2301      	movs	r3, #1
 800c960:	e043      	b.n	800c9ea <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d106      	bne.n	800c97c <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	2200      	movs	r2, #0
 800c972:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800c976:	68f8      	ldr	r0, [r7, #12]
 800c978:	f7f7 fffa 	bl	8004970 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	3308      	adds	r3, #8
 800c984:	4619      	mov	r1, r3
 800c986:	4610      	mov	r0, r2
 800c988:	f003 f9b6 	bl	800fcf8 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	6818      	ldr	r0, [r3, #0]
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	689b      	ldr	r3, [r3, #8]
 800c994:	461a      	mov	r2, r3
 800c996:	68b9      	ldr	r1, [r7, #8]
 800c998:	f003 fa00 	bl	800fd9c <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	6858      	ldr	r0, [r3, #4]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	689a      	ldr	r2, [r3, #8]
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9a8:	6879      	ldr	r1, [r7, #4]
 800c9aa:	f003 fa35 	bl	800fe18 <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	68fa      	ldr	r2, [r7, #12]
 800c9b4:	6892      	ldr	r2, [r2, #8]
 800c9b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	68fa      	ldr	r2, [r7, #12]
 800c9c0:	6892      	ldr	r2, [r2, #8]
 800c9c2:	f041 0101 	orr.w	r1, r1, #1
 800c9c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	695b      	ldr	r3, [r3, #20]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d103      	bne.n	800c9da <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800c9d2:	4b08      	ldr	r3, [pc, #32]	; (800c9f4 <HAL_NOR_Init+0xa8>)
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	601a      	str	r2, [r3, #0]
 800c9d8:	e002      	b.n	800c9e0 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800c9da:	4b06      	ldr	r3, [pc, #24]	; (800c9f4 <HAL_NOR_Init+0xa8>)
 800c9dc:	2201      	movs	r2, #1
 800c9de:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800c9e8:	2300      	movs	r3, #0
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3710      	adds	r7, #16
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	20004864 	.word	0x20004864

0800c9f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9fa:	b08f      	sub	sp, #60	; 0x3c
 800c9fc:	af0a      	add	r7, sp, #40	; 0x28
 800c9fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d101      	bne.n	800ca0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ca06:	2301      	movs	r3, #1
 800ca08:	e10f      	b.n	800cc2a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d106      	bne.n	800ca2a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f009 fa5d 	bl	8015ee4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2203      	movs	r2, #3
 800ca2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d102      	bne.n	800ca44 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2200      	movs	r2, #0
 800ca42:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f003 fb3a 	bl	80100c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	603b      	str	r3, [r7, #0]
 800ca54:	687e      	ldr	r6, [r7, #4]
 800ca56:	466d      	mov	r5, sp
 800ca58:	f106 0410 	add.w	r4, r6, #16
 800ca5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ca60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ca64:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ca68:	e885 0003 	stmia.w	r5, {r0, r1}
 800ca6c:	1d33      	adds	r3, r6, #4
 800ca6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ca70:	6838      	ldr	r0, [r7, #0]
 800ca72:	f003 fa11 	bl	800fe98 <USB_CoreInit>
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d005      	beq.n	800ca88 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2202      	movs	r2, #2
 800ca80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800ca84:	2301      	movs	r3, #1
 800ca86:	e0d0      	b.n	800cc2a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	2100      	movs	r1, #0
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f003 fb28 	bl	80100e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca94:	2300      	movs	r3, #0
 800ca96:	73fb      	strb	r3, [r7, #15]
 800ca98:	e04a      	b.n	800cb30 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ca9a:	7bfa      	ldrb	r2, [r7, #15]
 800ca9c:	6879      	ldr	r1, [r7, #4]
 800ca9e:	4613      	mov	r3, r2
 800caa0:	00db      	lsls	r3, r3, #3
 800caa2:	1a9b      	subs	r3, r3, r2
 800caa4:	009b      	lsls	r3, r3, #2
 800caa6:	440b      	add	r3, r1
 800caa8:	333d      	adds	r3, #61	; 0x3d
 800caaa:	2201      	movs	r2, #1
 800caac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800caae:	7bfa      	ldrb	r2, [r7, #15]
 800cab0:	6879      	ldr	r1, [r7, #4]
 800cab2:	4613      	mov	r3, r2
 800cab4:	00db      	lsls	r3, r3, #3
 800cab6:	1a9b      	subs	r3, r3, r2
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	440b      	add	r3, r1
 800cabc:	333c      	adds	r3, #60	; 0x3c
 800cabe:	7bfa      	ldrb	r2, [r7, #15]
 800cac0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800cac2:	7bfa      	ldrb	r2, [r7, #15]
 800cac4:	7bfb      	ldrb	r3, [r7, #15]
 800cac6:	b298      	uxth	r0, r3
 800cac8:	6879      	ldr	r1, [r7, #4]
 800caca:	4613      	mov	r3, r2
 800cacc:	00db      	lsls	r3, r3, #3
 800cace:	1a9b      	subs	r3, r3, r2
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	440b      	add	r3, r1
 800cad4:	3342      	adds	r3, #66	; 0x42
 800cad6:	4602      	mov	r2, r0
 800cad8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800cada:	7bfa      	ldrb	r2, [r7, #15]
 800cadc:	6879      	ldr	r1, [r7, #4]
 800cade:	4613      	mov	r3, r2
 800cae0:	00db      	lsls	r3, r3, #3
 800cae2:	1a9b      	subs	r3, r3, r2
 800cae4:	009b      	lsls	r3, r3, #2
 800cae6:	440b      	add	r3, r1
 800cae8:	333f      	adds	r3, #63	; 0x3f
 800caea:	2200      	movs	r2, #0
 800caec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800caee:	7bfa      	ldrb	r2, [r7, #15]
 800caf0:	6879      	ldr	r1, [r7, #4]
 800caf2:	4613      	mov	r3, r2
 800caf4:	00db      	lsls	r3, r3, #3
 800caf6:	1a9b      	subs	r3, r3, r2
 800caf8:	009b      	lsls	r3, r3, #2
 800cafa:	440b      	add	r3, r1
 800cafc:	3344      	adds	r3, #68	; 0x44
 800cafe:	2200      	movs	r2, #0
 800cb00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800cb02:	7bfa      	ldrb	r2, [r7, #15]
 800cb04:	6879      	ldr	r1, [r7, #4]
 800cb06:	4613      	mov	r3, r2
 800cb08:	00db      	lsls	r3, r3, #3
 800cb0a:	1a9b      	subs	r3, r3, r2
 800cb0c:	009b      	lsls	r3, r3, #2
 800cb0e:	440b      	add	r3, r1
 800cb10:	3348      	adds	r3, #72	; 0x48
 800cb12:	2200      	movs	r2, #0
 800cb14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800cb16:	7bfa      	ldrb	r2, [r7, #15]
 800cb18:	6879      	ldr	r1, [r7, #4]
 800cb1a:	4613      	mov	r3, r2
 800cb1c:	00db      	lsls	r3, r3, #3
 800cb1e:	1a9b      	subs	r3, r3, r2
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	440b      	add	r3, r1
 800cb24:	3350      	adds	r3, #80	; 0x50
 800cb26:	2200      	movs	r2, #0
 800cb28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb2a:	7bfb      	ldrb	r3, [r7, #15]
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	73fb      	strb	r3, [r7, #15]
 800cb30:	7bfa      	ldrb	r2, [r7, #15]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d3af      	bcc.n	800ca9a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	73fb      	strb	r3, [r7, #15]
 800cb3e:	e044      	b.n	800cbca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800cb40:	7bfa      	ldrb	r2, [r7, #15]
 800cb42:	6879      	ldr	r1, [r7, #4]
 800cb44:	4613      	mov	r3, r2
 800cb46:	00db      	lsls	r3, r3, #3
 800cb48:	1a9b      	subs	r3, r3, r2
 800cb4a:	009b      	lsls	r3, r3, #2
 800cb4c:	440b      	add	r3, r1
 800cb4e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800cb52:	2200      	movs	r2, #0
 800cb54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800cb56:	7bfa      	ldrb	r2, [r7, #15]
 800cb58:	6879      	ldr	r1, [r7, #4]
 800cb5a:	4613      	mov	r3, r2
 800cb5c:	00db      	lsls	r3, r3, #3
 800cb5e:	1a9b      	subs	r3, r3, r2
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	440b      	add	r3, r1
 800cb64:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800cb68:	7bfa      	ldrb	r2, [r7, #15]
 800cb6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800cb6c:	7bfa      	ldrb	r2, [r7, #15]
 800cb6e:	6879      	ldr	r1, [r7, #4]
 800cb70:	4613      	mov	r3, r2
 800cb72:	00db      	lsls	r3, r3, #3
 800cb74:	1a9b      	subs	r3, r3, r2
 800cb76:	009b      	lsls	r3, r3, #2
 800cb78:	440b      	add	r3, r1
 800cb7a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cb7e:	2200      	movs	r2, #0
 800cb80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800cb82:	7bfa      	ldrb	r2, [r7, #15]
 800cb84:	6879      	ldr	r1, [r7, #4]
 800cb86:	4613      	mov	r3, r2
 800cb88:	00db      	lsls	r3, r3, #3
 800cb8a:	1a9b      	subs	r3, r3, r2
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	440b      	add	r3, r1
 800cb90:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800cb94:	2200      	movs	r2, #0
 800cb96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800cb98:	7bfa      	ldrb	r2, [r7, #15]
 800cb9a:	6879      	ldr	r1, [r7, #4]
 800cb9c:	4613      	mov	r3, r2
 800cb9e:	00db      	lsls	r3, r3, #3
 800cba0:	1a9b      	subs	r3, r3, r2
 800cba2:	009b      	lsls	r3, r3, #2
 800cba4:	440b      	add	r3, r1
 800cba6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cbaa:	2200      	movs	r2, #0
 800cbac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800cbae:	7bfa      	ldrb	r2, [r7, #15]
 800cbb0:	6879      	ldr	r1, [r7, #4]
 800cbb2:	4613      	mov	r3, r2
 800cbb4:	00db      	lsls	r3, r3, #3
 800cbb6:	1a9b      	subs	r3, r3, r2
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	440b      	add	r3, r1
 800cbbc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cbc4:	7bfb      	ldrb	r3, [r7, #15]
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	73fb      	strb	r3, [r7, #15]
 800cbca:	7bfa      	ldrb	r2, [r7, #15]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d3b5      	bcc.n	800cb40 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	603b      	str	r3, [r7, #0]
 800cbda:	687e      	ldr	r6, [r7, #4]
 800cbdc:	466d      	mov	r5, sp
 800cbde:	f106 0410 	add.w	r4, r6, #16
 800cbe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cbe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cbe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cbe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cbea:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cbee:	e885 0003 	stmia.w	r5, {r0, r1}
 800cbf2:	1d33      	adds	r3, r6, #4
 800cbf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cbf6:	6838      	ldr	r0, [r7, #0]
 800cbf8:	f003 fa9e 	bl	8010138 <USB_DevInit>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d005      	beq.n	800cc0e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2202      	movs	r2, #2
 800cc06:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	e00d      	b.n	800cc2a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2200      	movs	r2, #0
 800cc12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2201      	movs	r2, #1
 800cc1a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	4618      	mov	r0, r3
 800cc24:	f004 fae6 	bl	80111f4 <USB_DevDisconnect>

  return HAL_OK;
 800cc28:	2300      	movs	r3, #0
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3714      	adds	r7, #20
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc32 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800cc32:	b580      	push	{r7, lr}
 800cc34:	b084      	sub	sp, #16
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	d101      	bne.n	800cc4e <HAL_PCD_Start+0x1c>
 800cc4a:	2302      	movs	r3, #2
 800cc4c:	e020      	b.n	800cc90 <HAL_PCD_Start+0x5e>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2201      	movs	r2, #1
 800cc52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d109      	bne.n	800cc72 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	d005      	beq.n	800cc72 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	4618      	mov	r0, r3
 800cc78:	f003 fa12 	bl	80100a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4618      	mov	r0, r3
 800cc82:	f004 fa96 	bl	80111b2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cc8e:	2300      	movs	r3, #0
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3710      	adds	r7, #16
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800cc98:	b590      	push	{r4, r7, lr}
 800cc9a:	b08d      	sub	sp, #52	; 0x34
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cca6:	6a3b      	ldr	r3, [r7, #32]
 800cca8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f004 fb54 	bl	801135c <USB_GetMode>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	f040 839d 	bne.w	800d3f6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f004 fab8 	bl	8011236 <USB_ReadInterrupts>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	f000 8393 	beq.w	800d3f4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f004 faaf 	bl	8011236 <USB_ReadInterrupts>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	f003 0302 	and.w	r3, r3, #2
 800ccde:	2b02      	cmp	r3, #2
 800cce0:	d107      	bne.n	800ccf2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	695a      	ldr	r2, [r3, #20]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f002 0202 	and.w	r2, r2, #2
 800ccf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f004 fa9d 	bl	8011236 <USB_ReadInterrupts>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	f003 0310 	and.w	r3, r3, #16
 800cd02:	2b10      	cmp	r3, #16
 800cd04:	d161      	bne.n	800cdca <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	699a      	ldr	r2, [r3, #24]
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f022 0210 	bic.w	r2, r2, #16
 800cd14:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800cd16:	6a3b      	ldr	r3, [r7, #32]
 800cd18:	6a1b      	ldr	r3, [r3, #32]
 800cd1a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800cd1c:	69bb      	ldr	r3, [r7, #24]
 800cd1e:	f003 020f 	and.w	r2, r3, #15
 800cd22:	4613      	mov	r3, r2
 800cd24:	00db      	lsls	r3, r3, #3
 800cd26:	1a9b      	subs	r3, r3, r2
 800cd28:	009b      	lsls	r3, r3, #2
 800cd2a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cd2e:	687a      	ldr	r2, [r7, #4]
 800cd30:	4413      	add	r3, r2
 800cd32:	3304      	adds	r3, #4
 800cd34:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800cd36:	69bb      	ldr	r3, [r7, #24]
 800cd38:	0c5b      	lsrs	r3, r3, #17
 800cd3a:	f003 030f 	and.w	r3, r3, #15
 800cd3e:	2b02      	cmp	r3, #2
 800cd40:	d124      	bne.n	800cd8c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800cd42:	69ba      	ldr	r2, [r7, #24]
 800cd44:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800cd48:	4013      	ands	r3, r2
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d035      	beq.n	800cdba <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800cd52:	69bb      	ldr	r3, [r7, #24]
 800cd54:	091b      	lsrs	r3, r3, #4
 800cd56:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800cd58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd5c:	b29b      	uxth	r3, r3
 800cd5e:	461a      	mov	r2, r3
 800cd60:	6a38      	ldr	r0, [r7, #32]
 800cd62:	f004 f903 	bl	8010f6c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	68da      	ldr	r2, [r3, #12]
 800cd6a:	69bb      	ldr	r3, [r7, #24]
 800cd6c:	091b      	lsrs	r3, r3, #4
 800cd6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd72:	441a      	add	r2, r3
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	699a      	ldr	r2, [r3, #24]
 800cd7c:	69bb      	ldr	r3, [r7, #24]
 800cd7e:	091b      	lsrs	r3, r3, #4
 800cd80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd84:	441a      	add	r2, r3
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	619a      	str	r2, [r3, #24]
 800cd8a:	e016      	b.n	800cdba <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800cd8c:	69bb      	ldr	r3, [r7, #24]
 800cd8e:	0c5b      	lsrs	r3, r3, #17
 800cd90:	f003 030f 	and.w	r3, r3, #15
 800cd94:	2b06      	cmp	r3, #6
 800cd96:	d110      	bne.n	800cdba <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cd9e:	2208      	movs	r2, #8
 800cda0:	4619      	mov	r1, r3
 800cda2:	6a38      	ldr	r0, [r7, #32]
 800cda4:	f004 f8e2 	bl	8010f6c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	699a      	ldr	r2, [r3, #24]
 800cdac:	69bb      	ldr	r3, [r7, #24]
 800cdae:	091b      	lsrs	r3, r3, #4
 800cdb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cdb4:	441a      	add	r2, r3
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	699a      	ldr	r2, [r3, #24]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f042 0210 	orr.w	r2, r2, #16
 800cdc8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f004 fa31 	bl	8011236 <USB_ReadInterrupts>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cdda:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cdde:	d16e      	bne.n	800cebe <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800cde0:	2300      	movs	r3, #0
 800cde2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4618      	mov	r0, r3
 800cdea:	f004 fa37 	bl	801125c <USB_ReadDevAllOutEpInterrupt>
 800cdee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800cdf0:	e062      	b.n	800ceb8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800cdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf4:	f003 0301 	and.w	r3, r3, #1
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d057      	beq.n	800ceac <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce02:	b2d2      	uxtb	r2, r2
 800ce04:	4611      	mov	r1, r2
 800ce06:	4618      	mov	r0, r3
 800ce08:	f004 fa5c 	bl	80112c4 <USB_ReadDevOutEPInterrupt>
 800ce0c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	f003 0301 	and.w	r3, r3, #1
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d00c      	beq.n	800ce32 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800ce18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1a:	015a      	lsls	r2, r3, #5
 800ce1c:	69fb      	ldr	r3, [r7, #28]
 800ce1e:	4413      	add	r3, r2
 800ce20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce24:	461a      	mov	r2, r3
 800ce26:	2301      	movs	r3, #1
 800ce28:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800ce2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f000 fdb1 	bl	800d994 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	f003 0308 	and.w	r3, r3, #8
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d00c      	beq.n	800ce56 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800ce3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3e:	015a      	lsls	r2, r3, #5
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	4413      	add	r3, r2
 800ce44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce48:	461a      	mov	r2, r3
 800ce4a:	2308      	movs	r3, #8
 800ce4c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800ce4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f000 feab 	bl	800dbac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	f003 0310 	and.w	r3, r3, #16
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d008      	beq.n	800ce72 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800ce60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce62:	015a      	lsls	r2, r3, #5
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	4413      	add	r3, r2
 800ce68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	2310      	movs	r3, #16
 800ce70:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	f003 0320 	and.w	r3, r3, #32
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d008      	beq.n	800ce8e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ce7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7e:	015a      	lsls	r2, r3, #5
 800ce80:	69fb      	ldr	r3, [r7, #28]
 800ce82:	4413      	add	r3, r2
 800ce84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce88:	461a      	mov	r2, r3
 800ce8a:	2320      	movs	r3, #32
 800ce8c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d009      	beq.n	800ceac <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800ce98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9a:	015a      	lsls	r2, r3, #5
 800ce9c:	69fb      	ldr	r3, [r7, #28]
 800ce9e:	4413      	add	r3, r2
 800cea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cea4:	461a      	mov	r2, r3
 800cea6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ceaa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800ceac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceae:	3301      	adds	r3, #1
 800ceb0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800ceb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb4:	085b      	lsrs	r3, r3, #1
 800ceb6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800ceb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d199      	bne.n	800cdf2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	4618      	mov	r0, r3
 800cec4:	f004 f9b7 	bl	8011236 <USB_ReadInterrupts>
 800cec8:	4603      	mov	r3, r0
 800ceca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cece:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ced2:	f040 80c0 	bne.w	800d056 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4618      	mov	r0, r3
 800cedc:	f004 f9d8 	bl	8011290 <USB_ReadDevAllInEpInterrupt>
 800cee0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800cee2:	2300      	movs	r3, #0
 800cee4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800cee6:	e0b2      	b.n	800d04e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800cee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceea:	f003 0301 	and.w	r3, r3, #1
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	f000 80a7 	beq.w	800d042 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cefa:	b2d2      	uxtb	r2, r2
 800cefc:	4611      	mov	r1, r2
 800cefe:	4618      	mov	r0, r3
 800cf00:	f004 f9fe 	bl	8011300 <USB_ReadDevInEPInterrupt>
 800cf04:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	f003 0301 	and.w	r3, r3, #1
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d057      	beq.n	800cfc0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cf10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf12:	f003 030f 	and.w	r3, r3, #15
 800cf16:	2201      	movs	r2, #1
 800cf18:	fa02 f303 	lsl.w	r3, r2, r3
 800cf1c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cf1e:	69fb      	ldr	r3, [r7, #28]
 800cf20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	43db      	mvns	r3, r3
 800cf2a:	69f9      	ldr	r1, [r7, #28]
 800cf2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf30:	4013      	ands	r3, r2
 800cf32:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800cf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf36:	015a      	lsls	r2, r3, #5
 800cf38:	69fb      	ldr	r3, [r7, #28]
 800cf3a:	4413      	add	r3, r2
 800cf3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf40:	461a      	mov	r2, r3
 800cf42:	2301      	movs	r3, #1
 800cf44:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	691b      	ldr	r3, [r3, #16]
 800cf4a:	2b01      	cmp	r3, #1
 800cf4c:	d132      	bne.n	800cfb4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800cf4e:	6879      	ldr	r1, [r7, #4]
 800cf50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf52:	4613      	mov	r3, r2
 800cf54:	00db      	lsls	r3, r3, #3
 800cf56:	1a9b      	subs	r3, r3, r2
 800cf58:	009b      	lsls	r3, r3, #2
 800cf5a:	440b      	add	r3, r1
 800cf5c:	3348      	adds	r3, #72	; 0x48
 800cf5e:	6819      	ldr	r1, [r3, #0]
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf64:	4613      	mov	r3, r2
 800cf66:	00db      	lsls	r3, r3, #3
 800cf68:	1a9b      	subs	r3, r3, r2
 800cf6a:	009b      	lsls	r3, r3, #2
 800cf6c:	4403      	add	r3, r0
 800cf6e:	3344      	adds	r3, #68	; 0x44
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	4419      	add	r1, r3
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf78:	4613      	mov	r3, r2
 800cf7a:	00db      	lsls	r3, r3, #3
 800cf7c:	1a9b      	subs	r3, r3, r2
 800cf7e:	009b      	lsls	r3, r3, #2
 800cf80:	4403      	add	r3, r0
 800cf82:	3348      	adds	r3, #72	; 0x48
 800cf84:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800cf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d113      	bne.n	800cfb4 <HAL_PCD_IRQHandler+0x31c>
 800cf8c:	6879      	ldr	r1, [r7, #4]
 800cf8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf90:	4613      	mov	r3, r2
 800cf92:	00db      	lsls	r3, r3, #3
 800cf94:	1a9b      	subs	r3, r3, r2
 800cf96:	009b      	lsls	r3, r3, #2
 800cf98:	440b      	add	r3, r1
 800cf9a:	3350      	adds	r3, #80	; 0x50
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d108      	bne.n	800cfb4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6818      	ldr	r0, [r3, #0]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cfac:	461a      	mov	r2, r3
 800cfae:	2101      	movs	r1, #1
 800cfb0:	f004 fa06 	bl	80113c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800cfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	4619      	mov	r1, r3
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f009 f813 	bl	8015fe6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	f003 0308 	and.w	r3, r3, #8
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d008      	beq.n	800cfdc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800cfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfcc:	015a      	lsls	r2, r3, #5
 800cfce:	69fb      	ldr	r3, [r7, #28]
 800cfd0:	4413      	add	r3, r2
 800cfd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	2308      	movs	r3, #8
 800cfda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	f003 0310 	and.w	r3, r3, #16
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d008      	beq.n	800cff8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800cfe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe8:	015a      	lsls	r2, r3, #5
 800cfea:	69fb      	ldr	r3, [r7, #28]
 800cfec:	4413      	add	r3, r2
 800cfee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cff2:	461a      	mov	r2, r3
 800cff4:	2310      	movs	r3, #16
 800cff6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d008      	beq.n	800d014 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800d002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d004:	015a      	lsls	r2, r3, #5
 800d006:	69fb      	ldr	r3, [r7, #28]
 800d008:	4413      	add	r3, r2
 800d00a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d00e:	461a      	mov	r2, r3
 800d010:	2340      	movs	r3, #64	; 0x40
 800d012:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	f003 0302 	and.w	r3, r3, #2
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d008      	beq.n	800d030 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800d01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d020:	015a      	lsls	r2, r3, #5
 800d022:	69fb      	ldr	r3, [r7, #28]
 800d024:	4413      	add	r3, r2
 800d026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d02a:	461a      	mov	r2, r3
 800d02c:	2302      	movs	r3, #2
 800d02e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d036:	2b00      	cmp	r3, #0
 800d038:	d003      	beq.n	800d042 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800d03a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 fc1b 	bl	800d878 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800d042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d044:	3301      	adds	r3, #1
 800d046:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800d048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d04a:	085b      	lsrs	r3, r3, #1
 800d04c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800d04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d050:	2b00      	cmp	r3, #0
 800d052:	f47f af49 	bne.w	800cee8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	4618      	mov	r0, r3
 800d05c:	f004 f8eb 	bl	8011236 <USB_ReadInterrupts>
 800d060:	4603      	mov	r3, r0
 800d062:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d066:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d06a:	d122      	bne.n	800d0b2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d06c:	69fb      	ldr	r3, [r7, #28]
 800d06e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	69fa      	ldr	r2, [r7, #28]
 800d076:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d07a:	f023 0301 	bic.w	r3, r3, #1
 800d07e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800d086:	2b01      	cmp	r3, #1
 800d088:	d108      	bne.n	800d09c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2200      	movs	r2, #0
 800d08e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800d092:	2100      	movs	r1, #0
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 fe27 	bl	800dce8 <HAL_PCDEx_LPM_Callback>
 800d09a:	e002      	b.n	800d0a2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f009 f819 	bl	80160d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	695a      	ldr	r2, [r3, #20]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800d0b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f004 f8bd 	bl	8011236 <USB_ReadInterrupts>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d0c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d0c6:	d112      	bne.n	800d0ee <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800d0c8:	69fb      	ldr	r3, [r7, #28]
 800d0ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	f003 0301 	and.w	r3, r3, #1
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d102      	bne.n	800d0de <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f008 ffd5 	bl	8016088 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	695a      	ldr	r2, [r3, #20]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800d0ec:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f004 f89f 	bl	8011236 <USB_ReadInterrupts>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d0fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d102:	f040 80c7 	bne.w	800d294 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d106:	69fb      	ldr	r3, [r7, #28]
 800d108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	69fa      	ldr	r2, [r7, #28]
 800d110:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d114:	f023 0301 	bic.w	r3, r3, #1
 800d118:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	2110      	movs	r1, #16
 800d120:	4618      	mov	r0, r3
 800d122:	f003 f96d 	bl	8010400 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d126:	2300      	movs	r3, #0
 800d128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d12a:	e056      	b.n	800d1da <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800d12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12e:	015a      	lsls	r2, r3, #5
 800d130:	69fb      	ldr	r3, [r7, #28]
 800d132:	4413      	add	r3, r2
 800d134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d138:	461a      	mov	r2, r3
 800d13a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d13e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d142:	015a      	lsls	r2, r3, #5
 800d144:	69fb      	ldr	r3, [r7, #28]
 800d146:	4413      	add	r3, r2
 800d148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d150:	0151      	lsls	r1, r2, #5
 800d152:	69fa      	ldr	r2, [r7, #28]
 800d154:	440a      	add	r2, r1
 800d156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d15a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d15e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d162:	015a      	lsls	r2, r3, #5
 800d164:	69fb      	ldr	r3, [r7, #28]
 800d166:	4413      	add	r3, r2
 800d168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d170:	0151      	lsls	r1, r2, #5
 800d172:	69fa      	ldr	r2, [r7, #28]
 800d174:	440a      	add	r2, r1
 800d176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d17a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d17e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800d180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d182:	015a      	lsls	r2, r3, #5
 800d184:	69fb      	ldr	r3, [r7, #28]
 800d186:	4413      	add	r3, r2
 800d188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d18c:	461a      	mov	r2, r3
 800d18e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d192:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d196:	015a      	lsls	r2, r3, #5
 800d198:	69fb      	ldr	r3, [r7, #28]
 800d19a:	4413      	add	r3, r2
 800d19c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1a4:	0151      	lsls	r1, r2, #5
 800d1a6:	69fa      	ldr	r2, [r7, #28]
 800d1a8:	440a      	add	r2, r1
 800d1aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d1b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b6:	015a      	lsls	r2, r3, #5
 800d1b8:	69fb      	ldr	r3, [r7, #28]
 800d1ba:	4413      	add	r3, r2
 800d1bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1c4:	0151      	lsls	r1, r2, #5
 800d1c6:	69fa      	ldr	r2, [r7, #28]
 800d1c8:	440a      	add	r2, r1
 800d1ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d1d2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d6:	3301      	adds	r3, #1
 800d1d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d3a3      	bcc.n	800d12c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800d1e4:	69fb      	ldr	r3, [r7, #28]
 800d1e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1ea:	69db      	ldr	r3, [r3, #28]
 800d1ec:	69fa      	ldr	r2, [r7, #28]
 800d1ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1f2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800d1f6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d016      	beq.n	800d22e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800d200:	69fb      	ldr	r3, [r7, #28]
 800d202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d20a:	69fa      	ldr	r2, [r7, #28]
 800d20c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d210:	f043 030b 	orr.w	r3, r3, #11
 800d214:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d21e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d220:	69fa      	ldr	r2, [r7, #28]
 800d222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d226:	f043 030b 	orr.w	r3, r3, #11
 800d22a:	6453      	str	r3, [r2, #68]	; 0x44
 800d22c:	e015      	b.n	800d25a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800d22e:	69fb      	ldr	r3, [r7, #28]
 800d230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d234:	695b      	ldr	r3, [r3, #20]
 800d236:	69fa      	ldr	r2, [r7, #28]
 800d238:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d23c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d240:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800d244:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800d246:	69fb      	ldr	r3, [r7, #28]
 800d248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d24c:	691b      	ldr	r3, [r3, #16]
 800d24e:	69fa      	ldr	r2, [r7, #28]
 800d250:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d254:	f043 030b 	orr.w	r3, r3, #11
 800d258:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	69fa      	ldr	r2, [r7, #28]
 800d264:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d268:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d26c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6818      	ldr	r0, [r3, #0]
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	691b      	ldr	r3, [r3, #16]
 800d276:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800d27e:	461a      	mov	r2, r3
 800d280:	f004 f89e 	bl	80113c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	695a      	ldr	r2, [r3, #20]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800d292:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	4618      	mov	r0, r3
 800d29a:	f003 ffcc 	bl	8011236 <USB_ReadInterrupts>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d2a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d2a8:	d124      	bne.n	800d2f4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f004 f862 	bl	8011378 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f003 f902 	bl	80104c2 <USB_GetDevSpeed>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681c      	ldr	r4, [r3, #0]
 800d2ca:	f001 f951 	bl	800e570 <HAL_RCC_GetHCLKFreq>
 800d2ce:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800d2d4:	b2db      	uxtb	r3, r3
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	4620      	mov	r0, r4
 800d2da:	f002 fe3f 	bl	800ff5c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f008 fea9 	bl	8016036 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	695a      	ldr	r2, [r3, #20]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800d2f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f003 ff9c 	bl	8011236 <USB_ReadInterrupts>
 800d2fe:	4603      	mov	r3, r0
 800d300:	f003 0308 	and.w	r3, r3, #8
 800d304:	2b08      	cmp	r3, #8
 800d306:	d10a      	bne.n	800d31e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f008 fe86 	bl	801601a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	695a      	ldr	r2, [r3, #20]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f002 0208 	and.w	r2, r2, #8
 800d31c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	4618      	mov	r0, r3
 800d324:	f003 ff87 	bl	8011236 <USB_ReadInterrupts>
 800d328:	4603      	mov	r3, r0
 800d32a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d32e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d332:	d10f      	bne.n	800d354 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800d334:	2300      	movs	r3, #0
 800d336:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800d338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33a:	b2db      	uxtb	r3, r3
 800d33c:	4619      	mov	r1, r3
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f008 fee8 	bl	8016114 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	695a      	ldr	r2, [r3, #20]
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800d352:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4618      	mov	r0, r3
 800d35a:	f003 ff6c 	bl	8011236 <USB_ReadInterrupts>
 800d35e:	4603      	mov	r3, r0
 800d360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d364:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d368:	d10f      	bne.n	800d38a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800d36a:	2300      	movs	r3, #0
 800d36c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800d36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d370:	b2db      	uxtb	r3, r3
 800d372:	4619      	mov	r1, r3
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f008 febb 	bl	80160f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	695a      	ldr	r2, [r3, #20]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800d388:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4618      	mov	r0, r3
 800d390:	f003 ff51 	bl	8011236 <USB_ReadInterrupts>
 800d394:	4603      	mov	r3, r0
 800d396:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d39a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d39e:	d10a      	bne.n	800d3b6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f008 fec9 	bl	8016138 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	695a      	ldr	r2, [r3, #20]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800d3b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f003 ff3b 	bl	8011236 <USB_ReadInterrupts>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	f003 0304 	and.w	r3, r3, #4
 800d3c6:	2b04      	cmp	r3, #4
 800d3c8:	d115      	bne.n	800d3f6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	685b      	ldr	r3, [r3, #4]
 800d3d0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800d3d2:	69bb      	ldr	r3, [r7, #24]
 800d3d4:	f003 0304 	and.w	r3, r3, #4
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d002      	beq.n	800d3e2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f008 feb9 	bl	8016154 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	6859      	ldr	r1, [r3, #4]
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	69ba      	ldr	r2, [r7, #24]
 800d3ee:	430a      	orrs	r2, r1
 800d3f0:	605a      	str	r2, [r3, #4]
 800d3f2:	e000      	b.n	800d3f6 <HAL_PCD_IRQHandler+0x75e>
      return;
 800d3f4:	bf00      	nop
    }
  }
}
 800d3f6:	3734      	adds	r7, #52	; 0x34
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd90      	pop	{r4, r7, pc}

0800d3fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b082      	sub	sp, #8
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	460b      	mov	r3, r1
 800d406:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d40e:	2b01      	cmp	r3, #1
 800d410:	d101      	bne.n	800d416 <HAL_PCD_SetAddress+0x1a>
 800d412:	2302      	movs	r3, #2
 800d414:	e013      	b.n	800d43e <HAL_PCD_SetAddress+0x42>
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2201      	movs	r2, #1
 800d41a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	78fa      	ldrb	r2, [r7, #3]
 800d422:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	78fa      	ldrb	r2, [r7, #3]
 800d42c:	4611      	mov	r1, r2
 800d42e:	4618      	mov	r0, r3
 800d430:	f003 fe99 	bl	8011166 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2200      	movs	r2, #0
 800d438:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d43c:	2300      	movs	r3, #0
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3708      	adds	r7, #8
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}

0800d446 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800d446:	b580      	push	{r7, lr}
 800d448:	b084      	sub	sp, #16
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	6078      	str	r0, [r7, #4]
 800d44e:	4608      	mov	r0, r1
 800d450:	4611      	mov	r1, r2
 800d452:	461a      	mov	r2, r3
 800d454:	4603      	mov	r3, r0
 800d456:	70fb      	strb	r3, [r7, #3]
 800d458:	460b      	mov	r3, r1
 800d45a:	803b      	strh	r3, [r7, #0]
 800d45c:	4613      	mov	r3, r2
 800d45e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800d460:	2300      	movs	r3, #0
 800d462:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d464:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	da0f      	bge.n	800d48c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d46c:	78fb      	ldrb	r3, [r7, #3]
 800d46e:	f003 020f 	and.w	r2, r3, #15
 800d472:	4613      	mov	r3, r2
 800d474:	00db      	lsls	r3, r3, #3
 800d476:	1a9b      	subs	r3, r3, r2
 800d478:	009b      	lsls	r3, r3, #2
 800d47a:	3338      	adds	r3, #56	; 0x38
 800d47c:	687a      	ldr	r2, [r7, #4]
 800d47e:	4413      	add	r3, r2
 800d480:	3304      	adds	r3, #4
 800d482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2201      	movs	r2, #1
 800d488:	705a      	strb	r2, [r3, #1]
 800d48a:	e00f      	b.n	800d4ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d48c:	78fb      	ldrb	r3, [r7, #3]
 800d48e:	f003 020f 	and.w	r2, r3, #15
 800d492:	4613      	mov	r3, r2
 800d494:	00db      	lsls	r3, r3, #3
 800d496:	1a9b      	subs	r3, r3, r2
 800d498:	009b      	lsls	r3, r3, #2
 800d49a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	4413      	add	r3, r2
 800d4a2:	3304      	adds	r3, #4
 800d4a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800d4ac:	78fb      	ldrb	r3, [r7, #3]
 800d4ae:	f003 030f 	and.w	r3, r3, #15
 800d4b2:	b2da      	uxtb	r2, r3
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800d4b8:	883a      	ldrh	r2, [r7, #0]
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	78ba      	ldrb	r2, [r7, #2]
 800d4c2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	785b      	ldrb	r3, [r3, #1]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d004      	beq.n	800d4d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	b29a      	uxth	r2, r3
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800d4d6:	78bb      	ldrb	r3, [r7, #2]
 800d4d8:	2b02      	cmp	r3, #2
 800d4da:	d102      	bne.n	800d4e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	d101      	bne.n	800d4f0 <HAL_PCD_EP_Open+0xaa>
 800d4ec:	2302      	movs	r3, #2
 800d4ee:	e00e      	b.n	800d50e <HAL_PCD_EP_Open+0xc8>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	68f9      	ldr	r1, [r7, #12]
 800d4fe:	4618      	mov	r0, r3
 800d500:	f003 f804 	bl	801050c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2200      	movs	r2, #0
 800d508:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800d50c:	7afb      	ldrb	r3, [r7, #11]
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3710      	adds	r7, #16
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}

0800d516 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d516:	b580      	push	{r7, lr}
 800d518:	b084      	sub	sp, #16
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	6078      	str	r0, [r7, #4]
 800d51e:	460b      	mov	r3, r1
 800d520:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d522:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d526:	2b00      	cmp	r3, #0
 800d528:	da0f      	bge.n	800d54a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d52a:	78fb      	ldrb	r3, [r7, #3]
 800d52c:	f003 020f 	and.w	r2, r3, #15
 800d530:	4613      	mov	r3, r2
 800d532:	00db      	lsls	r3, r3, #3
 800d534:	1a9b      	subs	r3, r3, r2
 800d536:	009b      	lsls	r3, r3, #2
 800d538:	3338      	adds	r3, #56	; 0x38
 800d53a:	687a      	ldr	r2, [r7, #4]
 800d53c:	4413      	add	r3, r2
 800d53e:	3304      	adds	r3, #4
 800d540:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2201      	movs	r2, #1
 800d546:	705a      	strb	r2, [r3, #1]
 800d548:	e00f      	b.n	800d56a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d54a:	78fb      	ldrb	r3, [r7, #3]
 800d54c:	f003 020f 	and.w	r2, r3, #15
 800d550:	4613      	mov	r3, r2
 800d552:	00db      	lsls	r3, r3, #3
 800d554:	1a9b      	subs	r3, r3, r2
 800d556:	009b      	lsls	r3, r3, #2
 800d558:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	4413      	add	r3, r2
 800d560:	3304      	adds	r3, #4
 800d562:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2200      	movs	r2, #0
 800d568:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800d56a:	78fb      	ldrb	r3, [r7, #3]
 800d56c:	f003 030f 	and.w	r3, r3, #15
 800d570:	b2da      	uxtb	r2, r3
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	d101      	bne.n	800d584 <HAL_PCD_EP_Close+0x6e>
 800d580:	2302      	movs	r3, #2
 800d582:	e00e      	b.n	800d5a2 <HAL_PCD_EP_Close+0x8c>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2201      	movs	r2, #1
 800d588:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	68f9      	ldr	r1, [r7, #12]
 800d592:	4618      	mov	r0, r3
 800d594:	f003 f842 	bl	801061c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2200      	movs	r2, #0
 800d59c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800d5a0:	2300      	movs	r3, #0
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3710      	adds	r7, #16
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}

0800d5aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b086      	sub	sp, #24
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	60f8      	str	r0, [r7, #12]
 800d5b2:	607a      	str	r2, [r7, #4]
 800d5b4:	603b      	str	r3, [r7, #0]
 800d5b6:	460b      	mov	r3, r1
 800d5b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d5ba:	7afb      	ldrb	r3, [r7, #11]
 800d5bc:	f003 020f 	and.w	r2, r3, #15
 800d5c0:	4613      	mov	r3, r2
 800d5c2:	00db      	lsls	r3, r3, #3
 800d5c4:	1a9b      	subs	r3, r3, r2
 800d5c6:	009b      	lsls	r3, r3, #2
 800d5c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d5cc:	68fa      	ldr	r2, [r7, #12]
 800d5ce:	4413      	add	r3, r2
 800d5d0:	3304      	adds	r3, #4
 800d5d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	687a      	ldr	r2, [r7, #4]
 800d5d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	683a      	ldr	r2, [r7, #0]
 800d5de:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d5ec:	7afb      	ldrb	r3, [r7, #11]
 800d5ee:	f003 030f 	and.w	r3, r3, #15
 800d5f2:	b2da      	uxtb	r2, r3
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	691b      	ldr	r3, [r3, #16]
 800d5fc:	2b01      	cmp	r3, #1
 800d5fe:	d102      	bne.n	800d606 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d606:	7afb      	ldrb	r3, [r7, #11]
 800d608:	f003 030f 	and.w	r3, r3, #15
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d109      	bne.n	800d624 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6818      	ldr	r0, [r3, #0]
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	691b      	ldr	r3, [r3, #16]
 800d618:	b2db      	uxtb	r3, r3
 800d61a:	461a      	mov	r2, r3
 800d61c:	6979      	ldr	r1, [r7, #20]
 800d61e:	f003 fb1d 	bl	8010c5c <USB_EP0StartXfer>
 800d622:	e008      	b.n	800d636 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	6818      	ldr	r0, [r3, #0]
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	691b      	ldr	r3, [r3, #16]
 800d62c:	b2db      	uxtb	r3, r3
 800d62e:	461a      	mov	r2, r3
 800d630:	6979      	ldr	r1, [r7, #20]
 800d632:	f003 f8cf 	bl	80107d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800d636:	2300      	movs	r3, #0
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3718      	adds	r7, #24
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	460b      	mov	r3, r1
 800d64a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d64c:	78fb      	ldrb	r3, [r7, #3]
 800d64e:	f003 020f 	and.w	r2, r3, #15
 800d652:	6879      	ldr	r1, [r7, #4]
 800d654:	4613      	mov	r3, r2
 800d656:	00db      	lsls	r3, r3, #3
 800d658:	1a9b      	subs	r3, r3, r2
 800d65a:	009b      	lsls	r3, r3, #2
 800d65c:	440b      	add	r3, r1
 800d65e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d662:	681b      	ldr	r3, [r3, #0]
}
 800d664:	4618      	mov	r0, r3
 800d666:	370c      	adds	r7, #12
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr

0800d670 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b086      	sub	sp, #24
 800d674:	af00      	add	r7, sp, #0
 800d676:	60f8      	str	r0, [r7, #12]
 800d678:	607a      	str	r2, [r7, #4]
 800d67a:	603b      	str	r3, [r7, #0]
 800d67c:	460b      	mov	r3, r1
 800d67e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d680:	7afb      	ldrb	r3, [r7, #11]
 800d682:	f003 020f 	and.w	r2, r3, #15
 800d686:	4613      	mov	r3, r2
 800d688:	00db      	lsls	r3, r3, #3
 800d68a:	1a9b      	subs	r3, r3, r2
 800d68c:	009b      	lsls	r3, r3, #2
 800d68e:	3338      	adds	r3, #56	; 0x38
 800d690:	68fa      	ldr	r2, [r7, #12]
 800d692:	4413      	add	r3, r2
 800d694:	3304      	adds	r3, #4
 800d696:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	687a      	ldr	r2, [r7, #4]
 800d69c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	683a      	ldr	r2, [r7, #0]
 800d6a2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d6b0:	7afb      	ldrb	r3, [r7, #11]
 800d6b2:	f003 030f 	and.w	r3, r3, #15
 800d6b6:	b2da      	uxtb	r2, r3
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	691b      	ldr	r3, [r3, #16]
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	d102      	bne.n	800d6ca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d6ca:	7afb      	ldrb	r3, [r7, #11]
 800d6cc:	f003 030f 	and.w	r3, r3, #15
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d109      	bne.n	800d6e8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	6818      	ldr	r0, [r3, #0]
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	691b      	ldr	r3, [r3, #16]
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	461a      	mov	r2, r3
 800d6e0:	6979      	ldr	r1, [r7, #20]
 800d6e2:	f003 fabb 	bl	8010c5c <USB_EP0StartXfer>
 800d6e6:	e008      	b.n	800d6fa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	6818      	ldr	r0, [r3, #0]
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	691b      	ldr	r3, [r3, #16]
 800d6f0:	b2db      	uxtb	r3, r3
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	6979      	ldr	r1, [r7, #20]
 800d6f6:	f003 f86d 	bl	80107d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800d6fa:	2300      	movs	r3, #0
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3718      	adds	r7, #24
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}

0800d704 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	460b      	mov	r3, r1
 800d70e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d710:	78fb      	ldrb	r3, [r7, #3]
 800d712:	f003 020f 	and.w	r2, r3, #15
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	685b      	ldr	r3, [r3, #4]
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d901      	bls.n	800d722 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800d71e:	2301      	movs	r3, #1
 800d720:	e050      	b.n	800d7c4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d722:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d726:	2b00      	cmp	r3, #0
 800d728:	da0f      	bge.n	800d74a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d72a:	78fb      	ldrb	r3, [r7, #3]
 800d72c:	f003 020f 	and.w	r2, r3, #15
 800d730:	4613      	mov	r3, r2
 800d732:	00db      	lsls	r3, r3, #3
 800d734:	1a9b      	subs	r3, r3, r2
 800d736:	009b      	lsls	r3, r3, #2
 800d738:	3338      	adds	r3, #56	; 0x38
 800d73a:	687a      	ldr	r2, [r7, #4]
 800d73c:	4413      	add	r3, r2
 800d73e:	3304      	adds	r3, #4
 800d740:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2201      	movs	r2, #1
 800d746:	705a      	strb	r2, [r3, #1]
 800d748:	e00d      	b.n	800d766 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d74a:	78fa      	ldrb	r2, [r7, #3]
 800d74c:	4613      	mov	r3, r2
 800d74e:	00db      	lsls	r3, r3, #3
 800d750:	1a9b      	subs	r3, r3, r2
 800d752:	009b      	lsls	r3, r3, #2
 800d754:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	4413      	add	r3, r2
 800d75c:	3304      	adds	r3, #4
 800d75e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2200      	movs	r2, #0
 800d764:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2201      	movs	r2, #1
 800d76a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d76c:	78fb      	ldrb	r3, [r7, #3]
 800d76e:	f003 030f 	and.w	r3, r3, #15
 800d772:	b2da      	uxtb	r2, r3
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d101      	bne.n	800d786 <HAL_PCD_EP_SetStall+0x82>
 800d782:	2302      	movs	r3, #2
 800d784:	e01e      	b.n	800d7c4 <HAL_PCD_EP_SetStall+0xc0>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2201      	movs	r2, #1
 800d78a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	68f9      	ldr	r1, [r7, #12]
 800d794:	4618      	mov	r0, r3
 800d796:	f003 fc12 	bl	8010fbe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d79a:	78fb      	ldrb	r3, [r7, #3]
 800d79c:	f003 030f 	and.w	r3, r3, #15
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d10a      	bne.n	800d7ba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6818      	ldr	r0, [r3, #0]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	691b      	ldr	r3, [r3, #16]
 800d7ac:	b2d9      	uxtb	r1, r3
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d7b4:	461a      	mov	r2, r3
 800d7b6:	f003 fe03 	bl	80113c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d7c2:	2300      	movs	r3, #0
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3710      	adds	r7, #16
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b084      	sub	sp, #16
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	460b      	mov	r3, r1
 800d7d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d7d8:	78fb      	ldrb	r3, [r7, #3]
 800d7da:	f003 020f 	and.w	r2, r3, #15
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	685b      	ldr	r3, [r3, #4]
 800d7e2:	429a      	cmp	r2, r3
 800d7e4:	d901      	bls.n	800d7ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	e042      	b.n	800d870 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d7ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	da0f      	bge.n	800d812 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d7f2:	78fb      	ldrb	r3, [r7, #3]
 800d7f4:	f003 020f 	and.w	r2, r3, #15
 800d7f8:	4613      	mov	r3, r2
 800d7fa:	00db      	lsls	r3, r3, #3
 800d7fc:	1a9b      	subs	r3, r3, r2
 800d7fe:	009b      	lsls	r3, r3, #2
 800d800:	3338      	adds	r3, #56	; 0x38
 800d802:	687a      	ldr	r2, [r7, #4]
 800d804:	4413      	add	r3, r2
 800d806:	3304      	adds	r3, #4
 800d808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2201      	movs	r2, #1
 800d80e:	705a      	strb	r2, [r3, #1]
 800d810:	e00f      	b.n	800d832 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d812:	78fb      	ldrb	r3, [r7, #3]
 800d814:	f003 020f 	and.w	r2, r3, #15
 800d818:	4613      	mov	r3, r2
 800d81a:	00db      	lsls	r3, r3, #3
 800d81c:	1a9b      	subs	r3, r3, r2
 800d81e:	009b      	lsls	r3, r3, #2
 800d820:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d824:	687a      	ldr	r2, [r7, #4]
 800d826:	4413      	add	r3, r2
 800d828:	3304      	adds	r3, #4
 800d82a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	2200      	movs	r2, #0
 800d830:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2200      	movs	r2, #0
 800d836:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d838:	78fb      	ldrb	r3, [r7, #3]
 800d83a:	f003 030f 	and.w	r3, r3, #15
 800d83e:	b2da      	uxtb	r2, r3
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d101      	bne.n	800d852 <HAL_PCD_EP_ClrStall+0x86>
 800d84e:	2302      	movs	r3, #2
 800d850:	e00e      	b.n	800d870 <HAL_PCD_EP_ClrStall+0xa4>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2201      	movs	r2, #1
 800d856:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	68f9      	ldr	r1, [r7, #12]
 800d860:	4618      	mov	r0, r3
 800d862:	f003 fc1a 	bl	801109a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2200      	movs	r2, #0
 800d86a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d86e:	2300      	movs	r3, #0
}
 800d870:	4618      	mov	r0, r3
 800d872:	3710      	adds	r7, #16
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}

0800d878 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b08a      	sub	sp, #40	; 0x28
 800d87c:	af02      	add	r7, sp, #8
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d88c:	683a      	ldr	r2, [r7, #0]
 800d88e:	4613      	mov	r3, r2
 800d890:	00db      	lsls	r3, r3, #3
 800d892:	1a9b      	subs	r3, r3, r2
 800d894:	009b      	lsls	r3, r3, #2
 800d896:	3338      	adds	r3, #56	; 0x38
 800d898:	687a      	ldr	r2, [r7, #4]
 800d89a:	4413      	add	r3, r2
 800d89c:	3304      	adds	r3, #4
 800d89e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	699a      	ldr	r2, [r3, #24]
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	695b      	ldr	r3, [r3, #20]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d901      	bls.n	800d8b0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	e06c      	b.n	800d98a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	695a      	ldr	r2, [r3, #20]
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	699b      	ldr	r3, [r3, #24]
 800d8b8:	1ad3      	subs	r3, r2, r3
 800d8ba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	689b      	ldr	r3, [r3, #8]
 800d8c0:	69fa      	ldr	r2, [r7, #28]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d902      	bls.n	800d8cc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	689b      	ldr	r3, [r3, #8]
 800d8ca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d8cc:	69fb      	ldr	r3, [r7, #28]
 800d8ce:	3303      	adds	r3, #3
 800d8d0:	089b      	lsrs	r3, r3, #2
 800d8d2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d8d4:	e02b      	b.n	800d92e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	695a      	ldr	r2, [r3, #20]
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	699b      	ldr	r3, [r3, #24]
 800d8de:	1ad3      	subs	r3, r2, r3
 800d8e0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	689b      	ldr	r3, [r3, #8]
 800d8e6:	69fa      	ldr	r2, [r7, #28]
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	d902      	bls.n	800d8f2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	689b      	ldr	r3, [r3, #8]
 800d8f0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d8f2:	69fb      	ldr	r3, [r7, #28]
 800d8f4:	3303      	adds	r3, #3
 800d8f6:	089b      	lsrs	r3, r3, #2
 800d8f8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	68d9      	ldr	r1, [r3, #12]
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	b2da      	uxtb	r2, r3
 800d902:	69fb      	ldr	r3, [r7, #28]
 800d904:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	9300      	str	r3, [sp, #0]
 800d90e:	4603      	mov	r3, r0
 800d910:	6978      	ldr	r0, [r7, #20]
 800d912:	f003 faf6 	bl	8010f02 <USB_WritePacket>

    ep->xfer_buff  += len;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	68da      	ldr	r2, [r3, #12]
 800d91a:	69fb      	ldr	r3, [r7, #28]
 800d91c:	441a      	add	r2, r3
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	699a      	ldr	r2, [r3, #24]
 800d926:	69fb      	ldr	r3, [r7, #28]
 800d928:	441a      	add	r2, r3
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	015a      	lsls	r2, r3, #5
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	4413      	add	r3, r2
 800d936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d93a:	699b      	ldr	r3, [r3, #24]
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	69ba      	ldr	r2, [r7, #24]
 800d940:	429a      	cmp	r2, r3
 800d942:	d809      	bhi.n	800d958 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	699a      	ldr	r2, [r3, #24]
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d203      	bcs.n	800d958 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	695b      	ldr	r3, [r3, #20]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d1be      	bne.n	800d8d6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	695a      	ldr	r2, [r3, #20]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	699b      	ldr	r3, [r3, #24]
 800d960:	429a      	cmp	r2, r3
 800d962:	d811      	bhi.n	800d988 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	f003 030f 	and.w	r3, r3, #15
 800d96a:	2201      	movs	r2, #1
 800d96c:	fa02 f303 	lsl.w	r3, r2, r3
 800d970:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	43db      	mvns	r3, r3
 800d97e:	6939      	ldr	r1, [r7, #16]
 800d980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d984:	4013      	ands	r3, r2
 800d986:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800d988:	2300      	movs	r3, #0
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3720      	adds	r7, #32
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
	...

0800d994 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b086      	sub	sp, #24
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	333c      	adds	r3, #60	; 0x3c
 800d9ac:	3304      	adds	r3, #4
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	015a      	lsls	r2, r3, #5
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	4413      	add	r3, r2
 800d9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9be:	689b      	ldr	r3, [r3, #8]
 800d9c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	691b      	ldr	r3, [r3, #16]
 800d9c6:	2b01      	cmp	r3, #1
 800d9c8:	f040 80a0 	bne.w	800db0c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	f003 0308 	and.w	r3, r3, #8
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d015      	beq.n	800da02 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	4a72      	ldr	r2, [pc, #456]	; (800dba4 <PCD_EP_OutXfrComplete_int+0x210>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	f240 80dd 	bls.w	800db9a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	f000 80d7 	beq.w	800db9a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	015a      	lsls	r2, r3, #5
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	4413      	add	r3, r2
 800d9f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9f8:	461a      	mov	r2, r3
 800d9fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d9fe:	6093      	str	r3, [r2, #8]
 800da00:	e0cb      	b.n	800db9a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	f003 0320 	and.w	r3, r3, #32
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d009      	beq.n	800da20 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	015a      	lsls	r2, r3, #5
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	4413      	add	r3, r2
 800da14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da18:	461a      	mov	r2, r3
 800da1a:	2320      	movs	r3, #32
 800da1c:	6093      	str	r3, [r2, #8]
 800da1e:	e0bc      	b.n	800db9a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800da26:	2b00      	cmp	r3, #0
 800da28:	f040 80b7 	bne.w	800db9a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	4a5d      	ldr	r2, [pc, #372]	; (800dba4 <PCD_EP_OutXfrComplete_int+0x210>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d90f      	bls.n	800da54 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d00a      	beq.n	800da54 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	015a      	lsls	r2, r3, #5
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	4413      	add	r3, r2
 800da46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da4a:	461a      	mov	r2, r3
 800da4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da50:	6093      	str	r3, [r2, #8]
 800da52:	e0a2      	b.n	800db9a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800da54:	6879      	ldr	r1, [r7, #4]
 800da56:	683a      	ldr	r2, [r7, #0]
 800da58:	4613      	mov	r3, r2
 800da5a:	00db      	lsls	r3, r3, #3
 800da5c:	1a9b      	subs	r3, r3, r2
 800da5e:	009b      	lsls	r3, r3, #2
 800da60:	440b      	add	r3, r1
 800da62:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800da66:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	0159      	lsls	r1, r3, #5
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	440b      	add	r3, r1
 800da70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da74:	691b      	ldr	r3, [r3, #16]
 800da76:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800da7a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	683a      	ldr	r2, [r7, #0]
 800da80:	4613      	mov	r3, r2
 800da82:	00db      	lsls	r3, r3, #3
 800da84:	1a9b      	subs	r3, r3, r2
 800da86:	009b      	lsls	r3, r3, #2
 800da88:	4403      	add	r3, r0
 800da8a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800da8e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800da90:	6879      	ldr	r1, [r7, #4]
 800da92:	683a      	ldr	r2, [r7, #0]
 800da94:	4613      	mov	r3, r2
 800da96:	00db      	lsls	r3, r3, #3
 800da98:	1a9b      	subs	r3, r3, r2
 800da9a:	009b      	lsls	r3, r3, #2
 800da9c:	440b      	add	r3, r1
 800da9e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800daa2:	6819      	ldr	r1, [r3, #0]
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	683a      	ldr	r2, [r7, #0]
 800daa8:	4613      	mov	r3, r2
 800daaa:	00db      	lsls	r3, r3, #3
 800daac:	1a9b      	subs	r3, r3, r2
 800daae:	009b      	lsls	r3, r3, #2
 800dab0:	4403      	add	r3, r0
 800dab2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4419      	add	r1, r3
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	683a      	ldr	r2, [r7, #0]
 800dabe:	4613      	mov	r3, r2
 800dac0:	00db      	lsls	r3, r3, #3
 800dac2:	1a9b      	subs	r3, r3, r2
 800dac4:	009b      	lsls	r3, r3, #2
 800dac6:	4403      	add	r3, r0
 800dac8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800dacc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d114      	bne.n	800dafe <PCD_EP_OutXfrComplete_int+0x16a>
 800dad4:	6879      	ldr	r1, [r7, #4]
 800dad6:	683a      	ldr	r2, [r7, #0]
 800dad8:	4613      	mov	r3, r2
 800dada:	00db      	lsls	r3, r3, #3
 800dadc:	1a9b      	subs	r3, r3, r2
 800dade:	009b      	lsls	r3, r3, #2
 800dae0:	440b      	add	r3, r1
 800dae2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d108      	bne.n	800dafe <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6818      	ldr	r0, [r3, #0]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800daf6:	461a      	mov	r2, r3
 800daf8:	2101      	movs	r1, #1
 800dafa:	f003 fc61 	bl	80113c0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	b2db      	uxtb	r3, r3
 800db02:	4619      	mov	r1, r3
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f008 fa53 	bl	8015fb0 <HAL_PCD_DataOutStageCallback>
 800db0a:	e046      	b.n	800db9a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	4a26      	ldr	r2, [pc, #152]	; (800dba8 <PCD_EP_OutXfrComplete_int+0x214>)
 800db10:	4293      	cmp	r3, r2
 800db12:	d124      	bne.n	800db5e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d00a      	beq.n	800db34 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	015a      	lsls	r2, r3, #5
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	4413      	add	r3, r2
 800db26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db2a:	461a      	mov	r2, r3
 800db2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db30:	6093      	str	r3, [r2, #8]
 800db32:	e032      	b.n	800db9a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	f003 0320 	and.w	r3, r3, #32
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d008      	beq.n	800db50 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	015a      	lsls	r2, r3, #5
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	4413      	add	r3, r2
 800db46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db4a:	461a      	mov	r2, r3
 800db4c:	2320      	movs	r3, #32
 800db4e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	b2db      	uxtb	r3, r3
 800db54:	4619      	mov	r1, r3
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f008 fa2a 	bl	8015fb0 <HAL_PCD_DataOutStageCallback>
 800db5c:	e01d      	b.n	800db9a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d114      	bne.n	800db8e <PCD_EP_OutXfrComplete_int+0x1fa>
 800db64:	6879      	ldr	r1, [r7, #4]
 800db66:	683a      	ldr	r2, [r7, #0]
 800db68:	4613      	mov	r3, r2
 800db6a:	00db      	lsls	r3, r3, #3
 800db6c:	1a9b      	subs	r3, r3, r2
 800db6e:	009b      	lsls	r3, r3, #2
 800db70:	440b      	add	r3, r1
 800db72:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d108      	bne.n	800db8e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6818      	ldr	r0, [r3, #0]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800db86:	461a      	mov	r2, r3
 800db88:	2100      	movs	r1, #0
 800db8a:	f003 fc19 	bl	80113c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	b2db      	uxtb	r3, r3
 800db92:	4619      	mov	r1, r3
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f008 fa0b 	bl	8015fb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800db9a:	2300      	movs	r3, #0
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3718      	adds	r7, #24
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	4f54300a 	.word	0x4f54300a
 800dba8:	4f54310a 	.word	0x4f54310a

0800dbac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b086      	sub	sp, #24
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	333c      	adds	r3, #60	; 0x3c
 800dbc4:	3304      	adds	r3, #4
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	015a      	lsls	r2, r3, #5
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	4413      	add	r3, r2
 800dbd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbd6:	689b      	ldr	r3, [r3, #8]
 800dbd8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	4a15      	ldr	r2, [pc, #84]	; (800dc34 <PCD_EP_OutSetupPacket_int+0x88>)
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	d90e      	bls.n	800dc00 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d009      	beq.n	800dc00 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	015a      	lsls	r2, r3, #5
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbf8:	461a      	mov	r2, r3
 800dbfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dbfe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f008 f9c3 	bl	8015f8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	4a0a      	ldr	r2, [pc, #40]	; (800dc34 <PCD_EP_OutSetupPacket_int+0x88>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d90c      	bls.n	800dc28 <PCD_EP_OutSetupPacket_int+0x7c>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	691b      	ldr	r3, [r3, #16]
 800dc12:	2b01      	cmp	r3, #1
 800dc14:	d108      	bne.n	800dc28 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6818      	ldr	r0, [r3, #0]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800dc20:	461a      	mov	r2, r3
 800dc22:	2101      	movs	r1, #1
 800dc24:	f003 fbcc 	bl	80113c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800dc28:	2300      	movs	r3, #0
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3718      	adds	r7, #24
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	4f54300a 	.word	0x4f54300a

0800dc38 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b085      	sub	sp, #20
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	460b      	mov	r3, r1
 800dc42:	70fb      	strb	r3, [r7, #3]
 800dc44:	4613      	mov	r3, r2
 800dc46:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc4e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800dc50:	78fb      	ldrb	r3, [r7, #3]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d107      	bne.n	800dc66 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800dc56:	883b      	ldrh	r3, [r7, #0]
 800dc58:	0419      	lsls	r1, r3, #16
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	68ba      	ldr	r2, [r7, #8]
 800dc60:	430a      	orrs	r2, r1
 800dc62:	629a      	str	r2, [r3, #40]	; 0x28
 800dc64:	e028      	b.n	800dcb8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc6c:	0c1b      	lsrs	r3, r3, #16
 800dc6e:	68ba      	ldr	r2, [r7, #8]
 800dc70:	4413      	add	r3, r2
 800dc72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800dc74:	2300      	movs	r3, #0
 800dc76:	73fb      	strb	r3, [r7, #15]
 800dc78:	e00d      	b.n	800dc96 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681a      	ldr	r2, [r3, #0]
 800dc7e:	7bfb      	ldrb	r3, [r7, #15]
 800dc80:	3340      	adds	r3, #64	; 0x40
 800dc82:	009b      	lsls	r3, r3, #2
 800dc84:	4413      	add	r3, r2
 800dc86:	685b      	ldr	r3, [r3, #4]
 800dc88:	0c1b      	lsrs	r3, r3, #16
 800dc8a:	68ba      	ldr	r2, [r7, #8]
 800dc8c:	4413      	add	r3, r2
 800dc8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800dc90:	7bfb      	ldrb	r3, [r7, #15]
 800dc92:	3301      	adds	r3, #1
 800dc94:	73fb      	strb	r3, [r7, #15]
 800dc96:	7bfa      	ldrb	r2, [r7, #15]
 800dc98:	78fb      	ldrb	r3, [r7, #3]
 800dc9a:	3b01      	subs	r3, #1
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d3ec      	bcc.n	800dc7a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800dca0:	883b      	ldrh	r3, [r7, #0]
 800dca2:	0418      	lsls	r0, r3, #16
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6819      	ldr	r1, [r3, #0]
 800dca8:	78fb      	ldrb	r3, [r7, #3]
 800dcaa:	3b01      	subs	r3, #1
 800dcac:	68ba      	ldr	r2, [r7, #8]
 800dcae:	4302      	orrs	r2, r0
 800dcb0:	3340      	adds	r3, #64	; 0x40
 800dcb2:	009b      	lsls	r3, r3, #2
 800dcb4:	440b      	add	r3, r1
 800dcb6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800dcb8:	2300      	movs	r3, #0
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3714      	adds	r7, #20
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc4:	4770      	bx	lr

0800dcc6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800dcc6:	b480      	push	{r7}
 800dcc8:	b083      	sub	sp, #12
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	6078      	str	r0, [r7, #4]
 800dcce:	460b      	mov	r3, r1
 800dcd0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	887a      	ldrh	r2, [r7, #2]
 800dcd8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800dcda:	2300      	movs	r3, #0
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	370c      	adds	r7, #12
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr

0800dce8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800dce8:	b480      	push	{r7}
 800dcea:	b083      	sub	sp, #12
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	460b      	mov	r3, r1
 800dcf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800dcf4:	bf00      	nop
 800dcf6:	370c      	adds	r7, #12
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr

0800dd00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b086      	sub	sp, #24
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d101      	bne.n	800dd12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800dd0e:	2301      	movs	r3, #1
 800dd10:	e25b      	b.n	800e1ca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	f003 0301 	and.w	r3, r3, #1
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d075      	beq.n	800de0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800dd1e:	4ba3      	ldr	r3, [pc, #652]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800dd20:	689b      	ldr	r3, [r3, #8]
 800dd22:	f003 030c 	and.w	r3, r3, #12
 800dd26:	2b04      	cmp	r3, #4
 800dd28:	d00c      	beq.n	800dd44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800dd2a:	4ba0      	ldr	r3, [pc, #640]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800dd2c:	689b      	ldr	r3, [r3, #8]
 800dd2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800dd32:	2b08      	cmp	r3, #8
 800dd34:	d112      	bne.n	800dd5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800dd36:	4b9d      	ldr	r3, [pc, #628]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dd3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd42:	d10b      	bne.n	800dd5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dd44:	4b99      	ldr	r3, [pc, #612]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d05b      	beq.n	800de08 <HAL_RCC_OscConfig+0x108>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	685b      	ldr	r3, [r3, #4]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d157      	bne.n	800de08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800dd58:	2301      	movs	r3, #1
 800dd5a:	e236      	b.n	800e1ca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd64:	d106      	bne.n	800dd74 <HAL_RCC_OscConfig+0x74>
 800dd66:	4b91      	ldr	r3, [pc, #580]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4a90      	ldr	r2, [pc, #576]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800dd6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dd70:	6013      	str	r3, [r2, #0]
 800dd72:	e01d      	b.n	800ddb0 <HAL_RCC_OscConfig+0xb0>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	685b      	ldr	r3, [r3, #4]
 800dd78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dd7c:	d10c      	bne.n	800dd98 <HAL_RCC_OscConfig+0x98>
 800dd7e:	4b8b      	ldr	r3, [pc, #556]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4a8a      	ldr	r2, [pc, #552]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800dd84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800dd88:	6013      	str	r3, [r2, #0]
 800dd8a:	4b88      	ldr	r3, [pc, #544]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	4a87      	ldr	r2, [pc, #540]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800dd90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dd94:	6013      	str	r3, [r2, #0]
 800dd96:	e00b      	b.n	800ddb0 <HAL_RCC_OscConfig+0xb0>
 800dd98:	4b84      	ldr	r3, [pc, #528]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	4a83      	ldr	r2, [pc, #524]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800dd9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dda2:	6013      	str	r3, [r2, #0]
 800dda4:	4b81      	ldr	r3, [pc, #516]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	4a80      	ldr	r2, [pc, #512]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800ddaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ddae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	685b      	ldr	r3, [r3, #4]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d013      	beq.n	800dde0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ddb8:	f7fd ff60 	bl	800bc7c <HAL_GetTick>
 800ddbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ddbe:	e008      	b.n	800ddd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ddc0:	f7fd ff5c 	bl	800bc7c <HAL_GetTick>
 800ddc4:	4602      	mov	r2, r0
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	1ad3      	subs	r3, r2, r3
 800ddca:	2b64      	cmp	r3, #100	; 0x64
 800ddcc:	d901      	bls.n	800ddd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ddce:	2303      	movs	r3, #3
 800ddd0:	e1fb      	b.n	800e1ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ddd2:	4b76      	ldr	r3, [pc, #472]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d0f0      	beq.n	800ddc0 <HAL_RCC_OscConfig+0xc0>
 800ddde:	e014      	b.n	800de0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dde0:	f7fd ff4c 	bl	800bc7c <HAL_GetTick>
 800dde4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dde6:	e008      	b.n	800ddfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800dde8:	f7fd ff48 	bl	800bc7c <HAL_GetTick>
 800ddec:	4602      	mov	r2, r0
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	1ad3      	subs	r3, r2, r3
 800ddf2:	2b64      	cmp	r3, #100	; 0x64
 800ddf4:	d901      	bls.n	800ddfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ddf6:	2303      	movs	r3, #3
 800ddf8:	e1e7      	b.n	800e1ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ddfa:	4b6c      	ldr	r3, [pc, #432]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de02:	2b00      	cmp	r3, #0
 800de04:	d1f0      	bne.n	800dde8 <HAL_RCC_OscConfig+0xe8>
 800de06:	e000      	b.n	800de0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800de08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	f003 0302 	and.w	r3, r3, #2
 800de12:	2b00      	cmp	r3, #0
 800de14:	d063      	beq.n	800dede <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800de16:	4b65      	ldr	r3, [pc, #404]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800de18:	689b      	ldr	r3, [r3, #8]
 800de1a:	f003 030c 	and.w	r3, r3, #12
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d00b      	beq.n	800de3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800de22:	4b62      	ldr	r3, [pc, #392]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800de24:	689b      	ldr	r3, [r3, #8]
 800de26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800de2a:	2b08      	cmp	r3, #8
 800de2c:	d11c      	bne.n	800de68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800de2e:	4b5f      	ldr	r3, [pc, #380]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800de30:	685b      	ldr	r3, [r3, #4]
 800de32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de36:	2b00      	cmp	r3, #0
 800de38:	d116      	bne.n	800de68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800de3a:	4b5c      	ldr	r3, [pc, #368]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	f003 0302 	and.w	r3, r3, #2
 800de42:	2b00      	cmp	r3, #0
 800de44:	d005      	beq.n	800de52 <HAL_RCC_OscConfig+0x152>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	68db      	ldr	r3, [r3, #12]
 800de4a:	2b01      	cmp	r3, #1
 800de4c:	d001      	beq.n	800de52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800de4e:	2301      	movs	r3, #1
 800de50:	e1bb      	b.n	800e1ca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800de52:	4b56      	ldr	r3, [pc, #344]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	691b      	ldr	r3, [r3, #16]
 800de5e:	00db      	lsls	r3, r3, #3
 800de60:	4952      	ldr	r1, [pc, #328]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800de62:	4313      	orrs	r3, r2
 800de64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800de66:	e03a      	b.n	800dede <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	68db      	ldr	r3, [r3, #12]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d020      	beq.n	800deb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800de70:	4b4f      	ldr	r3, [pc, #316]	; (800dfb0 <HAL_RCC_OscConfig+0x2b0>)
 800de72:	2201      	movs	r2, #1
 800de74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de76:	f7fd ff01 	bl	800bc7c <HAL_GetTick>
 800de7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800de7c:	e008      	b.n	800de90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800de7e:	f7fd fefd 	bl	800bc7c <HAL_GetTick>
 800de82:	4602      	mov	r2, r0
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	1ad3      	subs	r3, r2, r3
 800de88:	2b02      	cmp	r3, #2
 800de8a:	d901      	bls.n	800de90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800de8c:	2303      	movs	r3, #3
 800de8e:	e19c      	b.n	800e1ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800de90:	4b46      	ldr	r3, [pc, #280]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	f003 0302 	and.w	r3, r3, #2
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d0f0      	beq.n	800de7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800de9c:	4b43      	ldr	r3, [pc, #268]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	691b      	ldr	r3, [r3, #16]
 800dea8:	00db      	lsls	r3, r3, #3
 800deaa:	4940      	ldr	r1, [pc, #256]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800deac:	4313      	orrs	r3, r2
 800deae:	600b      	str	r3, [r1, #0]
 800deb0:	e015      	b.n	800dede <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800deb2:	4b3f      	ldr	r3, [pc, #252]	; (800dfb0 <HAL_RCC_OscConfig+0x2b0>)
 800deb4:	2200      	movs	r2, #0
 800deb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800deb8:	f7fd fee0 	bl	800bc7c <HAL_GetTick>
 800debc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800debe:	e008      	b.n	800ded2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dec0:	f7fd fedc 	bl	800bc7c <HAL_GetTick>
 800dec4:	4602      	mov	r2, r0
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	1ad3      	subs	r3, r2, r3
 800deca:	2b02      	cmp	r3, #2
 800decc:	d901      	bls.n	800ded2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800dece:	2303      	movs	r3, #3
 800ded0:	e17b      	b.n	800e1ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ded2:	4b36      	ldr	r3, [pc, #216]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f003 0302 	and.w	r3, r3, #2
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d1f0      	bne.n	800dec0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f003 0308 	and.w	r3, r3, #8
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d030      	beq.n	800df4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	695b      	ldr	r3, [r3, #20]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d016      	beq.n	800df20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800def2:	4b30      	ldr	r3, [pc, #192]	; (800dfb4 <HAL_RCC_OscConfig+0x2b4>)
 800def4:	2201      	movs	r2, #1
 800def6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800def8:	f7fd fec0 	bl	800bc7c <HAL_GetTick>
 800defc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800defe:	e008      	b.n	800df12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800df00:	f7fd febc 	bl	800bc7c <HAL_GetTick>
 800df04:	4602      	mov	r2, r0
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	1ad3      	subs	r3, r2, r3
 800df0a:	2b02      	cmp	r3, #2
 800df0c:	d901      	bls.n	800df12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800df0e:	2303      	movs	r3, #3
 800df10:	e15b      	b.n	800e1ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800df12:	4b26      	ldr	r3, [pc, #152]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800df14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df16:	f003 0302 	and.w	r3, r3, #2
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d0f0      	beq.n	800df00 <HAL_RCC_OscConfig+0x200>
 800df1e:	e015      	b.n	800df4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800df20:	4b24      	ldr	r3, [pc, #144]	; (800dfb4 <HAL_RCC_OscConfig+0x2b4>)
 800df22:	2200      	movs	r2, #0
 800df24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800df26:	f7fd fea9 	bl	800bc7c <HAL_GetTick>
 800df2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800df2c:	e008      	b.n	800df40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800df2e:	f7fd fea5 	bl	800bc7c <HAL_GetTick>
 800df32:	4602      	mov	r2, r0
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	1ad3      	subs	r3, r2, r3
 800df38:	2b02      	cmp	r3, #2
 800df3a:	d901      	bls.n	800df40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800df3c:	2303      	movs	r3, #3
 800df3e:	e144      	b.n	800e1ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800df40:	4b1a      	ldr	r3, [pc, #104]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800df42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df44:	f003 0302 	and.w	r3, r3, #2
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d1f0      	bne.n	800df2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f003 0304 	and.w	r3, r3, #4
 800df54:	2b00      	cmp	r3, #0
 800df56:	f000 80a0 	beq.w	800e09a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800df5a:	2300      	movs	r3, #0
 800df5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800df5e:	4b13      	ldr	r3, [pc, #76]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800df60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df66:	2b00      	cmp	r3, #0
 800df68:	d10f      	bne.n	800df8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800df6a:	2300      	movs	r3, #0
 800df6c:	60bb      	str	r3, [r7, #8]
 800df6e:	4b0f      	ldr	r3, [pc, #60]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800df70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df72:	4a0e      	ldr	r2, [pc, #56]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800df74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df78:	6413      	str	r3, [r2, #64]	; 0x40
 800df7a:	4b0c      	ldr	r3, [pc, #48]	; (800dfac <HAL_RCC_OscConfig+0x2ac>)
 800df7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df82:	60bb      	str	r3, [r7, #8]
 800df84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800df86:	2301      	movs	r3, #1
 800df88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800df8a:	4b0b      	ldr	r3, [pc, #44]	; (800dfb8 <HAL_RCC_OscConfig+0x2b8>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df92:	2b00      	cmp	r3, #0
 800df94:	d121      	bne.n	800dfda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800df96:	4b08      	ldr	r3, [pc, #32]	; (800dfb8 <HAL_RCC_OscConfig+0x2b8>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	4a07      	ldr	r2, [pc, #28]	; (800dfb8 <HAL_RCC_OscConfig+0x2b8>)
 800df9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dfa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dfa2:	f7fd fe6b 	bl	800bc7c <HAL_GetTick>
 800dfa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dfa8:	e011      	b.n	800dfce <HAL_RCC_OscConfig+0x2ce>
 800dfaa:	bf00      	nop
 800dfac:	40023800 	.word	0x40023800
 800dfb0:	42470000 	.word	0x42470000
 800dfb4:	42470e80 	.word	0x42470e80
 800dfb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dfbc:	f7fd fe5e 	bl	800bc7c <HAL_GetTick>
 800dfc0:	4602      	mov	r2, r0
 800dfc2:	693b      	ldr	r3, [r7, #16]
 800dfc4:	1ad3      	subs	r3, r2, r3
 800dfc6:	2b02      	cmp	r3, #2
 800dfc8:	d901      	bls.n	800dfce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800dfca:	2303      	movs	r3, #3
 800dfcc:	e0fd      	b.n	800e1ca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dfce:	4b81      	ldr	r3, [pc, #516]	; (800e1d4 <HAL_RCC_OscConfig+0x4d4>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d0f0      	beq.n	800dfbc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	689b      	ldr	r3, [r3, #8]
 800dfde:	2b01      	cmp	r3, #1
 800dfe0:	d106      	bne.n	800dff0 <HAL_RCC_OscConfig+0x2f0>
 800dfe2:	4b7d      	ldr	r3, [pc, #500]	; (800e1d8 <HAL_RCC_OscConfig+0x4d8>)
 800dfe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfe6:	4a7c      	ldr	r2, [pc, #496]	; (800e1d8 <HAL_RCC_OscConfig+0x4d8>)
 800dfe8:	f043 0301 	orr.w	r3, r3, #1
 800dfec:	6713      	str	r3, [r2, #112]	; 0x70
 800dfee:	e01c      	b.n	800e02a <HAL_RCC_OscConfig+0x32a>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	689b      	ldr	r3, [r3, #8]
 800dff4:	2b05      	cmp	r3, #5
 800dff6:	d10c      	bne.n	800e012 <HAL_RCC_OscConfig+0x312>
 800dff8:	4b77      	ldr	r3, [pc, #476]	; (800e1d8 <HAL_RCC_OscConfig+0x4d8>)
 800dffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dffc:	4a76      	ldr	r2, [pc, #472]	; (800e1d8 <HAL_RCC_OscConfig+0x4d8>)
 800dffe:	f043 0304 	orr.w	r3, r3, #4
 800e002:	6713      	str	r3, [r2, #112]	; 0x70
 800e004:	4b74      	ldr	r3, [pc, #464]	; (800e1d8 <HAL_RCC_OscConfig+0x4d8>)
 800e006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e008:	4a73      	ldr	r2, [pc, #460]	; (800e1d8 <HAL_RCC_OscConfig+0x4d8>)
 800e00a:	f043 0301 	orr.w	r3, r3, #1
 800e00e:	6713      	str	r3, [r2, #112]	; 0x70
 800e010:	e00b      	b.n	800e02a <HAL_RCC_OscConfig+0x32a>
 800e012:	4b71      	ldr	r3, [pc, #452]	; (800e1d8 <HAL_RCC_OscConfig+0x4d8>)
 800e014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e016:	4a70      	ldr	r2, [pc, #448]	; (800e1d8 <HAL_RCC_OscConfig+0x4d8>)
 800e018:	f023 0301 	bic.w	r3, r3, #1
 800e01c:	6713      	str	r3, [r2, #112]	; 0x70
 800e01e:	4b6e      	ldr	r3, [pc, #440]	; (800e1d8 <HAL_RCC_OscConfig+0x4d8>)
 800e020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e022:	4a6d      	ldr	r2, [pc, #436]	; (800e1d8 <HAL_RCC_OscConfig+0x4d8>)
 800e024:	f023 0304 	bic.w	r3, r3, #4
 800e028:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	689b      	ldr	r3, [r3, #8]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d015      	beq.n	800e05e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e032:	f7fd fe23 	bl	800bc7c <HAL_GetTick>
 800e036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e038:	e00a      	b.n	800e050 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e03a:	f7fd fe1f 	bl	800bc7c <HAL_GetTick>
 800e03e:	4602      	mov	r2, r0
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	1ad3      	subs	r3, r2, r3
 800e044:	f241 3288 	movw	r2, #5000	; 0x1388
 800e048:	4293      	cmp	r3, r2
 800e04a:	d901      	bls.n	800e050 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800e04c:	2303      	movs	r3, #3
 800e04e:	e0bc      	b.n	800e1ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e050:	4b61      	ldr	r3, [pc, #388]	; (800e1d8 <HAL_RCC_OscConfig+0x4d8>)
 800e052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e054:	f003 0302 	and.w	r3, r3, #2
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d0ee      	beq.n	800e03a <HAL_RCC_OscConfig+0x33a>
 800e05c:	e014      	b.n	800e088 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e05e:	f7fd fe0d 	bl	800bc7c <HAL_GetTick>
 800e062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e064:	e00a      	b.n	800e07c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e066:	f7fd fe09 	bl	800bc7c <HAL_GetTick>
 800e06a:	4602      	mov	r2, r0
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	1ad3      	subs	r3, r2, r3
 800e070:	f241 3288 	movw	r2, #5000	; 0x1388
 800e074:	4293      	cmp	r3, r2
 800e076:	d901      	bls.n	800e07c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800e078:	2303      	movs	r3, #3
 800e07a:	e0a6      	b.n	800e1ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e07c:	4b56      	ldr	r3, [pc, #344]	; (800e1d8 <HAL_RCC_OscConfig+0x4d8>)
 800e07e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e080:	f003 0302 	and.w	r3, r3, #2
 800e084:	2b00      	cmp	r3, #0
 800e086:	d1ee      	bne.n	800e066 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e088:	7dfb      	ldrb	r3, [r7, #23]
 800e08a:	2b01      	cmp	r3, #1
 800e08c:	d105      	bne.n	800e09a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e08e:	4b52      	ldr	r3, [pc, #328]	; (800e1d8 <HAL_RCC_OscConfig+0x4d8>)
 800e090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e092:	4a51      	ldr	r2, [pc, #324]	; (800e1d8 <HAL_RCC_OscConfig+0x4d8>)
 800e094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e098:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	699b      	ldr	r3, [r3, #24]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	f000 8092 	beq.w	800e1c8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e0a4:	4b4c      	ldr	r3, [pc, #304]	; (800e1d8 <HAL_RCC_OscConfig+0x4d8>)
 800e0a6:	689b      	ldr	r3, [r3, #8]
 800e0a8:	f003 030c 	and.w	r3, r3, #12
 800e0ac:	2b08      	cmp	r3, #8
 800e0ae:	d05c      	beq.n	800e16a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	699b      	ldr	r3, [r3, #24]
 800e0b4:	2b02      	cmp	r3, #2
 800e0b6:	d141      	bne.n	800e13c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e0b8:	4b48      	ldr	r3, [pc, #288]	; (800e1dc <HAL_RCC_OscConfig+0x4dc>)
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e0be:	f7fd fddd 	bl	800bc7c <HAL_GetTick>
 800e0c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e0c4:	e008      	b.n	800e0d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e0c6:	f7fd fdd9 	bl	800bc7c <HAL_GetTick>
 800e0ca:	4602      	mov	r2, r0
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	1ad3      	subs	r3, r2, r3
 800e0d0:	2b02      	cmp	r3, #2
 800e0d2:	d901      	bls.n	800e0d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800e0d4:	2303      	movs	r3, #3
 800e0d6:	e078      	b.n	800e1ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e0d8:	4b3f      	ldr	r3, [pc, #252]	; (800e1d8 <HAL_RCC_OscConfig+0x4d8>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d1f0      	bne.n	800e0c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	69da      	ldr	r2, [r3, #28]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6a1b      	ldr	r3, [r3, #32]
 800e0ec:	431a      	orrs	r2, r3
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f2:	019b      	lsls	r3, r3, #6
 800e0f4:	431a      	orrs	r2, r3
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0fa:	085b      	lsrs	r3, r3, #1
 800e0fc:	3b01      	subs	r3, #1
 800e0fe:	041b      	lsls	r3, r3, #16
 800e100:	431a      	orrs	r2, r3
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e106:	061b      	lsls	r3, r3, #24
 800e108:	4933      	ldr	r1, [pc, #204]	; (800e1d8 <HAL_RCC_OscConfig+0x4d8>)
 800e10a:	4313      	orrs	r3, r2
 800e10c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e10e:	4b33      	ldr	r3, [pc, #204]	; (800e1dc <HAL_RCC_OscConfig+0x4dc>)
 800e110:	2201      	movs	r2, #1
 800e112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e114:	f7fd fdb2 	bl	800bc7c <HAL_GetTick>
 800e118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e11a:	e008      	b.n	800e12e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e11c:	f7fd fdae 	bl	800bc7c <HAL_GetTick>
 800e120:	4602      	mov	r2, r0
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	1ad3      	subs	r3, r2, r3
 800e126:	2b02      	cmp	r3, #2
 800e128:	d901      	bls.n	800e12e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800e12a:	2303      	movs	r3, #3
 800e12c:	e04d      	b.n	800e1ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e12e:	4b2a      	ldr	r3, [pc, #168]	; (800e1d8 <HAL_RCC_OscConfig+0x4d8>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e136:	2b00      	cmp	r3, #0
 800e138:	d0f0      	beq.n	800e11c <HAL_RCC_OscConfig+0x41c>
 800e13a:	e045      	b.n	800e1c8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e13c:	4b27      	ldr	r3, [pc, #156]	; (800e1dc <HAL_RCC_OscConfig+0x4dc>)
 800e13e:	2200      	movs	r2, #0
 800e140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e142:	f7fd fd9b 	bl	800bc7c <HAL_GetTick>
 800e146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e148:	e008      	b.n	800e15c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e14a:	f7fd fd97 	bl	800bc7c <HAL_GetTick>
 800e14e:	4602      	mov	r2, r0
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	1ad3      	subs	r3, r2, r3
 800e154:	2b02      	cmp	r3, #2
 800e156:	d901      	bls.n	800e15c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800e158:	2303      	movs	r3, #3
 800e15a:	e036      	b.n	800e1ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e15c:	4b1e      	ldr	r3, [pc, #120]	; (800e1d8 <HAL_RCC_OscConfig+0x4d8>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e164:	2b00      	cmp	r3, #0
 800e166:	d1f0      	bne.n	800e14a <HAL_RCC_OscConfig+0x44a>
 800e168:	e02e      	b.n	800e1c8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	699b      	ldr	r3, [r3, #24]
 800e16e:	2b01      	cmp	r3, #1
 800e170:	d101      	bne.n	800e176 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800e172:	2301      	movs	r3, #1
 800e174:	e029      	b.n	800e1ca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e176:	4b18      	ldr	r3, [pc, #96]	; (800e1d8 <HAL_RCC_OscConfig+0x4d8>)
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	69db      	ldr	r3, [r3, #28]
 800e186:	429a      	cmp	r2, r3
 800e188:	d11c      	bne.n	800e1c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e194:	429a      	cmp	r2, r3
 800e196:	d115      	bne.n	800e1c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800e198:	68fa      	ldr	r2, [r7, #12]
 800e19a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e19e:	4013      	ands	r3, r2
 800e1a0:	687a      	ldr	r2, [r7, #4]
 800e1a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d10d      	bne.n	800e1c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800e1b2:	429a      	cmp	r2, r3
 800e1b4:	d106      	bne.n	800e1c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d001      	beq.n	800e1c8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	e000      	b.n	800e1ca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800e1c8:	2300      	movs	r3, #0
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3718      	adds	r7, #24
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
 800e1d2:	bf00      	nop
 800e1d4:	40007000 	.word	0x40007000
 800e1d8:	40023800 	.word	0x40023800
 800e1dc:	42470060 	.word	0x42470060

0800e1e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b084      	sub	sp, #16
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d101      	bne.n	800e1f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	e0cc      	b.n	800e38e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e1f4:	4b68      	ldr	r3, [pc, #416]	; (800e398 <HAL_RCC_ClockConfig+0x1b8>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	f003 030f 	and.w	r3, r3, #15
 800e1fc:	683a      	ldr	r2, [r7, #0]
 800e1fe:	429a      	cmp	r2, r3
 800e200:	d90c      	bls.n	800e21c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e202:	4b65      	ldr	r3, [pc, #404]	; (800e398 <HAL_RCC_ClockConfig+0x1b8>)
 800e204:	683a      	ldr	r2, [r7, #0]
 800e206:	b2d2      	uxtb	r2, r2
 800e208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e20a:	4b63      	ldr	r3, [pc, #396]	; (800e398 <HAL_RCC_ClockConfig+0x1b8>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f003 030f 	and.w	r3, r3, #15
 800e212:	683a      	ldr	r2, [r7, #0]
 800e214:	429a      	cmp	r2, r3
 800e216:	d001      	beq.n	800e21c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e218:	2301      	movs	r3, #1
 800e21a:	e0b8      	b.n	800e38e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f003 0302 	and.w	r3, r3, #2
 800e224:	2b00      	cmp	r3, #0
 800e226:	d020      	beq.n	800e26a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	f003 0304 	and.w	r3, r3, #4
 800e230:	2b00      	cmp	r3, #0
 800e232:	d005      	beq.n	800e240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e234:	4b59      	ldr	r3, [pc, #356]	; (800e39c <HAL_RCC_ClockConfig+0x1bc>)
 800e236:	689b      	ldr	r3, [r3, #8]
 800e238:	4a58      	ldr	r2, [pc, #352]	; (800e39c <HAL_RCC_ClockConfig+0x1bc>)
 800e23a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e23e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f003 0308 	and.w	r3, r3, #8
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d005      	beq.n	800e258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e24c:	4b53      	ldr	r3, [pc, #332]	; (800e39c <HAL_RCC_ClockConfig+0x1bc>)
 800e24e:	689b      	ldr	r3, [r3, #8]
 800e250:	4a52      	ldr	r2, [pc, #328]	; (800e39c <HAL_RCC_ClockConfig+0x1bc>)
 800e252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e258:	4b50      	ldr	r3, [pc, #320]	; (800e39c <HAL_RCC_ClockConfig+0x1bc>)
 800e25a:	689b      	ldr	r3, [r3, #8]
 800e25c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	689b      	ldr	r3, [r3, #8]
 800e264:	494d      	ldr	r1, [pc, #308]	; (800e39c <HAL_RCC_ClockConfig+0x1bc>)
 800e266:	4313      	orrs	r3, r2
 800e268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	f003 0301 	and.w	r3, r3, #1
 800e272:	2b00      	cmp	r3, #0
 800e274:	d044      	beq.n	800e300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	685b      	ldr	r3, [r3, #4]
 800e27a:	2b01      	cmp	r3, #1
 800e27c:	d107      	bne.n	800e28e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e27e:	4b47      	ldr	r3, [pc, #284]	; (800e39c <HAL_RCC_ClockConfig+0x1bc>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e286:	2b00      	cmp	r3, #0
 800e288:	d119      	bne.n	800e2be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e28a:	2301      	movs	r3, #1
 800e28c:	e07f      	b.n	800e38e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	685b      	ldr	r3, [r3, #4]
 800e292:	2b02      	cmp	r3, #2
 800e294:	d003      	beq.n	800e29e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e29a:	2b03      	cmp	r3, #3
 800e29c:	d107      	bne.n	800e2ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e29e:	4b3f      	ldr	r3, [pc, #252]	; (800e39c <HAL_RCC_ClockConfig+0x1bc>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d109      	bne.n	800e2be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	e06f      	b.n	800e38e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e2ae:	4b3b      	ldr	r3, [pc, #236]	; (800e39c <HAL_RCC_ClockConfig+0x1bc>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	f003 0302 	and.w	r3, r3, #2
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d101      	bne.n	800e2be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	e067      	b.n	800e38e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e2be:	4b37      	ldr	r3, [pc, #220]	; (800e39c <HAL_RCC_ClockConfig+0x1bc>)
 800e2c0:	689b      	ldr	r3, [r3, #8]
 800e2c2:	f023 0203 	bic.w	r2, r3, #3
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	685b      	ldr	r3, [r3, #4]
 800e2ca:	4934      	ldr	r1, [pc, #208]	; (800e39c <HAL_RCC_ClockConfig+0x1bc>)
 800e2cc:	4313      	orrs	r3, r2
 800e2ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e2d0:	f7fd fcd4 	bl	800bc7c <HAL_GetTick>
 800e2d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e2d6:	e00a      	b.n	800e2ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e2d8:	f7fd fcd0 	bl	800bc7c <HAL_GetTick>
 800e2dc:	4602      	mov	r2, r0
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	1ad3      	subs	r3, r2, r3
 800e2e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	d901      	bls.n	800e2ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e2ea:	2303      	movs	r3, #3
 800e2ec:	e04f      	b.n	800e38e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e2ee:	4b2b      	ldr	r3, [pc, #172]	; (800e39c <HAL_RCC_ClockConfig+0x1bc>)
 800e2f0:	689b      	ldr	r3, [r3, #8]
 800e2f2:	f003 020c 	and.w	r2, r3, #12
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	685b      	ldr	r3, [r3, #4]
 800e2fa:	009b      	lsls	r3, r3, #2
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d1eb      	bne.n	800e2d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e300:	4b25      	ldr	r3, [pc, #148]	; (800e398 <HAL_RCC_ClockConfig+0x1b8>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	f003 030f 	and.w	r3, r3, #15
 800e308:	683a      	ldr	r2, [r7, #0]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d20c      	bcs.n	800e328 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e30e:	4b22      	ldr	r3, [pc, #136]	; (800e398 <HAL_RCC_ClockConfig+0x1b8>)
 800e310:	683a      	ldr	r2, [r7, #0]
 800e312:	b2d2      	uxtb	r2, r2
 800e314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e316:	4b20      	ldr	r3, [pc, #128]	; (800e398 <HAL_RCC_ClockConfig+0x1b8>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f003 030f 	and.w	r3, r3, #15
 800e31e:	683a      	ldr	r2, [r7, #0]
 800e320:	429a      	cmp	r2, r3
 800e322:	d001      	beq.n	800e328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e324:	2301      	movs	r3, #1
 800e326:	e032      	b.n	800e38e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	f003 0304 	and.w	r3, r3, #4
 800e330:	2b00      	cmp	r3, #0
 800e332:	d008      	beq.n	800e346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e334:	4b19      	ldr	r3, [pc, #100]	; (800e39c <HAL_RCC_ClockConfig+0x1bc>)
 800e336:	689b      	ldr	r3, [r3, #8]
 800e338:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	68db      	ldr	r3, [r3, #12]
 800e340:	4916      	ldr	r1, [pc, #88]	; (800e39c <HAL_RCC_ClockConfig+0x1bc>)
 800e342:	4313      	orrs	r3, r2
 800e344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f003 0308 	and.w	r3, r3, #8
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d009      	beq.n	800e366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e352:	4b12      	ldr	r3, [pc, #72]	; (800e39c <HAL_RCC_ClockConfig+0x1bc>)
 800e354:	689b      	ldr	r3, [r3, #8]
 800e356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	691b      	ldr	r3, [r3, #16]
 800e35e:	00db      	lsls	r3, r3, #3
 800e360:	490e      	ldr	r1, [pc, #56]	; (800e39c <HAL_RCC_ClockConfig+0x1bc>)
 800e362:	4313      	orrs	r3, r2
 800e364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e366:	f000 f821 	bl	800e3ac <HAL_RCC_GetSysClockFreq>
 800e36a:	4602      	mov	r2, r0
 800e36c:	4b0b      	ldr	r3, [pc, #44]	; (800e39c <HAL_RCC_ClockConfig+0x1bc>)
 800e36e:	689b      	ldr	r3, [r3, #8]
 800e370:	091b      	lsrs	r3, r3, #4
 800e372:	f003 030f 	and.w	r3, r3, #15
 800e376:	490a      	ldr	r1, [pc, #40]	; (800e3a0 <HAL_RCC_ClockConfig+0x1c0>)
 800e378:	5ccb      	ldrb	r3, [r1, r3]
 800e37a:	fa22 f303 	lsr.w	r3, r2, r3
 800e37e:	4a09      	ldr	r2, [pc, #36]	; (800e3a4 <HAL_RCC_ClockConfig+0x1c4>)
 800e380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e382:	4b09      	ldr	r3, [pc, #36]	; (800e3a8 <HAL_RCC_ClockConfig+0x1c8>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	4618      	mov	r0, r3
 800e388:	f7fd f8ee 	bl	800b568 <HAL_InitTick>

  return HAL_OK;
 800e38c:	2300      	movs	r3, #0
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3710      	adds	r7, #16
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}
 800e396:	bf00      	nop
 800e398:	40023c00 	.word	0x40023c00
 800e39c:	40023800 	.word	0x40023800
 800e3a0:	0801cad0 	.word	0x0801cad0
 800e3a4:	2000408c 	.word	0x2000408c
 800e3a8:	20004090 	.word	0x20004090

0800e3ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e3ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e3b0:	b084      	sub	sp, #16
 800e3b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	607b      	str	r3, [r7, #4]
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	60fb      	str	r3, [r7, #12]
 800e3bc:	2300      	movs	r3, #0
 800e3be:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e3c4:	4b67      	ldr	r3, [pc, #412]	; (800e564 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e3c6:	689b      	ldr	r3, [r3, #8]
 800e3c8:	f003 030c 	and.w	r3, r3, #12
 800e3cc:	2b08      	cmp	r3, #8
 800e3ce:	d00d      	beq.n	800e3ec <HAL_RCC_GetSysClockFreq+0x40>
 800e3d0:	2b08      	cmp	r3, #8
 800e3d2:	f200 80bd 	bhi.w	800e550 <HAL_RCC_GetSysClockFreq+0x1a4>
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d002      	beq.n	800e3e0 <HAL_RCC_GetSysClockFreq+0x34>
 800e3da:	2b04      	cmp	r3, #4
 800e3dc:	d003      	beq.n	800e3e6 <HAL_RCC_GetSysClockFreq+0x3a>
 800e3de:	e0b7      	b.n	800e550 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e3e0:	4b61      	ldr	r3, [pc, #388]	; (800e568 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800e3e2:	60bb      	str	r3, [r7, #8]
       break;
 800e3e4:	e0b7      	b.n	800e556 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e3e6:	4b61      	ldr	r3, [pc, #388]	; (800e56c <HAL_RCC_GetSysClockFreq+0x1c0>)
 800e3e8:	60bb      	str	r3, [r7, #8]
      break;
 800e3ea:	e0b4      	b.n	800e556 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e3ec:	4b5d      	ldr	r3, [pc, #372]	; (800e564 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e3ee:	685b      	ldr	r3, [r3, #4]
 800e3f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e3f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e3f6:	4b5b      	ldr	r3, [pc, #364]	; (800e564 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e3f8:	685b      	ldr	r3, [r3, #4]
 800e3fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d04d      	beq.n	800e49e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e402:	4b58      	ldr	r3, [pc, #352]	; (800e564 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e404:	685b      	ldr	r3, [r3, #4]
 800e406:	099b      	lsrs	r3, r3, #6
 800e408:	461a      	mov	r2, r3
 800e40a:	f04f 0300 	mov.w	r3, #0
 800e40e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e412:	f04f 0100 	mov.w	r1, #0
 800e416:	ea02 0800 	and.w	r8, r2, r0
 800e41a:	ea03 0901 	and.w	r9, r3, r1
 800e41e:	4640      	mov	r0, r8
 800e420:	4649      	mov	r1, r9
 800e422:	f04f 0200 	mov.w	r2, #0
 800e426:	f04f 0300 	mov.w	r3, #0
 800e42a:	014b      	lsls	r3, r1, #5
 800e42c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e430:	0142      	lsls	r2, r0, #5
 800e432:	4610      	mov	r0, r2
 800e434:	4619      	mov	r1, r3
 800e436:	ebb0 0008 	subs.w	r0, r0, r8
 800e43a:	eb61 0109 	sbc.w	r1, r1, r9
 800e43e:	f04f 0200 	mov.w	r2, #0
 800e442:	f04f 0300 	mov.w	r3, #0
 800e446:	018b      	lsls	r3, r1, #6
 800e448:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e44c:	0182      	lsls	r2, r0, #6
 800e44e:	1a12      	subs	r2, r2, r0
 800e450:	eb63 0301 	sbc.w	r3, r3, r1
 800e454:	f04f 0000 	mov.w	r0, #0
 800e458:	f04f 0100 	mov.w	r1, #0
 800e45c:	00d9      	lsls	r1, r3, #3
 800e45e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e462:	00d0      	lsls	r0, r2, #3
 800e464:	4602      	mov	r2, r0
 800e466:	460b      	mov	r3, r1
 800e468:	eb12 0208 	adds.w	r2, r2, r8
 800e46c:	eb43 0309 	adc.w	r3, r3, r9
 800e470:	f04f 0000 	mov.w	r0, #0
 800e474:	f04f 0100 	mov.w	r1, #0
 800e478:	0259      	lsls	r1, r3, #9
 800e47a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800e47e:	0250      	lsls	r0, r2, #9
 800e480:	4602      	mov	r2, r0
 800e482:	460b      	mov	r3, r1
 800e484:	4610      	mov	r0, r2
 800e486:	4619      	mov	r1, r3
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	461a      	mov	r2, r3
 800e48c:	f04f 0300 	mov.w	r3, #0
 800e490:	f7f2 fbfa 	bl	8000c88 <__aeabi_uldivmod>
 800e494:	4602      	mov	r2, r0
 800e496:	460b      	mov	r3, r1
 800e498:	4613      	mov	r3, r2
 800e49a:	60fb      	str	r3, [r7, #12]
 800e49c:	e04a      	b.n	800e534 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e49e:	4b31      	ldr	r3, [pc, #196]	; (800e564 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e4a0:	685b      	ldr	r3, [r3, #4]
 800e4a2:	099b      	lsrs	r3, r3, #6
 800e4a4:	461a      	mov	r2, r3
 800e4a6:	f04f 0300 	mov.w	r3, #0
 800e4aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e4ae:	f04f 0100 	mov.w	r1, #0
 800e4b2:	ea02 0400 	and.w	r4, r2, r0
 800e4b6:	ea03 0501 	and.w	r5, r3, r1
 800e4ba:	4620      	mov	r0, r4
 800e4bc:	4629      	mov	r1, r5
 800e4be:	f04f 0200 	mov.w	r2, #0
 800e4c2:	f04f 0300 	mov.w	r3, #0
 800e4c6:	014b      	lsls	r3, r1, #5
 800e4c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e4cc:	0142      	lsls	r2, r0, #5
 800e4ce:	4610      	mov	r0, r2
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	1b00      	subs	r0, r0, r4
 800e4d4:	eb61 0105 	sbc.w	r1, r1, r5
 800e4d8:	f04f 0200 	mov.w	r2, #0
 800e4dc:	f04f 0300 	mov.w	r3, #0
 800e4e0:	018b      	lsls	r3, r1, #6
 800e4e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e4e6:	0182      	lsls	r2, r0, #6
 800e4e8:	1a12      	subs	r2, r2, r0
 800e4ea:	eb63 0301 	sbc.w	r3, r3, r1
 800e4ee:	f04f 0000 	mov.w	r0, #0
 800e4f2:	f04f 0100 	mov.w	r1, #0
 800e4f6:	00d9      	lsls	r1, r3, #3
 800e4f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e4fc:	00d0      	lsls	r0, r2, #3
 800e4fe:	4602      	mov	r2, r0
 800e500:	460b      	mov	r3, r1
 800e502:	1912      	adds	r2, r2, r4
 800e504:	eb45 0303 	adc.w	r3, r5, r3
 800e508:	f04f 0000 	mov.w	r0, #0
 800e50c:	f04f 0100 	mov.w	r1, #0
 800e510:	0299      	lsls	r1, r3, #10
 800e512:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800e516:	0290      	lsls	r0, r2, #10
 800e518:	4602      	mov	r2, r0
 800e51a:	460b      	mov	r3, r1
 800e51c:	4610      	mov	r0, r2
 800e51e:	4619      	mov	r1, r3
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	461a      	mov	r2, r3
 800e524:	f04f 0300 	mov.w	r3, #0
 800e528:	f7f2 fbae 	bl	8000c88 <__aeabi_uldivmod>
 800e52c:	4602      	mov	r2, r0
 800e52e:	460b      	mov	r3, r1
 800e530:	4613      	mov	r3, r2
 800e532:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e534:	4b0b      	ldr	r3, [pc, #44]	; (800e564 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e536:	685b      	ldr	r3, [r3, #4]
 800e538:	0c1b      	lsrs	r3, r3, #16
 800e53a:	f003 0303 	and.w	r3, r3, #3
 800e53e:	3301      	adds	r3, #1
 800e540:	005b      	lsls	r3, r3, #1
 800e542:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800e544:	68fa      	ldr	r2, [r7, #12]
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	fbb2 f3f3 	udiv	r3, r2, r3
 800e54c:	60bb      	str	r3, [r7, #8]
      break;
 800e54e:	e002      	b.n	800e556 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e550:	4b05      	ldr	r3, [pc, #20]	; (800e568 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800e552:	60bb      	str	r3, [r7, #8]
      break;
 800e554:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e556:	68bb      	ldr	r3, [r7, #8]
}
 800e558:	4618      	mov	r0, r3
 800e55a:	3710      	adds	r7, #16
 800e55c:	46bd      	mov	sp, r7
 800e55e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e562:	bf00      	nop
 800e564:	40023800 	.word	0x40023800
 800e568:	00f42400 	.word	0x00f42400
 800e56c:	007a1200 	.word	0x007a1200

0800e570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e570:	b480      	push	{r7}
 800e572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e574:	4b03      	ldr	r3, [pc, #12]	; (800e584 <HAL_RCC_GetHCLKFreq+0x14>)
 800e576:	681b      	ldr	r3, [r3, #0]
}
 800e578:	4618      	mov	r0, r3
 800e57a:	46bd      	mov	sp, r7
 800e57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e580:	4770      	bx	lr
 800e582:	bf00      	nop
 800e584:	2000408c 	.word	0x2000408c

0800e588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e58c:	f7ff fff0 	bl	800e570 <HAL_RCC_GetHCLKFreq>
 800e590:	4602      	mov	r2, r0
 800e592:	4b05      	ldr	r3, [pc, #20]	; (800e5a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e594:	689b      	ldr	r3, [r3, #8]
 800e596:	0a9b      	lsrs	r3, r3, #10
 800e598:	f003 0307 	and.w	r3, r3, #7
 800e59c:	4903      	ldr	r1, [pc, #12]	; (800e5ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800e59e:	5ccb      	ldrb	r3, [r1, r3]
 800e5a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	40023800 	.word	0x40023800
 800e5ac:	0801cae0 	.word	0x0801cae0

0800e5b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e5b4:	f7ff ffdc 	bl	800e570 <HAL_RCC_GetHCLKFreq>
 800e5b8:	4602      	mov	r2, r0
 800e5ba:	4b05      	ldr	r3, [pc, #20]	; (800e5d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e5bc:	689b      	ldr	r3, [r3, #8]
 800e5be:	0b5b      	lsrs	r3, r3, #13
 800e5c0:	f003 0307 	and.w	r3, r3, #7
 800e5c4:	4903      	ldr	r1, [pc, #12]	; (800e5d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e5c6:	5ccb      	ldrb	r3, [r1, r3]
 800e5c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	bd80      	pop	{r7, pc}
 800e5d0:	40023800 	.word	0x40023800
 800e5d4:	0801cae0 	.word	0x0801cae0

0800e5d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	220f      	movs	r2, #15
 800e5e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e5e8:	4b12      	ldr	r3, [pc, #72]	; (800e634 <HAL_RCC_GetClockConfig+0x5c>)
 800e5ea:	689b      	ldr	r3, [r3, #8]
 800e5ec:	f003 0203 	and.w	r2, r3, #3
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e5f4:	4b0f      	ldr	r3, [pc, #60]	; (800e634 <HAL_RCC_GetClockConfig+0x5c>)
 800e5f6:	689b      	ldr	r3, [r3, #8]
 800e5f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e600:	4b0c      	ldr	r3, [pc, #48]	; (800e634 <HAL_RCC_GetClockConfig+0x5c>)
 800e602:	689b      	ldr	r3, [r3, #8]
 800e604:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800e60c:	4b09      	ldr	r3, [pc, #36]	; (800e634 <HAL_RCC_GetClockConfig+0x5c>)
 800e60e:	689b      	ldr	r3, [r3, #8]
 800e610:	08db      	lsrs	r3, r3, #3
 800e612:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e61a:	4b07      	ldr	r3, [pc, #28]	; (800e638 <HAL_RCC_GetClockConfig+0x60>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f003 020f 	and.w	r2, r3, #15
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	601a      	str	r2, [r3, #0]
}
 800e626:	bf00      	nop
 800e628:	370c      	adds	r7, #12
 800e62a:	46bd      	mov	sp, r7
 800e62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e630:	4770      	bx	lr
 800e632:	bf00      	nop
 800e634:	40023800 	.word	0x40023800
 800e638:	40023c00 	.word	0x40023c00

0800e63c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d101      	bne.n	800e64e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e64a:	2301      	movs	r3, #1
 800e64c:	e01d      	b.n	800e68a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e654:	b2db      	uxtb	r3, r3
 800e656:	2b00      	cmp	r3, #0
 800e658:	d106      	bne.n	800e668 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2200      	movs	r2, #0
 800e65e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f7fd f99a 	bl	800b99c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2202      	movs	r2, #2
 800e66c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681a      	ldr	r2, [r3, #0]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	3304      	adds	r3, #4
 800e678:	4619      	mov	r1, r3
 800e67a:	4610      	mov	r0, r2
 800e67c:	f000 fa46 	bl	800eb0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2201      	movs	r2, #1
 800e684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e688:	2300      	movs	r3, #0
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3708      	adds	r7, #8
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}

0800e692 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e692:	b480      	push	{r7}
 800e694:	b085      	sub	sp, #20
 800e696:	af00      	add	r7, sp, #0
 800e698:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2202      	movs	r2, #2
 800e69e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	689b      	ldr	r3, [r3, #8]
 800e6a8:	f003 0307 	and.w	r3, r3, #7
 800e6ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	2b06      	cmp	r3, #6
 800e6b2:	d007      	beq.n	800e6c4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	681a      	ldr	r2, [r3, #0]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f042 0201 	orr.w	r2, r2, #1
 800e6c2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e6cc:	2300      	movs	r3, #0
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3714      	adds	r7, #20
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d8:	4770      	bx	lr

0800e6da <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e6da:	b480      	push	{r7}
 800e6dc:	b085      	sub	sp, #20
 800e6de:	af00      	add	r7, sp, #0
 800e6e0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	68da      	ldr	r2, [r3, #12]
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	f042 0201 	orr.w	r2, r2, #1
 800e6f0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	689b      	ldr	r3, [r3, #8]
 800e6f8:	f003 0307 	and.w	r3, r3, #7
 800e6fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	2b06      	cmp	r3, #6
 800e702:	d007      	beq.n	800e714 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	681a      	ldr	r2, [r3, #0]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f042 0201 	orr.w	r2, r2, #1
 800e712:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e714:	2300      	movs	r3, #0
}
 800e716:	4618      	mov	r0, r3
 800e718:	3714      	adds	r7, #20
 800e71a:	46bd      	mov	sp, r7
 800e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e720:	4770      	bx	lr

0800e722 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e722:	b580      	push	{r7, lr}
 800e724:	b082      	sub	sp, #8
 800e726:	af00      	add	r7, sp, #0
 800e728:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	691b      	ldr	r3, [r3, #16]
 800e730:	f003 0302 	and.w	r3, r3, #2
 800e734:	2b02      	cmp	r3, #2
 800e736:	d122      	bne.n	800e77e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	68db      	ldr	r3, [r3, #12]
 800e73e:	f003 0302 	and.w	r3, r3, #2
 800e742:	2b02      	cmp	r3, #2
 800e744:	d11b      	bne.n	800e77e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f06f 0202 	mvn.w	r2, #2
 800e74e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2201      	movs	r2, #1
 800e754:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	699b      	ldr	r3, [r3, #24]
 800e75c:	f003 0303 	and.w	r3, r3, #3
 800e760:	2b00      	cmp	r3, #0
 800e762:	d003      	beq.n	800e76c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f000 f9b2 	bl	800eace <HAL_TIM_IC_CaptureCallback>
 800e76a:	e005      	b.n	800e778 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f000 f9a4 	bl	800eaba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f000 f9b5 	bl	800eae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2200      	movs	r2, #0
 800e77c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	691b      	ldr	r3, [r3, #16]
 800e784:	f003 0304 	and.w	r3, r3, #4
 800e788:	2b04      	cmp	r3, #4
 800e78a:	d122      	bne.n	800e7d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	68db      	ldr	r3, [r3, #12]
 800e792:	f003 0304 	and.w	r3, r3, #4
 800e796:	2b04      	cmp	r3, #4
 800e798:	d11b      	bne.n	800e7d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f06f 0204 	mvn.w	r2, #4
 800e7a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2202      	movs	r2, #2
 800e7a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	699b      	ldr	r3, [r3, #24]
 800e7b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d003      	beq.n	800e7c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f000 f988 	bl	800eace <HAL_TIM_IC_CaptureCallback>
 800e7be:	e005      	b.n	800e7cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f000 f97a 	bl	800eaba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f000 f98b 	bl	800eae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	691b      	ldr	r3, [r3, #16]
 800e7d8:	f003 0308 	and.w	r3, r3, #8
 800e7dc:	2b08      	cmp	r3, #8
 800e7de:	d122      	bne.n	800e826 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	68db      	ldr	r3, [r3, #12]
 800e7e6:	f003 0308 	and.w	r3, r3, #8
 800e7ea:	2b08      	cmp	r3, #8
 800e7ec:	d11b      	bne.n	800e826 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f06f 0208 	mvn.w	r2, #8
 800e7f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2204      	movs	r2, #4
 800e7fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	69db      	ldr	r3, [r3, #28]
 800e804:	f003 0303 	and.w	r3, r3, #3
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d003      	beq.n	800e814 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f000 f95e 	bl	800eace <HAL_TIM_IC_CaptureCallback>
 800e812:	e005      	b.n	800e820 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f000 f950 	bl	800eaba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f000 f961 	bl	800eae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2200      	movs	r2, #0
 800e824:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	691b      	ldr	r3, [r3, #16]
 800e82c:	f003 0310 	and.w	r3, r3, #16
 800e830:	2b10      	cmp	r3, #16
 800e832:	d122      	bne.n	800e87a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	68db      	ldr	r3, [r3, #12]
 800e83a:	f003 0310 	and.w	r3, r3, #16
 800e83e:	2b10      	cmp	r3, #16
 800e840:	d11b      	bne.n	800e87a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f06f 0210 	mvn.w	r2, #16
 800e84a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2208      	movs	r2, #8
 800e850:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	69db      	ldr	r3, [r3, #28]
 800e858:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d003      	beq.n	800e868 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f000 f934 	bl	800eace <HAL_TIM_IC_CaptureCallback>
 800e866:	e005      	b.n	800e874 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f000 f926 	bl	800eaba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f000 f937 	bl	800eae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2200      	movs	r2, #0
 800e878:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	691b      	ldr	r3, [r3, #16]
 800e880:	f003 0301 	and.w	r3, r3, #1
 800e884:	2b01      	cmp	r3, #1
 800e886:	d10e      	bne.n	800e8a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	68db      	ldr	r3, [r3, #12]
 800e88e:	f003 0301 	and.w	r3, r3, #1
 800e892:	2b01      	cmp	r3, #1
 800e894:	d107      	bne.n	800e8a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f06f 0201 	mvn.w	r2, #1
 800e89e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f7f7 f9c1 	bl	8005c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	691b      	ldr	r3, [r3, #16]
 800e8ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8b0:	2b80      	cmp	r3, #128	; 0x80
 800e8b2:	d10e      	bne.n	800e8d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	68db      	ldr	r3, [r3, #12]
 800e8ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8be:	2b80      	cmp	r3, #128	; 0x80
 800e8c0:	d107      	bne.n	800e8d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e8ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f000 fadd 	bl	800ee8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	691b      	ldr	r3, [r3, #16]
 800e8d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8dc:	2b40      	cmp	r3, #64	; 0x40
 800e8de:	d10e      	bne.n	800e8fe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	68db      	ldr	r3, [r3, #12]
 800e8e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8ea:	2b40      	cmp	r3, #64	; 0x40
 800e8ec:	d107      	bne.n	800e8fe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e8f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f000 f8fc 	bl	800eaf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	691b      	ldr	r3, [r3, #16]
 800e904:	f003 0320 	and.w	r3, r3, #32
 800e908:	2b20      	cmp	r3, #32
 800e90a:	d10e      	bne.n	800e92a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	68db      	ldr	r3, [r3, #12]
 800e912:	f003 0320 	and.w	r3, r3, #32
 800e916:	2b20      	cmp	r3, #32
 800e918:	d107      	bne.n	800e92a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	f06f 0220 	mvn.w	r2, #32
 800e922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f000 faa7 	bl	800ee78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e92a:	bf00      	nop
 800e92c:	3708      	adds	r7, #8
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}

0800e932 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e932:	b580      	push	{r7, lr}
 800e934:	b084      	sub	sp, #16
 800e936:	af00      	add	r7, sp, #0
 800e938:	6078      	str	r0, [r7, #4]
 800e93a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e942:	2b01      	cmp	r3, #1
 800e944:	d101      	bne.n	800e94a <HAL_TIM_ConfigClockSource+0x18>
 800e946:	2302      	movs	r3, #2
 800e948:	e0b3      	b.n	800eab2 <HAL_TIM_ConfigClockSource+0x180>
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2201      	movs	r2, #1
 800e94e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2202      	movs	r2, #2
 800e956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	689b      	ldr	r3, [r3, #8]
 800e960:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e968:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e970:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	68fa      	ldr	r2, [r7, #12]
 800e978:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e982:	d03e      	beq.n	800ea02 <HAL_TIM_ConfigClockSource+0xd0>
 800e984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e988:	f200 8087 	bhi.w	800ea9a <HAL_TIM_ConfigClockSource+0x168>
 800e98c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e990:	f000 8085 	beq.w	800ea9e <HAL_TIM_ConfigClockSource+0x16c>
 800e994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e998:	d87f      	bhi.n	800ea9a <HAL_TIM_ConfigClockSource+0x168>
 800e99a:	2b70      	cmp	r3, #112	; 0x70
 800e99c:	d01a      	beq.n	800e9d4 <HAL_TIM_ConfigClockSource+0xa2>
 800e99e:	2b70      	cmp	r3, #112	; 0x70
 800e9a0:	d87b      	bhi.n	800ea9a <HAL_TIM_ConfigClockSource+0x168>
 800e9a2:	2b60      	cmp	r3, #96	; 0x60
 800e9a4:	d050      	beq.n	800ea48 <HAL_TIM_ConfigClockSource+0x116>
 800e9a6:	2b60      	cmp	r3, #96	; 0x60
 800e9a8:	d877      	bhi.n	800ea9a <HAL_TIM_ConfigClockSource+0x168>
 800e9aa:	2b50      	cmp	r3, #80	; 0x50
 800e9ac:	d03c      	beq.n	800ea28 <HAL_TIM_ConfigClockSource+0xf6>
 800e9ae:	2b50      	cmp	r3, #80	; 0x50
 800e9b0:	d873      	bhi.n	800ea9a <HAL_TIM_ConfigClockSource+0x168>
 800e9b2:	2b40      	cmp	r3, #64	; 0x40
 800e9b4:	d058      	beq.n	800ea68 <HAL_TIM_ConfigClockSource+0x136>
 800e9b6:	2b40      	cmp	r3, #64	; 0x40
 800e9b8:	d86f      	bhi.n	800ea9a <HAL_TIM_ConfigClockSource+0x168>
 800e9ba:	2b30      	cmp	r3, #48	; 0x30
 800e9bc:	d064      	beq.n	800ea88 <HAL_TIM_ConfigClockSource+0x156>
 800e9be:	2b30      	cmp	r3, #48	; 0x30
 800e9c0:	d86b      	bhi.n	800ea9a <HAL_TIM_ConfigClockSource+0x168>
 800e9c2:	2b20      	cmp	r3, #32
 800e9c4:	d060      	beq.n	800ea88 <HAL_TIM_ConfigClockSource+0x156>
 800e9c6:	2b20      	cmp	r3, #32
 800e9c8:	d867      	bhi.n	800ea9a <HAL_TIM_ConfigClockSource+0x168>
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d05c      	beq.n	800ea88 <HAL_TIM_ConfigClockSource+0x156>
 800e9ce:	2b10      	cmp	r3, #16
 800e9d0:	d05a      	beq.n	800ea88 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e9d2:	e062      	b.n	800ea9a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6818      	ldr	r0, [r3, #0]
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	6899      	ldr	r1, [r3, #8]
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	685a      	ldr	r2, [r3, #4]
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	68db      	ldr	r3, [r3, #12]
 800e9e4:	f000 f9ac 	bl	800ed40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	689b      	ldr	r3, [r3, #8]
 800e9ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e9f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	68fa      	ldr	r2, [r7, #12]
 800e9fe:	609a      	str	r2, [r3, #8]
      break;
 800ea00:	e04e      	b.n	800eaa0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6818      	ldr	r0, [r3, #0]
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	6899      	ldr	r1, [r3, #8]
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	685a      	ldr	r2, [r3, #4]
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	68db      	ldr	r3, [r3, #12]
 800ea12:	f000 f995 	bl	800ed40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	689a      	ldr	r2, [r3, #8]
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ea24:	609a      	str	r2, [r3, #8]
      break;
 800ea26:	e03b      	b.n	800eaa0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6818      	ldr	r0, [r3, #0]
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	6859      	ldr	r1, [r3, #4]
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	68db      	ldr	r3, [r3, #12]
 800ea34:	461a      	mov	r2, r3
 800ea36:	f000 f909 	bl	800ec4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	2150      	movs	r1, #80	; 0x50
 800ea40:	4618      	mov	r0, r3
 800ea42:	f000 f962 	bl	800ed0a <TIM_ITRx_SetConfig>
      break;
 800ea46:	e02b      	b.n	800eaa0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6818      	ldr	r0, [r3, #0]
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	6859      	ldr	r1, [r3, #4]
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	68db      	ldr	r3, [r3, #12]
 800ea54:	461a      	mov	r2, r3
 800ea56:	f000 f928 	bl	800ecaa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	2160      	movs	r1, #96	; 0x60
 800ea60:	4618      	mov	r0, r3
 800ea62:	f000 f952 	bl	800ed0a <TIM_ITRx_SetConfig>
      break;
 800ea66:	e01b      	b.n	800eaa0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6818      	ldr	r0, [r3, #0]
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	6859      	ldr	r1, [r3, #4]
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	68db      	ldr	r3, [r3, #12]
 800ea74:	461a      	mov	r2, r3
 800ea76:	f000 f8e9 	bl	800ec4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	2140      	movs	r1, #64	; 0x40
 800ea80:	4618      	mov	r0, r3
 800ea82:	f000 f942 	bl	800ed0a <TIM_ITRx_SetConfig>
      break;
 800ea86:	e00b      	b.n	800eaa0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681a      	ldr	r2, [r3, #0]
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4619      	mov	r1, r3
 800ea92:	4610      	mov	r0, r2
 800ea94:	f000 f939 	bl	800ed0a <TIM_ITRx_SetConfig>
      break;
 800ea98:	e002      	b.n	800eaa0 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800ea9a:	bf00      	nop
 800ea9c:	e000      	b.n	800eaa0 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800ea9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2201      	movs	r2, #1
 800eaa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eab0:	2300      	movs	r3, #0
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3710      	adds	r7, #16
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}

0800eaba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eaba:	b480      	push	{r7}
 800eabc:	b083      	sub	sp, #12
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eac2:	bf00      	nop
 800eac4:	370c      	adds	r7, #12
 800eac6:	46bd      	mov	sp, r7
 800eac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eacc:	4770      	bx	lr

0800eace <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eace:	b480      	push	{r7}
 800ead0:	b083      	sub	sp, #12
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ead6:	bf00      	nop
 800ead8:	370c      	adds	r7, #12
 800eada:	46bd      	mov	sp, r7
 800eadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae0:	4770      	bx	lr

0800eae2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eae2:	b480      	push	{r7}
 800eae4:	b083      	sub	sp, #12
 800eae6:	af00      	add	r7, sp, #0
 800eae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eaea:	bf00      	nop
 800eaec:	370c      	adds	r7, #12
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr

0800eaf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eaf6:	b480      	push	{r7}
 800eaf8:	b083      	sub	sp, #12
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eafe:	bf00      	nop
 800eb00:	370c      	adds	r7, #12
 800eb02:	46bd      	mov	sp, r7
 800eb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb08:	4770      	bx	lr
	...

0800eb0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b085      	sub	sp, #20
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	4a40      	ldr	r2, [pc, #256]	; (800ec20 <TIM_Base_SetConfig+0x114>)
 800eb20:	4293      	cmp	r3, r2
 800eb22:	d013      	beq.n	800eb4c <TIM_Base_SetConfig+0x40>
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb2a:	d00f      	beq.n	800eb4c <TIM_Base_SetConfig+0x40>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	4a3d      	ldr	r2, [pc, #244]	; (800ec24 <TIM_Base_SetConfig+0x118>)
 800eb30:	4293      	cmp	r3, r2
 800eb32:	d00b      	beq.n	800eb4c <TIM_Base_SetConfig+0x40>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	4a3c      	ldr	r2, [pc, #240]	; (800ec28 <TIM_Base_SetConfig+0x11c>)
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	d007      	beq.n	800eb4c <TIM_Base_SetConfig+0x40>
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	4a3b      	ldr	r2, [pc, #236]	; (800ec2c <TIM_Base_SetConfig+0x120>)
 800eb40:	4293      	cmp	r3, r2
 800eb42:	d003      	beq.n	800eb4c <TIM_Base_SetConfig+0x40>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	4a3a      	ldr	r2, [pc, #232]	; (800ec30 <TIM_Base_SetConfig+0x124>)
 800eb48:	4293      	cmp	r3, r2
 800eb4a:	d108      	bne.n	800eb5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	68fa      	ldr	r2, [r7, #12]
 800eb5a:	4313      	orrs	r3, r2
 800eb5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	4a2f      	ldr	r2, [pc, #188]	; (800ec20 <TIM_Base_SetConfig+0x114>)
 800eb62:	4293      	cmp	r3, r2
 800eb64:	d02b      	beq.n	800ebbe <TIM_Base_SetConfig+0xb2>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb6c:	d027      	beq.n	800ebbe <TIM_Base_SetConfig+0xb2>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	4a2c      	ldr	r2, [pc, #176]	; (800ec24 <TIM_Base_SetConfig+0x118>)
 800eb72:	4293      	cmp	r3, r2
 800eb74:	d023      	beq.n	800ebbe <TIM_Base_SetConfig+0xb2>
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	4a2b      	ldr	r2, [pc, #172]	; (800ec28 <TIM_Base_SetConfig+0x11c>)
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d01f      	beq.n	800ebbe <TIM_Base_SetConfig+0xb2>
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	4a2a      	ldr	r2, [pc, #168]	; (800ec2c <TIM_Base_SetConfig+0x120>)
 800eb82:	4293      	cmp	r3, r2
 800eb84:	d01b      	beq.n	800ebbe <TIM_Base_SetConfig+0xb2>
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	4a29      	ldr	r2, [pc, #164]	; (800ec30 <TIM_Base_SetConfig+0x124>)
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d017      	beq.n	800ebbe <TIM_Base_SetConfig+0xb2>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	4a28      	ldr	r2, [pc, #160]	; (800ec34 <TIM_Base_SetConfig+0x128>)
 800eb92:	4293      	cmp	r3, r2
 800eb94:	d013      	beq.n	800ebbe <TIM_Base_SetConfig+0xb2>
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	4a27      	ldr	r2, [pc, #156]	; (800ec38 <TIM_Base_SetConfig+0x12c>)
 800eb9a:	4293      	cmp	r3, r2
 800eb9c:	d00f      	beq.n	800ebbe <TIM_Base_SetConfig+0xb2>
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	4a26      	ldr	r2, [pc, #152]	; (800ec3c <TIM_Base_SetConfig+0x130>)
 800eba2:	4293      	cmp	r3, r2
 800eba4:	d00b      	beq.n	800ebbe <TIM_Base_SetConfig+0xb2>
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	4a25      	ldr	r2, [pc, #148]	; (800ec40 <TIM_Base_SetConfig+0x134>)
 800ebaa:	4293      	cmp	r3, r2
 800ebac:	d007      	beq.n	800ebbe <TIM_Base_SetConfig+0xb2>
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	4a24      	ldr	r2, [pc, #144]	; (800ec44 <TIM_Base_SetConfig+0x138>)
 800ebb2:	4293      	cmp	r3, r2
 800ebb4:	d003      	beq.n	800ebbe <TIM_Base_SetConfig+0xb2>
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	4a23      	ldr	r2, [pc, #140]	; (800ec48 <TIM_Base_SetConfig+0x13c>)
 800ebba:	4293      	cmp	r3, r2
 800ebbc:	d108      	bne.n	800ebd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ebc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	68db      	ldr	r3, [r3, #12]
 800ebca:	68fa      	ldr	r2, [r7, #12]
 800ebcc:	4313      	orrs	r3, r2
 800ebce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	695b      	ldr	r3, [r3, #20]
 800ebda:	4313      	orrs	r3, r2
 800ebdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	68fa      	ldr	r2, [r7, #12]
 800ebe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	689a      	ldr	r2, [r3, #8]
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	681a      	ldr	r2, [r3, #0]
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	4a0a      	ldr	r2, [pc, #40]	; (800ec20 <TIM_Base_SetConfig+0x114>)
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	d003      	beq.n	800ec04 <TIM_Base_SetConfig+0xf8>
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	4a0c      	ldr	r2, [pc, #48]	; (800ec30 <TIM_Base_SetConfig+0x124>)
 800ec00:	4293      	cmp	r3, r2
 800ec02:	d103      	bne.n	800ec0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	691a      	ldr	r2, [r3, #16]
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2201      	movs	r2, #1
 800ec10:	615a      	str	r2, [r3, #20]
}
 800ec12:	bf00      	nop
 800ec14:	3714      	adds	r7, #20
 800ec16:	46bd      	mov	sp, r7
 800ec18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1c:	4770      	bx	lr
 800ec1e:	bf00      	nop
 800ec20:	40010000 	.word	0x40010000
 800ec24:	40000400 	.word	0x40000400
 800ec28:	40000800 	.word	0x40000800
 800ec2c:	40000c00 	.word	0x40000c00
 800ec30:	40010400 	.word	0x40010400
 800ec34:	40014000 	.word	0x40014000
 800ec38:	40014400 	.word	0x40014400
 800ec3c:	40014800 	.word	0x40014800
 800ec40:	40001800 	.word	0x40001800
 800ec44:	40001c00 	.word	0x40001c00
 800ec48:	40002000 	.word	0x40002000

0800ec4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b087      	sub	sp, #28
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	60f8      	str	r0, [r7, #12]
 800ec54:	60b9      	str	r1, [r7, #8]
 800ec56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	6a1b      	ldr	r3, [r3, #32]
 800ec5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	6a1b      	ldr	r3, [r3, #32]
 800ec62:	f023 0201 	bic.w	r2, r3, #1
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	699b      	ldr	r3, [r3, #24]
 800ec6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ec76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	011b      	lsls	r3, r3, #4
 800ec7c:	693a      	ldr	r2, [r7, #16]
 800ec7e:	4313      	orrs	r3, r2
 800ec80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	f023 030a 	bic.w	r3, r3, #10
 800ec88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ec8a:	697a      	ldr	r2, [r7, #20]
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	4313      	orrs	r3, r2
 800ec90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	693a      	ldr	r2, [r7, #16]
 800ec96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	697a      	ldr	r2, [r7, #20]
 800ec9c:	621a      	str	r2, [r3, #32]
}
 800ec9e:	bf00      	nop
 800eca0:	371c      	adds	r7, #28
 800eca2:	46bd      	mov	sp, r7
 800eca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca8:	4770      	bx	lr

0800ecaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ecaa:	b480      	push	{r7}
 800ecac:	b087      	sub	sp, #28
 800ecae:	af00      	add	r7, sp, #0
 800ecb0:	60f8      	str	r0, [r7, #12]
 800ecb2:	60b9      	str	r1, [r7, #8]
 800ecb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	6a1b      	ldr	r3, [r3, #32]
 800ecba:	f023 0210 	bic.w	r2, r3, #16
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	699b      	ldr	r3, [r3, #24]
 800ecc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	6a1b      	ldr	r3, [r3, #32]
 800eccc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ecd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	031b      	lsls	r3, r3, #12
 800ecda:	697a      	ldr	r2, [r7, #20]
 800ecdc:	4313      	orrs	r3, r2
 800ecde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ece6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	011b      	lsls	r3, r3, #4
 800ecec:	693a      	ldr	r2, [r7, #16]
 800ecee:	4313      	orrs	r3, r2
 800ecf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	697a      	ldr	r2, [r7, #20]
 800ecf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	693a      	ldr	r2, [r7, #16]
 800ecfc:	621a      	str	r2, [r3, #32]
}
 800ecfe:	bf00      	nop
 800ed00:	371c      	adds	r7, #28
 800ed02:	46bd      	mov	sp, r7
 800ed04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed08:	4770      	bx	lr

0800ed0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ed0a:	b480      	push	{r7}
 800ed0c:	b085      	sub	sp, #20
 800ed0e:	af00      	add	r7, sp, #0
 800ed10:	6078      	str	r0, [r7, #4]
 800ed12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	689b      	ldr	r3, [r3, #8]
 800ed18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ed22:	683a      	ldr	r2, [r7, #0]
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	4313      	orrs	r3, r2
 800ed28:	f043 0307 	orr.w	r3, r3, #7
 800ed2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	68fa      	ldr	r2, [r7, #12]
 800ed32:	609a      	str	r2, [r3, #8]
}
 800ed34:	bf00      	nop
 800ed36:	3714      	adds	r7, #20
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3e:	4770      	bx	lr

0800ed40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ed40:	b480      	push	{r7}
 800ed42:	b087      	sub	sp, #28
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	60f8      	str	r0, [r7, #12]
 800ed48:	60b9      	str	r1, [r7, #8]
 800ed4a:	607a      	str	r2, [r7, #4]
 800ed4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	689b      	ldr	r3, [r3, #8]
 800ed52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ed54:	697b      	ldr	r3, [r7, #20]
 800ed56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ed5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	021a      	lsls	r2, r3, #8
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	431a      	orrs	r2, r3
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	4313      	orrs	r3, r2
 800ed68:	697a      	ldr	r2, [r7, #20]
 800ed6a:	4313      	orrs	r3, r2
 800ed6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	697a      	ldr	r2, [r7, #20]
 800ed72:	609a      	str	r2, [r3, #8]
}
 800ed74:	bf00      	nop
 800ed76:	371c      	adds	r7, #28
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr

0800ed80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ed80:	b480      	push	{r7}
 800ed82:	b085      	sub	sp, #20
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
 800ed88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed90:	2b01      	cmp	r3, #1
 800ed92:	d101      	bne.n	800ed98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ed94:	2302      	movs	r3, #2
 800ed96:	e05a      	b.n	800ee4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2202      	movs	r2, #2
 800eda4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	685b      	ldr	r3, [r3, #4]
 800edae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	689b      	ldr	r3, [r3, #8]
 800edb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	68fa      	ldr	r2, [r7, #12]
 800edc6:	4313      	orrs	r3, r2
 800edc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	68fa      	ldr	r2, [r7, #12]
 800edd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	4a21      	ldr	r2, [pc, #132]	; (800ee5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800edd8:	4293      	cmp	r3, r2
 800edda:	d022      	beq.n	800ee22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ede4:	d01d      	beq.n	800ee22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	4a1d      	ldr	r2, [pc, #116]	; (800ee60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800edec:	4293      	cmp	r3, r2
 800edee:	d018      	beq.n	800ee22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	4a1b      	ldr	r2, [pc, #108]	; (800ee64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d013      	beq.n	800ee22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	4a1a      	ldr	r2, [pc, #104]	; (800ee68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ee00:	4293      	cmp	r3, r2
 800ee02:	d00e      	beq.n	800ee22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4a18      	ldr	r2, [pc, #96]	; (800ee6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	d009      	beq.n	800ee22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	4a17      	ldr	r2, [pc, #92]	; (800ee70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ee14:	4293      	cmp	r3, r2
 800ee16:	d004      	beq.n	800ee22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	4a15      	ldr	r2, [pc, #84]	; (800ee74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d10c      	bne.n	800ee3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	685b      	ldr	r3, [r3, #4]
 800ee2e:	68ba      	ldr	r2, [r7, #8]
 800ee30:	4313      	orrs	r3, r2
 800ee32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	68ba      	ldr	r2, [r7, #8]
 800ee3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2201      	movs	r2, #1
 800ee40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2200      	movs	r2, #0
 800ee48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ee4c:	2300      	movs	r3, #0
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3714      	adds	r7, #20
 800ee52:	46bd      	mov	sp, r7
 800ee54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee58:	4770      	bx	lr
 800ee5a:	bf00      	nop
 800ee5c:	40010000 	.word	0x40010000
 800ee60:	40000400 	.word	0x40000400
 800ee64:	40000800 	.word	0x40000800
 800ee68:	40000c00 	.word	0x40000c00
 800ee6c:	40010400 	.word	0x40010400
 800ee70:	40014000 	.word	0x40014000
 800ee74:	40001800 	.word	0x40001800

0800ee78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ee78:	b480      	push	{r7}
 800ee7a:	b083      	sub	sp, #12
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ee80:	bf00      	nop
 800ee82:	370c      	adds	r7, #12
 800ee84:	46bd      	mov	sp, r7
 800ee86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8a:	4770      	bx	lr

0800ee8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	b083      	sub	sp, #12
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ee94:	bf00      	nop
 800ee96:	370c      	adds	r7, #12
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9e:	4770      	bx	lr

0800eea0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d101      	bne.n	800eeb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eeae:	2301      	movs	r3, #1
 800eeb0:	e03f      	b.n	800ef32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800eeb8:	b2db      	uxtb	r3, r3
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d106      	bne.n	800eecc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2200      	movs	r2, #0
 800eec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f7fc fdce 	bl	800ba68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2224      	movs	r2, #36	; 0x24
 800eed0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	68da      	ldr	r2, [r3, #12]
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800eee2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f000 fb6b 	bl	800f5c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	691a      	ldr	r2, [r3, #16]
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eef8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	695a      	ldr	r2, [r3, #20]
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ef08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	68da      	ldr	r2, [r3, #12]
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ef18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2220      	movs	r2, #32
 800ef24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2220      	movs	r2, #32
 800ef2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ef30:	2300      	movs	r3, #0
}
 800ef32:	4618      	mov	r0, r3
 800ef34:	3708      	adds	r7, #8
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}
	...

0800ef3c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b086      	sub	sp, #24
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	60f8      	str	r0, [r7, #12]
 800ef44:	60b9      	str	r1, [r7, #8]
 800ef46:	4613      	mov	r3, r2
 800ef48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ef50:	b2db      	uxtb	r3, r3
 800ef52:	2b20      	cmp	r3, #32
 800ef54:	d153      	bne.n	800effe <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800ef56:	68bb      	ldr	r3, [r7, #8]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d002      	beq.n	800ef62 <HAL_UART_Transmit_DMA+0x26>
 800ef5c:	88fb      	ldrh	r3, [r7, #6]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d101      	bne.n	800ef66 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ef62:	2301      	movs	r3, #1
 800ef64:	e04c      	b.n	800f000 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d101      	bne.n	800ef74 <HAL_UART_Transmit_DMA+0x38>
 800ef70:	2302      	movs	r3, #2
 800ef72:	e045      	b.n	800f000 <HAL_UART_Transmit_DMA+0xc4>
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2201      	movs	r2, #1
 800ef78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800ef7c:	68ba      	ldr	r2, [r7, #8]
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	88fa      	ldrh	r2, [r7, #6]
 800ef86:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	88fa      	ldrh	r2, [r7, #6]
 800ef8c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	2200      	movs	r2, #0
 800ef92:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2221      	movs	r2, #33	; 0x21
 800ef98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efa0:	4a19      	ldr	r2, [pc, #100]	; (800f008 <HAL_UART_Transmit_DMA+0xcc>)
 800efa2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efa8:	4a18      	ldr	r2, [pc, #96]	; (800f00c <HAL_UART_Transmit_DMA+0xd0>)
 800efaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efb0:	4a17      	ldr	r2, [pc, #92]	; (800f010 <HAL_UART_Transmit_DMA+0xd4>)
 800efb2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efb8:	2200      	movs	r2, #0
 800efba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800efbc:	f107 0308 	add.w	r3, r7, #8
 800efc0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	6819      	ldr	r1, [r3, #0]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	3304      	adds	r3, #4
 800efd0:	461a      	mov	r2, r3
 800efd2:	88fb      	ldrh	r3, [r7, #6]
 800efd4:	f7fd f812 	bl	800bffc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800efe0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	2200      	movs	r2, #0
 800efe6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	695a      	ldr	r2, [r3, #20]
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800eff8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800effa:	2300      	movs	r3, #0
 800effc:	e000      	b.n	800f000 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800effe:	2302      	movs	r3, #2
  }
}
 800f000:	4618      	mov	r0, r3
 800f002:	3718      	adds	r7, #24
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}
 800f008:	0800f251 	.word	0x0800f251
 800f00c:	0800f2a3 	.word	0x0800f2a3
 800f010:	0800f2bf 	.word	0x0800f2bf

0800f014 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b088      	sub	sp, #32
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	68db      	ldr	r3, [r3, #12]
 800f02a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	695b      	ldr	r3, [r3, #20]
 800f032:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800f034:	2300      	movs	r3, #0
 800f036:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800f038:	2300      	movs	r3, #0
 800f03a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f03c:	69fb      	ldr	r3, [r7, #28]
 800f03e:	f003 030f 	and.w	r3, r3, #15
 800f042:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d10d      	bne.n	800f066 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f04a:	69fb      	ldr	r3, [r7, #28]
 800f04c:	f003 0320 	and.w	r3, r3, #32
 800f050:	2b00      	cmp	r3, #0
 800f052:	d008      	beq.n	800f066 <HAL_UART_IRQHandler+0x52>
 800f054:	69bb      	ldr	r3, [r7, #24]
 800f056:	f003 0320 	and.w	r3, r3, #32
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d003      	beq.n	800f066 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f000 fa2d 	bl	800f4be <UART_Receive_IT>
      return;
 800f064:	e0d0      	b.n	800f208 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f066:	693b      	ldr	r3, [r7, #16]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	f000 80b0 	beq.w	800f1ce <HAL_UART_IRQHandler+0x1ba>
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	f003 0301 	and.w	r3, r3, #1
 800f074:	2b00      	cmp	r3, #0
 800f076:	d105      	bne.n	800f084 <HAL_UART_IRQHandler+0x70>
 800f078:	69bb      	ldr	r3, [r7, #24]
 800f07a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800f07e:	2b00      	cmp	r3, #0
 800f080:	f000 80a5 	beq.w	800f1ce <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f084:	69fb      	ldr	r3, [r7, #28]
 800f086:	f003 0301 	and.w	r3, r3, #1
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d00a      	beq.n	800f0a4 <HAL_UART_IRQHandler+0x90>
 800f08e:	69bb      	ldr	r3, [r7, #24]
 800f090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f094:	2b00      	cmp	r3, #0
 800f096:	d005      	beq.n	800f0a4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f09c:	f043 0201 	orr.w	r2, r3, #1
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f0a4:	69fb      	ldr	r3, [r7, #28]
 800f0a6:	f003 0304 	and.w	r3, r3, #4
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d00a      	beq.n	800f0c4 <HAL_UART_IRQHandler+0xb0>
 800f0ae:	697b      	ldr	r3, [r7, #20]
 800f0b0:	f003 0301 	and.w	r3, r3, #1
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d005      	beq.n	800f0c4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0bc:	f043 0202 	orr.w	r2, r3, #2
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f0c4:	69fb      	ldr	r3, [r7, #28]
 800f0c6:	f003 0302 	and.w	r3, r3, #2
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d00a      	beq.n	800f0e4 <HAL_UART_IRQHandler+0xd0>
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	f003 0301 	and.w	r3, r3, #1
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d005      	beq.n	800f0e4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0dc:	f043 0204 	orr.w	r2, r3, #4
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800f0e4:	69fb      	ldr	r3, [r7, #28]
 800f0e6:	f003 0308 	and.w	r3, r3, #8
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d00f      	beq.n	800f10e <HAL_UART_IRQHandler+0xfa>
 800f0ee:	69bb      	ldr	r3, [r7, #24]
 800f0f0:	f003 0320 	and.w	r3, r3, #32
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d104      	bne.n	800f102 <HAL_UART_IRQHandler+0xee>
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	f003 0301 	and.w	r3, r3, #1
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d005      	beq.n	800f10e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f106:	f043 0208 	orr.w	r2, r3, #8
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f112:	2b00      	cmp	r3, #0
 800f114:	d077      	beq.n	800f206 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f116:	69fb      	ldr	r3, [r7, #28]
 800f118:	f003 0320 	and.w	r3, r3, #32
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d007      	beq.n	800f130 <HAL_UART_IRQHandler+0x11c>
 800f120:	69bb      	ldr	r3, [r7, #24]
 800f122:	f003 0320 	and.w	r3, r3, #32
 800f126:	2b00      	cmp	r3, #0
 800f128:	d002      	beq.n	800f130 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f000 f9c7 	bl	800f4be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	695b      	ldr	r3, [r3, #20]
 800f136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f13a:	2b40      	cmp	r3, #64	; 0x40
 800f13c:	bf0c      	ite	eq
 800f13e:	2301      	moveq	r3, #1
 800f140:	2300      	movne	r3, #0
 800f142:	b2db      	uxtb	r3, r3
 800f144:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f14a:	f003 0308 	and.w	r3, r3, #8
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d102      	bne.n	800f158 <HAL_UART_IRQHandler+0x144>
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d031      	beq.n	800f1bc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f000 f910 	bl	800f37e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	695b      	ldr	r3, [r3, #20]
 800f164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f168:	2b40      	cmp	r3, #64	; 0x40
 800f16a:	d123      	bne.n	800f1b4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	695a      	ldr	r2, [r3, #20]
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f17a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f180:	2b00      	cmp	r3, #0
 800f182:	d013      	beq.n	800f1ac <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f188:	4a21      	ldr	r2, [pc, #132]	; (800f210 <HAL_UART_IRQHandler+0x1fc>)
 800f18a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f190:	4618      	mov	r0, r3
 800f192:	f7fc ff8b 	bl	800c0ac <HAL_DMA_Abort_IT>
 800f196:	4603      	mov	r3, r0
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d016      	beq.n	800f1ca <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1a2:	687a      	ldr	r2, [r7, #4]
 800f1a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f1a6:	4610      	mov	r0, r2
 800f1a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f1aa:	e00e      	b.n	800f1ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f000 f845 	bl	800f23c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f1b2:	e00a      	b.n	800f1ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f000 f841 	bl	800f23c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f1ba:	e006      	b.n	800f1ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f000 f83d 	bl	800f23c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800f1c8:	e01d      	b.n	800f206 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f1ca:	bf00      	nop
    return;
 800f1cc:	e01b      	b.n	800f206 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800f1ce:	69fb      	ldr	r3, [r7, #28]
 800f1d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d008      	beq.n	800f1ea <HAL_UART_IRQHandler+0x1d6>
 800f1d8:	69bb      	ldr	r3, [r7, #24]
 800f1da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d003      	beq.n	800f1ea <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f000 f8fd 	bl	800f3e2 <UART_Transmit_IT>
    return;
 800f1e8:	e00e      	b.n	800f208 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800f1ea:	69fb      	ldr	r3, [r7, #28]
 800f1ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d009      	beq.n	800f208 <HAL_UART_IRQHandler+0x1f4>
 800f1f4:	69bb      	ldr	r3, [r7, #24]
 800f1f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d004      	beq.n	800f208 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f000 f945 	bl	800f48e <UART_EndTransmit_IT>
    return;
 800f204:	e000      	b.n	800f208 <HAL_UART_IRQHandler+0x1f4>
    return;
 800f206:	bf00      	nop
  }
}
 800f208:	3720      	adds	r7, #32
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}
 800f20e:	bf00      	nop
 800f210:	0800f3bb 	.word	0x0800f3bb

0800f214 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f214:	b480      	push	{r7}
 800f216:	b083      	sub	sp, #12
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800f21c:	bf00      	nop
 800f21e:	370c      	adds	r7, #12
 800f220:	46bd      	mov	sp, r7
 800f222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f226:	4770      	bx	lr

0800f228 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f228:	b480      	push	{r7}
 800f22a:	b083      	sub	sp, #12
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800f230:	bf00      	nop
 800f232:	370c      	adds	r7, #12
 800f234:	46bd      	mov	sp, r7
 800f236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23a:	4770      	bx	lr

0800f23c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f23c:	b480      	push	{r7}
 800f23e:	b083      	sub	sp, #12
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800f244:	bf00      	nop
 800f246:	370c      	adds	r7, #12
 800f248:	46bd      	mov	sp, r7
 800f24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24e:	4770      	bx	lr

0800f250 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b084      	sub	sp, #16
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f25c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d113      	bne.n	800f294 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	2200      	movs	r2, #0
 800f270:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	695a      	ldr	r2, [r3, #20]
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f280:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	68da      	ldr	r2, [r3, #12]
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f290:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f292:	e002      	b.n	800f29a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800f294:	68f8      	ldr	r0, [r7, #12]
 800f296:	f7fc fc69 	bl	800bb6c <HAL_UART_TxCpltCallback>
}
 800f29a:	bf00      	nop
 800f29c:	3710      	adds	r7, #16
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}

0800f2a2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f2a2:	b580      	push	{r7, lr}
 800f2a4:	b084      	sub	sp, #16
 800f2a6:	af00      	add	r7, sp, #0
 800f2a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2ae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f2b0:	68f8      	ldr	r0, [r7, #12]
 800f2b2:	f7ff ffaf 	bl	800f214 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f2b6:	bf00      	nop
 800f2b8:	3710      	adds	r7, #16
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}

0800f2be <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f2be:	b580      	push	{r7, lr}
 800f2c0:	b084      	sub	sp, #16
 800f2c2:	af00      	add	r7, sp, #0
 800f2c4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2ce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	695b      	ldr	r3, [r3, #20]
 800f2d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2da:	2b80      	cmp	r3, #128	; 0x80
 800f2dc:	bf0c      	ite	eq
 800f2de:	2301      	moveq	r3, #1
 800f2e0:	2300      	movne	r3, #0
 800f2e2:	b2db      	uxtb	r3, r3
 800f2e4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f2ec:	b2db      	uxtb	r3, r3
 800f2ee:	2b21      	cmp	r3, #33	; 0x21
 800f2f0:	d108      	bne.n	800f304 <UART_DMAError+0x46>
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d005      	beq.n	800f304 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800f2fe:	68b8      	ldr	r0, [r7, #8]
 800f300:	f000 f827 	bl	800f352 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	695b      	ldr	r3, [r3, #20]
 800f30a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f30e:	2b40      	cmp	r3, #64	; 0x40
 800f310:	bf0c      	ite	eq
 800f312:	2301      	moveq	r3, #1
 800f314:	2300      	movne	r3, #0
 800f316:	b2db      	uxtb	r3, r3
 800f318:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f320:	b2db      	uxtb	r3, r3
 800f322:	2b22      	cmp	r3, #34	; 0x22
 800f324:	d108      	bne.n	800f338 <UART_DMAError+0x7a>
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d005      	beq.n	800f338 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	2200      	movs	r2, #0
 800f330:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800f332:	68b8      	ldr	r0, [r7, #8]
 800f334:	f000 f823 	bl	800f37e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f33c:	f043 0210 	orr.w	r2, r3, #16
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f344:	68b8      	ldr	r0, [r7, #8]
 800f346:	f7ff ff79 	bl	800f23c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f34a:	bf00      	nop
 800f34c:	3710      	adds	r7, #16
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}

0800f352 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f352:	b480      	push	{r7}
 800f354:	b083      	sub	sp, #12
 800f356:	af00      	add	r7, sp, #0
 800f358:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	68da      	ldr	r2, [r3, #12]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f368:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	2220      	movs	r2, #32
 800f36e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800f372:	bf00      	nop
 800f374:	370c      	adds	r7, #12
 800f376:	46bd      	mov	sp, r7
 800f378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37c:	4770      	bx	lr

0800f37e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f37e:	b480      	push	{r7}
 800f380:	b083      	sub	sp, #12
 800f382:	af00      	add	r7, sp, #0
 800f384:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	68da      	ldr	r2, [r3, #12]
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f394:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	695a      	ldr	r2, [r3, #20]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f022 0201 	bic.w	r2, r2, #1
 800f3a4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2220      	movs	r2, #32
 800f3aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800f3ae:	bf00      	nop
 800f3b0:	370c      	adds	r7, #12
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b8:	4770      	bx	lr

0800f3ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f3ba:	b580      	push	{r7, lr}
 800f3bc:	b084      	sub	sp, #16
 800f3be:	af00      	add	r7, sp, #0
 800f3c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f3d4:	68f8      	ldr	r0, [r7, #12]
 800f3d6:	f7ff ff31 	bl	800f23c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f3da:	bf00      	nop
 800f3dc:	3710      	adds	r7, #16
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}

0800f3e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800f3e2:	b480      	push	{r7}
 800f3e4:	b085      	sub	sp, #20
 800f3e6:	af00      	add	r7, sp, #0
 800f3e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f3f0:	b2db      	uxtb	r3, r3
 800f3f2:	2b21      	cmp	r3, #33	; 0x21
 800f3f4:	d144      	bne.n	800f480 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	689b      	ldr	r3, [r3, #8]
 800f3fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f3fe:	d11a      	bne.n	800f436 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6a1b      	ldr	r3, [r3, #32]
 800f404:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	881b      	ldrh	r3, [r3, #0]
 800f40a:	461a      	mov	r2, r3
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f414:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	691b      	ldr	r3, [r3, #16]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d105      	bne.n	800f42a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6a1b      	ldr	r3, [r3, #32]
 800f422:	1c9a      	adds	r2, r3, #2
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	621a      	str	r2, [r3, #32]
 800f428:	e00e      	b.n	800f448 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6a1b      	ldr	r3, [r3, #32]
 800f42e:	1c5a      	adds	r2, r3, #1
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	621a      	str	r2, [r3, #32]
 800f434:	e008      	b.n	800f448 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6a1b      	ldr	r3, [r3, #32]
 800f43a:	1c59      	adds	r1, r3, #1
 800f43c:	687a      	ldr	r2, [r7, #4]
 800f43e:	6211      	str	r1, [r2, #32]
 800f440:	781a      	ldrb	r2, [r3, #0]
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f44c:	b29b      	uxth	r3, r3
 800f44e:	3b01      	subs	r3, #1
 800f450:	b29b      	uxth	r3, r3
 800f452:	687a      	ldr	r2, [r7, #4]
 800f454:	4619      	mov	r1, r3
 800f456:	84d1      	strh	r1, [r2, #38]	; 0x26
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d10f      	bne.n	800f47c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	68da      	ldr	r2, [r3, #12]
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f46a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	68da      	ldr	r2, [r3, #12]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f47a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800f47c:	2300      	movs	r3, #0
 800f47e:	e000      	b.n	800f482 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800f480:	2302      	movs	r3, #2
  }
}
 800f482:	4618      	mov	r0, r3
 800f484:	3714      	adds	r7, #20
 800f486:	46bd      	mov	sp, r7
 800f488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48c:	4770      	bx	lr

0800f48e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f48e:	b580      	push	{r7, lr}
 800f490:	b082      	sub	sp, #8
 800f492:	af00      	add	r7, sp, #0
 800f494:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	68da      	ldr	r2, [r3, #12]
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f4a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2220      	movs	r2, #32
 800f4aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f7fc fb5c 	bl	800bb6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800f4b4:	2300      	movs	r3, #0
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3708      	adds	r7, #8
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}

0800f4be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800f4be:	b580      	push	{r7, lr}
 800f4c0:	b084      	sub	sp, #16
 800f4c2:	af00      	add	r7, sp, #0
 800f4c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f4cc:	b2db      	uxtb	r3, r3
 800f4ce:	2b22      	cmp	r3, #34	; 0x22
 800f4d0:	d171      	bne.n	800f5b6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	689b      	ldr	r3, [r3, #8]
 800f4d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4da:	d123      	bne.n	800f524 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4e0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	691b      	ldr	r3, [r3, #16]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d10e      	bne.n	800f508 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	685b      	ldr	r3, [r3, #4]
 800f4f0:	b29b      	uxth	r3, r3
 800f4f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4f6:	b29a      	uxth	r2, r3
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f500:	1c9a      	adds	r2, r3, #2
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	629a      	str	r2, [r3, #40]	; 0x28
 800f506:	e029      	b.n	800f55c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	685b      	ldr	r3, [r3, #4]
 800f50e:	b29b      	uxth	r3, r3
 800f510:	b2db      	uxtb	r3, r3
 800f512:	b29a      	uxth	r2, r3
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f51c:	1c5a      	adds	r2, r3, #1
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	629a      	str	r2, [r3, #40]	; 0x28
 800f522:	e01b      	b.n	800f55c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	691b      	ldr	r3, [r3, #16]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d10a      	bne.n	800f542 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	6858      	ldr	r0, [r3, #4]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f536:	1c59      	adds	r1, r3, #1
 800f538:	687a      	ldr	r2, [r7, #4]
 800f53a:	6291      	str	r1, [r2, #40]	; 0x28
 800f53c:	b2c2      	uxtb	r2, r0
 800f53e:	701a      	strb	r2, [r3, #0]
 800f540:	e00c      	b.n	800f55c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	685b      	ldr	r3, [r3, #4]
 800f548:	b2da      	uxtb	r2, r3
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f54e:	1c58      	adds	r0, r3, #1
 800f550:	6879      	ldr	r1, [r7, #4]
 800f552:	6288      	str	r0, [r1, #40]	; 0x28
 800f554:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f558:	b2d2      	uxtb	r2, r2
 800f55a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f560:	b29b      	uxth	r3, r3
 800f562:	3b01      	subs	r3, #1
 800f564:	b29b      	uxth	r3, r3
 800f566:	687a      	ldr	r2, [r7, #4]
 800f568:	4619      	mov	r1, r3
 800f56a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d120      	bne.n	800f5b2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	68da      	ldr	r2, [r3, #12]
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f022 0220 	bic.w	r2, r2, #32
 800f57e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	68da      	ldr	r2, [r3, #12]
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f58e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	695a      	ldr	r2, [r3, #20]
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	f022 0201 	bic.w	r2, r2, #1
 800f59e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2220      	movs	r2, #32
 800f5a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	f7ff fe3d 	bl	800f228 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	e002      	b.n	800f5b8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	e000      	b.n	800f5b8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800f5b6:	2302      	movs	r3, #2
  }
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3710      	adds	r7, #16
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}

0800f5c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5c4:	b0bd      	sub	sp, #244	; 0xf4
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f5cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	691b      	ldr	r3, [r3, #16]
 800f5d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800f5d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5dc:	68d9      	ldr	r1, [r3, #12]
 800f5de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5e2:	681a      	ldr	r2, [r3, #0]
 800f5e4:	ea40 0301 	orr.w	r3, r0, r1
 800f5e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f5ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5ee:	689a      	ldr	r2, [r3, #8]
 800f5f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5f4:	691b      	ldr	r3, [r3, #16]
 800f5f6:	431a      	orrs	r2, r3
 800f5f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5fc:	695b      	ldr	r3, [r3, #20]
 800f5fe:	431a      	orrs	r2, r3
 800f600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f604:	69db      	ldr	r3, [r3, #28]
 800f606:	4313      	orrs	r3, r2
 800f608:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800f60c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800f618:	f021 010c 	bic.w	r1, r1, #12
 800f61c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f620:	681a      	ldr	r2, [r3, #0]
 800f622:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f626:	430b      	orrs	r3, r1
 800f628:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f62a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	695b      	ldr	r3, [r3, #20]
 800f632:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800f636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f63a:	6999      	ldr	r1, [r3, #24]
 800f63c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f640:	681a      	ldr	r2, [r3, #0]
 800f642:	ea40 0301 	orr.w	r3, r0, r1
 800f646:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f64c:	69db      	ldr	r3, [r3, #28]
 800f64e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f652:	f040 81a5 	bne.w	800f9a0 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f65a:	681a      	ldr	r2, [r3, #0]
 800f65c:	4bcd      	ldr	r3, [pc, #820]	; (800f994 <UART_SetConfig+0x3d4>)
 800f65e:	429a      	cmp	r2, r3
 800f660:	d006      	beq.n	800f670 <UART_SetConfig+0xb0>
 800f662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f666:	681a      	ldr	r2, [r3, #0]
 800f668:	4bcb      	ldr	r3, [pc, #812]	; (800f998 <UART_SetConfig+0x3d8>)
 800f66a:	429a      	cmp	r2, r3
 800f66c:	f040 80cb 	bne.w	800f806 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f670:	f7fe ff9e 	bl	800e5b0 <HAL_RCC_GetPCLK2Freq>
 800f674:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f678:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f67c:	461c      	mov	r4, r3
 800f67e:	f04f 0500 	mov.w	r5, #0
 800f682:	4622      	mov	r2, r4
 800f684:	462b      	mov	r3, r5
 800f686:	1891      	adds	r1, r2, r2
 800f688:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800f68c:	415b      	adcs	r3, r3
 800f68e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f692:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f696:	1912      	adds	r2, r2, r4
 800f698:	eb45 0303 	adc.w	r3, r5, r3
 800f69c:	f04f 0000 	mov.w	r0, #0
 800f6a0:	f04f 0100 	mov.w	r1, #0
 800f6a4:	00d9      	lsls	r1, r3, #3
 800f6a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f6aa:	00d0      	lsls	r0, r2, #3
 800f6ac:	4602      	mov	r2, r0
 800f6ae:	460b      	mov	r3, r1
 800f6b0:	1911      	adds	r1, r2, r4
 800f6b2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800f6b6:	416b      	adcs	r3, r5
 800f6b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f6bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f6c0:	685b      	ldr	r3, [r3, #4]
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	f04f 0300 	mov.w	r3, #0
 800f6c8:	1891      	adds	r1, r2, r2
 800f6ca:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800f6ce:	415b      	adcs	r3, r3
 800f6d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f6d4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800f6d8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800f6dc:	f7f1 fad4 	bl	8000c88 <__aeabi_uldivmod>
 800f6e0:	4602      	mov	r2, r0
 800f6e2:	460b      	mov	r3, r1
 800f6e4:	4bad      	ldr	r3, [pc, #692]	; (800f99c <UART_SetConfig+0x3dc>)
 800f6e6:	fba3 2302 	umull	r2, r3, r3, r2
 800f6ea:	095b      	lsrs	r3, r3, #5
 800f6ec:	011e      	lsls	r6, r3, #4
 800f6ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f6f2:	461c      	mov	r4, r3
 800f6f4:	f04f 0500 	mov.w	r5, #0
 800f6f8:	4622      	mov	r2, r4
 800f6fa:	462b      	mov	r3, r5
 800f6fc:	1891      	adds	r1, r2, r2
 800f6fe:	67b9      	str	r1, [r7, #120]	; 0x78
 800f700:	415b      	adcs	r3, r3
 800f702:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f704:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800f708:	1912      	adds	r2, r2, r4
 800f70a:	eb45 0303 	adc.w	r3, r5, r3
 800f70e:	f04f 0000 	mov.w	r0, #0
 800f712:	f04f 0100 	mov.w	r1, #0
 800f716:	00d9      	lsls	r1, r3, #3
 800f718:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f71c:	00d0      	lsls	r0, r2, #3
 800f71e:	4602      	mov	r2, r0
 800f720:	460b      	mov	r3, r1
 800f722:	1911      	adds	r1, r2, r4
 800f724:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800f728:	416b      	adcs	r3, r5
 800f72a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f72e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f732:	685b      	ldr	r3, [r3, #4]
 800f734:	461a      	mov	r2, r3
 800f736:	f04f 0300 	mov.w	r3, #0
 800f73a:	1891      	adds	r1, r2, r2
 800f73c:	6739      	str	r1, [r7, #112]	; 0x70
 800f73e:	415b      	adcs	r3, r3
 800f740:	677b      	str	r3, [r7, #116]	; 0x74
 800f742:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800f746:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800f74a:	f7f1 fa9d 	bl	8000c88 <__aeabi_uldivmod>
 800f74e:	4602      	mov	r2, r0
 800f750:	460b      	mov	r3, r1
 800f752:	4b92      	ldr	r3, [pc, #584]	; (800f99c <UART_SetConfig+0x3dc>)
 800f754:	fba3 1302 	umull	r1, r3, r3, r2
 800f758:	095b      	lsrs	r3, r3, #5
 800f75a:	2164      	movs	r1, #100	; 0x64
 800f75c:	fb01 f303 	mul.w	r3, r1, r3
 800f760:	1ad3      	subs	r3, r2, r3
 800f762:	00db      	lsls	r3, r3, #3
 800f764:	3332      	adds	r3, #50	; 0x32
 800f766:	4a8d      	ldr	r2, [pc, #564]	; (800f99c <UART_SetConfig+0x3dc>)
 800f768:	fba2 2303 	umull	r2, r3, r2, r3
 800f76c:	095b      	lsrs	r3, r3, #5
 800f76e:	005b      	lsls	r3, r3, #1
 800f770:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f774:	441e      	add	r6, r3
 800f776:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f77a:	4618      	mov	r0, r3
 800f77c:	f04f 0100 	mov.w	r1, #0
 800f780:	4602      	mov	r2, r0
 800f782:	460b      	mov	r3, r1
 800f784:	1894      	adds	r4, r2, r2
 800f786:	66bc      	str	r4, [r7, #104]	; 0x68
 800f788:	415b      	adcs	r3, r3
 800f78a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f78c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800f790:	1812      	adds	r2, r2, r0
 800f792:	eb41 0303 	adc.w	r3, r1, r3
 800f796:	f04f 0400 	mov.w	r4, #0
 800f79a:	f04f 0500 	mov.w	r5, #0
 800f79e:	00dd      	lsls	r5, r3, #3
 800f7a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f7a4:	00d4      	lsls	r4, r2, #3
 800f7a6:	4622      	mov	r2, r4
 800f7a8:	462b      	mov	r3, r5
 800f7aa:	1814      	adds	r4, r2, r0
 800f7ac:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800f7b0:	414b      	adcs	r3, r1
 800f7b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f7b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7ba:	685b      	ldr	r3, [r3, #4]
 800f7bc:	461a      	mov	r2, r3
 800f7be:	f04f 0300 	mov.w	r3, #0
 800f7c2:	1891      	adds	r1, r2, r2
 800f7c4:	6639      	str	r1, [r7, #96]	; 0x60
 800f7c6:	415b      	adcs	r3, r3
 800f7c8:	667b      	str	r3, [r7, #100]	; 0x64
 800f7ca:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800f7ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800f7d2:	f7f1 fa59 	bl	8000c88 <__aeabi_uldivmod>
 800f7d6:	4602      	mov	r2, r0
 800f7d8:	460b      	mov	r3, r1
 800f7da:	4b70      	ldr	r3, [pc, #448]	; (800f99c <UART_SetConfig+0x3dc>)
 800f7dc:	fba3 1302 	umull	r1, r3, r3, r2
 800f7e0:	095b      	lsrs	r3, r3, #5
 800f7e2:	2164      	movs	r1, #100	; 0x64
 800f7e4:	fb01 f303 	mul.w	r3, r1, r3
 800f7e8:	1ad3      	subs	r3, r2, r3
 800f7ea:	00db      	lsls	r3, r3, #3
 800f7ec:	3332      	adds	r3, #50	; 0x32
 800f7ee:	4a6b      	ldr	r2, [pc, #428]	; (800f99c <UART_SetConfig+0x3dc>)
 800f7f0:	fba2 2303 	umull	r2, r3, r2, r3
 800f7f4:	095b      	lsrs	r3, r3, #5
 800f7f6:	f003 0207 	and.w	r2, r3, #7
 800f7fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	4432      	add	r2, r6
 800f802:	609a      	str	r2, [r3, #8]
 800f804:	e26d      	b.n	800fce2 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f806:	f7fe febf 	bl	800e588 <HAL_RCC_GetPCLK1Freq>
 800f80a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f80e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f812:	461c      	mov	r4, r3
 800f814:	f04f 0500 	mov.w	r5, #0
 800f818:	4622      	mov	r2, r4
 800f81a:	462b      	mov	r3, r5
 800f81c:	1891      	adds	r1, r2, r2
 800f81e:	65b9      	str	r1, [r7, #88]	; 0x58
 800f820:	415b      	adcs	r3, r3
 800f822:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f824:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800f828:	1912      	adds	r2, r2, r4
 800f82a:	eb45 0303 	adc.w	r3, r5, r3
 800f82e:	f04f 0000 	mov.w	r0, #0
 800f832:	f04f 0100 	mov.w	r1, #0
 800f836:	00d9      	lsls	r1, r3, #3
 800f838:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f83c:	00d0      	lsls	r0, r2, #3
 800f83e:	4602      	mov	r2, r0
 800f840:	460b      	mov	r3, r1
 800f842:	1911      	adds	r1, r2, r4
 800f844:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800f848:	416b      	adcs	r3, r5
 800f84a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f84e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f852:	685b      	ldr	r3, [r3, #4]
 800f854:	461a      	mov	r2, r3
 800f856:	f04f 0300 	mov.w	r3, #0
 800f85a:	1891      	adds	r1, r2, r2
 800f85c:	6539      	str	r1, [r7, #80]	; 0x50
 800f85e:	415b      	adcs	r3, r3
 800f860:	657b      	str	r3, [r7, #84]	; 0x54
 800f862:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800f866:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800f86a:	f7f1 fa0d 	bl	8000c88 <__aeabi_uldivmod>
 800f86e:	4602      	mov	r2, r0
 800f870:	460b      	mov	r3, r1
 800f872:	4b4a      	ldr	r3, [pc, #296]	; (800f99c <UART_SetConfig+0x3dc>)
 800f874:	fba3 2302 	umull	r2, r3, r3, r2
 800f878:	095b      	lsrs	r3, r3, #5
 800f87a:	011e      	lsls	r6, r3, #4
 800f87c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f880:	461c      	mov	r4, r3
 800f882:	f04f 0500 	mov.w	r5, #0
 800f886:	4622      	mov	r2, r4
 800f888:	462b      	mov	r3, r5
 800f88a:	1891      	adds	r1, r2, r2
 800f88c:	64b9      	str	r1, [r7, #72]	; 0x48
 800f88e:	415b      	adcs	r3, r3
 800f890:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f892:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f896:	1912      	adds	r2, r2, r4
 800f898:	eb45 0303 	adc.w	r3, r5, r3
 800f89c:	f04f 0000 	mov.w	r0, #0
 800f8a0:	f04f 0100 	mov.w	r1, #0
 800f8a4:	00d9      	lsls	r1, r3, #3
 800f8a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f8aa:	00d0      	lsls	r0, r2, #3
 800f8ac:	4602      	mov	r2, r0
 800f8ae:	460b      	mov	r3, r1
 800f8b0:	1911      	adds	r1, r2, r4
 800f8b2:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800f8b6:	416b      	adcs	r3, r5
 800f8b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f8bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	f04f 0300 	mov.w	r3, #0
 800f8c8:	1891      	adds	r1, r2, r2
 800f8ca:	6439      	str	r1, [r7, #64]	; 0x40
 800f8cc:	415b      	adcs	r3, r3
 800f8ce:	647b      	str	r3, [r7, #68]	; 0x44
 800f8d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f8d4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800f8d8:	f7f1 f9d6 	bl	8000c88 <__aeabi_uldivmod>
 800f8dc:	4602      	mov	r2, r0
 800f8de:	460b      	mov	r3, r1
 800f8e0:	4b2e      	ldr	r3, [pc, #184]	; (800f99c <UART_SetConfig+0x3dc>)
 800f8e2:	fba3 1302 	umull	r1, r3, r3, r2
 800f8e6:	095b      	lsrs	r3, r3, #5
 800f8e8:	2164      	movs	r1, #100	; 0x64
 800f8ea:	fb01 f303 	mul.w	r3, r1, r3
 800f8ee:	1ad3      	subs	r3, r2, r3
 800f8f0:	00db      	lsls	r3, r3, #3
 800f8f2:	3332      	adds	r3, #50	; 0x32
 800f8f4:	4a29      	ldr	r2, [pc, #164]	; (800f99c <UART_SetConfig+0x3dc>)
 800f8f6:	fba2 2303 	umull	r2, r3, r2, r3
 800f8fa:	095b      	lsrs	r3, r3, #5
 800f8fc:	005b      	lsls	r3, r3, #1
 800f8fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f902:	441e      	add	r6, r3
 800f904:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f908:	4618      	mov	r0, r3
 800f90a:	f04f 0100 	mov.w	r1, #0
 800f90e:	4602      	mov	r2, r0
 800f910:	460b      	mov	r3, r1
 800f912:	1894      	adds	r4, r2, r2
 800f914:	63bc      	str	r4, [r7, #56]	; 0x38
 800f916:	415b      	adcs	r3, r3
 800f918:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f91a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f91e:	1812      	adds	r2, r2, r0
 800f920:	eb41 0303 	adc.w	r3, r1, r3
 800f924:	f04f 0400 	mov.w	r4, #0
 800f928:	f04f 0500 	mov.w	r5, #0
 800f92c:	00dd      	lsls	r5, r3, #3
 800f92e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f932:	00d4      	lsls	r4, r2, #3
 800f934:	4622      	mov	r2, r4
 800f936:	462b      	mov	r3, r5
 800f938:	1814      	adds	r4, r2, r0
 800f93a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800f93e:	414b      	adcs	r3, r1
 800f940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f948:	685b      	ldr	r3, [r3, #4]
 800f94a:	461a      	mov	r2, r3
 800f94c:	f04f 0300 	mov.w	r3, #0
 800f950:	1891      	adds	r1, r2, r2
 800f952:	6339      	str	r1, [r7, #48]	; 0x30
 800f954:	415b      	adcs	r3, r3
 800f956:	637b      	str	r3, [r7, #52]	; 0x34
 800f958:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f95c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800f960:	f7f1 f992 	bl	8000c88 <__aeabi_uldivmod>
 800f964:	4602      	mov	r2, r0
 800f966:	460b      	mov	r3, r1
 800f968:	4b0c      	ldr	r3, [pc, #48]	; (800f99c <UART_SetConfig+0x3dc>)
 800f96a:	fba3 1302 	umull	r1, r3, r3, r2
 800f96e:	095b      	lsrs	r3, r3, #5
 800f970:	2164      	movs	r1, #100	; 0x64
 800f972:	fb01 f303 	mul.w	r3, r1, r3
 800f976:	1ad3      	subs	r3, r2, r3
 800f978:	00db      	lsls	r3, r3, #3
 800f97a:	3332      	adds	r3, #50	; 0x32
 800f97c:	4a07      	ldr	r2, [pc, #28]	; (800f99c <UART_SetConfig+0x3dc>)
 800f97e:	fba2 2303 	umull	r2, r3, r2, r3
 800f982:	095b      	lsrs	r3, r3, #5
 800f984:	f003 0207 	and.w	r2, r3, #7
 800f988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	4432      	add	r2, r6
 800f990:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f992:	e1a6      	b.n	800fce2 <UART_SetConfig+0x722>
 800f994:	40011000 	.word	0x40011000
 800f998:	40011400 	.word	0x40011400
 800f99c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f9a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9a4:	681a      	ldr	r2, [r3, #0]
 800f9a6:	4bd1      	ldr	r3, [pc, #836]	; (800fcec <UART_SetConfig+0x72c>)
 800f9a8:	429a      	cmp	r2, r3
 800f9aa:	d006      	beq.n	800f9ba <UART_SetConfig+0x3fa>
 800f9ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9b0:	681a      	ldr	r2, [r3, #0]
 800f9b2:	4bcf      	ldr	r3, [pc, #828]	; (800fcf0 <UART_SetConfig+0x730>)
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	f040 80ca 	bne.w	800fb4e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f9ba:	f7fe fdf9 	bl	800e5b0 <HAL_RCC_GetPCLK2Freq>
 800f9be:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f9c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f9c6:	461c      	mov	r4, r3
 800f9c8:	f04f 0500 	mov.w	r5, #0
 800f9cc:	4622      	mov	r2, r4
 800f9ce:	462b      	mov	r3, r5
 800f9d0:	1891      	adds	r1, r2, r2
 800f9d2:	62b9      	str	r1, [r7, #40]	; 0x28
 800f9d4:	415b      	adcs	r3, r3
 800f9d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f9d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f9dc:	1912      	adds	r2, r2, r4
 800f9de:	eb45 0303 	adc.w	r3, r5, r3
 800f9e2:	f04f 0000 	mov.w	r0, #0
 800f9e6:	f04f 0100 	mov.w	r1, #0
 800f9ea:	00d9      	lsls	r1, r3, #3
 800f9ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f9f0:	00d0      	lsls	r0, r2, #3
 800f9f2:	4602      	mov	r2, r0
 800f9f4:	460b      	mov	r3, r1
 800f9f6:	eb12 0a04 	adds.w	sl, r2, r4
 800f9fa:	eb43 0b05 	adc.w	fp, r3, r5
 800f9fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa02:	685b      	ldr	r3, [r3, #4]
 800fa04:	4618      	mov	r0, r3
 800fa06:	f04f 0100 	mov.w	r1, #0
 800fa0a:	f04f 0200 	mov.w	r2, #0
 800fa0e:	f04f 0300 	mov.w	r3, #0
 800fa12:	008b      	lsls	r3, r1, #2
 800fa14:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800fa18:	0082      	lsls	r2, r0, #2
 800fa1a:	4650      	mov	r0, sl
 800fa1c:	4659      	mov	r1, fp
 800fa1e:	f7f1 f933 	bl	8000c88 <__aeabi_uldivmod>
 800fa22:	4602      	mov	r2, r0
 800fa24:	460b      	mov	r3, r1
 800fa26:	4bb3      	ldr	r3, [pc, #716]	; (800fcf4 <UART_SetConfig+0x734>)
 800fa28:	fba3 2302 	umull	r2, r3, r3, r2
 800fa2c:	095b      	lsrs	r3, r3, #5
 800fa2e:	011e      	lsls	r6, r3, #4
 800fa30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fa34:	4618      	mov	r0, r3
 800fa36:	f04f 0100 	mov.w	r1, #0
 800fa3a:	4602      	mov	r2, r0
 800fa3c:	460b      	mov	r3, r1
 800fa3e:	1894      	adds	r4, r2, r2
 800fa40:	623c      	str	r4, [r7, #32]
 800fa42:	415b      	adcs	r3, r3
 800fa44:	627b      	str	r3, [r7, #36]	; 0x24
 800fa46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fa4a:	1812      	adds	r2, r2, r0
 800fa4c:	eb41 0303 	adc.w	r3, r1, r3
 800fa50:	f04f 0400 	mov.w	r4, #0
 800fa54:	f04f 0500 	mov.w	r5, #0
 800fa58:	00dd      	lsls	r5, r3, #3
 800fa5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fa5e:	00d4      	lsls	r4, r2, #3
 800fa60:	4622      	mov	r2, r4
 800fa62:	462b      	mov	r3, r5
 800fa64:	1814      	adds	r4, r2, r0
 800fa66:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800fa6a:	414b      	adcs	r3, r1
 800fa6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fa70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa74:	685b      	ldr	r3, [r3, #4]
 800fa76:	4618      	mov	r0, r3
 800fa78:	f04f 0100 	mov.w	r1, #0
 800fa7c:	f04f 0200 	mov.w	r2, #0
 800fa80:	f04f 0300 	mov.w	r3, #0
 800fa84:	008b      	lsls	r3, r1, #2
 800fa86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800fa8a:	0082      	lsls	r2, r0, #2
 800fa8c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800fa90:	f7f1 f8fa 	bl	8000c88 <__aeabi_uldivmod>
 800fa94:	4602      	mov	r2, r0
 800fa96:	460b      	mov	r3, r1
 800fa98:	4b96      	ldr	r3, [pc, #600]	; (800fcf4 <UART_SetConfig+0x734>)
 800fa9a:	fba3 1302 	umull	r1, r3, r3, r2
 800fa9e:	095b      	lsrs	r3, r3, #5
 800faa0:	2164      	movs	r1, #100	; 0x64
 800faa2:	fb01 f303 	mul.w	r3, r1, r3
 800faa6:	1ad3      	subs	r3, r2, r3
 800faa8:	011b      	lsls	r3, r3, #4
 800faaa:	3332      	adds	r3, #50	; 0x32
 800faac:	4a91      	ldr	r2, [pc, #580]	; (800fcf4 <UART_SetConfig+0x734>)
 800faae:	fba2 2303 	umull	r2, r3, r2, r3
 800fab2:	095b      	lsrs	r3, r3, #5
 800fab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fab8:	441e      	add	r6, r3
 800faba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fabe:	4618      	mov	r0, r3
 800fac0:	f04f 0100 	mov.w	r1, #0
 800fac4:	4602      	mov	r2, r0
 800fac6:	460b      	mov	r3, r1
 800fac8:	1894      	adds	r4, r2, r2
 800faca:	61bc      	str	r4, [r7, #24]
 800facc:	415b      	adcs	r3, r3
 800face:	61fb      	str	r3, [r7, #28]
 800fad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fad4:	1812      	adds	r2, r2, r0
 800fad6:	eb41 0303 	adc.w	r3, r1, r3
 800fada:	f04f 0400 	mov.w	r4, #0
 800fade:	f04f 0500 	mov.w	r5, #0
 800fae2:	00dd      	lsls	r5, r3, #3
 800fae4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fae8:	00d4      	lsls	r4, r2, #3
 800faea:	4622      	mov	r2, r4
 800faec:	462b      	mov	r3, r5
 800faee:	1814      	adds	r4, r2, r0
 800faf0:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800faf4:	414b      	adcs	r3, r1
 800faf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800fafa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fafe:	685b      	ldr	r3, [r3, #4]
 800fb00:	4618      	mov	r0, r3
 800fb02:	f04f 0100 	mov.w	r1, #0
 800fb06:	f04f 0200 	mov.w	r2, #0
 800fb0a:	f04f 0300 	mov.w	r3, #0
 800fb0e:	008b      	lsls	r3, r1, #2
 800fb10:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800fb14:	0082      	lsls	r2, r0, #2
 800fb16:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800fb1a:	f7f1 f8b5 	bl	8000c88 <__aeabi_uldivmod>
 800fb1e:	4602      	mov	r2, r0
 800fb20:	460b      	mov	r3, r1
 800fb22:	4b74      	ldr	r3, [pc, #464]	; (800fcf4 <UART_SetConfig+0x734>)
 800fb24:	fba3 1302 	umull	r1, r3, r3, r2
 800fb28:	095b      	lsrs	r3, r3, #5
 800fb2a:	2164      	movs	r1, #100	; 0x64
 800fb2c:	fb01 f303 	mul.w	r3, r1, r3
 800fb30:	1ad3      	subs	r3, r2, r3
 800fb32:	011b      	lsls	r3, r3, #4
 800fb34:	3332      	adds	r3, #50	; 0x32
 800fb36:	4a6f      	ldr	r2, [pc, #444]	; (800fcf4 <UART_SetConfig+0x734>)
 800fb38:	fba2 2303 	umull	r2, r3, r2, r3
 800fb3c:	095b      	lsrs	r3, r3, #5
 800fb3e:	f003 020f 	and.w	r2, r3, #15
 800fb42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	4432      	add	r2, r6
 800fb4a:	609a      	str	r2, [r3, #8]
 800fb4c:	e0c9      	b.n	800fce2 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800fb4e:	f7fe fd1b 	bl	800e588 <HAL_RCC_GetPCLK1Freq>
 800fb52:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fb56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fb5a:	461c      	mov	r4, r3
 800fb5c:	f04f 0500 	mov.w	r5, #0
 800fb60:	4622      	mov	r2, r4
 800fb62:	462b      	mov	r3, r5
 800fb64:	1891      	adds	r1, r2, r2
 800fb66:	6139      	str	r1, [r7, #16]
 800fb68:	415b      	adcs	r3, r3
 800fb6a:	617b      	str	r3, [r7, #20]
 800fb6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fb70:	1912      	adds	r2, r2, r4
 800fb72:	eb45 0303 	adc.w	r3, r5, r3
 800fb76:	f04f 0000 	mov.w	r0, #0
 800fb7a:	f04f 0100 	mov.w	r1, #0
 800fb7e:	00d9      	lsls	r1, r3, #3
 800fb80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fb84:	00d0      	lsls	r0, r2, #3
 800fb86:	4602      	mov	r2, r0
 800fb88:	460b      	mov	r3, r1
 800fb8a:	eb12 0804 	adds.w	r8, r2, r4
 800fb8e:	eb43 0905 	adc.w	r9, r3, r5
 800fb92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb96:	685b      	ldr	r3, [r3, #4]
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f04f 0100 	mov.w	r1, #0
 800fb9e:	f04f 0200 	mov.w	r2, #0
 800fba2:	f04f 0300 	mov.w	r3, #0
 800fba6:	008b      	lsls	r3, r1, #2
 800fba8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800fbac:	0082      	lsls	r2, r0, #2
 800fbae:	4640      	mov	r0, r8
 800fbb0:	4649      	mov	r1, r9
 800fbb2:	f7f1 f869 	bl	8000c88 <__aeabi_uldivmod>
 800fbb6:	4602      	mov	r2, r0
 800fbb8:	460b      	mov	r3, r1
 800fbba:	4b4e      	ldr	r3, [pc, #312]	; (800fcf4 <UART_SetConfig+0x734>)
 800fbbc:	fba3 2302 	umull	r2, r3, r3, r2
 800fbc0:	095b      	lsrs	r3, r3, #5
 800fbc2:	011e      	lsls	r6, r3, #4
 800fbc4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f04f 0100 	mov.w	r1, #0
 800fbce:	4602      	mov	r2, r0
 800fbd0:	460b      	mov	r3, r1
 800fbd2:	1894      	adds	r4, r2, r2
 800fbd4:	60bc      	str	r4, [r7, #8]
 800fbd6:	415b      	adcs	r3, r3
 800fbd8:	60fb      	str	r3, [r7, #12]
 800fbda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fbde:	1812      	adds	r2, r2, r0
 800fbe0:	eb41 0303 	adc.w	r3, r1, r3
 800fbe4:	f04f 0400 	mov.w	r4, #0
 800fbe8:	f04f 0500 	mov.w	r5, #0
 800fbec:	00dd      	lsls	r5, r3, #3
 800fbee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fbf2:	00d4      	lsls	r4, r2, #3
 800fbf4:	4622      	mov	r2, r4
 800fbf6:	462b      	mov	r3, r5
 800fbf8:	1814      	adds	r4, r2, r0
 800fbfa:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800fbfe:	414b      	adcs	r3, r1
 800fc00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fc04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc08:	685b      	ldr	r3, [r3, #4]
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f04f 0100 	mov.w	r1, #0
 800fc10:	f04f 0200 	mov.w	r2, #0
 800fc14:	f04f 0300 	mov.w	r3, #0
 800fc18:	008b      	lsls	r3, r1, #2
 800fc1a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800fc1e:	0082      	lsls	r2, r0, #2
 800fc20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800fc24:	f7f1 f830 	bl	8000c88 <__aeabi_uldivmod>
 800fc28:	4602      	mov	r2, r0
 800fc2a:	460b      	mov	r3, r1
 800fc2c:	4b31      	ldr	r3, [pc, #196]	; (800fcf4 <UART_SetConfig+0x734>)
 800fc2e:	fba3 1302 	umull	r1, r3, r3, r2
 800fc32:	095b      	lsrs	r3, r3, #5
 800fc34:	2164      	movs	r1, #100	; 0x64
 800fc36:	fb01 f303 	mul.w	r3, r1, r3
 800fc3a:	1ad3      	subs	r3, r2, r3
 800fc3c:	011b      	lsls	r3, r3, #4
 800fc3e:	3332      	adds	r3, #50	; 0x32
 800fc40:	4a2c      	ldr	r2, [pc, #176]	; (800fcf4 <UART_SetConfig+0x734>)
 800fc42:	fba2 2303 	umull	r2, r3, r2, r3
 800fc46:	095b      	lsrs	r3, r3, #5
 800fc48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fc4c:	441e      	add	r6, r3
 800fc4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fc52:	4618      	mov	r0, r3
 800fc54:	f04f 0100 	mov.w	r1, #0
 800fc58:	4602      	mov	r2, r0
 800fc5a:	460b      	mov	r3, r1
 800fc5c:	1894      	adds	r4, r2, r2
 800fc5e:	603c      	str	r4, [r7, #0]
 800fc60:	415b      	adcs	r3, r3
 800fc62:	607b      	str	r3, [r7, #4]
 800fc64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc68:	1812      	adds	r2, r2, r0
 800fc6a:	eb41 0303 	adc.w	r3, r1, r3
 800fc6e:	f04f 0400 	mov.w	r4, #0
 800fc72:	f04f 0500 	mov.w	r5, #0
 800fc76:	00dd      	lsls	r5, r3, #3
 800fc78:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fc7c:	00d4      	lsls	r4, r2, #3
 800fc7e:	4622      	mov	r2, r4
 800fc80:	462b      	mov	r3, r5
 800fc82:	1814      	adds	r4, r2, r0
 800fc84:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800fc88:	414b      	adcs	r3, r1
 800fc8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fc8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc92:	685b      	ldr	r3, [r3, #4]
 800fc94:	4618      	mov	r0, r3
 800fc96:	f04f 0100 	mov.w	r1, #0
 800fc9a:	f04f 0200 	mov.w	r2, #0
 800fc9e:	f04f 0300 	mov.w	r3, #0
 800fca2:	008b      	lsls	r3, r1, #2
 800fca4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800fca8:	0082      	lsls	r2, r0, #2
 800fcaa:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800fcae:	f7f0 ffeb 	bl	8000c88 <__aeabi_uldivmod>
 800fcb2:	4602      	mov	r2, r0
 800fcb4:	460b      	mov	r3, r1
 800fcb6:	4b0f      	ldr	r3, [pc, #60]	; (800fcf4 <UART_SetConfig+0x734>)
 800fcb8:	fba3 1302 	umull	r1, r3, r3, r2
 800fcbc:	095b      	lsrs	r3, r3, #5
 800fcbe:	2164      	movs	r1, #100	; 0x64
 800fcc0:	fb01 f303 	mul.w	r3, r1, r3
 800fcc4:	1ad3      	subs	r3, r2, r3
 800fcc6:	011b      	lsls	r3, r3, #4
 800fcc8:	3332      	adds	r3, #50	; 0x32
 800fcca:	4a0a      	ldr	r2, [pc, #40]	; (800fcf4 <UART_SetConfig+0x734>)
 800fccc:	fba2 2303 	umull	r2, r3, r2, r3
 800fcd0:	095b      	lsrs	r3, r3, #5
 800fcd2:	f003 020f 	and.w	r2, r3, #15
 800fcd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	4432      	add	r2, r6
 800fcde:	609a      	str	r2, [r3, #8]
}
 800fce0:	e7ff      	b.n	800fce2 <UART_SetConfig+0x722>
 800fce2:	bf00      	nop
 800fce4:	37f4      	adds	r7, #244	; 0xf4
 800fce6:	46bd      	mov	sp, r7
 800fce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcec:	40011000 	.word	0x40011000
 800fcf0:	40011400 	.word	0x40011400
 800fcf4:	51eb851f 	.word	0x51eb851f

0800fcf8 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800fcf8:	b480      	push	{r7}
 800fcfa:	b085      	sub	sp, #20
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
 800fd00:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800fd02:	2300      	movs	r3, #0
 800fd04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800fd06:	683b      	ldr	r3, [r7, #0]
 800fd08:	681a      	ldr	r2, [r3, #0]
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd10:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800fd12:	68fa      	ldr	r2, [r7, #12]
 800fd14:	4b20      	ldr	r3, [pc, #128]	; (800fd98 <FSMC_NORSRAM_Init+0xa0>)
 800fd16:	4013      	ands	r3, r2
 800fd18:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800fd22:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800fd24:	683b      	ldr	r3, [r7, #0]
 800fd26:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800fd28:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800fd2e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800fd34:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800fd3a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800fd40:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800fd42:	683b      	ldr	r3, [r7, #0]
 800fd44:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800fd46:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800fd4c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800fd52:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800fd58:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800fd5e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800fd64:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800fd66:	68fa      	ldr	r2, [r7, #12]
 800fd68:	4313      	orrs	r3, r2
 800fd6a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	689b      	ldr	r3, [r3, #8]
 800fd70:	2b08      	cmp	r3, #8
 800fd72:	d103      	bne.n	800fd7c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd7a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	681a      	ldr	r2, [r3, #0]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	68f9      	ldr	r1, [r7, #12]
 800fd84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800fd88:	2300      	movs	r3, #0
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3714      	adds	r7, #20
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd94:	4770      	bx	lr
 800fd96:	bf00      	nop
 800fd98:	fff00080 	.word	0xfff00080

0800fd9c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b087      	sub	sp, #28
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	60f8      	str	r0, [r7, #12]
 800fda4:	60b9      	str	r1, [r7, #8]
 800fda6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800fda8:	2300      	movs	r3, #0
 800fdaa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	1c5a      	adds	r2, r3, #1
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdb6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800fdbe:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	685b      	ldr	r3, [r3, #4]
 800fdc8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800fdca:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800fdcc:	68bb      	ldr	r3, [r7, #8]
 800fdce:	689b      	ldr	r3, [r3, #8]
 800fdd0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800fdd2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	68db      	ldr	r3, [r3, #12]
 800fdd8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800fdda:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	691b      	ldr	r3, [r3, #16]
 800fde0:	3b01      	subs	r3, #1
 800fde2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800fde4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	695b      	ldr	r3, [r3, #20]
 800fdea:	3b02      	subs	r3, #2
 800fdec:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800fdee:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800fdf4:	4313      	orrs	r3, r2
 800fdf6:	697a      	ldr	r2, [r7, #20]
 800fdf8:	4313      	orrs	r3, r2
 800fdfa:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	1c5a      	adds	r2, r3, #1
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	6979      	ldr	r1, [r7, #20]
 800fe04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800fe08:	2300      	movs	r3, #0
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	371c      	adds	r7, #28
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe14:	4770      	bx	lr
	...

0800fe18 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b087      	sub	sp, #28
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	60f8      	str	r0, [r7, #12]
 800fe20:	60b9      	str	r1, [r7, #8]
 800fe22:	607a      	str	r2, [r7, #4]
 800fe24:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800fe26:	2300      	movs	r3, #0
 800fe28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fe30:	d122      	bne.n	800fe78 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	687a      	ldr	r2, [r7, #4]
 800fe36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe3a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800fe3c:	697a      	ldr	r2, [r7, #20]
 800fe3e:	4b15      	ldr	r3, [pc, #84]	; (800fe94 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800fe40:	4013      	ands	r3, r2
 800fe42:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	685b      	ldr	r3, [r3, #4]
 800fe4c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800fe4e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	689b      	ldr	r3, [r3, #8]
 800fe54:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800fe56:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800fe58:	68bb      	ldr	r3, [r7, #8]
 800fe5a:	68db      	ldr	r3, [r3, #12]
 800fe5c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800fe5e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800fe64:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800fe66:	697a      	ldr	r2, [r7, #20]
 800fe68:	4313      	orrs	r3, r2
 800fe6a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	687a      	ldr	r2, [r7, #4]
 800fe70:	6979      	ldr	r1, [r7, #20]
 800fe72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800fe76:	e005      	b.n	800fe84 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	687a      	ldr	r2, [r7, #4]
 800fe7c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800fe80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800fe84:	2300      	movs	r3, #0
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	371c      	adds	r7, #28
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe90:	4770      	bx	lr
 800fe92:	bf00      	nop
 800fe94:	cff00000 	.word	0xcff00000

0800fe98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fe98:	b084      	sub	sp, #16
 800fe9a:	b580      	push	{r7, lr}
 800fe9c:	b084      	sub	sp, #16
 800fe9e:	af00      	add	r7, sp, #0
 800fea0:	6078      	str	r0, [r7, #4]
 800fea2:	f107 001c 	add.w	r0, r7, #28
 800fea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800feaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feac:	2b01      	cmp	r3, #1
 800feae:	d122      	bne.n	800fef6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	68db      	ldr	r3, [r3, #12]
 800fec0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800fec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fec8:	687a      	ldr	r2, [r7, #4]
 800feca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	68db      	ldr	r3, [r3, #12]
 800fed0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800feda:	2b01      	cmp	r3, #1
 800fedc:	d105      	bne.n	800feea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	68db      	ldr	r3, [r3, #12]
 800fee2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	f001 fac6 	bl	801147c <USB_CoreReset>
 800fef0:	4603      	mov	r3, r0
 800fef2:	73fb      	strb	r3, [r7, #15]
 800fef4:	e01a      	b.n	800ff2c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	68db      	ldr	r3, [r3, #12]
 800fefa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f001 faba 	bl	801147c <USB_CoreReset>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ff0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d106      	bne.n	800ff20 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	639a      	str	r2, [r3, #56]	; 0x38
 800ff1e:	e005      	b.n	800ff2c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ff2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff2e:	2b01      	cmp	r3, #1
 800ff30:	d10b      	bne.n	800ff4a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	689b      	ldr	r3, [r3, #8]
 800ff36:	f043 0206 	orr.w	r2, r3, #6
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	689b      	ldr	r3, [r3, #8]
 800ff42:	f043 0220 	orr.w	r2, r3, #32
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ff4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	3710      	adds	r7, #16
 800ff50:	46bd      	mov	sp, r7
 800ff52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ff56:	b004      	add	sp, #16
 800ff58:	4770      	bx	lr
	...

0800ff5c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ff5c:	b480      	push	{r7}
 800ff5e:	b087      	sub	sp, #28
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	60f8      	str	r0, [r7, #12]
 800ff64:	60b9      	str	r1, [r7, #8]
 800ff66:	4613      	mov	r3, r2
 800ff68:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ff6a:	79fb      	ldrb	r3, [r7, #7]
 800ff6c:	2b02      	cmp	r3, #2
 800ff6e:	d165      	bne.n	801003c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	4a41      	ldr	r2, [pc, #260]	; (8010078 <USB_SetTurnaroundTime+0x11c>)
 800ff74:	4293      	cmp	r3, r2
 800ff76:	d906      	bls.n	800ff86 <USB_SetTurnaroundTime+0x2a>
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	4a40      	ldr	r2, [pc, #256]	; (801007c <USB_SetTurnaroundTime+0x120>)
 800ff7c:	4293      	cmp	r3, r2
 800ff7e:	d202      	bcs.n	800ff86 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ff80:	230f      	movs	r3, #15
 800ff82:	617b      	str	r3, [r7, #20]
 800ff84:	e062      	b.n	801004c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	4a3c      	ldr	r2, [pc, #240]	; (801007c <USB_SetTurnaroundTime+0x120>)
 800ff8a:	4293      	cmp	r3, r2
 800ff8c:	d306      	bcc.n	800ff9c <USB_SetTurnaroundTime+0x40>
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	4a3b      	ldr	r2, [pc, #236]	; (8010080 <USB_SetTurnaroundTime+0x124>)
 800ff92:	4293      	cmp	r3, r2
 800ff94:	d202      	bcs.n	800ff9c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ff96:	230e      	movs	r3, #14
 800ff98:	617b      	str	r3, [r7, #20]
 800ff9a:	e057      	b.n	801004c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	4a38      	ldr	r2, [pc, #224]	; (8010080 <USB_SetTurnaroundTime+0x124>)
 800ffa0:	4293      	cmp	r3, r2
 800ffa2:	d306      	bcc.n	800ffb2 <USB_SetTurnaroundTime+0x56>
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	4a37      	ldr	r2, [pc, #220]	; (8010084 <USB_SetTurnaroundTime+0x128>)
 800ffa8:	4293      	cmp	r3, r2
 800ffaa:	d202      	bcs.n	800ffb2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ffac:	230d      	movs	r3, #13
 800ffae:	617b      	str	r3, [r7, #20]
 800ffb0:	e04c      	b.n	801004c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	4a33      	ldr	r2, [pc, #204]	; (8010084 <USB_SetTurnaroundTime+0x128>)
 800ffb6:	4293      	cmp	r3, r2
 800ffb8:	d306      	bcc.n	800ffc8 <USB_SetTurnaroundTime+0x6c>
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	4a32      	ldr	r2, [pc, #200]	; (8010088 <USB_SetTurnaroundTime+0x12c>)
 800ffbe:	4293      	cmp	r3, r2
 800ffc0:	d802      	bhi.n	800ffc8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ffc2:	230c      	movs	r3, #12
 800ffc4:	617b      	str	r3, [r7, #20]
 800ffc6:	e041      	b.n	801004c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	4a2f      	ldr	r2, [pc, #188]	; (8010088 <USB_SetTurnaroundTime+0x12c>)
 800ffcc:	4293      	cmp	r3, r2
 800ffce:	d906      	bls.n	800ffde <USB_SetTurnaroundTime+0x82>
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	4a2e      	ldr	r2, [pc, #184]	; (801008c <USB_SetTurnaroundTime+0x130>)
 800ffd4:	4293      	cmp	r3, r2
 800ffd6:	d802      	bhi.n	800ffde <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ffd8:	230b      	movs	r3, #11
 800ffda:	617b      	str	r3, [r7, #20]
 800ffdc:	e036      	b.n	801004c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	4a2a      	ldr	r2, [pc, #168]	; (801008c <USB_SetTurnaroundTime+0x130>)
 800ffe2:	4293      	cmp	r3, r2
 800ffe4:	d906      	bls.n	800fff4 <USB_SetTurnaroundTime+0x98>
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	4a29      	ldr	r2, [pc, #164]	; (8010090 <USB_SetTurnaroundTime+0x134>)
 800ffea:	4293      	cmp	r3, r2
 800ffec:	d802      	bhi.n	800fff4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ffee:	230a      	movs	r3, #10
 800fff0:	617b      	str	r3, [r7, #20]
 800fff2:	e02b      	b.n	801004c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	4a26      	ldr	r2, [pc, #152]	; (8010090 <USB_SetTurnaroundTime+0x134>)
 800fff8:	4293      	cmp	r3, r2
 800fffa:	d906      	bls.n	801000a <USB_SetTurnaroundTime+0xae>
 800fffc:	68bb      	ldr	r3, [r7, #8]
 800fffe:	4a25      	ldr	r2, [pc, #148]	; (8010094 <USB_SetTurnaroundTime+0x138>)
 8010000:	4293      	cmp	r3, r2
 8010002:	d202      	bcs.n	801000a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010004:	2309      	movs	r3, #9
 8010006:	617b      	str	r3, [r7, #20]
 8010008:	e020      	b.n	801004c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	4a21      	ldr	r2, [pc, #132]	; (8010094 <USB_SetTurnaroundTime+0x138>)
 801000e:	4293      	cmp	r3, r2
 8010010:	d306      	bcc.n	8010020 <USB_SetTurnaroundTime+0xc4>
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	4a20      	ldr	r2, [pc, #128]	; (8010098 <USB_SetTurnaroundTime+0x13c>)
 8010016:	4293      	cmp	r3, r2
 8010018:	d802      	bhi.n	8010020 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801001a:	2308      	movs	r3, #8
 801001c:	617b      	str	r3, [r7, #20]
 801001e:	e015      	b.n	801004c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	4a1d      	ldr	r2, [pc, #116]	; (8010098 <USB_SetTurnaroundTime+0x13c>)
 8010024:	4293      	cmp	r3, r2
 8010026:	d906      	bls.n	8010036 <USB_SetTurnaroundTime+0xda>
 8010028:	68bb      	ldr	r3, [r7, #8]
 801002a:	4a1c      	ldr	r2, [pc, #112]	; (801009c <USB_SetTurnaroundTime+0x140>)
 801002c:	4293      	cmp	r3, r2
 801002e:	d202      	bcs.n	8010036 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010030:	2307      	movs	r3, #7
 8010032:	617b      	str	r3, [r7, #20]
 8010034:	e00a      	b.n	801004c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010036:	2306      	movs	r3, #6
 8010038:	617b      	str	r3, [r7, #20]
 801003a:	e007      	b.n	801004c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801003c:	79fb      	ldrb	r3, [r7, #7]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d102      	bne.n	8010048 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8010042:	2309      	movs	r3, #9
 8010044:	617b      	str	r3, [r7, #20]
 8010046:	e001      	b.n	801004c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010048:	2309      	movs	r3, #9
 801004a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	68db      	ldr	r3, [r3, #12]
 8010050:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	68da      	ldr	r2, [r3, #12]
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	029b      	lsls	r3, r3, #10
 8010060:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8010064:	431a      	orrs	r2, r3
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801006a:	2300      	movs	r3, #0
}
 801006c:	4618      	mov	r0, r3
 801006e:	371c      	adds	r7, #28
 8010070:	46bd      	mov	sp, r7
 8010072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010076:	4770      	bx	lr
 8010078:	00d8acbf 	.word	0x00d8acbf
 801007c:	00e4e1c0 	.word	0x00e4e1c0
 8010080:	00f42400 	.word	0x00f42400
 8010084:	01067380 	.word	0x01067380
 8010088:	011a499f 	.word	0x011a499f
 801008c:	01312cff 	.word	0x01312cff
 8010090:	014ca43f 	.word	0x014ca43f
 8010094:	016e3600 	.word	0x016e3600
 8010098:	01a6ab1f 	.word	0x01a6ab1f
 801009c:	01e84800 	.word	0x01e84800

080100a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80100a0:	b480      	push	{r7}
 80100a2:	b083      	sub	sp, #12
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	689b      	ldr	r3, [r3, #8]
 80100ac:	f043 0201 	orr.w	r2, r3, #1
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80100b4:	2300      	movs	r3, #0
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	370c      	adds	r7, #12
 80100ba:	46bd      	mov	sp, r7
 80100bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c0:	4770      	bx	lr

080100c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80100c2:	b480      	push	{r7}
 80100c4:	b083      	sub	sp, #12
 80100c6:	af00      	add	r7, sp, #0
 80100c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	689b      	ldr	r3, [r3, #8]
 80100ce:	f023 0201 	bic.w	r2, r3, #1
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80100d6:	2300      	movs	r3, #0
}
 80100d8:	4618      	mov	r0, r3
 80100da:	370c      	adds	r7, #12
 80100dc:	46bd      	mov	sp, r7
 80100de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e2:	4770      	bx	lr

080100e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b082      	sub	sp, #8
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
 80100ec:	460b      	mov	r3, r1
 80100ee:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	68db      	ldr	r3, [r3, #12]
 80100f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80100fc:	78fb      	ldrb	r3, [r7, #3]
 80100fe:	2b01      	cmp	r3, #1
 8010100:	d106      	bne.n	8010110 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	68db      	ldr	r3, [r3, #12]
 8010106:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	60da      	str	r2, [r3, #12]
 801010e:	e00b      	b.n	8010128 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8010110:	78fb      	ldrb	r3, [r7, #3]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d106      	bne.n	8010124 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	68db      	ldr	r3, [r3, #12]
 801011a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	60da      	str	r2, [r3, #12]
 8010122:	e001      	b.n	8010128 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8010124:	2301      	movs	r3, #1
 8010126:	e003      	b.n	8010130 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8010128:	2032      	movs	r0, #50	; 0x32
 801012a:	f7fb fdb3 	bl	800bc94 <HAL_Delay>

  return HAL_OK;
 801012e:	2300      	movs	r3, #0
}
 8010130:	4618      	mov	r0, r3
 8010132:	3708      	adds	r7, #8
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}

08010138 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010138:	b084      	sub	sp, #16
 801013a:	b580      	push	{r7, lr}
 801013c:	b086      	sub	sp, #24
 801013e:	af00      	add	r7, sp, #0
 8010140:	6078      	str	r0, [r7, #4]
 8010142:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801014a:	2300      	movs	r3, #0
 801014c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010152:	2300      	movs	r3, #0
 8010154:	613b      	str	r3, [r7, #16]
 8010156:	e009      	b.n	801016c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010158:	687a      	ldr	r2, [r7, #4]
 801015a:	693b      	ldr	r3, [r7, #16]
 801015c:	3340      	adds	r3, #64	; 0x40
 801015e:	009b      	lsls	r3, r3, #2
 8010160:	4413      	add	r3, r2
 8010162:	2200      	movs	r2, #0
 8010164:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010166:	693b      	ldr	r3, [r7, #16]
 8010168:	3301      	adds	r3, #1
 801016a:	613b      	str	r3, [r7, #16]
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	2b0e      	cmp	r3, #14
 8010170:	d9f2      	bls.n	8010158 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010174:	2b00      	cmp	r3, #0
 8010176:	d11c      	bne.n	80101b2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801017e:	685b      	ldr	r3, [r3, #4]
 8010180:	68fa      	ldr	r2, [r7, #12]
 8010182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010186:	f043 0302 	orr.w	r3, r3, #2
 801018a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010190:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801019c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101a8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	639a      	str	r2, [r3, #56]	; 0x38
 80101b0:	e00b      	b.n	80101ca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101b6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80101d0:	461a      	mov	r2, r3
 80101d2:	2300      	movs	r3, #0
 80101d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101dc:	4619      	mov	r1, r3
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101e4:	461a      	mov	r2, r3
 80101e6:	680b      	ldr	r3, [r1, #0]
 80101e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80101ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ec:	2b01      	cmp	r3, #1
 80101ee:	d10c      	bne.n	801020a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80101f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d104      	bne.n	8010200 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80101f6:	2100      	movs	r1, #0
 80101f8:	6878      	ldr	r0, [r7, #4]
 80101fa:	f000 f949 	bl	8010490 <USB_SetDevSpeed>
 80101fe:	e008      	b.n	8010212 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010200:	2101      	movs	r1, #1
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f000 f944 	bl	8010490 <USB_SetDevSpeed>
 8010208:	e003      	b.n	8010212 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801020a:	2103      	movs	r1, #3
 801020c:	6878      	ldr	r0, [r7, #4]
 801020e:	f000 f93f 	bl	8010490 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010212:	2110      	movs	r1, #16
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	f000 f8f3 	bl	8010400 <USB_FlushTxFifo>
 801021a:	4603      	mov	r3, r0
 801021c:	2b00      	cmp	r3, #0
 801021e:	d001      	beq.n	8010224 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8010220:	2301      	movs	r3, #1
 8010222:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f000 f911 	bl	801044c <USB_FlushRxFifo>
 801022a:	4603      	mov	r3, r0
 801022c:	2b00      	cmp	r3, #0
 801022e:	d001      	beq.n	8010234 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8010230:	2301      	movs	r3, #1
 8010232:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801023a:	461a      	mov	r2, r3
 801023c:	2300      	movs	r3, #0
 801023e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010246:	461a      	mov	r2, r3
 8010248:	2300      	movs	r3, #0
 801024a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010252:	461a      	mov	r2, r3
 8010254:	2300      	movs	r3, #0
 8010256:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010258:	2300      	movs	r3, #0
 801025a:	613b      	str	r3, [r7, #16]
 801025c:	e043      	b.n	80102e6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801025e:	693b      	ldr	r3, [r7, #16]
 8010260:	015a      	lsls	r2, r3, #5
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	4413      	add	r3, r2
 8010266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010270:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010274:	d118      	bne.n	80102a8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8010276:	693b      	ldr	r3, [r7, #16]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d10a      	bne.n	8010292 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801027c:	693b      	ldr	r3, [r7, #16]
 801027e:	015a      	lsls	r2, r3, #5
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	4413      	add	r3, r2
 8010284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010288:	461a      	mov	r2, r3
 801028a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801028e:	6013      	str	r3, [r2, #0]
 8010290:	e013      	b.n	80102ba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010292:	693b      	ldr	r3, [r7, #16]
 8010294:	015a      	lsls	r2, r3, #5
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	4413      	add	r3, r2
 801029a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801029e:	461a      	mov	r2, r3
 80102a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80102a4:	6013      	str	r3, [r2, #0]
 80102a6:	e008      	b.n	80102ba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	015a      	lsls	r2, r3, #5
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	4413      	add	r3, r2
 80102b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102b4:	461a      	mov	r2, r3
 80102b6:	2300      	movs	r3, #0
 80102b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80102ba:	693b      	ldr	r3, [r7, #16]
 80102bc:	015a      	lsls	r2, r3, #5
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	4413      	add	r3, r2
 80102c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102c6:	461a      	mov	r2, r3
 80102c8:	2300      	movs	r3, #0
 80102ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80102cc:	693b      	ldr	r3, [r7, #16]
 80102ce:	015a      	lsls	r2, r3, #5
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	4413      	add	r3, r2
 80102d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102d8:	461a      	mov	r2, r3
 80102da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80102de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	3301      	adds	r3, #1
 80102e4:	613b      	str	r3, [r7, #16]
 80102e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e8:	693a      	ldr	r2, [r7, #16]
 80102ea:	429a      	cmp	r2, r3
 80102ec:	d3b7      	bcc.n	801025e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80102ee:	2300      	movs	r3, #0
 80102f0:	613b      	str	r3, [r7, #16]
 80102f2:	e043      	b.n	801037c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80102f4:	693b      	ldr	r3, [r7, #16]
 80102f6:	015a      	lsls	r2, r3, #5
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	4413      	add	r3, r2
 80102fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010306:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801030a:	d118      	bne.n	801033e <USB_DevInit+0x206>
    {
      if (i == 0U)
 801030c:	693b      	ldr	r3, [r7, #16]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d10a      	bne.n	8010328 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010312:	693b      	ldr	r3, [r7, #16]
 8010314:	015a      	lsls	r2, r3, #5
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	4413      	add	r3, r2
 801031a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801031e:	461a      	mov	r2, r3
 8010320:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010324:	6013      	str	r3, [r2, #0]
 8010326:	e013      	b.n	8010350 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010328:	693b      	ldr	r3, [r7, #16]
 801032a:	015a      	lsls	r2, r3, #5
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	4413      	add	r3, r2
 8010330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010334:	461a      	mov	r2, r3
 8010336:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801033a:	6013      	str	r3, [r2, #0]
 801033c:	e008      	b.n	8010350 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801033e:	693b      	ldr	r3, [r7, #16]
 8010340:	015a      	lsls	r2, r3, #5
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	4413      	add	r3, r2
 8010346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801034a:	461a      	mov	r2, r3
 801034c:	2300      	movs	r3, #0
 801034e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010350:	693b      	ldr	r3, [r7, #16]
 8010352:	015a      	lsls	r2, r3, #5
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	4413      	add	r3, r2
 8010358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801035c:	461a      	mov	r2, r3
 801035e:	2300      	movs	r3, #0
 8010360:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010362:	693b      	ldr	r3, [r7, #16]
 8010364:	015a      	lsls	r2, r3, #5
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	4413      	add	r3, r2
 801036a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801036e:	461a      	mov	r2, r3
 8010370:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010374:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010376:	693b      	ldr	r3, [r7, #16]
 8010378:	3301      	adds	r3, #1
 801037a:	613b      	str	r3, [r7, #16]
 801037c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801037e:	693a      	ldr	r2, [r7, #16]
 8010380:	429a      	cmp	r2, r3
 8010382:	d3b7      	bcc.n	80102f4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801038a:	691b      	ldr	r3, [r3, #16]
 801038c:	68fa      	ldr	r2, [r7, #12]
 801038e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010396:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2200      	movs	r2, #0
 801039c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80103a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80103a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d105      	bne.n	80103b8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	699b      	ldr	r3, [r3, #24]
 80103b0:	f043 0210 	orr.w	r2, r3, #16
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	699a      	ldr	r2, [r3, #24]
 80103bc:	4b0f      	ldr	r3, [pc, #60]	; (80103fc <USB_DevInit+0x2c4>)
 80103be:	4313      	orrs	r3, r2
 80103c0:	687a      	ldr	r2, [r7, #4]
 80103c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80103c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d005      	beq.n	80103d6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	699b      	ldr	r3, [r3, #24]
 80103ce:	f043 0208 	orr.w	r2, r3, #8
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80103d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103d8:	2b01      	cmp	r3, #1
 80103da:	d107      	bne.n	80103ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	699b      	ldr	r3, [r3, #24]
 80103e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80103e4:	f043 0304 	orr.w	r3, r3, #4
 80103e8:	687a      	ldr	r2, [r7, #4]
 80103ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80103ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3718      	adds	r7, #24
 80103f2:	46bd      	mov	sp, r7
 80103f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80103f8:	b004      	add	sp, #16
 80103fa:	4770      	bx	lr
 80103fc:	803c3800 	.word	0x803c3800

08010400 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010400:	b480      	push	{r7}
 8010402:	b085      	sub	sp, #20
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
 8010408:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 801040a:	2300      	movs	r3, #0
 801040c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	019b      	lsls	r3, r3, #6
 8010412:	f043 0220 	orr.w	r2, r3, #32
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	3301      	adds	r3, #1
 801041e:	60fb      	str	r3, [r7, #12]
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	4a09      	ldr	r2, [pc, #36]	; (8010448 <USB_FlushTxFifo+0x48>)
 8010424:	4293      	cmp	r3, r2
 8010426:	d901      	bls.n	801042c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8010428:	2303      	movs	r3, #3
 801042a:	e006      	b.n	801043a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	691b      	ldr	r3, [r3, #16]
 8010430:	f003 0320 	and.w	r3, r3, #32
 8010434:	2b20      	cmp	r3, #32
 8010436:	d0f0      	beq.n	801041a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8010438:	2300      	movs	r3, #0
}
 801043a:	4618      	mov	r0, r3
 801043c:	3714      	adds	r7, #20
 801043e:	46bd      	mov	sp, r7
 8010440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010444:	4770      	bx	lr
 8010446:	bf00      	nop
 8010448:	00030d40 	.word	0x00030d40

0801044c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801044c:	b480      	push	{r7}
 801044e:	b085      	sub	sp, #20
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8010454:	2300      	movs	r3, #0
 8010456:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2210      	movs	r2, #16
 801045c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	3301      	adds	r3, #1
 8010462:	60fb      	str	r3, [r7, #12]
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	4a09      	ldr	r2, [pc, #36]	; (801048c <USB_FlushRxFifo+0x40>)
 8010468:	4293      	cmp	r3, r2
 801046a:	d901      	bls.n	8010470 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 801046c:	2303      	movs	r3, #3
 801046e:	e006      	b.n	801047e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	691b      	ldr	r3, [r3, #16]
 8010474:	f003 0310 	and.w	r3, r3, #16
 8010478:	2b10      	cmp	r3, #16
 801047a:	d0f0      	beq.n	801045e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801047c:	2300      	movs	r3, #0
}
 801047e:	4618      	mov	r0, r3
 8010480:	3714      	adds	r7, #20
 8010482:	46bd      	mov	sp, r7
 8010484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010488:	4770      	bx	lr
 801048a:	bf00      	nop
 801048c:	00030d40 	.word	0x00030d40

08010490 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010490:	b480      	push	{r7}
 8010492:	b085      	sub	sp, #20
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
 8010498:	460b      	mov	r3, r1
 801049a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104a6:	681a      	ldr	r2, [r3, #0]
 80104a8:	78fb      	ldrb	r3, [r7, #3]
 80104aa:	68f9      	ldr	r1, [r7, #12]
 80104ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80104b0:	4313      	orrs	r3, r2
 80104b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80104b4:	2300      	movs	r3, #0
}
 80104b6:	4618      	mov	r0, r3
 80104b8:	3714      	adds	r7, #20
 80104ba:	46bd      	mov	sp, r7
 80104bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c0:	4770      	bx	lr

080104c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80104c2:	b480      	push	{r7}
 80104c4:	b087      	sub	sp, #28
 80104c6:	af00      	add	r7, sp, #0
 80104c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80104ce:	693b      	ldr	r3, [r7, #16]
 80104d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104d4:	689b      	ldr	r3, [r3, #8]
 80104d6:	f003 0306 	and.w	r3, r3, #6
 80104da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d102      	bne.n	80104e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80104e2:	2300      	movs	r3, #0
 80104e4:	75fb      	strb	r3, [r7, #23]
 80104e6:	e00a      	b.n	80104fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	2b02      	cmp	r3, #2
 80104ec:	d002      	beq.n	80104f4 <USB_GetDevSpeed+0x32>
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	2b06      	cmp	r3, #6
 80104f2:	d102      	bne.n	80104fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80104f4:	2302      	movs	r3, #2
 80104f6:	75fb      	strb	r3, [r7, #23]
 80104f8:	e001      	b.n	80104fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80104fa:	230f      	movs	r3, #15
 80104fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80104fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8010500:	4618      	mov	r0, r3
 8010502:	371c      	adds	r7, #28
 8010504:	46bd      	mov	sp, r7
 8010506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050a:	4770      	bx	lr

0801050c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801050c:	b480      	push	{r7}
 801050e:	b085      	sub	sp, #20
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	781b      	ldrb	r3, [r3, #0]
 801051e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	785b      	ldrb	r3, [r3, #1]
 8010524:	2b01      	cmp	r3, #1
 8010526:	d13a      	bne.n	801059e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801052e:	69da      	ldr	r2, [r3, #28]
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	781b      	ldrb	r3, [r3, #0]
 8010534:	f003 030f 	and.w	r3, r3, #15
 8010538:	2101      	movs	r1, #1
 801053a:	fa01 f303 	lsl.w	r3, r1, r3
 801053e:	b29b      	uxth	r3, r3
 8010540:	68f9      	ldr	r1, [r7, #12]
 8010542:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010546:	4313      	orrs	r3, r2
 8010548:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	015a      	lsls	r2, r3, #5
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	4413      	add	r3, r2
 8010552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801055c:	2b00      	cmp	r3, #0
 801055e:	d155      	bne.n	801060c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	015a      	lsls	r2, r3, #5
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	4413      	add	r3, r2
 8010568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801056c:	681a      	ldr	r2, [r3, #0]
 801056e:	683b      	ldr	r3, [r7, #0]
 8010570:	689b      	ldr	r3, [r3, #8]
 8010572:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	78db      	ldrb	r3, [r3, #3]
 801057a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801057c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801057e:	68bb      	ldr	r3, [r7, #8]
 8010580:	059b      	lsls	r3, r3, #22
 8010582:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010584:	4313      	orrs	r3, r2
 8010586:	68ba      	ldr	r2, [r7, #8]
 8010588:	0151      	lsls	r1, r2, #5
 801058a:	68fa      	ldr	r2, [r7, #12]
 801058c:	440a      	add	r2, r1
 801058e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801059a:	6013      	str	r3, [r2, #0]
 801059c:	e036      	b.n	801060c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105a4:	69da      	ldr	r2, [r3, #28]
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	781b      	ldrb	r3, [r3, #0]
 80105aa:	f003 030f 	and.w	r3, r3, #15
 80105ae:	2101      	movs	r1, #1
 80105b0:	fa01 f303 	lsl.w	r3, r1, r3
 80105b4:	041b      	lsls	r3, r3, #16
 80105b6:	68f9      	ldr	r1, [r7, #12]
 80105b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80105bc:	4313      	orrs	r3, r2
 80105be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	015a      	lsls	r2, r3, #5
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	4413      	add	r3, r2
 80105c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d11a      	bne.n	801060c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	015a      	lsls	r2, r3, #5
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	4413      	add	r3, r2
 80105de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105e2:	681a      	ldr	r2, [r3, #0]
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	689b      	ldr	r3, [r3, #8]
 80105e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	78db      	ldrb	r3, [r3, #3]
 80105f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80105f2:	430b      	orrs	r3, r1
 80105f4:	4313      	orrs	r3, r2
 80105f6:	68ba      	ldr	r2, [r7, #8]
 80105f8:	0151      	lsls	r1, r2, #5
 80105fa:	68fa      	ldr	r2, [r7, #12]
 80105fc:	440a      	add	r2, r1
 80105fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801060a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801060c:	2300      	movs	r3, #0
}
 801060e:	4618      	mov	r0, r3
 8010610:	3714      	adds	r7, #20
 8010612:	46bd      	mov	sp, r7
 8010614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010618:	4770      	bx	lr
	...

0801061c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801061c:	b480      	push	{r7}
 801061e:	b085      	sub	sp, #20
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	781b      	ldrb	r3, [r3, #0]
 801062e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	785b      	ldrb	r3, [r3, #1]
 8010634:	2b01      	cmp	r3, #1
 8010636:	d161      	bne.n	80106fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	015a      	lsls	r2, r3, #5
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	4413      	add	r3, r2
 8010640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801064a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801064e:	d11f      	bne.n	8010690 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	015a      	lsls	r2, r3, #5
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	4413      	add	r3, r2
 8010658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	68ba      	ldr	r2, [r7, #8]
 8010660:	0151      	lsls	r1, r2, #5
 8010662:	68fa      	ldr	r2, [r7, #12]
 8010664:	440a      	add	r2, r1
 8010666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801066a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801066e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	015a      	lsls	r2, r3, #5
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	4413      	add	r3, r2
 8010678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	68ba      	ldr	r2, [r7, #8]
 8010680:	0151      	lsls	r1, r2, #5
 8010682:	68fa      	ldr	r2, [r7, #12]
 8010684:	440a      	add	r2, r1
 8010686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801068a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801068e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	781b      	ldrb	r3, [r3, #0]
 801069c:	f003 030f 	and.w	r3, r3, #15
 80106a0:	2101      	movs	r1, #1
 80106a2:	fa01 f303 	lsl.w	r3, r1, r3
 80106a6:	b29b      	uxth	r3, r3
 80106a8:	43db      	mvns	r3, r3
 80106aa:	68f9      	ldr	r1, [r7, #12]
 80106ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80106b0:	4013      	ands	r3, r2
 80106b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106ba:	69da      	ldr	r2, [r3, #28]
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	781b      	ldrb	r3, [r3, #0]
 80106c0:	f003 030f 	and.w	r3, r3, #15
 80106c4:	2101      	movs	r1, #1
 80106c6:	fa01 f303 	lsl.w	r3, r1, r3
 80106ca:	b29b      	uxth	r3, r3
 80106cc:	43db      	mvns	r3, r3
 80106ce:	68f9      	ldr	r1, [r7, #12]
 80106d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80106d4:	4013      	ands	r3, r2
 80106d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	015a      	lsls	r2, r3, #5
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	4413      	add	r3, r2
 80106e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106e4:	681a      	ldr	r2, [r3, #0]
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	0159      	lsls	r1, r3, #5
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	440b      	add	r3, r1
 80106ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106f2:	4619      	mov	r1, r3
 80106f4:	4b35      	ldr	r3, [pc, #212]	; (80107cc <USB_DeactivateEndpoint+0x1b0>)
 80106f6:	4013      	ands	r3, r2
 80106f8:	600b      	str	r3, [r1, #0]
 80106fa:	e060      	b.n	80107be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80106fc:	68bb      	ldr	r3, [r7, #8]
 80106fe:	015a      	lsls	r2, r3, #5
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	4413      	add	r3, r2
 8010704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801070e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010712:	d11f      	bne.n	8010754 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	015a      	lsls	r2, r3, #5
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	4413      	add	r3, r2
 801071c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	68ba      	ldr	r2, [r7, #8]
 8010724:	0151      	lsls	r1, r2, #5
 8010726:	68fa      	ldr	r2, [r7, #12]
 8010728:	440a      	add	r2, r1
 801072a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801072e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010732:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	015a      	lsls	r2, r3, #5
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	4413      	add	r3, r2
 801073c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	68ba      	ldr	r2, [r7, #8]
 8010744:	0151      	lsls	r1, r2, #5
 8010746:	68fa      	ldr	r2, [r7, #12]
 8010748:	440a      	add	r2, r1
 801074a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801074e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010752:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801075a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	781b      	ldrb	r3, [r3, #0]
 8010760:	f003 030f 	and.w	r3, r3, #15
 8010764:	2101      	movs	r1, #1
 8010766:	fa01 f303 	lsl.w	r3, r1, r3
 801076a:	041b      	lsls	r3, r3, #16
 801076c:	43db      	mvns	r3, r3
 801076e:	68f9      	ldr	r1, [r7, #12]
 8010770:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010774:	4013      	ands	r3, r2
 8010776:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801077e:	69da      	ldr	r2, [r3, #28]
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	781b      	ldrb	r3, [r3, #0]
 8010784:	f003 030f 	and.w	r3, r3, #15
 8010788:	2101      	movs	r1, #1
 801078a:	fa01 f303 	lsl.w	r3, r1, r3
 801078e:	041b      	lsls	r3, r3, #16
 8010790:	43db      	mvns	r3, r3
 8010792:	68f9      	ldr	r1, [r7, #12]
 8010794:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010798:	4013      	ands	r3, r2
 801079a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	015a      	lsls	r2, r3, #5
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	4413      	add	r3, r2
 80107a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107a8:	681a      	ldr	r2, [r3, #0]
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	0159      	lsls	r1, r3, #5
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	440b      	add	r3, r1
 80107b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107b6:	4619      	mov	r1, r3
 80107b8:	4b05      	ldr	r3, [pc, #20]	; (80107d0 <USB_DeactivateEndpoint+0x1b4>)
 80107ba:	4013      	ands	r3, r2
 80107bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80107be:	2300      	movs	r3, #0
}
 80107c0:	4618      	mov	r0, r3
 80107c2:	3714      	adds	r7, #20
 80107c4:	46bd      	mov	sp, r7
 80107c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ca:	4770      	bx	lr
 80107cc:	ec337800 	.word	0xec337800
 80107d0:	eff37800 	.word	0xeff37800

080107d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b08a      	sub	sp, #40	; 0x28
 80107d8:	af02      	add	r7, sp, #8
 80107da:	60f8      	str	r0, [r7, #12]
 80107dc:	60b9      	str	r1, [r7, #8]
 80107de:	4613      	mov	r3, r2
 80107e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	781b      	ldrb	r3, [r3, #0]
 80107ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	785b      	ldrb	r3, [r3, #1]
 80107f0:	2b01      	cmp	r3, #1
 80107f2:	f040 815c 	bne.w	8010aae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	695b      	ldr	r3, [r3, #20]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d132      	bne.n	8010864 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80107fe:	69bb      	ldr	r3, [r7, #24]
 8010800:	015a      	lsls	r2, r3, #5
 8010802:	69fb      	ldr	r3, [r7, #28]
 8010804:	4413      	add	r3, r2
 8010806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801080a:	691b      	ldr	r3, [r3, #16]
 801080c:	69ba      	ldr	r2, [r7, #24]
 801080e:	0151      	lsls	r1, r2, #5
 8010810:	69fa      	ldr	r2, [r7, #28]
 8010812:	440a      	add	r2, r1
 8010814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010818:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801081c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010820:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010822:	69bb      	ldr	r3, [r7, #24]
 8010824:	015a      	lsls	r2, r3, #5
 8010826:	69fb      	ldr	r3, [r7, #28]
 8010828:	4413      	add	r3, r2
 801082a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801082e:	691b      	ldr	r3, [r3, #16]
 8010830:	69ba      	ldr	r2, [r7, #24]
 8010832:	0151      	lsls	r1, r2, #5
 8010834:	69fa      	ldr	r2, [r7, #28]
 8010836:	440a      	add	r2, r1
 8010838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801083c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010840:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010842:	69bb      	ldr	r3, [r7, #24]
 8010844:	015a      	lsls	r2, r3, #5
 8010846:	69fb      	ldr	r3, [r7, #28]
 8010848:	4413      	add	r3, r2
 801084a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801084e:	691b      	ldr	r3, [r3, #16]
 8010850:	69ba      	ldr	r2, [r7, #24]
 8010852:	0151      	lsls	r1, r2, #5
 8010854:	69fa      	ldr	r2, [r7, #28]
 8010856:	440a      	add	r2, r1
 8010858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801085c:	0cdb      	lsrs	r3, r3, #19
 801085e:	04db      	lsls	r3, r3, #19
 8010860:	6113      	str	r3, [r2, #16]
 8010862:	e074      	b.n	801094e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010864:	69bb      	ldr	r3, [r7, #24]
 8010866:	015a      	lsls	r2, r3, #5
 8010868:	69fb      	ldr	r3, [r7, #28]
 801086a:	4413      	add	r3, r2
 801086c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010870:	691b      	ldr	r3, [r3, #16]
 8010872:	69ba      	ldr	r2, [r7, #24]
 8010874:	0151      	lsls	r1, r2, #5
 8010876:	69fa      	ldr	r2, [r7, #28]
 8010878:	440a      	add	r2, r1
 801087a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801087e:	0cdb      	lsrs	r3, r3, #19
 8010880:	04db      	lsls	r3, r3, #19
 8010882:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010884:	69bb      	ldr	r3, [r7, #24]
 8010886:	015a      	lsls	r2, r3, #5
 8010888:	69fb      	ldr	r3, [r7, #28]
 801088a:	4413      	add	r3, r2
 801088c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010890:	691b      	ldr	r3, [r3, #16]
 8010892:	69ba      	ldr	r2, [r7, #24]
 8010894:	0151      	lsls	r1, r2, #5
 8010896:	69fa      	ldr	r2, [r7, #28]
 8010898:	440a      	add	r2, r1
 801089a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801089e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80108a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80108a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80108a8:	69bb      	ldr	r3, [r7, #24]
 80108aa:	015a      	lsls	r2, r3, #5
 80108ac:	69fb      	ldr	r3, [r7, #28]
 80108ae:	4413      	add	r3, r2
 80108b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108b4:	691a      	ldr	r2, [r3, #16]
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	6959      	ldr	r1, [r3, #20]
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	689b      	ldr	r3, [r3, #8]
 80108be:	440b      	add	r3, r1
 80108c0:	1e59      	subs	r1, r3, #1
 80108c2:	68bb      	ldr	r3, [r7, #8]
 80108c4:	689b      	ldr	r3, [r3, #8]
 80108c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80108ca:	04d9      	lsls	r1, r3, #19
 80108cc:	4b9d      	ldr	r3, [pc, #628]	; (8010b44 <USB_EPStartXfer+0x370>)
 80108ce:	400b      	ands	r3, r1
 80108d0:	69b9      	ldr	r1, [r7, #24]
 80108d2:	0148      	lsls	r0, r1, #5
 80108d4:	69f9      	ldr	r1, [r7, #28]
 80108d6:	4401      	add	r1, r0
 80108d8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80108dc:	4313      	orrs	r3, r2
 80108de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80108e0:	69bb      	ldr	r3, [r7, #24]
 80108e2:	015a      	lsls	r2, r3, #5
 80108e4:	69fb      	ldr	r3, [r7, #28]
 80108e6:	4413      	add	r3, r2
 80108e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108ec:	691a      	ldr	r2, [r3, #16]
 80108ee:	68bb      	ldr	r3, [r7, #8]
 80108f0:	695b      	ldr	r3, [r3, #20]
 80108f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80108f6:	69b9      	ldr	r1, [r7, #24]
 80108f8:	0148      	lsls	r0, r1, #5
 80108fa:	69f9      	ldr	r1, [r7, #28]
 80108fc:	4401      	add	r1, r0
 80108fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010902:	4313      	orrs	r3, r2
 8010904:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8010906:	68bb      	ldr	r3, [r7, #8]
 8010908:	78db      	ldrb	r3, [r3, #3]
 801090a:	2b01      	cmp	r3, #1
 801090c:	d11f      	bne.n	801094e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801090e:	69bb      	ldr	r3, [r7, #24]
 8010910:	015a      	lsls	r2, r3, #5
 8010912:	69fb      	ldr	r3, [r7, #28]
 8010914:	4413      	add	r3, r2
 8010916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801091a:	691b      	ldr	r3, [r3, #16]
 801091c:	69ba      	ldr	r2, [r7, #24]
 801091e:	0151      	lsls	r1, r2, #5
 8010920:	69fa      	ldr	r2, [r7, #28]
 8010922:	440a      	add	r2, r1
 8010924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010928:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801092c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801092e:	69bb      	ldr	r3, [r7, #24]
 8010930:	015a      	lsls	r2, r3, #5
 8010932:	69fb      	ldr	r3, [r7, #28]
 8010934:	4413      	add	r3, r2
 8010936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801093a:	691b      	ldr	r3, [r3, #16]
 801093c:	69ba      	ldr	r2, [r7, #24]
 801093e:	0151      	lsls	r1, r2, #5
 8010940:	69fa      	ldr	r2, [r7, #28]
 8010942:	440a      	add	r2, r1
 8010944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010948:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801094c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801094e:	79fb      	ldrb	r3, [r7, #7]
 8010950:	2b01      	cmp	r3, #1
 8010952:	d14b      	bne.n	80109ec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	691b      	ldr	r3, [r3, #16]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d009      	beq.n	8010970 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801095c:	69bb      	ldr	r3, [r7, #24]
 801095e:	015a      	lsls	r2, r3, #5
 8010960:	69fb      	ldr	r3, [r7, #28]
 8010962:	4413      	add	r3, r2
 8010964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010968:	461a      	mov	r2, r3
 801096a:	68bb      	ldr	r3, [r7, #8]
 801096c:	691b      	ldr	r3, [r3, #16]
 801096e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	78db      	ldrb	r3, [r3, #3]
 8010974:	2b01      	cmp	r3, #1
 8010976:	d128      	bne.n	80109ca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010978:	69fb      	ldr	r3, [r7, #28]
 801097a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801097e:	689b      	ldr	r3, [r3, #8]
 8010980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010984:	2b00      	cmp	r3, #0
 8010986:	d110      	bne.n	80109aa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010988:	69bb      	ldr	r3, [r7, #24]
 801098a:	015a      	lsls	r2, r3, #5
 801098c:	69fb      	ldr	r3, [r7, #28]
 801098e:	4413      	add	r3, r2
 8010990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	69ba      	ldr	r2, [r7, #24]
 8010998:	0151      	lsls	r1, r2, #5
 801099a:	69fa      	ldr	r2, [r7, #28]
 801099c:	440a      	add	r2, r1
 801099e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80109a6:	6013      	str	r3, [r2, #0]
 80109a8:	e00f      	b.n	80109ca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80109aa:	69bb      	ldr	r3, [r7, #24]
 80109ac:	015a      	lsls	r2, r3, #5
 80109ae:	69fb      	ldr	r3, [r7, #28]
 80109b0:	4413      	add	r3, r2
 80109b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	69ba      	ldr	r2, [r7, #24]
 80109ba:	0151      	lsls	r1, r2, #5
 80109bc:	69fa      	ldr	r2, [r7, #28]
 80109be:	440a      	add	r2, r1
 80109c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80109c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80109ca:	69bb      	ldr	r3, [r7, #24]
 80109cc:	015a      	lsls	r2, r3, #5
 80109ce:	69fb      	ldr	r3, [r7, #28]
 80109d0:	4413      	add	r3, r2
 80109d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	69ba      	ldr	r2, [r7, #24]
 80109da:	0151      	lsls	r1, r2, #5
 80109dc:	69fa      	ldr	r2, [r7, #28]
 80109de:	440a      	add	r2, r1
 80109e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80109e8:	6013      	str	r3, [r2, #0]
 80109ea:	e12f      	b.n	8010c4c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80109ec:	69bb      	ldr	r3, [r7, #24]
 80109ee:	015a      	lsls	r2, r3, #5
 80109f0:	69fb      	ldr	r3, [r7, #28]
 80109f2:	4413      	add	r3, r2
 80109f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	69ba      	ldr	r2, [r7, #24]
 80109fc:	0151      	lsls	r1, r2, #5
 80109fe:	69fa      	ldr	r2, [r7, #28]
 8010a00:	440a      	add	r2, r1
 8010a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010a0a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	78db      	ldrb	r3, [r3, #3]
 8010a10:	2b01      	cmp	r3, #1
 8010a12:	d015      	beq.n	8010a40 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	695b      	ldr	r3, [r3, #20]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	f000 8117 	beq.w	8010c4c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010a1e:	69fb      	ldr	r3, [r7, #28]
 8010a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	781b      	ldrb	r3, [r3, #0]
 8010a2a:	f003 030f 	and.w	r3, r3, #15
 8010a2e:	2101      	movs	r1, #1
 8010a30:	fa01 f303 	lsl.w	r3, r1, r3
 8010a34:	69f9      	ldr	r1, [r7, #28]
 8010a36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010a3a:	4313      	orrs	r3, r2
 8010a3c:	634b      	str	r3, [r1, #52]	; 0x34
 8010a3e:	e105      	b.n	8010c4c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010a40:	69fb      	ldr	r3, [r7, #28]
 8010a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a46:	689b      	ldr	r3, [r3, #8]
 8010a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d110      	bne.n	8010a72 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010a50:	69bb      	ldr	r3, [r7, #24]
 8010a52:	015a      	lsls	r2, r3, #5
 8010a54:	69fb      	ldr	r3, [r7, #28]
 8010a56:	4413      	add	r3, r2
 8010a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	69ba      	ldr	r2, [r7, #24]
 8010a60:	0151      	lsls	r1, r2, #5
 8010a62:	69fa      	ldr	r2, [r7, #28]
 8010a64:	440a      	add	r2, r1
 8010a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010a6e:	6013      	str	r3, [r2, #0]
 8010a70:	e00f      	b.n	8010a92 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010a72:	69bb      	ldr	r3, [r7, #24]
 8010a74:	015a      	lsls	r2, r3, #5
 8010a76:	69fb      	ldr	r3, [r7, #28]
 8010a78:	4413      	add	r3, r2
 8010a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	69ba      	ldr	r2, [r7, #24]
 8010a82:	0151      	lsls	r1, r2, #5
 8010a84:	69fa      	ldr	r2, [r7, #28]
 8010a86:	440a      	add	r2, r1
 8010a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010a90:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010a92:	68bb      	ldr	r3, [r7, #8]
 8010a94:	68d9      	ldr	r1, [r3, #12]
 8010a96:	68bb      	ldr	r3, [r7, #8]
 8010a98:	781a      	ldrb	r2, [r3, #0]
 8010a9a:	68bb      	ldr	r3, [r7, #8]
 8010a9c:	695b      	ldr	r3, [r3, #20]
 8010a9e:	b298      	uxth	r0, r3
 8010aa0:	79fb      	ldrb	r3, [r7, #7]
 8010aa2:	9300      	str	r3, [sp, #0]
 8010aa4:	4603      	mov	r3, r0
 8010aa6:	68f8      	ldr	r0, [r7, #12]
 8010aa8:	f000 fa2b 	bl	8010f02 <USB_WritePacket>
 8010aac:	e0ce      	b.n	8010c4c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010aae:	69bb      	ldr	r3, [r7, #24]
 8010ab0:	015a      	lsls	r2, r3, #5
 8010ab2:	69fb      	ldr	r3, [r7, #28]
 8010ab4:	4413      	add	r3, r2
 8010ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010aba:	691b      	ldr	r3, [r3, #16]
 8010abc:	69ba      	ldr	r2, [r7, #24]
 8010abe:	0151      	lsls	r1, r2, #5
 8010ac0:	69fa      	ldr	r2, [r7, #28]
 8010ac2:	440a      	add	r2, r1
 8010ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ac8:	0cdb      	lsrs	r3, r3, #19
 8010aca:	04db      	lsls	r3, r3, #19
 8010acc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010ace:	69bb      	ldr	r3, [r7, #24]
 8010ad0:	015a      	lsls	r2, r3, #5
 8010ad2:	69fb      	ldr	r3, [r7, #28]
 8010ad4:	4413      	add	r3, r2
 8010ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ada:	691b      	ldr	r3, [r3, #16]
 8010adc:	69ba      	ldr	r2, [r7, #24]
 8010ade:	0151      	lsls	r1, r2, #5
 8010ae0:	69fa      	ldr	r2, [r7, #28]
 8010ae2:	440a      	add	r2, r1
 8010ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ae8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010aec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010af0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	695b      	ldr	r3, [r3, #20]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d126      	bne.n	8010b48 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010afa:	69bb      	ldr	r3, [r7, #24]
 8010afc:	015a      	lsls	r2, r3, #5
 8010afe:	69fb      	ldr	r3, [r7, #28]
 8010b00:	4413      	add	r3, r2
 8010b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b06:	691a      	ldr	r2, [r3, #16]
 8010b08:	68bb      	ldr	r3, [r7, #8]
 8010b0a:	689b      	ldr	r3, [r3, #8]
 8010b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010b10:	69b9      	ldr	r1, [r7, #24]
 8010b12:	0148      	lsls	r0, r1, #5
 8010b14:	69f9      	ldr	r1, [r7, #28]
 8010b16:	4401      	add	r1, r0
 8010b18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010b1c:	4313      	orrs	r3, r2
 8010b1e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010b20:	69bb      	ldr	r3, [r7, #24]
 8010b22:	015a      	lsls	r2, r3, #5
 8010b24:	69fb      	ldr	r3, [r7, #28]
 8010b26:	4413      	add	r3, r2
 8010b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b2c:	691b      	ldr	r3, [r3, #16]
 8010b2e:	69ba      	ldr	r2, [r7, #24]
 8010b30:	0151      	lsls	r1, r2, #5
 8010b32:	69fa      	ldr	r2, [r7, #28]
 8010b34:	440a      	add	r2, r1
 8010b36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010b3e:	6113      	str	r3, [r2, #16]
 8010b40:	e036      	b.n	8010bb0 <USB_EPStartXfer+0x3dc>
 8010b42:	bf00      	nop
 8010b44:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	695a      	ldr	r2, [r3, #20]
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	689b      	ldr	r3, [r3, #8]
 8010b50:	4413      	add	r3, r2
 8010b52:	1e5a      	subs	r2, r3, #1
 8010b54:	68bb      	ldr	r3, [r7, #8]
 8010b56:	689b      	ldr	r3, [r3, #8]
 8010b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b5c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010b5e:	69bb      	ldr	r3, [r7, #24]
 8010b60:	015a      	lsls	r2, r3, #5
 8010b62:	69fb      	ldr	r3, [r7, #28]
 8010b64:	4413      	add	r3, r2
 8010b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b6a:	691a      	ldr	r2, [r3, #16]
 8010b6c:	8afb      	ldrh	r3, [r7, #22]
 8010b6e:	04d9      	lsls	r1, r3, #19
 8010b70:	4b39      	ldr	r3, [pc, #228]	; (8010c58 <USB_EPStartXfer+0x484>)
 8010b72:	400b      	ands	r3, r1
 8010b74:	69b9      	ldr	r1, [r7, #24]
 8010b76:	0148      	lsls	r0, r1, #5
 8010b78:	69f9      	ldr	r1, [r7, #28]
 8010b7a:	4401      	add	r1, r0
 8010b7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010b80:	4313      	orrs	r3, r2
 8010b82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8010b84:	69bb      	ldr	r3, [r7, #24]
 8010b86:	015a      	lsls	r2, r3, #5
 8010b88:	69fb      	ldr	r3, [r7, #28]
 8010b8a:	4413      	add	r3, r2
 8010b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b90:	691a      	ldr	r2, [r3, #16]
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	689b      	ldr	r3, [r3, #8]
 8010b96:	8af9      	ldrh	r1, [r7, #22]
 8010b98:	fb01 f303 	mul.w	r3, r1, r3
 8010b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010ba0:	69b9      	ldr	r1, [r7, #24]
 8010ba2:	0148      	lsls	r0, r1, #5
 8010ba4:	69f9      	ldr	r1, [r7, #28]
 8010ba6:	4401      	add	r1, r0
 8010ba8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010bac:	4313      	orrs	r3, r2
 8010bae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010bb0:	79fb      	ldrb	r3, [r7, #7]
 8010bb2:	2b01      	cmp	r3, #1
 8010bb4:	d10d      	bne.n	8010bd2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010bb6:	68bb      	ldr	r3, [r7, #8]
 8010bb8:	68db      	ldr	r3, [r3, #12]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d009      	beq.n	8010bd2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010bbe:	68bb      	ldr	r3, [r7, #8]
 8010bc0:	68d9      	ldr	r1, [r3, #12]
 8010bc2:	69bb      	ldr	r3, [r7, #24]
 8010bc4:	015a      	lsls	r2, r3, #5
 8010bc6:	69fb      	ldr	r3, [r7, #28]
 8010bc8:	4413      	add	r3, r2
 8010bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bce:	460a      	mov	r2, r1
 8010bd0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010bd2:	68bb      	ldr	r3, [r7, #8]
 8010bd4:	78db      	ldrb	r3, [r3, #3]
 8010bd6:	2b01      	cmp	r3, #1
 8010bd8:	d128      	bne.n	8010c2c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010bda:	69fb      	ldr	r3, [r7, #28]
 8010bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010be0:	689b      	ldr	r3, [r3, #8]
 8010be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d110      	bne.n	8010c0c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010bea:	69bb      	ldr	r3, [r7, #24]
 8010bec:	015a      	lsls	r2, r3, #5
 8010bee:	69fb      	ldr	r3, [r7, #28]
 8010bf0:	4413      	add	r3, r2
 8010bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	69ba      	ldr	r2, [r7, #24]
 8010bfa:	0151      	lsls	r1, r2, #5
 8010bfc:	69fa      	ldr	r2, [r7, #28]
 8010bfe:	440a      	add	r2, r1
 8010c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010c08:	6013      	str	r3, [r2, #0]
 8010c0a:	e00f      	b.n	8010c2c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010c0c:	69bb      	ldr	r3, [r7, #24]
 8010c0e:	015a      	lsls	r2, r3, #5
 8010c10:	69fb      	ldr	r3, [r7, #28]
 8010c12:	4413      	add	r3, r2
 8010c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	69ba      	ldr	r2, [r7, #24]
 8010c1c:	0151      	lsls	r1, r2, #5
 8010c1e:	69fa      	ldr	r2, [r7, #28]
 8010c20:	440a      	add	r2, r1
 8010c22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010c2a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010c2c:	69bb      	ldr	r3, [r7, #24]
 8010c2e:	015a      	lsls	r2, r3, #5
 8010c30:	69fb      	ldr	r3, [r7, #28]
 8010c32:	4413      	add	r3, r2
 8010c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	69ba      	ldr	r2, [r7, #24]
 8010c3c:	0151      	lsls	r1, r2, #5
 8010c3e:	69fa      	ldr	r2, [r7, #28]
 8010c40:	440a      	add	r2, r1
 8010c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010c4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010c4c:	2300      	movs	r3, #0
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3720      	adds	r7, #32
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}
 8010c56:	bf00      	nop
 8010c58:	1ff80000 	.word	0x1ff80000

08010c5c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010c5c:	b480      	push	{r7}
 8010c5e:	b087      	sub	sp, #28
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	60f8      	str	r0, [r7, #12]
 8010c64:	60b9      	str	r1, [r7, #8]
 8010c66:	4613      	mov	r3, r2
 8010c68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	781b      	ldrb	r3, [r3, #0]
 8010c72:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010c74:	68bb      	ldr	r3, [r7, #8]
 8010c76:	785b      	ldrb	r3, [r3, #1]
 8010c78:	2b01      	cmp	r3, #1
 8010c7a:	f040 80cd 	bne.w	8010e18 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	695b      	ldr	r3, [r3, #20]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d132      	bne.n	8010cec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	015a      	lsls	r2, r3, #5
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	4413      	add	r3, r2
 8010c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c92:	691b      	ldr	r3, [r3, #16]
 8010c94:	693a      	ldr	r2, [r7, #16]
 8010c96:	0151      	lsls	r1, r2, #5
 8010c98:	697a      	ldr	r2, [r7, #20]
 8010c9a:	440a      	add	r2, r1
 8010c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ca0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010ca4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010ca8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010caa:	693b      	ldr	r3, [r7, #16]
 8010cac:	015a      	lsls	r2, r3, #5
 8010cae:	697b      	ldr	r3, [r7, #20]
 8010cb0:	4413      	add	r3, r2
 8010cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cb6:	691b      	ldr	r3, [r3, #16]
 8010cb8:	693a      	ldr	r2, [r7, #16]
 8010cba:	0151      	lsls	r1, r2, #5
 8010cbc:	697a      	ldr	r2, [r7, #20]
 8010cbe:	440a      	add	r2, r1
 8010cc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010cc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010cc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010cca:	693b      	ldr	r3, [r7, #16]
 8010ccc:	015a      	lsls	r2, r3, #5
 8010cce:	697b      	ldr	r3, [r7, #20]
 8010cd0:	4413      	add	r3, r2
 8010cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cd6:	691b      	ldr	r3, [r3, #16]
 8010cd8:	693a      	ldr	r2, [r7, #16]
 8010cda:	0151      	lsls	r1, r2, #5
 8010cdc:	697a      	ldr	r2, [r7, #20]
 8010cde:	440a      	add	r2, r1
 8010ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ce4:	0cdb      	lsrs	r3, r3, #19
 8010ce6:	04db      	lsls	r3, r3, #19
 8010ce8:	6113      	str	r3, [r2, #16]
 8010cea:	e04e      	b.n	8010d8a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010cec:	693b      	ldr	r3, [r7, #16]
 8010cee:	015a      	lsls	r2, r3, #5
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	4413      	add	r3, r2
 8010cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cf8:	691b      	ldr	r3, [r3, #16]
 8010cfa:	693a      	ldr	r2, [r7, #16]
 8010cfc:	0151      	lsls	r1, r2, #5
 8010cfe:	697a      	ldr	r2, [r7, #20]
 8010d00:	440a      	add	r2, r1
 8010d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d06:	0cdb      	lsrs	r3, r3, #19
 8010d08:	04db      	lsls	r3, r3, #19
 8010d0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010d0c:	693b      	ldr	r3, [r7, #16]
 8010d0e:	015a      	lsls	r2, r3, #5
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	4413      	add	r3, r2
 8010d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d18:	691b      	ldr	r3, [r3, #16]
 8010d1a:	693a      	ldr	r2, [r7, #16]
 8010d1c:	0151      	lsls	r1, r2, #5
 8010d1e:	697a      	ldr	r2, [r7, #20]
 8010d20:	440a      	add	r2, r1
 8010d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010d2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010d2e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	695a      	ldr	r2, [r3, #20]
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	689b      	ldr	r3, [r3, #8]
 8010d38:	429a      	cmp	r2, r3
 8010d3a:	d903      	bls.n	8010d44 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	689a      	ldr	r2, [r3, #8]
 8010d40:	68bb      	ldr	r3, [r7, #8]
 8010d42:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010d44:	693b      	ldr	r3, [r7, #16]
 8010d46:	015a      	lsls	r2, r3, #5
 8010d48:	697b      	ldr	r3, [r7, #20]
 8010d4a:	4413      	add	r3, r2
 8010d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d50:	691b      	ldr	r3, [r3, #16]
 8010d52:	693a      	ldr	r2, [r7, #16]
 8010d54:	0151      	lsls	r1, r2, #5
 8010d56:	697a      	ldr	r2, [r7, #20]
 8010d58:	440a      	add	r2, r1
 8010d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010d62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010d64:	693b      	ldr	r3, [r7, #16]
 8010d66:	015a      	lsls	r2, r3, #5
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	4413      	add	r3, r2
 8010d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d70:	691a      	ldr	r2, [r3, #16]
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	695b      	ldr	r3, [r3, #20]
 8010d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010d7a:	6939      	ldr	r1, [r7, #16]
 8010d7c:	0148      	lsls	r0, r1, #5
 8010d7e:	6979      	ldr	r1, [r7, #20]
 8010d80:	4401      	add	r1, r0
 8010d82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010d86:	4313      	orrs	r3, r2
 8010d88:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010d8a:	79fb      	ldrb	r3, [r7, #7]
 8010d8c:	2b01      	cmp	r3, #1
 8010d8e:	d11e      	bne.n	8010dce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	691b      	ldr	r3, [r3, #16]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d009      	beq.n	8010dac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010d98:	693b      	ldr	r3, [r7, #16]
 8010d9a:	015a      	lsls	r2, r3, #5
 8010d9c:	697b      	ldr	r3, [r7, #20]
 8010d9e:	4413      	add	r3, r2
 8010da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010da4:	461a      	mov	r2, r3
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	691b      	ldr	r3, [r3, #16]
 8010daa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010dac:	693b      	ldr	r3, [r7, #16]
 8010dae:	015a      	lsls	r2, r3, #5
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	4413      	add	r3, r2
 8010db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	693a      	ldr	r2, [r7, #16]
 8010dbc:	0151      	lsls	r1, r2, #5
 8010dbe:	697a      	ldr	r2, [r7, #20]
 8010dc0:	440a      	add	r2, r1
 8010dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010dc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010dca:	6013      	str	r3, [r2, #0]
 8010dcc:	e092      	b.n	8010ef4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010dce:	693b      	ldr	r3, [r7, #16]
 8010dd0:	015a      	lsls	r2, r3, #5
 8010dd2:	697b      	ldr	r3, [r7, #20]
 8010dd4:	4413      	add	r3, r2
 8010dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	693a      	ldr	r2, [r7, #16]
 8010dde:	0151      	lsls	r1, r2, #5
 8010de0:	697a      	ldr	r2, [r7, #20]
 8010de2:	440a      	add	r2, r1
 8010de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010de8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010dec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	695b      	ldr	r3, [r3, #20]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d07e      	beq.n	8010ef4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010dfe:	68bb      	ldr	r3, [r7, #8]
 8010e00:	781b      	ldrb	r3, [r3, #0]
 8010e02:	f003 030f 	and.w	r3, r3, #15
 8010e06:	2101      	movs	r1, #1
 8010e08:	fa01 f303 	lsl.w	r3, r1, r3
 8010e0c:	6979      	ldr	r1, [r7, #20]
 8010e0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010e12:	4313      	orrs	r3, r2
 8010e14:	634b      	str	r3, [r1, #52]	; 0x34
 8010e16:	e06d      	b.n	8010ef4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010e18:	693b      	ldr	r3, [r7, #16]
 8010e1a:	015a      	lsls	r2, r3, #5
 8010e1c:	697b      	ldr	r3, [r7, #20]
 8010e1e:	4413      	add	r3, r2
 8010e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e24:	691b      	ldr	r3, [r3, #16]
 8010e26:	693a      	ldr	r2, [r7, #16]
 8010e28:	0151      	lsls	r1, r2, #5
 8010e2a:	697a      	ldr	r2, [r7, #20]
 8010e2c:	440a      	add	r2, r1
 8010e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e32:	0cdb      	lsrs	r3, r3, #19
 8010e34:	04db      	lsls	r3, r3, #19
 8010e36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010e38:	693b      	ldr	r3, [r7, #16]
 8010e3a:	015a      	lsls	r2, r3, #5
 8010e3c:	697b      	ldr	r3, [r7, #20]
 8010e3e:	4413      	add	r3, r2
 8010e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e44:	691b      	ldr	r3, [r3, #16]
 8010e46:	693a      	ldr	r2, [r7, #16]
 8010e48:	0151      	lsls	r1, r2, #5
 8010e4a:	697a      	ldr	r2, [r7, #20]
 8010e4c:	440a      	add	r2, r1
 8010e4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010e56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010e5a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010e5c:	68bb      	ldr	r3, [r7, #8]
 8010e5e:	695b      	ldr	r3, [r3, #20]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d003      	beq.n	8010e6c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010e64:	68bb      	ldr	r3, [r7, #8]
 8010e66:	689a      	ldr	r2, [r3, #8]
 8010e68:	68bb      	ldr	r3, [r7, #8]
 8010e6a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010e6c:	693b      	ldr	r3, [r7, #16]
 8010e6e:	015a      	lsls	r2, r3, #5
 8010e70:	697b      	ldr	r3, [r7, #20]
 8010e72:	4413      	add	r3, r2
 8010e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e78:	691b      	ldr	r3, [r3, #16]
 8010e7a:	693a      	ldr	r2, [r7, #16]
 8010e7c:	0151      	lsls	r1, r2, #5
 8010e7e:	697a      	ldr	r2, [r7, #20]
 8010e80:	440a      	add	r2, r1
 8010e82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010e8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8010e8c:	693b      	ldr	r3, [r7, #16]
 8010e8e:	015a      	lsls	r2, r3, #5
 8010e90:	697b      	ldr	r3, [r7, #20]
 8010e92:	4413      	add	r3, r2
 8010e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e98:	691a      	ldr	r2, [r3, #16]
 8010e9a:	68bb      	ldr	r3, [r7, #8]
 8010e9c:	689b      	ldr	r3, [r3, #8]
 8010e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010ea2:	6939      	ldr	r1, [r7, #16]
 8010ea4:	0148      	lsls	r0, r1, #5
 8010ea6:	6979      	ldr	r1, [r7, #20]
 8010ea8:	4401      	add	r1, r0
 8010eaa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010eae:	4313      	orrs	r3, r2
 8010eb0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010eb2:	79fb      	ldrb	r3, [r7, #7]
 8010eb4:	2b01      	cmp	r3, #1
 8010eb6:	d10d      	bne.n	8010ed4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010eb8:	68bb      	ldr	r3, [r7, #8]
 8010eba:	68db      	ldr	r3, [r3, #12]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d009      	beq.n	8010ed4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010ec0:	68bb      	ldr	r3, [r7, #8]
 8010ec2:	68d9      	ldr	r1, [r3, #12]
 8010ec4:	693b      	ldr	r3, [r7, #16]
 8010ec6:	015a      	lsls	r2, r3, #5
 8010ec8:	697b      	ldr	r3, [r7, #20]
 8010eca:	4413      	add	r3, r2
 8010ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ed0:	460a      	mov	r2, r1
 8010ed2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010ed4:	693b      	ldr	r3, [r7, #16]
 8010ed6:	015a      	lsls	r2, r3, #5
 8010ed8:	697b      	ldr	r3, [r7, #20]
 8010eda:	4413      	add	r3, r2
 8010edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	693a      	ldr	r2, [r7, #16]
 8010ee4:	0151      	lsls	r1, r2, #5
 8010ee6:	697a      	ldr	r2, [r7, #20]
 8010ee8:	440a      	add	r2, r1
 8010eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010eee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010ef2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010ef4:	2300      	movs	r3, #0
}
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	371c      	adds	r7, #28
 8010efa:	46bd      	mov	sp, r7
 8010efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f00:	4770      	bx	lr

08010f02 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010f02:	b480      	push	{r7}
 8010f04:	b089      	sub	sp, #36	; 0x24
 8010f06:	af00      	add	r7, sp, #0
 8010f08:	60f8      	str	r0, [r7, #12]
 8010f0a:	60b9      	str	r1, [r7, #8]
 8010f0c:	4611      	mov	r1, r2
 8010f0e:	461a      	mov	r2, r3
 8010f10:	460b      	mov	r3, r1
 8010f12:	71fb      	strb	r3, [r7, #7]
 8010f14:	4613      	mov	r3, r2
 8010f16:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8010f20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d11a      	bne.n	8010f5e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010f28:	88bb      	ldrh	r3, [r7, #4]
 8010f2a:	3303      	adds	r3, #3
 8010f2c:	089b      	lsrs	r3, r3, #2
 8010f2e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010f30:	2300      	movs	r3, #0
 8010f32:	61bb      	str	r3, [r7, #24]
 8010f34:	e00f      	b.n	8010f56 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010f36:	79fb      	ldrb	r3, [r7, #7]
 8010f38:	031a      	lsls	r2, r3, #12
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	4413      	add	r3, r2
 8010f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010f42:	461a      	mov	r2, r3
 8010f44:	69fb      	ldr	r3, [r7, #28]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010f4a:	69fb      	ldr	r3, [r7, #28]
 8010f4c:	3304      	adds	r3, #4
 8010f4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010f50:	69bb      	ldr	r3, [r7, #24]
 8010f52:	3301      	adds	r3, #1
 8010f54:	61bb      	str	r3, [r7, #24]
 8010f56:	69ba      	ldr	r2, [r7, #24]
 8010f58:	693b      	ldr	r3, [r7, #16]
 8010f5a:	429a      	cmp	r2, r3
 8010f5c:	d3eb      	bcc.n	8010f36 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010f5e:	2300      	movs	r3, #0
}
 8010f60:	4618      	mov	r0, r3
 8010f62:	3724      	adds	r7, #36	; 0x24
 8010f64:	46bd      	mov	sp, r7
 8010f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6a:	4770      	bx	lr

08010f6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010f6c:	b480      	push	{r7}
 8010f6e:	b089      	sub	sp, #36	; 0x24
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	60f8      	str	r0, [r7, #12]
 8010f74:	60b9      	str	r1, [r7, #8]
 8010f76:	4613      	mov	r3, r2
 8010f78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8010f82:	88fb      	ldrh	r3, [r7, #6]
 8010f84:	3303      	adds	r3, #3
 8010f86:	089b      	lsrs	r3, r3, #2
 8010f88:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	61bb      	str	r3, [r7, #24]
 8010f8e:	e00b      	b.n	8010fa8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010f96:	681a      	ldr	r2, [r3, #0]
 8010f98:	69fb      	ldr	r3, [r7, #28]
 8010f9a:	601a      	str	r2, [r3, #0]
    pDest++;
 8010f9c:	69fb      	ldr	r3, [r7, #28]
 8010f9e:	3304      	adds	r3, #4
 8010fa0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8010fa2:	69bb      	ldr	r3, [r7, #24]
 8010fa4:	3301      	adds	r3, #1
 8010fa6:	61bb      	str	r3, [r7, #24]
 8010fa8:	69ba      	ldr	r2, [r7, #24]
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d3ef      	bcc.n	8010f90 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8010fb0:	69fb      	ldr	r3, [r7, #28]
}
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	3724      	adds	r7, #36	; 0x24
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fbc:	4770      	bx	lr

08010fbe <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010fbe:	b480      	push	{r7}
 8010fc0:	b085      	sub	sp, #20
 8010fc2:	af00      	add	r7, sp, #0
 8010fc4:	6078      	str	r0, [r7, #4]
 8010fc6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	781b      	ldrb	r3, [r3, #0]
 8010fd0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	785b      	ldrb	r3, [r3, #1]
 8010fd6:	2b01      	cmp	r3, #1
 8010fd8:	d12c      	bne.n	8011034 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010fda:	68bb      	ldr	r3, [r7, #8]
 8010fdc:	015a      	lsls	r2, r3, #5
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	4413      	add	r3, r2
 8010fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	db12      	blt.n	8011012 <USB_EPSetStall+0x54>
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d00f      	beq.n	8011012 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010ff2:	68bb      	ldr	r3, [r7, #8]
 8010ff4:	015a      	lsls	r2, r3, #5
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	4413      	add	r3, r2
 8010ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	68ba      	ldr	r2, [r7, #8]
 8011002:	0151      	lsls	r1, r2, #5
 8011004:	68fa      	ldr	r2, [r7, #12]
 8011006:	440a      	add	r2, r1
 8011008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801100c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011010:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011012:	68bb      	ldr	r3, [r7, #8]
 8011014:	015a      	lsls	r2, r3, #5
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	4413      	add	r3, r2
 801101a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	68ba      	ldr	r2, [r7, #8]
 8011022:	0151      	lsls	r1, r2, #5
 8011024:	68fa      	ldr	r2, [r7, #12]
 8011026:	440a      	add	r2, r1
 8011028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801102c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011030:	6013      	str	r3, [r2, #0]
 8011032:	e02b      	b.n	801108c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011034:	68bb      	ldr	r3, [r7, #8]
 8011036:	015a      	lsls	r2, r3, #5
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	4413      	add	r3, r2
 801103c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	2b00      	cmp	r3, #0
 8011044:	db12      	blt.n	801106c <USB_EPSetStall+0xae>
 8011046:	68bb      	ldr	r3, [r7, #8]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d00f      	beq.n	801106c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801104c:	68bb      	ldr	r3, [r7, #8]
 801104e:	015a      	lsls	r2, r3, #5
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	4413      	add	r3, r2
 8011054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	68ba      	ldr	r2, [r7, #8]
 801105c:	0151      	lsls	r1, r2, #5
 801105e:	68fa      	ldr	r2, [r7, #12]
 8011060:	440a      	add	r2, r1
 8011062:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011066:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801106a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801106c:	68bb      	ldr	r3, [r7, #8]
 801106e:	015a      	lsls	r2, r3, #5
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	4413      	add	r3, r2
 8011074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	68ba      	ldr	r2, [r7, #8]
 801107c:	0151      	lsls	r1, r2, #5
 801107e:	68fa      	ldr	r2, [r7, #12]
 8011080:	440a      	add	r2, r1
 8011082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011086:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801108a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801108c:	2300      	movs	r3, #0
}
 801108e:	4618      	mov	r0, r3
 8011090:	3714      	adds	r7, #20
 8011092:	46bd      	mov	sp, r7
 8011094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011098:	4770      	bx	lr

0801109a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801109a:	b480      	push	{r7}
 801109c:	b085      	sub	sp, #20
 801109e:	af00      	add	r7, sp, #0
 80110a0:	6078      	str	r0, [r7, #4]
 80110a2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80110a8:	683b      	ldr	r3, [r7, #0]
 80110aa:	781b      	ldrb	r3, [r3, #0]
 80110ac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	785b      	ldrb	r3, [r3, #1]
 80110b2:	2b01      	cmp	r3, #1
 80110b4:	d128      	bne.n	8011108 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80110b6:	68bb      	ldr	r3, [r7, #8]
 80110b8:	015a      	lsls	r2, r3, #5
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	4413      	add	r3, r2
 80110be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	68ba      	ldr	r2, [r7, #8]
 80110c6:	0151      	lsls	r1, r2, #5
 80110c8:	68fa      	ldr	r2, [r7, #12]
 80110ca:	440a      	add	r2, r1
 80110cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80110d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80110d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	78db      	ldrb	r3, [r3, #3]
 80110da:	2b03      	cmp	r3, #3
 80110dc:	d003      	beq.n	80110e6 <USB_EPClearStall+0x4c>
 80110de:	683b      	ldr	r3, [r7, #0]
 80110e0:	78db      	ldrb	r3, [r3, #3]
 80110e2:	2b02      	cmp	r3, #2
 80110e4:	d138      	bne.n	8011158 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	015a      	lsls	r2, r3, #5
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	4413      	add	r3, r2
 80110ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	68ba      	ldr	r2, [r7, #8]
 80110f6:	0151      	lsls	r1, r2, #5
 80110f8:	68fa      	ldr	r2, [r7, #12]
 80110fa:	440a      	add	r2, r1
 80110fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011104:	6013      	str	r3, [r2, #0]
 8011106:	e027      	b.n	8011158 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	015a      	lsls	r2, r3, #5
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	4413      	add	r3, r2
 8011110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	68ba      	ldr	r2, [r7, #8]
 8011118:	0151      	lsls	r1, r2, #5
 801111a:	68fa      	ldr	r2, [r7, #12]
 801111c:	440a      	add	r2, r1
 801111e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011122:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011126:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	78db      	ldrb	r3, [r3, #3]
 801112c:	2b03      	cmp	r3, #3
 801112e:	d003      	beq.n	8011138 <USB_EPClearStall+0x9e>
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	78db      	ldrb	r3, [r3, #3]
 8011134:	2b02      	cmp	r3, #2
 8011136:	d10f      	bne.n	8011158 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011138:	68bb      	ldr	r3, [r7, #8]
 801113a:	015a      	lsls	r2, r3, #5
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	4413      	add	r3, r2
 8011140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	68ba      	ldr	r2, [r7, #8]
 8011148:	0151      	lsls	r1, r2, #5
 801114a:	68fa      	ldr	r2, [r7, #12]
 801114c:	440a      	add	r2, r1
 801114e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011156:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011158:	2300      	movs	r3, #0
}
 801115a:	4618      	mov	r0, r3
 801115c:	3714      	adds	r7, #20
 801115e:	46bd      	mov	sp, r7
 8011160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011164:	4770      	bx	lr

08011166 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011166:	b480      	push	{r7}
 8011168:	b085      	sub	sp, #20
 801116a:	af00      	add	r7, sp, #0
 801116c:	6078      	str	r0, [r7, #4]
 801116e:	460b      	mov	r3, r1
 8011170:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	68fa      	ldr	r2, [r7, #12]
 8011180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011184:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011188:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011190:	681a      	ldr	r2, [r3, #0]
 8011192:	78fb      	ldrb	r3, [r7, #3]
 8011194:	011b      	lsls	r3, r3, #4
 8011196:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801119a:	68f9      	ldr	r1, [r7, #12]
 801119c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80111a0:	4313      	orrs	r3, r2
 80111a2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80111a4:	2300      	movs	r3, #0
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	3714      	adds	r7, #20
 80111aa:	46bd      	mov	sp, r7
 80111ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b0:	4770      	bx	lr

080111b2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80111b2:	b480      	push	{r7}
 80111b4:	b085      	sub	sp, #20
 80111b6:	af00      	add	r7, sp, #0
 80111b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	68fa      	ldr	r2, [r7, #12]
 80111c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80111cc:	f023 0303 	bic.w	r3, r3, #3
 80111d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111d8:	685b      	ldr	r3, [r3, #4]
 80111da:	68fa      	ldr	r2, [r7, #12]
 80111dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80111e0:	f023 0302 	bic.w	r3, r3, #2
 80111e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80111e6:	2300      	movs	r3, #0
}
 80111e8:	4618      	mov	r0, r3
 80111ea:	3714      	adds	r7, #20
 80111ec:	46bd      	mov	sp, r7
 80111ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f2:	4770      	bx	lr

080111f4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80111f4:	b480      	push	{r7}
 80111f6:	b085      	sub	sp, #20
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	68fa      	ldr	r2, [r7, #12]
 801120a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801120e:	f023 0303 	bic.w	r3, r3, #3
 8011212:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801121a:	685b      	ldr	r3, [r3, #4]
 801121c:	68fa      	ldr	r2, [r7, #12]
 801121e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011222:	f043 0302 	orr.w	r3, r3, #2
 8011226:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011228:	2300      	movs	r3, #0
}
 801122a:	4618      	mov	r0, r3
 801122c:	3714      	adds	r7, #20
 801122e:	46bd      	mov	sp, r7
 8011230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011234:	4770      	bx	lr

08011236 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011236:	b480      	push	{r7}
 8011238:	b085      	sub	sp, #20
 801123a:	af00      	add	r7, sp, #0
 801123c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	695b      	ldr	r3, [r3, #20]
 8011242:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	699b      	ldr	r3, [r3, #24]
 8011248:	68fa      	ldr	r2, [r7, #12]
 801124a:	4013      	ands	r3, r2
 801124c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801124e:	68fb      	ldr	r3, [r7, #12]
}
 8011250:	4618      	mov	r0, r3
 8011252:	3714      	adds	r7, #20
 8011254:	46bd      	mov	sp, r7
 8011256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125a:	4770      	bx	lr

0801125c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801125c:	b480      	push	{r7}
 801125e:	b085      	sub	sp, #20
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801126e:	699b      	ldr	r3, [r3, #24]
 8011270:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011278:	69db      	ldr	r3, [r3, #28]
 801127a:	68ba      	ldr	r2, [r7, #8]
 801127c:	4013      	ands	r3, r2
 801127e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011280:	68bb      	ldr	r3, [r7, #8]
 8011282:	0c1b      	lsrs	r3, r3, #16
}
 8011284:	4618      	mov	r0, r3
 8011286:	3714      	adds	r7, #20
 8011288:	46bd      	mov	sp, r7
 801128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128e:	4770      	bx	lr

08011290 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011290:	b480      	push	{r7}
 8011292:	b085      	sub	sp, #20
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80112a2:	699b      	ldr	r3, [r3, #24]
 80112a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80112ac:	69db      	ldr	r3, [r3, #28]
 80112ae:	68ba      	ldr	r2, [r7, #8]
 80112b0:	4013      	ands	r3, r2
 80112b2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80112b4:	68bb      	ldr	r3, [r7, #8]
 80112b6:	b29b      	uxth	r3, r3
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	3714      	adds	r7, #20
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr

080112c4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80112c4:	b480      	push	{r7}
 80112c6:	b085      	sub	sp, #20
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
 80112cc:	460b      	mov	r3, r1
 80112ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80112d4:	78fb      	ldrb	r3, [r7, #3]
 80112d6:	015a      	lsls	r2, r3, #5
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	4413      	add	r3, r2
 80112dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112e0:	689b      	ldr	r3, [r3, #8]
 80112e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80112ea:	695b      	ldr	r3, [r3, #20]
 80112ec:	68ba      	ldr	r2, [r7, #8]
 80112ee:	4013      	ands	r3, r2
 80112f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80112f2:	68bb      	ldr	r3, [r7, #8]
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	3714      	adds	r7, #20
 80112f8:	46bd      	mov	sp, r7
 80112fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fe:	4770      	bx	lr

08011300 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011300:	b480      	push	{r7}
 8011302:	b087      	sub	sp, #28
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
 8011308:	460b      	mov	r3, r1
 801130a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011310:	697b      	ldr	r3, [r7, #20]
 8011312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011316:	691b      	ldr	r3, [r3, #16]
 8011318:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801131a:	697b      	ldr	r3, [r7, #20]
 801131c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011322:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011324:	78fb      	ldrb	r3, [r7, #3]
 8011326:	f003 030f 	and.w	r3, r3, #15
 801132a:	68fa      	ldr	r2, [r7, #12]
 801132c:	fa22 f303 	lsr.w	r3, r2, r3
 8011330:	01db      	lsls	r3, r3, #7
 8011332:	b2db      	uxtb	r3, r3
 8011334:	693a      	ldr	r2, [r7, #16]
 8011336:	4313      	orrs	r3, r2
 8011338:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801133a:	78fb      	ldrb	r3, [r7, #3]
 801133c:	015a      	lsls	r2, r3, #5
 801133e:	697b      	ldr	r3, [r7, #20]
 8011340:	4413      	add	r3, r2
 8011342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011346:	689b      	ldr	r3, [r3, #8]
 8011348:	693a      	ldr	r2, [r7, #16]
 801134a:	4013      	ands	r3, r2
 801134c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801134e:	68bb      	ldr	r3, [r7, #8]
}
 8011350:	4618      	mov	r0, r3
 8011352:	371c      	adds	r7, #28
 8011354:	46bd      	mov	sp, r7
 8011356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135a:	4770      	bx	lr

0801135c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801135c:	b480      	push	{r7}
 801135e:	b083      	sub	sp, #12
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	695b      	ldr	r3, [r3, #20]
 8011368:	f003 0301 	and.w	r3, r3, #1
}
 801136c:	4618      	mov	r0, r3
 801136e:	370c      	adds	r7, #12
 8011370:	46bd      	mov	sp, r7
 8011372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011376:	4770      	bx	lr

08011378 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8011378:	b480      	push	{r7}
 801137a:	b085      	sub	sp, #20
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	68fa      	ldr	r2, [r7, #12]
 801138e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011392:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8011396:	f023 0307 	bic.w	r3, r3, #7
 801139a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113a2:	685b      	ldr	r3, [r3, #4]
 80113a4:	68fa      	ldr	r2, [r7, #12]
 80113a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80113aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80113ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80113b0:	2300      	movs	r3, #0
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3714      	adds	r7, #20
 80113b6:	46bd      	mov	sp, r7
 80113b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113bc:	4770      	bx	lr
	...

080113c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80113c0:	b480      	push	{r7}
 80113c2:	b087      	sub	sp, #28
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	60f8      	str	r0, [r7, #12]
 80113c8:	460b      	mov	r3, r1
 80113ca:	607a      	str	r2, [r7, #4]
 80113cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	333c      	adds	r3, #60	; 0x3c
 80113d6:	3304      	adds	r3, #4
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80113dc:	693b      	ldr	r3, [r7, #16]
 80113de:	4a26      	ldr	r2, [pc, #152]	; (8011478 <USB_EP0_OutStart+0xb8>)
 80113e0:	4293      	cmp	r3, r2
 80113e2:	d90a      	bls.n	80113fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80113f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80113f4:	d101      	bne.n	80113fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80113f6:	2300      	movs	r3, #0
 80113f8:	e037      	b.n	801146a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80113fa:	697b      	ldr	r3, [r7, #20]
 80113fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011400:	461a      	mov	r2, r3
 8011402:	2300      	movs	r3, #0
 8011404:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801140c:	691b      	ldr	r3, [r3, #16]
 801140e:	697a      	ldr	r2, [r7, #20]
 8011410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011414:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011418:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011420:	691b      	ldr	r3, [r3, #16]
 8011422:	697a      	ldr	r2, [r7, #20]
 8011424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011428:	f043 0318 	orr.w	r3, r3, #24
 801142c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801142e:	697b      	ldr	r3, [r7, #20]
 8011430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011434:	691b      	ldr	r3, [r3, #16]
 8011436:	697a      	ldr	r2, [r7, #20]
 8011438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801143c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8011440:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8011442:	7afb      	ldrb	r3, [r7, #11]
 8011444:	2b01      	cmp	r3, #1
 8011446:	d10f      	bne.n	8011468 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801144e:	461a      	mov	r2, r3
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8011454:	697b      	ldr	r3, [r7, #20]
 8011456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	697a      	ldr	r2, [r7, #20]
 801145e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011462:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8011466:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011468:	2300      	movs	r3, #0
}
 801146a:	4618      	mov	r0, r3
 801146c:	371c      	adds	r7, #28
 801146e:	46bd      	mov	sp, r7
 8011470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011474:	4770      	bx	lr
 8011476:	bf00      	nop
 8011478:	4f54300a 	.word	0x4f54300a

0801147c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801147c:	b480      	push	{r7}
 801147e:	b085      	sub	sp, #20
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8011484:	2300      	movs	r3, #0
 8011486:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	3301      	adds	r3, #1
 801148c:	60fb      	str	r3, [r7, #12]
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	4a13      	ldr	r2, [pc, #76]	; (80114e0 <USB_CoreReset+0x64>)
 8011492:	4293      	cmp	r3, r2
 8011494:	d901      	bls.n	801149a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011496:	2303      	movs	r3, #3
 8011498:	e01b      	b.n	80114d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	691b      	ldr	r3, [r3, #16]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	daf2      	bge.n	8011488 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80114a2:	2300      	movs	r3, #0
 80114a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	691b      	ldr	r3, [r3, #16]
 80114aa:	f043 0201 	orr.w	r2, r3, #1
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	3301      	adds	r3, #1
 80114b6:	60fb      	str	r3, [r7, #12]
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	4a09      	ldr	r2, [pc, #36]	; (80114e0 <USB_CoreReset+0x64>)
 80114bc:	4293      	cmp	r3, r2
 80114be:	d901      	bls.n	80114c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80114c0:	2303      	movs	r3, #3
 80114c2:	e006      	b.n	80114d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	691b      	ldr	r3, [r3, #16]
 80114c8:	f003 0301 	and.w	r3, r3, #1
 80114cc:	2b01      	cmp	r3, #1
 80114ce:	d0f0      	beq.n	80114b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80114d0:	2300      	movs	r3, #0
}
 80114d2:	4618      	mov	r0, r3
 80114d4:	3714      	adds	r7, #20
 80114d6:	46bd      	mov	sp, r7
 80114d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114dc:	4770      	bx	lr
 80114de:	bf00      	nop
 80114e0:	00030d40 	.word	0x00030d40

080114e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b084      	sub	sp, #16
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
 80114ec:	460b      	mov	r3, r1
 80114ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80114f0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80114f4:	f005 f81c 	bl	8016530 <malloc>
 80114f8:	4603      	mov	r3, r0
 80114fa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d105      	bne.n	801150e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	2200      	movs	r2, #0
 8011506:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801150a:	2302      	movs	r3, #2
 801150c:	e066      	b.n	80115dc <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	68fa      	ldr	r2, [r7, #12]
 8011512:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	7c1b      	ldrb	r3, [r3, #16]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d119      	bne.n	8011552 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801151e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011522:	2202      	movs	r2, #2
 8011524:	2181      	movs	r1, #129	; 0x81
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f004 fe89 	bl	801623e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2201      	movs	r2, #1
 8011530:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011532:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011536:	2202      	movs	r2, #2
 8011538:	2101      	movs	r1, #1
 801153a:	6878      	ldr	r0, [r7, #4]
 801153c:	f004 fe7f 	bl	801623e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	2201      	movs	r2, #1
 8011544:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	2210      	movs	r2, #16
 801154c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8011550:	e016      	b.n	8011580 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011552:	2340      	movs	r3, #64	; 0x40
 8011554:	2202      	movs	r2, #2
 8011556:	2181      	movs	r1, #129	; 0x81
 8011558:	6878      	ldr	r0, [r7, #4]
 801155a:	f004 fe70 	bl	801623e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	2201      	movs	r2, #1
 8011562:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011564:	2340      	movs	r3, #64	; 0x40
 8011566:	2202      	movs	r2, #2
 8011568:	2101      	movs	r1, #1
 801156a:	6878      	ldr	r0, [r7, #4]
 801156c:	f004 fe67 	bl	801623e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	2201      	movs	r2, #1
 8011574:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	2210      	movs	r2, #16
 801157c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011580:	2308      	movs	r3, #8
 8011582:	2203      	movs	r2, #3
 8011584:	2182      	movs	r1, #130	; 0x82
 8011586:	6878      	ldr	r0, [r7, #4]
 8011588:	f004 fe59 	bl	801623e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	2201      	movs	r2, #1
 8011590:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	2200      	movs	r2, #0
 80115a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	2200      	movs	r2, #0
 80115aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	7c1b      	ldrb	r3, [r3, #16]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d109      	bne.n	80115ca <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80115bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80115c0:	2101      	movs	r1, #1
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f004 ff2a 	bl	801641c <USBD_LL_PrepareReceive>
 80115c8:	e007      	b.n	80115da <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80115d0:	2340      	movs	r3, #64	; 0x40
 80115d2:	2101      	movs	r1, #1
 80115d4:	6878      	ldr	r0, [r7, #4]
 80115d6:	f004 ff21 	bl	801641c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80115da:	2300      	movs	r3, #0
}
 80115dc:	4618      	mov	r0, r3
 80115de:	3710      	adds	r7, #16
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd80      	pop	{r7, pc}

080115e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b084      	sub	sp, #16
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
 80115ec:	460b      	mov	r3, r1
 80115ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80115f0:	2300      	movs	r3, #0
 80115f2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80115f4:	2181      	movs	r1, #129	; 0x81
 80115f6:	6878      	ldr	r0, [r7, #4]
 80115f8:	f004 fe47 	bl	801628a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	2200      	movs	r2, #0
 8011600:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8011602:	2101      	movs	r1, #1
 8011604:	6878      	ldr	r0, [r7, #4]
 8011606:	f004 fe40 	bl	801628a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2200      	movs	r2, #0
 801160e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8011612:	2182      	movs	r1, #130	; 0x82
 8011614:	6878      	ldr	r0, [r7, #4]
 8011616:	f004 fe38 	bl	801628a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	2200      	movs	r2, #0
 801161e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	2200      	movs	r2, #0
 8011626:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011630:	2b00      	cmp	r3, #0
 8011632:	d00e      	beq.n	8011652 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801163a:	685b      	ldr	r3, [r3, #4]
 801163c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011644:	4618      	mov	r0, r3
 8011646:	f004 ff7b 	bl	8016540 <free>
    pdev->pClassData = NULL;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2200      	movs	r2, #0
 801164e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8011652:	7bfb      	ldrb	r3, [r7, #15]
}
 8011654:	4618      	mov	r0, r3
 8011656:	3710      	adds	r7, #16
 8011658:	46bd      	mov	sp, r7
 801165a:	bd80      	pop	{r7, pc}

0801165c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b086      	sub	sp, #24
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
 8011664:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801166c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801166e:	2300      	movs	r3, #0
 8011670:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8011672:	2300      	movs	r3, #0
 8011674:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8011676:	2300      	movs	r3, #0
 8011678:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801167a:	683b      	ldr	r3, [r7, #0]
 801167c:	781b      	ldrb	r3, [r3, #0]
 801167e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011682:	2b00      	cmp	r3, #0
 8011684:	d03a      	beq.n	80116fc <USBD_CDC_Setup+0xa0>
 8011686:	2b20      	cmp	r3, #32
 8011688:	f040 8097 	bne.w	80117ba <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	88db      	ldrh	r3, [r3, #6]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d029      	beq.n	80116e8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	781b      	ldrb	r3, [r3, #0]
 8011698:	b25b      	sxtb	r3, r3
 801169a:	2b00      	cmp	r3, #0
 801169c:	da11      	bge.n	80116c2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80116a4:	689b      	ldr	r3, [r3, #8]
 80116a6:	683a      	ldr	r2, [r7, #0]
 80116a8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80116aa:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80116ac:	683a      	ldr	r2, [r7, #0]
 80116ae:	88d2      	ldrh	r2, [r2, #6]
 80116b0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80116b2:	6939      	ldr	r1, [r7, #16]
 80116b4:	683b      	ldr	r3, [r7, #0]
 80116b6:	88db      	ldrh	r3, [r3, #6]
 80116b8:	461a      	mov	r2, r3
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f001 faac 	bl	8012c18 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80116c0:	e082      	b.n	80117c8 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80116c2:	683b      	ldr	r3, [r7, #0]
 80116c4:	785a      	ldrb	r2, [r3, #1]
 80116c6:	693b      	ldr	r3, [r7, #16]
 80116c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80116cc:	683b      	ldr	r3, [r7, #0]
 80116ce:	88db      	ldrh	r3, [r3, #6]
 80116d0:	b2da      	uxtb	r2, r3
 80116d2:	693b      	ldr	r3, [r7, #16]
 80116d4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80116d8:	6939      	ldr	r1, [r7, #16]
 80116da:	683b      	ldr	r3, [r7, #0]
 80116dc:	88db      	ldrh	r3, [r3, #6]
 80116de:	461a      	mov	r2, r3
 80116e0:	6878      	ldr	r0, [r7, #4]
 80116e2:	f001 fac5 	bl	8012c70 <USBD_CtlPrepareRx>
    break;
 80116e6:	e06f      	b.n	80117c8 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80116ee:	689b      	ldr	r3, [r3, #8]
 80116f0:	683a      	ldr	r2, [r7, #0]
 80116f2:	7850      	ldrb	r0, [r2, #1]
 80116f4:	2200      	movs	r2, #0
 80116f6:	6839      	ldr	r1, [r7, #0]
 80116f8:	4798      	blx	r3
    break;
 80116fa:	e065      	b.n	80117c8 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80116fc:	683b      	ldr	r3, [r7, #0]
 80116fe:	785b      	ldrb	r3, [r3, #1]
 8011700:	2b0b      	cmp	r3, #11
 8011702:	d84f      	bhi.n	80117a4 <USBD_CDC_Setup+0x148>
 8011704:	a201      	add	r2, pc, #4	; (adr r2, 801170c <USBD_CDC_Setup+0xb0>)
 8011706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801170a:	bf00      	nop
 801170c:	0801173d 	.word	0x0801173d
 8011710:	080117b3 	.word	0x080117b3
 8011714:	080117a5 	.word	0x080117a5
 8011718:	080117a5 	.word	0x080117a5
 801171c:	080117a5 	.word	0x080117a5
 8011720:	080117a5 	.word	0x080117a5
 8011724:	080117a5 	.word	0x080117a5
 8011728:	080117a5 	.word	0x080117a5
 801172c:	080117a5 	.word	0x080117a5
 8011730:	080117a5 	.word	0x080117a5
 8011734:	08011765 	.word	0x08011765
 8011738:	0801178d 	.word	0x0801178d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011742:	2b03      	cmp	r3, #3
 8011744:	d107      	bne.n	8011756 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011746:	f107 030c 	add.w	r3, r7, #12
 801174a:	2202      	movs	r2, #2
 801174c:	4619      	mov	r1, r3
 801174e:	6878      	ldr	r0, [r7, #4]
 8011750:	f001 fa62 	bl	8012c18 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8011754:	e030      	b.n	80117b8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8011756:	6839      	ldr	r1, [r7, #0]
 8011758:	6878      	ldr	r0, [r7, #4]
 801175a:	f001 f9ec 	bl	8012b36 <USBD_CtlError>
        ret = USBD_FAIL;
 801175e:	2303      	movs	r3, #3
 8011760:	75fb      	strb	r3, [r7, #23]
      break;
 8011762:	e029      	b.n	80117b8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801176a:	2b03      	cmp	r3, #3
 801176c:	d107      	bne.n	801177e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801176e:	f107 030f 	add.w	r3, r7, #15
 8011772:	2201      	movs	r2, #1
 8011774:	4619      	mov	r1, r3
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	f001 fa4e 	bl	8012c18 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801177c:	e01c      	b.n	80117b8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 801177e:	6839      	ldr	r1, [r7, #0]
 8011780:	6878      	ldr	r0, [r7, #4]
 8011782:	f001 f9d8 	bl	8012b36 <USBD_CtlError>
        ret = USBD_FAIL;
 8011786:	2303      	movs	r3, #3
 8011788:	75fb      	strb	r3, [r7, #23]
      break;
 801178a:	e015      	b.n	80117b8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011792:	2b03      	cmp	r3, #3
 8011794:	d00f      	beq.n	80117b6 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8011796:	6839      	ldr	r1, [r7, #0]
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	f001 f9cc 	bl	8012b36 <USBD_CtlError>
        ret = USBD_FAIL;
 801179e:	2303      	movs	r3, #3
 80117a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80117a2:	e008      	b.n	80117b6 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80117a4:	6839      	ldr	r1, [r7, #0]
 80117a6:	6878      	ldr	r0, [r7, #4]
 80117a8:	f001 f9c5 	bl	8012b36 <USBD_CtlError>
      ret = USBD_FAIL;
 80117ac:	2303      	movs	r3, #3
 80117ae:	75fb      	strb	r3, [r7, #23]
      break;
 80117b0:	e002      	b.n	80117b8 <USBD_CDC_Setup+0x15c>
      break;
 80117b2:	bf00      	nop
 80117b4:	e008      	b.n	80117c8 <USBD_CDC_Setup+0x16c>
      break;
 80117b6:	bf00      	nop
    }
    break;
 80117b8:	e006      	b.n	80117c8 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80117ba:	6839      	ldr	r1, [r7, #0]
 80117bc:	6878      	ldr	r0, [r7, #4]
 80117be:	f001 f9ba 	bl	8012b36 <USBD_CtlError>
    ret = USBD_FAIL;
 80117c2:	2303      	movs	r3, #3
 80117c4:	75fb      	strb	r3, [r7, #23]
    break;
 80117c6:	bf00      	nop
  }

  return (uint8_t)ret;
 80117c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80117ca:	4618      	mov	r0, r3
 80117cc:	3718      	adds	r7, #24
 80117ce:	46bd      	mov	sp, r7
 80117d0:	bd80      	pop	{r7, pc}
 80117d2:	bf00      	nop

080117d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b084      	sub	sp, #16
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
 80117dc:	460b      	mov	r3, r1
 80117de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80117e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d101      	bne.n	80117f6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80117f2:	2303      	movs	r3, #3
 80117f4:	e049      	b.n	801188a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80117fe:	78fa      	ldrb	r2, [r7, #3]
 8011800:	6879      	ldr	r1, [r7, #4]
 8011802:	4613      	mov	r3, r2
 8011804:	009b      	lsls	r3, r3, #2
 8011806:	4413      	add	r3, r2
 8011808:	009b      	lsls	r3, r3, #2
 801180a:	440b      	add	r3, r1
 801180c:	3318      	adds	r3, #24
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d029      	beq.n	8011868 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011814:	78fa      	ldrb	r2, [r7, #3]
 8011816:	6879      	ldr	r1, [r7, #4]
 8011818:	4613      	mov	r3, r2
 801181a:	009b      	lsls	r3, r3, #2
 801181c:	4413      	add	r3, r2
 801181e:	009b      	lsls	r3, r3, #2
 8011820:	440b      	add	r3, r1
 8011822:	3318      	adds	r3, #24
 8011824:	681a      	ldr	r2, [r3, #0]
 8011826:	78f9      	ldrb	r1, [r7, #3]
 8011828:	68f8      	ldr	r0, [r7, #12]
 801182a:	460b      	mov	r3, r1
 801182c:	00db      	lsls	r3, r3, #3
 801182e:	1a5b      	subs	r3, r3, r1
 8011830:	009b      	lsls	r3, r3, #2
 8011832:	4403      	add	r3, r0
 8011834:	3344      	adds	r3, #68	; 0x44
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	fbb2 f1f3 	udiv	r1, r2, r3
 801183c:	fb03 f301 	mul.w	r3, r3, r1
 8011840:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011842:	2b00      	cmp	r3, #0
 8011844:	d110      	bne.n	8011868 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8011846:	78fa      	ldrb	r2, [r7, #3]
 8011848:	6879      	ldr	r1, [r7, #4]
 801184a:	4613      	mov	r3, r2
 801184c:	009b      	lsls	r3, r3, #2
 801184e:	4413      	add	r3, r2
 8011850:	009b      	lsls	r3, r3, #2
 8011852:	440b      	add	r3, r1
 8011854:	3318      	adds	r3, #24
 8011856:	2200      	movs	r2, #0
 8011858:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801185a:	78f9      	ldrb	r1, [r7, #3]
 801185c:	2300      	movs	r3, #0
 801185e:	2200      	movs	r2, #0
 8011860:	6878      	ldr	r0, [r7, #4]
 8011862:	f004 fdba 	bl	80163da <USBD_LL_Transmit>
 8011866:	e00f      	b.n	8011888 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	2200      	movs	r2, #0
 801186c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011876:	691b      	ldr	r3, [r3, #16]
 8011878:	68ba      	ldr	r2, [r7, #8]
 801187a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801187e:	68ba      	ldr	r2, [r7, #8]
 8011880:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011884:	78fa      	ldrb	r2, [r7, #3]
 8011886:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8011888:	2300      	movs	r3, #0
}
 801188a:	4618      	mov	r0, r3
 801188c:	3710      	adds	r7, #16
 801188e:	46bd      	mov	sp, r7
 8011890:	bd80      	pop	{r7, pc}

08011892 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011892:	b580      	push	{r7, lr}
 8011894:	b084      	sub	sp, #16
 8011896:	af00      	add	r7, sp, #0
 8011898:	6078      	str	r0, [r7, #4]
 801189a:	460b      	mov	r3, r1
 801189c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80118a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d101      	bne.n	80118b4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80118b0:	2303      	movs	r3, #3
 80118b2:	e015      	b.n	80118e0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80118b4:	78fb      	ldrb	r3, [r7, #3]
 80118b6:	4619      	mov	r1, r3
 80118b8:	6878      	ldr	r0, [r7, #4]
 80118ba:	f004 fdd0 	bl	801645e <USBD_LL_GetRxDataSize>
 80118be:	4602      	mov	r2, r0
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80118cc:	68db      	ldr	r3, [r3, #12]
 80118ce:	68fa      	ldr	r2, [r7, #12]
 80118d0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80118d4:	68fa      	ldr	r2, [r7, #12]
 80118d6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80118da:	4611      	mov	r1, r2
 80118dc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80118de:	2300      	movs	r3, #0
}
 80118e0:	4618      	mov	r0, r3
 80118e2:	3710      	adds	r7, #16
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd80      	pop	{r7, pc}

080118e8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b084      	sub	sp, #16
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80118f6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d015      	beq.n	801192e <USBD_CDC_EP0_RxReady+0x46>
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011908:	2bff      	cmp	r3, #255	; 0xff
 801190a:	d010      	beq.n	801192e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011912:	689b      	ldr	r3, [r3, #8]
 8011914:	68fa      	ldr	r2, [r7, #12]
 8011916:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 801191a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801191c:	68fa      	ldr	r2, [r7, #12]
 801191e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011922:	b292      	uxth	r2, r2
 8011924:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	22ff      	movs	r2, #255	; 0xff
 801192a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 801192e:	2300      	movs	r3, #0
}
 8011930:	4618      	mov	r0, r3
 8011932:	3710      	adds	r7, #16
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}

08011938 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011938:	b480      	push	{r7}
 801193a:	b083      	sub	sp, #12
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	2243      	movs	r2, #67	; 0x43
 8011944:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8011946:	4b03      	ldr	r3, [pc, #12]	; (8011954 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011948:	4618      	mov	r0, r3
 801194a:	370c      	adds	r7, #12
 801194c:	46bd      	mov	sp, r7
 801194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011952:	4770      	bx	lr
 8011954:	20004120 	.word	0x20004120

08011958 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011958:	b480      	push	{r7}
 801195a:	b083      	sub	sp, #12
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	2243      	movs	r2, #67	; 0x43
 8011964:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8011966:	4b03      	ldr	r3, [pc, #12]	; (8011974 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011968:	4618      	mov	r0, r3
 801196a:	370c      	adds	r7, #12
 801196c:	46bd      	mov	sp, r7
 801196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011972:	4770      	bx	lr
 8011974:	200040dc 	.word	0x200040dc

08011978 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011978:	b480      	push	{r7}
 801197a:	b083      	sub	sp, #12
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	2243      	movs	r2, #67	; 0x43
 8011984:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8011986:	4b03      	ldr	r3, [pc, #12]	; (8011994 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011988:	4618      	mov	r0, r3
 801198a:	370c      	adds	r7, #12
 801198c:	46bd      	mov	sp, r7
 801198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011992:	4770      	bx	lr
 8011994:	20004164 	.word	0x20004164

08011998 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011998:	b480      	push	{r7}
 801199a:	b083      	sub	sp, #12
 801199c:	af00      	add	r7, sp, #0
 801199e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	220a      	movs	r2, #10
 80119a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80119a6:	4b03      	ldr	r3, [pc, #12]	; (80119b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80119a8:	4618      	mov	r0, r3
 80119aa:	370c      	adds	r7, #12
 80119ac:	46bd      	mov	sp, r7
 80119ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b2:	4770      	bx	lr
 80119b4:	20004098 	.word	0x20004098

080119b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80119b8:	b480      	push	{r7}
 80119ba:	b083      	sub	sp, #12
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
 80119c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d101      	bne.n	80119cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80119c8:	2303      	movs	r3, #3
 80119ca:	e004      	b.n	80119d6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	683a      	ldr	r2, [r7, #0]
 80119d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80119d4:	2300      	movs	r3, #0
}
 80119d6:	4618      	mov	r0, r3
 80119d8:	370c      	adds	r7, #12
 80119da:	46bd      	mov	sp, r7
 80119dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e0:	4770      	bx	lr

080119e2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80119e2:	b480      	push	{r7}
 80119e4:	b087      	sub	sp, #28
 80119e6:	af00      	add	r7, sp, #0
 80119e8:	60f8      	str	r0, [r7, #12]
 80119ea:	60b9      	str	r1, [r7, #8]
 80119ec:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80119f4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80119f6:	697b      	ldr	r3, [r7, #20]
 80119f8:	68ba      	ldr	r2, [r7, #8]
 80119fa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	687a      	ldr	r2, [r7, #4]
 8011a02:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011a06:	2300      	movs	r3, #0
}
 8011a08:	4618      	mov	r0, r3
 8011a0a:	371c      	adds	r7, #28
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a12:	4770      	bx	lr

08011a14 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011a14:	b480      	push	{r7}
 8011a16:	b085      	sub	sp, #20
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
 8011a1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a24:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	683a      	ldr	r2, [r7, #0]
 8011a2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011a2e:	2300      	movs	r3, #0
}
 8011a30:	4618      	mov	r0, r3
 8011a32:	3714      	adds	r7, #20
 8011a34:	46bd      	mov	sp, r7
 8011a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3a:	4770      	bx	lr

08011a3c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b084      	sub	sp, #16
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a4a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8011a4c:	2301      	movs	r3, #1
 8011a4e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d101      	bne.n	8011a5e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011a5a:	2303      	movs	r3, #3
 8011a5c:	e01a      	b.n	8011a94 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8011a5e:	68bb      	ldr	r3, [r7, #8]
 8011a60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d114      	bne.n	8011a92 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	2201      	movs	r2, #1
 8011a6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011a70:	68bb      	ldr	r3, [r7, #8]
 8011a72:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8011a7a:	68bb      	ldr	r3, [r7, #8]
 8011a7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011a80:	68bb      	ldr	r3, [r7, #8]
 8011a82:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011a86:	2181      	movs	r1, #129	; 0x81
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f004 fca6 	bl	80163da <USBD_LL_Transmit>

    ret = USBD_OK;
 8011a8e:	2300      	movs	r3, #0
 8011a90:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a94:	4618      	mov	r0, r3
 8011a96:	3710      	adds	r7, #16
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	bd80      	pop	{r7, pc}

08011a9c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b084      	sub	sp, #16
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011aaa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d101      	bne.n	8011aba <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011ab6:	2303      	movs	r3, #3
 8011ab8:	e016      	b.n	8011ae8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	7c1b      	ldrb	r3, [r3, #16]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d109      	bne.n	8011ad6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011ac8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011acc:	2101      	movs	r1, #1
 8011ace:	6878      	ldr	r0, [r7, #4]
 8011ad0:	f004 fca4 	bl	801641c <USBD_LL_PrepareReceive>
 8011ad4:	e007      	b.n	8011ae6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011adc:	2340      	movs	r3, #64	; 0x40
 8011ade:	2101      	movs	r1, #1
 8011ae0:	6878      	ldr	r0, [r7, #4]
 8011ae2:	f004 fc9b 	bl	801641c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011ae6:	2300      	movs	r3, #0
}
 8011ae8:	4618      	mov	r0, r3
 8011aea:	3710      	adds	r7, #16
 8011aec:	46bd      	mov	sp, r7
 8011aee:	bd80      	pop	{r7, pc}

08011af0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b086      	sub	sp, #24
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	60f8      	str	r0, [r7, #12]
 8011af8:	60b9      	str	r1, [r7, #8]
 8011afa:	4613      	mov	r3, r2
 8011afc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d101      	bne.n	8011b08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011b04:	2303      	movs	r3, #3
 8011b06:	e025      	b.n	8011b54 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d003      	beq.n	8011b1a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	2200      	movs	r2, #0
 8011b16:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d003      	beq.n	8011b2c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	2200      	movs	r2, #0
 8011b28:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011b2c:	68bb      	ldr	r3, [r7, #8]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d003      	beq.n	8011b3a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	68ba      	ldr	r2, [r7, #8]
 8011b36:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	2201      	movs	r2, #1
 8011b3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	79fa      	ldrb	r2, [r7, #7]
 8011b46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011b48:	68f8      	ldr	r0, [r7, #12]
 8011b4a:	f004 fb11 	bl	8016170 <USBD_LL_Init>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b54:	4618      	mov	r0, r3
 8011b56:	3718      	adds	r7, #24
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	bd80      	pop	{r7, pc}

08011b5c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b084      	sub	sp, #16
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
 8011b64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011b66:	2300      	movs	r3, #0
 8011b68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011b6a:	683b      	ldr	r3, [r7, #0]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d101      	bne.n	8011b74 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011b70:	2303      	movs	r3, #3
 8011b72:	e010      	b.n	8011b96 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	683a      	ldr	r2, [r7, #0]
 8011b78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b84:	f107 020e 	add.w	r2, r7, #14
 8011b88:	4610      	mov	r0, r2
 8011b8a:	4798      	blx	r3
 8011b8c:	4602      	mov	r2, r0
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8011b94:	2300      	movs	r3, #0
}
 8011b96:	4618      	mov	r0, r3
 8011b98:	3710      	adds	r7, #16
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd80      	pop	{r7, pc}

08011b9e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011b9e:	b580      	push	{r7, lr}
 8011ba0:	b082      	sub	sp, #8
 8011ba2:	af00      	add	r7, sp, #0
 8011ba4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011ba6:	6878      	ldr	r0, [r7, #4]
 8011ba8:	f004 fb2e 	bl	8016208 <USBD_LL_Start>
 8011bac:	4603      	mov	r3, r0
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3708      	adds	r7, #8
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}

08011bb6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011bb6:	b480      	push	{r7}
 8011bb8:	b083      	sub	sp, #12
 8011bba:	af00      	add	r7, sp, #0
 8011bbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011bbe:	2300      	movs	r3, #0
}
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	370c      	adds	r7, #12
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bca:	4770      	bx	lr

08011bcc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b084      	sub	sp, #16
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
 8011bd4:	460b      	mov	r3, r1
 8011bd6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011bd8:	2303      	movs	r3, #3
 8011bda:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d009      	beq.n	8011bfa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	78fa      	ldrb	r2, [r7, #3]
 8011bf0:	4611      	mov	r1, r2
 8011bf2:	6878      	ldr	r0, [r7, #4]
 8011bf4:	4798      	blx	r3
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3710      	adds	r7, #16
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}

08011c04 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b082      	sub	sp, #8
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
 8011c0c:	460b      	mov	r3, r1
 8011c0e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d007      	beq.n	8011c2a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c20:	685b      	ldr	r3, [r3, #4]
 8011c22:	78fa      	ldrb	r2, [r7, #3]
 8011c24:	4611      	mov	r1, r2
 8011c26:	6878      	ldr	r0, [r7, #4]
 8011c28:	4798      	blx	r3
  }

  return USBD_OK;
 8011c2a:	2300      	movs	r3, #0
}
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	3708      	adds	r7, #8
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}

08011c34 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b084      	sub	sp, #16
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
 8011c3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011c44:	6839      	ldr	r1, [r7, #0]
 8011c46:	4618      	mov	r0, r3
 8011c48:	f000 ff3b 	bl	8012ac2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	2201      	movs	r2, #1
 8011c50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011c5a:	461a      	mov	r2, r3
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011c68:	f003 031f 	and.w	r3, r3, #31
 8011c6c:	2b02      	cmp	r3, #2
 8011c6e:	d01a      	beq.n	8011ca6 <USBD_LL_SetupStage+0x72>
 8011c70:	2b02      	cmp	r3, #2
 8011c72:	d822      	bhi.n	8011cba <USBD_LL_SetupStage+0x86>
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d002      	beq.n	8011c7e <USBD_LL_SetupStage+0x4a>
 8011c78:	2b01      	cmp	r3, #1
 8011c7a:	d00a      	beq.n	8011c92 <USBD_LL_SetupStage+0x5e>
 8011c7c:	e01d      	b.n	8011cba <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011c84:	4619      	mov	r1, r3
 8011c86:	6878      	ldr	r0, [r7, #4]
 8011c88:	f000 fa18 	bl	80120bc <USBD_StdDevReq>
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8011c90:	e020      	b.n	8011cd4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011c98:	4619      	mov	r1, r3
 8011c9a:	6878      	ldr	r0, [r7, #4]
 8011c9c:	f000 fa7c 	bl	8012198 <USBD_StdItfReq>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8011ca4:	e016      	b.n	8011cd4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011cac:	4619      	mov	r1, r3
 8011cae:	6878      	ldr	r0, [r7, #4]
 8011cb0:	f000 faba 	bl	8012228 <USBD_StdEPReq>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8011cb8:	e00c      	b.n	8011cd4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011cc0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011cc4:	b2db      	uxtb	r3, r3
 8011cc6:	4619      	mov	r1, r3
 8011cc8:	6878      	ldr	r0, [r7, #4]
 8011cca:	f004 fafd 	bl	80162c8 <USBD_LL_StallEP>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8011cd2:	bf00      	nop
  }

  return ret;
 8011cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	3710      	adds	r7, #16
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd80      	pop	{r7, pc}

08011cde <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011cde:	b580      	push	{r7, lr}
 8011ce0:	b086      	sub	sp, #24
 8011ce2:	af00      	add	r7, sp, #0
 8011ce4:	60f8      	str	r0, [r7, #12]
 8011ce6:	460b      	mov	r3, r1
 8011ce8:	607a      	str	r2, [r7, #4]
 8011cea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011cec:	7afb      	ldrb	r3, [r7, #11]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d137      	bne.n	8011d62 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011cf8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011d00:	2b03      	cmp	r3, #3
 8011d02:	d14a      	bne.n	8011d9a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011d04:	693b      	ldr	r3, [r7, #16]
 8011d06:	689a      	ldr	r2, [r3, #8]
 8011d08:	693b      	ldr	r3, [r7, #16]
 8011d0a:	68db      	ldr	r3, [r3, #12]
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d913      	bls.n	8011d38 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011d10:	693b      	ldr	r3, [r7, #16]
 8011d12:	689a      	ldr	r2, [r3, #8]
 8011d14:	693b      	ldr	r3, [r7, #16]
 8011d16:	68db      	ldr	r3, [r3, #12]
 8011d18:	1ad2      	subs	r2, r2, r3
 8011d1a:	693b      	ldr	r3, [r7, #16]
 8011d1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011d1e:	693b      	ldr	r3, [r7, #16]
 8011d20:	68da      	ldr	r2, [r3, #12]
 8011d22:	693b      	ldr	r3, [r7, #16]
 8011d24:	689b      	ldr	r3, [r3, #8]
 8011d26:	4293      	cmp	r3, r2
 8011d28:	bf28      	it	cs
 8011d2a:	4613      	movcs	r3, r2
 8011d2c:	461a      	mov	r2, r3
 8011d2e:	6879      	ldr	r1, [r7, #4]
 8011d30:	68f8      	ldr	r0, [r7, #12]
 8011d32:	f000 ffba 	bl	8012caa <USBD_CtlContinueRx>
 8011d36:	e030      	b.n	8011d9a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d3e:	691b      	ldr	r3, [r3, #16]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d00a      	beq.n	8011d5a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011d4a:	2b03      	cmp	r3, #3
 8011d4c:	d105      	bne.n	8011d5a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d54:	691b      	ldr	r3, [r3, #16]
 8011d56:	68f8      	ldr	r0, [r7, #12]
 8011d58:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8011d5a:	68f8      	ldr	r0, [r7, #12]
 8011d5c:	f000 ffb6 	bl	8012ccc <USBD_CtlSendStatus>
 8011d60:	e01b      	b.n	8011d9a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d68:	699b      	ldr	r3, [r3, #24]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d013      	beq.n	8011d96 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011d74:	2b03      	cmp	r3, #3
 8011d76:	d10e      	bne.n	8011d96 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d7e:	699b      	ldr	r3, [r3, #24]
 8011d80:	7afa      	ldrb	r2, [r7, #11]
 8011d82:	4611      	mov	r1, r2
 8011d84:	68f8      	ldr	r0, [r7, #12]
 8011d86:	4798      	blx	r3
 8011d88:	4603      	mov	r3, r0
 8011d8a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011d8c:	7dfb      	ldrb	r3, [r7, #23]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d003      	beq.n	8011d9a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8011d92:	7dfb      	ldrb	r3, [r7, #23]
 8011d94:	e002      	b.n	8011d9c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011d96:	2303      	movs	r3, #3
 8011d98:	e000      	b.n	8011d9c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8011d9a:	2300      	movs	r3, #0
}
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	3718      	adds	r7, #24
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bd80      	pop	{r7, pc}

08011da4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b086      	sub	sp, #24
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	60f8      	str	r0, [r7, #12]
 8011dac:	460b      	mov	r3, r1
 8011dae:	607a      	str	r2, [r7, #4]
 8011db0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011db2:	7afb      	ldrb	r3, [r7, #11]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d16a      	bne.n	8011e8e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	3314      	adds	r3, #20
 8011dbc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011dc4:	2b02      	cmp	r3, #2
 8011dc6:	d155      	bne.n	8011e74 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8011dc8:	693b      	ldr	r3, [r7, #16]
 8011dca:	689a      	ldr	r2, [r3, #8]
 8011dcc:	693b      	ldr	r3, [r7, #16]
 8011dce:	68db      	ldr	r3, [r3, #12]
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	d914      	bls.n	8011dfe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011dd4:	693b      	ldr	r3, [r7, #16]
 8011dd6:	689a      	ldr	r2, [r3, #8]
 8011dd8:	693b      	ldr	r3, [r7, #16]
 8011dda:	68db      	ldr	r3, [r3, #12]
 8011ddc:	1ad2      	subs	r2, r2, r3
 8011dde:	693b      	ldr	r3, [r7, #16]
 8011de0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011de2:	693b      	ldr	r3, [r7, #16]
 8011de4:	689b      	ldr	r3, [r3, #8]
 8011de6:	461a      	mov	r2, r3
 8011de8:	6879      	ldr	r1, [r7, #4]
 8011dea:	68f8      	ldr	r0, [r7, #12]
 8011dec:	f000 ff2f 	bl	8012c4e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011df0:	2300      	movs	r3, #0
 8011df2:	2200      	movs	r2, #0
 8011df4:	2100      	movs	r1, #0
 8011df6:	68f8      	ldr	r0, [r7, #12]
 8011df8:	f004 fb10 	bl	801641c <USBD_LL_PrepareReceive>
 8011dfc:	e03a      	b.n	8011e74 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011dfe:	693b      	ldr	r3, [r7, #16]
 8011e00:	68da      	ldr	r2, [r3, #12]
 8011e02:	693b      	ldr	r3, [r7, #16]
 8011e04:	689b      	ldr	r3, [r3, #8]
 8011e06:	429a      	cmp	r2, r3
 8011e08:	d11c      	bne.n	8011e44 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011e0a:	693b      	ldr	r3, [r7, #16]
 8011e0c:	685a      	ldr	r2, [r3, #4]
 8011e0e:	693b      	ldr	r3, [r7, #16]
 8011e10:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011e12:	429a      	cmp	r2, r3
 8011e14:	d316      	bcc.n	8011e44 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011e16:	693b      	ldr	r3, [r7, #16]
 8011e18:	685a      	ldr	r2, [r3, #4]
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011e20:	429a      	cmp	r2, r3
 8011e22:	d20f      	bcs.n	8011e44 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011e24:	2200      	movs	r2, #0
 8011e26:	2100      	movs	r1, #0
 8011e28:	68f8      	ldr	r0, [r7, #12]
 8011e2a:	f000 ff10 	bl	8012c4e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	2200      	movs	r2, #0
 8011e32:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011e36:	2300      	movs	r3, #0
 8011e38:	2200      	movs	r2, #0
 8011e3a:	2100      	movs	r1, #0
 8011e3c:	68f8      	ldr	r0, [r7, #12]
 8011e3e:	f004 faed 	bl	801641c <USBD_LL_PrepareReceive>
 8011e42:	e017      	b.n	8011e74 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e4a:	68db      	ldr	r3, [r3, #12]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d00a      	beq.n	8011e66 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011e56:	2b03      	cmp	r3, #3
 8011e58:	d105      	bne.n	8011e66 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e60:	68db      	ldr	r3, [r3, #12]
 8011e62:	68f8      	ldr	r0, [r7, #12]
 8011e64:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011e66:	2180      	movs	r1, #128	; 0x80
 8011e68:	68f8      	ldr	r0, [r7, #12]
 8011e6a:	f004 fa2d 	bl	80162c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011e6e:	68f8      	ldr	r0, [r7, #12]
 8011e70:	f000 ff3f 	bl	8012cf2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011e7a:	2b01      	cmp	r3, #1
 8011e7c:	d123      	bne.n	8011ec6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011e7e:	68f8      	ldr	r0, [r7, #12]
 8011e80:	f7ff fe99 	bl	8011bb6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	2200      	movs	r2, #0
 8011e88:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011e8c:	e01b      	b.n	8011ec6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e94:	695b      	ldr	r3, [r3, #20]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d013      	beq.n	8011ec2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011ea0:	2b03      	cmp	r3, #3
 8011ea2:	d10e      	bne.n	8011ec2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011eaa:	695b      	ldr	r3, [r3, #20]
 8011eac:	7afa      	ldrb	r2, [r7, #11]
 8011eae:	4611      	mov	r1, r2
 8011eb0:	68f8      	ldr	r0, [r7, #12]
 8011eb2:	4798      	blx	r3
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011eb8:	7dfb      	ldrb	r3, [r7, #23]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d003      	beq.n	8011ec6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8011ebe:	7dfb      	ldrb	r3, [r7, #23]
 8011ec0:	e002      	b.n	8011ec8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011ec2:	2303      	movs	r3, #3
 8011ec4:	e000      	b.n	8011ec8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8011ec6:	2300      	movs	r3, #0
}
 8011ec8:	4618      	mov	r0, r3
 8011eca:	3718      	adds	r7, #24
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bd80      	pop	{r7, pc}

08011ed0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b082      	sub	sp, #8
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	2201      	movs	r2, #1
 8011edc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2200      	movs	r2, #0
 8011eec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d009      	beq.n	8011f14 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f06:	685b      	ldr	r3, [r3, #4]
 8011f08:	687a      	ldr	r2, [r7, #4]
 8011f0a:	6852      	ldr	r2, [r2, #4]
 8011f0c:	b2d2      	uxtb	r2, r2
 8011f0e:	4611      	mov	r1, r2
 8011f10:	6878      	ldr	r0, [r7, #4]
 8011f12:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011f14:	2340      	movs	r3, #64	; 0x40
 8011f16:	2200      	movs	r2, #0
 8011f18:	2100      	movs	r1, #0
 8011f1a:	6878      	ldr	r0, [r7, #4]
 8011f1c:	f004 f98f 	bl	801623e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	2201      	movs	r2, #1
 8011f24:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	2240      	movs	r2, #64	; 0x40
 8011f2c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011f30:	2340      	movs	r3, #64	; 0x40
 8011f32:	2200      	movs	r2, #0
 8011f34:	2180      	movs	r1, #128	; 0x80
 8011f36:	6878      	ldr	r0, [r7, #4]
 8011f38:	f004 f981 	bl	801623e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	2201      	movs	r2, #1
 8011f40:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	2240      	movs	r2, #64	; 0x40
 8011f46:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011f48:	2300      	movs	r3, #0
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3708      	adds	r7, #8
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}

08011f52 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011f52:	b480      	push	{r7}
 8011f54:	b083      	sub	sp, #12
 8011f56:	af00      	add	r7, sp, #0
 8011f58:	6078      	str	r0, [r7, #4]
 8011f5a:	460b      	mov	r3, r1
 8011f5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	78fa      	ldrb	r2, [r7, #3]
 8011f62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011f64:	2300      	movs	r3, #0
}
 8011f66:	4618      	mov	r0, r3
 8011f68:	370c      	adds	r7, #12
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f70:	4770      	bx	lr

08011f72 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011f72:	b480      	push	{r7}
 8011f74:	b083      	sub	sp, #12
 8011f76:	af00      	add	r7, sp, #0
 8011f78:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	2204      	movs	r2, #4
 8011f8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011f8e:	2300      	movs	r3, #0
}
 8011f90:	4618      	mov	r0, r3
 8011f92:	370c      	adds	r7, #12
 8011f94:	46bd      	mov	sp, r7
 8011f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9a:	4770      	bx	lr

08011f9c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011f9c:	b480      	push	{r7}
 8011f9e:	b083      	sub	sp, #12
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011faa:	2b04      	cmp	r3, #4
 8011fac:	d105      	bne.n	8011fba <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011fba:	2300      	movs	r3, #0
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	370c      	adds	r7, #12
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc6:	4770      	bx	lr

08011fc8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b082      	sub	sp, #8
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fd6:	2b03      	cmp	r3, #3
 8011fd8:	d10b      	bne.n	8011ff2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fe0:	69db      	ldr	r3, [r3, #28]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d005      	beq.n	8011ff2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fec:	69db      	ldr	r3, [r3, #28]
 8011fee:	6878      	ldr	r0, [r7, #4]
 8011ff0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011ff2:	2300      	movs	r3, #0
}
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	3708      	adds	r7, #8
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	bd80      	pop	{r7, pc}

08011ffc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011ffc:	b480      	push	{r7}
 8011ffe:	b083      	sub	sp, #12
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
 8012004:	460b      	mov	r3, r1
 8012006:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8012008:	2300      	movs	r3, #0
}
 801200a:	4618      	mov	r0, r3
 801200c:	370c      	adds	r7, #12
 801200e:	46bd      	mov	sp, r7
 8012010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012014:	4770      	bx	lr

08012016 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012016:	b480      	push	{r7}
 8012018:	b083      	sub	sp, #12
 801201a:	af00      	add	r7, sp, #0
 801201c:	6078      	str	r0, [r7, #4]
 801201e:	460b      	mov	r3, r1
 8012020:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8012022:	2300      	movs	r3, #0
}
 8012024:	4618      	mov	r0, r3
 8012026:	370c      	adds	r7, #12
 8012028:	46bd      	mov	sp, r7
 801202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202e:	4770      	bx	lr

08012030 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012030:	b480      	push	{r7}
 8012032:	b083      	sub	sp, #12
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012038:	2300      	movs	r3, #0
}
 801203a:	4618      	mov	r0, r3
 801203c:	370c      	adds	r7, #12
 801203e:	46bd      	mov	sp, r7
 8012040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012044:	4770      	bx	lr

08012046 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8012046:	b580      	push	{r7, lr}
 8012048:	b082      	sub	sp, #8
 801204a:	af00      	add	r7, sp, #0
 801204c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2201      	movs	r2, #1
 8012052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801205c:	2b00      	cmp	r3, #0
 801205e:	d009      	beq.n	8012074 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012066:	685b      	ldr	r3, [r3, #4]
 8012068:	687a      	ldr	r2, [r7, #4]
 801206a:	6852      	ldr	r2, [r2, #4]
 801206c:	b2d2      	uxtb	r2, r2
 801206e:	4611      	mov	r1, r2
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	4798      	blx	r3
  }

  return USBD_OK;
 8012074:	2300      	movs	r3, #0
}
 8012076:	4618      	mov	r0, r3
 8012078:	3708      	adds	r7, #8
 801207a:	46bd      	mov	sp, r7
 801207c:	bd80      	pop	{r7, pc}

0801207e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801207e:	b480      	push	{r7}
 8012080:	b087      	sub	sp, #28
 8012082:	af00      	add	r7, sp, #0
 8012084:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801208a:	697b      	ldr	r3, [r7, #20]
 801208c:	781b      	ldrb	r3, [r3, #0]
 801208e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012090:	697b      	ldr	r3, [r7, #20]
 8012092:	3301      	adds	r3, #1
 8012094:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012096:	697b      	ldr	r3, [r7, #20]
 8012098:	781b      	ldrb	r3, [r3, #0]
 801209a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801209c:	8a3b      	ldrh	r3, [r7, #16]
 801209e:	021b      	lsls	r3, r3, #8
 80120a0:	b21a      	sxth	r2, r3
 80120a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80120a6:	4313      	orrs	r3, r2
 80120a8:	b21b      	sxth	r3, r3
 80120aa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80120ac:	89fb      	ldrh	r3, [r7, #14]
}
 80120ae:	4618      	mov	r0, r3
 80120b0:	371c      	adds	r7, #28
 80120b2:	46bd      	mov	sp, r7
 80120b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b8:	4770      	bx	lr
	...

080120bc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b084      	sub	sp, #16
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
 80120c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80120c6:	2300      	movs	r3, #0
 80120c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80120ca:	683b      	ldr	r3, [r7, #0]
 80120cc:	781b      	ldrb	r3, [r3, #0]
 80120ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80120d2:	2b40      	cmp	r3, #64	; 0x40
 80120d4:	d005      	beq.n	80120e2 <USBD_StdDevReq+0x26>
 80120d6:	2b40      	cmp	r3, #64	; 0x40
 80120d8:	d853      	bhi.n	8012182 <USBD_StdDevReq+0xc6>
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d00b      	beq.n	80120f6 <USBD_StdDevReq+0x3a>
 80120de:	2b20      	cmp	r3, #32
 80120e0:	d14f      	bne.n	8012182 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120e8:	689b      	ldr	r3, [r3, #8]
 80120ea:	6839      	ldr	r1, [r7, #0]
 80120ec:	6878      	ldr	r0, [r7, #4]
 80120ee:	4798      	blx	r3
 80120f0:	4603      	mov	r3, r0
 80120f2:	73fb      	strb	r3, [r7, #15]
    break;
 80120f4:	e04a      	b.n	801218c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	785b      	ldrb	r3, [r3, #1]
 80120fa:	2b09      	cmp	r3, #9
 80120fc:	d83b      	bhi.n	8012176 <USBD_StdDevReq+0xba>
 80120fe:	a201      	add	r2, pc, #4	; (adr r2, 8012104 <USBD_StdDevReq+0x48>)
 8012100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012104:	08012159 	.word	0x08012159
 8012108:	0801216d 	.word	0x0801216d
 801210c:	08012177 	.word	0x08012177
 8012110:	08012163 	.word	0x08012163
 8012114:	08012177 	.word	0x08012177
 8012118:	08012137 	.word	0x08012137
 801211c:	0801212d 	.word	0x0801212d
 8012120:	08012177 	.word	0x08012177
 8012124:	0801214f 	.word	0x0801214f
 8012128:	08012141 	.word	0x08012141
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 801212c:	6839      	ldr	r1, [r7, #0]
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	f000 f9d8 	bl	80124e4 <USBD_GetDescriptor>
      break;
 8012134:	e024      	b.n	8012180 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8012136:	6839      	ldr	r1, [r7, #0]
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f000 fb3d 	bl	80127b8 <USBD_SetAddress>
      break;
 801213e:	e01f      	b.n	8012180 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8012140:	6839      	ldr	r1, [r7, #0]
 8012142:	6878      	ldr	r0, [r7, #4]
 8012144:	f000 fb7c 	bl	8012840 <USBD_SetConfig>
 8012148:	4603      	mov	r3, r0
 801214a:	73fb      	strb	r3, [r7, #15]
      break;
 801214c:	e018      	b.n	8012180 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 801214e:	6839      	ldr	r1, [r7, #0]
 8012150:	6878      	ldr	r0, [r7, #4]
 8012152:	f000 fc19 	bl	8012988 <USBD_GetConfig>
      break;
 8012156:	e013      	b.n	8012180 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8012158:	6839      	ldr	r1, [r7, #0]
 801215a:	6878      	ldr	r0, [r7, #4]
 801215c:	f000 fc49 	bl	80129f2 <USBD_GetStatus>
      break;
 8012160:	e00e      	b.n	8012180 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8012162:	6839      	ldr	r1, [r7, #0]
 8012164:	6878      	ldr	r0, [r7, #4]
 8012166:	f000 fc77 	bl	8012a58 <USBD_SetFeature>
      break;
 801216a:	e009      	b.n	8012180 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 801216c:	6839      	ldr	r1, [r7, #0]
 801216e:	6878      	ldr	r0, [r7, #4]
 8012170:	f000 fc86 	bl	8012a80 <USBD_ClrFeature>
      break;
 8012174:	e004      	b.n	8012180 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8012176:	6839      	ldr	r1, [r7, #0]
 8012178:	6878      	ldr	r0, [r7, #4]
 801217a:	f000 fcdc 	bl	8012b36 <USBD_CtlError>
      break;
 801217e:	bf00      	nop
    }
    break;
 8012180:	e004      	b.n	801218c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8012182:	6839      	ldr	r1, [r7, #0]
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	f000 fcd6 	bl	8012b36 <USBD_CtlError>
    break;
 801218a:	bf00      	nop
  }

  return ret;
 801218c:	7bfb      	ldrb	r3, [r7, #15]
}
 801218e:	4618      	mov	r0, r3
 8012190:	3710      	adds	r7, #16
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}
 8012196:	bf00      	nop

08012198 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b084      	sub	sp, #16
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
 80121a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80121a2:	2300      	movs	r3, #0
 80121a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80121a6:	683b      	ldr	r3, [r7, #0]
 80121a8:	781b      	ldrb	r3, [r3, #0]
 80121aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80121ae:	2b40      	cmp	r3, #64	; 0x40
 80121b0:	d005      	beq.n	80121be <USBD_StdItfReq+0x26>
 80121b2:	2b40      	cmp	r3, #64	; 0x40
 80121b4:	d82e      	bhi.n	8012214 <USBD_StdItfReq+0x7c>
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d001      	beq.n	80121be <USBD_StdItfReq+0x26>
 80121ba:	2b20      	cmp	r3, #32
 80121bc:	d12a      	bne.n	8012214 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121c4:	3b01      	subs	r3, #1
 80121c6:	2b02      	cmp	r3, #2
 80121c8:	d81d      	bhi.n	8012206 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	889b      	ldrh	r3, [r3, #4]
 80121ce:	b2db      	uxtb	r3, r3
 80121d0:	2b01      	cmp	r3, #1
 80121d2:	d813      	bhi.n	80121fc <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121da:	689b      	ldr	r3, [r3, #8]
 80121dc:	6839      	ldr	r1, [r7, #0]
 80121de:	6878      	ldr	r0, [r7, #4]
 80121e0:	4798      	blx	r3
 80121e2:	4603      	mov	r3, r0
 80121e4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80121e6:	683b      	ldr	r3, [r7, #0]
 80121e8:	88db      	ldrh	r3, [r3, #6]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d110      	bne.n	8012210 <USBD_StdItfReq+0x78>
 80121ee:	7bfb      	ldrb	r3, [r7, #15]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d10d      	bne.n	8012210 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f000 fd69 	bl	8012ccc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80121fa:	e009      	b.n	8012210 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80121fc:	6839      	ldr	r1, [r7, #0]
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	f000 fc99 	bl	8012b36 <USBD_CtlError>
      break;
 8012204:	e004      	b.n	8012210 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8012206:	6839      	ldr	r1, [r7, #0]
 8012208:	6878      	ldr	r0, [r7, #4]
 801220a:	f000 fc94 	bl	8012b36 <USBD_CtlError>
      break;
 801220e:	e000      	b.n	8012212 <USBD_StdItfReq+0x7a>
      break;
 8012210:	bf00      	nop
    }
    break;
 8012212:	e004      	b.n	801221e <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8012214:	6839      	ldr	r1, [r7, #0]
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	f000 fc8d 	bl	8012b36 <USBD_CtlError>
    break;
 801221c:	bf00      	nop
  }

  return ret;
 801221e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012220:	4618      	mov	r0, r3
 8012222:	3710      	adds	r7, #16
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}

08012228 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b084      	sub	sp, #16
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
 8012230:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012232:	2300      	movs	r3, #0
 8012234:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8012236:	683b      	ldr	r3, [r7, #0]
 8012238:	889b      	ldrh	r3, [r3, #4]
 801223a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	781b      	ldrb	r3, [r3, #0]
 8012240:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012244:	2b40      	cmp	r3, #64	; 0x40
 8012246:	d007      	beq.n	8012258 <USBD_StdEPReq+0x30>
 8012248:	2b40      	cmp	r3, #64	; 0x40
 801224a:	f200 8140 	bhi.w	80124ce <USBD_StdEPReq+0x2a6>
 801224e:	2b00      	cmp	r3, #0
 8012250:	d00c      	beq.n	801226c <USBD_StdEPReq+0x44>
 8012252:	2b20      	cmp	r3, #32
 8012254:	f040 813b 	bne.w	80124ce <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801225e:	689b      	ldr	r3, [r3, #8]
 8012260:	6839      	ldr	r1, [r7, #0]
 8012262:	6878      	ldr	r0, [r7, #4]
 8012264:	4798      	blx	r3
 8012266:	4603      	mov	r3, r0
 8012268:	73fb      	strb	r3, [r7, #15]
    break;
 801226a:	e135      	b.n	80124d8 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	785b      	ldrb	r3, [r3, #1]
 8012270:	2b03      	cmp	r3, #3
 8012272:	d007      	beq.n	8012284 <USBD_StdEPReq+0x5c>
 8012274:	2b03      	cmp	r3, #3
 8012276:	f300 8124 	bgt.w	80124c2 <USBD_StdEPReq+0x29a>
 801227a:	2b00      	cmp	r3, #0
 801227c:	d07b      	beq.n	8012376 <USBD_StdEPReq+0x14e>
 801227e:	2b01      	cmp	r3, #1
 8012280:	d03b      	beq.n	80122fa <USBD_StdEPReq+0xd2>
 8012282:	e11e      	b.n	80124c2 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801228a:	2b02      	cmp	r3, #2
 801228c:	d002      	beq.n	8012294 <USBD_StdEPReq+0x6c>
 801228e:	2b03      	cmp	r3, #3
 8012290:	d016      	beq.n	80122c0 <USBD_StdEPReq+0x98>
 8012292:	e02c      	b.n	80122ee <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012294:	7bbb      	ldrb	r3, [r7, #14]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d00d      	beq.n	80122b6 <USBD_StdEPReq+0x8e>
 801229a:	7bbb      	ldrb	r3, [r7, #14]
 801229c:	2b80      	cmp	r3, #128	; 0x80
 801229e:	d00a      	beq.n	80122b6 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80122a0:	7bbb      	ldrb	r3, [r7, #14]
 80122a2:	4619      	mov	r1, r3
 80122a4:	6878      	ldr	r0, [r7, #4]
 80122a6:	f004 f80f 	bl	80162c8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80122aa:	2180      	movs	r1, #128	; 0x80
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f004 f80b 	bl	80162c8 <USBD_LL_StallEP>
 80122b2:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80122b4:	e020      	b.n	80122f8 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 80122b6:	6839      	ldr	r1, [r7, #0]
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f000 fc3c 	bl	8012b36 <USBD_CtlError>
        break;
 80122be:	e01b      	b.n	80122f8 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	885b      	ldrh	r3, [r3, #2]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d10e      	bne.n	80122e6 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80122c8:	7bbb      	ldrb	r3, [r7, #14]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d00b      	beq.n	80122e6 <USBD_StdEPReq+0xbe>
 80122ce:	7bbb      	ldrb	r3, [r7, #14]
 80122d0:	2b80      	cmp	r3, #128	; 0x80
 80122d2:	d008      	beq.n	80122e6 <USBD_StdEPReq+0xbe>
 80122d4:	683b      	ldr	r3, [r7, #0]
 80122d6:	88db      	ldrh	r3, [r3, #6]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d104      	bne.n	80122e6 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80122dc:	7bbb      	ldrb	r3, [r7, #14]
 80122de:	4619      	mov	r1, r3
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f003 fff1 	bl	80162c8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f000 fcf0 	bl	8012ccc <USBD_CtlSendStatus>

        break;
 80122ec:	e004      	b.n	80122f8 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 80122ee:	6839      	ldr	r1, [r7, #0]
 80122f0:	6878      	ldr	r0, [r7, #4]
 80122f2:	f000 fc20 	bl	8012b36 <USBD_CtlError>
        break;
 80122f6:	bf00      	nop
      }
      break;
 80122f8:	e0e8      	b.n	80124cc <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012300:	2b02      	cmp	r3, #2
 8012302:	d002      	beq.n	801230a <USBD_StdEPReq+0xe2>
 8012304:	2b03      	cmp	r3, #3
 8012306:	d016      	beq.n	8012336 <USBD_StdEPReq+0x10e>
 8012308:	e02e      	b.n	8012368 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801230a:	7bbb      	ldrb	r3, [r7, #14]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d00d      	beq.n	801232c <USBD_StdEPReq+0x104>
 8012310:	7bbb      	ldrb	r3, [r7, #14]
 8012312:	2b80      	cmp	r3, #128	; 0x80
 8012314:	d00a      	beq.n	801232c <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8012316:	7bbb      	ldrb	r3, [r7, #14]
 8012318:	4619      	mov	r1, r3
 801231a:	6878      	ldr	r0, [r7, #4]
 801231c:	f003 ffd4 	bl	80162c8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012320:	2180      	movs	r1, #128	; 0x80
 8012322:	6878      	ldr	r0, [r7, #4]
 8012324:	f003 ffd0 	bl	80162c8 <USBD_LL_StallEP>
 8012328:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 801232a:	e023      	b.n	8012374 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 801232c:	6839      	ldr	r1, [r7, #0]
 801232e:	6878      	ldr	r0, [r7, #4]
 8012330:	f000 fc01 	bl	8012b36 <USBD_CtlError>
        break;
 8012334:	e01e      	b.n	8012374 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8012336:	683b      	ldr	r3, [r7, #0]
 8012338:	885b      	ldrh	r3, [r3, #2]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d119      	bne.n	8012372 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 801233e:	7bbb      	ldrb	r3, [r7, #14]
 8012340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012344:	2b00      	cmp	r3, #0
 8012346:	d004      	beq.n	8012352 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012348:	7bbb      	ldrb	r3, [r7, #14]
 801234a:	4619      	mov	r1, r3
 801234c:	6878      	ldr	r0, [r7, #4]
 801234e:	f003 ffda 	bl	8016306 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f000 fcba 	bl	8012ccc <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801235e:	689b      	ldr	r3, [r3, #8]
 8012360:	6839      	ldr	r1, [r7, #0]
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	4798      	blx	r3
        }
        break;
 8012366:	e004      	b.n	8012372 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8012368:	6839      	ldr	r1, [r7, #0]
 801236a:	6878      	ldr	r0, [r7, #4]
 801236c:	f000 fbe3 	bl	8012b36 <USBD_CtlError>
        break;
 8012370:	e000      	b.n	8012374 <USBD_StdEPReq+0x14c>
        break;
 8012372:	bf00      	nop
      }
      break;
 8012374:	e0aa      	b.n	80124cc <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801237c:	2b02      	cmp	r3, #2
 801237e:	d002      	beq.n	8012386 <USBD_StdEPReq+0x15e>
 8012380:	2b03      	cmp	r3, #3
 8012382:	d032      	beq.n	80123ea <USBD_StdEPReq+0x1c2>
 8012384:	e097      	b.n	80124b6 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012386:	7bbb      	ldrb	r3, [r7, #14]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d007      	beq.n	801239c <USBD_StdEPReq+0x174>
 801238c:	7bbb      	ldrb	r3, [r7, #14]
 801238e:	2b80      	cmp	r3, #128	; 0x80
 8012390:	d004      	beq.n	801239c <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8012392:	6839      	ldr	r1, [r7, #0]
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f000 fbce 	bl	8012b36 <USBD_CtlError>
          break;
 801239a:	e091      	b.n	80124c0 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801239c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	da0b      	bge.n	80123bc <USBD_StdEPReq+0x194>
 80123a4:	7bbb      	ldrb	r3, [r7, #14]
 80123a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80123aa:	4613      	mov	r3, r2
 80123ac:	009b      	lsls	r3, r3, #2
 80123ae:	4413      	add	r3, r2
 80123b0:	009b      	lsls	r3, r3, #2
 80123b2:	3310      	adds	r3, #16
 80123b4:	687a      	ldr	r2, [r7, #4]
 80123b6:	4413      	add	r3, r2
 80123b8:	3304      	adds	r3, #4
 80123ba:	e00b      	b.n	80123d4 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 80123bc:	7bbb      	ldrb	r3, [r7, #14]
 80123be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80123c2:	4613      	mov	r3, r2
 80123c4:	009b      	lsls	r3, r3, #2
 80123c6:	4413      	add	r3, r2
 80123c8:	009b      	lsls	r3, r3, #2
 80123ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80123ce:	687a      	ldr	r2, [r7, #4]
 80123d0:	4413      	add	r3, r2
 80123d2:	3304      	adds	r3, #4
 80123d4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80123d6:	68bb      	ldr	r3, [r7, #8]
 80123d8:	2200      	movs	r2, #0
 80123da:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80123dc:	68bb      	ldr	r3, [r7, #8]
 80123de:	2202      	movs	r2, #2
 80123e0:	4619      	mov	r1, r3
 80123e2:	6878      	ldr	r0, [r7, #4]
 80123e4:	f000 fc18 	bl	8012c18 <USBD_CtlSendData>
        break;
 80123e8:	e06a      	b.n	80124c0 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80123ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	da11      	bge.n	8012416 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80123f2:	7bbb      	ldrb	r3, [r7, #14]
 80123f4:	f003 020f 	and.w	r2, r3, #15
 80123f8:	6879      	ldr	r1, [r7, #4]
 80123fa:	4613      	mov	r3, r2
 80123fc:	009b      	lsls	r3, r3, #2
 80123fe:	4413      	add	r3, r2
 8012400:	009b      	lsls	r3, r3, #2
 8012402:	440b      	add	r3, r1
 8012404:	3324      	adds	r3, #36	; 0x24
 8012406:	881b      	ldrh	r3, [r3, #0]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d117      	bne.n	801243c <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 801240c:	6839      	ldr	r1, [r7, #0]
 801240e:	6878      	ldr	r0, [r7, #4]
 8012410:	f000 fb91 	bl	8012b36 <USBD_CtlError>
            break;
 8012414:	e054      	b.n	80124c0 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012416:	7bbb      	ldrb	r3, [r7, #14]
 8012418:	f003 020f 	and.w	r2, r3, #15
 801241c:	6879      	ldr	r1, [r7, #4]
 801241e:	4613      	mov	r3, r2
 8012420:	009b      	lsls	r3, r3, #2
 8012422:	4413      	add	r3, r2
 8012424:	009b      	lsls	r3, r3, #2
 8012426:	440b      	add	r3, r1
 8012428:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801242c:	881b      	ldrh	r3, [r3, #0]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d104      	bne.n	801243c <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8012432:	6839      	ldr	r1, [r7, #0]
 8012434:	6878      	ldr	r0, [r7, #4]
 8012436:	f000 fb7e 	bl	8012b36 <USBD_CtlError>
            break;
 801243a:	e041      	b.n	80124c0 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801243c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012440:	2b00      	cmp	r3, #0
 8012442:	da0b      	bge.n	801245c <USBD_StdEPReq+0x234>
 8012444:	7bbb      	ldrb	r3, [r7, #14]
 8012446:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801244a:	4613      	mov	r3, r2
 801244c:	009b      	lsls	r3, r3, #2
 801244e:	4413      	add	r3, r2
 8012450:	009b      	lsls	r3, r3, #2
 8012452:	3310      	adds	r3, #16
 8012454:	687a      	ldr	r2, [r7, #4]
 8012456:	4413      	add	r3, r2
 8012458:	3304      	adds	r3, #4
 801245a:	e00b      	b.n	8012474 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 801245c:	7bbb      	ldrb	r3, [r7, #14]
 801245e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012462:	4613      	mov	r3, r2
 8012464:	009b      	lsls	r3, r3, #2
 8012466:	4413      	add	r3, r2
 8012468:	009b      	lsls	r3, r3, #2
 801246a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801246e:	687a      	ldr	r2, [r7, #4]
 8012470:	4413      	add	r3, r2
 8012472:	3304      	adds	r3, #4
 8012474:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012476:	7bbb      	ldrb	r3, [r7, #14]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d002      	beq.n	8012482 <USBD_StdEPReq+0x25a>
 801247c:	7bbb      	ldrb	r3, [r7, #14]
 801247e:	2b80      	cmp	r3, #128	; 0x80
 8012480:	d103      	bne.n	801248a <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8012482:	68bb      	ldr	r3, [r7, #8]
 8012484:	2200      	movs	r2, #0
 8012486:	601a      	str	r2, [r3, #0]
 8012488:	e00e      	b.n	80124a8 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801248a:	7bbb      	ldrb	r3, [r7, #14]
 801248c:	4619      	mov	r1, r3
 801248e:	6878      	ldr	r0, [r7, #4]
 8012490:	f003 ff58 	bl	8016344 <USBD_LL_IsStallEP>
 8012494:	4603      	mov	r3, r0
 8012496:	2b00      	cmp	r3, #0
 8012498:	d003      	beq.n	80124a2 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 801249a:	68bb      	ldr	r3, [r7, #8]
 801249c:	2201      	movs	r2, #1
 801249e:	601a      	str	r2, [r3, #0]
 80124a0:	e002      	b.n	80124a8 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 80124a2:	68bb      	ldr	r3, [r7, #8]
 80124a4:	2200      	movs	r2, #0
 80124a6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80124a8:	68bb      	ldr	r3, [r7, #8]
 80124aa:	2202      	movs	r2, #2
 80124ac:	4619      	mov	r1, r3
 80124ae:	6878      	ldr	r0, [r7, #4]
 80124b0:	f000 fbb2 	bl	8012c18 <USBD_CtlSendData>
          break;
 80124b4:	e004      	b.n	80124c0 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 80124b6:	6839      	ldr	r1, [r7, #0]
 80124b8:	6878      	ldr	r0, [r7, #4]
 80124ba:	f000 fb3c 	bl	8012b36 <USBD_CtlError>
        break;
 80124be:	bf00      	nop
      }
      break;
 80124c0:	e004      	b.n	80124cc <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 80124c2:	6839      	ldr	r1, [r7, #0]
 80124c4:	6878      	ldr	r0, [r7, #4]
 80124c6:	f000 fb36 	bl	8012b36 <USBD_CtlError>
      break;
 80124ca:	bf00      	nop
    }
    break;
 80124cc:	e004      	b.n	80124d8 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 80124ce:	6839      	ldr	r1, [r7, #0]
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f000 fb30 	bl	8012b36 <USBD_CtlError>
    break;
 80124d6:	bf00      	nop
  }

  return ret;
 80124d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80124da:	4618      	mov	r0, r3
 80124dc:	3710      	adds	r7, #16
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}
	...

080124e4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b084      	sub	sp, #16
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80124ee:	2300      	movs	r3, #0
 80124f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80124f2:	2300      	movs	r3, #0
 80124f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80124f6:	2300      	movs	r3, #0
 80124f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	885b      	ldrh	r3, [r3, #2]
 80124fe:	0a1b      	lsrs	r3, r3, #8
 8012500:	b29b      	uxth	r3, r3
 8012502:	3b01      	subs	r3, #1
 8012504:	2b06      	cmp	r3, #6
 8012506:	f200 8128 	bhi.w	801275a <USBD_GetDescriptor+0x276>
 801250a:	a201      	add	r2, pc, #4	; (adr r2, 8012510 <USBD_GetDescriptor+0x2c>)
 801250c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012510:	0801252d 	.word	0x0801252d
 8012514:	08012545 	.word	0x08012545
 8012518:	08012585 	.word	0x08012585
 801251c:	0801275b 	.word	0x0801275b
 8012520:	0801275b 	.word	0x0801275b
 8012524:	080126fb 	.word	0x080126fb
 8012528:	08012727 	.word	0x08012727
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	687a      	ldr	r2, [r7, #4]
 8012536:	7c12      	ldrb	r2, [r2, #16]
 8012538:	f107 0108 	add.w	r1, r7, #8
 801253c:	4610      	mov	r0, r2
 801253e:	4798      	blx	r3
 8012540:	60f8      	str	r0, [r7, #12]
    break;
 8012542:	e112      	b.n	801276a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	7c1b      	ldrb	r3, [r3, #16]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d10d      	bne.n	8012568 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012554:	f107 0208 	add.w	r2, r7, #8
 8012558:	4610      	mov	r0, r2
 801255a:	4798      	blx	r3
 801255c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	3301      	adds	r3, #1
 8012562:	2202      	movs	r2, #2
 8012564:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8012566:	e100      	b.n	801276a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012570:	f107 0208 	add.w	r2, r7, #8
 8012574:	4610      	mov	r0, r2
 8012576:	4798      	blx	r3
 8012578:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	3301      	adds	r3, #1
 801257e:	2202      	movs	r2, #2
 8012580:	701a      	strb	r2, [r3, #0]
    break;
 8012582:	e0f2      	b.n	801276a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	885b      	ldrh	r3, [r3, #2]
 8012588:	b2db      	uxtb	r3, r3
 801258a:	2b05      	cmp	r3, #5
 801258c:	f200 80ac 	bhi.w	80126e8 <USBD_GetDescriptor+0x204>
 8012590:	a201      	add	r2, pc, #4	; (adr r2, 8012598 <USBD_GetDescriptor+0xb4>)
 8012592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012596:	bf00      	nop
 8012598:	080125b1 	.word	0x080125b1
 801259c:	080125e5 	.word	0x080125e5
 80125a0:	08012619 	.word	0x08012619
 80125a4:	0801264d 	.word	0x0801264d
 80125a8:	08012681 	.word	0x08012681
 80125ac:	080126b5 	.word	0x080126b5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125b6:	685b      	ldr	r3, [r3, #4]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d00b      	beq.n	80125d4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125c2:	685b      	ldr	r3, [r3, #4]
 80125c4:	687a      	ldr	r2, [r7, #4]
 80125c6:	7c12      	ldrb	r2, [r2, #16]
 80125c8:	f107 0108 	add.w	r1, r7, #8
 80125cc:	4610      	mov	r0, r2
 80125ce:	4798      	blx	r3
 80125d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80125d2:	e091      	b.n	80126f8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80125d4:	6839      	ldr	r1, [r7, #0]
 80125d6:	6878      	ldr	r0, [r7, #4]
 80125d8:	f000 faad 	bl	8012b36 <USBD_CtlError>
        err++;
 80125dc:	7afb      	ldrb	r3, [r7, #11]
 80125de:	3301      	adds	r3, #1
 80125e0:	72fb      	strb	r3, [r7, #11]
      break;
 80125e2:	e089      	b.n	80126f8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125ea:	689b      	ldr	r3, [r3, #8]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d00b      	beq.n	8012608 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125f6:	689b      	ldr	r3, [r3, #8]
 80125f8:	687a      	ldr	r2, [r7, #4]
 80125fa:	7c12      	ldrb	r2, [r2, #16]
 80125fc:	f107 0108 	add.w	r1, r7, #8
 8012600:	4610      	mov	r0, r2
 8012602:	4798      	blx	r3
 8012604:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012606:	e077      	b.n	80126f8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012608:	6839      	ldr	r1, [r7, #0]
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f000 fa93 	bl	8012b36 <USBD_CtlError>
        err++;
 8012610:	7afb      	ldrb	r3, [r7, #11]
 8012612:	3301      	adds	r3, #1
 8012614:	72fb      	strb	r3, [r7, #11]
      break;
 8012616:	e06f      	b.n	80126f8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801261e:	68db      	ldr	r3, [r3, #12]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d00b      	beq.n	801263c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801262a:	68db      	ldr	r3, [r3, #12]
 801262c:	687a      	ldr	r2, [r7, #4]
 801262e:	7c12      	ldrb	r2, [r2, #16]
 8012630:	f107 0108 	add.w	r1, r7, #8
 8012634:	4610      	mov	r0, r2
 8012636:	4798      	blx	r3
 8012638:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801263a:	e05d      	b.n	80126f8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801263c:	6839      	ldr	r1, [r7, #0]
 801263e:	6878      	ldr	r0, [r7, #4]
 8012640:	f000 fa79 	bl	8012b36 <USBD_CtlError>
        err++;
 8012644:	7afb      	ldrb	r3, [r7, #11]
 8012646:	3301      	adds	r3, #1
 8012648:	72fb      	strb	r3, [r7, #11]
      break;
 801264a:	e055      	b.n	80126f8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012652:	691b      	ldr	r3, [r3, #16]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d00b      	beq.n	8012670 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801265e:	691b      	ldr	r3, [r3, #16]
 8012660:	687a      	ldr	r2, [r7, #4]
 8012662:	7c12      	ldrb	r2, [r2, #16]
 8012664:	f107 0108 	add.w	r1, r7, #8
 8012668:	4610      	mov	r0, r2
 801266a:	4798      	blx	r3
 801266c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801266e:	e043      	b.n	80126f8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012670:	6839      	ldr	r1, [r7, #0]
 8012672:	6878      	ldr	r0, [r7, #4]
 8012674:	f000 fa5f 	bl	8012b36 <USBD_CtlError>
        err++;
 8012678:	7afb      	ldrb	r3, [r7, #11]
 801267a:	3301      	adds	r3, #1
 801267c:	72fb      	strb	r3, [r7, #11]
      break;
 801267e:	e03b      	b.n	80126f8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012686:	695b      	ldr	r3, [r3, #20]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d00b      	beq.n	80126a4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012692:	695b      	ldr	r3, [r3, #20]
 8012694:	687a      	ldr	r2, [r7, #4]
 8012696:	7c12      	ldrb	r2, [r2, #16]
 8012698:	f107 0108 	add.w	r1, r7, #8
 801269c:	4610      	mov	r0, r2
 801269e:	4798      	blx	r3
 80126a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80126a2:	e029      	b.n	80126f8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80126a4:	6839      	ldr	r1, [r7, #0]
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	f000 fa45 	bl	8012b36 <USBD_CtlError>
        err++;
 80126ac:	7afb      	ldrb	r3, [r7, #11]
 80126ae:	3301      	adds	r3, #1
 80126b0:	72fb      	strb	r3, [r7, #11]
      break;
 80126b2:	e021      	b.n	80126f8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126ba:	699b      	ldr	r3, [r3, #24]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d00b      	beq.n	80126d8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126c6:	699b      	ldr	r3, [r3, #24]
 80126c8:	687a      	ldr	r2, [r7, #4]
 80126ca:	7c12      	ldrb	r2, [r2, #16]
 80126cc:	f107 0108 	add.w	r1, r7, #8
 80126d0:	4610      	mov	r0, r2
 80126d2:	4798      	blx	r3
 80126d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80126d6:	e00f      	b.n	80126f8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80126d8:	6839      	ldr	r1, [r7, #0]
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f000 fa2b 	bl	8012b36 <USBD_CtlError>
        err++;
 80126e0:	7afb      	ldrb	r3, [r7, #11]
 80126e2:	3301      	adds	r3, #1
 80126e4:	72fb      	strb	r3, [r7, #11]
      break;
 80126e6:	e007      	b.n	80126f8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80126e8:	6839      	ldr	r1, [r7, #0]
 80126ea:	6878      	ldr	r0, [r7, #4]
 80126ec:	f000 fa23 	bl	8012b36 <USBD_CtlError>
      err++;
 80126f0:	7afb      	ldrb	r3, [r7, #11]
 80126f2:	3301      	adds	r3, #1
 80126f4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80126f6:	bf00      	nop
    }
    break;
 80126f8:	e037      	b.n	801276a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	7c1b      	ldrb	r3, [r3, #16]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d109      	bne.n	8012716 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801270a:	f107 0208 	add.w	r2, r7, #8
 801270e:	4610      	mov	r0, r2
 8012710:	4798      	blx	r3
 8012712:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8012714:	e029      	b.n	801276a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8012716:	6839      	ldr	r1, [r7, #0]
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f000 fa0c 	bl	8012b36 <USBD_CtlError>
      err++;
 801271e:	7afb      	ldrb	r3, [r7, #11]
 8012720:	3301      	adds	r3, #1
 8012722:	72fb      	strb	r3, [r7, #11]
    break;
 8012724:	e021      	b.n	801276a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	7c1b      	ldrb	r3, [r3, #16]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d10d      	bne.n	801274a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012736:	f107 0208 	add.w	r2, r7, #8
 801273a:	4610      	mov	r0, r2
 801273c:	4798      	blx	r3
 801273e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	3301      	adds	r3, #1
 8012744:	2207      	movs	r2, #7
 8012746:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8012748:	e00f      	b.n	801276a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 801274a:	6839      	ldr	r1, [r7, #0]
 801274c:	6878      	ldr	r0, [r7, #4]
 801274e:	f000 f9f2 	bl	8012b36 <USBD_CtlError>
      err++;
 8012752:	7afb      	ldrb	r3, [r7, #11]
 8012754:	3301      	adds	r3, #1
 8012756:	72fb      	strb	r3, [r7, #11]
    break;
 8012758:	e007      	b.n	801276a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 801275a:	6839      	ldr	r1, [r7, #0]
 801275c:	6878      	ldr	r0, [r7, #4]
 801275e:	f000 f9ea 	bl	8012b36 <USBD_CtlError>
    err++;
 8012762:	7afb      	ldrb	r3, [r7, #11]
 8012764:	3301      	adds	r3, #1
 8012766:	72fb      	strb	r3, [r7, #11]
    break;
 8012768:	bf00      	nop
  }

  if (err != 0U)
 801276a:	7afb      	ldrb	r3, [r7, #11]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d11e      	bne.n	80127ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	88db      	ldrh	r3, [r3, #6]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d016      	beq.n	80127a6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8012778:	893b      	ldrh	r3, [r7, #8]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d00e      	beq.n	801279c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 801277e:	683b      	ldr	r3, [r7, #0]
 8012780:	88da      	ldrh	r2, [r3, #6]
 8012782:	893b      	ldrh	r3, [r7, #8]
 8012784:	4293      	cmp	r3, r2
 8012786:	bf28      	it	cs
 8012788:	4613      	movcs	r3, r2
 801278a:	b29b      	uxth	r3, r3
 801278c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 801278e:	893b      	ldrh	r3, [r7, #8]
 8012790:	461a      	mov	r2, r3
 8012792:	68f9      	ldr	r1, [r7, #12]
 8012794:	6878      	ldr	r0, [r7, #4]
 8012796:	f000 fa3f 	bl	8012c18 <USBD_CtlSendData>
 801279a:	e009      	b.n	80127b0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 801279c:	6839      	ldr	r1, [r7, #0]
 801279e:	6878      	ldr	r0, [r7, #4]
 80127a0:	f000 f9c9 	bl	8012b36 <USBD_CtlError>
 80127a4:	e004      	b.n	80127b0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80127a6:	6878      	ldr	r0, [r7, #4]
 80127a8:	f000 fa90 	bl	8012ccc <USBD_CtlSendStatus>
 80127ac:	e000      	b.n	80127b0 <USBD_GetDescriptor+0x2cc>
    return;
 80127ae:	bf00      	nop
    }
  }
}
 80127b0:	3710      	adds	r7, #16
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}
 80127b6:	bf00      	nop

080127b8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b084      	sub	sp, #16
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
 80127c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80127c2:	683b      	ldr	r3, [r7, #0]
 80127c4:	889b      	ldrh	r3, [r3, #4]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d130      	bne.n	801282c <USBD_SetAddress+0x74>
 80127ca:	683b      	ldr	r3, [r7, #0]
 80127cc:	88db      	ldrh	r3, [r3, #6]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d12c      	bne.n	801282c <USBD_SetAddress+0x74>
 80127d2:	683b      	ldr	r3, [r7, #0]
 80127d4:	885b      	ldrh	r3, [r3, #2]
 80127d6:	2b7f      	cmp	r3, #127	; 0x7f
 80127d8:	d828      	bhi.n	801282c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80127da:	683b      	ldr	r3, [r7, #0]
 80127dc:	885b      	ldrh	r3, [r3, #2]
 80127de:	b2db      	uxtb	r3, r3
 80127e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80127e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80127ec:	2b03      	cmp	r3, #3
 80127ee:	d104      	bne.n	80127fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80127f0:	6839      	ldr	r1, [r7, #0]
 80127f2:	6878      	ldr	r0, [r7, #4]
 80127f4:	f000 f99f 	bl	8012b36 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80127f8:	e01d      	b.n	8012836 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	7bfa      	ldrb	r2, [r7, #15]
 80127fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012802:	7bfb      	ldrb	r3, [r7, #15]
 8012804:	4619      	mov	r1, r3
 8012806:	6878      	ldr	r0, [r7, #4]
 8012808:	f003 fdc8 	bl	801639c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801280c:	6878      	ldr	r0, [r7, #4]
 801280e:	f000 fa5d 	bl	8012ccc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012812:	7bfb      	ldrb	r3, [r7, #15]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d004      	beq.n	8012822 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	2202      	movs	r2, #2
 801281c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012820:	e009      	b.n	8012836 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	2201      	movs	r2, #1
 8012826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801282a:	e004      	b.n	8012836 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801282c:	6839      	ldr	r1, [r7, #0]
 801282e:	6878      	ldr	r0, [r7, #4]
 8012830:	f000 f981 	bl	8012b36 <USBD_CtlError>
  }
}
 8012834:	bf00      	nop
 8012836:	bf00      	nop
 8012838:	3710      	adds	r7, #16
 801283a:	46bd      	mov	sp, r7
 801283c:	bd80      	pop	{r7, pc}
	...

08012840 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b084      	sub	sp, #16
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
 8012848:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801284a:	2300      	movs	r3, #0
 801284c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801284e:	683b      	ldr	r3, [r7, #0]
 8012850:	885b      	ldrh	r3, [r3, #2]
 8012852:	b2da      	uxtb	r2, r3
 8012854:	4b4b      	ldr	r3, [pc, #300]	; (8012984 <USBD_SetConfig+0x144>)
 8012856:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012858:	4b4a      	ldr	r3, [pc, #296]	; (8012984 <USBD_SetConfig+0x144>)
 801285a:	781b      	ldrb	r3, [r3, #0]
 801285c:	2b01      	cmp	r3, #1
 801285e:	d905      	bls.n	801286c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012860:	6839      	ldr	r1, [r7, #0]
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f000 f967 	bl	8012b36 <USBD_CtlError>
    return USBD_FAIL;
 8012868:	2303      	movs	r3, #3
 801286a:	e087      	b.n	801297c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012872:	2b02      	cmp	r3, #2
 8012874:	d002      	beq.n	801287c <USBD_SetConfig+0x3c>
 8012876:	2b03      	cmp	r3, #3
 8012878:	d025      	beq.n	80128c6 <USBD_SetConfig+0x86>
 801287a:	e071      	b.n	8012960 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 801287c:	4b41      	ldr	r3, [pc, #260]	; (8012984 <USBD_SetConfig+0x144>)
 801287e:	781b      	ldrb	r3, [r3, #0]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d01c      	beq.n	80128be <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8012884:	4b3f      	ldr	r3, [pc, #252]	; (8012984 <USBD_SetConfig+0x144>)
 8012886:	781b      	ldrb	r3, [r3, #0]
 8012888:	461a      	mov	r2, r3
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 801288e:	4b3d      	ldr	r3, [pc, #244]	; (8012984 <USBD_SetConfig+0x144>)
 8012890:	781b      	ldrb	r3, [r3, #0]
 8012892:	4619      	mov	r1, r3
 8012894:	6878      	ldr	r0, [r7, #4]
 8012896:	f7ff f999 	bl	8011bcc <USBD_SetClassConfig>
 801289a:	4603      	mov	r3, r0
 801289c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 801289e:	7bfb      	ldrb	r3, [r7, #15]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d004      	beq.n	80128ae <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80128a4:	6839      	ldr	r1, [r7, #0]
 80128a6:	6878      	ldr	r0, [r7, #4]
 80128a8:	f000 f945 	bl	8012b36 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80128ac:	e065      	b.n	801297a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80128ae:	6878      	ldr	r0, [r7, #4]
 80128b0:	f000 fa0c 	bl	8012ccc <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	2203      	movs	r2, #3
 80128b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80128bc:	e05d      	b.n	801297a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80128be:	6878      	ldr	r0, [r7, #4]
 80128c0:	f000 fa04 	bl	8012ccc <USBD_CtlSendStatus>
    break;
 80128c4:	e059      	b.n	801297a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80128c6:	4b2f      	ldr	r3, [pc, #188]	; (8012984 <USBD_SetConfig+0x144>)
 80128c8:	781b      	ldrb	r3, [r3, #0]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d112      	bne.n	80128f4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	2202      	movs	r2, #2
 80128d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80128d6:	4b2b      	ldr	r3, [pc, #172]	; (8012984 <USBD_SetConfig+0x144>)
 80128d8:	781b      	ldrb	r3, [r3, #0]
 80128da:	461a      	mov	r2, r3
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80128e0:	4b28      	ldr	r3, [pc, #160]	; (8012984 <USBD_SetConfig+0x144>)
 80128e2:	781b      	ldrb	r3, [r3, #0]
 80128e4:	4619      	mov	r1, r3
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f7ff f98c 	bl	8011c04 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	f000 f9ed 	bl	8012ccc <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80128f2:	e042      	b.n	801297a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80128f4:	4b23      	ldr	r3, [pc, #140]	; (8012984 <USBD_SetConfig+0x144>)
 80128f6:	781b      	ldrb	r3, [r3, #0]
 80128f8:	461a      	mov	r2, r3
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	685b      	ldr	r3, [r3, #4]
 80128fe:	429a      	cmp	r2, r3
 8012900:	d02a      	beq.n	8012958 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	685b      	ldr	r3, [r3, #4]
 8012906:	b2db      	uxtb	r3, r3
 8012908:	4619      	mov	r1, r3
 801290a:	6878      	ldr	r0, [r7, #4]
 801290c:	f7ff f97a 	bl	8011c04 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8012910:	4b1c      	ldr	r3, [pc, #112]	; (8012984 <USBD_SetConfig+0x144>)
 8012912:	781b      	ldrb	r3, [r3, #0]
 8012914:	461a      	mov	r2, r3
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801291a:	4b1a      	ldr	r3, [pc, #104]	; (8012984 <USBD_SetConfig+0x144>)
 801291c:	781b      	ldrb	r3, [r3, #0]
 801291e:	4619      	mov	r1, r3
 8012920:	6878      	ldr	r0, [r7, #4]
 8012922:	f7ff f953 	bl	8011bcc <USBD_SetClassConfig>
 8012926:	4603      	mov	r3, r0
 8012928:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 801292a:	7bfb      	ldrb	r3, [r7, #15]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d00f      	beq.n	8012950 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8012930:	6839      	ldr	r1, [r7, #0]
 8012932:	6878      	ldr	r0, [r7, #4]
 8012934:	f000 f8ff 	bl	8012b36 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	685b      	ldr	r3, [r3, #4]
 801293c:	b2db      	uxtb	r3, r3
 801293e:	4619      	mov	r1, r3
 8012940:	6878      	ldr	r0, [r7, #4]
 8012942:	f7ff f95f 	bl	8011c04 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	2202      	movs	r2, #2
 801294a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801294e:	e014      	b.n	801297a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8012950:	6878      	ldr	r0, [r7, #4]
 8012952:	f000 f9bb 	bl	8012ccc <USBD_CtlSendStatus>
    break;
 8012956:	e010      	b.n	801297a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8012958:	6878      	ldr	r0, [r7, #4]
 801295a:	f000 f9b7 	bl	8012ccc <USBD_CtlSendStatus>
    break;
 801295e:	e00c      	b.n	801297a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8012960:	6839      	ldr	r1, [r7, #0]
 8012962:	6878      	ldr	r0, [r7, #4]
 8012964:	f000 f8e7 	bl	8012b36 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012968:	4b06      	ldr	r3, [pc, #24]	; (8012984 <USBD_SetConfig+0x144>)
 801296a:	781b      	ldrb	r3, [r3, #0]
 801296c:	4619      	mov	r1, r3
 801296e:	6878      	ldr	r0, [r7, #4]
 8012970:	f7ff f948 	bl	8011c04 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8012974:	2303      	movs	r3, #3
 8012976:	73fb      	strb	r3, [r7, #15]
    break;
 8012978:	bf00      	nop
  }

  return ret;
 801297a:	7bfb      	ldrb	r3, [r7, #15]
}
 801297c:	4618      	mov	r0, r3
 801297e:	3710      	adds	r7, #16
 8012980:	46bd      	mov	sp, r7
 8012982:	bd80      	pop	{r7, pc}
 8012984:	20004868 	.word	0x20004868

08012988 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b082      	sub	sp, #8
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
 8012990:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012992:	683b      	ldr	r3, [r7, #0]
 8012994:	88db      	ldrh	r3, [r3, #6]
 8012996:	2b01      	cmp	r3, #1
 8012998:	d004      	beq.n	80129a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801299a:	6839      	ldr	r1, [r7, #0]
 801299c:	6878      	ldr	r0, [r7, #4]
 801299e:	f000 f8ca 	bl	8012b36 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80129a2:	e022      	b.n	80129ea <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80129aa:	2b02      	cmp	r3, #2
 80129ac:	dc02      	bgt.n	80129b4 <USBD_GetConfig+0x2c>
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	dc03      	bgt.n	80129ba <USBD_GetConfig+0x32>
 80129b2:	e015      	b.n	80129e0 <USBD_GetConfig+0x58>
 80129b4:	2b03      	cmp	r3, #3
 80129b6:	d00b      	beq.n	80129d0 <USBD_GetConfig+0x48>
 80129b8:	e012      	b.n	80129e0 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	2200      	movs	r2, #0
 80129be:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	3308      	adds	r3, #8
 80129c4:	2201      	movs	r2, #1
 80129c6:	4619      	mov	r1, r3
 80129c8:	6878      	ldr	r0, [r7, #4]
 80129ca:	f000 f925 	bl	8012c18 <USBD_CtlSendData>
      break;
 80129ce:	e00c      	b.n	80129ea <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	3304      	adds	r3, #4
 80129d4:	2201      	movs	r2, #1
 80129d6:	4619      	mov	r1, r3
 80129d8:	6878      	ldr	r0, [r7, #4]
 80129da:	f000 f91d 	bl	8012c18 <USBD_CtlSendData>
      break;
 80129de:	e004      	b.n	80129ea <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 80129e0:	6839      	ldr	r1, [r7, #0]
 80129e2:	6878      	ldr	r0, [r7, #4]
 80129e4:	f000 f8a7 	bl	8012b36 <USBD_CtlError>
      break;
 80129e8:	bf00      	nop
}
 80129ea:	bf00      	nop
 80129ec:	3708      	adds	r7, #8
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}

080129f2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80129f2:	b580      	push	{r7, lr}
 80129f4:	b082      	sub	sp, #8
 80129f6:	af00      	add	r7, sp, #0
 80129f8:	6078      	str	r0, [r7, #4]
 80129fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a02:	3b01      	subs	r3, #1
 8012a04:	2b02      	cmp	r3, #2
 8012a06:	d81e      	bhi.n	8012a46 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	88db      	ldrh	r3, [r3, #6]
 8012a0c:	2b02      	cmp	r3, #2
 8012a0e:	d004      	beq.n	8012a1a <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8012a10:	6839      	ldr	r1, [r7, #0]
 8012a12:	6878      	ldr	r0, [r7, #4]
 8012a14:	f000 f88f 	bl	8012b36 <USBD_CtlError>
      break;
 8012a18:	e01a      	b.n	8012a50 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	2201      	movs	r2, #1
 8012a1e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d005      	beq.n	8012a36 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	68db      	ldr	r3, [r3, #12]
 8012a2e:	f043 0202 	orr.w	r2, r3, #2
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	330c      	adds	r3, #12
 8012a3a:	2202      	movs	r2, #2
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	6878      	ldr	r0, [r7, #4]
 8012a40:	f000 f8ea 	bl	8012c18 <USBD_CtlSendData>
    break;
 8012a44:	e004      	b.n	8012a50 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8012a46:	6839      	ldr	r1, [r7, #0]
 8012a48:	6878      	ldr	r0, [r7, #4]
 8012a4a:	f000 f874 	bl	8012b36 <USBD_CtlError>
    break;
 8012a4e:	bf00      	nop
  }
}
 8012a50:	bf00      	nop
 8012a52:	3708      	adds	r7, #8
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bd80      	pop	{r7, pc}

08012a58 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b082      	sub	sp, #8
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
 8012a60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	885b      	ldrh	r3, [r3, #2]
 8012a66:	2b01      	cmp	r3, #1
 8012a68:	d106      	bne.n	8012a78 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	2201      	movs	r2, #1
 8012a6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012a72:	6878      	ldr	r0, [r7, #4]
 8012a74:	f000 f92a 	bl	8012ccc <USBD_CtlSendStatus>
  }
}
 8012a78:	bf00      	nop
 8012a7a:	3708      	adds	r7, #8
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}

08012a80 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b082      	sub	sp, #8
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
 8012a88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a90:	3b01      	subs	r3, #1
 8012a92:	2b02      	cmp	r3, #2
 8012a94:	d80b      	bhi.n	8012aae <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012a96:	683b      	ldr	r3, [r7, #0]
 8012a98:	885b      	ldrh	r3, [r3, #2]
 8012a9a:	2b01      	cmp	r3, #1
 8012a9c:	d10c      	bne.n	8012ab8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	2200      	movs	r2, #0
 8012aa2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012aa6:	6878      	ldr	r0, [r7, #4]
 8012aa8:	f000 f910 	bl	8012ccc <USBD_CtlSendStatus>
      }
      break;
 8012aac:	e004      	b.n	8012ab8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8012aae:	6839      	ldr	r1, [r7, #0]
 8012ab0:	6878      	ldr	r0, [r7, #4]
 8012ab2:	f000 f840 	bl	8012b36 <USBD_CtlError>
      break;
 8012ab6:	e000      	b.n	8012aba <USBD_ClrFeature+0x3a>
      break;
 8012ab8:	bf00      	nop
  }
}
 8012aba:	bf00      	nop
 8012abc:	3708      	adds	r7, #8
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bd80      	pop	{r7, pc}

08012ac2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012ac2:	b580      	push	{r7, lr}
 8012ac4:	b084      	sub	sp, #16
 8012ac6:	af00      	add	r7, sp, #0
 8012ac8:	6078      	str	r0, [r7, #4]
 8012aca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012acc:	683b      	ldr	r3, [r7, #0]
 8012ace:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	781a      	ldrb	r2, [r3, #0]
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	3301      	adds	r3, #1
 8012adc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	781a      	ldrb	r2, [r3, #0]
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	3301      	adds	r3, #1
 8012aea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012aec:	68f8      	ldr	r0, [r7, #12]
 8012aee:	f7ff fac6 	bl	801207e <SWAPBYTE>
 8012af2:	4603      	mov	r3, r0
 8012af4:	461a      	mov	r2, r3
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	3301      	adds	r3, #1
 8012afe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	3301      	adds	r3, #1
 8012b04:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012b06:	68f8      	ldr	r0, [r7, #12]
 8012b08:	f7ff fab9 	bl	801207e <SWAPBYTE>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	461a      	mov	r2, r3
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	3301      	adds	r3, #1
 8012b18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	3301      	adds	r3, #1
 8012b1e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012b20:	68f8      	ldr	r0, [r7, #12]
 8012b22:	f7ff faac 	bl	801207e <SWAPBYTE>
 8012b26:	4603      	mov	r3, r0
 8012b28:	461a      	mov	r2, r3
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	80da      	strh	r2, [r3, #6]
}
 8012b2e:	bf00      	nop
 8012b30:	3710      	adds	r7, #16
 8012b32:	46bd      	mov	sp, r7
 8012b34:	bd80      	pop	{r7, pc}

08012b36 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b36:	b580      	push	{r7, lr}
 8012b38:	b082      	sub	sp, #8
 8012b3a:	af00      	add	r7, sp, #0
 8012b3c:	6078      	str	r0, [r7, #4]
 8012b3e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012b40:	2180      	movs	r1, #128	; 0x80
 8012b42:	6878      	ldr	r0, [r7, #4]
 8012b44:	f003 fbc0 	bl	80162c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012b48:	2100      	movs	r1, #0
 8012b4a:	6878      	ldr	r0, [r7, #4]
 8012b4c:	f003 fbbc 	bl	80162c8 <USBD_LL_StallEP>
}
 8012b50:	bf00      	nop
 8012b52:	3708      	adds	r7, #8
 8012b54:	46bd      	mov	sp, r7
 8012b56:	bd80      	pop	{r7, pc}

08012b58 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b086      	sub	sp, #24
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	60f8      	str	r0, [r7, #12]
 8012b60:	60b9      	str	r1, [r7, #8]
 8012b62:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012b64:	2300      	movs	r3, #0
 8012b66:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d036      	beq.n	8012bdc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012b72:	6938      	ldr	r0, [r7, #16]
 8012b74:	f000 f836 	bl	8012be4 <USBD_GetLen>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	3301      	adds	r3, #1
 8012b7c:	b29b      	uxth	r3, r3
 8012b7e:	005b      	lsls	r3, r3, #1
 8012b80:	b29a      	uxth	r2, r3
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012b86:	7dfb      	ldrb	r3, [r7, #23]
 8012b88:	68ba      	ldr	r2, [r7, #8]
 8012b8a:	4413      	add	r3, r2
 8012b8c:	687a      	ldr	r2, [r7, #4]
 8012b8e:	7812      	ldrb	r2, [r2, #0]
 8012b90:	701a      	strb	r2, [r3, #0]
  idx++;
 8012b92:	7dfb      	ldrb	r3, [r7, #23]
 8012b94:	3301      	adds	r3, #1
 8012b96:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012b98:	7dfb      	ldrb	r3, [r7, #23]
 8012b9a:	68ba      	ldr	r2, [r7, #8]
 8012b9c:	4413      	add	r3, r2
 8012b9e:	2203      	movs	r2, #3
 8012ba0:	701a      	strb	r2, [r3, #0]
  idx++;
 8012ba2:	7dfb      	ldrb	r3, [r7, #23]
 8012ba4:	3301      	adds	r3, #1
 8012ba6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012ba8:	e013      	b.n	8012bd2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012baa:	7dfb      	ldrb	r3, [r7, #23]
 8012bac:	68ba      	ldr	r2, [r7, #8]
 8012bae:	4413      	add	r3, r2
 8012bb0:	693a      	ldr	r2, [r7, #16]
 8012bb2:	7812      	ldrb	r2, [r2, #0]
 8012bb4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012bb6:	693b      	ldr	r3, [r7, #16]
 8012bb8:	3301      	adds	r3, #1
 8012bba:	613b      	str	r3, [r7, #16]
    idx++;
 8012bbc:	7dfb      	ldrb	r3, [r7, #23]
 8012bbe:	3301      	adds	r3, #1
 8012bc0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012bc2:	7dfb      	ldrb	r3, [r7, #23]
 8012bc4:	68ba      	ldr	r2, [r7, #8]
 8012bc6:	4413      	add	r3, r2
 8012bc8:	2200      	movs	r2, #0
 8012bca:	701a      	strb	r2, [r3, #0]
    idx++;
 8012bcc:	7dfb      	ldrb	r3, [r7, #23]
 8012bce:	3301      	adds	r3, #1
 8012bd0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012bd2:	693b      	ldr	r3, [r7, #16]
 8012bd4:	781b      	ldrb	r3, [r3, #0]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d1e7      	bne.n	8012baa <USBD_GetString+0x52>
 8012bda:	e000      	b.n	8012bde <USBD_GetString+0x86>
    return;
 8012bdc:	bf00      	nop
  }
}
 8012bde:	3718      	adds	r7, #24
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}

08012be4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012be4:	b480      	push	{r7}
 8012be6:	b085      	sub	sp, #20
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012bec:	2300      	movs	r3, #0
 8012bee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012bf4:	e005      	b.n	8012c02 <USBD_GetLen+0x1e>
  {
    len++;
 8012bf6:	7bfb      	ldrb	r3, [r7, #15]
 8012bf8:	3301      	adds	r3, #1
 8012bfa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012bfc:	68bb      	ldr	r3, [r7, #8]
 8012bfe:	3301      	adds	r3, #1
 8012c00:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	781b      	ldrb	r3, [r3, #0]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d1f5      	bne.n	8012bf6 <USBD_GetLen+0x12>
  }

  return len;
 8012c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	3714      	adds	r7, #20
 8012c10:	46bd      	mov	sp, r7
 8012c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c16:	4770      	bx	lr

08012c18 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b084      	sub	sp, #16
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	60f8      	str	r0, [r7, #12]
 8012c20:	60b9      	str	r1, [r7, #8]
 8012c22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	2202      	movs	r2, #2
 8012c28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	687a      	ldr	r2, [r7, #4]
 8012c30:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	687a      	ldr	r2, [r7, #4]
 8012c36:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	68ba      	ldr	r2, [r7, #8]
 8012c3c:	2100      	movs	r1, #0
 8012c3e:	68f8      	ldr	r0, [r7, #12]
 8012c40:	f003 fbcb 	bl	80163da <USBD_LL_Transmit>

  return USBD_OK;
 8012c44:	2300      	movs	r3, #0
}
 8012c46:	4618      	mov	r0, r3
 8012c48:	3710      	adds	r7, #16
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	bd80      	pop	{r7, pc}

08012c4e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012c4e:	b580      	push	{r7, lr}
 8012c50:	b084      	sub	sp, #16
 8012c52:	af00      	add	r7, sp, #0
 8012c54:	60f8      	str	r0, [r7, #12]
 8012c56:	60b9      	str	r1, [r7, #8]
 8012c58:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	68ba      	ldr	r2, [r7, #8]
 8012c5e:	2100      	movs	r1, #0
 8012c60:	68f8      	ldr	r0, [r7, #12]
 8012c62:	f003 fbba 	bl	80163da <USBD_LL_Transmit>

  return USBD_OK;
 8012c66:	2300      	movs	r3, #0
}
 8012c68:	4618      	mov	r0, r3
 8012c6a:	3710      	adds	r7, #16
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	bd80      	pop	{r7, pc}

08012c70 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b084      	sub	sp, #16
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	60f8      	str	r0, [r7, #12]
 8012c78:	60b9      	str	r1, [r7, #8]
 8012c7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	2203      	movs	r2, #3
 8012c80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	687a      	ldr	r2, [r7, #4]
 8012c88:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	687a      	ldr	r2, [r7, #4]
 8012c90:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	68ba      	ldr	r2, [r7, #8]
 8012c98:	2100      	movs	r1, #0
 8012c9a:	68f8      	ldr	r0, [r7, #12]
 8012c9c:	f003 fbbe 	bl	801641c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012ca0:	2300      	movs	r3, #0
}
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	3710      	adds	r7, #16
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd80      	pop	{r7, pc}

08012caa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012caa:	b580      	push	{r7, lr}
 8012cac:	b084      	sub	sp, #16
 8012cae:	af00      	add	r7, sp, #0
 8012cb0:	60f8      	str	r0, [r7, #12]
 8012cb2:	60b9      	str	r1, [r7, #8]
 8012cb4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	68ba      	ldr	r2, [r7, #8]
 8012cba:	2100      	movs	r1, #0
 8012cbc:	68f8      	ldr	r0, [r7, #12]
 8012cbe:	f003 fbad 	bl	801641c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012cc2:	2300      	movs	r3, #0
}
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	3710      	adds	r7, #16
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	bd80      	pop	{r7, pc}

08012ccc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b082      	sub	sp, #8
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	2204      	movs	r2, #4
 8012cd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012cdc:	2300      	movs	r3, #0
 8012cde:	2200      	movs	r2, #0
 8012ce0:	2100      	movs	r1, #0
 8012ce2:	6878      	ldr	r0, [r7, #4]
 8012ce4:	f003 fb79 	bl	80163da <USBD_LL_Transmit>

  return USBD_OK;
 8012ce8:	2300      	movs	r3, #0
}
 8012cea:	4618      	mov	r0, r3
 8012cec:	3708      	adds	r7, #8
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd80      	pop	{r7, pc}

08012cf2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012cf2:	b580      	push	{r7, lr}
 8012cf4:	b082      	sub	sp, #8
 8012cf6:	af00      	add	r7, sp, #0
 8012cf8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	2205      	movs	r2, #5
 8012cfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012d02:	2300      	movs	r3, #0
 8012d04:	2200      	movs	r2, #0
 8012d06:	2100      	movs	r1, #0
 8012d08:	6878      	ldr	r0, [r7, #4]
 8012d0a:	f003 fb87 	bl	801641c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012d0e:	2300      	movs	r3, #0
}
 8012d10:	4618      	mov	r0, r3
 8012d12:	3708      	adds	r7, #8
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bd80      	pop	{r7, pc}

08012d18 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8012d18:	b480      	push	{r7}
 8012d1a:	b085      	sub	sp, #20
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	4603      	mov	r3, r0
 8012d20:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012d22:	2300      	movs	r3, #0
 8012d24:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8012d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d2a:	2b84      	cmp	r3, #132	; 0x84
 8012d2c:	d005      	beq.n	8012d3a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8012d2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	4413      	add	r3, r2
 8012d36:	3303      	adds	r3, #3
 8012d38:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012d3a:	68fb      	ldr	r3, [r7, #12]
}
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	3714      	adds	r7, #20
 8012d40:	46bd      	mov	sp, r7
 8012d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d46:	4770      	bx	lr

08012d48 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8012d48:	b480      	push	{r7}
 8012d4a:	b083      	sub	sp, #12
 8012d4c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012d4e:	f3ef 8305 	mrs	r3, IPSR
 8012d52:	607b      	str	r3, [r7, #4]
  return(result);
 8012d54:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	bf14      	ite	ne
 8012d5a:	2301      	movne	r3, #1
 8012d5c:	2300      	moveq	r3, #0
 8012d5e:	b2db      	uxtb	r3, r3
}
 8012d60:	4618      	mov	r0, r3
 8012d62:	370c      	adds	r7, #12
 8012d64:	46bd      	mov	sp, r7
 8012d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6a:	4770      	bx	lr

08012d6c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012d70:	f001 fb4c 	bl	801440c <vTaskStartScheduler>
  
  return osOK;
 8012d74:	2300      	movs	r3, #0
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	bd80      	pop	{r7, pc}

08012d7a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012d7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d7c:	b089      	sub	sp, #36	; 0x24
 8012d7e:	af04      	add	r7, sp, #16
 8012d80:	6078      	str	r0, [r7, #4]
 8012d82:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	695b      	ldr	r3, [r3, #20]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d020      	beq.n	8012dce <osThreadCreate+0x54>
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	699b      	ldr	r3, [r3, #24]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d01c      	beq.n	8012dce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	685c      	ldr	r4, [r3, #4]
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681d      	ldr	r5, [r3, #0]
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	691e      	ldr	r6, [r3, #16]
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012da6:	4618      	mov	r0, r3
 8012da8:	f7ff ffb6 	bl	8012d18 <makeFreeRtosPriority>
 8012dac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	695b      	ldr	r3, [r3, #20]
 8012db2:	687a      	ldr	r2, [r7, #4]
 8012db4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012db6:	9202      	str	r2, [sp, #8]
 8012db8:	9301      	str	r3, [sp, #4]
 8012dba:	9100      	str	r1, [sp, #0]
 8012dbc:	683b      	ldr	r3, [r7, #0]
 8012dbe:	4632      	mov	r2, r6
 8012dc0:	4629      	mov	r1, r5
 8012dc2:	4620      	mov	r0, r4
 8012dc4:	f001 f95a 	bl	801407c <xTaskCreateStatic>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	60fb      	str	r3, [r7, #12]
 8012dcc:	e01c      	b.n	8012e08 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	685c      	ldr	r4, [r3, #4]
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012dda:	b29e      	uxth	r6, r3
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012de2:	4618      	mov	r0, r3
 8012de4:	f7ff ff98 	bl	8012d18 <makeFreeRtosPriority>
 8012de8:	4602      	mov	r2, r0
 8012dea:	f107 030c 	add.w	r3, r7, #12
 8012dee:	9301      	str	r3, [sp, #4]
 8012df0:	9200      	str	r2, [sp, #0]
 8012df2:	683b      	ldr	r3, [r7, #0]
 8012df4:	4632      	mov	r2, r6
 8012df6:	4629      	mov	r1, r5
 8012df8:	4620      	mov	r0, r4
 8012dfa:	f001 f99c 	bl	8014136 <xTaskCreate>
 8012dfe:	4603      	mov	r3, r0
 8012e00:	2b01      	cmp	r3, #1
 8012e02:	d001      	beq.n	8012e08 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8012e04:	2300      	movs	r3, #0
 8012e06:	e000      	b.n	8012e0a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012e08:	68fb      	ldr	r3, [r7, #12]
}
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	3714      	adds	r7, #20
 8012e0e:	46bd      	mov	sp, r7
 8012e10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012e12 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012e12:	b580      	push	{r7, lr}
 8012e14:	b084      	sub	sp, #16
 8012e16:	af00      	add	r7, sp, #0
 8012e18:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d001      	beq.n	8012e28 <osDelay+0x16>
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	e000      	b.n	8012e2a <osDelay+0x18>
 8012e28:	2301      	movs	r3, #1
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f001 faba 	bl	80143a4 <vTaskDelay>
  
  return osOK;
 8012e30:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012e32:	4618      	mov	r0, r3
 8012e34:	3710      	adds	r7, #16
 8012e36:	46bd      	mov	sp, r7
 8012e38:	bd80      	pop	{r7, pc}
	...

08012e3c <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b086      	sub	sp, #24
 8012e40:	af02      	add	r7, sp, #8
 8012e42:	6078      	str	r0, [r7, #4]
 8012e44:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8012e46:	2300      	movs	r3, #0
 8012e48:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8012e4e:	f7ff ff7b 	bl	8012d48 <inHandlerMode>
 8012e52:	4603      	mov	r3, r0
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d01c      	beq.n	8012e92 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8012e58:	6839      	ldr	r1, [r7, #0]
 8012e5a:	f107 0208 	add.w	r2, r7, #8
 8012e5e:	f107 030c 	add.w	r3, r7, #12
 8012e62:	9300      	str	r3, [sp, #0]
 8012e64:	4613      	mov	r3, r2
 8012e66:	2201      	movs	r2, #1
 8012e68:	6878      	ldr	r0, [r7, #4]
 8012e6a:	f002 f881 	bl	8014f70 <xTaskGenericNotifyFromISR>
 8012e6e:	4603      	mov	r3, r0
 8012e70:	2b01      	cmp	r3, #1
 8012e72:	d002      	beq.n	8012e7a <osSignalSet+0x3e>
      return 0x80000000;
 8012e74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012e78:	e019      	b.n	8012eae <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d015      	beq.n	8012eac <osSignalSet+0x70>
 8012e80:	4b0d      	ldr	r3, [pc, #52]	; (8012eb8 <osSignalSet+0x7c>)
 8012e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e86:	601a      	str	r2, [r3, #0]
 8012e88:	f3bf 8f4f 	dsb	sy
 8012e8c:	f3bf 8f6f 	isb	sy
 8012e90:	e00c      	b.n	8012eac <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8012e92:	6839      	ldr	r1, [r7, #0]
 8012e94:	f107 0308 	add.w	r3, r7, #8
 8012e98:	2201      	movs	r2, #1
 8012e9a:	6878      	ldr	r0, [r7, #4]
 8012e9c:	f001 ffb2 	bl	8014e04 <xTaskGenericNotify>
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	2b01      	cmp	r3, #1
 8012ea4:	d002      	beq.n	8012eac <osSignalSet+0x70>
    return 0x80000000;
 8012ea6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012eaa:	e000      	b.n	8012eae <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8012eac:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8012eae:	4618      	mov	r0, r3
 8012eb0:	3710      	adds	r7, #16
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bd80      	pop	{r7, pc}
 8012eb6:	bf00      	nop
 8012eb8:	e000ed04 	.word	0xe000ed04

08012ebc <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8012ebc:	b590      	push	{r4, r7, lr}
 8012ebe:	b089      	sub	sp, #36	; 0x24
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	60f8      	str	r0, [r7, #12]
 8012ec4:	60b9      	str	r1, [r7, #8]
 8012ec6:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8012ec8:	2300      	movs	r3, #0
 8012eca:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ed6:	d103      	bne.n	8012ee0 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8012ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8012edc:	61fb      	str	r3, [r7, #28]
 8012ede:	e009      	b.n	8012ef4 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d006      	beq.n	8012ef4 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8012eea:	69fb      	ldr	r3, [r7, #28]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d101      	bne.n	8012ef4 <osSignalWait+0x38>
      ticks = 1;
 8012ef0:	2301      	movs	r3, #1
 8012ef2:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8012ef4:	f7ff ff28 	bl	8012d48 <inHandlerMode>
 8012ef8:	4603      	mov	r3, r0
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d002      	beq.n	8012f04 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8012efe:	2382      	movs	r3, #130	; 0x82
 8012f00:	613b      	str	r3, [r7, #16]
 8012f02:	e01b      	b.n	8012f3c <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8012f04:	68b9      	ldr	r1, [r7, #8]
 8012f06:	f107 0310 	add.w	r3, r7, #16
 8012f0a:	1d1a      	adds	r2, r3, #4
 8012f0c:	69fb      	ldr	r3, [r7, #28]
 8012f0e:	2000      	movs	r0, #0
 8012f10:	f001 ff1e 	bl	8014d50 <xTaskNotifyWait>
 8012f14:	4603      	mov	r3, r0
 8012f16:	2b01      	cmp	r3, #1
 8012f18:	d008      	beq.n	8012f2c <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8012f1a:	69fb      	ldr	r3, [r7, #28]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d102      	bne.n	8012f26 <osSignalWait+0x6a>
 8012f20:	2300      	movs	r3, #0
 8012f22:	613b      	str	r3, [r7, #16]
 8012f24:	e00a      	b.n	8012f3c <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8012f26:	2340      	movs	r3, #64	; 0x40
 8012f28:	613b      	str	r3, [r7, #16]
 8012f2a:	e007      	b.n	8012f3c <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8012f2c:	697b      	ldr	r3, [r7, #20]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	da02      	bge.n	8012f38 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8012f32:	2386      	movs	r3, #134	; 0x86
 8012f34:	613b      	str	r3, [r7, #16]
 8012f36:	e001      	b.n	8012f3c <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8012f38:	2308      	movs	r3, #8
 8012f3a:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	461c      	mov	r4, r3
 8012f40:	f107 0310 	add.w	r3, r7, #16
 8012f44:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012f48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012f4c:	68f8      	ldr	r0, [r7, #12]
 8012f4e:	3724      	adds	r7, #36	; 0x24
 8012f50:	46bd      	mov	sp, r7
 8012f52:	bd90      	pop	{r4, r7, pc}

08012f54 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b082      	sub	sp, #8
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	685b      	ldr	r3, [r3, #4]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d007      	beq.n	8012f74 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	685b      	ldr	r3, [r3, #4]
 8012f68:	4619      	mov	r1, r3
 8012f6a:	2001      	movs	r0, #1
 8012f6c:	f000 fc65 	bl	801383a <xQueueCreateMutexStatic>
 8012f70:	4603      	mov	r3, r0
 8012f72:	e003      	b.n	8012f7c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012f74:	2001      	movs	r0, #1
 8012f76:	f000 fc48 	bl	801380a <xQueueCreateMutex>
 8012f7a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	3708      	adds	r7, #8
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bd80      	pop	{r7, pc}

08012f84 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b086      	sub	sp, #24
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	685b      	ldr	r3, [r3, #4]
 8012f90:	3303      	adds	r3, #3
 8012f92:	f023 0303 	bic.w	r3, r3, #3
 8012f96:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8012f98:	2014      	movs	r0, #20
 8012f9a:	f002 fb75 	bl	8015688 <pvPortMalloc>
 8012f9e:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8012fa0:	697b      	ldr	r3, [r7, #20]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d046      	beq.n	8013034 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	681a      	ldr	r2, [r3, #0]
 8012faa:	697b      	ldr	r3, [r7, #20]
 8012fac:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8012fae:	68fa      	ldr	r2, [r7, #12]
 8012fb0:	697b      	ldr	r3, [r7, #20]
 8012fb2:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8012fb4:	697b      	ldr	r3, [r7, #20]
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	f002 fb62 	bl	8015688 <pvPortMalloc>
 8012fc4:	4602      	mov	r2, r0
 8012fc6:	697b      	ldr	r3, [r7, #20]
 8012fc8:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8012fca:	697b      	ldr	r3, [r7, #20]
 8012fcc:	685b      	ldr	r3, [r3, #4]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d02b      	beq.n	801302a <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	68fa      	ldr	r2, [r7, #12]
 8012fd8:	fb02 f303 	mul.w	r3, r2, r3
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f002 fb53 	bl	8015688 <pvPortMalloc>
 8012fe2:	4602      	mov	r2, r0
 8012fe4:	697b      	ldr	r3, [r7, #20]
 8012fe6:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8012fe8:	697b      	ldr	r3, [r7, #20]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d011      	beq.n	8013014 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	613b      	str	r3, [r7, #16]
 8012ff4:	e008      	b.n	8013008 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8012ff6:	697b      	ldr	r3, [r7, #20]
 8012ff8:	685a      	ldr	r2, [r3, #4]
 8012ffa:	693b      	ldr	r3, [r7, #16]
 8012ffc:	4413      	add	r3, r2
 8012ffe:	2200      	movs	r2, #0
 8013000:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8013002:	693b      	ldr	r3, [r7, #16]
 8013004:	3301      	adds	r3, #1
 8013006:	613b      	str	r3, [r7, #16]
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	693a      	ldr	r2, [r7, #16]
 801300e:	429a      	cmp	r2, r3
 8013010:	d3f1      	bcc.n	8012ff6 <osPoolCreate+0x72>
 8013012:	e00f      	b.n	8013034 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8013014:	697b      	ldr	r3, [r7, #20]
 8013016:	685b      	ldr	r3, [r3, #4]
 8013018:	4618      	mov	r0, r3
 801301a:	f002 fbf9 	bl	8015810 <vPortFree>
        vPortFree(thePool);
 801301e:	6978      	ldr	r0, [r7, #20]
 8013020:	f002 fbf6 	bl	8015810 <vPortFree>
        thePool = NULL;
 8013024:	2300      	movs	r3, #0
 8013026:	617b      	str	r3, [r7, #20]
 8013028:	e004      	b.n	8013034 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 801302a:	6978      	ldr	r0, [r7, #20]
 801302c:	f002 fbf0 	bl	8015810 <vPortFree>
      thePool = NULL;
 8013030:	2300      	movs	r3, #0
 8013032:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8013034:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8013036:	4618      	mov	r0, r3
 8013038:	3718      	adds	r7, #24
 801303a:	46bd      	mov	sp, r7
 801303c:	bd80      	pop	{r7, pc}

0801303e <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 801303e:	b580      	push	{r7, lr}
 8013040:	b08a      	sub	sp, #40	; 0x28
 8013042:	af00      	add	r7, sp, #0
 8013044:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8013046:	2300      	movs	r3, #0
 8013048:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 801304a:	2300      	movs	r3, #0
 801304c:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 801304e:	f7ff fe7b 	bl	8012d48 <inHandlerMode>
 8013052:	4603      	mov	r3, r0
 8013054:	2b00      	cmp	r3, #0
 8013056:	d00e      	beq.n	8013076 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013058:	f3ef 8211 	mrs	r2, BASEPRI
 801305c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013060:	f383 8811 	msr	BASEPRI, r3
 8013064:	f3bf 8f6f 	isb	sy
 8013068:	f3bf 8f4f 	dsb	sy
 801306c:	617a      	str	r2, [r7, #20]
 801306e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013070:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8013072:	627b      	str	r3, [r7, #36]	; 0x24
 8013074:	e001      	b.n	801307a <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8013076:	f002 f9e5 	bl	8015444 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 801307a:	2300      	movs	r3, #0
 801307c:	61fb      	str	r3, [r7, #28]
 801307e:	e029      	b.n	80130d4 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	691a      	ldr	r2, [r3, #16]
 8013084:	69fb      	ldr	r3, [r7, #28]
 8013086:	4413      	add	r3, r2
 8013088:	687a      	ldr	r2, [r7, #4]
 801308a:	6892      	ldr	r2, [r2, #8]
 801308c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013090:	fb02 f201 	mul.w	r2, r2, r1
 8013094:	1a9b      	subs	r3, r3, r2
 8013096:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	685a      	ldr	r2, [r3, #4]
 801309c:	69bb      	ldr	r3, [r7, #24]
 801309e:	4413      	add	r3, r2
 80130a0:	781b      	ldrb	r3, [r3, #0]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d113      	bne.n	80130ce <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	685a      	ldr	r2, [r3, #4]
 80130aa:	69bb      	ldr	r3, [r7, #24]
 80130ac:	4413      	add	r3, r2
 80130ae:	2201      	movs	r2, #1
 80130b0:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	4619      	mov	r1, r3
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	68db      	ldr	r3, [r3, #12]
 80130bc:	69ba      	ldr	r2, [r7, #24]
 80130be:	fb02 f303 	mul.w	r3, r2, r3
 80130c2:	440b      	add	r3, r1
 80130c4:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	69ba      	ldr	r2, [r7, #24]
 80130ca:	611a      	str	r2, [r3, #16]
      break;
 80130cc:	e007      	b.n	80130de <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80130ce:	69fb      	ldr	r3, [r7, #28]
 80130d0:	3301      	adds	r3, #1
 80130d2:	61fb      	str	r3, [r7, #28]
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	689b      	ldr	r3, [r3, #8]
 80130d8:	69fa      	ldr	r2, [r7, #28]
 80130da:	429a      	cmp	r2, r3
 80130dc:	d3d0      	bcc.n	8013080 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80130de:	f7ff fe33 	bl	8012d48 <inHandlerMode>
 80130e2:	4603      	mov	r3, r0
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d005      	beq.n	80130f4 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80130e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ea:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80130f2:	e001      	b.n	80130f8 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80130f4:	f002 f9d6 	bl	80154a4 <vPortExitCritical>
  }
  
  return p;
 80130f8:	6a3b      	ldr	r3, [r7, #32]
}
 80130fa:	4618      	mov	r0, r3
 80130fc:	3728      	adds	r7, #40	; 0x28
 80130fe:	46bd      	mov	sp, r7
 8013100:	bd80      	pop	{r7, pc}

08013102 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8013102:	b480      	push	{r7}
 8013104:	b085      	sub	sp, #20
 8013106:	af00      	add	r7, sp, #0
 8013108:	6078      	str	r0, [r7, #4]
 801310a:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d101      	bne.n	8013116 <osPoolFree+0x14>
    return osErrorParameter;
 8013112:	2380      	movs	r3, #128	; 0x80
 8013114:	e030      	b.n	8013178 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8013116:	683b      	ldr	r3, [r7, #0]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d101      	bne.n	8013120 <osPoolFree+0x1e>
    return osErrorParameter;
 801311c:	2380      	movs	r3, #128	; 0x80
 801311e:	e02b      	b.n	8013178 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	683a      	ldr	r2, [r7, #0]
 8013126:	429a      	cmp	r2, r3
 8013128:	d201      	bcs.n	801312e <osPoolFree+0x2c>
    return osErrorParameter;
 801312a:	2380      	movs	r3, #128	; 0x80
 801312c:	e024      	b.n	8013178 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 801312e:	683b      	ldr	r3, [r7, #0]
 8013130:	687a      	ldr	r2, [r7, #4]
 8013132:	6812      	ldr	r2, [r2, #0]
 8013134:	1a9b      	subs	r3, r3, r2
 8013136:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	68da      	ldr	r2, [r3, #12]
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013142:	fb02 f201 	mul.w	r2, r2, r1
 8013146:	1a9b      	subs	r3, r3, r2
 8013148:	2b00      	cmp	r3, #0
 801314a:	d001      	beq.n	8013150 <osPoolFree+0x4e>
    return osErrorParameter;
 801314c:	2380      	movs	r3, #128	; 0x80
 801314e:	e013      	b.n	8013178 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	68db      	ldr	r3, [r3, #12]
 8013154:	68fa      	ldr	r2, [r7, #12]
 8013156:	fbb2 f3f3 	udiv	r3, r2, r3
 801315a:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	689b      	ldr	r3, [r3, #8]
 8013160:	68fa      	ldr	r2, [r7, #12]
 8013162:	429a      	cmp	r2, r3
 8013164:	d301      	bcc.n	801316a <osPoolFree+0x68>
    return osErrorParameter;
 8013166:	2380      	movs	r3, #128	; 0x80
 8013168:	e006      	b.n	8013178 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	685a      	ldr	r2, [r3, #4]
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	4413      	add	r3, r2
 8013172:	2200      	movs	r2, #0
 8013174:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8013176:	2300      	movs	r3, #0
}
 8013178:	4618      	mov	r0, r3
 801317a:	3714      	adds	r7, #20
 801317c:	46bd      	mov	sp, r7
 801317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013182:	4770      	bx	lr

08013184 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8013184:	b590      	push	{r4, r7, lr}
 8013186:	b087      	sub	sp, #28
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
 801318c:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	60fb      	str	r3, [r7, #12]
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	685b      	ldr	r3, [r3, #4]
 8013198:	613b      	str	r3, [r7, #16]
 801319a:	2300      	movs	r3, #0
 801319c:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	689c      	ldr	r4, [r3, #8]
 80131a2:	200c      	movs	r0, #12
 80131a4:	f002 fa70 	bl	8015688 <pvPortMalloc>
 80131a8:	4603      	mov	r3, r0
 80131aa:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	689b      	ldr	r3, [r3, #8]
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d101      	bne.n	80131ba <osMailCreate+0x36>
    return NULL;
 80131b6:	2300      	movs	r3, #0
 80131b8:	e038      	b.n	801322c <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	689b      	ldr	r3, [r3, #8]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	687a      	ldr	r2, [r7, #4]
 80131c2:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	6818      	ldr	r0, [r3, #0]
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	689b      	ldr	r3, [r3, #8]
 80131cc:	681c      	ldr	r4, [r3, #0]
 80131ce:	2200      	movs	r2, #0
 80131d0:	2104      	movs	r1, #4
 80131d2:	f000 faa1 	bl	8013718 <xQueueGenericCreate>
 80131d6:	4603      	mov	r3, r0
 80131d8:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	689b      	ldr	r3, [r3, #8]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	685b      	ldr	r3, [r3, #4]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d107      	bne.n	80131f6 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	689b      	ldr	r3, [r3, #8]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	4618      	mov	r0, r3
 80131ee:	f002 fb0f 	bl	8015810 <vPortFree>
    return NULL;
 80131f2:	2300      	movs	r3, #0
 80131f4:	e01a      	b.n	801322c <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	689b      	ldr	r3, [r3, #8]
 80131fa:	681c      	ldr	r4, [r3, #0]
 80131fc:	f107 030c 	add.w	r3, r7, #12
 8013200:	4618      	mov	r0, r3
 8013202:	f7ff febf 	bl	8012f84 <osPoolCreate>
 8013206:	4603      	mov	r3, r0
 8013208:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	689b      	ldr	r3, [r3, #8]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	689b      	ldr	r3, [r3, #8]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d107      	bne.n	8013226 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	689b      	ldr	r3, [r3, #8]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	4618      	mov	r0, r3
 801321e:	f002 faf7 	bl	8015810 <vPortFree>
    return NULL;
 8013222:	2300      	movs	r3, #0
 8013224:	e002      	b.n	801322c <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	689b      	ldr	r3, [r3, #8]
 801322a:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 801322c:	4618      	mov	r0, r3
 801322e:	371c      	adds	r7, #28
 8013230:	46bd      	mov	sp, r7
 8013232:	bd90      	pop	{r4, r7, pc}

08013234 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b084      	sub	sp, #16
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
 801323c:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d101      	bne.n	8013248 <osMailAlloc+0x14>
    return NULL;
 8013244:	2300      	movs	r3, #0
 8013246:	e006      	b.n	8013256 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	689b      	ldr	r3, [r3, #8]
 801324c:	4618      	mov	r0, r3
 801324e:	f7ff fef6 	bl	801303e <osPoolAlloc>
 8013252:	60f8      	str	r0, [r7, #12]
  
  return p;
 8013254:	68fb      	ldr	r3, [r7, #12]
}
 8013256:	4618      	mov	r0, r3
 8013258:	3710      	adds	r7, #16
 801325a:	46bd      	mov	sp, r7
 801325c:	bd80      	pop	{r7, pc}
	...

08013260 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b084      	sub	sp, #16
 8013264:	af00      	add	r7, sp, #0
 8013266:	6078      	str	r0, [r7, #4]
 8013268:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d101      	bne.n	8013274 <osMailPut+0x14>
    return osErrorParameter;
 8013270:	2380      	movs	r3, #128	; 0x80
 8013272:	e02c      	b.n	80132ce <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8013274:	2300      	movs	r3, #0
 8013276:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8013278:	f7ff fd66 	bl	8012d48 <inHandlerMode>
 801327c:	4603      	mov	r3, r0
 801327e:	2b00      	cmp	r3, #0
 8013280:	d018      	beq.n	80132b4 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	6858      	ldr	r0, [r3, #4]
 8013286:	f107 020c 	add.w	r2, r7, #12
 801328a:	4639      	mov	r1, r7
 801328c:	2300      	movs	r3, #0
 801328e:	f000 fbed 	bl	8013a6c <xQueueGenericSendFromISR>
 8013292:	4603      	mov	r3, r0
 8013294:	2b01      	cmp	r3, #1
 8013296:	d001      	beq.n	801329c <osMailPut+0x3c>
      return osErrorOS;
 8013298:	23ff      	movs	r3, #255	; 0xff
 801329a:	e018      	b.n	80132ce <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d014      	beq.n	80132cc <osMailPut+0x6c>
 80132a2:	4b0d      	ldr	r3, [pc, #52]	; (80132d8 <osMailPut+0x78>)
 80132a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132a8:	601a      	str	r2, [r3, #0]
 80132aa:	f3bf 8f4f 	dsb	sy
 80132ae:	f3bf 8f6f 	isb	sy
 80132b2:	e00b      	b.n	80132cc <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	6858      	ldr	r0, [r3, #4]
 80132b8:	4639      	mov	r1, r7
 80132ba:	2300      	movs	r3, #0
 80132bc:	2200      	movs	r2, #0
 80132be:	f000 fad7 	bl	8013870 <xQueueGenericSend>
 80132c2:	4603      	mov	r3, r0
 80132c4:	2b01      	cmp	r3, #1
 80132c6:	d001      	beq.n	80132cc <osMailPut+0x6c>
      return osErrorOS;
 80132c8:	23ff      	movs	r3, #255	; 0xff
 80132ca:	e000      	b.n	80132ce <osMailPut+0x6e>
    }
  }
  
  return osOK;
 80132cc:	2300      	movs	r3, #0
}
 80132ce:	4618      	mov	r0, r3
 80132d0:	3710      	adds	r7, #16
 80132d2:	46bd      	mov	sp, r7
 80132d4:	bd80      	pop	{r7, pc}
 80132d6:	bf00      	nop
 80132d8:	e000ed04 	.word	0xe000ed04

080132dc <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80132dc:	b590      	push	{r4, r7, lr}
 80132de:	b08b      	sub	sp, #44	; 0x2c
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	60f8      	str	r0, [r7, #12]
 80132e4:	60b9      	str	r1, [r7, #8]
 80132e6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80132e8:	68bb      	ldr	r3, [r7, #8]
 80132ea:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 80132ec:	68bb      	ldr	r3, [r7, #8]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d10a      	bne.n	8013308 <osMailGet+0x2c>
    event.status = osErrorParameter;
 80132f2:	2380      	movs	r3, #128	; 0x80
 80132f4:	617b      	str	r3, [r7, #20]
    return event;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	461c      	mov	r4, r3
 80132fa:	f107 0314 	add.w	r3, r7, #20
 80132fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013302:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013306:	e056      	b.n	80133b6 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8013308:	2300      	movs	r3, #0
 801330a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 801330c:	2300      	movs	r3, #0
 801330e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013316:	d103      	bne.n	8013320 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8013318:	f04f 33ff 	mov.w	r3, #4294967295
 801331c:	627b      	str	r3, [r7, #36]	; 0x24
 801331e:	e009      	b.n	8013334 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d006      	beq.n	8013334 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801332c:	2b00      	cmp	r3, #0
 801332e:	d101      	bne.n	8013334 <osMailGet+0x58>
      ticks = 1;
 8013330:	2301      	movs	r3, #1
 8013332:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8013334:	f7ff fd08 	bl	8012d48 <inHandlerMode>
 8013338:	4603      	mov	r3, r0
 801333a:	2b00      	cmp	r3, #0
 801333c:	d01d      	beq.n	801337a <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 801333e:	68bb      	ldr	r3, [r7, #8]
 8013340:	6858      	ldr	r0, [r3, #4]
 8013342:	f107 0220 	add.w	r2, r7, #32
 8013346:	f107 0314 	add.w	r3, r7, #20
 801334a:	3304      	adds	r3, #4
 801334c:	4619      	mov	r1, r3
 801334e:	f000 fd05 	bl	8013d5c <xQueueReceiveFromISR>
 8013352:	4603      	mov	r3, r0
 8013354:	2b01      	cmp	r3, #1
 8013356:	d102      	bne.n	801335e <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8013358:	2320      	movs	r3, #32
 801335a:	617b      	str	r3, [r7, #20]
 801335c:	e001      	b.n	8013362 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 801335e:	2300      	movs	r3, #0
 8013360:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8013362:	6a3b      	ldr	r3, [r7, #32]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d01e      	beq.n	80133a6 <osMailGet+0xca>
 8013368:	4b15      	ldr	r3, [pc, #84]	; (80133c0 <osMailGet+0xe4>)
 801336a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801336e:	601a      	str	r2, [r3, #0]
 8013370:	f3bf 8f4f 	dsb	sy
 8013374:	f3bf 8f6f 	isb	sy
 8013378:	e015      	b.n	80133a6 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 801337a:	68bb      	ldr	r3, [r7, #8]
 801337c:	6858      	ldr	r0, [r3, #4]
 801337e:	f107 0314 	add.w	r3, r7, #20
 8013382:	3304      	adds	r3, #4
 8013384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013386:	4619      	mov	r1, r3
 8013388:	f000 fc08 	bl	8013b9c <xQueueReceive>
 801338c:	4603      	mov	r3, r0
 801338e:	2b01      	cmp	r3, #1
 8013390:	d102      	bne.n	8013398 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8013392:	2320      	movs	r3, #32
 8013394:	617b      	str	r3, [r7, #20]
 8013396:	e006      	b.n	80133a6 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8013398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801339a:	2b00      	cmp	r3, #0
 801339c:	d101      	bne.n	80133a2 <osMailGet+0xc6>
 801339e:	2300      	movs	r3, #0
 80133a0:	e000      	b.n	80133a4 <osMailGet+0xc8>
 80133a2:	2340      	movs	r3, #64	; 0x40
 80133a4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	461c      	mov	r4, r3
 80133aa:	f107 0314 	add.w	r3, r7, #20
 80133ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80133b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80133b6:	68f8      	ldr	r0, [r7, #12]
 80133b8:	372c      	adds	r7, #44	; 0x2c
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bd90      	pop	{r4, r7, pc}
 80133be:	bf00      	nop
 80133c0:	e000ed04 	.word	0xe000ed04

080133c4 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b082      	sub	sp, #8
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
 80133cc:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d101      	bne.n	80133d8 <osMailFree+0x14>
    return osErrorParameter;
 80133d4:	2380      	movs	r3, #128	; 0x80
 80133d6:	e006      	b.n	80133e6 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	689b      	ldr	r3, [r3, #8]
 80133dc:	6839      	ldr	r1, [r7, #0]
 80133de:	4618      	mov	r0, r3
 80133e0:	f7ff fe8f 	bl	8013102 <osPoolFree>
 80133e4:	4603      	mov	r3, r0
}
 80133e6:	4618      	mov	r0, r3
 80133e8:	3708      	adds	r7, #8
 80133ea:	46bd      	mov	sp, r7
 80133ec:	bd80      	pop	{r7, pc}

080133ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80133ee:	b480      	push	{r7}
 80133f0:	b083      	sub	sp, #12
 80133f2:	af00      	add	r7, sp, #0
 80133f4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	f103 0208 	add.w	r2, r3, #8
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	f04f 32ff 	mov.w	r2, #4294967295
 8013406:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	f103 0208 	add.w	r2, r3, #8
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	f103 0208 	add.w	r2, r3, #8
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	2200      	movs	r2, #0
 8013420:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013422:	bf00      	nop
 8013424:	370c      	adds	r7, #12
 8013426:	46bd      	mov	sp, r7
 8013428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801342c:	4770      	bx	lr

0801342e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801342e:	b480      	push	{r7}
 8013430:	b083      	sub	sp, #12
 8013432:	af00      	add	r7, sp, #0
 8013434:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	2200      	movs	r2, #0
 801343a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801343c:	bf00      	nop
 801343e:	370c      	adds	r7, #12
 8013440:	46bd      	mov	sp, r7
 8013442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013446:	4770      	bx	lr

08013448 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013448:	b480      	push	{r7}
 801344a:	b085      	sub	sp, #20
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
 8013450:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	685b      	ldr	r3, [r3, #4]
 8013456:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	68fa      	ldr	r2, [r7, #12]
 801345c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	689a      	ldr	r2, [r3, #8]
 8013462:	683b      	ldr	r3, [r7, #0]
 8013464:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	689b      	ldr	r3, [r3, #8]
 801346a:	683a      	ldr	r2, [r7, #0]
 801346c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	683a      	ldr	r2, [r7, #0]
 8013472:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013474:	683b      	ldr	r3, [r7, #0]
 8013476:	687a      	ldr	r2, [r7, #4]
 8013478:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	1c5a      	adds	r2, r3, #1
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	601a      	str	r2, [r3, #0]
}
 8013484:	bf00      	nop
 8013486:	3714      	adds	r7, #20
 8013488:	46bd      	mov	sp, r7
 801348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801348e:	4770      	bx	lr

08013490 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013490:	b480      	push	{r7}
 8013492:	b085      	sub	sp, #20
 8013494:	af00      	add	r7, sp, #0
 8013496:	6078      	str	r0, [r7, #4]
 8013498:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801349a:	683b      	ldr	r3, [r7, #0]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80134a0:	68bb      	ldr	r3, [r7, #8]
 80134a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134a6:	d103      	bne.n	80134b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	691b      	ldr	r3, [r3, #16]
 80134ac:	60fb      	str	r3, [r7, #12]
 80134ae:	e00c      	b.n	80134ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	3308      	adds	r3, #8
 80134b4:	60fb      	str	r3, [r7, #12]
 80134b6:	e002      	b.n	80134be <vListInsert+0x2e>
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	685b      	ldr	r3, [r3, #4]
 80134bc:	60fb      	str	r3, [r7, #12]
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	685b      	ldr	r3, [r3, #4]
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	68ba      	ldr	r2, [r7, #8]
 80134c6:	429a      	cmp	r2, r3
 80134c8:	d2f6      	bcs.n	80134b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	685a      	ldr	r2, [r3, #4]
 80134ce:	683b      	ldr	r3, [r7, #0]
 80134d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80134d2:	683b      	ldr	r3, [r7, #0]
 80134d4:	685b      	ldr	r3, [r3, #4]
 80134d6:	683a      	ldr	r2, [r7, #0]
 80134d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80134da:	683b      	ldr	r3, [r7, #0]
 80134dc:	68fa      	ldr	r2, [r7, #12]
 80134de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	683a      	ldr	r2, [r7, #0]
 80134e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	687a      	ldr	r2, [r7, #4]
 80134ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	1c5a      	adds	r2, r3, #1
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	601a      	str	r2, [r3, #0]
}
 80134f6:	bf00      	nop
 80134f8:	3714      	adds	r7, #20
 80134fa:	46bd      	mov	sp, r7
 80134fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013500:	4770      	bx	lr

08013502 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013502:	b480      	push	{r7}
 8013504:	b085      	sub	sp, #20
 8013506:	af00      	add	r7, sp, #0
 8013508:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	691b      	ldr	r3, [r3, #16]
 801350e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	685b      	ldr	r3, [r3, #4]
 8013514:	687a      	ldr	r2, [r7, #4]
 8013516:	6892      	ldr	r2, [r2, #8]
 8013518:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	689b      	ldr	r3, [r3, #8]
 801351e:	687a      	ldr	r2, [r7, #4]
 8013520:	6852      	ldr	r2, [r2, #4]
 8013522:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	685b      	ldr	r3, [r3, #4]
 8013528:	687a      	ldr	r2, [r7, #4]
 801352a:	429a      	cmp	r2, r3
 801352c:	d103      	bne.n	8013536 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	689a      	ldr	r2, [r3, #8]
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	2200      	movs	r2, #0
 801353a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	1e5a      	subs	r2, r3, #1
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	681b      	ldr	r3, [r3, #0]
}
 801354a:	4618      	mov	r0, r3
 801354c:	3714      	adds	r7, #20
 801354e:	46bd      	mov	sp, r7
 8013550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013554:	4770      	bx	lr
	...

08013558 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b084      	sub	sp, #16
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
 8013560:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d10a      	bne.n	8013582 <xQueueGenericReset+0x2a>
	__asm volatile
 801356c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013570:	f383 8811 	msr	BASEPRI, r3
 8013574:	f3bf 8f6f 	isb	sy
 8013578:	f3bf 8f4f 	dsb	sy
 801357c:	60bb      	str	r3, [r7, #8]
}
 801357e:	bf00      	nop
 8013580:	e7fe      	b.n	8013580 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013582:	f001 ff5f 	bl	8015444 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	681a      	ldr	r2, [r3, #0]
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801358e:	68f9      	ldr	r1, [r7, #12]
 8013590:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013592:	fb01 f303 	mul.w	r3, r1, r3
 8013596:	441a      	add	r2, r3
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	2200      	movs	r2, #0
 80135a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	681a      	ldr	r2, [r3, #0]
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	681a      	ldr	r2, [r3, #0]
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80135b2:	3b01      	subs	r3, #1
 80135b4:	68f9      	ldr	r1, [r7, #12]
 80135b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80135b8:	fb01 f303 	mul.w	r3, r1, r3
 80135bc:	441a      	add	r2, r3
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	22ff      	movs	r2, #255	; 0xff
 80135c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	22ff      	movs	r2, #255	; 0xff
 80135ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80135d2:	683b      	ldr	r3, [r7, #0]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d114      	bne.n	8013602 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	691b      	ldr	r3, [r3, #16]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d01a      	beq.n	8013616 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	3310      	adds	r3, #16
 80135e4:	4618      	mov	r0, r3
 80135e6:	f001 f953 	bl	8014890 <xTaskRemoveFromEventList>
 80135ea:	4603      	mov	r3, r0
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d012      	beq.n	8013616 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80135f0:	4b0c      	ldr	r3, [pc, #48]	; (8013624 <xQueueGenericReset+0xcc>)
 80135f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135f6:	601a      	str	r2, [r3, #0]
 80135f8:	f3bf 8f4f 	dsb	sy
 80135fc:	f3bf 8f6f 	isb	sy
 8013600:	e009      	b.n	8013616 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	3310      	adds	r3, #16
 8013606:	4618      	mov	r0, r3
 8013608:	f7ff fef1 	bl	80133ee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	3324      	adds	r3, #36	; 0x24
 8013610:	4618      	mov	r0, r3
 8013612:	f7ff feec 	bl	80133ee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013616:	f001 ff45 	bl	80154a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801361a:	2301      	movs	r3, #1
}
 801361c:	4618      	mov	r0, r3
 801361e:	3710      	adds	r7, #16
 8013620:	46bd      	mov	sp, r7
 8013622:	bd80      	pop	{r7, pc}
 8013624:	e000ed04 	.word	0xe000ed04

08013628 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013628:	b580      	push	{r7, lr}
 801362a:	b08e      	sub	sp, #56	; 0x38
 801362c:	af02      	add	r7, sp, #8
 801362e:	60f8      	str	r0, [r7, #12]
 8013630:	60b9      	str	r1, [r7, #8]
 8013632:	607a      	str	r2, [r7, #4]
 8013634:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d10a      	bne.n	8013652 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801363c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013640:	f383 8811 	msr	BASEPRI, r3
 8013644:	f3bf 8f6f 	isb	sy
 8013648:	f3bf 8f4f 	dsb	sy
 801364c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801364e:	bf00      	nop
 8013650:	e7fe      	b.n	8013650 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013652:	683b      	ldr	r3, [r7, #0]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d10a      	bne.n	801366e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013658:	f04f 0350 	mov.w	r3, #80	; 0x50
 801365c:	f383 8811 	msr	BASEPRI, r3
 8013660:	f3bf 8f6f 	isb	sy
 8013664:	f3bf 8f4f 	dsb	sy
 8013668:	627b      	str	r3, [r7, #36]	; 0x24
}
 801366a:	bf00      	nop
 801366c:	e7fe      	b.n	801366c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d002      	beq.n	801367a <xQueueGenericCreateStatic+0x52>
 8013674:	68bb      	ldr	r3, [r7, #8]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d001      	beq.n	801367e <xQueueGenericCreateStatic+0x56>
 801367a:	2301      	movs	r3, #1
 801367c:	e000      	b.n	8013680 <xQueueGenericCreateStatic+0x58>
 801367e:	2300      	movs	r3, #0
 8013680:	2b00      	cmp	r3, #0
 8013682:	d10a      	bne.n	801369a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013688:	f383 8811 	msr	BASEPRI, r3
 801368c:	f3bf 8f6f 	isb	sy
 8013690:	f3bf 8f4f 	dsb	sy
 8013694:	623b      	str	r3, [r7, #32]
}
 8013696:	bf00      	nop
 8013698:	e7fe      	b.n	8013698 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d102      	bne.n	80136a6 <xQueueGenericCreateStatic+0x7e>
 80136a0:	68bb      	ldr	r3, [r7, #8]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d101      	bne.n	80136aa <xQueueGenericCreateStatic+0x82>
 80136a6:	2301      	movs	r3, #1
 80136a8:	e000      	b.n	80136ac <xQueueGenericCreateStatic+0x84>
 80136aa:	2300      	movs	r3, #0
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d10a      	bne.n	80136c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80136b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136b4:	f383 8811 	msr	BASEPRI, r3
 80136b8:	f3bf 8f6f 	isb	sy
 80136bc:	f3bf 8f4f 	dsb	sy
 80136c0:	61fb      	str	r3, [r7, #28]
}
 80136c2:	bf00      	nop
 80136c4:	e7fe      	b.n	80136c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80136c6:	2348      	movs	r3, #72	; 0x48
 80136c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80136ca:	697b      	ldr	r3, [r7, #20]
 80136cc:	2b48      	cmp	r3, #72	; 0x48
 80136ce:	d00a      	beq.n	80136e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80136d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136d4:	f383 8811 	msr	BASEPRI, r3
 80136d8:	f3bf 8f6f 	isb	sy
 80136dc:	f3bf 8f4f 	dsb	sy
 80136e0:	61bb      	str	r3, [r7, #24]
}
 80136e2:	bf00      	nop
 80136e4:	e7fe      	b.n	80136e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80136e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80136e8:	683b      	ldr	r3, [r7, #0]
 80136ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80136ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d00d      	beq.n	801370e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80136f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136f4:	2201      	movs	r2, #1
 80136f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80136fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80136fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013700:	9300      	str	r3, [sp, #0]
 8013702:	4613      	mov	r3, r2
 8013704:	687a      	ldr	r2, [r7, #4]
 8013706:	68b9      	ldr	r1, [r7, #8]
 8013708:	68f8      	ldr	r0, [r7, #12]
 801370a:	f000 f845 	bl	8013798 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801370e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013710:	4618      	mov	r0, r3
 8013712:	3730      	adds	r7, #48	; 0x30
 8013714:	46bd      	mov	sp, r7
 8013716:	bd80      	pop	{r7, pc}

08013718 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013718:	b580      	push	{r7, lr}
 801371a:	b08a      	sub	sp, #40	; 0x28
 801371c:	af02      	add	r7, sp, #8
 801371e:	60f8      	str	r0, [r7, #12]
 8013720:	60b9      	str	r1, [r7, #8]
 8013722:	4613      	mov	r3, r2
 8013724:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d10a      	bne.n	8013742 <xQueueGenericCreate+0x2a>
	__asm volatile
 801372c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013730:	f383 8811 	msr	BASEPRI, r3
 8013734:	f3bf 8f6f 	isb	sy
 8013738:	f3bf 8f4f 	dsb	sy
 801373c:	613b      	str	r3, [r7, #16]
}
 801373e:	bf00      	nop
 8013740:	e7fe      	b.n	8013740 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8013742:	68bb      	ldr	r3, [r7, #8]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d102      	bne.n	801374e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8013748:	2300      	movs	r3, #0
 801374a:	61fb      	str	r3, [r7, #28]
 801374c:	e004      	b.n	8013758 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	68ba      	ldr	r2, [r7, #8]
 8013752:	fb02 f303 	mul.w	r3, r2, r3
 8013756:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013758:	69fb      	ldr	r3, [r7, #28]
 801375a:	3348      	adds	r3, #72	; 0x48
 801375c:	4618      	mov	r0, r3
 801375e:	f001 ff93 	bl	8015688 <pvPortMalloc>
 8013762:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013764:	69bb      	ldr	r3, [r7, #24]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d011      	beq.n	801378e <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801376a:	69bb      	ldr	r3, [r7, #24]
 801376c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801376e:	697b      	ldr	r3, [r7, #20]
 8013770:	3348      	adds	r3, #72	; 0x48
 8013772:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013774:	69bb      	ldr	r3, [r7, #24]
 8013776:	2200      	movs	r2, #0
 8013778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801377c:	79fa      	ldrb	r2, [r7, #7]
 801377e:	69bb      	ldr	r3, [r7, #24]
 8013780:	9300      	str	r3, [sp, #0]
 8013782:	4613      	mov	r3, r2
 8013784:	697a      	ldr	r2, [r7, #20]
 8013786:	68b9      	ldr	r1, [r7, #8]
 8013788:	68f8      	ldr	r0, [r7, #12]
 801378a:	f000 f805 	bl	8013798 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801378e:	69bb      	ldr	r3, [r7, #24]
	}
 8013790:	4618      	mov	r0, r3
 8013792:	3720      	adds	r7, #32
 8013794:	46bd      	mov	sp, r7
 8013796:	bd80      	pop	{r7, pc}

08013798 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013798:	b580      	push	{r7, lr}
 801379a:	b084      	sub	sp, #16
 801379c:	af00      	add	r7, sp, #0
 801379e:	60f8      	str	r0, [r7, #12]
 80137a0:	60b9      	str	r1, [r7, #8]
 80137a2:	607a      	str	r2, [r7, #4]
 80137a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80137a6:	68bb      	ldr	r3, [r7, #8]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d103      	bne.n	80137b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80137ac:	69bb      	ldr	r3, [r7, #24]
 80137ae:	69ba      	ldr	r2, [r7, #24]
 80137b0:	601a      	str	r2, [r3, #0]
 80137b2:	e002      	b.n	80137ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80137b4:	69bb      	ldr	r3, [r7, #24]
 80137b6:	687a      	ldr	r2, [r7, #4]
 80137b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80137ba:	69bb      	ldr	r3, [r7, #24]
 80137bc:	68fa      	ldr	r2, [r7, #12]
 80137be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80137c0:	69bb      	ldr	r3, [r7, #24]
 80137c2:	68ba      	ldr	r2, [r7, #8]
 80137c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80137c6:	2101      	movs	r1, #1
 80137c8:	69b8      	ldr	r0, [r7, #24]
 80137ca:	f7ff fec5 	bl	8013558 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80137ce:	bf00      	nop
 80137d0:	3710      	adds	r7, #16
 80137d2:	46bd      	mov	sp, r7
 80137d4:	bd80      	pop	{r7, pc}

080137d6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80137d6:	b580      	push	{r7, lr}
 80137d8:	b082      	sub	sp, #8
 80137da:	af00      	add	r7, sp, #0
 80137dc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d00e      	beq.n	8013802 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	2200      	movs	r2, #0
 80137e8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	2200      	movs	r2, #0
 80137ee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	2200      	movs	r2, #0
 80137f4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80137f6:	2300      	movs	r3, #0
 80137f8:	2200      	movs	r2, #0
 80137fa:	2100      	movs	r1, #0
 80137fc:	6878      	ldr	r0, [r7, #4]
 80137fe:	f000 f837 	bl	8013870 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8013802:	bf00      	nop
 8013804:	3708      	adds	r7, #8
 8013806:	46bd      	mov	sp, r7
 8013808:	bd80      	pop	{r7, pc}

0801380a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801380a:	b580      	push	{r7, lr}
 801380c:	b086      	sub	sp, #24
 801380e:	af00      	add	r7, sp, #0
 8013810:	4603      	mov	r3, r0
 8013812:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013814:	2301      	movs	r3, #1
 8013816:	617b      	str	r3, [r7, #20]
 8013818:	2300      	movs	r3, #0
 801381a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801381c:	79fb      	ldrb	r3, [r7, #7]
 801381e:	461a      	mov	r2, r3
 8013820:	6939      	ldr	r1, [r7, #16]
 8013822:	6978      	ldr	r0, [r7, #20]
 8013824:	f7ff ff78 	bl	8013718 <xQueueGenericCreate>
 8013828:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801382a:	68f8      	ldr	r0, [r7, #12]
 801382c:	f7ff ffd3 	bl	80137d6 <prvInitialiseMutex>

		return xNewQueue;
 8013830:	68fb      	ldr	r3, [r7, #12]
	}
 8013832:	4618      	mov	r0, r3
 8013834:	3718      	adds	r7, #24
 8013836:	46bd      	mov	sp, r7
 8013838:	bd80      	pop	{r7, pc}

0801383a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801383a:	b580      	push	{r7, lr}
 801383c:	b088      	sub	sp, #32
 801383e:	af02      	add	r7, sp, #8
 8013840:	4603      	mov	r3, r0
 8013842:	6039      	str	r1, [r7, #0]
 8013844:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013846:	2301      	movs	r3, #1
 8013848:	617b      	str	r3, [r7, #20]
 801384a:	2300      	movs	r3, #0
 801384c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801384e:	79fb      	ldrb	r3, [r7, #7]
 8013850:	9300      	str	r3, [sp, #0]
 8013852:	683b      	ldr	r3, [r7, #0]
 8013854:	2200      	movs	r2, #0
 8013856:	6939      	ldr	r1, [r7, #16]
 8013858:	6978      	ldr	r0, [r7, #20]
 801385a:	f7ff fee5 	bl	8013628 <xQueueGenericCreateStatic>
 801385e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013860:	68f8      	ldr	r0, [r7, #12]
 8013862:	f7ff ffb8 	bl	80137d6 <prvInitialiseMutex>

		return xNewQueue;
 8013866:	68fb      	ldr	r3, [r7, #12]
	}
 8013868:	4618      	mov	r0, r3
 801386a:	3718      	adds	r7, #24
 801386c:	46bd      	mov	sp, r7
 801386e:	bd80      	pop	{r7, pc}

08013870 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b08e      	sub	sp, #56	; 0x38
 8013874:	af00      	add	r7, sp, #0
 8013876:	60f8      	str	r0, [r7, #12]
 8013878:	60b9      	str	r1, [r7, #8]
 801387a:	607a      	str	r2, [r7, #4]
 801387c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801387e:	2300      	movs	r3, #0
 8013880:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013888:	2b00      	cmp	r3, #0
 801388a:	d10a      	bne.n	80138a2 <xQueueGenericSend+0x32>
	__asm volatile
 801388c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013890:	f383 8811 	msr	BASEPRI, r3
 8013894:	f3bf 8f6f 	isb	sy
 8013898:	f3bf 8f4f 	dsb	sy
 801389c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801389e:	bf00      	nop
 80138a0:	e7fe      	b.n	80138a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80138a2:	68bb      	ldr	r3, [r7, #8]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d103      	bne.n	80138b0 <xQueueGenericSend+0x40>
 80138a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d101      	bne.n	80138b4 <xQueueGenericSend+0x44>
 80138b0:	2301      	movs	r3, #1
 80138b2:	e000      	b.n	80138b6 <xQueueGenericSend+0x46>
 80138b4:	2300      	movs	r3, #0
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d10a      	bne.n	80138d0 <xQueueGenericSend+0x60>
	__asm volatile
 80138ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138be:	f383 8811 	msr	BASEPRI, r3
 80138c2:	f3bf 8f6f 	isb	sy
 80138c6:	f3bf 8f4f 	dsb	sy
 80138ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80138cc:	bf00      	nop
 80138ce:	e7fe      	b.n	80138ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80138d0:	683b      	ldr	r3, [r7, #0]
 80138d2:	2b02      	cmp	r3, #2
 80138d4:	d103      	bne.n	80138de <xQueueGenericSend+0x6e>
 80138d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80138da:	2b01      	cmp	r3, #1
 80138dc:	d101      	bne.n	80138e2 <xQueueGenericSend+0x72>
 80138de:	2301      	movs	r3, #1
 80138e0:	e000      	b.n	80138e4 <xQueueGenericSend+0x74>
 80138e2:	2300      	movs	r3, #0
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d10a      	bne.n	80138fe <xQueueGenericSend+0x8e>
	__asm volatile
 80138e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138ec:	f383 8811 	msr	BASEPRI, r3
 80138f0:	f3bf 8f6f 	isb	sy
 80138f4:	f3bf 8f4f 	dsb	sy
 80138f8:	623b      	str	r3, [r7, #32]
}
 80138fa:	bf00      	nop
 80138fc:	e7fe      	b.n	80138fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80138fe:	f001 f983 	bl	8014c08 <xTaskGetSchedulerState>
 8013902:	4603      	mov	r3, r0
 8013904:	2b00      	cmp	r3, #0
 8013906:	d102      	bne.n	801390e <xQueueGenericSend+0x9e>
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d101      	bne.n	8013912 <xQueueGenericSend+0xa2>
 801390e:	2301      	movs	r3, #1
 8013910:	e000      	b.n	8013914 <xQueueGenericSend+0xa4>
 8013912:	2300      	movs	r3, #0
 8013914:	2b00      	cmp	r3, #0
 8013916:	d10a      	bne.n	801392e <xQueueGenericSend+0xbe>
	__asm volatile
 8013918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801391c:	f383 8811 	msr	BASEPRI, r3
 8013920:	f3bf 8f6f 	isb	sy
 8013924:	f3bf 8f4f 	dsb	sy
 8013928:	61fb      	str	r3, [r7, #28]
}
 801392a:	bf00      	nop
 801392c:	e7fe      	b.n	801392c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801392e:	f001 fd89 	bl	8015444 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801393a:	429a      	cmp	r2, r3
 801393c:	d302      	bcc.n	8013944 <xQueueGenericSend+0xd4>
 801393e:	683b      	ldr	r3, [r7, #0]
 8013940:	2b02      	cmp	r3, #2
 8013942:	d129      	bne.n	8013998 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013944:	683a      	ldr	r2, [r7, #0]
 8013946:	68b9      	ldr	r1, [r7, #8]
 8013948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801394a:	f000 fa87 	bl	8013e5c <prvCopyDataToQueue>
 801394e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013954:	2b00      	cmp	r3, #0
 8013956:	d010      	beq.n	801397a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801395a:	3324      	adds	r3, #36	; 0x24
 801395c:	4618      	mov	r0, r3
 801395e:	f000 ff97 	bl	8014890 <xTaskRemoveFromEventList>
 8013962:	4603      	mov	r3, r0
 8013964:	2b00      	cmp	r3, #0
 8013966:	d013      	beq.n	8013990 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013968:	4b3f      	ldr	r3, [pc, #252]	; (8013a68 <xQueueGenericSend+0x1f8>)
 801396a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801396e:	601a      	str	r2, [r3, #0]
 8013970:	f3bf 8f4f 	dsb	sy
 8013974:	f3bf 8f6f 	isb	sy
 8013978:	e00a      	b.n	8013990 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801397a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801397c:	2b00      	cmp	r3, #0
 801397e:	d007      	beq.n	8013990 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013980:	4b39      	ldr	r3, [pc, #228]	; (8013a68 <xQueueGenericSend+0x1f8>)
 8013982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013986:	601a      	str	r2, [r3, #0]
 8013988:	f3bf 8f4f 	dsb	sy
 801398c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013990:	f001 fd88 	bl	80154a4 <vPortExitCritical>
				return pdPASS;
 8013994:	2301      	movs	r3, #1
 8013996:	e063      	b.n	8013a60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d103      	bne.n	80139a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801399e:	f001 fd81 	bl	80154a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80139a2:	2300      	movs	r3, #0
 80139a4:	e05c      	b.n	8013a60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80139a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d106      	bne.n	80139ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80139ac:	f107 0314 	add.w	r3, r7, #20
 80139b0:	4618      	mov	r0, r3
 80139b2:	f000 ffcf 	bl	8014954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80139b6:	2301      	movs	r3, #1
 80139b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80139ba:	f001 fd73 	bl	80154a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80139be:	f000 fd85 	bl	80144cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80139c2:	f001 fd3f 	bl	8015444 <vPortEnterCritical>
 80139c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80139cc:	b25b      	sxtb	r3, r3
 80139ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139d2:	d103      	bne.n	80139dc <xQueueGenericSend+0x16c>
 80139d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139d6:	2200      	movs	r2, #0
 80139d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80139dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80139e2:	b25b      	sxtb	r3, r3
 80139e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139e8:	d103      	bne.n	80139f2 <xQueueGenericSend+0x182>
 80139ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139ec:	2200      	movs	r2, #0
 80139ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80139f2:	f001 fd57 	bl	80154a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80139f6:	1d3a      	adds	r2, r7, #4
 80139f8:	f107 0314 	add.w	r3, r7, #20
 80139fc:	4611      	mov	r1, r2
 80139fe:	4618      	mov	r0, r3
 8013a00:	f000 ffbe 	bl	8014980 <xTaskCheckForTimeOut>
 8013a04:	4603      	mov	r3, r0
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d124      	bne.n	8013a54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013a0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a0c:	f000 fb1e 	bl	801404c <prvIsQueueFull>
 8013a10:	4603      	mov	r3, r0
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d018      	beq.n	8013a48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a18:	3310      	adds	r3, #16
 8013a1a:	687a      	ldr	r2, [r7, #4]
 8013a1c:	4611      	mov	r1, r2
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f000 ff12 	bl	8014848 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013a24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a26:	f000 faa9 	bl	8013f7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013a2a:	f000 fd5d 	bl	80144e8 <xTaskResumeAll>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	f47f af7c 	bne.w	801392e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013a36:	4b0c      	ldr	r3, [pc, #48]	; (8013a68 <xQueueGenericSend+0x1f8>)
 8013a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a3c:	601a      	str	r2, [r3, #0]
 8013a3e:	f3bf 8f4f 	dsb	sy
 8013a42:	f3bf 8f6f 	isb	sy
 8013a46:	e772      	b.n	801392e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013a48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a4a:	f000 fa97 	bl	8013f7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013a4e:	f000 fd4b 	bl	80144e8 <xTaskResumeAll>
 8013a52:	e76c      	b.n	801392e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a56:	f000 fa91 	bl	8013f7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013a5a:	f000 fd45 	bl	80144e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013a5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013a60:	4618      	mov	r0, r3
 8013a62:	3738      	adds	r7, #56	; 0x38
 8013a64:	46bd      	mov	sp, r7
 8013a66:	bd80      	pop	{r7, pc}
 8013a68:	e000ed04 	.word	0xe000ed04

08013a6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b08e      	sub	sp, #56	; 0x38
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	60f8      	str	r0, [r7, #12]
 8013a74:	60b9      	str	r1, [r7, #8]
 8013a76:	607a      	str	r2, [r7, #4]
 8013a78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d10a      	bne.n	8013a9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a88:	f383 8811 	msr	BASEPRI, r3
 8013a8c:	f3bf 8f6f 	isb	sy
 8013a90:	f3bf 8f4f 	dsb	sy
 8013a94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013a96:	bf00      	nop
 8013a98:	e7fe      	b.n	8013a98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013a9a:	68bb      	ldr	r3, [r7, #8]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d103      	bne.n	8013aa8 <xQueueGenericSendFromISR+0x3c>
 8013aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d101      	bne.n	8013aac <xQueueGenericSendFromISR+0x40>
 8013aa8:	2301      	movs	r3, #1
 8013aaa:	e000      	b.n	8013aae <xQueueGenericSendFromISR+0x42>
 8013aac:	2300      	movs	r3, #0
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d10a      	bne.n	8013ac8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ab6:	f383 8811 	msr	BASEPRI, r3
 8013aba:	f3bf 8f6f 	isb	sy
 8013abe:	f3bf 8f4f 	dsb	sy
 8013ac2:	623b      	str	r3, [r7, #32]
}
 8013ac4:	bf00      	nop
 8013ac6:	e7fe      	b.n	8013ac6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013ac8:	683b      	ldr	r3, [r7, #0]
 8013aca:	2b02      	cmp	r3, #2
 8013acc:	d103      	bne.n	8013ad6 <xQueueGenericSendFromISR+0x6a>
 8013ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ad2:	2b01      	cmp	r3, #1
 8013ad4:	d101      	bne.n	8013ada <xQueueGenericSendFromISR+0x6e>
 8013ad6:	2301      	movs	r3, #1
 8013ad8:	e000      	b.n	8013adc <xQueueGenericSendFromISR+0x70>
 8013ada:	2300      	movs	r3, #0
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d10a      	bne.n	8013af6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ae4:	f383 8811 	msr	BASEPRI, r3
 8013ae8:	f3bf 8f6f 	isb	sy
 8013aec:	f3bf 8f4f 	dsb	sy
 8013af0:	61fb      	str	r3, [r7, #28]
}
 8013af2:	bf00      	nop
 8013af4:	e7fe      	b.n	8013af4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013af6:	f001 fd87 	bl	8015608 <vPortValidateInterruptPriority>
	__asm volatile
 8013afa:	f3ef 8211 	mrs	r2, BASEPRI
 8013afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b02:	f383 8811 	msr	BASEPRI, r3
 8013b06:	f3bf 8f6f 	isb	sy
 8013b0a:	f3bf 8f4f 	dsb	sy
 8013b0e:	61ba      	str	r2, [r7, #24]
 8013b10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013b12:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013b14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b1e:	429a      	cmp	r2, r3
 8013b20:	d302      	bcc.n	8013b28 <xQueueGenericSendFromISR+0xbc>
 8013b22:	683b      	ldr	r3, [r7, #0]
 8013b24:	2b02      	cmp	r3, #2
 8013b26:	d12c      	bne.n	8013b82 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013b32:	683a      	ldr	r2, [r7, #0]
 8013b34:	68b9      	ldr	r1, [r7, #8]
 8013b36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013b38:	f000 f990 	bl	8013e5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013b3c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b44:	d112      	bne.n	8013b6c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d016      	beq.n	8013b7c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b50:	3324      	adds	r3, #36	; 0x24
 8013b52:	4618      	mov	r0, r3
 8013b54:	f000 fe9c 	bl	8014890 <xTaskRemoveFromEventList>
 8013b58:	4603      	mov	r3, r0
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d00e      	beq.n	8013b7c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d00b      	beq.n	8013b7c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	2201      	movs	r2, #1
 8013b68:	601a      	str	r2, [r3, #0]
 8013b6a:	e007      	b.n	8013b7c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013b6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013b70:	3301      	adds	r3, #1
 8013b72:	b2db      	uxtb	r3, r3
 8013b74:	b25a      	sxtb	r2, r3
 8013b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013b7c:	2301      	movs	r3, #1
 8013b7e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8013b80:	e001      	b.n	8013b86 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013b82:	2300      	movs	r3, #0
 8013b84:	637b      	str	r3, [r7, #52]	; 0x34
 8013b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b88:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013b8a:	693b      	ldr	r3, [r7, #16]
 8013b8c:	f383 8811 	msr	BASEPRI, r3
}
 8013b90:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013b94:	4618      	mov	r0, r3
 8013b96:	3738      	adds	r7, #56	; 0x38
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	bd80      	pop	{r7, pc}

08013b9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b08c      	sub	sp, #48	; 0x30
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	60f8      	str	r0, [r7, #12]
 8013ba4:	60b9      	str	r1, [r7, #8]
 8013ba6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013ba8:	2300      	movs	r3, #0
 8013baa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d10a      	bne.n	8013bcc <xQueueReceive+0x30>
	__asm volatile
 8013bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bba:	f383 8811 	msr	BASEPRI, r3
 8013bbe:	f3bf 8f6f 	isb	sy
 8013bc2:	f3bf 8f4f 	dsb	sy
 8013bc6:	623b      	str	r3, [r7, #32]
}
 8013bc8:	bf00      	nop
 8013bca:	e7fe      	b.n	8013bca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013bcc:	68bb      	ldr	r3, [r7, #8]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d103      	bne.n	8013bda <xQueueReceive+0x3e>
 8013bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d101      	bne.n	8013bde <xQueueReceive+0x42>
 8013bda:	2301      	movs	r3, #1
 8013bdc:	e000      	b.n	8013be0 <xQueueReceive+0x44>
 8013bde:	2300      	movs	r3, #0
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d10a      	bne.n	8013bfa <xQueueReceive+0x5e>
	__asm volatile
 8013be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013be8:	f383 8811 	msr	BASEPRI, r3
 8013bec:	f3bf 8f6f 	isb	sy
 8013bf0:	f3bf 8f4f 	dsb	sy
 8013bf4:	61fb      	str	r3, [r7, #28]
}
 8013bf6:	bf00      	nop
 8013bf8:	e7fe      	b.n	8013bf8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013bfa:	f001 f805 	bl	8014c08 <xTaskGetSchedulerState>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d102      	bne.n	8013c0a <xQueueReceive+0x6e>
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d101      	bne.n	8013c0e <xQueueReceive+0x72>
 8013c0a:	2301      	movs	r3, #1
 8013c0c:	e000      	b.n	8013c10 <xQueueReceive+0x74>
 8013c0e:	2300      	movs	r3, #0
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d10a      	bne.n	8013c2a <xQueueReceive+0x8e>
	__asm volatile
 8013c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c18:	f383 8811 	msr	BASEPRI, r3
 8013c1c:	f3bf 8f6f 	isb	sy
 8013c20:	f3bf 8f4f 	dsb	sy
 8013c24:	61bb      	str	r3, [r7, #24]
}
 8013c26:	bf00      	nop
 8013c28:	e7fe      	b.n	8013c28 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013c2a:	f001 fc0b 	bl	8015444 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d01f      	beq.n	8013c7a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013c3a:	68b9      	ldr	r1, [r7, #8]
 8013c3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c3e:	f000 f977 	bl	8013f30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c44:	1e5a      	subs	r2, r3, #1
 8013c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c4c:	691b      	ldr	r3, [r3, #16]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d00f      	beq.n	8013c72 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c54:	3310      	adds	r3, #16
 8013c56:	4618      	mov	r0, r3
 8013c58:	f000 fe1a 	bl	8014890 <xTaskRemoveFromEventList>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d007      	beq.n	8013c72 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013c62:	4b3d      	ldr	r3, [pc, #244]	; (8013d58 <xQueueReceive+0x1bc>)
 8013c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c68:	601a      	str	r2, [r3, #0]
 8013c6a:	f3bf 8f4f 	dsb	sy
 8013c6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013c72:	f001 fc17 	bl	80154a4 <vPortExitCritical>
				return pdPASS;
 8013c76:	2301      	movs	r3, #1
 8013c78:	e069      	b.n	8013d4e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d103      	bne.n	8013c88 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013c80:	f001 fc10 	bl	80154a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013c84:	2300      	movs	r3, #0
 8013c86:	e062      	b.n	8013d4e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d106      	bne.n	8013c9c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013c8e:	f107 0310 	add.w	r3, r7, #16
 8013c92:	4618      	mov	r0, r3
 8013c94:	f000 fe5e 	bl	8014954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013c98:	2301      	movs	r3, #1
 8013c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013c9c:	f001 fc02 	bl	80154a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013ca0:	f000 fc14 	bl	80144cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013ca4:	f001 fbce 	bl	8015444 <vPortEnterCritical>
 8013ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013caa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013cae:	b25b      	sxtb	r3, r3
 8013cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cb4:	d103      	bne.n	8013cbe <xQueueReceive+0x122>
 8013cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cb8:	2200      	movs	r2, #0
 8013cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013cc4:	b25b      	sxtb	r3, r3
 8013cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cca:	d103      	bne.n	8013cd4 <xQueueReceive+0x138>
 8013ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cce:	2200      	movs	r2, #0
 8013cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013cd4:	f001 fbe6 	bl	80154a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013cd8:	1d3a      	adds	r2, r7, #4
 8013cda:	f107 0310 	add.w	r3, r7, #16
 8013cde:	4611      	mov	r1, r2
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f000 fe4d 	bl	8014980 <xTaskCheckForTimeOut>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d123      	bne.n	8013d34 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013cec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cee:	f000 f997 	bl	8014020 <prvIsQueueEmpty>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d017      	beq.n	8013d28 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cfa:	3324      	adds	r3, #36	; 0x24
 8013cfc:	687a      	ldr	r2, [r7, #4]
 8013cfe:	4611      	mov	r1, r2
 8013d00:	4618      	mov	r0, r3
 8013d02:	f000 fda1 	bl	8014848 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013d06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d08:	f000 f938 	bl	8013f7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013d0c:	f000 fbec 	bl	80144e8 <xTaskResumeAll>
 8013d10:	4603      	mov	r3, r0
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d189      	bne.n	8013c2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013d16:	4b10      	ldr	r3, [pc, #64]	; (8013d58 <xQueueReceive+0x1bc>)
 8013d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d1c:	601a      	str	r2, [r3, #0]
 8013d1e:	f3bf 8f4f 	dsb	sy
 8013d22:	f3bf 8f6f 	isb	sy
 8013d26:	e780      	b.n	8013c2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d2a:	f000 f927 	bl	8013f7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013d2e:	f000 fbdb 	bl	80144e8 <xTaskResumeAll>
 8013d32:	e77a      	b.n	8013c2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d36:	f000 f921 	bl	8013f7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013d3a:	f000 fbd5 	bl	80144e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d40:	f000 f96e 	bl	8014020 <prvIsQueueEmpty>
 8013d44:	4603      	mov	r3, r0
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	f43f af6f 	beq.w	8013c2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013d4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013d4e:	4618      	mov	r0, r3
 8013d50:	3730      	adds	r7, #48	; 0x30
 8013d52:	46bd      	mov	sp, r7
 8013d54:	bd80      	pop	{r7, pc}
 8013d56:	bf00      	nop
 8013d58:	e000ed04 	.word	0xe000ed04

08013d5c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	b08e      	sub	sp, #56	; 0x38
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	60f8      	str	r0, [r7, #12]
 8013d64:	60b9      	str	r1, [r7, #8]
 8013d66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d10a      	bne.n	8013d88 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d76:	f383 8811 	msr	BASEPRI, r3
 8013d7a:	f3bf 8f6f 	isb	sy
 8013d7e:	f3bf 8f4f 	dsb	sy
 8013d82:	623b      	str	r3, [r7, #32]
}
 8013d84:	bf00      	nop
 8013d86:	e7fe      	b.n	8013d86 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013d88:	68bb      	ldr	r3, [r7, #8]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d103      	bne.n	8013d96 <xQueueReceiveFromISR+0x3a>
 8013d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d101      	bne.n	8013d9a <xQueueReceiveFromISR+0x3e>
 8013d96:	2301      	movs	r3, #1
 8013d98:	e000      	b.n	8013d9c <xQueueReceiveFromISR+0x40>
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d10a      	bne.n	8013db6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013da4:	f383 8811 	msr	BASEPRI, r3
 8013da8:	f3bf 8f6f 	isb	sy
 8013dac:	f3bf 8f4f 	dsb	sy
 8013db0:	61fb      	str	r3, [r7, #28]
}
 8013db2:	bf00      	nop
 8013db4:	e7fe      	b.n	8013db4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013db6:	f001 fc27 	bl	8015608 <vPortValidateInterruptPriority>
	__asm volatile
 8013dba:	f3ef 8211 	mrs	r2, BASEPRI
 8013dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dc2:	f383 8811 	msr	BASEPRI, r3
 8013dc6:	f3bf 8f6f 	isb	sy
 8013dca:	f3bf 8f4f 	dsb	sy
 8013dce:	61ba      	str	r2, [r7, #24]
 8013dd0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013dd2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013dda:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d02f      	beq.n	8013e42 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013de4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013dec:	68b9      	ldr	r1, [r7, #8]
 8013dee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013df0:	f000 f89e 	bl	8013f30 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013df6:	1e5a      	subs	r2, r3, #1
 8013df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dfa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013dfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e04:	d112      	bne.n	8013e2c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e08:	691b      	ldr	r3, [r3, #16]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d016      	beq.n	8013e3c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e10:	3310      	adds	r3, #16
 8013e12:	4618      	mov	r0, r3
 8013e14:	f000 fd3c 	bl	8014890 <xTaskRemoveFromEventList>
 8013e18:	4603      	mov	r3, r0
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d00e      	beq.n	8013e3c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d00b      	beq.n	8013e3c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	2201      	movs	r2, #1
 8013e28:	601a      	str	r2, [r3, #0]
 8013e2a:	e007      	b.n	8013e3c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e30:	3301      	adds	r3, #1
 8013e32:	b2db      	uxtb	r3, r3
 8013e34:	b25a      	sxtb	r2, r3
 8013e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013e3c:	2301      	movs	r3, #1
 8013e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8013e40:	e001      	b.n	8013e46 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013e42:	2300      	movs	r3, #0
 8013e44:	637b      	str	r3, [r7, #52]	; 0x34
 8013e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e48:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013e4a:	693b      	ldr	r3, [r7, #16]
 8013e4c:	f383 8811 	msr	BASEPRI, r3
}
 8013e50:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013e54:	4618      	mov	r0, r3
 8013e56:	3738      	adds	r7, #56	; 0x38
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	bd80      	pop	{r7, pc}

08013e5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b086      	sub	sp, #24
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	60f8      	str	r0, [r7, #12]
 8013e64:	60b9      	str	r1, [r7, #8]
 8013e66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013e68:	2300      	movs	r3, #0
 8013e6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d10d      	bne.n	8013e96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d14d      	bne.n	8013f1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	689b      	ldr	r3, [r3, #8]
 8013e86:	4618      	mov	r0, r3
 8013e88:	f000 fedc 	bl	8014c44 <xTaskPriorityDisinherit>
 8013e8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	2200      	movs	r2, #0
 8013e92:	609a      	str	r2, [r3, #8]
 8013e94:	e043      	b.n	8013f1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d119      	bne.n	8013ed0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	6858      	ldr	r0, [r3, #4]
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ea4:	461a      	mov	r2, r3
 8013ea6:	68b9      	ldr	r1, [r7, #8]
 8013ea8:	f002 fb52 	bl	8016550 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	685a      	ldr	r2, [r3, #4]
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013eb4:	441a      	add	r2, r3
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	685a      	ldr	r2, [r3, #4]
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	689b      	ldr	r3, [r3, #8]
 8013ec2:	429a      	cmp	r2, r3
 8013ec4:	d32b      	bcc.n	8013f1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	681a      	ldr	r2, [r3, #0]
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	605a      	str	r2, [r3, #4]
 8013ece:	e026      	b.n	8013f1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	68d8      	ldr	r0, [r3, #12]
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ed8:	461a      	mov	r2, r3
 8013eda:	68b9      	ldr	r1, [r7, #8]
 8013edc:	f002 fb38 	bl	8016550 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	68da      	ldr	r2, [r3, #12]
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ee8:	425b      	negs	r3, r3
 8013eea:	441a      	add	r2, r3
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	68da      	ldr	r2, [r3, #12]
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	429a      	cmp	r2, r3
 8013efa:	d207      	bcs.n	8013f0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	689a      	ldr	r2, [r3, #8]
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f04:	425b      	negs	r3, r3
 8013f06:	441a      	add	r2, r3
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	2b02      	cmp	r3, #2
 8013f10:	d105      	bne.n	8013f1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013f12:	693b      	ldr	r3, [r7, #16]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d002      	beq.n	8013f1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013f18:	693b      	ldr	r3, [r7, #16]
 8013f1a:	3b01      	subs	r3, #1
 8013f1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013f1e:	693b      	ldr	r3, [r7, #16]
 8013f20:	1c5a      	adds	r2, r3, #1
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013f26:	697b      	ldr	r3, [r7, #20]
}
 8013f28:	4618      	mov	r0, r3
 8013f2a:	3718      	adds	r7, #24
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bd80      	pop	{r7, pc}

08013f30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b082      	sub	sp, #8
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
 8013f38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d018      	beq.n	8013f74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	68da      	ldr	r2, [r3, #12]
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f4a:	441a      	add	r2, r3
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	68da      	ldr	r2, [r3, #12]
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	689b      	ldr	r3, [r3, #8]
 8013f58:	429a      	cmp	r2, r3
 8013f5a:	d303      	bcc.n	8013f64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	681a      	ldr	r2, [r3, #0]
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	68d9      	ldr	r1, [r3, #12]
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f6c:	461a      	mov	r2, r3
 8013f6e:	6838      	ldr	r0, [r7, #0]
 8013f70:	f002 faee 	bl	8016550 <memcpy>
	}
}
 8013f74:	bf00      	nop
 8013f76:	3708      	adds	r7, #8
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	bd80      	pop	{r7, pc}

08013f7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b084      	sub	sp, #16
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013f84:	f001 fa5e 	bl	8015444 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013f8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013f90:	e011      	b.n	8013fb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d012      	beq.n	8013fc0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	3324      	adds	r3, #36	; 0x24
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	f000 fc76 	bl	8014890 <xTaskRemoveFromEventList>
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d001      	beq.n	8013fae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013faa:	f000 fd4b 	bl	8014a44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013fae:	7bfb      	ldrb	r3, [r7, #15]
 8013fb0:	3b01      	subs	r3, #1
 8013fb2:	b2db      	uxtb	r3, r3
 8013fb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	dce9      	bgt.n	8013f92 <prvUnlockQueue+0x16>
 8013fbe:	e000      	b.n	8013fc2 <prvUnlockQueue+0x46>
					break;
 8013fc0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	22ff      	movs	r2, #255	; 0xff
 8013fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013fca:	f001 fa6b 	bl	80154a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013fce:	f001 fa39 	bl	8015444 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013fd8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013fda:	e011      	b.n	8014000 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	691b      	ldr	r3, [r3, #16]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d012      	beq.n	801400a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	3310      	adds	r3, #16
 8013fe8:	4618      	mov	r0, r3
 8013fea:	f000 fc51 	bl	8014890 <xTaskRemoveFromEventList>
 8013fee:	4603      	mov	r3, r0
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d001      	beq.n	8013ff8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013ff4:	f000 fd26 	bl	8014a44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013ff8:	7bbb      	ldrb	r3, [r7, #14]
 8013ffa:	3b01      	subs	r3, #1
 8013ffc:	b2db      	uxtb	r3, r3
 8013ffe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014004:	2b00      	cmp	r3, #0
 8014006:	dce9      	bgt.n	8013fdc <prvUnlockQueue+0x60>
 8014008:	e000      	b.n	801400c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801400a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	22ff      	movs	r2, #255	; 0xff
 8014010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014014:	f001 fa46 	bl	80154a4 <vPortExitCritical>
}
 8014018:	bf00      	nop
 801401a:	3710      	adds	r7, #16
 801401c:	46bd      	mov	sp, r7
 801401e:	bd80      	pop	{r7, pc}

08014020 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014020:	b580      	push	{r7, lr}
 8014022:	b084      	sub	sp, #16
 8014024:	af00      	add	r7, sp, #0
 8014026:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014028:	f001 fa0c 	bl	8015444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014030:	2b00      	cmp	r3, #0
 8014032:	d102      	bne.n	801403a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014034:	2301      	movs	r3, #1
 8014036:	60fb      	str	r3, [r7, #12]
 8014038:	e001      	b.n	801403e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801403a:	2300      	movs	r3, #0
 801403c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801403e:	f001 fa31 	bl	80154a4 <vPortExitCritical>

	return xReturn;
 8014042:	68fb      	ldr	r3, [r7, #12]
}
 8014044:	4618      	mov	r0, r3
 8014046:	3710      	adds	r7, #16
 8014048:	46bd      	mov	sp, r7
 801404a:	bd80      	pop	{r7, pc}

0801404c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801404c:	b580      	push	{r7, lr}
 801404e:	b084      	sub	sp, #16
 8014050:	af00      	add	r7, sp, #0
 8014052:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014054:	f001 f9f6 	bl	8015444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014060:	429a      	cmp	r2, r3
 8014062:	d102      	bne.n	801406a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014064:	2301      	movs	r3, #1
 8014066:	60fb      	str	r3, [r7, #12]
 8014068:	e001      	b.n	801406e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801406a:	2300      	movs	r3, #0
 801406c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801406e:	f001 fa19 	bl	80154a4 <vPortExitCritical>

	return xReturn;
 8014072:	68fb      	ldr	r3, [r7, #12]
}
 8014074:	4618      	mov	r0, r3
 8014076:	3710      	adds	r7, #16
 8014078:	46bd      	mov	sp, r7
 801407a:	bd80      	pop	{r7, pc}

0801407c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801407c:	b580      	push	{r7, lr}
 801407e:	b08e      	sub	sp, #56	; 0x38
 8014080:	af04      	add	r7, sp, #16
 8014082:	60f8      	str	r0, [r7, #12]
 8014084:	60b9      	str	r1, [r7, #8]
 8014086:	607a      	str	r2, [r7, #4]
 8014088:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801408a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801408c:	2b00      	cmp	r3, #0
 801408e:	d10a      	bne.n	80140a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8014090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014094:	f383 8811 	msr	BASEPRI, r3
 8014098:	f3bf 8f6f 	isb	sy
 801409c:	f3bf 8f4f 	dsb	sy
 80140a0:	623b      	str	r3, [r7, #32]
}
 80140a2:	bf00      	nop
 80140a4:	e7fe      	b.n	80140a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80140a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d10a      	bne.n	80140c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80140ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140b0:	f383 8811 	msr	BASEPRI, r3
 80140b4:	f3bf 8f6f 	isb	sy
 80140b8:	f3bf 8f4f 	dsb	sy
 80140bc:	61fb      	str	r3, [r7, #28]
}
 80140be:	bf00      	nop
 80140c0:	e7fe      	b.n	80140c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80140c2:	2354      	movs	r3, #84	; 0x54
 80140c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80140c6:	693b      	ldr	r3, [r7, #16]
 80140c8:	2b54      	cmp	r3, #84	; 0x54
 80140ca:	d00a      	beq.n	80140e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80140cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140d0:	f383 8811 	msr	BASEPRI, r3
 80140d4:	f3bf 8f6f 	isb	sy
 80140d8:	f3bf 8f4f 	dsb	sy
 80140dc:	61bb      	str	r3, [r7, #24]
}
 80140de:	bf00      	nop
 80140e0:	e7fe      	b.n	80140e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80140e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80140e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d01e      	beq.n	8014128 <xTaskCreateStatic+0xac>
 80140ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d01b      	beq.n	8014128 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80140f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80140f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80140f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80140fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140fc:	2202      	movs	r2, #2
 80140fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014102:	2300      	movs	r3, #0
 8014104:	9303      	str	r3, [sp, #12]
 8014106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014108:	9302      	str	r3, [sp, #8]
 801410a:	f107 0314 	add.w	r3, r7, #20
 801410e:	9301      	str	r3, [sp, #4]
 8014110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014112:	9300      	str	r3, [sp, #0]
 8014114:	683b      	ldr	r3, [r7, #0]
 8014116:	687a      	ldr	r2, [r7, #4]
 8014118:	68b9      	ldr	r1, [r7, #8]
 801411a:	68f8      	ldr	r0, [r7, #12]
 801411c:	f000 f850 	bl	80141c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014120:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014122:	f000 f8d5 	bl	80142d0 <prvAddNewTaskToReadyList>
 8014126:	e001      	b.n	801412c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014128:	2300      	movs	r3, #0
 801412a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801412c:	697b      	ldr	r3, [r7, #20]
	}
 801412e:	4618      	mov	r0, r3
 8014130:	3728      	adds	r7, #40	; 0x28
 8014132:	46bd      	mov	sp, r7
 8014134:	bd80      	pop	{r7, pc}

08014136 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014136:	b580      	push	{r7, lr}
 8014138:	b08c      	sub	sp, #48	; 0x30
 801413a:	af04      	add	r7, sp, #16
 801413c:	60f8      	str	r0, [r7, #12]
 801413e:	60b9      	str	r1, [r7, #8]
 8014140:	603b      	str	r3, [r7, #0]
 8014142:	4613      	mov	r3, r2
 8014144:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014146:	88fb      	ldrh	r3, [r7, #6]
 8014148:	009b      	lsls	r3, r3, #2
 801414a:	4618      	mov	r0, r3
 801414c:	f001 fa9c 	bl	8015688 <pvPortMalloc>
 8014150:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014152:	697b      	ldr	r3, [r7, #20]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d00e      	beq.n	8014176 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014158:	2054      	movs	r0, #84	; 0x54
 801415a:	f001 fa95 	bl	8015688 <pvPortMalloc>
 801415e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014160:	69fb      	ldr	r3, [r7, #28]
 8014162:	2b00      	cmp	r3, #0
 8014164:	d003      	beq.n	801416e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014166:	69fb      	ldr	r3, [r7, #28]
 8014168:	697a      	ldr	r2, [r7, #20]
 801416a:	631a      	str	r2, [r3, #48]	; 0x30
 801416c:	e005      	b.n	801417a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801416e:	6978      	ldr	r0, [r7, #20]
 8014170:	f001 fb4e 	bl	8015810 <vPortFree>
 8014174:	e001      	b.n	801417a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014176:	2300      	movs	r3, #0
 8014178:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801417a:	69fb      	ldr	r3, [r7, #28]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d017      	beq.n	80141b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014180:	69fb      	ldr	r3, [r7, #28]
 8014182:	2200      	movs	r2, #0
 8014184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014188:	88fa      	ldrh	r2, [r7, #6]
 801418a:	2300      	movs	r3, #0
 801418c:	9303      	str	r3, [sp, #12]
 801418e:	69fb      	ldr	r3, [r7, #28]
 8014190:	9302      	str	r3, [sp, #8]
 8014192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014194:	9301      	str	r3, [sp, #4]
 8014196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014198:	9300      	str	r3, [sp, #0]
 801419a:	683b      	ldr	r3, [r7, #0]
 801419c:	68b9      	ldr	r1, [r7, #8]
 801419e:	68f8      	ldr	r0, [r7, #12]
 80141a0:	f000 f80e 	bl	80141c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80141a4:	69f8      	ldr	r0, [r7, #28]
 80141a6:	f000 f893 	bl	80142d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80141aa:	2301      	movs	r3, #1
 80141ac:	61bb      	str	r3, [r7, #24]
 80141ae:	e002      	b.n	80141b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80141b0:	f04f 33ff 	mov.w	r3, #4294967295
 80141b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80141b6:	69bb      	ldr	r3, [r7, #24]
	}
 80141b8:	4618      	mov	r0, r3
 80141ba:	3720      	adds	r7, #32
 80141bc:	46bd      	mov	sp, r7
 80141be:	bd80      	pop	{r7, pc}

080141c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b088      	sub	sp, #32
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	60f8      	str	r0, [r7, #12]
 80141c8:	60b9      	str	r1, [r7, #8]
 80141ca:	607a      	str	r2, [r7, #4]
 80141cc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80141ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80141d8:	3b01      	subs	r3, #1
 80141da:	009b      	lsls	r3, r3, #2
 80141dc:	4413      	add	r3, r2
 80141de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80141e0:	69bb      	ldr	r3, [r7, #24]
 80141e2:	f023 0307 	bic.w	r3, r3, #7
 80141e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80141e8:	69bb      	ldr	r3, [r7, #24]
 80141ea:	f003 0307 	and.w	r3, r3, #7
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d00a      	beq.n	8014208 <prvInitialiseNewTask+0x48>
	__asm volatile
 80141f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141f6:	f383 8811 	msr	BASEPRI, r3
 80141fa:	f3bf 8f6f 	isb	sy
 80141fe:	f3bf 8f4f 	dsb	sy
 8014202:	617b      	str	r3, [r7, #20]
}
 8014204:	bf00      	nop
 8014206:	e7fe      	b.n	8014206 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d01f      	beq.n	801424e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801420e:	2300      	movs	r3, #0
 8014210:	61fb      	str	r3, [r7, #28]
 8014212:	e012      	b.n	801423a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014214:	68ba      	ldr	r2, [r7, #8]
 8014216:	69fb      	ldr	r3, [r7, #28]
 8014218:	4413      	add	r3, r2
 801421a:	7819      	ldrb	r1, [r3, #0]
 801421c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801421e:	69fb      	ldr	r3, [r7, #28]
 8014220:	4413      	add	r3, r2
 8014222:	3334      	adds	r3, #52	; 0x34
 8014224:	460a      	mov	r2, r1
 8014226:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014228:	68ba      	ldr	r2, [r7, #8]
 801422a:	69fb      	ldr	r3, [r7, #28]
 801422c:	4413      	add	r3, r2
 801422e:	781b      	ldrb	r3, [r3, #0]
 8014230:	2b00      	cmp	r3, #0
 8014232:	d006      	beq.n	8014242 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014234:	69fb      	ldr	r3, [r7, #28]
 8014236:	3301      	adds	r3, #1
 8014238:	61fb      	str	r3, [r7, #28]
 801423a:	69fb      	ldr	r3, [r7, #28]
 801423c:	2b0f      	cmp	r3, #15
 801423e:	d9e9      	bls.n	8014214 <prvInitialiseNewTask+0x54>
 8014240:	e000      	b.n	8014244 <prvInitialiseNewTask+0x84>
			{
				break;
 8014242:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014246:	2200      	movs	r2, #0
 8014248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801424c:	e003      	b.n	8014256 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014250:	2200      	movs	r2, #0
 8014252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014258:	2b06      	cmp	r3, #6
 801425a:	d901      	bls.n	8014260 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801425c:	2306      	movs	r3, #6
 801425e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014262:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014264:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014268:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801426a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801426e:	2200      	movs	r2, #0
 8014270:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014274:	3304      	adds	r3, #4
 8014276:	4618      	mov	r0, r3
 8014278:	f7ff f8d9 	bl	801342e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801427e:	3318      	adds	r3, #24
 8014280:	4618      	mov	r0, r3
 8014282:	f7ff f8d4 	bl	801342e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801428a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801428c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801428e:	f1c3 0207 	rsb	r2, r3, #7
 8014292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014294:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801429a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801429e:	2200      	movs	r2, #0
 80142a0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80142a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142a4:	2200      	movs	r2, #0
 80142a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80142aa:	683a      	ldr	r2, [r7, #0]
 80142ac:	68f9      	ldr	r1, [r7, #12]
 80142ae:	69b8      	ldr	r0, [r7, #24]
 80142b0:	f000 ff9e 	bl	80151f0 <pxPortInitialiseStack>
 80142b4:	4602      	mov	r2, r0
 80142b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80142ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d002      	beq.n	80142c6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80142c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80142c6:	bf00      	nop
 80142c8:	3720      	adds	r7, #32
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd80      	pop	{r7, pc}
	...

080142d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b082      	sub	sp, #8
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80142d8:	f001 f8b4 	bl	8015444 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80142dc:	4b2a      	ldr	r3, [pc, #168]	; (8014388 <prvAddNewTaskToReadyList+0xb8>)
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	3301      	adds	r3, #1
 80142e2:	4a29      	ldr	r2, [pc, #164]	; (8014388 <prvAddNewTaskToReadyList+0xb8>)
 80142e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80142e6:	4b29      	ldr	r3, [pc, #164]	; (801438c <prvAddNewTaskToReadyList+0xbc>)
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d109      	bne.n	8014302 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80142ee:	4a27      	ldr	r2, [pc, #156]	; (801438c <prvAddNewTaskToReadyList+0xbc>)
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80142f4:	4b24      	ldr	r3, [pc, #144]	; (8014388 <prvAddNewTaskToReadyList+0xb8>)
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	2b01      	cmp	r3, #1
 80142fa:	d110      	bne.n	801431e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80142fc:	f000 fbc6 	bl	8014a8c <prvInitialiseTaskLists>
 8014300:	e00d      	b.n	801431e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014302:	4b23      	ldr	r3, [pc, #140]	; (8014390 <prvAddNewTaskToReadyList+0xc0>)
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d109      	bne.n	801431e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801430a:	4b20      	ldr	r3, [pc, #128]	; (801438c <prvAddNewTaskToReadyList+0xbc>)
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014314:	429a      	cmp	r2, r3
 8014316:	d802      	bhi.n	801431e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014318:	4a1c      	ldr	r2, [pc, #112]	; (801438c <prvAddNewTaskToReadyList+0xbc>)
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801431e:	4b1d      	ldr	r3, [pc, #116]	; (8014394 <prvAddNewTaskToReadyList+0xc4>)
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	3301      	adds	r3, #1
 8014324:	4a1b      	ldr	r2, [pc, #108]	; (8014394 <prvAddNewTaskToReadyList+0xc4>)
 8014326:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801432c:	2201      	movs	r2, #1
 801432e:	409a      	lsls	r2, r3
 8014330:	4b19      	ldr	r3, [pc, #100]	; (8014398 <prvAddNewTaskToReadyList+0xc8>)
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	4313      	orrs	r3, r2
 8014336:	4a18      	ldr	r2, [pc, #96]	; (8014398 <prvAddNewTaskToReadyList+0xc8>)
 8014338:	6013      	str	r3, [r2, #0]
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801433e:	4613      	mov	r3, r2
 8014340:	009b      	lsls	r3, r3, #2
 8014342:	4413      	add	r3, r2
 8014344:	009b      	lsls	r3, r3, #2
 8014346:	4a15      	ldr	r2, [pc, #84]	; (801439c <prvAddNewTaskToReadyList+0xcc>)
 8014348:	441a      	add	r2, r3
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	3304      	adds	r3, #4
 801434e:	4619      	mov	r1, r3
 8014350:	4610      	mov	r0, r2
 8014352:	f7ff f879 	bl	8013448 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014356:	f001 f8a5 	bl	80154a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801435a:	4b0d      	ldr	r3, [pc, #52]	; (8014390 <prvAddNewTaskToReadyList+0xc0>)
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d00e      	beq.n	8014380 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014362:	4b0a      	ldr	r3, [pc, #40]	; (801438c <prvAddNewTaskToReadyList+0xbc>)
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801436c:	429a      	cmp	r2, r3
 801436e:	d207      	bcs.n	8014380 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014370:	4b0b      	ldr	r3, [pc, #44]	; (80143a0 <prvAddNewTaskToReadyList+0xd0>)
 8014372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014376:	601a      	str	r2, [r3, #0]
 8014378:	f3bf 8f4f 	dsb	sy
 801437c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014380:	bf00      	nop
 8014382:	3708      	adds	r7, #8
 8014384:	46bd      	mov	sp, r7
 8014386:	bd80      	pop	{r7, pc}
 8014388:	2000496c 	.word	0x2000496c
 801438c:	2000486c 	.word	0x2000486c
 8014390:	20004978 	.word	0x20004978
 8014394:	20004988 	.word	0x20004988
 8014398:	20004974 	.word	0x20004974
 801439c:	20004870 	.word	0x20004870
 80143a0:	e000ed04 	.word	0xe000ed04

080143a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b084      	sub	sp, #16
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80143ac:	2300      	movs	r3, #0
 80143ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d017      	beq.n	80143e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80143b6:	4b13      	ldr	r3, [pc, #76]	; (8014404 <vTaskDelay+0x60>)
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d00a      	beq.n	80143d4 <vTaskDelay+0x30>
	__asm volatile
 80143be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143c2:	f383 8811 	msr	BASEPRI, r3
 80143c6:	f3bf 8f6f 	isb	sy
 80143ca:	f3bf 8f4f 	dsb	sy
 80143ce:	60bb      	str	r3, [r7, #8]
}
 80143d0:	bf00      	nop
 80143d2:	e7fe      	b.n	80143d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80143d4:	f000 f87a 	bl	80144cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80143d8:	2100      	movs	r1, #0
 80143da:	6878      	ldr	r0, [r7, #4]
 80143dc:	f000 fea2 	bl	8015124 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80143e0:	f000 f882 	bl	80144e8 <xTaskResumeAll>
 80143e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d107      	bne.n	80143fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80143ec:	4b06      	ldr	r3, [pc, #24]	; (8014408 <vTaskDelay+0x64>)
 80143ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143f2:	601a      	str	r2, [r3, #0]
 80143f4:	f3bf 8f4f 	dsb	sy
 80143f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80143fc:	bf00      	nop
 80143fe:	3710      	adds	r7, #16
 8014400:	46bd      	mov	sp, r7
 8014402:	bd80      	pop	{r7, pc}
 8014404:	20004994 	.word	0x20004994
 8014408:	e000ed04 	.word	0xe000ed04

0801440c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801440c:	b580      	push	{r7, lr}
 801440e:	b08a      	sub	sp, #40	; 0x28
 8014410:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014412:	2300      	movs	r3, #0
 8014414:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014416:	2300      	movs	r3, #0
 8014418:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801441a:	463a      	mov	r2, r7
 801441c:	1d39      	adds	r1, r7, #4
 801441e:	f107 0308 	add.w	r3, r7, #8
 8014422:	4618      	mov	r0, r3
 8014424:	f7ee f91e 	bl	8002664 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014428:	6839      	ldr	r1, [r7, #0]
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	68ba      	ldr	r2, [r7, #8]
 801442e:	9202      	str	r2, [sp, #8]
 8014430:	9301      	str	r3, [sp, #4]
 8014432:	2300      	movs	r3, #0
 8014434:	9300      	str	r3, [sp, #0]
 8014436:	2300      	movs	r3, #0
 8014438:	460a      	mov	r2, r1
 801443a:	491e      	ldr	r1, [pc, #120]	; (80144b4 <vTaskStartScheduler+0xa8>)
 801443c:	481e      	ldr	r0, [pc, #120]	; (80144b8 <vTaskStartScheduler+0xac>)
 801443e:	f7ff fe1d 	bl	801407c <xTaskCreateStatic>
 8014442:	4603      	mov	r3, r0
 8014444:	4a1d      	ldr	r2, [pc, #116]	; (80144bc <vTaskStartScheduler+0xb0>)
 8014446:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014448:	4b1c      	ldr	r3, [pc, #112]	; (80144bc <vTaskStartScheduler+0xb0>)
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d002      	beq.n	8014456 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014450:	2301      	movs	r3, #1
 8014452:	617b      	str	r3, [r7, #20]
 8014454:	e001      	b.n	801445a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014456:	2300      	movs	r3, #0
 8014458:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801445a:	697b      	ldr	r3, [r7, #20]
 801445c:	2b01      	cmp	r3, #1
 801445e:	d116      	bne.n	801448e <vTaskStartScheduler+0x82>
	__asm volatile
 8014460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014464:	f383 8811 	msr	BASEPRI, r3
 8014468:	f3bf 8f6f 	isb	sy
 801446c:	f3bf 8f4f 	dsb	sy
 8014470:	613b      	str	r3, [r7, #16]
}
 8014472:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014474:	4b12      	ldr	r3, [pc, #72]	; (80144c0 <vTaskStartScheduler+0xb4>)
 8014476:	f04f 32ff 	mov.w	r2, #4294967295
 801447a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801447c:	4b11      	ldr	r3, [pc, #68]	; (80144c4 <vTaskStartScheduler+0xb8>)
 801447e:	2201      	movs	r2, #1
 8014480:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014482:	4b11      	ldr	r3, [pc, #68]	; (80144c8 <vTaskStartScheduler+0xbc>)
 8014484:	2200      	movs	r2, #0
 8014486:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014488:	f000 ff3a 	bl	8015300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801448c:	e00e      	b.n	80144ac <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801448e:	697b      	ldr	r3, [r7, #20]
 8014490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014494:	d10a      	bne.n	80144ac <vTaskStartScheduler+0xa0>
	__asm volatile
 8014496:	f04f 0350 	mov.w	r3, #80	; 0x50
 801449a:	f383 8811 	msr	BASEPRI, r3
 801449e:	f3bf 8f6f 	isb	sy
 80144a2:	f3bf 8f4f 	dsb	sy
 80144a6:	60fb      	str	r3, [r7, #12]
}
 80144a8:	bf00      	nop
 80144aa:	e7fe      	b.n	80144aa <vTaskStartScheduler+0x9e>
}
 80144ac:	bf00      	nop
 80144ae:	3718      	adds	r7, #24
 80144b0:	46bd      	mov	sp, r7
 80144b2:	bd80      	pop	{r7, pc}
 80144b4:	0801ca7c 	.word	0x0801ca7c
 80144b8:	08014a5d 	.word	0x08014a5d
 80144bc:	20004990 	.word	0x20004990
 80144c0:	2000498c 	.word	0x2000498c
 80144c4:	20004978 	.word	0x20004978
 80144c8:	20004970 	.word	0x20004970

080144cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80144cc:	b480      	push	{r7}
 80144ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80144d0:	4b04      	ldr	r3, [pc, #16]	; (80144e4 <vTaskSuspendAll+0x18>)
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	3301      	adds	r3, #1
 80144d6:	4a03      	ldr	r2, [pc, #12]	; (80144e4 <vTaskSuspendAll+0x18>)
 80144d8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80144da:	bf00      	nop
 80144dc:	46bd      	mov	sp, r7
 80144de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e2:	4770      	bx	lr
 80144e4:	20004994 	.word	0x20004994

080144e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b084      	sub	sp, #16
 80144ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80144ee:	2300      	movs	r3, #0
 80144f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80144f2:	2300      	movs	r3, #0
 80144f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80144f6:	4b41      	ldr	r3, [pc, #260]	; (80145fc <xTaskResumeAll+0x114>)
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d10a      	bne.n	8014514 <xTaskResumeAll+0x2c>
	__asm volatile
 80144fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014502:	f383 8811 	msr	BASEPRI, r3
 8014506:	f3bf 8f6f 	isb	sy
 801450a:	f3bf 8f4f 	dsb	sy
 801450e:	603b      	str	r3, [r7, #0]
}
 8014510:	bf00      	nop
 8014512:	e7fe      	b.n	8014512 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014514:	f000 ff96 	bl	8015444 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014518:	4b38      	ldr	r3, [pc, #224]	; (80145fc <xTaskResumeAll+0x114>)
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	3b01      	subs	r3, #1
 801451e:	4a37      	ldr	r2, [pc, #220]	; (80145fc <xTaskResumeAll+0x114>)
 8014520:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014522:	4b36      	ldr	r3, [pc, #216]	; (80145fc <xTaskResumeAll+0x114>)
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d161      	bne.n	80145ee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801452a:	4b35      	ldr	r3, [pc, #212]	; (8014600 <xTaskResumeAll+0x118>)
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d05d      	beq.n	80145ee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014532:	e02e      	b.n	8014592 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014534:	4b33      	ldr	r3, [pc, #204]	; (8014604 <xTaskResumeAll+0x11c>)
 8014536:	68db      	ldr	r3, [r3, #12]
 8014538:	68db      	ldr	r3, [r3, #12]
 801453a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	3318      	adds	r3, #24
 8014540:	4618      	mov	r0, r3
 8014542:	f7fe ffde 	bl	8013502 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	3304      	adds	r3, #4
 801454a:	4618      	mov	r0, r3
 801454c:	f7fe ffd9 	bl	8013502 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014554:	2201      	movs	r2, #1
 8014556:	409a      	lsls	r2, r3
 8014558:	4b2b      	ldr	r3, [pc, #172]	; (8014608 <xTaskResumeAll+0x120>)
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	4313      	orrs	r3, r2
 801455e:	4a2a      	ldr	r2, [pc, #168]	; (8014608 <xTaskResumeAll+0x120>)
 8014560:	6013      	str	r3, [r2, #0]
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014566:	4613      	mov	r3, r2
 8014568:	009b      	lsls	r3, r3, #2
 801456a:	4413      	add	r3, r2
 801456c:	009b      	lsls	r3, r3, #2
 801456e:	4a27      	ldr	r2, [pc, #156]	; (801460c <xTaskResumeAll+0x124>)
 8014570:	441a      	add	r2, r3
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	3304      	adds	r3, #4
 8014576:	4619      	mov	r1, r3
 8014578:	4610      	mov	r0, r2
 801457a:	f7fe ff65 	bl	8013448 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014582:	4b23      	ldr	r3, [pc, #140]	; (8014610 <xTaskResumeAll+0x128>)
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014588:	429a      	cmp	r2, r3
 801458a:	d302      	bcc.n	8014592 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801458c:	4b21      	ldr	r3, [pc, #132]	; (8014614 <xTaskResumeAll+0x12c>)
 801458e:	2201      	movs	r2, #1
 8014590:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014592:	4b1c      	ldr	r3, [pc, #112]	; (8014604 <xTaskResumeAll+0x11c>)
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d1cc      	bne.n	8014534 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	2b00      	cmp	r3, #0
 801459e:	d001      	beq.n	80145a4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80145a0:	f000 fb12 	bl	8014bc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80145a4:	4b1c      	ldr	r3, [pc, #112]	; (8014618 <xTaskResumeAll+0x130>)
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d010      	beq.n	80145d2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80145b0:	f000 f836 	bl	8014620 <xTaskIncrementTick>
 80145b4:	4603      	mov	r3, r0
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d002      	beq.n	80145c0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80145ba:	4b16      	ldr	r3, [pc, #88]	; (8014614 <xTaskResumeAll+0x12c>)
 80145bc:	2201      	movs	r2, #1
 80145be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	3b01      	subs	r3, #1
 80145c4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d1f1      	bne.n	80145b0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80145cc:	4b12      	ldr	r3, [pc, #72]	; (8014618 <xTaskResumeAll+0x130>)
 80145ce:	2200      	movs	r2, #0
 80145d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80145d2:	4b10      	ldr	r3, [pc, #64]	; (8014614 <xTaskResumeAll+0x12c>)
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d009      	beq.n	80145ee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80145da:	2301      	movs	r3, #1
 80145dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80145de:	4b0f      	ldr	r3, [pc, #60]	; (801461c <xTaskResumeAll+0x134>)
 80145e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145e4:	601a      	str	r2, [r3, #0]
 80145e6:	f3bf 8f4f 	dsb	sy
 80145ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80145ee:	f000 ff59 	bl	80154a4 <vPortExitCritical>

	return xAlreadyYielded;
 80145f2:	68bb      	ldr	r3, [r7, #8]
}
 80145f4:	4618      	mov	r0, r3
 80145f6:	3710      	adds	r7, #16
 80145f8:	46bd      	mov	sp, r7
 80145fa:	bd80      	pop	{r7, pc}
 80145fc:	20004994 	.word	0x20004994
 8014600:	2000496c 	.word	0x2000496c
 8014604:	2000492c 	.word	0x2000492c
 8014608:	20004974 	.word	0x20004974
 801460c:	20004870 	.word	0x20004870
 8014610:	2000486c 	.word	0x2000486c
 8014614:	20004980 	.word	0x20004980
 8014618:	2000497c 	.word	0x2000497c
 801461c:	e000ed04 	.word	0xe000ed04

08014620 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b086      	sub	sp, #24
 8014624:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014626:	2300      	movs	r3, #0
 8014628:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801462a:	4b4e      	ldr	r3, [pc, #312]	; (8014764 <xTaskIncrementTick+0x144>)
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	2b00      	cmp	r3, #0
 8014630:	f040 8088 	bne.w	8014744 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014634:	4b4c      	ldr	r3, [pc, #304]	; (8014768 <xTaskIncrementTick+0x148>)
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	3301      	adds	r3, #1
 801463a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801463c:	4a4a      	ldr	r2, [pc, #296]	; (8014768 <xTaskIncrementTick+0x148>)
 801463e:	693b      	ldr	r3, [r7, #16]
 8014640:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014642:	693b      	ldr	r3, [r7, #16]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d120      	bne.n	801468a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014648:	4b48      	ldr	r3, [pc, #288]	; (801476c <xTaskIncrementTick+0x14c>)
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d00a      	beq.n	8014668 <xTaskIncrementTick+0x48>
	__asm volatile
 8014652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014656:	f383 8811 	msr	BASEPRI, r3
 801465a:	f3bf 8f6f 	isb	sy
 801465e:	f3bf 8f4f 	dsb	sy
 8014662:	603b      	str	r3, [r7, #0]
}
 8014664:	bf00      	nop
 8014666:	e7fe      	b.n	8014666 <xTaskIncrementTick+0x46>
 8014668:	4b40      	ldr	r3, [pc, #256]	; (801476c <xTaskIncrementTick+0x14c>)
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	60fb      	str	r3, [r7, #12]
 801466e:	4b40      	ldr	r3, [pc, #256]	; (8014770 <xTaskIncrementTick+0x150>)
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	4a3e      	ldr	r2, [pc, #248]	; (801476c <xTaskIncrementTick+0x14c>)
 8014674:	6013      	str	r3, [r2, #0]
 8014676:	4a3e      	ldr	r2, [pc, #248]	; (8014770 <xTaskIncrementTick+0x150>)
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	6013      	str	r3, [r2, #0]
 801467c:	4b3d      	ldr	r3, [pc, #244]	; (8014774 <xTaskIncrementTick+0x154>)
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	3301      	adds	r3, #1
 8014682:	4a3c      	ldr	r2, [pc, #240]	; (8014774 <xTaskIncrementTick+0x154>)
 8014684:	6013      	str	r3, [r2, #0]
 8014686:	f000 fa9f 	bl	8014bc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801468a:	4b3b      	ldr	r3, [pc, #236]	; (8014778 <xTaskIncrementTick+0x158>)
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	693a      	ldr	r2, [r7, #16]
 8014690:	429a      	cmp	r2, r3
 8014692:	d348      	bcc.n	8014726 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014694:	4b35      	ldr	r3, [pc, #212]	; (801476c <xTaskIncrementTick+0x14c>)
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d104      	bne.n	80146a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801469e:	4b36      	ldr	r3, [pc, #216]	; (8014778 <xTaskIncrementTick+0x158>)
 80146a0:	f04f 32ff 	mov.w	r2, #4294967295
 80146a4:	601a      	str	r2, [r3, #0]
					break;
 80146a6:	e03e      	b.n	8014726 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80146a8:	4b30      	ldr	r3, [pc, #192]	; (801476c <xTaskIncrementTick+0x14c>)
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	68db      	ldr	r3, [r3, #12]
 80146ae:	68db      	ldr	r3, [r3, #12]
 80146b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80146b2:	68bb      	ldr	r3, [r7, #8]
 80146b4:	685b      	ldr	r3, [r3, #4]
 80146b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80146b8:	693a      	ldr	r2, [r7, #16]
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	429a      	cmp	r2, r3
 80146be:	d203      	bcs.n	80146c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80146c0:	4a2d      	ldr	r2, [pc, #180]	; (8014778 <xTaskIncrementTick+0x158>)
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80146c6:	e02e      	b.n	8014726 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80146c8:	68bb      	ldr	r3, [r7, #8]
 80146ca:	3304      	adds	r3, #4
 80146cc:	4618      	mov	r0, r3
 80146ce:	f7fe ff18 	bl	8013502 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80146d2:	68bb      	ldr	r3, [r7, #8]
 80146d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d004      	beq.n	80146e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80146da:	68bb      	ldr	r3, [r7, #8]
 80146dc:	3318      	adds	r3, #24
 80146de:	4618      	mov	r0, r3
 80146e0:	f7fe ff0f 	bl	8013502 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80146e4:	68bb      	ldr	r3, [r7, #8]
 80146e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146e8:	2201      	movs	r2, #1
 80146ea:	409a      	lsls	r2, r3
 80146ec:	4b23      	ldr	r3, [pc, #140]	; (801477c <xTaskIncrementTick+0x15c>)
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	4313      	orrs	r3, r2
 80146f2:	4a22      	ldr	r2, [pc, #136]	; (801477c <xTaskIncrementTick+0x15c>)
 80146f4:	6013      	str	r3, [r2, #0]
 80146f6:	68bb      	ldr	r3, [r7, #8]
 80146f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146fa:	4613      	mov	r3, r2
 80146fc:	009b      	lsls	r3, r3, #2
 80146fe:	4413      	add	r3, r2
 8014700:	009b      	lsls	r3, r3, #2
 8014702:	4a1f      	ldr	r2, [pc, #124]	; (8014780 <xTaskIncrementTick+0x160>)
 8014704:	441a      	add	r2, r3
 8014706:	68bb      	ldr	r3, [r7, #8]
 8014708:	3304      	adds	r3, #4
 801470a:	4619      	mov	r1, r3
 801470c:	4610      	mov	r0, r2
 801470e:	f7fe fe9b 	bl	8013448 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014712:	68bb      	ldr	r3, [r7, #8]
 8014714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014716:	4b1b      	ldr	r3, [pc, #108]	; (8014784 <xTaskIncrementTick+0x164>)
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801471c:	429a      	cmp	r2, r3
 801471e:	d3b9      	bcc.n	8014694 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014720:	2301      	movs	r3, #1
 8014722:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014724:	e7b6      	b.n	8014694 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014726:	4b17      	ldr	r3, [pc, #92]	; (8014784 <xTaskIncrementTick+0x164>)
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801472c:	4914      	ldr	r1, [pc, #80]	; (8014780 <xTaskIncrementTick+0x160>)
 801472e:	4613      	mov	r3, r2
 8014730:	009b      	lsls	r3, r3, #2
 8014732:	4413      	add	r3, r2
 8014734:	009b      	lsls	r3, r3, #2
 8014736:	440b      	add	r3, r1
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	2b01      	cmp	r3, #1
 801473c:	d907      	bls.n	801474e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 801473e:	2301      	movs	r3, #1
 8014740:	617b      	str	r3, [r7, #20]
 8014742:	e004      	b.n	801474e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014744:	4b10      	ldr	r3, [pc, #64]	; (8014788 <xTaskIncrementTick+0x168>)
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	3301      	adds	r3, #1
 801474a:	4a0f      	ldr	r2, [pc, #60]	; (8014788 <xTaskIncrementTick+0x168>)
 801474c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801474e:	4b0f      	ldr	r3, [pc, #60]	; (801478c <xTaskIncrementTick+0x16c>)
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d001      	beq.n	801475a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8014756:	2301      	movs	r3, #1
 8014758:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801475a:	697b      	ldr	r3, [r7, #20]
}
 801475c:	4618      	mov	r0, r3
 801475e:	3718      	adds	r7, #24
 8014760:	46bd      	mov	sp, r7
 8014762:	bd80      	pop	{r7, pc}
 8014764:	20004994 	.word	0x20004994
 8014768:	20004970 	.word	0x20004970
 801476c:	20004924 	.word	0x20004924
 8014770:	20004928 	.word	0x20004928
 8014774:	20004984 	.word	0x20004984
 8014778:	2000498c 	.word	0x2000498c
 801477c:	20004974 	.word	0x20004974
 8014780:	20004870 	.word	0x20004870
 8014784:	2000486c 	.word	0x2000486c
 8014788:	2000497c 	.word	0x2000497c
 801478c:	20004980 	.word	0x20004980

08014790 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014790:	b480      	push	{r7}
 8014792:	b087      	sub	sp, #28
 8014794:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014796:	4b27      	ldr	r3, [pc, #156]	; (8014834 <vTaskSwitchContext+0xa4>)
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d003      	beq.n	80147a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801479e:	4b26      	ldr	r3, [pc, #152]	; (8014838 <vTaskSwitchContext+0xa8>)
 80147a0:	2201      	movs	r2, #1
 80147a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80147a4:	e03f      	b.n	8014826 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80147a6:	4b24      	ldr	r3, [pc, #144]	; (8014838 <vTaskSwitchContext+0xa8>)
 80147a8:	2200      	movs	r2, #0
 80147aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80147ac:	4b23      	ldr	r3, [pc, #140]	; (801483c <vTaskSwitchContext+0xac>)
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	fab3 f383 	clz	r3, r3
 80147b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80147ba:	7afb      	ldrb	r3, [r7, #11]
 80147bc:	f1c3 031f 	rsb	r3, r3, #31
 80147c0:	617b      	str	r3, [r7, #20]
 80147c2:	491f      	ldr	r1, [pc, #124]	; (8014840 <vTaskSwitchContext+0xb0>)
 80147c4:	697a      	ldr	r2, [r7, #20]
 80147c6:	4613      	mov	r3, r2
 80147c8:	009b      	lsls	r3, r3, #2
 80147ca:	4413      	add	r3, r2
 80147cc:	009b      	lsls	r3, r3, #2
 80147ce:	440b      	add	r3, r1
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d10a      	bne.n	80147ec <vTaskSwitchContext+0x5c>
	__asm volatile
 80147d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147da:	f383 8811 	msr	BASEPRI, r3
 80147de:	f3bf 8f6f 	isb	sy
 80147e2:	f3bf 8f4f 	dsb	sy
 80147e6:	607b      	str	r3, [r7, #4]
}
 80147e8:	bf00      	nop
 80147ea:	e7fe      	b.n	80147ea <vTaskSwitchContext+0x5a>
 80147ec:	697a      	ldr	r2, [r7, #20]
 80147ee:	4613      	mov	r3, r2
 80147f0:	009b      	lsls	r3, r3, #2
 80147f2:	4413      	add	r3, r2
 80147f4:	009b      	lsls	r3, r3, #2
 80147f6:	4a12      	ldr	r2, [pc, #72]	; (8014840 <vTaskSwitchContext+0xb0>)
 80147f8:	4413      	add	r3, r2
 80147fa:	613b      	str	r3, [r7, #16]
 80147fc:	693b      	ldr	r3, [r7, #16]
 80147fe:	685b      	ldr	r3, [r3, #4]
 8014800:	685a      	ldr	r2, [r3, #4]
 8014802:	693b      	ldr	r3, [r7, #16]
 8014804:	605a      	str	r2, [r3, #4]
 8014806:	693b      	ldr	r3, [r7, #16]
 8014808:	685a      	ldr	r2, [r3, #4]
 801480a:	693b      	ldr	r3, [r7, #16]
 801480c:	3308      	adds	r3, #8
 801480e:	429a      	cmp	r2, r3
 8014810:	d104      	bne.n	801481c <vTaskSwitchContext+0x8c>
 8014812:	693b      	ldr	r3, [r7, #16]
 8014814:	685b      	ldr	r3, [r3, #4]
 8014816:	685a      	ldr	r2, [r3, #4]
 8014818:	693b      	ldr	r3, [r7, #16]
 801481a:	605a      	str	r2, [r3, #4]
 801481c:	693b      	ldr	r3, [r7, #16]
 801481e:	685b      	ldr	r3, [r3, #4]
 8014820:	68db      	ldr	r3, [r3, #12]
 8014822:	4a08      	ldr	r2, [pc, #32]	; (8014844 <vTaskSwitchContext+0xb4>)
 8014824:	6013      	str	r3, [r2, #0]
}
 8014826:	bf00      	nop
 8014828:	371c      	adds	r7, #28
 801482a:	46bd      	mov	sp, r7
 801482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014830:	4770      	bx	lr
 8014832:	bf00      	nop
 8014834:	20004994 	.word	0x20004994
 8014838:	20004980 	.word	0x20004980
 801483c:	20004974 	.word	0x20004974
 8014840:	20004870 	.word	0x20004870
 8014844:	2000486c 	.word	0x2000486c

08014848 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b084      	sub	sp, #16
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
 8014850:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d10a      	bne.n	801486e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014858:	f04f 0350 	mov.w	r3, #80	; 0x50
 801485c:	f383 8811 	msr	BASEPRI, r3
 8014860:	f3bf 8f6f 	isb	sy
 8014864:	f3bf 8f4f 	dsb	sy
 8014868:	60fb      	str	r3, [r7, #12]
}
 801486a:	bf00      	nop
 801486c:	e7fe      	b.n	801486c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801486e:	4b07      	ldr	r3, [pc, #28]	; (801488c <vTaskPlaceOnEventList+0x44>)
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	3318      	adds	r3, #24
 8014874:	4619      	mov	r1, r3
 8014876:	6878      	ldr	r0, [r7, #4]
 8014878:	f7fe fe0a 	bl	8013490 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801487c:	2101      	movs	r1, #1
 801487e:	6838      	ldr	r0, [r7, #0]
 8014880:	f000 fc50 	bl	8015124 <prvAddCurrentTaskToDelayedList>
}
 8014884:	bf00      	nop
 8014886:	3710      	adds	r7, #16
 8014888:	46bd      	mov	sp, r7
 801488a:	bd80      	pop	{r7, pc}
 801488c:	2000486c 	.word	0x2000486c

08014890 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014890:	b580      	push	{r7, lr}
 8014892:	b086      	sub	sp, #24
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	68db      	ldr	r3, [r3, #12]
 801489c:	68db      	ldr	r3, [r3, #12]
 801489e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80148a0:	693b      	ldr	r3, [r7, #16]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d10a      	bne.n	80148bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80148a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148aa:	f383 8811 	msr	BASEPRI, r3
 80148ae:	f3bf 8f6f 	isb	sy
 80148b2:	f3bf 8f4f 	dsb	sy
 80148b6:	60fb      	str	r3, [r7, #12]
}
 80148b8:	bf00      	nop
 80148ba:	e7fe      	b.n	80148ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80148bc:	693b      	ldr	r3, [r7, #16]
 80148be:	3318      	adds	r3, #24
 80148c0:	4618      	mov	r0, r3
 80148c2:	f7fe fe1e 	bl	8013502 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80148c6:	4b1d      	ldr	r3, [pc, #116]	; (801493c <xTaskRemoveFromEventList+0xac>)
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d11c      	bne.n	8014908 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80148ce:	693b      	ldr	r3, [r7, #16]
 80148d0:	3304      	adds	r3, #4
 80148d2:	4618      	mov	r0, r3
 80148d4:	f7fe fe15 	bl	8013502 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80148d8:	693b      	ldr	r3, [r7, #16]
 80148da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148dc:	2201      	movs	r2, #1
 80148de:	409a      	lsls	r2, r3
 80148e0:	4b17      	ldr	r3, [pc, #92]	; (8014940 <xTaskRemoveFromEventList+0xb0>)
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	4313      	orrs	r3, r2
 80148e6:	4a16      	ldr	r2, [pc, #88]	; (8014940 <xTaskRemoveFromEventList+0xb0>)
 80148e8:	6013      	str	r3, [r2, #0]
 80148ea:	693b      	ldr	r3, [r7, #16]
 80148ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148ee:	4613      	mov	r3, r2
 80148f0:	009b      	lsls	r3, r3, #2
 80148f2:	4413      	add	r3, r2
 80148f4:	009b      	lsls	r3, r3, #2
 80148f6:	4a13      	ldr	r2, [pc, #76]	; (8014944 <xTaskRemoveFromEventList+0xb4>)
 80148f8:	441a      	add	r2, r3
 80148fa:	693b      	ldr	r3, [r7, #16]
 80148fc:	3304      	adds	r3, #4
 80148fe:	4619      	mov	r1, r3
 8014900:	4610      	mov	r0, r2
 8014902:	f7fe fda1 	bl	8013448 <vListInsertEnd>
 8014906:	e005      	b.n	8014914 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014908:	693b      	ldr	r3, [r7, #16]
 801490a:	3318      	adds	r3, #24
 801490c:	4619      	mov	r1, r3
 801490e:	480e      	ldr	r0, [pc, #56]	; (8014948 <xTaskRemoveFromEventList+0xb8>)
 8014910:	f7fe fd9a 	bl	8013448 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014914:	693b      	ldr	r3, [r7, #16]
 8014916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014918:	4b0c      	ldr	r3, [pc, #48]	; (801494c <xTaskRemoveFromEventList+0xbc>)
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801491e:	429a      	cmp	r2, r3
 8014920:	d905      	bls.n	801492e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014922:	2301      	movs	r3, #1
 8014924:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014926:	4b0a      	ldr	r3, [pc, #40]	; (8014950 <xTaskRemoveFromEventList+0xc0>)
 8014928:	2201      	movs	r2, #1
 801492a:	601a      	str	r2, [r3, #0]
 801492c:	e001      	b.n	8014932 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801492e:	2300      	movs	r3, #0
 8014930:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014932:	697b      	ldr	r3, [r7, #20]
}
 8014934:	4618      	mov	r0, r3
 8014936:	3718      	adds	r7, #24
 8014938:	46bd      	mov	sp, r7
 801493a:	bd80      	pop	{r7, pc}
 801493c:	20004994 	.word	0x20004994
 8014940:	20004974 	.word	0x20004974
 8014944:	20004870 	.word	0x20004870
 8014948:	2000492c 	.word	0x2000492c
 801494c:	2000486c 	.word	0x2000486c
 8014950:	20004980 	.word	0x20004980

08014954 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014954:	b480      	push	{r7}
 8014956:	b083      	sub	sp, #12
 8014958:	af00      	add	r7, sp, #0
 801495a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801495c:	4b06      	ldr	r3, [pc, #24]	; (8014978 <vTaskInternalSetTimeOutState+0x24>)
 801495e:	681a      	ldr	r2, [r3, #0]
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014964:	4b05      	ldr	r3, [pc, #20]	; (801497c <vTaskInternalSetTimeOutState+0x28>)
 8014966:	681a      	ldr	r2, [r3, #0]
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	605a      	str	r2, [r3, #4]
}
 801496c:	bf00      	nop
 801496e:	370c      	adds	r7, #12
 8014970:	46bd      	mov	sp, r7
 8014972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014976:	4770      	bx	lr
 8014978:	20004984 	.word	0x20004984
 801497c:	20004970 	.word	0x20004970

08014980 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014980:	b580      	push	{r7, lr}
 8014982:	b088      	sub	sp, #32
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
 8014988:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	2b00      	cmp	r3, #0
 801498e:	d10a      	bne.n	80149a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014994:	f383 8811 	msr	BASEPRI, r3
 8014998:	f3bf 8f6f 	isb	sy
 801499c:	f3bf 8f4f 	dsb	sy
 80149a0:	613b      	str	r3, [r7, #16]
}
 80149a2:	bf00      	nop
 80149a4:	e7fe      	b.n	80149a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80149a6:	683b      	ldr	r3, [r7, #0]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d10a      	bne.n	80149c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80149ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149b0:	f383 8811 	msr	BASEPRI, r3
 80149b4:	f3bf 8f6f 	isb	sy
 80149b8:	f3bf 8f4f 	dsb	sy
 80149bc:	60fb      	str	r3, [r7, #12]
}
 80149be:	bf00      	nop
 80149c0:	e7fe      	b.n	80149c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80149c2:	f000 fd3f 	bl	8015444 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80149c6:	4b1d      	ldr	r3, [pc, #116]	; (8014a3c <xTaskCheckForTimeOut+0xbc>)
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	685b      	ldr	r3, [r3, #4]
 80149d0:	69ba      	ldr	r2, [r7, #24]
 80149d2:	1ad3      	subs	r3, r2, r3
 80149d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80149d6:	683b      	ldr	r3, [r7, #0]
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149de:	d102      	bne.n	80149e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80149e0:	2300      	movs	r3, #0
 80149e2:	61fb      	str	r3, [r7, #28]
 80149e4:	e023      	b.n	8014a2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	681a      	ldr	r2, [r3, #0]
 80149ea:	4b15      	ldr	r3, [pc, #84]	; (8014a40 <xTaskCheckForTimeOut+0xc0>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	429a      	cmp	r2, r3
 80149f0:	d007      	beq.n	8014a02 <xTaskCheckForTimeOut+0x82>
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	685b      	ldr	r3, [r3, #4]
 80149f6:	69ba      	ldr	r2, [r7, #24]
 80149f8:	429a      	cmp	r2, r3
 80149fa:	d302      	bcc.n	8014a02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80149fc:	2301      	movs	r3, #1
 80149fe:	61fb      	str	r3, [r7, #28]
 8014a00:	e015      	b.n	8014a2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014a02:	683b      	ldr	r3, [r7, #0]
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	697a      	ldr	r2, [r7, #20]
 8014a08:	429a      	cmp	r2, r3
 8014a0a:	d20b      	bcs.n	8014a24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014a0c:	683b      	ldr	r3, [r7, #0]
 8014a0e:	681a      	ldr	r2, [r3, #0]
 8014a10:	697b      	ldr	r3, [r7, #20]
 8014a12:	1ad2      	subs	r2, r2, r3
 8014a14:	683b      	ldr	r3, [r7, #0]
 8014a16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014a18:	6878      	ldr	r0, [r7, #4]
 8014a1a:	f7ff ff9b 	bl	8014954 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014a1e:	2300      	movs	r3, #0
 8014a20:	61fb      	str	r3, [r7, #28]
 8014a22:	e004      	b.n	8014a2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014a24:	683b      	ldr	r3, [r7, #0]
 8014a26:	2200      	movs	r2, #0
 8014a28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014a2a:	2301      	movs	r3, #1
 8014a2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014a2e:	f000 fd39 	bl	80154a4 <vPortExitCritical>

	return xReturn;
 8014a32:	69fb      	ldr	r3, [r7, #28]
}
 8014a34:	4618      	mov	r0, r3
 8014a36:	3720      	adds	r7, #32
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	bd80      	pop	{r7, pc}
 8014a3c:	20004970 	.word	0x20004970
 8014a40:	20004984 	.word	0x20004984

08014a44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014a44:	b480      	push	{r7}
 8014a46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014a48:	4b03      	ldr	r3, [pc, #12]	; (8014a58 <vTaskMissedYield+0x14>)
 8014a4a:	2201      	movs	r2, #1
 8014a4c:	601a      	str	r2, [r3, #0]
}
 8014a4e:	bf00      	nop
 8014a50:	46bd      	mov	sp, r7
 8014a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a56:	4770      	bx	lr
 8014a58:	20004980 	.word	0x20004980

08014a5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b082      	sub	sp, #8
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014a64:	f000 f852 	bl	8014b0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014a68:	4b06      	ldr	r3, [pc, #24]	; (8014a84 <prvIdleTask+0x28>)
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	2b01      	cmp	r3, #1
 8014a6e:	d9f9      	bls.n	8014a64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014a70:	4b05      	ldr	r3, [pc, #20]	; (8014a88 <prvIdleTask+0x2c>)
 8014a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a76:	601a      	str	r2, [r3, #0]
 8014a78:	f3bf 8f4f 	dsb	sy
 8014a7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014a80:	e7f0      	b.n	8014a64 <prvIdleTask+0x8>
 8014a82:	bf00      	nop
 8014a84:	20004870 	.word	0x20004870
 8014a88:	e000ed04 	.word	0xe000ed04

08014a8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b082      	sub	sp, #8
 8014a90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014a92:	2300      	movs	r3, #0
 8014a94:	607b      	str	r3, [r7, #4]
 8014a96:	e00c      	b.n	8014ab2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014a98:	687a      	ldr	r2, [r7, #4]
 8014a9a:	4613      	mov	r3, r2
 8014a9c:	009b      	lsls	r3, r3, #2
 8014a9e:	4413      	add	r3, r2
 8014aa0:	009b      	lsls	r3, r3, #2
 8014aa2:	4a12      	ldr	r2, [pc, #72]	; (8014aec <prvInitialiseTaskLists+0x60>)
 8014aa4:	4413      	add	r3, r2
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f7fe fca1 	bl	80133ee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	3301      	adds	r3, #1
 8014ab0:	607b      	str	r3, [r7, #4]
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	2b06      	cmp	r3, #6
 8014ab6:	d9ef      	bls.n	8014a98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014ab8:	480d      	ldr	r0, [pc, #52]	; (8014af0 <prvInitialiseTaskLists+0x64>)
 8014aba:	f7fe fc98 	bl	80133ee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014abe:	480d      	ldr	r0, [pc, #52]	; (8014af4 <prvInitialiseTaskLists+0x68>)
 8014ac0:	f7fe fc95 	bl	80133ee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014ac4:	480c      	ldr	r0, [pc, #48]	; (8014af8 <prvInitialiseTaskLists+0x6c>)
 8014ac6:	f7fe fc92 	bl	80133ee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014aca:	480c      	ldr	r0, [pc, #48]	; (8014afc <prvInitialiseTaskLists+0x70>)
 8014acc:	f7fe fc8f 	bl	80133ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014ad0:	480b      	ldr	r0, [pc, #44]	; (8014b00 <prvInitialiseTaskLists+0x74>)
 8014ad2:	f7fe fc8c 	bl	80133ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014ad6:	4b0b      	ldr	r3, [pc, #44]	; (8014b04 <prvInitialiseTaskLists+0x78>)
 8014ad8:	4a05      	ldr	r2, [pc, #20]	; (8014af0 <prvInitialiseTaskLists+0x64>)
 8014ada:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014adc:	4b0a      	ldr	r3, [pc, #40]	; (8014b08 <prvInitialiseTaskLists+0x7c>)
 8014ade:	4a05      	ldr	r2, [pc, #20]	; (8014af4 <prvInitialiseTaskLists+0x68>)
 8014ae0:	601a      	str	r2, [r3, #0]
}
 8014ae2:	bf00      	nop
 8014ae4:	3708      	adds	r7, #8
 8014ae6:	46bd      	mov	sp, r7
 8014ae8:	bd80      	pop	{r7, pc}
 8014aea:	bf00      	nop
 8014aec:	20004870 	.word	0x20004870
 8014af0:	200048fc 	.word	0x200048fc
 8014af4:	20004910 	.word	0x20004910
 8014af8:	2000492c 	.word	0x2000492c
 8014afc:	20004940 	.word	0x20004940
 8014b00:	20004958 	.word	0x20004958
 8014b04:	20004924 	.word	0x20004924
 8014b08:	20004928 	.word	0x20004928

08014b0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b082      	sub	sp, #8
 8014b10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014b12:	e019      	b.n	8014b48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014b14:	f000 fc96 	bl	8015444 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b18:	4b10      	ldr	r3, [pc, #64]	; (8014b5c <prvCheckTasksWaitingTermination+0x50>)
 8014b1a:	68db      	ldr	r3, [r3, #12]
 8014b1c:	68db      	ldr	r3, [r3, #12]
 8014b1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	3304      	adds	r3, #4
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7fe fcec 	bl	8013502 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014b2a:	4b0d      	ldr	r3, [pc, #52]	; (8014b60 <prvCheckTasksWaitingTermination+0x54>)
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	3b01      	subs	r3, #1
 8014b30:	4a0b      	ldr	r2, [pc, #44]	; (8014b60 <prvCheckTasksWaitingTermination+0x54>)
 8014b32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014b34:	4b0b      	ldr	r3, [pc, #44]	; (8014b64 <prvCheckTasksWaitingTermination+0x58>)
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	3b01      	subs	r3, #1
 8014b3a:	4a0a      	ldr	r2, [pc, #40]	; (8014b64 <prvCheckTasksWaitingTermination+0x58>)
 8014b3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014b3e:	f000 fcb1 	bl	80154a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014b42:	6878      	ldr	r0, [r7, #4]
 8014b44:	f000 f810 	bl	8014b68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014b48:	4b06      	ldr	r3, [pc, #24]	; (8014b64 <prvCheckTasksWaitingTermination+0x58>)
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d1e1      	bne.n	8014b14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014b50:	bf00      	nop
 8014b52:	bf00      	nop
 8014b54:	3708      	adds	r7, #8
 8014b56:	46bd      	mov	sp, r7
 8014b58:	bd80      	pop	{r7, pc}
 8014b5a:	bf00      	nop
 8014b5c:	20004940 	.word	0x20004940
 8014b60:	2000496c 	.word	0x2000496c
 8014b64:	20004954 	.word	0x20004954

08014b68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b084      	sub	sp, #16
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d108      	bne.n	8014b8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b7e:	4618      	mov	r0, r3
 8014b80:	f000 fe46 	bl	8015810 <vPortFree>
				vPortFree( pxTCB );
 8014b84:	6878      	ldr	r0, [r7, #4]
 8014b86:	f000 fe43 	bl	8015810 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014b8a:	e018      	b.n	8014bbe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014b92:	2b01      	cmp	r3, #1
 8014b94:	d103      	bne.n	8014b9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014b96:	6878      	ldr	r0, [r7, #4]
 8014b98:	f000 fe3a 	bl	8015810 <vPortFree>
	}
 8014b9c:	e00f      	b.n	8014bbe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014ba4:	2b02      	cmp	r3, #2
 8014ba6:	d00a      	beq.n	8014bbe <prvDeleteTCB+0x56>
	__asm volatile
 8014ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bac:	f383 8811 	msr	BASEPRI, r3
 8014bb0:	f3bf 8f6f 	isb	sy
 8014bb4:	f3bf 8f4f 	dsb	sy
 8014bb8:	60fb      	str	r3, [r7, #12]
}
 8014bba:	bf00      	nop
 8014bbc:	e7fe      	b.n	8014bbc <prvDeleteTCB+0x54>
	}
 8014bbe:	bf00      	nop
 8014bc0:	3710      	adds	r7, #16
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	bd80      	pop	{r7, pc}
	...

08014bc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014bc8:	b480      	push	{r7}
 8014bca:	b083      	sub	sp, #12
 8014bcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014bce:	4b0c      	ldr	r3, [pc, #48]	; (8014c00 <prvResetNextTaskUnblockTime+0x38>)
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d104      	bne.n	8014be2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014bd8:	4b0a      	ldr	r3, [pc, #40]	; (8014c04 <prvResetNextTaskUnblockTime+0x3c>)
 8014bda:	f04f 32ff 	mov.w	r2, #4294967295
 8014bde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014be0:	e008      	b.n	8014bf4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014be2:	4b07      	ldr	r3, [pc, #28]	; (8014c00 <prvResetNextTaskUnblockTime+0x38>)
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	68db      	ldr	r3, [r3, #12]
 8014be8:	68db      	ldr	r3, [r3, #12]
 8014bea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	685b      	ldr	r3, [r3, #4]
 8014bf0:	4a04      	ldr	r2, [pc, #16]	; (8014c04 <prvResetNextTaskUnblockTime+0x3c>)
 8014bf2:	6013      	str	r3, [r2, #0]
}
 8014bf4:	bf00      	nop
 8014bf6:	370c      	adds	r7, #12
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bfe:	4770      	bx	lr
 8014c00:	20004924 	.word	0x20004924
 8014c04:	2000498c 	.word	0x2000498c

08014c08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014c08:	b480      	push	{r7}
 8014c0a:	b083      	sub	sp, #12
 8014c0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014c0e:	4b0b      	ldr	r3, [pc, #44]	; (8014c3c <xTaskGetSchedulerState+0x34>)
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d102      	bne.n	8014c1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014c16:	2301      	movs	r3, #1
 8014c18:	607b      	str	r3, [r7, #4]
 8014c1a:	e008      	b.n	8014c2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c1c:	4b08      	ldr	r3, [pc, #32]	; (8014c40 <xTaskGetSchedulerState+0x38>)
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d102      	bne.n	8014c2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014c24:	2302      	movs	r3, #2
 8014c26:	607b      	str	r3, [r7, #4]
 8014c28:	e001      	b.n	8014c2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014c2a:	2300      	movs	r3, #0
 8014c2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014c2e:	687b      	ldr	r3, [r7, #4]
	}
 8014c30:	4618      	mov	r0, r3
 8014c32:	370c      	adds	r7, #12
 8014c34:	46bd      	mov	sp, r7
 8014c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c3a:	4770      	bx	lr
 8014c3c:	20004978 	.word	0x20004978
 8014c40:	20004994 	.word	0x20004994

08014c44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b086      	sub	sp, #24
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014c50:	2300      	movs	r3, #0
 8014c52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d06e      	beq.n	8014d38 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014c5a:	4b3a      	ldr	r3, [pc, #232]	; (8014d44 <xTaskPriorityDisinherit+0x100>)
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	693a      	ldr	r2, [r7, #16]
 8014c60:	429a      	cmp	r2, r3
 8014c62:	d00a      	beq.n	8014c7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8014c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c68:	f383 8811 	msr	BASEPRI, r3
 8014c6c:	f3bf 8f6f 	isb	sy
 8014c70:	f3bf 8f4f 	dsb	sy
 8014c74:	60fb      	str	r3, [r7, #12]
}
 8014c76:	bf00      	nop
 8014c78:	e7fe      	b.n	8014c78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014c7a:	693b      	ldr	r3, [r7, #16]
 8014c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d10a      	bne.n	8014c98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c86:	f383 8811 	msr	BASEPRI, r3
 8014c8a:	f3bf 8f6f 	isb	sy
 8014c8e:	f3bf 8f4f 	dsb	sy
 8014c92:	60bb      	str	r3, [r7, #8]
}
 8014c94:	bf00      	nop
 8014c96:	e7fe      	b.n	8014c96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8014c98:	693b      	ldr	r3, [r7, #16]
 8014c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014c9c:	1e5a      	subs	r2, r3, #1
 8014c9e:	693b      	ldr	r3, [r7, #16]
 8014ca0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014ca2:	693b      	ldr	r3, [r7, #16]
 8014ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ca6:	693b      	ldr	r3, [r7, #16]
 8014ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014caa:	429a      	cmp	r2, r3
 8014cac:	d044      	beq.n	8014d38 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014cae:	693b      	ldr	r3, [r7, #16]
 8014cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d140      	bne.n	8014d38 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014cb6:	693b      	ldr	r3, [r7, #16]
 8014cb8:	3304      	adds	r3, #4
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f7fe fc21 	bl	8013502 <uxListRemove>
 8014cc0:	4603      	mov	r3, r0
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d115      	bne.n	8014cf2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014cc6:	693b      	ldr	r3, [r7, #16]
 8014cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cca:	491f      	ldr	r1, [pc, #124]	; (8014d48 <xTaskPriorityDisinherit+0x104>)
 8014ccc:	4613      	mov	r3, r2
 8014cce:	009b      	lsls	r3, r3, #2
 8014cd0:	4413      	add	r3, r2
 8014cd2:	009b      	lsls	r3, r3, #2
 8014cd4:	440b      	add	r3, r1
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d10a      	bne.n	8014cf2 <xTaskPriorityDisinherit+0xae>
 8014cdc:	693b      	ldr	r3, [r7, #16]
 8014cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ce0:	2201      	movs	r2, #1
 8014ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8014ce6:	43da      	mvns	r2, r3
 8014ce8:	4b18      	ldr	r3, [pc, #96]	; (8014d4c <xTaskPriorityDisinherit+0x108>)
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	4013      	ands	r3, r2
 8014cee:	4a17      	ldr	r2, [pc, #92]	; (8014d4c <xTaskPriorityDisinherit+0x108>)
 8014cf0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014cf2:	693b      	ldr	r3, [r7, #16]
 8014cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014cf6:	693b      	ldr	r3, [r7, #16]
 8014cf8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014cfa:	693b      	ldr	r3, [r7, #16]
 8014cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cfe:	f1c3 0207 	rsb	r2, r3, #7
 8014d02:	693b      	ldr	r3, [r7, #16]
 8014d04:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014d06:	693b      	ldr	r3, [r7, #16]
 8014d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d0a:	2201      	movs	r2, #1
 8014d0c:	409a      	lsls	r2, r3
 8014d0e:	4b0f      	ldr	r3, [pc, #60]	; (8014d4c <xTaskPriorityDisinherit+0x108>)
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	4313      	orrs	r3, r2
 8014d14:	4a0d      	ldr	r2, [pc, #52]	; (8014d4c <xTaskPriorityDisinherit+0x108>)
 8014d16:	6013      	str	r3, [r2, #0]
 8014d18:	693b      	ldr	r3, [r7, #16]
 8014d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d1c:	4613      	mov	r3, r2
 8014d1e:	009b      	lsls	r3, r3, #2
 8014d20:	4413      	add	r3, r2
 8014d22:	009b      	lsls	r3, r3, #2
 8014d24:	4a08      	ldr	r2, [pc, #32]	; (8014d48 <xTaskPriorityDisinherit+0x104>)
 8014d26:	441a      	add	r2, r3
 8014d28:	693b      	ldr	r3, [r7, #16]
 8014d2a:	3304      	adds	r3, #4
 8014d2c:	4619      	mov	r1, r3
 8014d2e:	4610      	mov	r0, r2
 8014d30:	f7fe fb8a 	bl	8013448 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014d34:	2301      	movs	r3, #1
 8014d36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014d38:	697b      	ldr	r3, [r7, #20]
	}
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	3718      	adds	r7, #24
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	bd80      	pop	{r7, pc}
 8014d42:	bf00      	nop
 8014d44:	2000486c 	.word	0x2000486c
 8014d48:	20004870 	.word	0x20004870
 8014d4c:	20004974 	.word	0x20004974

08014d50 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b086      	sub	sp, #24
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	60f8      	str	r0, [r7, #12]
 8014d58:	60b9      	str	r1, [r7, #8]
 8014d5a:	607a      	str	r2, [r7, #4]
 8014d5c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8014d5e:	f000 fb71 	bl	8015444 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8014d62:	4b26      	ldr	r3, [pc, #152]	; (8014dfc <xTaskNotifyWait+0xac>)
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014d6a:	b2db      	uxtb	r3, r3
 8014d6c:	2b02      	cmp	r3, #2
 8014d6e:	d01a      	beq.n	8014da6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8014d70:	4b22      	ldr	r3, [pc, #136]	; (8014dfc <xTaskNotifyWait+0xac>)
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014d76:	68fa      	ldr	r2, [r7, #12]
 8014d78:	43d2      	mvns	r2, r2
 8014d7a:	400a      	ands	r2, r1
 8014d7c:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8014d7e:	4b1f      	ldr	r3, [pc, #124]	; (8014dfc <xTaskNotifyWait+0xac>)
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	2201      	movs	r2, #1
 8014d84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8014d88:	683b      	ldr	r3, [r7, #0]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d00b      	beq.n	8014da6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014d8e:	2101      	movs	r1, #1
 8014d90:	6838      	ldr	r0, [r7, #0]
 8014d92:	f000 f9c7 	bl	8015124 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8014d96:	4b1a      	ldr	r3, [pc, #104]	; (8014e00 <xTaskNotifyWait+0xb0>)
 8014d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d9c:	601a      	str	r2, [r3, #0]
 8014d9e:	f3bf 8f4f 	dsb	sy
 8014da2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014da6:	f000 fb7d 	bl	80154a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8014daa:	f000 fb4b 	bl	8015444 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d004      	beq.n	8014dbe <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8014db4:	4b11      	ldr	r3, [pc, #68]	; (8014dfc <xTaskNotifyWait+0xac>)
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8014dbe:	4b0f      	ldr	r3, [pc, #60]	; (8014dfc <xTaskNotifyWait+0xac>)
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014dc6:	b2db      	uxtb	r3, r3
 8014dc8:	2b02      	cmp	r3, #2
 8014dca:	d002      	beq.n	8014dd2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8014dcc:	2300      	movs	r3, #0
 8014dce:	617b      	str	r3, [r7, #20]
 8014dd0:	e008      	b.n	8014de4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8014dd2:	4b0a      	ldr	r3, [pc, #40]	; (8014dfc <xTaskNotifyWait+0xac>)
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014dd8:	68ba      	ldr	r2, [r7, #8]
 8014dda:	43d2      	mvns	r2, r2
 8014ddc:	400a      	ands	r2, r1
 8014dde:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8014de0:	2301      	movs	r3, #1
 8014de2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014de4:	4b05      	ldr	r3, [pc, #20]	; (8014dfc <xTaskNotifyWait+0xac>)
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	2200      	movs	r2, #0
 8014dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8014dee:	f000 fb59 	bl	80154a4 <vPortExitCritical>

		return xReturn;
 8014df2:	697b      	ldr	r3, [r7, #20]
	}
 8014df4:	4618      	mov	r0, r3
 8014df6:	3718      	adds	r7, #24
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	bd80      	pop	{r7, pc}
 8014dfc:	2000486c 	.word	0x2000486c
 8014e00:	e000ed04 	.word	0xe000ed04

08014e04 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b08a      	sub	sp, #40	; 0x28
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	60f8      	str	r0, [r7, #12]
 8014e0c:	60b9      	str	r1, [r7, #8]
 8014e0e:	603b      	str	r3, [r7, #0]
 8014e10:	4613      	mov	r3, r2
 8014e12:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8014e14:	2301      	movs	r3, #1
 8014e16:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d10a      	bne.n	8014e34 <xTaskGenericNotify+0x30>
	__asm volatile
 8014e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e22:	f383 8811 	msr	BASEPRI, r3
 8014e26:	f3bf 8f6f 	isb	sy
 8014e2a:	f3bf 8f4f 	dsb	sy
 8014e2e:	61bb      	str	r3, [r7, #24]
}
 8014e30:	bf00      	nop
 8014e32:	e7fe      	b.n	8014e32 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8014e38:	f000 fb04 	bl	8015444 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8014e3c:	683b      	ldr	r3, [r7, #0]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d003      	beq.n	8014e4a <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014e42:	6a3b      	ldr	r3, [r7, #32]
 8014e44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014e46:	683b      	ldr	r3, [r7, #0]
 8014e48:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014e4a:	6a3b      	ldr	r3, [r7, #32]
 8014e4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014e50:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014e52:	6a3b      	ldr	r3, [r7, #32]
 8014e54:	2202      	movs	r2, #2
 8014e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014e5a:	79fb      	ldrb	r3, [r7, #7]
 8014e5c:	2b04      	cmp	r3, #4
 8014e5e:	d828      	bhi.n	8014eb2 <xTaskGenericNotify+0xae>
 8014e60:	a201      	add	r2, pc, #4	; (adr r2, 8014e68 <xTaskGenericNotify+0x64>)
 8014e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e66:	bf00      	nop
 8014e68:	08014ed3 	.word	0x08014ed3
 8014e6c:	08014e7d 	.word	0x08014e7d
 8014e70:	08014e8b 	.word	0x08014e8b
 8014e74:	08014e97 	.word	0x08014e97
 8014e78:	08014e9f 	.word	0x08014e9f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014e7c:	6a3b      	ldr	r3, [r7, #32]
 8014e7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014e80:	68bb      	ldr	r3, [r7, #8]
 8014e82:	431a      	orrs	r2, r3
 8014e84:	6a3b      	ldr	r3, [r7, #32]
 8014e86:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014e88:	e026      	b.n	8014ed8 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014e8a:	6a3b      	ldr	r3, [r7, #32]
 8014e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014e8e:	1c5a      	adds	r2, r3, #1
 8014e90:	6a3b      	ldr	r3, [r7, #32]
 8014e92:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014e94:	e020      	b.n	8014ed8 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014e96:	6a3b      	ldr	r3, [r7, #32]
 8014e98:	68ba      	ldr	r2, [r7, #8]
 8014e9a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014e9c:	e01c      	b.n	8014ed8 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014e9e:	7ffb      	ldrb	r3, [r7, #31]
 8014ea0:	2b02      	cmp	r3, #2
 8014ea2:	d003      	beq.n	8014eac <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014ea4:	6a3b      	ldr	r3, [r7, #32]
 8014ea6:	68ba      	ldr	r2, [r7, #8]
 8014ea8:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014eaa:	e015      	b.n	8014ed8 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8014eac:	2300      	movs	r3, #0
 8014eae:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8014eb0:	e012      	b.n	8014ed8 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014eb2:	6a3b      	ldr	r3, [r7, #32]
 8014eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014eba:	d00c      	beq.n	8014ed6 <xTaskGenericNotify+0xd2>
	__asm volatile
 8014ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ec0:	f383 8811 	msr	BASEPRI, r3
 8014ec4:	f3bf 8f6f 	isb	sy
 8014ec8:	f3bf 8f4f 	dsb	sy
 8014ecc:	617b      	str	r3, [r7, #20]
}
 8014ece:	bf00      	nop
 8014ed0:	e7fe      	b.n	8014ed0 <xTaskGenericNotify+0xcc>
					break;
 8014ed2:	bf00      	nop
 8014ed4:	e000      	b.n	8014ed8 <xTaskGenericNotify+0xd4>

					break;
 8014ed6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014ed8:	7ffb      	ldrb	r3, [r7, #31]
 8014eda:	2b01      	cmp	r3, #1
 8014edc:	d139      	bne.n	8014f52 <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014ede:	6a3b      	ldr	r3, [r7, #32]
 8014ee0:	3304      	adds	r3, #4
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	f7fe fb0d 	bl	8013502 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8014ee8:	6a3b      	ldr	r3, [r7, #32]
 8014eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014eec:	2201      	movs	r2, #1
 8014eee:	409a      	lsls	r2, r3
 8014ef0:	4b1b      	ldr	r3, [pc, #108]	; (8014f60 <xTaskGenericNotify+0x15c>)
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	4313      	orrs	r3, r2
 8014ef6:	4a1a      	ldr	r2, [pc, #104]	; (8014f60 <xTaskGenericNotify+0x15c>)
 8014ef8:	6013      	str	r3, [r2, #0]
 8014efa:	6a3b      	ldr	r3, [r7, #32]
 8014efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014efe:	4613      	mov	r3, r2
 8014f00:	009b      	lsls	r3, r3, #2
 8014f02:	4413      	add	r3, r2
 8014f04:	009b      	lsls	r3, r3, #2
 8014f06:	4a17      	ldr	r2, [pc, #92]	; (8014f64 <xTaskGenericNotify+0x160>)
 8014f08:	441a      	add	r2, r3
 8014f0a:	6a3b      	ldr	r3, [r7, #32]
 8014f0c:	3304      	adds	r3, #4
 8014f0e:	4619      	mov	r1, r3
 8014f10:	4610      	mov	r0, r2
 8014f12:	f7fe fa99 	bl	8013448 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014f16:	6a3b      	ldr	r3, [r7, #32]
 8014f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d00a      	beq.n	8014f34 <xTaskGenericNotify+0x130>
	__asm volatile
 8014f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f22:	f383 8811 	msr	BASEPRI, r3
 8014f26:	f3bf 8f6f 	isb	sy
 8014f2a:	f3bf 8f4f 	dsb	sy
 8014f2e:	613b      	str	r3, [r7, #16]
}
 8014f30:	bf00      	nop
 8014f32:	e7fe      	b.n	8014f32 <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014f34:	6a3b      	ldr	r3, [r7, #32]
 8014f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f38:	4b0b      	ldr	r3, [pc, #44]	; (8014f68 <xTaskGenericNotify+0x164>)
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f3e:	429a      	cmp	r2, r3
 8014f40:	d907      	bls.n	8014f52 <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8014f42:	4b0a      	ldr	r3, [pc, #40]	; (8014f6c <xTaskGenericNotify+0x168>)
 8014f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f48:	601a      	str	r2, [r3, #0]
 8014f4a:	f3bf 8f4f 	dsb	sy
 8014f4e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014f52:	f000 faa7 	bl	80154a4 <vPortExitCritical>

		return xReturn;
 8014f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014f58:	4618      	mov	r0, r3
 8014f5a:	3728      	adds	r7, #40	; 0x28
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	bd80      	pop	{r7, pc}
 8014f60:	20004974 	.word	0x20004974
 8014f64:	20004870 	.word	0x20004870
 8014f68:	2000486c 	.word	0x2000486c
 8014f6c:	e000ed04 	.word	0xe000ed04

08014f70 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b08e      	sub	sp, #56	; 0x38
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	60f8      	str	r0, [r7, #12]
 8014f78:	60b9      	str	r1, [r7, #8]
 8014f7a:	603b      	str	r3, [r7, #0]
 8014f7c:	4613      	mov	r3, r2
 8014f7e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8014f80:	2301      	movs	r3, #1
 8014f82:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d10a      	bne.n	8014fa0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8014f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f8e:	f383 8811 	msr	BASEPRI, r3
 8014f92:	f3bf 8f6f 	isb	sy
 8014f96:	f3bf 8f4f 	dsb	sy
 8014f9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014f9c:	bf00      	nop
 8014f9e:	e7fe      	b.n	8014f9e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014fa0:	f000 fb32 	bl	8015608 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8014fa8:	f3ef 8211 	mrs	r2, BASEPRI
 8014fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fb0:	f383 8811 	msr	BASEPRI, r3
 8014fb4:	f3bf 8f6f 	isb	sy
 8014fb8:	f3bf 8f4f 	dsb	sy
 8014fbc:	623a      	str	r2, [r7, #32]
 8014fbe:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8014fc0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8014fc4:	683b      	ldr	r3, [r7, #0]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d003      	beq.n	8014fd2 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014fce:	683b      	ldr	r3, [r7, #0]
 8014fd0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014fd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fde:	2202      	movs	r2, #2
 8014fe0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014fe4:	79fb      	ldrb	r3, [r7, #7]
 8014fe6:	2b04      	cmp	r3, #4
 8014fe8:	d828      	bhi.n	801503c <xTaskGenericNotifyFromISR+0xcc>
 8014fea:	a201      	add	r2, pc, #4	; (adr r2, 8014ff0 <xTaskGenericNotifyFromISR+0x80>)
 8014fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ff0:	0801505d 	.word	0x0801505d
 8014ff4:	08015005 	.word	0x08015005
 8014ff8:	08015013 	.word	0x08015013
 8014ffc:	0801501f 	.word	0x0801501f
 8015000:	08015027 	.word	0x08015027
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8015004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015006:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015008:	68bb      	ldr	r3, [r7, #8]
 801500a:	431a      	orrs	r2, r3
 801500c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801500e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8015010:	e027      	b.n	8015062 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8015012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015016:	1c5a      	adds	r2, r3, #1
 8015018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801501a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801501c:	e021      	b.n	8015062 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015020:	68ba      	ldr	r2, [r7, #8]
 8015022:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8015024:	e01d      	b.n	8015062 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8015026:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801502a:	2b02      	cmp	r3, #2
 801502c:	d003      	beq.n	8015036 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015030:	68ba      	ldr	r2, [r7, #8]
 8015032:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8015034:	e015      	b.n	8015062 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8015036:	2300      	movs	r3, #0
 8015038:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801503a:	e012      	b.n	8015062 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801503e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015044:	d00c      	beq.n	8015060 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8015046:	f04f 0350 	mov.w	r3, #80	; 0x50
 801504a:	f383 8811 	msr	BASEPRI, r3
 801504e:	f3bf 8f6f 	isb	sy
 8015052:	f3bf 8f4f 	dsb	sy
 8015056:	61bb      	str	r3, [r7, #24]
}
 8015058:	bf00      	nop
 801505a:	e7fe      	b.n	801505a <xTaskGenericNotifyFromISR+0xea>
					break;
 801505c:	bf00      	nop
 801505e:	e000      	b.n	8015062 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8015060:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8015062:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015066:	2b01      	cmp	r3, #1
 8015068:	d145      	bne.n	80150f6 <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801506c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801506e:	2b00      	cmp	r3, #0
 8015070:	d00a      	beq.n	8015088 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8015072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015076:	f383 8811 	msr	BASEPRI, r3
 801507a:	f3bf 8f6f 	isb	sy
 801507e:	f3bf 8f4f 	dsb	sy
 8015082:	617b      	str	r3, [r7, #20]
}
 8015084:	bf00      	nop
 8015086:	e7fe      	b.n	8015086 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015088:	4b20      	ldr	r3, [pc, #128]	; (801510c <xTaskGenericNotifyFromISR+0x19c>)
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d11c      	bne.n	80150ca <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015092:	3304      	adds	r3, #4
 8015094:	4618      	mov	r0, r3
 8015096:	f7fe fa34 	bl	8013502 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801509c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801509e:	2201      	movs	r2, #1
 80150a0:	409a      	lsls	r2, r3
 80150a2:	4b1b      	ldr	r3, [pc, #108]	; (8015110 <xTaskGenericNotifyFromISR+0x1a0>)
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	4313      	orrs	r3, r2
 80150a8:	4a19      	ldr	r2, [pc, #100]	; (8015110 <xTaskGenericNotifyFromISR+0x1a0>)
 80150aa:	6013      	str	r3, [r2, #0]
 80150ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150b0:	4613      	mov	r3, r2
 80150b2:	009b      	lsls	r3, r3, #2
 80150b4:	4413      	add	r3, r2
 80150b6:	009b      	lsls	r3, r3, #2
 80150b8:	4a16      	ldr	r2, [pc, #88]	; (8015114 <xTaskGenericNotifyFromISR+0x1a4>)
 80150ba:	441a      	add	r2, r3
 80150bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150be:	3304      	adds	r3, #4
 80150c0:	4619      	mov	r1, r3
 80150c2:	4610      	mov	r0, r2
 80150c4:	f7fe f9c0 	bl	8013448 <vListInsertEnd>
 80150c8:	e005      	b.n	80150d6 <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80150ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150cc:	3318      	adds	r3, #24
 80150ce:	4619      	mov	r1, r3
 80150d0:	4811      	ldr	r0, [pc, #68]	; (8015118 <xTaskGenericNotifyFromISR+0x1a8>)
 80150d2:	f7fe f9b9 	bl	8013448 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80150d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150da:	4b10      	ldr	r3, [pc, #64]	; (801511c <xTaskGenericNotifyFromISR+0x1ac>)
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150e0:	429a      	cmp	r2, r3
 80150e2:	d908      	bls.n	80150f6 <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80150e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d002      	beq.n	80150f0 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80150ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80150ec:	2201      	movs	r2, #1
 80150ee:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80150f0:	4b0b      	ldr	r3, [pc, #44]	; (8015120 <xTaskGenericNotifyFromISR+0x1b0>)
 80150f2:	2201      	movs	r2, #1
 80150f4:	601a      	str	r2, [r3, #0]
 80150f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80150fa:	693b      	ldr	r3, [r7, #16]
 80150fc:	f383 8811 	msr	BASEPRI, r3
}
 8015100:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8015102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8015104:	4618      	mov	r0, r3
 8015106:	3738      	adds	r7, #56	; 0x38
 8015108:	46bd      	mov	sp, r7
 801510a:	bd80      	pop	{r7, pc}
 801510c:	20004994 	.word	0x20004994
 8015110:	20004974 	.word	0x20004974
 8015114:	20004870 	.word	0x20004870
 8015118:	2000492c 	.word	0x2000492c
 801511c:	2000486c 	.word	0x2000486c
 8015120:	20004980 	.word	0x20004980

08015124 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b084      	sub	sp, #16
 8015128:	af00      	add	r7, sp, #0
 801512a:	6078      	str	r0, [r7, #4]
 801512c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801512e:	4b29      	ldr	r3, [pc, #164]	; (80151d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015134:	4b28      	ldr	r3, [pc, #160]	; (80151d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	3304      	adds	r3, #4
 801513a:	4618      	mov	r0, r3
 801513c:	f7fe f9e1 	bl	8013502 <uxListRemove>
 8015140:	4603      	mov	r3, r0
 8015142:	2b00      	cmp	r3, #0
 8015144:	d10b      	bne.n	801515e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8015146:	4b24      	ldr	r3, [pc, #144]	; (80151d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801514c:	2201      	movs	r2, #1
 801514e:	fa02 f303 	lsl.w	r3, r2, r3
 8015152:	43da      	mvns	r2, r3
 8015154:	4b21      	ldr	r3, [pc, #132]	; (80151dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	4013      	ands	r3, r2
 801515a:	4a20      	ldr	r2, [pc, #128]	; (80151dc <prvAddCurrentTaskToDelayedList+0xb8>)
 801515c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015164:	d10a      	bne.n	801517c <prvAddCurrentTaskToDelayedList+0x58>
 8015166:	683b      	ldr	r3, [r7, #0]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d007      	beq.n	801517c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801516c:	4b1a      	ldr	r3, [pc, #104]	; (80151d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	3304      	adds	r3, #4
 8015172:	4619      	mov	r1, r3
 8015174:	481a      	ldr	r0, [pc, #104]	; (80151e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8015176:	f7fe f967 	bl	8013448 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801517a:	e026      	b.n	80151ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801517c:	68fa      	ldr	r2, [r7, #12]
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	4413      	add	r3, r2
 8015182:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015184:	4b14      	ldr	r3, [pc, #80]	; (80151d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	68ba      	ldr	r2, [r7, #8]
 801518a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801518c:	68ba      	ldr	r2, [r7, #8]
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	429a      	cmp	r2, r3
 8015192:	d209      	bcs.n	80151a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015194:	4b13      	ldr	r3, [pc, #76]	; (80151e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8015196:	681a      	ldr	r2, [r3, #0]
 8015198:	4b0f      	ldr	r3, [pc, #60]	; (80151d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	3304      	adds	r3, #4
 801519e:	4619      	mov	r1, r3
 80151a0:	4610      	mov	r0, r2
 80151a2:	f7fe f975 	bl	8013490 <vListInsert>
}
 80151a6:	e010      	b.n	80151ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80151a8:	4b0f      	ldr	r3, [pc, #60]	; (80151e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80151aa:	681a      	ldr	r2, [r3, #0]
 80151ac:	4b0a      	ldr	r3, [pc, #40]	; (80151d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	3304      	adds	r3, #4
 80151b2:	4619      	mov	r1, r3
 80151b4:	4610      	mov	r0, r2
 80151b6:	f7fe f96b 	bl	8013490 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80151ba:	4b0c      	ldr	r3, [pc, #48]	; (80151ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	68ba      	ldr	r2, [r7, #8]
 80151c0:	429a      	cmp	r2, r3
 80151c2:	d202      	bcs.n	80151ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80151c4:	4a09      	ldr	r2, [pc, #36]	; (80151ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80151c6:	68bb      	ldr	r3, [r7, #8]
 80151c8:	6013      	str	r3, [r2, #0]
}
 80151ca:	bf00      	nop
 80151cc:	3710      	adds	r7, #16
 80151ce:	46bd      	mov	sp, r7
 80151d0:	bd80      	pop	{r7, pc}
 80151d2:	bf00      	nop
 80151d4:	20004970 	.word	0x20004970
 80151d8:	2000486c 	.word	0x2000486c
 80151dc:	20004974 	.word	0x20004974
 80151e0:	20004958 	.word	0x20004958
 80151e4:	20004928 	.word	0x20004928
 80151e8:	20004924 	.word	0x20004924
 80151ec:	2000498c 	.word	0x2000498c

080151f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80151f0:	b480      	push	{r7}
 80151f2:	b085      	sub	sp, #20
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	60f8      	str	r0, [r7, #12]
 80151f8:	60b9      	str	r1, [r7, #8]
 80151fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	3b04      	subs	r3, #4
 8015200:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	3b04      	subs	r3, #4
 801520e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015210:	68bb      	ldr	r3, [r7, #8]
 8015212:	f023 0201 	bic.w	r2, r3, #1
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	3b04      	subs	r3, #4
 801521e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015220:	4a0c      	ldr	r2, [pc, #48]	; (8015254 <pxPortInitialiseStack+0x64>)
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	3b14      	subs	r3, #20
 801522a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801522c:	687a      	ldr	r2, [r7, #4]
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	3b04      	subs	r3, #4
 8015236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	f06f 0202 	mvn.w	r2, #2
 801523e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	3b20      	subs	r3, #32
 8015244:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015246:	68fb      	ldr	r3, [r7, #12]
}
 8015248:	4618      	mov	r0, r3
 801524a:	3714      	adds	r7, #20
 801524c:	46bd      	mov	sp, r7
 801524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015252:	4770      	bx	lr
 8015254:	08015259 	.word	0x08015259

08015258 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015258:	b480      	push	{r7}
 801525a:	b085      	sub	sp, #20
 801525c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801525e:	2300      	movs	r3, #0
 8015260:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015262:	4b12      	ldr	r3, [pc, #72]	; (80152ac <prvTaskExitError+0x54>)
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	f1b3 3fff 	cmp.w	r3, #4294967295
 801526a:	d00a      	beq.n	8015282 <prvTaskExitError+0x2a>
	__asm volatile
 801526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015270:	f383 8811 	msr	BASEPRI, r3
 8015274:	f3bf 8f6f 	isb	sy
 8015278:	f3bf 8f4f 	dsb	sy
 801527c:	60fb      	str	r3, [r7, #12]
}
 801527e:	bf00      	nop
 8015280:	e7fe      	b.n	8015280 <prvTaskExitError+0x28>
	__asm volatile
 8015282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015286:	f383 8811 	msr	BASEPRI, r3
 801528a:	f3bf 8f6f 	isb	sy
 801528e:	f3bf 8f4f 	dsb	sy
 8015292:	60bb      	str	r3, [r7, #8]
}
 8015294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015296:	bf00      	nop
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d0fc      	beq.n	8015298 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801529e:	bf00      	nop
 80152a0:	bf00      	nop
 80152a2:	3714      	adds	r7, #20
 80152a4:	46bd      	mov	sp, r7
 80152a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152aa:	4770      	bx	lr
 80152ac:	200041a8 	.word	0x200041a8

080152b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80152b0:	4b07      	ldr	r3, [pc, #28]	; (80152d0 <pxCurrentTCBConst2>)
 80152b2:	6819      	ldr	r1, [r3, #0]
 80152b4:	6808      	ldr	r0, [r1, #0]
 80152b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152ba:	f380 8809 	msr	PSP, r0
 80152be:	f3bf 8f6f 	isb	sy
 80152c2:	f04f 0000 	mov.w	r0, #0
 80152c6:	f380 8811 	msr	BASEPRI, r0
 80152ca:	4770      	bx	lr
 80152cc:	f3af 8000 	nop.w

080152d0 <pxCurrentTCBConst2>:
 80152d0:	2000486c 	.word	0x2000486c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80152d4:	bf00      	nop
 80152d6:	bf00      	nop

080152d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80152d8:	4808      	ldr	r0, [pc, #32]	; (80152fc <prvPortStartFirstTask+0x24>)
 80152da:	6800      	ldr	r0, [r0, #0]
 80152dc:	6800      	ldr	r0, [r0, #0]
 80152de:	f380 8808 	msr	MSP, r0
 80152e2:	f04f 0000 	mov.w	r0, #0
 80152e6:	f380 8814 	msr	CONTROL, r0
 80152ea:	b662      	cpsie	i
 80152ec:	b661      	cpsie	f
 80152ee:	f3bf 8f4f 	dsb	sy
 80152f2:	f3bf 8f6f 	isb	sy
 80152f6:	df00      	svc	0
 80152f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80152fa:	bf00      	nop
 80152fc:	e000ed08 	.word	0xe000ed08

08015300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015300:	b580      	push	{r7, lr}
 8015302:	b086      	sub	sp, #24
 8015304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015306:	4b46      	ldr	r3, [pc, #280]	; (8015420 <xPortStartScheduler+0x120>)
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	4a46      	ldr	r2, [pc, #280]	; (8015424 <xPortStartScheduler+0x124>)
 801530c:	4293      	cmp	r3, r2
 801530e:	d10a      	bne.n	8015326 <xPortStartScheduler+0x26>
	__asm volatile
 8015310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015314:	f383 8811 	msr	BASEPRI, r3
 8015318:	f3bf 8f6f 	isb	sy
 801531c:	f3bf 8f4f 	dsb	sy
 8015320:	613b      	str	r3, [r7, #16]
}
 8015322:	bf00      	nop
 8015324:	e7fe      	b.n	8015324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015326:	4b3e      	ldr	r3, [pc, #248]	; (8015420 <xPortStartScheduler+0x120>)
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	4a3f      	ldr	r2, [pc, #252]	; (8015428 <xPortStartScheduler+0x128>)
 801532c:	4293      	cmp	r3, r2
 801532e:	d10a      	bne.n	8015346 <xPortStartScheduler+0x46>
	__asm volatile
 8015330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015334:	f383 8811 	msr	BASEPRI, r3
 8015338:	f3bf 8f6f 	isb	sy
 801533c:	f3bf 8f4f 	dsb	sy
 8015340:	60fb      	str	r3, [r7, #12]
}
 8015342:	bf00      	nop
 8015344:	e7fe      	b.n	8015344 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015346:	4b39      	ldr	r3, [pc, #228]	; (801542c <xPortStartScheduler+0x12c>)
 8015348:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801534a:	697b      	ldr	r3, [r7, #20]
 801534c:	781b      	ldrb	r3, [r3, #0]
 801534e:	b2db      	uxtb	r3, r3
 8015350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015352:	697b      	ldr	r3, [r7, #20]
 8015354:	22ff      	movs	r2, #255	; 0xff
 8015356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015358:	697b      	ldr	r3, [r7, #20]
 801535a:	781b      	ldrb	r3, [r3, #0]
 801535c:	b2db      	uxtb	r3, r3
 801535e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015360:	78fb      	ldrb	r3, [r7, #3]
 8015362:	b2db      	uxtb	r3, r3
 8015364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015368:	b2da      	uxtb	r2, r3
 801536a:	4b31      	ldr	r3, [pc, #196]	; (8015430 <xPortStartScheduler+0x130>)
 801536c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801536e:	4b31      	ldr	r3, [pc, #196]	; (8015434 <xPortStartScheduler+0x134>)
 8015370:	2207      	movs	r2, #7
 8015372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015374:	e009      	b.n	801538a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015376:	4b2f      	ldr	r3, [pc, #188]	; (8015434 <xPortStartScheduler+0x134>)
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	3b01      	subs	r3, #1
 801537c:	4a2d      	ldr	r2, [pc, #180]	; (8015434 <xPortStartScheduler+0x134>)
 801537e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015380:	78fb      	ldrb	r3, [r7, #3]
 8015382:	b2db      	uxtb	r3, r3
 8015384:	005b      	lsls	r3, r3, #1
 8015386:	b2db      	uxtb	r3, r3
 8015388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801538a:	78fb      	ldrb	r3, [r7, #3]
 801538c:	b2db      	uxtb	r3, r3
 801538e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015392:	2b80      	cmp	r3, #128	; 0x80
 8015394:	d0ef      	beq.n	8015376 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015396:	4b27      	ldr	r3, [pc, #156]	; (8015434 <xPortStartScheduler+0x134>)
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	f1c3 0307 	rsb	r3, r3, #7
 801539e:	2b04      	cmp	r3, #4
 80153a0:	d00a      	beq.n	80153b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80153a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153a6:	f383 8811 	msr	BASEPRI, r3
 80153aa:	f3bf 8f6f 	isb	sy
 80153ae:	f3bf 8f4f 	dsb	sy
 80153b2:	60bb      	str	r3, [r7, #8]
}
 80153b4:	bf00      	nop
 80153b6:	e7fe      	b.n	80153b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80153b8:	4b1e      	ldr	r3, [pc, #120]	; (8015434 <xPortStartScheduler+0x134>)
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	021b      	lsls	r3, r3, #8
 80153be:	4a1d      	ldr	r2, [pc, #116]	; (8015434 <xPortStartScheduler+0x134>)
 80153c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80153c2:	4b1c      	ldr	r3, [pc, #112]	; (8015434 <xPortStartScheduler+0x134>)
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80153ca:	4a1a      	ldr	r2, [pc, #104]	; (8015434 <xPortStartScheduler+0x134>)
 80153cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	b2da      	uxtb	r2, r3
 80153d2:	697b      	ldr	r3, [r7, #20]
 80153d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80153d6:	4b18      	ldr	r3, [pc, #96]	; (8015438 <xPortStartScheduler+0x138>)
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	4a17      	ldr	r2, [pc, #92]	; (8015438 <xPortStartScheduler+0x138>)
 80153dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80153e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80153e2:	4b15      	ldr	r3, [pc, #84]	; (8015438 <xPortStartScheduler+0x138>)
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	4a14      	ldr	r2, [pc, #80]	; (8015438 <xPortStartScheduler+0x138>)
 80153e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80153ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80153ee:	f000 f8dd 	bl	80155ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80153f2:	4b12      	ldr	r3, [pc, #72]	; (801543c <xPortStartScheduler+0x13c>)
 80153f4:	2200      	movs	r2, #0
 80153f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80153f8:	f000 f8fc 	bl	80155f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80153fc:	4b10      	ldr	r3, [pc, #64]	; (8015440 <xPortStartScheduler+0x140>)
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	4a0f      	ldr	r2, [pc, #60]	; (8015440 <xPortStartScheduler+0x140>)
 8015402:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015406:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015408:	f7ff ff66 	bl	80152d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801540c:	f7ff f9c0 	bl	8014790 <vTaskSwitchContext>
	prvTaskExitError();
 8015410:	f7ff ff22 	bl	8015258 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015414:	2300      	movs	r3, #0
}
 8015416:	4618      	mov	r0, r3
 8015418:	3718      	adds	r7, #24
 801541a:	46bd      	mov	sp, r7
 801541c:	bd80      	pop	{r7, pc}
 801541e:	bf00      	nop
 8015420:	e000ed00 	.word	0xe000ed00
 8015424:	410fc271 	.word	0x410fc271
 8015428:	410fc270 	.word	0x410fc270
 801542c:	e000e400 	.word	0xe000e400
 8015430:	20004998 	.word	0x20004998
 8015434:	2000499c 	.word	0x2000499c
 8015438:	e000ed20 	.word	0xe000ed20
 801543c:	200041a8 	.word	0x200041a8
 8015440:	e000ef34 	.word	0xe000ef34

08015444 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015444:	b480      	push	{r7}
 8015446:	b083      	sub	sp, #12
 8015448:	af00      	add	r7, sp, #0
	__asm volatile
 801544a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801544e:	f383 8811 	msr	BASEPRI, r3
 8015452:	f3bf 8f6f 	isb	sy
 8015456:	f3bf 8f4f 	dsb	sy
 801545a:	607b      	str	r3, [r7, #4]
}
 801545c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801545e:	4b0f      	ldr	r3, [pc, #60]	; (801549c <vPortEnterCritical+0x58>)
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	3301      	adds	r3, #1
 8015464:	4a0d      	ldr	r2, [pc, #52]	; (801549c <vPortEnterCritical+0x58>)
 8015466:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015468:	4b0c      	ldr	r3, [pc, #48]	; (801549c <vPortEnterCritical+0x58>)
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	2b01      	cmp	r3, #1
 801546e:	d10f      	bne.n	8015490 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015470:	4b0b      	ldr	r3, [pc, #44]	; (80154a0 <vPortEnterCritical+0x5c>)
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	b2db      	uxtb	r3, r3
 8015476:	2b00      	cmp	r3, #0
 8015478:	d00a      	beq.n	8015490 <vPortEnterCritical+0x4c>
	__asm volatile
 801547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801547e:	f383 8811 	msr	BASEPRI, r3
 8015482:	f3bf 8f6f 	isb	sy
 8015486:	f3bf 8f4f 	dsb	sy
 801548a:	603b      	str	r3, [r7, #0]
}
 801548c:	bf00      	nop
 801548e:	e7fe      	b.n	801548e <vPortEnterCritical+0x4a>
	}
}
 8015490:	bf00      	nop
 8015492:	370c      	adds	r7, #12
 8015494:	46bd      	mov	sp, r7
 8015496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801549a:	4770      	bx	lr
 801549c:	200041a8 	.word	0x200041a8
 80154a0:	e000ed04 	.word	0xe000ed04

080154a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80154a4:	b480      	push	{r7}
 80154a6:	b083      	sub	sp, #12
 80154a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80154aa:	4b12      	ldr	r3, [pc, #72]	; (80154f4 <vPortExitCritical+0x50>)
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d10a      	bne.n	80154c8 <vPortExitCritical+0x24>
	__asm volatile
 80154b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154b6:	f383 8811 	msr	BASEPRI, r3
 80154ba:	f3bf 8f6f 	isb	sy
 80154be:	f3bf 8f4f 	dsb	sy
 80154c2:	607b      	str	r3, [r7, #4]
}
 80154c4:	bf00      	nop
 80154c6:	e7fe      	b.n	80154c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80154c8:	4b0a      	ldr	r3, [pc, #40]	; (80154f4 <vPortExitCritical+0x50>)
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	3b01      	subs	r3, #1
 80154ce:	4a09      	ldr	r2, [pc, #36]	; (80154f4 <vPortExitCritical+0x50>)
 80154d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80154d2:	4b08      	ldr	r3, [pc, #32]	; (80154f4 <vPortExitCritical+0x50>)
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d105      	bne.n	80154e6 <vPortExitCritical+0x42>
 80154da:	2300      	movs	r3, #0
 80154dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80154de:	683b      	ldr	r3, [r7, #0]
 80154e0:	f383 8811 	msr	BASEPRI, r3
}
 80154e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80154e6:	bf00      	nop
 80154e8:	370c      	adds	r7, #12
 80154ea:	46bd      	mov	sp, r7
 80154ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f0:	4770      	bx	lr
 80154f2:	bf00      	nop
 80154f4:	200041a8 	.word	0x200041a8
	...

08015500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015500:	f3ef 8009 	mrs	r0, PSP
 8015504:	f3bf 8f6f 	isb	sy
 8015508:	4b15      	ldr	r3, [pc, #84]	; (8015560 <pxCurrentTCBConst>)
 801550a:	681a      	ldr	r2, [r3, #0]
 801550c:	f01e 0f10 	tst.w	lr, #16
 8015510:	bf08      	it	eq
 8015512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801551a:	6010      	str	r0, [r2, #0]
 801551c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015520:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015524:	f380 8811 	msr	BASEPRI, r0
 8015528:	f3bf 8f4f 	dsb	sy
 801552c:	f3bf 8f6f 	isb	sy
 8015530:	f7ff f92e 	bl	8014790 <vTaskSwitchContext>
 8015534:	f04f 0000 	mov.w	r0, #0
 8015538:	f380 8811 	msr	BASEPRI, r0
 801553c:	bc09      	pop	{r0, r3}
 801553e:	6819      	ldr	r1, [r3, #0]
 8015540:	6808      	ldr	r0, [r1, #0]
 8015542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015546:	f01e 0f10 	tst.w	lr, #16
 801554a:	bf08      	it	eq
 801554c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015550:	f380 8809 	msr	PSP, r0
 8015554:	f3bf 8f6f 	isb	sy
 8015558:	4770      	bx	lr
 801555a:	bf00      	nop
 801555c:	f3af 8000 	nop.w

08015560 <pxCurrentTCBConst>:
 8015560:	2000486c 	.word	0x2000486c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015564:	bf00      	nop
 8015566:	bf00      	nop

08015568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015568:	b580      	push	{r7, lr}
 801556a:	b082      	sub	sp, #8
 801556c:	af00      	add	r7, sp, #0
	__asm volatile
 801556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015572:	f383 8811 	msr	BASEPRI, r3
 8015576:	f3bf 8f6f 	isb	sy
 801557a:	f3bf 8f4f 	dsb	sy
 801557e:	607b      	str	r3, [r7, #4]
}
 8015580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015582:	f7ff f84d 	bl	8014620 <xTaskIncrementTick>
 8015586:	4603      	mov	r3, r0
 8015588:	2b00      	cmp	r3, #0
 801558a:	d003      	beq.n	8015594 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801558c:	4b06      	ldr	r3, [pc, #24]	; (80155a8 <SysTick_Handler+0x40>)
 801558e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015592:	601a      	str	r2, [r3, #0]
 8015594:	2300      	movs	r3, #0
 8015596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015598:	683b      	ldr	r3, [r7, #0]
 801559a:	f383 8811 	msr	BASEPRI, r3
}
 801559e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80155a0:	bf00      	nop
 80155a2:	3708      	adds	r7, #8
 80155a4:	46bd      	mov	sp, r7
 80155a6:	bd80      	pop	{r7, pc}
 80155a8:	e000ed04 	.word	0xe000ed04

080155ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80155ac:	b480      	push	{r7}
 80155ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80155b0:	4b0b      	ldr	r3, [pc, #44]	; (80155e0 <vPortSetupTimerInterrupt+0x34>)
 80155b2:	2200      	movs	r2, #0
 80155b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80155b6:	4b0b      	ldr	r3, [pc, #44]	; (80155e4 <vPortSetupTimerInterrupt+0x38>)
 80155b8:	2200      	movs	r2, #0
 80155ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80155bc:	4b0a      	ldr	r3, [pc, #40]	; (80155e8 <vPortSetupTimerInterrupt+0x3c>)
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	4a0a      	ldr	r2, [pc, #40]	; (80155ec <vPortSetupTimerInterrupt+0x40>)
 80155c2:	fba2 2303 	umull	r2, r3, r2, r3
 80155c6:	099b      	lsrs	r3, r3, #6
 80155c8:	4a09      	ldr	r2, [pc, #36]	; (80155f0 <vPortSetupTimerInterrupt+0x44>)
 80155ca:	3b01      	subs	r3, #1
 80155cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80155ce:	4b04      	ldr	r3, [pc, #16]	; (80155e0 <vPortSetupTimerInterrupt+0x34>)
 80155d0:	2207      	movs	r2, #7
 80155d2:	601a      	str	r2, [r3, #0]
}
 80155d4:	bf00      	nop
 80155d6:	46bd      	mov	sp, r7
 80155d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155dc:	4770      	bx	lr
 80155de:	bf00      	nop
 80155e0:	e000e010 	.word	0xe000e010
 80155e4:	e000e018 	.word	0xe000e018
 80155e8:	2000408c 	.word	0x2000408c
 80155ec:	10624dd3 	.word	0x10624dd3
 80155f0:	e000e014 	.word	0xe000e014

080155f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80155f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015604 <vPortEnableVFP+0x10>
 80155f8:	6801      	ldr	r1, [r0, #0]
 80155fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80155fe:	6001      	str	r1, [r0, #0]
 8015600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015602:	bf00      	nop
 8015604:	e000ed88 	.word	0xe000ed88

08015608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015608:	b480      	push	{r7}
 801560a:	b085      	sub	sp, #20
 801560c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801560e:	f3ef 8305 	mrs	r3, IPSR
 8015612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	2b0f      	cmp	r3, #15
 8015618:	d914      	bls.n	8015644 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801561a:	4a17      	ldr	r2, [pc, #92]	; (8015678 <vPortValidateInterruptPriority+0x70>)
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	4413      	add	r3, r2
 8015620:	781b      	ldrb	r3, [r3, #0]
 8015622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015624:	4b15      	ldr	r3, [pc, #84]	; (801567c <vPortValidateInterruptPriority+0x74>)
 8015626:	781b      	ldrb	r3, [r3, #0]
 8015628:	7afa      	ldrb	r2, [r7, #11]
 801562a:	429a      	cmp	r2, r3
 801562c:	d20a      	bcs.n	8015644 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801562e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015632:	f383 8811 	msr	BASEPRI, r3
 8015636:	f3bf 8f6f 	isb	sy
 801563a:	f3bf 8f4f 	dsb	sy
 801563e:	607b      	str	r3, [r7, #4]
}
 8015640:	bf00      	nop
 8015642:	e7fe      	b.n	8015642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015644:	4b0e      	ldr	r3, [pc, #56]	; (8015680 <vPortValidateInterruptPriority+0x78>)
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801564c:	4b0d      	ldr	r3, [pc, #52]	; (8015684 <vPortValidateInterruptPriority+0x7c>)
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	429a      	cmp	r2, r3
 8015652:	d90a      	bls.n	801566a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015658:	f383 8811 	msr	BASEPRI, r3
 801565c:	f3bf 8f6f 	isb	sy
 8015660:	f3bf 8f4f 	dsb	sy
 8015664:	603b      	str	r3, [r7, #0]
}
 8015666:	bf00      	nop
 8015668:	e7fe      	b.n	8015668 <vPortValidateInterruptPriority+0x60>
	}
 801566a:	bf00      	nop
 801566c:	3714      	adds	r7, #20
 801566e:	46bd      	mov	sp, r7
 8015670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015674:	4770      	bx	lr
 8015676:	bf00      	nop
 8015678:	e000e3f0 	.word	0xe000e3f0
 801567c:	20004998 	.word	0x20004998
 8015680:	e000ed0c 	.word	0xe000ed0c
 8015684:	2000499c 	.word	0x2000499c

08015688 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015688:	b580      	push	{r7, lr}
 801568a:	b08a      	sub	sp, #40	; 0x28
 801568c:	af00      	add	r7, sp, #0
 801568e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015690:	2300      	movs	r3, #0
 8015692:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015694:	f7fe ff1a 	bl	80144cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015698:	4b58      	ldr	r3, [pc, #352]	; (80157fc <pvPortMalloc+0x174>)
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	2b00      	cmp	r3, #0
 801569e:	d101      	bne.n	80156a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80156a0:	f000 f910 	bl	80158c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80156a4:	4b56      	ldr	r3, [pc, #344]	; (8015800 <pvPortMalloc+0x178>)
 80156a6:	681a      	ldr	r2, [r3, #0]
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	4013      	ands	r3, r2
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	f040 808e 	bne.w	80157ce <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d01d      	beq.n	80156f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80156b8:	2208      	movs	r2, #8
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	4413      	add	r3, r2
 80156be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	f003 0307 	and.w	r3, r3, #7
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d014      	beq.n	80156f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	f023 0307 	bic.w	r3, r3, #7
 80156d0:	3308      	adds	r3, #8
 80156d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	f003 0307 	and.w	r3, r3, #7
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d00a      	beq.n	80156f4 <pvPortMalloc+0x6c>
	__asm volatile
 80156de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156e2:	f383 8811 	msr	BASEPRI, r3
 80156e6:	f3bf 8f6f 	isb	sy
 80156ea:	f3bf 8f4f 	dsb	sy
 80156ee:	617b      	str	r3, [r7, #20]
}
 80156f0:	bf00      	nop
 80156f2:	e7fe      	b.n	80156f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d069      	beq.n	80157ce <pvPortMalloc+0x146>
 80156fa:	4b42      	ldr	r3, [pc, #264]	; (8015804 <pvPortMalloc+0x17c>)
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	687a      	ldr	r2, [r7, #4]
 8015700:	429a      	cmp	r2, r3
 8015702:	d864      	bhi.n	80157ce <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015704:	4b40      	ldr	r3, [pc, #256]	; (8015808 <pvPortMalloc+0x180>)
 8015706:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015708:	4b3f      	ldr	r3, [pc, #252]	; (8015808 <pvPortMalloc+0x180>)
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801570e:	e004      	b.n	801571a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015712:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801571c:	685b      	ldr	r3, [r3, #4]
 801571e:	687a      	ldr	r2, [r7, #4]
 8015720:	429a      	cmp	r2, r3
 8015722:	d903      	bls.n	801572c <pvPortMalloc+0xa4>
 8015724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	2b00      	cmp	r3, #0
 801572a:	d1f1      	bne.n	8015710 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801572c:	4b33      	ldr	r3, [pc, #204]	; (80157fc <pvPortMalloc+0x174>)
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015732:	429a      	cmp	r2, r3
 8015734:	d04b      	beq.n	80157ce <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015736:	6a3b      	ldr	r3, [r7, #32]
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	2208      	movs	r2, #8
 801573c:	4413      	add	r3, r2
 801573e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015742:	681a      	ldr	r2, [r3, #0]
 8015744:	6a3b      	ldr	r3, [r7, #32]
 8015746:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801574a:	685a      	ldr	r2, [r3, #4]
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	1ad2      	subs	r2, r2, r3
 8015750:	2308      	movs	r3, #8
 8015752:	005b      	lsls	r3, r3, #1
 8015754:	429a      	cmp	r2, r3
 8015756:	d91f      	bls.n	8015798 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	4413      	add	r3, r2
 801575e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015760:	69bb      	ldr	r3, [r7, #24]
 8015762:	f003 0307 	and.w	r3, r3, #7
 8015766:	2b00      	cmp	r3, #0
 8015768:	d00a      	beq.n	8015780 <pvPortMalloc+0xf8>
	__asm volatile
 801576a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801576e:	f383 8811 	msr	BASEPRI, r3
 8015772:	f3bf 8f6f 	isb	sy
 8015776:	f3bf 8f4f 	dsb	sy
 801577a:	613b      	str	r3, [r7, #16]
}
 801577c:	bf00      	nop
 801577e:	e7fe      	b.n	801577e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015782:	685a      	ldr	r2, [r3, #4]
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	1ad2      	subs	r2, r2, r3
 8015788:	69bb      	ldr	r3, [r7, #24]
 801578a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801578e:	687a      	ldr	r2, [r7, #4]
 8015790:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015792:	69b8      	ldr	r0, [r7, #24]
 8015794:	f000 f8f8 	bl	8015988 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015798:	4b1a      	ldr	r3, [pc, #104]	; (8015804 <pvPortMalloc+0x17c>)
 801579a:	681a      	ldr	r2, [r3, #0]
 801579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801579e:	685b      	ldr	r3, [r3, #4]
 80157a0:	1ad3      	subs	r3, r2, r3
 80157a2:	4a18      	ldr	r2, [pc, #96]	; (8015804 <pvPortMalloc+0x17c>)
 80157a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80157a6:	4b17      	ldr	r3, [pc, #92]	; (8015804 <pvPortMalloc+0x17c>)
 80157a8:	681a      	ldr	r2, [r3, #0]
 80157aa:	4b18      	ldr	r3, [pc, #96]	; (801580c <pvPortMalloc+0x184>)
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	429a      	cmp	r2, r3
 80157b0:	d203      	bcs.n	80157ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80157b2:	4b14      	ldr	r3, [pc, #80]	; (8015804 <pvPortMalloc+0x17c>)
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	4a15      	ldr	r2, [pc, #84]	; (801580c <pvPortMalloc+0x184>)
 80157b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80157ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157bc:	685a      	ldr	r2, [r3, #4]
 80157be:	4b10      	ldr	r3, [pc, #64]	; (8015800 <pvPortMalloc+0x178>)
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	431a      	orrs	r2, r3
 80157c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80157c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157ca:	2200      	movs	r2, #0
 80157cc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80157ce:	f7fe fe8b 	bl	80144e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80157d2:	69fb      	ldr	r3, [r7, #28]
 80157d4:	f003 0307 	and.w	r3, r3, #7
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d00a      	beq.n	80157f2 <pvPortMalloc+0x16a>
	__asm volatile
 80157dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157e0:	f383 8811 	msr	BASEPRI, r3
 80157e4:	f3bf 8f6f 	isb	sy
 80157e8:	f3bf 8f4f 	dsb	sy
 80157ec:	60fb      	str	r3, [r7, #12]
}
 80157ee:	bf00      	nop
 80157f0:	e7fe      	b.n	80157f0 <pvPortMalloc+0x168>
	return pvReturn;
 80157f2:	69fb      	ldr	r3, [r7, #28]
}
 80157f4:	4618      	mov	r0, r3
 80157f6:	3728      	adds	r7, #40	; 0x28
 80157f8:	46bd      	mov	sp, r7
 80157fa:	bd80      	pop	{r7, pc}
 80157fc:	200085a8 	.word	0x200085a8
 8015800:	200085b4 	.word	0x200085b4
 8015804:	200085ac 	.word	0x200085ac
 8015808:	200085a0 	.word	0x200085a0
 801580c:	200085b0 	.word	0x200085b0

08015810 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015810:	b580      	push	{r7, lr}
 8015812:	b086      	sub	sp, #24
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d048      	beq.n	80158b4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015822:	2308      	movs	r3, #8
 8015824:	425b      	negs	r3, r3
 8015826:	697a      	ldr	r2, [r7, #20]
 8015828:	4413      	add	r3, r2
 801582a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801582c:	697b      	ldr	r3, [r7, #20]
 801582e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015830:	693b      	ldr	r3, [r7, #16]
 8015832:	685a      	ldr	r2, [r3, #4]
 8015834:	4b21      	ldr	r3, [pc, #132]	; (80158bc <vPortFree+0xac>)
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	4013      	ands	r3, r2
 801583a:	2b00      	cmp	r3, #0
 801583c:	d10a      	bne.n	8015854 <vPortFree+0x44>
	__asm volatile
 801583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015842:	f383 8811 	msr	BASEPRI, r3
 8015846:	f3bf 8f6f 	isb	sy
 801584a:	f3bf 8f4f 	dsb	sy
 801584e:	60fb      	str	r3, [r7, #12]
}
 8015850:	bf00      	nop
 8015852:	e7fe      	b.n	8015852 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015854:	693b      	ldr	r3, [r7, #16]
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d00a      	beq.n	8015872 <vPortFree+0x62>
	__asm volatile
 801585c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015860:	f383 8811 	msr	BASEPRI, r3
 8015864:	f3bf 8f6f 	isb	sy
 8015868:	f3bf 8f4f 	dsb	sy
 801586c:	60bb      	str	r3, [r7, #8]
}
 801586e:	bf00      	nop
 8015870:	e7fe      	b.n	8015870 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015872:	693b      	ldr	r3, [r7, #16]
 8015874:	685a      	ldr	r2, [r3, #4]
 8015876:	4b11      	ldr	r3, [pc, #68]	; (80158bc <vPortFree+0xac>)
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	4013      	ands	r3, r2
 801587c:	2b00      	cmp	r3, #0
 801587e:	d019      	beq.n	80158b4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015880:	693b      	ldr	r3, [r7, #16]
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d115      	bne.n	80158b4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015888:	693b      	ldr	r3, [r7, #16]
 801588a:	685a      	ldr	r2, [r3, #4]
 801588c:	4b0b      	ldr	r3, [pc, #44]	; (80158bc <vPortFree+0xac>)
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	43db      	mvns	r3, r3
 8015892:	401a      	ands	r2, r3
 8015894:	693b      	ldr	r3, [r7, #16]
 8015896:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015898:	f7fe fe18 	bl	80144cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801589c:	693b      	ldr	r3, [r7, #16]
 801589e:	685a      	ldr	r2, [r3, #4]
 80158a0:	4b07      	ldr	r3, [pc, #28]	; (80158c0 <vPortFree+0xb0>)
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	4413      	add	r3, r2
 80158a6:	4a06      	ldr	r2, [pc, #24]	; (80158c0 <vPortFree+0xb0>)
 80158a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80158aa:	6938      	ldr	r0, [r7, #16]
 80158ac:	f000 f86c 	bl	8015988 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80158b0:	f7fe fe1a 	bl	80144e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80158b4:	bf00      	nop
 80158b6:	3718      	adds	r7, #24
 80158b8:	46bd      	mov	sp, r7
 80158ba:	bd80      	pop	{r7, pc}
 80158bc:	200085b4 	.word	0x200085b4
 80158c0:	200085ac 	.word	0x200085ac

080158c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80158c4:	b480      	push	{r7}
 80158c6:	b085      	sub	sp, #20
 80158c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80158ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80158ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80158d0:	4b27      	ldr	r3, [pc, #156]	; (8015970 <prvHeapInit+0xac>)
 80158d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	f003 0307 	and.w	r3, r3, #7
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d00c      	beq.n	80158f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	3307      	adds	r3, #7
 80158e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	f023 0307 	bic.w	r3, r3, #7
 80158ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80158ec:	68ba      	ldr	r2, [r7, #8]
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	1ad3      	subs	r3, r2, r3
 80158f2:	4a1f      	ldr	r2, [pc, #124]	; (8015970 <prvHeapInit+0xac>)
 80158f4:	4413      	add	r3, r2
 80158f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80158fc:	4a1d      	ldr	r2, [pc, #116]	; (8015974 <prvHeapInit+0xb0>)
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015902:	4b1c      	ldr	r3, [pc, #112]	; (8015974 <prvHeapInit+0xb0>)
 8015904:	2200      	movs	r2, #0
 8015906:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	68ba      	ldr	r2, [r7, #8]
 801590c:	4413      	add	r3, r2
 801590e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015910:	2208      	movs	r2, #8
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	1a9b      	subs	r3, r3, r2
 8015916:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	f023 0307 	bic.w	r3, r3, #7
 801591e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	4a15      	ldr	r2, [pc, #84]	; (8015978 <prvHeapInit+0xb4>)
 8015924:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015926:	4b14      	ldr	r3, [pc, #80]	; (8015978 <prvHeapInit+0xb4>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	2200      	movs	r2, #0
 801592c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801592e:	4b12      	ldr	r3, [pc, #72]	; (8015978 <prvHeapInit+0xb4>)
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	2200      	movs	r2, #0
 8015934:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801593a:	683b      	ldr	r3, [r7, #0]
 801593c:	68fa      	ldr	r2, [r7, #12]
 801593e:	1ad2      	subs	r2, r2, r3
 8015940:	683b      	ldr	r3, [r7, #0]
 8015942:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015944:	4b0c      	ldr	r3, [pc, #48]	; (8015978 <prvHeapInit+0xb4>)
 8015946:	681a      	ldr	r2, [r3, #0]
 8015948:	683b      	ldr	r3, [r7, #0]
 801594a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801594c:	683b      	ldr	r3, [r7, #0]
 801594e:	685b      	ldr	r3, [r3, #4]
 8015950:	4a0a      	ldr	r2, [pc, #40]	; (801597c <prvHeapInit+0xb8>)
 8015952:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015954:	683b      	ldr	r3, [r7, #0]
 8015956:	685b      	ldr	r3, [r3, #4]
 8015958:	4a09      	ldr	r2, [pc, #36]	; (8015980 <prvHeapInit+0xbc>)
 801595a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801595c:	4b09      	ldr	r3, [pc, #36]	; (8015984 <prvHeapInit+0xc0>)
 801595e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015962:	601a      	str	r2, [r3, #0]
}
 8015964:	bf00      	nop
 8015966:	3714      	adds	r7, #20
 8015968:	46bd      	mov	sp, r7
 801596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801596e:	4770      	bx	lr
 8015970:	200049a0 	.word	0x200049a0
 8015974:	200085a0 	.word	0x200085a0
 8015978:	200085a8 	.word	0x200085a8
 801597c:	200085b0 	.word	0x200085b0
 8015980:	200085ac 	.word	0x200085ac
 8015984:	200085b4 	.word	0x200085b4

08015988 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015988:	b480      	push	{r7}
 801598a:	b085      	sub	sp, #20
 801598c:	af00      	add	r7, sp, #0
 801598e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015990:	4b28      	ldr	r3, [pc, #160]	; (8015a34 <prvInsertBlockIntoFreeList+0xac>)
 8015992:	60fb      	str	r3, [r7, #12]
 8015994:	e002      	b.n	801599c <prvInsertBlockIntoFreeList+0x14>
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	60fb      	str	r3, [r7, #12]
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	687a      	ldr	r2, [r7, #4]
 80159a2:	429a      	cmp	r2, r3
 80159a4:	d8f7      	bhi.n	8015996 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	685b      	ldr	r3, [r3, #4]
 80159ae:	68ba      	ldr	r2, [r7, #8]
 80159b0:	4413      	add	r3, r2
 80159b2:	687a      	ldr	r2, [r7, #4]
 80159b4:	429a      	cmp	r2, r3
 80159b6:	d108      	bne.n	80159ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	685a      	ldr	r2, [r3, #4]
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	685b      	ldr	r3, [r3, #4]
 80159c0:	441a      	add	r2, r3
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	685b      	ldr	r3, [r3, #4]
 80159d2:	68ba      	ldr	r2, [r7, #8]
 80159d4:	441a      	add	r2, r3
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	429a      	cmp	r2, r3
 80159dc:	d118      	bne.n	8015a10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	681a      	ldr	r2, [r3, #0]
 80159e2:	4b15      	ldr	r3, [pc, #84]	; (8015a38 <prvInsertBlockIntoFreeList+0xb0>)
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	429a      	cmp	r2, r3
 80159e8:	d00d      	beq.n	8015a06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	685a      	ldr	r2, [r3, #4]
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	681b      	ldr	r3, [r3, #0]
 80159f2:	685b      	ldr	r3, [r3, #4]
 80159f4:	441a      	add	r2, r3
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	681a      	ldr	r2, [r3, #0]
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	601a      	str	r2, [r3, #0]
 8015a04:	e008      	b.n	8015a18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015a06:	4b0c      	ldr	r3, [pc, #48]	; (8015a38 <prvInsertBlockIntoFreeList+0xb0>)
 8015a08:	681a      	ldr	r2, [r3, #0]
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	601a      	str	r2, [r3, #0]
 8015a0e:	e003      	b.n	8015a18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	681a      	ldr	r2, [r3, #0]
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015a18:	68fa      	ldr	r2, [r7, #12]
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	429a      	cmp	r2, r3
 8015a1e:	d002      	beq.n	8015a26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	687a      	ldr	r2, [r7, #4]
 8015a24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015a26:	bf00      	nop
 8015a28:	3714      	adds	r7, #20
 8015a2a:	46bd      	mov	sp, r7
 8015a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a30:	4770      	bx	lr
 8015a32:	bf00      	nop
 8015a34:	200085a0 	.word	0x200085a0
 8015a38:	200085a8 	.word	0x200085a8

08015a3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015a3c:	b580      	push	{r7, lr}
 8015a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015a40:	2200      	movs	r2, #0
 8015a42:	4912      	ldr	r1, [pc, #72]	; (8015a8c <MX_USB_DEVICE_Init+0x50>)
 8015a44:	4812      	ldr	r0, [pc, #72]	; (8015a90 <MX_USB_DEVICE_Init+0x54>)
 8015a46:	f7fc f853 	bl	8011af0 <USBD_Init>
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d001      	beq.n	8015a54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015a50:	f7f0 f8fc 	bl	8005c4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015a54:	490f      	ldr	r1, [pc, #60]	; (8015a94 <MX_USB_DEVICE_Init+0x58>)
 8015a56:	480e      	ldr	r0, [pc, #56]	; (8015a90 <MX_USB_DEVICE_Init+0x54>)
 8015a58:	f7fc f880 	bl	8011b5c <USBD_RegisterClass>
 8015a5c:	4603      	mov	r3, r0
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d001      	beq.n	8015a66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015a62:	f7f0 f8f3 	bl	8005c4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015a66:	490c      	ldr	r1, [pc, #48]	; (8015a98 <MX_USB_DEVICE_Init+0x5c>)
 8015a68:	4809      	ldr	r0, [pc, #36]	; (8015a90 <MX_USB_DEVICE_Init+0x54>)
 8015a6a:	f7fb ffa5 	bl	80119b8 <USBD_CDC_RegisterInterface>
 8015a6e:	4603      	mov	r3, r0
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d001      	beq.n	8015a78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015a74:	f7f0 f8ea 	bl	8005c4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015a78:	4805      	ldr	r0, [pc, #20]	; (8015a90 <MX_USB_DEVICE_Init+0x54>)
 8015a7a:	f7fc f890 	bl	8011b9e <USBD_Start>
 8015a7e:	4603      	mov	r3, r0
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d001      	beq.n	8015a88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015a84:	f7f0 f8e2 	bl	8005c4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015a88:	bf00      	nop
 8015a8a:	bd80      	pop	{r7, pc}
 8015a8c:	200041c0 	.word	0x200041c0
 8015a90:	20010e94 	.word	0x20010e94
 8015a94:	200040a4 	.word	0x200040a4
 8015a98:	200041ac 	.word	0x200041ac

08015a9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015aa0:	2200      	movs	r2, #0
 8015aa2:	4905      	ldr	r1, [pc, #20]	; (8015ab8 <CDC_Init_FS+0x1c>)
 8015aa4:	4805      	ldr	r0, [pc, #20]	; (8015abc <CDC_Init_FS+0x20>)
 8015aa6:	f7fb ff9c 	bl	80119e2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015aaa:	4905      	ldr	r1, [pc, #20]	; (8015ac0 <CDC_Init_FS+0x24>)
 8015aac:	4803      	ldr	r0, [pc, #12]	; (8015abc <CDC_Init_FS+0x20>)
 8015aae:	f7fb ffb1 	bl	8011a14 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015ab2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	bd80      	pop	{r7, pc}
 8015ab8:	20011364 	.word	0x20011364
 8015abc:	20010e94 	.word	0x20010e94
 8015ac0:	20011164 	.word	0x20011164

08015ac4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015ac4:	b480      	push	{r7}
 8015ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015ac8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015aca:	4618      	mov	r0, r3
 8015acc:	46bd      	mov	sp, r7
 8015ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad2:	4770      	bx	lr

08015ad4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015ad4:	b480      	push	{r7}
 8015ad6:	b083      	sub	sp, #12
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	4603      	mov	r3, r0
 8015adc:	6039      	str	r1, [r7, #0]
 8015ade:	71fb      	strb	r3, [r7, #7]
 8015ae0:	4613      	mov	r3, r2
 8015ae2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015ae4:	79fb      	ldrb	r3, [r7, #7]
 8015ae6:	2b23      	cmp	r3, #35	; 0x23
 8015ae8:	f200 808c 	bhi.w	8015c04 <CDC_Control_FS+0x130>
 8015aec:	a201      	add	r2, pc, #4	; (adr r2, 8015af4 <CDC_Control_FS+0x20>)
 8015aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015af2:	bf00      	nop
 8015af4:	08015c05 	.word	0x08015c05
 8015af8:	08015c05 	.word	0x08015c05
 8015afc:	08015c05 	.word	0x08015c05
 8015b00:	08015c05 	.word	0x08015c05
 8015b04:	08015c05 	.word	0x08015c05
 8015b08:	08015c05 	.word	0x08015c05
 8015b0c:	08015c05 	.word	0x08015c05
 8015b10:	08015c05 	.word	0x08015c05
 8015b14:	08015c05 	.word	0x08015c05
 8015b18:	08015c05 	.word	0x08015c05
 8015b1c:	08015c05 	.word	0x08015c05
 8015b20:	08015c05 	.word	0x08015c05
 8015b24:	08015c05 	.word	0x08015c05
 8015b28:	08015c05 	.word	0x08015c05
 8015b2c:	08015c05 	.word	0x08015c05
 8015b30:	08015c05 	.word	0x08015c05
 8015b34:	08015c05 	.word	0x08015c05
 8015b38:	08015c05 	.word	0x08015c05
 8015b3c:	08015c05 	.word	0x08015c05
 8015b40:	08015c05 	.word	0x08015c05
 8015b44:	08015c05 	.word	0x08015c05
 8015b48:	08015c05 	.word	0x08015c05
 8015b4c:	08015c05 	.word	0x08015c05
 8015b50:	08015c05 	.word	0x08015c05
 8015b54:	08015c05 	.word	0x08015c05
 8015b58:	08015c05 	.word	0x08015c05
 8015b5c:	08015c05 	.word	0x08015c05
 8015b60:	08015c05 	.word	0x08015c05
 8015b64:	08015c05 	.word	0x08015c05
 8015b68:	08015c05 	.word	0x08015c05
 8015b6c:	08015c05 	.word	0x08015c05
 8015b70:	08015c05 	.word	0x08015c05
 8015b74:	08015b85 	.word	0x08015b85
 8015b78:	08015bbf 	.word	0x08015bbf
 8015b7c:	08015c05 	.word	0x08015c05
 8015b80:	08015c05 	.word	0x08015c05
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 8015b84:	683b      	ldr	r3, [r7, #0]
 8015b86:	781a      	ldrb	r2, [r3, #0]
 8015b88:	4b22      	ldr	r3, [pc, #136]	; (8015c14 <CDC_Control_FS+0x140>)
 8015b8a:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 8015b8c:	683b      	ldr	r3, [r7, #0]
 8015b8e:	785a      	ldrb	r2, [r3, #1]
 8015b90:	4b20      	ldr	r3, [pc, #128]	; (8015c14 <CDC_Control_FS+0x140>)
 8015b92:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 8015b94:	683b      	ldr	r3, [r7, #0]
 8015b96:	789a      	ldrb	r2, [r3, #2]
 8015b98:	4b1e      	ldr	r3, [pc, #120]	; (8015c14 <CDC_Control_FS+0x140>)
 8015b9a:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 8015b9c:	683b      	ldr	r3, [r7, #0]
 8015b9e:	78da      	ldrb	r2, [r3, #3]
 8015ba0:	4b1c      	ldr	r3, [pc, #112]	; (8015c14 <CDC_Control_FS+0x140>)
 8015ba2:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 8015ba4:	683b      	ldr	r3, [r7, #0]
 8015ba6:	791a      	ldrb	r2, [r3, #4]
 8015ba8:	4b1a      	ldr	r3, [pc, #104]	; (8015c14 <CDC_Control_FS+0x140>)
 8015baa:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 8015bac:	683b      	ldr	r3, [r7, #0]
 8015bae:	795a      	ldrb	r2, [r3, #5]
 8015bb0:	4b18      	ldr	r3, [pc, #96]	; (8015c14 <CDC_Control_FS+0x140>)
 8015bb2:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 8015bb4:	683b      	ldr	r3, [r7, #0]
 8015bb6:	799a      	ldrb	r2, [r3, #6]
 8015bb8:	4b16      	ldr	r3, [pc, #88]	; (8015c14 <CDC_Control_FS+0x140>)
 8015bba:	719a      	strb	r2, [r3, #6]
    	break;
 8015bbc:	e023      	b.n	8015c06 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 8015bbe:	4b15      	ldr	r3, [pc, #84]	; (8015c14 <CDC_Control_FS+0x140>)
 8015bc0:	781a      	ldrb	r2, [r3, #0]
 8015bc2:	683b      	ldr	r3, [r7, #0]
 8015bc4:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 8015bc6:	683b      	ldr	r3, [r7, #0]
 8015bc8:	3301      	adds	r3, #1
 8015bca:	4a12      	ldr	r2, [pc, #72]	; (8015c14 <CDC_Control_FS+0x140>)
 8015bcc:	7852      	ldrb	r2, [r2, #1]
 8015bce:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 8015bd0:	683b      	ldr	r3, [r7, #0]
 8015bd2:	3302      	adds	r3, #2
 8015bd4:	4a0f      	ldr	r2, [pc, #60]	; (8015c14 <CDC_Control_FS+0x140>)
 8015bd6:	7892      	ldrb	r2, [r2, #2]
 8015bd8:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 8015bda:	683b      	ldr	r3, [r7, #0]
 8015bdc:	3303      	adds	r3, #3
 8015bde:	4a0d      	ldr	r2, [pc, #52]	; (8015c14 <CDC_Control_FS+0x140>)
 8015be0:	78d2      	ldrb	r2, [r2, #3]
 8015be2:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 8015be4:	683b      	ldr	r3, [r7, #0]
 8015be6:	3304      	adds	r3, #4
 8015be8:	4a0a      	ldr	r2, [pc, #40]	; (8015c14 <CDC_Control_FS+0x140>)
 8015bea:	7912      	ldrb	r2, [r2, #4]
 8015bec:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 8015bee:	683b      	ldr	r3, [r7, #0]
 8015bf0:	3305      	adds	r3, #5
 8015bf2:	4a08      	ldr	r2, [pc, #32]	; (8015c14 <CDC_Control_FS+0x140>)
 8015bf4:	7952      	ldrb	r2, [r2, #5]
 8015bf6:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 8015bf8:	683b      	ldr	r3, [r7, #0]
 8015bfa:	3306      	adds	r3, #6
 8015bfc:	4a05      	ldr	r2, [pc, #20]	; (8015c14 <CDC_Control_FS+0x140>)
 8015bfe:	7992      	ldrb	r2, [r2, #6]
 8015c00:	701a      	strb	r2, [r3, #0]
    break;
 8015c02:	e000      	b.n	8015c06 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015c04:	bf00      	nop
  }

  return (USBD_OK);
 8015c06:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015c08:	4618      	mov	r0, r3
 8015c0a:	370c      	adds	r7, #12
 8015c0c:	46bd      	mov	sp, r7
 8015c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c12:	4770      	bx	lr
 8015c14:	20011564 	.word	0x20011564

08015c18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015c18:	b580      	push	{r7, lr}
 8015c1a:	b082      	sub	sp, #8
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	6078      	str	r0, [r7, #4]
 8015c20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 8015c22:	683b      	ldr	r3, [r7, #0]
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	b29b      	uxth	r3, r3
 8015c28:	461a      	mov	r2, r3
 8015c2a:	6879      	ldr	r1, [r7, #4]
 8015c2c:	4807      	ldr	r0, [pc, #28]	; (8015c4c <CDC_Receive_FS+0x34>)
 8015c2e:	f7f0 f89f 	bl	8005d70 <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015c32:	6879      	ldr	r1, [r7, #4]
 8015c34:	4806      	ldr	r0, [pc, #24]	; (8015c50 <CDC_Receive_FS+0x38>)
 8015c36:	f7fb feed 	bl	8011a14 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015c3a:	4805      	ldr	r0, [pc, #20]	; (8015c50 <CDC_Receive_FS+0x38>)
 8015c3c:	f7fb ff2e 	bl	8011a9c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015c40:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015c42:	4618      	mov	r0, r3
 8015c44:	3708      	adds	r7, #8
 8015c46:	46bd      	mov	sp, r7
 8015c48:	bd80      	pop	{r7, pc}
 8015c4a:	bf00      	nop
 8015c4c:	20000068 	.word	0x20000068
 8015c50:	20010e94 	.word	0x20010e94

08015c54 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b084      	sub	sp, #16
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
 8015c5c:	460b      	mov	r3, r1
 8015c5e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015c60:	2300      	movs	r3, #0
 8015c62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015c64:	4b0d      	ldr	r3, [pc, #52]	; (8015c9c <CDC_Transmit_FS+0x48>)
 8015c66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015c6a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015c6c:	68bb      	ldr	r3, [r7, #8]
 8015c6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d001      	beq.n	8015c7a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015c76:	2301      	movs	r3, #1
 8015c78:	e00b      	b.n	8015c92 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8015c7a:	887b      	ldrh	r3, [r7, #2]
 8015c7c:	461a      	mov	r2, r3
 8015c7e:	6879      	ldr	r1, [r7, #4]
 8015c80:	4806      	ldr	r0, [pc, #24]	; (8015c9c <CDC_Transmit_FS+0x48>)
 8015c82:	f7fb feae 	bl	80119e2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015c86:	4805      	ldr	r0, [pc, #20]	; (8015c9c <CDC_Transmit_FS+0x48>)
 8015c88:	f7fb fed8 	bl	8011a3c <USBD_CDC_TransmitPacket>
 8015c8c:	4603      	mov	r3, r0
 8015c8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c92:	4618      	mov	r0, r3
 8015c94:	3710      	adds	r7, #16
 8015c96:	46bd      	mov	sp, r7
 8015c98:	bd80      	pop	{r7, pc}
 8015c9a:	bf00      	nop
 8015c9c:	20010e94 	.word	0x20010e94

08015ca0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015ca0:	b480      	push	{r7}
 8015ca2:	b087      	sub	sp, #28
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	60f8      	str	r0, [r7, #12]
 8015ca8:	60b9      	str	r1, [r7, #8]
 8015caa:	4613      	mov	r3, r2
 8015cac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015cae:	2300      	movs	r3, #0
 8015cb0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015cb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	371c      	adds	r7, #28
 8015cba:	46bd      	mov	sp, r7
 8015cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc0:	4770      	bx	lr
	...

08015cc4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015cc4:	b480      	push	{r7}
 8015cc6:	b083      	sub	sp, #12
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	4603      	mov	r3, r0
 8015ccc:	6039      	str	r1, [r7, #0]
 8015cce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015cd0:	683b      	ldr	r3, [r7, #0]
 8015cd2:	2212      	movs	r2, #18
 8015cd4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015cd6:	4b03      	ldr	r3, [pc, #12]	; (8015ce4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015cd8:	4618      	mov	r0, r3
 8015cda:	370c      	adds	r7, #12
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce2:	4770      	bx	lr
 8015ce4:	200041dc 	.word	0x200041dc

08015ce8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015ce8:	b480      	push	{r7}
 8015cea:	b083      	sub	sp, #12
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	4603      	mov	r3, r0
 8015cf0:	6039      	str	r1, [r7, #0]
 8015cf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015cf4:	683b      	ldr	r3, [r7, #0]
 8015cf6:	2204      	movs	r2, #4
 8015cf8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015cfa:	4b03      	ldr	r3, [pc, #12]	; (8015d08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	370c      	adds	r7, #12
 8015d00:	46bd      	mov	sp, r7
 8015d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d06:	4770      	bx	lr
 8015d08:	200041f0 	.word	0x200041f0

08015d0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b082      	sub	sp, #8
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	4603      	mov	r3, r0
 8015d14:	6039      	str	r1, [r7, #0]
 8015d16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015d18:	79fb      	ldrb	r3, [r7, #7]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d105      	bne.n	8015d2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015d1e:	683a      	ldr	r2, [r7, #0]
 8015d20:	4907      	ldr	r1, [pc, #28]	; (8015d40 <USBD_FS_ProductStrDescriptor+0x34>)
 8015d22:	4808      	ldr	r0, [pc, #32]	; (8015d44 <USBD_FS_ProductStrDescriptor+0x38>)
 8015d24:	f7fc ff18 	bl	8012b58 <USBD_GetString>
 8015d28:	e004      	b.n	8015d34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015d2a:	683a      	ldr	r2, [r7, #0]
 8015d2c:	4904      	ldr	r1, [pc, #16]	; (8015d40 <USBD_FS_ProductStrDescriptor+0x34>)
 8015d2e:	4805      	ldr	r0, [pc, #20]	; (8015d44 <USBD_FS_ProductStrDescriptor+0x38>)
 8015d30:	f7fc ff12 	bl	8012b58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015d34:	4b02      	ldr	r3, [pc, #8]	; (8015d40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015d36:	4618      	mov	r0, r3
 8015d38:	3708      	adds	r7, #8
 8015d3a:	46bd      	mov	sp, r7
 8015d3c:	bd80      	pop	{r7, pc}
 8015d3e:	bf00      	nop
 8015d40:	2001156c 	.word	0x2001156c
 8015d44:	0801ca84 	.word	0x0801ca84

08015d48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b082      	sub	sp, #8
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	4603      	mov	r3, r0
 8015d50:	6039      	str	r1, [r7, #0]
 8015d52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015d54:	683a      	ldr	r2, [r7, #0]
 8015d56:	4904      	ldr	r1, [pc, #16]	; (8015d68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015d58:	4804      	ldr	r0, [pc, #16]	; (8015d6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015d5a:	f7fc fefd 	bl	8012b58 <USBD_GetString>
  return USBD_StrDesc;
 8015d5e:	4b02      	ldr	r3, [pc, #8]	; (8015d68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015d60:	4618      	mov	r0, r3
 8015d62:	3708      	adds	r7, #8
 8015d64:	46bd      	mov	sp, r7
 8015d66:	bd80      	pop	{r7, pc}
 8015d68:	2001156c 	.word	0x2001156c
 8015d6c:	0801ca9c 	.word	0x0801ca9c

08015d70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015d70:	b580      	push	{r7, lr}
 8015d72:	b082      	sub	sp, #8
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	4603      	mov	r3, r0
 8015d78:	6039      	str	r1, [r7, #0]
 8015d7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015d7c:	683b      	ldr	r3, [r7, #0]
 8015d7e:	221a      	movs	r2, #26
 8015d80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015d82:	f000 f843 	bl	8015e0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015d86:	4b02      	ldr	r3, [pc, #8]	; (8015d90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015d88:	4618      	mov	r0, r3
 8015d8a:	3708      	adds	r7, #8
 8015d8c:	46bd      	mov	sp, r7
 8015d8e:	bd80      	pop	{r7, pc}
 8015d90:	200041f4 	.word	0x200041f4

08015d94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b082      	sub	sp, #8
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	4603      	mov	r3, r0
 8015d9c:	6039      	str	r1, [r7, #0]
 8015d9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015da0:	79fb      	ldrb	r3, [r7, #7]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d105      	bne.n	8015db2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015da6:	683a      	ldr	r2, [r7, #0]
 8015da8:	4907      	ldr	r1, [pc, #28]	; (8015dc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015daa:	4808      	ldr	r0, [pc, #32]	; (8015dcc <USBD_FS_ConfigStrDescriptor+0x38>)
 8015dac:	f7fc fed4 	bl	8012b58 <USBD_GetString>
 8015db0:	e004      	b.n	8015dbc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015db2:	683a      	ldr	r2, [r7, #0]
 8015db4:	4904      	ldr	r1, [pc, #16]	; (8015dc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015db6:	4805      	ldr	r0, [pc, #20]	; (8015dcc <USBD_FS_ConfigStrDescriptor+0x38>)
 8015db8:	f7fc fece 	bl	8012b58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015dbc:	4b02      	ldr	r3, [pc, #8]	; (8015dc8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	3708      	adds	r7, #8
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	bd80      	pop	{r7, pc}
 8015dc6:	bf00      	nop
 8015dc8:	2001156c 	.word	0x2001156c
 8015dcc:	0801cab0 	.word	0x0801cab0

08015dd0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b082      	sub	sp, #8
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	4603      	mov	r3, r0
 8015dd8:	6039      	str	r1, [r7, #0]
 8015dda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015ddc:	79fb      	ldrb	r3, [r7, #7]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d105      	bne.n	8015dee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015de2:	683a      	ldr	r2, [r7, #0]
 8015de4:	4907      	ldr	r1, [pc, #28]	; (8015e04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015de6:	4808      	ldr	r0, [pc, #32]	; (8015e08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015de8:	f7fc feb6 	bl	8012b58 <USBD_GetString>
 8015dec:	e004      	b.n	8015df8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015dee:	683a      	ldr	r2, [r7, #0]
 8015df0:	4904      	ldr	r1, [pc, #16]	; (8015e04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015df2:	4805      	ldr	r0, [pc, #20]	; (8015e08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015df4:	f7fc feb0 	bl	8012b58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015df8:	4b02      	ldr	r3, [pc, #8]	; (8015e04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	3708      	adds	r7, #8
 8015dfe:	46bd      	mov	sp, r7
 8015e00:	bd80      	pop	{r7, pc}
 8015e02:	bf00      	nop
 8015e04:	2001156c 	.word	0x2001156c
 8015e08:	0801cabc 	.word	0x0801cabc

08015e0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	b084      	sub	sp, #16
 8015e10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015e12:	4b0f      	ldr	r3, [pc, #60]	; (8015e50 <Get_SerialNum+0x44>)
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015e18:	4b0e      	ldr	r3, [pc, #56]	; (8015e54 <Get_SerialNum+0x48>)
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015e1e:	4b0e      	ldr	r3, [pc, #56]	; (8015e58 <Get_SerialNum+0x4c>)
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015e24:	68fa      	ldr	r2, [r7, #12]
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	4413      	add	r3, r2
 8015e2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d009      	beq.n	8015e46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015e32:	2208      	movs	r2, #8
 8015e34:	4909      	ldr	r1, [pc, #36]	; (8015e5c <Get_SerialNum+0x50>)
 8015e36:	68f8      	ldr	r0, [r7, #12]
 8015e38:	f000 f814 	bl	8015e64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015e3c:	2204      	movs	r2, #4
 8015e3e:	4908      	ldr	r1, [pc, #32]	; (8015e60 <Get_SerialNum+0x54>)
 8015e40:	68b8      	ldr	r0, [r7, #8]
 8015e42:	f000 f80f 	bl	8015e64 <IntToUnicode>
  }
}
 8015e46:	bf00      	nop
 8015e48:	3710      	adds	r7, #16
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd80      	pop	{r7, pc}
 8015e4e:	bf00      	nop
 8015e50:	1fff7a10 	.word	0x1fff7a10
 8015e54:	1fff7a14 	.word	0x1fff7a14
 8015e58:	1fff7a18 	.word	0x1fff7a18
 8015e5c:	200041f6 	.word	0x200041f6
 8015e60:	20004206 	.word	0x20004206

08015e64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015e64:	b480      	push	{r7}
 8015e66:	b087      	sub	sp, #28
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	60f8      	str	r0, [r7, #12]
 8015e6c:	60b9      	str	r1, [r7, #8]
 8015e6e:	4613      	mov	r3, r2
 8015e70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015e72:	2300      	movs	r3, #0
 8015e74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015e76:	2300      	movs	r3, #0
 8015e78:	75fb      	strb	r3, [r7, #23]
 8015e7a:	e027      	b.n	8015ecc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	0f1b      	lsrs	r3, r3, #28
 8015e80:	2b09      	cmp	r3, #9
 8015e82:	d80b      	bhi.n	8015e9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	0f1b      	lsrs	r3, r3, #28
 8015e88:	b2da      	uxtb	r2, r3
 8015e8a:	7dfb      	ldrb	r3, [r7, #23]
 8015e8c:	005b      	lsls	r3, r3, #1
 8015e8e:	4619      	mov	r1, r3
 8015e90:	68bb      	ldr	r3, [r7, #8]
 8015e92:	440b      	add	r3, r1
 8015e94:	3230      	adds	r2, #48	; 0x30
 8015e96:	b2d2      	uxtb	r2, r2
 8015e98:	701a      	strb	r2, [r3, #0]
 8015e9a:	e00a      	b.n	8015eb2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	0f1b      	lsrs	r3, r3, #28
 8015ea0:	b2da      	uxtb	r2, r3
 8015ea2:	7dfb      	ldrb	r3, [r7, #23]
 8015ea4:	005b      	lsls	r3, r3, #1
 8015ea6:	4619      	mov	r1, r3
 8015ea8:	68bb      	ldr	r3, [r7, #8]
 8015eaa:	440b      	add	r3, r1
 8015eac:	3237      	adds	r2, #55	; 0x37
 8015eae:	b2d2      	uxtb	r2, r2
 8015eb0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	011b      	lsls	r3, r3, #4
 8015eb6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015eb8:	7dfb      	ldrb	r3, [r7, #23]
 8015eba:	005b      	lsls	r3, r3, #1
 8015ebc:	3301      	adds	r3, #1
 8015ebe:	68ba      	ldr	r2, [r7, #8]
 8015ec0:	4413      	add	r3, r2
 8015ec2:	2200      	movs	r2, #0
 8015ec4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015ec6:	7dfb      	ldrb	r3, [r7, #23]
 8015ec8:	3301      	adds	r3, #1
 8015eca:	75fb      	strb	r3, [r7, #23]
 8015ecc:	7dfa      	ldrb	r2, [r7, #23]
 8015ece:	79fb      	ldrb	r3, [r7, #7]
 8015ed0:	429a      	cmp	r2, r3
 8015ed2:	d3d3      	bcc.n	8015e7c <IntToUnicode+0x18>
  }
}
 8015ed4:	bf00      	nop
 8015ed6:	bf00      	nop
 8015ed8:	371c      	adds	r7, #28
 8015eda:	46bd      	mov	sp, r7
 8015edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ee0:	4770      	bx	lr
	...

08015ee4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	b08a      	sub	sp, #40	; 0x28
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015eec:	f107 0314 	add.w	r3, r7, #20
 8015ef0:	2200      	movs	r2, #0
 8015ef2:	601a      	str	r2, [r3, #0]
 8015ef4:	605a      	str	r2, [r3, #4]
 8015ef6:	609a      	str	r2, [r3, #8]
 8015ef8:	60da      	str	r2, [r3, #12]
 8015efa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015f04:	d13a      	bne.n	8015f7c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015f06:	2300      	movs	r3, #0
 8015f08:	613b      	str	r3, [r7, #16]
 8015f0a:	4b1e      	ldr	r3, [pc, #120]	; (8015f84 <HAL_PCD_MspInit+0xa0>)
 8015f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f0e:	4a1d      	ldr	r2, [pc, #116]	; (8015f84 <HAL_PCD_MspInit+0xa0>)
 8015f10:	f043 0301 	orr.w	r3, r3, #1
 8015f14:	6313      	str	r3, [r2, #48]	; 0x30
 8015f16:	4b1b      	ldr	r3, [pc, #108]	; (8015f84 <HAL_PCD_MspInit+0xa0>)
 8015f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f1a:	f003 0301 	and.w	r3, r3, #1
 8015f1e:	613b      	str	r3, [r7, #16]
 8015f20:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015f22:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015f28:	2302      	movs	r3, #2
 8015f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015f30:	2303      	movs	r3, #3
 8015f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015f34:	230a      	movs	r3, #10
 8015f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015f38:	f107 0314 	add.w	r3, r7, #20
 8015f3c:	4619      	mov	r1, r3
 8015f3e:	4812      	ldr	r0, [pc, #72]	; (8015f88 <HAL_PCD_MspInit+0xa4>)
 8015f40:	f7f6 fb4e 	bl	800c5e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015f44:	4b0f      	ldr	r3, [pc, #60]	; (8015f84 <HAL_PCD_MspInit+0xa0>)
 8015f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f48:	4a0e      	ldr	r2, [pc, #56]	; (8015f84 <HAL_PCD_MspInit+0xa0>)
 8015f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f4e:	6353      	str	r3, [r2, #52]	; 0x34
 8015f50:	2300      	movs	r3, #0
 8015f52:	60fb      	str	r3, [r7, #12]
 8015f54:	4b0b      	ldr	r3, [pc, #44]	; (8015f84 <HAL_PCD_MspInit+0xa0>)
 8015f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f58:	4a0a      	ldr	r2, [pc, #40]	; (8015f84 <HAL_PCD_MspInit+0xa0>)
 8015f5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015f5e:	6453      	str	r3, [r2, #68]	; 0x44
 8015f60:	4b08      	ldr	r3, [pc, #32]	; (8015f84 <HAL_PCD_MspInit+0xa0>)
 8015f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015f68:	60fb      	str	r3, [r7, #12]
 8015f6a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	2105      	movs	r1, #5
 8015f70:	2043      	movs	r0, #67	; 0x43
 8015f72:	f7f5 ff6b 	bl	800be4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015f76:	2043      	movs	r0, #67	; 0x43
 8015f78:	f7f5 ff84 	bl	800be84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015f7c:	bf00      	nop
 8015f7e:	3728      	adds	r7, #40	; 0x28
 8015f80:	46bd      	mov	sp, r7
 8015f82:	bd80      	pop	{r7, pc}
 8015f84:	40023800 	.word	0x40023800
 8015f88:	40020000 	.word	0x40020000

08015f8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b082      	sub	sp, #8
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015fa0:	4619      	mov	r1, r3
 8015fa2:	4610      	mov	r0, r2
 8015fa4:	f7fb fe46 	bl	8011c34 <USBD_LL_SetupStage>
}
 8015fa8:	bf00      	nop
 8015faa:	3708      	adds	r7, #8
 8015fac:	46bd      	mov	sp, r7
 8015fae:	bd80      	pop	{r7, pc}

08015fb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015fb0:	b580      	push	{r7, lr}
 8015fb2:	b082      	sub	sp, #8
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	6078      	str	r0, [r7, #4]
 8015fb8:	460b      	mov	r3, r1
 8015fba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015fc2:	78fa      	ldrb	r2, [r7, #3]
 8015fc4:	6879      	ldr	r1, [r7, #4]
 8015fc6:	4613      	mov	r3, r2
 8015fc8:	00db      	lsls	r3, r3, #3
 8015fca:	1a9b      	subs	r3, r3, r2
 8015fcc:	009b      	lsls	r3, r3, #2
 8015fce:	440b      	add	r3, r1
 8015fd0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015fd4:	681a      	ldr	r2, [r3, #0]
 8015fd6:	78fb      	ldrb	r3, [r7, #3]
 8015fd8:	4619      	mov	r1, r3
 8015fda:	f7fb fe80 	bl	8011cde <USBD_LL_DataOutStage>
}
 8015fde:	bf00      	nop
 8015fe0:	3708      	adds	r7, #8
 8015fe2:	46bd      	mov	sp, r7
 8015fe4:	bd80      	pop	{r7, pc}

08015fe6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015fe6:	b580      	push	{r7, lr}
 8015fe8:	b082      	sub	sp, #8
 8015fea:	af00      	add	r7, sp, #0
 8015fec:	6078      	str	r0, [r7, #4]
 8015fee:	460b      	mov	r3, r1
 8015ff0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015ff8:	78fa      	ldrb	r2, [r7, #3]
 8015ffa:	6879      	ldr	r1, [r7, #4]
 8015ffc:	4613      	mov	r3, r2
 8015ffe:	00db      	lsls	r3, r3, #3
 8016000:	1a9b      	subs	r3, r3, r2
 8016002:	009b      	lsls	r3, r3, #2
 8016004:	440b      	add	r3, r1
 8016006:	3348      	adds	r3, #72	; 0x48
 8016008:	681a      	ldr	r2, [r3, #0]
 801600a:	78fb      	ldrb	r3, [r7, #3]
 801600c:	4619      	mov	r1, r3
 801600e:	f7fb fec9 	bl	8011da4 <USBD_LL_DataInStage>
}
 8016012:	bf00      	nop
 8016014:	3708      	adds	r7, #8
 8016016:	46bd      	mov	sp, r7
 8016018:	bd80      	pop	{r7, pc}

0801601a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801601a:	b580      	push	{r7, lr}
 801601c:	b082      	sub	sp, #8
 801601e:	af00      	add	r7, sp, #0
 8016020:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016028:	4618      	mov	r0, r3
 801602a:	f7fb ffcd 	bl	8011fc8 <USBD_LL_SOF>
}
 801602e:	bf00      	nop
 8016030:	3708      	adds	r7, #8
 8016032:	46bd      	mov	sp, r7
 8016034:	bd80      	pop	{r7, pc}

08016036 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016036:	b580      	push	{r7, lr}
 8016038:	b084      	sub	sp, #16
 801603a:	af00      	add	r7, sp, #0
 801603c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801603e:	2301      	movs	r3, #1
 8016040:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	68db      	ldr	r3, [r3, #12]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d102      	bne.n	8016050 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801604a:	2300      	movs	r3, #0
 801604c:	73fb      	strb	r3, [r7, #15]
 801604e:	e008      	b.n	8016062 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	68db      	ldr	r3, [r3, #12]
 8016054:	2b02      	cmp	r3, #2
 8016056:	d102      	bne.n	801605e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016058:	2301      	movs	r3, #1
 801605a:	73fb      	strb	r3, [r7, #15]
 801605c:	e001      	b.n	8016062 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801605e:	f7ef fdf5 	bl	8005c4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016068:	7bfa      	ldrb	r2, [r7, #15]
 801606a:	4611      	mov	r1, r2
 801606c:	4618      	mov	r0, r3
 801606e:	f7fb ff70 	bl	8011f52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016078:	4618      	mov	r0, r3
 801607a:	f7fb ff29 	bl	8011ed0 <USBD_LL_Reset>
}
 801607e:	bf00      	nop
 8016080:	3710      	adds	r7, #16
 8016082:	46bd      	mov	sp, r7
 8016084:	bd80      	pop	{r7, pc}
	...

08016088 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b082      	sub	sp, #8
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016096:	4618      	mov	r0, r3
 8016098:	f7fb ff6b 	bl	8011f72 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	687a      	ldr	r2, [r7, #4]
 80160a8:	6812      	ldr	r2, [r2, #0]
 80160aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80160ae:	f043 0301 	orr.w	r3, r3, #1
 80160b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	6a1b      	ldr	r3, [r3, #32]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d005      	beq.n	80160c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80160bc:	4b04      	ldr	r3, [pc, #16]	; (80160d0 <HAL_PCD_SuspendCallback+0x48>)
 80160be:	691b      	ldr	r3, [r3, #16]
 80160c0:	4a03      	ldr	r2, [pc, #12]	; (80160d0 <HAL_PCD_SuspendCallback+0x48>)
 80160c2:	f043 0306 	orr.w	r3, r3, #6
 80160c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80160c8:	bf00      	nop
 80160ca:	3708      	adds	r7, #8
 80160cc:	46bd      	mov	sp, r7
 80160ce:	bd80      	pop	{r7, pc}
 80160d0:	e000ed00 	.word	0xe000ed00

080160d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b082      	sub	sp, #8
 80160d8:	af00      	add	r7, sp, #0
 80160da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80160e2:	4618      	mov	r0, r3
 80160e4:	f7fb ff5a 	bl	8011f9c <USBD_LL_Resume>
}
 80160e8:	bf00      	nop
 80160ea:	3708      	adds	r7, #8
 80160ec:	46bd      	mov	sp, r7
 80160ee:	bd80      	pop	{r7, pc}

080160f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80160f0:	b580      	push	{r7, lr}
 80160f2:	b082      	sub	sp, #8
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	6078      	str	r0, [r7, #4]
 80160f8:	460b      	mov	r3, r1
 80160fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016102:	78fa      	ldrb	r2, [r7, #3]
 8016104:	4611      	mov	r1, r2
 8016106:	4618      	mov	r0, r3
 8016108:	f7fb ff85 	bl	8012016 <USBD_LL_IsoOUTIncomplete>
}
 801610c:	bf00      	nop
 801610e:	3708      	adds	r7, #8
 8016110:	46bd      	mov	sp, r7
 8016112:	bd80      	pop	{r7, pc}

08016114 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016114:	b580      	push	{r7, lr}
 8016116:	b082      	sub	sp, #8
 8016118:	af00      	add	r7, sp, #0
 801611a:	6078      	str	r0, [r7, #4]
 801611c:	460b      	mov	r3, r1
 801611e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016126:	78fa      	ldrb	r2, [r7, #3]
 8016128:	4611      	mov	r1, r2
 801612a:	4618      	mov	r0, r3
 801612c:	f7fb ff66 	bl	8011ffc <USBD_LL_IsoINIncomplete>
}
 8016130:	bf00      	nop
 8016132:	3708      	adds	r7, #8
 8016134:	46bd      	mov	sp, r7
 8016136:	bd80      	pop	{r7, pc}

08016138 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016138:	b580      	push	{r7, lr}
 801613a:	b082      	sub	sp, #8
 801613c:	af00      	add	r7, sp, #0
 801613e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016146:	4618      	mov	r0, r3
 8016148:	f7fb ff72 	bl	8012030 <USBD_LL_DevConnected>
}
 801614c:	bf00      	nop
 801614e:	3708      	adds	r7, #8
 8016150:	46bd      	mov	sp, r7
 8016152:	bd80      	pop	{r7, pc}

08016154 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016154:	b580      	push	{r7, lr}
 8016156:	b082      	sub	sp, #8
 8016158:	af00      	add	r7, sp, #0
 801615a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016162:	4618      	mov	r0, r3
 8016164:	f7fb ff6f 	bl	8012046 <USBD_LL_DevDisconnected>
}
 8016168:	bf00      	nop
 801616a:	3708      	adds	r7, #8
 801616c:	46bd      	mov	sp, r7
 801616e:	bd80      	pop	{r7, pc}

08016170 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016170:	b580      	push	{r7, lr}
 8016172:	b082      	sub	sp, #8
 8016174:	af00      	add	r7, sp, #0
 8016176:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	781b      	ldrb	r3, [r3, #0]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d13c      	bne.n	80161fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016180:	4a20      	ldr	r2, [pc, #128]	; (8016204 <USBD_LL_Init+0x94>)
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	4a1e      	ldr	r2, [pc, #120]	; (8016204 <USBD_LL_Init+0x94>)
 801618c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016190:	4b1c      	ldr	r3, [pc, #112]	; (8016204 <USBD_LL_Init+0x94>)
 8016192:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8016196:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8016198:	4b1a      	ldr	r3, [pc, #104]	; (8016204 <USBD_LL_Init+0x94>)
 801619a:	2204      	movs	r2, #4
 801619c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801619e:	4b19      	ldr	r3, [pc, #100]	; (8016204 <USBD_LL_Init+0x94>)
 80161a0:	2202      	movs	r2, #2
 80161a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80161a4:	4b17      	ldr	r3, [pc, #92]	; (8016204 <USBD_LL_Init+0x94>)
 80161a6:	2200      	movs	r2, #0
 80161a8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80161aa:	4b16      	ldr	r3, [pc, #88]	; (8016204 <USBD_LL_Init+0x94>)
 80161ac:	2202      	movs	r2, #2
 80161ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80161b0:	4b14      	ldr	r3, [pc, #80]	; (8016204 <USBD_LL_Init+0x94>)
 80161b2:	2200      	movs	r2, #0
 80161b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80161b6:	4b13      	ldr	r3, [pc, #76]	; (8016204 <USBD_LL_Init+0x94>)
 80161b8:	2200      	movs	r2, #0
 80161ba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80161bc:	4b11      	ldr	r3, [pc, #68]	; (8016204 <USBD_LL_Init+0x94>)
 80161be:	2200      	movs	r2, #0
 80161c0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80161c2:	4b10      	ldr	r3, [pc, #64]	; (8016204 <USBD_LL_Init+0x94>)
 80161c4:	2200      	movs	r2, #0
 80161c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80161c8:	4b0e      	ldr	r3, [pc, #56]	; (8016204 <USBD_LL_Init+0x94>)
 80161ca:	2200      	movs	r2, #0
 80161cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80161ce:	480d      	ldr	r0, [pc, #52]	; (8016204 <USBD_LL_Init+0x94>)
 80161d0:	f7f6 fc12 	bl	800c9f8 <HAL_PCD_Init>
 80161d4:	4603      	mov	r3, r0
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d001      	beq.n	80161de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80161da:	f7ef fd37 	bl	8005c4c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80161de:	2180      	movs	r1, #128	; 0x80
 80161e0:	4808      	ldr	r0, [pc, #32]	; (8016204 <USBD_LL_Init+0x94>)
 80161e2:	f7f7 fd70 	bl	800dcc6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80161e6:	2240      	movs	r2, #64	; 0x40
 80161e8:	2100      	movs	r1, #0
 80161ea:	4806      	ldr	r0, [pc, #24]	; (8016204 <USBD_LL_Init+0x94>)
 80161ec:	f7f7 fd24 	bl	800dc38 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80161f0:	2280      	movs	r2, #128	; 0x80
 80161f2:	2101      	movs	r1, #1
 80161f4:	4803      	ldr	r0, [pc, #12]	; (8016204 <USBD_LL_Init+0x94>)
 80161f6:	f7f7 fd1f 	bl	800dc38 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80161fa:	2300      	movs	r3, #0
}
 80161fc:	4618      	mov	r0, r3
 80161fe:	3708      	adds	r7, #8
 8016200:	46bd      	mov	sp, r7
 8016202:	bd80      	pop	{r7, pc}
 8016204:	2001176c 	.word	0x2001176c

08016208 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016208:	b580      	push	{r7, lr}
 801620a:	b084      	sub	sp, #16
 801620c:	af00      	add	r7, sp, #0
 801620e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016210:	2300      	movs	r3, #0
 8016212:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016214:	2300      	movs	r3, #0
 8016216:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801621e:	4618      	mov	r0, r3
 8016220:	f7f6 fd07 	bl	800cc32 <HAL_PCD_Start>
 8016224:	4603      	mov	r3, r0
 8016226:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016228:	7bfb      	ldrb	r3, [r7, #15]
 801622a:	4618      	mov	r0, r3
 801622c:	f000 f92a 	bl	8016484 <USBD_Get_USB_Status>
 8016230:	4603      	mov	r3, r0
 8016232:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016234:	7bbb      	ldrb	r3, [r7, #14]
}
 8016236:	4618      	mov	r0, r3
 8016238:	3710      	adds	r7, #16
 801623a:	46bd      	mov	sp, r7
 801623c:	bd80      	pop	{r7, pc}

0801623e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801623e:	b580      	push	{r7, lr}
 8016240:	b084      	sub	sp, #16
 8016242:	af00      	add	r7, sp, #0
 8016244:	6078      	str	r0, [r7, #4]
 8016246:	4608      	mov	r0, r1
 8016248:	4611      	mov	r1, r2
 801624a:	461a      	mov	r2, r3
 801624c:	4603      	mov	r3, r0
 801624e:	70fb      	strb	r3, [r7, #3]
 8016250:	460b      	mov	r3, r1
 8016252:	70bb      	strb	r3, [r7, #2]
 8016254:	4613      	mov	r3, r2
 8016256:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016258:	2300      	movs	r3, #0
 801625a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801625c:	2300      	movs	r3, #0
 801625e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016266:	78bb      	ldrb	r3, [r7, #2]
 8016268:	883a      	ldrh	r2, [r7, #0]
 801626a:	78f9      	ldrb	r1, [r7, #3]
 801626c:	f7f7 f8eb 	bl	800d446 <HAL_PCD_EP_Open>
 8016270:	4603      	mov	r3, r0
 8016272:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016274:	7bfb      	ldrb	r3, [r7, #15]
 8016276:	4618      	mov	r0, r3
 8016278:	f000 f904 	bl	8016484 <USBD_Get_USB_Status>
 801627c:	4603      	mov	r3, r0
 801627e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016280:	7bbb      	ldrb	r3, [r7, #14]
}
 8016282:	4618      	mov	r0, r3
 8016284:	3710      	adds	r7, #16
 8016286:	46bd      	mov	sp, r7
 8016288:	bd80      	pop	{r7, pc}

0801628a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801628a:	b580      	push	{r7, lr}
 801628c:	b084      	sub	sp, #16
 801628e:	af00      	add	r7, sp, #0
 8016290:	6078      	str	r0, [r7, #4]
 8016292:	460b      	mov	r3, r1
 8016294:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016296:	2300      	movs	r3, #0
 8016298:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801629a:	2300      	movs	r3, #0
 801629c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80162a4:	78fa      	ldrb	r2, [r7, #3]
 80162a6:	4611      	mov	r1, r2
 80162a8:	4618      	mov	r0, r3
 80162aa:	f7f7 f934 	bl	800d516 <HAL_PCD_EP_Close>
 80162ae:	4603      	mov	r3, r0
 80162b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80162b2:	7bfb      	ldrb	r3, [r7, #15]
 80162b4:	4618      	mov	r0, r3
 80162b6:	f000 f8e5 	bl	8016484 <USBD_Get_USB_Status>
 80162ba:	4603      	mov	r3, r0
 80162bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80162be:	7bbb      	ldrb	r3, [r7, #14]
}
 80162c0:	4618      	mov	r0, r3
 80162c2:	3710      	adds	r7, #16
 80162c4:	46bd      	mov	sp, r7
 80162c6:	bd80      	pop	{r7, pc}

080162c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b084      	sub	sp, #16
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	6078      	str	r0, [r7, #4]
 80162d0:	460b      	mov	r3, r1
 80162d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80162d4:	2300      	movs	r3, #0
 80162d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80162d8:	2300      	movs	r3, #0
 80162da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80162e2:	78fa      	ldrb	r2, [r7, #3]
 80162e4:	4611      	mov	r1, r2
 80162e6:	4618      	mov	r0, r3
 80162e8:	f7f7 fa0c 	bl	800d704 <HAL_PCD_EP_SetStall>
 80162ec:	4603      	mov	r3, r0
 80162ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80162f0:	7bfb      	ldrb	r3, [r7, #15]
 80162f2:	4618      	mov	r0, r3
 80162f4:	f000 f8c6 	bl	8016484 <USBD_Get_USB_Status>
 80162f8:	4603      	mov	r3, r0
 80162fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80162fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80162fe:	4618      	mov	r0, r3
 8016300:	3710      	adds	r7, #16
 8016302:	46bd      	mov	sp, r7
 8016304:	bd80      	pop	{r7, pc}

08016306 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016306:	b580      	push	{r7, lr}
 8016308:	b084      	sub	sp, #16
 801630a:	af00      	add	r7, sp, #0
 801630c:	6078      	str	r0, [r7, #4]
 801630e:	460b      	mov	r3, r1
 8016310:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016312:	2300      	movs	r3, #0
 8016314:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016316:	2300      	movs	r3, #0
 8016318:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016320:	78fa      	ldrb	r2, [r7, #3]
 8016322:	4611      	mov	r1, r2
 8016324:	4618      	mov	r0, r3
 8016326:	f7f7 fa51 	bl	800d7cc <HAL_PCD_EP_ClrStall>
 801632a:	4603      	mov	r3, r0
 801632c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801632e:	7bfb      	ldrb	r3, [r7, #15]
 8016330:	4618      	mov	r0, r3
 8016332:	f000 f8a7 	bl	8016484 <USBD_Get_USB_Status>
 8016336:	4603      	mov	r3, r0
 8016338:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801633a:	7bbb      	ldrb	r3, [r7, #14]
}
 801633c:	4618      	mov	r0, r3
 801633e:	3710      	adds	r7, #16
 8016340:	46bd      	mov	sp, r7
 8016342:	bd80      	pop	{r7, pc}

08016344 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016344:	b480      	push	{r7}
 8016346:	b085      	sub	sp, #20
 8016348:	af00      	add	r7, sp, #0
 801634a:	6078      	str	r0, [r7, #4]
 801634c:	460b      	mov	r3, r1
 801634e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016356:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016358:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801635c:	2b00      	cmp	r3, #0
 801635e:	da0b      	bge.n	8016378 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016360:	78fb      	ldrb	r3, [r7, #3]
 8016362:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016366:	68f9      	ldr	r1, [r7, #12]
 8016368:	4613      	mov	r3, r2
 801636a:	00db      	lsls	r3, r3, #3
 801636c:	1a9b      	subs	r3, r3, r2
 801636e:	009b      	lsls	r3, r3, #2
 8016370:	440b      	add	r3, r1
 8016372:	333e      	adds	r3, #62	; 0x3e
 8016374:	781b      	ldrb	r3, [r3, #0]
 8016376:	e00b      	b.n	8016390 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016378:	78fb      	ldrb	r3, [r7, #3]
 801637a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801637e:	68f9      	ldr	r1, [r7, #12]
 8016380:	4613      	mov	r3, r2
 8016382:	00db      	lsls	r3, r3, #3
 8016384:	1a9b      	subs	r3, r3, r2
 8016386:	009b      	lsls	r3, r3, #2
 8016388:	440b      	add	r3, r1
 801638a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801638e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016390:	4618      	mov	r0, r3
 8016392:	3714      	adds	r7, #20
 8016394:	46bd      	mov	sp, r7
 8016396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639a:	4770      	bx	lr

0801639c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801639c:	b580      	push	{r7, lr}
 801639e:	b084      	sub	sp, #16
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	6078      	str	r0, [r7, #4]
 80163a4:	460b      	mov	r3, r1
 80163a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80163a8:	2300      	movs	r3, #0
 80163aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80163ac:	2300      	movs	r3, #0
 80163ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80163b6:	78fa      	ldrb	r2, [r7, #3]
 80163b8:	4611      	mov	r1, r2
 80163ba:	4618      	mov	r0, r3
 80163bc:	f7f7 f81e 	bl	800d3fc <HAL_PCD_SetAddress>
 80163c0:	4603      	mov	r3, r0
 80163c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80163c4:	7bfb      	ldrb	r3, [r7, #15]
 80163c6:	4618      	mov	r0, r3
 80163c8:	f000 f85c 	bl	8016484 <USBD_Get_USB_Status>
 80163cc:	4603      	mov	r3, r0
 80163ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80163d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80163d2:	4618      	mov	r0, r3
 80163d4:	3710      	adds	r7, #16
 80163d6:	46bd      	mov	sp, r7
 80163d8:	bd80      	pop	{r7, pc}

080163da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80163da:	b580      	push	{r7, lr}
 80163dc:	b086      	sub	sp, #24
 80163de:	af00      	add	r7, sp, #0
 80163e0:	60f8      	str	r0, [r7, #12]
 80163e2:	607a      	str	r2, [r7, #4]
 80163e4:	603b      	str	r3, [r7, #0]
 80163e6:	460b      	mov	r3, r1
 80163e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80163ea:	2300      	movs	r3, #0
 80163ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80163ee:	2300      	movs	r3, #0
 80163f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80163f8:	7af9      	ldrb	r1, [r7, #11]
 80163fa:	683b      	ldr	r3, [r7, #0]
 80163fc:	687a      	ldr	r2, [r7, #4]
 80163fe:	f7f7 f937 	bl	800d670 <HAL_PCD_EP_Transmit>
 8016402:	4603      	mov	r3, r0
 8016404:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016406:	7dfb      	ldrb	r3, [r7, #23]
 8016408:	4618      	mov	r0, r3
 801640a:	f000 f83b 	bl	8016484 <USBD_Get_USB_Status>
 801640e:	4603      	mov	r3, r0
 8016410:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016412:	7dbb      	ldrb	r3, [r7, #22]
}
 8016414:	4618      	mov	r0, r3
 8016416:	3718      	adds	r7, #24
 8016418:	46bd      	mov	sp, r7
 801641a:	bd80      	pop	{r7, pc}

0801641c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801641c:	b580      	push	{r7, lr}
 801641e:	b086      	sub	sp, #24
 8016420:	af00      	add	r7, sp, #0
 8016422:	60f8      	str	r0, [r7, #12]
 8016424:	607a      	str	r2, [r7, #4]
 8016426:	603b      	str	r3, [r7, #0]
 8016428:	460b      	mov	r3, r1
 801642a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801642c:	2300      	movs	r3, #0
 801642e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016430:	2300      	movs	r3, #0
 8016432:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801643a:	7af9      	ldrb	r1, [r7, #11]
 801643c:	683b      	ldr	r3, [r7, #0]
 801643e:	687a      	ldr	r2, [r7, #4]
 8016440:	f7f7 f8b3 	bl	800d5aa <HAL_PCD_EP_Receive>
 8016444:	4603      	mov	r3, r0
 8016446:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016448:	7dfb      	ldrb	r3, [r7, #23]
 801644a:	4618      	mov	r0, r3
 801644c:	f000 f81a 	bl	8016484 <USBD_Get_USB_Status>
 8016450:	4603      	mov	r3, r0
 8016452:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016454:	7dbb      	ldrb	r3, [r7, #22]
}
 8016456:	4618      	mov	r0, r3
 8016458:	3718      	adds	r7, #24
 801645a:	46bd      	mov	sp, r7
 801645c:	bd80      	pop	{r7, pc}

0801645e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801645e:	b580      	push	{r7, lr}
 8016460:	b082      	sub	sp, #8
 8016462:	af00      	add	r7, sp, #0
 8016464:	6078      	str	r0, [r7, #4]
 8016466:	460b      	mov	r3, r1
 8016468:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016470:	78fa      	ldrb	r2, [r7, #3]
 8016472:	4611      	mov	r1, r2
 8016474:	4618      	mov	r0, r3
 8016476:	f7f7 f8e3 	bl	800d640 <HAL_PCD_EP_GetRxCount>
 801647a:	4603      	mov	r3, r0
}
 801647c:	4618      	mov	r0, r3
 801647e:	3708      	adds	r7, #8
 8016480:	46bd      	mov	sp, r7
 8016482:	bd80      	pop	{r7, pc}

08016484 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016484:	b480      	push	{r7}
 8016486:	b085      	sub	sp, #20
 8016488:	af00      	add	r7, sp, #0
 801648a:	4603      	mov	r3, r0
 801648c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801648e:	2300      	movs	r3, #0
 8016490:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016492:	79fb      	ldrb	r3, [r7, #7]
 8016494:	2b03      	cmp	r3, #3
 8016496:	d817      	bhi.n	80164c8 <USBD_Get_USB_Status+0x44>
 8016498:	a201      	add	r2, pc, #4	; (adr r2, 80164a0 <USBD_Get_USB_Status+0x1c>)
 801649a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801649e:	bf00      	nop
 80164a0:	080164b1 	.word	0x080164b1
 80164a4:	080164b7 	.word	0x080164b7
 80164a8:	080164bd 	.word	0x080164bd
 80164ac:	080164c3 	.word	0x080164c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80164b0:	2300      	movs	r3, #0
 80164b2:	73fb      	strb	r3, [r7, #15]
    break;
 80164b4:	e00b      	b.n	80164ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80164b6:	2303      	movs	r3, #3
 80164b8:	73fb      	strb	r3, [r7, #15]
    break;
 80164ba:	e008      	b.n	80164ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80164bc:	2301      	movs	r3, #1
 80164be:	73fb      	strb	r3, [r7, #15]
    break;
 80164c0:	e005      	b.n	80164ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80164c2:	2303      	movs	r3, #3
 80164c4:	73fb      	strb	r3, [r7, #15]
    break;
 80164c6:	e002      	b.n	80164ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80164c8:	2303      	movs	r3, #3
 80164ca:	73fb      	strb	r3, [r7, #15]
    break;
 80164cc:	bf00      	nop
  }
  return usb_status;
 80164ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80164d0:	4618      	mov	r0, r3
 80164d2:	3714      	adds	r7, #20
 80164d4:	46bd      	mov	sp, r7
 80164d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164da:	4770      	bx	lr

080164dc <__errno>:
 80164dc:	4b01      	ldr	r3, [pc, #4]	; (80164e4 <__errno+0x8>)
 80164de:	6818      	ldr	r0, [r3, #0]
 80164e0:	4770      	bx	lr
 80164e2:	bf00      	nop
 80164e4:	20004210 	.word	0x20004210

080164e8 <__libc_init_array>:
 80164e8:	b570      	push	{r4, r5, r6, lr}
 80164ea:	4d0d      	ldr	r5, [pc, #52]	; (8016520 <__libc_init_array+0x38>)
 80164ec:	4c0d      	ldr	r4, [pc, #52]	; (8016524 <__libc_init_array+0x3c>)
 80164ee:	1b64      	subs	r4, r4, r5
 80164f0:	10a4      	asrs	r4, r4, #2
 80164f2:	2600      	movs	r6, #0
 80164f4:	42a6      	cmp	r6, r4
 80164f6:	d109      	bne.n	801650c <__libc_init_array+0x24>
 80164f8:	4d0b      	ldr	r5, [pc, #44]	; (8016528 <__libc_init_array+0x40>)
 80164fa:	4c0c      	ldr	r4, [pc, #48]	; (801652c <__libc_init_array+0x44>)
 80164fc:	f006 f972 	bl	801c7e4 <_init>
 8016500:	1b64      	subs	r4, r4, r5
 8016502:	10a4      	asrs	r4, r4, #2
 8016504:	2600      	movs	r6, #0
 8016506:	42a6      	cmp	r6, r4
 8016508:	d105      	bne.n	8016516 <__libc_init_array+0x2e>
 801650a:	bd70      	pop	{r4, r5, r6, pc}
 801650c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016510:	4798      	blx	r3
 8016512:	3601      	adds	r6, #1
 8016514:	e7ee      	b.n	80164f4 <__libc_init_array+0xc>
 8016516:	f855 3b04 	ldr.w	r3, [r5], #4
 801651a:	4798      	blx	r3
 801651c:	3601      	adds	r6, #1
 801651e:	e7f2      	b.n	8016506 <__libc_init_array+0x1e>
 8016520:	0801d1f8 	.word	0x0801d1f8
 8016524:	0801d1f8 	.word	0x0801d1f8
 8016528:	0801d1f8 	.word	0x0801d1f8
 801652c:	0801d1fc 	.word	0x0801d1fc

08016530 <malloc>:
 8016530:	4b02      	ldr	r3, [pc, #8]	; (801653c <malloc+0xc>)
 8016532:	4601      	mov	r1, r0
 8016534:	6818      	ldr	r0, [r3, #0]
 8016536:	f000 b88b 	b.w	8016650 <_malloc_r>
 801653a:	bf00      	nop
 801653c:	20004210 	.word	0x20004210

08016540 <free>:
 8016540:	4b02      	ldr	r3, [pc, #8]	; (801654c <free+0xc>)
 8016542:	4601      	mov	r1, r0
 8016544:	6818      	ldr	r0, [r3, #0]
 8016546:	f000 b833 	b.w	80165b0 <_free_r>
 801654a:	bf00      	nop
 801654c:	20004210 	.word	0x20004210

08016550 <memcpy>:
 8016550:	440a      	add	r2, r1
 8016552:	4291      	cmp	r1, r2
 8016554:	f100 33ff 	add.w	r3, r0, #4294967295
 8016558:	d100      	bne.n	801655c <memcpy+0xc>
 801655a:	4770      	bx	lr
 801655c:	b510      	push	{r4, lr}
 801655e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016562:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016566:	4291      	cmp	r1, r2
 8016568:	d1f9      	bne.n	801655e <memcpy+0xe>
 801656a:	bd10      	pop	{r4, pc}

0801656c <memmove>:
 801656c:	4288      	cmp	r0, r1
 801656e:	b510      	push	{r4, lr}
 8016570:	eb01 0402 	add.w	r4, r1, r2
 8016574:	d902      	bls.n	801657c <memmove+0x10>
 8016576:	4284      	cmp	r4, r0
 8016578:	4623      	mov	r3, r4
 801657a:	d807      	bhi.n	801658c <memmove+0x20>
 801657c:	1e43      	subs	r3, r0, #1
 801657e:	42a1      	cmp	r1, r4
 8016580:	d008      	beq.n	8016594 <memmove+0x28>
 8016582:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016586:	f803 2f01 	strb.w	r2, [r3, #1]!
 801658a:	e7f8      	b.n	801657e <memmove+0x12>
 801658c:	4402      	add	r2, r0
 801658e:	4601      	mov	r1, r0
 8016590:	428a      	cmp	r2, r1
 8016592:	d100      	bne.n	8016596 <memmove+0x2a>
 8016594:	bd10      	pop	{r4, pc}
 8016596:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801659a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801659e:	e7f7      	b.n	8016590 <memmove+0x24>

080165a0 <memset>:
 80165a0:	4402      	add	r2, r0
 80165a2:	4603      	mov	r3, r0
 80165a4:	4293      	cmp	r3, r2
 80165a6:	d100      	bne.n	80165aa <memset+0xa>
 80165a8:	4770      	bx	lr
 80165aa:	f803 1b01 	strb.w	r1, [r3], #1
 80165ae:	e7f9      	b.n	80165a4 <memset+0x4>

080165b0 <_free_r>:
 80165b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80165b2:	2900      	cmp	r1, #0
 80165b4:	d048      	beq.n	8016648 <_free_r+0x98>
 80165b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80165ba:	9001      	str	r0, [sp, #4]
 80165bc:	2b00      	cmp	r3, #0
 80165be:	f1a1 0404 	sub.w	r4, r1, #4
 80165c2:	bfb8      	it	lt
 80165c4:	18e4      	addlt	r4, r4, r3
 80165c6:	f003 f835 	bl	8019634 <__malloc_lock>
 80165ca:	4a20      	ldr	r2, [pc, #128]	; (801664c <_free_r+0x9c>)
 80165cc:	9801      	ldr	r0, [sp, #4]
 80165ce:	6813      	ldr	r3, [r2, #0]
 80165d0:	4615      	mov	r5, r2
 80165d2:	b933      	cbnz	r3, 80165e2 <_free_r+0x32>
 80165d4:	6063      	str	r3, [r4, #4]
 80165d6:	6014      	str	r4, [r2, #0]
 80165d8:	b003      	add	sp, #12
 80165da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80165de:	f003 b82f 	b.w	8019640 <__malloc_unlock>
 80165e2:	42a3      	cmp	r3, r4
 80165e4:	d90b      	bls.n	80165fe <_free_r+0x4e>
 80165e6:	6821      	ldr	r1, [r4, #0]
 80165e8:	1862      	adds	r2, r4, r1
 80165ea:	4293      	cmp	r3, r2
 80165ec:	bf04      	itt	eq
 80165ee:	681a      	ldreq	r2, [r3, #0]
 80165f0:	685b      	ldreq	r3, [r3, #4]
 80165f2:	6063      	str	r3, [r4, #4]
 80165f4:	bf04      	itt	eq
 80165f6:	1852      	addeq	r2, r2, r1
 80165f8:	6022      	streq	r2, [r4, #0]
 80165fa:	602c      	str	r4, [r5, #0]
 80165fc:	e7ec      	b.n	80165d8 <_free_r+0x28>
 80165fe:	461a      	mov	r2, r3
 8016600:	685b      	ldr	r3, [r3, #4]
 8016602:	b10b      	cbz	r3, 8016608 <_free_r+0x58>
 8016604:	42a3      	cmp	r3, r4
 8016606:	d9fa      	bls.n	80165fe <_free_r+0x4e>
 8016608:	6811      	ldr	r1, [r2, #0]
 801660a:	1855      	adds	r5, r2, r1
 801660c:	42a5      	cmp	r5, r4
 801660e:	d10b      	bne.n	8016628 <_free_r+0x78>
 8016610:	6824      	ldr	r4, [r4, #0]
 8016612:	4421      	add	r1, r4
 8016614:	1854      	adds	r4, r2, r1
 8016616:	42a3      	cmp	r3, r4
 8016618:	6011      	str	r1, [r2, #0]
 801661a:	d1dd      	bne.n	80165d8 <_free_r+0x28>
 801661c:	681c      	ldr	r4, [r3, #0]
 801661e:	685b      	ldr	r3, [r3, #4]
 8016620:	6053      	str	r3, [r2, #4]
 8016622:	4421      	add	r1, r4
 8016624:	6011      	str	r1, [r2, #0]
 8016626:	e7d7      	b.n	80165d8 <_free_r+0x28>
 8016628:	d902      	bls.n	8016630 <_free_r+0x80>
 801662a:	230c      	movs	r3, #12
 801662c:	6003      	str	r3, [r0, #0]
 801662e:	e7d3      	b.n	80165d8 <_free_r+0x28>
 8016630:	6825      	ldr	r5, [r4, #0]
 8016632:	1961      	adds	r1, r4, r5
 8016634:	428b      	cmp	r3, r1
 8016636:	bf04      	itt	eq
 8016638:	6819      	ldreq	r1, [r3, #0]
 801663a:	685b      	ldreq	r3, [r3, #4]
 801663c:	6063      	str	r3, [r4, #4]
 801663e:	bf04      	itt	eq
 8016640:	1949      	addeq	r1, r1, r5
 8016642:	6021      	streq	r1, [r4, #0]
 8016644:	6054      	str	r4, [r2, #4]
 8016646:	e7c7      	b.n	80165d8 <_free_r+0x28>
 8016648:	b003      	add	sp, #12
 801664a:	bd30      	pop	{r4, r5, pc}
 801664c:	200085b8 	.word	0x200085b8

08016650 <_malloc_r>:
 8016650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016652:	1ccd      	adds	r5, r1, #3
 8016654:	f025 0503 	bic.w	r5, r5, #3
 8016658:	3508      	adds	r5, #8
 801665a:	2d0c      	cmp	r5, #12
 801665c:	bf38      	it	cc
 801665e:	250c      	movcc	r5, #12
 8016660:	2d00      	cmp	r5, #0
 8016662:	4606      	mov	r6, r0
 8016664:	db01      	blt.n	801666a <_malloc_r+0x1a>
 8016666:	42a9      	cmp	r1, r5
 8016668:	d903      	bls.n	8016672 <_malloc_r+0x22>
 801666a:	230c      	movs	r3, #12
 801666c:	6033      	str	r3, [r6, #0]
 801666e:	2000      	movs	r0, #0
 8016670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016672:	f002 ffdf 	bl	8019634 <__malloc_lock>
 8016676:	4921      	ldr	r1, [pc, #132]	; (80166fc <_malloc_r+0xac>)
 8016678:	680a      	ldr	r2, [r1, #0]
 801667a:	4614      	mov	r4, r2
 801667c:	b99c      	cbnz	r4, 80166a6 <_malloc_r+0x56>
 801667e:	4f20      	ldr	r7, [pc, #128]	; (8016700 <_malloc_r+0xb0>)
 8016680:	683b      	ldr	r3, [r7, #0]
 8016682:	b923      	cbnz	r3, 801668e <_malloc_r+0x3e>
 8016684:	4621      	mov	r1, r4
 8016686:	4630      	mov	r0, r6
 8016688:	f000 feb6 	bl	80173f8 <_sbrk_r>
 801668c:	6038      	str	r0, [r7, #0]
 801668e:	4629      	mov	r1, r5
 8016690:	4630      	mov	r0, r6
 8016692:	f000 feb1 	bl	80173f8 <_sbrk_r>
 8016696:	1c43      	adds	r3, r0, #1
 8016698:	d123      	bne.n	80166e2 <_malloc_r+0x92>
 801669a:	230c      	movs	r3, #12
 801669c:	6033      	str	r3, [r6, #0]
 801669e:	4630      	mov	r0, r6
 80166a0:	f002 ffce 	bl	8019640 <__malloc_unlock>
 80166a4:	e7e3      	b.n	801666e <_malloc_r+0x1e>
 80166a6:	6823      	ldr	r3, [r4, #0]
 80166a8:	1b5b      	subs	r3, r3, r5
 80166aa:	d417      	bmi.n	80166dc <_malloc_r+0x8c>
 80166ac:	2b0b      	cmp	r3, #11
 80166ae:	d903      	bls.n	80166b8 <_malloc_r+0x68>
 80166b0:	6023      	str	r3, [r4, #0]
 80166b2:	441c      	add	r4, r3
 80166b4:	6025      	str	r5, [r4, #0]
 80166b6:	e004      	b.n	80166c2 <_malloc_r+0x72>
 80166b8:	6863      	ldr	r3, [r4, #4]
 80166ba:	42a2      	cmp	r2, r4
 80166bc:	bf0c      	ite	eq
 80166be:	600b      	streq	r3, [r1, #0]
 80166c0:	6053      	strne	r3, [r2, #4]
 80166c2:	4630      	mov	r0, r6
 80166c4:	f002 ffbc 	bl	8019640 <__malloc_unlock>
 80166c8:	f104 000b 	add.w	r0, r4, #11
 80166cc:	1d23      	adds	r3, r4, #4
 80166ce:	f020 0007 	bic.w	r0, r0, #7
 80166d2:	1ac2      	subs	r2, r0, r3
 80166d4:	d0cc      	beq.n	8016670 <_malloc_r+0x20>
 80166d6:	1a1b      	subs	r3, r3, r0
 80166d8:	50a3      	str	r3, [r4, r2]
 80166da:	e7c9      	b.n	8016670 <_malloc_r+0x20>
 80166dc:	4622      	mov	r2, r4
 80166de:	6864      	ldr	r4, [r4, #4]
 80166e0:	e7cc      	b.n	801667c <_malloc_r+0x2c>
 80166e2:	1cc4      	adds	r4, r0, #3
 80166e4:	f024 0403 	bic.w	r4, r4, #3
 80166e8:	42a0      	cmp	r0, r4
 80166ea:	d0e3      	beq.n	80166b4 <_malloc_r+0x64>
 80166ec:	1a21      	subs	r1, r4, r0
 80166ee:	4630      	mov	r0, r6
 80166f0:	f000 fe82 	bl	80173f8 <_sbrk_r>
 80166f4:	3001      	adds	r0, #1
 80166f6:	d1dd      	bne.n	80166b4 <_malloc_r+0x64>
 80166f8:	e7cf      	b.n	801669a <_malloc_r+0x4a>
 80166fa:	bf00      	nop
 80166fc:	200085b8 	.word	0x200085b8
 8016700:	200085bc 	.word	0x200085bc

08016704 <__cvt>:
 8016704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016708:	ec55 4b10 	vmov	r4, r5, d0
 801670c:	2d00      	cmp	r5, #0
 801670e:	460e      	mov	r6, r1
 8016710:	4619      	mov	r1, r3
 8016712:	462b      	mov	r3, r5
 8016714:	bfbb      	ittet	lt
 8016716:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801671a:	461d      	movlt	r5, r3
 801671c:	2300      	movge	r3, #0
 801671e:	232d      	movlt	r3, #45	; 0x2d
 8016720:	700b      	strb	r3, [r1, #0]
 8016722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016724:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016728:	4691      	mov	r9, r2
 801672a:	f023 0820 	bic.w	r8, r3, #32
 801672e:	bfbc      	itt	lt
 8016730:	4622      	movlt	r2, r4
 8016732:	4614      	movlt	r4, r2
 8016734:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016738:	d005      	beq.n	8016746 <__cvt+0x42>
 801673a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801673e:	d100      	bne.n	8016742 <__cvt+0x3e>
 8016740:	3601      	adds	r6, #1
 8016742:	2102      	movs	r1, #2
 8016744:	e000      	b.n	8016748 <__cvt+0x44>
 8016746:	2103      	movs	r1, #3
 8016748:	ab03      	add	r3, sp, #12
 801674a:	9301      	str	r3, [sp, #4]
 801674c:	ab02      	add	r3, sp, #8
 801674e:	9300      	str	r3, [sp, #0]
 8016750:	ec45 4b10 	vmov	d0, r4, r5
 8016754:	4653      	mov	r3, sl
 8016756:	4632      	mov	r2, r6
 8016758:	f001 fdfa 	bl	8018350 <_dtoa_r>
 801675c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016760:	4607      	mov	r7, r0
 8016762:	d102      	bne.n	801676a <__cvt+0x66>
 8016764:	f019 0f01 	tst.w	r9, #1
 8016768:	d022      	beq.n	80167b0 <__cvt+0xac>
 801676a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801676e:	eb07 0906 	add.w	r9, r7, r6
 8016772:	d110      	bne.n	8016796 <__cvt+0x92>
 8016774:	783b      	ldrb	r3, [r7, #0]
 8016776:	2b30      	cmp	r3, #48	; 0x30
 8016778:	d10a      	bne.n	8016790 <__cvt+0x8c>
 801677a:	2200      	movs	r2, #0
 801677c:	2300      	movs	r3, #0
 801677e:	4620      	mov	r0, r4
 8016780:	4629      	mov	r1, r5
 8016782:	f7ea f9a1 	bl	8000ac8 <__aeabi_dcmpeq>
 8016786:	b918      	cbnz	r0, 8016790 <__cvt+0x8c>
 8016788:	f1c6 0601 	rsb	r6, r6, #1
 801678c:	f8ca 6000 	str.w	r6, [sl]
 8016790:	f8da 3000 	ldr.w	r3, [sl]
 8016794:	4499      	add	r9, r3
 8016796:	2200      	movs	r2, #0
 8016798:	2300      	movs	r3, #0
 801679a:	4620      	mov	r0, r4
 801679c:	4629      	mov	r1, r5
 801679e:	f7ea f993 	bl	8000ac8 <__aeabi_dcmpeq>
 80167a2:	b108      	cbz	r0, 80167a8 <__cvt+0xa4>
 80167a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80167a8:	2230      	movs	r2, #48	; 0x30
 80167aa:	9b03      	ldr	r3, [sp, #12]
 80167ac:	454b      	cmp	r3, r9
 80167ae:	d307      	bcc.n	80167c0 <__cvt+0xbc>
 80167b0:	9b03      	ldr	r3, [sp, #12]
 80167b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80167b4:	1bdb      	subs	r3, r3, r7
 80167b6:	4638      	mov	r0, r7
 80167b8:	6013      	str	r3, [r2, #0]
 80167ba:	b004      	add	sp, #16
 80167bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167c0:	1c59      	adds	r1, r3, #1
 80167c2:	9103      	str	r1, [sp, #12]
 80167c4:	701a      	strb	r2, [r3, #0]
 80167c6:	e7f0      	b.n	80167aa <__cvt+0xa6>

080167c8 <__exponent>:
 80167c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80167ca:	4603      	mov	r3, r0
 80167cc:	2900      	cmp	r1, #0
 80167ce:	bfb8      	it	lt
 80167d0:	4249      	neglt	r1, r1
 80167d2:	f803 2b02 	strb.w	r2, [r3], #2
 80167d6:	bfb4      	ite	lt
 80167d8:	222d      	movlt	r2, #45	; 0x2d
 80167da:	222b      	movge	r2, #43	; 0x2b
 80167dc:	2909      	cmp	r1, #9
 80167de:	7042      	strb	r2, [r0, #1]
 80167e0:	dd2a      	ble.n	8016838 <__exponent+0x70>
 80167e2:	f10d 0407 	add.w	r4, sp, #7
 80167e6:	46a4      	mov	ip, r4
 80167e8:	270a      	movs	r7, #10
 80167ea:	46a6      	mov	lr, r4
 80167ec:	460a      	mov	r2, r1
 80167ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80167f2:	fb07 1516 	mls	r5, r7, r6, r1
 80167f6:	3530      	adds	r5, #48	; 0x30
 80167f8:	2a63      	cmp	r2, #99	; 0x63
 80167fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80167fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8016802:	4631      	mov	r1, r6
 8016804:	dcf1      	bgt.n	80167ea <__exponent+0x22>
 8016806:	3130      	adds	r1, #48	; 0x30
 8016808:	f1ae 0502 	sub.w	r5, lr, #2
 801680c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8016810:	1c44      	adds	r4, r0, #1
 8016812:	4629      	mov	r1, r5
 8016814:	4561      	cmp	r1, ip
 8016816:	d30a      	bcc.n	801682e <__exponent+0x66>
 8016818:	f10d 0209 	add.w	r2, sp, #9
 801681c:	eba2 020e 	sub.w	r2, r2, lr
 8016820:	4565      	cmp	r5, ip
 8016822:	bf88      	it	hi
 8016824:	2200      	movhi	r2, #0
 8016826:	4413      	add	r3, r2
 8016828:	1a18      	subs	r0, r3, r0
 801682a:	b003      	add	sp, #12
 801682c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801682e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016832:	f804 2f01 	strb.w	r2, [r4, #1]!
 8016836:	e7ed      	b.n	8016814 <__exponent+0x4c>
 8016838:	2330      	movs	r3, #48	; 0x30
 801683a:	3130      	adds	r1, #48	; 0x30
 801683c:	7083      	strb	r3, [r0, #2]
 801683e:	70c1      	strb	r1, [r0, #3]
 8016840:	1d03      	adds	r3, r0, #4
 8016842:	e7f1      	b.n	8016828 <__exponent+0x60>

08016844 <_printf_float>:
 8016844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016848:	ed2d 8b02 	vpush	{d8}
 801684c:	b08d      	sub	sp, #52	; 0x34
 801684e:	460c      	mov	r4, r1
 8016850:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016854:	4616      	mov	r6, r2
 8016856:	461f      	mov	r7, r3
 8016858:	4605      	mov	r5, r0
 801685a:	f002 fed5 	bl	8019608 <_localeconv_r>
 801685e:	f8d0 a000 	ldr.w	sl, [r0]
 8016862:	4650      	mov	r0, sl
 8016864:	f7e9 fcb4 	bl	80001d0 <strlen>
 8016868:	2300      	movs	r3, #0
 801686a:	930a      	str	r3, [sp, #40]	; 0x28
 801686c:	6823      	ldr	r3, [r4, #0]
 801686e:	9305      	str	r3, [sp, #20]
 8016870:	f8d8 3000 	ldr.w	r3, [r8]
 8016874:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016878:	3307      	adds	r3, #7
 801687a:	f023 0307 	bic.w	r3, r3, #7
 801687e:	f103 0208 	add.w	r2, r3, #8
 8016882:	f8c8 2000 	str.w	r2, [r8]
 8016886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801688a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801688e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8016892:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016896:	9307      	str	r3, [sp, #28]
 8016898:	f8cd 8018 	str.w	r8, [sp, #24]
 801689c:	ee08 0a10 	vmov	s16, r0
 80168a0:	4b9f      	ldr	r3, [pc, #636]	; (8016b20 <_printf_float+0x2dc>)
 80168a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80168a6:	f04f 32ff 	mov.w	r2, #4294967295
 80168aa:	f7ea f93f 	bl	8000b2c <__aeabi_dcmpun>
 80168ae:	bb88      	cbnz	r0, 8016914 <_printf_float+0xd0>
 80168b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80168b4:	4b9a      	ldr	r3, [pc, #616]	; (8016b20 <_printf_float+0x2dc>)
 80168b6:	f04f 32ff 	mov.w	r2, #4294967295
 80168ba:	f7ea f919 	bl	8000af0 <__aeabi_dcmple>
 80168be:	bb48      	cbnz	r0, 8016914 <_printf_float+0xd0>
 80168c0:	2200      	movs	r2, #0
 80168c2:	2300      	movs	r3, #0
 80168c4:	4640      	mov	r0, r8
 80168c6:	4649      	mov	r1, r9
 80168c8:	f7ea f908 	bl	8000adc <__aeabi_dcmplt>
 80168cc:	b110      	cbz	r0, 80168d4 <_printf_float+0x90>
 80168ce:	232d      	movs	r3, #45	; 0x2d
 80168d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80168d4:	4b93      	ldr	r3, [pc, #588]	; (8016b24 <_printf_float+0x2e0>)
 80168d6:	4894      	ldr	r0, [pc, #592]	; (8016b28 <_printf_float+0x2e4>)
 80168d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80168dc:	bf94      	ite	ls
 80168de:	4698      	movls	r8, r3
 80168e0:	4680      	movhi	r8, r0
 80168e2:	2303      	movs	r3, #3
 80168e4:	6123      	str	r3, [r4, #16]
 80168e6:	9b05      	ldr	r3, [sp, #20]
 80168e8:	f023 0204 	bic.w	r2, r3, #4
 80168ec:	6022      	str	r2, [r4, #0]
 80168ee:	f04f 0900 	mov.w	r9, #0
 80168f2:	9700      	str	r7, [sp, #0]
 80168f4:	4633      	mov	r3, r6
 80168f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80168f8:	4621      	mov	r1, r4
 80168fa:	4628      	mov	r0, r5
 80168fc:	f000 f9d8 	bl	8016cb0 <_printf_common>
 8016900:	3001      	adds	r0, #1
 8016902:	f040 8090 	bne.w	8016a26 <_printf_float+0x1e2>
 8016906:	f04f 30ff 	mov.w	r0, #4294967295
 801690a:	b00d      	add	sp, #52	; 0x34
 801690c:	ecbd 8b02 	vpop	{d8}
 8016910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016914:	4642      	mov	r2, r8
 8016916:	464b      	mov	r3, r9
 8016918:	4640      	mov	r0, r8
 801691a:	4649      	mov	r1, r9
 801691c:	f7ea f906 	bl	8000b2c <__aeabi_dcmpun>
 8016920:	b140      	cbz	r0, 8016934 <_printf_float+0xf0>
 8016922:	464b      	mov	r3, r9
 8016924:	2b00      	cmp	r3, #0
 8016926:	bfbc      	itt	lt
 8016928:	232d      	movlt	r3, #45	; 0x2d
 801692a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801692e:	487f      	ldr	r0, [pc, #508]	; (8016b2c <_printf_float+0x2e8>)
 8016930:	4b7f      	ldr	r3, [pc, #508]	; (8016b30 <_printf_float+0x2ec>)
 8016932:	e7d1      	b.n	80168d8 <_printf_float+0x94>
 8016934:	6863      	ldr	r3, [r4, #4]
 8016936:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801693a:	9206      	str	r2, [sp, #24]
 801693c:	1c5a      	adds	r2, r3, #1
 801693e:	d13f      	bne.n	80169c0 <_printf_float+0x17c>
 8016940:	2306      	movs	r3, #6
 8016942:	6063      	str	r3, [r4, #4]
 8016944:	9b05      	ldr	r3, [sp, #20]
 8016946:	6861      	ldr	r1, [r4, #4]
 8016948:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801694c:	2300      	movs	r3, #0
 801694e:	9303      	str	r3, [sp, #12]
 8016950:	ab0a      	add	r3, sp, #40	; 0x28
 8016952:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016956:	ab09      	add	r3, sp, #36	; 0x24
 8016958:	ec49 8b10 	vmov	d0, r8, r9
 801695c:	9300      	str	r3, [sp, #0]
 801695e:	6022      	str	r2, [r4, #0]
 8016960:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016964:	4628      	mov	r0, r5
 8016966:	f7ff fecd 	bl	8016704 <__cvt>
 801696a:	9b06      	ldr	r3, [sp, #24]
 801696c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801696e:	2b47      	cmp	r3, #71	; 0x47
 8016970:	4680      	mov	r8, r0
 8016972:	d108      	bne.n	8016986 <_printf_float+0x142>
 8016974:	1cc8      	adds	r0, r1, #3
 8016976:	db02      	blt.n	801697e <_printf_float+0x13a>
 8016978:	6863      	ldr	r3, [r4, #4]
 801697a:	4299      	cmp	r1, r3
 801697c:	dd41      	ble.n	8016a02 <_printf_float+0x1be>
 801697e:	f1ab 0b02 	sub.w	fp, fp, #2
 8016982:	fa5f fb8b 	uxtb.w	fp, fp
 8016986:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801698a:	d820      	bhi.n	80169ce <_printf_float+0x18a>
 801698c:	3901      	subs	r1, #1
 801698e:	465a      	mov	r2, fp
 8016990:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016994:	9109      	str	r1, [sp, #36]	; 0x24
 8016996:	f7ff ff17 	bl	80167c8 <__exponent>
 801699a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801699c:	1813      	adds	r3, r2, r0
 801699e:	2a01      	cmp	r2, #1
 80169a0:	4681      	mov	r9, r0
 80169a2:	6123      	str	r3, [r4, #16]
 80169a4:	dc02      	bgt.n	80169ac <_printf_float+0x168>
 80169a6:	6822      	ldr	r2, [r4, #0]
 80169a8:	07d2      	lsls	r2, r2, #31
 80169aa:	d501      	bpl.n	80169b0 <_printf_float+0x16c>
 80169ac:	3301      	adds	r3, #1
 80169ae:	6123      	str	r3, [r4, #16]
 80169b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d09c      	beq.n	80168f2 <_printf_float+0xae>
 80169b8:	232d      	movs	r3, #45	; 0x2d
 80169ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80169be:	e798      	b.n	80168f2 <_printf_float+0xae>
 80169c0:	9a06      	ldr	r2, [sp, #24]
 80169c2:	2a47      	cmp	r2, #71	; 0x47
 80169c4:	d1be      	bne.n	8016944 <_printf_float+0x100>
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d1bc      	bne.n	8016944 <_printf_float+0x100>
 80169ca:	2301      	movs	r3, #1
 80169cc:	e7b9      	b.n	8016942 <_printf_float+0xfe>
 80169ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80169d2:	d118      	bne.n	8016a06 <_printf_float+0x1c2>
 80169d4:	2900      	cmp	r1, #0
 80169d6:	6863      	ldr	r3, [r4, #4]
 80169d8:	dd0b      	ble.n	80169f2 <_printf_float+0x1ae>
 80169da:	6121      	str	r1, [r4, #16]
 80169dc:	b913      	cbnz	r3, 80169e4 <_printf_float+0x1a0>
 80169de:	6822      	ldr	r2, [r4, #0]
 80169e0:	07d0      	lsls	r0, r2, #31
 80169e2:	d502      	bpl.n	80169ea <_printf_float+0x1a6>
 80169e4:	3301      	adds	r3, #1
 80169e6:	440b      	add	r3, r1
 80169e8:	6123      	str	r3, [r4, #16]
 80169ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80169ec:	f04f 0900 	mov.w	r9, #0
 80169f0:	e7de      	b.n	80169b0 <_printf_float+0x16c>
 80169f2:	b913      	cbnz	r3, 80169fa <_printf_float+0x1b6>
 80169f4:	6822      	ldr	r2, [r4, #0]
 80169f6:	07d2      	lsls	r2, r2, #31
 80169f8:	d501      	bpl.n	80169fe <_printf_float+0x1ba>
 80169fa:	3302      	adds	r3, #2
 80169fc:	e7f4      	b.n	80169e8 <_printf_float+0x1a4>
 80169fe:	2301      	movs	r3, #1
 8016a00:	e7f2      	b.n	80169e8 <_printf_float+0x1a4>
 8016a02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a08:	4299      	cmp	r1, r3
 8016a0a:	db05      	blt.n	8016a18 <_printf_float+0x1d4>
 8016a0c:	6823      	ldr	r3, [r4, #0]
 8016a0e:	6121      	str	r1, [r4, #16]
 8016a10:	07d8      	lsls	r0, r3, #31
 8016a12:	d5ea      	bpl.n	80169ea <_printf_float+0x1a6>
 8016a14:	1c4b      	adds	r3, r1, #1
 8016a16:	e7e7      	b.n	80169e8 <_printf_float+0x1a4>
 8016a18:	2900      	cmp	r1, #0
 8016a1a:	bfd4      	ite	le
 8016a1c:	f1c1 0202 	rsble	r2, r1, #2
 8016a20:	2201      	movgt	r2, #1
 8016a22:	4413      	add	r3, r2
 8016a24:	e7e0      	b.n	80169e8 <_printf_float+0x1a4>
 8016a26:	6823      	ldr	r3, [r4, #0]
 8016a28:	055a      	lsls	r2, r3, #21
 8016a2a:	d407      	bmi.n	8016a3c <_printf_float+0x1f8>
 8016a2c:	6923      	ldr	r3, [r4, #16]
 8016a2e:	4642      	mov	r2, r8
 8016a30:	4631      	mov	r1, r6
 8016a32:	4628      	mov	r0, r5
 8016a34:	47b8      	blx	r7
 8016a36:	3001      	adds	r0, #1
 8016a38:	d12c      	bne.n	8016a94 <_printf_float+0x250>
 8016a3a:	e764      	b.n	8016906 <_printf_float+0xc2>
 8016a3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016a40:	f240 80e0 	bls.w	8016c04 <_printf_float+0x3c0>
 8016a44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016a48:	2200      	movs	r2, #0
 8016a4a:	2300      	movs	r3, #0
 8016a4c:	f7ea f83c 	bl	8000ac8 <__aeabi_dcmpeq>
 8016a50:	2800      	cmp	r0, #0
 8016a52:	d034      	beq.n	8016abe <_printf_float+0x27a>
 8016a54:	4a37      	ldr	r2, [pc, #220]	; (8016b34 <_printf_float+0x2f0>)
 8016a56:	2301      	movs	r3, #1
 8016a58:	4631      	mov	r1, r6
 8016a5a:	4628      	mov	r0, r5
 8016a5c:	47b8      	blx	r7
 8016a5e:	3001      	adds	r0, #1
 8016a60:	f43f af51 	beq.w	8016906 <_printf_float+0xc2>
 8016a64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016a68:	429a      	cmp	r2, r3
 8016a6a:	db02      	blt.n	8016a72 <_printf_float+0x22e>
 8016a6c:	6823      	ldr	r3, [r4, #0]
 8016a6e:	07d8      	lsls	r0, r3, #31
 8016a70:	d510      	bpl.n	8016a94 <_printf_float+0x250>
 8016a72:	ee18 3a10 	vmov	r3, s16
 8016a76:	4652      	mov	r2, sl
 8016a78:	4631      	mov	r1, r6
 8016a7a:	4628      	mov	r0, r5
 8016a7c:	47b8      	blx	r7
 8016a7e:	3001      	adds	r0, #1
 8016a80:	f43f af41 	beq.w	8016906 <_printf_float+0xc2>
 8016a84:	f04f 0800 	mov.w	r8, #0
 8016a88:	f104 091a 	add.w	r9, r4, #26
 8016a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a8e:	3b01      	subs	r3, #1
 8016a90:	4543      	cmp	r3, r8
 8016a92:	dc09      	bgt.n	8016aa8 <_printf_float+0x264>
 8016a94:	6823      	ldr	r3, [r4, #0]
 8016a96:	079b      	lsls	r3, r3, #30
 8016a98:	f100 8105 	bmi.w	8016ca6 <_printf_float+0x462>
 8016a9c:	68e0      	ldr	r0, [r4, #12]
 8016a9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016aa0:	4298      	cmp	r0, r3
 8016aa2:	bfb8      	it	lt
 8016aa4:	4618      	movlt	r0, r3
 8016aa6:	e730      	b.n	801690a <_printf_float+0xc6>
 8016aa8:	2301      	movs	r3, #1
 8016aaa:	464a      	mov	r2, r9
 8016aac:	4631      	mov	r1, r6
 8016aae:	4628      	mov	r0, r5
 8016ab0:	47b8      	blx	r7
 8016ab2:	3001      	adds	r0, #1
 8016ab4:	f43f af27 	beq.w	8016906 <_printf_float+0xc2>
 8016ab8:	f108 0801 	add.w	r8, r8, #1
 8016abc:	e7e6      	b.n	8016a8c <_printf_float+0x248>
 8016abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	dc39      	bgt.n	8016b38 <_printf_float+0x2f4>
 8016ac4:	4a1b      	ldr	r2, [pc, #108]	; (8016b34 <_printf_float+0x2f0>)
 8016ac6:	2301      	movs	r3, #1
 8016ac8:	4631      	mov	r1, r6
 8016aca:	4628      	mov	r0, r5
 8016acc:	47b8      	blx	r7
 8016ace:	3001      	adds	r0, #1
 8016ad0:	f43f af19 	beq.w	8016906 <_printf_float+0xc2>
 8016ad4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016ad8:	4313      	orrs	r3, r2
 8016ada:	d102      	bne.n	8016ae2 <_printf_float+0x29e>
 8016adc:	6823      	ldr	r3, [r4, #0]
 8016ade:	07d9      	lsls	r1, r3, #31
 8016ae0:	d5d8      	bpl.n	8016a94 <_printf_float+0x250>
 8016ae2:	ee18 3a10 	vmov	r3, s16
 8016ae6:	4652      	mov	r2, sl
 8016ae8:	4631      	mov	r1, r6
 8016aea:	4628      	mov	r0, r5
 8016aec:	47b8      	blx	r7
 8016aee:	3001      	adds	r0, #1
 8016af0:	f43f af09 	beq.w	8016906 <_printf_float+0xc2>
 8016af4:	f04f 0900 	mov.w	r9, #0
 8016af8:	f104 0a1a 	add.w	sl, r4, #26
 8016afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016afe:	425b      	negs	r3, r3
 8016b00:	454b      	cmp	r3, r9
 8016b02:	dc01      	bgt.n	8016b08 <_printf_float+0x2c4>
 8016b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b06:	e792      	b.n	8016a2e <_printf_float+0x1ea>
 8016b08:	2301      	movs	r3, #1
 8016b0a:	4652      	mov	r2, sl
 8016b0c:	4631      	mov	r1, r6
 8016b0e:	4628      	mov	r0, r5
 8016b10:	47b8      	blx	r7
 8016b12:	3001      	adds	r0, #1
 8016b14:	f43f aef7 	beq.w	8016906 <_printf_float+0xc2>
 8016b18:	f109 0901 	add.w	r9, r9, #1
 8016b1c:	e7ee      	b.n	8016afc <_printf_float+0x2b8>
 8016b1e:	bf00      	nop
 8016b20:	7fefffff 	.word	0x7fefffff
 8016b24:	0801caf4 	.word	0x0801caf4
 8016b28:	0801caf8 	.word	0x0801caf8
 8016b2c:	0801cb00 	.word	0x0801cb00
 8016b30:	0801cafc 	.word	0x0801cafc
 8016b34:	0801cb04 	.word	0x0801cb04
 8016b38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016b3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016b3c:	429a      	cmp	r2, r3
 8016b3e:	bfa8      	it	ge
 8016b40:	461a      	movge	r2, r3
 8016b42:	2a00      	cmp	r2, #0
 8016b44:	4691      	mov	r9, r2
 8016b46:	dc37      	bgt.n	8016bb8 <_printf_float+0x374>
 8016b48:	f04f 0b00 	mov.w	fp, #0
 8016b4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016b50:	f104 021a 	add.w	r2, r4, #26
 8016b54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016b56:	9305      	str	r3, [sp, #20]
 8016b58:	eba3 0309 	sub.w	r3, r3, r9
 8016b5c:	455b      	cmp	r3, fp
 8016b5e:	dc33      	bgt.n	8016bc8 <_printf_float+0x384>
 8016b60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016b64:	429a      	cmp	r2, r3
 8016b66:	db3b      	blt.n	8016be0 <_printf_float+0x39c>
 8016b68:	6823      	ldr	r3, [r4, #0]
 8016b6a:	07da      	lsls	r2, r3, #31
 8016b6c:	d438      	bmi.n	8016be0 <_printf_float+0x39c>
 8016b6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016b70:	9b05      	ldr	r3, [sp, #20]
 8016b72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016b74:	1ad3      	subs	r3, r2, r3
 8016b76:	eba2 0901 	sub.w	r9, r2, r1
 8016b7a:	4599      	cmp	r9, r3
 8016b7c:	bfa8      	it	ge
 8016b7e:	4699      	movge	r9, r3
 8016b80:	f1b9 0f00 	cmp.w	r9, #0
 8016b84:	dc35      	bgt.n	8016bf2 <_printf_float+0x3ae>
 8016b86:	f04f 0800 	mov.w	r8, #0
 8016b8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016b8e:	f104 0a1a 	add.w	sl, r4, #26
 8016b92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016b96:	1a9b      	subs	r3, r3, r2
 8016b98:	eba3 0309 	sub.w	r3, r3, r9
 8016b9c:	4543      	cmp	r3, r8
 8016b9e:	f77f af79 	ble.w	8016a94 <_printf_float+0x250>
 8016ba2:	2301      	movs	r3, #1
 8016ba4:	4652      	mov	r2, sl
 8016ba6:	4631      	mov	r1, r6
 8016ba8:	4628      	mov	r0, r5
 8016baa:	47b8      	blx	r7
 8016bac:	3001      	adds	r0, #1
 8016bae:	f43f aeaa 	beq.w	8016906 <_printf_float+0xc2>
 8016bb2:	f108 0801 	add.w	r8, r8, #1
 8016bb6:	e7ec      	b.n	8016b92 <_printf_float+0x34e>
 8016bb8:	4613      	mov	r3, r2
 8016bba:	4631      	mov	r1, r6
 8016bbc:	4642      	mov	r2, r8
 8016bbe:	4628      	mov	r0, r5
 8016bc0:	47b8      	blx	r7
 8016bc2:	3001      	adds	r0, #1
 8016bc4:	d1c0      	bne.n	8016b48 <_printf_float+0x304>
 8016bc6:	e69e      	b.n	8016906 <_printf_float+0xc2>
 8016bc8:	2301      	movs	r3, #1
 8016bca:	4631      	mov	r1, r6
 8016bcc:	4628      	mov	r0, r5
 8016bce:	9205      	str	r2, [sp, #20]
 8016bd0:	47b8      	blx	r7
 8016bd2:	3001      	adds	r0, #1
 8016bd4:	f43f ae97 	beq.w	8016906 <_printf_float+0xc2>
 8016bd8:	9a05      	ldr	r2, [sp, #20]
 8016bda:	f10b 0b01 	add.w	fp, fp, #1
 8016bde:	e7b9      	b.n	8016b54 <_printf_float+0x310>
 8016be0:	ee18 3a10 	vmov	r3, s16
 8016be4:	4652      	mov	r2, sl
 8016be6:	4631      	mov	r1, r6
 8016be8:	4628      	mov	r0, r5
 8016bea:	47b8      	blx	r7
 8016bec:	3001      	adds	r0, #1
 8016bee:	d1be      	bne.n	8016b6e <_printf_float+0x32a>
 8016bf0:	e689      	b.n	8016906 <_printf_float+0xc2>
 8016bf2:	9a05      	ldr	r2, [sp, #20]
 8016bf4:	464b      	mov	r3, r9
 8016bf6:	4442      	add	r2, r8
 8016bf8:	4631      	mov	r1, r6
 8016bfa:	4628      	mov	r0, r5
 8016bfc:	47b8      	blx	r7
 8016bfe:	3001      	adds	r0, #1
 8016c00:	d1c1      	bne.n	8016b86 <_printf_float+0x342>
 8016c02:	e680      	b.n	8016906 <_printf_float+0xc2>
 8016c04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016c06:	2a01      	cmp	r2, #1
 8016c08:	dc01      	bgt.n	8016c0e <_printf_float+0x3ca>
 8016c0a:	07db      	lsls	r3, r3, #31
 8016c0c:	d538      	bpl.n	8016c80 <_printf_float+0x43c>
 8016c0e:	2301      	movs	r3, #1
 8016c10:	4642      	mov	r2, r8
 8016c12:	4631      	mov	r1, r6
 8016c14:	4628      	mov	r0, r5
 8016c16:	47b8      	blx	r7
 8016c18:	3001      	adds	r0, #1
 8016c1a:	f43f ae74 	beq.w	8016906 <_printf_float+0xc2>
 8016c1e:	ee18 3a10 	vmov	r3, s16
 8016c22:	4652      	mov	r2, sl
 8016c24:	4631      	mov	r1, r6
 8016c26:	4628      	mov	r0, r5
 8016c28:	47b8      	blx	r7
 8016c2a:	3001      	adds	r0, #1
 8016c2c:	f43f ae6b 	beq.w	8016906 <_printf_float+0xc2>
 8016c30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016c34:	2200      	movs	r2, #0
 8016c36:	2300      	movs	r3, #0
 8016c38:	f7e9 ff46 	bl	8000ac8 <__aeabi_dcmpeq>
 8016c3c:	b9d8      	cbnz	r0, 8016c76 <_printf_float+0x432>
 8016c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c40:	f108 0201 	add.w	r2, r8, #1
 8016c44:	3b01      	subs	r3, #1
 8016c46:	4631      	mov	r1, r6
 8016c48:	4628      	mov	r0, r5
 8016c4a:	47b8      	blx	r7
 8016c4c:	3001      	adds	r0, #1
 8016c4e:	d10e      	bne.n	8016c6e <_printf_float+0x42a>
 8016c50:	e659      	b.n	8016906 <_printf_float+0xc2>
 8016c52:	2301      	movs	r3, #1
 8016c54:	4652      	mov	r2, sl
 8016c56:	4631      	mov	r1, r6
 8016c58:	4628      	mov	r0, r5
 8016c5a:	47b8      	blx	r7
 8016c5c:	3001      	adds	r0, #1
 8016c5e:	f43f ae52 	beq.w	8016906 <_printf_float+0xc2>
 8016c62:	f108 0801 	add.w	r8, r8, #1
 8016c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c68:	3b01      	subs	r3, #1
 8016c6a:	4543      	cmp	r3, r8
 8016c6c:	dcf1      	bgt.n	8016c52 <_printf_float+0x40e>
 8016c6e:	464b      	mov	r3, r9
 8016c70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016c74:	e6dc      	b.n	8016a30 <_printf_float+0x1ec>
 8016c76:	f04f 0800 	mov.w	r8, #0
 8016c7a:	f104 0a1a 	add.w	sl, r4, #26
 8016c7e:	e7f2      	b.n	8016c66 <_printf_float+0x422>
 8016c80:	2301      	movs	r3, #1
 8016c82:	4642      	mov	r2, r8
 8016c84:	e7df      	b.n	8016c46 <_printf_float+0x402>
 8016c86:	2301      	movs	r3, #1
 8016c88:	464a      	mov	r2, r9
 8016c8a:	4631      	mov	r1, r6
 8016c8c:	4628      	mov	r0, r5
 8016c8e:	47b8      	blx	r7
 8016c90:	3001      	adds	r0, #1
 8016c92:	f43f ae38 	beq.w	8016906 <_printf_float+0xc2>
 8016c96:	f108 0801 	add.w	r8, r8, #1
 8016c9a:	68e3      	ldr	r3, [r4, #12]
 8016c9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016c9e:	1a5b      	subs	r3, r3, r1
 8016ca0:	4543      	cmp	r3, r8
 8016ca2:	dcf0      	bgt.n	8016c86 <_printf_float+0x442>
 8016ca4:	e6fa      	b.n	8016a9c <_printf_float+0x258>
 8016ca6:	f04f 0800 	mov.w	r8, #0
 8016caa:	f104 0919 	add.w	r9, r4, #25
 8016cae:	e7f4      	b.n	8016c9a <_printf_float+0x456>

08016cb0 <_printf_common>:
 8016cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016cb4:	4616      	mov	r6, r2
 8016cb6:	4699      	mov	r9, r3
 8016cb8:	688a      	ldr	r2, [r1, #8]
 8016cba:	690b      	ldr	r3, [r1, #16]
 8016cbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016cc0:	4293      	cmp	r3, r2
 8016cc2:	bfb8      	it	lt
 8016cc4:	4613      	movlt	r3, r2
 8016cc6:	6033      	str	r3, [r6, #0]
 8016cc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016ccc:	4607      	mov	r7, r0
 8016cce:	460c      	mov	r4, r1
 8016cd0:	b10a      	cbz	r2, 8016cd6 <_printf_common+0x26>
 8016cd2:	3301      	adds	r3, #1
 8016cd4:	6033      	str	r3, [r6, #0]
 8016cd6:	6823      	ldr	r3, [r4, #0]
 8016cd8:	0699      	lsls	r1, r3, #26
 8016cda:	bf42      	ittt	mi
 8016cdc:	6833      	ldrmi	r3, [r6, #0]
 8016cde:	3302      	addmi	r3, #2
 8016ce0:	6033      	strmi	r3, [r6, #0]
 8016ce2:	6825      	ldr	r5, [r4, #0]
 8016ce4:	f015 0506 	ands.w	r5, r5, #6
 8016ce8:	d106      	bne.n	8016cf8 <_printf_common+0x48>
 8016cea:	f104 0a19 	add.w	sl, r4, #25
 8016cee:	68e3      	ldr	r3, [r4, #12]
 8016cf0:	6832      	ldr	r2, [r6, #0]
 8016cf2:	1a9b      	subs	r3, r3, r2
 8016cf4:	42ab      	cmp	r3, r5
 8016cf6:	dc26      	bgt.n	8016d46 <_printf_common+0x96>
 8016cf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016cfc:	1e13      	subs	r3, r2, #0
 8016cfe:	6822      	ldr	r2, [r4, #0]
 8016d00:	bf18      	it	ne
 8016d02:	2301      	movne	r3, #1
 8016d04:	0692      	lsls	r2, r2, #26
 8016d06:	d42b      	bmi.n	8016d60 <_printf_common+0xb0>
 8016d08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016d0c:	4649      	mov	r1, r9
 8016d0e:	4638      	mov	r0, r7
 8016d10:	47c0      	blx	r8
 8016d12:	3001      	adds	r0, #1
 8016d14:	d01e      	beq.n	8016d54 <_printf_common+0xa4>
 8016d16:	6823      	ldr	r3, [r4, #0]
 8016d18:	68e5      	ldr	r5, [r4, #12]
 8016d1a:	6832      	ldr	r2, [r6, #0]
 8016d1c:	f003 0306 	and.w	r3, r3, #6
 8016d20:	2b04      	cmp	r3, #4
 8016d22:	bf08      	it	eq
 8016d24:	1aad      	subeq	r5, r5, r2
 8016d26:	68a3      	ldr	r3, [r4, #8]
 8016d28:	6922      	ldr	r2, [r4, #16]
 8016d2a:	bf0c      	ite	eq
 8016d2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016d30:	2500      	movne	r5, #0
 8016d32:	4293      	cmp	r3, r2
 8016d34:	bfc4      	itt	gt
 8016d36:	1a9b      	subgt	r3, r3, r2
 8016d38:	18ed      	addgt	r5, r5, r3
 8016d3a:	2600      	movs	r6, #0
 8016d3c:	341a      	adds	r4, #26
 8016d3e:	42b5      	cmp	r5, r6
 8016d40:	d11a      	bne.n	8016d78 <_printf_common+0xc8>
 8016d42:	2000      	movs	r0, #0
 8016d44:	e008      	b.n	8016d58 <_printf_common+0xa8>
 8016d46:	2301      	movs	r3, #1
 8016d48:	4652      	mov	r2, sl
 8016d4a:	4649      	mov	r1, r9
 8016d4c:	4638      	mov	r0, r7
 8016d4e:	47c0      	blx	r8
 8016d50:	3001      	adds	r0, #1
 8016d52:	d103      	bne.n	8016d5c <_printf_common+0xac>
 8016d54:	f04f 30ff 	mov.w	r0, #4294967295
 8016d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d5c:	3501      	adds	r5, #1
 8016d5e:	e7c6      	b.n	8016cee <_printf_common+0x3e>
 8016d60:	18e1      	adds	r1, r4, r3
 8016d62:	1c5a      	adds	r2, r3, #1
 8016d64:	2030      	movs	r0, #48	; 0x30
 8016d66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016d6a:	4422      	add	r2, r4
 8016d6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016d70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016d74:	3302      	adds	r3, #2
 8016d76:	e7c7      	b.n	8016d08 <_printf_common+0x58>
 8016d78:	2301      	movs	r3, #1
 8016d7a:	4622      	mov	r2, r4
 8016d7c:	4649      	mov	r1, r9
 8016d7e:	4638      	mov	r0, r7
 8016d80:	47c0      	blx	r8
 8016d82:	3001      	adds	r0, #1
 8016d84:	d0e6      	beq.n	8016d54 <_printf_common+0xa4>
 8016d86:	3601      	adds	r6, #1
 8016d88:	e7d9      	b.n	8016d3e <_printf_common+0x8e>
	...

08016d8c <_printf_i>:
 8016d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016d90:	460c      	mov	r4, r1
 8016d92:	4691      	mov	r9, r2
 8016d94:	7e27      	ldrb	r7, [r4, #24]
 8016d96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016d98:	2f78      	cmp	r7, #120	; 0x78
 8016d9a:	4680      	mov	r8, r0
 8016d9c:	469a      	mov	sl, r3
 8016d9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016da2:	d807      	bhi.n	8016db4 <_printf_i+0x28>
 8016da4:	2f62      	cmp	r7, #98	; 0x62
 8016da6:	d80a      	bhi.n	8016dbe <_printf_i+0x32>
 8016da8:	2f00      	cmp	r7, #0
 8016daa:	f000 80d8 	beq.w	8016f5e <_printf_i+0x1d2>
 8016dae:	2f58      	cmp	r7, #88	; 0x58
 8016db0:	f000 80a3 	beq.w	8016efa <_printf_i+0x16e>
 8016db4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016db8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016dbc:	e03a      	b.n	8016e34 <_printf_i+0xa8>
 8016dbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016dc2:	2b15      	cmp	r3, #21
 8016dc4:	d8f6      	bhi.n	8016db4 <_printf_i+0x28>
 8016dc6:	a001      	add	r0, pc, #4	; (adr r0, 8016dcc <_printf_i+0x40>)
 8016dc8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016dcc:	08016e25 	.word	0x08016e25
 8016dd0:	08016e39 	.word	0x08016e39
 8016dd4:	08016db5 	.word	0x08016db5
 8016dd8:	08016db5 	.word	0x08016db5
 8016ddc:	08016db5 	.word	0x08016db5
 8016de0:	08016db5 	.word	0x08016db5
 8016de4:	08016e39 	.word	0x08016e39
 8016de8:	08016db5 	.word	0x08016db5
 8016dec:	08016db5 	.word	0x08016db5
 8016df0:	08016db5 	.word	0x08016db5
 8016df4:	08016db5 	.word	0x08016db5
 8016df8:	08016f45 	.word	0x08016f45
 8016dfc:	08016e69 	.word	0x08016e69
 8016e00:	08016f27 	.word	0x08016f27
 8016e04:	08016db5 	.word	0x08016db5
 8016e08:	08016db5 	.word	0x08016db5
 8016e0c:	08016f67 	.word	0x08016f67
 8016e10:	08016db5 	.word	0x08016db5
 8016e14:	08016e69 	.word	0x08016e69
 8016e18:	08016db5 	.word	0x08016db5
 8016e1c:	08016db5 	.word	0x08016db5
 8016e20:	08016f2f 	.word	0x08016f2f
 8016e24:	680b      	ldr	r3, [r1, #0]
 8016e26:	1d1a      	adds	r2, r3, #4
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	600a      	str	r2, [r1, #0]
 8016e2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016e30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016e34:	2301      	movs	r3, #1
 8016e36:	e0a3      	b.n	8016f80 <_printf_i+0x1f4>
 8016e38:	6825      	ldr	r5, [r4, #0]
 8016e3a:	6808      	ldr	r0, [r1, #0]
 8016e3c:	062e      	lsls	r6, r5, #24
 8016e3e:	f100 0304 	add.w	r3, r0, #4
 8016e42:	d50a      	bpl.n	8016e5a <_printf_i+0xce>
 8016e44:	6805      	ldr	r5, [r0, #0]
 8016e46:	600b      	str	r3, [r1, #0]
 8016e48:	2d00      	cmp	r5, #0
 8016e4a:	da03      	bge.n	8016e54 <_printf_i+0xc8>
 8016e4c:	232d      	movs	r3, #45	; 0x2d
 8016e4e:	426d      	negs	r5, r5
 8016e50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016e54:	485e      	ldr	r0, [pc, #376]	; (8016fd0 <_printf_i+0x244>)
 8016e56:	230a      	movs	r3, #10
 8016e58:	e019      	b.n	8016e8e <_printf_i+0x102>
 8016e5a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016e5e:	6805      	ldr	r5, [r0, #0]
 8016e60:	600b      	str	r3, [r1, #0]
 8016e62:	bf18      	it	ne
 8016e64:	b22d      	sxthne	r5, r5
 8016e66:	e7ef      	b.n	8016e48 <_printf_i+0xbc>
 8016e68:	680b      	ldr	r3, [r1, #0]
 8016e6a:	6825      	ldr	r5, [r4, #0]
 8016e6c:	1d18      	adds	r0, r3, #4
 8016e6e:	6008      	str	r0, [r1, #0]
 8016e70:	0628      	lsls	r0, r5, #24
 8016e72:	d501      	bpl.n	8016e78 <_printf_i+0xec>
 8016e74:	681d      	ldr	r5, [r3, #0]
 8016e76:	e002      	b.n	8016e7e <_printf_i+0xf2>
 8016e78:	0669      	lsls	r1, r5, #25
 8016e7a:	d5fb      	bpl.n	8016e74 <_printf_i+0xe8>
 8016e7c:	881d      	ldrh	r5, [r3, #0]
 8016e7e:	4854      	ldr	r0, [pc, #336]	; (8016fd0 <_printf_i+0x244>)
 8016e80:	2f6f      	cmp	r7, #111	; 0x6f
 8016e82:	bf0c      	ite	eq
 8016e84:	2308      	moveq	r3, #8
 8016e86:	230a      	movne	r3, #10
 8016e88:	2100      	movs	r1, #0
 8016e8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016e8e:	6866      	ldr	r6, [r4, #4]
 8016e90:	60a6      	str	r6, [r4, #8]
 8016e92:	2e00      	cmp	r6, #0
 8016e94:	bfa2      	ittt	ge
 8016e96:	6821      	ldrge	r1, [r4, #0]
 8016e98:	f021 0104 	bicge.w	r1, r1, #4
 8016e9c:	6021      	strge	r1, [r4, #0]
 8016e9e:	b90d      	cbnz	r5, 8016ea4 <_printf_i+0x118>
 8016ea0:	2e00      	cmp	r6, #0
 8016ea2:	d04d      	beq.n	8016f40 <_printf_i+0x1b4>
 8016ea4:	4616      	mov	r6, r2
 8016ea6:	fbb5 f1f3 	udiv	r1, r5, r3
 8016eaa:	fb03 5711 	mls	r7, r3, r1, r5
 8016eae:	5dc7      	ldrb	r7, [r0, r7]
 8016eb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016eb4:	462f      	mov	r7, r5
 8016eb6:	42bb      	cmp	r3, r7
 8016eb8:	460d      	mov	r5, r1
 8016eba:	d9f4      	bls.n	8016ea6 <_printf_i+0x11a>
 8016ebc:	2b08      	cmp	r3, #8
 8016ebe:	d10b      	bne.n	8016ed8 <_printf_i+0x14c>
 8016ec0:	6823      	ldr	r3, [r4, #0]
 8016ec2:	07df      	lsls	r7, r3, #31
 8016ec4:	d508      	bpl.n	8016ed8 <_printf_i+0x14c>
 8016ec6:	6923      	ldr	r3, [r4, #16]
 8016ec8:	6861      	ldr	r1, [r4, #4]
 8016eca:	4299      	cmp	r1, r3
 8016ecc:	bfde      	ittt	le
 8016ece:	2330      	movle	r3, #48	; 0x30
 8016ed0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016ed4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016ed8:	1b92      	subs	r2, r2, r6
 8016eda:	6122      	str	r2, [r4, #16]
 8016edc:	f8cd a000 	str.w	sl, [sp]
 8016ee0:	464b      	mov	r3, r9
 8016ee2:	aa03      	add	r2, sp, #12
 8016ee4:	4621      	mov	r1, r4
 8016ee6:	4640      	mov	r0, r8
 8016ee8:	f7ff fee2 	bl	8016cb0 <_printf_common>
 8016eec:	3001      	adds	r0, #1
 8016eee:	d14c      	bne.n	8016f8a <_printf_i+0x1fe>
 8016ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8016ef4:	b004      	add	sp, #16
 8016ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016efa:	4835      	ldr	r0, [pc, #212]	; (8016fd0 <_printf_i+0x244>)
 8016efc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016f00:	6823      	ldr	r3, [r4, #0]
 8016f02:	680e      	ldr	r6, [r1, #0]
 8016f04:	061f      	lsls	r7, r3, #24
 8016f06:	f856 5b04 	ldr.w	r5, [r6], #4
 8016f0a:	600e      	str	r6, [r1, #0]
 8016f0c:	d514      	bpl.n	8016f38 <_printf_i+0x1ac>
 8016f0e:	07d9      	lsls	r1, r3, #31
 8016f10:	bf44      	itt	mi
 8016f12:	f043 0320 	orrmi.w	r3, r3, #32
 8016f16:	6023      	strmi	r3, [r4, #0]
 8016f18:	b91d      	cbnz	r5, 8016f22 <_printf_i+0x196>
 8016f1a:	6823      	ldr	r3, [r4, #0]
 8016f1c:	f023 0320 	bic.w	r3, r3, #32
 8016f20:	6023      	str	r3, [r4, #0]
 8016f22:	2310      	movs	r3, #16
 8016f24:	e7b0      	b.n	8016e88 <_printf_i+0xfc>
 8016f26:	6823      	ldr	r3, [r4, #0]
 8016f28:	f043 0320 	orr.w	r3, r3, #32
 8016f2c:	6023      	str	r3, [r4, #0]
 8016f2e:	2378      	movs	r3, #120	; 0x78
 8016f30:	4828      	ldr	r0, [pc, #160]	; (8016fd4 <_printf_i+0x248>)
 8016f32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016f36:	e7e3      	b.n	8016f00 <_printf_i+0x174>
 8016f38:	065e      	lsls	r6, r3, #25
 8016f3a:	bf48      	it	mi
 8016f3c:	b2ad      	uxthmi	r5, r5
 8016f3e:	e7e6      	b.n	8016f0e <_printf_i+0x182>
 8016f40:	4616      	mov	r6, r2
 8016f42:	e7bb      	b.n	8016ebc <_printf_i+0x130>
 8016f44:	680b      	ldr	r3, [r1, #0]
 8016f46:	6826      	ldr	r6, [r4, #0]
 8016f48:	6960      	ldr	r0, [r4, #20]
 8016f4a:	1d1d      	adds	r5, r3, #4
 8016f4c:	600d      	str	r5, [r1, #0]
 8016f4e:	0635      	lsls	r5, r6, #24
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	d501      	bpl.n	8016f58 <_printf_i+0x1cc>
 8016f54:	6018      	str	r0, [r3, #0]
 8016f56:	e002      	b.n	8016f5e <_printf_i+0x1d2>
 8016f58:	0671      	lsls	r1, r6, #25
 8016f5a:	d5fb      	bpl.n	8016f54 <_printf_i+0x1c8>
 8016f5c:	8018      	strh	r0, [r3, #0]
 8016f5e:	2300      	movs	r3, #0
 8016f60:	6123      	str	r3, [r4, #16]
 8016f62:	4616      	mov	r6, r2
 8016f64:	e7ba      	b.n	8016edc <_printf_i+0x150>
 8016f66:	680b      	ldr	r3, [r1, #0]
 8016f68:	1d1a      	adds	r2, r3, #4
 8016f6a:	600a      	str	r2, [r1, #0]
 8016f6c:	681e      	ldr	r6, [r3, #0]
 8016f6e:	6862      	ldr	r2, [r4, #4]
 8016f70:	2100      	movs	r1, #0
 8016f72:	4630      	mov	r0, r6
 8016f74:	f7e9 f934 	bl	80001e0 <memchr>
 8016f78:	b108      	cbz	r0, 8016f7e <_printf_i+0x1f2>
 8016f7a:	1b80      	subs	r0, r0, r6
 8016f7c:	6060      	str	r0, [r4, #4]
 8016f7e:	6863      	ldr	r3, [r4, #4]
 8016f80:	6123      	str	r3, [r4, #16]
 8016f82:	2300      	movs	r3, #0
 8016f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016f88:	e7a8      	b.n	8016edc <_printf_i+0x150>
 8016f8a:	6923      	ldr	r3, [r4, #16]
 8016f8c:	4632      	mov	r2, r6
 8016f8e:	4649      	mov	r1, r9
 8016f90:	4640      	mov	r0, r8
 8016f92:	47d0      	blx	sl
 8016f94:	3001      	adds	r0, #1
 8016f96:	d0ab      	beq.n	8016ef0 <_printf_i+0x164>
 8016f98:	6823      	ldr	r3, [r4, #0]
 8016f9a:	079b      	lsls	r3, r3, #30
 8016f9c:	d413      	bmi.n	8016fc6 <_printf_i+0x23a>
 8016f9e:	68e0      	ldr	r0, [r4, #12]
 8016fa0:	9b03      	ldr	r3, [sp, #12]
 8016fa2:	4298      	cmp	r0, r3
 8016fa4:	bfb8      	it	lt
 8016fa6:	4618      	movlt	r0, r3
 8016fa8:	e7a4      	b.n	8016ef4 <_printf_i+0x168>
 8016faa:	2301      	movs	r3, #1
 8016fac:	4632      	mov	r2, r6
 8016fae:	4649      	mov	r1, r9
 8016fb0:	4640      	mov	r0, r8
 8016fb2:	47d0      	blx	sl
 8016fb4:	3001      	adds	r0, #1
 8016fb6:	d09b      	beq.n	8016ef0 <_printf_i+0x164>
 8016fb8:	3501      	adds	r5, #1
 8016fba:	68e3      	ldr	r3, [r4, #12]
 8016fbc:	9903      	ldr	r1, [sp, #12]
 8016fbe:	1a5b      	subs	r3, r3, r1
 8016fc0:	42ab      	cmp	r3, r5
 8016fc2:	dcf2      	bgt.n	8016faa <_printf_i+0x21e>
 8016fc4:	e7eb      	b.n	8016f9e <_printf_i+0x212>
 8016fc6:	2500      	movs	r5, #0
 8016fc8:	f104 0619 	add.w	r6, r4, #25
 8016fcc:	e7f5      	b.n	8016fba <_printf_i+0x22e>
 8016fce:	bf00      	nop
 8016fd0:	0801cb06 	.word	0x0801cb06
 8016fd4:	0801cb17 	.word	0x0801cb17

08016fd8 <_scanf_float>:
 8016fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fdc:	b087      	sub	sp, #28
 8016fde:	4617      	mov	r7, r2
 8016fe0:	9303      	str	r3, [sp, #12]
 8016fe2:	688b      	ldr	r3, [r1, #8]
 8016fe4:	1e5a      	subs	r2, r3, #1
 8016fe6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016fea:	bf83      	ittte	hi
 8016fec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016ff0:	195b      	addhi	r3, r3, r5
 8016ff2:	9302      	strhi	r3, [sp, #8]
 8016ff4:	2300      	movls	r3, #0
 8016ff6:	bf86      	itte	hi
 8016ff8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016ffc:	608b      	strhi	r3, [r1, #8]
 8016ffe:	9302      	strls	r3, [sp, #8]
 8017000:	680b      	ldr	r3, [r1, #0]
 8017002:	468b      	mov	fp, r1
 8017004:	2500      	movs	r5, #0
 8017006:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801700a:	f84b 3b1c 	str.w	r3, [fp], #28
 801700e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017012:	4680      	mov	r8, r0
 8017014:	460c      	mov	r4, r1
 8017016:	465e      	mov	r6, fp
 8017018:	46aa      	mov	sl, r5
 801701a:	46a9      	mov	r9, r5
 801701c:	9501      	str	r5, [sp, #4]
 801701e:	68a2      	ldr	r2, [r4, #8]
 8017020:	b152      	cbz	r2, 8017038 <_scanf_float+0x60>
 8017022:	683b      	ldr	r3, [r7, #0]
 8017024:	781b      	ldrb	r3, [r3, #0]
 8017026:	2b4e      	cmp	r3, #78	; 0x4e
 8017028:	d864      	bhi.n	80170f4 <_scanf_float+0x11c>
 801702a:	2b40      	cmp	r3, #64	; 0x40
 801702c:	d83c      	bhi.n	80170a8 <_scanf_float+0xd0>
 801702e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8017032:	b2c8      	uxtb	r0, r1
 8017034:	280e      	cmp	r0, #14
 8017036:	d93a      	bls.n	80170ae <_scanf_float+0xd6>
 8017038:	f1b9 0f00 	cmp.w	r9, #0
 801703c:	d003      	beq.n	8017046 <_scanf_float+0x6e>
 801703e:	6823      	ldr	r3, [r4, #0]
 8017040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017044:	6023      	str	r3, [r4, #0]
 8017046:	f10a 3aff 	add.w	sl, sl, #4294967295
 801704a:	f1ba 0f01 	cmp.w	sl, #1
 801704e:	f200 8113 	bhi.w	8017278 <_scanf_float+0x2a0>
 8017052:	455e      	cmp	r6, fp
 8017054:	f200 8105 	bhi.w	8017262 <_scanf_float+0x28a>
 8017058:	2501      	movs	r5, #1
 801705a:	4628      	mov	r0, r5
 801705c:	b007      	add	sp, #28
 801705e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017062:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8017066:	2a0d      	cmp	r2, #13
 8017068:	d8e6      	bhi.n	8017038 <_scanf_float+0x60>
 801706a:	a101      	add	r1, pc, #4	; (adr r1, 8017070 <_scanf_float+0x98>)
 801706c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017070:	080171af 	.word	0x080171af
 8017074:	08017039 	.word	0x08017039
 8017078:	08017039 	.word	0x08017039
 801707c:	08017039 	.word	0x08017039
 8017080:	0801720f 	.word	0x0801720f
 8017084:	080171e7 	.word	0x080171e7
 8017088:	08017039 	.word	0x08017039
 801708c:	08017039 	.word	0x08017039
 8017090:	080171bd 	.word	0x080171bd
 8017094:	08017039 	.word	0x08017039
 8017098:	08017039 	.word	0x08017039
 801709c:	08017039 	.word	0x08017039
 80170a0:	08017039 	.word	0x08017039
 80170a4:	08017175 	.word	0x08017175
 80170a8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80170ac:	e7db      	b.n	8017066 <_scanf_float+0x8e>
 80170ae:	290e      	cmp	r1, #14
 80170b0:	d8c2      	bhi.n	8017038 <_scanf_float+0x60>
 80170b2:	a001      	add	r0, pc, #4	; (adr r0, 80170b8 <_scanf_float+0xe0>)
 80170b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80170b8:	08017167 	.word	0x08017167
 80170bc:	08017039 	.word	0x08017039
 80170c0:	08017167 	.word	0x08017167
 80170c4:	080171fb 	.word	0x080171fb
 80170c8:	08017039 	.word	0x08017039
 80170cc:	08017115 	.word	0x08017115
 80170d0:	08017151 	.word	0x08017151
 80170d4:	08017151 	.word	0x08017151
 80170d8:	08017151 	.word	0x08017151
 80170dc:	08017151 	.word	0x08017151
 80170e0:	08017151 	.word	0x08017151
 80170e4:	08017151 	.word	0x08017151
 80170e8:	08017151 	.word	0x08017151
 80170ec:	08017151 	.word	0x08017151
 80170f0:	08017151 	.word	0x08017151
 80170f4:	2b6e      	cmp	r3, #110	; 0x6e
 80170f6:	d809      	bhi.n	801710c <_scanf_float+0x134>
 80170f8:	2b60      	cmp	r3, #96	; 0x60
 80170fa:	d8b2      	bhi.n	8017062 <_scanf_float+0x8a>
 80170fc:	2b54      	cmp	r3, #84	; 0x54
 80170fe:	d077      	beq.n	80171f0 <_scanf_float+0x218>
 8017100:	2b59      	cmp	r3, #89	; 0x59
 8017102:	d199      	bne.n	8017038 <_scanf_float+0x60>
 8017104:	2d07      	cmp	r5, #7
 8017106:	d197      	bne.n	8017038 <_scanf_float+0x60>
 8017108:	2508      	movs	r5, #8
 801710a:	e029      	b.n	8017160 <_scanf_float+0x188>
 801710c:	2b74      	cmp	r3, #116	; 0x74
 801710e:	d06f      	beq.n	80171f0 <_scanf_float+0x218>
 8017110:	2b79      	cmp	r3, #121	; 0x79
 8017112:	e7f6      	b.n	8017102 <_scanf_float+0x12a>
 8017114:	6821      	ldr	r1, [r4, #0]
 8017116:	05c8      	lsls	r0, r1, #23
 8017118:	d51a      	bpl.n	8017150 <_scanf_float+0x178>
 801711a:	9b02      	ldr	r3, [sp, #8]
 801711c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8017120:	6021      	str	r1, [r4, #0]
 8017122:	f109 0901 	add.w	r9, r9, #1
 8017126:	b11b      	cbz	r3, 8017130 <_scanf_float+0x158>
 8017128:	3b01      	subs	r3, #1
 801712a:	3201      	adds	r2, #1
 801712c:	9302      	str	r3, [sp, #8]
 801712e:	60a2      	str	r2, [r4, #8]
 8017130:	68a3      	ldr	r3, [r4, #8]
 8017132:	3b01      	subs	r3, #1
 8017134:	60a3      	str	r3, [r4, #8]
 8017136:	6923      	ldr	r3, [r4, #16]
 8017138:	3301      	adds	r3, #1
 801713a:	6123      	str	r3, [r4, #16]
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	3b01      	subs	r3, #1
 8017140:	2b00      	cmp	r3, #0
 8017142:	607b      	str	r3, [r7, #4]
 8017144:	f340 8084 	ble.w	8017250 <_scanf_float+0x278>
 8017148:	683b      	ldr	r3, [r7, #0]
 801714a:	3301      	adds	r3, #1
 801714c:	603b      	str	r3, [r7, #0]
 801714e:	e766      	b.n	801701e <_scanf_float+0x46>
 8017150:	eb1a 0f05 	cmn.w	sl, r5
 8017154:	f47f af70 	bne.w	8017038 <_scanf_float+0x60>
 8017158:	6822      	ldr	r2, [r4, #0]
 801715a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801715e:	6022      	str	r2, [r4, #0]
 8017160:	f806 3b01 	strb.w	r3, [r6], #1
 8017164:	e7e4      	b.n	8017130 <_scanf_float+0x158>
 8017166:	6822      	ldr	r2, [r4, #0]
 8017168:	0610      	lsls	r0, r2, #24
 801716a:	f57f af65 	bpl.w	8017038 <_scanf_float+0x60>
 801716e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017172:	e7f4      	b.n	801715e <_scanf_float+0x186>
 8017174:	f1ba 0f00 	cmp.w	sl, #0
 8017178:	d10e      	bne.n	8017198 <_scanf_float+0x1c0>
 801717a:	f1b9 0f00 	cmp.w	r9, #0
 801717e:	d10e      	bne.n	801719e <_scanf_float+0x1c6>
 8017180:	6822      	ldr	r2, [r4, #0]
 8017182:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017186:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801718a:	d108      	bne.n	801719e <_scanf_float+0x1c6>
 801718c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017190:	6022      	str	r2, [r4, #0]
 8017192:	f04f 0a01 	mov.w	sl, #1
 8017196:	e7e3      	b.n	8017160 <_scanf_float+0x188>
 8017198:	f1ba 0f02 	cmp.w	sl, #2
 801719c:	d055      	beq.n	801724a <_scanf_float+0x272>
 801719e:	2d01      	cmp	r5, #1
 80171a0:	d002      	beq.n	80171a8 <_scanf_float+0x1d0>
 80171a2:	2d04      	cmp	r5, #4
 80171a4:	f47f af48 	bne.w	8017038 <_scanf_float+0x60>
 80171a8:	3501      	adds	r5, #1
 80171aa:	b2ed      	uxtb	r5, r5
 80171ac:	e7d8      	b.n	8017160 <_scanf_float+0x188>
 80171ae:	f1ba 0f01 	cmp.w	sl, #1
 80171b2:	f47f af41 	bne.w	8017038 <_scanf_float+0x60>
 80171b6:	f04f 0a02 	mov.w	sl, #2
 80171ba:	e7d1      	b.n	8017160 <_scanf_float+0x188>
 80171bc:	b97d      	cbnz	r5, 80171de <_scanf_float+0x206>
 80171be:	f1b9 0f00 	cmp.w	r9, #0
 80171c2:	f47f af3c 	bne.w	801703e <_scanf_float+0x66>
 80171c6:	6822      	ldr	r2, [r4, #0]
 80171c8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80171cc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80171d0:	f47f af39 	bne.w	8017046 <_scanf_float+0x6e>
 80171d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80171d8:	6022      	str	r2, [r4, #0]
 80171da:	2501      	movs	r5, #1
 80171dc:	e7c0      	b.n	8017160 <_scanf_float+0x188>
 80171de:	2d03      	cmp	r5, #3
 80171e0:	d0e2      	beq.n	80171a8 <_scanf_float+0x1d0>
 80171e2:	2d05      	cmp	r5, #5
 80171e4:	e7de      	b.n	80171a4 <_scanf_float+0x1cc>
 80171e6:	2d02      	cmp	r5, #2
 80171e8:	f47f af26 	bne.w	8017038 <_scanf_float+0x60>
 80171ec:	2503      	movs	r5, #3
 80171ee:	e7b7      	b.n	8017160 <_scanf_float+0x188>
 80171f0:	2d06      	cmp	r5, #6
 80171f2:	f47f af21 	bne.w	8017038 <_scanf_float+0x60>
 80171f6:	2507      	movs	r5, #7
 80171f8:	e7b2      	b.n	8017160 <_scanf_float+0x188>
 80171fa:	6822      	ldr	r2, [r4, #0]
 80171fc:	0591      	lsls	r1, r2, #22
 80171fe:	f57f af1b 	bpl.w	8017038 <_scanf_float+0x60>
 8017202:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8017206:	6022      	str	r2, [r4, #0]
 8017208:	f8cd 9004 	str.w	r9, [sp, #4]
 801720c:	e7a8      	b.n	8017160 <_scanf_float+0x188>
 801720e:	6822      	ldr	r2, [r4, #0]
 8017210:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8017214:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8017218:	d006      	beq.n	8017228 <_scanf_float+0x250>
 801721a:	0550      	lsls	r0, r2, #21
 801721c:	f57f af0c 	bpl.w	8017038 <_scanf_float+0x60>
 8017220:	f1b9 0f00 	cmp.w	r9, #0
 8017224:	f43f af0f 	beq.w	8017046 <_scanf_float+0x6e>
 8017228:	0591      	lsls	r1, r2, #22
 801722a:	bf58      	it	pl
 801722c:	9901      	ldrpl	r1, [sp, #4]
 801722e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017232:	bf58      	it	pl
 8017234:	eba9 0101 	subpl.w	r1, r9, r1
 8017238:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801723c:	bf58      	it	pl
 801723e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8017242:	6022      	str	r2, [r4, #0]
 8017244:	f04f 0900 	mov.w	r9, #0
 8017248:	e78a      	b.n	8017160 <_scanf_float+0x188>
 801724a:	f04f 0a03 	mov.w	sl, #3
 801724e:	e787      	b.n	8017160 <_scanf_float+0x188>
 8017250:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017254:	4639      	mov	r1, r7
 8017256:	4640      	mov	r0, r8
 8017258:	4798      	blx	r3
 801725a:	2800      	cmp	r0, #0
 801725c:	f43f aedf 	beq.w	801701e <_scanf_float+0x46>
 8017260:	e6ea      	b.n	8017038 <_scanf_float+0x60>
 8017262:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017266:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801726a:	463a      	mov	r2, r7
 801726c:	4640      	mov	r0, r8
 801726e:	4798      	blx	r3
 8017270:	6923      	ldr	r3, [r4, #16]
 8017272:	3b01      	subs	r3, #1
 8017274:	6123      	str	r3, [r4, #16]
 8017276:	e6ec      	b.n	8017052 <_scanf_float+0x7a>
 8017278:	1e6b      	subs	r3, r5, #1
 801727a:	2b06      	cmp	r3, #6
 801727c:	d825      	bhi.n	80172ca <_scanf_float+0x2f2>
 801727e:	2d02      	cmp	r5, #2
 8017280:	d836      	bhi.n	80172f0 <_scanf_float+0x318>
 8017282:	455e      	cmp	r6, fp
 8017284:	f67f aee8 	bls.w	8017058 <_scanf_float+0x80>
 8017288:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801728c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017290:	463a      	mov	r2, r7
 8017292:	4640      	mov	r0, r8
 8017294:	4798      	blx	r3
 8017296:	6923      	ldr	r3, [r4, #16]
 8017298:	3b01      	subs	r3, #1
 801729a:	6123      	str	r3, [r4, #16]
 801729c:	e7f1      	b.n	8017282 <_scanf_float+0x2aa>
 801729e:	9802      	ldr	r0, [sp, #8]
 80172a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80172a4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80172a8:	9002      	str	r0, [sp, #8]
 80172aa:	463a      	mov	r2, r7
 80172ac:	4640      	mov	r0, r8
 80172ae:	4798      	blx	r3
 80172b0:	6923      	ldr	r3, [r4, #16]
 80172b2:	3b01      	subs	r3, #1
 80172b4:	6123      	str	r3, [r4, #16]
 80172b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80172ba:	fa5f fa8a 	uxtb.w	sl, sl
 80172be:	f1ba 0f02 	cmp.w	sl, #2
 80172c2:	d1ec      	bne.n	801729e <_scanf_float+0x2c6>
 80172c4:	3d03      	subs	r5, #3
 80172c6:	b2ed      	uxtb	r5, r5
 80172c8:	1b76      	subs	r6, r6, r5
 80172ca:	6823      	ldr	r3, [r4, #0]
 80172cc:	05da      	lsls	r2, r3, #23
 80172ce:	d52f      	bpl.n	8017330 <_scanf_float+0x358>
 80172d0:	055b      	lsls	r3, r3, #21
 80172d2:	d510      	bpl.n	80172f6 <_scanf_float+0x31e>
 80172d4:	455e      	cmp	r6, fp
 80172d6:	f67f aebf 	bls.w	8017058 <_scanf_float+0x80>
 80172da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80172de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80172e2:	463a      	mov	r2, r7
 80172e4:	4640      	mov	r0, r8
 80172e6:	4798      	blx	r3
 80172e8:	6923      	ldr	r3, [r4, #16]
 80172ea:	3b01      	subs	r3, #1
 80172ec:	6123      	str	r3, [r4, #16]
 80172ee:	e7f1      	b.n	80172d4 <_scanf_float+0x2fc>
 80172f0:	46aa      	mov	sl, r5
 80172f2:	9602      	str	r6, [sp, #8]
 80172f4:	e7df      	b.n	80172b6 <_scanf_float+0x2de>
 80172f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80172fa:	6923      	ldr	r3, [r4, #16]
 80172fc:	2965      	cmp	r1, #101	; 0x65
 80172fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8017302:	f106 35ff 	add.w	r5, r6, #4294967295
 8017306:	6123      	str	r3, [r4, #16]
 8017308:	d00c      	beq.n	8017324 <_scanf_float+0x34c>
 801730a:	2945      	cmp	r1, #69	; 0x45
 801730c:	d00a      	beq.n	8017324 <_scanf_float+0x34c>
 801730e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017312:	463a      	mov	r2, r7
 8017314:	4640      	mov	r0, r8
 8017316:	4798      	blx	r3
 8017318:	6923      	ldr	r3, [r4, #16]
 801731a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801731e:	3b01      	subs	r3, #1
 8017320:	1eb5      	subs	r5, r6, #2
 8017322:	6123      	str	r3, [r4, #16]
 8017324:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017328:	463a      	mov	r2, r7
 801732a:	4640      	mov	r0, r8
 801732c:	4798      	blx	r3
 801732e:	462e      	mov	r6, r5
 8017330:	6825      	ldr	r5, [r4, #0]
 8017332:	f015 0510 	ands.w	r5, r5, #16
 8017336:	d158      	bne.n	80173ea <_scanf_float+0x412>
 8017338:	7035      	strb	r5, [r6, #0]
 801733a:	6823      	ldr	r3, [r4, #0]
 801733c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017344:	d11c      	bne.n	8017380 <_scanf_float+0x3a8>
 8017346:	9b01      	ldr	r3, [sp, #4]
 8017348:	454b      	cmp	r3, r9
 801734a:	eba3 0209 	sub.w	r2, r3, r9
 801734e:	d124      	bne.n	801739a <_scanf_float+0x3c2>
 8017350:	2200      	movs	r2, #0
 8017352:	4659      	mov	r1, fp
 8017354:	4640      	mov	r0, r8
 8017356:	f000 fee1 	bl	801811c <_strtod_r>
 801735a:	9b03      	ldr	r3, [sp, #12]
 801735c:	6821      	ldr	r1, [r4, #0]
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	f011 0f02 	tst.w	r1, #2
 8017364:	ec57 6b10 	vmov	r6, r7, d0
 8017368:	f103 0204 	add.w	r2, r3, #4
 801736c:	d020      	beq.n	80173b0 <_scanf_float+0x3d8>
 801736e:	9903      	ldr	r1, [sp, #12]
 8017370:	600a      	str	r2, [r1, #0]
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	e9c3 6700 	strd	r6, r7, [r3]
 8017378:	68e3      	ldr	r3, [r4, #12]
 801737a:	3301      	adds	r3, #1
 801737c:	60e3      	str	r3, [r4, #12]
 801737e:	e66c      	b.n	801705a <_scanf_float+0x82>
 8017380:	9b04      	ldr	r3, [sp, #16]
 8017382:	2b00      	cmp	r3, #0
 8017384:	d0e4      	beq.n	8017350 <_scanf_float+0x378>
 8017386:	9905      	ldr	r1, [sp, #20]
 8017388:	230a      	movs	r3, #10
 801738a:	462a      	mov	r2, r5
 801738c:	3101      	adds	r1, #1
 801738e:	4640      	mov	r0, r8
 8017390:	f000 ff4e 	bl	8018230 <_strtol_r>
 8017394:	9b04      	ldr	r3, [sp, #16]
 8017396:	9e05      	ldr	r6, [sp, #20]
 8017398:	1ac2      	subs	r2, r0, r3
 801739a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801739e:	429e      	cmp	r6, r3
 80173a0:	bf28      	it	cs
 80173a2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80173a6:	4912      	ldr	r1, [pc, #72]	; (80173f0 <_scanf_float+0x418>)
 80173a8:	4630      	mov	r0, r6
 80173aa:	f000 f86f 	bl	801748c <siprintf>
 80173ae:	e7cf      	b.n	8017350 <_scanf_float+0x378>
 80173b0:	f011 0f04 	tst.w	r1, #4
 80173b4:	9903      	ldr	r1, [sp, #12]
 80173b6:	600a      	str	r2, [r1, #0]
 80173b8:	d1db      	bne.n	8017372 <_scanf_float+0x39a>
 80173ba:	f8d3 8000 	ldr.w	r8, [r3]
 80173be:	ee10 2a10 	vmov	r2, s0
 80173c2:	ee10 0a10 	vmov	r0, s0
 80173c6:	463b      	mov	r3, r7
 80173c8:	4639      	mov	r1, r7
 80173ca:	f7e9 fbaf 	bl	8000b2c <__aeabi_dcmpun>
 80173ce:	b128      	cbz	r0, 80173dc <_scanf_float+0x404>
 80173d0:	4808      	ldr	r0, [pc, #32]	; (80173f4 <_scanf_float+0x41c>)
 80173d2:	f000 f821 	bl	8017418 <nanf>
 80173d6:	ed88 0a00 	vstr	s0, [r8]
 80173da:	e7cd      	b.n	8017378 <_scanf_float+0x3a0>
 80173dc:	4630      	mov	r0, r6
 80173de:	4639      	mov	r1, r7
 80173e0:	f7e9 fc02 	bl	8000be8 <__aeabi_d2f>
 80173e4:	f8c8 0000 	str.w	r0, [r8]
 80173e8:	e7c6      	b.n	8017378 <_scanf_float+0x3a0>
 80173ea:	2500      	movs	r5, #0
 80173ec:	e635      	b.n	801705a <_scanf_float+0x82>
 80173ee:	bf00      	nop
 80173f0:	0801cb28 	.word	0x0801cb28
 80173f4:	0801cf40 	.word	0x0801cf40

080173f8 <_sbrk_r>:
 80173f8:	b538      	push	{r3, r4, r5, lr}
 80173fa:	4d06      	ldr	r5, [pc, #24]	; (8017414 <_sbrk_r+0x1c>)
 80173fc:	2300      	movs	r3, #0
 80173fe:	4604      	mov	r4, r0
 8017400:	4608      	mov	r0, r1
 8017402:	602b      	str	r3, [r5, #0]
 8017404:	f7f4 fa04 	bl	800b810 <_sbrk>
 8017408:	1c43      	adds	r3, r0, #1
 801740a:	d102      	bne.n	8017412 <_sbrk_r+0x1a>
 801740c:	682b      	ldr	r3, [r5, #0]
 801740e:	b103      	cbz	r3, 8017412 <_sbrk_r+0x1a>
 8017410:	6023      	str	r3, [r4, #0]
 8017412:	bd38      	pop	{r3, r4, r5, pc}
 8017414:	20011b74 	.word	0x20011b74

08017418 <nanf>:
 8017418:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017420 <nanf+0x8>
 801741c:	4770      	bx	lr
 801741e:	bf00      	nop
 8017420:	7fc00000 	.word	0x7fc00000

08017424 <sniprintf>:
 8017424:	b40c      	push	{r2, r3}
 8017426:	b530      	push	{r4, r5, lr}
 8017428:	4b17      	ldr	r3, [pc, #92]	; (8017488 <sniprintf+0x64>)
 801742a:	1e0c      	subs	r4, r1, #0
 801742c:	681d      	ldr	r5, [r3, #0]
 801742e:	b09d      	sub	sp, #116	; 0x74
 8017430:	da08      	bge.n	8017444 <sniprintf+0x20>
 8017432:	238b      	movs	r3, #139	; 0x8b
 8017434:	602b      	str	r3, [r5, #0]
 8017436:	f04f 30ff 	mov.w	r0, #4294967295
 801743a:	b01d      	add	sp, #116	; 0x74
 801743c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017440:	b002      	add	sp, #8
 8017442:	4770      	bx	lr
 8017444:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017448:	f8ad 3014 	strh.w	r3, [sp, #20]
 801744c:	bf14      	ite	ne
 801744e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017452:	4623      	moveq	r3, r4
 8017454:	9304      	str	r3, [sp, #16]
 8017456:	9307      	str	r3, [sp, #28]
 8017458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801745c:	9002      	str	r0, [sp, #8]
 801745e:	9006      	str	r0, [sp, #24]
 8017460:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017464:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017466:	ab21      	add	r3, sp, #132	; 0x84
 8017468:	a902      	add	r1, sp, #8
 801746a:	4628      	mov	r0, r5
 801746c:	9301      	str	r3, [sp, #4]
 801746e:	f002 fe13 	bl	801a098 <_svfiprintf_r>
 8017472:	1c43      	adds	r3, r0, #1
 8017474:	bfbc      	itt	lt
 8017476:	238b      	movlt	r3, #139	; 0x8b
 8017478:	602b      	strlt	r3, [r5, #0]
 801747a:	2c00      	cmp	r4, #0
 801747c:	d0dd      	beq.n	801743a <sniprintf+0x16>
 801747e:	9b02      	ldr	r3, [sp, #8]
 8017480:	2200      	movs	r2, #0
 8017482:	701a      	strb	r2, [r3, #0]
 8017484:	e7d9      	b.n	801743a <sniprintf+0x16>
 8017486:	bf00      	nop
 8017488:	20004210 	.word	0x20004210

0801748c <siprintf>:
 801748c:	b40e      	push	{r1, r2, r3}
 801748e:	b500      	push	{lr}
 8017490:	b09c      	sub	sp, #112	; 0x70
 8017492:	ab1d      	add	r3, sp, #116	; 0x74
 8017494:	9002      	str	r0, [sp, #8]
 8017496:	9006      	str	r0, [sp, #24]
 8017498:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801749c:	4809      	ldr	r0, [pc, #36]	; (80174c4 <siprintf+0x38>)
 801749e:	9107      	str	r1, [sp, #28]
 80174a0:	9104      	str	r1, [sp, #16]
 80174a2:	4909      	ldr	r1, [pc, #36]	; (80174c8 <siprintf+0x3c>)
 80174a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80174a8:	9105      	str	r1, [sp, #20]
 80174aa:	6800      	ldr	r0, [r0, #0]
 80174ac:	9301      	str	r3, [sp, #4]
 80174ae:	a902      	add	r1, sp, #8
 80174b0:	f002 fdf2 	bl	801a098 <_svfiprintf_r>
 80174b4:	9b02      	ldr	r3, [sp, #8]
 80174b6:	2200      	movs	r2, #0
 80174b8:	701a      	strb	r2, [r3, #0]
 80174ba:	b01c      	add	sp, #112	; 0x70
 80174bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80174c0:	b003      	add	sp, #12
 80174c2:	4770      	bx	lr
 80174c4:	20004210 	.word	0x20004210
 80174c8:	ffff0208 	.word	0xffff0208

080174cc <sulp>:
 80174cc:	b570      	push	{r4, r5, r6, lr}
 80174ce:	4604      	mov	r4, r0
 80174d0:	460d      	mov	r5, r1
 80174d2:	ec45 4b10 	vmov	d0, r4, r5
 80174d6:	4616      	mov	r6, r2
 80174d8:	f002 fc24 	bl	8019d24 <__ulp>
 80174dc:	ec51 0b10 	vmov	r0, r1, d0
 80174e0:	b17e      	cbz	r6, 8017502 <sulp+0x36>
 80174e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80174e6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	dd09      	ble.n	8017502 <sulp+0x36>
 80174ee:	051b      	lsls	r3, r3, #20
 80174f0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80174f4:	2400      	movs	r4, #0
 80174f6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80174fa:	4622      	mov	r2, r4
 80174fc:	462b      	mov	r3, r5
 80174fe:	f7e9 f87b 	bl	80005f8 <__aeabi_dmul>
 8017502:	bd70      	pop	{r4, r5, r6, pc}
 8017504:	0000      	movs	r0, r0
	...

08017508 <_strtod_l>:
 8017508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801750c:	b0a3      	sub	sp, #140	; 0x8c
 801750e:	461f      	mov	r7, r3
 8017510:	2300      	movs	r3, #0
 8017512:	931e      	str	r3, [sp, #120]	; 0x78
 8017514:	4ba4      	ldr	r3, [pc, #656]	; (80177a8 <_strtod_l+0x2a0>)
 8017516:	9219      	str	r2, [sp, #100]	; 0x64
 8017518:	681b      	ldr	r3, [r3, #0]
 801751a:	9307      	str	r3, [sp, #28]
 801751c:	4604      	mov	r4, r0
 801751e:	4618      	mov	r0, r3
 8017520:	4688      	mov	r8, r1
 8017522:	f7e8 fe55 	bl	80001d0 <strlen>
 8017526:	f04f 0a00 	mov.w	sl, #0
 801752a:	4605      	mov	r5, r0
 801752c:	f04f 0b00 	mov.w	fp, #0
 8017530:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8017534:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017536:	781a      	ldrb	r2, [r3, #0]
 8017538:	2a2b      	cmp	r2, #43	; 0x2b
 801753a:	d04c      	beq.n	80175d6 <_strtod_l+0xce>
 801753c:	d839      	bhi.n	80175b2 <_strtod_l+0xaa>
 801753e:	2a0d      	cmp	r2, #13
 8017540:	d832      	bhi.n	80175a8 <_strtod_l+0xa0>
 8017542:	2a08      	cmp	r2, #8
 8017544:	d832      	bhi.n	80175ac <_strtod_l+0xa4>
 8017546:	2a00      	cmp	r2, #0
 8017548:	d03c      	beq.n	80175c4 <_strtod_l+0xbc>
 801754a:	2300      	movs	r3, #0
 801754c:	930e      	str	r3, [sp, #56]	; 0x38
 801754e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8017550:	7833      	ldrb	r3, [r6, #0]
 8017552:	2b30      	cmp	r3, #48	; 0x30
 8017554:	f040 80b4 	bne.w	80176c0 <_strtod_l+0x1b8>
 8017558:	7873      	ldrb	r3, [r6, #1]
 801755a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801755e:	2b58      	cmp	r3, #88	; 0x58
 8017560:	d16c      	bne.n	801763c <_strtod_l+0x134>
 8017562:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017564:	9301      	str	r3, [sp, #4]
 8017566:	ab1e      	add	r3, sp, #120	; 0x78
 8017568:	9702      	str	r7, [sp, #8]
 801756a:	9300      	str	r3, [sp, #0]
 801756c:	4a8f      	ldr	r2, [pc, #572]	; (80177ac <_strtod_l+0x2a4>)
 801756e:	ab1f      	add	r3, sp, #124	; 0x7c
 8017570:	a91d      	add	r1, sp, #116	; 0x74
 8017572:	4620      	mov	r0, r4
 8017574:	f001 fd40 	bl	8018ff8 <__gethex>
 8017578:	f010 0707 	ands.w	r7, r0, #7
 801757c:	4605      	mov	r5, r0
 801757e:	d005      	beq.n	801758c <_strtod_l+0x84>
 8017580:	2f06      	cmp	r7, #6
 8017582:	d12a      	bne.n	80175da <_strtod_l+0xd2>
 8017584:	3601      	adds	r6, #1
 8017586:	2300      	movs	r3, #0
 8017588:	961d      	str	r6, [sp, #116]	; 0x74
 801758a:	930e      	str	r3, [sp, #56]	; 0x38
 801758c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801758e:	2b00      	cmp	r3, #0
 8017590:	f040 8596 	bne.w	80180c0 <_strtod_l+0xbb8>
 8017594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017596:	b1db      	cbz	r3, 80175d0 <_strtod_l+0xc8>
 8017598:	4652      	mov	r2, sl
 801759a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801759e:	ec43 2b10 	vmov	d0, r2, r3
 80175a2:	b023      	add	sp, #140	; 0x8c
 80175a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175a8:	2a20      	cmp	r2, #32
 80175aa:	d1ce      	bne.n	801754a <_strtod_l+0x42>
 80175ac:	3301      	adds	r3, #1
 80175ae:	931d      	str	r3, [sp, #116]	; 0x74
 80175b0:	e7c0      	b.n	8017534 <_strtod_l+0x2c>
 80175b2:	2a2d      	cmp	r2, #45	; 0x2d
 80175b4:	d1c9      	bne.n	801754a <_strtod_l+0x42>
 80175b6:	2201      	movs	r2, #1
 80175b8:	920e      	str	r2, [sp, #56]	; 0x38
 80175ba:	1c5a      	adds	r2, r3, #1
 80175bc:	921d      	str	r2, [sp, #116]	; 0x74
 80175be:	785b      	ldrb	r3, [r3, #1]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d1c4      	bne.n	801754e <_strtod_l+0x46>
 80175c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80175c6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	f040 8576 	bne.w	80180bc <_strtod_l+0xbb4>
 80175d0:	4652      	mov	r2, sl
 80175d2:	465b      	mov	r3, fp
 80175d4:	e7e3      	b.n	801759e <_strtod_l+0x96>
 80175d6:	2200      	movs	r2, #0
 80175d8:	e7ee      	b.n	80175b8 <_strtod_l+0xb0>
 80175da:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80175dc:	b13a      	cbz	r2, 80175ee <_strtod_l+0xe6>
 80175de:	2135      	movs	r1, #53	; 0x35
 80175e0:	a820      	add	r0, sp, #128	; 0x80
 80175e2:	f002 fcaa 	bl	8019f3a <__copybits>
 80175e6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80175e8:	4620      	mov	r0, r4
 80175ea:	f002 f86f 	bl	80196cc <_Bfree>
 80175ee:	3f01      	subs	r7, #1
 80175f0:	2f05      	cmp	r7, #5
 80175f2:	d807      	bhi.n	8017604 <_strtod_l+0xfc>
 80175f4:	e8df f007 	tbb	[pc, r7]
 80175f8:	1d180b0e 	.word	0x1d180b0e
 80175fc:	030e      	.short	0x030e
 80175fe:	f04f 0b00 	mov.w	fp, #0
 8017602:	46da      	mov	sl, fp
 8017604:	0728      	lsls	r0, r5, #28
 8017606:	d5c1      	bpl.n	801758c <_strtod_l+0x84>
 8017608:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801760c:	e7be      	b.n	801758c <_strtod_l+0x84>
 801760e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8017612:	e7f7      	b.n	8017604 <_strtod_l+0xfc>
 8017614:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8017618:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801761a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801761e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017622:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8017626:	e7ed      	b.n	8017604 <_strtod_l+0xfc>
 8017628:	f8df b184 	ldr.w	fp, [pc, #388]	; 80177b0 <_strtod_l+0x2a8>
 801762c:	f04f 0a00 	mov.w	sl, #0
 8017630:	e7e8      	b.n	8017604 <_strtod_l+0xfc>
 8017632:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8017636:	f04f 3aff 	mov.w	sl, #4294967295
 801763a:	e7e3      	b.n	8017604 <_strtod_l+0xfc>
 801763c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801763e:	1c5a      	adds	r2, r3, #1
 8017640:	921d      	str	r2, [sp, #116]	; 0x74
 8017642:	785b      	ldrb	r3, [r3, #1]
 8017644:	2b30      	cmp	r3, #48	; 0x30
 8017646:	d0f9      	beq.n	801763c <_strtod_l+0x134>
 8017648:	2b00      	cmp	r3, #0
 801764a:	d09f      	beq.n	801758c <_strtod_l+0x84>
 801764c:	2301      	movs	r3, #1
 801764e:	f04f 0900 	mov.w	r9, #0
 8017652:	9304      	str	r3, [sp, #16]
 8017654:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017656:	930a      	str	r3, [sp, #40]	; 0x28
 8017658:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801765c:	464f      	mov	r7, r9
 801765e:	220a      	movs	r2, #10
 8017660:	981d      	ldr	r0, [sp, #116]	; 0x74
 8017662:	7806      	ldrb	r6, [r0, #0]
 8017664:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8017668:	b2d9      	uxtb	r1, r3
 801766a:	2909      	cmp	r1, #9
 801766c:	d92a      	bls.n	80176c4 <_strtod_l+0x1bc>
 801766e:	9907      	ldr	r1, [sp, #28]
 8017670:	462a      	mov	r2, r5
 8017672:	f002 fe19 	bl	801a2a8 <strncmp>
 8017676:	b398      	cbz	r0, 80176e0 <_strtod_l+0x1d8>
 8017678:	2000      	movs	r0, #0
 801767a:	4633      	mov	r3, r6
 801767c:	463d      	mov	r5, r7
 801767e:	9007      	str	r0, [sp, #28]
 8017680:	4602      	mov	r2, r0
 8017682:	2b65      	cmp	r3, #101	; 0x65
 8017684:	d001      	beq.n	801768a <_strtod_l+0x182>
 8017686:	2b45      	cmp	r3, #69	; 0x45
 8017688:	d118      	bne.n	80176bc <_strtod_l+0x1b4>
 801768a:	b91d      	cbnz	r5, 8017694 <_strtod_l+0x18c>
 801768c:	9b04      	ldr	r3, [sp, #16]
 801768e:	4303      	orrs	r3, r0
 8017690:	d098      	beq.n	80175c4 <_strtod_l+0xbc>
 8017692:	2500      	movs	r5, #0
 8017694:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8017698:	f108 0301 	add.w	r3, r8, #1
 801769c:	931d      	str	r3, [sp, #116]	; 0x74
 801769e:	f898 3001 	ldrb.w	r3, [r8, #1]
 80176a2:	2b2b      	cmp	r3, #43	; 0x2b
 80176a4:	d075      	beq.n	8017792 <_strtod_l+0x28a>
 80176a6:	2b2d      	cmp	r3, #45	; 0x2d
 80176a8:	d07b      	beq.n	80177a2 <_strtod_l+0x29a>
 80176aa:	f04f 0c00 	mov.w	ip, #0
 80176ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80176b2:	2909      	cmp	r1, #9
 80176b4:	f240 8082 	bls.w	80177bc <_strtod_l+0x2b4>
 80176b8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80176bc:	2600      	movs	r6, #0
 80176be:	e09d      	b.n	80177fc <_strtod_l+0x2f4>
 80176c0:	2300      	movs	r3, #0
 80176c2:	e7c4      	b.n	801764e <_strtod_l+0x146>
 80176c4:	2f08      	cmp	r7, #8
 80176c6:	bfd8      	it	le
 80176c8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80176ca:	f100 0001 	add.w	r0, r0, #1
 80176ce:	bfda      	itte	le
 80176d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80176d4:	9309      	strle	r3, [sp, #36]	; 0x24
 80176d6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80176da:	3701      	adds	r7, #1
 80176dc:	901d      	str	r0, [sp, #116]	; 0x74
 80176de:	e7bf      	b.n	8017660 <_strtod_l+0x158>
 80176e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80176e2:	195a      	adds	r2, r3, r5
 80176e4:	921d      	str	r2, [sp, #116]	; 0x74
 80176e6:	5d5b      	ldrb	r3, [r3, r5]
 80176e8:	2f00      	cmp	r7, #0
 80176ea:	d037      	beq.n	801775c <_strtod_l+0x254>
 80176ec:	9007      	str	r0, [sp, #28]
 80176ee:	463d      	mov	r5, r7
 80176f0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80176f4:	2a09      	cmp	r2, #9
 80176f6:	d912      	bls.n	801771e <_strtod_l+0x216>
 80176f8:	2201      	movs	r2, #1
 80176fa:	e7c2      	b.n	8017682 <_strtod_l+0x17a>
 80176fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80176fe:	1c5a      	adds	r2, r3, #1
 8017700:	921d      	str	r2, [sp, #116]	; 0x74
 8017702:	785b      	ldrb	r3, [r3, #1]
 8017704:	3001      	adds	r0, #1
 8017706:	2b30      	cmp	r3, #48	; 0x30
 8017708:	d0f8      	beq.n	80176fc <_strtod_l+0x1f4>
 801770a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801770e:	2a08      	cmp	r2, #8
 8017710:	f200 84db 	bhi.w	80180ca <_strtod_l+0xbc2>
 8017714:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017716:	9007      	str	r0, [sp, #28]
 8017718:	2000      	movs	r0, #0
 801771a:	920a      	str	r2, [sp, #40]	; 0x28
 801771c:	4605      	mov	r5, r0
 801771e:	3b30      	subs	r3, #48	; 0x30
 8017720:	f100 0201 	add.w	r2, r0, #1
 8017724:	d014      	beq.n	8017750 <_strtod_l+0x248>
 8017726:	9907      	ldr	r1, [sp, #28]
 8017728:	4411      	add	r1, r2
 801772a:	9107      	str	r1, [sp, #28]
 801772c:	462a      	mov	r2, r5
 801772e:	eb00 0e05 	add.w	lr, r0, r5
 8017732:	210a      	movs	r1, #10
 8017734:	4572      	cmp	r2, lr
 8017736:	d113      	bne.n	8017760 <_strtod_l+0x258>
 8017738:	182a      	adds	r2, r5, r0
 801773a:	2a08      	cmp	r2, #8
 801773c:	f105 0501 	add.w	r5, r5, #1
 8017740:	4405      	add	r5, r0
 8017742:	dc1c      	bgt.n	801777e <_strtod_l+0x276>
 8017744:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017746:	220a      	movs	r2, #10
 8017748:	fb02 3301 	mla	r3, r2, r1, r3
 801774c:	9309      	str	r3, [sp, #36]	; 0x24
 801774e:	2200      	movs	r2, #0
 8017750:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017752:	1c59      	adds	r1, r3, #1
 8017754:	911d      	str	r1, [sp, #116]	; 0x74
 8017756:	785b      	ldrb	r3, [r3, #1]
 8017758:	4610      	mov	r0, r2
 801775a:	e7c9      	b.n	80176f0 <_strtod_l+0x1e8>
 801775c:	4638      	mov	r0, r7
 801775e:	e7d2      	b.n	8017706 <_strtod_l+0x1fe>
 8017760:	2a08      	cmp	r2, #8
 8017762:	dc04      	bgt.n	801776e <_strtod_l+0x266>
 8017764:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8017766:	434e      	muls	r6, r1
 8017768:	9609      	str	r6, [sp, #36]	; 0x24
 801776a:	3201      	adds	r2, #1
 801776c:	e7e2      	b.n	8017734 <_strtod_l+0x22c>
 801776e:	f102 0c01 	add.w	ip, r2, #1
 8017772:	f1bc 0f10 	cmp.w	ip, #16
 8017776:	bfd8      	it	le
 8017778:	fb01 f909 	mulle.w	r9, r1, r9
 801777c:	e7f5      	b.n	801776a <_strtod_l+0x262>
 801777e:	2d10      	cmp	r5, #16
 8017780:	bfdc      	itt	le
 8017782:	220a      	movle	r2, #10
 8017784:	fb02 3909 	mlale	r9, r2, r9, r3
 8017788:	e7e1      	b.n	801774e <_strtod_l+0x246>
 801778a:	2300      	movs	r3, #0
 801778c:	9307      	str	r3, [sp, #28]
 801778e:	2201      	movs	r2, #1
 8017790:	e77c      	b.n	801768c <_strtod_l+0x184>
 8017792:	f04f 0c00 	mov.w	ip, #0
 8017796:	f108 0302 	add.w	r3, r8, #2
 801779a:	931d      	str	r3, [sp, #116]	; 0x74
 801779c:	f898 3002 	ldrb.w	r3, [r8, #2]
 80177a0:	e785      	b.n	80176ae <_strtod_l+0x1a6>
 80177a2:	f04f 0c01 	mov.w	ip, #1
 80177a6:	e7f6      	b.n	8017796 <_strtod_l+0x28e>
 80177a8:	0801cd80 	.word	0x0801cd80
 80177ac:	0801cb30 	.word	0x0801cb30
 80177b0:	7ff00000 	.word	0x7ff00000
 80177b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80177b6:	1c59      	adds	r1, r3, #1
 80177b8:	911d      	str	r1, [sp, #116]	; 0x74
 80177ba:	785b      	ldrb	r3, [r3, #1]
 80177bc:	2b30      	cmp	r3, #48	; 0x30
 80177be:	d0f9      	beq.n	80177b4 <_strtod_l+0x2ac>
 80177c0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80177c4:	2908      	cmp	r1, #8
 80177c6:	f63f af79 	bhi.w	80176bc <_strtod_l+0x1b4>
 80177ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80177ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80177d0:	9308      	str	r3, [sp, #32]
 80177d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80177d4:	1c59      	adds	r1, r3, #1
 80177d6:	911d      	str	r1, [sp, #116]	; 0x74
 80177d8:	785b      	ldrb	r3, [r3, #1]
 80177da:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80177de:	2e09      	cmp	r6, #9
 80177e0:	d937      	bls.n	8017852 <_strtod_l+0x34a>
 80177e2:	9e08      	ldr	r6, [sp, #32]
 80177e4:	1b89      	subs	r1, r1, r6
 80177e6:	2908      	cmp	r1, #8
 80177e8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80177ec:	dc02      	bgt.n	80177f4 <_strtod_l+0x2ec>
 80177ee:	4576      	cmp	r6, lr
 80177f0:	bfa8      	it	ge
 80177f2:	4676      	movge	r6, lr
 80177f4:	f1bc 0f00 	cmp.w	ip, #0
 80177f8:	d000      	beq.n	80177fc <_strtod_l+0x2f4>
 80177fa:	4276      	negs	r6, r6
 80177fc:	2d00      	cmp	r5, #0
 80177fe:	d14f      	bne.n	80178a0 <_strtod_l+0x398>
 8017800:	9904      	ldr	r1, [sp, #16]
 8017802:	4301      	orrs	r1, r0
 8017804:	f47f aec2 	bne.w	801758c <_strtod_l+0x84>
 8017808:	2a00      	cmp	r2, #0
 801780a:	f47f aedb 	bne.w	80175c4 <_strtod_l+0xbc>
 801780e:	2b69      	cmp	r3, #105	; 0x69
 8017810:	d027      	beq.n	8017862 <_strtod_l+0x35a>
 8017812:	dc24      	bgt.n	801785e <_strtod_l+0x356>
 8017814:	2b49      	cmp	r3, #73	; 0x49
 8017816:	d024      	beq.n	8017862 <_strtod_l+0x35a>
 8017818:	2b4e      	cmp	r3, #78	; 0x4e
 801781a:	f47f aed3 	bne.w	80175c4 <_strtod_l+0xbc>
 801781e:	499e      	ldr	r1, [pc, #632]	; (8017a98 <_strtod_l+0x590>)
 8017820:	a81d      	add	r0, sp, #116	; 0x74
 8017822:	f001 fe41 	bl	80194a8 <__match>
 8017826:	2800      	cmp	r0, #0
 8017828:	f43f aecc 	beq.w	80175c4 <_strtod_l+0xbc>
 801782c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801782e:	781b      	ldrb	r3, [r3, #0]
 8017830:	2b28      	cmp	r3, #40	; 0x28
 8017832:	d12d      	bne.n	8017890 <_strtod_l+0x388>
 8017834:	4999      	ldr	r1, [pc, #612]	; (8017a9c <_strtod_l+0x594>)
 8017836:	aa20      	add	r2, sp, #128	; 0x80
 8017838:	a81d      	add	r0, sp, #116	; 0x74
 801783a:	f001 fe49 	bl	80194d0 <__hexnan>
 801783e:	2805      	cmp	r0, #5
 8017840:	d126      	bne.n	8017890 <_strtod_l+0x388>
 8017842:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017844:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8017848:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801784c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8017850:	e69c      	b.n	801758c <_strtod_l+0x84>
 8017852:	210a      	movs	r1, #10
 8017854:	fb01 3e0e 	mla	lr, r1, lr, r3
 8017858:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801785c:	e7b9      	b.n	80177d2 <_strtod_l+0x2ca>
 801785e:	2b6e      	cmp	r3, #110	; 0x6e
 8017860:	e7db      	b.n	801781a <_strtod_l+0x312>
 8017862:	498f      	ldr	r1, [pc, #572]	; (8017aa0 <_strtod_l+0x598>)
 8017864:	a81d      	add	r0, sp, #116	; 0x74
 8017866:	f001 fe1f 	bl	80194a8 <__match>
 801786a:	2800      	cmp	r0, #0
 801786c:	f43f aeaa 	beq.w	80175c4 <_strtod_l+0xbc>
 8017870:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017872:	498c      	ldr	r1, [pc, #560]	; (8017aa4 <_strtod_l+0x59c>)
 8017874:	3b01      	subs	r3, #1
 8017876:	a81d      	add	r0, sp, #116	; 0x74
 8017878:	931d      	str	r3, [sp, #116]	; 0x74
 801787a:	f001 fe15 	bl	80194a8 <__match>
 801787e:	b910      	cbnz	r0, 8017886 <_strtod_l+0x37e>
 8017880:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017882:	3301      	adds	r3, #1
 8017884:	931d      	str	r3, [sp, #116]	; 0x74
 8017886:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8017ab4 <_strtod_l+0x5ac>
 801788a:	f04f 0a00 	mov.w	sl, #0
 801788e:	e67d      	b.n	801758c <_strtod_l+0x84>
 8017890:	4885      	ldr	r0, [pc, #532]	; (8017aa8 <_strtod_l+0x5a0>)
 8017892:	f002 fd01 	bl	801a298 <nan>
 8017896:	ed8d 0b04 	vstr	d0, [sp, #16]
 801789a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801789e:	e675      	b.n	801758c <_strtod_l+0x84>
 80178a0:	9b07      	ldr	r3, [sp, #28]
 80178a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80178a4:	1af3      	subs	r3, r6, r3
 80178a6:	2f00      	cmp	r7, #0
 80178a8:	bf08      	it	eq
 80178aa:	462f      	moveq	r7, r5
 80178ac:	2d10      	cmp	r5, #16
 80178ae:	9308      	str	r3, [sp, #32]
 80178b0:	46a8      	mov	r8, r5
 80178b2:	bfa8      	it	ge
 80178b4:	f04f 0810 	movge.w	r8, #16
 80178b8:	f7e8 fe24 	bl	8000504 <__aeabi_ui2d>
 80178bc:	2d09      	cmp	r5, #9
 80178be:	4682      	mov	sl, r0
 80178c0:	468b      	mov	fp, r1
 80178c2:	dd13      	ble.n	80178ec <_strtod_l+0x3e4>
 80178c4:	4b79      	ldr	r3, [pc, #484]	; (8017aac <_strtod_l+0x5a4>)
 80178c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80178ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80178ce:	f7e8 fe93 	bl	80005f8 <__aeabi_dmul>
 80178d2:	4682      	mov	sl, r0
 80178d4:	4648      	mov	r0, r9
 80178d6:	468b      	mov	fp, r1
 80178d8:	f7e8 fe14 	bl	8000504 <__aeabi_ui2d>
 80178dc:	4602      	mov	r2, r0
 80178de:	460b      	mov	r3, r1
 80178e0:	4650      	mov	r0, sl
 80178e2:	4659      	mov	r1, fp
 80178e4:	f7e8 fcd2 	bl	800028c <__adddf3>
 80178e8:	4682      	mov	sl, r0
 80178ea:	468b      	mov	fp, r1
 80178ec:	2d0f      	cmp	r5, #15
 80178ee:	dc38      	bgt.n	8017962 <_strtod_l+0x45a>
 80178f0:	9b08      	ldr	r3, [sp, #32]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	f43f ae4a 	beq.w	801758c <_strtod_l+0x84>
 80178f8:	dd24      	ble.n	8017944 <_strtod_l+0x43c>
 80178fa:	2b16      	cmp	r3, #22
 80178fc:	dc0b      	bgt.n	8017916 <_strtod_l+0x40e>
 80178fe:	4d6b      	ldr	r5, [pc, #428]	; (8017aac <_strtod_l+0x5a4>)
 8017900:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8017904:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017908:	4652      	mov	r2, sl
 801790a:	465b      	mov	r3, fp
 801790c:	f7e8 fe74 	bl	80005f8 <__aeabi_dmul>
 8017910:	4682      	mov	sl, r0
 8017912:	468b      	mov	fp, r1
 8017914:	e63a      	b.n	801758c <_strtod_l+0x84>
 8017916:	9a08      	ldr	r2, [sp, #32]
 8017918:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801791c:	4293      	cmp	r3, r2
 801791e:	db20      	blt.n	8017962 <_strtod_l+0x45a>
 8017920:	4c62      	ldr	r4, [pc, #392]	; (8017aac <_strtod_l+0x5a4>)
 8017922:	f1c5 050f 	rsb	r5, r5, #15
 8017926:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801792a:	4652      	mov	r2, sl
 801792c:	465b      	mov	r3, fp
 801792e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017932:	f7e8 fe61 	bl	80005f8 <__aeabi_dmul>
 8017936:	9b08      	ldr	r3, [sp, #32]
 8017938:	1b5d      	subs	r5, r3, r5
 801793a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801793e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017942:	e7e3      	b.n	801790c <_strtod_l+0x404>
 8017944:	9b08      	ldr	r3, [sp, #32]
 8017946:	3316      	adds	r3, #22
 8017948:	db0b      	blt.n	8017962 <_strtod_l+0x45a>
 801794a:	9b07      	ldr	r3, [sp, #28]
 801794c:	4a57      	ldr	r2, [pc, #348]	; (8017aac <_strtod_l+0x5a4>)
 801794e:	1b9e      	subs	r6, r3, r6
 8017950:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8017954:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017958:	4650      	mov	r0, sl
 801795a:	4659      	mov	r1, fp
 801795c:	f7e8 ff76 	bl	800084c <__aeabi_ddiv>
 8017960:	e7d6      	b.n	8017910 <_strtod_l+0x408>
 8017962:	9b08      	ldr	r3, [sp, #32]
 8017964:	eba5 0808 	sub.w	r8, r5, r8
 8017968:	4498      	add	r8, r3
 801796a:	f1b8 0f00 	cmp.w	r8, #0
 801796e:	dd71      	ble.n	8017a54 <_strtod_l+0x54c>
 8017970:	f018 030f 	ands.w	r3, r8, #15
 8017974:	d00a      	beq.n	801798c <_strtod_l+0x484>
 8017976:	494d      	ldr	r1, [pc, #308]	; (8017aac <_strtod_l+0x5a4>)
 8017978:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801797c:	4652      	mov	r2, sl
 801797e:	465b      	mov	r3, fp
 8017980:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017984:	f7e8 fe38 	bl	80005f8 <__aeabi_dmul>
 8017988:	4682      	mov	sl, r0
 801798a:	468b      	mov	fp, r1
 801798c:	f038 080f 	bics.w	r8, r8, #15
 8017990:	d04d      	beq.n	8017a2e <_strtod_l+0x526>
 8017992:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8017996:	dd22      	ble.n	80179de <_strtod_l+0x4d6>
 8017998:	2500      	movs	r5, #0
 801799a:	462e      	mov	r6, r5
 801799c:	9509      	str	r5, [sp, #36]	; 0x24
 801799e:	9507      	str	r5, [sp, #28]
 80179a0:	2322      	movs	r3, #34	; 0x22
 80179a2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8017ab4 <_strtod_l+0x5ac>
 80179a6:	6023      	str	r3, [r4, #0]
 80179a8:	f04f 0a00 	mov.w	sl, #0
 80179ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	f43f adec 	beq.w	801758c <_strtod_l+0x84>
 80179b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80179b6:	4620      	mov	r0, r4
 80179b8:	f001 fe88 	bl	80196cc <_Bfree>
 80179bc:	9907      	ldr	r1, [sp, #28]
 80179be:	4620      	mov	r0, r4
 80179c0:	f001 fe84 	bl	80196cc <_Bfree>
 80179c4:	4631      	mov	r1, r6
 80179c6:	4620      	mov	r0, r4
 80179c8:	f001 fe80 	bl	80196cc <_Bfree>
 80179cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80179ce:	4620      	mov	r0, r4
 80179d0:	f001 fe7c 	bl	80196cc <_Bfree>
 80179d4:	4629      	mov	r1, r5
 80179d6:	4620      	mov	r0, r4
 80179d8:	f001 fe78 	bl	80196cc <_Bfree>
 80179dc:	e5d6      	b.n	801758c <_strtod_l+0x84>
 80179de:	2300      	movs	r3, #0
 80179e0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80179e4:	4650      	mov	r0, sl
 80179e6:	4659      	mov	r1, fp
 80179e8:	4699      	mov	r9, r3
 80179ea:	f1b8 0f01 	cmp.w	r8, #1
 80179ee:	dc21      	bgt.n	8017a34 <_strtod_l+0x52c>
 80179f0:	b10b      	cbz	r3, 80179f6 <_strtod_l+0x4ee>
 80179f2:	4682      	mov	sl, r0
 80179f4:	468b      	mov	fp, r1
 80179f6:	4b2e      	ldr	r3, [pc, #184]	; (8017ab0 <_strtod_l+0x5a8>)
 80179f8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80179fc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8017a00:	4652      	mov	r2, sl
 8017a02:	465b      	mov	r3, fp
 8017a04:	e9d9 0100 	ldrd	r0, r1, [r9]
 8017a08:	f7e8 fdf6 	bl	80005f8 <__aeabi_dmul>
 8017a0c:	4b29      	ldr	r3, [pc, #164]	; (8017ab4 <_strtod_l+0x5ac>)
 8017a0e:	460a      	mov	r2, r1
 8017a10:	400b      	ands	r3, r1
 8017a12:	4929      	ldr	r1, [pc, #164]	; (8017ab8 <_strtod_l+0x5b0>)
 8017a14:	428b      	cmp	r3, r1
 8017a16:	4682      	mov	sl, r0
 8017a18:	d8be      	bhi.n	8017998 <_strtod_l+0x490>
 8017a1a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8017a1e:	428b      	cmp	r3, r1
 8017a20:	bf86      	itte	hi
 8017a22:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8017abc <_strtod_l+0x5b4>
 8017a26:	f04f 3aff 	movhi.w	sl, #4294967295
 8017a2a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8017a2e:	2300      	movs	r3, #0
 8017a30:	9304      	str	r3, [sp, #16]
 8017a32:	e081      	b.n	8017b38 <_strtod_l+0x630>
 8017a34:	f018 0f01 	tst.w	r8, #1
 8017a38:	d007      	beq.n	8017a4a <_strtod_l+0x542>
 8017a3a:	4b1d      	ldr	r3, [pc, #116]	; (8017ab0 <_strtod_l+0x5a8>)
 8017a3c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8017a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a44:	f7e8 fdd8 	bl	80005f8 <__aeabi_dmul>
 8017a48:	2301      	movs	r3, #1
 8017a4a:	f109 0901 	add.w	r9, r9, #1
 8017a4e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017a52:	e7ca      	b.n	80179ea <_strtod_l+0x4e2>
 8017a54:	d0eb      	beq.n	8017a2e <_strtod_l+0x526>
 8017a56:	f1c8 0800 	rsb	r8, r8, #0
 8017a5a:	f018 020f 	ands.w	r2, r8, #15
 8017a5e:	d00a      	beq.n	8017a76 <_strtod_l+0x56e>
 8017a60:	4b12      	ldr	r3, [pc, #72]	; (8017aac <_strtod_l+0x5a4>)
 8017a62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017a66:	4650      	mov	r0, sl
 8017a68:	4659      	mov	r1, fp
 8017a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a6e:	f7e8 feed 	bl	800084c <__aeabi_ddiv>
 8017a72:	4682      	mov	sl, r0
 8017a74:	468b      	mov	fp, r1
 8017a76:	ea5f 1828 	movs.w	r8, r8, asr #4
 8017a7a:	d0d8      	beq.n	8017a2e <_strtod_l+0x526>
 8017a7c:	f1b8 0f1f 	cmp.w	r8, #31
 8017a80:	dd1e      	ble.n	8017ac0 <_strtod_l+0x5b8>
 8017a82:	2500      	movs	r5, #0
 8017a84:	462e      	mov	r6, r5
 8017a86:	9509      	str	r5, [sp, #36]	; 0x24
 8017a88:	9507      	str	r5, [sp, #28]
 8017a8a:	2322      	movs	r3, #34	; 0x22
 8017a8c:	f04f 0a00 	mov.w	sl, #0
 8017a90:	f04f 0b00 	mov.w	fp, #0
 8017a94:	6023      	str	r3, [r4, #0]
 8017a96:	e789      	b.n	80179ac <_strtod_l+0x4a4>
 8017a98:	0801cb01 	.word	0x0801cb01
 8017a9c:	0801cb44 	.word	0x0801cb44
 8017aa0:	0801caf9 	.word	0x0801caf9
 8017aa4:	0801cc84 	.word	0x0801cc84
 8017aa8:	0801cf40 	.word	0x0801cf40
 8017aac:	0801ce20 	.word	0x0801ce20
 8017ab0:	0801cdf8 	.word	0x0801cdf8
 8017ab4:	7ff00000 	.word	0x7ff00000
 8017ab8:	7ca00000 	.word	0x7ca00000
 8017abc:	7fefffff 	.word	0x7fefffff
 8017ac0:	f018 0310 	ands.w	r3, r8, #16
 8017ac4:	bf18      	it	ne
 8017ac6:	236a      	movne	r3, #106	; 0x6a
 8017ac8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8017e80 <_strtod_l+0x978>
 8017acc:	9304      	str	r3, [sp, #16]
 8017ace:	4650      	mov	r0, sl
 8017ad0:	4659      	mov	r1, fp
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	f018 0f01 	tst.w	r8, #1
 8017ad8:	d004      	beq.n	8017ae4 <_strtod_l+0x5dc>
 8017ada:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017ade:	f7e8 fd8b 	bl	80005f8 <__aeabi_dmul>
 8017ae2:	2301      	movs	r3, #1
 8017ae4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8017ae8:	f109 0908 	add.w	r9, r9, #8
 8017aec:	d1f2      	bne.n	8017ad4 <_strtod_l+0x5cc>
 8017aee:	b10b      	cbz	r3, 8017af4 <_strtod_l+0x5ec>
 8017af0:	4682      	mov	sl, r0
 8017af2:	468b      	mov	fp, r1
 8017af4:	9b04      	ldr	r3, [sp, #16]
 8017af6:	b1bb      	cbz	r3, 8017b28 <_strtod_l+0x620>
 8017af8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8017afc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	4659      	mov	r1, fp
 8017b04:	dd10      	ble.n	8017b28 <_strtod_l+0x620>
 8017b06:	2b1f      	cmp	r3, #31
 8017b08:	f340 8128 	ble.w	8017d5c <_strtod_l+0x854>
 8017b0c:	2b34      	cmp	r3, #52	; 0x34
 8017b0e:	bfde      	ittt	le
 8017b10:	3b20      	suble	r3, #32
 8017b12:	f04f 32ff 	movle.w	r2, #4294967295
 8017b16:	fa02 f303 	lslle.w	r3, r2, r3
 8017b1a:	f04f 0a00 	mov.w	sl, #0
 8017b1e:	bfcc      	ite	gt
 8017b20:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017b24:	ea03 0b01 	andle.w	fp, r3, r1
 8017b28:	2200      	movs	r2, #0
 8017b2a:	2300      	movs	r3, #0
 8017b2c:	4650      	mov	r0, sl
 8017b2e:	4659      	mov	r1, fp
 8017b30:	f7e8 ffca 	bl	8000ac8 <__aeabi_dcmpeq>
 8017b34:	2800      	cmp	r0, #0
 8017b36:	d1a4      	bne.n	8017a82 <_strtod_l+0x57a>
 8017b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b3a:	9300      	str	r3, [sp, #0]
 8017b3c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017b3e:	462b      	mov	r3, r5
 8017b40:	463a      	mov	r2, r7
 8017b42:	4620      	mov	r0, r4
 8017b44:	f001 fe2e 	bl	80197a4 <__s2b>
 8017b48:	9009      	str	r0, [sp, #36]	; 0x24
 8017b4a:	2800      	cmp	r0, #0
 8017b4c:	f43f af24 	beq.w	8017998 <_strtod_l+0x490>
 8017b50:	9b07      	ldr	r3, [sp, #28]
 8017b52:	1b9e      	subs	r6, r3, r6
 8017b54:	9b08      	ldr	r3, [sp, #32]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	bfb4      	ite	lt
 8017b5a:	4633      	movlt	r3, r6
 8017b5c:	2300      	movge	r3, #0
 8017b5e:	9310      	str	r3, [sp, #64]	; 0x40
 8017b60:	9b08      	ldr	r3, [sp, #32]
 8017b62:	2500      	movs	r5, #0
 8017b64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017b68:	9318      	str	r3, [sp, #96]	; 0x60
 8017b6a:	462e      	mov	r6, r5
 8017b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b6e:	4620      	mov	r0, r4
 8017b70:	6859      	ldr	r1, [r3, #4]
 8017b72:	f001 fd6b 	bl	801964c <_Balloc>
 8017b76:	9007      	str	r0, [sp, #28]
 8017b78:	2800      	cmp	r0, #0
 8017b7a:	f43f af11 	beq.w	80179a0 <_strtod_l+0x498>
 8017b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b80:	691a      	ldr	r2, [r3, #16]
 8017b82:	3202      	adds	r2, #2
 8017b84:	f103 010c 	add.w	r1, r3, #12
 8017b88:	0092      	lsls	r2, r2, #2
 8017b8a:	300c      	adds	r0, #12
 8017b8c:	f7fe fce0 	bl	8016550 <memcpy>
 8017b90:	ec4b ab10 	vmov	d0, sl, fp
 8017b94:	aa20      	add	r2, sp, #128	; 0x80
 8017b96:	a91f      	add	r1, sp, #124	; 0x7c
 8017b98:	4620      	mov	r0, r4
 8017b9a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8017b9e:	f002 f93d 	bl	8019e1c <__d2b>
 8017ba2:	901e      	str	r0, [sp, #120]	; 0x78
 8017ba4:	2800      	cmp	r0, #0
 8017ba6:	f43f aefb 	beq.w	80179a0 <_strtod_l+0x498>
 8017baa:	2101      	movs	r1, #1
 8017bac:	4620      	mov	r0, r4
 8017bae:	f001 fe93 	bl	80198d8 <__i2b>
 8017bb2:	4606      	mov	r6, r0
 8017bb4:	2800      	cmp	r0, #0
 8017bb6:	f43f aef3 	beq.w	80179a0 <_strtod_l+0x498>
 8017bba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017bbc:	9904      	ldr	r1, [sp, #16]
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	bfab      	itete	ge
 8017bc2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8017bc4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8017bc6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8017bc8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8017bcc:	bfac      	ite	ge
 8017bce:	eb03 0902 	addge.w	r9, r3, r2
 8017bd2:	1ad7      	sublt	r7, r2, r3
 8017bd4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017bd6:	eba3 0801 	sub.w	r8, r3, r1
 8017bda:	4490      	add	r8, r2
 8017bdc:	4ba3      	ldr	r3, [pc, #652]	; (8017e6c <_strtod_l+0x964>)
 8017bde:	f108 38ff 	add.w	r8, r8, #4294967295
 8017be2:	4598      	cmp	r8, r3
 8017be4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017be8:	f280 80cc 	bge.w	8017d84 <_strtod_l+0x87c>
 8017bec:	eba3 0308 	sub.w	r3, r3, r8
 8017bf0:	2b1f      	cmp	r3, #31
 8017bf2:	eba2 0203 	sub.w	r2, r2, r3
 8017bf6:	f04f 0101 	mov.w	r1, #1
 8017bfa:	f300 80b6 	bgt.w	8017d6a <_strtod_l+0x862>
 8017bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8017c02:	9311      	str	r3, [sp, #68]	; 0x44
 8017c04:	2300      	movs	r3, #0
 8017c06:	930c      	str	r3, [sp, #48]	; 0x30
 8017c08:	eb09 0802 	add.w	r8, r9, r2
 8017c0c:	9b04      	ldr	r3, [sp, #16]
 8017c0e:	45c1      	cmp	r9, r8
 8017c10:	4417      	add	r7, r2
 8017c12:	441f      	add	r7, r3
 8017c14:	464b      	mov	r3, r9
 8017c16:	bfa8      	it	ge
 8017c18:	4643      	movge	r3, r8
 8017c1a:	42bb      	cmp	r3, r7
 8017c1c:	bfa8      	it	ge
 8017c1e:	463b      	movge	r3, r7
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	bfc2      	ittt	gt
 8017c24:	eba8 0803 	subgt.w	r8, r8, r3
 8017c28:	1aff      	subgt	r7, r7, r3
 8017c2a:	eba9 0903 	subgt.w	r9, r9, r3
 8017c2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	dd17      	ble.n	8017c64 <_strtod_l+0x75c>
 8017c34:	4631      	mov	r1, r6
 8017c36:	461a      	mov	r2, r3
 8017c38:	4620      	mov	r0, r4
 8017c3a:	f001 ff09 	bl	8019a50 <__pow5mult>
 8017c3e:	4606      	mov	r6, r0
 8017c40:	2800      	cmp	r0, #0
 8017c42:	f43f aead 	beq.w	80179a0 <_strtod_l+0x498>
 8017c46:	4601      	mov	r1, r0
 8017c48:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017c4a:	4620      	mov	r0, r4
 8017c4c:	f001 fe5a 	bl	8019904 <__multiply>
 8017c50:	900f      	str	r0, [sp, #60]	; 0x3c
 8017c52:	2800      	cmp	r0, #0
 8017c54:	f43f aea4 	beq.w	80179a0 <_strtod_l+0x498>
 8017c58:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017c5a:	4620      	mov	r0, r4
 8017c5c:	f001 fd36 	bl	80196cc <_Bfree>
 8017c60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c62:	931e      	str	r3, [sp, #120]	; 0x78
 8017c64:	f1b8 0f00 	cmp.w	r8, #0
 8017c68:	f300 8091 	bgt.w	8017d8e <_strtod_l+0x886>
 8017c6c:	9b08      	ldr	r3, [sp, #32]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	dd08      	ble.n	8017c84 <_strtod_l+0x77c>
 8017c72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017c74:	9907      	ldr	r1, [sp, #28]
 8017c76:	4620      	mov	r0, r4
 8017c78:	f001 feea 	bl	8019a50 <__pow5mult>
 8017c7c:	9007      	str	r0, [sp, #28]
 8017c7e:	2800      	cmp	r0, #0
 8017c80:	f43f ae8e 	beq.w	80179a0 <_strtod_l+0x498>
 8017c84:	2f00      	cmp	r7, #0
 8017c86:	dd08      	ble.n	8017c9a <_strtod_l+0x792>
 8017c88:	9907      	ldr	r1, [sp, #28]
 8017c8a:	463a      	mov	r2, r7
 8017c8c:	4620      	mov	r0, r4
 8017c8e:	f001 ff39 	bl	8019b04 <__lshift>
 8017c92:	9007      	str	r0, [sp, #28]
 8017c94:	2800      	cmp	r0, #0
 8017c96:	f43f ae83 	beq.w	80179a0 <_strtod_l+0x498>
 8017c9a:	f1b9 0f00 	cmp.w	r9, #0
 8017c9e:	dd08      	ble.n	8017cb2 <_strtod_l+0x7aa>
 8017ca0:	4631      	mov	r1, r6
 8017ca2:	464a      	mov	r2, r9
 8017ca4:	4620      	mov	r0, r4
 8017ca6:	f001 ff2d 	bl	8019b04 <__lshift>
 8017caa:	4606      	mov	r6, r0
 8017cac:	2800      	cmp	r0, #0
 8017cae:	f43f ae77 	beq.w	80179a0 <_strtod_l+0x498>
 8017cb2:	9a07      	ldr	r2, [sp, #28]
 8017cb4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017cb6:	4620      	mov	r0, r4
 8017cb8:	f001 ffac 	bl	8019c14 <__mdiff>
 8017cbc:	4605      	mov	r5, r0
 8017cbe:	2800      	cmp	r0, #0
 8017cc0:	f43f ae6e 	beq.w	80179a0 <_strtod_l+0x498>
 8017cc4:	68c3      	ldr	r3, [r0, #12]
 8017cc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8017cc8:	2300      	movs	r3, #0
 8017cca:	60c3      	str	r3, [r0, #12]
 8017ccc:	4631      	mov	r1, r6
 8017cce:	f001 ff85 	bl	8019bdc <__mcmp>
 8017cd2:	2800      	cmp	r0, #0
 8017cd4:	da65      	bge.n	8017da2 <_strtod_l+0x89a>
 8017cd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017cd8:	ea53 030a 	orrs.w	r3, r3, sl
 8017cdc:	f040 8087 	bne.w	8017dee <_strtod_l+0x8e6>
 8017ce0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	f040 8082 	bne.w	8017dee <_strtod_l+0x8e6>
 8017cea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017cee:	0d1b      	lsrs	r3, r3, #20
 8017cf0:	051b      	lsls	r3, r3, #20
 8017cf2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017cf6:	d97a      	bls.n	8017dee <_strtod_l+0x8e6>
 8017cf8:	696b      	ldr	r3, [r5, #20]
 8017cfa:	b913      	cbnz	r3, 8017d02 <_strtod_l+0x7fa>
 8017cfc:	692b      	ldr	r3, [r5, #16]
 8017cfe:	2b01      	cmp	r3, #1
 8017d00:	dd75      	ble.n	8017dee <_strtod_l+0x8e6>
 8017d02:	4629      	mov	r1, r5
 8017d04:	2201      	movs	r2, #1
 8017d06:	4620      	mov	r0, r4
 8017d08:	f001 fefc 	bl	8019b04 <__lshift>
 8017d0c:	4631      	mov	r1, r6
 8017d0e:	4605      	mov	r5, r0
 8017d10:	f001 ff64 	bl	8019bdc <__mcmp>
 8017d14:	2800      	cmp	r0, #0
 8017d16:	dd6a      	ble.n	8017dee <_strtod_l+0x8e6>
 8017d18:	9904      	ldr	r1, [sp, #16]
 8017d1a:	4a55      	ldr	r2, [pc, #340]	; (8017e70 <_strtod_l+0x968>)
 8017d1c:	465b      	mov	r3, fp
 8017d1e:	2900      	cmp	r1, #0
 8017d20:	f000 8085 	beq.w	8017e2e <_strtod_l+0x926>
 8017d24:	ea02 010b 	and.w	r1, r2, fp
 8017d28:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017d2c:	dc7f      	bgt.n	8017e2e <_strtod_l+0x926>
 8017d2e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017d32:	f77f aeaa 	ble.w	8017a8a <_strtod_l+0x582>
 8017d36:	4a4f      	ldr	r2, [pc, #316]	; (8017e74 <_strtod_l+0x96c>)
 8017d38:	2300      	movs	r3, #0
 8017d3a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8017d3e:	4650      	mov	r0, sl
 8017d40:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8017d44:	4659      	mov	r1, fp
 8017d46:	f7e8 fc57 	bl	80005f8 <__aeabi_dmul>
 8017d4a:	460b      	mov	r3, r1
 8017d4c:	4303      	orrs	r3, r0
 8017d4e:	bf08      	it	eq
 8017d50:	2322      	moveq	r3, #34	; 0x22
 8017d52:	4682      	mov	sl, r0
 8017d54:	468b      	mov	fp, r1
 8017d56:	bf08      	it	eq
 8017d58:	6023      	streq	r3, [r4, #0]
 8017d5a:	e62b      	b.n	80179b4 <_strtod_l+0x4ac>
 8017d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8017d60:	fa02 f303 	lsl.w	r3, r2, r3
 8017d64:	ea03 0a0a 	and.w	sl, r3, sl
 8017d68:	e6de      	b.n	8017b28 <_strtod_l+0x620>
 8017d6a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8017d6e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8017d72:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8017d76:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8017d7a:	fa01 f308 	lsl.w	r3, r1, r8
 8017d7e:	930c      	str	r3, [sp, #48]	; 0x30
 8017d80:	9111      	str	r1, [sp, #68]	; 0x44
 8017d82:	e741      	b.n	8017c08 <_strtod_l+0x700>
 8017d84:	2300      	movs	r3, #0
 8017d86:	930c      	str	r3, [sp, #48]	; 0x30
 8017d88:	2301      	movs	r3, #1
 8017d8a:	9311      	str	r3, [sp, #68]	; 0x44
 8017d8c:	e73c      	b.n	8017c08 <_strtod_l+0x700>
 8017d8e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017d90:	4642      	mov	r2, r8
 8017d92:	4620      	mov	r0, r4
 8017d94:	f001 feb6 	bl	8019b04 <__lshift>
 8017d98:	901e      	str	r0, [sp, #120]	; 0x78
 8017d9a:	2800      	cmp	r0, #0
 8017d9c:	f47f af66 	bne.w	8017c6c <_strtod_l+0x764>
 8017da0:	e5fe      	b.n	80179a0 <_strtod_l+0x498>
 8017da2:	465f      	mov	r7, fp
 8017da4:	d16e      	bne.n	8017e84 <_strtod_l+0x97c>
 8017da6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017da8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017dac:	b342      	cbz	r2, 8017e00 <_strtod_l+0x8f8>
 8017dae:	4a32      	ldr	r2, [pc, #200]	; (8017e78 <_strtod_l+0x970>)
 8017db0:	4293      	cmp	r3, r2
 8017db2:	d128      	bne.n	8017e06 <_strtod_l+0x8fe>
 8017db4:	9b04      	ldr	r3, [sp, #16]
 8017db6:	4650      	mov	r0, sl
 8017db8:	b1eb      	cbz	r3, 8017df6 <_strtod_l+0x8ee>
 8017dba:	4a2d      	ldr	r2, [pc, #180]	; (8017e70 <_strtod_l+0x968>)
 8017dbc:	403a      	ands	r2, r7
 8017dbe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017dc2:	f04f 31ff 	mov.w	r1, #4294967295
 8017dc6:	d819      	bhi.n	8017dfc <_strtod_l+0x8f4>
 8017dc8:	0d12      	lsrs	r2, r2, #20
 8017dca:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017dce:	fa01 f303 	lsl.w	r3, r1, r3
 8017dd2:	4298      	cmp	r0, r3
 8017dd4:	d117      	bne.n	8017e06 <_strtod_l+0x8fe>
 8017dd6:	4b29      	ldr	r3, [pc, #164]	; (8017e7c <_strtod_l+0x974>)
 8017dd8:	429f      	cmp	r7, r3
 8017dda:	d102      	bne.n	8017de2 <_strtod_l+0x8da>
 8017ddc:	3001      	adds	r0, #1
 8017dde:	f43f addf 	beq.w	80179a0 <_strtod_l+0x498>
 8017de2:	4b23      	ldr	r3, [pc, #140]	; (8017e70 <_strtod_l+0x968>)
 8017de4:	403b      	ands	r3, r7
 8017de6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8017dea:	f04f 0a00 	mov.w	sl, #0
 8017dee:	9b04      	ldr	r3, [sp, #16]
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d1a0      	bne.n	8017d36 <_strtod_l+0x82e>
 8017df4:	e5de      	b.n	80179b4 <_strtod_l+0x4ac>
 8017df6:	f04f 33ff 	mov.w	r3, #4294967295
 8017dfa:	e7ea      	b.n	8017dd2 <_strtod_l+0x8ca>
 8017dfc:	460b      	mov	r3, r1
 8017dfe:	e7e8      	b.n	8017dd2 <_strtod_l+0x8ca>
 8017e00:	ea53 030a 	orrs.w	r3, r3, sl
 8017e04:	d088      	beq.n	8017d18 <_strtod_l+0x810>
 8017e06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017e08:	b1db      	cbz	r3, 8017e42 <_strtod_l+0x93a>
 8017e0a:	423b      	tst	r3, r7
 8017e0c:	d0ef      	beq.n	8017dee <_strtod_l+0x8e6>
 8017e0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017e10:	9a04      	ldr	r2, [sp, #16]
 8017e12:	4650      	mov	r0, sl
 8017e14:	4659      	mov	r1, fp
 8017e16:	b1c3      	cbz	r3, 8017e4a <_strtod_l+0x942>
 8017e18:	f7ff fb58 	bl	80174cc <sulp>
 8017e1c:	4602      	mov	r2, r0
 8017e1e:	460b      	mov	r3, r1
 8017e20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017e24:	f7e8 fa32 	bl	800028c <__adddf3>
 8017e28:	4682      	mov	sl, r0
 8017e2a:	468b      	mov	fp, r1
 8017e2c:	e7df      	b.n	8017dee <_strtod_l+0x8e6>
 8017e2e:	4013      	ands	r3, r2
 8017e30:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017e34:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017e38:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017e3c:	f04f 3aff 	mov.w	sl, #4294967295
 8017e40:	e7d5      	b.n	8017dee <_strtod_l+0x8e6>
 8017e42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017e44:	ea13 0f0a 	tst.w	r3, sl
 8017e48:	e7e0      	b.n	8017e0c <_strtod_l+0x904>
 8017e4a:	f7ff fb3f 	bl	80174cc <sulp>
 8017e4e:	4602      	mov	r2, r0
 8017e50:	460b      	mov	r3, r1
 8017e52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017e56:	f7e8 fa17 	bl	8000288 <__aeabi_dsub>
 8017e5a:	2200      	movs	r2, #0
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	4682      	mov	sl, r0
 8017e60:	468b      	mov	fp, r1
 8017e62:	f7e8 fe31 	bl	8000ac8 <__aeabi_dcmpeq>
 8017e66:	2800      	cmp	r0, #0
 8017e68:	d0c1      	beq.n	8017dee <_strtod_l+0x8e6>
 8017e6a:	e60e      	b.n	8017a8a <_strtod_l+0x582>
 8017e6c:	fffffc02 	.word	0xfffffc02
 8017e70:	7ff00000 	.word	0x7ff00000
 8017e74:	39500000 	.word	0x39500000
 8017e78:	000fffff 	.word	0x000fffff
 8017e7c:	7fefffff 	.word	0x7fefffff
 8017e80:	0801cb58 	.word	0x0801cb58
 8017e84:	4631      	mov	r1, r6
 8017e86:	4628      	mov	r0, r5
 8017e88:	f002 f824 	bl	8019ed4 <__ratio>
 8017e8c:	ec59 8b10 	vmov	r8, r9, d0
 8017e90:	ee10 0a10 	vmov	r0, s0
 8017e94:	2200      	movs	r2, #0
 8017e96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017e9a:	4649      	mov	r1, r9
 8017e9c:	f7e8 fe28 	bl	8000af0 <__aeabi_dcmple>
 8017ea0:	2800      	cmp	r0, #0
 8017ea2:	d07c      	beq.n	8017f9e <_strtod_l+0xa96>
 8017ea4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d04c      	beq.n	8017f44 <_strtod_l+0xa3c>
 8017eaa:	4b95      	ldr	r3, [pc, #596]	; (8018100 <_strtod_l+0xbf8>)
 8017eac:	2200      	movs	r2, #0
 8017eae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017eb2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8018100 <_strtod_l+0xbf8>
 8017eb6:	f04f 0800 	mov.w	r8, #0
 8017eba:	4b92      	ldr	r3, [pc, #584]	; (8018104 <_strtod_l+0xbfc>)
 8017ebc:	403b      	ands	r3, r7
 8017ebe:	9311      	str	r3, [sp, #68]	; 0x44
 8017ec0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017ec2:	4b91      	ldr	r3, [pc, #580]	; (8018108 <_strtod_l+0xc00>)
 8017ec4:	429a      	cmp	r2, r3
 8017ec6:	f040 80b2 	bne.w	801802e <_strtod_l+0xb26>
 8017eca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017ece:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017ed2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8017ed6:	ec4b ab10 	vmov	d0, sl, fp
 8017eda:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8017ede:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017ee2:	f001 ff1f 	bl	8019d24 <__ulp>
 8017ee6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017eea:	ec53 2b10 	vmov	r2, r3, d0
 8017eee:	f7e8 fb83 	bl	80005f8 <__aeabi_dmul>
 8017ef2:	4652      	mov	r2, sl
 8017ef4:	465b      	mov	r3, fp
 8017ef6:	f7e8 f9c9 	bl	800028c <__adddf3>
 8017efa:	460b      	mov	r3, r1
 8017efc:	4981      	ldr	r1, [pc, #516]	; (8018104 <_strtod_l+0xbfc>)
 8017efe:	4a83      	ldr	r2, [pc, #524]	; (801810c <_strtod_l+0xc04>)
 8017f00:	4019      	ands	r1, r3
 8017f02:	4291      	cmp	r1, r2
 8017f04:	4682      	mov	sl, r0
 8017f06:	d95e      	bls.n	8017fc6 <_strtod_l+0xabe>
 8017f08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f0a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017f0e:	4293      	cmp	r3, r2
 8017f10:	d103      	bne.n	8017f1a <_strtod_l+0xa12>
 8017f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f14:	3301      	adds	r3, #1
 8017f16:	f43f ad43 	beq.w	80179a0 <_strtod_l+0x498>
 8017f1a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8018118 <_strtod_l+0xc10>
 8017f1e:	f04f 3aff 	mov.w	sl, #4294967295
 8017f22:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017f24:	4620      	mov	r0, r4
 8017f26:	f001 fbd1 	bl	80196cc <_Bfree>
 8017f2a:	9907      	ldr	r1, [sp, #28]
 8017f2c:	4620      	mov	r0, r4
 8017f2e:	f001 fbcd 	bl	80196cc <_Bfree>
 8017f32:	4631      	mov	r1, r6
 8017f34:	4620      	mov	r0, r4
 8017f36:	f001 fbc9 	bl	80196cc <_Bfree>
 8017f3a:	4629      	mov	r1, r5
 8017f3c:	4620      	mov	r0, r4
 8017f3e:	f001 fbc5 	bl	80196cc <_Bfree>
 8017f42:	e613      	b.n	8017b6c <_strtod_l+0x664>
 8017f44:	f1ba 0f00 	cmp.w	sl, #0
 8017f48:	d11b      	bne.n	8017f82 <_strtod_l+0xa7a>
 8017f4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017f4e:	b9f3      	cbnz	r3, 8017f8e <_strtod_l+0xa86>
 8017f50:	4b6b      	ldr	r3, [pc, #428]	; (8018100 <_strtod_l+0xbf8>)
 8017f52:	2200      	movs	r2, #0
 8017f54:	4640      	mov	r0, r8
 8017f56:	4649      	mov	r1, r9
 8017f58:	f7e8 fdc0 	bl	8000adc <__aeabi_dcmplt>
 8017f5c:	b9d0      	cbnz	r0, 8017f94 <_strtod_l+0xa8c>
 8017f5e:	4640      	mov	r0, r8
 8017f60:	4649      	mov	r1, r9
 8017f62:	4b6b      	ldr	r3, [pc, #428]	; (8018110 <_strtod_l+0xc08>)
 8017f64:	2200      	movs	r2, #0
 8017f66:	f7e8 fb47 	bl	80005f8 <__aeabi_dmul>
 8017f6a:	4680      	mov	r8, r0
 8017f6c:	4689      	mov	r9, r1
 8017f6e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8017f72:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8017f76:	931b      	str	r3, [sp, #108]	; 0x6c
 8017f78:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8017f7c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017f80:	e79b      	b.n	8017eba <_strtod_l+0x9b2>
 8017f82:	f1ba 0f01 	cmp.w	sl, #1
 8017f86:	d102      	bne.n	8017f8e <_strtod_l+0xa86>
 8017f88:	2f00      	cmp	r7, #0
 8017f8a:	f43f ad7e 	beq.w	8017a8a <_strtod_l+0x582>
 8017f8e:	4b61      	ldr	r3, [pc, #388]	; (8018114 <_strtod_l+0xc0c>)
 8017f90:	2200      	movs	r2, #0
 8017f92:	e78c      	b.n	8017eae <_strtod_l+0x9a6>
 8017f94:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8018110 <_strtod_l+0xc08>
 8017f98:	f04f 0800 	mov.w	r8, #0
 8017f9c:	e7e7      	b.n	8017f6e <_strtod_l+0xa66>
 8017f9e:	4b5c      	ldr	r3, [pc, #368]	; (8018110 <_strtod_l+0xc08>)
 8017fa0:	4640      	mov	r0, r8
 8017fa2:	4649      	mov	r1, r9
 8017fa4:	2200      	movs	r2, #0
 8017fa6:	f7e8 fb27 	bl	80005f8 <__aeabi_dmul>
 8017faa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017fac:	4680      	mov	r8, r0
 8017fae:	4689      	mov	r9, r1
 8017fb0:	b933      	cbnz	r3, 8017fc0 <_strtod_l+0xab8>
 8017fb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017fb6:	9012      	str	r0, [sp, #72]	; 0x48
 8017fb8:	9313      	str	r3, [sp, #76]	; 0x4c
 8017fba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017fbe:	e7dd      	b.n	8017f7c <_strtod_l+0xa74>
 8017fc0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8017fc4:	e7f9      	b.n	8017fba <_strtod_l+0xab2>
 8017fc6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017fca:	9b04      	ldr	r3, [sp, #16]
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d1a8      	bne.n	8017f22 <_strtod_l+0xa1a>
 8017fd0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017fd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017fd6:	0d1b      	lsrs	r3, r3, #20
 8017fd8:	051b      	lsls	r3, r3, #20
 8017fda:	429a      	cmp	r2, r3
 8017fdc:	d1a1      	bne.n	8017f22 <_strtod_l+0xa1a>
 8017fde:	4640      	mov	r0, r8
 8017fe0:	4649      	mov	r1, r9
 8017fe2:	f7e8 fe69 	bl	8000cb8 <__aeabi_d2lz>
 8017fe6:	f7e8 fad9 	bl	800059c <__aeabi_l2d>
 8017fea:	4602      	mov	r2, r0
 8017fec:	460b      	mov	r3, r1
 8017fee:	4640      	mov	r0, r8
 8017ff0:	4649      	mov	r1, r9
 8017ff2:	f7e8 f949 	bl	8000288 <__aeabi_dsub>
 8017ff6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017ff8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017ffc:	ea43 030a 	orr.w	r3, r3, sl
 8018000:	4313      	orrs	r3, r2
 8018002:	4680      	mov	r8, r0
 8018004:	4689      	mov	r9, r1
 8018006:	d053      	beq.n	80180b0 <_strtod_l+0xba8>
 8018008:	a335      	add	r3, pc, #212	; (adr r3, 80180e0 <_strtod_l+0xbd8>)
 801800a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801800e:	f7e8 fd65 	bl	8000adc <__aeabi_dcmplt>
 8018012:	2800      	cmp	r0, #0
 8018014:	f47f acce 	bne.w	80179b4 <_strtod_l+0x4ac>
 8018018:	a333      	add	r3, pc, #204	; (adr r3, 80180e8 <_strtod_l+0xbe0>)
 801801a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801801e:	4640      	mov	r0, r8
 8018020:	4649      	mov	r1, r9
 8018022:	f7e8 fd79 	bl	8000b18 <__aeabi_dcmpgt>
 8018026:	2800      	cmp	r0, #0
 8018028:	f43f af7b 	beq.w	8017f22 <_strtod_l+0xa1a>
 801802c:	e4c2      	b.n	80179b4 <_strtod_l+0x4ac>
 801802e:	9b04      	ldr	r3, [sp, #16]
 8018030:	b333      	cbz	r3, 8018080 <_strtod_l+0xb78>
 8018032:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018034:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018038:	d822      	bhi.n	8018080 <_strtod_l+0xb78>
 801803a:	a32d      	add	r3, pc, #180	; (adr r3, 80180f0 <_strtod_l+0xbe8>)
 801803c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018040:	4640      	mov	r0, r8
 8018042:	4649      	mov	r1, r9
 8018044:	f7e8 fd54 	bl	8000af0 <__aeabi_dcmple>
 8018048:	b1a0      	cbz	r0, 8018074 <_strtod_l+0xb6c>
 801804a:	4649      	mov	r1, r9
 801804c:	4640      	mov	r0, r8
 801804e:	f7e8 fdab 	bl	8000ba8 <__aeabi_d2uiz>
 8018052:	2801      	cmp	r0, #1
 8018054:	bf38      	it	cc
 8018056:	2001      	movcc	r0, #1
 8018058:	f7e8 fa54 	bl	8000504 <__aeabi_ui2d>
 801805c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801805e:	4680      	mov	r8, r0
 8018060:	4689      	mov	r9, r1
 8018062:	bb13      	cbnz	r3, 80180aa <_strtod_l+0xba2>
 8018064:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018068:	9014      	str	r0, [sp, #80]	; 0x50
 801806a:	9315      	str	r3, [sp, #84]	; 0x54
 801806c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8018070:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8018074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018076:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018078:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801807c:	1a9b      	subs	r3, r3, r2
 801807e:	930d      	str	r3, [sp, #52]	; 0x34
 8018080:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018084:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8018088:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801808c:	f001 fe4a 	bl	8019d24 <__ulp>
 8018090:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018094:	ec53 2b10 	vmov	r2, r3, d0
 8018098:	f7e8 faae 	bl	80005f8 <__aeabi_dmul>
 801809c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80180a0:	f7e8 f8f4 	bl	800028c <__adddf3>
 80180a4:	4682      	mov	sl, r0
 80180a6:	468b      	mov	fp, r1
 80180a8:	e78f      	b.n	8017fca <_strtod_l+0xac2>
 80180aa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80180ae:	e7dd      	b.n	801806c <_strtod_l+0xb64>
 80180b0:	a311      	add	r3, pc, #68	; (adr r3, 80180f8 <_strtod_l+0xbf0>)
 80180b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180b6:	f7e8 fd11 	bl	8000adc <__aeabi_dcmplt>
 80180ba:	e7b4      	b.n	8018026 <_strtod_l+0xb1e>
 80180bc:	2300      	movs	r3, #0
 80180be:	930e      	str	r3, [sp, #56]	; 0x38
 80180c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80180c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80180c4:	6013      	str	r3, [r2, #0]
 80180c6:	f7ff ba65 	b.w	8017594 <_strtod_l+0x8c>
 80180ca:	2b65      	cmp	r3, #101	; 0x65
 80180cc:	f43f ab5d 	beq.w	801778a <_strtod_l+0x282>
 80180d0:	2b45      	cmp	r3, #69	; 0x45
 80180d2:	f43f ab5a 	beq.w	801778a <_strtod_l+0x282>
 80180d6:	2201      	movs	r2, #1
 80180d8:	f7ff bb92 	b.w	8017800 <_strtod_l+0x2f8>
 80180dc:	f3af 8000 	nop.w
 80180e0:	94a03595 	.word	0x94a03595
 80180e4:	3fdfffff 	.word	0x3fdfffff
 80180e8:	35afe535 	.word	0x35afe535
 80180ec:	3fe00000 	.word	0x3fe00000
 80180f0:	ffc00000 	.word	0xffc00000
 80180f4:	41dfffff 	.word	0x41dfffff
 80180f8:	94a03595 	.word	0x94a03595
 80180fc:	3fcfffff 	.word	0x3fcfffff
 8018100:	3ff00000 	.word	0x3ff00000
 8018104:	7ff00000 	.word	0x7ff00000
 8018108:	7fe00000 	.word	0x7fe00000
 801810c:	7c9fffff 	.word	0x7c9fffff
 8018110:	3fe00000 	.word	0x3fe00000
 8018114:	bff00000 	.word	0xbff00000
 8018118:	7fefffff 	.word	0x7fefffff

0801811c <_strtod_r>:
 801811c:	4b01      	ldr	r3, [pc, #4]	; (8018124 <_strtod_r+0x8>)
 801811e:	f7ff b9f3 	b.w	8017508 <_strtod_l>
 8018122:	bf00      	nop
 8018124:	20004278 	.word	0x20004278

08018128 <_strtol_l.isra.0>:
 8018128:	2b01      	cmp	r3, #1
 801812a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801812e:	d001      	beq.n	8018134 <_strtol_l.isra.0+0xc>
 8018130:	2b24      	cmp	r3, #36	; 0x24
 8018132:	d906      	bls.n	8018142 <_strtol_l.isra.0+0x1a>
 8018134:	f7fe f9d2 	bl	80164dc <__errno>
 8018138:	2316      	movs	r3, #22
 801813a:	6003      	str	r3, [r0, #0]
 801813c:	2000      	movs	r0, #0
 801813e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018142:	4f3a      	ldr	r7, [pc, #232]	; (801822c <_strtol_l.isra.0+0x104>)
 8018144:	468e      	mov	lr, r1
 8018146:	4676      	mov	r6, lr
 8018148:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801814c:	5de5      	ldrb	r5, [r4, r7]
 801814e:	f015 0508 	ands.w	r5, r5, #8
 8018152:	d1f8      	bne.n	8018146 <_strtol_l.isra.0+0x1e>
 8018154:	2c2d      	cmp	r4, #45	; 0x2d
 8018156:	d134      	bne.n	80181c2 <_strtol_l.isra.0+0x9a>
 8018158:	f89e 4000 	ldrb.w	r4, [lr]
 801815c:	f04f 0801 	mov.w	r8, #1
 8018160:	f106 0e02 	add.w	lr, r6, #2
 8018164:	2b00      	cmp	r3, #0
 8018166:	d05c      	beq.n	8018222 <_strtol_l.isra.0+0xfa>
 8018168:	2b10      	cmp	r3, #16
 801816a:	d10c      	bne.n	8018186 <_strtol_l.isra.0+0x5e>
 801816c:	2c30      	cmp	r4, #48	; 0x30
 801816e:	d10a      	bne.n	8018186 <_strtol_l.isra.0+0x5e>
 8018170:	f89e 4000 	ldrb.w	r4, [lr]
 8018174:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8018178:	2c58      	cmp	r4, #88	; 0x58
 801817a:	d14d      	bne.n	8018218 <_strtol_l.isra.0+0xf0>
 801817c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8018180:	2310      	movs	r3, #16
 8018182:	f10e 0e02 	add.w	lr, lr, #2
 8018186:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801818a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801818e:	2600      	movs	r6, #0
 8018190:	fbbc f9f3 	udiv	r9, ip, r3
 8018194:	4635      	mov	r5, r6
 8018196:	fb03 ca19 	mls	sl, r3, r9, ip
 801819a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801819e:	2f09      	cmp	r7, #9
 80181a0:	d818      	bhi.n	80181d4 <_strtol_l.isra.0+0xac>
 80181a2:	463c      	mov	r4, r7
 80181a4:	42a3      	cmp	r3, r4
 80181a6:	dd24      	ble.n	80181f2 <_strtol_l.isra.0+0xca>
 80181a8:	2e00      	cmp	r6, #0
 80181aa:	db1f      	blt.n	80181ec <_strtol_l.isra.0+0xc4>
 80181ac:	45a9      	cmp	r9, r5
 80181ae:	d31d      	bcc.n	80181ec <_strtol_l.isra.0+0xc4>
 80181b0:	d101      	bne.n	80181b6 <_strtol_l.isra.0+0x8e>
 80181b2:	45a2      	cmp	sl, r4
 80181b4:	db1a      	blt.n	80181ec <_strtol_l.isra.0+0xc4>
 80181b6:	fb05 4503 	mla	r5, r5, r3, r4
 80181ba:	2601      	movs	r6, #1
 80181bc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80181c0:	e7eb      	b.n	801819a <_strtol_l.isra.0+0x72>
 80181c2:	2c2b      	cmp	r4, #43	; 0x2b
 80181c4:	bf08      	it	eq
 80181c6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80181ca:	46a8      	mov	r8, r5
 80181cc:	bf08      	it	eq
 80181ce:	f106 0e02 	addeq.w	lr, r6, #2
 80181d2:	e7c7      	b.n	8018164 <_strtol_l.isra.0+0x3c>
 80181d4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80181d8:	2f19      	cmp	r7, #25
 80181da:	d801      	bhi.n	80181e0 <_strtol_l.isra.0+0xb8>
 80181dc:	3c37      	subs	r4, #55	; 0x37
 80181de:	e7e1      	b.n	80181a4 <_strtol_l.isra.0+0x7c>
 80181e0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80181e4:	2f19      	cmp	r7, #25
 80181e6:	d804      	bhi.n	80181f2 <_strtol_l.isra.0+0xca>
 80181e8:	3c57      	subs	r4, #87	; 0x57
 80181ea:	e7db      	b.n	80181a4 <_strtol_l.isra.0+0x7c>
 80181ec:	f04f 36ff 	mov.w	r6, #4294967295
 80181f0:	e7e4      	b.n	80181bc <_strtol_l.isra.0+0x94>
 80181f2:	2e00      	cmp	r6, #0
 80181f4:	da05      	bge.n	8018202 <_strtol_l.isra.0+0xda>
 80181f6:	2322      	movs	r3, #34	; 0x22
 80181f8:	6003      	str	r3, [r0, #0]
 80181fa:	4665      	mov	r5, ip
 80181fc:	b942      	cbnz	r2, 8018210 <_strtol_l.isra.0+0xe8>
 80181fe:	4628      	mov	r0, r5
 8018200:	e79d      	b.n	801813e <_strtol_l.isra.0+0x16>
 8018202:	f1b8 0f00 	cmp.w	r8, #0
 8018206:	d000      	beq.n	801820a <_strtol_l.isra.0+0xe2>
 8018208:	426d      	negs	r5, r5
 801820a:	2a00      	cmp	r2, #0
 801820c:	d0f7      	beq.n	80181fe <_strtol_l.isra.0+0xd6>
 801820e:	b10e      	cbz	r6, 8018214 <_strtol_l.isra.0+0xec>
 8018210:	f10e 31ff 	add.w	r1, lr, #4294967295
 8018214:	6011      	str	r1, [r2, #0]
 8018216:	e7f2      	b.n	80181fe <_strtol_l.isra.0+0xd6>
 8018218:	2430      	movs	r4, #48	; 0x30
 801821a:	2b00      	cmp	r3, #0
 801821c:	d1b3      	bne.n	8018186 <_strtol_l.isra.0+0x5e>
 801821e:	2308      	movs	r3, #8
 8018220:	e7b1      	b.n	8018186 <_strtol_l.isra.0+0x5e>
 8018222:	2c30      	cmp	r4, #48	; 0x30
 8018224:	d0a4      	beq.n	8018170 <_strtol_l.isra.0+0x48>
 8018226:	230a      	movs	r3, #10
 8018228:	e7ad      	b.n	8018186 <_strtol_l.isra.0+0x5e>
 801822a:	bf00      	nop
 801822c:	0801cb81 	.word	0x0801cb81

08018230 <_strtol_r>:
 8018230:	f7ff bf7a 	b.w	8018128 <_strtol_l.isra.0>

08018234 <quorem>:
 8018234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018238:	6903      	ldr	r3, [r0, #16]
 801823a:	690c      	ldr	r4, [r1, #16]
 801823c:	42a3      	cmp	r3, r4
 801823e:	4607      	mov	r7, r0
 8018240:	f2c0 8081 	blt.w	8018346 <quorem+0x112>
 8018244:	3c01      	subs	r4, #1
 8018246:	f101 0814 	add.w	r8, r1, #20
 801824a:	f100 0514 	add.w	r5, r0, #20
 801824e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018252:	9301      	str	r3, [sp, #4]
 8018254:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018258:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801825c:	3301      	adds	r3, #1
 801825e:	429a      	cmp	r2, r3
 8018260:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018264:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018268:	fbb2 f6f3 	udiv	r6, r2, r3
 801826c:	d331      	bcc.n	80182d2 <quorem+0x9e>
 801826e:	f04f 0e00 	mov.w	lr, #0
 8018272:	4640      	mov	r0, r8
 8018274:	46ac      	mov	ip, r5
 8018276:	46f2      	mov	sl, lr
 8018278:	f850 2b04 	ldr.w	r2, [r0], #4
 801827c:	b293      	uxth	r3, r2
 801827e:	fb06 e303 	mla	r3, r6, r3, lr
 8018282:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8018286:	b29b      	uxth	r3, r3
 8018288:	ebaa 0303 	sub.w	r3, sl, r3
 801828c:	0c12      	lsrs	r2, r2, #16
 801828e:	f8dc a000 	ldr.w	sl, [ip]
 8018292:	fb06 e202 	mla	r2, r6, r2, lr
 8018296:	fa13 f38a 	uxtah	r3, r3, sl
 801829a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801829e:	fa1f fa82 	uxth.w	sl, r2
 80182a2:	f8dc 2000 	ldr.w	r2, [ip]
 80182a6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80182aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80182ae:	b29b      	uxth	r3, r3
 80182b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80182b4:	4581      	cmp	r9, r0
 80182b6:	f84c 3b04 	str.w	r3, [ip], #4
 80182ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80182be:	d2db      	bcs.n	8018278 <quorem+0x44>
 80182c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80182c4:	b92b      	cbnz	r3, 80182d2 <quorem+0x9e>
 80182c6:	9b01      	ldr	r3, [sp, #4]
 80182c8:	3b04      	subs	r3, #4
 80182ca:	429d      	cmp	r5, r3
 80182cc:	461a      	mov	r2, r3
 80182ce:	d32e      	bcc.n	801832e <quorem+0xfa>
 80182d0:	613c      	str	r4, [r7, #16]
 80182d2:	4638      	mov	r0, r7
 80182d4:	f001 fc82 	bl	8019bdc <__mcmp>
 80182d8:	2800      	cmp	r0, #0
 80182da:	db24      	blt.n	8018326 <quorem+0xf2>
 80182dc:	3601      	adds	r6, #1
 80182de:	4628      	mov	r0, r5
 80182e0:	f04f 0c00 	mov.w	ip, #0
 80182e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80182e8:	f8d0 e000 	ldr.w	lr, [r0]
 80182ec:	b293      	uxth	r3, r2
 80182ee:	ebac 0303 	sub.w	r3, ip, r3
 80182f2:	0c12      	lsrs	r2, r2, #16
 80182f4:	fa13 f38e 	uxtah	r3, r3, lr
 80182f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80182fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018300:	b29b      	uxth	r3, r3
 8018302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018306:	45c1      	cmp	r9, r8
 8018308:	f840 3b04 	str.w	r3, [r0], #4
 801830c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018310:	d2e8      	bcs.n	80182e4 <quorem+0xb0>
 8018312:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018316:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801831a:	b922      	cbnz	r2, 8018326 <quorem+0xf2>
 801831c:	3b04      	subs	r3, #4
 801831e:	429d      	cmp	r5, r3
 8018320:	461a      	mov	r2, r3
 8018322:	d30a      	bcc.n	801833a <quorem+0x106>
 8018324:	613c      	str	r4, [r7, #16]
 8018326:	4630      	mov	r0, r6
 8018328:	b003      	add	sp, #12
 801832a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801832e:	6812      	ldr	r2, [r2, #0]
 8018330:	3b04      	subs	r3, #4
 8018332:	2a00      	cmp	r2, #0
 8018334:	d1cc      	bne.n	80182d0 <quorem+0x9c>
 8018336:	3c01      	subs	r4, #1
 8018338:	e7c7      	b.n	80182ca <quorem+0x96>
 801833a:	6812      	ldr	r2, [r2, #0]
 801833c:	3b04      	subs	r3, #4
 801833e:	2a00      	cmp	r2, #0
 8018340:	d1f0      	bne.n	8018324 <quorem+0xf0>
 8018342:	3c01      	subs	r4, #1
 8018344:	e7eb      	b.n	801831e <quorem+0xea>
 8018346:	2000      	movs	r0, #0
 8018348:	e7ee      	b.n	8018328 <quorem+0xf4>
 801834a:	0000      	movs	r0, r0
 801834c:	0000      	movs	r0, r0
	...

08018350 <_dtoa_r>:
 8018350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018354:	ed2d 8b02 	vpush	{d8}
 8018358:	ec57 6b10 	vmov	r6, r7, d0
 801835c:	b095      	sub	sp, #84	; 0x54
 801835e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018360:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8018364:	9105      	str	r1, [sp, #20]
 8018366:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801836a:	4604      	mov	r4, r0
 801836c:	9209      	str	r2, [sp, #36]	; 0x24
 801836e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018370:	b975      	cbnz	r5, 8018390 <_dtoa_r+0x40>
 8018372:	2010      	movs	r0, #16
 8018374:	f7fe f8dc 	bl	8016530 <malloc>
 8018378:	4602      	mov	r2, r0
 801837a:	6260      	str	r0, [r4, #36]	; 0x24
 801837c:	b920      	cbnz	r0, 8018388 <_dtoa_r+0x38>
 801837e:	4bb2      	ldr	r3, [pc, #712]	; (8018648 <_dtoa_r+0x2f8>)
 8018380:	21ea      	movs	r1, #234	; 0xea
 8018382:	48b2      	ldr	r0, [pc, #712]	; (801864c <_dtoa_r+0x2fc>)
 8018384:	f001 ffb0 	bl	801a2e8 <__assert_func>
 8018388:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801838c:	6005      	str	r5, [r0, #0]
 801838e:	60c5      	str	r5, [r0, #12]
 8018390:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018392:	6819      	ldr	r1, [r3, #0]
 8018394:	b151      	cbz	r1, 80183ac <_dtoa_r+0x5c>
 8018396:	685a      	ldr	r2, [r3, #4]
 8018398:	604a      	str	r2, [r1, #4]
 801839a:	2301      	movs	r3, #1
 801839c:	4093      	lsls	r3, r2
 801839e:	608b      	str	r3, [r1, #8]
 80183a0:	4620      	mov	r0, r4
 80183a2:	f001 f993 	bl	80196cc <_Bfree>
 80183a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80183a8:	2200      	movs	r2, #0
 80183aa:	601a      	str	r2, [r3, #0]
 80183ac:	1e3b      	subs	r3, r7, #0
 80183ae:	bfb9      	ittee	lt
 80183b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80183b4:	9303      	strlt	r3, [sp, #12]
 80183b6:	2300      	movge	r3, #0
 80183b8:	f8c8 3000 	strge.w	r3, [r8]
 80183bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80183c0:	4ba3      	ldr	r3, [pc, #652]	; (8018650 <_dtoa_r+0x300>)
 80183c2:	bfbc      	itt	lt
 80183c4:	2201      	movlt	r2, #1
 80183c6:	f8c8 2000 	strlt.w	r2, [r8]
 80183ca:	ea33 0309 	bics.w	r3, r3, r9
 80183ce:	d11b      	bne.n	8018408 <_dtoa_r+0xb8>
 80183d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80183d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80183d6:	6013      	str	r3, [r2, #0]
 80183d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80183dc:	4333      	orrs	r3, r6
 80183de:	f000 857a 	beq.w	8018ed6 <_dtoa_r+0xb86>
 80183e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80183e4:	b963      	cbnz	r3, 8018400 <_dtoa_r+0xb0>
 80183e6:	4b9b      	ldr	r3, [pc, #620]	; (8018654 <_dtoa_r+0x304>)
 80183e8:	e024      	b.n	8018434 <_dtoa_r+0xe4>
 80183ea:	4b9b      	ldr	r3, [pc, #620]	; (8018658 <_dtoa_r+0x308>)
 80183ec:	9300      	str	r3, [sp, #0]
 80183ee:	3308      	adds	r3, #8
 80183f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80183f2:	6013      	str	r3, [r2, #0]
 80183f4:	9800      	ldr	r0, [sp, #0]
 80183f6:	b015      	add	sp, #84	; 0x54
 80183f8:	ecbd 8b02 	vpop	{d8}
 80183fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018400:	4b94      	ldr	r3, [pc, #592]	; (8018654 <_dtoa_r+0x304>)
 8018402:	9300      	str	r3, [sp, #0]
 8018404:	3303      	adds	r3, #3
 8018406:	e7f3      	b.n	80183f0 <_dtoa_r+0xa0>
 8018408:	ed9d 7b02 	vldr	d7, [sp, #8]
 801840c:	2200      	movs	r2, #0
 801840e:	ec51 0b17 	vmov	r0, r1, d7
 8018412:	2300      	movs	r3, #0
 8018414:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8018418:	f7e8 fb56 	bl	8000ac8 <__aeabi_dcmpeq>
 801841c:	4680      	mov	r8, r0
 801841e:	b158      	cbz	r0, 8018438 <_dtoa_r+0xe8>
 8018420:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018422:	2301      	movs	r3, #1
 8018424:	6013      	str	r3, [r2, #0]
 8018426:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018428:	2b00      	cmp	r3, #0
 801842a:	f000 8551 	beq.w	8018ed0 <_dtoa_r+0xb80>
 801842e:	488b      	ldr	r0, [pc, #556]	; (801865c <_dtoa_r+0x30c>)
 8018430:	6018      	str	r0, [r3, #0]
 8018432:	1e43      	subs	r3, r0, #1
 8018434:	9300      	str	r3, [sp, #0]
 8018436:	e7dd      	b.n	80183f4 <_dtoa_r+0xa4>
 8018438:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801843c:	aa12      	add	r2, sp, #72	; 0x48
 801843e:	a913      	add	r1, sp, #76	; 0x4c
 8018440:	4620      	mov	r0, r4
 8018442:	f001 fceb 	bl	8019e1c <__d2b>
 8018446:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801844a:	4683      	mov	fp, r0
 801844c:	2d00      	cmp	r5, #0
 801844e:	d07c      	beq.n	801854a <_dtoa_r+0x1fa>
 8018450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018452:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8018456:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801845a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801845e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8018462:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8018466:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801846a:	4b7d      	ldr	r3, [pc, #500]	; (8018660 <_dtoa_r+0x310>)
 801846c:	2200      	movs	r2, #0
 801846e:	4630      	mov	r0, r6
 8018470:	4639      	mov	r1, r7
 8018472:	f7e7 ff09 	bl	8000288 <__aeabi_dsub>
 8018476:	a36e      	add	r3, pc, #440	; (adr r3, 8018630 <_dtoa_r+0x2e0>)
 8018478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801847c:	f7e8 f8bc 	bl	80005f8 <__aeabi_dmul>
 8018480:	a36d      	add	r3, pc, #436	; (adr r3, 8018638 <_dtoa_r+0x2e8>)
 8018482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018486:	f7e7 ff01 	bl	800028c <__adddf3>
 801848a:	4606      	mov	r6, r0
 801848c:	4628      	mov	r0, r5
 801848e:	460f      	mov	r7, r1
 8018490:	f7e8 f848 	bl	8000524 <__aeabi_i2d>
 8018494:	a36a      	add	r3, pc, #424	; (adr r3, 8018640 <_dtoa_r+0x2f0>)
 8018496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801849a:	f7e8 f8ad 	bl	80005f8 <__aeabi_dmul>
 801849e:	4602      	mov	r2, r0
 80184a0:	460b      	mov	r3, r1
 80184a2:	4630      	mov	r0, r6
 80184a4:	4639      	mov	r1, r7
 80184a6:	f7e7 fef1 	bl	800028c <__adddf3>
 80184aa:	4606      	mov	r6, r0
 80184ac:	460f      	mov	r7, r1
 80184ae:	f7e8 fb53 	bl	8000b58 <__aeabi_d2iz>
 80184b2:	2200      	movs	r2, #0
 80184b4:	4682      	mov	sl, r0
 80184b6:	2300      	movs	r3, #0
 80184b8:	4630      	mov	r0, r6
 80184ba:	4639      	mov	r1, r7
 80184bc:	f7e8 fb0e 	bl	8000adc <__aeabi_dcmplt>
 80184c0:	b148      	cbz	r0, 80184d6 <_dtoa_r+0x186>
 80184c2:	4650      	mov	r0, sl
 80184c4:	f7e8 f82e 	bl	8000524 <__aeabi_i2d>
 80184c8:	4632      	mov	r2, r6
 80184ca:	463b      	mov	r3, r7
 80184cc:	f7e8 fafc 	bl	8000ac8 <__aeabi_dcmpeq>
 80184d0:	b908      	cbnz	r0, 80184d6 <_dtoa_r+0x186>
 80184d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80184d6:	f1ba 0f16 	cmp.w	sl, #22
 80184da:	d854      	bhi.n	8018586 <_dtoa_r+0x236>
 80184dc:	4b61      	ldr	r3, [pc, #388]	; (8018664 <_dtoa_r+0x314>)
 80184de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80184e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80184ea:	f7e8 faf7 	bl	8000adc <__aeabi_dcmplt>
 80184ee:	2800      	cmp	r0, #0
 80184f0:	d04b      	beq.n	801858a <_dtoa_r+0x23a>
 80184f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80184f6:	2300      	movs	r3, #0
 80184f8:	930e      	str	r3, [sp, #56]	; 0x38
 80184fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80184fc:	1b5d      	subs	r5, r3, r5
 80184fe:	1e6b      	subs	r3, r5, #1
 8018500:	9304      	str	r3, [sp, #16]
 8018502:	bf43      	ittte	mi
 8018504:	2300      	movmi	r3, #0
 8018506:	f1c5 0801 	rsbmi	r8, r5, #1
 801850a:	9304      	strmi	r3, [sp, #16]
 801850c:	f04f 0800 	movpl.w	r8, #0
 8018510:	f1ba 0f00 	cmp.w	sl, #0
 8018514:	db3b      	blt.n	801858e <_dtoa_r+0x23e>
 8018516:	9b04      	ldr	r3, [sp, #16]
 8018518:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801851c:	4453      	add	r3, sl
 801851e:	9304      	str	r3, [sp, #16]
 8018520:	2300      	movs	r3, #0
 8018522:	9306      	str	r3, [sp, #24]
 8018524:	9b05      	ldr	r3, [sp, #20]
 8018526:	2b09      	cmp	r3, #9
 8018528:	d869      	bhi.n	80185fe <_dtoa_r+0x2ae>
 801852a:	2b05      	cmp	r3, #5
 801852c:	bfc4      	itt	gt
 801852e:	3b04      	subgt	r3, #4
 8018530:	9305      	strgt	r3, [sp, #20]
 8018532:	9b05      	ldr	r3, [sp, #20]
 8018534:	f1a3 0302 	sub.w	r3, r3, #2
 8018538:	bfcc      	ite	gt
 801853a:	2500      	movgt	r5, #0
 801853c:	2501      	movle	r5, #1
 801853e:	2b03      	cmp	r3, #3
 8018540:	d869      	bhi.n	8018616 <_dtoa_r+0x2c6>
 8018542:	e8df f003 	tbb	[pc, r3]
 8018546:	4e2c      	.short	0x4e2c
 8018548:	5a4c      	.short	0x5a4c
 801854a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801854e:	441d      	add	r5, r3
 8018550:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8018554:	2b20      	cmp	r3, #32
 8018556:	bfc1      	itttt	gt
 8018558:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801855c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8018560:	fa09 f303 	lslgt.w	r3, r9, r3
 8018564:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018568:	bfda      	itte	le
 801856a:	f1c3 0320 	rsble	r3, r3, #32
 801856e:	fa06 f003 	lslle.w	r0, r6, r3
 8018572:	4318      	orrgt	r0, r3
 8018574:	f7e7 ffc6 	bl	8000504 <__aeabi_ui2d>
 8018578:	2301      	movs	r3, #1
 801857a:	4606      	mov	r6, r0
 801857c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8018580:	3d01      	subs	r5, #1
 8018582:	9310      	str	r3, [sp, #64]	; 0x40
 8018584:	e771      	b.n	801846a <_dtoa_r+0x11a>
 8018586:	2301      	movs	r3, #1
 8018588:	e7b6      	b.n	80184f8 <_dtoa_r+0x1a8>
 801858a:	900e      	str	r0, [sp, #56]	; 0x38
 801858c:	e7b5      	b.n	80184fa <_dtoa_r+0x1aa>
 801858e:	f1ca 0300 	rsb	r3, sl, #0
 8018592:	9306      	str	r3, [sp, #24]
 8018594:	2300      	movs	r3, #0
 8018596:	eba8 080a 	sub.w	r8, r8, sl
 801859a:	930d      	str	r3, [sp, #52]	; 0x34
 801859c:	e7c2      	b.n	8018524 <_dtoa_r+0x1d4>
 801859e:	2300      	movs	r3, #0
 80185a0:	9308      	str	r3, [sp, #32]
 80185a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	dc39      	bgt.n	801861c <_dtoa_r+0x2cc>
 80185a8:	f04f 0901 	mov.w	r9, #1
 80185ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80185b0:	464b      	mov	r3, r9
 80185b2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80185b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80185b8:	2200      	movs	r2, #0
 80185ba:	6042      	str	r2, [r0, #4]
 80185bc:	2204      	movs	r2, #4
 80185be:	f102 0614 	add.w	r6, r2, #20
 80185c2:	429e      	cmp	r6, r3
 80185c4:	6841      	ldr	r1, [r0, #4]
 80185c6:	d92f      	bls.n	8018628 <_dtoa_r+0x2d8>
 80185c8:	4620      	mov	r0, r4
 80185ca:	f001 f83f 	bl	801964c <_Balloc>
 80185ce:	9000      	str	r0, [sp, #0]
 80185d0:	2800      	cmp	r0, #0
 80185d2:	d14b      	bne.n	801866c <_dtoa_r+0x31c>
 80185d4:	4b24      	ldr	r3, [pc, #144]	; (8018668 <_dtoa_r+0x318>)
 80185d6:	4602      	mov	r2, r0
 80185d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80185dc:	e6d1      	b.n	8018382 <_dtoa_r+0x32>
 80185de:	2301      	movs	r3, #1
 80185e0:	e7de      	b.n	80185a0 <_dtoa_r+0x250>
 80185e2:	2300      	movs	r3, #0
 80185e4:	9308      	str	r3, [sp, #32]
 80185e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185e8:	eb0a 0903 	add.w	r9, sl, r3
 80185ec:	f109 0301 	add.w	r3, r9, #1
 80185f0:	2b01      	cmp	r3, #1
 80185f2:	9301      	str	r3, [sp, #4]
 80185f4:	bfb8      	it	lt
 80185f6:	2301      	movlt	r3, #1
 80185f8:	e7dd      	b.n	80185b6 <_dtoa_r+0x266>
 80185fa:	2301      	movs	r3, #1
 80185fc:	e7f2      	b.n	80185e4 <_dtoa_r+0x294>
 80185fe:	2501      	movs	r5, #1
 8018600:	2300      	movs	r3, #0
 8018602:	9305      	str	r3, [sp, #20]
 8018604:	9508      	str	r5, [sp, #32]
 8018606:	f04f 39ff 	mov.w	r9, #4294967295
 801860a:	2200      	movs	r2, #0
 801860c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018610:	2312      	movs	r3, #18
 8018612:	9209      	str	r2, [sp, #36]	; 0x24
 8018614:	e7cf      	b.n	80185b6 <_dtoa_r+0x266>
 8018616:	2301      	movs	r3, #1
 8018618:	9308      	str	r3, [sp, #32]
 801861a:	e7f4      	b.n	8018606 <_dtoa_r+0x2b6>
 801861c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018620:	f8cd 9004 	str.w	r9, [sp, #4]
 8018624:	464b      	mov	r3, r9
 8018626:	e7c6      	b.n	80185b6 <_dtoa_r+0x266>
 8018628:	3101      	adds	r1, #1
 801862a:	6041      	str	r1, [r0, #4]
 801862c:	0052      	lsls	r2, r2, #1
 801862e:	e7c6      	b.n	80185be <_dtoa_r+0x26e>
 8018630:	636f4361 	.word	0x636f4361
 8018634:	3fd287a7 	.word	0x3fd287a7
 8018638:	8b60c8b3 	.word	0x8b60c8b3
 801863c:	3fc68a28 	.word	0x3fc68a28
 8018640:	509f79fb 	.word	0x509f79fb
 8018644:	3fd34413 	.word	0x3fd34413
 8018648:	0801cc8e 	.word	0x0801cc8e
 801864c:	0801cca5 	.word	0x0801cca5
 8018650:	7ff00000 	.word	0x7ff00000
 8018654:	0801cc8a 	.word	0x0801cc8a
 8018658:	0801cc81 	.word	0x0801cc81
 801865c:	0801cb05 	.word	0x0801cb05
 8018660:	3ff80000 	.word	0x3ff80000
 8018664:	0801ce20 	.word	0x0801ce20
 8018668:	0801cd04 	.word	0x0801cd04
 801866c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801866e:	9a00      	ldr	r2, [sp, #0]
 8018670:	601a      	str	r2, [r3, #0]
 8018672:	9b01      	ldr	r3, [sp, #4]
 8018674:	2b0e      	cmp	r3, #14
 8018676:	f200 80ad 	bhi.w	80187d4 <_dtoa_r+0x484>
 801867a:	2d00      	cmp	r5, #0
 801867c:	f000 80aa 	beq.w	80187d4 <_dtoa_r+0x484>
 8018680:	f1ba 0f00 	cmp.w	sl, #0
 8018684:	dd36      	ble.n	80186f4 <_dtoa_r+0x3a4>
 8018686:	4ac3      	ldr	r2, [pc, #780]	; (8018994 <_dtoa_r+0x644>)
 8018688:	f00a 030f 	and.w	r3, sl, #15
 801868c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018690:	ed93 7b00 	vldr	d7, [r3]
 8018694:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8018698:	ea4f 172a 	mov.w	r7, sl, asr #4
 801869c:	eeb0 8a47 	vmov.f32	s16, s14
 80186a0:	eef0 8a67 	vmov.f32	s17, s15
 80186a4:	d016      	beq.n	80186d4 <_dtoa_r+0x384>
 80186a6:	4bbc      	ldr	r3, [pc, #752]	; (8018998 <_dtoa_r+0x648>)
 80186a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80186ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80186b0:	f7e8 f8cc 	bl	800084c <__aeabi_ddiv>
 80186b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80186b8:	f007 070f 	and.w	r7, r7, #15
 80186bc:	2503      	movs	r5, #3
 80186be:	4eb6      	ldr	r6, [pc, #728]	; (8018998 <_dtoa_r+0x648>)
 80186c0:	b957      	cbnz	r7, 80186d8 <_dtoa_r+0x388>
 80186c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80186c6:	ec53 2b18 	vmov	r2, r3, d8
 80186ca:	f7e8 f8bf 	bl	800084c <__aeabi_ddiv>
 80186ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80186d2:	e029      	b.n	8018728 <_dtoa_r+0x3d8>
 80186d4:	2502      	movs	r5, #2
 80186d6:	e7f2      	b.n	80186be <_dtoa_r+0x36e>
 80186d8:	07f9      	lsls	r1, r7, #31
 80186da:	d508      	bpl.n	80186ee <_dtoa_r+0x39e>
 80186dc:	ec51 0b18 	vmov	r0, r1, d8
 80186e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80186e4:	f7e7 ff88 	bl	80005f8 <__aeabi_dmul>
 80186e8:	ec41 0b18 	vmov	d8, r0, r1
 80186ec:	3501      	adds	r5, #1
 80186ee:	107f      	asrs	r7, r7, #1
 80186f0:	3608      	adds	r6, #8
 80186f2:	e7e5      	b.n	80186c0 <_dtoa_r+0x370>
 80186f4:	f000 80a6 	beq.w	8018844 <_dtoa_r+0x4f4>
 80186f8:	f1ca 0600 	rsb	r6, sl, #0
 80186fc:	4ba5      	ldr	r3, [pc, #660]	; (8018994 <_dtoa_r+0x644>)
 80186fe:	4fa6      	ldr	r7, [pc, #664]	; (8018998 <_dtoa_r+0x648>)
 8018700:	f006 020f 	and.w	r2, r6, #15
 8018704:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801870c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018710:	f7e7 ff72 	bl	80005f8 <__aeabi_dmul>
 8018714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018718:	1136      	asrs	r6, r6, #4
 801871a:	2300      	movs	r3, #0
 801871c:	2502      	movs	r5, #2
 801871e:	2e00      	cmp	r6, #0
 8018720:	f040 8085 	bne.w	801882e <_dtoa_r+0x4de>
 8018724:	2b00      	cmp	r3, #0
 8018726:	d1d2      	bne.n	80186ce <_dtoa_r+0x37e>
 8018728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801872a:	2b00      	cmp	r3, #0
 801872c:	f000 808c 	beq.w	8018848 <_dtoa_r+0x4f8>
 8018730:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018734:	4b99      	ldr	r3, [pc, #612]	; (801899c <_dtoa_r+0x64c>)
 8018736:	2200      	movs	r2, #0
 8018738:	4630      	mov	r0, r6
 801873a:	4639      	mov	r1, r7
 801873c:	f7e8 f9ce 	bl	8000adc <__aeabi_dcmplt>
 8018740:	2800      	cmp	r0, #0
 8018742:	f000 8081 	beq.w	8018848 <_dtoa_r+0x4f8>
 8018746:	9b01      	ldr	r3, [sp, #4]
 8018748:	2b00      	cmp	r3, #0
 801874a:	d07d      	beq.n	8018848 <_dtoa_r+0x4f8>
 801874c:	f1b9 0f00 	cmp.w	r9, #0
 8018750:	dd3c      	ble.n	80187cc <_dtoa_r+0x47c>
 8018752:	f10a 33ff 	add.w	r3, sl, #4294967295
 8018756:	9307      	str	r3, [sp, #28]
 8018758:	2200      	movs	r2, #0
 801875a:	4b91      	ldr	r3, [pc, #580]	; (80189a0 <_dtoa_r+0x650>)
 801875c:	4630      	mov	r0, r6
 801875e:	4639      	mov	r1, r7
 8018760:	f7e7 ff4a 	bl	80005f8 <__aeabi_dmul>
 8018764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018768:	3501      	adds	r5, #1
 801876a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801876e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018772:	4628      	mov	r0, r5
 8018774:	f7e7 fed6 	bl	8000524 <__aeabi_i2d>
 8018778:	4632      	mov	r2, r6
 801877a:	463b      	mov	r3, r7
 801877c:	f7e7 ff3c 	bl	80005f8 <__aeabi_dmul>
 8018780:	4b88      	ldr	r3, [pc, #544]	; (80189a4 <_dtoa_r+0x654>)
 8018782:	2200      	movs	r2, #0
 8018784:	f7e7 fd82 	bl	800028c <__adddf3>
 8018788:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801878c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018790:	9303      	str	r3, [sp, #12]
 8018792:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018794:	2b00      	cmp	r3, #0
 8018796:	d15c      	bne.n	8018852 <_dtoa_r+0x502>
 8018798:	4b83      	ldr	r3, [pc, #524]	; (80189a8 <_dtoa_r+0x658>)
 801879a:	2200      	movs	r2, #0
 801879c:	4630      	mov	r0, r6
 801879e:	4639      	mov	r1, r7
 80187a0:	f7e7 fd72 	bl	8000288 <__aeabi_dsub>
 80187a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80187a8:	4606      	mov	r6, r0
 80187aa:	460f      	mov	r7, r1
 80187ac:	f7e8 f9b4 	bl	8000b18 <__aeabi_dcmpgt>
 80187b0:	2800      	cmp	r0, #0
 80187b2:	f040 8296 	bne.w	8018ce2 <_dtoa_r+0x992>
 80187b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80187ba:	4630      	mov	r0, r6
 80187bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80187c0:	4639      	mov	r1, r7
 80187c2:	f7e8 f98b 	bl	8000adc <__aeabi_dcmplt>
 80187c6:	2800      	cmp	r0, #0
 80187c8:	f040 8288 	bne.w	8018cdc <_dtoa_r+0x98c>
 80187cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80187d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80187d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	f2c0 8158 	blt.w	8018a8c <_dtoa_r+0x73c>
 80187dc:	f1ba 0f0e 	cmp.w	sl, #14
 80187e0:	f300 8154 	bgt.w	8018a8c <_dtoa_r+0x73c>
 80187e4:	4b6b      	ldr	r3, [pc, #428]	; (8018994 <_dtoa_r+0x644>)
 80187e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80187ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80187ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	f280 80e3 	bge.w	80189bc <_dtoa_r+0x66c>
 80187f6:	9b01      	ldr	r3, [sp, #4]
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	f300 80df 	bgt.w	80189bc <_dtoa_r+0x66c>
 80187fe:	f040 826d 	bne.w	8018cdc <_dtoa_r+0x98c>
 8018802:	4b69      	ldr	r3, [pc, #420]	; (80189a8 <_dtoa_r+0x658>)
 8018804:	2200      	movs	r2, #0
 8018806:	4640      	mov	r0, r8
 8018808:	4649      	mov	r1, r9
 801880a:	f7e7 fef5 	bl	80005f8 <__aeabi_dmul>
 801880e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018812:	f7e8 f977 	bl	8000b04 <__aeabi_dcmpge>
 8018816:	9e01      	ldr	r6, [sp, #4]
 8018818:	4637      	mov	r7, r6
 801881a:	2800      	cmp	r0, #0
 801881c:	f040 8243 	bne.w	8018ca6 <_dtoa_r+0x956>
 8018820:	9d00      	ldr	r5, [sp, #0]
 8018822:	2331      	movs	r3, #49	; 0x31
 8018824:	f805 3b01 	strb.w	r3, [r5], #1
 8018828:	f10a 0a01 	add.w	sl, sl, #1
 801882c:	e23f      	b.n	8018cae <_dtoa_r+0x95e>
 801882e:	07f2      	lsls	r2, r6, #31
 8018830:	d505      	bpl.n	801883e <_dtoa_r+0x4ee>
 8018832:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018836:	f7e7 fedf 	bl	80005f8 <__aeabi_dmul>
 801883a:	3501      	adds	r5, #1
 801883c:	2301      	movs	r3, #1
 801883e:	1076      	asrs	r6, r6, #1
 8018840:	3708      	adds	r7, #8
 8018842:	e76c      	b.n	801871e <_dtoa_r+0x3ce>
 8018844:	2502      	movs	r5, #2
 8018846:	e76f      	b.n	8018728 <_dtoa_r+0x3d8>
 8018848:	9b01      	ldr	r3, [sp, #4]
 801884a:	f8cd a01c 	str.w	sl, [sp, #28]
 801884e:	930c      	str	r3, [sp, #48]	; 0x30
 8018850:	e78d      	b.n	801876e <_dtoa_r+0x41e>
 8018852:	9900      	ldr	r1, [sp, #0]
 8018854:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018856:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018858:	4b4e      	ldr	r3, [pc, #312]	; (8018994 <_dtoa_r+0x644>)
 801885a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801885e:	4401      	add	r1, r0
 8018860:	9102      	str	r1, [sp, #8]
 8018862:	9908      	ldr	r1, [sp, #32]
 8018864:	eeb0 8a47 	vmov.f32	s16, s14
 8018868:	eef0 8a67 	vmov.f32	s17, s15
 801886c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018870:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018874:	2900      	cmp	r1, #0
 8018876:	d045      	beq.n	8018904 <_dtoa_r+0x5b4>
 8018878:	494c      	ldr	r1, [pc, #304]	; (80189ac <_dtoa_r+0x65c>)
 801887a:	2000      	movs	r0, #0
 801887c:	f7e7 ffe6 	bl	800084c <__aeabi_ddiv>
 8018880:	ec53 2b18 	vmov	r2, r3, d8
 8018884:	f7e7 fd00 	bl	8000288 <__aeabi_dsub>
 8018888:	9d00      	ldr	r5, [sp, #0]
 801888a:	ec41 0b18 	vmov	d8, r0, r1
 801888e:	4639      	mov	r1, r7
 8018890:	4630      	mov	r0, r6
 8018892:	f7e8 f961 	bl	8000b58 <__aeabi_d2iz>
 8018896:	900c      	str	r0, [sp, #48]	; 0x30
 8018898:	f7e7 fe44 	bl	8000524 <__aeabi_i2d>
 801889c:	4602      	mov	r2, r0
 801889e:	460b      	mov	r3, r1
 80188a0:	4630      	mov	r0, r6
 80188a2:	4639      	mov	r1, r7
 80188a4:	f7e7 fcf0 	bl	8000288 <__aeabi_dsub>
 80188a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80188aa:	3330      	adds	r3, #48	; 0x30
 80188ac:	f805 3b01 	strb.w	r3, [r5], #1
 80188b0:	ec53 2b18 	vmov	r2, r3, d8
 80188b4:	4606      	mov	r6, r0
 80188b6:	460f      	mov	r7, r1
 80188b8:	f7e8 f910 	bl	8000adc <__aeabi_dcmplt>
 80188bc:	2800      	cmp	r0, #0
 80188be:	d165      	bne.n	801898c <_dtoa_r+0x63c>
 80188c0:	4632      	mov	r2, r6
 80188c2:	463b      	mov	r3, r7
 80188c4:	4935      	ldr	r1, [pc, #212]	; (801899c <_dtoa_r+0x64c>)
 80188c6:	2000      	movs	r0, #0
 80188c8:	f7e7 fcde 	bl	8000288 <__aeabi_dsub>
 80188cc:	ec53 2b18 	vmov	r2, r3, d8
 80188d0:	f7e8 f904 	bl	8000adc <__aeabi_dcmplt>
 80188d4:	2800      	cmp	r0, #0
 80188d6:	f040 80b9 	bne.w	8018a4c <_dtoa_r+0x6fc>
 80188da:	9b02      	ldr	r3, [sp, #8]
 80188dc:	429d      	cmp	r5, r3
 80188de:	f43f af75 	beq.w	80187cc <_dtoa_r+0x47c>
 80188e2:	4b2f      	ldr	r3, [pc, #188]	; (80189a0 <_dtoa_r+0x650>)
 80188e4:	ec51 0b18 	vmov	r0, r1, d8
 80188e8:	2200      	movs	r2, #0
 80188ea:	f7e7 fe85 	bl	80005f8 <__aeabi_dmul>
 80188ee:	4b2c      	ldr	r3, [pc, #176]	; (80189a0 <_dtoa_r+0x650>)
 80188f0:	ec41 0b18 	vmov	d8, r0, r1
 80188f4:	2200      	movs	r2, #0
 80188f6:	4630      	mov	r0, r6
 80188f8:	4639      	mov	r1, r7
 80188fa:	f7e7 fe7d 	bl	80005f8 <__aeabi_dmul>
 80188fe:	4606      	mov	r6, r0
 8018900:	460f      	mov	r7, r1
 8018902:	e7c4      	b.n	801888e <_dtoa_r+0x53e>
 8018904:	ec51 0b17 	vmov	r0, r1, d7
 8018908:	f7e7 fe76 	bl	80005f8 <__aeabi_dmul>
 801890c:	9b02      	ldr	r3, [sp, #8]
 801890e:	9d00      	ldr	r5, [sp, #0]
 8018910:	930c      	str	r3, [sp, #48]	; 0x30
 8018912:	ec41 0b18 	vmov	d8, r0, r1
 8018916:	4639      	mov	r1, r7
 8018918:	4630      	mov	r0, r6
 801891a:	f7e8 f91d 	bl	8000b58 <__aeabi_d2iz>
 801891e:	9011      	str	r0, [sp, #68]	; 0x44
 8018920:	f7e7 fe00 	bl	8000524 <__aeabi_i2d>
 8018924:	4602      	mov	r2, r0
 8018926:	460b      	mov	r3, r1
 8018928:	4630      	mov	r0, r6
 801892a:	4639      	mov	r1, r7
 801892c:	f7e7 fcac 	bl	8000288 <__aeabi_dsub>
 8018930:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018932:	3330      	adds	r3, #48	; 0x30
 8018934:	f805 3b01 	strb.w	r3, [r5], #1
 8018938:	9b02      	ldr	r3, [sp, #8]
 801893a:	429d      	cmp	r5, r3
 801893c:	4606      	mov	r6, r0
 801893e:	460f      	mov	r7, r1
 8018940:	f04f 0200 	mov.w	r2, #0
 8018944:	d134      	bne.n	80189b0 <_dtoa_r+0x660>
 8018946:	4b19      	ldr	r3, [pc, #100]	; (80189ac <_dtoa_r+0x65c>)
 8018948:	ec51 0b18 	vmov	r0, r1, d8
 801894c:	f7e7 fc9e 	bl	800028c <__adddf3>
 8018950:	4602      	mov	r2, r0
 8018952:	460b      	mov	r3, r1
 8018954:	4630      	mov	r0, r6
 8018956:	4639      	mov	r1, r7
 8018958:	f7e8 f8de 	bl	8000b18 <__aeabi_dcmpgt>
 801895c:	2800      	cmp	r0, #0
 801895e:	d175      	bne.n	8018a4c <_dtoa_r+0x6fc>
 8018960:	ec53 2b18 	vmov	r2, r3, d8
 8018964:	4911      	ldr	r1, [pc, #68]	; (80189ac <_dtoa_r+0x65c>)
 8018966:	2000      	movs	r0, #0
 8018968:	f7e7 fc8e 	bl	8000288 <__aeabi_dsub>
 801896c:	4602      	mov	r2, r0
 801896e:	460b      	mov	r3, r1
 8018970:	4630      	mov	r0, r6
 8018972:	4639      	mov	r1, r7
 8018974:	f7e8 f8b2 	bl	8000adc <__aeabi_dcmplt>
 8018978:	2800      	cmp	r0, #0
 801897a:	f43f af27 	beq.w	80187cc <_dtoa_r+0x47c>
 801897e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018980:	1e6b      	subs	r3, r5, #1
 8018982:	930c      	str	r3, [sp, #48]	; 0x30
 8018984:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018988:	2b30      	cmp	r3, #48	; 0x30
 801898a:	d0f8      	beq.n	801897e <_dtoa_r+0x62e>
 801898c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018990:	e04a      	b.n	8018a28 <_dtoa_r+0x6d8>
 8018992:	bf00      	nop
 8018994:	0801ce20 	.word	0x0801ce20
 8018998:	0801cdf8 	.word	0x0801cdf8
 801899c:	3ff00000 	.word	0x3ff00000
 80189a0:	40240000 	.word	0x40240000
 80189a4:	401c0000 	.word	0x401c0000
 80189a8:	40140000 	.word	0x40140000
 80189ac:	3fe00000 	.word	0x3fe00000
 80189b0:	4baf      	ldr	r3, [pc, #700]	; (8018c70 <_dtoa_r+0x920>)
 80189b2:	f7e7 fe21 	bl	80005f8 <__aeabi_dmul>
 80189b6:	4606      	mov	r6, r0
 80189b8:	460f      	mov	r7, r1
 80189ba:	e7ac      	b.n	8018916 <_dtoa_r+0x5c6>
 80189bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80189c0:	9d00      	ldr	r5, [sp, #0]
 80189c2:	4642      	mov	r2, r8
 80189c4:	464b      	mov	r3, r9
 80189c6:	4630      	mov	r0, r6
 80189c8:	4639      	mov	r1, r7
 80189ca:	f7e7 ff3f 	bl	800084c <__aeabi_ddiv>
 80189ce:	f7e8 f8c3 	bl	8000b58 <__aeabi_d2iz>
 80189d2:	9002      	str	r0, [sp, #8]
 80189d4:	f7e7 fda6 	bl	8000524 <__aeabi_i2d>
 80189d8:	4642      	mov	r2, r8
 80189da:	464b      	mov	r3, r9
 80189dc:	f7e7 fe0c 	bl	80005f8 <__aeabi_dmul>
 80189e0:	4602      	mov	r2, r0
 80189e2:	460b      	mov	r3, r1
 80189e4:	4630      	mov	r0, r6
 80189e6:	4639      	mov	r1, r7
 80189e8:	f7e7 fc4e 	bl	8000288 <__aeabi_dsub>
 80189ec:	9e02      	ldr	r6, [sp, #8]
 80189ee:	9f01      	ldr	r7, [sp, #4]
 80189f0:	3630      	adds	r6, #48	; 0x30
 80189f2:	f805 6b01 	strb.w	r6, [r5], #1
 80189f6:	9e00      	ldr	r6, [sp, #0]
 80189f8:	1bae      	subs	r6, r5, r6
 80189fa:	42b7      	cmp	r7, r6
 80189fc:	4602      	mov	r2, r0
 80189fe:	460b      	mov	r3, r1
 8018a00:	d137      	bne.n	8018a72 <_dtoa_r+0x722>
 8018a02:	f7e7 fc43 	bl	800028c <__adddf3>
 8018a06:	4642      	mov	r2, r8
 8018a08:	464b      	mov	r3, r9
 8018a0a:	4606      	mov	r6, r0
 8018a0c:	460f      	mov	r7, r1
 8018a0e:	f7e8 f883 	bl	8000b18 <__aeabi_dcmpgt>
 8018a12:	b9c8      	cbnz	r0, 8018a48 <_dtoa_r+0x6f8>
 8018a14:	4642      	mov	r2, r8
 8018a16:	464b      	mov	r3, r9
 8018a18:	4630      	mov	r0, r6
 8018a1a:	4639      	mov	r1, r7
 8018a1c:	f7e8 f854 	bl	8000ac8 <__aeabi_dcmpeq>
 8018a20:	b110      	cbz	r0, 8018a28 <_dtoa_r+0x6d8>
 8018a22:	9b02      	ldr	r3, [sp, #8]
 8018a24:	07d9      	lsls	r1, r3, #31
 8018a26:	d40f      	bmi.n	8018a48 <_dtoa_r+0x6f8>
 8018a28:	4620      	mov	r0, r4
 8018a2a:	4659      	mov	r1, fp
 8018a2c:	f000 fe4e 	bl	80196cc <_Bfree>
 8018a30:	2300      	movs	r3, #0
 8018a32:	702b      	strb	r3, [r5, #0]
 8018a34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018a36:	f10a 0001 	add.w	r0, sl, #1
 8018a3a:	6018      	str	r0, [r3, #0]
 8018a3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	f43f acd8 	beq.w	80183f4 <_dtoa_r+0xa4>
 8018a44:	601d      	str	r5, [r3, #0]
 8018a46:	e4d5      	b.n	80183f4 <_dtoa_r+0xa4>
 8018a48:	f8cd a01c 	str.w	sl, [sp, #28]
 8018a4c:	462b      	mov	r3, r5
 8018a4e:	461d      	mov	r5, r3
 8018a50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018a54:	2a39      	cmp	r2, #57	; 0x39
 8018a56:	d108      	bne.n	8018a6a <_dtoa_r+0x71a>
 8018a58:	9a00      	ldr	r2, [sp, #0]
 8018a5a:	429a      	cmp	r2, r3
 8018a5c:	d1f7      	bne.n	8018a4e <_dtoa_r+0x6fe>
 8018a5e:	9a07      	ldr	r2, [sp, #28]
 8018a60:	9900      	ldr	r1, [sp, #0]
 8018a62:	3201      	adds	r2, #1
 8018a64:	9207      	str	r2, [sp, #28]
 8018a66:	2230      	movs	r2, #48	; 0x30
 8018a68:	700a      	strb	r2, [r1, #0]
 8018a6a:	781a      	ldrb	r2, [r3, #0]
 8018a6c:	3201      	adds	r2, #1
 8018a6e:	701a      	strb	r2, [r3, #0]
 8018a70:	e78c      	b.n	801898c <_dtoa_r+0x63c>
 8018a72:	4b7f      	ldr	r3, [pc, #508]	; (8018c70 <_dtoa_r+0x920>)
 8018a74:	2200      	movs	r2, #0
 8018a76:	f7e7 fdbf 	bl	80005f8 <__aeabi_dmul>
 8018a7a:	2200      	movs	r2, #0
 8018a7c:	2300      	movs	r3, #0
 8018a7e:	4606      	mov	r6, r0
 8018a80:	460f      	mov	r7, r1
 8018a82:	f7e8 f821 	bl	8000ac8 <__aeabi_dcmpeq>
 8018a86:	2800      	cmp	r0, #0
 8018a88:	d09b      	beq.n	80189c2 <_dtoa_r+0x672>
 8018a8a:	e7cd      	b.n	8018a28 <_dtoa_r+0x6d8>
 8018a8c:	9a08      	ldr	r2, [sp, #32]
 8018a8e:	2a00      	cmp	r2, #0
 8018a90:	f000 80c4 	beq.w	8018c1c <_dtoa_r+0x8cc>
 8018a94:	9a05      	ldr	r2, [sp, #20]
 8018a96:	2a01      	cmp	r2, #1
 8018a98:	f300 80a8 	bgt.w	8018bec <_dtoa_r+0x89c>
 8018a9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018a9e:	2a00      	cmp	r2, #0
 8018aa0:	f000 80a0 	beq.w	8018be4 <_dtoa_r+0x894>
 8018aa4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018aa8:	9e06      	ldr	r6, [sp, #24]
 8018aaa:	4645      	mov	r5, r8
 8018aac:	9a04      	ldr	r2, [sp, #16]
 8018aae:	2101      	movs	r1, #1
 8018ab0:	441a      	add	r2, r3
 8018ab2:	4620      	mov	r0, r4
 8018ab4:	4498      	add	r8, r3
 8018ab6:	9204      	str	r2, [sp, #16]
 8018ab8:	f000 ff0e 	bl	80198d8 <__i2b>
 8018abc:	4607      	mov	r7, r0
 8018abe:	2d00      	cmp	r5, #0
 8018ac0:	dd0b      	ble.n	8018ada <_dtoa_r+0x78a>
 8018ac2:	9b04      	ldr	r3, [sp, #16]
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	dd08      	ble.n	8018ada <_dtoa_r+0x78a>
 8018ac8:	42ab      	cmp	r3, r5
 8018aca:	9a04      	ldr	r2, [sp, #16]
 8018acc:	bfa8      	it	ge
 8018ace:	462b      	movge	r3, r5
 8018ad0:	eba8 0803 	sub.w	r8, r8, r3
 8018ad4:	1aed      	subs	r5, r5, r3
 8018ad6:	1ad3      	subs	r3, r2, r3
 8018ad8:	9304      	str	r3, [sp, #16]
 8018ada:	9b06      	ldr	r3, [sp, #24]
 8018adc:	b1fb      	cbz	r3, 8018b1e <_dtoa_r+0x7ce>
 8018ade:	9b08      	ldr	r3, [sp, #32]
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	f000 809f 	beq.w	8018c24 <_dtoa_r+0x8d4>
 8018ae6:	2e00      	cmp	r6, #0
 8018ae8:	dd11      	ble.n	8018b0e <_dtoa_r+0x7be>
 8018aea:	4639      	mov	r1, r7
 8018aec:	4632      	mov	r2, r6
 8018aee:	4620      	mov	r0, r4
 8018af0:	f000 ffae 	bl	8019a50 <__pow5mult>
 8018af4:	465a      	mov	r2, fp
 8018af6:	4601      	mov	r1, r0
 8018af8:	4607      	mov	r7, r0
 8018afa:	4620      	mov	r0, r4
 8018afc:	f000 ff02 	bl	8019904 <__multiply>
 8018b00:	4659      	mov	r1, fp
 8018b02:	9007      	str	r0, [sp, #28]
 8018b04:	4620      	mov	r0, r4
 8018b06:	f000 fde1 	bl	80196cc <_Bfree>
 8018b0a:	9b07      	ldr	r3, [sp, #28]
 8018b0c:	469b      	mov	fp, r3
 8018b0e:	9b06      	ldr	r3, [sp, #24]
 8018b10:	1b9a      	subs	r2, r3, r6
 8018b12:	d004      	beq.n	8018b1e <_dtoa_r+0x7ce>
 8018b14:	4659      	mov	r1, fp
 8018b16:	4620      	mov	r0, r4
 8018b18:	f000 ff9a 	bl	8019a50 <__pow5mult>
 8018b1c:	4683      	mov	fp, r0
 8018b1e:	2101      	movs	r1, #1
 8018b20:	4620      	mov	r0, r4
 8018b22:	f000 fed9 	bl	80198d8 <__i2b>
 8018b26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	4606      	mov	r6, r0
 8018b2c:	dd7c      	ble.n	8018c28 <_dtoa_r+0x8d8>
 8018b2e:	461a      	mov	r2, r3
 8018b30:	4601      	mov	r1, r0
 8018b32:	4620      	mov	r0, r4
 8018b34:	f000 ff8c 	bl	8019a50 <__pow5mult>
 8018b38:	9b05      	ldr	r3, [sp, #20]
 8018b3a:	2b01      	cmp	r3, #1
 8018b3c:	4606      	mov	r6, r0
 8018b3e:	dd76      	ble.n	8018c2e <_dtoa_r+0x8de>
 8018b40:	2300      	movs	r3, #0
 8018b42:	9306      	str	r3, [sp, #24]
 8018b44:	6933      	ldr	r3, [r6, #16]
 8018b46:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018b4a:	6918      	ldr	r0, [r3, #16]
 8018b4c:	f000 fe74 	bl	8019838 <__hi0bits>
 8018b50:	f1c0 0020 	rsb	r0, r0, #32
 8018b54:	9b04      	ldr	r3, [sp, #16]
 8018b56:	4418      	add	r0, r3
 8018b58:	f010 001f 	ands.w	r0, r0, #31
 8018b5c:	f000 8086 	beq.w	8018c6c <_dtoa_r+0x91c>
 8018b60:	f1c0 0320 	rsb	r3, r0, #32
 8018b64:	2b04      	cmp	r3, #4
 8018b66:	dd7f      	ble.n	8018c68 <_dtoa_r+0x918>
 8018b68:	f1c0 001c 	rsb	r0, r0, #28
 8018b6c:	9b04      	ldr	r3, [sp, #16]
 8018b6e:	4403      	add	r3, r0
 8018b70:	4480      	add	r8, r0
 8018b72:	4405      	add	r5, r0
 8018b74:	9304      	str	r3, [sp, #16]
 8018b76:	f1b8 0f00 	cmp.w	r8, #0
 8018b7a:	dd05      	ble.n	8018b88 <_dtoa_r+0x838>
 8018b7c:	4659      	mov	r1, fp
 8018b7e:	4642      	mov	r2, r8
 8018b80:	4620      	mov	r0, r4
 8018b82:	f000 ffbf 	bl	8019b04 <__lshift>
 8018b86:	4683      	mov	fp, r0
 8018b88:	9b04      	ldr	r3, [sp, #16]
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	dd05      	ble.n	8018b9a <_dtoa_r+0x84a>
 8018b8e:	4631      	mov	r1, r6
 8018b90:	461a      	mov	r2, r3
 8018b92:	4620      	mov	r0, r4
 8018b94:	f000 ffb6 	bl	8019b04 <__lshift>
 8018b98:	4606      	mov	r6, r0
 8018b9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d069      	beq.n	8018c74 <_dtoa_r+0x924>
 8018ba0:	4631      	mov	r1, r6
 8018ba2:	4658      	mov	r0, fp
 8018ba4:	f001 f81a 	bl	8019bdc <__mcmp>
 8018ba8:	2800      	cmp	r0, #0
 8018baa:	da63      	bge.n	8018c74 <_dtoa_r+0x924>
 8018bac:	2300      	movs	r3, #0
 8018bae:	4659      	mov	r1, fp
 8018bb0:	220a      	movs	r2, #10
 8018bb2:	4620      	mov	r0, r4
 8018bb4:	f000 fdac 	bl	8019710 <__multadd>
 8018bb8:	9b08      	ldr	r3, [sp, #32]
 8018bba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018bbe:	4683      	mov	fp, r0
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	f000 818f 	beq.w	8018ee4 <_dtoa_r+0xb94>
 8018bc6:	4639      	mov	r1, r7
 8018bc8:	2300      	movs	r3, #0
 8018bca:	220a      	movs	r2, #10
 8018bcc:	4620      	mov	r0, r4
 8018bce:	f000 fd9f 	bl	8019710 <__multadd>
 8018bd2:	f1b9 0f00 	cmp.w	r9, #0
 8018bd6:	4607      	mov	r7, r0
 8018bd8:	f300 808e 	bgt.w	8018cf8 <_dtoa_r+0x9a8>
 8018bdc:	9b05      	ldr	r3, [sp, #20]
 8018bde:	2b02      	cmp	r3, #2
 8018be0:	dc50      	bgt.n	8018c84 <_dtoa_r+0x934>
 8018be2:	e089      	b.n	8018cf8 <_dtoa_r+0x9a8>
 8018be4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018be6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018bea:	e75d      	b.n	8018aa8 <_dtoa_r+0x758>
 8018bec:	9b01      	ldr	r3, [sp, #4]
 8018bee:	1e5e      	subs	r6, r3, #1
 8018bf0:	9b06      	ldr	r3, [sp, #24]
 8018bf2:	42b3      	cmp	r3, r6
 8018bf4:	bfbf      	itttt	lt
 8018bf6:	9b06      	ldrlt	r3, [sp, #24]
 8018bf8:	9606      	strlt	r6, [sp, #24]
 8018bfa:	1af2      	sublt	r2, r6, r3
 8018bfc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8018bfe:	bfb6      	itet	lt
 8018c00:	189b      	addlt	r3, r3, r2
 8018c02:	1b9e      	subge	r6, r3, r6
 8018c04:	930d      	strlt	r3, [sp, #52]	; 0x34
 8018c06:	9b01      	ldr	r3, [sp, #4]
 8018c08:	bfb8      	it	lt
 8018c0a:	2600      	movlt	r6, #0
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	bfb5      	itete	lt
 8018c10:	eba8 0503 	sublt.w	r5, r8, r3
 8018c14:	9b01      	ldrge	r3, [sp, #4]
 8018c16:	2300      	movlt	r3, #0
 8018c18:	4645      	movge	r5, r8
 8018c1a:	e747      	b.n	8018aac <_dtoa_r+0x75c>
 8018c1c:	9e06      	ldr	r6, [sp, #24]
 8018c1e:	9f08      	ldr	r7, [sp, #32]
 8018c20:	4645      	mov	r5, r8
 8018c22:	e74c      	b.n	8018abe <_dtoa_r+0x76e>
 8018c24:	9a06      	ldr	r2, [sp, #24]
 8018c26:	e775      	b.n	8018b14 <_dtoa_r+0x7c4>
 8018c28:	9b05      	ldr	r3, [sp, #20]
 8018c2a:	2b01      	cmp	r3, #1
 8018c2c:	dc18      	bgt.n	8018c60 <_dtoa_r+0x910>
 8018c2e:	9b02      	ldr	r3, [sp, #8]
 8018c30:	b9b3      	cbnz	r3, 8018c60 <_dtoa_r+0x910>
 8018c32:	9b03      	ldr	r3, [sp, #12]
 8018c34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018c38:	b9a3      	cbnz	r3, 8018c64 <_dtoa_r+0x914>
 8018c3a:	9b03      	ldr	r3, [sp, #12]
 8018c3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018c40:	0d1b      	lsrs	r3, r3, #20
 8018c42:	051b      	lsls	r3, r3, #20
 8018c44:	b12b      	cbz	r3, 8018c52 <_dtoa_r+0x902>
 8018c46:	9b04      	ldr	r3, [sp, #16]
 8018c48:	3301      	adds	r3, #1
 8018c4a:	9304      	str	r3, [sp, #16]
 8018c4c:	f108 0801 	add.w	r8, r8, #1
 8018c50:	2301      	movs	r3, #1
 8018c52:	9306      	str	r3, [sp, #24]
 8018c54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	f47f af74 	bne.w	8018b44 <_dtoa_r+0x7f4>
 8018c5c:	2001      	movs	r0, #1
 8018c5e:	e779      	b.n	8018b54 <_dtoa_r+0x804>
 8018c60:	2300      	movs	r3, #0
 8018c62:	e7f6      	b.n	8018c52 <_dtoa_r+0x902>
 8018c64:	9b02      	ldr	r3, [sp, #8]
 8018c66:	e7f4      	b.n	8018c52 <_dtoa_r+0x902>
 8018c68:	d085      	beq.n	8018b76 <_dtoa_r+0x826>
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	301c      	adds	r0, #28
 8018c6e:	e77d      	b.n	8018b6c <_dtoa_r+0x81c>
 8018c70:	40240000 	.word	0x40240000
 8018c74:	9b01      	ldr	r3, [sp, #4]
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	dc38      	bgt.n	8018cec <_dtoa_r+0x99c>
 8018c7a:	9b05      	ldr	r3, [sp, #20]
 8018c7c:	2b02      	cmp	r3, #2
 8018c7e:	dd35      	ble.n	8018cec <_dtoa_r+0x99c>
 8018c80:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018c84:	f1b9 0f00 	cmp.w	r9, #0
 8018c88:	d10d      	bne.n	8018ca6 <_dtoa_r+0x956>
 8018c8a:	4631      	mov	r1, r6
 8018c8c:	464b      	mov	r3, r9
 8018c8e:	2205      	movs	r2, #5
 8018c90:	4620      	mov	r0, r4
 8018c92:	f000 fd3d 	bl	8019710 <__multadd>
 8018c96:	4601      	mov	r1, r0
 8018c98:	4606      	mov	r6, r0
 8018c9a:	4658      	mov	r0, fp
 8018c9c:	f000 ff9e 	bl	8019bdc <__mcmp>
 8018ca0:	2800      	cmp	r0, #0
 8018ca2:	f73f adbd 	bgt.w	8018820 <_dtoa_r+0x4d0>
 8018ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ca8:	9d00      	ldr	r5, [sp, #0]
 8018caa:	ea6f 0a03 	mvn.w	sl, r3
 8018cae:	f04f 0800 	mov.w	r8, #0
 8018cb2:	4631      	mov	r1, r6
 8018cb4:	4620      	mov	r0, r4
 8018cb6:	f000 fd09 	bl	80196cc <_Bfree>
 8018cba:	2f00      	cmp	r7, #0
 8018cbc:	f43f aeb4 	beq.w	8018a28 <_dtoa_r+0x6d8>
 8018cc0:	f1b8 0f00 	cmp.w	r8, #0
 8018cc4:	d005      	beq.n	8018cd2 <_dtoa_r+0x982>
 8018cc6:	45b8      	cmp	r8, r7
 8018cc8:	d003      	beq.n	8018cd2 <_dtoa_r+0x982>
 8018cca:	4641      	mov	r1, r8
 8018ccc:	4620      	mov	r0, r4
 8018cce:	f000 fcfd 	bl	80196cc <_Bfree>
 8018cd2:	4639      	mov	r1, r7
 8018cd4:	4620      	mov	r0, r4
 8018cd6:	f000 fcf9 	bl	80196cc <_Bfree>
 8018cda:	e6a5      	b.n	8018a28 <_dtoa_r+0x6d8>
 8018cdc:	2600      	movs	r6, #0
 8018cde:	4637      	mov	r7, r6
 8018ce0:	e7e1      	b.n	8018ca6 <_dtoa_r+0x956>
 8018ce2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018ce4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018ce8:	4637      	mov	r7, r6
 8018cea:	e599      	b.n	8018820 <_dtoa_r+0x4d0>
 8018cec:	9b08      	ldr	r3, [sp, #32]
 8018cee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	f000 80fd 	beq.w	8018ef2 <_dtoa_r+0xba2>
 8018cf8:	2d00      	cmp	r5, #0
 8018cfa:	dd05      	ble.n	8018d08 <_dtoa_r+0x9b8>
 8018cfc:	4639      	mov	r1, r7
 8018cfe:	462a      	mov	r2, r5
 8018d00:	4620      	mov	r0, r4
 8018d02:	f000 feff 	bl	8019b04 <__lshift>
 8018d06:	4607      	mov	r7, r0
 8018d08:	9b06      	ldr	r3, [sp, #24]
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d05c      	beq.n	8018dc8 <_dtoa_r+0xa78>
 8018d0e:	6879      	ldr	r1, [r7, #4]
 8018d10:	4620      	mov	r0, r4
 8018d12:	f000 fc9b 	bl	801964c <_Balloc>
 8018d16:	4605      	mov	r5, r0
 8018d18:	b928      	cbnz	r0, 8018d26 <_dtoa_r+0x9d6>
 8018d1a:	4b80      	ldr	r3, [pc, #512]	; (8018f1c <_dtoa_r+0xbcc>)
 8018d1c:	4602      	mov	r2, r0
 8018d1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018d22:	f7ff bb2e 	b.w	8018382 <_dtoa_r+0x32>
 8018d26:	693a      	ldr	r2, [r7, #16]
 8018d28:	3202      	adds	r2, #2
 8018d2a:	0092      	lsls	r2, r2, #2
 8018d2c:	f107 010c 	add.w	r1, r7, #12
 8018d30:	300c      	adds	r0, #12
 8018d32:	f7fd fc0d 	bl	8016550 <memcpy>
 8018d36:	2201      	movs	r2, #1
 8018d38:	4629      	mov	r1, r5
 8018d3a:	4620      	mov	r0, r4
 8018d3c:	f000 fee2 	bl	8019b04 <__lshift>
 8018d40:	9b00      	ldr	r3, [sp, #0]
 8018d42:	3301      	adds	r3, #1
 8018d44:	9301      	str	r3, [sp, #4]
 8018d46:	9b00      	ldr	r3, [sp, #0]
 8018d48:	444b      	add	r3, r9
 8018d4a:	9307      	str	r3, [sp, #28]
 8018d4c:	9b02      	ldr	r3, [sp, #8]
 8018d4e:	f003 0301 	and.w	r3, r3, #1
 8018d52:	46b8      	mov	r8, r7
 8018d54:	9306      	str	r3, [sp, #24]
 8018d56:	4607      	mov	r7, r0
 8018d58:	9b01      	ldr	r3, [sp, #4]
 8018d5a:	4631      	mov	r1, r6
 8018d5c:	3b01      	subs	r3, #1
 8018d5e:	4658      	mov	r0, fp
 8018d60:	9302      	str	r3, [sp, #8]
 8018d62:	f7ff fa67 	bl	8018234 <quorem>
 8018d66:	4603      	mov	r3, r0
 8018d68:	3330      	adds	r3, #48	; 0x30
 8018d6a:	9004      	str	r0, [sp, #16]
 8018d6c:	4641      	mov	r1, r8
 8018d6e:	4658      	mov	r0, fp
 8018d70:	9308      	str	r3, [sp, #32]
 8018d72:	f000 ff33 	bl	8019bdc <__mcmp>
 8018d76:	463a      	mov	r2, r7
 8018d78:	4681      	mov	r9, r0
 8018d7a:	4631      	mov	r1, r6
 8018d7c:	4620      	mov	r0, r4
 8018d7e:	f000 ff49 	bl	8019c14 <__mdiff>
 8018d82:	68c2      	ldr	r2, [r0, #12]
 8018d84:	9b08      	ldr	r3, [sp, #32]
 8018d86:	4605      	mov	r5, r0
 8018d88:	bb02      	cbnz	r2, 8018dcc <_dtoa_r+0xa7c>
 8018d8a:	4601      	mov	r1, r0
 8018d8c:	4658      	mov	r0, fp
 8018d8e:	f000 ff25 	bl	8019bdc <__mcmp>
 8018d92:	9b08      	ldr	r3, [sp, #32]
 8018d94:	4602      	mov	r2, r0
 8018d96:	4629      	mov	r1, r5
 8018d98:	4620      	mov	r0, r4
 8018d9a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8018d9e:	f000 fc95 	bl	80196cc <_Bfree>
 8018da2:	9b05      	ldr	r3, [sp, #20]
 8018da4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018da6:	9d01      	ldr	r5, [sp, #4]
 8018da8:	ea43 0102 	orr.w	r1, r3, r2
 8018dac:	9b06      	ldr	r3, [sp, #24]
 8018dae:	430b      	orrs	r3, r1
 8018db0:	9b08      	ldr	r3, [sp, #32]
 8018db2:	d10d      	bne.n	8018dd0 <_dtoa_r+0xa80>
 8018db4:	2b39      	cmp	r3, #57	; 0x39
 8018db6:	d029      	beq.n	8018e0c <_dtoa_r+0xabc>
 8018db8:	f1b9 0f00 	cmp.w	r9, #0
 8018dbc:	dd01      	ble.n	8018dc2 <_dtoa_r+0xa72>
 8018dbe:	9b04      	ldr	r3, [sp, #16]
 8018dc0:	3331      	adds	r3, #49	; 0x31
 8018dc2:	9a02      	ldr	r2, [sp, #8]
 8018dc4:	7013      	strb	r3, [r2, #0]
 8018dc6:	e774      	b.n	8018cb2 <_dtoa_r+0x962>
 8018dc8:	4638      	mov	r0, r7
 8018dca:	e7b9      	b.n	8018d40 <_dtoa_r+0x9f0>
 8018dcc:	2201      	movs	r2, #1
 8018dce:	e7e2      	b.n	8018d96 <_dtoa_r+0xa46>
 8018dd0:	f1b9 0f00 	cmp.w	r9, #0
 8018dd4:	db06      	blt.n	8018de4 <_dtoa_r+0xa94>
 8018dd6:	9905      	ldr	r1, [sp, #20]
 8018dd8:	ea41 0909 	orr.w	r9, r1, r9
 8018ddc:	9906      	ldr	r1, [sp, #24]
 8018dde:	ea59 0101 	orrs.w	r1, r9, r1
 8018de2:	d120      	bne.n	8018e26 <_dtoa_r+0xad6>
 8018de4:	2a00      	cmp	r2, #0
 8018de6:	ddec      	ble.n	8018dc2 <_dtoa_r+0xa72>
 8018de8:	4659      	mov	r1, fp
 8018dea:	2201      	movs	r2, #1
 8018dec:	4620      	mov	r0, r4
 8018dee:	9301      	str	r3, [sp, #4]
 8018df0:	f000 fe88 	bl	8019b04 <__lshift>
 8018df4:	4631      	mov	r1, r6
 8018df6:	4683      	mov	fp, r0
 8018df8:	f000 fef0 	bl	8019bdc <__mcmp>
 8018dfc:	2800      	cmp	r0, #0
 8018dfe:	9b01      	ldr	r3, [sp, #4]
 8018e00:	dc02      	bgt.n	8018e08 <_dtoa_r+0xab8>
 8018e02:	d1de      	bne.n	8018dc2 <_dtoa_r+0xa72>
 8018e04:	07da      	lsls	r2, r3, #31
 8018e06:	d5dc      	bpl.n	8018dc2 <_dtoa_r+0xa72>
 8018e08:	2b39      	cmp	r3, #57	; 0x39
 8018e0a:	d1d8      	bne.n	8018dbe <_dtoa_r+0xa6e>
 8018e0c:	9a02      	ldr	r2, [sp, #8]
 8018e0e:	2339      	movs	r3, #57	; 0x39
 8018e10:	7013      	strb	r3, [r2, #0]
 8018e12:	462b      	mov	r3, r5
 8018e14:	461d      	mov	r5, r3
 8018e16:	3b01      	subs	r3, #1
 8018e18:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018e1c:	2a39      	cmp	r2, #57	; 0x39
 8018e1e:	d050      	beq.n	8018ec2 <_dtoa_r+0xb72>
 8018e20:	3201      	adds	r2, #1
 8018e22:	701a      	strb	r2, [r3, #0]
 8018e24:	e745      	b.n	8018cb2 <_dtoa_r+0x962>
 8018e26:	2a00      	cmp	r2, #0
 8018e28:	dd03      	ble.n	8018e32 <_dtoa_r+0xae2>
 8018e2a:	2b39      	cmp	r3, #57	; 0x39
 8018e2c:	d0ee      	beq.n	8018e0c <_dtoa_r+0xabc>
 8018e2e:	3301      	adds	r3, #1
 8018e30:	e7c7      	b.n	8018dc2 <_dtoa_r+0xa72>
 8018e32:	9a01      	ldr	r2, [sp, #4]
 8018e34:	9907      	ldr	r1, [sp, #28]
 8018e36:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018e3a:	428a      	cmp	r2, r1
 8018e3c:	d02a      	beq.n	8018e94 <_dtoa_r+0xb44>
 8018e3e:	4659      	mov	r1, fp
 8018e40:	2300      	movs	r3, #0
 8018e42:	220a      	movs	r2, #10
 8018e44:	4620      	mov	r0, r4
 8018e46:	f000 fc63 	bl	8019710 <__multadd>
 8018e4a:	45b8      	cmp	r8, r7
 8018e4c:	4683      	mov	fp, r0
 8018e4e:	f04f 0300 	mov.w	r3, #0
 8018e52:	f04f 020a 	mov.w	r2, #10
 8018e56:	4641      	mov	r1, r8
 8018e58:	4620      	mov	r0, r4
 8018e5a:	d107      	bne.n	8018e6c <_dtoa_r+0xb1c>
 8018e5c:	f000 fc58 	bl	8019710 <__multadd>
 8018e60:	4680      	mov	r8, r0
 8018e62:	4607      	mov	r7, r0
 8018e64:	9b01      	ldr	r3, [sp, #4]
 8018e66:	3301      	adds	r3, #1
 8018e68:	9301      	str	r3, [sp, #4]
 8018e6a:	e775      	b.n	8018d58 <_dtoa_r+0xa08>
 8018e6c:	f000 fc50 	bl	8019710 <__multadd>
 8018e70:	4639      	mov	r1, r7
 8018e72:	4680      	mov	r8, r0
 8018e74:	2300      	movs	r3, #0
 8018e76:	220a      	movs	r2, #10
 8018e78:	4620      	mov	r0, r4
 8018e7a:	f000 fc49 	bl	8019710 <__multadd>
 8018e7e:	4607      	mov	r7, r0
 8018e80:	e7f0      	b.n	8018e64 <_dtoa_r+0xb14>
 8018e82:	f1b9 0f00 	cmp.w	r9, #0
 8018e86:	9a00      	ldr	r2, [sp, #0]
 8018e88:	bfcc      	ite	gt
 8018e8a:	464d      	movgt	r5, r9
 8018e8c:	2501      	movle	r5, #1
 8018e8e:	4415      	add	r5, r2
 8018e90:	f04f 0800 	mov.w	r8, #0
 8018e94:	4659      	mov	r1, fp
 8018e96:	2201      	movs	r2, #1
 8018e98:	4620      	mov	r0, r4
 8018e9a:	9301      	str	r3, [sp, #4]
 8018e9c:	f000 fe32 	bl	8019b04 <__lshift>
 8018ea0:	4631      	mov	r1, r6
 8018ea2:	4683      	mov	fp, r0
 8018ea4:	f000 fe9a 	bl	8019bdc <__mcmp>
 8018ea8:	2800      	cmp	r0, #0
 8018eaa:	dcb2      	bgt.n	8018e12 <_dtoa_r+0xac2>
 8018eac:	d102      	bne.n	8018eb4 <_dtoa_r+0xb64>
 8018eae:	9b01      	ldr	r3, [sp, #4]
 8018eb0:	07db      	lsls	r3, r3, #31
 8018eb2:	d4ae      	bmi.n	8018e12 <_dtoa_r+0xac2>
 8018eb4:	462b      	mov	r3, r5
 8018eb6:	461d      	mov	r5, r3
 8018eb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018ebc:	2a30      	cmp	r2, #48	; 0x30
 8018ebe:	d0fa      	beq.n	8018eb6 <_dtoa_r+0xb66>
 8018ec0:	e6f7      	b.n	8018cb2 <_dtoa_r+0x962>
 8018ec2:	9a00      	ldr	r2, [sp, #0]
 8018ec4:	429a      	cmp	r2, r3
 8018ec6:	d1a5      	bne.n	8018e14 <_dtoa_r+0xac4>
 8018ec8:	f10a 0a01 	add.w	sl, sl, #1
 8018ecc:	2331      	movs	r3, #49	; 0x31
 8018ece:	e779      	b.n	8018dc4 <_dtoa_r+0xa74>
 8018ed0:	4b13      	ldr	r3, [pc, #76]	; (8018f20 <_dtoa_r+0xbd0>)
 8018ed2:	f7ff baaf 	b.w	8018434 <_dtoa_r+0xe4>
 8018ed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	f47f aa86 	bne.w	80183ea <_dtoa_r+0x9a>
 8018ede:	4b11      	ldr	r3, [pc, #68]	; (8018f24 <_dtoa_r+0xbd4>)
 8018ee0:	f7ff baa8 	b.w	8018434 <_dtoa_r+0xe4>
 8018ee4:	f1b9 0f00 	cmp.w	r9, #0
 8018ee8:	dc03      	bgt.n	8018ef2 <_dtoa_r+0xba2>
 8018eea:	9b05      	ldr	r3, [sp, #20]
 8018eec:	2b02      	cmp	r3, #2
 8018eee:	f73f aec9 	bgt.w	8018c84 <_dtoa_r+0x934>
 8018ef2:	9d00      	ldr	r5, [sp, #0]
 8018ef4:	4631      	mov	r1, r6
 8018ef6:	4658      	mov	r0, fp
 8018ef8:	f7ff f99c 	bl	8018234 <quorem>
 8018efc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018f00:	f805 3b01 	strb.w	r3, [r5], #1
 8018f04:	9a00      	ldr	r2, [sp, #0]
 8018f06:	1aaa      	subs	r2, r5, r2
 8018f08:	4591      	cmp	r9, r2
 8018f0a:	ddba      	ble.n	8018e82 <_dtoa_r+0xb32>
 8018f0c:	4659      	mov	r1, fp
 8018f0e:	2300      	movs	r3, #0
 8018f10:	220a      	movs	r2, #10
 8018f12:	4620      	mov	r0, r4
 8018f14:	f000 fbfc 	bl	8019710 <__multadd>
 8018f18:	4683      	mov	fp, r0
 8018f1a:	e7eb      	b.n	8018ef4 <_dtoa_r+0xba4>
 8018f1c:	0801cd04 	.word	0x0801cd04
 8018f20:	0801cb04 	.word	0x0801cb04
 8018f24:	0801cc81 	.word	0x0801cc81

08018f28 <rshift>:
 8018f28:	6903      	ldr	r3, [r0, #16]
 8018f2a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018f2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018f32:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018f36:	f100 0414 	add.w	r4, r0, #20
 8018f3a:	dd45      	ble.n	8018fc8 <rshift+0xa0>
 8018f3c:	f011 011f 	ands.w	r1, r1, #31
 8018f40:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018f44:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018f48:	d10c      	bne.n	8018f64 <rshift+0x3c>
 8018f4a:	f100 0710 	add.w	r7, r0, #16
 8018f4e:	4629      	mov	r1, r5
 8018f50:	42b1      	cmp	r1, r6
 8018f52:	d334      	bcc.n	8018fbe <rshift+0x96>
 8018f54:	1a9b      	subs	r3, r3, r2
 8018f56:	009b      	lsls	r3, r3, #2
 8018f58:	1eea      	subs	r2, r5, #3
 8018f5a:	4296      	cmp	r6, r2
 8018f5c:	bf38      	it	cc
 8018f5e:	2300      	movcc	r3, #0
 8018f60:	4423      	add	r3, r4
 8018f62:	e015      	b.n	8018f90 <rshift+0x68>
 8018f64:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018f68:	f1c1 0820 	rsb	r8, r1, #32
 8018f6c:	40cf      	lsrs	r7, r1
 8018f6e:	f105 0e04 	add.w	lr, r5, #4
 8018f72:	46a1      	mov	r9, r4
 8018f74:	4576      	cmp	r6, lr
 8018f76:	46f4      	mov	ip, lr
 8018f78:	d815      	bhi.n	8018fa6 <rshift+0x7e>
 8018f7a:	1a9b      	subs	r3, r3, r2
 8018f7c:	009a      	lsls	r2, r3, #2
 8018f7e:	3a04      	subs	r2, #4
 8018f80:	3501      	adds	r5, #1
 8018f82:	42ae      	cmp	r6, r5
 8018f84:	bf38      	it	cc
 8018f86:	2200      	movcc	r2, #0
 8018f88:	18a3      	adds	r3, r4, r2
 8018f8a:	50a7      	str	r7, [r4, r2]
 8018f8c:	b107      	cbz	r7, 8018f90 <rshift+0x68>
 8018f8e:	3304      	adds	r3, #4
 8018f90:	1b1a      	subs	r2, r3, r4
 8018f92:	42a3      	cmp	r3, r4
 8018f94:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018f98:	bf08      	it	eq
 8018f9a:	2300      	moveq	r3, #0
 8018f9c:	6102      	str	r2, [r0, #16]
 8018f9e:	bf08      	it	eq
 8018fa0:	6143      	streq	r3, [r0, #20]
 8018fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018fa6:	f8dc c000 	ldr.w	ip, [ip]
 8018faa:	fa0c fc08 	lsl.w	ip, ip, r8
 8018fae:	ea4c 0707 	orr.w	r7, ip, r7
 8018fb2:	f849 7b04 	str.w	r7, [r9], #4
 8018fb6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018fba:	40cf      	lsrs	r7, r1
 8018fbc:	e7da      	b.n	8018f74 <rshift+0x4c>
 8018fbe:	f851 cb04 	ldr.w	ip, [r1], #4
 8018fc2:	f847 cf04 	str.w	ip, [r7, #4]!
 8018fc6:	e7c3      	b.n	8018f50 <rshift+0x28>
 8018fc8:	4623      	mov	r3, r4
 8018fca:	e7e1      	b.n	8018f90 <rshift+0x68>

08018fcc <__hexdig_fun>:
 8018fcc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018fd0:	2b09      	cmp	r3, #9
 8018fd2:	d802      	bhi.n	8018fda <__hexdig_fun+0xe>
 8018fd4:	3820      	subs	r0, #32
 8018fd6:	b2c0      	uxtb	r0, r0
 8018fd8:	4770      	bx	lr
 8018fda:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018fde:	2b05      	cmp	r3, #5
 8018fe0:	d801      	bhi.n	8018fe6 <__hexdig_fun+0x1a>
 8018fe2:	3847      	subs	r0, #71	; 0x47
 8018fe4:	e7f7      	b.n	8018fd6 <__hexdig_fun+0xa>
 8018fe6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018fea:	2b05      	cmp	r3, #5
 8018fec:	d801      	bhi.n	8018ff2 <__hexdig_fun+0x26>
 8018fee:	3827      	subs	r0, #39	; 0x27
 8018ff0:	e7f1      	b.n	8018fd6 <__hexdig_fun+0xa>
 8018ff2:	2000      	movs	r0, #0
 8018ff4:	4770      	bx	lr
	...

08018ff8 <__gethex>:
 8018ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ffc:	ed2d 8b02 	vpush	{d8}
 8019000:	b089      	sub	sp, #36	; 0x24
 8019002:	ee08 0a10 	vmov	s16, r0
 8019006:	9304      	str	r3, [sp, #16]
 8019008:	4bbc      	ldr	r3, [pc, #752]	; (80192fc <__gethex+0x304>)
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	9301      	str	r3, [sp, #4]
 801900e:	4618      	mov	r0, r3
 8019010:	468b      	mov	fp, r1
 8019012:	4690      	mov	r8, r2
 8019014:	f7e7 f8dc 	bl	80001d0 <strlen>
 8019018:	9b01      	ldr	r3, [sp, #4]
 801901a:	f8db 2000 	ldr.w	r2, [fp]
 801901e:	4403      	add	r3, r0
 8019020:	4682      	mov	sl, r0
 8019022:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019026:	9305      	str	r3, [sp, #20]
 8019028:	1c93      	adds	r3, r2, #2
 801902a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801902e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8019032:	32fe      	adds	r2, #254	; 0xfe
 8019034:	18d1      	adds	r1, r2, r3
 8019036:	461f      	mov	r7, r3
 8019038:	f813 0b01 	ldrb.w	r0, [r3], #1
 801903c:	9100      	str	r1, [sp, #0]
 801903e:	2830      	cmp	r0, #48	; 0x30
 8019040:	d0f8      	beq.n	8019034 <__gethex+0x3c>
 8019042:	f7ff ffc3 	bl	8018fcc <__hexdig_fun>
 8019046:	4604      	mov	r4, r0
 8019048:	2800      	cmp	r0, #0
 801904a:	d13a      	bne.n	80190c2 <__gethex+0xca>
 801904c:	9901      	ldr	r1, [sp, #4]
 801904e:	4652      	mov	r2, sl
 8019050:	4638      	mov	r0, r7
 8019052:	f001 f929 	bl	801a2a8 <strncmp>
 8019056:	4605      	mov	r5, r0
 8019058:	2800      	cmp	r0, #0
 801905a:	d168      	bne.n	801912e <__gethex+0x136>
 801905c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8019060:	eb07 060a 	add.w	r6, r7, sl
 8019064:	f7ff ffb2 	bl	8018fcc <__hexdig_fun>
 8019068:	2800      	cmp	r0, #0
 801906a:	d062      	beq.n	8019132 <__gethex+0x13a>
 801906c:	4633      	mov	r3, r6
 801906e:	7818      	ldrb	r0, [r3, #0]
 8019070:	2830      	cmp	r0, #48	; 0x30
 8019072:	461f      	mov	r7, r3
 8019074:	f103 0301 	add.w	r3, r3, #1
 8019078:	d0f9      	beq.n	801906e <__gethex+0x76>
 801907a:	f7ff ffa7 	bl	8018fcc <__hexdig_fun>
 801907e:	2301      	movs	r3, #1
 8019080:	fab0 f480 	clz	r4, r0
 8019084:	0964      	lsrs	r4, r4, #5
 8019086:	4635      	mov	r5, r6
 8019088:	9300      	str	r3, [sp, #0]
 801908a:	463a      	mov	r2, r7
 801908c:	4616      	mov	r6, r2
 801908e:	3201      	adds	r2, #1
 8019090:	7830      	ldrb	r0, [r6, #0]
 8019092:	f7ff ff9b 	bl	8018fcc <__hexdig_fun>
 8019096:	2800      	cmp	r0, #0
 8019098:	d1f8      	bne.n	801908c <__gethex+0x94>
 801909a:	9901      	ldr	r1, [sp, #4]
 801909c:	4652      	mov	r2, sl
 801909e:	4630      	mov	r0, r6
 80190a0:	f001 f902 	bl	801a2a8 <strncmp>
 80190a4:	b980      	cbnz	r0, 80190c8 <__gethex+0xd0>
 80190a6:	b94d      	cbnz	r5, 80190bc <__gethex+0xc4>
 80190a8:	eb06 050a 	add.w	r5, r6, sl
 80190ac:	462a      	mov	r2, r5
 80190ae:	4616      	mov	r6, r2
 80190b0:	3201      	adds	r2, #1
 80190b2:	7830      	ldrb	r0, [r6, #0]
 80190b4:	f7ff ff8a 	bl	8018fcc <__hexdig_fun>
 80190b8:	2800      	cmp	r0, #0
 80190ba:	d1f8      	bne.n	80190ae <__gethex+0xb6>
 80190bc:	1bad      	subs	r5, r5, r6
 80190be:	00ad      	lsls	r5, r5, #2
 80190c0:	e004      	b.n	80190cc <__gethex+0xd4>
 80190c2:	2400      	movs	r4, #0
 80190c4:	4625      	mov	r5, r4
 80190c6:	e7e0      	b.n	801908a <__gethex+0x92>
 80190c8:	2d00      	cmp	r5, #0
 80190ca:	d1f7      	bne.n	80190bc <__gethex+0xc4>
 80190cc:	7833      	ldrb	r3, [r6, #0]
 80190ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80190d2:	2b50      	cmp	r3, #80	; 0x50
 80190d4:	d13b      	bne.n	801914e <__gethex+0x156>
 80190d6:	7873      	ldrb	r3, [r6, #1]
 80190d8:	2b2b      	cmp	r3, #43	; 0x2b
 80190da:	d02c      	beq.n	8019136 <__gethex+0x13e>
 80190dc:	2b2d      	cmp	r3, #45	; 0x2d
 80190de:	d02e      	beq.n	801913e <__gethex+0x146>
 80190e0:	1c71      	adds	r1, r6, #1
 80190e2:	f04f 0900 	mov.w	r9, #0
 80190e6:	7808      	ldrb	r0, [r1, #0]
 80190e8:	f7ff ff70 	bl	8018fcc <__hexdig_fun>
 80190ec:	1e43      	subs	r3, r0, #1
 80190ee:	b2db      	uxtb	r3, r3
 80190f0:	2b18      	cmp	r3, #24
 80190f2:	d82c      	bhi.n	801914e <__gethex+0x156>
 80190f4:	f1a0 0210 	sub.w	r2, r0, #16
 80190f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80190fc:	f7ff ff66 	bl	8018fcc <__hexdig_fun>
 8019100:	1e43      	subs	r3, r0, #1
 8019102:	b2db      	uxtb	r3, r3
 8019104:	2b18      	cmp	r3, #24
 8019106:	d91d      	bls.n	8019144 <__gethex+0x14c>
 8019108:	f1b9 0f00 	cmp.w	r9, #0
 801910c:	d000      	beq.n	8019110 <__gethex+0x118>
 801910e:	4252      	negs	r2, r2
 8019110:	4415      	add	r5, r2
 8019112:	f8cb 1000 	str.w	r1, [fp]
 8019116:	b1e4      	cbz	r4, 8019152 <__gethex+0x15a>
 8019118:	9b00      	ldr	r3, [sp, #0]
 801911a:	2b00      	cmp	r3, #0
 801911c:	bf14      	ite	ne
 801911e:	2700      	movne	r7, #0
 8019120:	2706      	moveq	r7, #6
 8019122:	4638      	mov	r0, r7
 8019124:	b009      	add	sp, #36	; 0x24
 8019126:	ecbd 8b02 	vpop	{d8}
 801912a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801912e:	463e      	mov	r6, r7
 8019130:	4625      	mov	r5, r4
 8019132:	2401      	movs	r4, #1
 8019134:	e7ca      	b.n	80190cc <__gethex+0xd4>
 8019136:	f04f 0900 	mov.w	r9, #0
 801913a:	1cb1      	adds	r1, r6, #2
 801913c:	e7d3      	b.n	80190e6 <__gethex+0xee>
 801913e:	f04f 0901 	mov.w	r9, #1
 8019142:	e7fa      	b.n	801913a <__gethex+0x142>
 8019144:	230a      	movs	r3, #10
 8019146:	fb03 0202 	mla	r2, r3, r2, r0
 801914a:	3a10      	subs	r2, #16
 801914c:	e7d4      	b.n	80190f8 <__gethex+0x100>
 801914e:	4631      	mov	r1, r6
 8019150:	e7df      	b.n	8019112 <__gethex+0x11a>
 8019152:	1bf3      	subs	r3, r6, r7
 8019154:	3b01      	subs	r3, #1
 8019156:	4621      	mov	r1, r4
 8019158:	2b07      	cmp	r3, #7
 801915a:	dc0b      	bgt.n	8019174 <__gethex+0x17c>
 801915c:	ee18 0a10 	vmov	r0, s16
 8019160:	f000 fa74 	bl	801964c <_Balloc>
 8019164:	4604      	mov	r4, r0
 8019166:	b940      	cbnz	r0, 801917a <__gethex+0x182>
 8019168:	4b65      	ldr	r3, [pc, #404]	; (8019300 <__gethex+0x308>)
 801916a:	4602      	mov	r2, r0
 801916c:	21de      	movs	r1, #222	; 0xde
 801916e:	4865      	ldr	r0, [pc, #404]	; (8019304 <__gethex+0x30c>)
 8019170:	f001 f8ba 	bl	801a2e8 <__assert_func>
 8019174:	3101      	adds	r1, #1
 8019176:	105b      	asrs	r3, r3, #1
 8019178:	e7ee      	b.n	8019158 <__gethex+0x160>
 801917a:	f100 0914 	add.w	r9, r0, #20
 801917e:	f04f 0b00 	mov.w	fp, #0
 8019182:	f1ca 0301 	rsb	r3, sl, #1
 8019186:	f8cd 9008 	str.w	r9, [sp, #8]
 801918a:	f8cd b000 	str.w	fp, [sp]
 801918e:	9306      	str	r3, [sp, #24]
 8019190:	42b7      	cmp	r7, r6
 8019192:	d340      	bcc.n	8019216 <__gethex+0x21e>
 8019194:	9802      	ldr	r0, [sp, #8]
 8019196:	9b00      	ldr	r3, [sp, #0]
 8019198:	f840 3b04 	str.w	r3, [r0], #4
 801919c:	eba0 0009 	sub.w	r0, r0, r9
 80191a0:	1080      	asrs	r0, r0, #2
 80191a2:	0146      	lsls	r6, r0, #5
 80191a4:	6120      	str	r0, [r4, #16]
 80191a6:	4618      	mov	r0, r3
 80191a8:	f000 fb46 	bl	8019838 <__hi0bits>
 80191ac:	1a30      	subs	r0, r6, r0
 80191ae:	f8d8 6000 	ldr.w	r6, [r8]
 80191b2:	42b0      	cmp	r0, r6
 80191b4:	dd63      	ble.n	801927e <__gethex+0x286>
 80191b6:	1b87      	subs	r7, r0, r6
 80191b8:	4639      	mov	r1, r7
 80191ba:	4620      	mov	r0, r4
 80191bc:	f000 fee0 	bl	8019f80 <__any_on>
 80191c0:	4682      	mov	sl, r0
 80191c2:	b1a8      	cbz	r0, 80191f0 <__gethex+0x1f8>
 80191c4:	1e7b      	subs	r3, r7, #1
 80191c6:	1159      	asrs	r1, r3, #5
 80191c8:	f003 021f 	and.w	r2, r3, #31
 80191cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80191d0:	f04f 0a01 	mov.w	sl, #1
 80191d4:	fa0a f202 	lsl.w	r2, sl, r2
 80191d8:	420a      	tst	r2, r1
 80191da:	d009      	beq.n	80191f0 <__gethex+0x1f8>
 80191dc:	4553      	cmp	r3, sl
 80191de:	dd05      	ble.n	80191ec <__gethex+0x1f4>
 80191e0:	1eb9      	subs	r1, r7, #2
 80191e2:	4620      	mov	r0, r4
 80191e4:	f000 fecc 	bl	8019f80 <__any_on>
 80191e8:	2800      	cmp	r0, #0
 80191ea:	d145      	bne.n	8019278 <__gethex+0x280>
 80191ec:	f04f 0a02 	mov.w	sl, #2
 80191f0:	4639      	mov	r1, r7
 80191f2:	4620      	mov	r0, r4
 80191f4:	f7ff fe98 	bl	8018f28 <rshift>
 80191f8:	443d      	add	r5, r7
 80191fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80191fe:	42ab      	cmp	r3, r5
 8019200:	da4c      	bge.n	801929c <__gethex+0x2a4>
 8019202:	ee18 0a10 	vmov	r0, s16
 8019206:	4621      	mov	r1, r4
 8019208:	f000 fa60 	bl	80196cc <_Bfree>
 801920c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801920e:	2300      	movs	r3, #0
 8019210:	6013      	str	r3, [r2, #0]
 8019212:	27a3      	movs	r7, #163	; 0xa3
 8019214:	e785      	b.n	8019122 <__gethex+0x12a>
 8019216:	1e73      	subs	r3, r6, #1
 8019218:	9a05      	ldr	r2, [sp, #20]
 801921a:	9303      	str	r3, [sp, #12]
 801921c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019220:	4293      	cmp	r3, r2
 8019222:	d019      	beq.n	8019258 <__gethex+0x260>
 8019224:	f1bb 0f20 	cmp.w	fp, #32
 8019228:	d107      	bne.n	801923a <__gethex+0x242>
 801922a:	9b02      	ldr	r3, [sp, #8]
 801922c:	9a00      	ldr	r2, [sp, #0]
 801922e:	f843 2b04 	str.w	r2, [r3], #4
 8019232:	9302      	str	r3, [sp, #8]
 8019234:	2300      	movs	r3, #0
 8019236:	9300      	str	r3, [sp, #0]
 8019238:	469b      	mov	fp, r3
 801923a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801923e:	f7ff fec5 	bl	8018fcc <__hexdig_fun>
 8019242:	9b00      	ldr	r3, [sp, #0]
 8019244:	f000 000f 	and.w	r0, r0, #15
 8019248:	fa00 f00b 	lsl.w	r0, r0, fp
 801924c:	4303      	orrs	r3, r0
 801924e:	9300      	str	r3, [sp, #0]
 8019250:	f10b 0b04 	add.w	fp, fp, #4
 8019254:	9b03      	ldr	r3, [sp, #12]
 8019256:	e00d      	b.n	8019274 <__gethex+0x27c>
 8019258:	9b03      	ldr	r3, [sp, #12]
 801925a:	9a06      	ldr	r2, [sp, #24]
 801925c:	4413      	add	r3, r2
 801925e:	42bb      	cmp	r3, r7
 8019260:	d3e0      	bcc.n	8019224 <__gethex+0x22c>
 8019262:	4618      	mov	r0, r3
 8019264:	9901      	ldr	r1, [sp, #4]
 8019266:	9307      	str	r3, [sp, #28]
 8019268:	4652      	mov	r2, sl
 801926a:	f001 f81d 	bl	801a2a8 <strncmp>
 801926e:	9b07      	ldr	r3, [sp, #28]
 8019270:	2800      	cmp	r0, #0
 8019272:	d1d7      	bne.n	8019224 <__gethex+0x22c>
 8019274:	461e      	mov	r6, r3
 8019276:	e78b      	b.n	8019190 <__gethex+0x198>
 8019278:	f04f 0a03 	mov.w	sl, #3
 801927c:	e7b8      	b.n	80191f0 <__gethex+0x1f8>
 801927e:	da0a      	bge.n	8019296 <__gethex+0x29e>
 8019280:	1a37      	subs	r7, r6, r0
 8019282:	4621      	mov	r1, r4
 8019284:	ee18 0a10 	vmov	r0, s16
 8019288:	463a      	mov	r2, r7
 801928a:	f000 fc3b 	bl	8019b04 <__lshift>
 801928e:	1bed      	subs	r5, r5, r7
 8019290:	4604      	mov	r4, r0
 8019292:	f100 0914 	add.w	r9, r0, #20
 8019296:	f04f 0a00 	mov.w	sl, #0
 801929a:	e7ae      	b.n	80191fa <__gethex+0x202>
 801929c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80192a0:	42a8      	cmp	r0, r5
 80192a2:	dd72      	ble.n	801938a <__gethex+0x392>
 80192a4:	1b45      	subs	r5, r0, r5
 80192a6:	42ae      	cmp	r6, r5
 80192a8:	dc36      	bgt.n	8019318 <__gethex+0x320>
 80192aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80192ae:	2b02      	cmp	r3, #2
 80192b0:	d02a      	beq.n	8019308 <__gethex+0x310>
 80192b2:	2b03      	cmp	r3, #3
 80192b4:	d02c      	beq.n	8019310 <__gethex+0x318>
 80192b6:	2b01      	cmp	r3, #1
 80192b8:	d115      	bne.n	80192e6 <__gethex+0x2ee>
 80192ba:	42ae      	cmp	r6, r5
 80192bc:	d113      	bne.n	80192e6 <__gethex+0x2ee>
 80192be:	2e01      	cmp	r6, #1
 80192c0:	d10b      	bne.n	80192da <__gethex+0x2e2>
 80192c2:	9a04      	ldr	r2, [sp, #16]
 80192c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80192c8:	6013      	str	r3, [r2, #0]
 80192ca:	2301      	movs	r3, #1
 80192cc:	6123      	str	r3, [r4, #16]
 80192ce:	f8c9 3000 	str.w	r3, [r9]
 80192d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80192d4:	2762      	movs	r7, #98	; 0x62
 80192d6:	601c      	str	r4, [r3, #0]
 80192d8:	e723      	b.n	8019122 <__gethex+0x12a>
 80192da:	1e71      	subs	r1, r6, #1
 80192dc:	4620      	mov	r0, r4
 80192de:	f000 fe4f 	bl	8019f80 <__any_on>
 80192e2:	2800      	cmp	r0, #0
 80192e4:	d1ed      	bne.n	80192c2 <__gethex+0x2ca>
 80192e6:	ee18 0a10 	vmov	r0, s16
 80192ea:	4621      	mov	r1, r4
 80192ec:	f000 f9ee 	bl	80196cc <_Bfree>
 80192f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80192f2:	2300      	movs	r3, #0
 80192f4:	6013      	str	r3, [r2, #0]
 80192f6:	2750      	movs	r7, #80	; 0x50
 80192f8:	e713      	b.n	8019122 <__gethex+0x12a>
 80192fa:	bf00      	nop
 80192fc:	0801cd80 	.word	0x0801cd80
 8019300:	0801cd04 	.word	0x0801cd04
 8019304:	0801cd15 	.word	0x0801cd15
 8019308:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801930a:	2b00      	cmp	r3, #0
 801930c:	d1eb      	bne.n	80192e6 <__gethex+0x2ee>
 801930e:	e7d8      	b.n	80192c2 <__gethex+0x2ca>
 8019310:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019312:	2b00      	cmp	r3, #0
 8019314:	d1d5      	bne.n	80192c2 <__gethex+0x2ca>
 8019316:	e7e6      	b.n	80192e6 <__gethex+0x2ee>
 8019318:	1e6f      	subs	r7, r5, #1
 801931a:	f1ba 0f00 	cmp.w	sl, #0
 801931e:	d131      	bne.n	8019384 <__gethex+0x38c>
 8019320:	b127      	cbz	r7, 801932c <__gethex+0x334>
 8019322:	4639      	mov	r1, r7
 8019324:	4620      	mov	r0, r4
 8019326:	f000 fe2b 	bl	8019f80 <__any_on>
 801932a:	4682      	mov	sl, r0
 801932c:	117b      	asrs	r3, r7, #5
 801932e:	2101      	movs	r1, #1
 8019330:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019334:	f007 071f 	and.w	r7, r7, #31
 8019338:	fa01 f707 	lsl.w	r7, r1, r7
 801933c:	421f      	tst	r7, r3
 801933e:	4629      	mov	r1, r5
 8019340:	4620      	mov	r0, r4
 8019342:	bf18      	it	ne
 8019344:	f04a 0a02 	orrne.w	sl, sl, #2
 8019348:	1b76      	subs	r6, r6, r5
 801934a:	f7ff fded 	bl	8018f28 <rshift>
 801934e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019352:	2702      	movs	r7, #2
 8019354:	f1ba 0f00 	cmp.w	sl, #0
 8019358:	d048      	beq.n	80193ec <__gethex+0x3f4>
 801935a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801935e:	2b02      	cmp	r3, #2
 8019360:	d015      	beq.n	801938e <__gethex+0x396>
 8019362:	2b03      	cmp	r3, #3
 8019364:	d017      	beq.n	8019396 <__gethex+0x39e>
 8019366:	2b01      	cmp	r3, #1
 8019368:	d109      	bne.n	801937e <__gethex+0x386>
 801936a:	f01a 0f02 	tst.w	sl, #2
 801936e:	d006      	beq.n	801937e <__gethex+0x386>
 8019370:	f8d9 0000 	ldr.w	r0, [r9]
 8019374:	ea4a 0a00 	orr.w	sl, sl, r0
 8019378:	f01a 0f01 	tst.w	sl, #1
 801937c:	d10e      	bne.n	801939c <__gethex+0x3a4>
 801937e:	f047 0710 	orr.w	r7, r7, #16
 8019382:	e033      	b.n	80193ec <__gethex+0x3f4>
 8019384:	f04f 0a01 	mov.w	sl, #1
 8019388:	e7d0      	b.n	801932c <__gethex+0x334>
 801938a:	2701      	movs	r7, #1
 801938c:	e7e2      	b.n	8019354 <__gethex+0x35c>
 801938e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019390:	f1c3 0301 	rsb	r3, r3, #1
 8019394:	9315      	str	r3, [sp, #84]	; 0x54
 8019396:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019398:	2b00      	cmp	r3, #0
 801939a:	d0f0      	beq.n	801937e <__gethex+0x386>
 801939c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80193a0:	f104 0314 	add.w	r3, r4, #20
 80193a4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80193a8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80193ac:	f04f 0c00 	mov.w	ip, #0
 80193b0:	4618      	mov	r0, r3
 80193b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80193b6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80193ba:	d01c      	beq.n	80193f6 <__gethex+0x3fe>
 80193bc:	3201      	adds	r2, #1
 80193be:	6002      	str	r2, [r0, #0]
 80193c0:	2f02      	cmp	r7, #2
 80193c2:	f104 0314 	add.w	r3, r4, #20
 80193c6:	d13f      	bne.n	8019448 <__gethex+0x450>
 80193c8:	f8d8 2000 	ldr.w	r2, [r8]
 80193cc:	3a01      	subs	r2, #1
 80193ce:	42b2      	cmp	r2, r6
 80193d0:	d10a      	bne.n	80193e8 <__gethex+0x3f0>
 80193d2:	1171      	asrs	r1, r6, #5
 80193d4:	2201      	movs	r2, #1
 80193d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80193da:	f006 061f 	and.w	r6, r6, #31
 80193de:	fa02 f606 	lsl.w	r6, r2, r6
 80193e2:	421e      	tst	r6, r3
 80193e4:	bf18      	it	ne
 80193e6:	4617      	movne	r7, r2
 80193e8:	f047 0720 	orr.w	r7, r7, #32
 80193ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80193ee:	601c      	str	r4, [r3, #0]
 80193f0:	9b04      	ldr	r3, [sp, #16]
 80193f2:	601d      	str	r5, [r3, #0]
 80193f4:	e695      	b.n	8019122 <__gethex+0x12a>
 80193f6:	4299      	cmp	r1, r3
 80193f8:	f843 cc04 	str.w	ip, [r3, #-4]
 80193fc:	d8d8      	bhi.n	80193b0 <__gethex+0x3b8>
 80193fe:	68a3      	ldr	r3, [r4, #8]
 8019400:	459b      	cmp	fp, r3
 8019402:	db19      	blt.n	8019438 <__gethex+0x440>
 8019404:	6861      	ldr	r1, [r4, #4]
 8019406:	ee18 0a10 	vmov	r0, s16
 801940a:	3101      	adds	r1, #1
 801940c:	f000 f91e 	bl	801964c <_Balloc>
 8019410:	4681      	mov	r9, r0
 8019412:	b918      	cbnz	r0, 801941c <__gethex+0x424>
 8019414:	4b1a      	ldr	r3, [pc, #104]	; (8019480 <__gethex+0x488>)
 8019416:	4602      	mov	r2, r0
 8019418:	2184      	movs	r1, #132	; 0x84
 801941a:	e6a8      	b.n	801916e <__gethex+0x176>
 801941c:	6922      	ldr	r2, [r4, #16]
 801941e:	3202      	adds	r2, #2
 8019420:	f104 010c 	add.w	r1, r4, #12
 8019424:	0092      	lsls	r2, r2, #2
 8019426:	300c      	adds	r0, #12
 8019428:	f7fd f892 	bl	8016550 <memcpy>
 801942c:	4621      	mov	r1, r4
 801942e:	ee18 0a10 	vmov	r0, s16
 8019432:	f000 f94b 	bl	80196cc <_Bfree>
 8019436:	464c      	mov	r4, r9
 8019438:	6923      	ldr	r3, [r4, #16]
 801943a:	1c5a      	adds	r2, r3, #1
 801943c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019440:	6122      	str	r2, [r4, #16]
 8019442:	2201      	movs	r2, #1
 8019444:	615a      	str	r2, [r3, #20]
 8019446:	e7bb      	b.n	80193c0 <__gethex+0x3c8>
 8019448:	6922      	ldr	r2, [r4, #16]
 801944a:	455a      	cmp	r2, fp
 801944c:	dd0b      	ble.n	8019466 <__gethex+0x46e>
 801944e:	2101      	movs	r1, #1
 8019450:	4620      	mov	r0, r4
 8019452:	f7ff fd69 	bl	8018f28 <rshift>
 8019456:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801945a:	3501      	adds	r5, #1
 801945c:	42ab      	cmp	r3, r5
 801945e:	f6ff aed0 	blt.w	8019202 <__gethex+0x20a>
 8019462:	2701      	movs	r7, #1
 8019464:	e7c0      	b.n	80193e8 <__gethex+0x3f0>
 8019466:	f016 061f 	ands.w	r6, r6, #31
 801946a:	d0fa      	beq.n	8019462 <__gethex+0x46a>
 801946c:	449a      	add	sl, r3
 801946e:	f1c6 0620 	rsb	r6, r6, #32
 8019472:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8019476:	f000 f9df 	bl	8019838 <__hi0bits>
 801947a:	42b0      	cmp	r0, r6
 801947c:	dbe7      	blt.n	801944e <__gethex+0x456>
 801947e:	e7f0      	b.n	8019462 <__gethex+0x46a>
 8019480:	0801cd04 	.word	0x0801cd04

08019484 <L_shift>:
 8019484:	f1c2 0208 	rsb	r2, r2, #8
 8019488:	0092      	lsls	r2, r2, #2
 801948a:	b570      	push	{r4, r5, r6, lr}
 801948c:	f1c2 0620 	rsb	r6, r2, #32
 8019490:	6843      	ldr	r3, [r0, #4]
 8019492:	6804      	ldr	r4, [r0, #0]
 8019494:	fa03 f506 	lsl.w	r5, r3, r6
 8019498:	432c      	orrs	r4, r5
 801949a:	40d3      	lsrs	r3, r2
 801949c:	6004      	str	r4, [r0, #0]
 801949e:	f840 3f04 	str.w	r3, [r0, #4]!
 80194a2:	4288      	cmp	r0, r1
 80194a4:	d3f4      	bcc.n	8019490 <L_shift+0xc>
 80194a6:	bd70      	pop	{r4, r5, r6, pc}

080194a8 <__match>:
 80194a8:	b530      	push	{r4, r5, lr}
 80194aa:	6803      	ldr	r3, [r0, #0]
 80194ac:	3301      	adds	r3, #1
 80194ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80194b2:	b914      	cbnz	r4, 80194ba <__match+0x12>
 80194b4:	6003      	str	r3, [r0, #0]
 80194b6:	2001      	movs	r0, #1
 80194b8:	bd30      	pop	{r4, r5, pc}
 80194ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80194be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80194c2:	2d19      	cmp	r5, #25
 80194c4:	bf98      	it	ls
 80194c6:	3220      	addls	r2, #32
 80194c8:	42a2      	cmp	r2, r4
 80194ca:	d0f0      	beq.n	80194ae <__match+0x6>
 80194cc:	2000      	movs	r0, #0
 80194ce:	e7f3      	b.n	80194b8 <__match+0x10>

080194d0 <__hexnan>:
 80194d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194d4:	680b      	ldr	r3, [r1, #0]
 80194d6:	6801      	ldr	r1, [r0, #0]
 80194d8:	115e      	asrs	r6, r3, #5
 80194da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80194de:	f013 031f 	ands.w	r3, r3, #31
 80194e2:	b087      	sub	sp, #28
 80194e4:	bf18      	it	ne
 80194e6:	3604      	addne	r6, #4
 80194e8:	2500      	movs	r5, #0
 80194ea:	1f37      	subs	r7, r6, #4
 80194ec:	4682      	mov	sl, r0
 80194ee:	4690      	mov	r8, r2
 80194f0:	9301      	str	r3, [sp, #4]
 80194f2:	f846 5c04 	str.w	r5, [r6, #-4]
 80194f6:	46b9      	mov	r9, r7
 80194f8:	463c      	mov	r4, r7
 80194fa:	9502      	str	r5, [sp, #8]
 80194fc:	46ab      	mov	fp, r5
 80194fe:	784a      	ldrb	r2, [r1, #1]
 8019500:	1c4b      	adds	r3, r1, #1
 8019502:	9303      	str	r3, [sp, #12]
 8019504:	b342      	cbz	r2, 8019558 <__hexnan+0x88>
 8019506:	4610      	mov	r0, r2
 8019508:	9105      	str	r1, [sp, #20]
 801950a:	9204      	str	r2, [sp, #16]
 801950c:	f7ff fd5e 	bl	8018fcc <__hexdig_fun>
 8019510:	2800      	cmp	r0, #0
 8019512:	d14f      	bne.n	80195b4 <__hexnan+0xe4>
 8019514:	9a04      	ldr	r2, [sp, #16]
 8019516:	9905      	ldr	r1, [sp, #20]
 8019518:	2a20      	cmp	r2, #32
 801951a:	d818      	bhi.n	801954e <__hexnan+0x7e>
 801951c:	9b02      	ldr	r3, [sp, #8]
 801951e:	459b      	cmp	fp, r3
 8019520:	dd13      	ble.n	801954a <__hexnan+0x7a>
 8019522:	454c      	cmp	r4, r9
 8019524:	d206      	bcs.n	8019534 <__hexnan+0x64>
 8019526:	2d07      	cmp	r5, #7
 8019528:	dc04      	bgt.n	8019534 <__hexnan+0x64>
 801952a:	462a      	mov	r2, r5
 801952c:	4649      	mov	r1, r9
 801952e:	4620      	mov	r0, r4
 8019530:	f7ff ffa8 	bl	8019484 <L_shift>
 8019534:	4544      	cmp	r4, r8
 8019536:	d950      	bls.n	80195da <__hexnan+0x10a>
 8019538:	2300      	movs	r3, #0
 801953a:	f1a4 0904 	sub.w	r9, r4, #4
 801953e:	f844 3c04 	str.w	r3, [r4, #-4]
 8019542:	f8cd b008 	str.w	fp, [sp, #8]
 8019546:	464c      	mov	r4, r9
 8019548:	461d      	mov	r5, r3
 801954a:	9903      	ldr	r1, [sp, #12]
 801954c:	e7d7      	b.n	80194fe <__hexnan+0x2e>
 801954e:	2a29      	cmp	r2, #41	; 0x29
 8019550:	d156      	bne.n	8019600 <__hexnan+0x130>
 8019552:	3102      	adds	r1, #2
 8019554:	f8ca 1000 	str.w	r1, [sl]
 8019558:	f1bb 0f00 	cmp.w	fp, #0
 801955c:	d050      	beq.n	8019600 <__hexnan+0x130>
 801955e:	454c      	cmp	r4, r9
 8019560:	d206      	bcs.n	8019570 <__hexnan+0xa0>
 8019562:	2d07      	cmp	r5, #7
 8019564:	dc04      	bgt.n	8019570 <__hexnan+0xa0>
 8019566:	462a      	mov	r2, r5
 8019568:	4649      	mov	r1, r9
 801956a:	4620      	mov	r0, r4
 801956c:	f7ff ff8a 	bl	8019484 <L_shift>
 8019570:	4544      	cmp	r4, r8
 8019572:	d934      	bls.n	80195de <__hexnan+0x10e>
 8019574:	f1a8 0204 	sub.w	r2, r8, #4
 8019578:	4623      	mov	r3, r4
 801957a:	f853 1b04 	ldr.w	r1, [r3], #4
 801957e:	f842 1f04 	str.w	r1, [r2, #4]!
 8019582:	429f      	cmp	r7, r3
 8019584:	d2f9      	bcs.n	801957a <__hexnan+0xaa>
 8019586:	1b3b      	subs	r3, r7, r4
 8019588:	f023 0303 	bic.w	r3, r3, #3
 801958c:	3304      	adds	r3, #4
 801958e:	3401      	adds	r4, #1
 8019590:	3e03      	subs	r6, #3
 8019592:	42b4      	cmp	r4, r6
 8019594:	bf88      	it	hi
 8019596:	2304      	movhi	r3, #4
 8019598:	4443      	add	r3, r8
 801959a:	2200      	movs	r2, #0
 801959c:	f843 2b04 	str.w	r2, [r3], #4
 80195a0:	429f      	cmp	r7, r3
 80195a2:	d2fb      	bcs.n	801959c <__hexnan+0xcc>
 80195a4:	683b      	ldr	r3, [r7, #0]
 80195a6:	b91b      	cbnz	r3, 80195b0 <__hexnan+0xe0>
 80195a8:	4547      	cmp	r7, r8
 80195aa:	d127      	bne.n	80195fc <__hexnan+0x12c>
 80195ac:	2301      	movs	r3, #1
 80195ae:	603b      	str	r3, [r7, #0]
 80195b0:	2005      	movs	r0, #5
 80195b2:	e026      	b.n	8019602 <__hexnan+0x132>
 80195b4:	3501      	adds	r5, #1
 80195b6:	2d08      	cmp	r5, #8
 80195b8:	f10b 0b01 	add.w	fp, fp, #1
 80195bc:	dd06      	ble.n	80195cc <__hexnan+0xfc>
 80195be:	4544      	cmp	r4, r8
 80195c0:	d9c3      	bls.n	801954a <__hexnan+0x7a>
 80195c2:	2300      	movs	r3, #0
 80195c4:	f844 3c04 	str.w	r3, [r4, #-4]
 80195c8:	2501      	movs	r5, #1
 80195ca:	3c04      	subs	r4, #4
 80195cc:	6822      	ldr	r2, [r4, #0]
 80195ce:	f000 000f 	and.w	r0, r0, #15
 80195d2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80195d6:	6022      	str	r2, [r4, #0]
 80195d8:	e7b7      	b.n	801954a <__hexnan+0x7a>
 80195da:	2508      	movs	r5, #8
 80195dc:	e7b5      	b.n	801954a <__hexnan+0x7a>
 80195de:	9b01      	ldr	r3, [sp, #4]
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d0df      	beq.n	80195a4 <__hexnan+0xd4>
 80195e4:	f04f 32ff 	mov.w	r2, #4294967295
 80195e8:	f1c3 0320 	rsb	r3, r3, #32
 80195ec:	fa22 f303 	lsr.w	r3, r2, r3
 80195f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80195f4:	401a      	ands	r2, r3
 80195f6:	f846 2c04 	str.w	r2, [r6, #-4]
 80195fa:	e7d3      	b.n	80195a4 <__hexnan+0xd4>
 80195fc:	3f04      	subs	r7, #4
 80195fe:	e7d1      	b.n	80195a4 <__hexnan+0xd4>
 8019600:	2004      	movs	r0, #4
 8019602:	b007      	add	sp, #28
 8019604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019608 <_localeconv_r>:
 8019608:	4800      	ldr	r0, [pc, #0]	; (801960c <_localeconv_r+0x4>)
 801960a:	4770      	bx	lr
 801960c:	20004368 	.word	0x20004368

08019610 <__ascii_mbtowc>:
 8019610:	b082      	sub	sp, #8
 8019612:	b901      	cbnz	r1, 8019616 <__ascii_mbtowc+0x6>
 8019614:	a901      	add	r1, sp, #4
 8019616:	b142      	cbz	r2, 801962a <__ascii_mbtowc+0x1a>
 8019618:	b14b      	cbz	r3, 801962e <__ascii_mbtowc+0x1e>
 801961a:	7813      	ldrb	r3, [r2, #0]
 801961c:	600b      	str	r3, [r1, #0]
 801961e:	7812      	ldrb	r2, [r2, #0]
 8019620:	1e10      	subs	r0, r2, #0
 8019622:	bf18      	it	ne
 8019624:	2001      	movne	r0, #1
 8019626:	b002      	add	sp, #8
 8019628:	4770      	bx	lr
 801962a:	4610      	mov	r0, r2
 801962c:	e7fb      	b.n	8019626 <__ascii_mbtowc+0x16>
 801962e:	f06f 0001 	mvn.w	r0, #1
 8019632:	e7f8      	b.n	8019626 <__ascii_mbtowc+0x16>

08019634 <__malloc_lock>:
 8019634:	4801      	ldr	r0, [pc, #4]	; (801963c <__malloc_lock+0x8>)
 8019636:	f000 be88 	b.w	801a34a <__retarget_lock_acquire_recursive>
 801963a:	bf00      	nop
 801963c:	20011b7c 	.word	0x20011b7c

08019640 <__malloc_unlock>:
 8019640:	4801      	ldr	r0, [pc, #4]	; (8019648 <__malloc_unlock+0x8>)
 8019642:	f000 be83 	b.w	801a34c <__retarget_lock_release_recursive>
 8019646:	bf00      	nop
 8019648:	20011b7c 	.word	0x20011b7c

0801964c <_Balloc>:
 801964c:	b570      	push	{r4, r5, r6, lr}
 801964e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019650:	4604      	mov	r4, r0
 8019652:	460d      	mov	r5, r1
 8019654:	b976      	cbnz	r6, 8019674 <_Balloc+0x28>
 8019656:	2010      	movs	r0, #16
 8019658:	f7fc ff6a 	bl	8016530 <malloc>
 801965c:	4602      	mov	r2, r0
 801965e:	6260      	str	r0, [r4, #36]	; 0x24
 8019660:	b920      	cbnz	r0, 801966c <_Balloc+0x20>
 8019662:	4b18      	ldr	r3, [pc, #96]	; (80196c4 <_Balloc+0x78>)
 8019664:	4818      	ldr	r0, [pc, #96]	; (80196c8 <_Balloc+0x7c>)
 8019666:	2166      	movs	r1, #102	; 0x66
 8019668:	f000 fe3e 	bl	801a2e8 <__assert_func>
 801966c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019670:	6006      	str	r6, [r0, #0]
 8019672:	60c6      	str	r6, [r0, #12]
 8019674:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019676:	68f3      	ldr	r3, [r6, #12]
 8019678:	b183      	cbz	r3, 801969c <_Balloc+0x50>
 801967a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801967c:	68db      	ldr	r3, [r3, #12]
 801967e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019682:	b9b8      	cbnz	r0, 80196b4 <_Balloc+0x68>
 8019684:	2101      	movs	r1, #1
 8019686:	fa01 f605 	lsl.w	r6, r1, r5
 801968a:	1d72      	adds	r2, r6, #5
 801968c:	0092      	lsls	r2, r2, #2
 801968e:	4620      	mov	r0, r4
 8019690:	f000 fc97 	bl	8019fc2 <_calloc_r>
 8019694:	b160      	cbz	r0, 80196b0 <_Balloc+0x64>
 8019696:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801969a:	e00e      	b.n	80196ba <_Balloc+0x6e>
 801969c:	2221      	movs	r2, #33	; 0x21
 801969e:	2104      	movs	r1, #4
 80196a0:	4620      	mov	r0, r4
 80196a2:	f000 fc8e 	bl	8019fc2 <_calloc_r>
 80196a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80196a8:	60f0      	str	r0, [r6, #12]
 80196aa:	68db      	ldr	r3, [r3, #12]
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	d1e4      	bne.n	801967a <_Balloc+0x2e>
 80196b0:	2000      	movs	r0, #0
 80196b2:	bd70      	pop	{r4, r5, r6, pc}
 80196b4:	6802      	ldr	r2, [r0, #0]
 80196b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80196ba:	2300      	movs	r3, #0
 80196bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80196c0:	e7f7      	b.n	80196b2 <_Balloc+0x66>
 80196c2:	bf00      	nop
 80196c4:	0801cc8e 	.word	0x0801cc8e
 80196c8:	0801cd94 	.word	0x0801cd94

080196cc <_Bfree>:
 80196cc:	b570      	push	{r4, r5, r6, lr}
 80196ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80196d0:	4605      	mov	r5, r0
 80196d2:	460c      	mov	r4, r1
 80196d4:	b976      	cbnz	r6, 80196f4 <_Bfree+0x28>
 80196d6:	2010      	movs	r0, #16
 80196d8:	f7fc ff2a 	bl	8016530 <malloc>
 80196dc:	4602      	mov	r2, r0
 80196de:	6268      	str	r0, [r5, #36]	; 0x24
 80196e0:	b920      	cbnz	r0, 80196ec <_Bfree+0x20>
 80196e2:	4b09      	ldr	r3, [pc, #36]	; (8019708 <_Bfree+0x3c>)
 80196e4:	4809      	ldr	r0, [pc, #36]	; (801970c <_Bfree+0x40>)
 80196e6:	218a      	movs	r1, #138	; 0x8a
 80196e8:	f000 fdfe 	bl	801a2e8 <__assert_func>
 80196ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80196f0:	6006      	str	r6, [r0, #0]
 80196f2:	60c6      	str	r6, [r0, #12]
 80196f4:	b13c      	cbz	r4, 8019706 <_Bfree+0x3a>
 80196f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80196f8:	6862      	ldr	r2, [r4, #4]
 80196fa:	68db      	ldr	r3, [r3, #12]
 80196fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019700:	6021      	str	r1, [r4, #0]
 8019702:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019706:	bd70      	pop	{r4, r5, r6, pc}
 8019708:	0801cc8e 	.word	0x0801cc8e
 801970c:	0801cd94 	.word	0x0801cd94

08019710 <__multadd>:
 8019710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019714:	690e      	ldr	r6, [r1, #16]
 8019716:	4607      	mov	r7, r0
 8019718:	4698      	mov	r8, r3
 801971a:	460c      	mov	r4, r1
 801971c:	f101 0014 	add.w	r0, r1, #20
 8019720:	2300      	movs	r3, #0
 8019722:	6805      	ldr	r5, [r0, #0]
 8019724:	b2a9      	uxth	r1, r5
 8019726:	fb02 8101 	mla	r1, r2, r1, r8
 801972a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801972e:	0c2d      	lsrs	r5, r5, #16
 8019730:	fb02 c505 	mla	r5, r2, r5, ip
 8019734:	b289      	uxth	r1, r1
 8019736:	3301      	adds	r3, #1
 8019738:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801973c:	429e      	cmp	r6, r3
 801973e:	f840 1b04 	str.w	r1, [r0], #4
 8019742:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8019746:	dcec      	bgt.n	8019722 <__multadd+0x12>
 8019748:	f1b8 0f00 	cmp.w	r8, #0
 801974c:	d022      	beq.n	8019794 <__multadd+0x84>
 801974e:	68a3      	ldr	r3, [r4, #8]
 8019750:	42b3      	cmp	r3, r6
 8019752:	dc19      	bgt.n	8019788 <__multadd+0x78>
 8019754:	6861      	ldr	r1, [r4, #4]
 8019756:	4638      	mov	r0, r7
 8019758:	3101      	adds	r1, #1
 801975a:	f7ff ff77 	bl	801964c <_Balloc>
 801975e:	4605      	mov	r5, r0
 8019760:	b928      	cbnz	r0, 801976e <__multadd+0x5e>
 8019762:	4602      	mov	r2, r0
 8019764:	4b0d      	ldr	r3, [pc, #52]	; (801979c <__multadd+0x8c>)
 8019766:	480e      	ldr	r0, [pc, #56]	; (80197a0 <__multadd+0x90>)
 8019768:	21b5      	movs	r1, #181	; 0xb5
 801976a:	f000 fdbd 	bl	801a2e8 <__assert_func>
 801976e:	6922      	ldr	r2, [r4, #16]
 8019770:	3202      	adds	r2, #2
 8019772:	f104 010c 	add.w	r1, r4, #12
 8019776:	0092      	lsls	r2, r2, #2
 8019778:	300c      	adds	r0, #12
 801977a:	f7fc fee9 	bl	8016550 <memcpy>
 801977e:	4621      	mov	r1, r4
 8019780:	4638      	mov	r0, r7
 8019782:	f7ff ffa3 	bl	80196cc <_Bfree>
 8019786:	462c      	mov	r4, r5
 8019788:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801978c:	3601      	adds	r6, #1
 801978e:	f8c3 8014 	str.w	r8, [r3, #20]
 8019792:	6126      	str	r6, [r4, #16]
 8019794:	4620      	mov	r0, r4
 8019796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801979a:	bf00      	nop
 801979c:	0801cd04 	.word	0x0801cd04
 80197a0:	0801cd94 	.word	0x0801cd94

080197a4 <__s2b>:
 80197a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80197a8:	460c      	mov	r4, r1
 80197aa:	4615      	mov	r5, r2
 80197ac:	461f      	mov	r7, r3
 80197ae:	2209      	movs	r2, #9
 80197b0:	3308      	adds	r3, #8
 80197b2:	4606      	mov	r6, r0
 80197b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80197b8:	2100      	movs	r1, #0
 80197ba:	2201      	movs	r2, #1
 80197bc:	429a      	cmp	r2, r3
 80197be:	db09      	blt.n	80197d4 <__s2b+0x30>
 80197c0:	4630      	mov	r0, r6
 80197c2:	f7ff ff43 	bl	801964c <_Balloc>
 80197c6:	b940      	cbnz	r0, 80197da <__s2b+0x36>
 80197c8:	4602      	mov	r2, r0
 80197ca:	4b19      	ldr	r3, [pc, #100]	; (8019830 <__s2b+0x8c>)
 80197cc:	4819      	ldr	r0, [pc, #100]	; (8019834 <__s2b+0x90>)
 80197ce:	21ce      	movs	r1, #206	; 0xce
 80197d0:	f000 fd8a 	bl	801a2e8 <__assert_func>
 80197d4:	0052      	lsls	r2, r2, #1
 80197d6:	3101      	adds	r1, #1
 80197d8:	e7f0      	b.n	80197bc <__s2b+0x18>
 80197da:	9b08      	ldr	r3, [sp, #32]
 80197dc:	6143      	str	r3, [r0, #20]
 80197de:	2d09      	cmp	r5, #9
 80197e0:	f04f 0301 	mov.w	r3, #1
 80197e4:	6103      	str	r3, [r0, #16]
 80197e6:	dd16      	ble.n	8019816 <__s2b+0x72>
 80197e8:	f104 0909 	add.w	r9, r4, #9
 80197ec:	46c8      	mov	r8, r9
 80197ee:	442c      	add	r4, r5
 80197f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80197f4:	4601      	mov	r1, r0
 80197f6:	3b30      	subs	r3, #48	; 0x30
 80197f8:	220a      	movs	r2, #10
 80197fa:	4630      	mov	r0, r6
 80197fc:	f7ff ff88 	bl	8019710 <__multadd>
 8019800:	45a0      	cmp	r8, r4
 8019802:	d1f5      	bne.n	80197f0 <__s2b+0x4c>
 8019804:	f1a5 0408 	sub.w	r4, r5, #8
 8019808:	444c      	add	r4, r9
 801980a:	1b2d      	subs	r5, r5, r4
 801980c:	1963      	adds	r3, r4, r5
 801980e:	42bb      	cmp	r3, r7
 8019810:	db04      	blt.n	801981c <__s2b+0x78>
 8019812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019816:	340a      	adds	r4, #10
 8019818:	2509      	movs	r5, #9
 801981a:	e7f6      	b.n	801980a <__s2b+0x66>
 801981c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019820:	4601      	mov	r1, r0
 8019822:	3b30      	subs	r3, #48	; 0x30
 8019824:	220a      	movs	r2, #10
 8019826:	4630      	mov	r0, r6
 8019828:	f7ff ff72 	bl	8019710 <__multadd>
 801982c:	e7ee      	b.n	801980c <__s2b+0x68>
 801982e:	bf00      	nop
 8019830:	0801cd04 	.word	0x0801cd04
 8019834:	0801cd94 	.word	0x0801cd94

08019838 <__hi0bits>:
 8019838:	0c03      	lsrs	r3, r0, #16
 801983a:	041b      	lsls	r3, r3, #16
 801983c:	b9d3      	cbnz	r3, 8019874 <__hi0bits+0x3c>
 801983e:	0400      	lsls	r0, r0, #16
 8019840:	2310      	movs	r3, #16
 8019842:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019846:	bf04      	itt	eq
 8019848:	0200      	lsleq	r0, r0, #8
 801984a:	3308      	addeq	r3, #8
 801984c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019850:	bf04      	itt	eq
 8019852:	0100      	lsleq	r0, r0, #4
 8019854:	3304      	addeq	r3, #4
 8019856:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801985a:	bf04      	itt	eq
 801985c:	0080      	lsleq	r0, r0, #2
 801985e:	3302      	addeq	r3, #2
 8019860:	2800      	cmp	r0, #0
 8019862:	db05      	blt.n	8019870 <__hi0bits+0x38>
 8019864:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019868:	f103 0301 	add.w	r3, r3, #1
 801986c:	bf08      	it	eq
 801986e:	2320      	moveq	r3, #32
 8019870:	4618      	mov	r0, r3
 8019872:	4770      	bx	lr
 8019874:	2300      	movs	r3, #0
 8019876:	e7e4      	b.n	8019842 <__hi0bits+0xa>

08019878 <__lo0bits>:
 8019878:	6803      	ldr	r3, [r0, #0]
 801987a:	f013 0207 	ands.w	r2, r3, #7
 801987e:	4601      	mov	r1, r0
 8019880:	d00b      	beq.n	801989a <__lo0bits+0x22>
 8019882:	07da      	lsls	r2, r3, #31
 8019884:	d424      	bmi.n	80198d0 <__lo0bits+0x58>
 8019886:	0798      	lsls	r0, r3, #30
 8019888:	bf49      	itett	mi
 801988a:	085b      	lsrmi	r3, r3, #1
 801988c:	089b      	lsrpl	r3, r3, #2
 801988e:	2001      	movmi	r0, #1
 8019890:	600b      	strmi	r3, [r1, #0]
 8019892:	bf5c      	itt	pl
 8019894:	600b      	strpl	r3, [r1, #0]
 8019896:	2002      	movpl	r0, #2
 8019898:	4770      	bx	lr
 801989a:	b298      	uxth	r0, r3
 801989c:	b9b0      	cbnz	r0, 80198cc <__lo0bits+0x54>
 801989e:	0c1b      	lsrs	r3, r3, #16
 80198a0:	2010      	movs	r0, #16
 80198a2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80198a6:	bf04      	itt	eq
 80198a8:	0a1b      	lsreq	r3, r3, #8
 80198aa:	3008      	addeq	r0, #8
 80198ac:	071a      	lsls	r2, r3, #28
 80198ae:	bf04      	itt	eq
 80198b0:	091b      	lsreq	r3, r3, #4
 80198b2:	3004      	addeq	r0, #4
 80198b4:	079a      	lsls	r2, r3, #30
 80198b6:	bf04      	itt	eq
 80198b8:	089b      	lsreq	r3, r3, #2
 80198ba:	3002      	addeq	r0, #2
 80198bc:	07da      	lsls	r2, r3, #31
 80198be:	d403      	bmi.n	80198c8 <__lo0bits+0x50>
 80198c0:	085b      	lsrs	r3, r3, #1
 80198c2:	f100 0001 	add.w	r0, r0, #1
 80198c6:	d005      	beq.n	80198d4 <__lo0bits+0x5c>
 80198c8:	600b      	str	r3, [r1, #0]
 80198ca:	4770      	bx	lr
 80198cc:	4610      	mov	r0, r2
 80198ce:	e7e8      	b.n	80198a2 <__lo0bits+0x2a>
 80198d0:	2000      	movs	r0, #0
 80198d2:	4770      	bx	lr
 80198d4:	2020      	movs	r0, #32
 80198d6:	4770      	bx	lr

080198d8 <__i2b>:
 80198d8:	b510      	push	{r4, lr}
 80198da:	460c      	mov	r4, r1
 80198dc:	2101      	movs	r1, #1
 80198de:	f7ff feb5 	bl	801964c <_Balloc>
 80198e2:	4602      	mov	r2, r0
 80198e4:	b928      	cbnz	r0, 80198f2 <__i2b+0x1a>
 80198e6:	4b05      	ldr	r3, [pc, #20]	; (80198fc <__i2b+0x24>)
 80198e8:	4805      	ldr	r0, [pc, #20]	; (8019900 <__i2b+0x28>)
 80198ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80198ee:	f000 fcfb 	bl	801a2e8 <__assert_func>
 80198f2:	2301      	movs	r3, #1
 80198f4:	6144      	str	r4, [r0, #20]
 80198f6:	6103      	str	r3, [r0, #16]
 80198f8:	bd10      	pop	{r4, pc}
 80198fa:	bf00      	nop
 80198fc:	0801cd04 	.word	0x0801cd04
 8019900:	0801cd94 	.word	0x0801cd94

08019904 <__multiply>:
 8019904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019908:	4614      	mov	r4, r2
 801990a:	690a      	ldr	r2, [r1, #16]
 801990c:	6923      	ldr	r3, [r4, #16]
 801990e:	429a      	cmp	r2, r3
 8019910:	bfb8      	it	lt
 8019912:	460b      	movlt	r3, r1
 8019914:	460d      	mov	r5, r1
 8019916:	bfbc      	itt	lt
 8019918:	4625      	movlt	r5, r4
 801991a:	461c      	movlt	r4, r3
 801991c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8019920:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019924:	68ab      	ldr	r3, [r5, #8]
 8019926:	6869      	ldr	r1, [r5, #4]
 8019928:	eb0a 0709 	add.w	r7, sl, r9
 801992c:	42bb      	cmp	r3, r7
 801992e:	b085      	sub	sp, #20
 8019930:	bfb8      	it	lt
 8019932:	3101      	addlt	r1, #1
 8019934:	f7ff fe8a 	bl	801964c <_Balloc>
 8019938:	b930      	cbnz	r0, 8019948 <__multiply+0x44>
 801993a:	4602      	mov	r2, r0
 801993c:	4b42      	ldr	r3, [pc, #264]	; (8019a48 <__multiply+0x144>)
 801993e:	4843      	ldr	r0, [pc, #268]	; (8019a4c <__multiply+0x148>)
 8019940:	f240 115d 	movw	r1, #349	; 0x15d
 8019944:	f000 fcd0 	bl	801a2e8 <__assert_func>
 8019948:	f100 0614 	add.w	r6, r0, #20
 801994c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8019950:	4633      	mov	r3, r6
 8019952:	2200      	movs	r2, #0
 8019954:	4543      	cmp	r3, r8
 8019956:	d31e      	bcc.n	8019996 <__multiply+0x92>
 8019958:	f105 0c14 	add.w	ip, r5, #20
 801995c:	f104 0314 	add.w	r3, r4, #20
 8019960:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8019964:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8019968:	9202      	str	r2, [sp, #8]
 801996a:	ebac 0205 	sub.w	r2, ip, r5
 801996e:	3a15      	subs	r2, #21
 8019970:	f022 0203 	bic.w	r2, r2, #3
 8019974:	3204      	adds	r2, #4
 8019976:	f105 0115 	add.w	r1, r5, #21
 801997a:	458c      	cmp	ip, r1
 801997c:	bf38      	it	cc
 801997e:	2204      	movcc	r2, #4
 8019980:	9201      	str	r2, [sp, #4]
 8019982:	9a02      	ldr	r2, [sp, #8]
 8019984:	9303      	str	r3, [sp, #12]
 8019986:	429a      	cmp	r2, r3
 8019988:	d808      	bhi.n	801999c <__multiply+0x98>
 801998a:	2f00      	cmp	r7, #0
 801998c:	dc55      	bgt.n	8019a3a <__multiply+0x136>
 801998e:	6107      	str	r7, [r0, #16]
 8019990:	b005      	add	sp, #20
 8019992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019996:	f843 2b04 	str.w	r2, [r3], #4
 801999a:	e7db      	b.n	8019954 <__multiply+0x50>
 801999c:	f8b3 a000 	ldrh.w	sl, [r3]
 80199a0:	f1ba 0f00 	cmp.w	sl, #0
 80199a4:	d020      	beq.n	80199e8 <__multiply+0xe4>
 80199a6:	f105 0e14 	add.w	lr, r5, #20
 80199aa:	46b1      	mov	r9, r6
 80199ac:	2200      	movs	r2, #0
 80199ae:	f85e 4b04 	ldr.w	r4, [lr], #4
 80199b2:	f8d9 b000 	ldr.w	fp, [r9]
 80199b6:	b2a1      	uxth	r1, r4
 80199b8:	fa1f fb8b 	uxth.w	fp, fp
 80199bc:	fb0a b101 	mla	r1, sl, r1, fp
 80199c0:	4411      	add	r1, r2
 80199c2:	f8d9 2000 	ldr.w	r2, [r9]
 80199c6:	0c24      	lsrs	r4, r4, #16
 80199c8:	0c12      	lsrs	r2, r2, #16
 80199ca:	fb0a 2404 	mla	r4, sl, r4, r2
 80199ce:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80199d2:	b289      	uxth	r1, r1
 80199d4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80199d8:	45f4      	cmp	ip, lr
 80199da:	f849 1b04 	str.w	r1, [r9], #4
 80199de:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80199e2:	d8e4      	bhi.n	80199ae <__multiply+0xaa>
 80199e4:	9901      	ldr	r1, [sp, #4]
 80199e6:	5072      	str	r2, [r6, r1]
 80199e8:	9a03      	ldr	r2, [sp, #12]
 80199ea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80199ee:	3304      	adds	r3, #4
 80199f0:	f1b9 0f00 	cmp.w	r9, #0
 80199f4:	d01f      	beq.n	8019a36 <__multiply+0x132>
 80199f6:	6834      	ldr	r4, [r6, #0]
 80199f8:	f105 0114 	add.w	r1, r5, #20
 80199fc:	46b6      	mov	lr, r6
 80199fe:	f04f 0a00 	mov.w	sl, #0
 8019a02:	880a      	ldrh	r2, [r1, #0]
 8019a04:	f8be b002 	ldrh.w	fp, [lr, #2]
 8019a08:	fb09 b202 	mla	r2, r9, r2, fp
 8019a0c:	4492      	add	sl, r2
 8019a0e:	b2a4      	uxth	r4, r4
 8019a10:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8019a14:	f84e 4b04 	str.w	r4, [lr], #4
 8019a18:	f851 4b04 	ldr.w	r4, [r1], #4
 8019a1c:	f8be 2000 	ldrh.w	r2, [lr]
 8019a20:	0c24      	lsrs	r4, r4, #16
 8019a22:	fb09 2404 	mla	r4, r9, r4, r2
 8019a26:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8019a2a:	458c      	cmp	ip, r1
 8019a2c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8019a30:	d8e7      	bhi.n	8019a02 <__multiply+0xfe>
 8019a32:	9a01      	ldr	r2, [sp, #4]
 8019a34:	50b4      	str	r4, [r6, r2]
 8019a36:	3604      	adds	r6, #4
 8019a38:	e7a3      	b.n	8019982 <__multiply+0x7e>
 8019a3a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d1a5      	bne.n	801998e <__multiply+0x8a>
 8019a42:	3f01      	subs	r7, #1
 8019a44:	e7a1      	b.n	801998a <__multiply+0x86>
 8019a46:	bf00      	nop
 8019a48:	0801cd04 	.word	0x0801cd04
 8019a4c:	0801cd94 	.word	0x0801cd94

08019a50 <__pow5mult>:
 8019a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a54:	4615      	mov	r5, r2
 8019a56:	f012 0203 	ands.w	r2, r2, #3
 8019a5a:	4606      	mov	r6, r0
 8019a5c:	460f      	mov	r7, r1
 8019a5e:	d007      	beq.n	8019a70 <__pow5mult+0x20>
 8019a60:	4c25      	ldr	r4, [pc, #148]	; (8019af8 <__pow5mult+0xa8>)
 8019a62:	3a01      	subs	r2, #1
 8019a64:	2300      	movs	r3, #0
 8019a66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019a6a:	f7ff fe51 	bl	8019710 <__multadd>
 8019a6e:	4607      	mov	r7, r0
 8019a70:	10ad      	asrs	r5, r5, #2
 8019a72:	d03d      	beq.n	8019af0 <__pow5mult+0xa0>
 8019a74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019a76:	b97c      	cbnz	r4, 8019a98 <__pow5mult+0x48>
 8019a78:	2010      	movs	r0, #16
 8019a7a:	f7fc fd59 	bl	8016530 <malloc>
 8019a7e:	4602      	mov	r2, r0
 8019a80:	6270      	str	r0, [r6, #36]	; 0x24
 8019a82:	b928      	cbnz	r0, 8019a90 <__pow5mult+0x40>
 8019a84:	4b1d      	ldr	r3, [pc, #116]	; (8019afc <__pow5mult+0xac>)
 8019a86:	481e      	ldr	r0, [pc, #120]	; (8019b00 <__pow5mult+0xb0>)
 8019a88:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019a8c:	f000 fc2c 	bl	801a2e8 <__assert_func>
 8019a90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019a94:	6004      	str	r4, [r0, #0]
 8019a96:	60c4      	str	r4, [r0, #12]
 8019a98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019a9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019aa0:	b94c      	cbnz	r4, 8019ab6 <__pow5mult+0x66>
 8019aa2:	f240 2171 	movw	r1, #625	; 0x271
 8019aa6:	4630      	mov	r0, r6
 8019aa8:	f7ff ff16 	bl	80198d8 <__i2b>
 8019aac:	2300      	movs	r3, #0
 8019aae:	f8c8 0008 	str.w	r0, [r8, #8]
 8019ab2:	4604      	mov	r4, r0
 8019ab4:	6003      	str	r3, [r0, #0]
 8019ab6:	f04f 0900 	mov.w	r9, #0
 8019aba:	07eb      	lsls	r3, r5, #31
 8019abc:	d50a      	bpl.n	8019ad4 <__pow5mult+0x84>
 8019abe:	4639      	mov	r1, r7
 8019ac0:	4622      	mov	r2, r4
 8019ac2:	4630      	mov	r0, r6
 8019ac4:	f7ff ff1e 	bl	8019904 <__multiply>
 8019ac8:	4639      	mov	r1, r7
 8019aca:	4680      	mov	r8, r0
 8019acc:	4630      	mov	r0, r6
 8019ace:	f7ff fdfd 	bl	80196cc <_Bfree>
 8019ad2:	4647      	mov	r7, r8
 8019ad4:	106d      	asrs	r5, r5, #1
 8019ad6:	d00b      	beq.n	8019af0 <__pow5mult+0xa0>
 8019ad8:	6820      	ldr	r0, [r4, #0]
 8019ada:	b938      	cbnz	r0, 8019aec <__pow5mult+0x9c>
 8019adc:	4622      	mov	r2, r4
 8019ade:	4621      	mov	r1, r4
 8019ae0:	4630      	mov	r0, r6
 8019ae2:	f7ff ff0f 	bl	8019904 <__multiply>
 8019ae6:	6020      	str	r0, [r4, #0]
 8019ae8:	f8c0 9000 	str.w	r9, [r0]
 8019aec:	4604      	mov	r4, r0
 8019aee:	e7e4      	b.n	8019aba <__pow5mult+0x6a>
 8019af0:	4638      	mov	r0, r7
 8019af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019af6:	bf00      	nop
 8019af8:	0801cee8 	.word	0x0801cee8
 8019afc:	0801cc8e 	.word	0x0801cc8e
 8019b00:	0801cd94 	.word	0x0801cd94

08019b04 <__lshift>:
 8019b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b08:	460c      	mov	r4, r1
 8019b0a:	6849      	ldr	r1, [r1, #4]
 8019b0c:	6923      	ldr	r3, [r4, #16]
 8019b0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019b12:	68a3      	ldr	r3, [r4, #8]
 8019b14:	4607      	mov	r7, r0
 8019b16:	4691      	mov	r9, r2
 8019b18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019b1c:	f108 0601 	add.w	r6, r8, #1
 8019b20:	42b3      	cmp	r3, r6
 8019b22:	db0b      	blt.n	8019b3c <__lshift+0x38>
 8019b24:	4638      	mov	r0, r7
 8019b26:	f7ff fd91 	bl	801964c <_Balloc>
 8019b2a:	4605      	mov	r5, r0
 8019b2c:	b948      	cbnz	r0, 8019b42 <__lshift+0x3e>
 8019b2e:	4602      	mov	r2, r0
 8019b30:	4b28      	ldr	r3, [pc, #160]	; (8019bd4 <__lshift+0xd0>)
 8019b32:	4829      	ldr	r0, [pc, #164]	; (8019bd8 <__lshift+0xd4>)
 8019b34:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019b38:	f000 fbd6 	bl	801a2e8 <__assert_func>
 8019b3c:	3101      	adds	r1, #1
 8019b3e:	005b      	lsls	r3, r3, #1
 8019b40:	e7ee      	b.n	8019b20 <__lshift+0x1c>
 8019b42:	2300      	movs	r3, #0
 8019b44:	f100 0114 	add.w	r1, r0, #20
 8019b48:	f100 0210 	add.w	r2, r0, #16
 8019b4c:	4618      	mov	r0, r3
 8019b4e:	4553      	cmp	r3, sl
 8019b50:	db33      	blt.n	8019bba <__lshift+0xb6>
 8019b52:	6920      	ldr	r0, [r4, #16]
 8019b54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019b58:	f104 0314 	add.w	r3, r4, #20
 8019b5c:	f019 091f 	ands.w	r9, r9, #31
 8019b60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019b64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019b68:	d02b      	beq.n	8019bc2 <__lshift+0xbe>
 8019b6a:	f1c9 0e20 	rsb	lr, r9, #32
 8019b6e:	468a      	mov	sl, r1
 8019b70:	2200      	movs	r2, #0
 8019b72:	6818      	ldr	r0, [r3, #0]
 8019b74:	fa00 f009 	lsl.w	r0, r0, r9
 8019b78:	4302      	orrs	r2, r0
 8019b7a:	f84a 2b04 	str.w	r2, [sl], #4
 8019b7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b82:	459c      	cmp	ip, r3
 8019b84:	fa22 f20e 	lsr.w	r2, r2, lr
 8019b88:	d8f3      	bhi.n	8019b72 <__lshift+0x6e>
 8019b8a:	ebac 0304 	sub.w	r3, ip, r4
 8019b8e:	3b15      	subs	r3, #21
 8019b90:	f023 0303 	bic.w	r3, r3, #3
 8019b94:	3304      	adds	r3, #4
 8019b96:	f104 0015 	add.w	r0, r4, #21
 8019b9a:	4584      	cmp	ip, r0
 8019b9c:	bf38      	it	cc
 8019b9e:	2304      	movcc	r3, #4
 8019ba0:	50ca      	str	r2, [r1, r3]
 8019ba2:	b10a      	cbz	r2, 8019ba8 <__lshift+0xa4>
 8019ba4:	f108 0602 	add.w	r6, r8, #2
 8019ba8:	3e01      	subs	r6, #1
 8019baa:	4638      	mov	r0, r7
 8019bac:	612e      	str	r6, [r5, #16]
 8019bae:	4621      	mov	r1, r4
 8019bb0:	f7ff fd8c 	bl	80196cc <_Bfree>
 8019bb4:	4628      	mov	r0, r5
 8019bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019bba:	f842 0f04 	str.w	r0, [r2, #4]!
 8019bbe:	3301      	adds	r3, #1
 8019bc0:	e7c5      	b.n	8019b4e <__lshift+0x4a>
 8019bc2:	3904      	subs	r1, #4
 8019bc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8019bc8:	f841 2f04 	str.w	r2, [r1, #4]!
 8019bcc:	459c      	cmp	ip, r3
 8019bce:	d8f9      	bhi.n	8019bc4 <__lshift+0xc0>
 8019bd0:	e7ea      	b.n	8019ba8 <__lshift+0xa4>
 8019bd2:	bf00      	nop
 8019bd4:	0801cd04 	.word	0x0801cd04
 8019bd8:	0801cd94 	.word	0x0801cd94

08019bdc <__mcmp>:
 8019bdc:	b530      	push	{r4, r5, lr}
 8019bde:	6902      	ldr	r2, [r0, #16]
 8019be0:	690c      	ldr	r4, [r1, #16]
 8019be2:	1b12      	subs	r2, r2, r4
 8019be4:	d10e      	bne.n	8019c04 <__mcmp+0x28>
 8019be6:	f100 0314 	add.w	r3, r0, #20
 8019bea:	3114      	adds	r1, #20
 8019bec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019bf0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019bf4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019bf8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019bfc:	42a5      	cmp	r5, r4
 8019bfe:	d003      	beq.n	8019c08 <__mcmp+0x2c>
 8019c00:	d305      	bcc.n	8019c0e <__mcmp+0x32>
 8019c02:	2201      	movs	r2, #1
 8019c04:	4610      	mov	r0, r2
 8019c06:	bd30      	pop	{r4, r5, pc}
 8019c08:	4283      	cmp	r3, r0
 8019c0a:	d3f3      	bcc.n	8019bf4 <__mcmp+0x18>
 8019c0c:	e7fa      	b.n	8019c04 <__mcmp+0x28>
 8019c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8019c12:	e7f7      	b.n	8019c04 <__mcmp+0x28>

08019c14 <__mdiff>:
 8019c14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c18:	460c      	mov	r4, r1
 8019c1a:	4606      	mov	r6, r0
 8019c1c:	4611      	mov	r1, r2
 8019c1e:	4620      	mov	r0, r4
 8019c20:	4617      	mov	r7, r2
 8019c22:	f7ff ffdb 	bl	8019bdc <__mcmp>
 8019c26:	1e05      	subs	r5, r0, #0
 8019c28:	d110      	bne.n	8019c4c <__mdiff+0x38>
 8019c2a:	4629      	mov	r1, r5
 8019c2c:	4630      	mov	r0, r6
 8019c2e:	f7ff fd0d 	bl	801964c <_Balloc>
 8019c32:	b930      	cbnz	r0, 8019c42 <__mdiff+0x2e>
 8019c34:	4b39      	ldr	r3, [pc, #228]	; (8019d1c <__mdiff+0x108>)
 8019c36:	4602      	mov	r2, r0
 8019c38:	f240 2132 	movw	r1, #562	; 0x232
 8019c3c:	4838      	ldr	r0, [pc, #224]	; (8019d20 <__mdiff+0x10c>)
 8019c3e:	f000 fb53 	bl	801a2e8 <__assert_func>
 8019c42:	2301      	movs	r3, #1
 8019c44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019c48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c4c:	bfa4      	itt	ge
 8019c4e:	463b      	movge	r3, r7
 8019c50:	4627      	movge	r7, r4
 8019c52:	4630      	mov	r0, r6
 8019c54:	6879      	ldr	r1, [r7, #4]
 8019c56:	bfa6      	itte	ge
 8019c58:	461c      	movge	r4, r3
 8019c5a:	2500      	movge	r5, #0
 8019c5c:	2501      	movlt	r5, #1
 8019c5e:	f7ff fcf5 	bl	801964c <_Balloc>
 8019c62:	b920      	cbnz	r0, 8019c6e <__mdiff+0x5a>
 8019c64:	4b2d      	ldr	r3, [pc, #180]	; (8019d1c <__mdiff+0x108>)
 8019c66:	4602      	mov	r2, r0
 8019c68:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019c6c:	e7e6      	b.n	8019c3c <__mdiff+0x28>
 8019c6e:	693e      	ldr	r6, [r7, #16]
 8019c70:	60c5      	str	r5, [r0, #12]
 8019c72:	6925      	ldr	r5, [r4, #16]
 8019c74:	f107 0114 	add.w	r1, r7, #20
 8019c78:	f104 0914 	add.w	r9, r4, #20
 8019c7c:	f100 0e14 	add.w	lr, r0, #20
 8019c80:	f107 0210 	add.w	r2, r7, #16
 8019c84:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8019c88:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8019c8c:	46f2      	mov	sl, lr
 8019c8e:	2700      	movs	r7, #0
 8019c90:	f859 3b04 	ldr.w	r3, [r9], #4
 8019c94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019c98:	fa1f f883 	uxth.w	r8, r3
 8019c9c:	fa17 f78b 	uxtah	r7, r7, fp
 8019ca0:	0c1b      	lsrs	r3, r3, #16
 8019ca2:	eba7 0808 	sub.w	r8, r7, r8
 8019ca6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019caa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019cae:	fa1f f888 	uxth.w	r8, r8
 8019cb2:	141f      	asrs	r7, r3, #16
 8019cb4:	454d      	cmp	r5, r9
 8019cb6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019cba:	f84a 3b04 	str.w	r3, [sl], #4
 8019cbe:	d8e7      	bhi.n	8019c90 <__mdiff+0x7c>
 8019cc0:	1b2b      	subs	r3, r5, r4
 8019cc2:	3b15      	subs	r3, #21
 8019cc4:	f023 0303 	bic.w	r3, r3, #3
 8019cc8:	3304      	adds	r3, #4
 8019cca:	3415      	adds	r4, #21
 8019ccc:	42a5      	cmp	r5, r4
 8019cce:	bf38      	it	cc
 8019cd0:	2304      	movcc	r3, #4
 8019cd2:	4419      	add	r1, r3
 8019cd4:	4473      	add	r3, lr
 8019cd6:	469e      	mov	lr, r3
 8019cd8:	460d      	mov	r5, r1
 8019cda:	4565      	cmp	r5, ip
 8019cdc:	d30e      	bcc.n	8019cfc <__mdiff+0xe8>
 8019cde:	f10c 0203 	add.w	r2, ip, #3
 8019ce2:	1a52      	subs	r2, r2, r1
 8019ce4:	f022 0203 	bic.w	r2, r2, #3
 8019ce8:	3903      	subs	r1, #3
 8019cea:	458c      	cmp	ip, r1
 8019cec:	bf38      	it	cc
 8019cee:	2200      	movcc	r2, #0
 8019cf0:	441a      	add	r2, r3
 8019cf2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019cf6:	b17b      	cbz	r3, 8019d18 <__mdiff+0x104>
 8019cf8:	6106      	str	r6, [r0, #16]
 8019cfa:	e7a5      	b.n	8019c48 <__mdiff+0x34>
 8019cfc:	f855 8b04 	ldr.w	r8, [r5], #4
 8019d00:	fa17 f488 	uxtah	r4, r7, r8
 8019d04:	1422      	asrs	r2, r4, #16
 8019d06:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8019d0a:	b2a4      	uxth	r4, r4
 8019d0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019d10:	f84e 4b04 	str.w	r4, [lr], #4
 8019d14:	1417      	asrs	r7, r2, #16
 8019d16:	e7e0      	b.n	8019cda <__mdiff+0xc6>
 8019d18:	3e01      	subs	r6, #1
 8019d1a:	e7ea      	b.n	8019cf2 <__mdiff+0xde>
 8019d1c:	0801cd04 	.word	0x0801cd04
 8019d20:	0801cd94 	.word	0x0801cd94

08019d24 <__ulp>:
 8019d24:	b082      	sub	sp, #8
 8019d26:	ed8d 0b00 	vstr	d0, [sp]
 8019d2a:	9b01      	ldr	r3, [sp, #4]
 8019d2c:	4912      	ldr	r1, [pc, #72]	; (8019d78 <__ulp+0x54>)
 8019d2e:	4019      	ands	r1, r3
 8019d30:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019d34:	2900      	cmp	r1, #0
 8019d36:	dd05      	ble.n	8019d44 <__ulp+0x20>
 8019d38:	2200      	movs	r2, #0
 8019d3a:	460b      	mov	r3, r1
 8019d3c:	ec43 2b10 	vmov	d0, r2, r3
 8019d40:	b002      	add	sp, #8
 8019d42:	4770      	bx	lr
 8019d44:	4249      	negs	r1, r1
 8019d46:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8019d4a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8019d4e:	f04f 0200 	mov.w	r2, #0
 8019d52:	f04f 0300 	mov.w	r3, #0
 8019d56:	da04      	bge.n	8019d62 <__ulp+0x3e>
 8019d58:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8019d5c:	fa41 f300 	asr.w	r3, r1, r0
 8019d60:	e7ec      	b.n	8019d3c <__ulp+0x18>
 8019d62:	f1a0 0114 	sub.w	r1, r0, #20
 8019d66:	291e      	cmp	r1, #30
 8019d68:	bfda      	itte	le
 8019d6a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8019d6e:	fa20 f101 	lsrle.w	r1, r0, r1
 8019d72:	2101      	movgt	r1, #1
 8019d74:	460a      	mov	r2, r1
 8019d76:	e7e1      	b.n	8019d3c <__ulp+0x18>
 8019d78:	7ff00000 	.word	0x7ff00000

08019d7c <__b2d>:
 8019d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d7e:	6905      	ldr	r5, [r0, #16]
 8019d80:	f100 0714 	add.w	r7, r0, #20
 8019d84:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019d88:	1f2e      	subs	r6, r5, #4
 8019d8a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8019d8e:	4620      	mov	r0, r4
 8019d90:	f7ff fd52 	bl	8019838 <__hi0bits>
 8019d94:	f1c0 0320 	rsb	r3, r0, #32
 8019d98:	280a      	cmp	r0, #10
 8019d9a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8019e18 <__b2d+0x9c>
 8019d9e:	600b      	str	r3, [r1, #0]
 8019da0:	dc14      	bgt.n	8019dcc <__b2d+0x50>
 8019da2:	f1c0 0e0b 	rsb	lr, r0, #11
 8019da6:	fa24 f10e 	lsr.w	r1, r4, lr
 8019daa:	42b7      	cmp	r7, r6
 8019dac:	ea41 030c 	orr.w	r3, r1, ip
 8019db0:	bf34      	ite	cc
 8019db2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019db6:	2100      	movcs	r1, #0
 8019db8:	3015      	adds	r0, #21
 8019dba:	fa04 f000 	lsl.w	r0, r4, r0
 8019dbe:	fa21 f10e 	lsr.w	r1, r1, lr
 8019dc2:	ea40 0201 	orr.w	r2, r0, r1
 8019dc6:	ec43 2b10 	vmov	d0, r2, r3
 8019dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019dcc:	42b7      	cmp	r7, r6
 8019dce:	bf3a      	itte	cc
 8019dd0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019dd4:	f1a5 0608 	subcc.w	r6, r5, #8
 8019dd8:	2100      	movcs	r1, #0
 8019dda:	380b      	subs	r0, #11
 8019ddc:	d017      	beq.n	8019e0e <__b2d+0x92>
 8019dde:	f1c0 0c20 	rsb	ip, r0, #32
 8019de2:	fa04 f500 	lsl.w	r5, r4, r0
 8019de6:	42be      	cmp	r6, r7
 8019de8:	fa21 f40c 	lsr.w	r4, r1, ip
 8019dec:	ea45 0504 	orr.w	r5, r5, r4
 8019df0:	bf8c      	ite	hi
 8019df2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019df6:	2400      	movls	r4, #0
 8019df8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8019dfc:	fa01 f000 	lsl.w	r0, r1, r0
 8019e00:	fa24 f40c 	lsr.w	r4, r4, ip
 8019e04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019e08:	ea40 0204 	orr.w	r2, r0, r4
 8019e0c:	e7db      	b.n	8019dc6 <__b2d+0x4a>
 8019e0e:	ea44 030c 	orr.w	r3, r4, ip
 8019e12:	460a      	mov	r2, r1
 8019e14:	e7d7      	b.n	8019dc6 <__b2d+0x4a>
 8019e16:	bf00      	nop
 8019e18:	3ff00000 	.word	0x3ff00000

08019e1c <__d2b>:
 8019e1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019e20:	4689      	mov	r9, r1
 8019e22:	2101      	movs	r1, #1
 8019e24:	ec57 6b10 	vmov	r6, r7, d0
 8019e28:	4690      	mov	r8, r2
 8019e2a:	f7ff fc0f 	bl	801964c <_Balloc>
 8019e2e:	4604      	mov	r4, r0
 8019e30:	b930      	cbnz	r0, 8019e40 <__d2b+0x24>
 8019e32:	4602      	mov	r2, r0
 8019e34:	4b25      	ldr	r3, [pc, #148]	; (8019ecc <__d2b+0xb0>)
 8019e36:	4826      	ldr	r0, [pc, #152]	; (8019ed0 <__d2b+0xb4>)
 8019e38:	f240 310a 	movw	r1, #778	; 0x30a
 8019e3c:	f000 fa54 	bl	801a2e8 <__assert_func>
 8019e40:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019e44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019e48:	bb35      	cbnz	r5, 8019e98 <__d2b+0x7c>
 8019e4a:	2e00      	cmp	r6, #0
 8019e4c:	9301      	str	r3, [sp, #4]
 8019e4e:	d028      	beq.n	8019ea2 <__d2b+0x86>
 8019e50:	4668      	mov	r0, sp
 8019e52:	9600      	str	r6, [sp, #0]
 8019e54:	f7ff fd10 	bl	8019878 <__lo0bits>
 8019e58:	9900      	ldr	r1, [sp, #0]
 8019e5a:	b300      	cbz	r0, 8019e9e <__d2b+0x82>
 8019e5c:	9a01      	ldr	r2, [sp, #4]
 8019e5e:	f1c0 0320 	rsb	r3, r0, #32
 8019e62:	fa02 f303 	lsl.w	r3, r2, r3
 8019e66:	430b      	orrs	r3, r1
 8019e68:	40c2      	lsrs	r2, r0
 8019e6a:	6163      	str	r3, [r4, #20]
 8019e6c:	9201      	str	r2, [sp, #4]
 8019e6e:	9b01      	ldr	r3, [sp, #4]
 8019e70:	61a3      	str	r3, [r4, #24]
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	bf14      	ite	ne
 8019e76:	2202      	movne	r2, #2
 8019e78:	2201      	moveq	r2, #1
 8019e7a:	6122      	str	r2, [r4, #16]
 8019e7c:	b1d5      	cbz	r5, 8019eb4 <__d2b+0x98>
 8019e7e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019e82:	4405      	add	r5, r0
 8019e84:	f8c9 5000 	str.w	r5, [r9]
 8019e88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019e8c:	f8c8 0000 	str.w	r0, [r8]
 8019e90:	4620      	mov	r0, r4
 8019e92:	b003      	add	sp, #12
 8019e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019e9c:	e7d5      	b.n	8019e4a <__d2b+0x2e>
 8019e9e:	6161      	str	r1, [r4, #20]
 8019ea0:	e7e5      	b.n	8019e6e <__d2b+0x52>
 8019ea2:	a801      	add	r0, sp, #4
 8019ea4:	f7ff fce8 	bl	8019878 <__lo0bits>
 8019ea8:	9b01      	ldr	r3, [sp, #4]
 8019eaa:	6163      	str	r3, [r4, #20]
 8019eac:	2201      	movs	r2, #1
 8019eae:	6122      	str	r2, [r4, #16]
 8019eb0:	3020      	adds	r0, #32
 8019eb2:	e7e3      	b.n	8019e7c <__d2b+0x60>
 8019eb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019eb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019ebc:	f8c9 0000 	str.w	r0, [r9]
 8019ec0:	6918      	ldr	r0, [r3, #16]
 8019ec2:	f7ff fcb9 	bl	8019838 <__hi0bits>
 8019ec6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019eca:	e7df      	b.n	8019e8c <__d2b+0x70>
 8019ecc:	0801cd04 	.word	0x0801cd04
 8019ed0:	0801cd94 	.word	0x0801cd94

08019ed4 <__ratio>:
 8019ed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ed8:	4688      	mov	r8, r1
 8019eda:	4669      	mov	r1, sp
 8019edc:	4681      	mov	r9, r0
 8019ede:	f7ff ff4d 	bl	8019d7c <__b2d>
 8019ee2:	a901      	add	r1, sp, #4
 8019ee4:	4640      	mov	r0, r8
 8019ee6:	ec55 4b10 	vmov	r4, r5, d0
 8019eea:	f7ff ff47 	bl	8019d7c <__b2d>
 8019eee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019ef2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019ef6:	eba3 0c02 	sub.w	ip, r3, r2
 8019efa:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019efe:	1a9b      	subs	r3, r3, r2
 8019f00:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019f04:	ec51 0b10 	vmov	r0, r1, d0
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	bfd6      	itet	le
 8019f0c:	460a      	movle	r2, r1
 8019f0e:	462a      	movgt	r2, r5
 8019f10:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019f14:	468b      	mov	fp, r1
 8019f16:	462f      	mov	r7, r5
 8019f18:	bfd4      	ite	le
 8019f1a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8019f1e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019f22:	4620      	mov	r0, r4
 8019f24:	ee10 2a10 	vmov	r2, s0
 8019f28:	465b      	mov	r3, fp
 8019f2a:	4639      	mov	r1, r7
 8019f2c:	f7e6 fc8e 	bl	800084c <__aeabi_ddiv>
 8019f30:	ec41 0b10 	vmov	d0, r0, r1
 8019f34:	b003      	add	sp, #12
 8019f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019f3a <__copybits>:
 8019f3a:	3901      	subs	r1, #1
 8019f3c:	b570      	push	{r4, r5, r6, lr}
 8019f3e:	1149      	asrs	r1, r1, #5
 8019f40:	6914      	ldr	r4, [r2, #16]
 8019f42:	3101      	adds	r1, #1
 8019f44:	f102 0314 	add.w	r3, r2, #20
 8019f48:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019f4c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019f50:	1f05      	subs	r5, r0, #4
 8019f52:	42a3      	cmp	r3, r4
 8019f54:	d30c      	bcc.n	8019f70 <__copybits+0x36>
 8019f56:	1aa3      	subs	r3, r4, r2
 8019f58:	3b11      	subs	r3, #17
 8019f5a:	f023 0303 	bic.w	r3, r3, #3
 8019f5e:	3211      	adds	r2, #17
 8019f60:	42a2      	cmp	r2, r4
 8019f62:	bf88      	it	hi
 8019f64:	2300      	movhi	r3, #0
 8019f66:	4418      	add	r0, r3
 8019f68:	2300      	movs	r3, #0
 8019f6a:	4288      	cmp	r0, r1
 8019f6c:	d305      	bcc.n	8019f7a <__copybits+0x40>
 8019f6e:	bd70      	pop	{r4, r5, r6, pc}
 8019f70:	f853 6b04 	ldr.w	r6, [r3], #4
 8019f74:	f845 6f04 	str.w	r6, [r5, #4]!
 8019f78:	e7eb      	b.n	8019f52 <__copybits+0x18>
 8019f7a:	f840 3b04 	str.w	r3, [r0], #4
 8019f7e:	e7f4      	b.n	8019f6a <__copybits+0x30>

08019f80 <__any_on>:
 8019f80:	f100 0214 	add.w	r2, r0, #20
 8019f84:	6900      	ldr	r0, [r0, #16]
 8019f86:	114b      	asrs	r3, r1, #5
 8019f88:	4298      	cmp	r0, r3
 8019f8a:	b510      	push	{r4, lr}
 8019f8c:	db11      	blt.n	8019fb2 <__any_on+0x32>
 8019f8e:	dd0a      	ble.n	8019fa6 <__any_on+0x26>
 8019f90:	f011 011f 	ands.w	r1, r1, #31
 8019f94:	d007      	beq.n	8019fa6 <__any_on+0x26>
 8019f96:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019f9a:	fa24 f001 	lsr.w	r0, r4, r1
 8019f9e:	fa00 f101 	lsl.w	r1, r0, r1
 8019fa2:	428c      	cmp	r4, r1
 8019fa4:	d10b      	bne.n	8019fbe <__any_on+0x3e>
 8019fa6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019faa:	4293      	cmp	r3, r2
 8019fac:	d803      	bhi.n	8019fb6 <__any_on+0x36>
 8019fae:	2000      	movs	r0, #0
 8019fb0:	bd10      	pop	{r4, pc}
 8019fb2:	4603      	mov	r3, r0
 8019fb4:	e7f7      	b.n	8019fa6 <__any_on+0x26>
 8019fb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019fba:	2900      	cmp	r1, #0
 8019fbc:	d0f5      	beq.n	8019faa <__any_on+0x2a>
 8019fbe:	2001      	movs	r0, #1
 8019fc0:	e7f6      	b.n	8019fb0 <__any_on+0x30>

08019fc2 <_calloc_r>:
 8019fc2:	b513      	push	{r0, r1, r4, lr}
 8019fc4:	434a      	muls	r2, r1
 8019fc6:	4611      	mov	r1, r2
 8019fc8:	9201      	str	r2, [sp, #4]
 8019fca:	f7fc fb41 	bl	8016650 <_malloc_r>
 8019fce:	4604      	mov	r4, r0
 8019fd0:	b118      	cbz	r0, 8019fda <_calloc_r+0x18>
 8019fd2:	9a01      	ldr	r2, [sp, #4]
 8019fd4:	2100      	movs	r1, #0
 8019fd6:	f7fc fae3 	bl	80165a0 <memset>
 8019fda:	4620      	mov	r0, r4
 8019fdc:	b002      	add	sp, #8
 8019fde:	bd10      	pop	{r4, pc}

08019fe0 <__ssputs_r>:
 8019fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019fe4:	688e      	ldr	r6, [r1, #8]
 8019fe6:	429e      	cmp	r6, r3
 8019fe8:	4682      	mov	sl, r0
 8019fea:	460c      	mov	r4, r1
 8019fec:	4690      	mov	r8, r2
 8019fee:	461f      	mov	r7, r3
 8019ff0:	d838      	bhi.n	801a064 <__ssputs_r+0x84>
 8019ff2:	898a      	ldrh	r2, [r1, #12]
 8019ff4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019ff8:	d032      	beq.n	801a060 <__ssputs_r+0x80>
 8019ffa:	6825      	ldr	r5, [r4, #0]
 8019ffc:	6909      	ldr	r1, [r1, #16]
 8019ffe:	eba5 0901 	sub.w	r9, r5, r1
 801a002:	6965      	ldr	r5, [r4, #20]
 801a004:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a008:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a00c:	3301      	adds	r3, #1
 801a00e:	444b      	add	r3, r9
 801a010:	106d      	asrs	r5, r5, #1
 801a012:	429d      	cmp	r5, r3
 801a014:	bf38      	it	cc
 801a016:	461d      	movcc	r5, r3
 801a018:	0553      	lsls	r3, r2, #21
 801a01a:	d531      	bpl.n	801a080 <__ssputs_r+0xa0>
 801a01c:	4629      	mov	r1, r5
 801a01e:	f7fc fb17 	bl	8016650 <_malloc_r>
 801a022:	4606      	mov	r6, r0
 801a024:	b950      	cbnz	r0, 801a03c <__ssputs_r+0x5c>
 801a026:	230c      	movs	r3, #12
 801a028:	f8ca 3000 	str.w	r3, [sl]
 801a02c:	89a3      	ldrh	r3, [r4, #12]
 801a02e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a032:	81a3      	strh	r3, [r4, #12]
 801a034:	f04f 30ff 	mov.w	r0, #4294967295
 801a038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a03c:	6921      	ldr	r1, [r4, #16]
 801a03e:	464a      	mov	r2, r9
 801a040:	f7fc fa86 	bl	8016550 <memcpy>
 801a044:	89a3      	ldrh	r3, [r4, #12]
 801a046:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a04a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a04e:	81a3      	strh	r3, [r4, #12]
 801a050:	6126      	str	r6, [r4, #16]
 801a052:	6165      	str	r5, [r4, #20]
 801a054:	444e      	add	r6, r9
 801a056:	eba5 0509 	sub.w	r5, r5, r9
 801a05a:	6026      	str	r6, [r4, #0]
 801a05c:	60a5      	str	r5, [r4, #8]
 801a05e:	463e      	mov	r6, r7
 801a060:	42be      	cmp	r6, r7
 801a062:	d900      	bls.n	801a066 <__ssputs_r+0x86>
 801a064:	463e      	mov	r6, r7
 801a066:	4632      	mov	r2, r6
 801a068:	6820      	ldr	r0, [r4, #0]
 801a06a:	4641      	mov	r1, r8
 801a06c:	f7fc fa7e 	bl	801656c <memmove>
 801a070:	68a3      	ldr	r3, [r4, #8]
 801a072:	6822      	ldr	r2, [r4, #0]
 801a074:	1b9b      	subs	r3, r3, r6
 801a076:	4432      	add	r2, r6
 801a078:	60a3      	str	r3, [r4, #8]
 801a07a:	6022      	str	r2, [r4, #0]
 801a07c:	2000      	movs	r0, #0
 801a07e:	e7db      	b.n	801a038 <__ssputs_r+0x58>
 801a080:	462a      	mov	r2, r5
 801a082:	f000 f964 	bl	801a34e <_realloc_r>
 801a086:	4606      	mov	r6, r0
 801a088:	2800      	cmp	r0, #0
 801a08a:	d1e1      	bne.n	801a050 <__ssputs_r+0x70>
 801a08c:	6921      	ldr	r1, [r4, #16]
 801a08e:	4650      	mov	r0, sl
 801a090:	f7fc fa8e 	bl	80165b0 <_free_r>
 801a094:	e7c7      	b.n	801a026 <__ssputs_r+0x46>
	...

0801a098 <_svfiprintf_r>:
 801a098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a09c:	4698      	mov	r8, r3
 801a09e:	898b      	ldrh	r3, [r1, #12]
 801a0a0:	061b      	lsls	r3, r3, #24
 801a0a2:	b09d      	sub	sp, #116	; 0x74
 801a0a4:	4607      	mov	r7, r0
 801a0a6:	460d      	mov	r5, r1
 801a0a8:	4614      	mov	r4, r2
 801a0aa:	d50e      	bpl.n	801a0ca <_svfiprintf_r+0x32>
 801a0ac:	690b      	ldr	r3, [r1, #16]
 801a0ae:	b963      	cbnz	r3, 801a0ca <_svfiprintf_r+0x32>
 801a0b0:	2140      	movs	r1, #64	; 0x40
 801a0b2:	f7fc facd 	bl	8016650 <_malloc_r>
 801a0b6:	6028      	str	r0, [r5, #0]
 801a0b8:	6128      	str	r0, [r5, #16]
 801a0ba:	b920      	cbnz	r0, 801a0c6 <_svfiprintf_r+0x2e>
 801a0bc:	230c      	movs	r3, #12
 801a0be:	603b      	str	r3, [r7, #0]
 801a0c0:	f04f 30ff 	mov.w	r0, #4294967295
 801a0c4:	e0d1      	b.n	801a26a <_svfiprintf_r+0x1d2>
 801a0c6:	2340      	movs	r3, #64	; 0x40
 801a0c8:	616b      	str	r3, [r5, #20]
 801a0ca:	2300      	movs	r3, #0
 801a0cc:	9309      	str	r3, [sp, #36]	; 0x24
 801a0ce:	2320      	movs	r3, #32
 801a0d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a0d4:	f8cd 800c 	str.w	r8, [sp, #12]
 801a0d8:	2330      	movs	r3, #48	; 0x30
 801a0da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a284 <_svfiprintf_r+0x1ec>
 801a0de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a0e2:	f04f 0901 	mov.w	r9, #1
 801a0e6:	4623      	mov	r3, r4
 801a0e8:	469a      	mov	sl, r3
 801a0ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a0ee:	b10a      	cbz	r2, 801a0f4 <_svfiprintf_r+0x5c>
 801a0f0:	2a25      	cmp	r2, #37	; 0x25
 801a0f2:	d1f9      	bne.n	801a0e8 <_svfiprintf_r+0x50>
 801a0f4:	ebba 0b04 	subs.w	fp, sl, r4
 801a0f8:	d00b      	beq.n	801a112 <_svfiprintf_r+0x7a>
 801a0fa:	465b      	mov	r3, fp
 801a0fc:	4622      	mov	r2, r4
 801a0fe:	4629      	mov	r1, r5
 801a100:	4638      	mov	r0, r7
 801a102:	f7ff ff6d 	bl	8019fe0 <__ssputs_r>
 801a106:	3001      	adds	r0, #1
 801a108:	f000 80aa 	beq.w	801a260 <_svfiprintf_r+0x1c8>
 801a10c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a10e:	445a      	add	r2, fp
 801a110:	9209      	str	r2, [sp, #36]	; 0x24
 801a112:	f89a 3000 	ldrb.w	r3, [sl]
 801a116:	2b00      	cmp	r3, #0
 801a118:	f000 80a2 	beq.w	801a260 <_svfiprintf_r+0x1c8>
 801a11c:	2300      	movs	r3, #0
 801a11e:	f04f 32ff 	mov.w	r2, #4294967295
 801a122:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a126:	f10a 0a01 	add.w	sl, sl, #1
 801a12a:	9304      	str	r3, [sp, #16]
 801a12c:	9307      	str	r3, [sp, #28]
 801a12e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a132:	931a      	str	r3, [sp, #104]	; 0x68
 801a134:	4654      	mov	r4, sl
 801a136:	2205      	movs	r2, #5
 801a138:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a13c:	4851      	ldr	r0, [pc, #324]	; (801a284 <_svfiprintf_r+0x1ec>)
 801a13e:	f7e6 f84f 	bl	80001e0 <memchr>
 801a142:	9a04      	ldr	r2, [sp, #16]
 801a144:	b9d8      	cbnz	r0, 801a17e <_svfiprintf_r+0xe6>
 801a146:	06d0      	lsls	r0, r2, #27
 801a148:	bf44      	itt	mi
 801a14a:	2320      	movmi	r3, #32
 801a14c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a150:	0711      	lsls	r1, r2, #28
 801a152:	bf44      	itt	mi
 801a154:	232b      	movmi	r3, #43	; 0x2b
 801a156:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a15a:	f89a 3000 	ldrb.w	r3, [sl]
 801a15e:	2b2a      	cmp	r3, #42	; 0x2a
 801a160:	d015      	beq.n	801a18e <_svfiprintf_r+0xf6>
 801a162:	9a07      	ldr	r2, [sp, #28]
 801a164:	4654      	mov	r4, sl
 801a166:	2000      	movs	r0, #0
 801a168:	f04f 0c0a 	mov.w	ip, #10
 801a16c:	4621      	mov	r1, r4
 801a16e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a172:	3b30      	subs	r3, #48	; 0x30
 801a174:	2b09      	cmp	r3, #9
 801a176:	d94e      	bls.n	801a216 <_svfiprintf_r+0x17e>
 801a178:	b1b0      	cbz	r0, 801a1a8 <_svfiprintf_r+0x110>
 801a17a:	9207      	str	r2, [sp, #28]
 801a17c:	e014      	b.n	801a1a8 <_svfiprintf_r+0x110>
 801a17e:	eba0 0308 	sub.w	r3, r0, r8
 801a182:	fa09 f303 	lsl.w	r3, r9, r3
 801a186:	4313      	orrs	r3, r2
 801a188:	9304      	str	r3, [sp, #16]
 801a18a:	46a2      	mov	sl, r4
 801a18c:	e7d2      	b.n	801a134 <_svfiprintf_r+0x9c>
 801a18e:	9b03      	ldr	r3, [sp, #12]
 801a190:	1d19      	adds	r1, r3, #4
 801a192:	681b      	ldr	r3, [r3, #0]
 801a194:	9103      	str	r1, [sp, #12]
 801a196:	2b00      	cmp	r3, #0
 801a198:	bfbb      	ittet	lt
 801a19a:	425b      	neglt	r3, r3
 801a19c:	f042 0202 	orrlt.w	r2, r2, #2
 801a1a0:	9307      	strge	r3, [sp, #28]
 801a1a2:	9307      	strlt	r3, [sp, #28]
 801a1a4:	bfb8      	it	lt
 801a1a6:	9204      	strlt	r2, [sp, #16]
 801a1a8:	7823      	ldrb	r3, [r4, #0]
 801a1aa:	2b2e      	cmp	r3, #46	; 0x2e
 801a1ac:	d10c      	bne.n	801a1c8 <_svfiprintf_r+0x130>
 801a1ae:	7863      	ldrb	r3, [r4, #1]
 801a1b0:	2b2a      	cmp	r3, #42	; 0x2a
 801a1b2:	d135      	bne.n	801a220 <_svfiprintf_r+0x188>
 801a1b4:	9b03      	ldr	r3, [sp, #12]
 801a1b6:	1d1a      	adds	r2, r3, #4
 801a1b8:	681b      	ldr	r3, [r3, #0]
 801a1ba:	9203      	str	r2, [sp, #12]
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	bfb8      	it	lt
 801a1c0:	f04f 33ff 	movlt.w	r3, #4294967295
 801a1c4:	3402      	adds	r4, #2
 801a1c6:	9305      	str	r3, [sp, #20]
 801a1c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a294 <_svfiprintf_r+0x1fc>
 801a1cc:	7821      	ldrb	r1, [r4, #0]
 801a1ce:	2203      	movs	r2, #3
 801a1d0:	4650      	mov	r0, sl
 801a1d2:	f7e6 f805 	bl	80001e0 <memchr>
 801a1d6:	b140      	cbz	r0, 801a1ea <_svfiprintf_r+0x152>
 801a1d8:	2340      	movs	r3, #64	; 0x40
 801a1da:	eba0 000a 	sub.w	r0, r0, sl
 801a1de:	fa03 f000 	lsl.w	r0, r3, r0
 801a1e2:	9b04      	ldr	r3, [sp, #16]
 801a1e4:	4303      	orrs	r3, r0
 801a1e6:	3401      	adds	r4, #1
 801a1e8:	9304      	str	r3, [sp, #16]
 801a1ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a1ee:	4826      	ldr	r0, [pc, #152]	; (801a288 <_svfiprintf_r+0x1f0>)
 801a1f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a1f4:	2206      	movs	r2, #6
 801a1f6:	f7e5 fff3 	bl	80001e0 <memchr>
 801a1fa:	2800      	cmp	r0, #0
 801a1fc:	d038      	beq.n	801a270 <_svfiprintf_r+0x1d8>
 801a1fe:	4b23      	ldr	r3, [pc, #140]	; (801a28c <_svfiprintf_r+0x1f4>)
 801a200:	bb1b      	cbnz	r3, 801a24a <_svfiprintf_r+0x1b2>
 801a202:	9b03      	ldr	r3, [sp, #12]
 801a204:	3307      	adds	r3, #7
 801a206:	f023 0307 	bic.w	r3, r3, #7
 801a20a:	3308      	adds	r3, #8
 801a20c:	9303      	str	r3, [sp, #12]
 801a20e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a210:	4433      	add	r3, r6
 801a212:	9309      	str	r3, [sp, #36]	; 0x24
 801a214:	e767      	b.n	801a0e6 <_svfiprintf_r+0x4e>
 801a216:	fb0c 3202 	mla	r2, ip, r2, r3
 801a21a:	460c      	mov	r4, r1
 801a21c:	2001      	movs	r0, #1
 801a21e:	e7a5      	b.n	801a16c <_svfiprintf_r+0xd4>
 801a220:	2300      	movs	r3, #0
 801a222:	3401      	adds	r4, #1
 801a224:	9305      	str	r3, [sp, #20]
 801a226:	4619      	mov	r1, r3
 801a228:	f04f 0c0a 	mov.w	ip, #10
 801a22c:	4620      	mov	r0, r4
 801a22e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a232:	3a30      	subs	r2, #48	; 0x30
 801a234:	2a09      	cmp	r2, #9
 801a236:	d903      	bls.n	801a240 <_svfiprintf_r+0x1a8>
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d0c5      	beq.n	801a1c8 <_svfiprintf_r+0x130>
 801a23c:	9105      	str	r1, [sp, #20]
 801a23e:	e7c3      	b.n	801a1c8 <_svfiprintf_r+0x130>
 801a240:	fb0c 2101 	mla	r1, ip, r1, r2
 801a244:	4604      	mov	r4, r0
 801a246:	2301      	movs	r3, #1
 801a248:	e7f0      	b.n	801a22c <_svfiprintf_r+0x194>
 801a24a:	ab03      	add	r3, sp, #12
 801a24c:	9300      	str	r3, [sp, #0]
 801a24e:	462a      	mov	r2, r5
 801a250:	4b0f      	ldr	r3, [pc, #60]	; (801a290 <_svfiprintf_r+0x1f8>)
 801a252:	a904      	add	r1, sp, #16
 801a254:	4638      	mov	r0, r7
 801a256:	f7fc faf5 	bl	8016844 <_printf_float>
 801a25a:	1c42      	adds	r2, r0, #1
 801a25c:	4606      	mov	r6, r0
 801a25e:	d1d6      	bne.n	801a20e <_svfiprintf_r+0x176>
 801a260:	89ab      	ldrh	r3, [r5, #12]
 801a262:	065b      	lsls	r3, r3, #25
 801a264:	f53f af2c 	bmi.w	801a0c0 <_svfiprintf_r+0x28>
 801a268:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a26a:	b01d      	add	sp, #116	; 0x74
 801a26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a270:	ab03      	add	r3, sp, #12
 801a272:	9300      	str	r3, [sp, #0]
 801a274:	462a      	mov	r2, r5
 801a276:	4b06      	ldr	r3, [pc, #24]	; (801a290 <_svfiprintf_r+0x1f8>)
 801a278:	a904      	add	r1, sp, #16
 801a27a:	4638      	mov	r0, r7
 801a27c:	f7fc fd86 	bl	8016d8c <_printf_i>
 801a280:	e7eb      	b.n	801a25a <_svfiprintf_r+0x1c2>
 801a282:	bf00      	nop
 801a284:	0801cef4 	.word	0x0801cef4
 801a288:	0801cefe 	.word	0x0801cefe
 801a28c:	08016845 	.word	0x08016845
 801a290:	08019fe1 	.word	0x08019fe1
 801a294:	0801cefa 	.word	0x0801cefa

0801a298 <nan>:
 801a298:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a2a0 <nan+0x8>
 801a29c:	4770      	bx	lr
 801a29e:	bf00      	nop
 801a2a0:	00000000 	.word	0x00000000
 801a2a4:	7ff80000 	.word	0x7ff80000

0801a2a8 <strncmp>:
 801a2a8:	b510      	push	{r4, lr}
 801a2aa:	b16a      	cbz	r2, 801a2c8 <strncmp+0x20>
 801a2ac:	3901      	subs	r1, #1
 801a2ae:	1884      	adds	r4, r0, r2
 801a2b0:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a2b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a2b8:	4293      	cmp	r3, r2
 801a2ba:	d103      	bne.n	801a2c4 <strncmp+0x1c>
 801a2bc:	42a0      	cmp	r0, r4
 801a2be:	d001      	beq.n	801a2c4 <strncmp+0x1c>
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	d1f5      	bne.n	801a2b0 <strncmp+0x8>
 801a2c4:	1a98      	subs	r0, r3, r2
 801a2c6:	bd10      	pop	{r4, pc}
 801a2c8:	4610      	mov	r0, r2
 801a2ca:	e7fc      	b.n	801a2c6 <strncmp+0x1e>

0801a2cc <__ascii_wctomb>:
 801a2cc:	b149      	cbz	r1, 801a2e2 <__ascii_wctomb+0x16>
 801a2ce:	2aff      	cmp	r2, #255	; 0xff
 801a2d0:	bf85      	ittet	hi
 801a2d2:	238a      	movhi	r3, #138	; 0x8a
 801a2d4:	6003      	strhi	r3, [r0, #0]
 801a2d6:	700a      	strbls	r2, [r1, #0]
 801a2d8:	f04f 30ff 	movhi.w	r0, #4294967295
 801a2dc:	bf98      	it	ls
 801a2de:	2001      	movls	r0, #1
 801a2e0:	4770      	bx	lr
 801a2e2:	4608      	mov	r0, r1
 801a2e4:	4770      	bx	lr
	...

0801a2e8 <__assert_func>:
 801a2e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a2ea:	4614      	mov	r4, r2
 801a2ec:	461a      	mov	r2, r3
 801a2ee:	4b09      	ldr	r3, [pc, #36]	; (801a314 <__assert_func+0x2c>)
 801a2f0:	681b      	ldr	r3, [r3, #0]
 801a2f2:	4605      	mov	r5, r0
 801a2f4:	68d8      	ldr	r0, [r3, #12]
 801a2f6:	b14c      	cbz	r4, 801a30c <__assert_func+0x24>
 801a2f8:	4b07      	ldr	r3, [pc, #28]	; (801a318 <__assert_func+0x30>)
 801a2fa:	9100      	str	r1, [sp, #0]
 801a2fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a300:	4906      	ldr	r1, [pc, #24]	; (801a31c <__assert_func+0x34>)
 801a302:	462b      	mov	r3, r5
 801a304:	f000 f80e 	bl	801a324 <fiprintf>
 801a308:	f000 fa60 	bl	801a7cc <abort>
 801a30c:	4b04      	ldr	r3, [pc, #16]	; (801a320 <__assert_func+0x38>)
 801a30e:	461c      	mov	r4, r3
 801a310:	e7f3      	b.n	801a2fa <__assert_func+0x12>
 801a312:	bf00      	nop
 801a314:	20004210 	.word	0x20004210
 801a318:	0801cf05 	.word	0x0801cf05
 801a31c:	0801cf12 	.word	0x0801cf12
 801a320:	0801cf40 	.word	0x0801cf40

0801a324 <fiprintf>:
 801a324:	b40e      	push	{r1, r2, r3}
 801a326:	b503      	push	{r0, r1, lr}
 801a328:	4601      	mov	r1, r0
 801a32a:	ab03      	add	r3, sp, #12
 801a32c:	4805      	ldr	r0, [pc, #20]	; (801a344 <fiprintf+0x20>)
 801a32e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a332:	6800      	ldr	r0, [r0, #0]
 801a334:	9301      	str	r3, [sp, #4]
 801a336:	f000 f859 	bl	801a3ec <_vfiprintf_r>
 801a33a:	b002      	add	sp, #8
 801a33c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a340:	b003      	add	sp, #12
 801a342:	4770      	bx	lr
 801a344:	20004210 	.word	0x20004210

0801a348 <__retarget_lock_init_recursive>:
 801a348:	4770      	bx	lr

0801a34a <__retarget_lock_acquire_recursive>:
 801a34a:	4770      	bx	lr

0801a34c <__retarget_lock_release_recursive>:
 801a34c:	4770      	bx	lr

0801a34e <_realloc_r>:
 801a34e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a350:	4607      	mov	r7, r0
 801a352:	4614      	mov	r4, r2
 801a354:	460e      	mov	r6, r1
 801a356:	b921      	cbnz	r1, 801a362 <_realloc_r+0x14>
 801a358:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a35c:	4611      	mov	r1, r2
 801a35e:	f7fc b977 	b.w	8016650 <_malloc_r>
 801a362:	b922      	cbnz	r2, 801a36e <_realloc_r+0x20>
 801a364:	f7fc f924 	bl	80165b0 <_free_r>
 801a368:	4625      	mov	r5, r4
 801a36a:	4628      	mov	r0, r5
 801a36c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a36e:	f000 fc51 	bl	801ac14 <_malloc_usable_size_r>
 801a372:	42a0      	cmp	r0, r4
 801a374:	d20f      	bcs.n	801a396 <_realloc_r+0x48>
 801a376:	4621      	mov	r1, r4
 801a378:	4638      	mov	r0, r7
 801a37a:	f7fc f969 	bl	8016650 <_malloc_r>
 801a37e:	4605      	mov	r5, r0
 801a380:	2800      	cmp	r0, #0
 801a382:	d0f2      	beq.n	801a36a <_realloc_r+0x1c>
 801a384:	4631      	mov	r1, r6
 801a386:	4622      	mov	r2, r4
 801a388:	f7fc f8e2 	bl	8016550 <memcpy>
 801a38c:	4631      	mov	r1, r6
 801a38e:	4638      	mov	r0, r7
 801a390:	f7fc f90e 	bl	80165b0 <_free_r>
 801a394:	e7e9      	b.n	801a36a <_realloc_r+0x1c>
 801a396:	4635      	mov	r5, r6
 801a398:	e7e7      	b.n	801a36a <_realloc_r+0x1c>

0801a39a <__sfputc_r>:
 801a39a:	6893      	ldr	r3, [r2, #8]
 801a39c:	3b01      	subs	r3, #1
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	b410      	push	{r4}
 801a3a2:	6093      	str	r3, [r2, #8]
 801a3a4:	da08      	bge.n	801a3b8 <__sfputc_r+0x1e>
 801a3a6:	6994      	ldr	r4, [r2, #24]
 801a3a8:	42a3      	cmp	r3, r4
 801a3aa:	db01      	blt.n	801a3b0 <__sfputc_r+0x16>
 801a3ac:	290a      	cmp	r1, #10
 801a3ae:	d103      	bne.n	801a3b8 <__sfputc_r+0x1e>
 801a3b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a3b4:	f000 b94a 	b.w	801a64c <__swbuf_r>
 801a3b8:	6813      	ldr	r3, [r2, #0]
 801a3ba:	1c58      	adds	r0, r3, #1
 801a3bc:	6010      	str	r0, [r2, #0]
 801a3be:	7019      	strb	r1, [r3, #0]
 801a3c0:	4608      	mov	r0, r1
 801a3c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a3c6:	4770      	bx	lr

0801a3c8 <__sfputs_r>:
 801a3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3ca:	4606      	mov	r6, r0
 801a3cc:	460f      	mov	r7, r1
 801a3ce:	4614      	mov	r4, r2
 801a3d0:	18d5      	adds	r5, r2, r3
 801a3d2:	42ac      	cmp	r4, r5
 801a3d4:	d101      	bne.n	801a3da <__sfputs_r+0x12>
 801a3d6:	2000      	movs	r0, #0
 801a3d8:	e007      	b.n	801a3ea <__sfputs_r+0x22>
 801a3da:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a3de:	463a      	mov	r2, r7
 801a3e0:	4630      	mov	r0, r6
 801a3e2:	f7ff ffda 	bl	801a39a <__sfputc_r>
 801a3e6:	1c43      	adds	r3, r0, #1
 801a3e8:	d1f3      	bne.n	801a3d2 <__sfputs_r+0xa>
 801a3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a3ec <_vfiprintf_r>:
 801a3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3f0:	460d      	mov	r5, r1
 801a3f2:	b09d      	sub	sp, #116	; 0x74
 801a3f4:	4614      	mov	r4, r2
 801a3f6:	4698      	mov	r8, r3
 801a3f8:	4606      	mov	r6, r0
 801a3fa:	b118      	cbz	r0, 801a404 <_vfiprintf_r+0x18>
 801a3fc:	6983      	ldr	r3, [r0, #24]
 801a3fe:	b90b      	cbnz	r3, 801a404 <_vfiprintf_r+0x18>
 801a400:	f000 fb06 	bl	801aa10 <__sinit>
 801a404:	4b89      	ldr	r3, [pc, #548]	; (801a62c <_vfiprintf_r+0x240>)
 801a406:	429d      	cmp	r5, r3
 801a408:	d11b      	bne.n	801a442 <_vfiprintf_r+0x56>
 801a40a:	6875      	ldr	r5, [r6, #4]
 801a40c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a40e:	07d9      	lsls	r1, r3, #31
 801a410:	d405      	bmi.n	801a41e <_vfiprintf_r+0x32>
 801a412:	89ab      	ldrh	r3, [r5, #12]
 801a414:	059a      	lsls	r2, r3, #22
 801a416:	d402      	bmi.n	801a41e <_vfiprintf_r+0x32>
 801a418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a41a:	f7ff ff96 	bl	801a34a <__retarget_lock_acquire_recursive>
 801a41e:	89ab      	ldrh	r3, [r5, #12]
 801a420:	071b      	lsls	r3, r3, #28
 801a422:	d501      	bpl.n	801a428 <_vfiprintf_r+0x3c>
 801a424:	692b      	ldr	r3, [r5, #16]
 801a426:	b9eb      	cbnz	r3, 801a464 <_vfiprintf_r+0x78>
 801a428:	4629      	mov	r1, r5
 801a42a:	4630      	mov	r0, r6
 801a42c:	f000 f960 	bl	801a6f0 <__swsetup_r>
 801a430:	b1c0      	cbz	r0, 801a464 <_vfiprintf_r+0x78>
 801a432:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a434:	07dc      	lsls	r4, r3, #31
 801a436:	d50e      	bpl.n	801a456 <_vfiprintf_r+0x6a>
 801a438:	f04f 30ff 	mov.w	r0, #4294967295
 801a43c:	b01d      	add	sp, #116	; 0x74
 801a43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a442:	4b7b      	ldr	r3, [pc, #492]	; (801a630 <_vfiprintf_r+0x244>)
 801a444:	429d      	cmp	r5, r3
 801a446:	d101      	bne.n	801a44c <_vfiprintf_r+0x60>
 801a448:	68b5      	ldr	r5, [r6, #8]
 801a44a:	e7df      	b.n	801a40c <_vfiprintf_r+0x20>
 801a44c:	4b79      	ldr	r3, [pc, #484]	; (801a634 <_vfiprintf_r+0x248>)
 801a44e:	429d      	cmp	r5, r3
 801a450:	bf08      	it	eq
 801a452:	68f5      	ldreq	r5, [r6, #12]
 801a454:	e7da      	b.n	801a40c <_vfiprintf_r+0x20>
 801a456:	89ab      	ldrh	r3, [r5, #12]
 801a458:	0598      	lsls	r0, r3, #22
 801a45a:	d4ed      	bmi.n	801a438 <_vfiprintf_r+0x4c>
 801a45c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a45e:	f7ff ff75 	bl	801a34c <__retarget_lock_release_recursive>
 801a462:	e7e9      	b.n	801a438 <_vfiprintf_r+0x4c>
 801a464:	2300      	movs	r3, #0
 801a466:	9309      	str	r3, [sp, #36]	; 0x24
 801a468:	2320      	movs	r3, #32
 801a46a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a46e:	f8cd 800c 	str.w	r8, [sp, #12]
 801a472:	2330      	movs	r3, #48	; 0x30
 801a474:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a638 <_vfiprintf_r+0x24c>
 801a478:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a47c:	f04f 0901 	mov.w	r9, #1
 801a480:	4623      	mov	r3, r4
 801a482:	469a      	mov	sl, r3
 801a484:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a488:	b10a      	cbz	r2, 801a48e <_vfiprintf_r+0xa2>
 801a48a:	2a25      	cmp	r2, #37	; 0x25
 801a48c:	d1f9      	bne.n	801a482 <_vfiprintf_r+0x96>
 801a48e:	ebba 0b04 	subs.w	fp, sl, r4
 801a492:	d00b      	beq.n	801a4ac <_vfiprintf_r+0xc0>
 801a494:	465b      	mov	r3, fp
 801a496:	4622      	mov	r2, r4
 801a498:	4629      	mov	r1, r5
 801a49a:	4630      	mov	r0, r6
 801a49c:	f7ff ff94 	bl	801a3c8 <__sfputs_r>
 801a4a0:	3001      	adds	r0, #1
 801a4a2:	f000 80aa 	beq.w	801a5fa <_vfiprintf_r+0x20e>
 801a4a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a4a8:	445a      	add	r2, fp
 801a4aa:	9209      	str	r2, [sp, #36]	; 0x24
 801a4ac:	f89a 3000 	ldrb.w	r3, [sl]
 801a4b0:	2b00      	cmp	r3, #0
 801a4b2:	f000 80a2 	beq.w	801a5fa <_vfiprintf_r+0x20e>
 801a4b6:	2300      	movs	r3, #0
 801a4b8:	f04f 32ff 	mov.w	r2, #4294967295
 801a4bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a4c0:	f10a 0a01 	add.w	sl, sl, #1
 801a4c4:	9304      	str	r3, [sp, #16]
 801a4c6:	9307      	str	r3, [sp, #28]
 801a4c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a4cc:	931a      	str	r3, [sp, #104]	; 0x68
 801a4ce:	4654      	mov	r4, sl
 801a4d0:	2205      	movs	r2, #5
 801a4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a4d6:	4858      	ldr	r0, [pc, #352]	; (801a638 <_vfiprintf_r+0x24c>)
 801a4d8:	f7e5 fe82 	bl	80001e0 <memchr>
 801a4dc:	9a04      	ldr	r2, [sp, #16]
 801a4de:	b9d8      	cbnz	r0, 801a518 <_vfiprintf_r+0x12c>
 801a4e0:	06d1      	lsls	r1, r2, #27
 801a4e2:	bf44      	itt	mi
 801a4e4:	2320      	movmi	r3, #32
 801a4e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a4ea:	0713      	lsls	r3, r2, #28
 801a4ec:	bf44      	itt	mi
 801a4ee:	232b      	movmi	r3, #43	; 0x2b
 801a4f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a4f4:	f89a 3000 	ldrb.w	r3, [sl]
 801a4f8:	2b2a      	cmp	r3, #42	; 0x2a
 801a4fa:	d015      	beq.n	801a528 <_vfiprintf_r+0x13c>
 801a4fc:	9a07      	ldr	r2, [sp, #28]
 801a4fe:	4654      	mov	r4, sl
 801a500:	2000      	movs	r0, #0
 801a502:	f04f 0c0a 	mov.w	ip, #10
 801a506:	4621      	mov	r1, r4
 801a508:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a50c:	3b30      	subs	r3, #48	; 0x30
 801a50e:	2b09      	cmp	r3, #9
 801a510:	d94e      	bls.n	801a5b0 <_vfiprintf_r+0x1c4>
 801a512:	b1b0      	cbz	r0, 801a542 <_vfiprintf_r+0x156>
 801a514:	9207      	str	r2, [sp, #28]
 801a516:	e014      	b.n	801a542 <_vfiprintf_r+0x156>
 801a518:	eba0 0308 	sub.w	r3, r0, r8
 801a51c:	fa09 f303 	lsl.w	r3, r9, r3
 801a520:	4313      	orrs	r3, r2
 801a522:	9304      	str	r3, [sp, #16]
 801a524:	46a2      	mov	sl, r4
 801a526:	e7d2      	b.n	801a4ce <_vfiprintf_r+0xe2>
 801a528:	9b03      	ldr	r3, [sp, #12]
 801a52a:	1d19      	adds	r1, r3, #4
 801a52c:	681b      	ldr	r3, [r3, #0]
 801a52e:	9103      	str	r1, [sp, #12]
 801a530:	2b00      	cmp	r3, #0
 801a532:	bfbb      	ittet	lt
 801a534:	425b      	neglt	r3, r3
 801a536:	f042 0202 	orrlt.w	r2, r2, #2
 801a53a:	9307      	strge	r3, [sp, #28]
 801a53c:	9307      	strlt	r3, [sp, #28]
 801a53e:	bfb8      	it	lt
 801a540:	9204      	strlt	r2, [sp, #16]
 801a542:	7823      	ldrb	r3, [r4, #0]
 801a544:	2b2e      	cmp	r3, #46	; 0x2e
 801a546:	d10c      	bne.n	801a562 <_vfiprintf_r+0x176>
 801a548:	7863      	ldrb	r3, [r4, #1]
 801a54a:	2b2a      	cmp	r3, #42	; 0x2a
 801a54c:	d135      	bne.n	801a5ba <_vfiprintf_r+0x1ce>
 801a54e:	9b03      	ldr	r3, [sp, #12]
 801a550:	1d1a      	adds	r2, r3, #4
 801a552:	681b      	ldr	r3, [r3, #0]
 801a554:	9203      	str	r2, [sp, #12]
 801a556:	2b00      	cmp	r3, #0
 801a558:	bfb8      	it	lt
 801a55a:	f04f 33ff 	movlt.w	r3, #4294967295
 801a55e:	3402      	adds	r4, #2
 801a560:	9305      	str	r3, [sp, #20]
 801a562:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a648 <_vfiprintf_r+0x25c>
 801a566:	7821      	ldrb	r1, [r4, #0]
 801a568:	2203      	movs	r2, #3
 801a56a:	4650      	mov	r0, sl
 801a56c:	f7e5 fe38 	bl	80001e0 <memchr>
 801a570:	b140      	cbz	r0, 801a584 <_vfiprintf_r+0x198>
 801a572:	2340      	movs	r3, #64	; 0x40
 801a574:	eba0 000a 	sub.w	r0, r0, sl
 801a578:	fa03 f000 	lsl.w	r0, r3, r0
 801a57c:	9b04      	ldr	r3, [sp, #16]
 801a57e:	4303      	orrs	r3, r0
 801a580:	3401      	adds	r4, #1
 801a582:	9304      	str	r3, [sp, #16]
 801a584:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a588:	482c      	ldr	r0, [pc, #176]	; (801a63c <_vfiprintf_r+0x250>)
 801a58a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a58e:	2206      	movs	r2, #6
 801a590:	f7e5 fe26 	bl	80001e0 <memchr>
 801a594:	2800      	cmp	r0, #0
 801a596:	d03f      	beq.n	801a618 <_vfiprintf_r+0x22c>
 801a598:	4b29      	ldr	r3, [pc, #164]	; (801a640 <_vfiprintf_r+0x254>)
 801a59a:	bb1b      	cbnz	r3, 801a5e4 <_vfiprintf_r+0x1f8>
 801a59c:	9b03      	ldr	r3, [sp, #12]
 801a59e:	3307      	adds	r3, #7
 801a5a0:	f023 0307 	bic.w	r3, r3, #7
 801a5a4:	3308      	adds	r3, #8
 801a5a6:	9303      	str	r3, [sp, #12]
 801a5a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5aa:	443b      	add	r3, r7
 801a5ac:	9309      	str	r3, [sp, #36]	; 0x24
 801a5ae:	e767      	b.n	801a480 <_vfiprintf_r+0x94>
 801a5b0:	fb0c 3202 	mla	r2, ip, r2, r3
 801a5b4:	460c      	mov	r4, r1
 801a5b6:	2001      	movs	r0, #1
 801a5b8:	e7a5      	b.n	801a506 <_vfiprintf_r+0x11a>
 801a5ba:	2300      	movs	r3, #0
 801a5bc:	3401      	adds	r4, #1
 801a5be:	9305      	str	r3, [sp, #20]
 801a5c0:	4619      	mov	r1, r3
 801a5c2:	f04f 0c0a 	mov.w	ip, #10
 801a5c6:	4620      	mov	r0, r4
 801a5c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a5cc:	3a30      	subs	r2, #48	; 0x30
 801a5ce:	2a09      	cmp	r2, #9
 801a5d0:	d903      	bls.n	801a5da <_vfiprintf_r+0x1ee>
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	d0c5      	beq.n	801a562 <_vfiprintf_r+0x176>
 801a5d6:	9105      	str	r1, [sp, #20]
 801a5d8:	e7c3      	b.n	801a562 <_vfiprintf_r+0x176>
 801a5da:	fb0c 2101 	mla	r1, ip, r1, r2
 801a5de:	4604      	mov	r4, r0
 801a5e0:	2301      	movs	r3, #1
 801a5e2:	e7f0      	b.n	801a5c6 <_vfiprintf_r+0x1da>
 801a5e4:	ab03      	add	r3, sp, #12
 801a5e6:	9300      	str	r3, [sp, #0]
 801a5e8:	462a      	mov	r2, r5
 801a5ea:	4b16      	ldr	r3, [pc, #88]	; (801a644 <_vfiprintf_r+0x258>)
 801a5ec:	a904      	add	r1, sp, #16
 801a5ee:	4630      	mov	r0, r6
 801a5f0:	f7fc f928 	bl	8016844 <_printf_float>
 801a5f4:	4607      	mov	r7, r0
 801a5f6:	1c78      	adds	r0, r7, #1
 801a5f8:	d1d6      	bne.n	801a5a8 <_vfiprintf_r+0x1bc>
 801a5fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a5fc:	07d9      	lsls	r1, r3, #31
 801a5fe:	d405      	bmi.n	801a60c <_vfiprintf_r+0x220>
 801a600:	89ab      	ldrh	r3, [r5, #12]
 801a602:	059a      	lsls	r2, r3, #22
 801a604:	d402      	bmi.n	801a60c <_vfiprintf_r+0x220>
 801a606:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a608:	f7ff fea0 	bl	801a34c <__retarget_lock_release_recursive>
 801a60c:	89ab      	ldrh	r3, [r5, #12]
 801a60e:	065b      	lsls	r3, r3, #25
 801a610:	f53f af12 	bmi.w	801a438 <_vfiprintf_r+0x4c>
 801a614:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a616:	e711      	b.n	801a43c <_vfiprintf_r+0x50>
 801a618:	ab03      	add	r3, sp, #12
 801a61a:	9300      	str	r3, [sp, #0]
 801a61c:	462a      	mov	r2, r5
 801a61e:	4b09      	ldr	r3, [pc, #36]	; (801a644 <_vfiprintf_r+0x258>)
 801a620:	a904      	add	r1, sp, #16
 801a622:	4630      	mov	r0, r6
 801a624:	f7fc fbb2 	bl	8016d8c <_printf_i>
 801a628:	e7e4      	b.n	801a5f4 <_vfiprintf_r+0x208>
 801a62a:	bf00      	nop
 801a62c:	0801cf64 	.word	0x0801cf64
 801a630:	0801cf84 	.word	0x0801cf84
 801a634:	0801cf44 	.word	0x0801cf44
 801a638:	0801cef4 	.word	0x0801cef4
 801a63c:	0801cefe 	.word	0x0801cefe
 801a640:	08016845 	.word	0x08016845
 801a644:	0801a3c9 	.word	0x0801a3c9
 801a648:	0801cefa 	.word	0x0801cefa

0801a64c <__swbuf_r>:
 801a64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a64e:	460e      	mov	r6, r1
 801a650:	4614      	mov	r4, r2
 801a652:	4605      	mov	r5, r0
 801a654:	b118      	cbz	r0, 801a65e <__swbuf_r+0x12>
 801a656:	6983      	ldr	r3, [r0, #24]
 801a658:	b90b      	cbnz	r3, 801a65e <__swbuf_r+0x12>
 801a65a:	f000 f9d9 	bl	801aa10 <__sinit>
 801a65e:	4b21      	ldr	r3, [pc, #132]	; (801a6e4 <__swbuf_r+0x98>)
 801a660:	429c      	cmp	r4, r3
 801a662:	d12b      	bne.n	801a6bc <__swbuf_r+0x70>
 801a664:	686c      	ldr	r4, [r5, #4]
 801a666:	69a3      	ldr	r3, [r4, #24]
 801a668:	60a3      	str	r3, [r4, #8]
 801a66a:	89a3      	ldrh	r3, [r4, #12]
 801a66c:	071a      	lsls	r2, r3, #28
 801a66e:	d52f      	bpl.n	801a6d0 <__swbuf_r+0x84>
 801a670:	6923      	ldr	r3, [r4, #16]
 801a672:	b36b      	cbz	r3, 801a6d0 <__swbuf_r+0x84>
 801a674:	6923      	ldr	r3, [r4, #16]
 801a676:	6820      	ldr	r0, [r4, #0]
 801a678:	1ac0      	subs	r0, r0, r3
 801a67a:	6963      	ldr	r3, [r4, #20]
 801a67c:	b2f6      	uxtb	r6, r6
 801a67e:	4283      	cmp	r3, r0
 801a680:	4637      	mov	r7, r6
 801a682:	dc04      	bgt.n	801a68e <__swbuf_r+0x42>
 801a684:	4621      	mov	r1, r4
 801a686:	4628      	mov	r0, r5
 801a688:	f000 f92e 	bl	801a8e8 <_fflush_r>
 801a68c:	bb30      	cbnz	r0, 801a6dc <__swbuf_r+0x90>
 801a68e:	68a3      	ldr	r3, [r4, #8]
 801a690:	3b01      	subs	r3, #1
 801a692:	60a3      	str	r3, [r4, #8]
 801a694:	6823      	ldr	r3, [r4, #0]
 801a696:	1c5a      	adds	r2, r3, #1
 801a698:	6022      	str	r2, [r4, #0]
 801a69a:	701e      	strb	r6, [r3, #0]
 801a69c:	6963      	ldr	r3, [r4, #20]
 801a69e:	3001      	adds	r0, #1
 801a6a0:	4283      	cmp	r3, r0
 801a6a2:	d004      	beq.n	801a6ae <__swbuf_r+0x62>
 801a6a4:	89a3      	ldrh	r3, [r4, #12]
 801a6a6:	07db      	lsls	r3, r3, #31
 801a6a8:	d506      	bpl.n	801a6b8 <__swbuf_r+0x6c>
 801a6aa:	2e0a      	cmp	r6, #10
 801a6ac:	d104      	bne.n	801a6b8 <__swbuf_r+0x6c>
 801a6ae:	4621      	mov	r1, r4
 801a6b0:	4628      	mov	r0, r5
 801a6b2:	f000 f919 	bl	801a8e8 <_fflush_r>
 801a6b6:	b988      	cbnz	r0, 801a6dc <__swbuf_r+0x90>
 801a6b8:	4638      	mov	r0, r7
 801a6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a6bc:	4b0a      	ldr	r3, [pc, #40]	; (801a6e8 <__swbuf_r+0x9c>)
 801a6be:	429c      	cmp	r4, r3
 801a6c0:	d101      	bne.n	801a6c6 <__swbuf_r+0x7a>
 801a6c2:	68ac      	ldr	r4, [r5, #8]
 801a6c4:	e7cf      	b.n	801a666 <__swbuf_r+0x1a>
 801a6c6:	4b09      	ldr	r3, [pc, #36]	; (801a6ec <__swbuf_r+0xa0>)
 801a6c8:	429c      	cmp	r4, r3
 801a6ca:	bf08      	it	eq
 801a6cc:	68ec      	ldreq	r4, [r5, #12]
 801a6ce:	e7ca      	b.n	801a666 <__swbuf_r+0x1a>
 801a6d0:	4621      	mov	r1, r4
 801a6d2:	4628      	mov	r0, r5
 801a6d4:	f000 f80c 	bl	801a6f0 <__swsetup_r>
 801a6d8:	2800      	cmp	r0, #0
 801a6da:	d0cb      	beq.n	801a674 <__swbuf_r+0x28>
 801a6dc:	f04f 37ff 	mov.w	r7, #4294967295
 801a6e0:	e7ea      	b.n	801a6b8 <__swbuf_r+0x6c>
 801a6e2:	bf00      	nop
 801a6e4:	0801cf64 	.word	0x0801cf64
 801a6e8:	0801cf84 	.word	0x0801cf84
 801a6ec:	0801cf44 	.word	0x0801cf44

0801a6f0 <__swsetup_r>:
 801a6f0:	4b32      	ldr	r3, [pc, #200]	; (801a7bc <__swsetup_r+0xcc>)
 801a6f2:	b570      	push	{r4, r5, r6, lr}
 801a6f4:	681d      	ldr	r5, [r3, #0]
 801a6f6:	4606      	mov	r6, r0
 801a6f8:	460c      	mov	r4, r1
 801a6fa:	b125      	cbz	r5, 801a706 <__swsetup_r+0x16>
 801a6fc:	69ab      	ldr	r3, [r5, #24]
 801a6fe:	b913      	cbnz	r3, 801a706 <__swsetup_r+0x16>
 801a700:	4628      	mov	r0, r5
 801a702:	f000 f985 	bl	801aa10 <__sinit>
 801a706:	4b2e      	ldr	r3, [pc, #184]	; (801a7c0 <__swsetup_r+0xd0>)
 801a708:	429c      	cmp	r4, r3
 801a70a:	d10f      	bne.n	801a72c <__swsetup_r+0x3c>
 801a70c:	686c      	ldr	r4, [r5, #4]
 801a70e:	89a3      	ldrh	r3, [r4, #12]
 801a710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a714:	0719      	lsls	r1, r3, #28
 801a716:	d42c      	bmi.n	801a772 <__swsetup_r+0x82>
 801a718:	06dd      	lsls	r5, r3, #27
 801a71a:	d411      	bmi.n	801a740 <__swsetup_r+0x50>
 801a71c:	2309      	movs	r3, #9
 801a71e:	6033      	str	r3, [r6, #0]
 801a720:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a724:	81a3      	strh	r3, [r4, #12]
 801a726:	f04f 30ff 	mov.w	r0, #4294967295
 801a72a:	e03e      	b.n	801a7aa <__swsetup_r+0xba>
 801a72c:	4b25      	ldr	r3, [pc, #148]	; (801a7c4 <__swsetup_r+0xd4>)
 801a72e:	429c      	cmp	r4, r3
 801a730:	d101      	bne.n	801a736 <__swsetup_r+0x46>
 801a732:	68ac      	ldr	r4, [r5, #8]
 801a734:	e7eb      	b.n	801a70e <__swsetup_r+0x1e>
 801a736:	4b24      	ldr	r3, [pc, #144]	; (801a7c8 <__swsetup_r+0xd8>)
 801a738:	429c      	cmp	r4, r3
 801a73a:	bf08      	it	eq
 801a73c:	68ec      	ldreq	r4, [r5, #12]
 801a73e:	e7e6      	b.n	801a70e <__swsetup_r+0x1e>
 801a740:	0758      	lsls	r0, r3, #29
 801a742:	d512      	bpl.n	801a76a <__swsetup_r+0x7a>
 801a744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a746:	b141      	cbz	r1, 801a75a <__swsetup_r+0x6a>
 801a748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a74c:	4299      	cmp	r1, r3
 801a74e:	d002      	beq.n	801a756 <__swsetup_r+0x66>
 801a750:	4630      	mov	r0, r6
 801a752:	f7fb ff2d 	bl	80165b0 <_free_r>
 801a756:	2300      	movs	r3, #0
 801a758:	6363      	str	r3, [r4, #52]	; 0x34
 801a75a:	89a3      	ldrh	r3, [r4, #12]
 801a75c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a760:	81a3      	strh	r3, [r4, #12]
 801a762:	2300      	movs	r3, #0
 801a764:	6063      	str	r3, [r4, #4]
 801a766:	6923      	ldr	r3, [r4, #16]
 801a768:	6023      	str	r3, [r4, #0]
 801a76a:	89a3      	ldrh	r3, [r4, #12]
 801a76c:	f043 0308 	orr.w	r3, r3, #8
 801a770:	81a3      	strh	r3, [r4, #12]
 801a772:	6923      	ldr	r3, [r4, #16]
 801a774:	b94b      	cbnz	r3, 801a78a <__swsetup_r+0x9a>
 801a776:	89a3      	ldrh	r3, [r4, #12]
 801a778:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a77c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a780:	d003      	beq.n	801a78a <__swsetup_r+0x9a>
 801a782:	4621      	mov	r1, r4
 801a784:	4630      	mov	r0, r6
 801a786:	f000 fa05 	bl	801ab94 <__smakebuf_r>
 801a78a:	89a0      	ldrh	r0, [r4, #12]
 801a78c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a790:	f010 0301 	ands.w	r3, r0, #1
 801a794:	d00a      	beq.n	801a7ac <__swsetup_r+0xbc>
 801a796:	2300      	movs	r3, #0
 801a798:	60a3      	str	r3, [r4, #8]
 801a79a:	6963      	ldr	r3, [r4, #20]
 801a79c:	425b      	negs	r3, r3
 801a79e:	61a3      	str	r3, [r4, #24]
 801a7a0:	6923      	ldr	r3, [r4, #16]
 801a7a2:	b943      	cbnz	r3, 801a7b6 <__swsetup_r+0xc6>
 801a7a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a7a8:	d1ba      	bne.n	801a720 <__swsetup_r+0x30>
 801a7aa:	bd70      	pop	{r4, r5, r6, pc}
 801a7ac:	0781      	lsls	r1, r0, #30
 801a7ae:	bf58      	it	pl
 801a7b0:	6963      	ldrpl	r3, [r4, #20]
 801a7b2:	60a3      	str	r3, [r4, #8]
 801a7b4:	e7f4      	b.n	801a7a0 <__swsetup_r+0xb0>
 801a7b6:	2000      	movs	r0, #0
 801a7b8:	e7f7      	b.n	801a7aa <__swsetup_r+0xba>
 801a7ba:	bf00      	nop
 801a7bc:	20004210 	.word	0x20004210
 801a7c0:	0801cf64 	.word	0x0801cf64
 801a7c4:	0801cf84 	.word	0x0801cf84
 801a7c8:	0801cf44 	.word	0x0801cf44

0801a7cc <abort>:
 801a7cc:	b508      	push	{r3, lr}
 801a7ce:	2006      	movs	r0, #6
 801a7d0:	f000 fa50 	bl	801ac74 <raise>
 801a7d4:	2001      	movs	r0, #1
 801a7d6:	f7f0 ffa3 	bl	800b720 <_exit>
	...

0801a7dc <__sflush_r>:
 801a7dc:	898a      	ldrh	r2, [r1, #12]
 801a7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7e2:	4605      	mov	r5, r0
 801a7e4:	0710      	lsls	r0, r2, #28
 801a7e6:	460c      	mov	r4, r1
 801a7e8:	d458      	bmi.n	801a89c <__sflush_r+0xc0>
 801a7ea:	684b      	ldr	r3, [r1, #4]
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	dc05      	bgt.n	801a7fc <__sflush_r+0x20>
 801a7f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	dc02      	bgt.n	801a7fc <__sflush_r+0x20>
 801a7f6:	2000      	movs	r0, #0
 801a7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a7fe:	2e00      	cmp	r6, #0
 801a800:	d0f9      	beq.n	801a7f6 <__sflush_r+0x1a>
 801a802:	2300      	movs	r3, #0
 801a804:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a808:	682f      	ldr	r7, [r5, #0]
 801a80a:	602b      	str	r3, [r5, #0]
 801a80c:	d032      	beq.n	801a874 <__sflush_r+0x98>
 801a80e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a810:	89a3      	ldrh	r3, [r4, #12]
 801a812:	075a      	lsls	r2, r3, #29
 801a814:	d505      	bpl.n	801a822 <__sflush_r+0x46>
 801a816:	6863      	ldr	r3, [r4, #4]
 801a818:	1ac0      	subs	r0, r0, r3
 801a81a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a81c:	b10b      	cbz	r3, 801a822 <__sflush_r+0x46>
 801a81e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a820:	1ac0      	subs	r0, r0, r3
 801a822:	2300      	movs	r3, #0
 801a824:	4602      	mov	r2, r0
 801a826:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a828:	6a21      	ldr	r1, [r4, #32]
 801a82a:	4628      	mov	r0, r5
 801a82c:	47b0      	blx	r6
 801a82e:	1c43      	adds	r3, r0, #1
 801a830:	89a3      	ldrh	r3, [r4, #12]
 801a832:	d106      	bne.n	801a842 <__sflush_r+0x66>
 801a834:	6829      	ldr	r1, [r5, #0]
 801a836:	291d      	cmp	r1, #29
 801a838:	d82c      	bhi.n	801a894 <__sflush_r+0xb8>
 801a83a:	4a2a      	ldr	r2, [pc, #168]	; (801a8e4 <__sflush_r+0x108>)
 801a83c:	40ca      	lsrs	r2, r1
 801a83e:	07d6      	lsls	r6, r2, #31
 801a840:	d528      	bpl.n	801a894 <__sflush_r+0xb8>
 801a842:	2200      	movs	r2, #0
 801a844:	6062      	str	r2, [r4, #4]
 801a846:	04d9      	lsls	r1, r3, #19
 801a848:	6922      	ldr	r2, [r4, #16]
 801a84a:	6022      	str	r2, [r4, #0]
 801a84c:	d504      	bpl.n	801a858 <__sflush_r+0x7c>
 801a84e:	1c42      	adds	r2, r0, #1
 801a850:	d101      	bne.n	801a856 <__sflush_r+0x7a>
 801a852:	682b      	ldr	r3, [r5, #0]
 801a854:	b903      	cbnz	r3, 801a858 <__sflush_r+0x7c>
 801a856:	6560      	str	r0, [r4, #84]	; 0x54
 801a858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a85a:	602f      	str	r7, [r5, #0]
 801a85c:	2900      	cmp	r1, #0
 801a85e:	d0ca      	beq.n	801a7f6 <__sflush_r+0x1a>
 801a860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a864:	4299      	cmp	r1, r3
 801a866:	d002      	beq.n	801a86e <__sflush_r+0x92>
 801a868:	4628      	mov	r0, r5
 801a86a:	f7fb fea1 	bl	80165b0 <_free_r>
 801a86e:	2000      	movs	r0, #0
 801a870:	6360      	str	r0, [r4, #52]	; 0x34
 801a872:	e7c1      	b.n	801a7f8 <__sflush_r+0x1c>
 801a874:	6a21      	ldr	r1, [r4, #32]
 801a876:	2301      	movs	r3, #1
 801a878:	4628      	mov	r0, r5
 801a87a:	47b0      	blx	r6
 801a87c:	1c41      	adds	r1, r0, #1
 801a87e:	d1c7      	bne.n	801a810 <__sflush_r+0x34>
 801a880:	682b      	ldr	r3, [r5, #0]
 801a882:	2b00      	cmp	r3, #0
 801a884:	d0c4      	beq.n	801a810 <__sflush_r+0x34>
 801a886:	2b1d      	cmp	r3, #29
 801a888:	d001      	beq.n	801a88e <__sflush_r+0xb2>
 801a88a:	2b16      	cmp	r3, #22
 801a88c:	d101      	bne.n	801a892 <__sflush_r+0xb6>
 801a88e:	602f      	str	r7, [r5, #0]
 801a890:	e7b1      	b.n	801a7f6 <__sflush_r+0x1a>
 801a892:	89a3      	ldrh	r3, [r4, #12]
 801a894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a898:	81a3      	strh	r3, [r4, #12]
 801a89a:	e7ad      	b.n	801a7f8 <__sflush_r+0x1c>
 801a89c:	690f      	ldr	r7, [r1, #16]
 801a89e:	2f00      	cmp	r7, #0
 801a8a0:	d0a9      	beq.n	801a7f6 <__sflush_r+0x1a>
 801a8a2:	0793      	lsls	r3, r2, #30
 801a8a4:	680e      	ldr	r6, [r1, #0]
 801a8a6:	bf08      	it	eq
 801a8a8:	694b      	ldreq	r3, [r1, #20]
 801a8aa:	600f      	str	r7, [r1, #0]
 801a8ac:	bf18      	it	ne
 801a8ae:	2300      	movne	r3, #0
 801a8b0:	eba6 0807 	sub.w	r8, r6, r7
 801a8b4:	608b      	str	r3, [r1, #8]
 801a8b6:	f1b8 0f00 	cmp.w	r8, #0
 801a8ba:	dd9c      	ble.n	801a7f6 <__sflush_r+0x1a>
 801a8bc:	6a21      	ldr	r1, [r4, #32]
 801a8be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a8c0:	4643      	mov	r3, r8
 801a8c2:	463a      	mov	r2, r7
 801a8c4:	4628      	mov	r0, r5
 801a8c6:	47b0      	blx	r6
 801a8c8:	2800      	cmp	r0, #0
 801a8ca:	dc06      	bgt.n	801a8da <__sflush_r+0xfe>
 801a8cc:	89a3      	ldrh	r3, [r4, #12]
 801a8ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a8d2:	81a3      	strh	r3, [r4, #12]
 801a8d4:	f04f 30ff 	mov.w	r0, #4294967295
 801a8d8:	e78e      	b.n	801a7f8 <__sflush_r+0x1c>
 801a8da:	4407      	add	r7, r0
 801a8dc:	eba8 0800 	sub.w	r8, r8, r0
 801a8e0:	e7e9      	b.n	801a8b6 <__sflush_r+0xda>
 801a8e2:	bf00      	nop
 801a8e4:	20400001 	.word	0x20400001

0801a8e8 <_fflush_r>:
 801a8e8:	b538      	push	{r3, r4, r5, lr}
 801a8ea:	690b      	ldr	r3, [r1, #16]
 801a8ec:	4605      	mov	r5, r0
 801a8ee:	460c      	mov	r4, r1
 801a8f0:	b913      	cbnz	r3, 801a8f8 <_fflush_r+0x10>
 801a8f2:	2500      	movs	r5, #0
 801a8f4:	4628      	mov	r0, r5
 801a8f6:	bd38      	pop	{r3, r4, r5, pc}
 801a8f8:	b118      	cbz	r0, 801a902 <_fflush_r+0x1a>
 801a8fa:	6983      	ldr	r3, [r0, #24]
 801a8fc:	b90b      	cbnz	r3, 801a902 <_fflush_r+0x1a>
 801a8fe:	f000 f887 	bl	801aa10 <__sinit>
 801a902:	4b14      	ldr	r3, [pc, #80]	; (801a954 <_fflush_r+0x6c>)
 801a904:	429c      	cmp	r4, r3
 801a906:	d11b      	bne.n	801a940 <_fflush_r+0x58>
 801a908:	686c      	ldr	r4, [r5, #4]
 801a90a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d0ef      	beq.n	801a8f2 <_fflush_r+0xa>
 801a912:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a914:	07d0      	lsls	r0, r2, #31
 801a916:	d404      	bmi.n	801a922 <_fflush_r+0x3a>
 801a918:	0599      	lsls	r1, r3, #22
 801a91a:	d402      	bmi.n	801a922 <_fflush_r+0x3a>
 801a91c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a91e:	f7ff fd14 	bl	801a34a <__retarget_lock_acquire_recursive>
 801a922:	4628      	mov	r0, r5
 801a924:	4621      	mov	r1, r4
 801a926:	f7ff ff59 	bl	801a7dc <__sflush_r>
 801a92a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a92c:	07da      	lsls	r2, r3, #31
 801a92e:	4605      	mov	r5, r0
 801a930:	d4e0      	bmi.n	801a8f4 <_fflush_r+0xc>
 801a932:	89a3      	ldrh	r3, [r4, #12]
 801a934:	059b      	lsls	r3, r3, #22
 801a936:	d4dd      	bmi.n	801a8f4 <_fflush_r+0xc>
 801a938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a93a:	f7ff fd07 	bl	801a34c <__retarget_lock_release_recursive>
 801a93e:	e7d9      	b.n	801a8f4 <_fflush_r+0xc>
 801a940:	4b05      	ldr	r3, [pc, #20]	; (801a958 <_fflush_r+0x70>)
 801a942:	429c      	cmp	r4, r3
 801a944:	d101      	bne.n	801a94a <_fflush_r+0x62>
 801a946:	68ac      	ldr	r4, [r5, #8]
 801a948:	e7df      	b.n	801a90a <_fflush_r+0x22>
 801a94a:	4b04      	ldr	r3, [pc, #16]	; (801a95c <_fflush_r+0x74>)
 801a94c:	429c      	cmp	r4, r3
 801a94e:	bf08      	it	eq
 801a950:	68ec      	ldreq	r4, [r5, #12]
 801a952:	e7da      	b.n	801a90a <_fflush_r+0x22>
 801a954:	0801cf64 	.word	0x0801cf64
 801a958:	0801cf84 	.word	0x0801cf84
 801a95c:	0801cf44 	.word	0x0801cf44

0801a960 <std>:
 801a960:	2300      	movs	r3, #0
 801a962:	b510      	push	{r4, lr}
 801a964:	4604      	mov	r4, r0
 801a966:	e9c0 3300 	strd	r3, r3, [r0]
 801a96a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a96e:	6083      	str	r3, [r0, #8]
 801a970:	8181      	strh	r1, [r0, #12]
 801a972:	6643      	str	r3, [r0, #100]	; 0x64
 801a974:	81c2      	strh	r2, [r0, #14]
 801a976:	6183      	str	r3, [r0, #24]
 801a978:	4619      	mov	r1, r3
 801a97a:	2208      	movs	r2, #8
 801a97c:	305c      	adds	r0, #92	; 0x5c
 801a97e:	f7fb fe0f 	bl	80165a0 <memset>
 801a982:	4b05      	ldr	r3, [pc, #20]	; (801a998 <std+0x38>)
 801a984:	6263      	str	r3, [r4, #36]	; 0x24
 801a986:	4b05      	ldr	r3, [pc, #20]	; (801a99c <std+0x3c>)
 801a988:	62a3      	str	r3, [r4, #40]	; 0x28
 801a98a:	4b05      	ldr	r3, [pc, #20]	; (801a9a0 <std+0x40>)
 801a98c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a98e:	4b05      	ldr	r3, [pc, #20]	; (801a9a4 <std+0x44>)
 801a990:	6224      	str	r4, [r4, #32]
 801a992:	6323      	str	r3, [r4, #48]	; 0x30
 801a994:	bd10      	pop	{r4, pc}
 801a996:	bf00      	nop
 801a998:	0801acad 	.word	0x0801acad
 801a99c:	0801accf 	.word	0x0801accf
 801a9a0:	0801ad07 	.word	0x0801ad07
 801a9a4:	0801ad2b 	.word	0x0801ad2b

0801a9a8 <_cleanup_r>:
 801a9a8:	4901      	ldr	r1, [pc, #4]	; (801a9b0 <_cleanup_r+0x8>)
 801a9aa:	f000 b8af 	b.w	801ab0c <_fwalk_reent>
 801a9ae:	bf00      	nop
 801a9b0:	0801a8e9 	.word	0x0801a8e9

0801a9b4 <__sfmoreglue>:
 801a9b4:	b570      	push	{r4, r5, r6, lr}
 801a9b6:	1e4a      	subs	r2, r1, #1
 801a9b8:	2568      	movs	r5, #104	; 0x68
 801a9ba:	4355      	muls	r5, r2
 801a9bc:	460e      	mov	r6, r1
 801a9be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a9c2:	f7fb fe45 	bl	8016650 <_malloc_r>
 801a9c6:	4604      	mov	r4, r0
 801a9c8:	b140      	cbz	r0, 801a9dc <__sfmoreglue+0x28>
 801a9ca:	2100      	movs	r1, #0
 801a9cc:	e9c0 1600 	strd	r1, r6, [r0]
 801a9d0:	300c      	adds	r0, #12
 801a9d2:	60a0      	str	r0, [r4, #8]
 801a9d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a9d8:	f7fb fde2 	bl	80165a0 <memset>
 801a9dc:	4620      	mov	r0, r4
 801a9de:	bd70      	pop	{r4, r5, r6, pc}

0801a9e0 <__sfp_lock_acquire>:
 801a9e0:	4801      	ldr	r0, [pc, #4]	; (801a9e8 <__sfp_lock_acquire+0x8>)
 801a9e2:	f7ff bcb2 	b.w	801a34a <__retarget_lock_acquire_recursive>
 801a9e6:	bf00      	nop
 801a9e8:	20011b80 	.word	0x20011b80

0801a9ec <__sfp_lock_release>:
 801a9ec:	4801      	ldr	r0, [pc, #4]	; (801a9f4 <__sfp_lock_release+0x8>)
 801a9ee:	f7ff bcad 	b.w	801a34c <__retarget_lock_release_recursive>
 801a9f2:	bf00      	nop
 801a9f4:	20011b80 	.word	0x20011b80

0801a9f8 <__sinit_lock_acquire>:
 801a9f8:	4801      	ldr	r0, [pc, #4]	; (801aa00 <__sinit_lock_acquire+0x8>)
 801a9fa:	f7ff bca6 	b.w	801a34a <__retarget_lock_acquire_recursive>
 801a9fe:	bf00      	nop
 801aa00:	20011b7b 	.word	0x20011b7b

0801aa04 <__sinit_lock_release>:
 801aa04:	4801      	ldr	r0, [pc, #4]	; (801aa0c <__sinit_lock_release+0x8>)
 801aa06:	f7ff bca1 	b.w	801a34c <__retarget_lock_release_recursive>
 801aa0a:	bf00      	nop
 801aa0c:	20011b7b 	.word	0x20011b7b

0801aa10 <__sinit>:
 801aa10:	b510      	push	{r4, lr}
 801aa12:	4604      	mov	r4, r0
 801aa14:	f7ff fff0 	bl	801a9f8 <__sinit_lock_acquire>
 801aa18:	69a3      	ldr	r3, [r4, #24]
 801aa1a:	b11b      	cbz	r3, 801aa24 <__sinit+0x14>
 801aa1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa20:	f7ff bff0 	b.w	801aa04 <__sinit_lock_release>
 801aa24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801aa28:	6523      	str	r3, [r4, #80]	; 0x50
 801aa2a:	4b13      	ldr	r3, [pc, #76]	; (801aa78 <__sinit+0x68>)
 801aa2c:	4a13      	ldr	r2, [pc, #76]	; (801aa7c <__sinit+0x6c>)
 801aa2e:	681b      	ldr	r3, [r3, #0]
 801aa30:	62a2      	str	r2, [r4, #40]	; 0x28
 801aa32:	42a3      	cmp	r3, r4
 801aa34:	bf04      	itt	eq
 801aa36:	2301      	moveq	r3, #1
 801aa38:	61a3      	streq	r3, [r4, #24]
 801aa3a:	4620      	mov	r0, r4
 801aa3c:	f000 f820 	bl	801aa80 <__sfp>
 801aa40:	6060      	str	r0, [r4, #4]
 801aa42:	4620      	mov	r0, r4
 801aa44:	f000 f81c 	bl	801aa80 <__sfp>
 801aa48:	60a0      	str	r0, [r4, #8]
 801aa4a:	4620      	mov	r0, r4
 801aa4c:	f000 f818 	bl	801aa80 <__sfp>
 801aa50:	2200      	movs	r2, #0
 801aa52:	60e0      	str	r0, [r4, #12]
 801aa54:	2104      	movs	r1, #4
 801aa56:	6860      	ldr	r0, [r4, #4]
 801aa58:	f7ff ff82 	bl	801a960 <std>
 801aa5c:	68a0      	ldr	r0, [r4, #8]
 801aa5e:	2201      	movs	r2, #1
 801aa60:	2109      	movs	r1, #9
 801aa62:	f7ff ff7d 	bl	801a960 <std>
 801aa66:	68e0      	ldr	r0, [r4, #12]
 801aa68:	2202      	movs	r2, #2
 801aa6a:	2112      	movs	r1, #18
 801aa6c:	f7ff ff78 	bl	801a960 <std>
 801aa70:	2301      	movs	r3, #1
 801aa72:	61a3      	str	r3, [r4, #24]
 801aa74:	e7d2      	b.n	801aa1c <__sinit+0xc>
 801aa76:	bf00      	nop
 801aa78:	0801caf0 	.word	0x0801caf0
 801aa7c:	0801a9a9 	.word	0x0801a9a9

0801aa80 <__sfp>:
 801aa80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa82:	4607      	mov	r7, r0
 801aa84:	f7ff ffac 	bl	801a9e0 <__sfp_lock_acquire>
 801aa88:	4b1e      	ldr	r3, [pc, #120]	; (801ab04 <__sfp+0x84>)
 801aa8a:	681e      	ldr	r6, [r3, #0]
 801aa8c:	69b3      	ldr	r3, [r6, #24]
 801aa8e:	b913      	cbnz	r3, 801aa96 <__sfp+0x16>
 801aa90:	4630      	mov	r0, r6
 801aa92:	f7ff ffbd 	bl	801aa10 <__sinit>
 801aa96:	3648      	adds	r6, #72	; 0x48
 801aa98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801aa9c:	3b01      	subs	r3, #1
 801aa9e:	d503      	bpl.n	801aaa8 <__sfp+0x28>
 801aaa0:	6833      	ldr	r3, [r6, #0]
 801aaa2:	b30b      	cbz	r3, 801aae8 <__sfp+0x68>
 801aaa4:	6836      	ldr	r6, [r6, #0]
 801aaa6:	e7f7      	b.n	801aa98 <__sfp+0x18>
 801aaa8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801aaac:	b9d5      	cbnz	r5, 801aae4 <__sfp+0x64>
 801aaae:	4b16      	ldr	r3, [pc, #88]	; (801ab08 <__sfp+0x88>)
 801aab0:	60e3      	str	r3, [r4, #12]
 801aab2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801aab6:	6665      	str	r5, [r4, #100]	; 0x64
 801aab8:	f7ff fc46 	bl	801a348 <__retarget_lock_init_recursive>
 801aabc:	f7ff ff96 	bl	801a9ec <__sfp_lock_release>
 801aac0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801aac4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801aac8:	6025      	str	r5, [r4, #0]
 801aaca:	61a5      	str	r5, [r4, #24]
 801aacc:	2208      	movs	r2, #8
 801aace:	4629      	mov	r1, r5
 801aad0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801aad4:	f7fb fd64 	bl	80165a0 <memset>
 801aad8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801aadc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801aae0:	4620      	mov	r0, r4
 801aae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aae4:	3468      	adds	r4, #104	; 0x68
 801aae6:	e7d9      	b.n	801aa9c <__sfp+0x1c>
 801aae8:	2104      	movs	r1, #4
 801aaea:	4638      	mov	r0, r7
 801aaec:	f7ff ff62 	bl	801a9b4 <__sfmoreglue>
 801aaf0:	4604      	mov	r4, r0
 801aaf2:	6030      	str	r0, [r6, #0]
 801aaf4:	2800      	cmp	r0, #0
 801aaf6:	d1d5      	bne.n	801aaa4 <__sfp+0x24>
 801aaf8:	f7ff ff78 	bl	801a9ec <__sfp_lock_release>
 801aafc:	230c      	movs	r3, #12
 801aafe:	603b      	str	r3, [r7, #0]
 801ab00:	e7ee      	b.n	801aae0 <__sfp+0x60>
 801ab02:	bf00      	nop
 801ab04:	0801caf0 	.word	0x0801caf0
 801ab08:	ffff0001 	.word	0xffff0001

0801ab0c <_fwalk_reent>:
 801ab0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ab10:	4606      	mov	r6, r0
 801ab12:	4688      	mov	r8, r1
 801ab14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ab18:	2700      	movs	r7, #0
 801ab1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ab1e:	f1b9 0901 	subs.w	r9, r9, #1
 801ab22:	d505      	bpl.n	801ab30 <_fwalk_reent+0x24>
 801ab24:	6824      	ldr	r4, [r4, #0]
 801ab26:	2c00      	cmp	r4, #0
 801ab28:	d1f7      	bne.n	801ab1a <_fwalk_reent+0xe>
 801ab2a:	4638      	mov	r0, r7
 801ab2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab30:	89ab      	ldrh	r3, [r5, #12]
 801ab32:	2b01      	cmp	r3, #1
 801ab34:	d907      	bls.n	801ab46 <_fwalk_reent+0x3a>
 801ab36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ab3a:	3301      	adds	r3, #1
 801ab3c:	d003      	beq.n	801ab46 <_fwalk_reent+0x3a>
 801ab3e:	4629      	mov	r1, r5
 801ab40:	4630      	mov	r0, r6
 801ab42:	47c0      	blx	r8
 801ab44:	4307      	orrs	r7, r0
 801ab46:	3568      	adds	r5, #104	; 0x68
 801ab48:	e7e9      	b.n	801ab1e <_fwalk_reent+0x12>

0801ab4a <__swhatbuf_r>:
 801ab4a:	b570      	push	{r4, r5, r6, lr}
 801ab4c:	460e      	mov	r6, r1
 801ab4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ab52:	2900      	cmp	r1, #0
 801ab54:	b096      	sub	sp, #88	; 0x58
 801ab56:	4614      	mov	r4, r2
 801ab58:	461d      	mov	r5, r3
 801ab5a:	da07      	bge.n	801ab6c <__swhatbuf_r+0x22>
 801ab5c:	2300      	movs	r3, #0
 801ab5e:	602b      	str	r3, [r5, #0]
 801ab60:	89b3      	ldrh	r3, [r6, #12]
 801ab62:	061a      	lsls	r2, r3, #24
 801ab64:	d410      	bmi.n	801ab88 <__swhatbuf_r+0x3e>
 801ab66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ab6a:	e00e      	b.n	801ab8a <__swhatbuf_r+0x40>
 801ab6c:	466a      	mov	r2, sp
 801ab6e:	f000 f903 	bl	801ad78 <_fstat_r>
 801ab72:	2800      	cmp	r0, #0
 801ab74:	dbf2      	blt.n	801ab5c <__swhatbuf_r+0x12>
 801ab76:	9a01      	ldr	r2, [sp, #4]
 801ab78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ab7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ab80:	425a      	negs	r2, r3
 801ab82:	415a      	adcs	r2, r3
 801ab84:	602a      	str	r2, [r5, #0]
 801ab86:	e7ee      	b.n	801ab66 <__swhatbuf_r+0x1c>
 801ab88:	2340      	movs	r3, #64	; 0x40
 801ab8a:	2000      	movs	r0, #0
 801ab8c:	6023      	str	r3, [r4, #0]
 801ab8e:	b016      	add	sp, #88	; 0x58
 801ab90:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ab94 <__smakebuf_r>:
 801ab94:	898b      	ldrh	r3, [r1, #12]
 801ab96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ab98:	079d      	lsls	r5, r3, #30
 801ab9a:	4606      	mov	r6, r0
 801ab9c:	460c      	mov	r4, r1
 801ab9e:	d507      	bpl.n	801abb0 <__smakebuf_r+0x1c>
 801aba0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801aba4:	6023      	str	r3, [r4, #0]
 801aba6:	6123      	str	r3, [r4, #16]
 801aba8:	2301      	movs	r3, #1
 801abaa:	6163      	str	r3, [r4, #20]
 801abac:	b002      	add	sp, #8
 801abae:	bd70      	pop	{r4, r5, r6, pc}
 801abb0:	ab01      	add	r3, sp, #4
 801abb2:	466a      	mov	r2, sp
 801abb4:	f7ff ffc9 	bl	801ab4a <__swhatbuf_r>
 801abb8:	9900      	ldr	r1, [sp, #0]
 801abba:	4605      	mov	r5, r0
 801abbc:	4630      	mov	r0, r6
 801abbe:	f7fb fd47 	bl	8016650 <_malloc_r>
 801abc2:	b948      	cbnz	r0, 801abd8 <__smakebuf_r+0x44>
 801abc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801abc8:	059a      	lsls	r2, r3, #22
 801abca:	d4ef      	bmi.n	801abac <__smakebuf_r+0x18>
 801abcc:	f023 0303 	bic.w	r3, r3, #3
 801abd0:	f043 0302 	orr.w	r3, r3, #2
 801abd4:	81a3      	strh	r3, [r4, #12]
 801abd6:	e7e3      	b.n	801aba0 <__smakebuf_r+0xc>
 801abd8:	4b0d      	ldr	r3, [pc, #52]	; (801ac10 <__smakebuf_r+0x7c>)
 801abda:	62b3      	str	r3, [r6, #40]	; 0x28
 801abdc:	89a3      	ldrh	r3, [r4, #12]
 801abde:	6020      	str	r0, [r4, #0]
 801abe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801abe4:	81a3      	strh	r3, [r4, #12]
 801abe6:	9b00      	ldr	r3, [sp, #0]
 801abe8:	6163      	str	r3, [r4, #20]
 801abea:	9b01      	ldr	r3, [sp, #4]
 801abec:	6120      	str	r0, [r4, #16]
 801abee:	b15b      	cbz	r3, 801ac08 <__smakebuf_r+0x74>
 801abf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801abf4:	4630      	mov	r0, r6
 801abf6:	f000 f8d1 	bl	801ad9c <_isatty_r>
 801abfa:	b128      	cbz	r0, 801ac08 <__smakebuf_r+0x74>
 801abfc:	89a3      	ldrh	r3, [r4, #12]
 801abfe:	f023 0303 	bic.w	r3, r3, #3
 801ac02:	f043 0301 	orr.w	r3, r3, #1
 801ac06:	81a3      	strh	r3, [r4, #12]
 801ac08:	89a0      	ldrh	r0, [r4, #12]
 801ac0a:	4305      	orrs	r5, r0
 801ac0c:	81a5      	strh	r5, [r4, #12]
 801ac0e:	e7cd      	b.n	801abac <__smakebuf_r+0x18>
 801ac10:	0801a9a9 	.word	0x0801a9a9

0801ac14 <_malloc_usable_size_r>:
 801ac14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ac18:	1f18      	subs	r0, r3, #4
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	bfbc      	itt	lt
 801ac1e:	580b      	ldrlt	r3, [r1, r0]
 801ac20:	18c0      	addlt	r0, r0, r3
 801ac22:	4770      	bx	lr

0801ac24 <_raise_r>:
 801ac24:	291f      	cmp	r1, #31
 801ac26:	b538      	push	{r3, r4, r5, lr}
 801ac28:	4604      	mov	r4, r0
 801ac2a:	460d      	mov	r5, r1
 801ac2c:	d904      	bls.n	801ac38 <_raise_r+0x14>
 801ac2e:	2316      	movs	r3, #22
 801ac30:	6003      	str	r3, [r0, #0]
 801ac32:	f04f 30ff 	mov.w	r0, #4294967295
 801ac36:	bd38      	pop	{r3, r4, r5, pc}
 801ac38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ac3a:	b112      	cbz	r2, 801ac42 <_raise_r+0x1e>
 801ac3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ac40:	b94b      	cbnz	r3, 801ac56 <_raise_r+0x32>
 801ac42:	4620      	mov	r0, r4
 801ac44:	f000 f830 	bl	801aca8 <_getpid_r>
 801ac48:	462a      	mov	r2, r5
 801ac4a:	4601      	mov	r1, r0
 801ac4c:	4620      	mov	r0, r4
 801ac4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ac52:	f000 b817 	b.w	801ac84 <_kill_r>
 801ac56:	2b01      	cmp	r3, #1
 801ac58:	d00a      	beq.n	801ac70 <_raise_r+0x4c>
 801ac5a:	1c59      	adds	r1, r3, #1
 801ac5c:	d103      	bne.n	801ac66 <_raise_r+0x42>
 801ac5e:	2316      	movs	r3, #22
 801ac60:	6003      	str	r3, [r0, #0]
 801ac62:	2001      	movs	r0, #1
 801ac64:	e7e7      	b.n	801ac36 <_raise_r+0x12>
 801ac66:	2400      	movs	r4, #0
 801ac68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ac6c:	4628      	mov	r0, r5
 801ac6e:	4798      	blx	r3
 801ac70:	2000      	movs	r0, #0
 801ac72:	e7e0      	b.n	801ac36 <_raise_r+0x12>

0801ac74 <raise>:
 801ac74:	4b02      	ldr	r3, [pc, #8]	; (801ac80 <raise+0xc>)
 801ac76:	4601      	mov	r1, r0
 801ac78:	6818      	ldr	r0, [r3, #0]
 801ac7a:	f7ff bfd3 	b.w	801ac24 <_raise_r>
 801ac7e:	bf00      	nop
 801ac80:	20004210 	.word	0x20004210

0801ac84 <_kill_r>:
 801ac84:	b538      	push	{r3, r4, r5, lr}
 801ac86:	4d07      	ldr	r5, [pc, #28]	; (801aca4 <_kill_r+0x20>)
 801ac88:	2300      	movs	r3, #0
 801ac8a:	4604      	mov	r4, r0
 801ac8c:	4608      	mov	r0, r1
 801ac8e:	4611      	mov	r1, r2
 801ac90:	602b      	str	r3, [r5, #0]
 801ac92:	f7f0 fd35 	bl	800b700 <_kill>
 801ac96:	1c43      	adds	r3, r0, #1
 801ac98:	d102      	bne.n	801aca0 <_kill_r+0x1c>
 801ac9a:	682b      	ldr	r3, [r5, #0]
 801ac9c:	b103      	cbz	r3, 801aca0 <_kill_r+0x1c>
 801ac9e:	6023      	str	r3, [r4, #0]
 801aca0:	bd38      	pop	{r3, r4, r5, pc}
 801aca2:	bf00      	nop
 801aca4:	20011b74 	.word	0x20011b74

0801aca8 <_getpid_r>:
 801aca8:	f7f0 bd22 	b.w	800b6f0 <_getpid>

0801acac <__sread>:
 801acac:	b510      	push	{r4, lr}
 801acae:	460c      	mov	r4, r1
 801acb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801acb4:	f000 f894 	bl	801ade0 <_read_r>
 801acb8:	2800      	cmp	r0, #0
 801acba:	bfab      	itete	ge
 801acbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801acbe:	89a3      	ldrhlt	r3, [r4, #12]
 801acc0:	181b      	addge	r3, r3, r0
 801acc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801acc6:	bfac      	ite	ge
 801acc8:	6563      	strge	r3, [r4, #84]	; 0x54
 801acca:	81a3      	strhlt	r3, [r4, #12]
 801accc:	bd10      	pop	{r4, pc}

0801acce <__swrite>:
 801acce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801acd2:	461f      	mov	r7, r3
 801acd4:	898b      	ldrh	r3, [r1, #12]
 801acd6:	05db      	lsls	r3, r3, #23
 801acd8:	4605      	mov	r5, r0
 801acda:	460c      	mov	r4, r1
 801acdc:	4616      	mov	r6, r2
 801acde:	d505      	bpl.n	801acec <__swrite+0x1e>
 801ace0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ace4:	2302      	movs	r3, #2
 801ace6:	2200      	movs	r2, #0
 801ace8:	f000 f868 	bl	801adbc <_lseek_r>
 801acec:	89a3      	ldrh	r3, [r4, #12]
 801acee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801acf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801acf6:	81a3      	strh	r3, [r4, #12]
 801acf8:	4632      	mov	r2, r6
 801acfa:	463b      	mov	r3, r7
 801acfc:	4628      	mov	r0, r5
 801acfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ad02:	f000 b817 	b.w	801ad34 <_write_r>

0801ad06 <__sseek>:
 801ad06:	b510      	push	{r4, lr}
 801ad08:	460c      	mov	r4, r1
 801ad0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad0e:	f000 f855 	bl	801adbc <_lseek_r>
 801ad12:	1c43      	adds	r3, r0, #1
 801ad14:	89a3      	ldrh	r3, [r4, #12]
 801ad16:	bf15      	itete	ne
 801ad18:	6560      	strne	r0, [r4, #84]	; 0x54
 801ad1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ad1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ad22:	81a3      	strheq	r3, [r4, #12]
 801ad24:	bf18      	it	ne
 801ad26:	81a3      	strhne	r3, [r4, #12]
 801ad28:	bd10      	pop	{r4, pc}

0801ad2a <__sclose>:
 801ad2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad2e:	f000 b813 	b.w	801ad58 <_close_r>
	...

0801ad34 <_write_r>:
 801ad34:	b538      	push	{r3, r4, r5, lr}
 801ad36:	4d07      	ldr	r5, [pc, #28]	; (801ad54 <_write_r+0x20>)
 801ad38:	4604      	mov	r4, r0
 801ad3a:	4608      	mov	r0, r1
 801ad3c:	4611      	mov	r1, r2
 801ad3e:	2200      	movs	r2, #0
 801ad40:	602a      	str	r2, [r5, #0]
 801ad42:	461a      	mov	r2, r3
 801ad44:	f7f0 fd13 	bl	800b76e <_write>
 801ad48:	1c43      	adds	r3, r0, #1
 801ad4a:	d102      	bne.n	801ad52 <_write_r+0x1e>
 801ad4c:	682b      	ldr	r3, [r5, #0]
 801ad4e:	b103      	cbz	r3, 801ad52 <_write_r+0x1e>
 801ad50:	6023      	str	r3, [r4, #0]
 801ad52:	bd38      	pop	{r3, r4, r5, pc}
 801ad54:	20011b74 	.word	0x20011b74

0801ad58 <_close_r>:
 801ad58:	b538      	push	{r3, r4, r5, lr}
 801ad5a:	4d06      	ldr	r5, [pc, #24]	; (801ad74 <_close_r+0x1c>)
 801ad5c:	2300      	movs	r3, #0
 801ad5e:	4604      	mov	r4, r0
 801ad60:	4608      	mov	r0, r1
 801ad62:	602b      	str	r3, [r5, #0]
 801ad64:	f7f0 fd1f 	bl	800b7a6 <_close>
 801ad68:	1c43      	adds	r3, r0, #1
 801ad6a:	d102      	bne.n	801ad72 <_close_r+0x1a>
 801ad6c:	682b      	ldr	r3, [r5, #0]
 801ad6e:	b103      	cbz	r3, 801ad72 <_close_r+0x1a>
 801ad70:	6023      	str	r3, [r4, #0]
 801ad72:	bd38      	pop	{r3, r4, r5, pc}
 801ad74:	20011b74 	.word	0x20011b74

0801ad78 <_fstat_r>:
 801ad78:	b538      	push	{r3, r4, r5, lr}
 801ad7a:	4d07      	ldr	r5, [pc, #28]	; (801ad98 <_fstat_r+0x20>)
 801ad7c:	2300      	movs	r3, #0
 801ad7e:	4604      	mov	r4, r0
 801ad80:	4608      	mov	r0, r1
 801ad82:	4611      	mov	r1, r2
 801ad84:	602b      	str	r3, [r5, #0]
 801ad86:	f7f0 fd1a 	bl	800b7be <_fstat>
 801ad8a:	1c43      	adds	r3, r0, #1
 801ad8c:	d102      	bne.n	801ad94 <_fstat_r+0x1c>
 801ad8e:	682b      	ldr	r3, [r5, #0]
 801ad90:	b103      	cbz	r3, 801ad94 <_fstat_r+0x1c>
 801ad92:	6023      	str	r3, [r4, #0]
 801ad94:	bd38      	pop	{r3, r4, r5, pc}
 801ad96:	bf00      	nop
 801ad98:	20011b74 	.word	0x20011b74

0801ad9c <_isatty_r>:
 801ad9c:	b538      	push	{r3, r4, r5, lr}
 801ad9e:	4d06      	ldr	r5, [pc, #24]	; (801adb8 <_isatty_r+0x1c>)
 801ada0:	2300      	movs	r3, #0
 801ada2:	4604      	mov	r4, r0
 801ada4:	4608      	mov	r0, r1
 801ada6:	602b      	str	r3, [r5, #0]
 801ada8:	f7f0 fd19 	bl	800b7de <_isatty>
 801adac:	1c43      	adds	r3, r0, #1
 801adae:	d102      	bne.n	801adb6 <_isatty_r+0x1a>
 801adb0:	682b      	ldr	r3, [r5, #0]
 801adb2:	b103      	cbz	r3, 801adb6 <_isatty_r+0x1a>
 801adb4:	6023      	str	r3, [r4, #0]
 801adb6:	bd38      	pop	{r3, r4, r5, pc}
 801adb8:	20011b74 	.word	0x20011b74

0801adbc <_lseek_r>:
 801adbc:	b538      	push	{r3, r4, r5, lr}
 801adbe:	4d07      	ldr	r5, [pc, #28]	; (801addc <_lseek_r+0x20>)
 801adc0:	4604      	mov	r4, r0
 801adc2:	4608      	mov	r0, r1
 801adc4:	4611      	mov	r1, r2
 801adc6:	2200      	movs	r2, #0
 801adc8:	602a      	str	r2, [r5, #0]
 801adca:	461a      	mov	r2, r3
 801adcc:	f7f0 fd12 	bl	800b7f4 <_lseek>
 801add0:	1c43      	adds	r3, r0, #1
 801add2:	d102      	bne.n	801adda <_lseek_r+0x1e>
 801add4:	682b      	ldr	r3, [r5, #0]
 801add6:	b103      	cbz	r3, 801adda <_lseek_r+0x1e>
 801add8:	6023      	str	r3, [r4, #0]
 801adda:	bd38      	pop	{r3, r4, r5, pc}
 801addc:	20011b74 	.word	0x20011b74

0801ade0 <_read_r>:
 801ade0:	b538      	push	{r3, r4, r5, lr}
 801ade2:	4d07      	ldr	r5, [pc, #28]	; (801ae00 <_read_r+0x20>)
 801ade4:	4604      	mov	r4, r0
 801ade6:	4608      	mov	r0, r1
 801ade8:	4611      	mov	r1, r2
 801adea:	2200      	movs	r2, #0
 801adec:	602a      	str	r2, [r5, #0]
 801adee:	461a      	mov	r2, r3
 801adf0:	f7f0 fca0 	bl	800b734 <_read>
 801adf4:	1c43      	adds	r3, r0, #1
 801adf6:	d102      	bne.n	801adfe <_read_r+0x1e>
 801adf8:	682b      	ldr	r3, [r5, #0]
 801adfa:	b103      	cbz	r3, 801adfe <_read_r+0x1e>
 801adfc:	6023      	str	r3, [r4, #0]
 801adfe:	bd38      	pop	{r3, r4, r5, pc}
 801ae00:	20011b74 	.word	0x20011b74
 801ae04:	00000000 	.word	0x00000000

0801ae08 <ceil>:
 801ae08:	ec51 0b10 	vmov	r0, r1, d0
 801ae0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae10:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801ae14:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801ae18:	2e13      	cmp	r6, #19
 801ae1a:	ee10 5a10 	vmov	r5, s0
 801ae1e:	ee10 8a10 	vmov	r8, s0
 801ae22:	460c      	mov	r4, r1
 801ae24:	dc30      	bgt.n	801ae88 <ceil+0x80>
 801ae26:	2e00      	cmp	r6, #0
 801ae28:	da12      	bge.n	801ae50 <ceil+0x48>
 801ae2a:	a335      	add	r3, pc, #212	; (adr r3, 801af00 <ceil+0xf8>)
 801ae2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae30:	f7e5 fa2c 	bl	800028c <__adddf3>
 801ae34:	2200      	movs	r2, #0
 801ae36:	2300      	movs	r3, #0
 801ae38:	f7e5 fe6e 	bl	8000b18 <__aeabi_dcmpgt>
 801ae3c:	b128      	cbz	r0, 801ae4a <ceil+0x42>
 801ae3e:	2c00      	cmp	r4, #0
 801ae40:	db55      	blt.n	801aeee <ceil+0xe6>
 801ae42:	432c      	orrs	r4, r5
 801ae44:	d057      	beq.n	801aef6 <ceil+0xee>
 801ae46:	4c30      	ldr	r4, [pc, #192]	; (801af08 <ceil+0x100>)
 801ae48:	2500      	movs	r5, #0
 801ae4a:	4621      	mov	r1, r4
 801ae4c:	4628      	mov	r0, r5
 801ae4e:	e025      	b.n	801ae9c <ceil+0x94>
 801ae50:	4f2e      	ldr	r7, [pc, #184]	; (801af0c <ceil+0x104>)
 801ae52:	4137      	asrs	r7, r6
 801ae54:	ea01 0307 	and.w	r3, r1, r7
 801ae58:	4303      	orrs	r3, r0
 801ae5a:	d01f      	beq.n	801ae9c <ceil+0x94>
 801ae5c:	a328      	add	r3, pc, #160	; (adr r3, 801af00 <ceil+0xf8>)
 801ae5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae62:	f7e5 fa13 	bl	800028c <__adddf3>
 801ae66:	2200      	movs	r2, #0
 801ae68:	2300      	movs	r3, #0
 801ae6a:	f7e5 fe55 	bl	8000b18 <__aeabi_dcmpgt>
 801ae6e:	2800      	cmp	r0, #0
 801ae70:	d0eb      	beq.n	801ae4a <ceil+0x42>
 801ae72:	2c00      	cmp	r4, #0
 801ae74:	bfc2      	ittt	gt
 801ae76:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 801ae7a:	fa43 f606 	asrgt.w	r6, r3, r6
 801ae7e:	19a4      	addgt	r4, r4, r6
 801ae80:	ea24 0407 	bic.w	r4, r4, r7
 801ae84:	2500      	movs	r5, #0
 801ae86:	e7e0      	b.n	801ae4a <ceil+0x42>
 801ae88:	2e33      	cmp	r6, #51	; 0x33
 801ae8a:	dd0b      	ble.n	801aea4 <ceil+0x9c>
 801ae8c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ae90:	d104      	bne.n	801ae9c <ceil+0x94>
 801ae92:	ee10 2a10 	vmov	r2, s0
 801ae96:	460b      	mov	r3, r1
 801ae98:	f7e5 f9f8 	bl	800028c <__adddf3>
 801ae9c:	ec41 0b10 	vmov	d0, r0, r1
 801aea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aea4:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801aea8:	f04f 33ff 	mov.w	r3, #4294967295
 801aeac:	fa23 f707 	lsr.w	r7, r3, r7
 801aeb0:	4207      	tst	r7, r0
 801aeb2:	d0f3      	beq.n	801ae9c <ceil+0x94>
 801aeb4:	a312      	add	r3, pc, #72	; (adr r3, 801af00 <ceil+0xf8>)
 801aeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aeba:	f7e5 f9e7 	bl	800028c <__adddf3>
 801aebe:	2200      	movs	r2, #0
 801aec0:	2300      	movs	r3, #0
 801aec2:	f7e5 fe29 	bl	8000b18 <__aeabi_dcmpgt>
 801aec6:	2800      	cmp	r0, #0
 801aec8:	d0bf      	beq.n	801ae4a <ceil+0x42>
 801aeca:	2c00      	cmp	r4, #0
 801aecc:	dd02      	ble.n	801aed4 <ceil+0xcc>
 801aece:	2e14      	cmp	r6, #20
 801aed0:	d103      	bne.n	801aeda <ceil+0xd2>
 801aed2:	3401      	adds	r4, #1
 801aed4:	ea25 0507 	bic.w	r5, r5, r7
 801aed8:	e7b7      	b.n	801ae4a <ceil+0x42>
 801aeda:	2301      	movs	r3, #1
 801aedc:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801aee0:	fa03 f606 	lsl.w	r6, r3, r6
 801aee4:	4435      	add	r5, r6
 801aee6:	4545      	cmp	r5, r8
 801aee8:	bf38      	it	cc
 801aeea:	18e4      	addcc	r4, r4, r3
 801aeec:	e7f2      	b.n	801aed4 <ceil+0xcc>
 801aeee:	2500      	movs	r5, #0
 801aef0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801aef4:	e7a9      	b.n	801ae4a <ceil+0x42>
 801aef6:	4625      	mov	r5, r4
 801aef8:	e7a7      	b.n	801ae4a <ceil+0x42>
 801aefa:	bf00      	nop
 801aefc:	f3af 8000 	nop.w
 801af00:	8800759c 	.word	0x8800759c
 801af04:	7e37e43c 	.word	0x7e37e43c
 801af08:	3ff00000 	.word	0x3ff00000
 801af0c:	000fffff 	.word	0x000fffff

0801af10 <cos>:
 801af10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801af12:	ec53 2b10 	vmov	r2, r3, d0
 801af16:	4824      	ldr	r0, [pc, #144]	; (801afa8 <cos+0x98>)
 801af18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801af1c:	4281      	cmp	r1, r0
 801af1e:	dc06      	bgt.n	801af2e <cos+0x1e>
 801af20:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 801afa0 <cos+0x90>
 801af24:	f000 fce4 	bl	801b8f0 <__kernel_cos>
 801af28:	ec51 0b10 	vmov	r0, r1, d0
 801af2c:	e007      	b.n	801af3e <cos+0x2e>
 801af2e:	481f      	ldr	r0, [pc, #124]	; (801afac <cos+0x9c>)
 801af30:	4281      	cmp	r1, r0
 801af32:	dd09      	ble.n	801af48 <cos+0x38>
 801af34:	ee10 0a10 	vmov	r0, s0
 801af38:	4619      	mov	r1, r3
 801af3a:	f7e5 f9a5 	bl	8000288 <__aeabi_dsub>
 801af3e:	ec41 0b10 	vmov	d0, r0, r1
 801af42:	b005      	add	sp, #20
 801af44:	f85d fb04 	ldr.w	pc, [sp], #4
 801af48:	4668      	mov	r0, sp
 801af4a:	f000 fa11 	bl	801b370 <__ieee754_rem_pio2>
 801af4e:	f000 0003 	and.w	r0, r0, #3
 801af52:	2801      	cmp	r0, #1
 801af54:	d007      	beq.n	801af66 <cos+0x56>
 801af56:	2802      	cmp	r0, #2
 801af58:	d012      	beq.n	801af80 <cos+0x70>
 801af5a:	b9c0      	cbnz	r0, 801af8e <cos+0x7e>
 801af5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801af60:	ed9d 0b00 	vldr	d0, [sp]
 801af64:	e7de      	b.n	801af24 <cos+0x14>
 801af66:	ed9d 1b02 	vldr	d1, [sp, #8]
 801af6a:	ed9d 0b00 	vldr	d0, [sp]
 801af6e:	f001 f8c7 	bl	801c100 <__kernel_sin>
 801af72:	ec53 2b10 	vmov	r2, r3, d0
 801af76:	ee10 0a10 	vmov	r0, s0
 801af7a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801af7e:	e7de      	b.n	801af3e <cos+0x2e>
 801af80:	ed9d 1b02 	vldr	d1, [sp, #8]
 801af84:	ed9d 0b00 	vldr	d0, [sp]
 801af88:	f000 fcb2 	bl	801b8f0 <__kernel_cos>
 801af8c:	e7f1      	b.n	801af72 <cos+0x62>
 801af8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801af92:	ed9d 0b00 	vldr	d0, [sp]
 801af96:	2001      	movs	r0, #1
 801af98:	f001 f8b2 	bl	801c100 <__kernel_sin>
 801af9c:	e7c4      	b.n	801af28 <cos+0x18>
 801af9e:	bf00      	nop
	...
 801afa8:	3fe921fb 	.word	0x3fe921fb
 801afac:	7fefffff 	.word	0x7fefffff

0801afb0 <round>:
 801afb0:	ec51 0b10 	vmov	r0, r1, d0
 801afb4:	b570      	push	{r4, r5, r6, lr}
 801afb6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801afba:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 801afbe:	2c13      	cmp	r4, #19
 801afc0:	ee10 2a10 	vmov	r2, s0
 801afc4:	460b      	mov	r3, r1
 801afc6:	dc19      	bgt.n	801affc <round+0x4c>
 801afc8:	2c00      	cmp	r4, #0
 801afca:	da09      	bge.n	801afe0 <round+0x30>
 801afcc:	3401      	adds	r4, #1
 801afce:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801afd2:	d103      	bne.n	801afdc <round+0x2c>
 801afd4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801afd8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801afdc:	2100      	movs	r1, #0
 801afde:	e028      	b.n	801b032 <round+0x82>
 801afe0:	4d15      	ldr	r5, [pc, #84]	; (801b038 <round+0x88>)
 801afe2:	4125      	asrs	r5, r4
 801afe4:	ea01 0605 	and.w	r6, r1, r5
 801afe8:	4332      	orrs	r2, r6
 801afea:	d00e      	beq.n	801b00a <round+0x5a>
 801afec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801aff0:	fa42 f404 	asr.w	r4, r2, r4
 801aff4:	4423      	add	r3, r4
 801aff6:	ea23 0305 	bic.w	r3, r3, r5
 801affa:	e7ef      	b.n	801afdc <round+0x2c>
 801affc:	2c33      	cmp	r4, #51	; 0x33
 801affe:	dd07      	ble.n	801b010 <round+0x60>
 801b000:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801b004:	d101      	bne.n	801b00a <round+0x5a>
 801b006:	f7e5 f941 	bl	800028c <__adddf3>
 801b00a:	ec41 0b10 	vmov	d0, r0, r1
 801b00e:	bd70      	pop	{r4, r5, r6, pc}
 801b010:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 801b014:	f04f 35ff 	mov.w	r5, #4294967295
 801b018:	40f5      	lsrs	r5, r6
 801b01a:	4228      	tst	r0, r5
 801b01c:	d0f5      	beq.n	801b00a <round+0x5a>
 801b01e:	2101      	movs	r1, #1
 801b020:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801b024:	fa01 f404 	lsl.w	r4, r1, r4
 801b028:	1912      	adds	r2, r2, r4
 801b02a:	bf28      	it	cs
 801b02c:	185b      	addcs	r3, r3, r1
 801b02e:	ea22 0105 	bic.w	r1, r2, r5
 801b032:	4608      	mov	r0, r1
 801b034:	4619      	mov	r1, r3
 801b036:	e7e8      	b.n	801b00a <round+0x5a>
 801b038:	000fffff 	.word	0x000fffff
 801b03c:	00000000 	.word	0x00000000

0801b040 <sin>:
 801b040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b042:	ec53 2b10 	vmov	r2, r3, d0
 801b046:	4826      	ldr	r0, [pc, #152]	; (801b0e0 <sin+0xa0>)
 801b048:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801b04c:	4281      	cmp	r1, r0
 801b04e:	dc07      	bgt.n	801b060 <sin+0x20>
 801b050:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801b0d8 <sin+0x98>
 801b054:	2000      	movs	r0, #0
 801b056:	f001 f853 	bl	801c100 <__kernel_sin>
 801b05a:	ec51 0b10 	vmov	r0, r1, d0
 801b05e:	e007      	b.n	801b070 <sin+0x30>
 801b060:	4820      	ldr	r0, [pc, #128]	; (801b0e4 <sin+0xa4>)
 801b062:	4281      	cmp	r1, r0
 801b064:	dd09      	ble.n	801b07a <sin+0x3a>
 801b066:	ee10 0a10 	vmov	r0, s0
 801b06a:	4619      	mov	r1, r3
 801b06c:	f7e5 f90c 	bl	8000288 <__aeabi_dsub>
 801b070:	ec41 0b10 	vmov	d0, r0, r1
 801b074:	b005      	add	sp, #20
 801b076:	f85d fb04 	ldr.w	pc, [sp], #4
 801b07a:	4668      	mov	r0, sp
 801b07c:	f000 f978 	bl	801b370 <__ieee754_rem_pio2>
 801b080:	f000 0003 	and.w	r0, r0, #3
 801b084:	2801      	cmp	r0, #1
 801b086:	d008      	beq.n	801b09a <sin+0x5a>
 801b088:	2802      	cmp	r0, #2
 801b08a:	d00d      	beq.n	801b0a8 <sin+0x68>
 801b08c:	b9d0      	cbnz	r0, 801b0c4 <sin+0x84>
 801b08e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b092:	ed9d 0b00 	vldr	d0, [sp]
 801b096:	2001      	movs	r0, #1
 801b098:	e7dd      	b.n	801b056 <sin+0x16>
 801b09a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b09e:	ed9d 0b00 	vldr	d0, [sp]
 801b0a2:	f000 fc25 	bl	801b8f0 <__kernel_cos>
 801b0a6:	e7d8      	b.n	801b05a <sin+0x1a>
 801b0a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b0ac:	ed9d 0b00 	vldr	d0, [sp]
 801b0b0:	2001      	movs	r0, #1
 801b0b2:	f001 f825 	bl	801c100 <__kernel_sin>
 801b0b6:	ec53 2b10 	vmov	r2, r3, d0
 801b0ba:	ee10 0a10 	vmov	r0, s0
 801b0be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801b0c2:	e7d5      	b.n	801b070 <sin+0x30>
 801b0c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b0c8:	ed9d 0b00 	vldr	d0, [sp]
 801b0cc:	f000 fc10 	bl	801b8f0 <__kernel_cos>
 801b0d0:	e7f1      	b.n	801b0b6 <sin+0x76>
 801b0d2:	bf00      	nop
 801b0d4:	f3af 8000 	nop.w
	...
 801b0e0:	3fe921fb 	.word	0x3fe921fb
 801b0e4:	7fefffff 	.word	0x7fefffff

0801b0e8 <ceilf>:
 801b0e8:	ee10 3a10 	vmov	r3, s0
 801b0ec:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b0f0:	3a7f      	subs	r2, #127	; 0x7f
 801b0f2:	2a16      	cmp	r2, #22
 801b0f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801b0f8:	dc2a      	bgt.n	801b150 <ceilf+0x68>
 801b0fa:	2a00      	cmp	r2, #0
 801b0fc:	da11      	bge.n	801b122 <ceilf+0x3a>
 801b0fe:	eddf 7a19 	vldr	s15, [pc, #100]	; 801b164 <ceilf+0x7c>
 801b102:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b106:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b10e:	dd05      	ble.n	801b11c <ceilf+0x34>
 801b110:	2b00      	cmp	r3, #0
 801b112:	db23      	blt.n	801b15c <ceilf+0x74>
 801b114:	2900      	cmp	r1, #0
 801b116:	bf18      	it	ne
 801b118:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 801b11c:	ee00 3a10 	vmov	s0, r3
 801b120:	4770      	bx	lr
 801b122:	4911      	ldr	r1, [pc, #68]	; (801b168 <ceilf+0x80>)
 801b124:	4111      	asrs	r1, r2
 801b126:	420b      	tst	r3, r1
 801b128:	d0fa      	beq.n	801b120 <ceilf+0x38>
 801b12a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801b164 <ceilf+0x7c>
 801b12e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b132:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b13a:	ddef      	ble.n	801b11c <ceilf+0x34>
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	bfc2      	ittt	gt
 801b140:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 801b144:	fa40 f202 	asrgt.w	r2, r0, r2
 801b148:	189b      	addgt	r3, r3, r2
 801b14a:	ea23 0301 	bic.w	r3, r3, r1
 801b14e:	e7e5      	b.n	801b11c <ceilf+0x34>
 801b150:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801b154:	d3e4      	bcc.n	801b120 <ceilf+0x38>
 801b156:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b15a:	4770      	bx	lr
 801b15c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801b160:	e7dc      	b.n	801b11c <ceilf+0x34>
 801b162:	bf00      	nop
 801b164:	7149f2ca 	.word	0x7149f2ca
 801b168:	007fffff 	.word	0x007fffff

0801b16c <atan2>:
 801b16c:	f000 b834 	b.w	801b1d8 <__ieee754_atan2>

0801b170 <sqrt>:
 801b170:	b538      	push	{r3, r4, r5, lr}
 801b172:	ed2d 8b02 	vpush	{d8}
 801b176:	ec55 4b10 	vmov	r4, r5, d0
 801b17a:	f000 fb03 	bl	801b784 <__ieee754_sqrt>
 801b17e:	4b15      	ldr	r3, [pc, #84]	; (801b1d4 <sqrt+0x64>)
 801b180:	eeb0 8a40 	vmov.f32	s16, s0
 801b184:	eef0 8a60 	vmov.f32	s17, s1
 801b188:	f993 3000 	ldrsb.w	r3, [r3]
 801b18c:	3301      	adds	r3, #1
 801b18e:	d019      	beq.n	801b1c4 <sqrt+0x54>
 801b190:	4622      	mov	r2, r4
 801b192:	462b      	mov	r3, r5
 801b194:	4620      	mov	r0, r4
 801b196:	4629      	mov	r1, r5
 801b198:	f7e5 fcc8 	bl	8000b2c <__aeabi_dcmpun>
 801b19c:	b990      	cbnz	r0, 801b1c4 <sqrt+0x54>
 801b19e:	2200      	movs	r2, #0
 801b1a0:	2300      	movs	r3, #0
 801b1a2:	4620      	mov	r0, r4
 801b1a4:	4629      	mov	r1, r5
 801b1a6:	f7e5 fc99 	bl	8000adc <__aeabi_dcmplt>
 801b1aa:	b158      	cbz	r0, 801b1c4 <sqrt+0x54>
 801b1ac:	f7fb f996 	bl	80164dc <__errno>
 801b1b0:	2321      	movs	r3, #33	; 0x21
 801b1b2:	6003      	str	r3, [r0, #0]
 801b1b4:	2200      	movs	r2, #0
 801b1b6:	2300      	movs	r3, #0
 801b1b8:	4610      	mov	r0, r2
 801b1ba:	4619      	mov	r1, r3
 801b1bc:	f7e5 fb46 	bl	800084c <__aeabi_ddiv>
 801b1c0:	ec41 0b18 	vmov	d8, r0, r1
 801b1c4:	eeb0 0a48 	vmov.f32	s0, s16
 801b1c8:	eef0 0a68 	vmov.f32	s1, s17
 801b1cc:	ecbd 8b02 	vpop	{d8}
 801b1d0:	bd38      	pop	{r3, r4, r5, pc}
 801b1d2:	bf00      	nop
 801b1d4:	200043e4 	.word	0x200043e4

0801b1d8 <__ieee754_atan2>:
 801b1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b1dc:	ec57 6b11 	vmov	r6, r7, d1
 801b1e0:	4273      	negs	r3, r6
 801b1e2:	f8df e184 	ldr.w	lr, [pc, #388]	; 801b368 <__ieee754_atan2+0x190>
 801b1e6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801b1ea:	4333      	orrs	r3, r6
 801b1ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801b1f0:	4573      	cmp	r3, lr
 801b1f2:	ec51 0b10 	vmov	r0, r1, d0
 801b1f6:	ee11 8a10 	vmov	r8, s2
 801b1fa:	d80a      	bhi.n	801b212 <__ieee754_atan2+0x3a>
 801b1fc:	4244      	negs	r4, r0
 801b1fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b202:	4304      	orrs	r4, r0
 801b204:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801b208:	4574      	cmp	r4, lr
 801b20a:	ee10 9a10 	vmov	r9, s0
 801b20e:	468c      	mov	ip, r1
 801b210:	d907      	bls.n	801b222 <__ieee754_atan2+0x4a>
 801b212:	4632      	mov	r2, r6
 801b214:	463b      	mov	r3, r7
 801b216:	f7e5 f839 	bl	800028c <__adddf3>
 801b21a:	ec41 0b10 	vmov	d0, r0, r1
 801b21e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b222:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801b226:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b22a:	4334      	orrs	r4, r6
 801b22c:	d103      	bne.n	801b236 <__ieee754_atan2+0x5e>
 801b22e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b232:	f001 b825 	b.w	801c280 <atan>
 801b236:	17bc      	asrs	r4, r7, #30
 801b238:	f004 0402 	and.w	r4, r4, #2
 801b23c:	ea53 0909 	orrs.w	r9, r3, r9
 801b240:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801b244:	d107      	bne.n	801b256 <__ieee754_atan2+0x7e>
 801b246:	2c02      	cmp	r4, #2
 801b248:	d060      	beq.n	801b30c <__ieee754_atan2+0x134>
 801b24a:	2c03      	cmp	r4, #3
 801b24c:	d1e5      	bne.n	801b21a <__ieee754_atan2+0x42>
 801b24e:	a142      	add	r1, pc, #264	; (adr r1, 801b358 <__ieee754_atan2+0x180>)
 801b250:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b254:	e7e1      	b.n	801b21a <__ieee754_atan2+0x42>
 801b256:	ea52 0808 	orrs.w	r8, r2, r8
 801b25a:	d106      	bne.n	801b26a <__ieee754_atan2+0x92>
 801b25c:	f1bc 0f00 	cmp.w	ip, #0
 801b260:	da5f      	bge.n	801b322 <__ieee754_atan2+0x14a>
 801b262:	a13f      	add	r1, pc, #252	; (adr r1, 801b360 <__ieee754_atan2+0x188>)
 801b264:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b268:	e7d7      	b.n	801b21a <__ieee754_atan2+0x42>
 801b26a:	4572      	cmp	r2, lr
 801b26c:	d10f      	bne.n	801b28e <__ieee754_atan2+0xb6>
 801b26e:	4293      	cmp	r3, r2
 801b270:	f104 34ff 	add.w	r4, r4, #4294967295
 801b274:	d107      	bne.n	801b286 <__ieee754_atan2+0xae>
 801b276:	2c02      	cmp	r4, #2
 801b278:	d84c      	bhi.n	801b314 <__ieee754_atan2+0x13c>
 801b27a:	4b35      	ldr	r3, [pc, #212]	; (801b350 <__ieee754_atan2+0x178>)
 801b27c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801b280:	e9d4 0100 	ldrd	r0, r1, [r4]
 801b284:	e7c9      	b.n	801b21a <__ieee754_atan2+0x42>
 801b286:	2c02      	cmp	r4, #2
 801b288:	d848      	bhi.n	801b31c <__ieee754_atan2+0x144>
 801b28a:	4b32      	ldr	r3, [pc, #200]	; (801b354 <__ieee754_atan2+0x17c>)
 801b28c:	e7f6      	b.n	801b27c <__ieee754_atan2+0xa4>
 801b28e:	4573      	cmp	r3, lr
 801b290:	d0e4      	beq.n	801b25c <__ieee754_atan2+0x84>
 801b292:	1a9b      	subs	r3, r3, r2
 801b294:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801b298:	ea4f 5223 	mov.w	r2, r3, asr #20
 801b29c:	da1e      	bge.n	801b2dc <__ieee754_atan2+0x104>
 801b29e:	2f00      	cmp	r7, #0
 801b2a0:	da01      	bge.n	801b2a6 <__ieee754_atan2+0xce>
 801b2a2:	323c      	adds	r2, #60	; 0x3c
 801b2a4:	db1e      	blt.n	801b2e4 <__ieee754_atan2+0x10c>
 801b2a6:	4632      	mov	r2, r6
 801b2a8:	463b      	mov	r3, r7
 801b2aa:	f7e5 facf 	bl	800084c <__aeabi_ddiv>
 801b2ae:	ec41 0b10 	vmov	d0, r0, r1
 801b2b2:	f001 f985 	bl	801c5c0 <fabs>
 801b2b6:	f000 ffe3 	bl	801c280 <atan>
 801b2ba:	ec51 0b10 	vmov	r0, r1, d0
 801b2be:	2c01      	cmp	r4, #1
 801b2c0:	d013      	beq.n	801b2ea <__ieee754_atan2+0x112>
 801b2c2:	2c02      	cmp	r4, #2
 801b2c4:	d015      	beq.n	801b2f2 <__ieee754_atan2+0x11a>
 801b2c6:	2c00      	cmp	r4, #0
 801b2c8:	d0a7      	beq.n	801b21a <__ieee754_atan2+0x42>
 801b2ca:	a319      	add	r3, pc, #100	; (adr r3, 801b330 <__ieee754_atan2+0x158>)
 801b2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2d0:	f7e4 ffda 	bl	8000288 <__aeabi_dsub>
 801b2d4:	a318      	add	r3, pc, #96	; (adr r3, 801b338 <__ieee754_atan2+0x160>)
 801b2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2da:	e014      	b.n	801b306 <__ieee754_atan2+0x12e>
 801b2dc:	a118      	add	r1, pc, #96	; (adr r1, 801b340 <__ieee754_atan2+0x168>)
 801b2de:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b2e2:	e7ec      	b.n	801b2be <__ieee754_atan2+0xe6>
 801b2e4:	2000      	movs	r0, #0
 801b2e6:	2100      	movs	r1, #0
 801b2e8:	e7e9      	b.n	801b2be <__ieee754_atan2+0xe6>
 801b2ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b2ee:	4619      	mov	r1, r3
 801b2f0:	e793      	b.n	801b21a <__ieee754_atan2+0x42>
 801b2f2:	a30f      	add	r3, pc, #60	; (adr r3, 801b330 <__ieee754_atan2+0x158>)
 801b2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2f8:	f7e4 ffc6 	bl	8000288 <__aeabi_dsub>
 801b2fc:	4602      	mov	r2, r0
 801b2fe:	460b      	mov	r3, r1
 801b300:	a10d      	add	r1, pc, #52	; (adr r1, 801b338 <__ieee754_atan2+0x160>)
 801b302:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b306:	f7e4 ffbf 	bl	8000288 <__aeabi_dsub>
 801b30a:	e786      	b.n	801b21a <__ieee754_atan2+0x42>
 801b30c:	a10a      	add	r1, pc, #40	; (adr r1, 801b338 <__ieee754_atan2+0x160>)
 801b30e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b312:	e782      	b.n	801b21a <__ieee754_atan2+0x42>
 801b314:	a10c      	add	r1, pc, #48	; (adr r1, 801b348 <__ieee754_atan2+0x170>)
 801b316:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b31a:	e77e      	b.n	801b21a <__ieee754_atan2+0x42>
 801b31c:	2000      	movs	r0, #0
 801b31e:	2100      	movs	r1, #0
 801b320:	e77b      	b.n	801b21a <__ieee754_atan2+0x42>
 801b322:	a107      	add	r1, pc, #28	; (adr r1, 801b340 <__ieee754_atan2+0x168>)
 801b324:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b328:	e777      	b.n	801b21a <__ieee754_atan2+0x42>
 801b32a:	bf00      	nop
 801b32c:	f3af 8000 	nop.w
 801b330:	33145c07 	.word	0x33145c07
 801b334:	3ca1a626 	.word	0x3ca1a626
 801b338:	54442d18 	.word	0x54442d18
 801b33c:	400921fb 	.word	0x400921fb
 801b340:	54442d18 	.word	0x54442d18
 801b344:	3ff921fb 	.word	0x3ff921fb
 801b348:	54442d18 	.word	0x54442d18
 801b34c:	3fe921fb 	.word	0x3fe921fb
 801b350:	0801cfa8 	.word	0x0801cfa8
 801b354:	0801cfc0 	.word	0x0801cfc0
 801b358:	54442d18 	.word	0x54442d18
 801b35c:	c00921fb 	.word	0xc00921fb
 801b360:	54442d18 	.word	0x54442d18
 801b364:	bff921fb 	.word	0xbff921fb
 801b368:	7ff00000 	.word	0x7ff00000
 801b36c:	00000000 	.word	0x00000000

0801b370 <__ieee754_rem_pio2>:
 801b370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b374:	ed2d 8b02 	vpush	{d8}
 801b378:	ec55 4b10 	vmov	r4, r5, d0
 801b37c:	4bca      	ldr	r3, [pc, #808]	; (801b6a8 <__ieee754_rem_pio2+0x338>)
 801b37e:	b08b      	sub	sp, #44	; 0x2c
 801b380:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801b384:	4598      	cmp	r8, r3
 801b386:	4682      	mov	sl, r0
 801b388:	9502      	str	r5, [sp, #8]
 801b38a:	dc08      	bgt.n	801b39e <__ieee754_rem_pio2+0x2e>
 801b38c:	2200      	movs	r2, #0
 801b38e:	2300      	movs	r3, #0
 801b390:	ed80 0b00 	vstr	d0, [r0]
 801b394:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801b398:	f04f 0b00 	mov.w	fp, #0
 801b39c:	e028      	b.n	801b3f0 <__ieee754_rem_pio2+0x80>
 801b39e:	4bc3      	ldr	r3, [pc, #780]	; (801b6ac <__ieee754_rem_pio2+0x33c>)
 801b3a0:	4598      	cmp	r8, r3
 801b3a2:	dc78      	bgt.n	801b496 <__ieee754_rem_pio2+0x126>
 801b3a4:	9b02      	ldr	r3, [sp, #8]
 801b3a6:	4ec2      	ldr	r6, [pc, #776]	; (801b6b0 <__ieee754_rem_pio2+0x340>)
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	ee10 0a10 	vmov	r0, s0
 801b3ae:	a3b0      	add	r3, pc, #704	; (adr r3, 801b670 <__ieee754_rem_pio2+0x300>)
 801b3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3b4:	4629      	mov	r1, r5
 801b3b6:	dd39      	ble.n	801b42c <__ieee754_rem_pio2+0xbc>
 801b3b8:	f7e4 ff66 	bl	8000288 <__aeabi_dsub>
 801b3bc:	45b0      	cmp	r8, r6
 801b3be:	4604      	mov	r4, r0
 801b3c0:	460d      	mov	r5, r1
 801b3c2:	d01b      	beq.n	801b3fc <__ieee754_rem_pio2+0x8c>
 801b3c4:	a3ac      	add	r3, pc, #688	; (adr r3, 801b678 <__ieee754_rem_pio2+0x308>)
 801b3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3ca:	f7e4 ff5d 	bl	8000288 <__aeabi_dsub>
 801b3ce:	4602      	mov	r2, r0
 801b3d0:	460b      	mov	r3, r1
 801b3d2:	e9ca 2300 	strd	r2, r3, [sl]
 801b3d6:	4620      	mov	r0, r4
 801b3d8:	4629      	mov	r1, r5
 801b3da:	f7e4 ff55 	bl	8000288 <__aeabi_dsub>
 801b3de:	a3a6      	add	r3, pc, #664	; (adr r3, 801b678 <__ieee754_rem_pio2+0x308>)
 801b3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3e4:	f7e4 ff50 	bl	8000288 <__aeabi_dsub>
 801b3e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b3ec:	f04f 0b01 	mov.w	fp, #1
 801b3f0:	4658      	mov	r0, fp
 801b3f2:	b00b      	add	sp, #44	; 0x2c
 801b3f4:	ecbd 8b02 	vpop	{d8}
 801b3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3fc:	a3a0      	add	r3, pc, #640	; (adr r3, 801b680 <__ieee754_rem_pio2+0x310>)
 801b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b402:	f7e4 ff41 	bl	8000288 <__aeabi_dsub>
 801b406:	a3a0      	add	r3, pc, #640	; (adr r3, 801b688 <__ieee754_rem_pio2+0x318>)
 801b408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b40c:	4604      	mov	r4, r0
 801b40e:	460d      	mov	r5, r1
 801b410:	f7e4 ff3a 	bl	8000288 <__aeabi_dsub>
 801b414:	4602      	mov	r2, r0
 801b416:	460b      	mov	r3, r1
 801b418:	e9ca 2300 	strd	r2, r3, [sl]
 801b41c:	4620      	mov	r0, r4
 801b41e:	4629      	mov	r1, r5
 801b420:	f7e4 ff32 	bl	8000288 <__aeabi_dsub>
 801b424:	a398      	add	r3, pc, #608	; (adr r3, 801b688 <__ieee754_rem_pio2+0x318>)
 801b426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b42a:	e7db      	b.n	801b3e4 <__ieee754_rem_pio2+0x74>
 801b42c:	f7e4 ff2e 	bl	800028c <__adddf3>
 801b430:	45b0      	cmp	r8, r6
 801b432:	4604      	mov	r4, r0
 801b434:	460d      	mov	r5, r1
 801b436:	d016      	beq.n	801b466 <__ieee754_rem_pio2+0xf6>
 801b438:	a38f      	add	r3, pc, #572	; (adr r3, 801b678 <__ieee754_rem_pio2+0x308>)
 801b43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b43e:	f7e4 ff25 	bl	800028c <__adddf3>
 801b442:	4602      	mov	r2, r0
 801b444:	460b      	mov	r3, r1
 801b446:	e9ca 2300 	strd	r2, r3, [sl]
 801b44a:	4620      	mov	r0, r4
 801b44c:	4629      	mov	r1, r5
 801b44e:	f7e4 ff1b 	bl	8000288 <__aeabi_dsub>
 801b452:	a389      	add	r3, pc, #548	; (adr r3, 801b678 <__ieee754_rem_pio2+0x308>)
 801b454:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b458:	f7e4 ff18 	bl	800028c <__adddf3>
 801b45c:	f04f 3bff 	mov.w	fp, #4294967295
 801b460:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b464:	e7c4      	b.n	801b3f0 <__ieee754_rem_pio2+0x80>
 801b466:	a386      	add	r3, pc, #536	; (adr r3, 801b680 <__ieee754_rem_pio2+0x310>)
 801b468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b46c:	f7e4 ff0e 	bl	800028c <__adddf3>
 801b470:	a385      	add	r3, pc, #532	; (adr r3, 801b688 <__ieee754_rem_pio2+0x318>)
 801b472:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b476:	4604      	mov	r4, r0
 801b478:	460d      	mov	r5, r1
 801b47a:	f7e4 ff07 	bl	800028c <__adddf3>
 801b47e:	4602      	mov	r2, r0
 801b480:	460b      	mov	r3, r1
 801b482:	e9ca 2300 	strd	r2, r3, [sl]
 801b486:	4620      	mov	r0, r4
 801b488:	4629      	mov	r1, r5
 801b48a:	f7e4 fefd 	bl	8000288 <__aeabi_dsub>
 801b48e:	a37e      	add	r3, pc, #504	; (adr r3, 801b688 <__ieee754_rem_pio2+0x318>)
 801b490:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b494:	e7e0      	b.n	801b458 <__ieee754_rem_pio2+0xe8>
 801b496:	4b87      	ldr	r3, [pc, #540]	; (801b6b4 <__ieee754_rem_pio2+0x344>)
 801b498:	4598      	cmp	r8, r3
 801b49a:	f300 80d9 	bgt.w	801b650 <__ieee754_rem_pio2+0x2e0>
 801b49e:	f001 f88f 	bl	801c5c0 <fabs>
 801b4a2:	ec55 4b10 	vmov	r4, r5, d0
 801b4a6:	ee10 0a10 	vmov	r0, s0
 801b4aa:	a379      	add	r3, pc, #484	; (adr r3, 801b690 <__ieee754_rem_pio2+0x320>)
 801b4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4b0:	4629      	mov	r1, r5
 801b4b2:	f7e5 f8a1 	bl	80005f8 <__aeabi_dmul>
 801b4b6:	4b80      	ldr	r3, [pc, #512]	; (801b6b8 <__ieee754_rem_pio2+0x348>)
 801b4b8:	2200      	movs	r2, #0
 801b4ba:	f7e4 fee7 	bl	800028c <__adddf3>
 801b4be:	f7e5 fb4b 	bl	8000b58 <__aeabi_d2iz>
 801b4c2:	4683      	mov	fp, r0
 801b4c4:	f7e5 f82e 	bl	8000524 <__aeabi_i2d>
 801b4c8:	4602      	mov	r2, r0
 801b4ca:	460b      	mov	r3, r1
 801b4cc:	ec43 2b18 	vmov	d8, r2, r3
 801b4d0:	a367      	add	r3, pc, #412	; (adr r3, 801b670 <__ieee754_rem_pio2+0x300>)
 801b4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4d6:	f7e5 f88f 	bl	80005f8 <__aeabi_dmul>
 801b4da:	4602      	mov	r2, r0
 801b4dc:	460b      	mov	r3, r1
 801b4de:	4620      	mov	r0, r4
 801b4e0:	4629      	mov	r1, r5
 801b4e2:	f7e4 fed1 	bl	8000288 <__aeabi_dsub>
 801b4e6:	a364      	add	r3, pc, #400	; (adr r3, 801b678 <__ieee754_rem_pio2+0x308>)
 801b4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4ec:	4606      	mov	r6, r0
 801b4ee:	460f      	mov	r7, r1
 801b4f0:	ec51 0b18 	vmov	r0, r1, d8
 801b4f4:	f7e5 f880 	bl	80005f8 <__aeabi_dmul>
 801b4f8:	f1bb 0f1f 	cmp.w	fp, #31
 801b4fc:	4604      	mov	r4, r0
 801b4fe:	460d      	mov	r5, r1
 801b500:	dc0d      	bgt.n	801b51e <__ieee754_rem_pio2+0x1ae>
 801b502:	4b6e      	ldr	r3, [pc, #440]	; (801b6bc <__ieee754_rem_pio2+0x34c>)
 801b504:	f10b 32ff 	add.w	r2, fp, #4294967295
 801b508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b50c:	4543      	cmp	r3, r8
 801b50e:	d006      	beq.n	801b51e <__ieee754_rem_pio2+0x1ae>
 801b510:	4622      	mov	r2, r4
 801b512:	462b      	mov	r3, r5
 801b514:	4630      	mov	r0, r6
 801b516:	4639      	mov	r1, r7
 801b518:	f7e4 feb6 	bl	8000288 <__aeabi_dsub>
 801b51c:	e00f      	b.n	801b53e <__ieee754_rem_pio2+0x1ce>
 801b51e:	462b      	mov	r3, r5
 801b520:	4622      	mov	r2, r4
 801b522:	4630      	mov	r0, r6
 801b524:	4639      	mov	r1, r7
 801b526:	f7e4 feaf 	bl	8000288 <__aeabi_dsub>
 801b52a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801b52e:	9303      	str	r3, [sp, #12]
 801b530:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b534:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 801b538:	f1b8 0f10 	cmp.w	r8, #16
 801b53c:	dc02      	bgt.n	801b544 <__ieee754_rem_pio2+0x1d4>
 801b53e:	e9ca 0100 	strd	r0, r1, [sl]
 801b542:	e039      	b.n	801b5b8 <__ieee754_rem_pio2+0x248>
 801b544:	a34e      	add	r3, pc, #312	; (adr r3, 801b680 <__ieee754_rem_pio2+0x310>)
 801b546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b54a:	ec51 0b18 	vmov	r0, r1, d8
 801b54e:	f7e5 f853 	bl	80005f8 <__aeabi_dmul>
 801b552:	4604      	mov	r4, r0
 801b554:	460d      	mov	r5, r1
 801b556:	4602      	mov	r2, r0
 801b558:	460b      	mov	r3, r1
 801b55a:	4630      	mov	r0, r6
 801b55c:	4639      	mov	r1, r7
 801b55e:	f7e4 fe93 	bl	8000288 <__aeabi_dsub>
 801b562:	4602      	mov	r2, r0
 801b564:	460b      	mov	r3, r1
 801b566:	4680      	mov	r8, r0
 801b568:	4689      	mov	r9, r1
 801b56a:	4630      	mov	r0, r6
 801b56c:	4639      	mov	r1, r7
 801b56e:	f7e4 fe8b 	bl	8000288 <__aeabi_dsub>
 801b572:	4622      	mov	r2, r4
 801b574:	462b      	mov	r3, r5
 801b576:	f7e4 fe87 	bl	8000288 <__aeabi_dsub>
 801b57a:	a343      	add	r3, pc, #268	; (adr r3, 801b688 <__ieee754_rem_pio2+0x318>)
 801b57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b580:	4604      	mov	r4, r0
 801b582:	460d      	mov	r5, r1
 801b584:	ec51 0b18 	vmov	r0, r1, d8
 801b588:	f7e5 f836 	bl	80005f8 <__aeabi_dmul>
 801b58c:	4622      	mov	r2, r4
 801b58e:	462b      	mov	r3, r5
 801b590:	f7e4 fe7a 	bl	8000288 <__aeabi_dsub>
 801b594:	4602      	mov	r2, r0
 801b596:	460b      	mov	r3, r1
 801b598:	4604      	mov	r4, r0
 801b59a:	460d      	mov	r5, r1
 801b59c:	4640      	mov	r0, r8
 801b59e:	4649      	mov	r1, r9
 801b5a0:	f7e4 fe72 	bl	8000288 <__aeabi_dsub>
 801b5a4:	9a03      	ldr	r2, [sp, #12]
 801b5a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b5aa:	1ad3      	subs	r3, r2, r3
 801b5ac:	2b31      	cmp	r3, #49	; 0x31
 801b5ae:	dc24      	bgt.n	801b5fa <__ieee754_rem_pio2+0x28a>
 801b5b0:	e9ca 0100 	strd	r0, r1, [sl]
 801b5b4:	4646      	mov	r6, r8
 801b5b6:	464f      	mov	r7, r9
 801b5b8:	e9da 8900 	ldrd	r8, r9, [sl]
 801b5bc:	4630      	mov	r0, r6
 801b5be:	4642      	mov	r2, r8
 801b5c0:	464b      	mov	r3, r9
 801b5c2:	4639      	mov	r1, r7
 801b5c4:	f7e4 fe60 	bl	8000288 <__aeabi_dsub>
 801b5c8:	462b      	mov	r3, r5
 801b5ca:	4622      	mov	r2, r4
 801b5cc:	f7e4 fe5c 	bl	8000288 <__aeabi_dsub>
 801b5d0:	9b02      	ldr	r3, [sp, #8]
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b5d8:	f6bf af0a 	bge.w	801b3f0 <__ieee754_rem_pio2+0x80>
 801b5dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b5e0:	f8ca 3004 	str.w	r3, [sl, #4]
 801b5e4:	f8ca 8000 	str.w	r8, [sl]
 801b5e8:	f8ca 0008 	str.w	r0, [sl, #8]
 801b5ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b5f0:	f8ca 300c 	str.w	r3, [sl, #12]
 801b5f4:	f1cb 0b00 	rsb	fp, fp, #0
 801b5f8:	e6fa      	b.n	801b3f0 <__ieee754_rem_pio2+0x80>
 801b5fa:	a327      	add	r3, pc, #156	; (adr r3, 801b698 <__ieee754_rem_pio2+0x328>)
 801b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b600:	ec51 0b18 	vmov	r0, r1, d8
 801b604:	f7e4 fff8 	bl	80005f8 <__aeabi_dmul>
 801b608:	4604      	mov	r4, r0
 801b60a:	460d      	mov	r5, r1
 801b60c:	4602      	mov	r2, r0
 801b60e:	460b      	mov	r3, r1
 801b610:	4640      	mov	r0, r8
 801b612:	4649      	mov	r1, r9
 801b614:	f7e4 fe38 	bl	8000288 <__aeabi_dsub>
 801b618:	4602      	mov	r2, r0
 801b61a:	460b      	mov	r3, r1
 801b61c:	4606      	mov	r6, r0
 801b61e:	460f      	mov	r7, r1
 801b620:	4640      	mov	r0, r8
 801b622:	4649      	mov	r1, r9
 801b624:	f7e4 fe30 	bl	8000288 <__aeabi_dsub>
 801b628:	4622      	mov	r2, r4
 801b62a:	462b      	mov	r3, r5
 801b62c:	f7e4 fe2c 	bl	8000288 <__aeabi_dsub>
 801b630:	a31b      	add	r3, pc, #108	; (adr r3, 801b6a0 <__ieee754_rem_pio2+0x330>)
 801b632:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b636:	4604      	mov	r4, r0
 801b638:	460d      	mov	r5, r1
 801b63a:	ec51 0b18 	vmov	r0, r1, d8
 801b63e:	f7e4 ffdb 	bl	80005f8 <__aeabi_dmul>
 801b642:	4622      	mov	r2, r4
 801b644:	462b      	mov	r3, r5
 801b646:	f7e4 fe1f 	bl	8000288 <__aeabi_dsub>
 801b64a:	4604      	mov	r4, r0
 801b64c:	460d      	mov	r5, r1
 801b64e:	e75f      	b.n	801b510 <__ieee754_rem_pio2+0x1a0>
 801b650:	4b1b      	ldr	r3, [pc, #108]	; (801b6c0 <__ieee754_rem_pio2+0x350>)
 801b652:	4598      	cmp	r8, r3
 801b654:	dd36      	ble.n	801b6c4 <__ieee754_rem_pio2+0x354>
 801b656:	ee10 2a10 	vmov	r2, s0
 801b65a:	462b      	mov	r3, r5
 801b65c:	4620      	mov	r0, r4
 801b65e:	4629      	mov	r1, r5
 801b660:	f7e4 fe12 	bl	8000288 <__aeabi_dsub>
 801b664:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b668:	e9ca 0100 	strd	r0, r1, [sl]
 801b66c:	e694      	b.n	801b398 <__ieee754_rem_pio2+0x28>
 801b66e:	bf00      	nop
 801b670:	54400000 	.word	0x54400000
 801b674:	3ff921fb 	.word	0x3ff921fb
 801b678:	1a626331 	.word	0x1a626331
 801b67c:	3dd0b461 	.word	0x3dd0b461
 801b680:	1a600000 	.word	0x1a600000
 801b684:	3dd0b461 	.word	0x3dd0b461
 801b688:	2e037073 	.word	0x2e037073
 801b68c:	3ba3198a 	.word	0x3ba3198a
 801b690:	6dc9c883 	.word	0x6dc9c883
 801b694:	3fe45f30 	.word	0x3fe45f30
 801b698:	2e000000 	.word	0x2e000000
 801b69c:	3ba3198a 	.word	0x3ba3198a
 801b6a0:	252049c1 	.word	0x252049c1
 801b6a4:	397b839a 	.word	0x397b839a
 801b6a8:	3fe921fb 	.word	0x3fe921fb
 801b6ac:	4002d97b 	.word	0x4002d97b
 801b6b0:	3ff921fb 	.word	0x3ff921fb
 801b6b4:	413921fb 	.word	0x413921fb
 801b6b8:	3fe00000 	.word	0x3fe00000
 801b6bc:	0801cfd8 	.word	0x0801cfd8
 801b6c0:	7fefffff 	.word	0x7fefffff
 801b6c4:	ea4f 5428 	mov.w	r4, r8, asr #20
 801b6c8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801b6cc:	ee10 0a10 	vmov	r0, s0
 801b6d0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801b6d4:	ee10 6a10 	vmov	r6, s0
 801b6d8:	460f      	mov	r7, r1
 801b6da:	f7e5 fa3d 	bl	8000b58 <__aeabi_d2iz>
 801b6de:	f7e4 ff21 	bl	8000524 <__aeabi_i2d>
 801b6e2:	4602      	mov	r2, r0
 801b6e4:	460b      	mov	r3, r1
 801b6e6:	4630      	mov	r0, r6
 801b6e8:	4639      	mov	r1, r7
 801b6ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b6ee:	f7e4 fdcb 	bl	8000288 <__aeabi_dsub>
 801b6f2:	4b22      	ldr	r3, [pc, #136]	; (801b77c <__ieee754_rem_pio2+0x40c>)
 801b6f4:	2200      	movs	r2, #0
 801b6f6:	f7e4 ff7f 	bl	80005f8 <__aeabi_dmul>
 801b6fa:	460f      	mov	r7, r1
 801b6fc:	4606      	mov	r6, r0
 801b6fe:	f7e5 fa2b 	bl	8000b58 <__aeabi_d2iz>
 801b702:	f7e4 ff0f 	bl	8000524 <__aeabi_i2d>
 801b706:	4602      	mov	r2, r0
 801b708:	460b      	mov	r3, r1
 801b70a:	4630      	mov	r0, r6
 801b70c:	4639      	mov	r1, r7
 801b70e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b712:	f7e4 fdb9 	bl	8000288 <__aeabi_dsub>
 801b716:	4b19      	ldr	r3, [pc, #100]	; (801b77c <__ieee754_rem_pio2+0x40c>)
 801b718:	2200      	movs	r2, #0
 801b71a:	f7e4 ff6d 	bl	80005f8 <__aeabi_dmul>
 801b71e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b722:	ad04      	add	r5, sp, #16
 801b724:	f04f 0803 	mov.w	r8, #3
 801b728:	46a9      	mov	r9, r5
 801b72a:	2600      	movs	r6, #0
 801b72c:	2700      	movs	r7, #0
 801b72e:	4632      	mov	r2, r6
 801b730:	463b      	mov	r3, r7
 801b732:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801b736:	46c3      	mov	fp, r8
 801b738:	3d08      	subs	r5, #8
 801b73a:	f108 38ff 	add.w	r8, r8, #4294967295
 801b73e:	f7e5 f9c3 	bl	8000ac8 <__aeabi_dcmpeq>
 801b742:	2800      	cmp	r0, #0
 801b744:	d1f3      	bne.n	801b72e <__ieee754_rem_pio2+0x3be>
 801b746:	4b0e      	ldr	r3, [pc, #56]	; (801b780 <__ieee754_rem_pio2+0x410>)
 801b748:	9301      	str	r3, [sp, #4]
 801b74a:	2302      	movs	r3, #2
 801b74c:	9300      	str	r3, [sp, #0]
 801b74e:	4622      	mov	r2, r4
 801b750:	465b      	mov	r3, fp
 801b752:	4651      	mov	r1, sl
 801b754:	4648      	mov	r0, r9
 801b756:	f000 f993 	bl	801ba80 <__kernel_rem_pio2>
 801b75a:	9b02      	ldr	r3, [sp, #8]
 801b75c:	2b00      	cmp	r3, #0
 801b75e:	4683      	mov	fp, r0
 801b760:	f6bf ae46 	bge.w	801b3f0 <__ieee754_rem_pio2+0x80>
 801b764:	f8da 3004 	ldr.w	r3, [sl, #4]
 801b768:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b76c:	f8ca 3004 	str.w	r3, [sl, #4]
 801b770:	f8da 300c 	ldr.w	r3, [sl, #12]
 801b774:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b778:	e73a      	b.n	801b5f0 <__ieee754_rem_pio2+0x280>
 801b77a:	bf00      	nop
 801b77c:	41700000 	.word	0x41700000
 801b780:	0801d058 	.word	0x0801d058

0801b784 <__ieee754_sqrt>:
 801b784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b788:	ec55 4b10 	vmov	r4, r5, d0
 801b78c:	4e56      	ldr	r6, [pc, #344]	; (801b8e8 <__ieee754_sqrt+0x164>)
 801b78e:	43ae      	bics	r6, r5
 801b790:	ee10 0a10 	vmov	r0, s0
 801b794:	ee10 3a10 	vmov	r3, s0
 801b798:	4629      	mov	r1, r5
 801b79a:	462a      	mov	r2, r5
 801b79c:	d110      	bne.n	801b7c0 <__ieee754_sqrt+0x3c>
 801b79e:	ee10 2a10 	vmov	r2, s0
 801b7a2:	462b      	mov	r3, r5
 801b7a4:	f7e4 ff28 	bl	80005f8 <__aeabi_dmul>
 801b7a8:	4602      	mov	r2, r0
 801b7aa:	460b      	mov	r3, r1
 801b7ac:	4620      	mov	r0, r4
 801b7ae:	4629      	mov	r1, r5
 801b7b0:	f7e4 fd6c 	bl	800028c <__adddf3>
 801b7b4:	4604      	mov	r4, r0
 801b7b6:	460d      	mov	r5, r1
 801b7b8:	ec45 4b10 	vmov	d0, r4, r5
 801b7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b7c0:	2d00      	cmp	r5, #0
 801b7c2:	dc10      	bgt.n	801b7e6 <__ieee754_sqrt+0x62>
 801b7c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b7c8:	4330      	orrs	r0, r6
 801b7ca:	d0f5      	beq.n	801b7b8 <__ieee754_sqrt+0x34>
 801b7cc:	b15d      	cbz	r5, 801b7e6 <__ieee754_sqrt+0x62>
 801b7ce:	ee10 2a10 	vmov	r2, s0
 801b7d2:	462b      	mov	r3, r5
 801b7d4:	ee10 0a10 	vmov	r0, s0
 801b7d8:	f7e4 fd56 	bl	8000288 <__aeabi_dsub>
 801b7dc:	4602      	mov	r2, r0
 801b7de:	460b      	mov	r3, r1
 801b7e0:	f7e5 f834 	bl	800084c <__aeabi_ddiv>
 801b7e4:	e7e6      	b.n	801b7b4 <__ieee754_sqrt+0x30>
 801b7e6:	1509      	asrs	r1, r1, #20
 801b7e8:	d076      	beq.n	801b8d8 <__ieee754_sqrt+0x154>
 801b7ea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801b7ee:	07ce      	lsls	r6, r1, #31
 801b7f0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801b7f4:	bf5e      	ittt	pl
 801b7f6:	0fda      	lsrpl	r2, r3, #31
 801b7f8:	005b      	lslpl	r3, r3, #1
 801b7fa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801b7fe:	0fda      	lsrs	r2, r3, #31
 801b800:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801b804:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801b808:	2000      	movs	r0, #0
 801b80a:	106d      	asrs	r5, r5, #1
 801b80c:	005b      	lsls	r3, r3, #1
 801b80e:	f04f 0e16 	mov.w	lr, #22
 801b812:	4684      	mov	ip, r0
 801b814:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801b818:	eb0c 0401 	add.w	r4, ip, r1
 801b81c:	4294      	cmp	r4, r2
 801b81e:	bfde      	ittt	le
 801b820:	1b12      	suble	r2, r2, r4
 801b822:	eb04 0c01 	addle.w	ip, r4, r1
 801b826:	1840      	addle	r0, r0, r1
 801b828:	0052      	lsls	r2, r2, #1
 801b82a:	f1be 0e01 	subs.w	lr, lr, #1
 801b82e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801b832:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801b836:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b83a:	d1ed      	bne.n	801b818 <__ieee754_sqrt+0x94>
 801b83c:	4671      	mov	r1, lr
 801b83e:	2720      	movs	r7, #32
 801b840:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801b844:	4562      	cmp	r2, ip
 801b846:	eb04 060e 	add.w	r6, r4, lr
 801b84a:	dc02      	bgt.n	801b852 <__ieee754_sqrt+0xce>
 801b84c:	d113      	bne.n	801b876 <__ieee754_sqrt+0xf2>
 801b84e:	429e      	cmp	r6, r3
 801b850:	d811      	bhi.n	801b876 <__ieee754_sqrt+0xf2>
 801b852:	2e00      	cmp	r6, #0
 801b854:	eb06 0e04 	add.w	lr, r6, r4
 801b858:	da43      	bge.n	801b8e2 <__ieee754_sqrt+0x15e>
 801b85a:	f1be 0f00 	cmp.w	lr, #0
 801b85e:	db40      	blt.n	801b8e2 <__ieee754_sqrt+0x15e>
 801b860:	f10c 0801 	add.w	r8, ip, #1
 801b864:	eba2 020c 	sub.w	r2, r2, ip
 801b868:	429e      	cmp	r6, r3
 801b86a:	bf88      	it	hi
 801b86c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b870:	1b9b      	subs	r3, r3, r6
 801b872:	4421      	add	r1, r4
 801b874:	46c4      	mov	ip, r8
 801b876:	0052      	lsls	r2, r2, #1
 801b878:	3f01      	subs	r7, #1
 801b87a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801b87e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801b882:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b886:	d1dd      	bne.n	801b844 <__ieee754_sqrt+0xc0>
 801b888:	4313      	orrs	r3, r2
 801b88a:	d006      	beq.n	801b89a <__ieee754_sqrt+0x116>
 801b88c:	1c4c      	adds	r4, r1, #1
 801b88e:	bf13      	iteet	ne
 801b890:	3101      	addne	r1, #1
 801b892:	3001      	addeq	r0, #1
 801b894:	4639      	moveq	r1, r7
 801b896:	f021 0101 	bicne.w	r1, r1, #1
 801b89a:	1043      	asrs	r3, r0, #1
 801b89c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801b8a0:	0849      	lsrs	r1, r1, #1
 801b8a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801b8a6:	07c2      	lsls	r2, r0, #31
 801b8a8:	bf48      	it	mi
 801b8aa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801b8ae:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801b8b2:	460c      	mov	r4, r1
 801b8b4:	463d      	mov	r5, r7
 801b8b6:	e77f      	b.n	801b7b8 <__ieee754_sqrt+0x34>
 801b8b8:	0ada      	lsrs	r2, r3, #11
 801b8ba:	3815      	subs	r0, #21
 801b8bc:	055b      	lsls	r3, r3, #21
 801b8be:	2a00      	cmp	r2, #0
 801b8c0:	d0fa      	beq.n	801b8b8 <__ieee754_sqrt+0x134>
 801b8c2:	02d7      	lsls	r7, r2, #11
 801b8c4:	d50a      	bpl.n	801b8dc <__ieee754_sqrt+0x158>
 801b8c6:	f1c1 0420 	rsb	r4, r1, #32
 801b8ca:	fa23 f404 	lsr.w	r4, r3, r4
 801b8ce:	1e4d      	subs	r5, r1, #1
 801b8d0:	408b      	lsls	r3, r1
 801b8d2:	4322      	orrs	r2, r4
 801b8d4:	1b41      	subs	r1, r0, r5
 801b8d6:	e788      	b.n	801b7ea <__ieee754_sqrt+0x66>
 801b8d8:	4608      	mov	r0, r1
 801b8da:	e7f0      	b.n	801b8be <__ieee754_sqrt+0x13a>
 801b8dc:	0052      	lsls	r2, r2, #1
 801b8de:	3101      	adds	r1, #1
 801b8e0:	e7ef      	b.n	801b8c2 <__ieee754_sqrt+0x13e>
 801b8e2:	46e0      	mov	r8, ip
 801b8e4:	e7be      	b.n	801b864 <__ieee754_sqrt+0xe0>
 801b8e6:	bf00      	nop
 801b8e8:	7ff00000 	.word	0x7ff00000
 801b8ec:	00000000 	.word	0x00000000

0801b8f0 <__kernel_cos>:
 801b8f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8f4:	ec57 6b10 	vmov	r6, r7, d0
 801b8f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801b8fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801b900:	ed8d 1b00 	vstr	d1, [sp]
 801b904:	da07      	bge.n	801b916 <__kernel_cos+0x26>
 801b906:	ee10 0a10 	vmov	r0, s0
 801b90a:	4639      	mov	r1, r7
 801b90c:	f7e5 f924 	bl	8000b58 <__aeabi_d2iz>
 801b910:	2800      	cmp	r0, #0
 801b912:	f000 8088 	beq.w	801ba26 <__kernel_cos+0x136>
 801b916:	4632      	mov	r2, r6
 801b918:	463b      	mov	r3, r7
 801b91a:	4630      	mov	r0, r6
 801b91c:	4639      	mov	r1, r7
 801b91e:	f7e4 fe6b 	bl	80005f8 <__aeabi_dmul>
 801b922:	4b51      	ldr	r3, [pc, #324]	; (801ba68 <__kernel_cos+0x178>)
 801b924:	2200      	movs	r2, #0
 801b926:	4604      	mov	r4, r0
 801b928:	460d      	mov	r5, r1
 801b92a:	f7e4 fe65 	bl	80005f8 <__aeabi_dmul>
 801b92e:	a340      	add	r3, pc, #256	; (adr r3, 801ba30 <__kernel_cos+0x140>)
 801b930:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b934:	4682      	mov	sl, r0
 801b936:	468b      	mov	fp, r1
 801b938:	4620      	mov	r0, r4
 801b93a:	4629      	mov	r1, r5
 801b93c:	f7e4 fe5c 	bl	80005f8 <__aeabi_dmul>
 801b940:	a33d      	add	r3, pc, #244	; (adr r3, 801ba38 <__kernel_cos+0x148>)
 801b942:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b946:	f7e4 fca1 	bl	800028c <__adddf3>
 801b94a:	4622      	mov	r2, r4
 801b94c:	462b      	mov	r3, r5
 801b94e:	f7e4 fe53 	bl	80005f8 <__aeabi_dmul>
 801b952:	a33b      	add	r3, pc, #236	; (adr r3, 801ba40 <__kernel_cos+0x150>)
 801b954:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b958:	f7e4 fc96 	bl	8000288 <__aeabi_dsub>
 801b95c:	4622      	mov	r2, r4
 801b95e:	462b      	mov	r3, r5
 801b960:	f7e4 fe4a 	bl	80005f8 <__aeabi_dmul>
 801b964:	a338      	add	r3, pc, #224	; (adr r3, 801ba48 <__kernel_cos+0x158>)
 801b966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b96a:	f7e4 fc8f 	bl	800028c <__adddf3>
 801b96e:	4622      	mov	r2, r4
 801b970:	462b      	mov	r3, r5
 801b972:	f7e4 fe41 	bl	80005f8 <__aeabi_dmul>
 801b976:	a336      	add	r3, pc, #216	; (adr r3, 801ba50 <__kernel_cos+0x160>)
 801b978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b97c:	f7e4 fc84 	bl	8000288 <__aeabi_dsub>
 801b980:	4622      	mov	r2, r4
 801b982:	462b      	mov	r3, r5
 801b984:	f7e4 fe38 	bl	80005f8 <__aeabi_dmul>
 801b988:	a333      	add	r3, pc, #204	; (adr r3, 801ba58 <__kernel_cos+0x168>)
 801b98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b98e:	f7e4 fc7d 	bl	800028c <__adddf3>
 801b992:	4622      	mov	r2, r4
 801b994:	462b      	mov	r3, r5
 801b996:	f7e4 fe2f 	bl	80005f8 <__aeabi_dmul>
 801b99a:	4622      	mov	r2, r4
 801b99c:	462b      	mov	r3, r5
 801b99e:	f7e4 fe2b 	bl	80005f8 <__aeabi_dmul>
 801b9a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b9a6:	4604      	mov	r4, r0
 801b9a8:	460d      	mov	r5, r1
 801b9aa:	4630      	mov	r0, r6
 801b9ac:	4639      	mov	r1, r7
 801b9ae:	f7e4 fe23 	bl	80005f8 <__aeabi_dmul>
 801b9b2:	460b      	mov	r3, r1
 801b9b4:	4602      	mov	r2, r0
 801b9b6:	4629      	mov	r1, r5
 801b9b8:	4620      	mov	r0, r4
 801b9ba:	f7e4 fc65 	bl	8000288 <__aeabi_dsub>
 801b9be:	4b2b      	ldr	r3, [pc, #172]	; (801ba6c <__kernel_cos+0x17c>)
 801b9c0:	4598      	cmp	r8, r3
 801b9c2:	4606      	mov	r6, r0
 801b9c4:	460f      	mov	r7, r1
 801b9c6:	dc10      	bgt.n	801b9ea <__kernel_cos+0xfa>
 801b9c8:	4602      	mov	r2, r0
 801b9ca:	460b      	mov	r3, r1
 801b9cc:	4650      	mov	r0, sl
 801b9ce:	4659      	mov	r1, fp
 801b9d0:	f7e4 fc5a 	bl	8000288 <__aeabi_dsub>
 801b9d4:	460b      	mov	r3, r1
 801b9d6:	4926      	ldr	r1, [pc, #152]	; (801ba70 <__kernel_cos+0x180>)
 801b9d8:	4602      	mov	r2, r0
 801b9da:	2000      	movs	r0, #0
 801b9dc:	f7e4 fc54 	bl	8000288 <__aeabi_dsub>
 801b9e0:	ec41 0b10 	vmov	d0, r0, r1
 801b9e4:	b003      	add	sp, #12
 801b9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9ea:	4b22      	ldr	r3, [pc, #136]	; (801ba74 <__kernel_cos+0x184>)
 801b9ec:	4920      	ldr	r1, [pc, #128]	; (801ba70 <__kernel_cos+0x180>)
 801b9ee:	4598      	cmp	r8, r3
 801b9f0:	bfcc      	ite	gt
 801b9f2:	4d21      	ldrgt	r5, [pc, #132]	; (801ba78 <__kernel_cos+0x188>)
 801b9f4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801b9f8:	2400      	movs	r4, #0
 801b9fa:	4622      	mov	r2, r4
 801b9fc:	462b      	mov	r3, r5
 801b9fe:	2000      	movs	r0, #0
 801ba00:	f7e4 fc42 	bl	8000288 <__aeabi_dsub>
 801ba04:	4622      	mov	r2, r4
 801ba06:	4680      	mov	r8, r0
 801ba08:	4689      	mov	r9, r1
 801ba0a:	462b      	mov	r3, r5
 801ba0c:	4650      	mov	r0, sl
 801ba0e:	4659      	mov	r1, fp
 801ba10:	f7e4 fc3a 	bl	8000288 <__aeabi_dsub>
 801ba14:	4632      	mov	r2, r6
 801ba16:	463b      	mov	r3, r7
 801ba18:	f7e4 fc36 	bl	8000288 <__aeabi_dsub>
 801ba1c:	4602      	mov	r2, r0
 801ba1e:	460b      	mov	r3, r1
 801ba20:	4640      	mov	r0, r8
 801ba22:	4649      	mov	r1, r9
 801ba24:	e7da      	b.n	801b9dc <__kernel_cos+0xec>
 801ba26:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801ba60 <__kernel_cos+0x170>
 801ba2a:	e7db      	b.n	801b9e4 <__kernel_cos+0xf4>
 801ba2c:	f3af 8000 	nop.w
 801ba30:	be8838d4 	.word	0xbe8838d4
 801ba34:	bda8fae9 	.word	0xbda8fae9
 801ba38:	bdb4b1c4 	.word	0xbdb4b1c4
 801ba3c:	3e21ee9e 	.word	0x3e21ee9e
 801ba40:	809c52ad 	.word	0x809c52ad
 801ba44:	3e927e4f 	.word	0x3e927e4f
 801ba48:	19cb1590 	.word	0x19cb1590
 801ba4c:	3efa01a0 	.word	0x3efa01a0
 801ba50:	16c15177 	.word	0x16c15177
 801ba54:	3f56c16c 	.word	0x3f56c16c
 801ba58:	5555554c 	.word	0x5555554c
 801ba5c:	3fa55555 	.word	0x3fa55555
 801ba60:	00000000 	.word	0x00000000
 801ba64:	3ff00000 	.word	0x3ff00000
 801ba68:	3fe00000 	.word	0x3fe00000
 801ba6c:	3fd33332 	.word	0x3fd33332
 801ba70:	3ff00000 	.word	0x3ff00000
 801ba74:	3fe90000 	.word	0x3fe90000
 801ba78:	3fd20000 	.word	0x3fd20000
 801ba7c:	00000000 	.word	0x00000000

0801ba80 <__kernel_rem_pio2>:
 801ba80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba84:	ed2d 8b02 	vpush	{d8}
 801ba88:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801ba8c:	f112 0f14 	cmn.w	r2, #20
 801ba90:	9308      	str	r3, [sp, #32]
 801ba92:	9101      	str	r1, [sp, #4]
 801ba94:	4bc6      	ldr	r3, [pc, #792]	; (801bdb0 <__kernel_rem_pio2+0x330>)
 801ba96:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801ba98:	9009      	str	r0, [sp, #36]	; 0x24
 801ba9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ba9e:	9304      	str	r3, [sp, #16]
 801baa0:	9b08      	ldr	r3, [sp, #32]
 801baa2:	f103 33ff 	add.w	r3, r3, #4294967295
 801baa6:	bfa8      	it	ge
 801baa8:	1ed4      	subge	r4, r2, #3
 801baaa:	9306      	str	r3, [sp, #24]
 801baac:	bfb2      	itee	lt
 801baae:	2400      	movlt	r4, #0
 801bab0:	2318      	movge	r3, #24
 801bab2:	fb94 f4f3 	sdivge	r4, r4, r3
 801bab6:	f06f 0317 	mvn.w	r3, #23
 801baba:	fb04 3303 	mla	r3, r4, r3, r3
 801babe:	eb03 0a02 	add.w	sl, r3, r2
 801bac2:	9b04      	ldr	r3, [sp, #16]
 801bac4:	9a06      	ldr	r2, [sp, #24]
 801bac6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801bda0 <__kernel_rem_pio2+0x320>
 801baca:	eb03 0802 	add.w	r8, r3, r2
 801bace:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801bad0:	1aa7      	subs	r7, r4, r2
 801bad2:	ae20      	add	r6, sp, #128	; 0x80
 801bad4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801bad8:	2500      	movs	r5, #0
 801bada:	4545      	cmp	r5, r8
 801badc:	dd18      	ble.n	801bb10 <__kernel_rem_pio2+0x90>
 801bade:	9b08      	ldr	r3, [sp, #32]
 801bae0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801bae4:	aa20      	add	r2, sp, #128	; 0x80
 801bae6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 801bda0 <__kernel_rem_pio2+0x320>
 801baea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801baee:	f1c3 0301 	rsb	r3, r3, #1
 801baf2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801baf6:	9307      	str	r3, [sp, #28]
 801baf8:	9b07      	ldr	r3, [sp, #28]
 801bafa:	9a04      	ldr	r2, [sp, #16]
 801bafc:	4443      	add	r3, r8
 801bafe:	429a      	cmp	r2, r3
 801bb00:	db2f      	blt.n	801bb62 <__kernel_rem_pio2+0xe2>
 801bb02:	ed8d 8b02 	vstr	d8, [sp, #8]
 801bb06:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801bb0a:	462f      	mov	r7, r5
 801bb0c:	2600      	movs	r6, #0
 801bb0e:	e01b      	b.n	801bb48 <__kernel_rem_pio2+0xc8>
 801bb10:	42ef      	cmn	r7, r5
 801bb12:	d407      	bmi.n	801bb24 <__kernel_rem_pio2+0xa4>
 801bb14:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801bb18:	f7e4 fd04 	bl	8000524 <__aeabi_i2d>
 801bb1c:	e8e6 0102 	strd	r0, r1, [r6], #8
 801bb20:	3501      	adds	r5, #1
 801bb22:	e7da      	b.n	801bada <__kernel_rem_pio2+0x5a>
 801bb24:	ec51 0b18 	vmov	r0, r1, d8
 801bb28:	e7f8      	b.n	801bb1c <__kernel_rem_pio2+0x9c>
 801bb2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bb2e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801bb32:	f7e4 fd61 	bl	80005f8 <__aeabi_dmul>
 801bb36:	4602      	mov	r2, r0
 801bb38:	460b      	mov	r3, r1
 801bb3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bb3e:	f7e4 fba5 	bl	800028c <__adddf3>
 801bb42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bb46:	3601      	adds	r6, #1
 801bb48:	9b06      	ldr	r3, [sp, #24]
 801bb4a:	429e      	cmp	r6, r3
 801bb4c:	f1a7 0708 	sub.w	r7, r7, #8
 801bb50:	ddeb      	ble.n	801bb2a <__kernel_rem_pio2+0xaa>
 801bb52:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bb56:	3508      	adds	r5, #8
 801bb58:	ecab 7b02 	vstmia	fp!, {d7}
 801bb5c:	f108 0801 	add.w	r8, r8, #1
 801bb60:	e7ca      	b.n	801baf8 <__kernel_rem_pio2+0x78>
 801bb62:	9b04      	ldr	r3, [sp, #16]
 801bb64:	aa0c      	add	r2, sp, #48	; 0x30
 801bb66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bb6a:	930b      	str	r3, [sp, #44]	; 0x2c
 801bb6c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801bb6e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801bb72:	9c04      	ldr	r4, [sp, #16]
 801bb74:	930a      	str	r3, [sp, #40]	; 0x28
 801bb76:	ab98      	add	r3, sp, #608	; 0x260
 801bb78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bb7c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801bb80:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 801bb84:	f8cd b008 	str.w	fp, [sp, #8]
 801bb88:	4625      	mov	r5, r4
 801bb8a:	2d00      	cmp	r5, #0
 801bb8c:	dc78      	bgt.n	801bc80 <__kernel_rem_pio2+0x200>
 801bb8e:	ec47 6b10 	vmov	d0, r6, r7
 801bb92:	4650      	mov	r0, sl
 801bb94:	f000 fda0 	bl	801c6d8 <scalbn>
 801bb98:	ec57 6b10 	vmov	r6, r7, d0
 801bb9c:	2200      	movs	r2, #0
 801bb9e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801bba2:	ee10 0a10 	vmov	r0, s0
 801bba6:	4639      	mov	r1, r7
 801bba8:	f7e4 fd26 	bl	80005f8 <__aeabi_dmul>
 801bbac:	ec41 0b10 	vmov	d0, r0, r1
 801bbb0:	f000 fd12 	bl	801c5d8 <floor>
 801bbb4:	4b7f      	ldr	r3, [pc, #508]	; (801bdb4 <__kernel_rem_pio2+0x334>)
 801bbb6:	ec51 0b10 	vmov	r0, r1, d0
 801bbba:	2200      	movs	r2, #0
 801bbbc:	f7e4 fd1c 	bl	80005f8 <__aeabi_dmul>
 801bbc0:	4602      	mov	r2, r0
 801bbc2:	460b      	mov	r3, r1
 801bbc4:	4630      	mov	r0, r6
 801bbc6:	4639      	mov	r1, r7
 801bbc8:	f7e4 fb5e 	bl	8000288 <__aeabi_dsub>
 801bbcc:	460f      	mov	r7, r1
 801bbce:	4606      	mov	r6, r0
 801bbd0:	f7e4 ffc2 	bl	8000b58 <__aeabi_d2iz>
 801bbd4:	9007      	str	r0, [sp, #28]
 801bbd6:	f7e4 fca5 	bl	8000524 <__aeabi_i2d>
 801bbda:	4602      	mov	r2, r0
 801bbdc:	460b      	mov	r3, r1
 801bbde:	4630      	mov	r0, r6
 801bbe0:	4639      	mov	r1, r7
 801bbe2:	f7e4 fb51 	bl	8000288 <__aeabi_dsub>
 801bbe6:	f1ba 0f00 	cmp.w	sl, #0
 801bbea:	4606      	mov	r6, r0
 801bbec:	460f      	mov	r7, r1
 801bbee:	dd70      	ble.n	801bcd2 <__kernel_rem_pio2+0x252>
 801bbf0:	1e62      	subs	r2, r4, #1
 801bbf2:	ab0c      	add	r3, sp, #48	; 0x30
 801bbf4:	9d07      	ldr	r5, [sp, #28]
 801bbf6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801bbfa:	f1ca 0118 	rsb	r1, sl, #24
 801bbfe:	fa40 f301 	asr.w	r3, r0, r1
 801bc02:	441d      	add	r5, r3
 801bc04:	408b      	lsls	r3, r1
 801bc06:	1ac0      	subs	r0, r0, r3
 801bc08:	ab0c      	add	r3, sp, #48	; 0x30
 801bc0a:	9507      	str	r5, [sp, #28]
 801bc0c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801bc10:	f1ca 0317 	rsb	r3, sl, #23
 801bc14:	fa40 f303 	asr.w	r3, r0, r3
 801bc18:	9302      	str	r3, [sp, #8]
 801bc1a:	9b02      	ldr	r3, [sp, #8]
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	dd66      	ble.n	801bcee <__kernel_rem_pio2+0x26e>
 801bc20:	9b07      	ldr	r3, [sp, #28]
 801bc22:	2200      	movs	r2, #0
 801bc24:	3301      	adds	r3, #1
 801bc26:	9307      	str	r3, [sp, #28]
 801bc28:	4615      	mov	r5, r2
 801bc2a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801bc2e:	4294      	cmp	r4, r2
 801bc30:	f300 8099 	bgt.w	801bd66 <__kernel_rem_pio2+0x2e6>
 801bc34:	f1ba 0f00 	cmp.w	sl, #0
 801bc38:	dd07      	ble.n	801bc4a <__kernel_rem_pio2+0x1ca>
 801bc3a:	f1ba 0f01 	cmp.w	sl, #1
 801bc3e:	f000 80a5 	beq.w	801bd8c <__kernel_rem_pio2+0x30c>
 801bc42:	f1ba 0f02 	cmp.w	sl, #2
 801bc46:	f000 80c1 	beq.w	801bdcc <__kernel_rem_pio2+0x34c>
 801bc4a:	9b02      	ldr	r3, [sp, #8]
 801bc4c:	2b02      	cmp	r3, #2
 801bc4e:	d14e      	bne.n	801bcee <__kernel_rem_pio2+0x26e>
 801bc50:	4632      	mov	r2, r6
 801bc52:	463b      	mov	r3, r7
 801bc54:	4958      	ldr	r1, [pc, #352]	; (801bdb8 <__kernel_rem_pio2+0x338>)
 801bc56:	2000      	movs	r0, #0
 801bc58:	f7e4 fb16 	bl	8000288 <__aeabi_dsub>
 801bc5c:	4606      	mov	r6, r0
 801bc5e:	460f      	mov	r7, r1
 801bc60:	2d00      	cmp	r5, #0
 801bc62:	d044      	beq.n	801bcee <__kernel_rem_pio2+0x26e>
 801bc64:	4650      	mov	r0, sl
 801bc66:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801bda8 <__kernel_rem_pio2+0x328>
 801bc6a:	f000 fd35 	bl	801c6d8 <scalbn>
 801bc6e:	4630      	mov	r0, r6
 801bc70:	4639      	mov	r1, r7
 801bc72:	ec53 2b10 	vmov	r2, r3, d0
 801bc76:	f7e4 fb07 	bl	8000288 <__aeabi_dsub>
 801bc7a:	4606      	mov	r6, r0
 801bc7c:	460f      	mov	r7, r1
 801bc7e:	e036      	b.n	801bcee <__kernel_rem_pio2+0x26e>
 801bc80:	4b4e      	ldr	r3, [pc, #312]	; (801bdbc <__kernel_rem_pio2+0x33c>)
 801bc82:	2200      	movs	r2, #0
 801bc84:	4630      	mov	r0, r6
 801bc86:	4639      	mov	r1, r7
 801bc88:	f7e4 fcb6 	bl	80005f8 <__aeabi_dmul>
 801bc8c:	f7e4 ff64 	bl	8000b58 <__aeabi_d2iz>
 801bc90:	f7e4 fc48 	bl	8000524 <__aeabi_i2d>
 801bc94:	4b4a      	ldr	r3, [pc, #296]	; (801bdc0 <__kernel_rem_pio2+0x340>)
 801bc96:	2200      	movs	r2, #0
 801bc98:	4680      	mov	r8, r0
 801bc9a:	4689      	mov	r9, r1
 801bc9c:	f7e4 fcac 	bl	80005f8 <__aeabi_dmul>
 801bca0:	4602      	mov	r2, r0
 801bca2:	460b      	mov	r3, r1
 801bca4:	4630      	mov	r0, r6
 801bca6:	4639      	mov	r1, r7
 801bca8:	f7e4 faee 	bl	8000288 <__aeabi_dsub>
 801bcac:	f7e4 ff54 	bl	8000b58 <__aeabi_d2iz>
 801bcb0:	9b02      	ldr	r3, [sp, #8]
 801bcb2:	f843 0b04 	str.w	r0, [r3], #4
 801bcb6:	3d01      	subs	r5, #1
 801bcb8:	9302      	str	r3, [sp, #8]
 801bcba:	ab70      	add	r3, sp, #448	; 0x1c0
 801bcbc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801bcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcc4:	4640      	mov	r0, r8
 801bcc6:	4649      	mov	r1, r9
 801bcc8:	f7e4 fae0 	bl	800028c <__adddf3>
 801bccc:	4606      	mov	r6, r0
 801bcce:	460f      	mov	r7, r1
 801bcd0:	e75b      	b.n	801bb8a <__kernel_rem_pio2+0x10a>
 801bcd2:	d105      	bne.n	801bce0 <__kernel_rem_pio2+0x260>
 801bcd4:	1e63      	subs	r3, r4, #1
 801bcd6:	aa0c      	add	r2, sp, #48	; 0x30
 801bcd8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bcdc:	15c3      	asrs	r3, r0, #23
 801bcde:	e79b      	b.n	801bc18 <__kernel_rem_pio2+0x198>
 801bce0:	4b38      	ldr	r3, [pc, #224]	; (801bdc4 <__kernel_rem_pio2+0x344>)
 801bce2:	2200      	movs	r2, #0
 801bce4:	f7e4 ff0e 	bl	8000b04 <__aeabi_dcmpge>
 801bce8:	2800      	cmp	r0, #0
 801bcea:	d139      	bne.n	801bd60 <__kernel_rem_pio2+0x2e0>
 801bcec:	9002      	str	r0, [sp, #8]
 801bcee:	2200      	movs	r2, #0
 801bcf0:	2300      	movs	r3, #0
 801bcf2:	4630      	mov	r0, r6
 801bcf4:	4639      	mov	r1, r7
 801bcf6:	f7e4 fee7 	bl	8000ac8 <__aeabi_dcmpeq>
 801bcfa:	2800      	cmp	r0, #0
 801bcfc:	f000 80b4 	beq.w	801be68 <__kernel_rem_pio2+0x3e8>
 801bd00:	f104 3bff 	add.w	fp, r4, #4294967295
 801bd04:	465b      	mov	r3, fp
 801bd06:	2200      	movs	r2, #0
 801bd08:	9904      	ldr	r1, [sp, #16]
 801bd0a:	428b      	cmp	r3, r1
 801bd0c:	da65      	bge.n	801bdda <__kernel_rem_pio2+0x35a>
 801bd0e:	2a00      	cmp	r2, #0
 801bd10:	d07b      	beq.n	801be0a <__kernel_rem_pio2+0x38a>
 801bd12:	ab0c      	add	r3, sp, #48	; 0x30
 801bd14:	f1aa 0a18 	sub.w	sl, sl, #24
 801bd18:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801bd1c:	2b00      	cmp	r3, #0
 801bd1e:	f000 80a0 	beq.w	801be62 <__kernel_rem_pio2+0x3e2>
 801bd22:	ed9f 0b21 	vldr	d0, [pc, #132]	; 801bda8 <__kernel_rem_pio2+0x328>
 801bd26:	4650      	mov	r0, sl
 801bd28:	f000 fcd6 	bl	801c6d8 <scalbn>
 801bd2c:	4f23      	ldr	r7, [pc, #140]	; (801bdbc <__kernel_rem_pio2+0x33c>)
 801bd2e:	ec55 4b10 	vmov	r4, r5, d0
 801bd32:	46d8      	mov	r8, fp
 801bd34:	2600      	movs	r6, #0
 801bd36:	f1b8 0f00 	cmp.w	r8, #0
 801bd3a:	f280 80cf 	bge.w	801bedc <__kernel_rem_pio2+0x45c>
 801bd3e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 801bda0 <__kernel_rem_pio2+0x320>
 801bd42:	465f      	mov	r7, fp
 801bd44:	f04f 0800 	mov.w	r8, #0
 801bd48:	2f00      	cmp	r7, #0
 801bd4a:	f2c0 80fd 	blt.w	801bf48 <__kernel_rem_pio2+0x4c8>
 801bd4e:	ab70      	add	r3, sp, #448	; 0x1c0
 801bd50:	f8df a074 	ldr.w	sl, [pc, #116]	; 801bdc8 <__kernel_rem_pio2+0x348>
 801bd54:	ec55 4b18 	vmov	r4, r5, d8
 801bd58:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801bd5c:	2600      	movs	r6, #0
 801bd5e:	e0e5      	b.n	801bf2c <__kernel_rem_pio2+0x4ac>
 801bd60:	2302      	movs	r3, #2
 801bd62:	9302      	str	r3, [sp, #8]
 801bd64:	e75c      	b.n	801bc20 <__kernel_rem_pio2+0x1a0>
 801bd66:	f8db 3000 	ldr.w	r3, [fp]
 801bd6a:	b955      	cbnz	r5, 801bd82 <__kernel_rem_pio2+0x302>
 801bd6c:	b123      	cbz	r3, 801bd78 <__kernel_rem_pio2+0x2f8>
 801bd6e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801bd72:	f8cb 3000 	str.w	r3, [fp]
 801bd76:	2301      	movs	r3, #1
 801bd78:	3201      	adds	r2, #1
 801bd7a:	f10b 0b04 	add.w	fp, fp, #4
 801bd7e:	461d      	mov	r5, r3
 801bd80:	e755      	b.n	801bc2e <__kernel_rem_pio2+0x1ae>
 801bd82:	1acb      	subs	r3, r1, r3
 801bd84:	f8cb 3000 	str.w	r3, [fp]
 801bd88:	462b      	mov	r3, r5
 801bd8a:	e7f5      	b.n	801bd78 <__kernel_rem_pio2+0x2f8>
 801bd8c:	1e62      	subs	r2, r4, #1
 801bd8e:	ab0c      	add	r3, sp, #48	; 0x30
 801bd90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bd94:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801bd98:	a90c      	add	r1, sp, #48	; 0x30
 801bd9a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801bd9e:	e754      	b.n	801bc4a <__kernel_rem_pio2+0x1ca>
	...
 801bdac:	3ff00000 	.word	0x3ff00000
 801bdb0:	0801d1a0 	.word	0x0801d1a0
 801bdb4:	40200000 	.word	0x40200000
 801bdb8:	3ff00000 	.word	0x3ff00000
 801bdbc:	3e700000 	.word	0x3e700000
 801bdc0:	41700000 	.word	0x41700000
 801bdc4:	3fe00000 	.word	0x3fe00000
 801bdc8:	0801d160 	.word	0x0801d160
 801bdcc:	1e62      	subs	r2, r4, #1
 801bdce:	ab0c      	add	r3, sp, #48	; 0x30
 801bdd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bdd4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801bdd8:	e7de      	b.n	801bd98 <__kernel_rem_pio2+0x318>
 801bdda:	a90c      	add	r1, sp, #48	; 0x30
 801bddc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801bde0:	3b01      	subs	r3, #1
 801bde2:	430a      	orrs	r2, r1
 801bde4:	e790      	b.n	801bd08 <__kernel_rem_pio2+0x288>
 801bde6:	3301      	adds	r3, #1
 801bde8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801bdec:	2900      	cmp	r1, #0
 801bdee:	d0fa      	beq.n	801bde6 <__kernel_rem_pio2+0x366>
 801bdf0:	9a08      	ldr	r2, [sp, #32]
 801bdf2:	18e3      	adds	r3, r4, r3
 801bdf4:	18a6      	adds	r6, r4, r2
 801bdf6:	aa20      	add	r2, sp, #128	; 0x80
 801bdf8:	1c65      	adds	r5, r4, #1
 801bdfa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801bdfe:	9302      	str	r3, [sp, #8]
 801be00:	9b02      	ldr	r3, [sp, #8]
 801be02:	42ab      	cmp	r3, r5
 801be04:	da04      	bge.n	801be10 <__kernel_rem_pio2+0x390>
 801be06:	461c      	mov	r4, r3
 801be08:	e6b5      	b.n	801bb76 <__kernel_rem_pio2+0xf6>
 801be0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801be0c:	2301      	movs	r3, #1
 801be0e:	e7eb      	b.n	801bde8 <__kernel_rem_pio2+0x368>
 801be10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801be12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801be16:	f7e4 fb85 	bl	8000524 <__aeabi_i2d>
 801be1a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801be1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be20:	46b3      	mov	fp, r6
 801be22:	461c      	mov	r4, r3
 801be24:	2700      	movs	r7, #0
 801be26:	f04f 0800 	mov.w	r8, #0
 801be2a:	f04f 0900 	mov.w	r9, #0
 801be2e:	9b06      	ldr	r3, [sp, #24]
 801be30:	429f      	cmp	r7, r3
 801be32:	dd06      	ble.n	801be42 <__kernel_rem_pio2+0x3c2>
 801be34:	ab70      	add	r3, sp, #448	; 0x1c0
 801be36:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801be3a:	e9c3 8900 	strd	r8, r9, [r3]
 801be3e:	3501      	adds	r5, #1
 801be40:	e7de      	b.n	801be00 <__kernel_rem_pio2+0x380>
 801be42:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801be46:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801be4a:	f7e4 fbd5 	bl	80005f8 <__aeabi_dmul>
 801be4e:	4602      	mov	r2, r0
 801be50:	460b      	mov	r3, r1
 801be52:	4640      	mov	r0, r8
 801be54:	4649      	mov	r1, r9
 801be56:	f7e4 fa19 	bl	800028c <__adddf3>
 801be5a:	3701      	adds	r7, #1
 801be5c:	4680      	mov	r8, r0
 801be5e:	4689      	mov	r9, r1
 801be60:	e7e5      	b.n	801be2e <__kernel_rem_pio2+0x3ae>
 801be62:	f10b 3bff 	add.w	fp, fp, #4294967295
 801be66:	e754      	b.n	801bd12 <__kernel_rem_pio2+0x292>
 801be68:	ec47 6b10 	vmov	d0, r6, r7
 801be6c:	f1ca 0000 	rsb	r0, sl, #0
 801be70:	f000 fc32 	bl	801c6d8 <scalbn>
 801be74:	ec57 6b10 	vmov	r6, r7, d0
 801be78:	4b9f      	ldr	r3, [pc, #636]	; (801c0f8 <__kernel_rem_pio2+0x678>)
 801be7a:	ee10 0a10 	vmov	r0, s0
 801be7e:	2200      	movs	r2, #0
 801be80:	4639      	mov	r1, r7
 801be82:	f7e4 fe3f 	bl	8000b04 <__aeabi_dcmpge>
 801be86:	b300      	cbz	r0, 801beca <__kernel_rem_pio2+0x44a>
 801be88:	4b9c      	ldr	r3, [pc, #624]	; (801c0fc <__kernel_rem_pio2+0x67c>)
 801be8a:	2200      	movs	r2, #0
 801be8c:	4630      	mov	r0, r6
 801be8e:	4639      	mov	r1, r7
 801be90:	f7e4 fbb2 	bl	80005f8 <__aeabi_dmul>
 801be94:	f7e4 fe60 	bl	8000b58 <__aeabi_d2iz>
 801be98:	4605      	mov	r5, r0
 801be9a:	f7e4 fb43 	bl	8000524 <__aeabi_i2d>
 801be9e:	4b96      	ldr	r3, [pc, #600]	; (801c0f8 <__kernel_rem_pio2+0x678>)
 801bea0:	2200      	movs	r2, #0
 801bea2:	f7e4 fba9 	bl	80005f8 <__aeabi_dmul>
 801bea6:	460b      	mov	r3, r1
 801bea8:	4602      	mov	r2, r0
 801beaa:	4639      	mov	r1, r7
 801beac:	4630      	mov	r0, r6
 801beae:	f7e4 f9eb 	bl	8000288 <__aeabi_dsub>
 801beb2:	f7e4 fe51 	bl	8000b58 <__aeabi_d2iz>
 801beb6:	f104 0b01 	add.w	fp, r4, #1
 801beba:	ab0c      	add	r3, sp, #48	; 0x30
 801bebc:	f10a 0a18 	add.w	sl, sl, #24
 801bec0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801bec4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 801bec8:	e72b      	b.n	801bd22 <__kernel_rem_pio2+0x2a2>
 801beca:	4630      	mov	r0, r6
 801becc:	4639      	mov	r1, r7
 801bece:	f7e4 fe43 	bl	8000b58 <__aeabi_d2iz>
 801bed2:	ab0c      	add	r3, sp, #48	; 0x30
 801bed4:	46a3      	mov	fp, r4
 801bed6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801beda:	e722      	b.n	801bd22 <__kernel_rem_pio2+0x2a2>
 801bedc:	ab70      	add	r3, sp, #448	; 0x1c0
 801bede:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 801bee2:	ab0c      	add	r3, sp, #48	; 0x30
 801bee4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801bee8:	f7e4 fb1c 	bl	8000524 <__aeabi_i2d>
 801beec:	4622      	mov	r2, r4
 801beee:	462b      	mov	r3, r5
 801bef0:	f7e4 fb82 	bl	80005f8 <__aeabi_dmul>
 801bef4:	4632      	mov	r2, r6
 801bef6:	e9c9 0100 	strd	r0, r1, [r9]
 801befa:	463b      	mov	r3, r7
 801befc:	4620      	mov	r0, r4
 801befe:	4629      	mov	r1, r5
 801bf00:	f7e4 fb7a 	bl	80005f8 <__aeabi_dmul>
 801bf04:	f108 38ff 	add.w	r8, r8, #4294967295
 801bf08:	4604      	mov	r4, r0
 801bf0a:	460d      	mov	r5, r1
 801bf0c:	e713      	b.n	801bd36 <__kernel_rem_pio2+0x2b6>
 801bf0e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801bf12:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801bf16:	f7e4 fb6f 	bl	80005f8 <__aeabi_dmul>
 801bf1a:	4602      	mov	r2, r0
 801bf1c:	460b      	mov	r3, r1
 801bf1e:	4620      	mov	r0, r4
 801bf20:	4629      	mov	r1, r5
 801bf22:	f7e4 f9b3 	bl	800028c <__adddf3>
 801bf26:	3601      	adds	r6, #1
 801bf28:	4604      	mov	r4, r0
 801bf2a:	460d      	mov	r5, r1
 801bf2c:	9b04      	ldr	r3, [sp, #16]
 801bf2e:	429e      	cmp	r6, r3
 801bf30:	dc01      	bgt.n	801bf36 <__kernel_rem_pio2+0x4b6>
 801bf32:	45b0      	cmp	r8, r6
 801bf34:	daeb      	bge.n	801bf0e <__kernel_rem_pio2+0x48e>
 801bf36:	ab48      	add	r3, sp, #288	; 0x120
 801bf38:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801bf3c:	e9c3 4500 	strd	r4, r5, [r3]
 801bf40:	3f01      	subs	r7, #1
 801bf42:	f108 0801 	add.w	r8, r8, #1
 801bf46:	e6ff      	b.n	801bd48 <__kernel_rem_pio2+0x2c8>
 801bf48:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801bf4a:	2b02      	cmp	r3, #2
 801bf4c:	dc0b      	bgt.n	801bf66 <__kernel_rem_pio2+0x4e6>
 801bf4e:	2b00      	cmp	r3, #0
 801bf50:	dc6e      	bgt.n	801c030 <__kernel_rem_pio2+0x5b0>
 801bf52:	d045      	beq.n	801bfe0 <__kernel_rem_pio2+0x560>
 801bf54:	9b07      	ldr	r3, [sp, #28]
 801bf56:	f003 0007 	and.w	r0, r3, #7
 801bf5a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801bf5e:	ecbd 8b02 	vpop	{d8}
 801bf62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf66:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801bf68:	2b03      	cmp	r3, #3
 801bf6a:	d1f3      	bne.n	801bf54 <__kernel_rem_pio2+0x4d4>
 801bf6c:	ab48      	add	r3, sp, #288	; 0x120
 801bf6e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 801bf72:	46d0      	mov	r8, sl
 801bf74:	46d9      	mov	r9, fp
 801bf76:	f1b9 0f00 	cmp.w	r9, #0
 801bf7a:	f1a8 0808 	sub.w	r8, r8, #8
 801bf7e:	dc64      	bgt.n	801c04a <__kernel_rem_pio2+0x5ca>
 801bf80:	465c      	mov	r4, fp
 801bf82:	2c01      	cmp	r4, #1
 801bf84:	f1aa 0a08 	sub.w	sl, sl, #8
 801bf88:	dc7e      	bgt.n	801c088 <__kernel_rem_pio2+0x608>
 801bf8a:	2000      	movs	r0, #0
 801bf8c:	2100      	movs	r1, #0
 801bf8e:	f1bb 0f01 	cmp.w	fp, #1
 801bf92:	f300 8097 	bgt.w	801c0c4 <__kernel_rem_pio2+0x644>
 801bf96:	9b02      	ldr	r3, [sp, #8]
 801bf98:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801bf9c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801bfa0:	2b00      	cmp	r3, #0
 801bfa2:	f040 8099 	bne.w	801c0d8 <__kernel_rem_pio2+0x658>
 801bfa6:	9b01      	ldr	r3, [sp, #4]
 801bfa8:	e9c3 5600 	strd	r5, r6, [r3]
 801bfac:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801bfb0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801bfb4:	e7ce      	b.n	801bf54 <__kernel_rem_pio2+0x4d4>
 801bfb6:	ab48      	add	r3, sp, #288	; 0x120
 801bfb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801bfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfc0:	f7e4 f964 	bl	800028c <__adddf3>
 801bfc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bfc8:	f1bb 0f00 	cmp.w	fp, #0
 801bfcc:	daf3      	bge.n	801bfb6 <__kernel_rem_pio2+0x536>
 801bfce:	9b02      	ldr	r3, [sp, #8]
 801bfd0:	b113      	cbz	r3, 801bfd8 <__kernel_rem_pio2+0x558>
 801bfd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bfd6:	4619      	mov	r1, r3
 801bfd8:	9b01      	ldr	r3, [sp, #4]
 801bfda:	e9c3 0100 	strd	r0, r1, [r3]
 801bfde:	e7b9      	b.n	801bf54 <__kernel_rem_pio2+0x4d4>
 801bfe0:	2000      	movs	r0, #0
 801bfe2:	2100      	movs	r1, #0
 801bfe4:	e7f0      	b.n	801bfc8 <__kernel_rem_pio2+0x548>
 801bfe6:	ab48      	add	r3, sp, #288	; 0x120
 801bfe8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bff0:	f7e4 f94c 	bl	800028c <__adddf3>
 801bff4:	3c01      	subs	r4, #1
 801bff6:	2c00      	cmp	r4, #0
 801bff8:	daf5      	bge.n	801bfe6 <__kernel_rem_pio2+0x566>
 801bffa:	9b02      	ldr	r3, [sp, #8]
 801bffc:	b1e3      	cbz	r3, 801c038 <__kernel_rem_pio2+0x5b8>
 801bffe:	4602      	mov	r2, r0
 801c000:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c004:	9c01      	ldr	r4, [sp, #4]
 801c006:	e9c4 2300 	strd	r2, r3, [r4]
 801c00a:	4602      	mov	r2, r0
 801c00c:	460b      	mov	r3, r1
 801c00e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801c012:	f7e4 f939 	bl	8000288 <__aeabi_dsub>
 801c016:	ad4a      	add	r5, sp, #296	; 0x128
 801c018:	2401      	movs	r4, #1
 801c01a:	45a3      	cmp	fp, r4
 801c01c:	da0f      	bge.n	801c03e <__kernel_rem_pio2+0x5be>
 801c01e:	9b02      	ldr	r3, [sp, #8]
 801c020:	b113      	cbz	r3, 801c028 <__kernel_rem_pio2+0x5a8>
 801c022:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c026:	4619      	mov	r1, r3
 801c028:	9b01      	ldr	r3, [sp, #4]
 801c02a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801c02e:	e791      	b.n	801bf54 <__kernel_rem_pio2+0x4d4>
 801c030:	465c      	mov	r4, fp
 801c032:	2000      	movs	r0, #0
 801c034:	2100      	movs	r1, #0
 801c036:	e7de      	b.n	801bff6 <__kernel_rem_pio2+0x576>
 801c038:	4602      	mov	r2, r0
 801c03a:	460b      	mov	r3, r1
 801c03c:	e7e2      	b.n	801c004 <__kernel_rem_pio2+0x584>
 801c03e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801c042:	f7e4 f923 	bl	800028c <__adddf3>
 801c046:	3401      	adds	r4, #1
 801c048:	e7e7      	b.n	801c01a <__kernel_rem_pio2+0x59a>
 801c04a:	e9d8 4500 	ldrd	r4, r5, [r8]
 801c04e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 801c052:	4620      	mov	r0, r4
 801c054:	4632      	mov	r2, r6
 801c056:	463b      	mov	r3, r7
 801c058:	4629      	mov	r1, r5
 801c05a:	f7e4 f917 	bl	800028c <__adddf3>
 801c05e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c062:	4602      	mov	r2, r0
 801c064:	460b      	mov	r3, r1
 801c066:	4620      	mov	r0, r4
 801c068:	4629      	mov	r1, r5
 801c06a:	f7e4 f90d 	bl	8000288 <__aeabi_dsub>
 801c06e:	4632      	mov	r2, r6
 801c070:	463b      	mov	r3, r7
 801c072:	f7e4 f90b 	bl	800028c <__adddf3>
 801c076:	ed9d 7b04 	vldr	d7, [sp, #16]
 801c07a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801c07e:	ed88 7b00 	vstr	d7, [r8]
 801c082:	f109 39ff 	add.w	r9, r9, #4294967295
 801c086:	e776      	b.n	801bf76 <__kernel_rem_pio2+0x4f6>
 801c088:	e9da 8900 	ldrd	r8, r9, [sl]
 801c08c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801c090:	4640      	mov	r0, r8
 801c092:	4632      	mov	r2, r6
 801c094:	463b      	mov	r3, r7
 801c096:	4649      	mov	r1, r9
 801c098:	f7e4 f8f8 	bl	800028c <__adddf3>
 801c09c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c0a0:	4602      	mov	r2, r0
 801c0a2:	460b      	mov	r3, r1
 801c0a4:	4640      	mov	r0, r8
 801c0a6:	4649      	mov	r1, r9
 801c0a8:	f7e4 f8ee 	bl	8000288 <__aeabi_dsub>
 801c0ac:	4632      	mov	r2, r6
 801c0ae:	463b      	mov	r3, r7
 801c0b0:	f7e4 f8ec 	bl	800028c <__adddf3>
 801c0b4:	ed9d 7b04 	vldr	d7, [sp, #16]
 801c0b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801c0bc:	ed8a 7b00 	vstr	d7, [sl]
 801c0c0:	3c01      	subs	r4, #1
 801c0c2:	e75e      	b.n	801bf82 <__kernel_rem_pio2+0x502>
 801c0c4:	ab48      	add	r3, sp, #288	; 0x120
 801c0c6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0ce:	f7e4 f8dd 	bl	800028c <__adddf3>
 801c0d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c0d6:	e75a      	b.n	801bf8e <__kernel_rem_pio2+0x50e>
 801c0d8:	9b01      	ldr	r3, [sp, #4]
 801c0da:	9a01      	ldr	r2, [sp, #4]
 801c0dc:	601d      	str	r5, [r3, #0]
 801c0de:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801c0e2:	605c      	str	r4, [r3, #4]
 801c0e4:	609f      	str	r7, [r3, #8]
 801c0e6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801c0ea:	60d3      	str	r3, [r2, #12]
 801c0ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c0f0:	6110      	str	r0, [r2, #16]
 801c0f2:	6153      	str	r3, [r2, #20]
 801c0f4:	e72e      	b.n	801bf54 <__kernel_rem_pio2+0x4d4>
 801c0f6:	bf00      	nop
 801c0f8:	41700000 	.word	0x41700000
 801c0fc:	3e700000 	.word	0x3e700000

0801c100 <__kernel_sin>:
 801c100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c104:	ed2d 8b04 	vpush	{d8-d9}
 801c108:	eeb0 8a41 	vmov.f32	s16, s2
 801c10c:	eef0 8a61 	vmov.f32	s17, s3
 801c110:	ec55 4b10 	vmov	r4, r5, d0
 801c114:	b083      	sub	sp, #12
 801c116:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c11a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801c11e:	9001      	str	r0, [sp, #4]
 801c120:	da06      	bge.n	801c130 <__kernel_sin+0x30>
 801c122:	ee10 0a10 	vmov	r0, s0
 801c126:	4629      	mov	r1, r5
 801c128:	f7e4 fd16 	bl	8000b58 <__aeabi_d2iz>
 801c12c:	2800      	cmp	r0, #0
 801c12e:	d051      	beq.n	801c1d4 <__kernel_sin+0xd4>
 801c130:	4622      	mov	r2, r4
 801c132:	462b      	mov	r3, r5
 801c134:	4620      	mov	r0, r4
 801c136:	4629      	mov	r1, r5
 801c138:	f7e4 fa5e 	bl	80005f8 <__aeabi_dmul>
 801c13c:	4682      	mov	sl, r0
 801c13e:	468b      	mov	fp, r1
 801c140:	4602      	mov	r2, r0
 801c142:	460b      	mov	r3, r1
 801c144:	4620      	mov	r0, r4
 801c146:	4629      	mov	r1, r5
 801c148:	f7e4 fa56 	bl	80005f8 <__aeabi_dmul>
 801c14c:	a341      	add	r3, pc, #260	; (adr r3, 801c254 <__kernel_sin+0x154>)
 801c14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c152:	4680      	mov	r8, r0
 801c154:	4689      	mov	r9, r1
 801c156:	4650      	mov	r0, sl
 801c158:	4659      	mov	r1, fp
 801c15a:	f7e4 fa4d 	bl	80005f8 <__aeabi_dmul>
 801c15e:	a33f      	add	r3, pc, #252	; (adr r3, 801c25c <__kernel_sin+0x15c>)
 801c160:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c164:	f7e4 f890 	bl	8000288 <__aeabi_dsub>
 801c168:	4652      	mov	r2, sl
 801c16a:	465b      	mov	r3, fp
 801c16c:	f7e4 fa44 	bl	80005f8 <__aeabi_dmul>
 801c170:	a33c      	add	r3, pc, #240	; (adr r3, 801c264 <__kernel_sin+0x164>)
 801c172:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c176:	f7e4 f889 	bl	800028c <__adddf3>
 801c17a:	4652      	mov	r2, sl
 801c17c:	465b      	mov	r3, fp
 801c17e:	f7e4 fa3b 	bl	80005f8 <__aeabi_dmul>
 801c182:	a33a      	add	r3, pc, #232	; (adr r3, 801c26c <__kernel_sin+0x16c>)
 801c184:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c188:	f7e4 f87e 	bl	8000288 <__aeabi_dsub>
 801c18c:	4652      	mov	r2, sl
 801c18e:	465b      	mov	r3, fp
 801c190:	f7e4 fa32 	bl	80005f8 <__aeabi_dmul>
 801c194:	a337      	add	r3, pc, #220	; (adr r3, 801c274 <__kernel_sin+0x174>)
 801c196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c19a:	f7e4 f877 	bl	800028c <__adddf3>
 801c19e:	9b01      	ldr	r3, [sp, #4]
 801c1a0:	4606      	mov	r6, r0
 801c1a2:	460f      	mov	r7, r1
 801c1a4:	b9eb      	cbnz	r3, 801c1e2 <__kernel_sin+0xe2>
 801c1a6:	4602      	mov	r2, r0
 801c1a8:	460b      	mov	r3, r1
 801c1aa:	4650      	mov	r0, sl
 801c1ac:	4659      	mov	r1, fp
 801c1ae:	f7e4 fa23 	bl	80005f8 <__aeabi_dmul>
 801c1b2:	a325      	add	r3, pc, #148	; (adr r3, 801c248 <__kernel_sin+0x148>)
 801c1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1b8:	f7e4 f866 	bl	8000288 <__aeabi_dsub>
 801c1bc:	4642      	mov	r2, r8
 801c1be:	464b      	mov	r3, r9
 801c1c0:	f7e4 fa1a 	bl	80005f8 <__aeabi_dmul>
 801c1c4:	4602      	mov	r2, r0
 801c1c6:	460b      	mov	r3, r1
 801c1c8:	4620      	mov	r0, r4
 801c1ca:	4629      	mov	r1, r5
 801c1cc:	f7e4 f85e 	bl	800028c <__adddf3>
 801c1d0:	4604      	mov	r4, r0
 801c1d2:	460d      	mov	r5, r1
 801c1d4:	ec45 4b10 	vmov	d0, r4, r5
 801c1d8:	b003      	add	sp, #12
 801c1da:	ecbd 8b04 	vpop	{d8-d9}
 801c1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1e2:	4b1b      	ldr	r3, [pc, #108]	; (801c250 <__kernel_sin+0x150>)
 801c1e4:	ec51 0b18 	vmov	r0, r1, d8
 801c1e8:	2200      	movs	r2, #0
 801c1ea:	f7e4 fa05 	bl	80005f8 <__aeabi_dmul>
 801c1ee:	4632      	mov	r2, r6
 801c1f0:	ec41 0b19 	vmov	d9, r0, r1
 801c1f4:	463b      	mov	r3, r7
 801c1f6:	4640      	mov	r0, r8
 801c1f8:	4649      	mov	r1, r9
 801c1fa:	f7e4 f9fd 	bl	80005f8 <__aeabi_dmul>
 801c1fe:	4602      	mov	r2, r0
 801c200:	460b      	mov	r3, r1
 801c202:	ec51 0b19 	vmov	r0, r1, d9
 801c206:	f7e4 f83f 	bl	8000288 <__aeabi_dsub>
 801c20a:	4652      	mov	r2, sl
 801c20c:	465b      	mov	r3, fp
 801c20e:	f7e4 f9f3 	bl	80005f8 <__aeabi_dmul>
 801c212:	ec53 2b18 	vmov	r2, r3, d8
 801c216:	f7e4 f837 	bl	8000288 <__aeabi_dsub>
 801c21a:	a30b      	add	r3, pc, #44	; (adr r3, 801c248 <__kernel_sin+0x148>)
 801c21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c220:	4606      	mov	r6, r0
 801c222:	460f      	mov	r7, r1
 801c224:	4640      	mov	r0, r8
 801c226:	4649      	mov	r1, r9
 801c228:	f7e4 f9e6 	bl	80005f8 <__aeabi_dmul>
 801c22c:	4602      	mov	r2, r0
 801c22e:	460b      	mov	r3, r1
 801c230:	4630      	mov	r0, r6
 801c232:	4639      	mov	r1, r7
 801c234:	f7e4 f82a 	bl	800028c <__adddf3>
 801c238:	4602      	mov	r2, r0
 801c23a:	460b      	mov	r3, r1
 801c23c:	4620      	mov	r0, r4
 801c23e:	4629      	mov	r1, r5
 801c240:	f7e4 f822 	bl	8000288 <__aeabi_dsub>
 801c244:	e7c4      	b.n	801c1d0 <__kernel_sin+0xd0>
 801c246:	bf00      	nop
 801c248:	55555549 	.word	0x55555549
 801c24c:	3fc55555 	.word	0x3fc55555
 801c250:	3fe00000 	.word	0x3fe00000
 801c254:	5acfd57c 	.word	0x5acfd57c
 801c258:	3de5d93a 	.word	0x3de5d93a
 801c25c:	8a2b9ceb 	.word	0x8a2b9ceb
 801c260:	3e5ae5e6 	.word	0x3e5ae5e6
 801c264:	57b1fe7d 	.word	0x57b1fe7d
 801c268:	3ec71de3 	.word	0x3ec71de3
 801c26c:	19c161d5 	.word	0x19c161d5
 801c270:	3f2a01a0 	.word	0x3f2a01a0
 801c274:	1110f8a6 	.word	0x1110f8a6
 801c278:	3f811111 	.word	0x3f811111
 801c27c:	00000000 	.word	0x00000000

0801c280 <atan>:
 801c280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c284:	ec55 4b10 	vmov	r4, r5, d0
 801c288:	4bc3      	ldr	r3, [pc, #780]	; (801c598 <atan+0x318>)
 801c28a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801c28e:	429e      	cmp	r6, r3
 801c290:	46ab      	mov	fp, r5
 801c292:	dd18      	ble.n	801c2c6 <atan+0x46>
 801c294:	4bc1      	ldr	r3, [pc, #772]	; (801c59c <atan+0x31c>)
 801c296:	429e      	cmp	r6, r3
 801c298:	dc01      	bgt.n	801c29e <atan+0x1e>
 801c29a:	d109      	bne.n	801c2b0 <atan+0x30>
 801c29c:	b144      	cbz	r4, 801c2b0 <atan+0x30>
 801c29e:	4622      	mov	r2, r4
 801c2a0:	462b      	mov	r3, r5
 801c2a2:	4620      	mov	r0, r4
 801c2a4:	4629      	mov	r1, r5
 801c2a6:	f7e3 fff1 	bl	800028c <__adddf3>
 801c2aa:	4604      	mov	r4, r0
 801c2ac:	460d      	mov	r5, r1
 801c2ae:	e006      	b.n	801c2be <atan+0x3e>
 801c2b0:	f1bb 0f00 	cmp.w	fp, #0
 801c2b4:	f300 8131 	bgt.w	801c51a <atan+0x29a>
 801c2b8:	a59b      	add	r5, pc, #620	; (adr r5, 801c528 <atan+0x2a8>)
 801c2ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c2be:	ec45 4b10 	vmov	d0, r4, r5
 801c2c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2c6:	4bb6      	ldr	r3, [pc, #728]	; (801c5a0 <atan+0x320>)
 801c2c8:	429e      	cmp	r6, r3
 801c2ca:	dc14      	bgt.n	801c2f6 <atan+0x76>
 801c2cc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801c2d0:	429e      	cmp	r6, r3
 801c2d2:	dc0d      	bgt.n	801c2f0 <atan+0x70>
 801c2d4:	a396      	add	r3, pc, #600	; (adr r3, 801c530 <atan+0x2b0>)
 801c2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2da:	ee10 0a10 	vmov	r0, s0
 801c2de:	4629      	mov	r1, r5
 801c2e0:	f7e3 ffd4 	bl	800028c <__adddf3>
 801c2e4:	4baf      	ldr	r3, [pc, #700]	; (801c5a4 <atan+0x324>)
 801c2e6:	2200      	movs	r2, #0
 801c2e8:	f7e4 fc16 	bl	8000b18 <__aeabi_dcmpgt>
 801c2ec:	2800      	cmp	r0, #0
 801c2ee:	d1e6      	bne.n	801c2be <atan+0x3e>
 801c2f0:	f04f 3aff 	mov.w	sl, #4294967295
 801c2f4:	e02b      	b.n	801c34e <atan+0xce>
 801c2f6:	f000 f963 	bl	801c5c0 <fabs>
 801c2fa:	4bab      	ldr	r3, [pc, #684]	; (801c5a8 <atan+0x328>)
 801c2fc:	429e      	cmp	r6, r3
 801c2fe:	ec55 4b10 	vmov	r4, r5, d0
 801c302:	f300 80bf 	bgt.w	801c484 <atan+0x204>
 801c306:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801c30a:	429e      	cmp	r6, r3
 801c30c:	f300 80a0 	bgt.w	801c450 <atan+0x1d0>
 801c310:	ee10 2a10 	vmov	r2, s0
 801c314:	ee10 0a10 	vmov	r0, s0
 801c318:	462b      	mov	r3, r5
 801c31a:	4629      	mov	r1, r5
 801c31c:	f7e3 ffb6 	bl	800028c <__adddf3>
 801c320:	4ba0      	ldr	r3, [pc, #640]	; (801c5a4 <atan+0x324>)
 801c322:	2200      	movs	r2, #0
 801c324:	f7e3 ffb0 	bl	8000288 <__aeabi_dsub>
 801c328:	2200      	movs	r2, #0
 801c32a:	4606      	mov	r6, r0
 801c32c:	460f      	mov	r7, r1
 801c32e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c332:	4620      	mov	r0, r4
 801c334:	4629      	mov	r1, r5
 801c336:	f7e3 ffa9 	bl	800028c <__adddf3>
 801c33a:	4602      	mov	r2, r0
 801c33c:	460b      	mov	r3, r1
 801c33e:	4630      	mov	r0, r6
 801c340:	4639      	mov	r1, r7
 801c342:	f7e4 fa83 	bl	800084c <__aeabi_ddiv>
 801c346:	f04f 0a00 	mov.w	sl, #0
 801c34a:	4604      	mov	r4, r0
 801c34c:	460d      	mov	r5, r1
 801c34e:	4622      	mov	r2, r4
 801c350:	462b      	mov	r3, r5
 801c352:	4620      	mov	r0, r4
 801c354:	4629      	mov	r1, r5
 801c356:	f7e4 f94f 	bl	80005f8 <__aeabi_dmul>
 801c35a:	4602      	mov	r2, r0
 801c35c:	460b      	mov	r3, r1
 801c35e:	4680      	mov	r8, r0
 801c360:	4689      	mov	r9, r1
 801c362:	f7e4 f949 	bl	80005f8 <__aeabi_dmul>
 801c366:	a374      	add	r3, pc, #464	; (adr r3, 801c538 <atan+0x2b8>)
 801c368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c36c:	4606      	mov	r6, r0
 801c36e:	460f      	mov	r7, r1
 801c370:	f7e4 f942 	bl	80005f8 <__aeabi_dmul>
 801c374:	a372      	add	r3, pc, #456	; (adr r3, 801c540 <atan+0x2c0>)
 801c376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c37a:	f7e3 ff87 	bl	800028c <__adddf3>
 801c37e:	4632      	mov	r2, r6
 801c380:	463b      	mov	r3, r7
 801c382:	f7e4 f939 	bl	80005f8 <__aeabi_dmul>
 801c386:	a370      	add	r3, pc, #448	; (adr r3, 801c548 <atan+0x2c8>)
 801c388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c38c:	f7e3 ff7e 	bl	800028c <__adddf3>
 801c390:	4632      	mov	r2, r6
 801c392:	463b      	mov	r3, r7
 801c394:	f7e4 f930 	bl	80005f8 <__aeabi_dmul>
 801c398:	a36d      	add	r3, pc, #436	; (adr r3, 801c550 <atan+0x2d0>)
 801c39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c39e:	f7e3 ff75 	bl	800028c <__adddf3>
 801c3a2:	4632      	mov	r2, r6
 801c3a4:	463b      	mov	r3, r7
 801c3a6:	f7e4 f927 	bl	80005f8 <__aeabi_dmul>
 801c3aa:	a36b      	add	r3, pc, #428	; (adr r3, 801c558 <atan+0x2d8>)
 801c3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3b0:	f7e3 ff6c 	bl	800028c <__adddf3>
 801c3b4:	4632      	mov	r2, r6
 801c3b6:	463b      	mov	r3, r7
 801c3b8:	f7e4 f91e 	bl	80005f8 <__aeabi_dmul>
 801c3bc:	a368      	add	r3, pc, #416	; (adr r3, 801c560 <atan+0x2e0>)
 801c3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3c2:	f7e3 ff63 	bl	800028c <__adddf3>
 801c3c6:	4642      	mov	r2, r8
 801c3c8:	464b      	mov	r3, r9
 801c3ca:	f7e4 f915 	bl	80005f8 <__aeabi_dmul>
 801c3ce:	a366      	add	r3, pc, #408	; (adr r3, 801c568 <atan+0x2e8>)
 801c3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3d4:	4680      	mov	r8, r0
 801c3d6:	4689      	mov	r9, r1
 801c3d8:	4630      	mov	r0, r6
 801c3da:	4639      	mov	r1, r7
 801c3dc:	f7e4 f90c 	bl	80005f8 <__aeabi_dmul>
 801c3e0:	a363      	add	r3, pc, #396	; (adr r3, 801c570 <atan+0x2f0>)
 801c3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3e6:	f7e3 ff4f 	bl	8000288 <__aeabi_dsub>
 801c3ea:	4632      	mov	r2, r6
 801c3ec:	463b      	mov	r3, r7
 801c3ee:	f7e4 f903 	bl	80005f8 <__aeabi_dmul>
 801c3f2:	a361      	add	r3, pc, #388	; (adr r3, 801c578 <atan+0x2f8>)
 801c3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3f8:	f7e3 ff46 	bl	8000288 <__aeabi_dsub>
 801c3fc:	4632      	mov	r2, r6
 801c3fe:	463b      	mov	r3, r7
 801c400:	f7e4 f8fa 	bl	80005f8 <__aeabi_dmul>
 801c404:	a35e      	add	r3, pc, #376	; (adr r3, 801c580 <atan+0x300>)
 801c406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c40a:	f7e3 ff3d 	bl	8000288 <__aeabi_dsub>
 801c40e:	4632      	mov	r2, r6
 801c410:	463b      	mov	r3, r7
 801c412:	f7e4 f8f1 	bl	80005f8 <__aeabi_dmul>
 801c416:	a35c      	add	r3, pc, #368	; (adr r3, 801c588 <atan+0x308>)
 801c418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c41c:	f7e3 ff34 	bl	8000288 <__aeabi_dsub>
 801c420:	4632      	mov	r2, r6
 801c422:	463b      	mov	r3, r7
 801c424:	f7e4 f8e8 	bl	80005f8 <__aeabi_dmul>
 801c428:	4602      	mov	r2, r0
 801c42a:	460b      	mov	r3, r1
 801c42c:	4640      	mov	r0, r8
 801c42e:	4649      	mov	r1, r9
 801c430:	f7e3 ff2c 	bl	800028c <__adddf3>
 801c434:	4622      	mov	r2, r4
 801c436:	462b      	mov	r3, r5
 801c438:	f7e4 f8de 	bl	80005f8 <__aeabi_dmul>
 801c43c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801c440:	4602      	mov	r2, r0
 801c442:	460b      	mov	r3, r1
 801c444:	d14b      	bne.n	801c4de <atan+0x25e>
 801c446:	4620      	mov	r0, r4
 801c448:	4629      	mov	r1, r5
 801c44a:	f7e3 ff1d 	bl	8000288 <__aeabi_dsub>
 801c44e:	e72c      	b.n	801c2aa <atan+0x2a>
 801c450:	ee10 0a10 	vmov	r0, s0
 801c454:	4b53      	ldr	r3, [pc, #332]	; (801c5a4 <atan+0x324>)
 801c456:	2200      	movs	r2, #0
 801c458:	4629      	mov	r1, r5
 801c45a:	f7e3 ff15 	bl	8000288 <__aeabi_dsub>
 801c45e:	4b51      	ldr	r3, [pc, #324]	; (801c5a4 <atan+0x324>)
 801c460:	4606      	mov	r6, r0
 801c462:	460f      	mov	r7, r1
 801c464:	2200      	movs	r2, #0
 801c466:	4620      	mov	r0, r4
 801c468:	4629      	mov	r1, r5
 801c46a:	f7e3 ff0f 	bl	800028c <__adddf3>
 801c46e:	4602      	mov	r2, r0
 801c470:	460b      	mov	r3, r1
 801c472:	4630      	mov	r0, r6
 801c474:	4639      	mov	r1, r7
 801c476:	f7e4 f9e9 	bl	800084c <__aeabi_ddiv>
 801c47a:	f04f 0a01 	mov.w	sl, #1
 801c47e:	4604      	mov	r4, r0
 801c480:	460d      	mov	r5, r1
 801c482:	e764      	b.n	801c34e <atan+0xce>
 801c484:	4b49      	ldr	r3, [pc, #292]	; (801c5ac <atan+0x32c>)
 801c486:	429e      	cmp	r6, r3
 801c488:	da1d      	bge.n	801c4c6 <atan+0x246>
 801c48a:	ee10 0a10 	vmov	r0, s0
 801c48e:	4b48      	ldr	r3, [pc, #288]	; (801c5b0 <atan+0x330>)
 801c490:	2200      	movs	r2, #0
 801c492:	4629      	mov	r1, r5
 801c494:	f7e3 fef8 	bl	8000288 <__aeabi_dsub>
 801c498:	4b45      	ldr	r3, [pc, #276]	; (801c5b0 <atan+0x330>)
 801c49a:	4606      	mov	r6, r0
 801c49c:	460f      	mov	r7, r1
 801c49e:	2200      	movs	r2, #0
 801c4a0:	4620      	mov	r0, r4
 801c4a2:	4629      	mov	r1, r5
 801c4a4:	f7e4 f8a8 	bl	80005f8 <__aeabi_dmul>
 801c4a8:	4b3e      	ldr	r3, [pc, #248]	; (801c5a4 <atan+0x324>)
 801c4aa:	2200      	movs	r2, #0
 801c4ac:	f7e3 feee 	bl	800028c <__adddf3>
 801c4b0:	4602      	mov	r2, r0
 801c4b2:	460b      	mov	r3, r1
 801c4b4:	4630      	mov	r0, r6
 801c4b6:	4639      	mov	r1, r7
 801c4b8:	f7e4 f9c8 	bl	800084c <__aeabi_ddiv>
 801c4bc:	f04f 0a02 	mov.w	sl, #2
 801c4c0:	4604      	mov	r4, r0
 801c4c2:	460d      	mov	r5, r1
 801c4c4:	e743      	b.n	801c34e <atan+0xce>
 801c4c6:	462b      	mov	r3, r5
 801c4c8:	ee10 2a10 	vmov	r2, s0
 801c4cc:	4939      	ldr	r1, [pc, #228]	; (801c5b4 <atan+0x334>)
 801c4ce:	2000      	movs	r0, #0
 801c4d0:	f7e4 f9bc 	bl	800084c <__aeabi_ddiv>
 801c4d4:	f04f 0a03 	mov.w	sl, #3
 801c4d8:	4604      	mov	r4, r0
 801c4da:	460d      	mov	r5, r1
 801c4dc:	e737      	b.n	801c34e <atan+0xce>
 801c4de:	4b36      	ldr	r3, [pc, #216]	; (801c5b8 <atan+0x338>)
 801c4e0:	4e36      	ldr	r6, [pc, #216]	; (801c5bc <atan+0x33c>)
 801c4e2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801c4e6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801c4ea:	e9da 2300 	ldrd	r2, r3, [sl]
 801c4ee:	f7e3 fecb 	bl	8000288 <__aeabi_dsub>
 801c4f2:	4622      	mov	r2, r4
 801c4f4:	462b      	mov	r3, r5
 801c4f6:	f7e3 fec7 	bl	8000288 <__aeabi_dsub>
 801c4fa:	4602      	mov	r2, r0
 801c4fc:	460b      	mov	r3, r1
 801c4fe:	e9d6 0100 	ldrd	r0, r1, [r6]
 801c502:	f7e3 fec1 	bl	8000288 <__aeabi_dsub>
 801c506:	f1bb 0f00 	cmp.w	fp, #0
 801c50a:	4604      	mov	r4, r0
 801c50c:	460d      	mov	r5, r1
 801c50e:	f6bf aed6 	bge.w	801c2be <atan+0x3e>
 801c512:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c516:	461d      	mov	r5, r3
 801c518:	e6d1      	b.n	801c2be <atan+0x3e>
 801c51a:	a51d      	add	r5, pc, #116	; (adr r5, 801c590 <atan+0x310>)
 801c51c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c520:	e6cd      	b.n	801c2be <atan+0x3e>
 801c522:	bf00      	nop
 801c524:	f3af 8000 	nop.w
 801c528:	54442d18 	.word	0x54442d18
 801c52c:	bff921fb 	.word	0xbff921fb
 801c530:	8800759c 	.word	0x8800759c
 801c534:	7e37e43c 	.word	0x7e37e43c
 801c538:	e322da11 	.word	0xe322da11
 801c53c:	3f90ad3a 	.word	0x3f90ad3a
 801c540:	24760deb 	.word	0x24760deb
 801c544:	3fa97b4b 	.word	0x3fa97b4b
 801c548:	a0d03d51 	.word	0xa0d03d51
 801c54c:	3fb10d66 	.word	0x3fb10d66
 801c550:	c54c206e 	.word	0xc54c206e
 801c554:	3fb745cd 	.word	0x3fb745cd
 801c558:	920083ff 	.word	0x920083ff
 801c55c:	3fc24924 	.word	0x3fc24924
 801c560:	5555550d 	.word	0x5555550d
 801c564:	3fd55555 	.word	0x3fd55555
 801c568:	2c6a6c2f 	.word	0x2c6a6c2f
 801c56c:	bfa2b444 	.word	0xbfa2b444
 801c570:	52defd9a 	.word	0x52defd9a
 801c574:	3fadde2d 	.word	0x3fadde2d
 801c578:	af749a6d 	.word	0xaf749a6d
 801c57c:	3fb3b0f2 	.word	0x3fb3b0f2
 801c580:	fe231671 	.word	0xfe231671
 801c584:	3fbc71c6 	.word	0x3fbc71c6
 801c588:	9998ebc4 	.word	0x9998ebc4
 801c58c:	3fc99999 	.word	0x3fc99999
 801c590:	54442d18 	.word	0x54442d18
 801c594:	3ff921fb 	.word	0x3ff921fb
 801c598:	440fffff 	.word	0x440fffff
 801c59c:	7ff00000 	.word	0x7ff00000
 801c5a0:	3fdbffff 	.word	0x3fdbffff
 801c5a4:	3ff00000 	.word	0x3ff00000
 801c5a8:	3ff2ffff 	.word	0x3ff2ffff
 801c5ac:	40038000 	.word	0x40038000
 801c5b0:	3ff80000 	.word	0x3ff80000
 801c5b4:	bff00000 	.word	0xbff00000
 801c5b8:	0801d1d0 	.word	0x0801d1d0
 801c5bc:	0801d1b0 	.word	0x0801d1b0

0801c5c0 <fabs>:
 801c5c0:	ec51 0b10 	vmov	r0, r1, d0
 801c5c4:	ee10 2a10 	vmov	r2, s0
 801c5c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c5cc:	ec43 2b10 	vmov	d0, r2, r3
 801c5d0:	4770      	bx	lr
 801c5d2:	0000      	movs	r0, r0
 801c5d4:	0000      	movs	r0, r0
	...

0801c5d8 <floor>:
 801c5d8:	ec51 0b10 	vmov	r0, r1, d0
 801c5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c5e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801c5e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801c5e8:	2e13      	cmp	r6, #19
 801c5ea:	ee10 5a10 	vmov	r5, s0
 801c5ee:	ee10 8a10 	vmov	r8, s0
 801c5f2:	460c      	mov	r4, r1
 801c5f4:	dc32      	bgt.n	801c65c <floor+0x84>
 801c5f6:	2e00      	cmp	r6, #0
 801c5f8:	da14      	bge.n	801c624 <floor+0x4c>
 801c5fa:	a333      	add	r3, pc, #204	; (adr r3, 801c6c8 <floor+0xf0>)
 801c5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c600:	f7e3 fe44 	bl	800028c <__adddf3>
 801c604:	2200      	movs	r2, #0
 801c606:	2300      	movs	r3, #0
 801c608:	f7e4 fa86 	bl	8000b18 <__aeabi_dcmpgt>
 801c60c:	b138      	cbz	r0, 801c61e <floor+0x46>
 801c60e:	2c00      	cmp	r4, #0
 801c610:	da57      	bge.n	801c6c2 <floor+0xea>
 801c612:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801c616:	431d      	orrs	r5, r3
 801c618:	d001      	beq.n	801c61e <floor+0x46>
 801c61a:	4c2d      	ldr	r4, [pc, #180]	; (801c6d0 <floor+0xf8>)
 801c61c:	2500      	movs	r5, #0
 801c61e:	4621      	mov	r1, r4
 801c620:	4628      	mov	r0, r5
 801c622:	e025      	b.n	801c670 <floor+0x98>
 801c624:	4f2b      	ldr	r7, [pc, #172]	; (801c6d4 <floor+0xfc>)
 801c626:	4137      	asrs	r7, r6
 801c628:	ea01 0307 	and.w	r3, r1, r7
 801c62c:	4303      	orrs	r3, r0
 801c62e:	d01f      	beq.n	801c670 <floor+0x98>
 801c630:	a325      	add	r3, pc, #148	; (adr r3, 801c6c8 <floor+0xf0>)
 801c632:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c636:	f7e3 fe29 	bl	800028c <__adddf3>
 801c63a:	2200      	movs	r2, #0
 801c63c:	2300      	movs	r3, #0
 801c63e:	f7e4 fa6b 	bl	8000b18 <__aeabi_dcmpgt>
 801c642:	2800      	cmp	r0, #0
 801c644:	d0eb      	beq.n	801c61e <floor+0x46>
 801c646:	2c00      	cmp	r4, #0
 801c648:	bfbe      	ittt	lt
 801c64a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801c64e:	fa43 f606 	asrlt.w	r6, r3, r6
 801c652:	19a4      	addlt	r4, r4, r6
 801c654:	ea24 0407 	bic.w	r4, r4, r7
 801c658:	2500      	movs	r5, #0
 801c65a:	e7e0      	b.n	801c61e <floor+0x46>
 801c65c:	2e33      	cmp	r6, #51	; 0x33
 801c65e:	dd0b      	ble.n	801c678 <floor+0xa0>
 801c660:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c664:	d104      	bne.n	801c670 <floor+0x98>
 801c666:	ee10 2a10 	vmov	r2, s0
 801c66a:	460b      	mov	r3, r1
 801c66c:	f7e3 fe0e 	bl	800028c <__adddf3>
 801c670:	ec41 0b10 	vmov	d0, r0, r1
 801c674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c678:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801c67c:	f04f 33ff 	mov.w	r3, #4294967295
 801c680:	fa23 f707 	lsr.w	r7, r3, r7
 801c684:	4207      	tst	r7, r0
 801c686:	d0f3      	beq.n	801c670 <floor+0x98>
 801c688:	a30f      	add	r3, pc, #60	; (adr r3, 801c6c8 <floor+0xf0>)
 801c68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c68e:	f7e3 fdfd 	bl	800028c <__adddf3>
 801c692:	2200      	movs	r2, #0
 801c694:	2300      	movs	r3, #0
 801c696:	f7e4 fa3f 	bl	8000b18 <__aeabi_dcmpgt>
 801c69a:	2800      	cmp	r0, #0
 801c69c:	d0bf      	beq.n	801c61e <floor+0x46>
 801c69e:	2c00      	cmp	r4, #0
 801c6a0:	da02      	bge.n	801c6a8 <floor+0xd0>
 801c6a2:	2e14      	cmp	r6, #20
 801c6a4:	d103      	bne.n	801c6ae <floor+0xd6>
 801c6a6:	3401      	adds	r4, #1
 801c6a8:	ea25 0507 	bic.w	r5, r5, r7
 801c6ac:	e7b7      	b.n	801c61e <floor+0x46>
 801c6ae:	2301      	movs	r3, #1
 801c6b0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801c6b4:	fa03 f606 	lsl.w	r6, r3, r6
 801c6b8:	4435      	add	r5, r6
 801c6ba:	4545      	cmp	r5, r8
 801c6bc:	bf38      	it	cc
 801c6be:	18e4      	addcc	r4, r4, r3
 801c6c0:	e7f2      	b.n	801c6a8 <floor+0xd0>
 801c6c2:	2500      	movs	r5, #0
 801c6c4:	462c      	mov	r4, r5
 801c6c6:	e7aa      	b.n	801c61e <floor+0x46>
 801c6c8:	8800759c 	.word	0x8800759c
 801c6cc:	7e37e43c 	.word	0x7e37e43c
 801c6d0:	bff00000 	.word	0xbff00000
 801c6d4:	000fffff 	.word	0x000fffff

0801c6d8 <scalbn>:
 801c6d8:	b570      	push	{r4, r5, r6, lr}
 801c6da:	ec55 4b10 	vmov	r4, r5, d0
 801c6de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801c6e2:	4606      	mov	r6, r0
 801c6e4:	462b      	mov	r3, r5
 801c6e6:	b99a      	cbnz	r2, 801c710 <scalbn+0x38>
 801c6e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c6ec:	4323      	orrs	r3, r4
 801c6ee:	d036      	beq.n	801c75e <scalbn+0x86>
 801c6f0:	4b39      	ldr	r3, [pc, #228]	; (801c7d8 <scalbn+0x100>)
 801c6f2:	4629      	mov	r1, r5
 801c6f4:	ee10 0a10 	vmov	r0, s0
 801c6f8:	2200      	movs	r2, #0
 801c6fa:	f7e3 ff7d 	bl	80005f8 <__aeabi_dmul>
 801c6fe:	4b37      	ldr	r3, [pc, #220]	; (801c7dc <scalbn+0x104>)
 801c700:	429e      	cmp	r6, r3
 801c702:	4604      	mov	r4, r0
 801c704:	460d      	mov	r5, r1
 801c706:	da10      	bge.n	801c72a <scalbn+0x52>
 801c708:	a32b      	add	r3, pc, #172	; (adr r3, 801c7b8 <scalbn+0xe0>)
 801c70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c70e:	e03a      	b.n	801c786 <scalbn+0xae>
 801c710:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801c714:	428a      	cmp	r2, r1
 801c716:	d10c      	bne.n	801c732 <scalbn+0x5a>
 801c718:	ee10 2a10 	vmov	r2, s0
 801c71c:	4620      	mov	r0, r4
 801c71e:	4629      	mov	r1, r5
 801c720:	f7e3 fdb4 	bl	800028c <__adddf3>
 801c724:	4604      	mov	r4, r0
 801c726:	460d      	mov	r5, r1
 801c728:	e019      	b.n	801c75e <scalbn+0x86>
 801c72a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c72e:	460b      	mov	r3, r1
 801c730:	3a36      	subs	r2, #54	; 0x36
 801c732:	4432      	add	r2, r6
 801c734:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801c738:	428a      	cmp	r2, r1
 801c73a:	dd08      	ble.n	801c74e <scalbn+0x76>
 801c73c:	2d00      	cmp	r5, #0
 801c73e:	a120      	add	r1, pc, #128	; (adr r1, 801c7c0 <scalbn+0xe8>)
 801c740:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c744:	da1c      	bge.n	801c780 <scalbn+0xa8>
 801c746:	a120      	add	r1, pc, #128	; (adr r1, 801c7c8 <scalbn+0xf0>)
 801c748:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c74c:	e018      	b.n	801c780 <scalbn+0xa8>
 801c74e:	2a00      	cmp	r2, #0
 801c750:	dd08      	ble.n	801c764 <scalbn+0x8c>
 801c752:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c756:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c75a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c75e:	ec45 4b10 	vmov	d0, r4, r5
 801c762:	bd70      	pop	{r4, r5, r6, pc}
 801c764:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801c768:	da19      	bge.n	801c79e <scalbn+0xc6>
 801c76a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801c76e:	429e      	cmp	r6, r3
 801c770:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801c774:	dd0a      	ble.n	801c78c <scalbn+0xb4>
 801c776:	a112      	add	r1, pc, #72	; (adr r1, 801c7c0 <scalbn+0xe8>)
 801c778:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c77c:	2b00      	cmp	r3, #0
 801c77e:	d1e2      	bne.n	801c746 <scalbn+0x6e>
 801c780:	a30f      	add	r3, pc, #60	; (adr r3, 801c7c0 <scalbn+0xe8>)
 801c782:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c786:	f7e3 ff37 	bl	80005f8 <__aeabi_dmul>
 801c78a:	e7cb      	b.n	801c724 <scalbn+0x4c>
 801c78c:	a10a      	add	r1, pc, #40	; (adr r1, 801c7b8 <scalbn+0xe0>)
 801c78e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c792:	2b00      	cmp	r3, #0
 801c794:	d0b8      	beq.n	801c708 <scalbn+0x30>
 801c796:	a10e      	add	r1, pc, #56	; (adr r1, 801c7d0 <scalbn+0xf8>)
 801c798:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c79c:	e7b4      	b.n	801c708 <scalbn+0x30>
 801c79e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c7a2:	3236      	adds	r2, #54	; 0x36
 801c7a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c7a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801c7ac:	4620      	mov	r0, r4
 801c7ae:	4b0c      	ldr	r3, [pc, #48]	; (801c7e0 <scalbn+0x108>)
 801c7b0:	2200      	movs	r2, #0
 801c7b2:	e7e8      	b.n	801c786 <scalbn+0xae>
 801c7b4:	f3af 8000 	nop.w
 801c7b8:	c2f8f359 	.word	0xc2f8f359
 801c7bc:	01a56e1f 	.word	0x01a56e1f
 801c7c0:	8800759c 	.word	0x8800759c
 801c7c4:	7e37e43c 	.word	0x7e37e43c
 801c7c8:	8800759c 	.word	0x8800759c
 801c7cc:	fe37e43c 	.word	0xfe37e43c
 801c7d0:	c2f8f359 	.word	0xc2f8f359
 801c7d4:	81a56e1f 	.word	0x81a56e1f
 801c7d8:	43500000 	.word	0x43500000
 801c7dc:	ffff3cb0 	.word	0xffff3cb0
 801c7e0:	3c900000 	.word	0x3c900000

0801c7e4 <_init>:
 801c7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7e6:	bf00      	nop
 801c7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c7ea:	bc08      	pop	{r3}
 801c7ec:	469e      	mov	lr, r3
 801c7ee:	4770      	bx	lr

0801c7f0 <_fini>:
 801c7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7f2:	bf00      	nop
 801c7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c7f6:	bc08      	pop	{r3}
 801c7f8:	469e      	mov	lr, r3
 801c7fa:	4770      	bx	lr
