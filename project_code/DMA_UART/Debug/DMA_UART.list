
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001afac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  0801b140  0801b140  0002b140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b8f8  0801b8f8  00030b80  2**0
                  CONTENTS
  4 .ARM          00000008  0801b8f8  0801b8f8  0002b8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b900  0801b900  00030b80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b900  0801b900  0002b900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b904  0801b904  0002b904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b80  20000000  0801b908  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ff0  20000b80  0801c488  00030b80  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006b70  0801c488  00036b70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030b80  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f8e7  00000000  00000000  00030bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006339  00000000  00000000  00060497  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001db0  00000000  00000000  000667d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001bd0  00000000  00000000  00068580  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029c3e  00000000  00000000  0006a150  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f632  00000000  00000000  00093d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ddb3f  00000000  00000000  000b33c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00190eff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ba0  00000000  00000000  00190f7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000b80 	.word	0x20000b80
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b124 	.word	0x0801b124

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000b84 	.word	0x20000b84
 80001cc:	0801b124 	.word	0x0801b124

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <commandRead>:
												"STOP",
												"ERRO",
												"OKAY"};

Position_DataType position_type;
Robot_CommandTypedef 	commandRead	(uint8_t *message, int32_t length, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b08d      	sub	sp, #52	; 0x34
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
	Transfer_Protocol protocol_id = message[0];
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    Robot_CommandTypedef command_id = message[1];
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	785b      	ldrb	r3, [r3, #1]
 8000fa2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    duty_cmd->id_command = command_id;
 8000fa6:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	609a      	str	r2, [r3, #8]
	int32_t temp_pointer = 2;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch(protocol_id) 
 8000fb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 8328 	beq.w	800160c <commandRead+0x684>
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	f040 8318 	bne.w	80015f2 <commandRead+0x66a>
        break;

        // command control from pc
        case COMMAND_TRANSMISION:
        {
            switch(command_id)
 8000fc2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000fc6:	2b19      	cmp	r3, #25
 8000fc8:	f200 8311 	bhi.w	80015ee <commandRead+0x666>
 8000fcc:	a201      	add	r2, pc, #4	; (adr r2, 8000fd4 <commandRead+0x4c>)
 8000fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd2:	bf00      	nop
 8000fd4:	0800103d 	.word	0x0800103d
 8000fd8:	08001053 	.word	0x08001053
 8000fdc:	08001069 	.word	0x08001069
 8000fe0:	0800112d 	.word	0x0800112d
 8000fe4:	08001303 	.word	0x08001303
 8000fe8:	08001307 	.word	0x08001307
 8000fec:	0800130b 	.word	0x0800130b
 8000ff0:	0800130f 	.word	0x0800130f
 8000ff4:	080015ef 	.word	0x080015ef
 8000ff8:	08001349 	.word	0x08001349
 8000ffc:	08001367 	.word	0x08001367
 8001000:	080013d3 	.word	0x080013d3
 8001004:	080014a1 	.word	0x080014a1
 8001008:	080015ef 	.word	0x080015ef
 800100c:	080015ef 	.word	0x080015ef
 8001010:	080015ef 	.word	0x080015ef
 8001014:	080015ef 	.word	0x080015ef
 8001018:	080015ef 	.word	0x080015ef
 800101c:	080015ef 	.word	0x080015ef
 8001020:	080015ef 	.word	0x080015ef
 8001024:	0800143f 	.word	0x0800143f
 8001028:	08001469 	.word	0x08001469
 800102c:	080015ef 	.word	0x080015ef
 8001030:	080015ef 	.word	0x080015ef
 8001034:	080014db 	.word	0x080014db
 8001038:	080015bb 	.word	0x080015bb
            {
                // Stop now
                case CMD_STOPNOW:
                {
                    duty_cmd->robot_mode = SCARA_MODE_STOP;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2200      	movs	r2, #0
 8001040:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	2201      	movs	r2, #1
 8001046:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
                    return CMD_STOPNOW;
 800104e:	2300      	movs	r3, #0
 8001050:	e2dd      	b.n	800160e <commandRead+0x686>
                break;

                // Scan limit
                case CMD_SCAN_LIMIT:
                {
                    duty_cmd->robot_mode = SCARA_MODE_SCAN;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	2201      	movs	r2, #1
 8001056:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	2201      	movs	r2, #1
 800105c:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
                    return CMD_SCAN_LIMIT;
 8001064:	2301      	movs	r3, #1
 8001066:	e2d2      	b.n	800160e <commandRead+0x686>
                break;

                // Move home
                case CMD_MOVE_HOME:
                {
                    if (length == 10){ // 2 int32_t number + 2 define byte
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	2b0a      	cmp	r3, #10
 800106c:	d15c      	bne.n	8001128 <commandRead+0x1a0>
                        // memcpy(&duty_cmd->v_factor, &message[temp_pointer+=8], 8);
						// memcpy(&duty_cmd->a_factor, &message[temp_pointer], 8); 
						temp_pointer = -2;
 800106e:	f06f 0301 	mvn.w	r3, #1
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->v_factor = (*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001076:	3304      	adds	r3, #4
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800107a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	ee07 3a90 	vmov	s15, r3
 8001086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800108a:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8001338 <commandRead+0x3b0>
 800108e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001092:	ee17 0a90 	vmov	r0, s15
 8001096:	f7ff fa57 	bl	8000548 <__aeabi_f2d>
 800109a:	4603      	mov	r3, r0
 800109c:	460c      	mov	r4, r1
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
						duty_cmd->a_factor = (*(int32_t*)(&message[temp_pointer]))*COR_INVERSE_SCALE;
 80010a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	4413      	add	r3, r2
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	ee07 3a90 	vmov	s15, r3
 80010b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b4:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001338 <commandRead+0x3b0>
 80010b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010bc:	ee17 0a90 	vmov	r0, s15
 80010c0:	f7ff fa42 	bl	8000548 <__aeabi_f2d>
 80010c4:	4603      	mov	r3, r0
 80010c6:	460c      	mov	r4, r1
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
                    }else{
                        return CMD_ERROR;
                    }
                    duty_cmd->target_point.x = 250;
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	4c99      	ldr	r4, [pc, #612]	; (800133c <commandRead+0x3b4>)
 80010d6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
                    duty_cmd->target_point.y = -200;
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	4c97      	ldr	r4, [pc, #604]	; (8001340 <commandRead+0x3b8>)
 80010e2:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
                    duty_cmd->target_point.z = 120;
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	f04f 0300 	mov.w	r3, #0
 80010ec:	4c95      	ldr	r4, [pc, #596]	; (8001344 <commandRead+0x3bc>)
 80010ee:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
                    duty_cmd->target_point.roll = 0;
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	f04f 0300 	mov.w	r3, #0
 80010f8:	f04f 0400 	mov.w	r4, #0
 80010fc:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

                    duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	2200      	movs	r2, #0
 8001104:	745a      	strb	r2, [r3, #17]
                    duty_cmd->space_type = DUTY_SPACE_JOINT;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2201      	movs	r2, #1
 800110a:	735a      	strb	r2, [r3, #13]
                    duty_cmd->joint_type = DUTY_JOINT_4DOF;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2201      	movs	r2, #1
 8001110:	73da      	strb	r2, [r3, #15]
                    duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	2202      	movs	r2, #2
 8001116:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	2201      	movs	r2, #1
 800111c:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
                    return CMD_MOVE_HOME;
 8001124:	2302      	movs	r3, #2
 8001126:	e272      	b.n	800160e <commandRead+0x686>
                        return CMD_ERROR;
 8001128:	2316      	movs	r3, #22
 800112a:	e270      	b.n	800160e <commandRead+0x686>
                break;

                // Move line
                case CMD_MOVE_LINE:
                {
                    if (length == 29){ // 6 int32_t number + 3 byte number + 2 define byte
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	2b1d      	cmp	r3, #29
 8001130:	f040 80e5 	bne.w	80012fe <commandRead+0x376>
						//scaraSetScanFlag();
						uint8_t mode_init;
						temp_pointer = -2;
 8001134:	f06f 0301 	mvn.w	r3, #1
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c

						duty_cmd->target_point.x = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 800113a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113c:	3304      	adds	r3, #4
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	4413      	add	r3, r2
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f9eb 	bl	8000524 <__aeabi_i2d>
 800114e:	a378      	add	r3, pc, #480	; (adr r3, 8001330 <commandRead+0x3a8>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	f7ff fa50 	bl	80005f8 <__aeabi_dmul>
 8001158:	4603      	mov	r3, r0
 800115a:	460c      	mov	r4, r1
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
						duty_cmd->target_point.y = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001164:	3304      	adds	r3, #4
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	4413      	add	r3, r2
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f9d7 	bl	8000524 <__aeabi_i2d>
 8001176:	a36e      	add	r3, pc, #440	; (adr r3, 8001330 <commandRead+0x3a8>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff fa3c 	bl	80005f8 <__aeabi_dmul>
 8001180:	4603      	mov	r3, r0
 8001182:	460c      	mov	r4, r1
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
						duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 800118a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118c:	3304      	adds	r3, #4
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	4413      	add	r3, r2
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9c3 	bl	8000524 <__aeabi_i2d>
 800119e:	a364      	add	r3, pc, #400	; (adr r3, 8001330 <commandRead+0x3a8>)
 80011a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a4:	f7ff fa28 	bl	80005f8 <__aeabi_dmul>
 80011a8:	4603      	mov	r3, r0
 80011aa:	460c      	mov	r4, r1
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
						duty_cmd->target_point.roll = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 80011b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b4:	3304      	adds	r3, #4
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	4413      	add	r3, r2
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f9af 	bl	8000524 <__aeabi_i2d>
 80011c6:	a35a      	add	r3, pc, #360	; (adr r3, 8001330 <commandRead+0x3a8>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f7ff fa14 	bl	80005f8 <__aeabi_dmul>
 80011d0:	4603      	mov	r3, r0
 80011d2:	460c      	mov	r4, r1
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
						duty_cmd->v_factor = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 80011da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011dc:	3304      	adds	r3, #4
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	4413      	add	r3, r2
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f99b 	bl	8000524 <__aeabi_i2d>
 80011ee:	a350      	add	r3, pc, #320	; (adr r3, 8001330 <commandRead+0x3a8>)
 80011f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f4:	f7ff fa00 	bl	80005f8 <__aeabi_dmul>
 80011f8:	4603      	mov	r3, r0
 80011fa:	460c      	mov	r4, r1
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
						mode_init = message[temp_pointer+=4];
 8001202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001204:	3304      	adds	r3, #4
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	4413      	add	r3, r2
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	74fb      	strb	r3, [r7, #19]

						if(mode_init == DUTY_MODE_INIT_QVA){
 8001212:	7cfb      	ldrb	r3, [r7, #19]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d117      	bne.n	8001248 <commandRead+0x2c0>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	2200      	movs	r2, #0
 800121c:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 800121e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001220:	3301      	adds	r3, #1
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	4413      	add	r3, r2
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f979 	bl	8000524 <__aeabi_i2d>
 8001232:	a33f      	add	r3, pc, #252	; (adr r3, 8001330 <commandRead+0x3a8>)
 8001234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001238:	f7ff f9de 	bl	80005f8 <__aeabi_dmul>
 800123c:	4603      	mov	r3, r0
 800123e:	460c      	mov	r4, r1
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
 8001246:	e037      	b.n	80012b8 <commandRead+0x330>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 8001248:	7cfb      	ldrb	r3, [r7, #19]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d117      	bne.n	800127e <commandRead+0x2f6>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2201      	movs	r2, #1
 8001252:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	3301      	adds	r3, #1
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800125a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f95e 	bl	8000524 <__aeabi_i2d>
 8001268:	a331      	add	r3, pc, #196	; (adr r3, 8001330 <commandRead+0x3a8>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	f7ff f9c3 	bl	80005f8 <__aeabi_dmul>
 8001272:	4603      	mov	r3, r0
 8001274:	460c      	mov	r4, r1
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800127c:	e01c      	b.n	80012b8 <commandRead+0x330>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 800127e:	7cfb      	ldrb	r3, [r7, #19]
 8001280:	2b03      	cmp	r3, #3
 8001282:	d117      	bne.n	80012b4 <commandRead+0x32c>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	2203      	movs	r2, #3
 8001288:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 800128a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800128c:	3301      	adds	r3, #1
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	4413      	add	r3, r2
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f943 	bl	8000524 <__aeabi_i2d>
 800129e:	a324      	add	r3, pc, #144	; (adr r3, 8001330 <commandRead+0x3a8>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	f7ff f9a8 	bl	80005f8 <__aeabi_dmul>
 80012a8:	4603      	mov	r3, r0
 80012aa:	460c      	mov	r4, r1
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80012b2:	e001      	b.n	80012b8 <commandRead+0x330>
						}else{
							return CMD_ERROR;
 80012b4:	2316      	movs	r3, #22
 80012b6:	e1aa      	b.n	800160e <commandRead+0x686>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 80012b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ba:	3304      	adds	r3, #4
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	4413      	add	r3, r2
 80012c4:	781a      	ldrb	r2, [r3, #0]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 80012ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012cc:	3301      	adds	r3, #1
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	4413      	add	r3, r2
 80012d6:	781a      	ldrb	r2, [r3, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	741a      	strb	r2, [r3, #16]
						duty_cmd->path_type = DUTY_PATH_LINE;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	2200      	movs	r2, #0
 80012e0:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	2200      	movs	r2, #0
 80012e6:	735a      	strb	r2, [r3, #13]
					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	2202      	movs	r2, #2
 80012ec:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	2201      	movs	r2, #1
 80012f2:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
					return CMD_MOVE_LINE;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e187      	b.n	800160e <commandRead+0x686>
						return CMD_ERROR;
 80012fe:	2316      	movs	r3, #22
 8001300:	e185      	b.n	800160e <commandRead+0x686>
				break;

				// Move circle
				case CMD_MOVE_CIRCLE:
				{
					return CMD_MOVE_CIRCLE;
 8001302:	2304      	movs	r3, #4
 8001304:	e183      	b.n	800160e <commandRead+0x686>
				break;

				// Move joint
				case CMD_MOVE_JOINT:
				{
					return CMD_MOVE_JOINT;
 8001306:	2305      	movs	r3, #5
 8001308:	e181      	b.n	800160e <commandRead+0x686>
				break;

				// Rotate Single
				case CMD_ROTATE_SINGLE:
				{
					return CMD_ROTATE_SINGLE;
 800130a:	2306      	movs	r3, #6
 800130c:	e17f      	b.n	800160e <commandRead+0x686>
				break;

				// Set output
				case CMD_OUTPUT:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	2b03      	cmp	r3, #3
 8001312:	d10a      	bne.n	800132a <commandRead+0x3a2>
						temp_pointer = 2;
 8001314:	2302      	movs	r3, #2
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->sub_para_int = message[temp_pointer];
 8001318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	4413      	add	r3, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	615a      	str	r2, [r3, #20]
						return CMD_OUTPUT;
 8001326:	2307      	movs	r3, #7
 8001328:	e171      	b.n	800160e <commandRead+0x686>
					}else{
						return CMD_ERROR;
 800132a:	2316      	movs	r3, #22
 800132c:	e16f      	b.n	800160e <commandRead+0x686>
 800132e:	bf00      	nop
 8001330:	a0000000 	.word	0xa0000000
 8001334:	3eb0c6f7 	.word	0x3eb0c6f7
 8001338:	358637bd 	.word	0x358637bd
 800133c:	406f4000 	.word	0x406f4000
 8001340:	c0690000 	.word	0xc0690000
 8001344:	405e0000 	.word	0x405e0000
				break;

				// Read position
				case CMD_READ_POSITION:
				{
					if(length == 3){ // 1 byte categorize read type + 2 byte define
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	2b03      	cmp	r3, #3
 800134c:	d109      	bne.n	8001362 <commandRead+0x3da>
						temp_pointer = 2;
 800134e:	2302      	movs	r3, #2
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
						position_type = message[temp_pointer];
 8001352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	781a      	ldrb	r2, [r3, #0]
 800135a:	4ba9      	ldr	r3, [pc, #676]	; (8001600 <commandRead+0x678>)
 800135c:	701a      	strb	r2, [r3, #0]
						return CMD_READ_POSITION;
 800135e:	2309      	movs	r3, #9
 8001360:	e155      	b.n	800160e <commandRead+0x686>
					}else{
						return CMD_ERROR;
 8001362:	2316      	movs	r3, #22
 8001364:	e153      	b.n	800160e <commandRead+0x686>
				break;			

				// Setting
				case CMD_SETTING:
				{
					if (length == 4){ // 2 byte configure + 2 byte define
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	2b04      	cmp	r3, #4
 800136a:	d130      	bne.n	80013ce <commandRead+0x446>
						uint8_t mode_traject;
						uint8_t mode_coordinate;
						temp_pointer = 2;
 800136c:	2302      	movs	r3, #2
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
						mode_coordinate = message[temp_pointer++];
 8001370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001376:	461a      	mov	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4413      	add	r3, r2
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	757b      	strb	r3, [r7, #21]
						mode_traject = message[temp_pointer];
 8001380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	4413      	add	r3, r2
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	753b      	strb	r3, [r7, #20]

						if (mode_coordinate == DUTY_COORDINATES_ABS) {
 800138a:	7d7b      	ldrb	r3, [r7, #21]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d103      	bne.n	8001398 <commandRead+0x410>
							duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	2200      	movs	r2, #0
 8001394:	731a      	strb	r2, [r3, #12]
 8001396:	e008      	b.n	80013aa <commandRead+0x422>
						} else if (mode_coordinate == DUTY_COORDINATES_REL) {
 8001398:	7d7b      	ldrb	r3, [r7, #21]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d103      	bne.n	80013a6 <commandRead+0x41e>
							duty_cmd->coordinate_type = DUTY_COORDINATES_REL;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	2201      	movs	r2, #1
 80013a2:	731a      	strb	r2, [r3, #12]
 80013a4:	e001      	b.n	80013aa <commandRead+0x422>
						} else {
							return CMD_ERROR;
 80013a6:	2316      	movs	r3, #22
 80013a8:	e131      	b.n	800160e <commandRead+0x686>
						}

						if (mode_traject == DUTY_TRAJECTORY_LSPB) {
 80013aa:	7d3b      	ldrb	r3, [r7, #20]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d103      	bne.n	80013b8 <commandRead+0x430>
							duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	2200      	movs	r2, #0
 80013b4:	741a      	strb	r2, [r3, #16]
 80013b6:	e008      	b.n	80013ca <commandRead+0x442>
						} else if (mode_traject == DUTY_TRAJECTORY_SCURVE) {
 80013b8:	7d3b      	ldrb	r3, [r7, #20]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d103      	bne.n	80013c6 <commandRead+0x43e>
							duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	2201      	movs	r2, #1
 80013c2:	741a      	strb	r2, [r3, #16]
 80013c4:	e001      	b.n	80013ca <commandRead+0x442>
						} else {
							return CMD_ERROR;
 80013c6:	2316      	movs	r3, #22
 80013c8:	e121      	b.n	800160e <commandRead+0x686>
						}
						return CMD_SETTING;
 80013ca:	230a      	movs	r3, #10
 80013cc:	e11f      	b.n	800160e <commandRead+0x686>
					}else{
						return CMD_ERROR;
 80013ce:	2316      	movs	r3, #22
 80013d0:	e11d      	b.n	800160e <commandRead+0x686>
				break;

				// Change method
				case CMD_METHOD_CHANGE:
				{
					if(length == 3){ // 1 byte configure + 2 byte define
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d130      	bne.n	800143a <commandRead+0x4b2>
						uint8_t method;
						temp_pointer = 2;
 80013d8:	2302      	movs	r3, #2
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
						method = message[temp_pointer];
 80013dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	4413      	add	r3, r2
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	75bb      	strb	r3, [r7, #22]
						if (SCARA_METHOD_MANUAL == method) {
 80013e6:	7dbb      	ldrb	r3, [r7, #22]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d103      	bne.n	80013f4 <commandRead+0x46c>
							duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	2200      	movs	r2, #0
 80013f0:	705a      	strb	r2, [r3, #1]
 80013f2:	e01d      	b.n	8001430 <commandRead+0x4a8>
						} else if (SCARA_METHOD_SEMI_AUTO == method) {
 80013f4:	7dbb      	ldrb	r3, [r7, #22]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d103      	bne.n	8001402 <commandRead+0x47a>
							duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	2201      	movs	r2, #1
 80013fe:	705a      	strb	r2, [r3, #1]
 8001400:	e016      	b.n	8001430 <commandRead+0x4a8>
						} else if (SCARA_METHOD_AUTO == method) {
 8001402:	7dbb      	ldrb	r3, [r7, #22]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d103      	bne.n	8001410 <commandRead+0x488>
							duty_cmd->robot_method = SCARA_METHOD_AUTO;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2202      	movs	r2, #2
 800140c:	705a      	strb	r2, [r3, #1]
 800140e:	e00f      	b.n	8001430 <commandRead+0x4a8>
						}else if(SCARA_METHOD_TEST == method){
 8001410:	7dbb      	ldrb	r3, [r7, #22]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d103      	bne.n	800141e <commandRead+0x496>
							duty_cmd->robot_method = SCARA_METHOD_TEST;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	2203      	movs	r2, #3
 800141a:	705a      	strb	r2, [r3, #1]
 800141c:	e008      	b.n	8001430 <commandRead+0x4a8>
						}else if(SCARA_METHOD_PICK_AND_PLACE == method){
 800141e:	7dbb      	ldrb	r3, [r7, #22]
 8001420:	2b04      	cmp	r3, #4
 8001422:	d103      	bne.n	800142c <commandRead+0x4a4>
							duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	2204      	movs	r2, #4
 8001428:	705a      	strb	r2, [r3, #1]
 800142a:	e001      	b.n	8001430 <commandRead+0x4a8>
						}else {
							return CMD_ERROR;
 800142c:	2316      	movs	r3, #22
 800142e:	e0ee      	b.n	800160e <commandRead+0x686>
						}
						duty_cmd->change_method = TRUE;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	2201      	movs	r2, #1
 8001434:	701a      	strb	r2, [r3, #0]
						return CMD_METHOD_CHANGE;
 8001436:	230b      	movs	r3, #11
 8001438:	e0e9      	b.n	800160e <commandRead+0x686>
					}else{
						return CMD_ERROR;
 800143a:	2316      	movs	r3, #22
 800143c:	e0e7      	b.n	800160e <commandRead+0x686>
				break;

				// Set manual key
				case CMD_KEYBOARD:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	2b03      	cmp	r3, #3
 8001442:	d10f      	bne.n	8001464 <commandRead+0x4dc>
						int temp_pointer = 2;
 8001444:	2302      	movs	r3, #2
 8001446:	61fb      	str	r3, [r7, #28]
						duty_cmd->keyboard = (SCARA_KeyTypeDef)message[temp_pointer];
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	4413      	add	r3, r2
 800144e:	781a      	ldrb	r2, [r3, #0]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	70da      	strb	r2, [r3, #3]
						duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2200      	movs	r2, #0
 8001458:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
						return CMD_KEYBOARD;
 8001460:	2314      	movs	r3, #20
 8001462:	e0d4      	b.n	800160e <commandRead+0x686>
					}else{
						return CMD_ERROR;
 8001464:	2316      	movs	r3, #22
 8001466:	e0d2      	b.n	800160e <commandRead+0x686>
				break;

				// Set manual key speed
				case CMD_KEY_SPEED:
				{
					if(length == 3){ // 1 byte key value + 2 byte define
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d116      	bne.n	800149c <commandRead+0x514>
						int temp_pointer = 2;
 800146e:	2302      	movs	r3, #2
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
						int32_t speed = (int32_t)message[temp_pointer];
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	4413      	add	r3, r2
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	623b      	str	r3, [r7, #32]
						// check limit
						if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPEED_MAX)) {
 800147c:	6a3b      	ldr	r3, [r7, #32]
 800147e:	2b00      	cmp	r3, #0
 8001480:	dd02      	ble.n	8001488 <commandRead+0x500>
 8001482:	6a3b      	ldr	r3, [r7, #32]
 8001484:	2b0e      	cmp	r3, #14
 8001486:	dd01      	ble.n	800148c <commandRead+0x504>
							return CMD_ERROR;
 8001488:	2316      	movs	r3, #22
 800148a:	e0c0      	b.n	800160e <commandRead+0x686>
						}
						duty_cmd->key_speed = speed;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	6a3a      	ldr	r2, [r7, #32]
 8001490:	605a      	str	r2, [r3, #4]
						current_key_speed1 = speed;
 8001492:	4a5c      	ldr	r2, [pc, #368]	; (8001604 <commandRead+0x67c>)
 8001494:	6a3b      	ldr	r3, [r7, #32]
 8001496:	6013      	str	r3, [r2, #0]
						return CMD_KEY_SPEED;
 8001498:	2315      	movs	r3, #21
 800149a:	e0b8      	b.n	800160e <commandRead+0x686>
					}else{
						return CMD_ERROR;
 800149c:	2316      	movs	r3, #22
 800149e:	e0b6      	b.n	800160e <commandRead+0x686>
				break;

				// Set test mode
				case CMD_MOTOR_TEST:
				{
					if(length == 3){ // 1byte key mode + 2 byte define
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	d117      	bne.n	80014d6 <commandRead+0x54e>
						int temp_pointer = 2;
 80014a6:	2302      	movs	r3, #2
 80014a8:	61bb      	str	r3, [r7, #24]
						uint8_t test_key = message[temp_pointer];
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	75fb      	strb	r3, [r7, #23]
						if(test_key < 0 || test_key > 8){
 80014b4:	7dfb      	ldrb	r3, [r7, #23]
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	d901      	bls.n	80014be <commandRead+0x536>
							return CMD_ERROR;
 80014ba:	2316      	movs	r3, #22
 80014bc:	e0a7      	b.n	800160e <commandRead+0x686>
						}
						duty_cmd->test_key = test_key;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	7dfa      	ldrb	r2, [r7, #23]
 80014c2:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
						duty_cmd->robot_method = SCARA_METHOD_TEST;	
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	2203      	movs	r2, #3
 80014ca:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
						return CMD_MOTOR_TEST;
 80014d2:	230c      	movs	r3, #12
 80014d4:	e09b      	b.n	800160e <commandRead+0x686>
					}else{
						return CMD_ERROR;
 80014d6:	2316      	movs	r3, #22
 80014d8:	e099      	b.n	800160e <commandRead+0x686>
				}
				break;

				case CMD_OBJECT_DETECTED:
				{
					if (length == 15){ // 3 int32_t number + 1 byte object type + 2 define byte
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	2b0f      	cmp	r3, #15
 80014de:	d16a      	bne.n	80015b6 <commandRead+0x62e>
						temp_pointer = -2;
 80014e0:	f06f 0301 	mvn.w	r3, #1
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->target_point.x = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 80014e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e8:	3304      	adds	r3, #4
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	4413      	add	r3, r2
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f815 	bl	8000524 <__aeabi_i2d>
 80014fa:	a33f      	add	r3, pc, #252	; (adr r3, 80015f8 <commandRead+0x670>)
 80014fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001500:	f7ff f87a 	bl	80005f8 <__aeabi_dmul>
 8001504:	4603      	mov	r3, r0
 8001506:	460c      	mov	r4, r1
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
						duty_cmd->target_point.y = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 800150e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001510:	3304      	adds	r3, #4
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	4413      	add	r3, r2
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f801 	bl	8000524 <__aeabi_i2d>
 8001522:	a335      	add	r3, pc, #212	; (adr r3, 80015f8 <commandRead+0x670>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7ff f866 	bl	80005f8 <__aeabi_dmul>
 800152c:	4603      	mov	r3, r0
 800152e:	460c      	mov	r4, r1
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
						//duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
						duty_cmd->target_point.roll = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001538:	3304      	adds	r3, #4
 800153a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800153c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	4413      	add	r3, r2
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe ffed 	bl	8000524 <__aeabi_i2d>
 800154a:	a32b      	add	r3, pc, #172	; (adr r3, 80015f8 <commandRead+0x670>)
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	f7ff f852 	bl	80005f8 <__aeabi_dmul>
 8001554:	4603      	mov	r3, r0
 8001556:	460c      	mov	r4, r1
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
						duty_cmd->target_point.object_type = message[temp_pointer+=4];
 800155e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001560:	3304      	adds	r3, #4
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	4413      	add	r3, r2
 800156a:	781a      	ldrb	r2, [r3, #0]
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
						duty_cmd->target_point.t = (double)(TIM2->CNT);
 8001572:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe ffc3 	bl	8000504 <__aeabi_ui2d>
 800157e:	4603      	mov	r3, r0
 8001580:	460c      	mov	r4, r1
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
						duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	2201      	movs	r2, #1
 800158c:	745a      	strb	r2, [r3, #17]
						duty_cmd->path_type = DUTY_PATH_LINE;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	2200      	movs	r2, #0
 8001592:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	2200      	movs	r2, #0
 8001598:	735a      	strb	r2, [r3, #13]
						duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	2200      	movs	r2, #0
 800159e:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	2200      	movs	r2, #0
 80015a4:	741a      	strb	r2, [r3, #16]
					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	2204      	movs	r2, #4
 80015aa:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
					return CMD_OBJECT_DETECTED;
 80015b2:	2318      	movs	r3, #24
 80015b4:	e02b      	b.n	800160e <commandRead+0x686>
						return CMD_ERROR;
 80015b6:	2316      	movs	r3, #22
 80015b8:	e029      	b.n	800160e <commandRead+0x686>
				}
				break;

				case CMD_SETUP_CONVEYOR_SPEED:
				{
					if (length == 6) { // 1 int32_t number + 2 define byte
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	2b06      	cmp	r3, #6
 80015be:	d114      	bne.n	80015ea <commandRead+0x662>
						temp_pointer = 2;
 80015c0:	2302      	movs	r3, #2
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
						conveyor_speed = (double)(*(int32_t*)(&message[temp_pointer]))*COR_INVERSE_SCALE;
 80015c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	4413      	add	r3, r2
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe ffa9 	bl	8000524 <__aeabi_i2d>
 80015d2:	a309      	add	r3, pc, #36	; (adr r3, 80015f8 <commandRead+0x670>)
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	f7ff f80e 	bl	80005f8 <__aeabi_dmul>
 80015dc:	4603      	mov	r3, r0
 80015de:	460c      	mov	r4, r1
 80015e0:	4a09      	ldr	r2, [pc, #36]	; (8001608 <commandRead+0x680>)
 80015e2:	e9c2 3400 	strd	r3, r4, [r2]
						return CMD_SETUP_CONVEYOR_SPEED;
 80015e6:	2319      	movs	r3, #25
 80015e8:	e011      	b.n	800160e <commandRead+0x686>
					}else{
						return CMD_ERROR;
 80015ea:	2316      	movs	r3, #22
 80015ec:	e00f      	b.n	800160e <commandRead+0x686>
				break;

				//Unknow command id
				default:
				{
					return CMD_ERROR;
 80015ee:	2316      	movs	r3, #22
 80015f0:	e00d      	b.n	800160e <commandRead+0x686>
        break;

        //unknow protocol id
        default:
        {
            return PROTOCOL_ERROR;
 80015f2:	2317      	movs	r3, #23
 80015f4:	e00b      	b.n	800160e <commandRead+0x686>
 80015f6:	bf00      	nop
 80015f8:	a0000000 	.word	0xa0000000
 80015fc:	3eb0c6f7 	.word	0x3eb0c6f7
 8001600:	20004d60 	.word	0x20004d60
 8001604:	20000000 	.word	0x20000000
 8001608:	20000ba0 	.word	0x20000ba0
        break;
 800160c:	bf00      	nop
        }
    }
}
 800160e:	4618      	mov	r0, r3
 8001610:	3734      	adds	r7, #52	; 0x34
 8001612:	46bd      	mov	sp, r7
 8001614:	bd90      	pop	{r4, r7, pc}
 8001616:	bf00      	nop

08001618 <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail, int32_t *detail_length) {
 8001618:	b082      	sub	sp, #8
 800161a:	b580      	push	{r7, lr}
 800161c:	b0e2      	sub	sp, #392	; 0x188
 800161e:	af2e      	add	r7, sp, #184	; 0xb8
 8001620:	4601      	mov	r1, r0
 8001622:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8001626:	e880 000c 	stmia.w	r0, {r2, r3}
 800162a:	460b      	mov	r3, r1
 800162c:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	2b19      	cmp	r3, #25
 8001632:	f200 8188 	bhi.w	8001946 <commandReply+0x32e>
 8001636:	a201      	add	r2, pc, #4	; (adr r2, 800163c <commandReply+0x24>)
 8001638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163c:	080016a5 	.word	0x080016a5
 8001640:	080016a5 	.word	0x080016a5
 8001644:	080016a5 	.word	0x080016a5
 8001648:	080016a5 	.word	0x080016a5
 800164c:	080016a5 	.word	0x080016a5
 8001650:	080016a5 	.word	0x080016a5
 8001654:	080016a5 	.word	0x080016a5
 8001658:	080016ad 	.word	0x080016ad
 800165c:	08001727 	.word	0x08001727
 8001660:	0800175b 	.word	0x0800175b
 8001664:	080017f1 	.word	0x080017f1
 8001668:	080018cd 	.word	0x080018cd
 800166c:	080016a5 	.word	0x080016a5
 8001670:	08001969 	.word	0x08001969
 8001674:	08001969 	.word	0x08001969
 8001678:	08001969 	.word	0x08001969
 800167c:	08001969 	.word	0x08001969
 8001680:	08001969 	.word	0x08001969
 8001684:	08001969 	.word	0x08001969
 8001688:	080018d5 	.word	0x080018d5
 800168c:	080018dd 	.word	0x080018dd
 8001690:	080018e5 	.word	0x080018e5
 8001694:	08001925 	.word	0x08001925
 8001698:	08001947 	.word	0x08001947
 800169c:	080016a5 	.word	0x080016a5
 80016a0:	080018c5 	.word	0x080018c5
	case CMD_MOTOR_TEST:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_OBJECT_DETECTED:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 80016a4:	2309      	movs	r3, #9
 80016a6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80016aa:	e15e      	b.n	800196a <commandReply+0x352>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.sub_para_int) {
 80016ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d110      	bne.n	80016d6 <commandReply+0xbe>
				scaraSetOutput(1);
 80016b4:	2001      	movs	r0, #1
 80016b6:	f008 ff3b 	bl	800a530 <scaraSetOutput>
				// strcpy( (char *)detail, "Output ON");
				// detail_length += 9;
				detail[(*detail_length)++] = OUTPUT_ON;
 80016ba:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	1c59      	adds	r1, r3, #1
 80016c2:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80016c6:	6011      	str	r1, [r2, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80016ce:	4413      	add	r3, r2
 80016d0:	220d      	movs	r2, #13
 80016d2:	701a      	strb	r2, [r3, #0]
 80016d4:	e023      	b.n	800171e <commandReply+0x106>
			} else if (0 == duty_cmd.sub_para_int) {
 80016d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d110      	bne.n	8001700 <commandReply+0xe8>
				scaraSetOutput(0);
 80016de:	2000      	movs	r0, #0
 80016e0:	f008 ff26 	bl	800a530 <scaraSetOutput>
				detail[(*detail_length)++] = OUTPUT_OFF;
 80016e4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	1c59      	adds	r1, r3, #1
 80016ec:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80016f0:	6011      	str	r1, [r2, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80016f8:	4413      	add	r3, r2
 80016fa:	220e      	movs	r2, #14
 80016fc:	701a      	strb	r2, [r3, #0]
 80016fe:	e00e      	b.n	800171e <commandReply+0x106>
			} else {
				// strcpy( (char *)detail, "Wrong Value");
				// detail_length += 11;
				detail[(*detail_length)++] = WRONG_OUTPUT_VALUE ;
 8001700:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	1c59      	adds	r1, r3, #1
 8001708:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800170c:	6011      	str	r1, [r2, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001714:	4413      	add	r3, r2
 8001716:	220f      	movs	r2, #15
 8001718:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 800171a:	2307      	movs	r3, #7
 800171c:	e127      	b.n	800196e <commandReply+0x356>
			}
			ret = RPD_OK;
 800171e:	2308      	movs	r3, #8
 8001720:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 8001724:	e121      	b.n	800196a <commandReply+0x352>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 8001726:	f008 ff65 	bl	800a5f4 <scaraGetMode>
 800172a:	4603      	mov	r3, r0
 800172c:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			current_state	 = scaraGetDutyState();
 8001730:	f008 ff78 	bl	800a624 <scaraGetDutyState>
 8001734:	4603      	mov	r3, r0
 8001736:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 800173a:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 800173e:	2b02      	cmp	r3, #2
 8001740:	d107      	bne.n	8001752 <commandReply+0x13a>
 8001742:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8001746:	2b00      	cmp	r3, #0
 8001748:	d103      	bne.n	8001752 <commandReply+0x13a>
				ret = RPD_IDLE;
 800174a:	2300      	movs	r3, #0
 800174c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 8001750:	e10b      	b.n	800196a <commandReply+0x352>
				ret = RPD_BUSY;
 8001752:	2301      	movs	r3, #1
 8001754:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001758:	e107      	b.n	800196a <commandReply+0x352>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			if(position_type == REAL_POSITION_DATA || position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 800175a:	4b88      	ldr	r3, [pc, #544]	; (800197c <commandReply+0x364>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <commandReply+0x152>
 8001762:	4b86      	ldr	r3, [pc, #536]	; (800197c <commandReply+0x364>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d113      	bne.n	8001792 <commandReply+0x17a>
				lowlayer_readTruePosition(&position);
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	4618      	mov	r0, r3
 8001770:	f002 ff5a 	bl	8004628 <lowlayer_readTruePosition>
				kinematicForward(&position);
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	4618      	mov	r0, r3
 800177a:	f002 f861 	bl	8003840 <kinematicForward>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 800177e:	4b7f      	ldr	r3, [pc, #508]	; (800197c <commandReply+0x364>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d11e      	bne.n	80017c4 <commandReply+0x1ac>
					scaraUpdatePosition(&position);
 8001786:	f107 0308 	add.w	r3, r7, #8
 800178a:	4618      	mov	r0, r3
 800178c:	f008 ff22 	bl	800a5d4 <scaraUpdatePosition>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8001790:	e018      	b.n	80017c4 <commandReply+0x1ac>
				}
			}else if(position_type == ESTIMATE_POSITION_DATA){
 8001792:	4b7a      	ldr	r3, [pc, #488]	; (800197c <commandReply+0x364>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d105      	bne.n	80017a6 <commandReply+0x18e>
				scaraGetPosition(&position);
 800179a:	f107 0308 	add.w	r3, r7, #8
 800179e:	4618      	mov	r0, r3
 80017a0:	f008 ff08 	bl	800a5b4 <scaraGetPosition>
 80017a4:	e00e      	b.n	80017c4 <commandReply+0x1ac>
			}else{
				detail[(*detail_length)++] = WRONG_READ_POSITION_TYPE;
 80017a6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	1c59      	adds	r1, r3, #1
 80017ae:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80017b2:	6011      	str	r1, [r2, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80017ba:	4413      	add	r3, r2
 80017bc:	2210      	movs	r2, #16
 80017be:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 80017c0:	2307      	movs	r3, #7
 80017c2:	e0d4      	b.n	800196e <commandReply+0x356>
			}
			*detail_length = scaraPosition_packaging(detail, position);
 80017c4:	4668      	mov	r0, sp
 80017c6:	f107 0310 	add.w	r3, r7, #16
 80017ca:	22b8      	movs	r2, #184	; 0xb8
 80017cc:	4619      	mov	r1, r3
 80017ce:	f014 fa45 	bl	8015c5c <memcpy>
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	cb0c      	ldmia	r3, {r2, r3}
 80017d8:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 80017dc:	f008 ff58 	bl	800a690 <scaraPosition_packaging>
 80017e0:	4602      	mov	r2, r0
 80017e2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80017e6:	601a      	str	r2, [r3, #0]
			ret =  RPD_POSITION;
 80017e8:	2302      	movs	r3, #2
 80017ea:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 80017ee:	e0bc      	b.n	800196a <commandReply+0x352>
	case CMD_SETTING:
		if ( DUTY_COORDINATES_ABS == duty_cmd.coordinate_type) {
 80017f0:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10d      	bne.n	8001814 <commandReply+0x1fc>
			// strcpy( (char *)detail, "ABSOLUTE.");
			// detail_length += 9;
			detail[(*detail_length)++] = ABSOLUTE;
 80017f8:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	1c59      	adds	r1, r3, #1
 8001800:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001804:	6011      	str	r1, [r2, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800180c:	4413      	add	r3, r2
 800180e:	2211      	movs	r2, #17
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	e020      	b.n	8001856 <commandReply+0x23e>
		} else if ( DUTY_COORDINATES_REL == duty_cmd.coordinate_type) {
 8001814:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8001818:	2b01      	cmp	r3, #1
 800181a:	d10d      	bne.n	8001838 <commandReply+0x220>
			detail[(*detail_length)++] = RELATIVE;
 800181c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	1c59      	adds	r1, r3, #1
 8001824:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001828:	6011      	str	r1, [r2, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001830:	4413      	add	r3, r2
 8001832:	2212      	movs	r2, #18
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	e00e      	b.n	8001856 <commandReply+0x23e>
		} else {
			detail[(*detail_length)++] = WRONG_COORDINATE;
 8001838:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	1c59      	adds	r1, r3, #1
 8001840:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001844:	6011      	str	r1, [r2, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800184c:	4413      	add	r3, r2
 800184e:	220c      	movs	r2, #12
 8001850:	701a      	strb	r2, [r3, #0]
			return RPD_ERROR;
 8001852:	2307      	movs	r3, #7
 8001854:	e08b      	b.n	800196e <commandReply+0x356>
		}

		if ( DUTY_TRAJECTORY_LSPB == duty_cmd.trajec_type) {
 8001856:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10d      	bne.n	800187a <commandReply+0x262>
			detail[(*detail_length)++] = LSPB;
 800185e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	1c59      	adds	r1, r3, #1
 8001866:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800186a:	6011      	str	r1, [r2, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001872:	4413      	add	r3, r2
 8001874:	2213      	movs	r2, #19
 8001876:	701a      	strb	r2, [r3, #0]
 8001878:	e020      	b.n	80018bc <commandReply+0x2a4>
		} else if ( DUTY_TRAJECTORY_SCURVE == duty_cmd.trajec_type) {
 800187a:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 800187e:	2b01      	cmp	r3, #1
 8001880:	d10d      	bne.n	800189e <commandReply+0x286>
			detail[(*detail_length)++] = S_CURVE;
 8001882:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	1c59      	adds	r1, r3, #1
 800188a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800188e:	6011      	str	r1, [r2, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001896:	4413      	add	r3, r2
 8001898:	2214      	movs	r2, #20
 800189a:	701a      	strb	r2, [r3, #0]
 800189c:	e00e      	b.n	80018bc <commandReply+0x2a4>
		} else {
			detail[(*detail_length)++] = WRONG_TRAJECTORY_TYPE;
 800189e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	1c59      	adds	r1, r3, #1
 80018a6:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80018aa:	6011      	str	r1, [r2, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80018b2:	4413      	add	r3, r2
 80018b4:	2205      	movs	r2, #5
 80018b6:	701a      	strb	r2, [r3, #0]
			return RPD_ERROR;
 80018b8:	2307      	movs	r3, #7
 80018ba:	e058      	b.n	800196e <commandReply+0x356>
		}		
		ret = RPD_OK;
 80018bc:	2308      	movs	r3, #8
 80018be:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80018c2:	e052      	b.n	800196a <commandReply+0x352>
	case CMD_SETUP_CONVEYOR_SPEED:
		ret = RPD_OK;
 80018c4:	2308      	movs	r3, #8
 80018c6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80018ca:	e04e      	b.n	800196a <commandReply+0x352>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 80018cc:	2309      	movs	r3, #9
 80018ce:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80018d2:	e04a      	b.n	800196a <commandReply+0x352>
	case CMD_JOB_PUSH_OUTPUT:
		break;
	case CMD_JOB_TEST:
		break;
	case CMD_JOB_RUN:
		ret = RPD_DUTY;
 80018d4:	2309      	movs	r3, #9
 80018d6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80018da:	e046      	b.n	800196a <commandReply+0x352>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 80018dc:	2309      	movs	r3, #9
 80018de:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80018e2:	e042      	b.n	800196a <commandReply+0x352>
	case CMD_KEY_SPEED:
		// sprintf((char*) detail, "MANUAL SPEED = %d", duty_cmd.key_speed);
		detail[(*detail_length)++] = MANUAL_SPEED;
 80018e4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	1c59      	adds	r1, r3, #1
 80018ec:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80018f0:	6011      	str	r1, [r2, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80018f8:	4413      	add	r3, r2
 80018fa:	2216      	movs	r2, #22
 80018fc:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = (uint8_t)(duty_cmd.key_speed);
 80018fe:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001902:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	1c59      	adds	r1, r3, #1
 800190a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800190e:	6011      	str	r1, [r2, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001916:	4413      	add	r3, r2
 8001918:	b2c2      	uxtb	r2, r0
 800191a:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 800191c:	2308      	movs	r3, #8
 800191e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001922:	e022      	b.n	800196a <commandReply+0x352>
	case CMD_ERROR:
		// strcpy( (char *)detail, "Check parameters");
		detail[(*detail_length)++] = CHECK_PARAMETER;
 8001924:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	1c59      	adds	r1, r3, #1
 800192c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001930:	6011      	str	r1, [r2, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001938:	4413      	add	r3, r2
 800193a:	2215      	movs	r2, #21
 800193c:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 800193e:	2307      	movs	r3, #7
 8001940:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001944:	e011      	b.n	800196a <commandReply+0x352>
	default:
		// strcpy( (char *)detail, "Unknown command");
		detail[(*detail_length)++] = UNKNOW_COMMAND;
 8001946:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	1c59      	adds	r1, r3, #1
 800194e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001952:	6011      	str	r1, [r2, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800195a:	4413      	add	r3, r2
 800195c:	2217      	movs	r2, #23
 800195e:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 8001960:	2307      	movs	r3, #7
 8001962:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 8001966:	e000      	b.n	800196a <commandReply+0x352>
		break;
 8001968:	bf00      	nop
	}
	return ret;
 800196a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 800196e:	4618      	mov	r0, r3
 8001970:	37d0      	adds	r7, #208	; 0xd0
 8001972:	46bd      	mov	sp, r7
 8001974:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001978:	b002      	add	sp, #8
 800197a:	4770      	bx	lr
 800197c:	20004d60 	.word	0x20004d60

08001980 <commandRespond1>:

int32_t				commandRespond1	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										int32_t detail_length,
										char *respond) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	4603      	mov	r3, r0
 800198e:	73fb      	strb	r3, [r7, #15]
	int32_t out_length = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
	respond[out_length++] = 0x28;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	617a      	str	r2, [r7, #20]
 800199a:	461a      	mov	r2, r3
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	4413      	add	r3, r2
 80019a0:	2228      	movs	r2, #40	; 0x28
 80019a2:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = RESPONSE_TRANSMISION;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	617a      	str	r2, [r7, #20]
 80019aa:	461a      	mov	r2, r3
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	4413      	add	r3, r2
 80019b0:	2202      	movs	r2, #2
 80019b2:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = rpd;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	617a      	str	r2, [r7, #20]
 80019ba:	461a      	mov	r2, r3
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	4413      	add	r3, r2
 80019c0:	7bfa      	ldrb	r2, [r7, #15]
 80019c2:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = id_command;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	617a      	str	r2, [r7, #20]
 80019ca:	461a      	mov	r2, r3
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	4413      	add	r3, r2
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]
	if(detail_length != 0){
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00c      	beq.n	80019f6 <commandRespond1+0x76>
		memcpy(&respond[out_length], detail, detail_length);
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	6a3a      	ldr	r2, [r7, #32]
 80019e0:	4413      	add	r3, r2
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f014 f938 	bl	8015c5c <memcpy>
		out_length += detail_length;
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	4413      	add	r3, r2
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	e007      	b.n	8001a06 <commandRespond1+0x86>
	}else{
		respond[out_length++] = NONE;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	617a      	str	r2, [r7, #20]
 80019fc:	461a      	mov	r2, r3
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	4413      	add	r3, r2
 8001a02:	2223      	movs	r2, #35	; 0x23
 8001a04:	701a      	strb	r2, [r3, #0]
	}
	respond[out_length++] = 0x29;
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	1c5a      	adds	r2, r3, #1
 8001a0a:	617a      	str	r2, [r7, #20]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
 8001a10:	4413      	add	r3, r2
 8001a12:	2229      	movs	r2, #41	; 0x29
 8001a14:	701a      	strb	r2, [r3, #0]

	return out_length;
 8001a16:	697b      	ldr	r3, [r7, #20]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b096      	sub	sp, #88	; 0x58
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 8001a2c:	887a      	ldrh	r2, [r7, #2]
 8001a2e:	f107 0008 	add.w	r0, r7, #8
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	4613      	mov	r3, r2
 8001a38:	4a17      	ldr	r2, [pc, #92]	; (8001a98 <LOG_REPORT+0x78>)
 8001a3a:	213f      	movs	r1, #63	; 0x3f
 8001a3c:	f015 f836 	bl	8016aac <sniprintf>
 8001a40:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 8001a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a48:	d101      	bne.n	8001a4e <LOG_REPORT+0x2e>
		return FALSE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e01f      	b.n	8001a8e <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 8001a4e:	f107 0308 	add.w	r3, r7, #8
 8001a52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a54:	4619      	mov	r1, r3
 8001a56:	4811      	ldr	r0, [pc, #68]	; (8001a9c <LOG_REPORT+0x7c>)
 8001a58:	f002 fb37 	bl	80040ca <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 8001a5c:	4810      	ldr	r0, [pc, #64]	; (8001aa0 <LOG_REPORT+0x80>)
 8001a5e:	f00a f8e3 	bl	800bc28 <HAL_DMA_GetState>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d101      	bne.n	8001a6c <LOG_REPORT+0x4c>
		return TRUE;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e010      	b.n	8001a8e <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 8001a6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a70:	490c      	ldr	r1, [pc, #48]	; (8001aa4 <LOG_REPORT+0x84>)
 8001a72:	480a      	ldr	r0, [pc, #40]	; (8001a9c <LOG_REPORT+0x7c>)
 8001a74:	f002 fb51 	bl	800411a <ringBuff_PopArray>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 8001a7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a82:	461a      	mov	r2, r3
 8001a84:	4907      	ldr	r1, [pc, #28]	; (8001aa4 <LOG_REPORT+0x84>)
 8001a86:	4808      	ldr	r0, [pc, #32]	; (8001aa8 <LOG_REPORT+0x88>)
 8001a88:	f00c fe4e 	bl	800e728 <HAL_UART_Transmit_DMA>
	return TRUE;
 8001a8c:	2301      	movs	r3, #1
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3750      	adds	r7, #80	; 0x50
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	0801b140 	.word	0x0801b140
 8001a9c:	20000410 	.word	0x20000410
 8001aa0:	20005e28 	.word	0x20005e28
 8001aa4:	20004d64 	.word	0x20004d64
 8001aa8:	20005de8 	.word	0x20005de8

08001aac <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_lenght) {
 8001aac:	b5b0      	push	{r4, r5, r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
 8001ab6:	466b      	mov	r3, sp
 8001ab8:	461d      	mov	r5, r3
	if (in_lenght < MIN_MESSAGE_LENGHT) {
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	dc02      	bgt.n	8001ac6 <unPackPayload+0x1a>
		return -1;
 8001ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac4:	e063      	b.n	8001b8e <unPackPayload+0xe2>
	}// check minimum lenght

	if ( (START_CHAR != message_buff[0]) || (END_CHAR != message_buff[in_lenght - 1]) ) {
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b28      	cmp	r3, #40	; 0x28
 8001acc:	d106      	bne.n	8001adc <unPackPayload+0x30>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b29      	cmp	r3, #41	; 0x29
 8001ada:	d002      	beq.n	8001ae2 <unPackPayload+0x36>
		return -1;
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae0:	e055      	b.n	8001b8e <unPackPayload+0xe2>
	}// check start char and end char

	int32_t out_lenght = in_lenght - 2;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	3b02      	subs	r3, #2
 8001ae6:	613b      	str	r3, [r7, #16]
//		if ( (START_CHAR == message_buff[i]) || (END_CHAR == message_buff[i]) || (ADD_CHAR == message_buff[i]) ) {
//			out_lenght--;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8001ae8:	6938      	ldr	r0, [r7, #16]
 8001aea:	1e43      	subs	r3, r0, #1
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4603      	mov	r3, r0
 8001af0:	4619      	mov	r1, r3
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	f04f 0300 	mov.w	r3, #0
 8001afa:	f04f 0400 	mov.w	r4, #0
 8001afe:	00d4      	lsls	r4, r2, #3
 8001b00:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001b04:	00cb      	lsls	r3, r1, #3
 8001b06:	4603      	mov	r3, r0
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	f04f 0400 	mov.w	r4, #0
 8001b16:	00d4      	lsls	r4, r2, #3
 8001b18:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001b1c:	00cb      	lsls	r3, r1, #3
 8001b1e:	4603      	mov	r3, r0
 8001b20:	3307      	adds	r3, #7
 8001b22:	08db      	lsrs	r3, r3, #3
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	ebad 0d03 	sub.w	sp, sp, r3
 8001b2a:	466b      	mov	r3, sp
 8001b2c:	3300      	adds	r3, #0
 8001b2e:	60bb      	str	r3, [r7, #8]

	out_lenght = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	613b      	str	r3, [r7, #16]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	e017      	b.n	8001b6a <unPackPayload+0xbe>
		if ( (START_CHAR == message_buff[i]) ||	(END_CHAR == message_buff[i]) ) {
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	4413      	add	r3, r2
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b28      	cmp	r3, #40	; 0x28
 8001b44:	d00e      	beq.n	8001b64 <unPackPayload+0xb8>
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b29      	cmp	r3, #41	; 0x29
 8001b50:	d008      	beq.n	8001b64 <unPackPayload+0xb8>
			;
//		} else if ( (ADD_CHAR == message_buff[i]) ) {
//			temp_buff[out_lenght++] = message_buff[++i] ^ XOR_CHAR;
		}
		else {
			temp_buff[out_lenght++] = message_buff[i];
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	441a      	add	r2, r3
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1c59      	adds	r1, r3, #1
 8001b5c:	6139      	str	r1, [r7, #16]
 8001b5e:	7811      	ldrb	r1, [r2, #0]
 8001b60:	68ba      	ldr	r2, [r7, #8]
 8001b62:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3301      	adds	r3, #1
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	dbe2      	blt.n	8001b3a <unPackPayload+0x8e>
		}
	}
	memset((uint8_t*)message_buff, 0, in_lenght);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	2100      	movs	r1, #0
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f014 f892 	bl	8015ca4 <memset>
	memmove(message_buff, temp_buff, out_lenght);
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4619      	mov	r1, r3
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f014 f873 	bl	8015c72 <memmove>

	return out_lenght;
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	46ad      	mov	sp, r5
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bdb0      	pop	{r4, r5, r7, pc}

08001b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <MX_DMA_Init+0x3c>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <MX_DMA_Init+0x3c>)
 8001ba8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <MX_DMA_Init+0x3c>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2105      	movs	r1, #5
 8001bbe:	200f      	movs	r0, #15
 8001bc0:	f009 fd56 	bl	800b670 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001bc4:	200f      	movs	r0, #15
 8001bc6:	f009 fd6f 	bl	800b6a8 <HAL_NVIC_EnableIRQ>

}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800

08001bd8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4a07      	ldr	r2, [pc, #28]	; (8001c04 <vApplicationGetIdleTaskMemory+0x2c>)
 8001be8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <vApplicationGetIdleTaskMemory+0x30>)
 8001bee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bf6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	20000ba8 	.word	0x20000ba8
 8001c08:	20000bfc 	.word	0x20000bfc

08001c0c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001c0c:	b5b0      	push	{r4, r5, r7, lr}
 8001c0e:	b094      	sub	sp, #80	; 0x50
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 8001c12:	2300      	movs	r3, #0
 8001c14:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c16:	2300      	movs	r3, #0
 8001c18:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 8001c1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f010 fd5e 	bl	80126e0 <osMutexCreate>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <MX_FREERTOS_Init+0x90>)
 8001c28:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c2e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c38:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 8001c3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f010 fe65 	bl	8012910 <osMailCreate>
 8001c46:	4602      	mov	r2, r0
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <MX_FREERTOS_Init+0x94>)
 8001c4a:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2048);
 8001c4c:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <MX_FREERTOS_Init+0x98>)
 8001c4e:	f107 041c 	add.w	r4, r7, #28
 8001c52:	461d      	mov	r5, r3
 8001c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	2100      	movs	r1, #0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f010 fc4e 	bl	8012508 <osThreadCreate>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <MX_FREERTOS_Init+0x9c>)
 8001c70:	601a      	str	r2, [r3, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <MX_FREERTOS_Init+0xa0>)
 8001c74:	463c      	mov	r4, r7
 8001c76:	461d      	mov	r5, r3
 8001c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8001c84:	463b      	mov	r3, r7
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f010 fc3d 	bl	8012508 <osThreadCreate>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <MX_FREERTOS_Init+0xa4>)
 8001c92:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001c94:	bf00      	nop
 8001c96:	3750      	adds	r7, #80	; 0x50
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c9c:	20004e68 	.word	0x20004e68
 8001ca0:	20004e6c 	.word	0x20004e6c
 8001ca4:	0801b15c 	.word	0x0801b15c
 8001ca8:	20004e64 	.word	0x20004e64
 8001cac:	0801b188 	.word	0x0801b188
 8001cb0:	20004e70 	.word	0x20004e70
 8001cb4:	00000000 	.word	0x00000000

08001cb8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cba:	f6ad 6dec 	subw	sp, sp, #3820	; 0xeec
 8001cbe:	af6c      	add	r7, sp, #432	; 0x1b0
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001cc6:	f013 fa41 	bl	801514c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 8001cca:	2201      	movs	r2, #1
 8001ccc:	2110      	movs	r1, #16
 8001cce:	48d8      	ldr	r0, [pc, #864]	; (8002030 <StartDefaultTask+0x378>)
 8001cd0:	f00a fa30 	bl	800c134 <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f887 3d37 	strb.w	r3, [r7, #3383]	; 0xd37
  int32_t					current_key_speed;
  double						run_time;

  SCARA_Pick_And_Place_Package Object[8];
  SCARA_Pick_And_Place_State  operation_state;
  uint8_t object_tail_pointer = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f887 3d16 	strb.w	r3, [r7, #3350]	; 0xd16
  uint8_t object_head_pointer = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f887 3d15 	strb.w	r3, [r7, #3349]	; 0xd15
  double state_time = 0;
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	f04f 0400 	mov.w	r4, #0
 8001cee:	f607 5208 	addw	r2, r7, #3336	; 0xd08
 8001cf2:	e9c2 3400 	strd	r3, r4, [r2]
  const SCARA_Slot_TypeDef SLot_Cordinate[NUM_OF_OBJECT] = {
 8001cf6:	f107 0318 	add.w	r3, r7, #24
 8001cfa:	4ace      	ldr	r2, [pc, #824]	; (8002034 <StartDefaultTask+0x37c>)
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	4611      	mov	r1, r2
 8001d00:	2390      	movs	r3, #144	; 0x90
 8001d02:	461a      	mov	r2, r3
 8001d04:	f013 ffaa 	bl	8015c5c <memcpy>
  		{203.859f, -101.616f, 0.0f} ,
		{203.859f, -101.616f, 0.0f} ,
		{203.859f, -101.616f, 0.0f}
  };

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 8001d08:	21e2      	movs	r1, #226	; 0xe2
 8001d0a:	48cb      	ldr	r0, [pc, #812]	; (8002038 <StartDefaultTask+0x380>)
 8001d0c:	f7ff fe88 	bl	8001a20 <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 8001d10:	f008 fc7c 	bl	800a60c <scaraGetMethod>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f887 3d2f 	strb.w	r3, [r7, #3375]	; 0xd2f
  current_mode	 = scaraGetMode();
 8001d1a:	f008 fc6b 	bl	800a5f4 <scaraGetMode>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f887 3d2e 	strb.w	r3, [r7, #3374]	; 0xd2e
  current_duty_state	 = scaraGetDutyState();
 8001d24:	f008 fc7e 	bl	800a624 <scaraGetDutyState>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d

  // Start up robot
  scaraStartup();
 8001d2e:	f003 f993 	bl	8005058 <scaraStartup>
  osDelay(10);
 8001d32:	200a      	movs	r0, #10
 8001d34:	f010 fc34 	bl	80125a0 <osDelay>
//   positionNext.Theta2 = PI/3;
//   positionNext.D3 = 10;
//   positionNext.Theta4 = 0;
//   positionNext.t = 0;

  positionNext.Theta1 = -1.48267f;
 8001d38:	4ac0      	ldr	r2, [pc, #768]	; (800203c <StartDefaultTask+0x384>)
 8001d3a:	a4b5      	add	r4, pc, #724	; (adr r4, 8002010 <StartDefaultTask+0x358>)
 8001d3c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d40:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
  positionNext.Theta2 = 2.35575f;
 8001d44:	4abd      	ldr	r2, [pc, #756]	; (800203c <StartDefaultTask+0x384>)
 8001d46:	a4b4      	add	r4, pc, #720	; (adr r4, 8002018 <StartDefaultTask+0x360>)
 8001d48:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d4c:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
  positionNext.D3 = 0.034999;
 8001d50:	4aba      	ldr	r2, [pc, #744]	; (800203c <StartDefaultTask+0x384>)
 8001d52:	a4b3      	add	r4, pc, #716	; (adr r4, 8002020 <StartDefaultTask+0x368>)
 8001d54:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d58:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
  positionNext.Theta4 = 2.96586;
 8001d5c:	4ab7      	ldr	r2, [pc, #732]	; (800203c <StartDefaultTask+0x384>)
 8001d5e:	a4b2      	add	r4, pc, #712	; (adr r4, 8002028 <StartDefaultTask+0x370>)
 8001d60:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d64:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
  positionNext.t = 0;
 8001d68:	4ab4      	ldr	r2, [pc, #720]	; (800203c <StartDefaultTask+0x384>)
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	f04f 0400 	mov.w	r4, #0
 8001d72:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

  kinematicForward(&positionNext);
 8001d76:	48b1      	ldr	r0, [pc, #708]	; (800203c <StartDefaultTask+0x384>)
 8001d78:	f001 fd62 	bl	8003840 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 8001d7c:	48b0      	ldr	r0, [pc, #704]	; (8002040 <StartDefaultTask+0x388>)
 8001d7e:	f00c f8b0 	bl	800dee2 <HAL_TIM_Base_Start_IT>

  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 8001d82:	463b      	mov	r3, r7
 8001d84:	f04f 32ff 	mov.w	r2, #4294967295
 8001d88:	2101      	movs	r1, #1
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f010 fc5c 	bl	8012648 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
	  respond_packed_lenght = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
	  infor_lenght			= 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
	  infor_packed_lenght	= 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
	  task_usb_lenght		= 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 3cf0 	str.w	r3, [r7, #3312]	; 0xcf0
	  usb_lenght			= 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 3cec 	str.w	r3, [r7, #3308]	; 0xcec
	  total_respond_length  = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
	  detail_ptr 			= 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f8c7 3ce8 	str.w	r3, [r7, #3304]	; 0xce8
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8001dc0:	4aa0      	ldr	r2, [pc, #640]	; (8002044 <StartDefaultTask+0x38c>)
 8001dc2:	4ba1      	ldr	r3, [pc, #644]	; (8002048 <StartDefaultTask+0x390>)
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	23c0      	movs	r3, #192	; 0xc0
 8001dca:	461a      	mov	r2, r3
 8001dcc:	f013 ff46 	bl	8015c5c <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 8001dd0:	4a9d      	ldr	r2, [pc, #628]	; (8002048 <StartDefaultTask+0x390>)
 8001dd2:	4b9a      	ldr	r3, [pc, #616]	; (800203c <StartDefaultTask+0x384>)
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	23c0      	movs	r3, #192	; 0xc0
 8001dda:	461a      	mov	r2, r3
 8001ddc:	f013 ff3e 	bl	8015c5c <memcpy>
//		  positionTrue.q = positionCurrent.q;
//	  }
//#endif
	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 8001de0:	4b9a      	ldr	r3, [pc, #616]	; (800204c <StartDefaultTask+0x394>)
 8001de2:	6819      	ldr	r1, [r3, #0]
 8001de4:	f607 43c4 	addw	r3, r7, #3268	; 0xcc4
 8001de8:	2200      	movs	r2, #0
 8001dea:	4618      	mov	r0, r3
 8001dec:	f010 fe3c 	bl	8012a68 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 8001df0:	f8d7 3cc4 	ldr.w	r3, [r7, #3268]	; 0xcc4
 8001df4:	2b20      	cmp	r3, #32
 8001df6:	d116      	bne.n	8001e26 <StartDefaultTask+0x16e>
		   dataMail = ret_mail.value.p;
 8001df8:	f8d7 3cc8 	ldr.w	r3, [r7, #3272]	; 0xcc8
 8001dfc:	f8c7 3ce4 	str.w	r3, [r7, #3300]	; 0xce4
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 8001e00:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001e04:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8001e08:	f8d7 1ce4 	ldr.w	r1, [r7, #3300]	; 0xce4
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f013 ff25 	bl	8015c5c <memcpy>
		   isNewDuty = TRUE;
 8001e12:	2301      	movs	r3, #1
 8001e14:	f887 3d37 	strb.w	r3, [r7, #3383]	; 0xd37
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 8001e18:	4b8c      	ldr	r3, [pc, #560]	; (800204c <StartDefaultTask+0x394>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8d7 1ce4 	ldr.w	r1, [r7, #3300]	; 0xce4
 8001e20:	4618      	mov	r0, r3
 8001e22:	f010 fe95 	bl	8012b50 <osMailFree>
	  }
	  if(isNewDuty) {
 8001e26:	f897 3d37 	ldrb.w	r3, [r7, #3383]	; 0xd37
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8324 	beq.w	8002478 <StartDefaultTask+0x7c0>
		  //memset(respond, 0, 40);
		  // Check change method
		  if (duty_cmd.change_method == TRUE) {
 8001e30:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	f040 80cd 	bne.w	8001fd6 <StartDefaultTask+0x31e>
			  //free(Object);
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 8001e3c:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001e40:	785b      	ldrb	r3, [r3, #1]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d11f      	bne.n	8001e86 <StartDefaultTask+0x1ce>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f887 3d2f 	strb.w	r3, [r7, #3375]	; 0xd2f
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed MANUAL Method",
				// 								(char *)respond);
				detail_array[0] = MANUAL_METHOD;
 8001e4c:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8001e50:	2218      	movs	r2, #24
 8001e52:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8001e54:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001e58:	6899      	ldr	r1, [r3, #8]
 8001e5a:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8001e5e:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8001e62:	4413      	add	r3, r2
 8001e64:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	2008      	movs	r0, #8
 8001e6e:	f7ff fd87 	bl	8001980 <commandRespond1>
 8001e72:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
				total_respond_length += respond_lenght;
 8001e76:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8001e7a:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8001e7e:	4413      	add	r3, r2
 8001e80:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
 8001e84:	e2f5      	b.n	8002472 <StartDefaultTask+0x7ba>
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 8001e86:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001e8a:	785b      	ldrb	r3, [r3, #1]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d11f      	bne.n	8001ed0 <StartDefaultTask+0x218>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 8001e90:	2301      	movs	r3, #1
 8001e92:	f887 3d2f 	strb.w	r3, [r7, #3375]	; 0xd2f
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed SEMI AUTO Method",
				// 								(char *)respond);
				detail_array[0] = SEMI_AUTO_METHOD;
 8001e96:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8001e9a:	2219      	movs	r2, #25
 8001e9c:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8001e9e:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001ea2:	6899      	ldr	r1, [r3, #8]
 8001ea4:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8001ea8:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8001eac:	4413      	add	r3, r2
 8001eae:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	2008      	movs	r0, #8
 8001eb8:	f7ff fd62 	bl	8001980 <commandRespond1>
 8001ebc:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
				total_respond_length += respond_lenght;
 8001ec0:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8001ec4:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8001ec8:	4413      	add	r3, r2
 8001eca:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
 8001ece:	e2d0      	b.n	8002472 <StartDefaultTask+0x7ba>
			  } else if (SCARA_METHOD_AUTO == duty_cmd.robot_method) {
 8001ed0:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001ed4:	785b      	ldrb	r3, [r3, #1]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d11f      	bne.n	8001f1a <StartDefaultTask+0x262>
				  current_method = SCARA_METHOD_AUTO;
 8001eda:	2302      	movs	r3, #2
 8001edc:	f887 3d2f 	strb.w	r3, [r7, #3375]	; 0xd2f
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed AUTO Method",
				// 								(char *)respond);
				detail_array[0] = AUTO_METHOD;
 8001ee0:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8001ee4:	221a      	movs	r2, #26
 8001ee6:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8001ee8:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001eec:	6899      	ldr	r1, [r3, #8]
 8001eee:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8001ef2:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	2301      	movs	r3, #1
 8001f00:	2008      	movs	r0, #8
 8001f02:	f7ff fd3d 	bl	8001980 <commandRespond1>
 8001f06:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
				total_respond_length += respond_lenght;
 8001f0a:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8001f0e:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8001f12:	4413      	add	r3, r2
 8001f14:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
 8001f18:	e2ab      	b.n	8002472 <StartDefaultTask+0x7ba>
			  }else if(SCARA_METHOD_TEST == duty_cmd.robot_method){
 8001f1a:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001f1e:	785b      	ldrb	r3, [r3, #1]
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d12f      	bne.n	8001f84 <StartDefaultTask+0x2cc>
				  test_value[0] = 0;
 8001f24:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
				  test_value[1] = 0;
 8001f2c:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8001f30:	2200      	movs	r2, #0
 8001f32:	705a      	strb	r2, [r3, #1]
				  test_value[2] = 0;
 8001f34:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8001f38:	2200      	movs	r2, #0
 8001f3a:	709a      	strb	r2, [r3, #2]
				  test_value[3] = 0;
 8001f3c:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8001f40:	2200      	movs	r2, #0
 8001f42:	70da      	strb	r2, [r3, #3]
				  current_method = SCARA_METHOD_TEST;
 8001f44:	2303      	movs	r3, #3
 8001f46:	f887 3d2f 	strb.w	r3, [r7, #3375]	; 0xd2f
				  detail_array[0] = TEST_METHOD;
 8001f4a:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8001f4e:	221b      	movs	r2, #27
 8001f50:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8001f52:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001f56:	6899      	ldr	r1, [r3, #8]
 8001f58:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8001f5c:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8001f60:	4413      	add	r3, r2
 8001f62:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	2301      	movs	r3, #1
 8001f6a:	2008      	movs	r0, #8
 8001f6c:	f7ff fd08 	bl	8001980 <commandRespond1>
 8001f70:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
				  total_respond_length += respond_lenght;
 8001f74:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8001f78:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
 8001f82:	e276      	b.n	8002472 <StartDefaultTask+0x7ba>
			  }else if(SCARA_METHOD_PICK_AND_PLACE == duty_cmd.robot_method){
 8001f84:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001f88:	785b      	ldrb	r3, [r3, #1]
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	f040 8271 	bne.w	8002472 <StartDefaultTask+0x7ba>
				  current_method = SCARA_METHOD_PICK_AND_PLACE;
 8001f90:	2304      	movs	r3, #4
 8001f92:	f887 3d2f 	strb.w	r3, [r7, #3375]	; 0xd2f
				  current_duty_state = SCARA_DUTY_STATE_INIT;
 8001f96:	2301      	movs	r3, #1
 8001f98:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
				  detail_array[0] = PICK_AND_PLACE_METHOD;
 8001f9c:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8001fa0:	221c      	movs	r2, #28
 8001fa2:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8001fa4:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001fa8:	6899      	ldr	r1, [r3, #8]
 8001faa:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8001fae:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	2301      	movs	r3, #1
 8001fbc:	2008      	movs	r0, #8
 8001fbe:	f7ff fcdf 	bl	8001980 <commandRespond1>
 8001fc2:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
				  total_respond_length += respond_lenght;
 8001fc6:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8001fca:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8001fce:	4413      	add	r3, r2
 8001fd0:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
 8001fd4:	e24d      	b.n	8002472 <StartDefaultTask+0x7ba>
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 8001fd6:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001fda:	785b      	ldrb	r3, [r3, #1]
 8001fdc:	f897 2d2f 	ldrb.w	r2, [r7, #3375]	; 0xd2f
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	f040 821a 	bne.w	800241a <StartDefaultTask+0x762>
				  	  switch( duty_cmd.robot_method) {
 8001fe6:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001fea:	785b      	ldrb	r3, [r3, #1]
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	f200 820e 	bhi.w	800240e <StartDefaultTask+0x756>
 8001ff2:	a201      	add	r2, pc, #4	; (adr r2, 8001ff8 <StartDefaultTask+0x340>)
 8001ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff8:	08002051 	.word	0x08002051
 8001ffc:	080020a7 	.word	0x080020a7
 8002000:	08002455 	.word	0x08002455
 8002004:	0800225f 	.word	0x0800225f
 8002008:	08002375 	.word	0x08002375
 800200c:	f3af 8000 	nop.w
 8002010:	20000000 	.word	0x20000000
 8002014:	bff7b904 	.word	0xbff7b904
 8002018:	80000000 	.word	0x80000000
 800201c:	4002d893 	.word	0x4002d893
 8002020:	90c91080 	.word	0x90c91080
 8002024:	3fa1eb63 	.word	0x3fa1eb63
 8002028:	cec41dd2 	.word	0xcec41dd2
 800202c:	4007ba14 	.word	0x4007ba14
 8002030:	40020400 	.word	0x40020400
 8002034:	0801b288 	.word	0x0801b288
 8002038:	0801b1a4 	.word	0x0801b1a4
 800203c:	20005c68 	.word	0x20005c68
 8002040:	20005da8 	.word	0x20005da8
 8002044:	20005968 	.word	0x20005968
 8002048:	20005ae8 	.word	0x20005ae8
 800204c:	20004e6c 	.word	0x20004e6c
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 8002050:	f897 3d2b 	ldrb.w	r3, [r7, #3371]	; 0xd2b
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10d      	bne.n	8002074 <StartDefaultTask+0x3bc>
				  			  current_key = duty_cmd.keyboard;
 8002058:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800205c:	78db      	ldrb	r3, [r3, #3]
 800205e:	f887 3d2a 	strb.w	r3, [r7, #3370]	; 0xd2a
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 8002062:	2301      	movs	r3, #1
 8002064:	f887 3d2b 	strb.w	r3, [r7, #3371]	; 0xd2b
				  			  current_key_speed = duty_cmd.key_speed;
 8002068:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f8c7 3d24 	str.w	r3, [r7, #3364]	; 0xd24
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 8002072:	e1fd      	b.n	8002470 <StartDefaultTask+0x7b8>
				  		  } else if (current_key == duty_cmd.keyboard
 8002074:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002078:	78db      	ldrb	r3, [r3, #3]
 800207a:	f897 2d2a 	ldrb.w	r2, [r7, #3370]	; 0xd2a
 800207e:	429a      	cmp	r2, r3
 8002080:	f040 81f6 	bne.w	8002470 <StartDefaultTask+0x7b8>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 8002084:	f897 3d2b 	ldrb.w	r3, [r7, #3371]	; 0xd2b
 8002088:	2b02      	cmp	r3, #2
 800208a:	f040 81f1 	bne.w	8002470 <StartDefaultTask+0x7b8>
									  && current_key_speed == duty_cmd.key_speed) {
 800208e:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f8d7 2d24 	ldr.w	r2, [r7, #3364]	; 0xd24
 8002098:	429a      	cmp	r2, r3
 800209a:	f040 81e9 	bne.w	8002470 <StartDefaultTask+0x7b8>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 800209e:	2301      	movs	r3, #1
 80020a0:	f887 3d2b 	strb.w	r3, [r7, #3371]	; 0xd2b
				  	  break;
 80020a4:	e1e4      	b.n	8002470 <StartDefaultTask+0x7b8>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 80020a6:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80020aa:	789b      	ldrb	r3, [r3, #2]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d029      	beq.n	8002104 <StartDefaultTask+0x44c>
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d074      	beq.n	800219e <StartDefaultTask+0x4e6>
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f040 80cb 	bne.w	8002250 <StartDefaultTask+0x598>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f887 3d2e 	strb.w	r3, [r7, #3374]	; 0xd2e
								//   respond_lenght = commandRespond(RPD_OK,
								// 								  duty_cmd.id_command,
								// 								  "Stop Now",
								// 								  (char *)respond);
								detail_array[0] = STOP_NOW;
 80020c0:	f607 1314 	addw	r3, r7, #2324	; 0x914
 80020c4:	221e      	movs	r2, #30
 80020c6:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80020c8:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80020cc:	6899      	ldr	r1, [r3, #8]
 80020ce:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 80020d2:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 80020d6:	4413      	add	r3, r2
 80020d8:	f607 1214 	addw	r2, r7, #2324	; 0x914
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	2301      	movs	r3, #1
 80020e0:	2008      	movs	r0, #8
 80020e2:	f7ff fc4d 	bl	8001980 <commandRespond1>
 80020e6:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
								total_respond_length += respond_lenght;
 80020ea:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 80020ee:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 80020f2:	4413      	add	r3, r2
 80020f4:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 80020f8:	f240 116f 	movw	r1, #367	; 0x16f
 80020fc:	48d6      	ldr	r0, [pc, #856]	; (8002458 <StartDefaultTask+0x7a0>)
 80020fe:	f7ff fc8f 	bl	8001a20 <LOG_REPORT>
							  }
							  break;
 8002102:	e0ab      	b.n	800225c <StartDefaultTask+0x5a4>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode
 8002104:	f897 3d2e 	ldrb.w	r3, [r7, #3374]	; 0xd2e
 8002108:	2b02      	cmp	r3, #2
 800210a:	d126      	bne.n	800215a <StartDefaultTask+0x4a2>
									  && SCARA_DUTY_STATE_READY == current_duty_state) {
 800210c:	f897 3d2d 	ldrb.w	r3, [r7, #3373]	; 0xd2d
 8002110:	2b00      	cmp	r3, #0
 8002112:	d122      	bne.n	800215a <StartDefaultTask+0x4a2>
									  current_mode = SCARA_MODE_SCAN;
 8002114:	2301      	movs	r3, #1
 8002116:	f887 3d2e 	strb.w	r3, [r7, #3374]	; 0xd2e
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 800211a:	2300      	movs	r3, #0
 800211c:	f887 3d2c 	strb.w	r3, [r7, #3372]	; 0xd2c
									//   respond_lenght = commandRespond(RPD_OK,
									// 								  duty_cmd.id_command,
									// 								  "Start Scan",
									// 								  (char *)respond);
									detail_array[0] = START_SCAN;
 8002120:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8002124:	221f      	movs	r2, #31
 8002126:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002128:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800212c:	6899      	ldr	r1, [r3, #8]
 800212e:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8002132:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8002136:	4413      	add	r3, r2
 8002138:	f607 1214 	addw	r2, r7, #2324	; 0x914
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2301      	movs	r3, #1
 8002140:	2008      	movs	r0, #8
 8002142:	f7ff fc1d 	bl	8001980 <commandRespond1>
 8002146:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
									total_respond_length += respond_lenght;
 800214a:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 800214e:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002152:	4413      	add	r3, r2
 8002154:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
									total_respond_length += respond_lenght;
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 8002158:	e080      	b.n	800225c <StartDefaultTask+0x5a4>
									detail_array[0] = BUSY;
 800215a:	f607 1314 	addw	r3, r7, #2324	; 0x914
 800215e:	2220      	movs	r2, #32
 8002160:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002162:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002166:	6899      	ldr	r1, [r3, #8]
 8002168:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 800216c:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8002170:	4413      	add	r3, r2
 8002172:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	2301      	movs	r3, #1
 800217a:	2007      	movs	r0, #7
 800217c:	f7ff fc00 	bl	8001980 <commandRespond1>
 8002180:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
									total_respond_length += respond_lenght;
 8002184:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002188:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 800218c:	4413      	add	r3, r2
 800218e:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 8002192:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002196:	48b1      	ldr	r0, [pc, #708]	; (800245c <StartDefaultTask+0x7a4>)
 8002198:	f7ff fc42 	bl	8001a20 <LOG_REPORT>
							  break;
 800219c:	e05e      	b.n	800225c <StartDefaultTask+0x5a4>

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 800219e:	f897 3d2e 	ldrb.w	r3, [r7, #3374]	; 0xd2e
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d131      	bne.n	800220a <StartDefaultTask+0x552>
 80021a6:	f897 3d2d 	ldrb.w	r3, [r7, #3373]	; 0xd2d
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d12d      	bne.n	800220a <StartDefaultTask+0x552>
									  //scaraSetScanFlag();
//									  if(duty_cmd.modeInit_type == DUTY_MODE_INIT_LINEAR){
//										  current_method = SCARA_METHOD_AUTO;
//									  }
									  if (scaraIsScanLimit()) {
 80021ae:	f008 fa45 	bl	800a63c <scaraIsScanLimit>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d006      	beq.n	80021c6 <StartDefaultTask+0x50e>
										  current_mode	 = SCARA_MODE_DUTY;
 80021b8:	2302      	movs	r3, #2
 80021ba:	f887 3d2e 	strb.w	r3, [r7, #3374]	; 0xd2e
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 80021be:	2301      	movs	r3, #1
 80021c0:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
									  if (scaraIsScanLimit()) {
 80021c4:	e043      	b.n	800224e <StartDefaultTask+0x596>
									  } else {
										//   respond_lenght = commandRespond(RPD_ERROR,
										// 								  duty_cmd.id_command,
										// 								  "Has Not Scan Yet.",
										// 								  (char *)respond);
										detail_array[0] = NOT_SCAN;
 80021c6:	f607 1314 	addw	r3, r7, #2324	; 0x914
 80021ca:	2221      	movs	r2, #33	; 0x21
 80021cc:	701a      	strb	r2, [r3, #0]
										respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80021ce:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80021d2:	6899      	ldr	r1, [r3, #8]
 80021d4:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 80021d8:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 80021dc:	4413      	add	r3, r2
 80021de:	f607 1214 	addw	r2, r7, #2324	; 0x914
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	2301      	movs	r3, #1
 80021e6:	2007      	movs	r0, #7
 80021e8:	f7ff fbca 	bl	8001980 <commandRespond1>
 80021ec:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
										total_respond_length += respond_lenght;
 80021f0:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 80021f4:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 80021f8:	4413      	add	r3, r2
 80021fa:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 80021fe:	f240 119f 	movw	r1, #415	; 0x19f
 8002202:	4897      	ldr	r0, [pc, #604]	; (8002460 <StartDefaultTask+0x7a8>)
 8002204:	f7ff fc0c 	bl	8001a20 <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 8002208:	e021      	b.n	800224e <StartDefaultTask+0x596>
								  } else {
									//   respond_lenght	= commandRespond(RPD_ERROR,
									// 									  duty_cmd.id_command,
									// 									  "Busy.",
									// 									  (char *)respond);
									detail_array[0] = BUSY;
 800220a:	f607 1314 	addw	r3, r7, #2324	; 0x914
 800220e:	2220      	movs	r2, #32
 8002210:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002212:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002216:	6899      	ldr	r1, [r3, #8]
 8002218:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 800221c:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8002220:	4413      	add	r3, r2
 8002222:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	2301      	movs	r3, #1
 800222a:	2007      	movs	r0, #7
 800222c:	f7ff fba8 	bl	8001980 <commandRespond1>
 8002230:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
									total_respond_length += respond_lenght;
 8002234:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002238:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 800223c:	4413      	add	r3, r2
 800223e:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 8002242:	f240 11a9 	movw	r1, #425	; 0x1a9
 8002246:	4887      	ldr	r0, [pc, #540]	; (8002464 <StartDefaultTask+0x7ac>)
 8002248:	f7ff fbea 	bl	8001a20 <LOG_REPORT>
								  }
							  }
							  break;
 800224c:	e006      	b.n	800225c <StartDefaultTask+0x5a4>
 800224e:	e005      	b.n	800225c <StartDefaultTask+0x5a4>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 8002250:	f240 11af 	movw	r1, #431	; 0x1af
 8002254:	4884      	ldr	r0, [pc, #528]	; (8002468 <StartDefaultTask+0x7b0>)
 8002256:	f7ff fbe3 	bl	8001a20 <LOG_REPORT>
							  }
						  }
					  }
					  break;
 800225a:	e10a      	b.n	8002472 <StartDefaultTask+0x7ba>
 800225c:	e109      	b.n	8002472 <StartDefaultTask+0x7ba>
					  case SCARA_METHOD_TEST:
					  {
						  test_value[0] = 0;
 800225e:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]
						  test_value[1] = 0;
 8002266:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 800226a:	2200      	movs	r2, #0
 800226c:	705a      	strb	r2, [r3, #1]
						  test_value[2] = 0;
 800226e:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8002272:	2200      	movs	r2, #0
 8002274:	709a      	strb	r2, [r3, #2]
						  test_value[3] = 0;
 8002276:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 800227a:	2200      	movs	r2, #0
 800227c:	70da      	strb	r2, [r3, #3]
						  switch (duty_cmd.test_key)
 800227e:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002282:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002286:	2b07      	cmp	r3, #7
 8002288:	d872      	bhi.n	8002370 <StartDefaultTask+0x6b8>
 800228a:	a201      	add	r2, pc, #4	; (adr r2, 8002290 <StartDefaultTask+0x5d8>)
 800228c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002290:	080022b1 	.word	0x080022b1
 8002294:	080022c9 	.word	0x080022c9
 8002298:	080022e1 	.word	0x080022e1
 800229c:	080022f9 	.word	0x080022f9
 80022a0:	08002311 	.word	0x08002311
 80022a4:	08002329 	.word	0x08002329
 80022a8:	08002341 	.word	0x08002341
 80022ac:	08002359 	.word	0x08002359
						  {
						  case SCARA_TEST_MOTOR1_POS:
							 test_value[duty_cmd.test_key/2] = 5;
 80022b0:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80022b4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80022b8:	085b      	lsrs	r3, r3, #1
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	461a      	mov	r2, r3
 80022be:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 80022c2:	2105      	movs	r1, #5
 80022c4:	5499      	strb	r1, [r3, r2]
						  break;
 80022c6:	e054      	b.n	8002372 <StartDefaultTask+0x6ba>
						  case SCARA_TEST_MOTOR1_NEG:
							 test_value[duty_cmd.test_key/2] = -5;
 80022c8:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80022cc:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80022d0:	085b      	lsrs	r3, r3, #1
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 80022da:	21fb      	movs	r1, #251	; 0xfb
 80022dc:	5499      	strb	r1, [r3, r2]
						  break;
 80022de:	e048      	b.n	8002372 <StartDefaultTask+0x6ba>
						  case SCARA_TEST_MOTOR2_POS:
							 test_value[duty_cmd.test_key/2] = 5;
 80022e0:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80022e4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80022e8:	085b      	lsrs	r3, r3, #1
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 80022f2:	2105      	movs	r1, #5
 80022f4:	5499      	strb	r1, [r3, r2]
						  break;
 80022f6:	e03c      	b.n	8002372 <StartDefaultTask+0x6ba>
						  case SCARA_TEST_MOTOR2_NEG:
							 test_value[duty_cmd.test_key/2] = -5;
 80022f8:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80022fc:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002300:	085b      	lsrs	r3, r3, #1
 8002302:	b2db      	uxtb	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 800230a:	21fb      	movs	r1, #251	; 0xfb
 800230c:	5499      	strb	r1, [r3, r2]
						  break;
 800230e:	e030      	b.n	8002372 <StartDefaultTask+0x6ba>
						  case SCARA_TEST_MOTOR3_POS:
							 test_value[duty_cmd.test_key/2] = 5;
 8002310:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002314:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002318:	085b      	lsrs	r3, r3, #1
 800231a:	b2db      	uxtb	r3, r3
 800231c:	461a      	mov	r2, r3
 800231e:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8002322:	2105      	movs	r1, #5
 8002324:	5499      	strb	r1, [r3, r2]
						  break;
 8002326:	e024      	b.n	8002372 <StartDefaultTask+0x6ba>
						  case SCARA_TEST_MOTOR3_NEG:
							 test_value[duty_cmd.test_key/2] = -5;
 8002328:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800232c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002330:	085b      	lsrs	r3, r3, #1
 8002332:	b2db      	uxtb	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 800233a:	21fb      	movs	r1, #251	; 0xfb
 800233c:	5499      	strb	r1, [r3, r2]
						  break;
 800233e:	e018      	b.n	8002372 <StartDefaultTask+0x6ba>
						  case SCARA_TEST_MOTOR4_POS:
							 test_value[duty_cmd.test_key/2] = 10;
 8002340:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002344:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002348:	085b      	lsrs	r3, r3, #1
 800234a:	b2db      	uxtb	r3, r3
 800234c:	461a      	mov	r2, r3
 800234e:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8002352:	210a      	movs	r1, #10
 8002354:	5499      	strb	r1, [r3, r2]
						  break;
 8002356:	e00c      	b.n	8002372 <StartDefaultTask+0x6ba>
						  case SCARA_TEST_MOTOR4_NEG:
							 test_value[duty_cmd.test_key/2] = -10;
 8002358:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800235c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002360:	085b      	lsrs	r3, r3, #1
 8002362:	b2db      	uxtb	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 800236a:	21f6      	movs	r1, #246	; 0xf6
 800236c:	5499      	strb	r1, [r3, r2]
						  break;						  
 800236e:	e000      	b.n	8002372 <StartDefaultTask+0x6ba>
						  default:
							  break;
 8002370:	bf00      	nop
						  }
					  }
					  break;
 8002372:	e07e      	b.n	8002472 <StartDefaultTask+0x7ba>
				  	  {

				  	  }
				  	  break;
				  	  case SCARA_METHOD_PICK_AND_PLACE:{
				  		  memcpy(&Object[object_head_pointer].object_position, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 8002374:	f897 3d15 	ldrb.w	r3, [r7, #3349]	; 0xd15
 8002378:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800237c:	21c8      	movs	r1, #200	; 0xc8
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	18d0      	adds	r0, r2, r3
 8002384:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002388:	3328      	adds	r3, #40	; 0x28
 800238a:	22c0      	movs	r2, #192	; 0xc0
 800238c:	4619      	mov	r1, r3
 800238e:	f013 fc65 	bl	8015c5c <memcpy>
				  		  Object[object_head_pointer].timer_value = (uint16_t)duty_cmd.target_point.t;
 8002392:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002396:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 800239a:	f897 5d15 	ldrb.w	r5, [r7, #3349]	; 0xd15
 800239e:	4618      	mov	r0, r3
 80023a0:	4621      	mov	r1, r4
 80023a2:	f7fe fc01 	bl	8000ba8 <__aeabi_d2uiz>
 80023a6:	4603      	mov	r3, r0
 80023a8:	b299      	uxth	r1, r3
 80023aa:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80023ae:	23c8      	movs	r3, #200	; 0xc8
 80023b0:	fb03 f305 	mul.w	r3, r3, r5
 80023b4:	4413      	add	r3, r2
 80023b6:	33c0      	adds	r3, #192	; 0xc0
 80023b8:	460a      	mov	r2, r1
 80023ba:	801a      	strh	r2, [r3, #0]
				  		  object_head_pointer = (object_head_pointer+1)%8;
 80023bc:	f897 3d15 	ldrb.w	r3, [r7, #3349]	; 0xd15
 80023c0:	3301      	adds	r3, #1
 80023c2:	425a      	negs	r2, r3
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	f002 0207 	and.w	r2, r2, #7
 80023cc:	bf58      	it	pl
 80023ce:	4253      	negpl	r3, r2
 80023d0:	f887 3d15 	strb.w	r3, [r7, #3349]	; 0xd15
				  		  detail_array[0] = OBJECT_DETECTED;
 80023d4:	f607 1314 	addw	r3, r7, #2324	; 0x914
 80023d8:	221d      	movs	r2, #29
 80023da:	701a      	strb	r2, [r3, #0]
						  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80023dc:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80023e0:	6899      	ldr	r1, [r3, #8]
 80023e2:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 80023e6:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 80023ea:	4413      	add	r3, r2
 80023ec:	f607 1214 	addw	r2, r7, #2324	; 0x914
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	2301      	movs	r3, #1
 80023f4:	2008      	movs	r0, #8
 80023f6:	f7ff fac3 	bl	8001980 <commandRespond1>
 80023fa:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
						  total_respond_length += respond_lenght;
 80023fe:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002402:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002406:	4413      	add	r3, r2
 8002408:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
				  	  }
				  	  break;
 800240c:	e031      	b.n	8002472 <StartDefaultTask+0x7ba>
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 800240e:	f240 11e9 	movw	r1, #489	; 0x1e9
 8002412:	4816      	ldr	r0, [pc, #88]	; (800246c <StartDefaultTask+0x7b4>)
 8002414:	f7ff fb04 	bl	8001a20 <LOG_REPORT>
 8002418:	e02b      	b.n	8002472 <StartDefaultTask+0x7ba>
			  	  } else {
					//   respond_lenght = commandRespond(RPD_ERROR,
					// 								duty_cmd.id_command,
					// 								"METHOD isn't correct",
					// 								(char *)respond);
					detail_array[0] = INCORRECT_METHOD;
 800241a:	f607 1314 	addw	r3, r7, #2324	; 0x914
 800241e:	2222      	movs	r2, #34	; 0x22
 8002420:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002422:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002426:	6899      	ldr	r1, [r3, #8]
 8002428:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 800242c:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8002430:	4413      	add	r3, r2
 8002432:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	2301      	movs	r3, #1
 800243a:	2007      	movs	r0, #7
 800243c:	f7ff faa0 	bl	8001980 <commandRespond1>
 8002440:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
					total_respond_length += respond_lenght;
 8002444:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002448:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 800244c:	4413      	add	r3, r2
 800244e:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
 8002452:	e00e      	b.n	8002472 <StartDefaultTask+0x7ba>
				  	  break;
 8002454:	bf00      	nop
 8002456:	e00c      	b.n	8002472 <StartDefaultTask+0x7ba>
 8002458:	0801b1c4 	.word	0x0801b1c4
 800245c:	0801b1d4 	.word	0x0801b1d4
 8002460:	0801b1e4 	.word	0x0801b1e4
 8002464:	0801b1f8 	.word	0x0801b1f8
 8002468:	0801b208 	.word	0x0801b208
 800246c:	0801b21c 	.word	0x0801b21c
				  	  break;
 8002470:	bf00      	nop
			  	  }

			  }
		  isNewDuty = FALSE;
 8002472:	2300      	movs	r3, #0
 8002474:	f887 3d37 	strb.w	r3, [r7, #3383]	; 0xd37
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 8002478:	f897 3d2f 	ldrb.w	r3, [r7, #3375]	; 0xd2f
 800247c:	2b04      	cmp	r3, #4
 800247e:	f200 8725 	bhi.w	80032cc <StartDefaultTask+0x1614>
 8002482:	a201      	add	r2, pc, #4	; (adr r2, 8002488 <StartDefaultTask+0x7d0>)
 8002484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002488:	0800249d 	.word	0x0800249d
 800248c:	0800264b 	.word	0x0800264b
 8002490:	08002a35 	.word	0x08002a35
 8002494:	08002ce7 	.word	0x08002ce7
 8002498:	08002d0d 	.word	0x08002d0d
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 800249c:	f897 3d2b 	ldrb.w	r3, [r7, #3371]	; 0xd2b
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	f200 8710 	bhi.w	80032c6 <StartDefaultTask+0x160e>
 80024a6:	a201      	add	r2, pc, #4	; (adr r2, 80024ac <StartDefaultTask+0x7f4>)
 80024a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ac:	08002645 	.word	0x08002645
 80024b0:	080024bd 	.word	0x080024bd
 80024b4:	0800252b 	.word	0x0800252b
 80024b8:	08002607 	.word	0x08002607
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit1(current_key, current_key_speed1) == SCARA_STATUS_OK) {
 80024bc:	4bd6      	ldr	r3, [pc, #856]	; (8002818 <StartDefaultTask+0xb60>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	f897 3d2a 	ldrb.w	r3, [r7, #3370]	; 0xd2a
 80024c4:	4611      	mov	r1, r2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f008 f9d2 	bl	800a870 <scaraKeyInit1>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d127      	bne.n	8002522 <StartDefaultTask+0x86a>
				  run_time = 0;
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	f04f 0400 	mov.w	r4, #0
 80024da:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 80024de:	e9c2 3400 	strd	r3, r4, [r2]
				  current_key_state = SCARA_KEY_STATE_FLOW;
 80024e2:	2302      	movs	r3, #2
 80024e4:	f887 3d2b 	strb.w	r3, [r7, #3371]	; 0xd2b
// #endif
// 				  infor_lenght 		= commandRespond(RPD_START,
// 													  0,
// 													  (char *)position,
// 													  (char *)infor);
					detail_array[0] = NONE;
 80024e8:	f607 1314 	addw	r3, r7, #2324	; 0x914
 80024ec:	2223      	movs	r2, #35	; 0x23
 80024ee:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80024f0:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80024f4:	6899      	ldr	r1, [r3, #8]
 80024f6:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 80024fa:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 80024fe:	4413      	add	r3, r2
 8002500:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	2301      	movs	r3, #1
 8002508:	2003      	movs	r0, #3
 800250a:	f7ff fa39 	bl	8001980 <commandRespond1>
 800250e:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
					total_respond_length += respond_lenght;
 8002512:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002516:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 800251a:	4413      	add	r3, r2
 800251c:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 8002520:	e091      	b.n	8002646 <StartDefaultTask+0x98e>
				  current_key_state = SCARA_KEY_STATE_READY;
 8002522:	2300      	movs	r3, #0
 8002524:	f887 3d2b 	strb.w	r3, [r7, #3371]	; 0xd2b
		  break;
 8002528:	e08d      	b.n	8002646 <StartDefaultTask+0x98e>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 800252a:	a3b9      	add	r3, pc, #740	; (adr r3, 8002810 <StartDefaultTask+0xb58>)
 800252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002530:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 8002534:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002538:	f7fd fea8 	bl	800028c <__adddf3>
 800253c:	4603      	mov	r3, r0
 800253e:	460c      	mov	r4, r1
 8002540:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8002544:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8002548:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 800254c:	ed93 0b00 	vldr	d0, [r3]
 8002550:	f008 f880 	bl	800a654 <scaraIsFinish>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <StartDefaultTask+0x8aa>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 800255a:	2303      	movs	r3, #3
 800255c:	f887 3d2b 	strb.w	r3, [r7, #3371]	; 0xd2b
					total_respond_length += respond_lenght;
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 8002560:	e071      	b.n	8002646 <StartDefaultTask+0x98e>
				  status = scaraFlowDuty(run_time, &positionNext, positionCurrent);
 8002562:	4cae      	ldr	r4, [pc, #696]	; (800281c <StartDefaultTask+0xb64>)
 8002564:	4668      	mov	r0, sp
 8002566:	f104 0308 	add.w	r3, r4, #8
 800256a:	22b8      	movs	r2, #184	; 0xb8
 800256c:	4619      	mov	r1, r3
 800256e:	f013 fb75 	bl	8015c5c <memcpy>
 8002572:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002576:	48aa      	ldr	r0, [pc, #680]	; (8002820 <StartDefaultTask+0xb68>)
 8002578:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 800257c:	ed91 0b00 	vldr	d0, [r1]
 8002580:	f005 fee8 	bl	8008354 <scaraFlowDuty>
 8002584:	4603      	mov	r3, r0
 8002586:	f887 3cd0 	strb.w	r3, [r7, #3280]	; 0xcd0
				  if ( SCARA_STATUS_OK == status) {
 800258a:	f897 3cd0 	ldrb.w	r3, [r7, #3280]	; 0xcd0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d113      	bne.n	80025ba <StartDefaultTask+0x902>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8002592:	4ca2      	ldr	r4, [pc, #648]	; (800281c <StartDefaultTask+0xb64>)
 8002594:	4aa2      	ldr	r2, [pc, #648]	; (8002820 <StartDefaultTask+0xb68>)
 8002596:	ab2c      	add	r3, sp, #176	; 0xb0
 8002598:	4611      	mov	r1, r2
 800259a:	22c0      	movs	r2, #192	; 0xc0
 800259c:	4618      	mov	r0, r3
 800259e:	f013 fb5d 	bl	8015c5c <memcpy>
 80025a2:	4668      	mov	r0, sp
 80025a4:	f104 0310 	add.w	r3, r4, #16
 80025a8:	22b0      	movs	r2, #176	; 0xb0
 80025aa:	4619      	mov	r1, r3
 80025ac:	f013 fb56 	bl	8015c5c <memcpy>
 80025b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025b4:	f002 f9c8 	bl	8004948 <lowlayer_computeAndWritePulse>
		  break;
 80025b8:	e045      	b.n	8002646 <StartDefaultTask+0x98e>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 80025ba:	2303      	movs	r3, #3
 80025bc:	f887 3d2b 	strb.w	r3, [r7, #3371]	; 0xd2b
					detail_array[0] = status;
 80025c0:	f607 1314 	addw	r3, r7, #2324	; 0x914
 80025c4:	f897 2cd0 	ldrb.w	r2, [r7, #3280]	; 0xcd0
 80025c8:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80025ca:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80025ce:	6899      	ldr	r1, [r3, #8]
 80025d0:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 80025d4:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 80025d8:	4413      	add	r3, r2
 80025da:	f607 1214 	addw	r2, r7, #2324	; 0x914
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	2301      	movs	r3, #1
 80025e2:	2006      	movs	r0, #6
 80025e4:	f7ff f9cc 	bl	8001980 <commandRespond1>
 80025e8:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
					total_respond_length += respond_lenght;
 80025ec:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 80025f0:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 80025f4:	4413      	add	r3, r2
 80025f6:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
					  LOG_REPORT("STOP KEY", __LINE__);
 80025fa:	f240 213e 	movw	r1, #574	; 0x23e
 80025fe:	4889      	ldr	r0, [pc, #548]	; (8002824 <StartDefaultTask+0xb6c>)
 8002600:	f7ff fa0e 	bl	8001a20 <LOG_REPORT>
		  break;
 8002604:	e01f      	b.n	8002646 <StartDefaultTask+0x98e>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  lowlayer_readTruePosition(&positionNext);
 8002606:	4886      	ldr	r0, [pc, #536]	; (8002820 <StartDefaultTask+0xb68>)
 8002608:	f002 f80e 	bl	8004628 <lowlayer_readTruePosition>
			  kinematicForward(&positionNext);
 800260c:	4884      	ldr	r0, [pc, #528]	; (8002820 <StartDefaultTask+0xb68>)
 800260e:	f001 f917 	bl	8003840 <kinematicForward>
			  current_key_state = SCARA_KEY_STATE_READY;
 8002612:	2300      	movs	r3, #0
 8002614:	f887 3d2b 	strb.w	r3, [r7, #3371]	; 0xd2b
			  positionNext.t = 0;
 8002618:	4a81      	ldr	r2, [pc, #516]	; (8002820 <StartDefaultTask+0xb68>)
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	f04f 0400 	mov.w	r4, #0
 8002622:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
			  positionNext.total_time = 0;
 8002626:	4a7e      	ldr	r2, [pc, #504]	; (8002820 <StartDefaultTask+0xb68>)
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	f04f 0400 	mov.w	r4, #0
 8002630:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
			  positionNext.q = 0;
 8002634:	4a7a      	ldr	r2, [pc, #488]	; (8002820 <StartDefaultTask+0xb68>)
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	f04f 0400 	mov.w	r4, #0
 800263e:	e9c2 3400 	strd	r3, r4, [r2]
		  }
		  break;
 8002642:	e000      	b.n	8002646 <StartDefaultTask+0x98e>
		  break;
 8002644:	bf00      	nop
		  }
	  }
	  break;
 8002646:	f000 be3e 	b.w	80032c6 <StartDefaultTask+0x160e>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 800264a:	f897 3d2e 	ldrb.w	r3, [r7, #3374]	; 0xd2e
 800264e:	2b01      	cmp	r3, #1
 8002650:	d00b      	beq.n	800266a <StartDefaultTask+0x9b2>
 8002652:	2b02      	cmp	r3, #2
 8002654:	d066      	beq.n	8002724 <StartDefaultTask+0xa6c>
 8002656:	2b00      	cmp	r3, #0
 8002658:	f040 81e4 	bne.w	8002a24 <StartDefaultTask+0xd6c>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 800265c:	2302      	movs	r3, #2
 800265e:	f887 3d2e 	strb.w	r3, [r7, #3374]	; 0xd2e
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002662:	2300      	movs	r3, #0
 8002664:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
			  }
			  break;
 8002668:	e1e2      	b.n	8002a30 <StartDefaultTask+0xd78>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 800266a:	f897 3d2c 	ldrb.w	r3, [r7, #3372]	; 0xd2c
 800266e:	2b03      	cmp	r3, #3
 8002670:	d84e      	bhi.n	8002710 <StartDefaultTask+0xa58>
 8002672:	a201      	add	r2, pc, #4	; (adr r2, 8002678 <StartDefaultTask+0x9c0>)
 8002674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002678:	08002689 	.word	0x08002689
 800267c:	08002695 	.word	0x08002695
 8002680:	080026a7 	.word	0x080026a7
 8002684:	080026bb 	.word	0x080026bb
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 8002688:	f001 fdc4 	bl	8004214 <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 800268c:	2301      	movs	r3, #1
 800268e:	f887 3d2c 	strb.w	r3, [r7, #3372]	; 0xd2c
					  }
					  break;
 8002692:	e046      	b.n	8002722 <StartDefaultTask+0xa6a>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 8002694:	f001 fdf0 	bl	8004278 <lowlayer_scanFlow>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d03e      	beq.n	800271c <StartDefaultTask+0xa64>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 800269e:	2302      	movs	r3, #2
 80026a0:	f887 3d2c 	strb.w	r3, [r7, #3372]	; 0xd2c
						  }
					  }
					  break;
 80026a4:	e03a      	b.n	800271c <StartDefaultTask+0xa64>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 80026a6:	485e      	ldr	r0, [pc, #376]	; (8002820 <StartDefaultTask+0xb68>)
 80026a8:	f001 ff42 	bl	8004530 <lowlayer_goToSoftLimit>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d036      	beq.n	8002720 <StartDefaultTask+0xa68>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 80026b2:	2303      	movs	r3, #3
 80026b4:	f887 3d2c 	strb.w	r3, [r7, #3372]	; 0xd2c
							}
					  }
					  break;
 80026b8:	e032      	b.n	8002720 <StartDefaultTask+0xa68>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  //lowlayer_readSetPosition(&positionNext);
						  lowlayer_readTruePosition(&positionNext);
 80026ba:	4859      	ldr	r0, [pc, #356]	; (8002820 <StartDefaultTask+0xb68>)
 80026bc:	f001 ffb4 	bl	8004628 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 80026c0:	4857      	ldr	r0, [pc, #348]	; (8002820 <StartDefaultTask+0xb68>)
 80026c2:	f001 f8bd 	bl	8003840 <kinematicForward>
						  current_mode 	= SCARA_MODE_DUTY;
 80026c6:	2302      	movs	r3, #2
 80026c8:	f887 3d2e 	strb.w	r3, [r7, #3374]	; 0xd2e
						  current_duty_state = SCARA_DUTY_STATE_READY;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
						  scaraSetScanFlag();
 80026d2:	f007 ff21 	bl	800a518 <scaraSetScanFlag>
						//   scaraPosition2String((char *)position, positionNext);
						//   infor_lenght 		= commandRespond(RPD_DONE,
						// 									 0,
						// 									(char *)position,
						// 									(char *)infor);
						detail_array[0] = NONE;
 80026d6:	f607 1314 	addw	r3, r7, #2324	; 0x914
 80026da:	2223      	movs	r2, #35	; 0x23
 80026dc:	701a      	strb	r2, [r3, #0]
						respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80026de:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80026e2:	6899      	ldr	r1, [r3, #8]
 80026e4:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 80026e8:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 80026ec:	4413      	add	r3, r2
 80026ee:	f607 1214 	addw	r2, r7, #2324	; 0x914
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	2301      	movs	r3, #1
 80026f6:	2005      	movs	r0, #5
 80026f8:	f7ff f942 	bl	8001980 <commandRespond1>
 80026fc:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
						total_respond_length += respond_lenght;
 8002700:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002704:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002708:	4413      	add	r3, r2
 800270a:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
					  }
					  break;
 800270e:	e008      	b.n	8002722 <StartDefaultTask+0xa6a>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002710:	f240 2187 	movw	r1, #647	; 0x287
 8002714:	4844      	ldr	r0, [pc, #272]	; (8002828 <StartDefaultTask+0xb70>)
 8002716:	f7ff f983 	bl	8001a20 <LOG_REPORT>
						  while(1);
 800271a:	e7fe      	b.n	800271a <StartDefaultTask+0xa62>
					  break;
 800271c:	bf00      	nop
 800271e:	e187      	b.n	8002a30 <StartDefaultTask+0xd78>
					  break;
 8002720:	bf00      	nop
					  }
				  }

			  }
			  break;
 8002722:	e185      	b.n	8002a30 <StartDefaultTask+0xd78>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 8002724:	f897 3d2d 	ldrb.w	r3, [r7, #3373]	; 0xd2d
 8002728:	2b03      	cmp	r3, #3
 800272a:	f200 8174 	bhi.w	8002a16 <StartDefaultTask+0xd5e>
 800272e:	a201      	add	r2, pc, #4	; (adr r2, 8002734 <StartDefaultTask+0xa7c>)
 8002730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002734:	08002745 	.word	0x08002745
 8002738:	08002749 	.word	0x08002749
 800273c:	080028c5 	.word	0x080028c5
 8002740:	080029a1 	.word	0x080029a1
				  case SCARA_DUTY_STATE_READY:
					  {
						  // Do nothing();
						  __NOP();
 8002744:	bf00      	nop

					  }
				  break;
 8002746:	e16c      	b.n	8002a22 <StartDefaultTask+0xd6a>

				  case SCARA_DUTY_STATE_INIT:
					  {

						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 8002748:	f507 6430 	add.w	r4, r7, #2816	; 0xb00
 800274c:	4668      	mov	r0, sp
 800274e:	f104 0310 	add.w	r3, r4, #16
 8002752:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8002756:	4619      	mov	r1, r3
 8002758:	f013 fa80 	bl	8015c5c <memcpy>
 800275c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002760:	f002 fdba 	bl	80052d8 <scaraInitDuty>
 8002764:	4603      	mov	r3, r0
 8002766:	f887 3cd2 	strb.w	r3, [r7, #3282]	; 0xcd2
						  if ( SCARA_STATUS_OK == status1) {
 800276a:	f897 3cd2 	ldrb.w	r3, [r7, #3282]	; 0xcd2
 800276e:	2b00      	cmp	r3, #0
 8002770:	f040 8082 	bne.w	8002878 <StartDefaultTask+0xbc0>
							  status2 = scaraTestDuty();
 8002774:	f007 fe54 	bl	800a420 <scaraTestDuty>
 8002778:	4603      	mov	r3, r0
 800277a:	f887 3cd1 	strb.w	r3, [r7, #3281]	; 0xcd1
							  if (SCARA_STATUS_OK == status2) {
 800277e:	f897 3cd1 	ldrb.w	r3, [r7, #3281]	; 0xcd1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d152      	bne.n	800282c <StartDefaultTask+0xb74>
							  current_duty_state = SCARA_DUTY_STATE_FLOW;
 8002786:	2302      	movs	r3, #2
 8002788:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
							  //current_duty_state = SCARA_DUTY_STATE_FINISH;
							  run_time			= 0;
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	f04f 0400 	mov.w	r4, #0
 8002794:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8002798:	e9c2 3400 	strd	r3, r4, [r2]
							  // Respond
							  detail_array[0] = status1;
 800279c:	f607 1314 	addw	r3, r7, #2324	; 0x914
 80027a0:	f897 2cd2 	ldrb.w	r2, [r7, #3282]	; 0xcd2
 80027a4:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80027a6:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80027aa:	6899      	ldr	r1, [r3, #8]
 80027ac:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 80027b0:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 80027b4:	4413      	add	r3, r2
 80027b6:	f607 1214 	addw	r2, r7, #2324	; 0x914
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	2301      	movs	r3, #1
 80027be:	2008      	movs	r0, #8
 80027c0:	f7ff f8de 	bl	8001980 <commandRespond1>
 80027c4:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
							  total_respond_length += respond_lenght;
 80027c8:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 80027cc:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 80027d0:	4413      	add	r3, r2
 80027d2:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
							  detail_array[0] = NONE;
 80027d6:	f607 1314 	addw	r3, r7, #2324	; 0x914
 80027da:	2223      	movs	r2, #35	; 0x23
 80027dc:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80027de:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80027e2:	6899      	ldr	r1, [r3, #8]
 80027e4:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 80027e8:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 80027ec:	4413      	add	r3, r2
 80027ee:	f607 1214 	addw	r2, r7, #2324	; 0x914
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	2301      	movs	r3, #1
 80027f6:	2003      	movs	r0, #3
 80027f8:	f7ff f8c2 	bl	8001980 <commandRespond1>
 80027fc:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
							  total_respond_length += respond_lenght;
 8002800:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002804:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002808:	4413      	add	r3, r2
 800280a:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
							total_respond_length += respond_lenght;
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 800280e:	e108      	b.n	8002a22 <StartDefaultTask+0xd6a>
 8002810:	40000000 	.word	0x40000000
 8002814:	3f847ae1 	.word	0x3f847ae1
 8002818:	20000000 	.word	0x20000000
 800281c:	20005ae8 	.word	0x20005ae8
 8002820:	20005c68 	.word	0x20005c68
 8002824:	0801b234 	.word	0x0801b234
 8002828:	0801b240 	.word	0x0801b240
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 800282c:	2300      	movs	r3, #0
 800282e:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
								  LOG_REPORT("TEST FAIL", __LINE__);
 8002832:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8002836:	48d0      	ldr	r0, [pc, #832]	; (8002b78 <StartDefaultTask+0xec0>)
 8002838:	f7ff f8f2 	bl	8001a20 <LOG_REPORT>
								detail_array[0] = status2;
 800283c:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8002840:	f897 2cd1 	ldrb.w	r2, [r7, #3281]	; 0xcd1
 8002844:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002846:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800284a:	6899      	ldr	r1, [r3, #8]
 800284c:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8002850:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8002854:	4413      	add	r3, r2
 8002856:	f607 1214 	addw	r2, r7, #2324	; 0x914
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	2301      	movs	r3, #1
 800285e:	2007      	movs	r0, #7
 8002860:	f7ff f88e 	bl	8001980 <commandRespond1>
 8002864:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
								total_respond_length += respond_lenght;
 8002868:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 800286c:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002870:	4413      	add	r3, r2
 8002872:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
				  break;
 8002876:	e0d4      	b.n	8002a22 <StartDefaultTask+0xd6a>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002878:	2300      	movs	r3, #0
 800287a:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
							detail_array[0] = status1;
 800287e:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8002882:	f897 2cd2 	ldrb.w	r2, [r7, #3282]	; 0xcd2
 8002886:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002888:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800288c:	6899      	ldr	r1, [r3, #8]
 800288e:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8002892:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8002896:	4413      	add	r3, r2
 8002898:	f607 1214 	addw	r2, r7, #2324	; 0x914
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	2301      	movs	r3, #1
 80028a0:	2007      	movs	r0, #7
 80028a2:	f7ff f86d 	bl	8001980 <commandRespond1>
 80028a6:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
							total_respond_length += respond_lenght;
 80028aa:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 80028ae:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 80028b2:	4413      	add	r3, r2
 80028b4:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
							  LOG_REPORT("INIT FAIL", __LINE__);
 80028b8:	f240 21ce 	movw	r1, #718	; 0x2ce
 80028bc:	48af      	ldr	r0, [pc, #700]	; (8002b7c <StartDefaultTask+0xec4>)
 80028be:	f7ff f8af 	bl	8001a20 <LOG_REPORT>
				  break;
 80028c2:	e0ae      	b.n	8002a22 <StartDefaultTask+0xd6a>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 80028c4:	a3aa      	add	r3, pc, #680	; (adr r3, 8002b70 <StartDefaultTask+0xeb8>)
 80028c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ca:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 80028ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028d2:	f7fd fcdb 	bl	800028c <__adddf3>
 80028d6:	4603      	mov	r3, r0
 80028d8:	460c      	mov	r4, r1
 80028da:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 80028de:	e9c2 3400 	strd	r3, r4, [r2]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 80028e2:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80028e6:	ed93 0b00 	vldr	d0, [r3]
 80028ea:	f007 feb3 	bl	800a654 <scaraIsFinish>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <StartDefaultTask+0xc44>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 80028f4:	2303      	movs	r3, #3
 80028f6:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
								total_respond_length += respond_lenght;
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 80028fa:	e092      	b.n	8002a22 <StartDefaultTask+0xd6a>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 80028fc:	4ca0      	ldr	r4, [pc, #640]	; (8002b80 <StartDefaultTask+0xec8>)
 80028fe:	4668      	mov	r0, sp
 8002900:	f104 0308 	add.w	r3, r4, #8
 8002904:	22b8      	movs	r2, #184	; 0xb8
 8002906:	4619      	mov	r1, r3
 8002908:	f013 f9a8 	bl	8015c5c <memcpy>
 800290c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002910:	489c      	ldr	r0, [pc, #624]	; (8002b84 <StartDefaultTask+0xecc>)
 8002912:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 8002916:	ed91 0b00 	vldr	d0, [r1]
 800291a:	f005 fd1b 	bl	8008354 <scaraFlowDuty>
 800291e:	4603      	mov	r3, r0
 8002920:	f887 3cd3 	strb.w	r3, [r7, #3283]	; 0xcd3
							  if ( SCARA_STATUS_OK == status) {
 8002924:	f897 3cd3 	ldrb.w	r3, [r7, #3283]	; 0xcd3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d113      	bne.n	8002954 <StartDefaultTask+0xc9c>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 800292c:	4c94      	ldr	r4, [pc, #592]	; (8002b80 <StartDefaultTask+0xec8>)
 800292e:	4a95      	ldr	r2, [pc, #596]	; (8002b84 <StartDefaultTask+0xecc>)
 8002930:	ab2c      	add	r3, sp, #176	; 0xb0
 8002932:	4611      	mov	r1, r2
 8002934:	22c0      	movs	r2, #192	; 0xc0
 8002936:	4618      	mov	r0, r3
 8002938:	f013 f990 	bl	8015c5c <memcpy>
 800293c:	4668      	mov	r0, sp
 800293e:	f104 0310 	add.w	r3, r4, #16
 8002942:	22b0      	movs	r2, #176	; 0xb0
 8002944:	4619      	mov	r1, r3
 8002946:	f013 f989 	bl	8015c5c <memcpy>
 800294a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800294e:	f001 fffb 	bl	8004948 <lowlayer_computeAndWritePulse>
				  break;
 8002952:	e066      	b.n	8002a22 <StartDefaultTask+0xd6a>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8002954:	2303      	movs	r3, #3
 8002956:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
								detail_array[0] = status;
 800295a:	f607 1314 	addw	r3, r7, #2324	; 0x914
 800295e:	f897 2cd3 	ldrb.w	r2, [r7, #3283]	; 0xcd3
 8002962:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002964:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002968:	6899      	ldr	r1, [r3, #8]
 800296a:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 800296e:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8002972:	4413      	add	r3, r2
 8002974:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	2301      	movs	r3, #1
 800297c:	2006      	movs	r0, #6
 800297e:	f7fe ffff 	bl	8001980 <commandRespond1>
 8002982:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
								total_respond_length += respond_lenght;
 8002986:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 800298a:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 800298e:	4413      	add	r3, r2
 8002990:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
								  LOG_REPORT("STOP DUTY", __LINE__);
 8002994:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 8002998:	487b      	ldr	r0, [pc, #492]	; (8002b88 <StartDefaultTask+0xed0>)
 800299a:	f7ff f841 	bl	8001a20 <LOG_REPORT>
				  break;
 800299e:	e040      	b.n	8002a22 <StartDefaultTask+0xd6a>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  lowlayer_readTruePosition(&positionNext);
 80029a0:	4878      	ldr	r0, [pc, #480]	; (8002b84 <StartDefaultTask+0xecc>)
 80029a2:	f001 fe41 	bl	8004628 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 80029a6:	4877      	ldr	r0, [pc, #476]	; (8002b84 <StartDefaultTask+0xecc>)
 80029a8:	f000 ff4a 	bl	8003840 <kinematicForward>
						  current_duty_state = SCARA_DUTY_STATE_READY;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
						  positionNext.t = 0;
 80029b2:	4a74      	ldr	r2, [pc, #464]	; (8002b84 <StartDefaultTask+0xecc>)
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	f04f 0400 	mov.w	r4, #0
 80029bc:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
						  positionNext.total_time = 0;
 80029c0:	4a70      	ldr	r2, [pc, #448]	; (8002b84 <StartDefaultTask+0xecc>)
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	f04f 0400 	mov.w	r4, #0
 80029ca:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
						  positionNext.q = 0;
 80029ce:	4a6d      	ldr	r2, [pc, #436]	; (8002b84 <StartDefaultTask+0xecc>)
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	f04f 0400 	mov.w	r4, #0
 80029d8:	e9c2 3400 	strd	r3, r4, [r2]
// #endif
// 						  infor_lenght 		= commandRespond(RPD_DONE,
// 															 0,
// 															 (char *)position,
// 															 (char *)infor);
					detail_array[0] = NONE;
 80029dc:	f607 1314 	addw	r3, r7, #2324	; 0x914
 80029e0:	2223      	movs	r2, #35	; 0x23
 80029e2:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80029e4:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80029e8:	6899      	ldr	r1, [r3, #8]
 80029ea:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 80029ee:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 80029f2:	4413      	add	r3, r2
 80029f4:	f607 1214 	addw	r2, r7, #2324	; 0x914
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	2301      	movs	r3, #1
 80029fc:	2005      	movs	r0, #5
 80029fe:	f7fe ffbf 	bl	8001980 <commandRespond1>
 8002a02:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
					total_respond_length += respond_lenght;
 8002a06:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002a0a:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002a0e:	4413      	add	r3, r2
 8002a10:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
					  }
				  break;
 8002a14:	e005      	b.n	8002a22 <StartDefaultTask+0xd6a>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002a16:	f44f 7145 	mov.w	r1, #788	; 0x314
 8002a1a:	485c      	ldr	r0, [pc, #368]	; (8002b8c <StartDefaultTask+0xed4>)
 8002a1c:	f7ff f800 	bl	8001a20 <LOG_REPORT>
						  while(1);
 8002a20:	e7fe      	b.n	8002a20 <StartDefaultTask+0xd68>
					  }
				  }

			  }
			  break;
 8002a22:	e005      	b.n	8002a30 <StartDefaultTask+0xd78>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 8002a24:	f240 311e 	movw	r1, #798	; 0x31e
 8002a28:	4859      	ldr	r0, [pc, #356]	; (8002b90 <StartDefaultTask+0xed8>)
 8002a2a:	f7fe fff9 	bl	8001a20 <LOG_REPORT>
				  while(1);
 8002a2e:	e7fe      	b.n	8002a2e <StartDefaultTask+0xd76>
			  }
		  }
	  }
	  break;
 8002a30:	f000 bc4c 	b.w	80032cc <StartDefaultTask+0x1614>

	  case SCARA_METHOD_AUTO:
	  {
		  switch (current_duty_state)
 8002a34:	f897 3d2d 	ldrb.w	r3, [r7, #3373]	; 0xd2d
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	f200 8152 	bhi.w	8002ce2 <StartDefaultTask+0x102a>
 8002a3e:	a201      	add	r2, pc, #4	; (adr r2, 8002a44 <StartDefaultTask+0xd8c>)
 8002a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a44:	08002ce3 	.word	0x08002ce3
 8002a48:	08002a55 	.word	0x08002a55
 8002a4c:	08002be1 	.word	0x08002be1
 8002a50:	08002c79 	.word	0x08002c79
		  case SCARA_DUTY_STATE_READY:
			  
		  break;
		  case SCARA_DUTY_STATE_INIT:{
			  SCARA_StatusTypeDef status1, status2;
			  status1 = scara_test_InitDuty(duty_cmd);
 8002a54:	f507 6430 	add.w	r4, r7, #2816	; 0xb00
 8002a58:	4668      	mov	r0, sp
 8002a5a:	f104 0310 	add.w	r3, r4, #16
 8002a5e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8002a62:	4619      	mov	r1, r3
 8002a64:	f013 f8fa 	bl	8015c5c <memcpy>
 8002a68:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a6c:	f002 fb00 	bl	8005070 <scara_test_InitDuty>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f887 3cd5 	strb.w	r3, [r7, #3285]	; 0xcd5
			  if ( SCARA_STATUS_OK == status1) {
 8002a76:	f897 3cd5 	ldrb.w	r3, [r7, #3285]	; 0xcd5
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f040 808a 	bne.w	8002b94 <StartDefaultTask+0xedc>
				  current_duty_state = SCARA_DUTY_STATE_FLOW;
 8002a80:	2302      	movs	r3, #2
 8002a82:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
			  	status2 = scaraTestLinearDuty();
 8002a86:	f007 fc4f 	bl	800a328 <scaraTestLinearDuty>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	f887 3cd4 	strb.w	r3, [r7, #3284]	; 0xcd4
			  	if (SCARA_STATUS_OK == status2) {
 8002a90:	f897 3cd4 	ldrb.w	r3, [r7, #3284]	; 0xcd4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d144      	bne.n	8002b22 <StartDefaultTask+0xe6a>
			  		current_duty_state = SCARA_DUTY_STATE_FLOW;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
			  		run_time			= 0;
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	f04f 0400 	mov.w	r4, #0
 8002aa6:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8002aaa:	e9c2 3400 	strd	r3, r4, [r2]
			  		// Respond
			  		detail_array[0] = status1;
 8002aae:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8002ab2:	f897 2cd5 	ldrb.w	r2, [r7, #3285]	; 0xcd5
 8002ab6:	701a      	strb	r2, [r3, #0]
			  		respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002ab8:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002abc:	6899      	ldr	r1, [r3, #8]
 8002abe:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8002ac2:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	2301      	movs	r3, #1
 8002ad0:	2008      	movs	r0, #8
 8002ad2:	f7fe ff55 	bl	8001980 <commandRespond1>
 8002ad6:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
			  		total_respond_length += respond_lenght;
 8002ada:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002ade:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
			  		detail_array[0] = NONE;
 8002ae8:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8002aec:	2223      	movs	r2, #35	; 0x23
 8002aee:	701a      	strb	r2, [r3, #0]
			  		respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002af0:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002af4:	6899      	ldr	r1, [r3, #8]
 8002af6:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8002afa:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8002afe:	4413      	add	r3, r2
 8002b00:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	2301      	movs	r3, #1
 8002b08:	2003      	movs	r0, #3
 8002b0a:	f7fe ff39 	bl	8001980 <commandRespond1>
 8002b0e:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
			  		total_respond_length += respond_lenght;
 8002b12:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002b16:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
			    respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
			    total_respond_length += respond_lenght;
			  	LOG_REPORT("INIT FAIL", __LINE__);
			  }
			}
		  break;
 8002b20:	e0e0      	b.n	8002ce4 <StartDefaultTask+0x102c>
					current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002b22:	2300      	movs	r3, #0
 8002b24:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
					LOG_REPORT("TEST FAIL", __LINE__);
 8002b28:	f240 313e 	movw	r1, #830	; 0x33e
 8002b2c:	4812      	ldr	r0, [pc, #72]	; (8002b78 <StartDefaultTask+0xec0>)
 8002b2e:	f7fe ff77 	bl	8001a20 <LOG_REPORT>
					detail_array[0] = status2;
 8002b32:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8002b36:	f897 2cd4 	ldrb.w	r2, [r7, #3284]	; 0xcd4
 8002b3a:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b3c:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002b40:	6899      	ldr	r1, [r3, #8]
 8002b42:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8002b46:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	2301      	movs	r3, #1
 8002b54:	2007      	movs	r0, #7
 8002b56:	f7fe ff13 	bl	8001980 <commandRespond1>
 8002b5a:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
					total_respond_length += respond_lenght;
 8002b5e:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002b62:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002b66:	4413      	add	r3, r2
 8002b68:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
		  break;
 8002b6c:	e0ba      	b.n	8002ce4 <StartDefaultTask+0x102c>
 8002b6e:	bf00      	nop
 8002b70:	40000000 	.word	0x40000000
 8002b74:	3f847ae1 	.word	0x3f847ae1
 8002b78:	0801b250 	.word	0x0801b250
 8002b7c:	0801b25c 	.word	0x0801b25c
 8002b80:	20005ae8 	.word	0x20005ae8
 8002b84:	20005c68 	.word	0x20005c68
 8002b88:	0801b268 	.word	0x0801b268
 8002b8c:	0801b240 	.word	0x0801b240
 8002b90:	0801b274 	.word	0x0801b274
			  	current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002b94:	2300      	movs	r3, #0
 8002b96:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
			    detail_array[0] = status1;
 8002b9a:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8002b9e:	f897 2cd5 	ldrb.w	r2, [r7, #3285]	; 0xcd5
 8002ba2:	701a      	strb	r2, [r3, #0]
			    respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002ba4:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002ba8:	6899      	ldr	r1, [r3, #8]
 8002baa:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8002bae:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	2301      	movs	r3, #1
 8002bbc:	2007      	movs	r0, #7
 8002bbe:	f7fe fedf 	bl	8001980 <commandRespond1>
 8002bc2:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
			    total_respond_length += respond_lenght;
 8002bc6:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002bca:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002bce:	4413      	add	r3, r2
 8002bd0:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
			  	LOG_REPORT("INIT FAIL", __LINE__);
 8002bd4:	f44f 7152 	mov.w	r1, #840	; 0x348
 8002bd8:	48cf      	ldr	r0, [pc, #828]	; (8002f18 <StartDefaultTask+0x1260>)
 8002bda:	f7fe ff21 	bl	8001a20 <LOG_REPORT>
		  break;
 8002bde:	e081      	b.n	8002ce4 <StartDefaultTask+0x102c>

		  case SCARA_DUTY_STATE_FLOW:{
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8002be0:	a3c3      	add	r3, pc, #780	; (adr r3, 8002ef0 <StartDefaultTask+0x1238>)
 8002be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be6:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 8002bea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bee:	f7fd fb4d 	bl	800028c <__adddf3>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	460c      	mov	r4, r1
 8002bf6:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8002bfa:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8002bfe:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8002c02:	ed93 0b00 	vldr	d0, [r3]
 8002c06:	f007 fd25 	bl	800a654 <scaraIsFinish>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <StartDefaultTask+0xf60>
			  	current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 8002c10:	2303      	movs	r3, #3
 8002c12:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
				  }else{
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
				  }
			  }
		  }
		  break;
 8002c16:	e065      	b.n	8002ce4 <StartDefaultTask+0x102c>
			  	status = scaraTestFlowDuty(run_time , &positionNext, positionCurrent);
 8002c18:	4cc0      	ldr	r4, [pc, #768]	; (8002f1c <StartDefaultTask+0x1264>)
 8002c1a:	4668      	mov	r0, sp
 8002c1c:	f104 0308 	add.w	r3, r4, #8
 8002c20:	22b8      	movs	r2, #184	; 0xb8
 8002c22:	4619      	mov	r1, r3
 8002c24:	f013 f81a 	bl	8015c5c <memcpy>
 8002c28:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002c2c:	48bc      	ldr	r0, [pc, #752]	; (8002f20 <StartDefaultTask+0x1268>)
 8002c2e:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 8002c32:	ed91 0b00 	vldr	d0, [r1]
 8002c36:	f005 fb21 	bl	800827c <scaraTestFlowDuty>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f887 3cd6 	strb.w	r3, [r7, #3286]	; 0xcd6
			  	if ( SCARA_STATUS_OK == status) {
 8002c40:	f897 3cd6 	ldrb.w	r3, [r7, #3286]	; 0xcd6
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d113      	bne.n	8002c70 <StartDefaultTask+0xfb8>
			  		lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8002c48:	4cb4      	ldr	r4, [pc, #720]	; (8002f1c <StartDefaultTask+0x1264>)
 8002c4a:	4ab5      	ldr	r2, [pc, #724]	; (8002f20 <StartDefaultTask+0x1268>)
 8002c4c:	ab2c      	add	r3, sp, #176	; 0xb0
 8002c4e:	4611      	mov	r1, r2
 8002c50:	22c0      	movs	r2, #192	; 0xc0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f013 f802 	bl	8015c5c <memcpy>
 8002c58:	4668      	mov	r0, sp
 8002c5a:	f104 0310 	add.w	r3, r4, #16
 8002c5e:	22b0      	movs	r2, #176	; 0xb0
 8002c60:	4619      	mov	r1, r3
 8002c62:	f012 fffb 	bl	8015c5c <memcpy>
 8002c66:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c6a:	f001 fe6d 	bl	8004948 <lowlayer_computeAndWritePulse>
		  break;
 8002c6e:	e039      	b.n	8002ce4 <StartDefaultTask+0x102c>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8002c70:	2303      	movs	r3, #3
 8002c72:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
		  break;
 8002c76:	e035      	b.n	8002ce4 <StartDefaultTask+0x102c>

		  case SCARA_DUTY_STATE_FINISH:{
		  	current_duty_state = SCARA_DUTY_STATE_READY;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
			positionNext.t = 0;
 8002c7e:	4aa8      	ldr	r2, [pc, #672]	; (8002f20 <StartDefaultTask+0x1268>)
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	f04f 0400 	mov.w	r4, #0
 8002c88:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
			positionNext.total_time = 0;
 8002c8c:	4aa4      	ldr	r2, [pc, #656]	; (8002f20 <StartDefaultTask+0x1268>)
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	f04f 0400 	mov.w	r4, #0
 8002c96:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
			positionNext.q = 0;
 8002c9a:	4aa1      	ldr	r2, [pc, #644]	; (8002f20 <StartDefaultTask+0x1268>)
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	f04f 0400 	mov.w	r4, #0
 8002ca4:	e9c2 3400 	strd	r3, r4, [r2]

			detail_array[0] = NONE;
 8002ca8:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8002cac:	2223      	movs	r2, #35	; 0x23
 8002cae:	701a      	strb	r2, [r3, #0]
			respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002cb0:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002cb4:	6899      	ldr	r1, [r3, #8]
 8002cb6:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 8002cba:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	2005      	movs	r0, #5
 8002cca:	f7fe fe59 	bl	8001980 <commandRespond1>
 8002cce:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
			total_respond_length += respond_lenght;
 8002cd2:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 8002cd6:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002cda:	4413      	add	r3, r2
 8002cdc:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
		  }
		  break;
 8002ce0:	e000      	b.n	8002ce4 <StartDefaultTask+0x102c>
		  
		  default:
			  break;
 8002ce2:	bf00      	nop
		  }
	  }

	  break;
 8002ce4:	e2f2      	b.n	80032cc <StartDefaultTask+0x1614>
	  case SCARA_METHOD_TEST:
	  {
		  lowlayer_writePulse(test_value[0], test_value[1], test_value[2], test_value[3]);
 8002ce6:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8002cea:	f993 0000 	ldrsb.w	r0, [r3]
 8002cee:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8002cf2:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8002cf6:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8002cfa:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8002cfe:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8002d02:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002d06:	f001 ffc3 	bl	8004c90 <lowlayer_writePulse>
	  }
	  break;
 8002d0a:	e2df      	b.n	80032cc <StartDefaultTask+0x1614>


	  case SCARA_METHOD_PICK_AND_PLACE:
	  {
		  switch(current_duty_state) {
 8002d0c:	f897 3d2d 	ldrb.w	r3, [r7, #3373]	; 0xd2d
 8002d10:	3b01      	subs	r3, #1
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	f200 82d9 	bhi.w	80032ca <StartDefaultTask+0x1612>
 8002d18:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <StartDefaultTask+0x1068>)
 8002d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1e:	bf00      	nop
 8002d20:	08002d31 	.word	0x08002d31
 8002d24:	080031d5 	.word	0x080031d5
 8002d28:	080032bb 	.word	0x080032bb
 8002d2c:	08002d69 	.word	0x08002d69
		  case SCARA_DUTY_STATE_INIT:{
			  //Object = calloc(8, sizeof(SCARA_Pick_And_Place_Package));
			  HAL_TIM_Base_Start(&htim2);
 8002d30:	487c      	ldr	r0, [pc, #496]	; (8002f24 <StartDefaultTask+0x126c>)
 8002d32:	f00b f8b2 	bl	800de9a <HAL_TIM_Base_Start>
			  object_tail_pointer = 0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	f887 3d16 	strb.w	r3, [r7, #3350]	; 0xd16
			  object_head_pointer = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f887 3d15 	strb.w	r3, [r7, #3349]	; 0xd15
			  operation_state = SCARA_MOVE_TO_TARGET;
 8002d42:	2300      	movs	r3, #0
 8002d44:	f887 3d17 	strb.w	r3, [r7, #3351]	; 0xd17
			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8002d48:	2304      	movs	r3, #4
 8002d4a:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
			  duty_cmd.robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8002d4e:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002d52:	2204      	movs	r2, #4
 8002d54:	705a      	strb	r2, [r3, #1]
			  duty_cmd.path_type = DUTY_PATH_LINE;
 8002d56:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	739a      	strb	r2, [r3, #14]
			  duty_cmd.space_type = DUTY_SPACE_TASK;
 8002d5e:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002d62:	2200      	movs	r2, #0
 8002d64:	735a      	strb	r2, [r3, #13]
		  }
		  break;
 8002d66:	e2ad      	b.n	80032c4 <StartDefaultTask+0x160c>

		  case SCARA_DUTY_STATE_OPERATION:{
			  if(object_tail_pointer != object_head_pointer){
 8002d68:	f897 2d16 	ldrb.w	r2, [r7, #3350]	; 0xd16
 8002d6c:	f897 3d15 	ldrb.w	r3, [r7, #3349]	; 0xd15
 8002d70:	429a      	cmp	r2, r3
 8002d72:	f000 82a4 	beq.w	80032be <StartDefaultTask+0x1606>
				  switch(operation_state){
 8002d76:	f897 3d17 	ldrb.w	r3, [r7, #3351]	; 0xd17
 8002d7a:	2b07      	cmp	r3, #7
 8002d7c:	f200 818b 	bhi.w	8003096 <StartDefaultTask+0x13de>
 8002d80:	a201      	add	r2, pc, #4	; (adr r2, 8002d88 <StartDefaultTask+0x10d0>)
 8002d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d86:	bf00      	nop
 8002d88:	08002da9 	.word	0x08002da9
 8002d8c:	08002e79 	.word	0x08002e79
 8002d90:	08002ea7 	.word	0x08002ea7
 8002d94:	08002ebd 	.word	0x08002ebd
 8002d98:	08002f39 	.word	0x08002f39
 8002d9c:	08003025 	.word	0x08003025
 8002da0:	08003053 	.word	0x08003053
 8002da4:	08003069 	.word	0x08003069
					  case SCARA_MOVE_TO_TARGET:{
						  double wait_time = TIMER_SCALE*((uint16_t)(TIM2->CNT - Object[object_tail_pointer].timer_value)) + MOVE_TIME + PUT_DOWN_TIME_ON_OBJECT;
 8002da8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 8002db4:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002db8:	20c8      	movs	r0, #200	; 0xc8
 8002dba:	fb00 f303 	mul.w	r3, r0, r3
 8002dbe:	440b      	add	r3, r1
 8002dc0:	33c0      	adds	r3, #192	; 0xc0
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	ee07 3a90 	vmov	s15, r3
 8002dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dd0:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8002f28 <StartDefaultTask+0x1270>
 8002dd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dd8:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002f2c <StartDefaultTask+0x1274>
 8002ddc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002de0:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002f30 <StartDefaultTask+0x1278>
 8002de4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002de8:	ee17 0a90 	vmov	r0, s15
 8002dec:	f7fd fbac 	bl	8000548 <__aeabi_f2d>
 8002df0:	4603      	mov	r3, r0
 8002df2:	460c      	mov	r4, r1
 8002df4:	f607 42d8 	addw	r2, r7, #3288	; 0xcd8
 8002df8:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.y += wait_time*conveyor_speed;
 8002dfc:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 8002e00:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002e04:	21c8      	movs	r1, #200	; 0xc8
 8002e06:	fb01 f303 	mul.w	r3, r1, r3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3350      	adds	r3, #80	; 0x50
 8002e0e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002e12:	4b48      	ldr	r3, [pc, #288]	; (8002f34 <StartDefaultTask+0x127c>)
 8002e14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e18:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8002e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e20:	f7fd fbea 	bl	80005f8 <__aeabi_dmul>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	f897 6d16 	ldrb.w	r6, [r7, #3350]	; 0xd16
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	4629      	mov	r1, r5
 8002e30:	f7fd fa2c 	bl	800028c <__adddf3>
 8002e34:	4603      	mov	r3, r0
 8002e36:	460c      	mov	r4, r1
 8002e38:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002e3c:	22c8      	movs	r2, #200	; 0xc8
 8002e3e:	fb02 f206 	mul.w	r2, r2, r6
 8002e42:	440a      	add	r2, r1
 8002e44:	3250      	adds	r2, #80	; 0x50
 8002e46:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8002e4a:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 8002e4e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002e52:	21c8      	movs	r1, #200	; 0xc8
 8002e54:	fb01 f303 	mul.w	r3, r1, r3
 8002e58:	4413      	add	r3, r2
 8002e5a:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8002e5e:	a426      	add	r4, pc, #152	; (adr r4, 8002ef8 <StartDefaultTask+0x1240>)
 8002e60:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002e64:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = MOVE_TIME;
 8002e68:	a425      	add	r4, pc, #148	; (adr r4, 8002f00 <StartDefaultTask+0x1248>)
 8002e6a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002e6e:	f607 5208 	addw	r2, r7, #3336	; 0xd08
 8002e72:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8002e76:	e10e      	b.n	8003096 <StartDefaultTask+0x13de>

					  case SCARA_MOVE_DOWN_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_OBJECT;
 8002e78:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 8002e7c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002e80:	21c8      	movs	r1, #200	; 0xc8
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8002e8c:	a41e      	add	r4, pc, #120	; (adr r4, 8002f08 <StartDefaultTask+0x1250>)
 8002e8e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002e92:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = PUT_DOWN_TIME_ON_OBJECT;
 8002e96:	a41e      	add	r4, pc, #120	; (adr r4, 8002f10 <StartDefaultTask+0x1258>)
 8002e98:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002e9c:	f607 5208 	addw	r2, r7, #3336	; 0xd08
 8002ea0:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8002ea4:	e0f7      	b.n	8003096 <StartDefaultTask+0x13de>
					  case SCARA_ATTACH:{
						  state_time = ATTACH_TIME;
 8002ea6:	a412      	add	r4, pc, #72	; (adr r4, 8002ef0 <StartDefaultTask+0x1238>)
 8002ea8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002eac:	f607 5208 	addw	r2, r7, #3336	; 0xd08
 8002eb0:	e9c2 3400 	strd	r3, r4, [r2]
						  scaraSetOutput(1);
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	f007 fb3b 	bl	800a530 <scaraSetOutput>
					  }
					  break;
 8002eba:	e0ec      	b.n	8003096 <StartDefaultTask+0x13de>
					  case SCARA_MOVE_UP_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8002ebc:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 8002ec0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002ec4:	21c8      	movs	r1, #200	; 0xc8
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8002ed0:	a409      	add	r4, pc, #36	; (adr r4, 8002ef8 <StartDefaultTask+0x1240>)
 8002ed2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002ed6:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = PICK_UP_TIME_ON_OBJECT;
 8002eda:	a40d      	add	r4, pc, #52	; (adr r4, 8002f10 <StartDefaultTask+0x1258>)
 8002edc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002ee0:	f607 5208 	addw	r2, r7, #3336	; 0xd08
 8002ee4:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8002ee8:	e0d5      	b.n	8003096 <StartDefaultTask+0x13de>
 8002eea:	bf00      	nop
 8002eec:	f3af 8000 	nop.w
 8002ef0:	40000000 	.word	0x40000000
 8002ef4:	3f847ae1 	.word	0x3f847ae1
 8002ef8:	00000000 	.word	0x00000000
 8002efc:	40606000 	.word	0x40606000
 8002f00:	60000000 	.word	0x60000000
 8002f04:	3fe66666 	.word	0x3fe66666
 8002f08:	00000000 	.word	0x00000000
 8002f0c:	405fa000 	.word	0x405fa000
 8002f10:	a0000000 	.word	0xa0000000
 8002f14:	3fb99999 	.word	0x3fb99999
 8002f18:	0801b25c 	.word	0x0801b25c
 8002f1c:	20005ae8 	.word	0x20005ae8
 8002f20:	20005c68 	.word	0x20005c68
 8002f24:	20005d68 	.word	0x20005d68
 8002f28:	399c09bf 	.word	0x399c09bf
 8002f2c:	3f333333 	.word	0x3f333333
 8002f30:	3dcccccd 	.word	0x3dcccccd
 8002f34:	20000ba0 	.word	0x20000ba0
					  case SCARA_MOVE_TO_SLOT :{

						  Object[object_tail_pointer].object_position.x = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posx;
 8002f38:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 8002f3c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f40:	21c8      	movs	r1, #200	; 0xc8
 8002f42:	fb01 f303 	mul.w	r3, r1, r3
 8002f46:	4413      	add	r3, r2
 8002f48:	33b8      	adds	r3, #184	; 0xb8
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f897 2d16 	ldrb.w	r2, [r7, #3350]	; 0xd16
 8002f52:	f107 0118 	add.w	r1, r7, #24
 8002f56:	4603      	mov	r3, r0
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4403      	add	r3, r0
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	440b      	add	r3, r1
 8002f60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f64:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002f68:	20c8      	movs	r0, #200	; 0xc8
 8002f6a:	fb00 f202 	mul.w	r2, r0, r2
 8002f6e:	440a      	add	r2, r1
 8002f70:	3248      	adds	r2, #72	; 0x48
 8002f72:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.y = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posy;
 8002f76:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 8002f7a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f7e:	21c8      	movs	r1, #200	; 0xc8
 8002f80:	fb01 f303 	mul.w	r3, r1, r3
 8002f84:	4413      	add	r3, r2
 8002f86:	33b8      	adds	r3, #184	; 0xb8
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f897 2d16 	ldrb.w	r2, [r7, #3350]	; 0xd16
 8002f90:	f107 0118 	add.w	r1, r7, #24
 8002f94:	4603      	mov	r3, r0
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	4403      	add	r3, r0
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	440b      	add	r3, r1
 8002f9e:	3308      	adds	r3, #8
 8002fa0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002fa4:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002fa8:	20c8      	movs	r0, #200	; 0xc8
 8002faa:	fb00 f202 	mul.w	r2, r0, r2
 8002fae:	440a      	add	r2, r1
 8002fb0:	3250      	adds	r2, #80	; 0x50
 8002fb2:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.roll = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].roll;
 8002fb6:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 8002fba:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002fbe:	21c8      	movs	r1, #200	; 0xc8
 8002fc0:	fb01 f303 	mul.w	r3, r1, r3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	33b8      	adds	r3, #184	; 0xb8
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f897 2d16 	ldrb.w	r2, [r7, #3350]	; 0xd16
 8002fd0:	f107 0118 	add.w	r1, r7, #24
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4403      	add	r3, r0
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	440b      	add	r3, r1
 8002fde:	3310      	adds	r3, #16
 8002fe0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002fe4:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002fe8:	20c8      	movs	r0, #200	; 0xc8
 8002fea:	fb00 f202 	mul.w	r2, r0, r2
 8002fee:	440a      	add	r2, r1
 8002ff0:	3260      	adds	r2, #96	; 0x60
 8002ff2:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8002ff6:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 8002ffa:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002ffe:	21c8      	movs	r1, #200	; 0xc8
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	4413      	add	r3, r2
 8003006:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800300a:	a4c6      	add	r4, pc, #792	; (adr r4, 8003324 <StartDefaultTask+0x166c>)
 800300c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003010:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = MOVE_TIME;
 8003014:	a4c5      	add	r4, pc, #788	; (adr r4, 800332c <StartDefaultTask+0x1674>)
 8003016:	e9d4 3400 	ldrd	r3, r4, [r4]
 800301a:	f607 5208 	addw	r2, r7, #3336	; 0xd08
 800301e:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003022:	e038      	b.n	8003096 <StartDefaultTask+0x13de>
					  case SCARA_MOVE_DOWN_ON_SLOT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_SLOT;
 8003024:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 8003028:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800302c:	21c8      	movs	r1, #200	; 0xc8
 800302e:	fb01 f303 	mul.w	r3, r1, r3
 8003032:	4413      	add	r3, r2
 8003034:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8003038:	a4be      	add	r4, pc, #760	; (adr r4, 8003334 <StartDefaultTask+0x167c>)
 800303a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800303e:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = PUT_DOWN_TIME_ON_SLOT;
 8003042:	a4be      	add	r4, pc, #760	; (adr r4, 800333c <StartDefaultTask+0x1684>)
 8003044:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003048:	f607 5208 	addw	r2, r7, #3336	; 0xd08
 800304c:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003050:	e021      	b.n	8003096 <StartDefaultTask+0x13de>
					  case SCARA_RELEASE:{
						  state_time = DETACH_TIME;
 8003052:	a4af      	add	r4, pc, #700	; (adr r4, 8003310 <StartDefaultTask+0x1658>)
 8003054:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003058:	f607 5208 	addw	r2, r7, #3336	; 0xd08
 800305c:	e9c2 3400 	strd	r3, r4, [r2]
						  scaraSetOutput(0);
 8003060:	2000      	movs	r0, #0
 8003062:	f007 fa65 	bl	800a530 <scaraSetOutput>
					  }
					  break;
 8003066:	e016      	b.n	8003096 <StartDefaultTask+0x13de>
					  case SCARA_MOVE_UP_ON_SLOT:{
						  state_time = PICK_UP_TIME_ON_SLOT;
 8003068:	a4b4      	add	r4, pc, #720	; (adr r4, 800333c <StartDefaultTask+0x1684>)
 800306a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800306e:	f607 5208 	addw	r2, r7, #3336	; 0xd08
 8003072:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003076:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 800307a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800307e:	21c8      	movs	r1, #200	; 0xc8
 8003080:	fb01 f303 	mul.w	r3, r1, r3
 8003084:	4413      	add	r3, r2
 8003086:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800308a:	a4a6      	add	r4, pc, #664	; (adr r4, 8003324 <StartDefaultTask+0x166c>)
 800308c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003090:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003094:	bf00      	nop
				  }
				  memcpy(&duty_cmd.target_point, &Object[object_tail_pointer].object_position, sizeof(SCARA_PositionTypeDef));
 8003096:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 800309a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800309e:	21c8      	movs	r1, #200	; 0xc8
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	18d1      	adds	r1, r2, r3
 80030a6:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80030aa:	3328      	adds	r3, #40	; 0x28
 80030ac:	22c0      	movs	r2, #192	; 0xc0
 80030ae:	4618      	mov	r0, r3
 80030b0:	f012 fdd4 	bl	8015c5c <memcpy>
				  duty_cmd.time_total = state_time;
 80030b4:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80030b8:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 80030bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80030c0:	e9c2 3408 	strd	r3, r4, [r2, #32]
				  SCARA_StatusTypeDef status1;
				  duty_cmd.v_factor = 0;
 80030c4:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	f04f 0400 	mov.w	r4, #0
 80030d0:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
				  if(operation_state == SCARA_ATTACH || operation_state == SCARA_RELEASE){
 80030d4:	f897 3d17 	ldrb.w	r3, [r7, #3351]	; 0xd17
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d003      	beq.n	80030e4 <StartDefaultTask+0x142c>
 80030dc:	f897 3d17 	ldrb.w	r3, [r7, #3351]	; 0xd17
 80030e0:	2b06      	cmp	r3, #6
 80030e2:	d103      	bne.n	80030ec <StartDefaultTask+0x1434>
					  status1 = SCARA_STATUS_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	f887 3d07 	strb.w	r3, [r7, #3335]	; 0xd07
 80030ea:	e031      	b.n	8003150 <StartDefaultTask+0x1498>
				  }else{
					  if(operation_state == SCARA_MOVE_DOWN_ON_OBJECT || operation_state == SCARA_MOVE_DOWN_ON_SLOT || operation_state == SCARA_MOVE_UP_ON_OBJECT || operation_state == SCARA_MOVE_UP_ON_SLOT){
 80030ec:	f897 3d17 	ldrb.w	r3, [r7, #3351]	; 0xd17
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d00b      	beq.n	800310c <StartDefaultTask+0x1454>
 80030f4:	f897 3d17 	ldrb.w	r3, [r7, #3351]	; 0xd17
 80030f8:	2b05      	cmp	r3, #5
 80030fa:	d007      	beq.n	800310c <StartDefaultTask+0x1454>
 80030fc:	f897 3d17 	ldrb.w	r3, [r7, #3351]	; 0xd17
 8003100:	2b03      	cmp	r3, #3
 8003102:	d003      	beq.n	800310c <StartDefaultTask+0x1454>
 8003104:	f897 3d17 	ldrb.w	r3, [r7, #3351]	; 0xd17
 8003108:	2b07      	cmp	r3, #7
 800310a:	d108      	bne.n	800311e <StartDefaultTask+0x1466>
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LINEAR;
 800310c:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8003110:	2202      	movs	r2, #2
 8003112:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QT;
 8003114:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8003118:	2203      	movs	r2, #3
 800311a:	745a      	strb	r2, [r3, #17]
 800311c:	e007      	b.n	800312e <StartDefaultTask+0x1476>
					  }else{
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800311e:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8003122:	2200      	movs	r2, #0
 8003124:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 8003126:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800312a:	2201      	movs	r2, #1
 800312c:	745a      	strb	r2, [r3, #17]
					  }
					  status1 = scaraInitDuty(duty_cmd);
 800312e:	f507 6430 	add.w	r4, r7, #2816	; 0xb00
 8003132:	4668      	mov	r0, sp
 8003134:	f104 0310 	add.w	r3, r4, #16
 8003138:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800313c:	4619      	mov	r1, r3
 800313e:	f012 fd8d 	bl	8015c5c <memcpy>
 8003142:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003146:	f002 f8c7 	bl	80052d8 <scaraInitDuty>
 800314a:	4603      	mov	r3, r0
 800314c:	f887 3d07 	strb.w	r3, [r7, #3335]	; 0xd07
				  }
				  if ( SCARA_STATUS_OK == status1) {
 8003150:	f897 3d07 	ldrb.w	r3, [r7, #3335]	; 0xd07
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10b      	bne.n	8003170 <StartDefaultTask+0x14b8>
				  	current_duty_state = SCARA_DUTY_STATE_FLOW;
 8003158:	2302      	movs	r3, #2
 800315a:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
				  	run_time = 0;
 800315e:	f04f 0300 	mov.w	r3, #0
 8003162:	f04f 0400 	mov.w	r4, #0
 8003166:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 800316a:	e9c2 3400 	strd	r3, r4, [r2]
 800316e:	e031      	b.n	80031d4 <StartDefaultTask+0x151c>
				  } else {
					object_tail_pointer = (object_tail_pointer+1)%8;
 8003170:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 8003174:	3301      	adds	r3, #1
 8003176:	425a      	negs	r2, r3
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	f002 0207 	and.w	r2, r2, #7
 8003180:	bf58      	it	pl
 8003182:	4253      	negpl	r3, r2
 8003184:	f887 3d16 	strb.w	r3, [r7, #3350]	; 0xd16
					operation_state = SCARA_MOVE_TO_TARGET;
 8003188:	2300      	movs	r3, #0
 800318a:	f887 3d17 	strb.w	r3, [r7, #3351]	; 0xd17
					detail_array[0] = status1;
 800318e:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8003192:	f897 2d07 	ldrb.w	r2, [r7, #3335]	; 0xd07
 8003196:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003198:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800319c:	6899      	ldr	r1, [r3, #8]
 800319e:	f607 22d4 	addw	r2, r7, #2772	; 0xad4
 80031a2:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 80031a6:	4413      	add	r3, r2
 80031a8:	f607 1214 	addw	r2, r7, #2324	; 0x914
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	2301      	movs	r3, #1
 80031b0:	2007      	movs	r0, #7
 80031b2:	f7fe fbe5 	bl	8001980 <commandRespond1>
 80031b6:	f8c7 0d00 	str.w	r0, [r7, #3328]	; 0xd00
					total_respond_length += respond_lenght;
 80031ba:	f8d7 2d30 	ldr.w	r2, [r7, #3376]	; 0xd30
 80031be:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 80031c2:	4413      	add	r3, r2
 80031c4:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30
					LOG_REPORT("INIT FAIL", __LINE__);
 80031c8:	f44f 7175 	mov.w	r1, #980	; 0x3d4
 80031cc:	4852      	ldr	r0, [pc, #328]	; (8003318 <StartDefaultTask+0x1660>)
 80031ce:	f7fe fc27 	bl	8001a20 <LOG_REPORT>
					break;
 80031d2:	e077      	b.n	80032c4 <StartDefaultTask+0x160c>


		  case SCARA_DUTY_STATE_FLOW:{
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 80031d4:	a34e      	add	r3, pc, #312	; (adr r3, 8003310 <StartDefaultTask+0x1658>)
 80031d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031da:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 80031de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031e2:	f7fd f853 	bl	800028c <__adddf3>
 80031e6:	4603      	mov	r3, r0
 80031e8:	460c      	mov	r4, r1
 80031ea:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 80031ee:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 80031f2:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80031f6:	ed93 0b00 	vldr	d0, [r3]
 80031fa:	f007 fa2b 	bl	800a654 <scaraIsFinish>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d022      	beq.n	800324a <StartDefaultTask+0x1592>
				current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003204:	2304      	movs	r3, #4
 8003206:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
				if(operation_state == SCARA_MOVE_UP_ON_SLOT){
 800320a:	f897 3d17 	ldrb.w	r3, [r7, #3351]	; 0xd17
 800320e:	2b07      	cmp	r3, #7
 8003210:	d10f      	bne.n	8003232 <StartDefaultTask+0x157a>
					operation_state = SCARA_MOVE_TO_TARGET;
 8003212:	2300      	movs	r3, #0
 8003214:	f887 3d17 	strb.w	r3, [r7, #3351]	; 0xd17
					object_tail_pointer = (object_tail_pointer+1)%8;
 8003218:	f897 3d16 	ldrb.w	r3, [r7, #3350]	; 0xd16
 800321c:	3301      	adds	r3, #1
 800321e:	425a      	negs	r2, r3
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	f002 0207 	and.w	r2, r2, #7
 8003228:	bf58      	it	pl
 800322a:	4253      	negpl	r3, r2
 800322c:	f887 3d16 	strb.w	r3, [r7, #3350]	; 0xd16
 8003230:	e004      	b.n	800323c <StartDefaultTask+0x1584>
				}else{
					operation_state += 1; //next state
 8003232:	f897 3d17 	ldrb.w	r3, [r7, #3351]	; 0xd17
 8003236:	3301      	adds	r3, #1
 8003238:	f887 3d17 	strb.w	r3, [r7, #3351]	; 0xd17
				}
				lowlayer_readTruePosition(&positionNext);
 800323c:	4837      	ldr	r0, [pc, #220]	; (800331c <StartDefaultTask+0x1664>)
 800323e:	f001 f9f3 	bl	8004628 <lowlayer_readTruePosition>
				kinematicForward(&positionNext);
 8003242:	4836      	ldr	r0, [pc, #216]	; (800331c <StartDefaultTask+0x1664>)
 8003244:	f000 fafc 	bl	8003840 <kinematicForward>
				  }else{
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
				  }
			  }
		  }
		  break;
 8003248:	e03b      	b.n	80032c2 <StartDefaultTask+0x160a>
			  } else if(operation_state != SCARA_ATTACH && operation_state != SCARA_RELEASE){
 800324a:	f897 3d17 	ldrb.w	r3, [r7, #3351]	; 0xd17
 800324e:	2b02      	cmp	r3, #2
 8003250:	d037      	beq.n	80032c2 <StartDefaultTask+0x160a>
 8003252:	f897 3d17 	ldrb.w	r3, [r7, #3351]	; 0xd17
 8003256:	2b06      	cmp	r3, #6
 8003258:	d033      	beq.n	80032c2 <StartDefaultTask+0x160a>
				status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 800325a:	4c31      	ldr	r4, [pc, #196]	; (8003320 <StartDefaultTask+0x1668>)
 800325c:	4668      	mov	r0, sp
 800325e:	f104 0308 	add.w	r3, r4, #8
 8003262:	22b8      	movs	r2, #184	; 0xb8
 8003264:	4619      	mov	r1, r3
 8003266:	f012 fcf9 	bl	8015c5c <memcpy>
 800326a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800326e:	482b      	ldr	r0, [pc, #172]	; (800331c <StartDefaultTask+0x1664>)
 8003270:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 8003274:	ed91 0b00 	vldr	d0, [r1]
 8003278:	f005 f86c 	bl	8008354 <scaraFlowDuty>
 800327c:	4603      	mov	r3, r0
 800327e:	f887 3cd7 	strb.w	r3, [r7, #3287]	; 0xcd7
				if ( SCARA_STATUS_OK == status) {
 8003282:	f897 3cd7 	ldrb.w	r3, [r7, #3287]	; 0xcd7
 8003286:	2b00      	cmp	r3, #0
 8003288:	d113      	bne.n	80032b2 <StartDefaultTask+0x15fa>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 800328a:	4c25      	ldr	r4, [pc, #148]	; (8003320 <StartDefaultTask+0x1668>)
 800328c:	4a23      	ldr	r2, [pc, #140]	; (800331c <StartDefaultTask+0x1664>)
 800328e:	ab2c      	add	r3, sp, #176	; 0xb0
 8003290:	4611      	mov	r1, r2
 8003292:	22c0      	movs	r2, #192	; 0xc0
 8003294:	4618      	mov	r0, r3
 8003296:	f012 fce1 	bl	8015c5c <memcpy>
 800329a:	4668      	mov	r0, sp
 800329c:	f104 0310 	add.w	r3, r4, #16
 80032a0:	22b0      	movs	r2, #176	; 0xb0
 80032a2:	4619      	mov	r1, r3
 80032a4:	f012 fcda 	bl	8015c5c <memcpy>
 80032a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80032ac:	f001 fb4c 	bl	8004948 <lowlayer_computeAndWritePulse>
		  break;
 80032b0:	e007      	b.n	80032c2 <StartDefaultTask+0x160a>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 80032b2:	2303      	movs	r3, #3
 80032b4:	f887 3d2d 	strb.w	r3, [r7, #3373]	; 0xd2d
		  break;
 80032b8:	e003      	b.n	80032c2 <StartDefaultTask+0x160a>

		  case SCARA_DUTY_STATE_FINISH:
			  //error
			  //free(Object);
		  break;
 80032ba:	bf00      	nop
 80032bc:	e005      	b.n	80032ca <StartDefaultTask+0x1612>
				  break;
 80032be:	bf00      	nop
 80032c0:	e003      	b.n	80032ca <StartDefaultTask+0x1612>
		  break;
 80032c2:	bf00      	nop
		  }
	  }
	  break;
 80032c4:	e001      	b.n	80032ca <StartDefaultTask+0x1612>
	  break;
 80032c6:	bf00      	nop
 80032c8:	e000      	b.n	80032cc <StartDefaultTask+0x1614>
	  break;
 80032ca:	bf00      	nop
	//   // Send through USB
	//   if (usb_lenght > 0) {
	// 	  CDC_Transmit_FS(usb_buff, (uint16_t)usb_lenght);
	//   }

	if(total_respond_length > 0){
 80032cc:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	dd08      	ble.n	80032e6 <StartDefaultTask+0x162e>
		CDC_Transmit_FS(respond, total_respond_length);
 80032d4:	f8d7 3d30 	ldr.w	r3, [r7, #3376]	; 0xd30
 80032d8:	b29a      	uxth	r2, r3
 80032da:	f607 23d4 	addw	r3, r7, #2772	; 0xad4
 80032de:	4611      	mov	r1, r2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f012 f83f 	bl	8015364 <CDC_Transmit_FS>
	}

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 80032e6:	f897 3d2f 	ldrb.w	r3, [r7, #3375]	; 0xd2f
 80032ea:	4618      	mov	r0, r3
 80032ec:	f007 f952 	bl	800a594 <scaraSetMethod>
	  scaraSetMode(current_mode);
 80032f0:	f897 3d2e 	ldrb.w	r3, [r7, #3374]	; 0xd2e
 80032f4:	4618      	mov	r0, r3
 80032f6:	f007 f93d 	bl	800a574 <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 80032fa:	f897 3d2d 	ldrb.w	r3, [r7, #3373]	; 0xd2d
 80032fe:	4618      	mov	r0, r3
 8003300:	f007 f928 	bl	800a554 <scaraSetDutyState>

    osDelay(1);
 8003304:	2001      	movs	r0, #1
 8003306:	f00f f94b 	bl	80125a0 <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 800330a:	f7fe bd3a 	b.w	8001d82 <StartDefaultTask+0xca>
 800330e:	bf00      	nop
 8003310:	40000000 	.word	0x40000000
 8003314:	3f847ae1 	.word	0x3f847ae1
 8003318:	0801b25c 	.word	0x0801b25c
 800331c:	20005c68 	.word	0x20005c68
 8003320:	20005ae8 	.word	0x20005ae8
 8003324:	00000000 	.word	0x00000000
 8003328:	40606000 	.word	0x40606000
 800332c:	60000000 	.word	0x60000000
 8003330:	3fe66666 	.word	0x3fe66666
 8003334:	a0000000 	.word	0xa0000000
 8003338:	405e13c6 	.word	0x405e13c6
 800333c:	a0000000 	.word	0xa0000000
 8003340:	3fe99999 	.word	0x3fe99999

08003344 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 8003344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003346:	f2ad 5d6c 	subw	sp, sp, #1388	; 0x56c
 800334a:	af70      	add	r7, sp, #448	; 0x1c0
 800334c:	1d3b      	adds	r3, r7, #4
 800334e:	6018      	str	r0, [r3, #0]
	int32_t				respond_lenght;
	int32_t				message_lenght;
	int32_t 			detail_length;

	// Default value
	duty_cmd.key_speed = 1;
 8003350:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003354:	2201      	movs	r2, #1
 8003356:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 8003358:	2129      	movs	r1, #41	; 0x29
 800335a:	4868      	ldr	r0, [pc, #416]	; (80034fc <Start_USB_RX_Task+0x1b8>)
 800335c:	f000 fefe 	bl	800415c <ringBuff_DistanceOf>
 8003360:	f8c7 03a0 	str.w	r0, [r7, #928]	; 0x3a0
		  if ( -1 != distance ) {
 8003364:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8003368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336c:	d0f4      	beq.n	8003358 <Start_USB_RX_Task+0x14>
 800336e:	466b      	mov	r3, sp
 8003370:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 8003372:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8003376:	1c58      	adds	r0, r3, #1
 8003378:	1e43      	subs	r3, r0, #1
 800337a:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800337e:	4603      	mov	r3, r0
 8003380:	4619      	mov	r1, r3
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	f04f 0400 	mov.w	r4, #0
 800338e:	00d4      	lsls	r4, r2, #3
 8003390:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003394:	00cb      	lsls	r3, r1, #3
 8003396:	4603      	mov	r3, r0
 8003398:	4619      	mov	r1, r3
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	f04f 0400 	mov.w	r4, #0
 80033a6:	00d4      	lsls	r4, r2, #3
 80033a8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80033ac:	00cb      	lsls	r3, r1, #3
 80033ae:	4603      	mov	r3, r0
 80033b0:	3307      	adds	r3, #7
 80033b2:	08db      	lsrs	r3, r3, #3
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	ebad 0d03 	sub.w	sp, sp, r3
 80033ba:	ab70      	add	r3, sp, #448	; 0x1c0
 80033bc:	3300      	adds	r3, #0
 80033be:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 80033c2:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 80033c6:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80033ca:	3301      	adds	r3, #1
 80033cc:	461a      	mov	r2, r3
 80033ce:	484b      	ldr	r0, [pc, #300]	; (80034fc <Start_USB_RX_Task+0x1b8>)
 80033d0:	f000 fea3 	bl	800411a <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1);
 80033d4:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 80033d8:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80033dc:	3301      	adds	r3, #1
 80033de:	4619      	mov	r1, r3
 80033e0:	4610      	mov	r0, r2
 80033e2:	f7fe fb63 	bl	8001aac <unPackPayload>
 80033e6:	f8c7 0394 	str.w	r0, [r7, #916]	; 0x394
			  if( -1 == ret) {
 80033ea:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80033ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f2:	d105      	bne.n	8003400 <Start_USB_RX_Task+0xbc>
				  LOG_REPORT("UNPACK FAIL", __LINE__);
 80033f4:	f240 414e 	movw	r1, #1102	; 0x44e
 80033f8:	4841      	ldr	r0, [pc, #260]	; (8003500 <Start_USB_RX_Task+0x1bc>)
 80033fa:	f7fe fb11 	bl	8001a20 <LOG_REPORT>
 80033fe:	e07a      	b.n	80034f6 <Start_USB_RX_Task+0x1b2>
			  } else {
				  LOG_REPORT((char*) temp, __LINE__);
 8003400:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8003404:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8003408:	4618      	mov	r0, r3
 800340a:	f7fe fb09 	bl	8001a20 <LOG_REPORT>
				  cmd_type = commandRead(temp, ret, &id_command, &duty_cmd);
 800340e:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 8003412:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003416:	f507 7261 	add.w	r2, r7, #900	; 0x384
 800341a:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 800341e:	f7fd fdb3 	bl	8000f88 <commandRead>
 8003422:	4603      	mov	r3, r0
 8003424:	f887 3393 	strb.w	r3, [r7, #915]	; 0x393
				  memset(detail, 0, sizeof(detail));
 8003428:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800342c:	2287      	movs	r2, #135	; 0x87
 800342e:	2100      	movs	r1, #0
 8003430:	4618      	mov	r0, r3
 8003432:	f012 fc37 	bl	8015ca4 <memset>
				  detail_length = 0;
 8003436:	f107 0308 	add.w	r3, r7, #8
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
				  rpd_type = commandReply(cmd_type, duty_cmd, detail, &detail_length);
 800343e:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
 8003442:	f897 5393 	ldrb.w	r5, [r7, #915]	; 0x393
 8003446:	f107 0308 	add.w	r3, r7, #8
 800344a:	936f      	str	r3, [sp, #444]	; 0x1bc
 800344c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003450:	936e      	str	r3, [sp, #440]	; 0x1b8
 8003452:	4668      	mov	r0, sp
 8003454:	f104 0308 	add.w	r3, r4, #8
 8003458:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800345c:	4619      	mov	r1, r3
 800345e:	f012 fbfd 	bl	8015c5c <memcpy>
 8003462:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003466:	4628      	mov	r0, r5
 8003468:	f7fe f8d6 	bl	8001618 <commandReply>
 800346c:	4603      	mov	r3, r0
 800346e:	f887 3392 	strb.w	r3, [r7, #914]	; 0x392

				  if ( RPD_DUTY == rpd_type) {
 8003472:	f897 3392 	ldrb.w	r3, [r7, #914]	; 0x392
 8003476:	2b09      	cmp	r3, #9
 8003478:	d123      	bne.n	80034c2 <Start_USB_RX_Task+0x17e>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 800347a:	2300      	movs	r3, #0
 800347c:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
					  // Wait allocate
					  while (dataMail == NULL) {
 8003480:	e008      	b.n	8003494 <Start_USB_RX_Task+0x150>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8003482:	4b20      	ldr	r3, [pc, #128]	; (8003504 <Start_USB_RX_Task+0x1c0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f04f 31ff 	mov.w	r1, #4294967295
 800348a:	4618      	mov	r0, r3
 800348c:	f00f fa98 	bl	80129c0 <osMailAlloc>
 8003490:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
					  while (dataMail == NULL) {
 8003494:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f2      	beq.n	8003482 <Start_USB_RX_Task+0x13e>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 800349c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80034a0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80034a4:	4619      	mov	r1, r3
 80034a6:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
 80034aa:	f012 fbd7 	bl	8015c5c <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 80034ae:	4b15      	ldr	r3, [pc, #84]	; (8003504 <Start_USB_RX_Task+0x1c0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f8d7 13a4 	ldr.w	r1, [r7, #932]	; 0x3a4
 80034b6:	4618      	mov	r0, r3
 80034b8:	f00f fa98 	bl	80129ec <osMailPut>
 80034bc:	f8c7 0388 	str.w	r0, [r7, #904]	; 0x388
 80034c0:	e019      	b.n	80034f6 <Start_USB_RX_Task+0x1b2>
				//   }else if( RPD_POSITION == rpd_type) { 
				// 	  CDC_Transmit_FS(detail, 84);
				  }else {
					//   memset(respond, 0, sizeof(respond));
					//   memset(message, 0, sizeof(message));
					  respond_lenght	= commandRespond1(rpd_type, cmd_type,
 80034c2:	f897 1393 	ldrb.w	r1, [r7, #915]	; 0x393
 80034c6:	f107 0308 	add.w	r3, r7, #8
 80034ca:	681c      	ldr	r4, [r3, #0]
 80034cc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80034d0:	f897 0392 	ldrb.w	r0, [r7, #914]	; 0x392
 80034d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	4623      	mov	r3, r4
 80034dc:	f7fe fa50 	bl	8001980 <commandRespond1>
 80034e0:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
							  	  	  	  (char *)detail, detail_length,
										  (char *)respond);
					  //message_lenght	= packPayload(respond, message, respond_lenght);
					  CDC_Transmit_FS(respond, respond_lenght);
 80034e4:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80034ee:	4611      	mov	r1, r2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f011 ff37 	bl	8015364 <CDC_Transmit_FS>
 80034f6:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 80034f8:	e72e      	b.n	8003358 <Start_USB_RX_Task+0x14>
 80034fa:	bf00      	nop
 80034fc:	20000004 	.word	0x20000004
 8003500:	0801b318 	.word	0x0801b318
 8003504:	20004e6c 	.word	0x20004e6c

08003508 <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	b292      	uxth	r2, r2
 8003518:	801a      	strh	r2, [r3, #0]
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	b29b      	uxth	r3, r3
}
 8003534:	4618      	mov	r0, r3
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8003546:	1d3b      	adds	r3, r7, #4
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	605a      	str	r2, [r3, #4]
 800354e:	609a      	str	r2, [r3, #8]
 8003550:	60da      	str	r2, [r3, #12]
 8003552:	611a      	str	r2, [r3, #16]
 8003554:	615a      	str	r2, [r3, #20]
 8003556:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8003558:	4b27      	ldr	r3, [pc, #156]	; (80035f8 <MX_FSMC_Init+0xb8>)
 800355a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800355e:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003560:	4b25      	ldr	r3, [pc, #148]	; (80035f8 <MX_FSMC_Init+0xb8>)
 8003562:	4a26      	ldr	r2, [pc, #152]	; (80035fc <MX_FSMC_Init+0xbc>)
 8003564:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8003566:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <MX_FSMC_Init+0xb8>)
 8003568:	2200      	movs	r2, #0
 800356a:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 800356c:	4b22      	ldr	r3, [pc, #136]	; (80035f8 <MX_FSMC_Init+0xb8>)
 800356e:	2202      	movs	r2, #2
 8003570:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8003572:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <MX_FSMC_Init+0xb8>)
 8003574:	2208      	movs	r2, #8
 8003576:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003578:	4b1f      	ldr	r3, [pc, #124]	; (80035f8 <MX_FSMC_Init+0xb8>)
 800357a:	2210      	movs	r2, #16
 800357c:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800357e:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <MX_FSMC_Init+0xb8>)
 8003580:	2200      	movs	r2, #0
 8003582:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003584:	4b1c      	ldr	r3, [pc, #112]	; (80035f8 <MX_FSMC_Init+0xb8>)
 8003586:	2200      	movs	r2, #0
 8003588:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800358a:	4b1b      	ldr	r3, [pc, #108]	; (80035f8 <MX_FSMC_Init+0xb8>)
 800358c:	2200      	movs	r2, #0
 800358e:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8003590:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <MX_FSMC_Init+0xb8>)
 8003592:	2200      	movs	r2, #0
 8003594:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003596:	4b18      	ldr	r3, [pc, #96]	; (80035f8 <MX_FSMC_Init+0xb8>)
 8003598:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800359c:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800359e:	4b16      	ldr	r3, [pc, #88]	; (80035f8 <MX_FSMC_Init+0xb8>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80035a4:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <MX_FSMC_Init+0xb8>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80035aa:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <MX_FSMC_Init+0xb8>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80035b0:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <MX_FSMC_Init+0xb8>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80035b6:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <MX_FSMC_Init+0xb8>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80035bc:	230f      	movs	r3, #15
 80035be:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80035c0:	230f      	movs	r3, #15
 80035c2:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80035c4:	23ff      	movs	r3, #255	; 0xff
 80035c6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80035c8:	230f      	movs	r3, #15
 80035ca:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80035cc:	2310      	movs	r3, #16
 80035ce:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80035d0:	2311      	movs	r3, #17
 80035d2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 80035d8:	1d3b      	adds	r3, r7, #4
 80035da:	2200      	movs	r2, #0
 80035dc:	4619      	mov	r1, r3
 80035de:	4806      	ldr	r0, [pc, #24]	; (80035f8 <MX_FSMC_Init+0xb8>)
 80035e0:	f008 fdc2 	bl	800c168 <HAL_NOR_Init>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80035ea:	f000 fcf7 	bl	8003fdc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80035ee:	bf00      	nop
 80035f0:	3720      	adds	r7, #32
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20004e74 	.word	0x20004e74
 80035fc:	a0000104 	.word	0xa0000104

08003600 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003606:	1d3b      	adds	r3, r7, #4
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8003614:	4b24      	ldr	r3, [pc, #144]	; (80036a8 <HAL_FSMC_MspInit+0xa8>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d140      	bne.n	800369e <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 800361c:	4b22      	ldr	r3, [pc, #136]	; (80036a8 <HAL_FSMC_MspInit+0xa8>)
 800361e:	2201      	movs	r2, #1
 8003620:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	4b21      	ldr	r3, [pc, #132]	; (80036ac <HAL_FSMC_MspInit+0xac>)
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	4a20      	ldr	r2, [pc, #128]	; (80036ac <HAL_FSMC_MspInit+0xac>)
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	6393      	str	r3, [r2, #56]	; 0x38
 8003632:	4b1e      	ldr	r3, [pc, #120]	; (80036ac <HAL_FSMC_MspInit+0xac>)
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800363e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003642:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003644:	2302      	movs	r3, #2
 8003646:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800364c:	2303      	movs	r3, #3
 800364e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003650:	230c      	movs	r3, #12
 8003652:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003654:	1d3b      	adds	r3, r7, #4
 8003656:	4619      	mov	r1, r3
 8003658:	4815      	ldr	r0, [pc, #84]	; (80036b0 <HAL_FSMC_MspInit+0xb0>)
 800365a:	f008 fbd1 	bl	800be00 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800365e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8003662:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003664:	2302      	movs	r3, #2
 8003666:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800366c:	2303      	movs	r3, #3
 800366e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003670:	230c      	movs	r3, #12
 8003672:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003674:	1d3b      	adds	r3, r7, #4
 8003676:	4619      	mov	r1, r3
 8003678:	480e      	ldr	r0, [pc, #56]	; (80036b4 <HAL_FSMC_MspInit+0xb4>)
 800367a:	f008 fbc1 	bl	800be00 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003682:	2302      	movs	r3, #2
 8003684:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800368a:	2303      	movs	r3, #3
 800368c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800368e:	230c      	movs	r3, #12
 8003690:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003692:	1d3b      	adds	r3, r7, #4
 8003694:	4619      	mov	r1, r3
 8003696:	4808      	ldr	r0, [pc, #32]	; (80036b8 <HAL_FSMC_MspInit+0xb8>)
 8003698:	f008 fbb2 	bl	800be00 <HAL_GPIO_Init>
 800369c:	e000      	b.n	80036a0 <HAL_FSMC_MspInit+0xa0>
    return;
 800369e:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20000ffc 	.word	0x20000ffc
 80036ac:	40023800 	.word	0x40023800
 80036b0:	40021000 	.word	0x40021000
 80036b4:	40020c00 	.word	0x40020c00
 80036b8:	40020400 	.word	0x40020400

080036bc <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 80036c4:	f7ff ff9c 	bl	8003600 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 80036c8:	bf00      	nop
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08a      	sub	sp, #40	; 0x28
 80036d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d6:	f107 0314 	add.w	r3, r7, #20
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	605a      	str	r2, [r3, #4]
 80036e0:	609a      	str	r2, [r3, #8]
 80036e2:	60da      	str	r2, [r3, #12]
 80036e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	4b51      	ldr	r3, [pc, #324]	; (8003830 <MX_GPIO_Init+0x160>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	4a50      	ldr	r2, [pc, #320]	; (8003830 <MX_GPIO_Init+0x160>)
 80036f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f4:	6313      	str	r3, [r2, #48]	; 0x30
 80036f6:	4b4e      	ldr	r3, [pc, #312]	; (8003830 <MX_GPIO_Init+0x160>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	4b4a      	ldr	r3, [pc, #296]	; (8003830 <MX_GPIO_Init+0x160>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	4a49      	ldr	r2, [pc, #292]	; (8003830 <MX_GPIO_Init+0x160>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	6313      	str	r3, [r2, #48]	; 0x30
 8003712:	4b47      	ldr	r3, [pc, #284]	; (8003830 <MX_GPIO_Init+0x160>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800371e:	2300      	movs	r3, #0
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	4b43      	ldr	r3, [pc, #268]	; (8003830 <MX_GPIO_Init+0x160>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	4a42      	ldr	r2, [pc, #264]	; (8003830 <MX_GPIO_Init+0x160>)
 8003728:	f043 0310 	orr.w	r3, r3, #16
 800372c:	6313      	str	r3, [r2, #48]	; 0x30
 800372e:	4b40      	ldr	r3, [pc, #256]	; (8003830 <MX_GPIO_Init+0x160>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	f003 0310 	and.w	r3, r3, #16
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800373a:	2300      	movs	r3, #0
 800373c:	607b      	str	r3, [r7, #4]
 800373e:	4b3c      	ldr	r3, [pc, #240]	; (8003830 <MX_GPIO_Init+0x160>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	4a3b      	ldr	r2, [pc, #236]	; (8003830 <MX_GPIO_Init+0x160>)
 8003744:	f043 0302 	orr.w	r3, r3, #2
 8003748:	6313      	str	r3, [r2, #48]	; 0x30
 800374a:	4b39      	ldr	r3, [pc, #228]	; (8003830 <MX_GPIO_Init+0x160>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	607b      	str	r3, [r7, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003756:	2300      	movs	r3, #0
 8003758:	603b      	str	r3, [r7, #0]
 800375a:	4b35      	ldr	r3, [pc, #212]	; (8003830 <MX_GPIO_Init+0x160>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	4a34      	ldr	r2, [pc, #208]	; (8003830 <MX_GPIO_Init+0x160>)
 8003760:	f043 0308 	orr.w	r3, r3, #8
 8003764:	6313      	str	r3, [r2, #48]	; 0x30
 8003766:	4b32      	ldr	r3, [pc, #200]	; (8003830 <MX_GPIO_Init+0x160>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	603b      	str	r3, [r7, #0]
 8003770:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 8003772:	2200      	movs	r2, #0
 8003774:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8003778:	482e      	ldr	r0, [pc, #184]	; (8003834 <MX_GPIO_Init+0x164>)
 800377a:	f008 fcdb 	bl	800c134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 800377e:	2200      	movs	r2, #0
 8003780:	f641 0148 	movw	r1, #6216	; 0x1848
 8003784:	482c      	ldr	r0, [pc, #176]	; (8003838 <MX_GPIO_Init+0x168>)
 8003786:	f008 fcd5 	bl	800c134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 800378a:	2200      	movs	r2, #0
 800378c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003790:	482a      	ldr	r0, [pc, #168]	; (800383c <MX_GPIO_Init+0x16c>)
 8003792:	f008 fccf 	bl	800c134 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 8003796:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 800379a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800379c:	2301      	movs	r3, #1
 800379e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a4:	2300      	movs	r3, #0
 80037a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a8:	f107 0314 	add.w	r3, r7, #20
 80037ac:	4619      	mov	r1, r3
 80037ae:	4821      	ldr	r0, [pc, #132]	; (8003834 <MX_GPIO_Init+0x164>)
 80037b0:	f008 fb26 	bl	800be00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 80037b4:	f640 0348 	movw	r3, #2120	; 0x848
 80037b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037ba:	2301      	movs	r3, #1
 80037bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c2:	2300      	movs	r3, #0
 80037c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037c6:	f107 0314 	add.w	r3, r7, #20
 80037ca:	4619      	mov	r1, r3
 80037cc:	481a      	ldr	r0, [pc, #104]	; (8003838 <MX_GPIO_Init+0x168>)
 80037ce:	f008 fb17 	bl	800be00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 80037d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037d8:	2301      	movs	r3, #1
 80037da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037dc:	2300      	movs	r3, #0
 80037de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037e0:	2303      	movs	r3, #3
 80037e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 80037e4:	f107 0314 	add.w	r3, r7, #20
 80037e8:	4619      	mov	r1, r3
 80037ea:	4813      	ldr	r0, [pc, #76]	; (8003838 <MX_GPIO_Init+0x168>)
 80037ec:	f008 fb08 	bl	800be00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 80037f0:	f242 0304 	movw	r3, #8196	; 0x2004
 80037f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037f6:	2300      	movs	r3, #0
 80037f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037fa:	2301      	movs	r3, #1
 80037fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037fe:	f107 0314 	add.w	r3, r7, #20
 8003802:	4619      	mov	r1, r3
 8003804:	480c      	ldr	r0, [pc, #48]	; (8003838 <MX_GPIO_Init+0x168>)
 8003806:	f008 fafb 	bl	800be00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 800380a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800380e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003810:	2301      	movs	r3, #1
 8003812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003814:	2300      	movs	r3, #0
 8003816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003818:	2300      	movs	r3, #0
 800381a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800381c:	f107 0314 	add.w	r3, r7, #20
 8003820:	4619      	mov	r1, r3
 8003822:	4806      	ldr	r0, [pc, #24]	; (800383c <MX_GPIO_Init+0x16c>)
 8003824:	f008 faec 	bl	800be00 <HAL_GPIO_Init>

}
 8003828:	bf00      	nop
 800382a:	3728      	adds	r7, #40	; 0x28
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40023800 	.word	0x40023800
 8003834:	40020400 	.word	0x40020400
 8003838:	40020c00 	.word	0x40020c00
 800383c:	40020000 	.word	0x40020000

08003840 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8003840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003842:	b08b      	sub	sp, #44	; 0x2c
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800384e:	eeb0 0a47 	vmov.f32	s0, s14
 8003852:	eef0 0a67 	vmov.f32	s1, s15
 8003856:	f015 ffef 	bl	8019838 <cos>
 800385a:	ec51 0b10 	vmov	r0, r1, d0
 800385e:	a38e      	add	r3, pc, #568	; (adr r3, 8003a98 <kinematicForward+0x258>)
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	f7fc fec8 	bl	80005f8 <__aeabi_dmul>
 8003868:	4603      	mov	r3, r0
 800386a:	460c      	mov	r4, r1
 800386c:	461d      	mov	r5, r3
 800386e:	4626      	mov	r6, r4
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800387c:	461a      	mov	r2, r3
 800387e:	4623      	mov	r3, r4
 8003880:	f7fc fd04 	bl	800028c <__adddf3>
 8003884:	4603      	mov	r3, r0
 8003886:	460c      	mov	r4, r1
 8003888:	ec44 3b17 	vmov	d7, r3, r4
 800388c:	eeb0 0a47 	vmov.f32	s0, s14
 8003890:	eef0 0a67 	vmov.f32	s1, s15
 8003894:	f015 ffd0 	bl	8019838 <cos>
 8003898:	ec51 0b10 	vmov	r0, r1, d0
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	4b83      	ldr	r3, [pc, #524]	; (8003ab0 <kinematicForward+0x270>)
 80038a2:	f7fc fea9 	bl	80005f8 <__aeabi_dmul>
 80038a6:	4603      	mov	r3, r0
 80038a8:	460c      	mov	r4, r1
 80038aa:	461a      	mov	r2, r3
 80038ac:	4623      	mov	r3, r4
 80038ae:	4628      	mov	r0, r5
 80038b0:	4631      	mov	r1, r6
 80038b2:	f7fc fceb 	bl	800028c <__adddf3>
 80038b6:	4603      	mov	r3, r0
 80038b8:	460c      	mov	r4, r1
 80038ba:	461d      	mov	r5, r3
 80038bc:	4626      	mov	r6, r4
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80038ca:	461a      	mov	r2, r3
 80038cc:	4623      	mov	r3, r4
 80038ce:	f7fc fcdd 	bl	800028c <__adddf3>
 80038d2:	4603      	mov	r3, r0
 80038d4:	460c      	mov	r4, r1
 80038d6:	4618      	mov	r0, r3
 80038d8:	4621      	mov	r1, r4
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80038e0:	461a      	mov	r2, r3
 80038e2:	4623      	mov	r3, r4
 80038e4:	f7fc fcd0 	bl	8000288 <__aeabi_dsub>
 80038e8:	4603      	mov	r3, r0
 80038ea:	460c      	mov	r4, r1
 80038ec:	ec44 3b17 	vmov	d7, r3, r4
 80038f0:	eeb0 0a47 	vmov.f32	s0, s14
 80038f4:	eef0 0a67 	vmov.f32	s1, s15
 80038f8:	f015 ff9e 	bl	8019838 <cos>
 80038fc:	ec51 0b10 	vmov	r0, r1, d0
 8003900:	a363      	add	r3, pc, #396	; (adr r3, 8003a90 <kinematicForward+0x250>)
 8003902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003906:	f7fc fe77 	bl	80005f8 <__aeabi_dmul>
 800390a:	4603      	mov	r3, r0
 800390c:	460c      	mov	r4, r1
	x =   a1*cos(pnt->Theta1)
 800390e:	461a      	mov	r2, r3
 8003910:	4623      	mov	r3, r4
 8003912:	4628      	mov	r0, r5
 8003914:	4631      	mov	r1, r6
 8003916:	f7fc fcb9 	bl	800028c <__adddf3>
 800391a:	4603      	mov	r3, r0
 800391c:	460c      	mov	r4, r1
 800391e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8003928:	eeb0 0a47 	vmov.f32	s0, s14
 800392c:	eef0 0a67 	vmov.f32	s1, s15
 8003930:	f016 f812 	bl	8019958 <sin>
 8003934:	ec51 0b10 	vmov	r0, r1, d0
 8003938:	a357      	add	r3, pc, #348	; (adr r3, 8003a98 <kinematicForward+0x258>)
 800393a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393e:	f7fc fe5b 	bl	80005f8 <__aeabi_dmul>
 8003942:	4603      	mov	r3, r0
 8003944:	460c      	mov	r4, r1
 8003946:	461d      	mov	r5, r3
 8003948:	4626      	mov	r6, r4
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8003956:	461a      	mov	r2, r3
 8003958:	4623      	mov	r3, r4
 800395a:	f7fc fc97 	bl	800028c <__adddf3>
 800395e:	4603      	mov	r3, r0
 8003960:	460c      	mov	r4, r1
 8003962:	ec44 3b17 	vmov	d7, r3, r4
 8003966:	eeb0 0a47 	vmov.f32	s0, s14
 800396a:	eef0 0a67 	vmov.f32	s1, s15
 800396e:	f015 fff3 	bl	8019958 <sin>
 8003972:	ec51 0b10 	vmov	r0, r1, d0
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	4b4d      	ldr	r3, [pc, #308]	; (8003ab0 <kinematicForward+0x270>)
 800397c:	f7fc fe3c 	bl	80005f8 <__aeabi_dmul>
 8003980:	4603      	mov	r3, r0
 8003982:	460c      	mov	r4, r1
 8003984:	461a      	mov	r2, r3
 8003986:	4623      	mov	r3, r4
 8003988:	4628      	mov	r0, r5
 800398a:	4631      	mov	r1, r6
 800398c:	f7fc fc7e 	bl	800028c <__adddf3>
 8003990:	4603      	mov	r3, r0
 8003992:	460c      	mov	r4, r1
 8003994:	461d      	mov	r5, r3
 8003996:	4626      	mov	r6, r4
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80039a4:	461a      	mov	r2, r3
 80039a6:	4623      	mov	r3, r4
 80039a8:	f7fc fc70 	bl	800028c <__adddf3>
 80039ac:	4603      	mov	r3, r0
 80039ae:	460c      	mov	r4, r1
 80039b0:	4618      	mov	r0, r3
 80039b2:	4621      	mov	r1, r4
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80039ba:	461a      	mov	r2, r3
 80039bc:	4623      	mov	r3, r4
 80039be:	f7fc fc63 	bl	8000288 <__aeabi_dsub>
 80039c2:	4603      	mov	r3, r0
 80039c4:	460c      	mov	r4, r1
 80039c6:	ec44 3b17 	vmov	d7, r3, r4
 80039ca:	eeb0 0a47 	vmov.f32	s0, s14
 80039ce:	eef0 0a67 	vmov.f32	s1, s15
 80039d2:	f015 ffc1 	bl	8019958 <sin>
 80039d6:	ec51 0b10 	vmov	r0, r1, d0
 80039da:	a32d      	add	r3, pc, #180	; (adr r3, 8003a90 <kinematicForward+0x250>)
 80039dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e0:	f7fc fe0a 	bl	80005f8 <__aeabi_dmul>
 80039e4:	4603      	mov	r3, r0
 80039e6:	460c      	mov	r4, r1
	y =   a1*sin(pnt->Theta1)
 80039e8:	461a      	mov	r2, r3
 80039ea:	4623      	mov	r3, r4
 80039ec:	4628      	mov	r0, r5
 80039ee:	4631      	mov	r1, r6
 80039f0:	f7fc fc4c 	bl	800028c <__adddf3>
 80039f4:	4603      	mov	r3, r0
 80039f6:	460c      	mov	r4, r1
 80039f8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8003a02:	461a      	mov	r2, r3
 8003a04:	4623      	mov	r3, r4
 8003a06:	a126      	add	r1, pc, #152	; (adr r1, 8003aa0 <kinematicForward+0x260>)
 8003a08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a0c:	f7fc fc3c 	bl	8000288 <__aeabi_dsub>
 8003a10:	4603      	mov	r3, r0
 8003a12:	460c      	mov	r4, r1
 8003a14:	4618      	mov	r0, r3
 8003a16:	4621      	mov	r1, r4
 8003a18:	a323      	add	r3, pc, #140	; (adr r3, 8003aa8 <kinematicForward+0x268>)
 8003a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1e:	f7fc fc33 	bl	8000288 <__aeabi_dsub>
 8003a22:	4603      	mov	r3, r0
 8003a24:	460c      	mov	r4, r1
 8003a26:	e9c7 3404 	strd	r3, r4, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8003a36:	461a      	mov	r2, r3
 8003a38:	4623      	mov	r3, r4
 8003a3a:	f7fc fc27 	bl	800028c <__adddf3>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	460c      	mov	r4, r1
 8003a42:	4618      	mov	r0, r3
 8003a44:	4621      	mov	r1, r4
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4623      	mov	r3, r4
 8003a50:	f7fc fc1a 	bl	8000288 <__aeabi_dsub>
 8003a54:	4603      	mov	r3, r0
 8003a56:	460c      	mov	r4, r1
 8003a58:	e9c7 3402 	strd	r3, r4, [r7, #8]

	pnt->x = x;
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003a62:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	pnt->y = y;
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003a6c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	pnt->z = z;
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003a76:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	pnt->roll = roll;
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003a80:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	return TRUE;
 8003a84:	2301      	movs	r3, #1
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	372c      	adds	r7, #44	; 0x2c
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	80000000 	.word	0x80000000
 8003a94:	40402e14 	.word	0x40402e14
 8003a98:	00000000 	.word	0x00000000
 8003a9c:	4068a000 	.word	0x4068a000
 8003aa0:	00000000 	.word	0x00000000
 8003aa4:	406a6000 	.word	0x406a6000
 8003aa8:	e0000000 	.word	0xe0000000
 8003aac:	40536b22 	.word	0x40536b22
 8003ab0:	40640000 	.word	0x40640000
 8003ab4:	00000000 	.word	0x00000000

08003ab8 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8003ab8:	b082      	sub	sp, #8
 8003aba:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003abe:	b0a0      	sub	sp, #128	; 0x80
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8003ac8:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003ad2:	a1f2      	add	r1, pc, #968	; (adr r1, 8003e9c <kinematicInverse+0x3e4>)
 8003ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ad8:	f7fc fbd6 	bl	8000288 <__aeabi_dsub>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8003af0:	eeb0 0a47 	vmov.f32	s0, s14
 8003af4:	eef0 0a67 	vmov.f32	s1, s15
 8003af8:	f015 fe9e 	bl	8019838 <cos>
 8003afc:	ec51 0b10 	vmov	r0, r1, d0
 8003b00:	a3e8      	add	r3, pc, #928	; (adr r3, 8003ea4 <kinematicInverse+0x3ec>)
 8003b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b06:	f7fc fd77 	bl	80005f8 <__aeabi_dmul>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4650      	mov	r0, sl
 8003b10:	4659      	mov	r1, fp
 8003b12:	f7fc fbb9 	bl	8000288 <__aeabi_dsub>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8003b2a:	eeb0 0a47 	vmov.f32	s0, s14
 8003b2e:	eef0 0a67 	vmov.f32	s1, s15
 8003b32:	f015 ff11 	bl	8019958 <sin>
 8003b36:	ec51 0b10 	vmov	r0, r1, d0
 8003b3a:	a3da      	add	r3, pc, #872	; (adr r3, 8003ea4 <kinematicInverse+0x3ec>)
 8003b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b40:	f7fc fd5a 	bl	80005f8 <__aeabi_dmul>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4650      	mov	r0, sl
 8003b4a:	4659      	mov	r1, fp
 8003b4c:	f7fc fb9c 	bl	8000288 <__aeabi_dsub>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 8003b58:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003b5c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003b60:	f7fc fd4a 	bl	80005f8 <__aeabi_dmul>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	4692      	mov	sl, r2
 8003b6a:	469b      	mov	fp, r3
 8003b6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b70:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003b74:	f7fc fd40 	bl	80005f8 <__aeabi_dmul>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4650      	mov	r0, sl
 8003b7e:	4659      	mov	r1, fp
 8003b80:	f7fc fb84 	bl	800028c <__adddf3>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4610      	mov	r0, r2
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	a3c7      	add	r3, pc, #796	; (adr r3, 8003eac <kinematicInverse+0x3f4>)
 8003b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b92:	f7fc fb79 	bl	8000288 <__aeabi_dsub>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	4bbb      	ldr	r3, [pc, #748]	; (8003e90 <kinematicInverse+0x3d8>)
 8003ba4:	f7fc fb70 	bl	8000288 <__aeabi_dsub>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4610      	mov	r0, r2
 8003bae:	4619      	mov	r1, r3
 8003bb0:	a3b3      	add	r3, pc, #716	; (adr r3, 8003e80 <kinematicInverse+0x3c8>)
 8003bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb6:	f7fc fe49 	bl	800084c <__aeabi_ddiv>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 8003bc2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003bc6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003bca:	f7fc fd15 	bl	80005f8 <__aeabi_dmul>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	f04f 0000 	mov.w	r0, #0
 8003bd6:	49af      	ldr	r1, [pc, #700]	; (8003e94 <kinematicInverse+0x3dc>)
 8003bd8:	f7fc fb56 	bl	8000288 <__aeabi_dsub>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003bf0:	f7fc ff74 	bl	8000adc <__aeabi_dcmplt>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <kinematicInverse+0x146>
		return FALSE;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e136      	b.n	8003e6c <kinematicInverse+0x3b4>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 8003bfe:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8003c02:	f015 ff33 	bl	8019a6c <sqrt>
 8003c06:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 8003c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c10:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003c14:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 8003c16:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8003c1a:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8003c1e:	f015 ff23 	bl	8019a68 <atan2>
 8003c22:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 8003c26:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8003c2a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8003c2e:	f015 ff1b 	bl	8019a68 <atan2>
 8003c32:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 8003c36:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003c3a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003c3e:	f7fc fb23 	bl	8000288 <__aeabi_dsub>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4614      	mov	r4, r2
 8003c48:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003c4c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003c50:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c54:	f7fc fb18 	bl	8000288 <__aeabi_dsub>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4690      	mov	r8, r2
 8003c5e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003c62:	4642      	mov	r2, r8
 8003c64:	464b      	mov	r3, r9
 8003c66:	4620      	mov	r0, r4
 8003c68:	4629      	mov	r1, r5
 8003c6a:	f7fc ff41 	bl	8000af0 <__aeabi_dcmple>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 8003c74:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003c78:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 8003c7c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003c80:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8003c84:	e007      	b.n	8003c96 <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 8003c86:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8003c8a:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 8003c8e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003c92:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	4b7f      	ldr	r3, [pc, #508]	; (8003e98 <kinematicInverse+0x3e0>)
 8003c9c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003ca0:	f7fc fcaa 	bl	80005f8 <__aeabi_dmul>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	4618      	mov	r0, r3
 8003caa:	4621      	mov	r1, r4
 8003cac:	a376      	add	r3, pc, #472	; (adr r3, 8003e88 <kinematicInverse+0x3d0>)
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	f7fc faeb 	bl	800028c <__adddf3>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	460c      	mov	r4, r1
 8003cba:	4618      	mov	r0, r3
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003cc2:	f7fc fc99 	bl	80005f8 <__aeabi_dmul>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	460c      	mov	r4, r1
 8003cca:	4625      	mov	r5, r4
 8003ccc:	461c      	mov	r4, r3
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	4b71      	ldr	r3, [pc, #452]	; (8003e98 <kinematicInverse+0x3e0>)
 8003cd4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003cd8:	f7fc fc8e 	bl	80005f8 <__aeabi_dmul>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003ce8:	f7fc fc86 	bl	80005f8 <__aeabi_dmul>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	4629      	mov	r1, r5
 8003cf4:	f7fc fac8 	bl	8000288 <__aeabi_dsub>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	4625      	mov	r5, r4
 8003cfe:	461c      	mov	r4, r3
 8003d00:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003d04:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003d08:	f7fc fc76 	bl	80005f8 <__aeabi_dmul>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4690      	mov	r8, r2
 8003d12:	4699      	mov	r9, r3
 8003d14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d18:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003d1c:	f7fc fc6c 	bl	80005f8 <__aeabi_dmul>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4640      	mov	r0, r8
 8003d26:	4649      	mov	r1, r9
 8003d28:	f7fc fab0 	bl	800028c <__adddf3>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4620      	mov	r0, r4
 8003d32:	4629      	mov	r1, r5
 8003d34:	f7fc fd8a 	bl	800084c <__aeabi_ddiv>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	460c      	mov	r4, r1
 8003d3c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	4b54      	ldr	r3, [pc, #336]	; (8003e98 <kinematicInverse+0x3e0>)
 8003d46:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003d4a:	f7fc fc55 	bl	80005f8 <__aeabi_dmul>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	460c      	mov	r4, r1
 8003d52:	4618      	mov	r0, r3
 8003d54:	4621      	mov	r1, r4
 8003d56:	a34c      	add	r3, pc, #304	; (adr r3, 8003e88 <kinematicInverse+0x3d0>)
 8003d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5c:	f7fc fa96 	bl	800028c <__adddf3>
 8003d60:	4603      	mov	r3, r0
 8003d62:	460c      	mov	r4, r1
 8003d64:	4618      	mov	r0, r3
 8003d66:	4621      	mov	r1, r4
 8003d68:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003d6c:	f7fc fc44 	bl	80005f8 <__aeabi_dmul>
 8003d70:	4603      	mov	r3, r0
 8003d72:	460c      	mov	r4, r1
 8003d74:	4625      	mov	r5, r4
 8003d76:	461c      	mov	r4, r3
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	4b46      	ldr	r3, [pc, #280]	; (8003e98 <kinematicInverse+0x3e0>)
 8003d7e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003d82:	f7fc fc39 	bl	80005f8 <__aeabi_dmul>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d92:	f7fc fc31 	bl	80005f8 <__aeabi_dmul>
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	4629      	mov	r1, r5
 8003d9e:	f7fc fa75 	bl	800028c <__adddf3>
 8003da2:	4603      	mov	r3, r0
 8003da4:	460c      	mov	r4, r1
 8003da6:	4625      	mov	r5, r4
 8003da8:	461c      	mov	r4, r3
 8003daa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003dae:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003db2:	f7fc fc21 	bl	80005f8 <__aeabi_dmul>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	4690      	mov	r8, r2
 8003dbc:	4699      	mov	r9, r3
 8003dbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003dc2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003dc6:	f7fc fc17 	bl	80005f8 <__aeabi_dmul>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4640      	mov	r0, r8
 8003dd0:	4649      	mov	r1, r9
 8003dd2:	f7fc fa5b 	bl	800028c <__adddf3>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4620      	mov	r0, r4
 8003ddc:	4629      	mov	r1, r5
 8003dde:	f7fc fd35 	bl	800084c <__aeabi_ddiv>
 8003de2:	4603      	mov	r3, r0
 8003de4:	460c      	mov	r4, r1
 8003de6:	e9c7 3406 	strd	r3, r4, [r7, #24]
	theta1 = atan2(s1,c1);
 8003dea:	ed97 1b06 	vldr	d1, [r7, #24]
 8003dee:	ed97 0b08 	vldr	d0, [r7, #32]
 8003df2:	f015 fe39 	bl	8019a68 <atan2>
 8003df6:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 8003dfa:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003dfe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e02:	f7fc fa43 	bl	800028c <__adddf3>
 8003e06:	4603      	mov	r3, r0
 8003e08:	460c      	mov	r4, r1
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	4621      	mov	r1, r4
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8003e14:	461a      	mov	r2, r3
 8003e16:	4623      	mov	r3, r4
 8003e18:	f7fc fa36 	bl	8000288 <__aeabi_dsub>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	460c      	mov	r4, r1
 8003e20:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 8003e24:	ed97 3b02 	vldr	d3, [r7, #8]
 8003e28:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 8003e2c:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 8003e30:	ed97 0b04 	vldr	d0, [r7, #16]
 8003e34:	f006 f958 	bl	800a0e8 <scaraCheckWorkSpace4>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <kinematicInverse+0x38a>
		return FALSE; // Over workspace !!!
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e014      	b.n	8003e6c <kinematicInverse+0x3b4>
	}
	pnt->Theta1 = theta1;
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003e48:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	pnt->Theta2 = theta2;
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003e52:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	pnt->D3		= d3;
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003e5c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	pnt->Theta4 = theta4;
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003e66:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	return TRUE; // All is well
 8003e6a:	2301      	movs	r3, #1
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3780      	adds	r7, #128	; 0x80
 8003e70:	46bd      	mov	sp, r7
 8003e72:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e76:	b002      	add	sp, #8
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	f3af 8000 	nop.w
 8003e80:	00000000 	.word	0x00000000
 8003e84:	40eec800 	.word	0x40eec800
 8003e88:	00000000 	.word	0x00000000
 8003e8c:	4068a000 	.word	0x4068a000
 8003e90:	40d90000 	.word	0x40d90000
 8003e94:	3ff00000 	.word	0x3ff00000
 8003e98:	40640000 	.word	0x40640000
 8003e9c:	80000000 	.word	0x80000000
 8003ea0:	4060aa6e 	.word	0x4060aa6e
 8003ea4:	80000000 	.word	0x80000000
 8003ea8:	40402e14 	.word	0x40402e14
 8003eac:	00000000 	.word	0x00000000
 8003eb0:	40e2f320 	.word	0x40e2f320

08003eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003eb8:	f007 fabe 	bl	800b438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ebc:	f000 f812 	bl	8003ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ec0:	f7ff fc06 	bl	80036d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003ec4:	f7fd fe68 	bl	8001b98 <MX_DMA_Init>
  MX_UART4_Init();
 8003ec8:	f007 f9b8 	bl	800b23c <MX_UART4_Init>
  MX_FSMC_Init();
 8003ecc:	f7ff fb38 	bl	8003540 <MX_FSMC_Init>
  MX_TIM7_Init();
 8003ed0:	f007 f942 	bl	800b158 <MX_TIM7_Init>
  MX_TIM2_Init();
 8003ed4:	f007 f8f2 	bl	800b0bc <MX_TIM2_Init>
  //lowlayer_writePulse(0, 0, 0, 0);
  //HAL_Delay(10);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003ed8:	f7fd fe98 	bl	8001c0c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8003edc:	f00e fb0d 	bl	80124fa <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 8003ee0:	e7fe      	b.n	8003ee0 <main+0x2c>
	...

08003ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b094      	sub	sp, #80	; 0x50
 8003ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003eea:	f107 0320 	add.w	r3, r7, #32
 8003eee:	2230      	movs	r2, #48	; 0x30
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f011 fed6 	bl	8015ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ef8:	f107 030c 	add.w	r3, r7, #12
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	605a      	str	r2, [r3, #4]
 8003f02:	609a      	str	r2, [r3, #8]
 8003f04:	60da      	str	r2, [r3, #12]
 8003f06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	4b28      	ldr	r3, [pc, #160]	; (8003fb0 <SystemClock_Config+0xcc>)
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	4a27      	ldr	r2, [pc, #156]	; (8003fb0 <SystemClock_Config+0xcc>)
 8003f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f16:	6413      	str	r3, [r2, #64]	; 0x40
 8003f18:	4b25      	ldr	r3, [pc, #148]	; (8003fb0 <SystemClock_Config+0xcc>)
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f24:	2300      	movs	r3, #0
 8003f26:	607b      	str	r3, [r7, #4]
 8003f28:	4b22      	ldr	r3, [pc, #136]	; (8003fb4 <SystemClock_Config+0xd0>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a21      	ldr	r2, [pc, #132]	; (8003fb4 <SystemClock_Config+0xd0>)
 8003f2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	4b1f      	ldr	r3, [pc, #124]	; (8003fb4 <SystemClock_Config+0xd0>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f3c:	607b      	str	r3, [r7, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f40:	2301      	movs	r3, #1
 8003f42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003f54:	2308      	movs	r3, #8
 8003f56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003f58:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003f5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003f62:	2307      	movs	r3, #7
 8003f64:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f66:	f107 0320 	add.w	r3, r7, #32
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f009 fad6 	bl	800d51c <HAL_RCC_OscConfig>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003f76:	f000 f831 	bl	8003fdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f7a:	230f      	movs	r3, #15
 8003f7c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f7e:	2302      	movs	r3, #2
 8003f80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003f86:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f90:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003f92:	f107 030c 	add.w	r3, r7, #12
 8003f96:	2105      	movs	r1, #5
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f009 fd2f 	bl	800d9fc <HAL_RCC_ClockConfig>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003fa4:	f000 f81a 	bl	8003fdc <Error_Handler>
  }
}
 8003fa8:	bf00      	nop
 8003faa:	3750      	adds	r7, #80	; 0x50
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	40007000 	.word	0x40007000

08003fb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a04      	ldr	r2, [pc, #16]	; (8003fd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d101      	bne.n	8003fce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003fca:	f007 fa57 	bl	800b47c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40001000 	.word	0x40001000

08003fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003fe0:	bf00      	nop
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <ringBuff_PushChar+0x1a>
		return FALSE;
 8004000:	2300      	movs	r3, #0
 8004002:	e024      	b.n	800404e <ringBuff_PushChar+0x64>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	78f9      	ldrb	r1, [r7, #3]
 800400e:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004016:	3301      	adds	r3, #1
 8004018:	425a      	negs	r2, r3
 800401a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800401e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004022:	bf58      	it	pl
 8004024:	4253      	negpl	r3, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
			if (ringbuff->head == ringbuff->tail) {
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004038:	429a      	cmp	r2, r3
 800403a:	d103      	bne.n	8004044 <ringBuff_PushChar+0x5a>
				ringbuff->isFull_Flag = TRUE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			}
			ringbuff->isEmpty_Flag = FALSE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			return TRUE;
 800404c:	2301      	movs	r3, #1
	}
}
 800404e:	4618      	mov	r0, r3
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <ringBuff_PopChar+0x18>
		return FALSE;
 800406e:	2300      	movs	r3, #0
 8004070:	e025      	b.n	80040be <ringBuff_PopChar+0x64>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	5cd2      	ldrb	r2, [r2, r3]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004086:	3301      	adds	r3, #1
 8004088:	425a      	negs	r2, r3
 800408a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800408e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004092:	bf58      	it	pl
 8004094:	4253      	negpl	r3, r2
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			if (ringbuff->head == ringbuff->tail) {
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d103      	bne.n	80040b4 <ringBuff_PopChar+0x5a>
				ringbuff->isEmpty_Flag = TRUE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			}
			ringbuff->isFull_Flag = FALSE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			return TRUE;
 80040bc:	2301      	movs	r3, #1
	}
}
 80040be:	4618      	mov	r0, r3
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b086      	sub	sp, #24
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 80040d6:	2300      	movs	r3, #0
 80040d8:	82fb      	strh	r3, [r7, #22]
 80040da:	e011      	b.n	8004100 <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 80040dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	4413      	add	r3, r2
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	4619      	mov	r1, r3
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f7ff ff7e 	bl	8003fea <ringBuff_PushChar>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00b      	beq.n	800410c <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 80040f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3301      	adds	r3, #1
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	82fb      	strh	r3, [r7, #22]
 8004100:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	429a      	cmp	r2, r3
 8004108:	dce8      	bgt.n	80040dc <ringBuff_PushArray+0x12>
 800410a:	e000      	b.n	800410e <ringBuff_PushArray+0x44>
			break;
 800410c:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 800410e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 800411a:	b580      	push	{r7, lr}
 800411c:	b086      	sub	sp, #24
 800411e:	af00      	add	r7, sp, #0
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	60b9      	str	r1, [r7, #8]
 8004124:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8004126:	2300      	movs	r3, #0
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	e00c      	b.n	8004146 <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	4413      	add	r3, r2
 8004132:	4619      	mov	r1, r3
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f7ff ff90 	bl	800405a <ringBuff_PopChar>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d007      	beq.n	8004150 <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	3301      	adds	r3, #1
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	429a      	cmp	r2, r3
 800414c:	dbee      	blt.n	800412c <ringBuff_PopArray+0x12>
 800414e:	e000      	b.n	8004152 <ringBuff_PopArray+0x38>
			break;
 8004150:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 8004152:	697b      	ldr	r3, [r7, #20]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, uint8_t cmp_char) {
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	70fb      	strb	r3, [r7, #3]
	int32_t index;
	int32_t distance = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	613b      	str	r3, [r7, #16]

	index = ringbuff->tail;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004172:	617b      	str	r3, [r7, #20]
	if (ringbuff->isFull_Flag) {
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 800417a:	2b00      	cmp	r3, #0
 800417c:	d036      	beq.n	80041ec <ringBuff_DistanceOf+0x90>
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 800417e:	2300      	movs	r3, #0
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	e018      	b.n	80041b6 <ringBuff_DistanceOf+0x5a>
				if ( cmp_char == ringbuff->Array[index]) {
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	4413      	add	r3, r2
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	78fa      	ldrb	r2, [r7, #3]
 800418e:	429a      	cmp	r2, r3
 8004190:	d101      	bne.n	8004196 <ringBuff_DistanceOf+0x3a>
					return distance;
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	e037      	b.n	8004206 <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	3301      	adds	r3, #1
 800419a:	613b      	str	r3, [r7, #16]
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3301      	adds	r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	3301      	adds	r3, #1
 80041a6:	425a      	negs	r2, r3
 80041a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041ac:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80041b0:	bf58      	it	pl
 80041b2:	4253      	negpl	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041bc:	dbe2      	blt.n	8004184 <ringBuff_DistanceOf+0x28>
 80041be:	e020      	b.n	8004202 <ringBuff_DistanceOf+0xa6>
			}

	} else {
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
				if ( cmp_char == ringbuff->Array[index]) {
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	4413      	add	r3, r2
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	78fa      	ldrb	r2, [r7, #3]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d101      	bne.n	80041d2 <ringBuff_DistanceOf+0x76>
					return distance;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	e019      	b.n	8004206 <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	3301      	adds	r3, #1
 80041d6:	613b      	str	r3, [r7, #16]
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	3301      	adds	r3, #1
 80041dc:	425a      	negs	r2, r3
 80041de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041e2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80041e6:	bf58      	it	pl
 80041e8:	4253      	negpl	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d1e3      	bne.n	80041c0 <ringBuff_DistanceOf+0x64>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0de      	beq.n	80041c0 <ringBuff_DistanceOf+0x64>
			}
	}
	return -1;
 8004202:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004206:	4618      	mov	r0, r3
 8004208:	371c      	adds	r7, #28
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
	...

08004214 <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
	lowlayer_resetEncoder();
 8004218:	f000 fdfe 	bl	8004e18 <lowlayer_resetEncoder>
	pulse_accumulate[0] = 0;
 800421c:	4b10      	ldr	r3, [pc, #64]	; (8004260 <lowlayer_scanReset+0x4c>)
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 8004222:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <lowlayer_scanReset+0x4c>)
 8004224:	2200      	movs	r2, #0
 8004226:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 8004228:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <lowlayer_scanReset+0x4c>)
 800422a:	2200      	movs	r2, #0
 800422c:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 800422e:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <lowlayer_scanReset+0x4c>)
 8004230:	2200      	movs	r2, #0
 8004232:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <lowlayer_scanReset+0x50>)
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 800423a:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <lowlayer_scanReset+0x50>)
 800423c:	2200      	movs	r2, #0
 800423e:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 8004240:	4b08      	ldr	r3, [pc, #32]	; (8004264 <lowlayer_scanReset+0x50>)
 8004242:	2200      	movs	r2, #0
 8004244:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 8004246:	4b08      	ldr	r3, [pc, #32]	; (8004268 <lowlayer_scanReset+0x54>)
 8004248:	2200      	movs	r2, #0
 800424a:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 800424c:	4b07      	ldr	r3, [pc, #28]	; (800426c <lowlayer_scanReset+0x58>)
 800424e:	2200      	movs	r2, #0
 8004250:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 8004252:	2200      	movs	r2, #0
 8004254:	2108      	movs	r1, #8
 8004256:	4806      	ldr	r0, [pc, #24]	; (8004270 <lowlayer_scanReset+0x5c>)
 8004258:	f007 ff6c 	bl	800c134 <HAL_GPIO_WritePin>
}
 800425c:	bf00      	nop
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20004ec0 	.word	0x20004ec0
 8004264:	20004ed4 	.word	0x20004ed4
 8004268:	20004ed0 	.word	0x20004ed0
 800426c:	20004ef0 	.word	0x20004ef0
 8004270:	40020c00 	.word	0x40020c00
 8004274:	00000000 	.word	0x00000000

08004278 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 8004278:	b590      	push	{r4, r7, lr}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 800427e:	2300      	movs	r3, #0
 8004280:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 8004282:	f000 fe87 	bl	8004f94 <lowlayer_updateLimit>
	if (state_scan < 4) {
 8004286:	4b98      	ldr	r3, [pc, #608]	; (80044e8 <lowlayer_scanFlow+0x270>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b03      	cmp	r3, #3
 800428c:	d837      	bhi.n	80042fe <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 800428e:	4b96      	ldr	r3, [pc, #600]	; (80044e8 <lowlayer_scanFlow+0x270>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	f1c3 0303 	rsb	r3, r3, #3
 8004296:	4a95      	ldr	r2, [pc, #596]	; (80044ec <lowlayer_scanFlow+0x274>)
 8004298:	5cd3      	ldrb	r3, [r2, r3]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d121      	bne.n	80042e2 <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 800429e:	4b92      	ldr	r3, [pc, #584]	; (80044e8 <lowlayer_scanFlow+0x270>)
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	f1c3 0203 	rsb	r2, r3, #3
 80042a6:	4b90      	ldr	r3, [pc, #576]	; (80044e8 <lowlayer_scanFlow+0x270>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	f1c3 0303 	rsb	r3, r3, #3
 80042ae:	4990      	ldr	r1, [pc, #576]	; (80044f0 <lowlayer_scanFlow+0x278>)
 80042b0:	568a      	ldrsb	r2, [r1, r2]
 80042b2:	f107 0108 	add.w	r1, r7, #8
 80042b6:	440b      	add	r3, r1
 80042b8:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 80042bc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	425b      	negs	r3, r3
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	b258      	sxtb	r0, r3
 80042c8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80042cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	425b      	negs	r3, r3
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	b25a      	sxtb	r2, r3
 80042d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042dc:	f000 fcd8 	bl	8004c90 <lowlayer_writePulse>
 80042e0:	e00b      	b.n	80042fa <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 80042e2:	4b81      	ldr	r3, [pc, #516]	; (80044e8 <lowlayer_scanFlow+0x270>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	3301      	adds	r3, #1
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	4b7f      	ldr	r3, [pc, #508]	; (80044e8 <lowlayer_scanFlow+0x270>)
 80042ec:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 80042ee:	2300      	movs	r3, #0
 80042f0:	2200      	movs	r2, #0
 80042f2:	2100      	movs	r1, #0
 80042f4:	2000      	movs	r0, #0
 80042f6:	f000 fccb 	bl	8004c90 <lowlayer_writePulse>
		}

		return FALSE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e0d8      	b.n	80044b0 <lowlayer_scanFlow+0x238>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 80042fe:	2201      	movs	r2, #1
 8004300:	2108      	movs	r1, #8
 8004302:	487c      	ldr	r0, [pc, #496]	; (80044f4 <lowlayer_scanFlow+0x27c>)
 8004304:	f007 ff16 	bl	800c134 <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 8004308:	f000 fe28 	bl	8004f5c <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 800430c:	2300      	movs	r3, #0
 800430e:	2200      	movs	r2, #0
 8004310:	2100      	movs	r1, #0
 8004312:	2000      	movs	r0, #0
 8004314:	f000 fcbc 	bl	8004c90 <lowlayer_writePulse>
		scan_flag = 1;
 8004318:	4b77      	ldr	r3, [pc, #476]	; (80044f8 <lowlayer_scanFlow+0x280>)
 800431a:	2201      	movs	r2, #1
 800431c:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 800431e:	4b77      	ldr	r3, [pc, #476]	; (80044fc <lowlayer_scanFlow+0x284>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a77      	ldr	r2, [pc, #476]	; (8004500 <lowlayer_scanFlow+0x288>)
 8004324:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 8004326:	4b75      	ldr	r3, [pc, #468]	; (80044fc <lowlayer_scanFlow+0x284>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	4a75      	ldr	r2, [pc, #468]	; (8004500 <lowlayer_scanFlow+0x288>)
 800432c:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 800432e:	4b73      	ldr	r3, [pc, #460]	; (80044fc <lowlayer_scanFlow+0x284>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	4a73      	ldr	r2, [pc, #460]	; (8004500 <lowlayer_scanFlow+0x288>)
 8004334:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 8004336:	4b73      	ldr	r3, [pc, #460]	; (8004504 <lowlayer_scanFlow+0x28c>)
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	4a73      	ldr	r2, [pc, #460]	; (8004508 <lowlayer_scanFlow+0x290>)
 800433c:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 800433e:	4b70      	ldr	r3, [pc, #448]	; (8004500 <lowlayer_scanFlow+0x288>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	b29b      	uxth	r3, r3
 8004344:	4619      	mov	r1, r3
 8004346:	4871      	ldr	r0, [pc, #452]	; (800450c <lowlayer_scanFlow+0x294>)
 8004348:	f7fd fb6a 	bl	8001a20 <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 800434c:	4b6c      	ldr	r3, [pc, #432]	; (8004500 <lowlayer_scanFlow+0x288>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	b29b      	uxth	r3, r3
 8004352:	4619      	mov	r1, r3
 8004354:	486e      	ldr	r0, [pc, #440]	; (8004510 <lowlayer_scanFlow+0x298>)
 8004356:	f7fd fb63 	bl	8001a20 <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 800435a:	4b69      	ldr	r3, [pc, #420]	; (8004500 <lowlayer_scanFlow+0x288>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	b29b      	uxth	r3, r3
 8004360:	4619      	mov	r1, r3
 8004362:	486c      	ldr	r0, [pc, #432]	; (8004514 <lowlayer_scanFlow+0x29c>)
 8004364:	f7fd fb5c 	bl	8001a20 <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 8004368:	4b67      	ldr	r3, [pc, #412]	; (8004508 <lowlayer_scanFlow+0x290>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	b29b      	uxth	r3, r3
 800436e:	4619      	mov	r1, r3
 8004370:	4869      	ldr	r0, [pc, #420]	; (8004518 <lowlayer_scanFlow+0x2a0>)
 8004372:	f7fd fb55 	bl	8001a20 <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 8004376:	4b62      	ldr	r3, [pc, #392]	; (8004500 <lowlayer_scanFlow+0x288>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004382:	ee17 0a90 	vmov	r0, s15
 8004386:	f7fc f8df 	bl	8000548 <__aeabi_f2d>
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	f7fb ff7d 	bl	800028c <__adddf3>
 8004392:	4603      	mov	r3, r0
 8004394:	460c      	mov	r4, r1
 8004396:	4618      	mov	r0, r3
 8004398:	4621      	mov	r1, r4
 800439a:	a347      	add	r3, pc, #284	; (adr r3, 80044b8 <lowlayer_scanFlow+0x240>)
 800439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a0:	f7fc f92a 	bl	80005f8 <__aeabi_dmul>
 80043a4:	4603      	mov	r3, r0
 80043a6:	460c      	mov	r4, r1
 80043a8:	4618      	mov	r0, r3
 80043aa:	4621      	mov	r1, r4
 80043ac:	a344      	add	r3, pc, #272	; (adr r3, 80044c0 <lowlayer_scanFlow+0x248>)
 80043ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b2:	f7fc fa4b 	bl	800084c <__aeabi_ddiv>
 80043b6:	4603      	mov	r3, r0
 80043b8:	460c      	mov	r4, r1
 80043ba:	461a      	mov	r2, r3
 80043bc:	4623      	mov	r3, r4
 80043be:	a142      	add	r1, pc, #264	; (adr r1, 80044c8 <lowlayer_scanFlow+0x250>)
 80043c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043c4:	f7fb ff60 	bl	8000288 <__aeabi_dsub>
 80043c8:	4603      	mov	r3, r0
 80043ca:	460c      	mov	r4, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 80043cc:	4a53      	ldr	r2, [pc, #332]	; (800451c <lowlayer_scanFlow+0x2a4>)
 80043ce:	e9c2 3400 	strd	r3, r4, [r2]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 80043d2:	4b4b      	ldr	r3, [pc, #300]	; (8004500 <lowlayer_scanFlow+0x288>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043de:	ee17 0a90 	vmov	r0, s15
 80043e2:	f7fc f8b1 	bl	8000548 <__aeabi_f2d>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	f7fb ff4f 	bl	800028c <__adddf3>
 80043ee:	4603      	mov	r3, r0
 80043f0:	460c      	mov	r4, r1
 80043f2:	4618      	mov	r0, r3
 80043f4:	4621      	mov	r1, r4
 80043f6:	a330      	add	r3, pc, #192	; (adr r3, 80044b8 <lowlayer_scanFlow+0x240>)
 80043f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fc:	f7fc f8fc 	bl	80005f8 <__aeabi_dmul>
 8004400:	4603      	mov	r3, r0
 8004402:	460c      	mov	r4, r1
 8004404:	4618      	mov	r0, r3
 8004406:	4621      	mov	r1, r4
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	4b44      	ldr	r3, [pc, #272]	; (8004520 <lowlayer_scanFlow+0x2a8>)
 800440e:	f7fc fa1d 	bl	800084c <__aeabi_ddiv>
 8004412:	4603      	mov	r3, r0
 8004414:	460c      	mov	r4, r1
 8004416:	461a      	mov	r2, r3
 8004418:	4623      	mov	r3, r4
 800441a:	a12d      	add	r1, pc, #180	; (adr r1, 80044d0 <lowlayer_scanFlow+0x258>)
 800441c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004420:	f7fb ff32 	bl	8000288 <__aeabi_dsub>
 8004424:	4603      	mov	r3, r0
 8004426:	460c      	mov	r4, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8004428:	4a3c      	ldr	r2, [pc, #240]	; (800451c <lowlayer_scanFlow+0x2a4>)
 800442a:	e9c2 3402 	strd	r3, r4, [r2, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 800442e:	4b34      	ldr	r3, [pc, #208]	; (8004500 <lowlayer_scanFlow+0x288>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800443a:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8004524 <lowlayer_scanFlow+0x2ac>
 800443e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004442:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004528 <lowlayer_scanFlow+0x2b0>
 8004446:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800444a:	ee17 0a90 	vmov	r0, s15
 800444e:	f7fc f87b 	bl	8000548 <__aeabi_f2d>
 8004452:	4603      	mov	r3, r0
 8004454:	460c      	mov	r4, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 8004456:	4a31      	ldr	r2, [pc, #196]	; (800451c <lowlayer_scanFlow+0x2a4>)
 8004458:	e9c2 3404 	strd	r3, r4, [r2, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 800445c:	4b2a      	ldr	r3, [pc, #168]	; (8004508 <lowlayer_scanFlow+0x290>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f7fc f85f 	bl	8000524 <__aeabi_i2d>
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	f7fb ff0f 	bl	800028c <__adddf3>
 800446e:	4603      	mov	r3, r0
 8004470:	460c      	mov	r4, r1
 8004472:	4618      	mov	r0, r3
 8004474:	4621      	mov	r1, r4
 8004476:	a310      	add	r3, pc, #64	; (adr r3, 80044b8 <lowlayer_scanFlow+0x240>)
 8004478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447c:	f7fc f8bc 	bl	80005f8 <__aeabi_dmul>
 8004480:	4603      	mov	r3, r0
 8004482:	460c      	mov	r4, r1
 8004484:	4618      	mov	r0, r3
 8004486:	4621      	mov	r1, r4
 8004488:	a313      	add	r3, pc, #76	; (adr r3, 80044d8 <lowlayer_scanFlow+0x260>)
 800448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448e:	f7fc f9dd 	bl	800084c <__aeabi_ddiv>
 8004492:	4603      	mov	r3, r0
 8004494:	460c      	mov	r4, r1
 8004496:	461a      	mov	r2, r3
 8004498:	4623      	mov	r3, r4
 800449a:	a111      	add	r1, pc, #68	; (adr r1, 80044e0 <lowlayer_scanFlow+0x268>)
 800449c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044a0:	f7fb fef2 	bl	8000288 <__aeabi_dsub>
 80044a4:	4603      	mov	r3, r0
 80044a6:	460c      	mov	r4, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 80044a8:	4a1c      	ldr	r2, [pc, #112]	; (800451c <lowlayer_scanFlow+0x2a4>)
 80044aa:	e9c2 3406 	strd	r3, r4, [r2, #24]

		return TRUE;
 80044ae:	2301      	movs	r3, #1
	}
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd90      	pop	{r4, r7, pc}
 80044b8:	60000000 	.word	0x60000000
 80044bc:	400921fb 	.word	0x400921fb
 80044c0:	00000000 	.word	0x00000000
 80044c4:	40f38800 	.word	0x40f38800
 80044c8:	40000000 	.word	0x40000000
 80044cc:	bff9f17a 	.word	0xbff9f17a
 80044d0:	80000000 	.word	0x80000000
 80044d4:	40039716 	.word	0x40039716
 80044d8:	a0000000 	.word	0xa0000000
 80044dc:	40d3bca1 	.word	0x40d3bca1
 80044e0:	a0000000 	.word	0xa0000000
 80044e4:	4008330d 	.word	0x4008330d
 80044e8:	20004ef0 	.word	0x20004ef0
 80044ec:	20004ee0 	.word	0x20004ee0
 80044f0:	0801b3fc 	.word	0x0801b3fc
 80044f4:	40020c00 	.word	0x40020c00
 80044f8:	20004ed0 	.word	0x20004ed0
 80044fc:	20004ee4 	.word	0x20004ee4
 8004500:	20004f18 	.word	0x20004f18
 8004504:	20004ec0 	.word	0x20004ec0
 8004508:	20004ef4 	.word	0x20004ef4
 800450c:	0801b324 	.word	0x0801b324
 8004510:	0801b338 	.word	0x0801b338
 8004514:	0801b34c 	.word	0x0801b34c
 8004518:	0801b360 	.word	0x0801b360
 800451c:	20004ef8 	.word	0x20004ef8
 8004520:	40ff4000 	.word	0x40ff4000
 8004524:	4426aaab 	.word	0x4426aaab
 8004528:	400f1aa0 	.word	0x400f1aa0
 800452c:	00000000 	.word	0x00000000

08004530 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 8004538:	2300      	movs	r3, #0
 800453a:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f94d 	bl	80047e0 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800454c:	a330      	add	r3, pc, #192	; (adr r3, 8004610 <lowlayer_goToSoftLimit+0xe0>)
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	f7fc fac3 	bl	8000adc <__aeabi_dcmplt>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d004      	beq.n	8004566 <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 800455c:	2303      	movs	r3, #3
 800455e:	723b      	strb	r3, [r7, #8]
		check++;
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	3301      	adds	r3, #1
 8004564:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800456c:	a32a      	add	r3, pc, #168	; (adr r3, 8004618 <lowlayer_goToSoftLimit+0xe8>)
 800456e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004572:	f7fc fad1 	bl	8000b18 <__aeabi_dcmpgt>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d004      	beq.n	8004586 <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 800457c:	2305      	movs	r3, #5
 800457e:	727b      	strb	r3, [r7, #9]
		check++;
 8004580:	7bfb      	ldrb	r3, [r7, #15]
 8004582:	3301      	adds	r3, #1
 8004584:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	f04f 0300 	mov.w	r3, #0
 8004594:	f7fc faa2 	bl	8000adc <__aeabi_dcmplt>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d004      	beq.n	80045a8 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 800459e:	2305      	movs	r3, #5
 80045a0:	72bb      	strb	r3, [r7, #10]
		check++;
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	3301      	adds	r3, #1
 80045a6:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 80045ae:	a31c      	add	r3, pc, #112	; (adr r3, 8004620 <lowlayer_goToSoftLimit+0xf0>)
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f7fc fab0 	bl	8000b18 <__aeabi_dcmpgt>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d004      	beq.n	80045c8 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 80045be:	230a      	movs	r3, #10
 80045c0:	72fb      	strb	r3, [r7, #11]
		check++;
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	3301      	adds	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d013      	beq.n	80045f6 <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 80045ce:	f997 0008 	ldrsb.w	r0, [r7, #8]
 80045d2:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	425b      	negs	r3, r3
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	b259      	sxtb	r1, r3
 80045de:	f997 200a 	ldrsb.w	r2, [r7, #10]
 80045e2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	425b      	negs	r3, r3
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	b25b      	sxtb	r3, r3
 80045ee:	f000 fb4f 	bl	8004c90 <lowlayer_writePulse>
		return FALSE;
 80045f2:	2300      	movs	r3, #0
 80045f4:	e006      	b.n	8004604 <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 80045f6:	2300      	movs	r3, #0
 80045f8:	2200      	movs	r2, #0
 80045fa:	2100      	movs	r1, #0
 80045fc:	2000      	movs	r0, #0
 80045fe:	f000 fb47 	bl	8004c90 <lowlayer_writePulse>
		return TRUE;
 8004602:	2301      	movs	r3, #1
	}
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	f3af 8000 	nop.w
 8004610:	daaaaaab 	.word	0xdaaaaaab
 8004614:	bff7bc89 	.word	0xbff7bc89
 8004618:	88000000 	.word	0x88000000
 800461c:	4002d97c 	.word	0x4002d97c
 8004620:	daaaaaab 	.word	0xdaaaaaab
 8004624:	4007bc89 	.word	0x4007bc89

08004628 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 8004628:	b590      	push	{r4, r7, lr}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 8004630:	f000 fc78 	bl	8004f24 <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 8004634:	4b62      	ldr	r3, [pc, #392]	; (80047c0 <lowlayer_readTruePosition+0x198>)
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	4b62      	ldr	r3, [pc, #392]	; (80047c4 <lowlayer_readTruePosition+0x19c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	ee07 3a90 	vmov	s15, r3
 8004642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004646:	ee17 0a90 	vmov	r0, s15
 800464a:	f7fb ff7d 	bl	8000548 <__aeabi_f2d>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	f7fb fe1b 	bl	800028c <__adddf3>
 8004656:	4603      	mov	r3, r0
 8004658:	460c      	mov	r4, r1
 800465a:	4618      	mov	r0, r3
 800465c:	4621      	mov	r1, r4
 800465e:	a34c      	add	r3, pc, #304	; (adr r3, 8004790 <lowlayer_readTruePosition+0x168>)
 8004660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004664:	f7fb ffc8 	bl	80005f8 <__aeabi_dmul>
 8004668:	4603      	mov	r3, r0
 800466a:	460c      	mov	r4, r1
 800466c:	4618      	mov	r0, r3
 800466e:	4621      	mov	r1, r4
 8004670:	a349      	add	r3, pc, #292	; (adr r3, 8004798 <lowlayer_readTruePosition+0x170>)
 8004672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004676:	f7fc f8e9 	bl	800084c <__aeabi_ddiv>
 800467a:	4603      	mov	r3, r0
 800467c:	460c      	mov	r4, r1
 800467e:	4618      	mov	r0, r3
 8004680:	4621      	mov	r1, r4
 8004682:	a347      	add	r3, pc, #284	; (adr r3, 80047a0 <lowlayer_readTruePosition+0x178>)
 8004684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004688:	f7fb fdfe 	bl	8000288 <__aeabi_dsub>
 800468c:	4603      	mov	r3, r0
 800468e:	460c      	mov	r4, r1
	true->Theta1 = HARD_LIM0_NEG
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 8004696:	4b4a      	ldr	r3, [pc, #296]	; (80047c0 <lowlayer_readTruePosition+0x198>)
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	4b4a      	ldr	r3, [pc, #296]	; (80047c4 <lowlayer_readTruePosition+0x19c>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	ee07 3a90 	vmov	s15, r3
 80046a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046a8:	ee17 0a90 	vmov	r0, s15
 80046ac:	f7fb ff4c 	bl	8000548 <__aeabi_f2d>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	f7fb fdea 	bl	800028c <__adddf3>
 80046b8:	4603      	mov	r3, r0
 80046ba:	460c      	mov	r4, r1
 80046bc:	4618      	mov	r0, r3
 80046be:	4621      	mov	r1, r4
 80046c0:	a333      	add	r3, pc, #204	; (adr r3, 8004790 <lowlayer_readTruePosition+0x168>)
 80046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c6:	f7fb ff97 	bl	80005f8 <__aeabi_dmul>
 80046ca:	4603      	mov	r3, r0
 80046cc:	460c      	mov	r4, r1
 80046ce:	4618      	mov	r0, r3
 80046d0:	4621      	mov	r1, r4
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	4b3c      	ldr	r3, [pc, #240]	; (80047c8 <lowlayer_readTruePosition+0x1a0>)
 80046d8:	f7fc f8b8 	bl	800084c <__aeabi_ddiv>
 80046dc:	4603      	mov	r3, r0
 80046de:	460c      	mov	r4, r1
 80046e0:	4618      	mov	r0, r3
 80046e2:	4621      	mov	r1, r4
 80046e4:	a330      	add	r3, pc, #192	; (adr r3, 80047a8 <lowlayer_readTruePosition+0x180>)
 80046e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ea:	f7fb fdcf 	bl	800028c <__adddf3>
 80046ee:	4603      	mov	r3, r0
 80046f0:	460c      	mov	r4, r1
	true->Theta2 = HARD_LIM1_POS
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 80046f8:	4b31      	ldr	r3, [pc, #196]	; (80047c0 <lowlayer_readTruePosition+0x198>)
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	4b31      	ldr	r3, [pc, #196]	; (80047c4 <lowlayer_readTruePosition+0x19c>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800470a:	eeb1 7a67 	vneg.f32	s14, s15
 800470e:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80047cc <lowlayer_readTruePosition+0x1a4>
 8004712:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004716:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80047d0 <lowlayer_readTruePosition+0x1a8>
 800471a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800471e:	ee17 0a90 	vmov	r0, s15
 8004722:	f7fb ff11 	bl	8000548 <__aeabi_f2d>
 8004726:	4603      	mov	r3, r0
 8004728:	460c      	mov	r4, r1
	true->D3	 = HARD_LIM2_NEG
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 8004730:	4b28      	ldr	r3, [pc, #160]	; (80047d4 <lowlayer_readTruePosition+0x1ac>)
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	4b28      	ldr	r3, [pc, #160]	; (80047d8 <lowlayer_readTruePosition+0x1b0>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	4618      	mov	r0, r3
 800473c:	f7fb fef2 	bl	8000524 <__aeabi_i2d>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	f7fb fda2 	bl	800028c <__adddf3>
 8004748:	4603      	mov	r3, r0
 800474a:	460c      	mov	r4, r1
 800474c:	4618      	mov	r0, r3
 800474e:	4621      	mov	r1, r4
 8004750:	a30f      	add	r3, pc, #60	; (adr r3, 8004790 <lowlayer_readTruePosition+0x168>)
 8004752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004756:	f7fb ff4f 	bl	80005f8 <__aeabi_dmul>
 800475a:	4603      	mov	r3, r0
 800475c:	460c      	mov	r4, r1
 800475e:	4618      	mov	r0, r3
 8004760:	4621      	mov	r1, r4
 8004762:	a313      	add	r3, pc, #76	; (adr r3, 80047b0 <lowlayer_readTruePosition+0x188>)
 8004764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004768:	f7fc f870 	bl	800084c <__aeabi_ddiv>
 800476c:	4603      	mov	r3, r0
 800476e:	460c      	mov	r4, r1
 8004770:	4618      	mov	r0, r3
 8004772:	4621      	mov	r1, r4
 8004774:	a310      	add	r3, pc, #64	; (adr r3, 80047b8 <lowlayer_readTruePosition+0x190>)
 8004776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477a:	f7fb fd87 	bl	800028c <__adddf3>
 800477e:	4603      	mov	r3, r0
 8004780:	460c      	mov	r4, r1
	true->Theta4 = HARD_LIM3_POS
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	bd90      	pop	{r4, r7, pc}
 8004790:	60000000 	.word	0x60000000
 8004794:	400921fb 	.word	0x400921fb
 8004798:	00000000 	.word	0x00000000
 800479c:	40f38800 	.word	0x40f38800
 80047a0:	40000000 	.word	0x40000000
 80047a4:	3ff9f17a 	.word	0x3ff9f17a
 80047a8:	80000000 	.word	0x80000000
 80047ac:	40039716 	.word	0x40039716
 80047b0:	a0000000 	.word	0xa0000000
 80047b4:	40d3bca1 	.word	0x40d3bca1
 80047b8:	a0000000 	.word	0xa0000000
 80047bc:	4008330d 	.word	0x4008330d
 80047c0:	20004ed4 	.word	0x20004ed4
 80047c4:	20004f18 	.word	0x20004f18
 80047c8:	40ff4000 	.word	0x40ff4000
 80047cc:	4426aaab 	.word	0x4426aaab
 80047d0:	400f1aa0 	.word	0x400f1aa0
 80047d4:	20004ec0 	.word	0x20004ec0
 80047d8:	20004ef4 	.word	0x20004ef4
 80047dc:	00000000 	.word	0x00000000

080047e0 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 80047e0:	b5b0      	push	{r4, r5, r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 80047e8:	4b53      	ldr	r3, [pc, #332]	; (8004938 <lowlayer_readSetPosition+0x158>)
 80047ea:	e9d3 4500 	ldrd	r4, r5, [r3]
 80047ee:	4b53      	ldr	r3, [pc, #332]	; (800493c <lowlayer_readSetPosition+0x15c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fb fe96 	bl	8000524 <__aeabi_i2d>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	f7fb fd46 	bl	800028c <__adddf3>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4610      	mov	r0, r2
 8004806:	4619      	mov	r1, r3
 8004808:	a345      	add	r3, pc, #276	; (adr r3, 8004920 <lowlayer_readSetPosition+0x140>)
 800480a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480e:	f7fb fef3 	bl	80005f8 <__aeabi_dmul>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4610      	mov	r0, r2
 8004818:	4619      	mov	r1, r3
 800481a:	a343      	add	r3, pc, #268	; (adr r3, 8004928 <lowlayer_readSetPosition+0x148>)
 800481c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004820:	f7fc f814 	bl	800084c <__aeabi_ddiv>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4620      	mov	r0, r4
 800482a:	4629      	mov	r1, r5
 800482c:	f7fb fd2e 	bl	800028c <__adddf3>
 8004830:	4603      	mov	r3, r0
 8004832:	460c      	mov	r4, r1
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 800483a:	4b3f      	ldr	r3, [pc, #252]	; (8004938 <lowlayer_readSetPosition+0x158>)
 800483c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004840:	4b3e      	ldr	r3, [pc, #248]	; (800493c <lowlayer_readSetPosition+0x15c>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	4618      	mov	r0, r3
 8004846:	f7fb fe6d 	bl	8000524 <__aeabi_i2d>
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	f7fb fd1d 	bl	800028c <__adddf3>
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	4610      	mov	r0, r2
 8004858:	4619      	mov	r1, r3
 800485a:	a331      	add	r3, pc, #196	; (adr r3, 8004920 <lowlayer_readSetPosition+0x140>)
 800485c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004860:	f7fb feca 	bl	80005f8 <__aeabi_dmul>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	4610      	mov	r0, r2
 800486a:	4619      	mov	r1, r3
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	4b33      	ldr	r3, [pc, #204]	; (8004940 <lowlayer_readSetPosition+0x160>)
 8004872:	f7fb ffeb 	bl	800084c <__aeabi_ddiv>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4620      	mov	r0, r4
 800487c:	4629      	mov	r1, r5
 800487e:	f7fb fd05 	bl	800028c <__adddf3>
 8004882:	4603      	mov	r3, r0
 8004884:	460c      	mov	r4, r1
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 800488c:	4b2a      	ldr	r3, [pc, #168]	; (8004938 <lowlayer_readSetPosition+0x158>)
 800488e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004892:	4b2a      	ldr	r3, [pc, #168]	; (800493c <lowlayer_readSetPosition+0x15c>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800489e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004944 <lowlayer_readSetPosition+0x164>
 80048a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80048a6:	ee16 0a90 	vmov	r0, s13
 80048aa:	f7fb fe4d 	bl	8000548 <__aeabi_f2d>
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	4620      	mov	r0, r4
 80048b4:	4629      	mov	r1, r5
 80048b6:	f7fb fce9 	bl	800028c <__adddf3>
 80048ba:	4603      	mov	r3, r0
 80048bc:	460c      	mov	r4, r1
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 80048c4:	4b1c      	ldr	r3, [pc, #112]	; (8004938 <lowlayer_readSetPosition+0x158>)
 80048c6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80048ca:	4b1c      	ldr	r3, [pc, #112]	; (800493c <lowlayer_readSetPosition+0x15c>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fb fe28 	bl	8000524 <__aeabi_i2d>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	f7fb fcd8 	bl	800028c <__adddf3>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4610      	mov	r0, r2
 80048e2:	4619      	mov	r1, r3
 80048e4:	a30e      	add	r3, pc, #56	; (adr r3, 8004920 <lowlayer_readSetPosition+0x140>)
 80048e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ea:	f7fb fe85 	bl	80005f8 <__aeabi_dmul>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4610      	mov	r0, r2
 80048f4:	4619      	mov	r1, r3
 80048f6:	a30e      	add	r3, pc, #56	; (adr r3, 8004930 <lowlayer_readSetPosition+0x150>)
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	f7fb ffa6 	bl	800084c <__aeabi_ddiv>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4620      	mov	r0, r4
 8004906:	4629      	mov	r1, r5
 8004908:	f7fb fcc0 	bl	800028c <__adddf3>
 800490c:	4603      	mov	r3, r0
 800490e:	460c      	mov	r4, r1
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 8004916:	bf00      	nop
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bdb0      	pop	{r4, r5, r7, pc}
 800491e:	bf00      	nop
 8004920:	60000000 	.word	0x60000000
 8004924:	400921fb 	.word	0x400921fb
 8004928:	00000000 	.word	0x00000000
 800492c:	40d38800 	.word	0x40d38800
 8004930:	a0000000 	.word	0xa0000000
 8004934:	40d3bca1 	.word	0x40d3bca1
 8004938:	20004ef8 	.word	0x20004ef8
 800493c:	20004ec0 	.word	0x20004ec0
 8004940:	40df4000 	.word	0x40df4000
 8004944:	42c80000 	.word	0x42c80000

08004948 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 8004948:	b084      	sub	sp, #16
 800494a:	b590      	push	{r4, r7, lr}
 800494c:	b093      	sub	sp, #76	; 0x4c
 800494e:	af00      	add	r7, sp, #0
 8004950:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8004954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8004958:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800495c:	a3c4      	add	r3, pc, #784	; (adr r3, 8004c70 <lowlayer_computeAndWritePulse+0x328>)
 800495e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004962:	f7fb fc93 	bl	800028c <__adddf3>
 8004966:	4603      	mov	r3, r0
 8004968:	460c      	mov	r4, r1
 800496a:	4618      	mov	r0, r3
 800496c:	4621      	mov	r1, r4
 800496e:	a3c2      	add	r3, pc, #776	; (adr r3, 8004c78 <lowlayer_computeAndWritePulse+0x330>)
 8004970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004974:	f7fb fe40 	bl	80005f8 <__aeabi_dmul>
 8004978:	4603      	mov	r3, r0
 800497a:	460c      	mov	r4, r1
 800497c:	4618      	mov	r0, r3
 800497e:	4621      	mov	r1, r4
 8004980:	a3b5      	add	r3, pc, #724	; (adr r3, 8004c58 <lowlayer_computeAndWritePulse+0x310>)
 8004982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004986:	f7fb ff61 	bl	800084c <__aeabi_ddiv>
 800498a:	4603      	mov	r3, r0
 800498c:	460c      	mov	r4, r1
 800498e:	ec44 3b17 	vmov	d7, r3, r4
 8004992:	eeb0 0a47 	vmov.f32	s0, s14
 8004996:	eef0 0a67 	vmov.f32	s1, s15
 800499a:	f014 ff91 	bl	80198c0 <round>
 800499e:	ec54 3b10 	vmov	r3, r4, d0
 80049a2:	4618      	mov	r0, r3
 80049a4:	4621      	mov	r1, r4
 80049a6:	f7fc f8ff 	bl	8000ba8 <__aeabi_d2uiz>
 80049aa:	4603      	mov	r3, r0
 80049ac:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 80049ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80049b2:	a3b3      	add	r3, pc, #716	; (adr r3, 8004c80 <lowlayer_computeAndWritePulse+0x338>)
 80049b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b8:	f7fb fc68 	bl	800028c <__adddf3>
 80049bc:	4603      	mov	r3, r0
 80049be:	460c      	mov	r4, r1
 80049c0:	4618      	mov	r0, r3
 80049c2:	4621      	mov	r1, r4
 80049c4:	f04f 0200 	mov.w	r2, #0
 80049c8:	4baf      	ldr	r3, [pc, #700]	; (8004c88 <lowlayer_computeAndWritePulse+0x340>)
 80049ca:	f7fb fe15 	bl	80005f8 <__aeabi_dmul>
 80049ce:	4603      	mov	r3, r0
 80049d0:	460c      	mov	r4, r1
 80049d2:	4618      	mov	r0, r3
 80049d4:	4621      	mov	r1, r4
 80049d6:	a3a0      	add	r3, pc, #640	; (adr r3, 8004c58 <lowlayer_computeAndWritePulse+0x310>)
 80049d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049dc:	f7fb ff36 	bl	800084c <__aeabi_ddiv>
 80049e0:	4603      	mov	r3, r0
 80049e2:	460c      	mov	r4, r1
 80049e4:	ec44 3b17 	vmov	d7, r3, r4
 80049e8:	eeb0 0a47 	vmov.f32	s0, s14
 80049ec:	eef0 0a67 	vmov.f32	s1, s15
 80049f0:	f014 ff66 	bl	80198c0 <round>
 80049f4:	ec54 3b10 	vmov	r3, r4, d0
 80049f8:	4618      	mov	r0, r3
 80049fa:	4621      	mov	r1, r4
 80049fc:	f7fc f8d4 	bl	8000ba8 <__aeabi_d2uiz>
 8004a00:	4603      	mov	r3, r0
 8004a02:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 8004a04:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004a08:	f04f 0200 	mov.w	r2, #0
 8004a0c:	4b9f      	ldr	r3, [pc, #636]	; (8004c8c <lowlayer_computeAndWritePulse+0x344>)
 8004a0e:	f7fb fdf3 	bl	80005f8 <__aeabi_dmul>
 8004a12:	4603      	mov	r3, r0
 8004a14:	460c      	mov	r4, r1
 8004a16:	ec44 3b17 	vmov	d7, r3, r4
 8004a1a:	eeb0 0a47 	vmov.f32	s0, s14
 8004a1e:	eef0 0a67 	vmov.f32	s1, s15
 8004a22:	f014 ff4d 	bl	80198c0 <round>
 8004a26:	ec54 3b10 	vmov	r3, r4, d0
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	f7fc f8bb 	bl	8000ba8 <__aeabi_d2uiz>
 8004a32:	4603      	mov	r3, r0
 8004a34:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 8004a36:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004a3a:	a389      	add	r3, pc, #548	; (adr r3, 8004c60 <lowlayer_computeAndWritePulse+0x318>)
 8004a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a40:	f7fb fc24 	bl	800028c <__adddf3>
 8004a44:	4603      	mov	r3, r0
 8004a46:	460c      	mov	r4, r1
 8004a48:	4618      	mov	r0, r3
 8004a4a:	4621      	mov	r1, r4
 8004a4c:	a386      	add	r3, pc, #536	; (adr r3, 8004c68 <lowlayer_computeAndWritePulse+0x320>)
 8004a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a52:	f7fb fdd1 	bl	80005f8 <__aeabi_dmul>
 8004a56:	4603      	mov	r3, r0
 8004a58:	460c      	mov	r4, r1
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	a37e      	add	r3, pc, #504	; (adr r3, 8004c58 <lowlayer_computeAndWritePulse+0x310>)
 8004a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a64:	f7fb fef2 	bl	800084c <__aeabi_ddiv>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	460c      	mov	r4, r1
 8004a6c:	ec44 3b17 	vmov	d7, r3, r4
 8004a70:	eeb0 0a47 	vmov.f32	s0, s14
 8004a74:	eef0 0a67 	vmov.f32	s1, s15
 8004a78:	f014 ff22 	bl	80198c0 <round>
 8004a7c:	ec54 3b10 	vmov	r3, r4, d0
 8004a80:	4618      	mov	r0, r3
 8004a82:	4621      	mov	r1, r4
 8004a84:	f7fc f890 	bl	8000ba8 <__aeabi_d2uiz>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8004a8c:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8004a90:	a377      	add	r3, pc, #476	; (adr r3, 8004c70 <lowlayer_computeAndWritePulse+0x328>)
 8004a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a96:	f7fb fbf9 	bl	800028c <__adddf3>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	460c      	mov	r4, r1
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	a375      	add	r3, pc, #468	; (adr r3, 8004c78 <lowlayer_computeAndWritePulse+0x330>)
 8004aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa8:	f7fb fda6 	bl	80005f8 <__aeabi_dmul>
 8004aac:	4603      	mov	r3, r0
 8004aae:	460c      	mov	r4, r1
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	a368      	add	r3, pc, #416	; (adr r3, 8004c58 <lowlayer_computeAndWritePulse+0x310>)
 8004ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aba:	f7fb fec7 	bl	800084c <__aeabi_ddiv>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	ec44 3b17 	vmov	d7, r3, r4
 8004ac6:	eeb0 0a47 	vmov.f32	s0, s14
 8004aca:	eef0 0a67 	vmov.f32	s1, s15
 8004ace:	f014 fef7 	bl	80198c0 <round>
 8004ad2:	ec54 3b10 	vmov	r3, r4, d0
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	4621      	mov	r1, r4
 8004ada:	f7fc f865 	bl	8000ba8 <__aeabi_d2uiz>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 8004ae2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004ae6:	a366      	add	r3, pc, #408	; (adr r3, 8004c80 <lowlayer_computeAndWritePulse+0x338>)
 8004ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aec:	f7fb fbce 	bl	800028c <__adddf3>
 8004af0:	4603      	mov	r3, r0
 8004af2:	460c      	mov	r4, r1
 8004af4:	4618      	mov	r0, r3
 8004af6:	4621      	mov	r1, r4
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	4b62      	ldr	r3, [pc, #392]	; (8004c88 <lowlayer_computeAndWritePulse+0x340>)
 8004afe:	f7fb fd7b 	bl	80005f8 <__aeabi_dmul>
 8004b02:	4603      	mov	r3, r0
 8004b04:	460c      	mov	r4, r1
 8004b06:	4618      	mov	r0, r3
 8004b08:	4621      	mov	r1, r4
 8004b0a:	a353      	add	r3, pc, #332	; (adr r3, 8004c58 <lowlayer_computeAndWritePulse+0x310>)
 8004b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b10:	f7fb fe9c 	bl	800084c <__aeabi_ddiv>
 8004b14:	4603      	mov	r3, r0
 8004b16:	460c      	mov	r4, r1
 8004b18:	ec44 3b17 	vmov	d7, r3, r4
 8004b1c:	eeb0 0a47 	vmov.f32	s0, s14
 8004b20:	eef0 0a67 	vmov.f32	s1, s15
 8004b24:	f014 fecc 	bl	80198c0 <round>
 8004b28:	ec54 3b10 	vmov	r3, r4, d0
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	4621      	mov	r1, r4
 8004b30:	f7fc f83a 	bl	8000ba8 <__aeabi_d2uiz>
 8004b34:	4603      	mov	r3, r0
 8004b36:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 8004b38:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	4b52      	ldr	r3, [pc, #328]	; (8004c8c <lowlayer_computeAndWritePulse+0x344>)
 8004b42:	f7fb fd59 	bl	80005f8 <__aeabi_dmul>
 8004b46:	4603      	mov	r3, r0
 8004b48:	460c      	mov	r4, r1
 8004b4a:	ec44 3b17 	vmov	d7, r3, r4
 8004b4e:	eeb0 0a47 	vmov.f32	s0, s14
 8004b52:	eef0 0a67 	vmov.f32	s1, s15
 8004b56:	f014 feb3 	bl	80198c0 <round>
 8004b5a:	ec54 3b10 	vmov	r3, r4, d0
 8004b5e:	4618      	mov	r0, r3
 8004b60:	4621      	mov	r1, r4
 8004b62:	f7fc f821 	bl	8000ba8 <__aeabi_d2uiz>
 8004b66:	4603      	mov	r3, r0
 8004b68:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 8004b6a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004b6e:	a33c      	add	r3, pc, #240	; (adr r3, 8004c60 <lowlayer_computeAndWritePulse+0x318>)
 8004b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b74:	f7fb fb8a 	bl	800028c <__adddf3>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	4621      	mov	r1, r4
 8004b80:	a339      	add	r3, pc, #228	; (adr r3, 8004c68 <lowlayer_computeAndWritePulse+0x320>)
 8004b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b86:	f7fb fd37 	bl	80005f8 <__aeabi_dmul>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	4618      	mov	r0, r3
 8004b90:	4621      	mov	r1, r4
 8004b92:	a331      	add	r3, pc, #196	; (adr r3, 8004c58 <lowlayer_computeAndWritePulse+0x310>)
 8004b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b98:	f7fb fe58 	bl	800084c <__aeabi_ddiv>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	460c      	mov	r4, r1
 8004ba0:	ec44 3b17 	vmov	d7, r3, r4
 8004ba4:	eeb0 0a47 	vmov.f32	s0, s14
 8004ba8:	eef0 0a67 	vmov.f32	s1, s15
 8004bac:	f014 fe88 	bl	80198c0 <round>
 8004bb0:	ec54 3b10 	vmov	r3, r4, d0
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	f7fb fff6 	bl	8000ba8 <__aeabi_d2uiz>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 8004bc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	f04f 0400 	mov.w	r4, #0
 8004bca:	e9c7 3408 	strd	r3, r4, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 8004bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	f04f 0400 	mov.w	r4, #0
 8004bd8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 8004bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	f04f 0400 	mov.w	r4, #0
 8004be6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 8004bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	f04f 0400 	mov.w	r4, #0
 8004bf4:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (abs(delta_var0) > 127
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	bfb8      	it	lt
 8004bfe:	425b      	neglt	r3, r3
 8004c00:	2b7f      	cmp	r3, #127	; 0x7f
 8004c02:	dc11      	bgt.n	8004c28 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var1) > 127
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	bfb8      	it	lt
 8004c0a:	425b      	neglt	r3, r3
 8004c0c:	2b7f      	cmp	r3, #127	; 0x7f
 8004c0e:	dc0b      	bgt.n	8004c28 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var2) > 127
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	bfb8      	it	lt
 8004c16:	425b      	neglt	r3, r3
 8004c18:	2b7f      	cmp	r3, #127	; 0x7f
 8004c1a:	dc05      	bgt.n	8004c28 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var3) > 127) {
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bfb8      	it	lt
 8004c22:	425b      	neglt	r3, r3
 8004c24:	2b7f      	cmp	r3, #127	; 0x7f
 8004c26:	dd01      	ble.n	8004c2c <lowlayer_computeAndWritePulse+0x2e4>
		return FALSE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	e00c      	b.n	8004c46 <lowlayer_computeAndWritePulse+0x2fe>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 8004c2c:	f997 0020 	ldrsb.w	r0, [r7, #32]
 8004c30:	f997 1018 	ldrsb.w	r1, [r7, #24]
 8004c34:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8004c38:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8004c3c:	f000 f828 	bl	8004c90 <lowlayer_writePulse>
 8004c40:	4603      	mov	r3, r0
 8004c42:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 8004c44:	79fb      	ldrb	r3, [r7, #7]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	374c      	adds	r7, #76	; 0x4c
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004c50:	b004      	add	sp, #16
 8004c52:	4770      	bx	lr
 8004c54:	f3af 8000 	nop.w
 8004c58:	60000000 	.word	0x60000000
 8004c5c:	401921fb 	.word	0x401921fb
 8004c60:	daaaaaab 	.word	0xdaaaaaab
 8004c64:	4007bc89 	.word	0x4007bc89
 8004c68:	a0000000 	.word	0xa0000000
 8004c6c:	40d3bca1 	.word	0x40d3bca1
 8004c70:	daaaaaab 	.word	0xdaaaaaab
 8004c74:	3ff7bc89 	.word	0x3ff7bc89
 8004c78:	00000000 	.word	0x00000000
 8004c7c:	40d38800 	.word	0x40d38800
 8004c80:	88000000 	.word	0x88000000
 8004c84:	4002d97c 	.word	0x4002d97c
 8004c88:	40df4000 	.word	0x40df4000
 8004c8c:	40590000 	.word	0x40590000

08004c90 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 8004c90:	b590      	push	{r4, r7, lr}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	4604      	mov	r4, r0
 8004c98:	4608      	mov	r0, r1
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	4623      	mov	r3, r4
 8004ca0:	71fb      	strb	r3, [r7, #7]
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	71bb      	strb	r3, [r7, #6]
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	717b      	strb	r3, [r7, #5]
 8004caa:	4613      	mov	r3, r2
 8004cac:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 8004cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	da06      	bge.n	8004cc4 <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 8004cb6:	79fb      	ldrb	r3, [r7, #7]
 8004cb8:	425b      	negs	r3, r3
 8004cba:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 8004cbc:	79fb      	ldrb	r3, [r7, #7]
 8004cbe:	425b      	negs	r3, r3
 8004cc0:	75fb      	strb	r3, [r7, #23]
 8004cc2:	e006      	b.n	8004cd2 <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 8004cc8:	79fb      	ldrb	r3, [r7, #7]
 8004cca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004cce:	b25b      	sxtb	r3, r3
 8004cd0:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 8004cd2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	da06      	bge.n	8004ce8 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 8004cda:	79bb      	ldrb	r3, [r7, #6]
 8004cdc:	425b      	negs	r3, r3
 8004cde:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 8004ce0:	79bb      	ldrb	r3, [r7, #6]
 8004ce2:	425b      	negs	r3, r3
 8004ce4:	75bb      	strb	r3, [r7, #22]
 8004ce6:	e006      	b.n	8004cf6 <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 8004ce8:	79bb      	ldrb	r3, [r7, #6]
 8004cea:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 8004cec:	79bb      	ldrb	r3, [r7, #6]
 8004cee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004cf2:	b25b      	sxtb	r3, r3
 8004cf4:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 8004cf6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	da0b      	bge.n	8004d16 <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 8004cfe:	797b      	ldrb	r3, [r7, #5]
 8004d00:	425b      	negs	r3, r3
 8004d02:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 8004d04:	797b      	ldrb	r3, [r7, #5]
 8004d06:	425b      	negs	r3, r3
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	b25b      	sxtb	r3, r3
 8004d0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d10:	b25b      	sxtb	r3, r3
 8004d12:	757b      	strb	r3, [r7, #21]
 8004d14:	e003      	b.n	8004d1e <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 8004d16:	797b      	ldrb	r3, [r7, #5]
 8004d18:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 8004d1a:	797b      	ldrb	r3, [r7, #5]
 8004d1c:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 8004d1e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	da06      	bge.n	8004d34 <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 8004d26:	793b      	ldrb	r3, [r7, #4]
 8004d28:	425b      	negs	r3, r3
 8004d2a:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 8004d2c:	793b      	ldrb	r3, [r7, #4]
 8004d2e:	425b      	negs	r3, r3
 8004d30:	753b      	strb	r3, [r7, #20]
 8004d32:	e006      	b.n	8004d42 <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 8004d34:	793b      	ldrb	r3, [r7, #4]
 8004d36:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 8004d38:	793b      	ldrb	r3, [r7, #4]
 8004d3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d3e:	b25b      	sxtb	r3, r3
 8004d40:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 8004d42:	7cfb      	ldrb	r3, [r7, #19]
 8004d44:	2b4b      	cmp	r3, #75	; 0x4b
 8004d46:	d808      	bhi.n	8004d5a <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 8004d48:	7cbb      	ldrb	r3, [r7, #18]
 8004d4a:	2b78      	cmp	r3, #120	; 0x78
 8004d4c:	d805      	bhi.n	8004d5a <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 8004d4e:	7c7b      	ldrb	r3, [r7, #17]
 8004d50:	2b7d      	cmp	r3, #125	; 0x7d
 8004d52:	d802      	bhi.n	8004d5a <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 8004d54:	7c3b      	ldrb	r3, [r7, #16]
 8004d56:	2b65      	cmp	r3, #101	; 0x65
 8004d58:	d901      	bls.n	8004d5e <lowlayer_writePulse+0xce>
		return FALSE;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	e04b      	b.n	8004df6 <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d64:	4826      	ldr	r0, [pc, #152]	; (8004e00 <lowlayer_writePulse+0x170>)
 8004d66:	f007 f9e5 	bl	800c134 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d70:	4824      	ldr	r0, [pc, #144]	; (8004e04 <lowlayer_writePulse+0x174>)
 8004d72:	f007 f9df 	bl	800c134 <HAL_GPIO_WritePin>
	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 8004d76:	7dfb      	ldrb	r3, [r7, #23]
 8004d78:	4619      	mov	r1, r3
 8004d7a:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8004d7e:	f7fe fbc3 	bl	8003508 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 8004d82:	7dbb      	ldrb	r3, [r7, #22]
 8004d84:	4619      	mov	r1, r3
 8004d86:	4820      	ldr	r0, [pc, #128]	; (8004e08 <lowlayer_writePulse+0x178>)
 8004d88:	f7fe fbbe 	bl	8003508 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 8004d8c:	7d7b      	ldrb	r3, [r7, #21]
 8004d8e:	4619      	mov	r1, r3
 8004d90:	481e      	ldr	r0, [pc, #120]	; (8004e0c <lowlayer_writePulse+0x17c>)
 8004d92:	f7fe fbb9 	bl	8003508 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 8004d96:	7d3b      	ldrb	r3, [r7, #20]
 8004d98:	4619      	mov	r1, r3
 8004d9a:	481d      	ldr	r0, [pc, #116]	; (8004e10 <lowlayer_writePulse+0x180>)
 8004d9c:	f7fe fbb4 	bl	8003508 <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 8004da0:	2364      	movs	r3, #100	; 0x64
 8004da2:	73fb      	strb	r3, [r7, #15]
	
	 while (delay--);
 8004da4:	bf00      	nop
 8004da6:	7bfb      	ldrb	r3, [r7, #15]
 8004da8:	1e5a      	subs	r2, r3, #1
 8004daa:	73fa      	strb	r2, [r7, #15]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1fa      	bne.n	8004da6 <lowlayer_writePulse+0x116>

//	int16_t wow = HAL_GPIO_ReadPin(CPLD_BUSY_GPIO_Port, CPLD_BUSY_Pin);
//	LOG_REPORT(" Busy: ", wow);
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 8004db0:	2201      	movs	r2, #1
 8004db2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004db6:	4813      	ldr	r0, [pc, #76]	; (8004e04 <lowlayer_writePulse+0x174>)
 8004db8:	f007 f9bc 	bl	800c134 <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 8004dbc:	4b15      	ldr	r3, [pc, #84]	; (8004e14 <lowlayer_writePulse+0x184>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	4a13      	ldr	r2, [pc, #76]	; (8004e14 <lowlayer_writePulse+0x184>)
 8004dc8:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 8004dca:	4b12      	ldr	r3, [pc, #72]	; (8004e14 <lowlayer_writePulse+0x184>)
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	4a0f      	ldr	r2, [pc, #60]	; (8004e14 <lowlayer_writePulse+0x184>)
 8004dd6:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 8004dd8:	4b0e      	ldr	r3, [pc, #56]	; (8004e14 <lowlayer_writePulse+0x184>)
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004de0:	4413      	add	r3, r2
 8004de2:	4a0c      	ldr	r2, [pc, #48]	; (8004e14 <lowlayer_writePulse+0x184>)
 8004de4:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 8004de6:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <lowlayer_writePulse+0x184>)
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004dee:	4413      	add	r3, r2
 8004df0:	4a08      	ldr	r2, [pc, #32]	; (8004e14 <lowlayer_writePulse+0x184>)
 8004df2:	60d3      	str	r3, [r2, #12]

	return TRUE;
 8004df4:	2301      	movs	r3, #1
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	371c      	adds	r7, #28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd90      	pop	{r4, r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40020000 	.word	0x40020000
 8004e04:	40020c00 	.word	0x40020c00
 8004e08:	60000002 	.word	0x60000002
 8004e0c:	60000004 	.word	0x60000004
 8004e10:	60000006 	.word	0x60000006
 8004e14:	20004ec0 	.word	0x20004ec0

08004e18 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 8004e1e:	2364      	movs	r3, #100	; 0x64
 8004e20:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 8004e22:	2201      	movs	r2, #1
 8004e24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e28:	4809      	ldr	r0, [pc, #36]	; (8004e50 <lowlayer_resetEncoder+0x38>)
 8004e2a:	f007 f983 	bl	800c134 <HAL_GPIO_WritePin>
	while (delay--);
 8004e2e:	bf00      	nop
 8004e30:	79fb      	ldrb	r3, [r7, #7]
 8004e32:	1e5a      	subs	r2, r3, #1
 8004e34:	71fa      	strb	r2, [r7, #7]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1fa      	bne.n	8004e30 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e40:	4803      	ldr	r0, [pc, #12]	; (8004e50 <lowlayer_resetEncoder+0x38>)
 8004e42:	f007 f977 	bl	800c134 <HAL_GPIO_WritePin>
}
 8004e46:	bf00      	nop
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40020c00 	.word	0x40020c00

08004e54 <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 8004e5a:	4805      	ldr	r0, [pc, #20]	; (8004e70 <lowlayer_readLimitSwitch+0x1c>)
 8004e5c:	f7fe fb63 	bl	8003526 <FSMC_Read>
 8004e60:	4603      	mov	r3, r0
 8004e62:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 8004e64:	88fb      	ldrh	r3, [r7, #6]
 8004e66:	b2db      	uxtb	r3, r3
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	60000020 	.word	0x60000020

08004e74 <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 8004e7e:	79fb      	ldrb	r3, [r7, #7]
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d81c      	bhi.n	8004ebe <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004e8a:	3310      	adds	r3, #16
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fe fb49 	bl	8003526 <FSMC_Read>
 8004e94:	4603      	mov	r3, r0
 8004e96:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 8004e98:	79fb      	ldrb	r3, [r7, #7]
 8004e9a:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004e9e:	3310      	adds	r3, #16
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	3302      	adds	r3, #2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7fe fb3e 	bl	8003526 <FSMC_Read>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8004eae:	893b      	ldrh	r3, [r7, #8]
 8004eb0:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	041a      	lsls	r2, r3, #16
 8004eb6:	897b      	ldrh	r3, [r7, #10]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	e001      	b.n	8004ec2 <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d81c      	bhi.n	8004f16 <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 8004edc:	79fb      	ldrb	r3, [r7, #7]
 8004ede:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004ee2:	3318      	adds	r3, #24
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fe fb1d 	bl	8003526 <FSMC_Read>
 8004eec:	4603      	mov	r3, r0
 8004eee:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 8004ef0:	79fb      	ldrb	r3, [r7, #7]
 8004ef2:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004ef6:	3318      	adds	r3, #24
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	3302      	adds	r3, #2
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7fe fb12 	bl	8003526 <FSMC_Read>
 8004f02:	4603      	mov	r3, r0
 8004f04:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8004f06:	893b      	ldrh	r3, [r7, #8]
 8004f08:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	041a      	lsls	r2, r3, #16
 8004f0e:	897b      	ldrh	r3, [r7, #10]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e001      	b.n	8004f1a <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 8004f24:	b590      	push	{r4, r7, lr}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	71fb      	strb	r3, [r7, #7]
 8004f2e:	e00b      	b.n	8004f48 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 8004f30:	79fc      	ldrb	r4, [r7, #7]
 8004f32:	79fb      	ldrb	r3, [r7, #7]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff ff9d 	bl	8004e74 <lowlayer_readEncoder>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <lowlayer_updateEncoder+0x34>)
 8004f3e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	3301      	adds	r3, #1
 8004f46:	71fb      	strb	r3, [r7, #7]
 8004f48:	79fb      	ldrb	r3, [r7, #7]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d9f0      	bls.n	8004f30 <lowlayer_updateEncoder+0xc>
	}
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd90      	pop	{r4, r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20004ed4 	.word	0x20004ed4

08004f5c <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 8004f5c:	b590      	push	{r4, r7, lr}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8004f62:	2300      	movs	r3, #0
 8004f64:	71fb      	strb	r3, [r7, #7]
 8004f66:	e00b      	b.n	8004f80 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 8004f68:	79fc      	ldrb	r4, [r7, #7]
 8004f6a:	79fb      	ldrb	r3, [r7, #7]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff ffad 	bl	8004ecc <lowlayer_readCapture>
 8004f72:	4602      	mov	r2, r0
 8004f74:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <lowlayer_updateCapture+0x34>)
 8004f76:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	71fb      	strb	r3, [r7, #7]
 8004f80:	79fb      	ldrb	r3, [r7, #7]
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d9f0      	bls.n	8004f68 <lowlayer_updateCapture+0xc>
	}
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd90      	pop	{r4, r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20004ee4 	.word	0x20004ee4

08004f94 <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 8004f9a:	f7ff ff5b 	bl	8004e54 <lowlayer_readLimitSwitch>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	71fb      	strb	r3, [r7, #7]
 8004fa6:	e00d      	b.n	8004fc4 <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 8004fa8:	79ba      	ldrb	r2, [r7, #6]
 8004faa:	79fb      	ldrb	r3, [r7, #7]
 8004fac:	fa42 f303 	asr.w	r3, r2, r3
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	79fb      	ldrb	r3, [r7, #7]
 8004fb4:	f002 0201 	and.w	r2, r2, #1
 8004fb8:	b2d1      	uxtb	r1, r2
 8004fba:	4a06      	ldr	r2, [pc, #24]	; (8004fd4 <lowlayer_updateLimit+0x40>)
 8004fbc:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	71fb      	strb	r3, [r7, #7]
 8004fc4:	79fb      	ldrb	r3, [r7, #7]
 8004fc6:	2b03      	cmp	r3, #3
 8004fc8:	d9ee      	bls.n	8004fa8 <lowlayer_updateLimit+0x14>
	}
}
 8004fca:	bf00      	nop
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	20004ee0 	.word	0x20004ee0

08004fd8 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 8004fe2:	79fb      	ldrb	r3, [r7, #7]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d006      	beq.n	8004ff6 <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004fee:	4807      	ldr	r0, [pc, #28]	; (800500c <lowlayer_setOutput+0x34>)
 8004ff0:	f007 f8a0 	bl	800c134 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 8004ff4:	e005      	b.n	8005002 <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ffc:	4803      	ldr	r0, [pc, #12]	; (800500c <lowlayer_setOutput+0x34>)
 8004ffe:	f007 f899 	bl	800c134 <HAL_GPIO_WritePin>
}
 8005002:	bf00      	nop
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	40020400 	.word	0x40020400

08005010 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 8005014:	2201      	movs	r2, #1
 8005016:	2140      	movs	r1, #64	; 0x40
 8005018:	4802      	ldr	r0, [pc, #8]	; (8005024 <lowlayer_CPLD_Init+0x14>)
 800501a:	f007 f88b 	bl	800c134 <HAL_GPIO_WritePin>
}
 800501e:	bf00      	nop
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40020c00 	.word	0x40020c00

08005028 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 800502c:	2201      	movs	r2, #1
 800502e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005032:	4808      	ldr	r0, [pc, #32]	; (8005054 <lowlayer_stepMotorInit+0x2c>)
 8005034:	f007 f87e 	bl	800c134 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 8005038:	2201      	movs	r2, #1
 800503a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800503e:	4805      	ldr	r0, [pc, #20]	; (8005054 <lowlayer_stepMotorInit+0x2c>)
 8005040:	f007 f878 	bl	800c134 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 8005044:	2201      	movs	r2, #1
 8005046:	f44f 7180 	mov.w	r1, #256	; 0x100
 800504a:	4802      	ldr	r0, [pc, #8]	; (8005054 <lowlayer_stepMotorInit+0x2c>)
 800504c:	f007 f872 	bl	800c134 <HAL_GPIO_WritePin>
}
 8005050:	bf00      	nop
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40020000 	.word	0x40020000

08005058 <scaraStartup>:
//											 "Over Velocity",
//											 "Over Accelerate",
//											 "Wrong Joint Num",
//											 "Wrong Coordinate"
//											};
void				scaraStartup(void) {
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 800505c:	f7ff ffd8 	bl	8005010 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 8005060:	f7ff ffe2 	bl	8005028 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 8005064:	f7ff fed8 	bl	8004e18 <lowlayer_resetEncoder>
	//lowlayer_writePulse(0, 0, 0, 0);
}
 8005068:	bf00      	nop
 800506a:	bd80      	pop	{r7, pc}
 800506c:	0000      	movs	r0, r0
	...

08005070 <scara_test_InitDuty>:

SCARA_StatusTypeDef scara_test_InitDuty(DUTY_Command_TypeDef command)
{
 8005070:	b084      	sub	sp, #16
 8005072:	b5b0      	push	{r4, r5, r7, lr}
 8005074:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8005078:	af5e      	add	r7, sp, #376	; 0x178
 800507a:	f107 0ce8 	add.w	ip, r7, #232	; 0xe8
 800507e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;
	double total_s, angle_s;
	int8_t dir_angle;
	SCARA_PositionTypeDef target_point;
	command.target_point.roll = command.target_point.roll*PI/180.0;
 8005082:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8005086:	a38c      	add	r3, pc, #560	; (adr r3, 80052b8 <scara_test_InitDuty+0x248>)
 8005088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508c:	f7fb fab4 	bl	80005f8 <__aeabi_dmul>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	4610      	mov	r0, r2
 8005096:	4619      	mov	r1, r3
 8005098:	f04f 0200 	mov.w	r2, #0
 800509c:	4b88      	ldr	r3, [pc, #544]	; (80052c0 <scara_test_InitDuty+0x250>)
 800509e:	f7fb fbd5 	bl	800084c <__aeabi_ddiv>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
	if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80050aa:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d12c      	bne.n	800510c <scara_test_InitDuty+0x9c>
		target_point.x 		= positionCurrent.x + command.target_point.x;
 80050b2:	4b84      	ldr	r3, [pc, #528]	; (80052c4 <scara_test_InitDuty+0x254>)
 80050b4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80050b8:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80050bc:	f7fb f8e6 	bl	800028c <__adddf3>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		target_point.y 		= positionCurrent.y + command.target_point.y;
 80050c8:	4b7e      	ldr	r3, [pc, #504]	; (80052c4 <scara_test_InitDuty+0x254>)
 80050ca:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80050ce:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80050d2:	f7fb f8db 	bl	800028c <__adddf3>
 80050d6:	4602      	mov	r2, r0
 80050d8:	460b      	mov	r3, r1
 80050da:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		target_point.z 		= positionCurrent.z + command.target_point.z;
 80050de:	4b79      	ldr	r3, [pc, #484]	; (80052c4 <scara_test_InitDuty+0x254>)
 80050e0:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80050e4:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 80050e8:	f7fb f8d0 	bl	800028c <__adddf3>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		target_point.roll	= positionCurrent.roll + command.target_point.roll;
 80050f4:	4b73      	ldr	r3, [pc, #460]	; (80052c4 <scara_test_InitDuty+0x254>)
 80050f6:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80050fa:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80050fe:	f7fb f8c5 	bl	800028c <__adddf3>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 800510a:	e016      	b.n	800513a <scara_test_InitDuty+0xca>
	} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 800510c:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 8005110:	2b00      	cmp	r3, #0
 8005112:	d110      	bne.n	8005136 <scara_test_InitDuty+0xc6>
		target_point.x 		= command.target_point.x;
 8005114:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8005118:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		target_point.y 		= command.target_point.y;
 800511c:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8005120:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		target_point.z 		= command.target_point.z;
 8005124:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8005128:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		target_point.roll	= command.target_point.roll;
 800512c:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8005130:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8005134:	e001      	b.n	800513a <scara_test_InitDuty+0xca>
	} else {
		return SCARA_STATUS_ERROR_COORDINATE;
 8005136:	230c      	movs	r3, #12
 8005138:	e0b7      	b.n	80052aa <scara_test_InitDuty+0x23a>
	}
	angle_s = target_point.roll - positionCurrent.roll;
 800513a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800513e:	4b61      	ldr	r3, [pc, #388]	; (80052c4 <scara_test_InitDuty+0x254>)
 8005140:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005144:	f7fb f8a0 	bl	8000288 <__aeabi_dsub>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	dir_angle = 1;
 8005150:	2301      	movs	r3, #1
 8005152:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	if ( angle_s < 0) {
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005162:	f7fb fcbb 	bl	8000adc <__aeabi_dcmplt>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <scara_test_InitDuty+0x102>
		dir_angle = -1;
 800516c:	23ff      	movs	r3, #255	; 0xff
 800516e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	if ( fabs(angle_s) > PI) {
 8005172:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 8005176:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800517a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800517e:	a34e      	add	r3, pc, #312	; (adr r3, 80052b8 <scara_test_InitDuty+0x248>)
 8005180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005184:	4620      	mov	r0, r4
 8005186:	4629      	mov	r1, r5
 8005188:	f7fb fcc6 	bl	8000b18 <__aeabi_dcmpgt>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d021      	beq.n	80051d6 <scara_test_InitDuty+0x166>
		dir_angle = -dir_angle;
 8005192:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005196:	425b      	negs	r3, r3
 8005198:	b2db      	uxtb	r3, r3
 800519a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		angle_s = (2*PI - fabsf(angle_s))*dir_angle;
 800519e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80051a2:	f7fb fd21 	bl	8000be8 <__aeabi_d2f>
 80051a6:	ee07 0a90 	vmov	s15, r0
 80051aa:	eef0 7ae7 	vabs.f32	s15, s15
 80051ae:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80052c8 <scara_test_InitDuty+0x258>
 80051b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80051b6:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 80051ba:	ee07 3a90 	vmov	s15, r3
 80051be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c6:	ee17 0a90 	vmov	r0, s15
 80051ca:	f7fb f9bd 	bl	8000548 <__aeabi_f2d>
 80051ce:	4603      	mov	r3, r0
 80051d0:	460c      	mov	r4, r1
 80051d2:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	}
	myDUTY.time_total = command.time_total;
 80051d6:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 80051da:	4a3c      	ldr	r2, [pc, #240]	; (80052cc <scara_test_InitDuty+0x25c>)
 80051dc:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80051e0:	e9c2 3400 	strd	r3, r4, [r2]
	myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 80051e4:	4b39      	ldr	r3, [pc, #228]	; (80052cc <scara_test_InitDuty+0x25c>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	701a      	strb	r2, [r3, #0]
	myDUTY.task.roll_start = positionCurrent.roll;
 80051ea:	4b36      	ldr	r3, [pc, #216]	; (80052c4 <scara_test_InitDuty+0x254>)
 80051ec:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80051f0:	4a36      	ldr	r2, [pc, #216]	; (80052cc <scara_test_InitDuty+0x25c>)
 80051f2:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 80051f6:	e9c2 3400 	strd	r3, r4, [r2]
	myDUTY.task.path.path_type = DUTY_PATH_LINE;
 80051fa:	4b34      	ldr	r3, [pc, #208]	; (80052cc <scara_test_InitDuty+0x25c>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	721a      	strb	r2, [r3, #8]
	myDUTY.task.trajectory_roll.lspb.total_s = angle_s;
 8005200:	4a32      	ldr	r2, [pc, #200]	; (80052cc <scara_test_InitDuty+0x25c>)
 8005202:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8005206:	e9c2 34be 	strd	r3, r4, [r2, #760]	; 0x2f8
	myDUTY.task.trajectory_roll.lspb.dir = dir_angle;
 800520a:	4a30      	ldr	r2, [pc, #192]	; (80052cc <scara_test_InitDuty+0x25c>)
 800520c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005210:	f882 3298 	strb.w	r3, [r2, #664]	; 0x298
	myDUTY.task.trajectory_roll.lspb.v_design = angle_s/command.time_total;
 8005214:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8005218:	461a      	mov	r2, r3
 800521a:	4623      	mov	r3, r4
 800521c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005220:	f7fb fb14 	bl	800084c <__aeabi_ddiv>
 8005224:	4603      	mov	r3, r0
 8005226:	460c      	mov	r4, r1
 8005228:	4a28      	ldr	r2, [pc, #160]	; (80052cc <scara_test_InitDuty+0x25c>)
 800522a:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
	myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 800522e:	4b27      	ldr	r3, [pc, #156]	; (80052cc <scara_test_InitDuty+0x25c>)
 8005230:	2202      	movs	r2, #2
 8005232:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 8005236:	4c23      	ldr	r4, [pc, #140]	; (80052c4 <scara_test_InitDuty+0x254>)
 8005238:	a82e      	add	r0, sp, #184	; 0xb8
 800523a:	463b      	mov	r3, r7
 800523c:	22c0      	movs	r2, #192	; 0xc0
 800523e:	4619      	mov	r1, r3
 8005240:	f010 fd0c 	bl	8015c5c <memcpy>
 8005244:	4668      	mov	r0, sp
 8005246:	f104 0308 	add.w	r3, r4, #8
 800524a:	22b8      	movs	r2, #184	; 0xb8
 800524c:	4619      	mov	r1, r3
 800524e:	f010 fd05 	bl	8015c5c <memcpy>
 8005252:	e894 000c 	ldmia.w	r4, {r2, r3}
 8005256:	481e      	ldr	r0, [pc, #120]	; (80052d0 <scara_test_InitDuty+0x260>)
 8005258:	f001 fbc6 	bl	80069e8 <scaraInitLine>
 800525c:	4603      	mov	r3, r0
 800525e:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
	total_s = myDUTY.task.path.line.total_s;
 8005262:	4b1a      	ldr	r3, [pc, #104]	; (80052cc <scara_test_InitDuty+0x25c>)
 8005264:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8005268:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
	if(status != SCARA_STATUS_OK){
 800526c:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <scara_test_InitDuty+0x20a>
		return status;
 8005274:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8005278:	e017      	b.n	80052aa <scara_test_InitDuty+0x23a>
	}
	status = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, total_s, DUTY_MODE_INIT_QT, command.time_total);
 800527a:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 800527e:	eeb0 1a47 	vmov.f32	s2, s14
 8005282:	eef0 1a67 	vmov.f32	s3, s15
 8005286:	2203      	movs	r2, #3
 8005288:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 800528c:	2104      	movs	r1, #4
 800528e:	4811      	ldr	r0, [pc, #68]	; (80052d4 <scara_test_InitDuty+0x264>)
 8005290:	f001 fde6 	bl	8006e60 <scaraInitLinear>
 8005294:	4603      	mov	r3, r0
 8005296:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
	if(status != SCARA_STATUS_OK){
 800529a:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <scara_test_InitDuty+0x238>
		return status;
 80052a2:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80052a6:	e000      	b.n	80052aa <scara_test_InitDuty+0x23a>
	}

	return SCARA_STATUS_OK;
 80052a8:	2300      	movs	r3, #0
	
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	37d8      	adds	r7, #216	; 0xd8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80052b4:	b004      	add	sp, #16
 80052b6:	4770      	bx	lr
 80052b8:	60000000 	.word	0x60000000
 80052bc:	400921fb 	.word	0x400921fb
 80052c0:	40668000 	.word	0x40668000
 80052c4:	20005ae8 	.word	0x20005ae8
 80052c8:	40c90fdb 	.word	0x40c90fdb
 80052cc:	20004f28 	.word	0x20004f28
 80052d0:	20004f38 	.word	0x20004f38
 80052d4:	20005190 	.word	0x20005190

080052d8 <scaraInitDuty>:

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 80052d8:	b084      	sub	sp, #16
 80052da:	b5b0      	push	{r4, r5, r7, lr}
 80052dc:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 80052e0:	af90      	add	r7, sp, #576	; 0x240
 80052e2:	f507 7ce8 	add.w	ip, r7, #464	; 0x1d0
 80052e6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if(DUTY_SPACE_TASK == command.space_type) {
 80052ea:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f040 83b7 	bne.w	8005a62 <scaraInitDuty+0x78a>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 80052f4:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 80052f8:	a3b3      	add	r3, pc, #716	; (adr r3, 80055c8 <scaraInitDuty+0x2f0>)
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	f7fb f97b 	bl	80005f8 <__aeabi_dmul>
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	4610      	mov	r0, r2
 8005308:	4619      	mov	r1, r3
 800530a:	f04f 0200 	mov.w	r2, #0
 800530e:	4bb0      	ldr	r3, [pc, #704]	; (80055d0 <scaraInitDuty+0x2f8>)
 8005310:	f7fb fa9c 	bl	800084c <__aeabi_ddiv>
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 800531c:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005320:	2b01      	cmp	r3, #1
 8005322:	d130      	bne.n	8005386 <scaraInitDuty+0xae>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8005324:	4bab      	ldr	r3, [pc, #684]	; (80055d4 <scaraInitDuty+0x2fc>)
 8005326:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800532a:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 800532e:	f7fa ffad 	bl	800028c <__adddf3>
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	4639      	mov	r1, r7
 8005338:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 800533c:	4ba5      	ldr	r3, [pc, #660]	; (80055d4 <scaraInitDuty+0x2fc>)
 800533e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005342:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8005346:	f7fa ffa1 	bl	800028c <__adddf3>
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	4639      	mov	r1, r7
 8005350:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8005354:	4b9f      	ldr	r3, [pc, #636]	; (80055d4 <scaraInitDuty+0x2fc>)
 8005356:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800535a:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800535e:	f7fa ff95 	bl	800028c <__adddf3>
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	4639      	mov	r1, r7
 8005368:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 800536c:	4b99      	ldr	r3, [pc, #612]	; (80055d4 <scaraInitDuty+0x2fc>)
 800536e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8005372:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8005376:	f7fa ff89 	bl	800028c <__adddf3>
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4639      	mov	r1, r7
 8005380:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8005384:	e01b      	b.n	80053be <scaraInitDuty+0xe6>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005386:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 800538a:	2b00      	cmp	r3, #0
 800538c:	d114      	bne.n	80053b8 <scaraInitDuty+0xe0>
			target_point.x 		= command.target_point.x;
 800538e:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8005392:	4639      	mov	r1, r7
 8005394:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 8005398:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 800539c:	4639      	mov	r1, r7
 800539e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 80053a2:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 80053a6:	4639      	mov	r1, r7
 80053a8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 80053ac:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80053b0:	4639      	mov	r1, r7
 80053b2:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 80053b6:	e002      	b.n	80053be <scaraInitDuty+0xe6>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 80053b8:	230c      	movs	r3, #12
 80053ba:	f001 bb02 	b.w	80069c2 <scaraInitDuty+0x16ea>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 80053be:	463b      	mov	r3, r7
 80053c0:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80053c4:	4b83      	ldr	r3, [pc, #524]	; (80055d4 <scaraInitDuty+0x2fc>)
 80053c6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80053ca:	f7fa ff5d 	bl	8000288 <__aeabi_dsub>
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
		dir_angle = 1;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
		if ( angle_s < 0) {
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 80053e8:	f7fb fb78 	bl	8000adc <__aeabi_dcmplt>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d002      	beq.n	80053f8 <scaraInitDuty+0x120>
			dir_angle = -1;
 80053f2:	23ff      	movs	r3, #255	; 0xff
 80053f4:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
		}
		if ( fabs(angle_s) > PI) {
 80053f8:	f8d7 41a8 	ldr.w	r4, [r7, #424]	; 0x1a8
 80053fc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005400:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005404:	a370      	add	r3, pc, #448	; (adr r3, 80055c8 <scaraInitDuty+0x2f0>)
 8005406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540a:	4620      	mov	r0, r4
 800540c:	4629      	mov	r1, r5
 800540e:	f7fb fb83 	bl	8000b18 <__aeabi_dcmpgt>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d021      	beq.n	800545c <scaraInitDuty+0x184>
			dir_angle = -dir_angle;
 8005418:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 800541c:	425b      	negs	r3, r3
 800541e:	b2db      	uxtb	r3, r3
 8005420:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
			angle_s = (2*PI - fabsf(angle_s))*dir_angle;
 8005424:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8005428:	f7fb fbde 	bl	8000be8 <__aeabi_d2f>
 800542c:	ee07 0a90 	vmov	s15, r0
 8005430:	eef0 7ae7 	vabs.f32	s15, s15
 8005434:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80055d8 <scaraInitDuty+0x300>
 8005438:	ee37 7a67 	vsub.f32	s14, s14, s15
 800543c:	f997 31a7 	ldrsb.w	r3, [r7, #423]	; 0x1a7
 8005440:	ee07 3a90 	vmov	s15, r3
 8005444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544c:	ee17 0a90 	vmov	r0, s15
 8005450:	f7fb f87a 	bl	8000548 <__aeabi_f2d>
 8005454:	4603      	mov	r3, r0
 8005456:	460c      	mov	r4, r1
 8005458:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
		}


		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 800545c:	4b5f      	ldr	r3, [pc, #380]	; (80055dc <scaraInitDuty+0x304>)
 800545e:	2200      	movs	r2, #0
 8005460:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 8005462:	4b5c      	ldr	r3, [pc, #368]	; (80055d4 <scaraInitDuty+0x2fc>)
 8005464:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8005468:	4a5c      	ldr	r2, [pc, #368]	; (80055dc <scaraInitDuty+0x304>)
 800546a:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 800546e:	e9c2 3400 	strd	r3, r4, [r2]
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 8005472:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8005476:	2b00      	cmp	r3, #0
 8005478:	d11f      	bne.n	80054ba <scaraInitDuty+0x1e2>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 800547a:	4b58      	ldr	r3, [pc, #352]	; (80055dc <scaraInitDuty+0x304>)
 800547c:	2200      	movs	r2, #0
 800547e:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 8005480:	4c54      	ldr	r4, [pc, #336]	; (80055d4 <scaraInitDuty+0x2fc>)
 8005482:	463b      	mov	r3, r7
 8005484:	a82e      	add	r0, sp, #184	; 0xb8
 8005486:	4619      	mov	r1, r3
 8005488:	23c0      	movs	r3, #192	; 0xc0
 800548a:	461a      	mov	r2, r3
 800548c:	f010 fbe6 	bl	8015c5c <memcpy>
 8005490:	4668      	mov	r0, sp
 8005492:	f104 0308 	add.w	r3, r4, #8
 8005496:	22b8      	movs	r2, #184	; 0xb8
 8005498:	4619      	mov	r1, r3
 800549a:	f010 fbdf 	bl	8015c5c <memcpy>
 800549e:	e894 000c 	ldmia.w	r4, {r2, r3}
 80054a2:	484f      	ldr	r0, [pc, #316]	; (80055e0 <scaraInitDuty+0x308>)
 80054a4:	f001 faa0 	bl	80069e8 <scaraInitLine>
 80054a8:	4603      	mov	r3, r0
 80054aa:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
			total_s = myDUTY.task.path.line.total_s;
 80054ae:	4b4b      	ldr	r3, [pc, #300]	; (80055dc <scaraInitDuty+0x304>)
 80054b0:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 80054b4:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
 80054b8:	e07d      	b.n	80055b6 <scaraInitDuty+0x2de>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 80054ba:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d176      	bne.n	80055b0 <scaraInitDuty+0x2d8>
			SCARA_PositionTypeDef	center_point;
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80054c2:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d12d      	bne.n	8005526 <scaraInitDuty+0x24e>
				center_point.x 		= positionCurrent.x + command.sub_point.x;
 80054ca:	4b42      	ldr	r3, [pc, #264]	; (80055d4 <scaraInitDuty+0x2fc>)
 80054cc:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80054d0:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 80054d4:	461a      	mov	r2, r3
 80054d6:	4623      	mov	r3, r4
 80054d8:	f7fa fed8 	bl	800028c <__adddf3>
 80054dc:	4603      	mov	r3, r0
 80054de:	460c      	mov	r4, r1
 80054e0:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80054e4:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
				center_point.y 		= positionCurrent.y + command.sub_point.y;
 80054e8:	4b3a      	ldr	r3, [pc, #232]	; (80055d4 <scaraInitDuty+0x2fc>)
 80054ea:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80054ee:	e9d7 34c2 	ldrd	r3, r4, [r7, #776]	; 0x308
 80054f2:	461a      	mov	r2, r3
 80054f4:	4623      	mov	r3, r4
 80054f6:	f7fa fec9 	bl	800028c <__adddf3>
 80054fa:	4603      	mov	r3, r0
 80054fc:	460c      	mov	r4, r1
 80054fe:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8005502:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
				center_point.z 		= positionCurrent.z + command.sub_point.z;
 8005506:	4b33      	ldr	r3, [pc, #204]	; (80055d4 <scaraInitDuty+0x2fc>)
 8005508:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800550c:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 8005510:	461a      	mov	r2, r3
 8005512:	4623      	mov	r3, r4
 8005514:	f7fa feba 	bl	800028c <__adddf3>
 8005518:	4603      	mov	r3, r0
 800551a:	460c      	mov	r4, r1
 800551c:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8005520:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
 8005524:	e019      	b.n	800555a <scaraInitDuty+0x282>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005526:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 800552a:	2b00      	cmp	r3, #0
 800552c:	d112      	bne.n	8005554 <scaraInitDuty+0x27c>
				center_point.x 		= command.target_point.x;
 800552e:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8005532:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8005536:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
				center_point.y 		= command.target_point.y;
 800553a:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 800553e:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8005542:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
				center_point.z 		= command.target_point.z;
 8005546:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 800554a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800554e:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
 8005552:	e002      	b.n	800555a <scaraInitDuty+0x282>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 8005554:	230c      	movs	r3, #12
			return SCARA_STATUS_ERROR_COORDINATE;
 8005556:	f001 ba34 	b.w	80069c2 <scaraInitDuty+0x16ea>
			}

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 800555a:	4b20      	ldr	r3, [pc, #128]	; (80055dc <scaraInitDuty+0x304>)
 800555c:	2201      	movs	r2, #1
 800555e:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8005560:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005564:	4c1b      	ldr	r4, [pc, #108]	; (80055d4 <scaraInitDuty+0x2fc>)
 8005566:	938e      	str	r3, [sp, #568]	; 0x238
 8005568:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800556c:	a85e      	add	r0, sp, #376	; 0x178
 800556e:	4619      	mov	r1, r3
 8005570:	23c0      	movs	r3, #192	; 0xc0
 8005572:	461a      	mov	r2, r3
 8005574:	f010 fb72 	bl	8015c5c <memcpy>
 8005578:	463b      	mov	r3, r7
 800557a:	a82e      	add	r0, sp, #184	; 0xb8
 800557c:	4619      	mov	r1, r3
 800557e:	23c0      	movs	r3, #192	; 0xc0
 8005580:	461a      	mov	r2, r3
 8005582:	f010 fb6b 	bl	8015c5c <memcpy>
 8005586:	4668      	mov	r0, sp
 8005588:	f104 0308 	add.w	r3, r4, #8
 800558c:	22b8      	movs	r2, #184	; 0xb8
 800558e:	4619      	mov	r1, r3
 8005590:	f010 fb64 	bl	8015c5c <memcpy>
 8005594:	e894 000c 	ldmia.w	r4, {r2, r3}
 8005598:	4812      	ldr	r0, [pc, #72]	; (80055e4 <scaraInitDuty+0x30c>)
 800559a:	f001 fae9 	bl	8006b70 <scaraInitCircle>
 800559e:	4603      	mov	r3, r0
 80055a0:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
										positionCurrent,
										target_point,
										center_point,
										command.sub_para_int );
			total_s = myDUTY.task.path.circle.total_s;
 80055a4:	4b0d      	ldr	r3, [pc, #52]	; (80055dc <scaraInitDuty+0x304>)
 80055a6:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 80055aa:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
 80055ae:	e002      	b.n	80055b6 <scaraInitDuty+0x2de>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 80055b0:	2303      	movs	r3, #3
 80055b2:	f001 ba06 	b.w	80069c2 <scaraInitDuty+0x16ea>
		}

		if ( SCARA_STATUS_OK != status) {
 80055b6:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d014      	beq.n	80055e8 <scaraInitDuty+0x310>
			return status;
 80055be:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 80055c2:	f001 b9fe 	b.w	80069c2 <scaraInitDuty+0x16ea>
 80055c6:	bf00      	nop
 80055c8:	60000000 	.word	0x60000000
 80055cc:	400921fb 	.word	0x400921fb
 80055d0:	40668000 	.word	0x40668000
 80055d4:	20005ae8 	.word	0x20005ae8
 80055d8:	40c90fdb 	.word	0x40c90fdb
 80055dc:	20004f28 	.word	0x20004f28
 80055e0:	20004f38 	.word	0x20004f38
 80055e4:	20004fa8 	.word	0x20004fa8
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 80055e8:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f040 80ed 	bne.w	80057cc <scaraInitDuty+0x4f4>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80055f2:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d155      	bne.n	80056a6 <scaraInitDuty+0x3ce>
//				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
//				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
//						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
//				myDUTY.time_total = command.time_total;

				myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
 80055fa:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80055fe:	4a9b      	ldr	r2, [pc, #620]	; (800586c <scaraInitDuty+0x594>)
 8005600:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005604:	4b99      	ldr	r3, [pc, #612]	; (800586c <scaraInitDuty+0x594>)
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 800560c:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005610:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 8005614:	eeb0 2a46 	vmov.f32	s4, s12
 8005618:	eef0 2a66 	vmov.f32	s5, s13
 800561c:	eeb0 1a47 	vmov.f32	s2, s14
 8005620:	eef0 1a67 	vmov.f32	s3, s15
 8005624:	2201      	movs	r2, #1
 8005626:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 800562a:	2104      	movs	r1, #4
 800562c:	4890      	ldr	r0, [pc, #576]	; (8005870 <scaraInitDuty+0x598>)
 800562e:	f001 fc63 	bl	8006ef8 <scaraInitLSPB1>
 8005632:	4603      	mov	r3, r0
 8005634:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);

				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8005638:	4a8c      	ldr	r2, [pc, #560]	; (800586c <scaraInitDuty+0x594>)
 800563a:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 800563e:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
 8005642:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005646:	4a89      	ldr	r2, [pc, #548]	; (800586c <scaraInitDuty+0x594>)
 8005648:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800564c:	e9c2 3400 	strd	r3, r4, [r2]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8005650:	4b86      	ldr	r3, [pc, #536]	; (800586c <scaraInitDuty+0x594>)
 8005652:	2202      	movs	r2, #2
 8005654:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total);
 8005658:	f997 31a7 	ldrsb.w	r3, [r7, #423]	; 0x1a7
 800565c:	4618      	mov	r0, r3
 800565e:	f7fa ff61 	bl	8000524 <__aeabi_i2d>
 8005662:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8005666:	f7fa ffc7 	bl	80005f8 <__aeabi_dmul>
 800566a:	4603      	mov	r3, r0
 800566c:	460c      	mov	r4, r1
 800566e:	ec44 3b16 	vmov	d6, r3, r4
 8005672:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 8005676:	eeb0 1a47 	vmov.f32	s2, s14
 800567a:	eef0 1a67 	vmov.f32	s3, s15
 800567e:	2203      	movs	r2, #3
 8005680:	eeb0 0a46 	vmov.f32	s0, s12
 8005684:	eef0 0a66 	vmov.f32	s1, s13
 8005688:	2105      	movs	r1, #5
 800568a:	487a      	ldr	r0, [pc, #488]	; (8005874 <scaraInitDuty+0x59c>)
 800568c:	f001 fbe8 	bl	8006e60 <scaraInitLinear>
 8005690:	4603      	mov	r3, r0
 8005692:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
				myDUTY.time_total = command.time_total;
 8005696:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800569a:	4a74      	ldr	r2, [pc, #464]	; (800586c <scaraInitDuty+0x594>)
 800569c:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80056a0:	e9c2 3400 	strd	r3, r4, [r2]
 80056a4:	e1cc      	b.n	8005a40 <scaraInitDuty+0x768>
			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80056a6:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f040 808b 	bne.w	80057c6 <scaraInitDuty+0x4ee>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 80056b0:	4b6e      	ldr	r3, [pc, #440]	; (800586c <scaraInitDuty+0x594>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 80056b8:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80056bc:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80056c0:	eeb0 2a46 	vmov.f32	s4, s12
 80056c4:	eef0 2a66 	vmov.f32	s5, s13
 80056c8:	eeb0 1a47 	vmov.f32	s2, s14
 80056cc:	eef0 1a67 	vmov.f32	s3, s15
 80056d0:	2200      	movs	r2, #0
 80056d2:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 80056d6:	2104      	movs	r1, #4
 80056d8:	4865      	ldr	r0, [pc, #404]	; (8005870 <scaraInitDuty+0x598>)
 80056da:	f001 fe69 	bl	80073b0 <scaraInitLSPB>
 80056de:	4603      	mov	r3, r0
 80056e0:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 80056e4:	4b61      	ldr	r3, [pc, #388]	; (800586c <scaraInitDuty+0x594>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 80056ec:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80056f0:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80056f4:	eeb0 2a46 	vmov.f32	s4, s12
 80056f8:	eef0 2a66 	vmov.f32	s5, s13
 80056fc:	eeb0 1a47 	vmov.f32	s2, s14
 8005700:	eef0 1a67 	vmov.f32	s3, s15
 8005704:	2200      	movs	r2, #0
 8005706:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 800570a:	2105      	movs	r1, #5
 800570c:	485a      	ldr	r0, [pc, #360]	; (8005878 <scaraInitDuty+0x5a0>)
 800570e:	f001 fe4f 	bl	80073b0 <scaraInitLSPB>
 8005712:	4603      	mov	r3, r0
 8005714:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 8005718:	4b54      	ldr	r3, [pc, #336]	; (800586c <scaraInitDuty+0x594>)
 800571a:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 800571e:	4b53      	ldr	r3, [pc, #332]	; (800586c <scaraInitDuty+0x594>)
 8005720:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8005724:	461a      	mov	r2, r3
 8005726:	4623      	mov	r3, r4
 8005728:	f7fb f9f6 	bl	8000b18 <__aeabi_dcmpgt>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d024      	beq.n	800577c <scaraInitDuty+0x4a4>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 8005732:	4b4e      	ldr	r3, [pc, #312]	; (800586c <scaraInitDuty+0x594>)
 8005734:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8005738:	4a4c      	ldr	r2, [pc, #304]	; (800586c <scaraInitDuty+0x594>)
 800573a:	e9c2 34ba 	strd	r3, r4, [r2, #744]	; 0x2e8
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 800573e:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005742:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005746:	eeb0 2a46 	vmov.f32	s4, s12
 800574a:	eef0 2a66 	vmov.f32	s5, s13
 800574e:	eeb0 1a47 	vmov.f32	s2, s14
 8005752:	eef0 1a67 	vmov.f32	s3, s15
 8005756:	2201      	movs	r2, #1
 8005758:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 800575c:	2105      	movs	r1, #5
 800575e:	4846      	ldr	r0, [pc, #280]	; (8005878 <scaraInitDuty+0x5a0>)
 8005760:	f001 fe26 	bl	80073b0 <scaraInitLSPB>
 8005764:	4603      	mov	r3, r0
 8005766:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 800576a:	4b40      	ldr	r3, [pc, #256]	; (800586c <scaraInitDuty+0x594>)
 800576c:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8005770:	4a3e      	ldr	r2, [pc, #248]	; (800586c <scaraInitDuty+0x594>)
 8005772:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005776:	e9c2 3400 	strd	r3, r4, [r2]
 800577a:	e161      	b.n	8005a40 <scaraInitDuty+0x768>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 800577c:	4b3b      	ldr	r3, [pc, #236]	; (800586c <scaraInitDuty+0x594>)
 800577e:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8005782:	4a3a      	ldr	r2, [pc, #232]	; (800586c <scaraInitDuty+0x594>)
 8005784:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8005788:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 800578c:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005790:	eeb0 2a46 	vmov.f32	s4, s12
 8005794:	eef0 2a66 	vmov.f32	s5, s13
 8005798:	eeb0 1a47 	vmov.f32	s2, s14
 800579c:	eef0 1a67 	vmov.f32	s3, s15
 80057a0:	2201      	movs	r2, #1
 80057a2:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 80057a6:	2104      	movs	r1, #4
 80057a8:	4831      	ldr	r0, [pc, #196]	; (8005870 <scaraInitDuty+0x598>)
 80057aa:	f001 fe01 	bl	80073b0 <scaraInitLSPB>
 80057ae:	4603      	mov	r3, r0
 80057b0:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 80057b4:	4b2d      	ldr	r3, [pc, #180]	; (800586c <scaraInitDuty+0x594>)
 80057b6:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 80057ba:	4a2c      	ldr	r2, [pc, #176]	; (800586c <scaraInitDuty+0x594>)
 80057bc:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80057c0:	e9c2 3400 	strd	r3, r4, [r2]
 80057c4:	e13c      	b.n	8005a40 <scaraInitDuty+0x768>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 80057c6:	2308      	movs	r3, #8
 80057c8:	f001 b8fb 	b.w	80069c2 <scaraInitDuty+0x16ea>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 80057cc:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	f040 80ea 	bne.w	80059aa <scaraInitDuty+0x6d2>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80057d6:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d152      	bne.n	8005884 <scaraInitDuty+0x5ac>
				myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
 80057de:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80057e2:	4a22      	ldr	r2, [pc, #136]	; (800586c <scaraInitDuty+0x594>)
 80057e4:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80057e8:	4b20      	ldr	r3, [pc, #128]	; (800586c <scaraInitDuty+0x594>)
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 80057f0:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80057f4:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80057f8:	eeb0 2a46 	vmov.f32	s4, s12
 80057fc:	eef0 2a66 	vmov.f32	s5, s13
 8005800:	eeb0 1a47 	vmov.f32	s2, s14
 8005804:	eef0 1a67 	vmov.f32	s3, s15
 8005808:	2201      	movs	r2, #1
 800580a:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 800580e:	2104      	movs	r1, #4
 8005810:	481a      	ldr	r0, [pc, #104]	; (800587c <scaraInitDuty+0x5a4>)
 8005812:	f002 f9ad 	bl	8007b70 <scaraInitScurve>
 8005816:	4603      	mov	r3, r0
 8005818:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.scurve.Tf = command.time_total;
 800581c:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005820:	4a12      	ldr	r2, [pc, #72]	; (800586c <scaraInitDuty+0x594>)
 8005822:	e9c2 34de 	strd	r3, r4, [r2, #888]	; 0x378
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005826:	4b11      	ldr	r3, [pc, #68]	; (800586c <scaraInitDuty+0x594>)
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 800582e:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005832:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005836:	eeb0 2a46 	vmov.f32	s4, s12
 800583a:	eef0 2a66 	vmov.f32	s5, s13
 800583e:	eeb0 1a47 	vmov.f32	s2, s14
 8005842:	eef0 1a67 	vmov.f32	s3, s15
 8005846:	2201      	movs	r2, #1
 8005848:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 800584c:	2105      	movs	r1, #5
 800584e:	480c      	ldr	r0, [pc, #48]	; (8005880 <scaraInitDuty+0x5a8>)
 8005850:	f002 f98e 	bl	8007b70 <scaraInitScurve>
 8005854:	4603      	mov	r3, r0
 8005856:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 800585a:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800585e:	4a03      	ldr	r2, [pc, #12]	; (800586c <scaraInitDuty+0x594>)
 8005860:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005864:	e9c2 3400 	strd	r3, r4, [r2]
 8005868:	e0ea      	b.n	8005a40 <scaraInitDuty+0x768>
 800586a:	bf00      	nop
 800586c:	20004f28 	.word	0x20004f28
 8005870:	20005040 	.word	0x20005040
 8005874:	20005310 	.word	0x20005310
 8005878:	200051c0 	.word	0x200051c0
 800587c:	200050c0 	.word	0x200050c0
 8005880:	20005240 	.word	0x20005240

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005884:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005888:	2b00      	cmp	r3, #0
 800588a:	f040 808b 	bne.w	80059a4 <scaraInitDuty+0x6cc>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800588e:	4bc0      	ldr	r3, [pc, #768]	; (8005b90 <scaraInitDuty+0x8b8>)
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8005896:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 800589a:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 800589e:	eeb0 2a46 	vmov.f32	s4, s12
 80058a2:	eef0 2a66 	vmov.f32	s5, s13
 80058a6:	eeb0 1a47 	vmov.f32	s2, s14
 80058aa:	eef0 1a67 	vmov.f32	s3, s15
 80058ae:	2200      	movs	r2, #0
 80058b0:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 80058b4:	2104      	movs	r1, #4
 80058b6:	48b7      	ldr	r0, [pc, #732]	; (8005b94 <scaraInitDuty+0x8bc>)
 80058b8:	f002 f95a 	bl	8007b70 <scaraInitScurve>
 80058bc:	4603      	mov	r3, r0
 80058be:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80058c2:	4bb3      	ldr	r3, [pc, #716]	; (8005b90 <scaraInitDuty+0x8b8>)
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 80058ca:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80058ce:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80058d2:	eeb0 2a46 	vmov.f32	s4, s12
 80058d6:	eef0 2a66 	vmov.f32	s5, s13
 80058da:	eeb0 1a47 	vmov.f32	s2, s14
 80058de:	eef0 1a67 	vmov.f32	s3, s15
 80058e2:	2200      	movs	r2, #0
 80058e4:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 80058e8:	2105      	movs	r1, #5
 80058ea:	48ab      	ldr	r0, [pc, #684]	; (8005b98 <scaraInitDuty+0x8c0>)
 80058ec:	f002 f940 	bl	8007b70 <scaraInitScurve>
 80058f0:	4603      	mov	r3, r0
 80058f2:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 80058f6:	4ba6      	ldr	r3, [pc, #664]	; (8005b90 <scaraInitDuty+0x8b8>)
 80058f8:	e9d3 017e 	ldrd	r0, r1, [r3, #504]	; 0x1f8
 80058fc:	4ba4      	ldr	r3, [pc, #656]	; (8005b90 <scaraInitDuty+0x8b8>)
 80058fe:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 8005902:	461a      	mov	r2, r3
 8005904:	4623      	mov	r3, r4
 8005906:	f7fb f907 	bl	8000b18 <__aeabi_dcmpgt>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d024      	beq.n	800595a <scaraInitDuty+0x682>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 8005910:	4b9f      	ldr	r3, [pc, #636]	; (8005b90 <scaraInitDuty+0x8b8>)
 8005912:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8005916:	4a9e      	ldr	r2, [pc, #632]	; (8005b90 <scaraInitDuty+0x8b8>)
 8005918:	e9c2 34de 	strd	r3, r4, [r2, #888]	; 0x378
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 800591c:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005920:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005924:	eeb0 2a46 	vmov.f32	s4, s12
 8005928:	eef0 2a66 	vmov.f32	s5, s13
 800592c:	eeb0 1a47 	vmov.f32	s2, s14
 8005930:	eef0 1a67 	vmov.f32	s3, s15
 8005934:	2201      	movs	r2, #1
 8005936:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 800593a:	2105      	movs	r1, #5
 800593c:	4896      	ldr	r0, [pc, #600]	; (8005b98 <scaraInitDuty+0x8c0>)
 800593e:	f002 f917 	bl	8007b70 <scaraInitScurve>
 8005942:	4603      	mov	r3, r0
 8005944:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8005948:	4b91      	ldr	r3, [pc, #580]	; (8005b90 <scaraInitDuty+0x8b8>)
 800594a:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 800594e:	4a90      	ldr	r2, [pc, #576]	; (8005b90 <scaraInitDuty+0x8b8>)
 8005950:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005954:	e9c2 3400 	strd	r3, r4, [r2]
 8005958:	e072      	b.n	8005a40 <scaraInitDuty+0x768>
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 800595a:	4b8d      	ldr	r3, [pc, #564]	; (8005b90 <scaraInitDuty+0x8b8>)
 800595c:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 8005960:	4a8b      	ldr	r2, [pc, #556]	; (8005b90 <scaraInitDuty+0x8b8>)
 8005962:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8005966:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 800596a:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 800596e:	eeb0 2a46 	vmov.f32	s4, s12
 8005972:	eef0 2a66 	vmov.f32	s5, s13
 8005976:	eeb0 1a47 	vmov.f32	s2, s14
 800597a:	eef0 1a67 	vmov.f32	s3, s15
 800597e:	2201      	movs	r2, #1
 8005980:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005984:	2104      	movs	r1, #4
 8005986:	4883      	ldr	r0, [pc, #524]	; (8005b94 <scaraInitDuty+0x8bc>)
 8005988:	f002 f8f2 	bl	8007b70 <scaraInitScurve>
 800598c:	4603      	mov	r3, r0
 800598e:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 8005992:	4b7f      	ldr	r3, [pc, #508]	; (8005b90 <scaraInitDuty+0x8b8>)
 8005994:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 8005998:	4a7d      	ldr	r2, [pc, #500]	; (8005b90 <scaraInitDuty+0x8b8>)
 800599a:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 800599e:	e9c2 3400 	strd	r3, r4, [r2]
 80059a2:	e04d      	b.n	8005a40 <scaraInitDuty+0x768>
				}
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 80059a4:	2308      	movs	r3, #8
 80059a6:	f001 b80c 	b.w	80069c2 <scaraInitDuty+0x16ea>
			}
		}else if(DUTY_TRAJECTORY_LINEAR == command.trajec_type){
 80059aa:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d143      	bne.n	8005a3a <scaraInitDuty+0x762>
			myDUTY.time_total = command.time_total;
 80059b2:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80059b6:	4a76      	ldr	r2, [pc, #472]	; (8005b90 <scaraInitDuty+0x8b8>)
 80059b8:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80059bc:	e9c2 3400 	strd	r3, r4, [r2]
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 80059c0:	4a73      	ldr	r2, [pc, #460]	; (8005b90 <scaraInitDuty+0x8b8>)
 80059c2:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80059c6:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 80059ca:	4b71      	ldr	r3, [pc, #452]	; (8005b90 <scaraInitDuty+0x8b8>)
 80059cc:	2202      	movs	r2, #2
 80059ce:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 80059d2:	4b6f      	ldr	r3, [pc, #444]	; (8005b90 <scaraInitDuty+0x8b8>)
 80059d4:	2202      	movs	r2, #2
 80059d6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, total_s, DUTY_MODE_INIT_QT, command.time_total);
 80059da:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 80059de:	eeb0 1a47 	vmov.f32	s2, s14
 80059e2:	eef0 1a67 	vmov.f32	s3, s15
 80059e6:	2203      	movs	r2, #3
 80059e8:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 80059ec:	2104      	movs	r1, #4
 80059ee:	486b      	ldr	r0, [pc, #428]	; (8005b9c <scaraInitDuty+0x8c4>)
 80059f0:	f001 fa36 	bl	8006e60 <scaraInitLinear>
 80059f4:	4603      	mov	r3, r0
 80059f6:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total);
 80059fa:	f997 31a7 	ldrsb.w	r3, [r7, #423]	; 0x1a7
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fa fd90 	bl	8000524 <__aeabi_i2d>
 8005a04:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8005a08:	f7fa fdf6 	bl	80005f8 <__aeabi_dmul>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	460c      	mov	r4, r1
 8005a10:	ec44 3b16 	vmov	d6, r3, r4
 8005a14:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 8005a18:	eeb0 1a47 	vmov.f32	s2, s14
 8005a1c:	eef0 1a67 	vmov.f32	s3, s15
 8005a20:	2203      	movs	r2, #3
 8005a22:	eeb0 0a46 	vmov.f32	s0, s12
 8005a26:	eef0 0a66 	vmov.f32	s1, s13
 8005a2a:	2105      	movs	r1, #5
 8005a2c:	485c      	ldr	r0, [pc, #368]	; (8005ba0 <scaraInitDuty+0x8c8>)
 8005a2e:	f001 fa17 	bl	8006e60 <scaraInitLinear>
 8005a32:	4603      	mov	r3, r0
 8005a34:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
 8005a38:	e002      	b.n	8005a40 <scaraInitDuty+0x768>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8005a3a:	2305      	movs	r3, #5
 8005a3c:	f000 bfc1 	b.w	80069c2 <scaraInitDuty+0x16ea>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 8005a40:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <scaraInitDuty+0x778>
			return status1;
 8005a48:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8005a4c:	f000 bfb9 	b.w	80069c2 <scaraInitDuty+0x16ea>
		}
		if ( SCARA_STATUS_OK != status2) {
 8005a50:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 8786 	beq.w	8006966 <scaraInitDuty+0x168e>
			return status2;
 8005a5a:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 8005a5e:	f000 bfb0 	b.w	80069c2 <scaraInitDuty+0x16ea>
		}


	
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 8005a62:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	f040 877b 	bne.w	8006962 <scaraInitDuty+0x168a>
		/*----------- Space Joint ------------*/
		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 8005a6c:	4b48      	ldr	r3, [pc, #288]	; (8005b90 <scaraInitDuty+0x8b8>)
 8005a6e:	2201      	movs	r2, #1
 8005a70:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 8005a72:	4b4c      	ldr	r3, [pc, #304]	; (8005ba4 <scaraInitDuty+0x8cc>)
 8005a74:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8005a78:	4a45      	ldr	r2, [pc, #276]	; (8005b90 <scaraInitDuty+0x8b8>)
 8005a7a:	f602 2218 	addw	r2, r2, #2584	; 0xa18
 8005a7e:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 8005a82:	4b48      	ldr	r3, [pc, #288]	; (8005ba4 <scaraInitDuty+0x8cc>)
 8005a84:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8005a88:	4a41      	ldr	r2, [pc, #260]	; (8005b90 <scaraInitDuty+0x8b8>)
 8005a8a:	f502 6222 	add.w	r2, r2, #2592	; 0xa20
 8005a8e:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 8005a92:	4b44      	ldr	r3, [pc, #272]	; (8005ba4 <scaraInitDuty+0x8cc>)
 8005a94:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8005a98:	4a3d      	ldr	r2, [pc, #244]	; (8005b90 <scaraInitDuty+0x8b8>)
 8005a9a:	f602 2228 	addw	r2, r2, #2600	; 0xa28
 8005a9e:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 8005aa2:	4b40      	ldr	r3, [pc, #256]	; (8005ba4 <scaraInitDuty+0x8cc>)
 8005aa4:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8005aa8:	4a39      	ldr	r2, [pc, #228]	; (8005b90 <scaraInitDuty+0x8b8>)
 8005aaa:	f502 6223 	add.w	r2, r2, #2608	; 0xa30
 8005aae:	e9c2 3400 	strd	r3, r4, [r2]

		//-----Joint Single
		if ( DUTY_JOINT_SINGLE == command.joint_type) {
 8005ab2:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f040 83e5 	bne.w	8006286 <scaraInitDuty+0xfae>
			// Trajectory 1 profile
			double s, abs_position;
			switch(command.sub_para_int) {
 8005abc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	f200 8156 	bhi.w	8005d72 <scaraInitDuty+0xa9a>
 8005ac6:	a201      	add	r2, pc, #4	; (adr r2, 8005acc <scaraInitDuty+0x7f4>)
 8005ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005acc:	08005add 	.word	0x08005add
 8005ad0:	08005bad 	.word	0x08005bad
 8005ad4:	08005c53 	.word	0x08005c53
 8005ad8:	08005ccf 	.word	0x08005ccf
			case 0:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005adc:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005ae0:	a329      	add	r3, pc, #164	; (adr r3, 8005b88 <scaraInitDuty+0x8b0>)
 8005ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae6:	f7fa fd87 	bl	80005f8 <__aeabi_dmul>
 8005aea:	4603      	mov	r3, r0
 8005aec:	460c      	mov	r4, r1
 8005aee:	4618      	mov	r0, r3
 8005af0:	4621      	mov	r1, r4
 8005af2:	f04f 0200 	mov.w	r2, #0
 8005af6:	4b2c      	ldr	r3, [pc, #176]	; (8005ba8 <scaraInitDuty+0x8d0>)
 8005af8:	f7fa fea8 	bl	800084c <__aeabi_ddiv>
 8005afc:	4603      	mov	r3, r0
 8005afe:	460c      	mov	r4, r1
 8005b00:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005b04:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d113      	bne.n	8005b34 <scaraInitDuty+0x85c>
					abs_position = myDUTY.joint.theta1_start + command.sub_para_double;
 8005b0c:	4b20      	ldr	r3, [pc, #128]	; (8005b90 <scaraInitDuty+0x8b8>)
 8005b0e:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8005b12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b16:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	4623      	mov	r3, r4
 8005b1e:	f7fa fbb5 	bl	800028c <__adddf3>
 8005b22:	4603      	mov	r3, r0
 8005b24:	460c      	mov	r4, r1
 8005b26:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8005b2a:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005b2e:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005b32:	e01a      	b.n	8005b6a <scaraInitDuty+0x892>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005b34:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d113      	bne.n	8005b64 <scaraInitDuty+0x88c>
					abs_position = command.sub_para_double;
 8005b3c:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005b40:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta1_start;
 8005b44:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005b48:	4b11      	ldr	r3, [pc, #68]	; (8005b90 <scaraInitDuty+0x8b8>)
 8005b4a:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8005b4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b52:	461a      	mov	r2, r3
 8005b54:	4623      	mov	r3, r4
 8005b56:	f7fa fb97 	bl	8000288 <__aeabi_dsub>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	460c      	mov	r4, r1
 8005b5e:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005b62:	e002      	b.n	8005b6a <scaraInitDuty+0x892>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005b64:	230c      	movs	r3, #12
 8005b66:	f000 bf2c 	b.w	80069c2 <scaraInitDuty+0x16ea>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J0, abs_position)) {
 8005b6a:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8005b6e:	2000      	movs	r0, #0
 8005b70:	f004 fb42 	bl	800a1f8 <scaraCheckWorkSpace1>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 80fe 	beq.w	8005d78 <scaraInitDuty+0xaa0>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005b7c:	2307      	movs	r3, #7
 8005b7e:	f000 bf20 	b.w	80069c2 <scaraInitDuty+0x16ea>
 8005b82:	bf00      	nop
 8005b84:	f3af 8000 	nop.w
 8005b88:	60000000 	.word	0x60000000
 8005b8c:	400921fb 	.word	0x400921fb
 8005b90:	20004f28 	.word	0x20004f28
 8005b94:	200050c0 	.word	0x200050c0
 8005b98:	20005240 	.word	0x20005240
 8005b9c:	20005190 	.word	0x20005190
 8005ba0:	20005310 	.word	0x20005310
 8005ba4:	20005ae8 	.word	0x20005ae8
 8005ba8:	40668000 	.word	0x40668000
				}
				break;
			case 1:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005bac:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005bb0:	a39f      	add	r3, pc, #636	; (adr r3, 8005e30 <scaraInitDuty+0xb58>)
 8005bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb6:	f7fa fd1f 	bl	80005f8 <__aeabi_dmul>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	460c      	mov	r4, r1
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	4621      	mov	r1, r4
 8005bc2:	f04f 0200 	mov.w	r2, #0
 8005bc6:	4b9c      	ldr	r3, [pc, #624]	; (8005e38 <scaraInitDuty+0xb60>)
 8005bc8:	f7fa fe40 	bl	800084c <__aeabi_ddiv>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	460c      	mov	r4, r1
 8005bd0:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005bd4:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d113      	bne.n	8005c04 <scaraInitDuty+0x92c>
					abs_position = myDUTY.joint.theta2_start + command.sub_para_double;
 8005bdc:	4b97      	ldr	r3, [pc, #604]	; (8005e3c <scaraInitDuty+0xb64>)
 8005bde:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8005be2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005be6:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005bea:	461a      	mov	r2, r3
 8005bec:	4623      	mov	r3, r4
 8005bee:	f7fa fb4d 	bl	800028c <__adddf3>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	460c      	mov	r4, r1
 8005bf6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8005bfa:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005bfe:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005c02:	e01a      	b.n	8005c3a <scaraInitDuty+0x962>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005c04:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d113      	bne.n	8005c34 <scaraInitDuty+0x95c>
					abs_position = command.sub_para_double;
 8005c0c:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005c10:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta2_start;
 8005c14:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005c18:	4b88      	ldr	r3, [pc, #544]	; (8005e3c <scaraInitDuty+0xb64>)
 8005c1a:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8005c1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c22:	461a      	mov	r2, r3
 8005c24:	4623      	mov	r3, r4
 8005c26:	f7fa fb2f 	bl	8000288 <__aeabi_dsub>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	460c      	mov	r4, r1
 8005c2e:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005c32:	e002      	b.n	8005c3a <scaraInitDuty+0x962>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005c34:	230c      	movs	r3, #12
 8005c36:	f000 bec4 	b.w	80069c2 <scaraInitDuty+0x16ea>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J1, abs_position)) {
 8005c3a:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8005c3e:	2001      	movs	r0, #1
 8005c40:	f004 fada 	bl	800a1f8 <scaraCheckWorkSpace1>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 8098 	beq.w	8005d7c <scaraInitDuty+0xaa4>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005c4c:	2307      	movs	r3, #7
 8005c4e:	f000 beb8 	b.w	80069c2 <scaraInitDuty+0x16ea>
				}
				break;
			case 2:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005c52:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d113      	bne.n	8005c82 <scaraInitDuty+0x9aa>
					abs_position = myDUTY.joint.d3_start + command.sub_para_double;
 8005c5a:	4b78      	ldr	r3, [pc, #480]	; (8005e3c <scaraInitDuty+0xb64>)
 8005c5c:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8005c60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c64:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4623      	mov	r3, r4
 8005c6c:	f7fa fb0e 	bl	800028c <__adddf3>
 8005c70:	4603      	mov	r3, r0
 8005c72:	460c      	mov	r4, r1
 8005c74:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8005c78:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005c7c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005c80:	e01a      	b.n	8005cb8 <scaraInitDuty+0x9e0>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005c82:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d113      	bne.n	8005cb2 <scaraInitDuty+0x9da>
					abs_position = command.sub_para_double;
 8005c8a:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005c8e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.d3_start;
 8005c92:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005c96:	4b69      	ldr	r3, [pc, #420]	; (8005e3c <scaraInitDuty+0xb64>)
 8005c98:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8005c9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	4623      	mov	r3, r4
 8005ca4:	f7fa faf0 	bl	8000288 <__aeabi_dsub>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	460c      	mov	r4, r1
 8005cac:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005cb0:	e002      	b.n	8005cb8 <scaraInitDuty+0x9e0>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005cb2:	230c      	movs	r3, #12
 8005cb4:	f000 be85 	b.w	80069c2 <scaraInitDuty+0x16ea>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J2, abs_position)) {
 8005cb8:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8005cbc:	2002      	movs	r0, #2
 8005cbe:	f004 fa9b 	bl	800a1f8 <scaraCheckWorkSpace1>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d05b      	beq.n	8005d80 <scaraInitDuty+0xaa8>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005cc8:	2307      	movs	r3, #7
 8005cca:	f000 be7a 	b.w	80069c2 <scaraInitDuty+0x16ea>
				}
				break;
			case 3:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005cce:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005cd2:	a357      	add	r3, pc, #348	; (adr r3, 8005e30 <scaraInitDuty+0xb58>)
 8005cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd8:	f7fa fc8e 	bl	80005f8 <__aeabi_dmul>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	460c      	mov	r4, r1
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	4b53      	ldr	r3, [pc, #332]	; (8005e38 <scaraInitDuty+0xb60>)
 8005cea:	f7fa fdaf 	bl	800084c <__aeabi_ddiv>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	460c      	mov	r4, r1
 8005cf2:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005cf6:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d113      	bne.n	8005d26 <scaraInitDuty+0xa4e>
					abs_position = myDUTY.joint.theta4_start + command.sub_para_double;
 8005cfe:	4b4f      	ldr	r3, [pc, #316]	; (8005e3c <scaraInitDuty+0xb64>)
 8005d00:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8005d04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d08:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	4623      	mov	r3, r4
 8005d10:	f7fa fabc 	bl	800028c <__adddf3>
 8005d14:	4603      	mov	r3, r0
 8005d16:	460c      	mov	r4, r1
 8005d18:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8005d1c:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005d20:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005d24:	e01a      	b.n	8005d5c <scaraInitDuty+0xa84>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005d26:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d113      	bne.n	8005d56 <scaraInitDuty+0xa7e>
					abs_position = command.sub_para_double;
 8005d2e:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005d32:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta4_start;
 8005d36:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005d3a:	4b40      	ldr	r3, [pc, #256]	; (8005e3c <scaraInitDuty+0xb64>)
 8005d3c:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8005d40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d44:	461a      	mov	r2, r3
 8005d46:	4623      	mov	r3, r4
 8005d48:	f7fa fa9e 	bl	8000288 <__aeabi_dsub>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	460c      	mov	r4, r1
 8005d50:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005d54:	e002      	b.n	8005d5c <scaraInitDuty+0xa84>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005d56:	230c      	movs	r3, #12
 8005d58:	f000 be33 	b.w	80069c2 <scaraInitDuty+0x16ea>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J3, abs_position)) {
 8005d5c:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8005d60:	2003      	movs	r0, #3
 8005d62:	f004 fa49 	bl	800a1f8 <scaraCheckWorkSpace1>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00b      	beq.n	8005d84 <scaraInitDuty+0xaac>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005d6c:	2307      	movs	r3, #7
 8005d6e:	f000 be28 	b.w	80069c2 <scaraInitDuty+0x16ea>
				}
				break;
			default:
				return SCARA_STATUS_ERROR_JOINT_NUM;
 8005d72:	230b      	movs	r3, #11
 8005d74:	f000 be25 	b.w	80069c2 <scaraInitDuty+0x16ea>
				break;
 8005d78:	bf00      	nop
 8005d7a:	e004      	b.n	8005d86 <scaraInitDuty+0xaae>
				break;
 8005d7c:	bf00      	nop
 8005d7e:	e002      	b.n	8005d86 <scaraInitDuty+0xaae>
				break;
 8005d80:	bf00      	nop
 8005d82:	e000      	b.n	8005d86 <scaraInitDuty+0xaae>
				break;
 8005d84:	bf00      	nop
			}

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8005d86:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f040 8135 	bne.w	8005ffa <scaraInitDuty+0xd22>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005d90:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	f040 80a4 	bne.w	8005ee2 <scaraInitDuty+0xc0a>
					for ( uint8_t i = 0; i < 4; i++) {
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8005da0:	e099      	b.n	8005ed6 <scaraInitDuty+0xbfe>
						if ( i == command.sub_para_int) {
 8005da2:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005da6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d14a      	bne.n	8005e44 <scaraInitDuty+0xb6c>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005dae:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005db2:	4922      	ldr	r1, [pc, #136]	; (8005e3c <scaraInitDuty+0xb64>)
 8005db4:	4613      	mov	r3, r2
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	4413      	add	r3, r2
 8005dba:	01db      	lsls	r3, r3, #7
 8005dbc:	440b      	add	r3, r1
 8005dbe:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8005dc6:	f897 018f 	ldrb.w	r0, [r7, #399]	; 0x18f
 8005dca:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8005dce:	4c1b      	ldr	r4, [pc, #108]	; (8005e3c <scaraInitDuty+0xb64>)
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	005b      	lsls	r3, r3, #1
 8005dd4:	4403      	add	r3, r0
 8005dd6:	01db      	lsls	r3, r3, #7
 8005dd8:	4423      	add	r3, r4
 8005dda:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8005dde:	e9c3 1200 	strd	r1, r2, [r3]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005de2:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005de6:	4613      	mov	r3, r2
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	4413      	add	r3, r2
 8005dec:	01db      	lsls	r3, r3, #7
 8005dee:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005df2:	4a12      	ldr	r2, [pc, #72]	; (8005e3c <scaraInitDuty+0xb64>)
 8005df4:	1898      	adds	r0, r3, r2
 8005df6:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8005dfa:	4a11      	ldr	r2, [pc, #68]	; (8005e40 <scaraInitDuty+0xb68>)
 8005dfc:	5cd3      	ldrb	r3, [r2, r3]
 8005dfe:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005e02:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005e06:	eeb0 2a46 	vmov.f32	s4, s12
 8005e0a:	eef0 2a66 	vmov.f32	s5, s13
 8005e0e:	eeb0 1a47 	vmov.f32	s2, s14
 8005e12:	eef0 1a67 	vmov.f32	s3, s15
 8005e16:	2201      	movs	r2, #1
 8005e18:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	f001 fac7 	bl	80073b0 <scaraInitLSPB>
 8005e22:	4603      	mov	r3, r0
 8005e24:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 8005e28:	e049      	b.n	8005ebe <scaraInitDuty+0xbe6>
 8005e2a:	bf00      	nop
 8005e2c:	f3af 8000 	nop.w
 8005e30:	60000000 	.word	0x60000000
 8005e34:	400921fb 	.word	0x400921fb
 8005e38:	40668000 	.word	0x40668000
 8005e3c:	20004f28 	.word	0x20004f28
 8005e40:	20000824 	.word	0x20000824
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005e44:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005e48:	49c3      	ldr	r1, [pc, #780]	; (8006158 <scaraInitDuty+0xe80>)
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	005b      	lsls	r3, r3, #1
 8005e4e:	4413      	add	r3, r2
 8005e50:	01db      	lsls	r3, r3, #7
 8005e52:	440b      	add	r3, r1
 8005e54:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005e58:	2200      	movs	r2, #0
 8005e5a:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8005e5c:	f897 018f 	ldrb.w	r0, [r7, #399]	; 0x18f
 8005e60:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8005e64:	4cbc      	ldr	r4, [pc, #752]	; (8006158 <scaraInitDuty+0xe80>)
 8005e66:	4603      	mov	r3, r0
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	4403      	add	r3, r0
 8005e6c:	01db      	lsls	r3, r3, #7
 8005e6e:	4423      	add	r3, r4
 8005e70:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8005e74:	e9c3 1200 	strd	r1, r2, [r3]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005e78:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	4413      	add	r3, r2
 8005e82:	01db      	lsls	r3, r3, #7
 8005e84:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005e88:	4ab3      	ldr	r2, [pc, #716]	; (8006158 <scaraInitDuty+0xe80>)
 8005e8a:	1898      	adds	r0, r3, r2
 8005e8c:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8005e90:	4ab2      	ldr	r2, [pc, #712]	; (800615c <scaraInitDuty+0xe84>)
 8005e92:	5cd3      	ldrb	r3, [r2, r3]
 8005e94:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005e98:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005e9c:	eeb0 2a46 	vmov.f32	s4, s12
 8005ea0:	eef0 2a66 	vmov.f32	s5, s13
 8005ea4:	eeb0 1a47 	vmov.f32	s2, s14
 8005ea8:	eef0 1a67 	vmov.f32	s3, s15
 8005eac:	2201      	movs	r2, #1
 8005eae:	ed9f 0ba8 	vldr	d0, [pc, #672]	; 8006150 <scaraInitDuty+0xe78>
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	f001 fa7c 	bl	80073b0 <scaraInitLSPB>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						}
						myDUTY.time_total = command.time_total;
 8005ebe:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005ec2:	4aa5      	ldr	r2, [pc, #660]	; (8006158 <scaraInitDuty+0xe80>)
 8005ec4:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005ec8:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005ecc:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8005ed6:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	f67f af61 	bls.w	8005da2 <scaraInitDuty+0xaca>
 8005ee0:	e1c2      	b.n	8006268 <scaraInitDuty+0xf90>
					}
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005ee2:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f040 8084 	bne.w	8005ff4 <scaraInitDuty+0xd1c>
					for ( uint8_t i = 0; i < 4; i++) {
 8005eec:	2300      	movs	r3, #0
 8005eee:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
 8005ef2:	e07a      	b.n	8005fea <scaraInitDuty+0xd12>
						if ( i == command.sub_para_int) {
 8005ef4:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005ef8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d140      	bne.n	8005f82 <scaraInitDuty+0xcaa>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005f00:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005f04:	4994      	ldr	r1, [pc, #592]	; (8006158 <scaraInitDuty+0xe80>)
 8005f06:	4613      	mov	r3, r2
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	4413      	add	r3, r2
 8005f0c:	01db      	lsls	r3, r3, #7
 8005f0e:	440b      	add	r3, r1
 8005f10:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005f14:	2200      	movs	r2, #0
 8005f16:	701a      	strb	r2, [r3, #0]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005f18:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	4413      	add	r3, r2
 8005f22:	01db      	lsls	r3, r3, #7
 8005f24:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005f28:	4a8b      	ldr	r2, [pc, #556]	; (8006158 <scaraInitDuty+0xe80>)
 8005f2a:	1898      	adds	r0, r3, r2
 8005f2c:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8005f30:	4a8a      	ldr	r2, [pc, #552]	; (800615c <scaraInitDuty+0xe84>)
 8005f32:	5cd3      	ldrb	r3, [r2, r3]
 8005f34:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005f38:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005f3c:	eeb0 2a46 	vmov.f32	s4, s12
 8005f40:	eef0 2a66 	vmov.f32	s5, s13
 8005f44:	eeb0 1a47 	vmov.f32	s2, s14
 8005f48:	eef0 1a67 	vmov.f32	s3, s15
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8005f52:	4619      	mov	r1, r3
 8005f54:	f001 fa2c 	bl	80073b0 <scaraInitLSPB>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8005f5e:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005f62:	497d      	ldr	r1, [pc, #500]	; (8006158 <scaraInitDuty+0xe80>)
 8005f64:	4613      	mov	r3, r2
 8005f66:	005b      	lsls	r3, r3, #1
 8005f68:	4413      	add	r3, r2
 8005f6a:	01db      	lsls	r3, r3, #7
 8005f6c:	440b      	add	r3, r1
 8005f6e:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8005f72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f76:	4a78      	ldr	r2, [pc, #480]	; (8006158 <scaraInitDuty+0xe80>)
 8005f78:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005f7c:	e9c2 3400 	strd	r3, r4, [r2]
 8005f80:	e02e      	b.n	8005fe0 <scaraInitDuty+0xd08>
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005f82:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005f86:	4974      	ldr	r1, [pc, #464]	; (8006158 <scaraInitDuty+0xe80>)
 8005f88:	4613      	mov	r3, r2
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	4413      	add	r3, r2
 8005f8e:	01db      	lsls	r3, r3, #7
 8005f90:	440b      	add	r3, r1
 8005f92:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005f96:	2200      	movs	r2, #0
 8005f98:	701a      	strb	r2, [r3, #0]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005f9a:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	4413      	add	r3, r2
 8005fa4:	01db      	lsls	r3, r3, #7
 8005fa6:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005faa:	4a6b      	ldr	r2, [pc, #428]	; (8006158 <scaraInitDuty+0xe80>)
 8005fac:	1898      	adds	r0, r3, r2
 8005fae:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8005fb2:	4a6a      	ldr	r2, [pc, #424]	; (800615c <scaraInitDuty+0xe84>)
 8005fb4:	5cd3      	ldrb	r3, [r2, r3]
 8005fb6:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005fba:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005fbe:	eeb0 2a46 	vmov.f32	s4, s12
 8005fc2:	eef0 2a66 	vmov.f32	s5, s13
 8005fc6:	eeb0 1a47 	vmov.f32	s2, s14
 8005fca:	eef0 1a67 	vmov.f32	s3, s15
 8005fce:	2200      	movs	r2, #0
 8005fd0:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 8006150 <scaraInitDuty+0xe78>
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	f001 f9eb 	bl	80073b0 <scaraInitLSPB>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
					for ( uint8_t i = 0; i < 4; i++) {
 8005fe0:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
 8005fea:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d980      	bls.n	8005ef4 <scaraInitDuty+0xc1c>
 8005ff2:	e139      	b.n	8006268 <scaraInitDuty+0xf90>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
						}
					}
				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8005ff4:	2308      	movs	r3, #8
 8005ff6:	f000 bce4 	b.w	80069c2 <scaraInitDuty+0x16ea>
				}
			// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8005ffa:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	f040 8130 	bne.w	8006264 <scaraInitDuty+0xf8c>
					// Mode Init Time
					if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006004:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006008:	2b01      	cmp	r3, #1
 800600a:	f040 8097 	bne.w	800613c <scaraInitDuty+0xe64>
						for ( uint8_t i = 0; i < 4; i++) {
 800600e:	2300      	movs	r3, #0
 8006010:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
 8006014:	e08c      	b.n	8006130 <scaraInitDuty+0xe58>
							if ( i == command.sub_para_int) {
 8006016:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 800601a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800601e:	429a      	cmp	r2, r3
 8006020:	d13d      	bne.n	800609e <scaraInitDuty+0xdc6>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006022:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8006026:	494c      	ldr	r1, [pc, #304]	; (8006158 <scaraInitDuty+0xe80>)
 8006028:	4613      	mov	r3, r2
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	4413      	add	r3, r2
 800602e:	01db      	lsls	r3, r3, #7
 8006030:	440b      	add	r3, r1
 8006032:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006036:	2201      	movs	r2, #1
 8006038:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 800603a:	f897 018d 	ldrb.w	r0, [r7, #397]	; 0x18d
 800603e:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8006042:	4c45      	ldr	r4, [pc, #276]	; (8006158 <scaraInitDuty+0xe80>)
 8006044:	4603      	mov	r3, r0
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	4403      	add	r3, r0
 800604a:	01db      	lsls	r3, r3, #7
 800604c:	4423      	add	r3, r4
 800604e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006052:	e9c3 1200 	strd	r1, r2, [r3]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8006056:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 800605a:	4613      	mov	r3, r2
 800605c:	005b      	lsls	r3, r3, #1
 800605e:	4413      	add	r3, r2
 8006060:	01db      	lsls	r3, r3, #7
 8006062:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006066:	4a3c      	ldr	r2, [pc, #240]	; (8006158 <scaraInitDuty+0xe80>)
 8006068:	1898      	adds	r0, r3, r2
 800606a:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 800606e:	4a3b      	ldr	r2, [pc, #236]	; (800615c <scaraInitDuty+0xe84>)
 8006070:	5cd3      	ldrb	r3, [r2, r3]
 8006072:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006076:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 800607a:	eeb0 2a46 	vmov.f32	s4, s12
 800607e:	eef0 2a66 	vmov.f32	s5, s13
 8006082:	eeb0 1a47 	vmov.f32	s2, s14
 8006086:	eef0 1a67 	vmov.f32	s3, s15
 800608a:	2201      	movs	r2, #1
 800608c:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8006090:	4619      	mov	r1, r3
 8006092:	f001 fd6d 	bl	8007b70 <scaraInitScurve>
 8006096:	4603      	mov	r3, r0
 8006098:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 800609c:	e03c      	b.n	8006118 <scaraInitDuty+0xe40>
											joint_taget[i],
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800609e:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 80060a2:	492d      	ldr	r1, [pc, #180]	; (8006158 <scaraInitDuty+0xe80>)
 80060a4:	4613      	mov	r3, r2
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	4413      	add	r3, r2
 80060aa:	01db      	lsls	r3, r3, #7
 80060ac:	440b      	add	r3, r1
 80060ae:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80060b2:	2201      	movs	r2, #1
 80060b4:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 80060b6:	f897 018d 	ldrb.w	r0, [r7, #397]	; 0x18d
 80060ba:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 80060be:	4c26      	ldr	r4, [pc, #152]	; (8006158 <scaraInitDuty+0xe80>)
 80060c0:	4603      	mov	r3, r0
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	4403      	add	r3, r0
 80060c6:	01db      	lsls	r3, r3, #7
 80060c8:	4423      	add	r3, r4
 80060ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ce:	e9c3 1200 	strd	r1, r2, [r3]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 80060d2:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 80060d6:	4613      	mov	r3, r2
 80060d8:	005b      	lsls	r3, r3, #1
 80060da:	4413      	add	r3, r2
 80060dc:	01db      	lsls	r3, r3, #7
 80060de:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80060e2:	4a1d      	ldr	r2, [pc, #116]	; (8006158 <scaraInitDuty+0xe80>)
 80060e4:	1898      	adds	r0, r3, r2
 80060e6:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 80060ea:	4a1c      	ldr	r2, [pc, #112]	; (800615c <scaraInitDuty+0xe84>)
 80060ec:	5cd3      	ldrb	r3, [r2, r3]
 80060ee:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80060f2:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80060f6:	eeb0 2a46 	vmov.f32	s4, s12
 80060fa:	eef0 2a66 	vmov.f32	s5, s13
 80060fe:	eeb0 1a47 	vmov.f32	s2, s14
 8006102:	eef0 1a67 	vmov.f32	s3, s15
 8006106:	2201      	movs	r2, #1
 8006108:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8006150 <scaraInitDuty+0xe78>
 800610c:	4619      	mov	r1, r3
 800610e:	f001 fd2f 	bl	8007b70 <scaraInitScurve>
 8006112:	4603      	mov	r3, r0
 8006114:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
											joint_taget[i],
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							}
							myDUTY.time_total = command.time_total;
 8006118:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800611c:	4a0e      	ldr	r2, [pc, #56]	; (8006158 <scaraInitDuty+0xe80>)
 800611e:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006122:	e9c2 3400 	strd	r3, r4, [r2]
						for ( uint8_t i = 0; i < 4; i++) {
 8006126:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 800612a:	3301      	adds	r3, #1
 800612c:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
 8006130:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8006134:	2b03      	cmp	r3, #3
 8006136:	f67f af6e 	bls.w	8006016 <scaraInitDuty+0xd3e>
 800613a:	e095      	b.n	8006268 <scaraInitDuty+0xf90>
						}
					// Mode Init Acc
					} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800613c:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006140:	2b00      	cmp	r3, #0
 8006142:	f040 808d 	bne.w	8006260 <scaraInitDuty+0xf88>
						for ( uint8_t i = 0; i < 4; i++) {
 8006146:	2300      	movs	r3, #0
 8006148:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
 800614c:	e083      	b.n	8006256 <scaraInitDuty+0xf7e>
 800614e:	bf00      	nop
	...
 8006158:	20004f28 	.word	0x20004f28
 800615c:	20000824 	.word	0x20000824
							if ( i == command.sub_para_int) {
 8006160:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006164:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006168:	429a      	cmp	r2, r3
 800616a:	d140      	bne.n	80061ee <scaraInitDuty+0xf16>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800616c:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006170:	49b7      	ldr	r1, [pc, #732]	; (8006450 <scaraInitDuty+0x1178>)
 8006172:	4613      	mov	r3, r2
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	4413      	add	r3, r2
 8006178:	01db      	lsls	r3, r3, #7
 800617a:	440b      	add	r3, r1
 800617c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006180:	2201      	movs	r2, #1
 8006182:	701a      	strb	r2, [r3, #0]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8006184:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006188:	4613      	mov	r3, r2
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	4413      	add	r3, r2
 800618e:	01db      	lsls	r3, r3, #7
 8006190:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006194:	4aae      	ldr	r2, [pc, #696]	; (8006450 <scaraInitDuty+0x1178>)
 8006196:	1898      	adds	r0, r3, r2
 8006198:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 800619c:	4aad      	ldr	r2, [pc, #692]	; (8006454 <scaraInitDuty+0x117c>)
 800619e:	5cd3      	ldrb	r3, [r2, r3]
 80061a0:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80061a4:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80061a8:	eeb0 2a46 	vmov.f32	s4, s12
 80061ac:	eef0 2a66 	vmov.f32	s5, s13
 80061b0:	eeb0 1a47 	vmov.f32	s2, s14
 80061b4:	eef0 1a67 	vmov.f32	s3, s15
 80061b8:	2200      	movs	r2, #0
 80061ba:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 80061be:	4619      	mov	r1, r3
 80061c0:	f001 fcd6 	bl	8007b70 <scaraInitScurve>
 80061c4:	4603      	mov	r3, r0
 80061c6:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
											joint_taget[i],
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
								myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 80061ca:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 80061ce:	49a0      	ldr	r1, [pc, #640]	; (8006450 <scaraInitDuty+0x1178>)
 80061d0:	4613      	mov	r3, r2
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	4413      	add	r3, r2
 80061d6:	01db      	lsls	r3, r3, #7
 80061d8:	440b      	add	r3, r1
 80061da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80061e2:	4a9b      	ldr	r2, [pc, #620]	; (8006450 <scaraInitDuty+0x1178>)
 80061e4:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80061e8:	e9c2 3400 	strd	r3, r4, [r2]
 80061ec:	e02e      	b.n	800624c <scaraInitDuty+0xf74>
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80061ee:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 80061f2:	4997      	ldr	r1, [pc, #604]	; (8006450 <scaraInitDuty+0x1178>)
 80061f4:	4613      	mov	r3, r2
 80061f6:	005b      	lsls	r3, r3, #1
 80061f8:	4413      	add	r3, r2
 80061fa:	01db      	lsls	r3, r3, #7
 80061fc:	440b      	add	r3, r1
 80061fe:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006202:	2201      	movs	r2, #1
 8006204:	701a      	strb	r2, [r3, #0]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8006206:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 800620a:	4613      	mov	r3, r2
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	4413      	add	r3, r2
 8006210:	01db      	lsls	r3, r3, #7
 8006212:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006216:	4a8e      	ldr	r2, [pc, #568]	; (8006450 <scaraInitDuty+0x1178>)
 8006218:	1898      	adds	r0, r3, r2
 800621a:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 800621e:	4a8d      	ldr	r2, [pc, #564]	; (8006454 <scaraInitDuty+0x117c>)
 8006220:	5cd3      	ldrb	r3, [r2, r3]
 8006222:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006226:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 800622a:	eeb0 2a46 	vmov.f32	s4, s12
 800622e:	eef0 2a66 	vmov.f32	s5, s13
 8006232:	eeb0 1a47 	vmov.f32	s2, s14
 8006236:	eef0 1a67 	vmov.f32	s3, s15
 800623a:	2200      	movs	r2, #0
 800623c:	ed9f 0b80 	vldr	d0, [pc, #512]	; 8006440 <scaraInitDuty+0x1168>
 8006240:	4619      	mov	r1, r3
 8006242:	f001 fc95 	bl	8007b70 <scaraInitScurve>
 8006246:	4603      	mov	r3, r0
 8006248:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						for ( uint8_t i = 0; i < 4; i++) {
 800624c:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8006250:	3301      	adds	r3, #1
 8006252:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
 8006256:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 800625a:	2b03      	cmp	r3, #3
 800625c:	d980      	bls.n	8006160 <scaraInitDuty+0xe88>
 800625e:	e003      	b.n	8006268 <scaraInitDuty+0xf90>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							}
						}

					} else {
						return SCARA_STATUS_ERROR_MODE_INIT;
 8006260:	2308      	movs	r3, #8
 8006262:	e3ae      	b.n	80069c2 <scaraInitDuty+0x16ea>
					}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8006264:	2305      	movs	r3, #5
 8006266:	e3ac      	b.n	80069c2 <scaraInitDuty+0x16ea>
			}
		// Check Init Status
			if ( SCARA_STATUS_OK != status1) {
 8006268:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <scaraInitDuty+0xf9e>
				return status1;
 8006270:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8006274:	e3a5      	b.n	80069c2 <scaraInitDuty+0x16ea>
			}
			if ( SCARA_STATUS_OK != status2) {
 8006276:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 800627a:	2b00      	cmp	r3, #0
 800627c:	f000 8373 	beq.w	8006966 <scaraInitDuty+0x168e>
				return status2;
 8006280:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 8006284:	e39d      	b.n	80069c2 <scaraInitDuty+0x16ea>
			}

		//----Joint Quadra
		} else if 	( DUTY_JOINT_4DOF == command.joint_type) {
 8006286:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800628a:	2b01      	cmp	r3, #1
 800628c:	f040 8367 	bne.w	800695e <scaraInitDuty+0x1686>
			SCARA_PositionTypeDef	target_point;
			// Change Degree --> Radian
			command.target_point.roll = command.target_point.roll*PI/180.0;
 8006290:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 8006294:	a36c      	add	r3, pc, #432	; (adr r3, 8006448 <scaraInitDuty+0x1170>)
 8006296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629a:	f7fa f9ad 	bl	80005f8 <__aeabi_dmul>
 800629e:	4603      	mov	r3, r0
 80062a0:	460c      	mov	r4, r1
 80062a2:	4618      	mov	r0, r3
 80062a4:	4621      	mov	r1, r4
 80062a6:	f04f 0200 	mov.w	r2, #0
 80062aa:	4b6b      	ldr	r3, [pc, #428]	; (8006458 <scaraInitDuty+0x1180>)
 80062ac:	f7fa face 	bl	800084c <__aeabi_ddiv>
 80062b0:	4603      	mov	r3, r0
 80062b2:	460c      	mov	r4, r1
 80062b4:	e9c7 3496 	strd	r3, r4, [r7, #600]	; 0x258
			// Coordinate
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80062b8:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d13c      	bne.n	800633a <scaraInitDuty+0x1062>
				target_point.x 		= positionCurrent.x + command.target_point.x;
 80062c0:	4b66      	ldr	r3, [pc, #408]	; (800645c <scaraInitDuty+0x1184>)
 80062c2:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80062c6:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 80062ca:	461a      	mov	r2, r3
 80062cc:	4623      	mov	r3, r4
 80062ce:	f7f9 ffdd 	bl	800028c <__adddf3>
 80062d2:	4603      	mov	r3, r0
 80062d4:	460c      	mov	r4, r1
 80062d6:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80062da:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
				target_point.y 		= positionCurrent.y + command.target_point.y;
 80062de:	4b5f      	ldr	r3, [pc, #380]	; (800645c <scaraInitDuty+0x1184>)
 80062e0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80062e4:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 80062e8:	461a      	mov	r2, r3
 80062ea:	4623      	mov	r3, r4
 80062ec:	f7f9 ffce 	bl	800028c <__adddf3>
 80062f0:	4603      	mov	r3, r0
 80062f2:	460c      	mov	r4, r1
 80062f4:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80062f8:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
				target_point.z 		= positionCurrent.z + command.target_point.z;
 80062fc:	4b57      	ldr	r3, [pc, #348]	; (800645c <scaraInitDuty+0x1184>)
 80062fe:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8006302:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8006306:	461a      	mov	r2, r3
 8006308:	4623      	mov	r3, r4
 800630a:	f7f9 ffbf 	bl	800028c <__adddf3>
 800630e:	4603      	mov	r3, r0
 8006310:	460c      	mov	r4, r1
 8006312:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006316:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
				target_point.roll	= positionCurrent.roll + command.target_point.roll;
 800631a:	4b50      	ldr	r3, [pc, #320]	; (800645c <scaraInitDuty+0x1184>)
 800631c:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006320:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 8006324:	461a      	mov	r2, r3
 8006326:	4623      	mov	r3, r4
 8006328:	f7f9 ffb0 	bl	800028c <__adddf3>
 800632c:	4603      	mov	r3, r0
 800632e:	460c      	mov	r4, r1
 8006330:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006334:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
 8006338:	e01e      	b.n	8006378 <scaraInitDuty+0x10a0>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 800633a:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 800633e:	2b00      	cmp	r3, #0
 8006340:	d118      	bne.n	8006374 <scaraInitDuty+0x109c>
				target_point.x 		= command.target_point.x;
 8006342:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8006346:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800634a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
				target_point.y 		= command.target_point.y;
 800634e:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8006352:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006356:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
				target_point.z 		= command.target_point.z;
 800635a:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 800635e:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006362:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
				target_point.roll	= command.target_point.roll;
 8006366:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 800636a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800636e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
 8006372:	e001      	b.n	8006378 <scaraInitDuty+0x10a0>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 8006374:	230c      	movs	r3, #12
 8006376:	e324      	b.n	80069c2 <scaraInitDuty+0x16ea>
			}

			if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 8006378:	4c38      	ldr	r4, [pc, #224]	; (800645c <scaraInitDuty+0x1184>)
 800637a:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800637e:	4668      	mov	r0, sp
 8006380:	f104 0308 	add.w	r3, r4, #8
 8006384:	22b8      	movs	r2, #184	; 0xb8
 8006386:	4619      	mov	r1, r3
 8006388:	f00f fc68 	bl	8015c5c <memcpy>
 800638c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006390:	4628      	mov	r0, r5
 8006392:	f7fd fb91 	bl	8003ab8 <kinematicInverse>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <scaraInitDuty+0x10c8>
				return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 800639c:	2307      	movs	r3, #7
 800639e:	e310      	b.n	80069c2 <scaraInitDuty+0x16ea>
			}
			// Trajectory 4 profile
			double q[4];
			q[0] = target_point.Theta1 - positionCurrent.Theta1;
 80063a0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80063a4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80063a8:	4b2c      	ldr	r3, [pc, #176]	; (800645c <scaraInitDuty+0x1184>)
 80063aa:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 80063ae:	461a      	mov	r2, r3
 80063b0:	4623      	mov	r3, r4
 80063b2:	f7f9 ff69 	bl	8000288 <__aeabi_dsub>
 80063b6:	4603      	mov	r3, r0
 80063b8:	460c      	mov	r4, r1
 80063ba:	463a      	mov	r2, r7
 80063bc:	e9c2 3400 	strd	r3, r4, [r2]
			q[1] = target_point.Theta2 - positionCurrent.Theta2;
 80063c0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80063c4:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80063c8:	4b24      	ldr	r3, [pc, #144]	; (800645c <scaraInitDuty+0x1184>)
 80063ca:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80063ce:	461a      	mov	r2, r3
 80063d0:	4623      	mov	r3, r4
 80063d2:	f7f9 ff59 	bl	8000288 <__aeabi_dsub>
 80063d6:	4603      	mov	r3, r0
 80063d8:	460c      	mov	r4, r1
 80063da:	463a      	mov	r2, r7
 80063dc:	e9c2 3402 	strd	r3, r4, [r2, #8]
			q[2] = target_point.D3 	   - positionCurrent.D3;
 80063e0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80063e4:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80063e8:	4b1c      	ldr	r3, [pc, #112]	; (800645c <scaraInitDuty+0x1184>)
 80063ea:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 80063ee:	461a      	mov	r2, r3
 80063f0:	4623      	mov	r3, r4
 80063f2:	f7f9 ff49 	bl	8000288 <__aeabi_dsub>
 80063f6:	4603      	mov	r3, r0
 80063f8:	460c      	mov	r4, r1
 80063fa:	463a      	mov	r2, r7
 80063fc:	e9c2 3404 	strd	r3, r4, [r2, #16]
			q[3] = target_point.Theta4 - positionCurrent.Theta4;
 8006400:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006404:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8006408:	4b14      	ldr	r3, [pc, #80]	; (800645c <scaraInitDuty+0x1184>)
 800640a:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800640e:	461a      	mov	r2, r3
 8006410:	4623      	mov	r3, r4
 8006412:	f7f9 ff39 	bl	8000288 <__aeabi_dsub>
 8006416:	4603      	mov	r3, r0
 8006418:	460c      	mov	r4, r1
 800641a:	463a      	mov	r2, r7
 800641c:	e9c2 3406 	strd	r3, r4, [r2, #24]

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8006420:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006424:	2b00      	cmp	r3, #0
 8006426:	f040 8151 	bne.w	80066cc <scaraInitDuty+0x13f4>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800642a:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800642e:	2b01      	cmp	r3, #1
 8006430:	d16c      	bne.n	800650c <scaraInitDuty+0x1234>
					for ( uint8_t i = 0; i < 4; i++) {
 8006432:	2300      	movs	r3, #0
 8006434:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
 8006438:	e05c      	b.n	80064f4 <scaraInitDuty+0x121c>
 800643a:	bf00      	nop
 800643c:	f3af 8000 	nop.w
	...
 8006448:	60000000 	.word	0x60000000
 800644c:	400921fb 	.word	0x400921fb
 8006450:	20004f28 	.word	0x20004f28
 8006454:	20000824 	.word	0x20000824
 8006458:	40668000 	.word	0x40668000
 800645c:	20005ae8 	.word	0x20005ae8
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006460:	f897 218b 	ldrb.w	r2, [r7, #395]	; 0x18b
 8006464:	49cf      	ldr	r1, [pc, #828]	; (80067a4 <scaraInitDuty+0x14cc>)
 8006466:	4613      	mov	r3, r2
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	4413      	add	r3, r2
 800646c:	01db      	lsls	r3, r3, #7
 800646e:	440b      	add	r3, r1
 8006470:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006474:	2200      	movs	r2, #0
 8006476:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8006478:	f897 018b 	ldrb.w	r0, [r7, #395]	; 0x18b
 800647c:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8006480:	4cc8      	ldr	r4, [pc, #800]	; (80067a4 <scaraInitDuty+0x14cc>)
 8006482:	4603      	mov	r3, r0
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	4403      	add	r3, r0
 8006488:	01db      	lsls	r3, r3, #7
 800648a:	4423      	add	r3, r4
 800648c:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8006490:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006494:	f897 218b 	ldrb.w	r2, [r7, #395]	; 0x18b
 8006498:	4613      	mov	r3, r2
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	4413      	add	r3, r2
 800649e:	01db      	lsls	r3, r3, #7
 80064a0:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80064a4:	4abf      	ldr	r2, [pc, #764]	; (80067a4 <scaraInitDuty+0x14cc>)
 80064a6:	1898      	adds	r0, r3, r2
 80064a8:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 80064ac:	4abe      	ldr	r2, [pc, #760]	; (80067a8 <scaraInitDuty+0x14d0>)
 80064ae:	5cd1      	ldrb	r1, [r2, r3]
 80064b0:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 80064b4:	463a      	mov	r2, r7
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	4413      	add	r3, r2
 80064ba:	ed93 7b00 	vldr	d7, [r3]
 80064be:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80064c2:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80064c6:	eeb0 2a45 	vmov.f32	s4, s10
 80064ca:	eef0 2a65 	vmov.f32	s5, s11
 80064ce:	eeb0 1a46 	vmov.f32	s2, s12
 80064d2:	eef0 1a66 	vmov.f32	s3, s13
 80064d6:	2201      	movs	r2, #1
 80064d8:	eeb0 0a47 	vmov.f32	s0, s14
 80064dc:	eef0 0a67 	vmov.f32	s1, s15
 80064e0:	f000 ff66 	bl	80073b0 <scaraInitLSPB>
 80064e4:	4603      	mov	r3, r0
 80064e6:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 80064ea:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 80064ee:	3301      	adds	r3, #1
 80064f0:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
 80064f4:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	d9b1      	bls.n	8006460 <scaraInitDuty+0x1188>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 80064fc:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8006500:	4aa8      	ldr	r2, [pc, #672]	; (80067a4 <scaraInitDuty+0x14cc>)
 8006502:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006506:	e9c2 3400 	strd	r3, r4, [r2]
 800650a:	e22c      	b.n	8006966 <scaraInitDuty+0x168e>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800650c:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006510:	2b00      	cmp	r3, #0
 8006512:	f040 80d9 	bne.w	80066c8 <scaraInitDuty+0x13f0>
					for ( uint8_t i = 0; i < 4; i++) {
 8006516:	2300      	movs	r3, #0
 8006518:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
 800651c:	e03b      	b.n	8006596 <scaraInitDuty+0x12be>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 800651e:	f897 218a 	ldrb.w	r2, [r7, #394]	; 0x18a
 8006522:	49a0      	ldr	r1, [pc, #640]	; (80067a4 <scaraInitDuty+0x14cc>)
 8006524:	4613      	mov	r3, r2
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	4413      	add	r3, r2
 800652a:	01db      	lsls	r3, r3, #7
 800652c:	440b      	add	r3, r1
 800652e:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006532:	2200      	movs	r2, #0
 8006534:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006536:	f897 218a 	ldrb.w	r2, [r7, #394]	; 0x18a
 800653a:	4613      	mov	r3, r2
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	4413      	add	r3, r2
 8006540:	01db      	lsls	r3, r3, #7
 8006542:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006546:	4a97      	ldr	r2, [pc, #604]	; (80067a4 <scaraInitDuty+0x14cc>)
 8006548:	1898      	adds	r0, r3, r2
 800654a:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 800654e:	4a96      	ldr	r2, [pc, #600]	; (80067a8 <scaraInitDuty+0x14d0>)
 8006550:	5cd1      	ldrb	r1, [r2, r3]
 8006552:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 8006556:	463a      	mov	r2, r7
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	4413      	add	r3, r2
 800655c:	ed93 7b00 	vldr	d7, [r3]
 8006560:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8006564:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8006568:	eeb0 2a45 	vmov.f32	s4, s10
 800656c:	eef0 2a65 	vmov.f32	s5, s11
 8006570:	eeb0 1a46 	vmov.f32	s2, s12
 8006574:	eef0 1a66 	vmov.f32	s3, s13
 8006578:	2200      	movs	r2, #0
 800657a:	eeb0 0a47 	vmov.f32	s0, s14
 800657e:	eef0 0a67 	vmov.f32	s1, s15
 8006582:	f000 ff15 	bl	80073b0 <scaraInitLSPB>
 8006586:	4603      	mov	r3, r0
 8006588:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 800658c:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 8006590:	3301      	adds	r3, #1
 8006592:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
 8006596:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 800659a:	2b03      	cmp	r3, #3
 800659c:	d9bf      	bls.n	800651e <scaraInitDuty+0x1246>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 800659e:	4b81      	ldr	r3, [pc, #516]	; (80067a4 <scaraInitDuty+0x14cc>)
 80065a0:	f603 2238 	addw	r2, r3, #2616	; 0xa38
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	f04f 0400 	mov.w	r4, #0
 80065ac:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 80065b0:	2300      	movs	r3, #0
 80065b2:	f887 3189 	strb.w	r3, [r7, #393]	; 0x189
 80065b6:	e02d      	b.n	8006614 <scaraInitDuty+0x133c>
						if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 80065b8:	f897 2189 	ldrb.w	r2, [r7, #393]	; 0x189
 80065bc:	4979      	ldr	r1, [pc, #484]	; (80067a4 <scaraInitDuty+0x14cc>)
 80065be:	4613      	mov	r3, r2
 80065c0:	005b      	lsls	r3, r3, #1
 80065c2:	4413      	add	r3, r2
 80065c4:	01db      	lsls	r3, r3, #7
 80065c6:	440b      	add	r3, r1
 80065c8:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80065cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065d0:	4b74      	ldr	r3, [pc, #464]	; (80067a4 <scaraInitDuty+0x14cc>)
 80065d2:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80065d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80065da:	461a      	mov	r2, r3
 80065dc:	4623      	mov	r3, r4
 80065de:	f7fa fa9b 	bl	8000b18 <__aeabi_dcmpgt>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d010      	beq.n	800660a <scaraInitDuty+0x1332>
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 80065e8:	f897 2189 	ldrb.w	r2, [r7, #393]	; 0x189
 80065ec:	496d      	ldr	r1, [pc, #436]	; (80067a4 <scaraInitDuty+0x14cc>)
 80065ee:	4613      	mov	r3, r2
 80065f0:	005b      	lsls	r3, r3, #1
 80065f2:	4413      	add	r3, r2
 80065f4:	01db      	lsls	r3, r3, #7
 80065f6:	440b      	add	r3, r1
 80065f8:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80065fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006600:	4a68      	ldr	r2, [pc, #416]	; (80067a4 <scaraInitDuty+0x14cc>)
 8006602:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006606:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 800660a:	f897 3189 	ldrb.w	r3, [r7, #393]	; 0x189
 800660e:	3301      	adds	r3, #1
 8006610:	f887 3189 	strb.w	r3, [r7, #393]	; 0x189
 8006614:	f897 3189 	ldrb.w	r3, [r7, #393]	; 0x189
 8006618:	2b03      	cmp	r3, #3
 800661a:	d9cd      	bls.n	80065b8 <scaraInitDuty+0x12e0>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 800661c:	2300      	movs	r3, #0
 800661e:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
 8006622:	e04c      	b.n	80066be <scaraInitDuty+0x13e6>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006624:	f897 2188 	ldrb.w	r2, [r7, #392]	; 0x188
 8006628:	495e      	ldr	r1, [pc, #376]	; (80067a4 <scaraInitDuty+0x14cc>)
 800662a:	4613      	mov	r3, r2
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	4413      	add	r3, r2
 8006630:	01db      	lsls	r3, r3, #7
 8006632:	440b      	add	r3, r1
 8006634:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006638:	2200      	movs	r2, #0
 800663a:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 800663c:	f897 0188 	ldrb.w	r0, [r7, #392]	; 0x188
 8006640:	4b58      	ldr	r3, [pc, #352]	; (80067a4 <scaraInitDuty+0x14cc>)
 8006642:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006646:	e9d3 1200 	ldrd	r1, r2, [r3]
 800664a:	4c56      	ldr	r4, [pc, #344]	; (80067a4 <scaraInitDuty+0x14cc>)
 800664c:	4603      	mov	r3, r0
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	4403      	add	r3, r0
 8006652:	01db      	lsls	r3, r3, #7
 8006654:	4423      	add	r3, r4
 8006656:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800665a:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 800665e:	f897 2188 	ldrb.w	r2, [r7, #392]	; 0x188
 8006662:	4613      	mov	r3, r2
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	4413      	add	r3, r2
 8006668:	01db      	lsls	r3, r3, #7
 800666a:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800666e:	4a4d      	ldr	r2, [pc, #308]	; (80067a4 <scaraInitDuty+0x14cc>)
 8006670:	1898      	adds	r0, r3, r2
 8006672:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 8006676:	4a4c      	ldr	r2, [pc, #304]	; (80067a8 <scaraInitDuty+0x14d0>)
 8006678:	5cd1      	ldrb	r1, [r2, r3]
 800667a:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 800667e:	463a      	mov	r2, r7
 8006680:	00db      	lsls	r3, r3, #3
 8006682:	4413      	add	r3, r2
 8006684:	ed93 7b00 	vldr	d7, [r3]
 8006688:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 800668c:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8006690:	eeb0 2a45 	vmov.f32	s4, s10
 8006694:	eef0 2a65 	vmov.f32	s5, s11
 8006698:	eeb0 1a46 	vmov.f32	s2, s12
 800669c:	eef0 1a66 	vmov.f32	s3, s13
 80066a0:	2201      	movs	r2, #1
 80066a2:	eeb0 0a47 	vmov.f32	s0, s14
 80066a6:	eef0 0a67 	vmov.f32	s1, s15
 80066aa:	f000 fe81 	bl	80073b0 <scaraInitLSPB>
 80066ae:	4603      	mov	r3, r0
 80066b0:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 80066b4:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 80066b8:	3301      	adds	r3, #1
 80066ba:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
 80066be:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 80066c2:	2b03      	cmp	r3, #3
 80066c4:	d9ae      	bls.n	8006624 <scaraInitDuty+0x134c>
 80066c6:	e14e      	b.n	8006966 <scaraInitDuty+0x168e>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 80066c8:	2308      	movs	r3, #8
 80066ca:	e17a      	b.n	80069c2 <scaraInitDuty+0x16ea>
				}
				// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 80066cc:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	f040 8142 	bne.w	800695a <scaraInitDuty+0x1682>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80066d6:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d159      	bne.n	8006792 <scaraInitDuty+0x14ba>
					for ( uint8_t i = 0; i < 4; i++) {
 80066de:	2300      	movs	r3, #0
 80066e0:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 80066e4:	e049      	b.n	800677a <scaraInitDuty+0x14a2>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80066e6:	f897 2187 	ldrb.w	r2, [r7, #391]	; 0x187
 80066ea:	492e      	ldr	r1, [pc, #184]	; (80067a4 <scaraInitDuty+0x14cc>)
 80066ec:	4613      	mov	r3, r2
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	4413      	add	r3, r2
 80066f2:	01db      	lsls	r3, r3, #7
 80066f4:	440b      	add	r3, r1
 80066f6:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80066fa:	2201      	movs	r2, #1
 80066fc:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 80066fe:	f897 0187 	ldrb.w	r0, [r7, #391]	; 0x187
 8006702:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8006706:	4c27      	ldr	r4, [pc, #156]	; (80067a4 <scaraInitDuty+0x14cc>)
 8006708:	4603      	mov	r3, r0
 800670a:	005b      	lsls	r3, r3, #1
 800670c:	4403      	add	r3, r0
 800670e:	01db      	lsls	r3, r3, #7
 8006710:	4423      	add	r3, r4
 8006712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006716:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 800671a:	f897 2187 	ldrb.w	r2, [r7, #391]	; 0x187
 800671e:	4613      	mov	r3, r2
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	4413      	add	r3, r2
 8006724:	01db      	lsls	r3, r3, #7
 8006726:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800672a:	4a1e      	ldr	r2, [pc, #120]	; (80067a4 <scaraInitDuty+0x14cc>)
 800672c:	1898      	adds	r0, r3, r2
 800672e:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8006732:	4a1d      	ldr	r2, [pc, #116]	; (80067a8 <scaraInitDuty+0x14d0>)
 8006734:	5cd1      	ldrb	r1, [r2, r3]
 8006736:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800673a:	463a      	mov	r2, r7
 800673c:	00db      	lsls	r3, r3, #3
 800673e:	4413      	add	r3, r2
 8006740:	ed93 7b00 	vldr	d7, [r3]
 8006744:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8006748:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 800674c:	eeb0 2a45 	vmov.f32	s4, s10
 8006750:	eef0 2a65 	vmov.f32	s5, s11
 8006754:	eeb0 1a46 	vmov.f32	s2, s12
 8006758:	eef0 1a66 	vmov.f32	s3, s13
 800675c:	2201      	movs	r2, #1
 800675e:	eeb0 0a47 	vmov.f32	s0, s14
 8006762:	eef0 0a67 	vmov.f32	s1, s15
 8006766:	f001 fa03 	bl	8007b70 <scaraInitScurve>
 800676a:	4603      	mov	r3, r0
 800676c:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 8006770:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8006774:	3301      	adds	r3, #1
 8006776:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 800677a:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800677e:	2b03      	cmp	r3, #3
 8006780:	d9b1      	bls.n	80066e6 <scaraInitDuty+0x140e>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 8006782:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8006786:	4a07      	ldr	r2, [pc, #28]	; (80067a4 <scaraInitDuty+0x14cc>)
 8006788:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 800678c:	e9c2 3400 	strd	r3, r4, [r2]
 8006790:	e0e9      	b.n	8006966 <scaraInitDuty+0x168e>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006792:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006796:	2b00      	cmp	r3, #0
 8006798:	f040 80dd 	bne.w	8006956 <scaraInitDuty+0x167e>
					for ( uint8_t i = 0; i < 4; i++) {
 800679c:	2300      	movs	r3, #0
 800679e:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 80067a2:	e03f      	b.n	8006824 <scaraInitDuty+0x154c>
 80067a4:	20004f28 	.word	0x20004f28
 80067a8:	20000824 	.word	0x20000824
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80067ac:	f897 2186 	ldrb.w	r2, [r7, #390]	; 0x186
 80067b0:	4988      	ldr	r1, [pc, #544]	; (80069d4 <scaraInitDuty+0x16fc>)
 80067b2:	4613      	mov	r3, r2
 80067b4:	005b      	lsls	r3, r3, #1
 80067b6:	4413      	add	r3, r2
 80067b8:	01db      	lsls	r3, r3, #7
 80067ba:	440b      	add	r3, r1
 80067bc:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80067c0:	2201      	movs	r2, #1
 80067c2:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80067c4:	f897 2186 	ldrb.w	r2, [r7, #390]	; 0x186
 80067c8:	4613      	mov	r3, r2
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	4413      	add	r3, r2
 80067ce:	01db      	lsls	r3, r3, #7
 80067d0:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80067d4:	4a7f      	ldr	r2, [pc, #508]	; (80069d4 <scaraInitDuty+0x16fc>)
 80067d6:	1898      	adds	r0, r3, r2
 80067d8:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 80067dc:	4a7e      	ldr	r2, [pc, #504]	; (80069d8 <scaraInitDuty+0x1700>)
 80067de:	5cd1      	ldrb	r1, [r2, r3]
 80067e0:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 80067e4:	463a      	mov	r2, r7
 80067e6:	00db      	lsls	r3, r3, #3
 80067e8:	4413      	add	r3, r2
 80067ea:	ed93 7b00 	vldr	d7, [r3]
 80067ee:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80067f2:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80067f6:	eeb0 2a45 	vmov.f32	s4, s10
 80067fa:	eef0 2a65 	vmov.f32	s5, s11
 80067fe:	eeb0 1a46 	vmov.f32	s2, s12
 8006802:	eef0 1a66 	vmov.f32	s3, s13
 8006806:	2200      	movs	r2, #0
 8006808:	eeb0 0a47 	vmov.f32	s0, s14
 800680c:	eef0 0a67 	vmov.f32	s1, s15
 8006810:	f001 f9ae 	bl	8007b70 <scaraInitScurve>
 8006814:	4603      	mov	r3, r0
 8006816:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 800681a:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800681e:	3301      	adds	r3, #1
 8006820:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8006824:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8006828:	2b03      	cmp	r3, #3
 800682a:	d9bf      	bls.n	80067ac <scaraInitDuty+0x14d4>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 800682c:	4b69      	ldr	r3, [pc, #420]	; (80069d4 <scaraInitDuty+0x16fc>)
 800682e:	f603 2238 	addw	r2, r3, #2616	; 0xa38
 8006832:	f04f 0300 	mov.w	r3, #0
 8006836:	f04f 0400 	mov.w	r4, #0
 800683a:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 800683e:	2300      	movs	r3, #0
 8006840:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8006844:	e02d      	b.n	80068a2 <scaraInitDuty+0x15ca>
						if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 8006846:	f897 2185 	ldrb.w	r2, [r7, #389]	; 0x185
 800684a:	4962      	ldr	r1, [pc, #392]	; (80069d4 <scaraInitDuty+0x16fc>)
 800684c:	4613      	mov	r3, r2
 800684e:	005b      	lsls	r3, r3, #1
 8006850:	4413      	add	r3, r2
 8006852:	01db      	lsls	r3, r3, #7
 8006854:	440b      	add	r3, r1
 8006856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800685a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800685e:	4b5d      	ldr	r3, [pc, #372]	; (80069d4 <scaraInitDuty+0x16fc>)
 8006860:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006864:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006868:	461a      	mov	r2, r3
 800686a:	4623      	mov	r3, r4
 800686c:	f7fa f954 	bl	8000b18 <__aeabi_dcmpgt>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d010      	beq.n	8006898 <scaraInitDuty+0x15c0>
							myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8006876:	f897 2185 	ldrb.w	r2, [r7, #389]	; 0x185
 800687a:	4956      	ldr	r1, [pc, #344]	; (80069d4 <scaraInitDuty+0x16fc>)
 800687c:	4613      	mov	r3, r2
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	4413      	add	r3, r2
 8006882:	01db      	lsls	r3, r3, #7
 8006884:	440b      	add	r3, r1
 8006886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800688e:	4a51      	ldr	r2, [pc, #324]	; (80069d4 <scaraInitDuty+0x16fc>)
 8006890:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006894:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8006898:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800689c:	3301      	adds	r3, #1
 800689e:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 80068a2:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d9cd      	bls.n	8006846 <scaraInitDuty+0x156e>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 80068aa:	2300      	movs	r3, #0
 80068ac:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 80068b0:	e04c      	b.n	800694c <scaraInitDuty+0x1674>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80068b2:	f897 2184 	ldrb.w	r2, [r7, #388]	; 0x184
 80068b6:	4947      	ldr	r1, [pc, #284]	; (80069d4 <scaraInitDuty+0x16fc>)
 80068b8:	4613      	mov	r3, r2
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	4413      	add	r3, r2
 80068be:	01db      	lsls	r3, r3, #7
 80068c0:	440b      	add	r3, r1
 80068c2:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80068c6:	2201      	movs	r2, #1
 80068c8:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 80068ca:	f897 0184 	ldrb.w	r0, [r7, #388]	; 0x184
 80068ce:	4b41      	ldr	r3, [pc, #260]	; (80069d4 <scaraInitDuty+0x16fc>)
 80068d0:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80068d4:	e9d3 1200 	ldrd	r1, r2, [r3]
 80068d8:	4c3e      	ldr	r4, [pc, #248]	; (80069d4 <scaraInitDuty+0x16fc>)
 80068da:	4603      	mov	r3, r0
 80068dc:	005b      	lsls	r3, r3, #1
 80068de:	4403      	add	r3, r0
 80068e0:	01db      	lsls	r3, r3, #7
 80068e2:	4423      	add	r3, r4
 80068e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e8:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80068ec:	f897 2184 	ldrb.w	r2, [r7, #388]	; 0x184
 80068f0:	4613      	mov	r3, r2
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	4413      	add	r3, r2
 80068f6:	01db      	lsls	r3, r3, #7
 80068f8:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80068fc:	4a35      	ldr	r2, [pc, #212]	; (80069d4 <scaraInitDuty+0x16fc>)
 80068fe:	1898      	adds	r0, r3, r2
 8006900:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8006904:	4a34      	ldr	r2, [pc, #208]	; (80069d8 <scaraInitDuty+0x1700>)
 8006906:	5cd1      	ldrb	r1, [r2, r3]
 8006908:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800690c:	463a      	mov	r2, r7
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	4413      	add	r3, r2
 8006912:	ed93 7b00 	vldr	d7, [r3]
 8006916:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 800691a:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 800691e:	eeb0 2a45 	vmov.f32	s4, s10
 8006922:	eef0 2a65 	vmov.f32	s5, s11
 8006926:	eeb0 1a46 	vmov.f32	s2, s12
 800692a:	eef0 1a66 	vmov.f32	s3, s13
 800692e:	2201      	movs	r2, #1
 8006930:	eeb0 0a47 	vmov.f32	s0, s14
 8006934:	eef0 0a67 	vmov.f32	s1, s15
 8006938:	f001 f91a 	bl	8007b70 <scaraInitScurve>
 800693c:	4603      	mov	r3, r0
 800693e:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 8006942:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8006946:	3301      	adds	r3, #1
 8006948:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 800694c:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8006950:	2b03      	cmp	r3, #3
 8006952:	d9ae      	bls.n	80068b2 <scaraInitDuty+0x15da>
 8006954:	e007      	b.n	8006966 <scaraInitDuty+0x168e>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8006956:	2308      	movs	r3, #8
 8006958:	e033      	b.n	80069c2 <scaraInitDuty+0x16ea>
				}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 800695a:	2305      	movs	r3, #5
 800695c:	e031      	b.n	80069c2 <scaraInitDuty+0x16ea>
			}

		} else {
			return SCARA_STATUS_ERROR_JOINT;
 800695e:	2304      	movs	r3, #4
 8006960:	e02f      	b.n	80069c2 <scaraInitDuty+0x16ea>
		}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8006962:	2302      	movs	r3, #2
 8006964:	e02d      	b.n	80069c2 <scaraInitDuty+0x16ea>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 8006966:	4a1d      	ldr	r2, [pc, #116]	; (80069dc <scaraInitDuty+0x1704>)
 8006968:	f04f 0300 	mov.w	r3, #0
 800696c:	f04f 0400 	mov.w	r4, #0
 8006970:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 8006974:	4b17      	ldr	r3, [pc, #92]	; (80069d4 <scaraInitDuty+0x16fc>)
 8006976:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800697a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800697e:	4a17      	ldr	r2, [pc, #92]	; (80069dc <scaraInitDuty+0x1704>)
 8006980:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionNext.t = 0;
 8006984:	4a16      	ldr	r2, [pc, #88]	; (80069e0 <scaraInitDuty+0x1708>)
 8006986:	f04f 0300 	mov.w	r3, #0
 800698a:	f04f 0400 	mov.w	r4, #0
 800698e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 8006992:	4b10      	ldr	r3, [pc, #64]	; (80069d4 <scaraInitDuty+0x16fc>)
 8006994:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006998:	e9d3 3400 	ldrd	r3, r4, [r3]
 800699c:	4a10      	ldr	r2, [pc, #64]	; (80069e0 <scaraInitDuty+0x1708>)
 800699e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionTrue.t = 0;
 80069a2:	4a10      	ldr	r2, [pc, #64]	; (80069e4 <scaraInitDuty+0x170c>)
 80069a4:	f04f 0300 	mov.w	r3, #0
 80069a8:	f04f 0400 	mov.w	r4, #0
 80069ac:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 80069b0:	4b08      	ldr	r3, [pc, #32]	; (80069d4 <scaraInitDuty+0x16fc>)
 80069b2:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80069b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80069ba:	4a0a      	ldr	r2, [pc, #40]	; (80069e4 <scaraInitDuty+0x170c>)
 80069bc:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	return SCARA_STATUS_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 80069c8:	46bd      	mov	sp, r7
 80069ca:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80069ce:	b004      	add	sp, #16
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	20004f28 	.word	0x20004f28
 80069d8:	20000824 	.word	0x20000824
 80069dc:	20005ae8 	.word	0x20005ae8
 80069e0:	20005c68 	.word	0x20005c68
 80069e4:	20005ba8 	.word	0x20005ba8

080069e8 <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 80069e8:	b082      	sub	sp, #8
 80069ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ec:	b0b1      	sub	sp, #196	; 0xc4
 80069ee:	af2e      	add	r7, sp, #184	; 0xb8
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	f107 0120 	add.w	r1, r7, #32
 80069f6:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 80069fa:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 80069fe:	4668      	mov	r0, sp
 8006a00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a04:	22b8      	movs	r2, #184	; 0xb8
 8006a06:	4619      	mov	r1, r3
 8006a08:	f00f f928 	bl	8015c5c <memcpy>
 8006a0c:	f107 0320 	add.w	r3, r7, #32
 8006a10:	cb0c      	ldmia	r3, {r2, r3}
 8006a12:	4620      	mov	r0, r4
 8006a14:	f7fd f850 	bl	8003ab8 <kinematicInverse>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006a1e:	2307      	movs	r3, #7
 8006a20:	e09e      	b.n	8006b60 <scaraInitLine+0x178>
	}
	// Init line params
	line->x1 = end.x;
 8006a22:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	e9c2 3402 	strd	r3, r4, [r2, #8]
	line->y1 = end.y;
 8006a2c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	e9c2 3406 	strd	r3, r4, [r2, #24]
	line->z1 = end.z;
 8006a36:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	line->x0 = start.x;
 8006a40:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	e9c2 3400 	strd	r3, r4, [r2]
	line->y0 = start.y;
 8006a4a:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	e9c2 3404 	strd	r3, r4, [r2, #16]
	line->z0 = start.z;
 8006a54:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	e9c2 3408 	strd	r3, r4, [r2, #32]
	line->denta_x = end.x  -  start.x;
 8006a5e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8006a62:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006a66:	461a      	mov	r2, r3
 8006a68:	4623      	mov	r3, r4
 8006a6a:	f7f9 fc0d 	bl	8000288 <__aeabi_dsub>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	460c      	mov	r4, r1
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 8006a78:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8006a7c:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8006a80:	461a      	mov	r2, r3
 8006a82:	4623      	mov	r3, r4
 8006a84:	f7f9 fc00 	bl	8000288 <__aeabi_dsub>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	460c      	mov	r4, r1
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 8006a92:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8006a96:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	4623      	mov	r3, r4
 8006a9e:	f7f9 fbf3 	bl	8000288 <__aeabi_dsub>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	460c      	mov	r4, r1
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8006ab8:	461a      	mov	r2, r3
 8006aba:	4623      	mov	r3, r4
 8006abc:	f7f9 fd9c 	bl	80005f8 <__aeabi_dmul>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	460c      	mov	r4, r1
 8006ac4:	461d      	mov	r5, r3
 8006ac6:	4626      	mov	r6, r4
			       +(line->denta_y)*(line->denta_y)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	4623      	mov	r3, r4
 8006ad8:	f7f9 fd8e 	bl	80005f8 <__aeabi_dmul>
 8006adc:	4603      	mov	r3, r0
 8006ade:	460c      	mov	r4, r1
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	4623      	mov	r3, r4
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	4631      	mov	r1, r6
 8006ae8:	f7f9 fbd0 	bl	800028c <__adddf3>
 8006aec:	4603      	mov	r3, r0
 8006aee:	460c      	mov	r4, r1
 8006af0:	461d      	mov	r5, r3
 8006af2:	4626      	mov	r6, r4
				   +(line->denta_z)*(line->denta_z));
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8006b00:	461a      	mov	r2, r3
 8006b02:	4623      	mov	r3, r4
 8006b04:	f7f9 fd78 	bl	80005f8 <__aeabi_dmul>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	460c      	mov	r4, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	4623      	mov	r3, r4
 8006b10:	4628      	mov	r0, r5
 8006b12:	4631      	mov	r1, r6
 8006b14:	f7f9 fbba 	bl	800028c <__adddf3>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	460c      	mov	r4, r1
 8006b1c:	ec44 3b17 	vmov	d7, r3, r4
 8006b20:	eeb0 0a47 	vmov.f32	s0, s14
 8006b24:	eef0 0a67 	vmov.f32	s1, s15
 8006b28:	f012 ffa0 	bl	8019a6c <sqrt>
 8006b2c:	eeb0 7a40 	vmov.f32	s14, s0
 8006b30:	eef0 7a60 	vmov.f32	s15, s1
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	line->y_current = line->y0;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	line->z_current = line->z0;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	return SCARA_STATUS_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006b6a:	b002      	add	sp, #8
 8006b6c:	4770      	bx	lr
	...

08006b70 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8006b70:	b082      	sub	sp, #8
 8006b72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b76:	b0c3      	sub	sp, #268	; 0x10c
 8006b78:	af2e      	add	r7, sp, #184	; 0xb8
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8006b80:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 8006b84:	f507 7698 	add.w	r6, r7, #304	; 0x130
 8006b88:	4668      	mov	r0, sp
 8006b8a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006b8e:	22b8      	movs	r2, #184	; 0xb8
 8006b90:	4619      	mov	r1, r3
 8006b92:	f00f f863 	bl	8015c5c <memcpy>
 8006b96:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006b9a:	cb0c      	ldmia	r3, {r2, r3}
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	f7fc ff8b 	bl	8003ab8 <kinematicInverse>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006ba8:	2307      	movs	r3, #7
 8006baa:	e146      	b.n	8006e3a <scaraInitCircle+0x2ca>
	}

	if( 1 != dir && -1 != dir) {
 8006bac:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d006      	beq.n	8006bc2 <scaraInitCircle+0x52>
 8006bb4:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8006bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bbc:	d001      	beq.n	8006bc2 <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
 8006bbe:	2306      	movs	r3, #6
 8006bc0:	e13b      	b.n	8006e3a <scaraInitCircle+0x2ca>
	}

	double v_x_start, v_y_start, v_x_stop, v_y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	v_x_start = start.x - center.x;
 8006bc2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006bc6:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8006bca:	f7f9 fb5d 	bl	8000288 <__aeabi_dsub>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	v_y_start = start.y - center.y;
 8006bd6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006bda:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006bde:	f7f9 fb53 	bl	8000288 <__aeabi_dsub>
 8006be2:	4602      	mov	r2, r0
 8006be4:	460b      	mov	r3, r1
 8006be6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	v_x_stop  = end.x  - center.x;
 8006bea:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006bee:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8006bf2:	f7f9 fb49 	bl	8000288 <__aeabi_dsub>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	v_y_stop  = end.y  - center.y;
 8006bfe:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8006c02:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006c06:	f7f9 fb3f 	bl	8000288 <__aeabi_dsub>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	r1 = sqrt(v_x_start*v_x_start + v_y_start*v_y_start);
 8006c12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c16:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006c1a:	f7f9 fced 	bl	80005f8 <__aeabi_dmul>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	4690      	mov	r8, r2
 8006c24:	4699      	mov	r9, r3
 8006c26:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c2a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006c2e:	f7f9 fce3 	bl	80005f8 <__aeabi_dmul>
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	4640      	mov	r0, r8
 8006c38:	4649      	mov	r1, r9
 8006c3a:	f7f9 fb27 	bl	800028c <__adddf3>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	ec43 2b17 	vmov	d7, r2, r3
 8006c46:	eeb0 0a47 	vmov.f32	s0, s14
 8006c4a:	eef0 0a67 	vmov.f32	s1, s15
 8006c4e:	f012 ff0d 	bl	8019a6c <sqrt>
 8006c52:	ed87 0b08 	vstr	d0, [r7, #32]
	r2 = sqrt(v_x_stop*v_x_stop + v_y_stop*v_y_stop);
 8006c56:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006c5a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006c5e:	f7f9 fccb 	bl	80005f8 <__aeabi_dmul>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	4690      	mov	r8, r2
 8006c68:	4699      	mov	r9, r3
 8006c6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006c72:	f7f9 fcc1 	bl	80005f8 <__aeabi_dmul>
 8006c76:	4602      	mov	r2, r0
 8006c78:	460b      	mov	r3, r1
 8006c7a:	4640      	mov	r0, r8
 8006c7c:	4649      	mov	r1, r9
 8006c7e:	f7f9 fb05 	bl	800028c <__adddf3>
 8006c82:	4602      	mov	r2, r0
 8006c84:	460b      	mov	r3, r1
 8006c86:	ec43 2b17 	vmov	d7, r2, r3
 8006c8a:	eeb0 0a47 	vmov.f32	s0, s14
 8006c8e:	eef0 0a67 	vmov.f32	s1, s15
 8006c92:	f012 feeb 	bl	8019a6c <sqrt>
 8006c96:	ed87 0b06 	vstr	d0, [r7, #24]

	if( 1.0 < fabs(r1 - r2)) {
 8006c9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c9e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006ca2:	f7f9 faf1 	bl	8000288 <__aeabi_dsub>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	4614      	mov	r4, r2
 8006cac:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8006cb0:	f04f 0200 	mov.w	r2, #0
 8006cb4:	4b68      	ldr	r3, [pc, #416]	; (8006e58 <scaraInitCircle+0x2e8>)
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	4629      	mov	r1, r5
 8006cba:	f7f9 ff2d 	bl	8000b18 <__aeabi_dcmpgt>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d001      	beq.n	8006cc8 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 8006cc4:	2306      	movs	r3, #6
 8006cc6:	e0b8      	b.n	8006e3a <scaraInitCircle+0x2ca>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 8006cc8:	a35f      	add	r3, pc, #380	; (adr r3, 8006e48 <scaraInitCircle+0x2d8>)
 8006cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006cd2:	f7f9 ff03 	bl	8000adc <__aeabi_dcmplt>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d109      	bne.n	8006cf0 <scaraInitCircle+0x180>
 8006cdc:	a35a      	add	r3, pc, #360	; (adr r3, 8006e48 <scaraInitCircle+0x2d8>)
 8006cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006ce6:	f7f9 fef9 	bl	8000adc <__aeabi_dcmplt>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8006cf0:	2306      	movs	r3, #6
 8006cf2:	e0a2      	b.n	8006e3a <scaraInitCircle+0x2ca>
	}

	angle_start = atan2(v_y_start, v_x_start);
 8006cf4:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8006cf8:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8006cfc:	f012 feb4 	bl	8019a68 <atan2>
 8006d00:	ed87 0b04 	vstr	d0, [r7, #16]
	angle_stop  = atan2(v_y_stop, v_x_stop);
 8006d04:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8006d08:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8006d0c:	f012 feac 	bl	8019a68 <atan2>
 8006d10:	ed87 0b02 	vstr	d0, [r7, #8]
	delta_angle = angle_stop - angle_start;
 8006d14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006d18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d1c:	f7f9 fab4 	bl	8000288 <__aeabi_dsub>
 8006d20:	4603      	mov	r3, r0
 8006d22:	460c      	mov	r4, r1
 8006d24:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

	if ( 0 > delta_angle) {
 8006d28:	f04f 0200 	mov.w	r2, #0
 8006d2c:	f04f 0300 	mov.w	r3, #0
 8006d30:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d34:	f7f9 fed2 	bl	8000adc <__aeabi_dcmplt>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <scaraInitCircle+0x1e4>
		delta_angle += 2*PI;
 8006d3e:	a344      	add	r3, pc, #272	; (adr r3, 8006e50 <scaraInitCircle+0x2e0>)
 8006d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d44:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d48:	f7f9 faa0 	bl	800028c <__adddf3>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	460c      	mov	r4, r1
 8006d50:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	} // atan2 range : -PI --> PI

	if ( 0 > dir) {
 8006d54:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	da0a      	bge.n	8006d72 <scaraInitCircle+0x202>
		delta_angle = 2*PI - delta_angle;
 8006d5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d60:	a13b      	add	r1, pc, #236	; (adr r1, 8006e50 <scaraInitCircle+0x2e0>)
 8006d62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d66:	f7f9 fa8f 	bl	8000288 <__aeabi_dsub>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	460c      	mov	r4, r1
 8006d6e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	}
	// Init circle params
	circle->dir = dir;
 8006d72:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8006d76:	b25a      	sxtb	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006d82:	e9c2 3402 	strd	r3, r4, [r2, #8]
	circle->angle_start = angle_start;
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006d8c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	circle->angle_stop  = angle_stop;
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006d96:	e9c2 3406 	strd	r3, r4, [r2, #24]
	circle->total_angle = delta_angle;
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8006da0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 8006da4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006da8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006dac:	f7f9 fc24 	bl	80005f8 <__aeabi_dmul>
 8006db0:	4603      	mov	r3, r0
 8006db2:	460c      	mov	r4, r1
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	circle->x0 = start.x;
 8006dba:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	e9c2 3408 	strd	r3, r4, [r2, #32]
	circle->y0 = start.y;
 8006dc4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	circle->x1 = end.x;
 8006dce:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	circle->y1 = end.y;
 8006dd8:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	circle->xi = center.x;
 8006de2:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	circle->yi = center.y;
 8006dec:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	circle->z0 = start.z;
 8006df6:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	circle->z1 = start.z;
 8006e00:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	circle->zi = start.z;
 8006e0a:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	circle->x_current = circle->x0;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->y0;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->z0;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3754      	adds	r7, #84	; 0x54
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e44:	b002      	add	sp, #8
 8006e46:	4770      	bx	lr
 8006e48:	9999999a 	.word	0x9999999a
 8006e4c:	3fb99999 	.word	0x3fb99999
 8006e50:	60000000 	.word	0x60000000
 8006e54:	401921fb 	.word	0x401921fb
 8006e58:	3ff00000 	.word	0x3ff00000
 8006e5c:	00000000 	.word	0x00000000

08006e60 <scaraInitLinear>:

SCARA_StatusTypeDef scaraInitLinear(Trajectory_Linear_TypeDef *linear, Trajectory_TargetTypeDef target, double total_s,
									ModeInitTypeDef modeinit, double time)
{
 8006e60:	b590      	push	{r4, r7, lr}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6178      	str	r0, [r7, #20]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	ed87 0b02 	vstr	d0, [r7, #8]
 8006e6e:	ed87 1b00 	vstr	d1, [r7]
 8006e72:	74fb      	strb	r3, [r7, #19]
 8006e74:	4613      	mov	r3, r2
 8006e76:	74bb      	strb	r3, [r7, #18]

	if(target == TRAJECTORY_3D){
 8006e78:	7cfb      	ldrb	r3, [r7, #19]
 8006e7a:	2b04      	cmp	r3, #4
 8006e7c:	d004      	beq.n	8006e88 <scaraInitLinear+0x28>

	}else if(target == TRAJECTORY_ROLL){
 8006e7e:	7cfb      	ldrb	r3, [r7, #19]
 8006e80:	2b05      	cmp	r3, #5
 8006e82:	d001      	beq.n	8006e88 <scaraInitLinear+0x28>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 8006e84:	2306      	movs	r3, #6
 8006e86:	e02e      	b.n	8006ee6 <scaraInitLinear+0x86>
	}

	if(modeinit == DUTY_MODE_INIT_QT){
 8006e88:	7cbb      	ldrb	r3, [r7, #18]
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d125      	bne.n	8006eda <scaraInitLinear+0x7a>
		linear->constant_v = total_s / time;
 8006e8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e96:	f7f9 fcd9 	bl	800084c <__aeabi_ddiv>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	460c      	mov	r4, r1
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	e9c2 3402 	strd	r3, r4, [r2, #8]
		linear->number_of_sample = ceilf(time / T_SAMPLING); // ceiling
 8006ea4:	a312      	add	r3, pc, #72	; (adr r3, 8006ef0 <scaraInitLinear+0x90>)
 8006ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006eae:	f7f9 fccd 	bl	800084c <__aeabi_ddiv>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	460c      	mov	r4, r1
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	4621      	mov	r1, r4
 8006eba:	f7f9 fe95 	bl	8000be8 <__aeabi_d2f>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	ee00 3a10 	vmov	s0, r3
 8006ec4:	f012 fd90 	bl	80199e8 <ceilf>
 8006ec8:	eef0 7a40 	vmov.f32	s15, s0
 8006ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ed0:	ee17 2a90 	vmov	r2, s15
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	621a      	str	r2, [r3, #32]
 8006ed8:	e004      	b.n	8006ee4 <scaraInitLinear+0x84>
	}else if(modeinit == DUTY_MODE_INIT_QV){
 8006eda:	7cbb      	ldrb	r3, [r7, #18]
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d001      	beq.n	8006ee4 <scaraInitLinear+0x84>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 8006ee0:	2306      	movs	r3, #6
 8006ee2:	e000      	b.n	8006ee6 <scaraInitLinear+0x86>
	}

	return SCARA_STATUS_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd90      	pop	{r4, r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	40000000 	.word	0x40000000
 8006ef4:	3f847ae1 	.word	0x3f847ae1

08006ef8 <scaraInitLSPB1>:
SCARA_StatusTypeDef	scaraInitLSPB1		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double additional_factor){
 8006ef8:	b5b0      	push	{r4, r5, r7, lr}
 8006efa:	b096      	sub	sp, #88	; 0x58
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	61f8      	str	r0, [r7, #28]
 8006f00:	460b      	mov	r3, r1
 8006f02:	ed87 0b04 	vstr	d0, [r7, #16]
 8006f06:	ed87 1b02 	vstr	d1, [r7, #8]
 8006f0a:	ed87 2b00 	vstr	d2, [r7]
 8006f0e:	76fb      	strb	r3, [r7, #27]
 8006f10:	4613      	mov	r3, r2
 8006f12:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	int8_t dir;
	if(target == TRAJECTORY_3D){
 8006f14:	7efb      	ldrb	r3, [r7, #27]
 8006f16:	2b04      	cmp	r3, #4
 8006f18:	d12c      	bne.n	8006f74 <scaraInitLSPB1+0x7c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8006f1a:	7ebb      	ldrb	r3, [r7, #26]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d10f      	bne.n	8006f40 <scaraInitLSPB1+0x48>
			v_design = V_MOVE_MAX*v_factor;
 8006f20:	f04f 0200 	mov.w	r2, #0
 8006f24:	4b74      	ldr	r3, [pc, #464]	; (80070f8 <scaraInitLSPB1+0x200>)
 8006f26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f2a:	f7f9 fb65 	bl	80005f8 <__aeabi_dmul>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	460c      	mov	r4, r1
 8006f32:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 8006f36:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006f3a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8006f3e:	e01b      	b.n	8006f78 <scaraInitLSPB1+0x80>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8006f40:	7ebb      	ldrb	r3, [r7, #26]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d118      	bne.n	8006f78 <scaraInitLSPB1+0x80>
			a_design = A_MOVE_MAX*additional_factor;
 8006f46:	f04f 0200 	mov.w	r2, #0
 8006f4a:	4b6c      	ldr	r3, [pc, #432]	; (80070fc <scaraInitLSPB1+0x204>)
 8006f4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f50:	f7f9 fb52 	bl	80005f8 <__aeabi_dmul>
 8006f54:	4603      	mov	r3, r0
 8006f56:	460c      	mov	r4, r1
 8006f58:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			v_design = V_MOVE_MAX*v_factor;
 8006f5c:	f04f 0200 	mov.w	r2, #0
 8006f60:	4b65      	ldr	r3, [pc, #404]	; (80070f8 <scaraInitLSPB1+0x200>)
 8006f62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f66:	f7f9 fb47 	bl	80005f8 <__aeabi_dmul>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	460c      	mov	r4, r1
 8006f6e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8006f72:	e001      	b.n	8006f78 <scaraInitLSPB1+0x80>
		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8006f74:	2306      	movs	r3, #6
 8006f76:	e20b      	b.n	8007390 <scaraInitLSPB1+0x498>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8006f78:	7ebb      	ldrb	r3, [r7, #26]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	f040 80c6 	bne.w	800710c <scaraInitLSPB1+0x214>
		//check if time valid or not
		if(tf < 0.1 && v_design > 7.5){
 8006f80:	a357      	add	r3, pc, #348	; (adr r3, 80070e0 <scaraInitLSPB1+0x1e8>)
 8006f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f86:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006f8a:	f7f9 fda7 	bl	8000adc <__aeabi_dcmplt>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d01d      	beq.n	8006fd0 <scaraInitLSPB1+0xd8>
 8006f94:	f04f 0200 	mov.w	r2, #0
 8006f98:	4b59      	ldr	r3, [pc, #356]	; (8007100 <scaraInitLSPB1+0x208>)
 8006f9a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006f9e:	f7f9 fdbb 	bl	8000b18 <__aeabi_dcmpgt>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d013      	beq.n	8006fd0 <scaraInitLSPB1+0xd8>
			tf = 1.5*total_s/v_design;
 8006fa8:	f04f 0200 	mov.w	r2, #0
 8006fac:	4b55      	ldr	r3, [pc, #340]	; (8007104 <scaraInitLSPB1+0x20c>)
 8006fae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006fb2:	f7f9 fb21 	bl	80005f8 <__aeabi_dmul>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	460c      	mov	r4, r1
 8006fba:	4618      	mov	r0, r3
 8006fbc:	4621      	mov	r1, r4
 8006fbe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006fc2:	f7f9 fc43 	bl	800084c <__aeabi_ddiv>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	460c      	mov	r4, r1
 8006fca:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8006fce:	e060      	b.n	8007092 <scaraInitLSPB1+0x19a>
		}else if(v_design < 0.0001 && tf > 0.15){ //check if velocity valid or not
 8006fd0:	a345      	add	r3, pc, #276	; (adr r3, 80070e8 <scaraInitLSPB1+0x1f0>)
 8006fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006fda:	f7f9 fd7f 	bl	8000adc <__aeabi_dcmplt>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d01d      	beq.n	8007020 <scaraInitLSPB1+0x128>
 8006fe4:	a342      	add	r3, pc, #264	; (adr r3, 80070f0 <scaraInitLSPB1+0x1f8>)
 8006fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006fee:	f7f9 fd93 	bl	8000b18 <__aeabi_dcmpgt>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d013      	beq.n	8007020 <scaraInitLSPB1+0x128>
			v_design = 1.5*total_s/tf;
 8006ff8:	f04f 0200 	mov.w	r2, #0
 8006ffc:	4b41      	ldr	r3, [pc, #260]	; (8007104 <scaraInitLSPB1+0x20c>)
 8006ffe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007002:	f7f9 faf9 	bl	80005f8 <__aeabi_dmul>
 8007006:	4603      	mov	r3, r0
 8007008:	460c      	mov	r4, r1
 800700a:	4618      	mov	r0, r3
 800700c:	4621      	mov	r1, r4
 800700e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007012:	f7f9 fc1b 	bl	800084c <__aeabi_ddiv>
 8007016:	4603      	mov	r3, r0
 8007018:	460c      	mov	r4, r1
 800701a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 800701e:	e038      	b.n	8007092 <scaraInitLSPB1+0x19a>
		}else{
			v_lim = total_s/tf;
 8007020:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007024:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007028:	f7f9 fc10 	bl	800084c <__aeabi_ddiv>
 800702c:	4603      	mov	r3, r0
 800702e:	460c      	mov	r4, r1
 8007030:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			if(v_design < 1.2*v_lim){
 8007034:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8007038:	4b33      	ldr	r3, [pc, #204]	; (8007108 <scaraInitLSPB1+0x210>)
 800703a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800703e:	f7f9 fadb 	bl	80005f8 <__aeabi_dmul>
 8007042:	4603      	mov	r3, r0
 8007044:	460c      	mov	r4, r1
 8007046:	461a      	mov	r2, r3
 8007048:	4623      	mov	r3, r4
 800704a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800704e:	f7f9 fd45 	bl	8000adc <__aeabi_dcmplt>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <scaraInitLSPB1+0x164>
				return SCARA_STATUS_ERROR_OVER_VELOC;
 8007058:	2309      	movs	r3, #9
 800705a:	e199      	b.n	8007390 <scaraInitLSPB1+0x498>
			}else if(v_design > 2*v_lim){
 800705c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007060:	4602      	mov	r2, r0
 8007062:	460b      	mov	r3, r1
 8007064:	f7f9 f912 	bl	800028c <__adddf3>
 8007068:	4603      	mov	r3, r0
 800706a:	460c      	mov	r4, r1
 800706c:	461a      	mov	r2, r3
 800706e:	4623      	mov	r3, r4
 8007070:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007074:	f7f9 fd50 	bl	8000b18 <__aeabi_dcmpgt>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d009      	beq.n	8007092 <scaraInitLSPB1+0x19a>
				v_design = 2*v_lim;
 800707e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007082:	4602      	mov	r2, r0
 8007084:	460b      	mov	r3, r1
 8007086:	f7f9 f901 	bl	800028c <__adddf3>
 800708a:	4603      	mov	r3, r0
 800708c:	460c      	mov	r4, r1
 800708e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			}else{

			}
		}
		ta = tf - total_s/v_design;
 8007092:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007096:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800709a:	f7f9 fbd7 	bl	800084c <__aeabi_ddiv>
 800709e:	4603      	mov	r3, r0
 80070a0:	460c      	mov	r4, r1
 80070a2:	461a      	mov	r2, r3
 80070a4:	4623      	mov	r3, r4
 80070a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80070aa:	f7f9 f8ed 	bl	8000288 <__aeabi_dsub>
 80070ae:	4603      	mov	r3, r0
 80070b0:	460c      	mov	r4, r1
 80070b2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		a_design = v_design/ta;
 80070b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80070ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80070be:	f7f9 fbc5 	bl	800084c <__aeabi_ddiv>
 80070c2:	4603      	mov	r3, r0
 80070c4:	460c      	mov	r4, r1
 80070c6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		td = tf - ta;
 80070ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80070ce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80070d2:	f7f9 f8d9 	bl	8000288 <__aeabi_dsub>
 80070d6:	4603      	mov	r3, r0
 80070d8:	460c      	mov	r4, r1
 80070da:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 80070de:	e0ef      	b.n	80072c0 <scaraInitLSPB1+0x3c8>
 80070e0:	9999999a 	.word	0x9999999a
 80070e4:	3fb99999 	.word	0x3fb99999
 80070e8:	eb1c432d 	.word	0xeb1c432d
 80070ec:	3f1a36e2 	.word	0x3f1a36e2
 80070f0:	33333333 	.word	0x33333333
 80070f4:	3fc33333 	.word	0x3fc33333
 80070f8:	40877000 	.word	0x40877000
 80070fc:	407f4000 	.word	0x407f4000
 8007100:	401e0000 	.word	0x401e0000
 8007104:	3ff80000 	.word	0x3ff80000
 8007108:	3ff33333 	.word	0x3ff33333

	}else if(modeinit == DUTY_MODE_INIT_QVA){
 800710c:	7ebb      	ldrb	r3, [r7, #26]
 800710e:	2b00      	cmp	r3, #0
 8007110:	f040 80d6 	bne.w	80072c0 <scaraInitLSPB1+0x3c8>
		//check qva condition
		if(total_s*a_design < v_design*v_design){ //condition for ta smaller than td
 8007114:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007118:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800711c:	f7f9 fa6c 	bl	80005f8 <__aeabi_dmul>
 8007120:	4603      	mov	r3, r0
 8007122:	460c      	mov	r4, r1
 8007124:	4625      	mov	r5, r4
 8007126:	461c      	mov	r4, r3
 8007128:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800712c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007130:	f7f9 fa62 	bl	80005f8 <__aeabi_dmul>
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	4620      	mov	r0, r4
 800713a:	4629      	mov	r1, r5
 800713c:	f7f9 fcce 	bl	8000adc <__aeabi_dcmplt>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 8088 	beq.w	8007258 <scaraInitLSPB1+0x360>
			if(total_s/v_design < 0.8){ //td too small
 8007148:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800714c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007150:	f7f9 fb7c 	bl	800084c <__aeabi_ddiv>
 8007154:	4603      	mov	r3, r0
 8007156:	460c      	mov	r4, r1
 8007158:	4618      	mov	r0, r3
 800715a:	4621      	mov	r1, r4
 800715c:	a392      	add	r3, pc, #584	; (adr r3, 80073a8 <scaraInitLSPB1+0x4b0>)
 800715e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007162:	f7f9 fcbb 	bl	8000adc <__aeabi_dcmplt>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00a      	beq.n	8007182 <scaraInitLSPB1+0x28a>
				//recalculate v_design
				v_design = 0.8*total_s;
 800716c:	a38e      	add	r3, pc, #568	; (adr r3, 80073a8 <scaraInitLSPB1+0x4b0>)
 800716e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007172:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007176:	f7f9 fa3f 	bl	80005f8 <__aeabi_dmul>
 800717a:	4603      	mov	r3, r0
 800717c:	460c      	mov	r4, r1
 800717e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			}
			if(v_design/a_design < 0.5){ //ta is too small
 8007182:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007186:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800718a:	f7f9 fb5f 	bl	800084c <__aeabi_ddiv>
 800718e:	4603      	mov	r3, r0
 8007190:	460c      	mov	r4, r1
 8007192:	4618      	mov	r0, r3
 8007194:	4621      	mov	r1, r4
 8007196:	f04f 0200 	mov.w	r2, #0
 800719a:	4b81      	ldr	r3, [pc, #516]	; (80073a0 <scaraInitLSPB1+0x4a8>)
 800719c:	f7f9 fc9e 	bl	8000adc <__aeabi_dcmplt>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00a      	beq.n	80071bc <scaraInitLSPB1+0x2c4>
				//recalculate a_design
				a_design = v_design/0.5;
 80071a6:	f04f 0200 	mov.w	r2, #0
 80071aa:	4b7d      	ldr	r3, [pc, #500]	; (80073a0 <scaraInitLSPB1+0x4a8>)
 80071ac:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80071b0:	f7f9 fb4c 	bl	800084c <__aeabi_ddiv>
 80071b4:	4603      	mov	r3, r0
 80071b6:	460c      	mov	r4, r1
 80071b8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			}
			ta = v_design/a_design;
 80071bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80071c0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80071c4:	f7f9 fb42 	bl	800084c <__aeabi_ddiv>
 80071c8:	4603      	mov	r3, r0
 80071ca:	460c      	mov	r4, r1
 80071cc:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			td = total_s/v_design;
 80071d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80071d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80071d8:	f7f9 fb38 	bl	800084c <__aeabi_ddiv>
 80071dc:	4603      	mov	r3, r0
 80071de:	460c      	mov	r4, r1
 80071e0:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			tf = ta + td;
 80071e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80071e8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80071ec:	f7f9 f84e 	bl	800028c <__adddf3>
 80071f0:	4603      	mov	r3, r0
 80071f2:	460c      	mov	r4, r1
 80071f4:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			if(v_design/a_design < 1){ //ta is too small
 80071f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80071fc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007200:	f7f9 fb24 	bl	800084c <__aeabi_ddiv>
 8007204:	4603      	mov	r3, r0
 8007206:	460c      	mov	r4, r1
 8007208:	4618      	mov	r0, r3
 800720a:	4621      	mov	r1, r4
 800720c:	f04f 0200 	mov.w	r2, #0
 8007210:	4b64      	ldr	r3, [pc, #400]	; (80073a4 <scaraInitLSPB1+0x4ac>)
 8007212:	f7f9 fc63 	bl	8000adc <__aeabi_dcmplt>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d051      	beq.n	80072c0 <scaraInitLSPB1+0x3c8>
				//recalculate a_design
				a_design = v_design;
 800721c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8007220:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
				ta = 1;
 8007224:	f04f 0300 	mov.w	r3, #0
 8007228:	4c5e      	ldr	r4, [pc, #376]	; (80073a4 <scaraInitLSPB1+0x4ac>)
 800722a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
				td = total_s/v_design;
 800722e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007232:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007236:	f7f9 fb09 	bl	800084c <__aeabi_ddiv>
 800723a:	4603      	mov	r3, r0
 800723c:	460c      	mov	r4, r1
 800723e:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
				tf = ta + td;
 8007242:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007246:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800724a:	f7f9 f81f 	bl	800028c <__adddf3>
 800724e:	4603      	mov	r3, r0
 8007250:	460c      	mov	r4, r1
 8007252:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8007256:	e033      	b.n	80072c0 <scaraInitLSPB1+0x3c8>
			}

		}else{
			tf = 2*total_s/v_design;
 8007258:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800725c:	4602      	mov	r2, r0
 800725e:	460b      	mov	r3, r1
 8007260:	f7f9 f814 	bl	800028c <__adddf3>
 8007264:	4603      	mov	r3, r0
 8007266:	460c      	mov	r4, r1
 8007268:	4618      	mov	r0, r3
 800726a:	4621      	mov	r1, r4
 800726c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007270:	f7f9 faec 	bl	800084c <__aeabi_ddiv>
 8007274:	4603      	mov	r3, r0
 8007276:	460c      	mov	r4, r1
 8007278:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			ta = tf/2;
 800727c:	f04f 0200 	mov.w	r2, #0
 8007280:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007284:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007288:	f7f9 fae0 	bl	800084c <__aeabi_ddiv>
 800728c:	4603      	mov	r3, r0
 800728e:	460c      	mov	r4, r1
 8007290:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			td = tf/2;
 8007294:	f04f 0200 	mov.w	r2, #0
 8007298:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800729c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80072a0:	f7f9 fad4 	bl	800084c <__aeabi_ddiv>
 80072a4:	4603      	mov	r3, r0
 80072a6:	460c      	mov	r4, r1
 80072a8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			a_design = v_design/ta;
 80072ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80072b0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80072b4:	f7f9 faca 	bl	800084c <__aeabi_ddiv>
 80072b8:	4603      	mov	r3, r0
 80072ba:	460c      	mov	r4, r1
 80072bc:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		}
	}
	no_sample = ceilf(tf / T_SAMPLING); // ceiling
 80072c0:	a335      	add	r3, pc, #212	; (adr r3, 8007398 <scaraInitLSPB1+0x4a0>)
 80072c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80072ca:	f7f9 fabf 	bl	800084c <__aeabi_ddiv>
 80072ce:	4603      	mov	r3, r0
 80072d0:	460c      	mov	r4, r1
 80072d2:	4618      	mov	r0, r3
 80072d4:	4621      	mov	r1, r4
 80072d6:	f7f9 fc87 	bl	8000be8 <__aeabi_d2f>
 80072da:	4603      	mov	r3, r0
 80072dc:	ee00 3a10 	vmov	s0, r3
 80072e0:	f012 fb82 	bl	80199e8 <ceilf>
 80072e4:	eef0 7a40 	vmov.f32	s15, s0
 80072e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072ec:	ee17 3a90 	vmov	r3, s15
 80072f0:	627b      	str	r3, [r7, #36]	; 0x24
	 // Init lspb params
	 lspb->dir= dir;
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80072f8:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = 0;
 80072fa:	69fa      	ldr	r2, [r7, #28]
 80072fc:	f04f 0300 	mov.w	r3, #0
 8007300:	f04f 0400 	mov.w	r4, #0
 8007304:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = total_s;
 8007308:	69fa      	ldr	r2, [r7, #28]
 800730a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800730e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 8007312:	69fa      	ldr	r2, [r7, #28]
 8007314:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8007318:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 800731c:	69fa      	ldr	r2, [r7, #28]
 800731e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8007322:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 8007326:	69fa      	ldr	r2, [r7, #28]
 8007328:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800732c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8007336:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 800733a:	69fa      	ldr	r2, [r7, #28]
 800733c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8007340:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_design;
 8007344:	69fa      	ldr	r2, [r7, #28]
 8007346:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800734a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = 0;
 800734e:	69fa      	ldr	r2, [r7, #28]
 8007350:	f04f 0300 	mov.w	r3, #0
 8007354:	f04f 0400 	mov.w	r4, #0
 8007358:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = 0;
 800735c:	69fa      	ldr	r2, [r7, #28]
 800735e:	f04f 0300 	mov.w	r3, #0
 8007362:	f04f 0400 	mov.w	r4, #0
 8007366:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800736e:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800737c:	461a      	mov	r2, r3
 800737e:	4623      	mov	r3, r4
 8007380:	f7f8 ff82 	bl	8000288 <__aeabi_dsub>
 8007384:	4603      	mov	r3, r0
 8007386:	460c      	mov	r4, r1
 8007388:	69fa      	ldr	r2, [r7, #28]
 800738a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3758      	adds	r7, #88	; 0x58
 8007394:	46bd      	mov	sp, r7
 8007396:	bdb0      	pop	{r4, r5, r7, pc}
 8007398:	40000000 	.word	0x40000000
 800739c:	3f847ae1 	.word	0x3f847ae1
 80073a0:	3fe00000 	.word	0x3fe00000
 80073a4:	3ff00000 	.word	0x3ff00000
 80073a8:	9999999a 	.word	0x9999999a
 80073ac:	3fe99999 	.word	0x3fe99999

080073b0 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 80073b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b4:	b0ad      	sub	sp, #180	; 0xb4
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80073ba:	460b      	mov	r3, r1
 80073bc:	ed87 0b08 	vstr	d0, [r7, #32]
 80073c0:	ed87 1b06 	vstr	d1, [r7, #24]
 80073c4:	ed87 2b04 	vstr	d2, [r7, #16]
 80073c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073cc:	4613      	mov	r3, r2
 80073ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 80073d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073d6:	2b04      	cmp	r3, #4
 80073d8:	d118      	bne.n	800740c <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 80073da:	f20f 7368 	addw	r3, pc, #1896	; 0x768
 80073de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80073e6:	f7f9 f907 	bl	80005f8 <__aeabi_dmul>
 80073ea:	4603      	mov	r3, r0
 80073ec:	460c      	mov	r4, r1
 80073ee:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 80073f2:	f20f 7350 	addw	r3, pc, #1872	; 0x750
 80073f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80073fe:	f7f9 f8fb 	bl	80005f8 <__aeabi_dmul>
 8007402:	4603      	mov	r3, r0
 8007404:	460c      	mov	r4, r1
 8007406:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800740a:	e092      	b.n	8007532 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 800740c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007410:	2b05      	cmp	r3, #5
 8007412:	d118      	bne.n	8007446 <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 8007414:	f20f 7334 	addw	r3, pc, #1844	; 0x734
 8007418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007420:	f7f9 f8ea 	bl	80005f8 <__aeabi_dmul>
 8007424:	4603      	mov	r3, r0
 8007426:	460c      	mov	r4, r1
 8007428:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 800742c:	f20f 731c 	addw	r3, pc, #1820	; 0x71c
 8007430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007434:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007438:	f7f9 f8de 	bl	80005f8 <__aeabi_dmul>
 800743c:	4603      	mov	r3, r0
 800743e:	460c      	mov	r4, r1
 8007440:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8007444:	e075      	b.n	8007532 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 8007446:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800744a:	2b00      	cmp	r3, #0
 800744c:	d118      	bne.n	8007480 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 800744e:	f20f 63fc 	addw	r3, pc, #1788	; 0x6fc
 8007452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007456:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800745a:	f7f9 f8cd 	bl	80005f8 <__aeabi_dmul>
 800745e:	4603      	mov	r3, r0
 8007460:	460c      	mov	r4, r1
 8007462:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 8007466:	f20f 63e4 	addw	r3, pc, #1764	; 0x6e4
 800746a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007472:	f7f9 f8c1 	bl	80005f8 <__aeabi_dmul>
 8007476:	4603      	mov	r3, r0
 8007478:	460c      	mov	r4, r1
 800747a:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800747e:	e058      	b.n	8007532 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 8007480:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007484:	2b01      	cmp	r3, #1
 8007486:	d118      	bne.n	80074ba <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 8007488:	f20f 63c0 	addw	r3, pc, #1728	; 0x6c0
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007494:	f7f9 f8b0 	bl	80005f8 <__aeabi_dmul>
 8007498:	4603      	mov	r3, r0
 800749a:	460c      	mov	r4, r1
 800749c:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 80074a0:	f20f 63a8 	addw	r3, pc, #1704	; 0x6a8
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80074ac:	f7f9 f8a4 	bl	80005f8 <__aeabi_dmul>
 80074b0:	4603      	mov	r3, r0
 80074b2:	460c      	mov	r4, r1
 80074b4:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80074b8:	e03b      	b.n	8007532 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 80074ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d118      	bne.n	80074f4 <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 80074c2:	f20f 6380 	addw	r3, pc, #1664	; 0x680
 80074c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80074ce:	f7f9 f893 	bl	80005f8 <__aeabi_dmul>
 80074d2:	4603      	mov	r3, r0
 80074d4:	460c      	mov	r4, r1
 80074d6:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 80074da:	f20f 6368 	addw	r3, pc, #1640	; 0x668
 80074de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80074e6:	f7f9 f887 	bl	80005f8 <__aeabi_dmul>
 80074ea:	4603      	mov	r3, r0
 80074ec:	460c      	mov	r4, r1
 80074ee:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80074f2:	e01e      	b.n	8007532 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 80074f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	d118      	bne.n	800752e <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 80074fc:	f20f 6354 	addw	r3, pc, #1620	; 0x654
 8007500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007504:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007508:	f7f9 f876 	bl	80005f8 <__aeabi_dmul>
 800750c:	4603      	mov	r3, r0
 800750e:	460c      	mov	r4, r1
 8007510:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 8007514:	f20f 633c 	addw	r3, pc, #1596	; 0x63c
 8007518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007520:	f7f9 f86a 	bl	80005f8 <__aeabi_dmul>
 8007524:	4603      	mov	r3, r0
 8007526:	460c      	mov	r4, r1
 8007528:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800752c:	e001      	b.n	8007532 <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 800752e:	2306      	movs	r3, #6
 8007530:	e2fa      	b.n	8007b28 <scaraInitLSPB+0x778>
	 }

	 q0 = 0;
 8007532:	f04f 0300 	mov.w	r3, #0
 8007536:	f04f 0400 	mov.w	r4, #0
 800753a:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	 q1 = total_s;
 800753e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007542:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	 v0 = 0;
 8007546:	f04f 0300 	mov.w	r3, #0
 800754a:	f04f 0400 	mov.w	r4, #0
 800754e:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 v1 = 0;
 8007552:	f04f 0300 	mov.w	r3, #0
 8007556:	f04f 0400 	mov.w	r4, #0
 800755a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 800755e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8007562:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007566:	f7f9 fac3 	bl	8000af0 <__aeabi_dcmple>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d003      	beq.n	8007578 <scaraInitLSPB+0x1c8>
		 dir = 1;
 8007570:	2301      	movs	r3, #1
 8007572:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007576:	e00c      	b.n	8007592 <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 8007578:	23ff      	movs	r3, #255	; 0xff
 800757a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 800757e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007582:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007586:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800758a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800758e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8007592:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007596:	2b01      	cmp	r3, #1
 8007598:	f040 809e 	bne.w	80076d8 <scaraInitLSPB+0x328>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 800759c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759e:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 80075a2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 80075a6:	f20f 53b4 	addw	r3, pc, #1460	; 0x5b4
 80075aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ae:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80075b2:	f7f9 fab1 	bl	8000b18 <__aeabi_dcmpgt>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 8081 	beq.w	80076c0 <scaraInitLSPB+0x310>
			 v_lower 	= (q1 - q0) / tf;
 80075be:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80075c2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80075c6:	f7f8 fe5f 	bl	8000288 <__aeabi_dsub>
 80075ca:	4603      	mov	r3, r0
 80075cc:	460c      	mov	r4, r1
 80075ce:	4618      	mov	r0, r3
 80075d0:	4621      	mov	r1, r4
 80075d2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80075d6:	f7f9 f939 	bl	800084c <__aeabi_ddiv>
 80075da:	4603      	mov	r3, r0
 80075dc:	460c      	mov	r4, r1
 80075de:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 80075e2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80075e6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80075ea:	f7f8 fe4d 	bl	8000288 <__aeabi_dsub>
 80075ee:	4603      	mov	r3, r0
 80075f0:	460c      	mov	r4, r1
 80075f2:	4618      	mov	r0, r3
 80075f4:	4621      	mov	r1, r4
 80075f6:	4602      	mov	r2, r0
 80075f8:	460b      	mov	r3, r1
 80075fa:	f7f8 fe47 	bl	800028c <__adddf3>
 80075fe:	4603      	mov	r3, r0
 8007600:	460c      	mov	r4, r1
 8007602:	4618      	mov	r0, r3
 8007604:	4621      	mov	r1, r4
 8007606:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800760a:	f7f9 f91f 	bl	800084c <__aeabi_ddiv>
 800760e:	4603      	mov	r3, r0
 8007610:	460c      	mov	r4, r1
 8007612:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 8007616:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800761a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800761e:	f7f9 fa5d 	bl	8000adc <__aeabi_dcmplt>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d001      	beq.n	800762c <scaraInitLSPB+0x27c>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 8007628:	2309      	movs	r3, #9
 800762a:	e27d      	b.n	8007b28 <scaraInitLSPB+0x778>
			 } else {
				 if ( v_upper <= v_design) {
 800762c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007630:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007634:	f7f9 fa5c 	bl	8000af0 <__aeabi_dcmple>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <scaraInitLSPB+0x296>
					 v_design = v_upper;
 800763e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8007642:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 8007646:	f20f 531c 	addw	r3, pc, #1308	; 0x51c
 800764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007652:	f7f9 fa61 	bl	8000b18 <__aeabi_dcmpgt>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d01a      	beq.n	8007692 <scaraInitLSPB+0x2e2>
					 tc_upper	= tf - (q1 - q0)/v_design;
 800765c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007660:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007664:	f7f8 fe10 	bl	8000288 <__aeabi_dsub>
 8007668:	4603      	mov	r3, r0
 800766a:	460c      	mov	r4, r1
 800766c:	4618      	mov	r0, r3
 800766e:	4621      	mov	r1, r4
 8007670:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007674:	f7f9 f8ea 	bl	800084c <__aeabi_ddiv>
 8007678:	4603      	mov	r3, r0
 800767a:	460c      	mov	r4, r1
 800767c:	461a      	mov	r2, r3
 800767e:	4623      	mov	r3, r4
 8007680:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007684:	f7f8 fe00 	bl	8000288 <__aeabi_dsub>
 8007688:	4603      	mov	r3, r0
 800768a:	460c      	mov	r4, r1
 800768c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
 8007690:	e00b      	b.n	80076aa <scaraInitLSPB+0x2fa>
				 } else {
					 tc_upper = tf / 2;
 8007692:	f04f 0200 	mov.w	r2, #0
 8007696:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800769a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800769e:	f7f9 f8d5 	bl	800084c <__aeabi_ddiv>
 80076a2:	4603      	mov	r3, r0
 80076a4:	460c      	mov	r4, r1
 80076a6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 80076aa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80076ae:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80076b2:	f7f9 f8cb 	bl	800084c <__aeabi_ddiv>
 80076b6:	4603      	mov	r3, r0
 80076b8:	460c      	mov	r4, r1
 80076ba:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 80076be:	e00b      	b.n	80076d8 <scaraInitLSPB+0x328>
				//  } else {
				// 	 a_design = a_upper;
				//  }
			 }
		 } else {
			 v_design = 0;
 80076c0:	f04f 0300 	mov.w	r3, #0
 80076c4:	f04f 0400 	mov.w	r4, #0
 80076c8:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			 a_design = 0;
 80076cc:	f04f 0300 	mov.w	r3, #0
 80076d0:	f04f 0400 	mov.w	r4, #0
 80076d4:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 80076d8:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 80076dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80076e4:	f7f9 fa18 	bl	8000b18 <__aeabi_dcmpgt>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f000 819c 	beq.w	8007a28 <scaraInitLSPB+0x678>
 80076f0:	f20f 4370 	addw	r3, pc, #1136	; 0x470
 80076f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80076fc:	f7f9 fa0c 	bl	8000b18 <__aeabi_dcmpgt>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 8190 	beq.w	8007a28 <scaraInitLSPB+0x678>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8007708:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800770c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007710:	f7f8 fdba 	bl	8000288 <__aeabi_dsub>
 8007714:	4603      	mov	r3, r0
 8007716:	460c      	mov	r4, r1
 8007718:	461d      	mov	r5, r3
 800771a:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 800771e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007722:	4628      	mov	r0, r5
 8007724:	4631      	mov	r1, r6
 8007726:	f7f8 ff67 	bl	80005f8 <__aeabi_dmul>
 800772a:	4603      	mov	r3, r0
 800772c:	460c      	mov	r4, r1
 800772e:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8007732:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007736:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800773a:	f7f8 ff5d 	bl	80005f8 <__aeabi_dmul>
 800773e:	4603      	mov	r3, r0
 8007740:	460c      	mov	r4, r1
 8007742:	e9c7 3400 	strd	r3, r4, [r7]
 8007746:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800774a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800774e:	f7f8 ff53 	bl	80005f8 <__aeabi_dmul>
 8007752:	4603      	mov	r3, r0
 8007754:	460c      	mov	r4, r1
 8007756:	461d      	mov	r5, r3
 8007758:	4626      	mov	r6, r4
 800775a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800775e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007762:	f7f8 ff49 	bl	80005f8 <__aeabi_dmul>
 8007766:	4603      	mov	r3, r0
 8007768:	460c      	mov	r4, r1
 800776a:	461a      	mov	r2, r3
 800776c:	4623      	mov	r3, r4
 800776e:	4628      	mov	r0, r5
 8007770:	4631      	mov	r1, r6
 8007772:	f7f8 fd8b 	bl	800028c <__adddf3>
 8007776:	4603      	mov	r3, r0
 8007778:	460c      	mov	r4, r1
 800777a:	4618      	mov	r0, r3
 800777c:	4621      	mov	r1, r4
 800777e:	f04f 0200 	mov.w	r2, #0
 8007782:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007786:	f7f9 f861 	bl	800084c <__aeabi_ddiv>
 800778a:	4603      	mov	r3, r0
 800778c:	460c      	mov	r4, r1
 800778e:	461a      	mov	r2, r3
 8007790:	4623      	mov	r3, r4
 8007792:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007796:	f7f8 fd77 	bl	8000288 <__aeabi_dsub>
 800779a:	4603      	mov	r3, r0
 800779c:	460c      	mov	r4, r1
 800779e:	461a      	mov	r2, r3
 80077a0:	4623      	mov	r3, r4
 80077a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077a6:	f7f9 f9a3 	bl	8000af0 <__aeabi_dcmple>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d075      	beq.n	800789c <scaraInitLSPB+0x4ec>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 80077b0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80077b4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80077b8:	f7f8 fd66 	bl	8000288 <__aeabi_dsub>
 80077bc:	4603      	mov	r3, r0
 80077be:	460c      	mov	r4, r1
 80077c0:	469a      	mov	sl, r3
 80077c2:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 80077c6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80077ca:	4650      	mov	r0, sl
 80077cc:	4659      	mov	r1, fp
 80077ce:	f7f8 ff13 	bl	80005f8 <__aeabi_dmul>
 80077d2:	4603      	mov	r3, r0
 80077d4:	460c      	mov	r4, r1
 80077d6:	4625      	mov	r5, r4
 80077d8:	461c      	mov	r4, r3
 80077da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80077de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80077e2:	f7f8 ff09 	bl	80005f8 <__aeabi_dmul>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	4690      	mov	r8, r2
 80077ec:	4699      	mov	r9, r3
 80077ee:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80077f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80077f6:	f7f8 feff 	bl	80005f8 <__aeabi_dmul>
 80077fa:	4602      	mov	r2, r0
 80077fc:	460b      	mov	r3, r1
 80077fe:	4640      	mov	r0, r8
 8007800:	4649      	mov	r1, r9
 8007802:	f7f8 fd43 	bl	800028c <__adddf3>
 8007806:	4602      	mov	r2, r0
 8007808:	460b      	mov	r3, r1
 800780a:	4610      	mov	r0, r2
 800780c:	4619      	mov	r1, r3
 800780e:	f04f 0200 	mov.w	r2, #0
 8007812:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007816:	f7f9 f819 	bl	800084c <__aeabi_ddiv>
 800781a:	4602      	mov	r2, r0
 800781c:	460b      	mov	r3, r1
 800781e:	4620      	mov	r0, r4
 8007820:	4629      	mov	r1, r5
 8007822:	f7f8 fd33 	bl	800028c <__adddf3>
 8007826:	4603      	mov	r3, r0
 8007828:	460c      	mov	r4, r1
 800782a:	ec44 3b17 	vmov	d7, r3, r4
 800782e:	eeb0 0a47 	vmov.f32	s0, s14
 8007832:	eef0 0a67 	vmov.f32	s1, s15
 8007836:	f012 f919 	bl	8019a6c <sqrt>
 800783a:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 800783e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007842:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007846:	f7f8 fd1f 	bl	8000288 <__aeabi_dsub>
 800784a:	4603      	mov	r3, r0
 800784c:	460c      	mov	r4, r1
 800784e:	4618      	mov	r0, r3
 8007850:	4621      	mov	r1, r4
 8007852:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007856:	f7f8 fff9 	bl	800084c <__aeabi_ddiv>
 800785a:	4603      	mov	r3, r0
 800785c:	460c      	mov	r4, r1
 800785e:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8007862:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007866:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800786a:	f7f8 fd0d 	bl	8000288 <__aeabi_dsub>
 800786e:	4603      	mov	r3, r0
 8007870:	460c      	mov	r4, r1
 8007872:	4618      	mov	r0, r3
 8007874:	4621      	mov	r1, r4
 8007876:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800787a:	f7f8 ffe7 	bl	800084c <__aeabi_ddiv>
 800787e:	4603      	mov	r3, r0
 8007880:	460c      	mov	r4, r1
 8007882:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= ta + td;
 8007886:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800788a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800788e:	f7f8 fcfd 	bl	800028c <__adddf3>
 8007892:	4603      	mov	r3, r0
 8007894:	460c      	mov	r4, r1
 8007896:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 800789a:	e0e3      	b.n	8007a64 <scaraInitLSPB+0x6b4>
		 } else {
			 v_lim	= v_design;
 800789c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80078a0:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 80078a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80078a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80078ac:	f7f8 fcec 	bl	8000288 <__aeabi_dsub>
 80078b0:	4603      	mov	r3, r0
 80078b2:	460c      	mov	r4, r1
 80078b4:	4618      	mov	r0, r3
 80078b6:	4621      	mov	r1, r4
 80078b8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80078bc:	f7f8 ffc6 	bl	800084c <__aeabi_ddiv>
 80078c0:	4603      	mov	r3, r0
 80078c2:	460c      	mov	r4, r1
 80078c4:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 80078c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80078cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80078d0:	f7f8 fcda 	bl	8000288 <__aeabi_dsub>
 80078d4:	4603      	mov	r3, r0
 80078d6:	460c      	mov	r4, r1
 80078d8:	4618      	mov	r0, r3
 80078da:	4621      	mov	r1, r4
 80078dc:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80078e0:	f7f8 ffb4 	bl	800084c <__aeabi_ddiv>
 80078e4:	4603      	mov	r3, r0
 80078e6:	460c      	mov	r4, r1
 80078e8:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 80078ec:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80078f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80078f4:	f7f8 fcc8 	bl	8000288 <__aeabi_dsub>
 80078f8:	4603      	mov	r3, r0
 80078fa:	460c      	mov	r4, r1
 80078fc:	4698      	mov	r8, r3
 80078fe:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8007902:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8007906:	4640      	mov	r0, r8
 8007908:	4649      	mov	r1, r9
 800790a:	f7f8 ff9f 	bl	800084c <__aeabi_ddiv>
 800790e:	4603      	mov	r3, r0
 8007910:	460c      	mov	r4, r1
 8007912:	4625      	mov	r5, r4
 8007914:	461c      	mov	r4, r3
 8007916:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800791a:	4602      	mov	r2, r0
 800791c:	460b      	mov	r3, r1
 800791e:	f7f8 fcb5 	bl	800028c <__adddf3>
 8007922:	4602      	mov	r2, r0
 8007924:	460b      	mov	r3, r1
 8007926:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800792a:	f7f8 ff8f 	bl	800084c <__aeabi_ddiv>
 800792e:	4602      	mov	r2, r0
 8007930:	460b      	mov	r3, r1
 8007932:	4690      	mov	r8, r2
 8007934:	4699      	mov	r9, r3
 8007936:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800793a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800793e:	f7f8 ff85 	bl	800084c <__aeabi_ddiv>
 8007942:	4602      	mov	r2, r0
 8007944:	460b      	mov	r3, r1
 8007946:	f04f 0000 	mov.w	r0, #0
 800794a:	497d      	ldr	r1, [pc, #500]	; (8007b40 <scaraInitLSPB+0x790>)
 800794c:	f7f8 fc9c 	bl	8000288 <__aeabi_dsub>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4640      	mov	r0, r8
 8007956:	4649      	mov	r1, r9
 8007958:	f7f8 fe4e 	bl	80005f8 <__aeabi_dmul>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	4690      	mov	r8, r2
 8007962:	4699      	mov	r9, r3
 8007964:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8007968:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800796c:	f7f8 ff6e 	bl	800084c <__aeabi_ddiv>
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	f04f 0000 	mov.w	r0, #0
 8007978:	4971      	ldr	r1, [pc, #452]	; (8007b40 <scaraInitLSPB+0x790>)
 800797a:	f7f8 fc85 	bl	8000288 <__aeabi_dsub>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	4640      	mov	r0, r8
 8007984:	4649      	mov	r1, r9
 8007986:	f7f8 fe37 	bl	80005f8 <__aeabi_dmul>
 800798a:	4602      	mov	r2, r0
 800798c:	460b      	mov	r3, r1
 800798e:	4620      	mov	r0, r4
 8007990:	4629      	mov	r1, r5
 8007992:	f7f8 fc7b 	bl	800028c <__adddf3>
 8007996:	4603      	mov	r3, r0
 8007998:	460c      	mov	r4, r1
 800799a:	4625      	mov	r5, r4
 800799c:	461c      	mov	r4, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 800799e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80079a2:	4602      	mov	r2, r0
 80079a4:	460b      	mov	r3, r1
 80079a6:	f7f8 fc71 	bl	800028c <__adddf3>
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80079b2:	f7f8 ff4b 	bl	800084c <__aeabi_ddiv>
 80079b6:	4602      	mov	r2, r0
 80079b8:	460b      	mov	r3, r1
 80079ba:	4690      	mov	r8, r2
 80079bc:	4699      	mov	r9, r3
 80079be:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80079c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80079c6:	f7f8 ff41 	bl	800084c <__aeabi_ddiv>
 80079ca:	4602      	mov	r2, r0
 80079cc:	460b      	mov	r3, r1
 80079ce:	f04f 0000 	mov.w	r0, #0
 80079d2:	495b      	ldr	r1, [pc, #364]	; (8007b40 <scaraInitLSPB+0x790>)
 80079d4:	f7f8 fc58 	bl	8000288 <__aeabi_dsub>
 80079d8:	4602      	mov	r2, r0
 80079da:	460b      	mov	r3, r1
 80079dc:	4640      	mov	r0, r8
 80079de:	4649      	mov	r1, r9
 80079e0:	f7f8 fe0a 	bl	80005f8 <__aeabi_dmul>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4690      	mov	r8, r2
 80079ea:	4699      	mov	r9, r3
 80079ec:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80079f0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80079f4:	f7f8 ff2a 	bl	800084c <__aeabi_ddiv>
 80079f8:	4602      	mov	r2, r0
 80079fa:	460b      	mov	r3, r1
 80079fc:	f04f 0000 	mov.w	r0, #0
 8007a00:	494f      	ldr	r1, [pc, #316]	; (8007b40 <scaraInitLSPB+0x790>)
 8007a02:	f7f8 fc41 	bl	8000288 <__aeabi_dsub>
 8007a06:	4602      	mov	r2, r0
 8007a08:	460b      	mov	r3, r1
 8007a0a:	4640      	mov	r0, r8
 8007a0c:	4649      	mov	r1, r9
 8007a0e:	f7f8 fdf3 	bl	80005f8 <__aeabi_dmul>
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8007a16:	4620      	mov	r0, r4
 8007a18:	4629      	mov	r1, r5
 8007a1a:	f7f8 fc37 	bl	800028c <__adddf3>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	460c      	mov	r4, r1
 8007a22:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8007a26:	e01d      	b.n	8007a64 <scaraInitLSPB+0x6b4>
		 }
	 } else {
		 v_lim	= 0;
 8007a28:	f04f 0300 	mov.w	r3, #0
 8007a2c:	f04f 0400 	mov.w	r4, #0
 8007a30:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 ta = tf/2;
 8007a34:	f04f 0200 	mov.w	r2, #0
 8007a38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a3c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007a40:	f7f8 ff04 	bl	800084c <__aeabi_ddiv>
 8007a44:	4603      	mov	r3, r0
 8007a46:	460c      	mov	r4, r1
 8007a48:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		 td = tf/2;
 8007a4c:	f04f 0200 	mov.w	r2, #0
 8007a50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a54:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007a58:	f7f8 fef8 	bl	800084c <__aeabi_ddiv>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	460c      	mov	r4, r1
 8007a60:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8007a64:	a334      	add	r3, pc, #208	; (adr r3, 8007b38 <scaraInitLSPB+0x788>)
 8007a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007a6e:	f7f8 feed 	bl	800084c <__aeabi_ddiv>
 8007a72:	4603      	mov	r3, r0
 8007a74:	460c      	mov	r4, r1
 8007a76:	4618      	mov	r0, r3
 8007a78:	4621      	mov	r1, r4
 8007a7a:	f7f9 f8b5 	bl	8000be8 <__aeabi_d2f>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	ee00 3a10 	vmov	s0, r3
 8007a84:	f011 ffb0 	bl	80199e8 <ceilf>
 8007a88:	eef0 7a40 	vmov.f32	s15, s0
 8007a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a90:	ee17 3a90 	vmov	r3, s15
 8007a94:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 8007a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a98:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8007a9c:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 8007a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aa0:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8007aa4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = q1;
 8007aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aaa:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8007aae:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 8007ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ab4:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8007ab8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 8007abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007abe:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8007ac2:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 8007ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ac8:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8007acc:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 8007ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ad2:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8007ad6:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 8007ada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007adc:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8007ae0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_lim;
 8007ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ae6:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8007aea:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = v0;
 8007aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007af0:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8007af4:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = v1;
 8007af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007afa:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8007afe:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 8007b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b06:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8007b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b10:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007b14:	461a      	mov	r2, r3
 8007b16:	4623      	mov	r3, r4
 8007b18:	f7f8 fbb6 	bl	8000288 <__aeabi_dsub>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	460c      	mov	r4, r1
 8007b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b22:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	37b4      	adds	r7, #180	; 0xb4
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b32:	bf00      	nop
 8007b34:	f3af 8000 	nop.w
 8007b38:	40000000 	.word	0x40000000
 8007b3c:	3f847ae1 	.word	0x3f847ae1
 8007b40:	3ff00000 	.word	0x3ff00000
 8007b44:	00000000 	.word	0x00000000
 8007b48:	405c2000 	.word	0x405c2000
 8007b4c:	14000000 	.word	0x14000000
 8007b50:	4000f6f0 	.word	0x4000f6f0
 8007b54:	6b259425 	.word	0x6b259425
 8007b58:	40069b91 	.word	0x40069b91
 8007b5c:	d2f1a9fc 	.word	0xd2f1a9fc
 8007b60:	3f50624d 	.word	0x3f50624d
 8007b64:	9abcaf48 	.word	0x9abcaf48
 8007b68:	3e7ad7f2 	.word	0x3e7ad7f2
 8007b6c:	00000000 	.word	0x00000000

08007b70 <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8007b70:	b5b0      	push	{r4, r5, r7, lr}
 8007b72:	b0ba      	sub	sp, #232	; 0xe8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	61f8      	str	r0, [r7, #28]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	ed87 0b04 	vstr	d0, [r7, #16]
 8007b7e:	ed87 1b02 	vstr	d1, [r7, #8]
 8007b82:	ed87 2b00 	vstr	d2, [r7]
 8007b86:	76fb      	strb	r3, [r7, #27]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	76bb      	strb	r3, [r7, #26]
	 double v_design, a_design, q0, q1, v0, v1, v_lim, j_max, tm, tc, tf, dir;
	 double v_1, s_1, v_2, s_2, v_3, s_3, v_4, s_4;
	 uint32_t	 no_sample;
	 uint8_t	 no_phases;

	 if ( TRAJECTORY_3D == target) {
 8007b8c:	7efb      	ldrb	r3, [r7, #27]
 8007b8e:	2b04      	cmp	r3, #4
 8007b90:	d118      	bne.n	8007bc4 <scaraInitScurve+0x54>
		 v_design = V_DESIGN_3D*v_factor;
 8007b92:	f20f 4320 	addw	r3, pc, #1056	; 0x420
 8007b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b9e:	f7f8 fd2b 	bl	80005f8 <__aeabi_dmul>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	460c      	mov	r4, r1
 8007ba6:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_3D*a_factor;
 8007baa:	f20f 4308 	addw	r3, pc, #1032	; 0x408
 8007bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bb6:	f7f8 fd1f 	bl	80005f8 <__aeabi_dmul>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	460c      	mov	r4, r1
 8007bbe:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007bc2:	e083      	b.n	8007ccc <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_ROLL == target) {
 8007bc4:	7efb      	ldrb	r3, [r7, #27]
 8007bc6:	2b05      	cmp	r3, #5
 8007bc8:	d116      	bne.n	8007bf8 <scaraInitScurve+0x88>
		 v_design = V_DESIGN_ROLL*v_factor;
 8007bca:	a3fc      	add	r3, pc, #1008	; (adr r3, 8007fbc <scaraInitScurve+0x44c>)
 8007bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bd4:	f7f8 fd10 	bl	80005f8 <__aeabi_dmul>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	460c      	mov	r4, r1
 8007bdc:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_ROLL*a_factor;
 8007be0:	a3f6      	add	r3, pc, #984	; (adr r3, 8007fbc <scaraInitScurve+0x44c>)
 8007be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bea:	f7f8 fd05 	bl	80005f8 <__aeabi_dmul>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	460c      	mov	r4, r1
 8007bf2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007bf6:	e069      	b.n	8007ccc <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J0 == target) {
 8007bf8:	7efb      	ldrb	r3, [r7, #27]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d116      	bne.n	8007c2c <scaraInitScurve+0xbc>
		 v_design = V_DESIGN_J0*v_factor;
 8007bfe:	a3ef      	add	r3, pc, #956	; (adr r3, 8007fbc <scaraInitScurve+0x44c>)
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c08:	f7f8 fcf6 	bl	80005f8 <__aeabi_dmul>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	460c      	mov	r4, r1
 8007c10:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J0*a_factor;
 8007c14:	a3e9      	add	r3, pc, #932	; (adr r3, 8007fbc <scaraInitScurve+0x44c>)
 8007c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c1e:	f7f8 fceb 	bl	80005f8 <__aeabi_dmul>
 8007c22:	4603      	mov	r3, r0
 8007c24:	460c      	mov	r4, r1
 8007c26:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007c2a:	e04f      	b.n	8007ccc <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J1 == target) {
 8007c2c:	7efb      	ldrb	r3, [r7, #27]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d116      	bne.n	8007c60 <scaraInitScurve+0xf0>
		 v_design = V_DESIGN_J1*v_factor;
 8007c32:	a3e2      	add	r3, pc, #904	; (adr r3, 8007fbc <scaraInitScurve+0x44c>)
 8007c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c3c:	f7f8 fcdc 	bl	80005f8 <__aeabi_dmul>
 8007c40:	4603      	mov	r3, r0
 8007c42:	460c      	mov	r4, r1
 8007c44:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J1*a_factor;
 8007c48:	a3dc      	add	r3, pc, #880	; (adr r3, 8007fbc <scaraInitScurve+0x44c>)
 8007c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c52:	f7f8 fcd1 	bl	80005f8 <__aeabi_dmul>
 8007c56:	4603      	mov	r3, r0
 8007c58:	460c      	mov	r4, r1
 8007c5a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007c5e:	e035      	b.n	8007ccc <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J2 == target) {
 8007c60:	7efb      	ldrb	r3, [r7, #27]
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d116      	bne.n	8007c94 <scaraInitScurve+0x124>
		 v_design = V_DESIGN_J2*v_factor;
 8007c66:	a3d3      	add	r3, pc, #844	; (adr r3, 8007fb4 <scaraInitScurve+0x444>)
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c70:	f7f8 fcc2 	bl	80005f8 <__aeabi_dmul>
 8007c74:	4603      	mov	r3, r0
 8007c76:	460c      	mov	r4, r1
 8007c78:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J2*a_factor;
 8007c7c:	a3cd      	add	r3, pc, #820	; (adr r3, 8007fb4 <scaraInitScurve+0x444>)
 8007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c86:	f7f8 fcb7 	bl	80005f8 <__aeabi_dmul>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	460c      	mov	r4, r1
 8007c8e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007c92:	e01b      	b.n	8007ccc <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J3 == target) {
 8007c94:	7efb      	ldrb	r3, [r7, #27]
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	d116      	bne.n	8007cc8 <scaraInitScurve+0x158>
		 v_design = V_DESIGN_J3*v_factor;
 8007c9a:	a3ca      	add	r3, pc, #808	; (adr r3, 8007fc4 <scaraInitScurve+0x454>)
 8007c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ca4:	f7f8 fca8 	bl	80005f8 <__aeabi_dmul>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	460c      	mov	r4, r1
 8007cac:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J3*a_factor;
 8007cb0:	a3c4      	add	r3, pc, #784	; (adr r3, 8007fc4 <scaraInitScurve+0x454>)
 8007cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cba:	f7f8 fc9d 	bl	80005f8 <__aeabi_dmul>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	460c      	mov	r4, r1
 8007cc2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007cc6:	e001      	b.n	8007ccc <scaraInitScurve+0x15c>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8007cc8:	2306      	movs	r3, #6
 8007cca:	e2c8      	b.n	800825e <scaraInitScurve+0x6ee>
	 }

	 v0 = 0;
 8007ccc:	f04f 0300 	mov.w	r3, #0
 8007cd0:	f04f 0400 	mov.w	r4, #0
 8007cd4:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
	 v1 = 0;
 8007cd8:	f04f 0300 	mov.w	r3, #0
 8007cdc:	f04f 0400 	mov.w	r4, #0
 8007ce0:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 q0 = 0;
 8007ce4:	f04f 0300 	mov.w	r3, #0
 8007ce8:	f04f 0400 	mov.w	r4, #0
 8007cec:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	 q1 = total_s;
 8007cf0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007cf4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

	 if ( total_s < 0) {
 8007cf8:	f04f 0200 	mov.w	r2, #0
 8007cfc:	f04f 0300 	mov.w	r3, #0
 8007d00:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007d04:	f7f8 feea 	bl	8000adc <__aeabi_dcmplt>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d015      	beq.n	8007d3a <scaraInitScurve+0x1ca>
		 dir = -1;
 8007d0e:	f04f 0300 	mov.w	r3, #0
 8007d12:	4ca5      	ldr	r4, [pc, #660]	; (8007fa8 <scaraInitScurve+0x438>)
 8007d14:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 q1 = -q1;
 8007d18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d24:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007d28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		 total_s = -total_s;
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	613b      	str	r3, [r7, #16]
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007d36:	617b      	str	r3, [r7, #20]
 8007d38:	e004      	b.n	8007d44 <scaraInitScurve+0x1d4>
	 } else {
		 dir = 1;
 8007d3a:	f04f 0300 	mov.w	r3, #0
 8007d3e:	4c9b      	ldr	r4, [pc, #620]	; (8007fac <scaraInitScurve+0x43c>)
 8007d40:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	 }


	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8007d44:	7ebb      	ldrb	r3, [r7, #26]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	f040 8082 	bne.w	8007e50 <scaraInitScurve+0x2e0>
		 double t_upper, v_upper, a_upper;
		 tf = scurve->Tf;
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8007d52:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 // Avoid division by 0
		 if (tf > 0.001) {
 8007d56:	a390      	add	r3, pc, #576	; (adr r3, 8007f98 <scaraInitScurve+0x428>)
 8007d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007d60:	f7f8 feda 	bl	8000b18 <__aeabi_dcmpgt>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d066      	beq.n	8007e38 <scaraInitScurve+0x2c8>
			 // Assume 4 phase
			 t_upper = tf / 4;
 8007d6a:	f04f 0200 	mov.w	r2, #0
 8007d6e:	4b90      	ldr	r3, [pc, #576]	; (8007fb0 <scaraInitScurve+0x440>)
 8007d70:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007d74:	f7f8 fd6a 	bl	800084c <__aeabi_ddiv>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	460c      	mov	r4, r1
 8007d7c:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			 v_upper = total_s / (2*t_upper);
 8007d80:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007d84:	4602      	mov	r2, r0
 8007d86:	460b      	mov	r3, r1
 8007d88:	f7f8 fa80 	bl	800028c <__adddf3>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	460c      	mov	r4, r1
 8007d90:	461a      	mov	r2, r3
 8007d92:	4623      	mov	r3, r4
 8007d94:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007d98:	f7f8 fd58 	bl	800084c <__aeabi_ddiv>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	460c      	mov	r4, r1
 8007da0:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			 // Check 4 phase --> 5 phase
			 if ( v_upper > v_design) {
 8007da4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8007da8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007dac:	f7f8 feb4 	bl	8000b18 <__aeabi_dcmpgt>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d022      	beq.n	8007dfc <scaraInitScurve+0x28c>
				 t_upper = tf/2 - total_s/(2*v_design);
 8007db6:	f04f 0200 	mov.w	r2, #0
 8007dba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007dbe:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007dc2:	f7f8 fd43 	bl	800084c <__aeabi_ddiv>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	460c      	mov	r4, r1
 8007dca:	4625      	mov	r5, r4
 8007dcc:	461c      	mov	r4, r3
 8007dce:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	f7f8 fa59 	bl	800028c <__adddf3>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007de2:	f7f8 fd33 	bl	800084c <__aeabi_ddiv>
 8007de6:	4602      	mov	r2, r0
 8007de8:	460b      	mov	r3, r1
 8007dea:	4620      	mov	r0, r4
 8007dec:	4629      	mov	r1, r5
 8007dee:	f7f8 fa4b 	bl	8000288 <__aeabi_dsub>
 8007df2:	4603      	mov	r3, r0
 8007df4:	460c      	mov	r4, r1
 8007df6:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8007dfa:	e003      	b.n	8007e04 <scaraInitScurve+0x294>
			 } else {
				 v_design = v_upper;
 8007dfc:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8007e00:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 }
			 a_upper  = v_design / t_upper;
 8007e04:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8007e08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007e0c:	f7f8 fd1e 	bl	800084c <__aeabi_ddiv>
 8007e10:	4603      	mov	r3, r0
 8007e12:	460c      	mov	r4, r1
 8007e14:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
			 if ( a_upper > a_design) {
 8007e18:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007e1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007e20:	f7f8 fe7a 	bl	8000b18 <__aeabi_dcmpgt>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <scaraInitScurve+0x2be>
				 return SCARA_STATUS_ERROR_OVER_ACCEL;
 8007e2a:	230a      	movs	r3, #10
 8007e2c:	e217      	b.n	800825e <scaraInitScurve+0x6ee>
			 } else {
				 a_design = a_upper;
 8007e2e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8007e32:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007e36:	e00b      	b.n	8007e50 <scaraInitScurve+0x2e0>
			 }
		 } else {
			 v_design = 0;
 8007e38:	f04f 0300 	mov.w	r3, #0
 8007e3c:	f04f 0400 	mov.w	r4, #0
 8007e40:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 a_design = 0;
 8007e44:	f04f 0300 	mov.w	r3, #0
 8007e48:	f04f 0400 	mov.w	r4, #0
 8007e4c:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
		 }
	 }
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8007e50:	a353      	add	r3, pc, #332	; (adr r3, 8007fa0 <scaraInitScurve+0x430>)
 8007e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e56:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007e5a:	f7f8 fe5d 	bl	8000b18 <__aeabi_dcmpgt>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 80b3 	beq.w	8007fcc <scaraInitScurve+0x45c>
 8007e66:	a34e      	add	r3, pc, #312	; (adr r3, 8007fa0 <scaraInitScurve+0x430>)
 8007e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007e70:	f7f8 fe52 	bl	8000b18 <__aeabi_dcmpgt>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f000 80a8 	beq.w	8007fcc <scaraInitScurve+0x45c>
		 no_phases = 5;
 8007e7c:	2305      	movs	r3, #5
 8007e7e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = v_design/a_design;
 8007e82:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007e86:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007e8a:	f7f8 fcdf 	bl	800084c <__aeabi_ddiv>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	460c      	mov	r4, r1
 8007e92:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 tc = total_s/v_design - 2*tm;
 8007e96:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8007e9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007e9e:	f7f8 fcd5 	bl	800084c <__aeabi_ddiv>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	460c      	mov	r4, r1
 8007ea6:	4625      	mov	r5, r4
 8007ea8:	461c      	mov	r4, r3
 8007eaa:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007eae:	4602      	mov	r2, r0
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	f7f8 f9eb 	bl	800028c <__adddf3>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	4620      	mov	r0, r4
 8007ebc:	4629      	mov	r1, r5
 8007ebe:	f7f8 f9e3 	bl	8000288 <__aeabi_dsub>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 // Check condition 5 phase ---> 4 phase
		 if (tc < 0.0) {
 8007eca:	f04f 0200 	mov.w	r2, #0
 8007ece:	f04f 0300 	mov.w	r3, #0
 8007ed2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007ed6:	f7f8 fe01 	bl	8000adc <__aeabi_dcmplt>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d022      	beq.n	8007f26 <scaraInitScurve+0x3b6>
			 tc = 0;
 8007ee0:	f04f 0300 	mov.w	r3, #0
 8007ee4:	f04f 0400 	mov.w	r4, #0
 8007ee8:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			 no_phases = 4;
 8007eec:	2304      	movs	r3, #4
 8007eee:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			 tm = sqrt(total_s/(2*a_design));
 8007ef2:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	f7f8 f9c7 	bl	800028c <__adddf3>
 8007efe:	4603      	mov	r3, r0
 8007f00:	460c      	mov	r4, r1
 8007f02:	461a      	mov	r2, r3
 8007f04:	4623      	mov	r3, r4
 8007f06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f0a:	f7f8 fc9f 	bl	800084c <__aeabi_ddiv>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	460c      	mov	r4, r1
 8007f12:	ec44 3b17 	vmov	d7, r3, r4
 8007f16:	eeb0 0a47 	vmov.f32	s0, s14
 8007f1a:	eef0 0a67 	vmov.f32	s1, s15
 8007f1e:	f011 fda5 	bl	8019a6c <sqrt>
 8007f22:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
		 }
		 if (tm < 0.001) {
 8007f26:	a31c      	add	r3, pc, #112	; (adr r3, 8007f98 <scaraInitScurve+0x428>)
 8007f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007f30:	f7f8 fdd4 	bl	8000adc <__aeabi_dcmplt>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d006      	beq.n	8007f48 <scaraInitScurve+0x3d8>
			 j_max = 0;
 8007f3a:	f04f 0300 	mov.w	r3, #0
 8007f3e:	f04f 0400 	mov.w	r4, #0
 8007f42:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
 8007f46:	e009      	b.n	8007f5c <scaraInitScurve+0x3ec>
		 } else {
			 j_max = a_design/tm;
 8007f48:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007f4c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007f50:	f7f8 fc7c 	bl	800084c <__aeabi_ddiv>
 8007f54:	4603      	mov	r3, r0
 8007f56:	460c      	mov	r4, r1
 8007f58:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 }
		 v_lim = a_design*tm;
 8007f5c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007f60:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007f64:	f7f8 fb48 	bl	80005f8 <__aeabi_dmul>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
		 tf    = 4*tm + tc;
 8007f70:	f04f 0200 	mov.w	r2, #0
 8007f74:	4b0e      	ldr	r3, [pc, #56]	; (8007fb0 <scaraInitScurve+0x440>)
 8007f76:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007f7a:	f7f8 fb3d 	bl	80005f8 <__aeabi_dmul>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	460c      	mov	r4, r1
 8007f82:	461a      	mov	r2, r3
 8007f84:	4623      	mov	r3, r4
 8007f86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007f8a:	f7f8 f97f 	bl	800028c <__adddf3>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	460c      	mov	r4, r1
 8007f92:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8007f96:	e039      	b.n	800800c <scaraInitScurve+0x49c>
 8007f98:	d2f1a9fc 	.word	0xd2f1a9fc
 8007f9c:	3f50624d 	.word	0x3f50624d
 8007fa0:	9abcaf48 	.word	0x9abcaf48
 8007fa4:	3e7ad7f2 	.word	0x3e7ad7f2
 8007fa8:	bff00000 	.word	0xbff00000
 8007fac:	3ff00000 	.word	0x3ff00000
 8007fb0:	40100000 	.word	0x40100000
 8007fb4:	00000000 	.word	0x00000000
 8007fb8:	405c2000 	.word	0x405c2000
 8007fbc:	14000000 	.word	0x14000000
 8007fc0:	4000f6f0 	.word	0x4000f6f0
 8007fc4:	6b259425 	.word	0x6b259425
 8007fc8:	40069b91 	.word	0x40069b91
	 } else {
		 j_max = 0;
 8007fcc:	f04f 0300 	mov.w	r3, #0
 8007fd0:	f04f 0400 	mov.w	r4, #0
 8007fd4:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 tc = 0;
 8007fd8:	f04f 0300 	mov.w	r3, #0
 8007fdc:	f04f 0400 	mov.w	r4, #0
 8007fe0:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 no_phases = 4;
 8007fe4:	2304      	movs	r3, #4
 8007fe6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = tf / 4;
 8007fea:	f04f 0200 	mov.w	r2, #0
 8007fee:	4ba0      	ldr	r3, [pc, #640]	; (8008270 <scaraInitScurve+0x700>)
 8007ff0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007ff4:	f7f8 fc2a 	bl	800084c <__aeabi_ddiv>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	460c      	mov	r4, r1
 8007ffc:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 v_lim = 0;
 8008000:	f04f 0300 	mov.w	r3, #0
 8008004:	f04f 0400 	mov.w	r4, #0
 8008008:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	 }

	 no_sample = ceil(tf / T_SAMPLING);
 800800c:	a396      	add	r3, pc, #600	; (adr r3, 8008268 <scaraInitScurve+0x6f8>)
 800800e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008012:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008016:	f7f8 fc19 	bl	800084c <__aeabi_ddiv>
 800801a:	4603      	mov	r3, r0
 800801c:	460c      	mov	r4, r1
 800801e:	ec44 3b17 	vmov	d7, r3, r4
 8008022:	eeb0 0a47 	vmov.f32	s0, s14
 8008026:	eef0 0a67 	vmov.f32	s1, s15
 800802a:	f011 fb85 	bl	8019738 <ceil>
 800802e:	ec54 3b10 	vmov	r3, r4, d0
 8008032:	4618      	mov	r0, r3
 8008034:	4621      	mov	r1, r4
 8008036:	f7f8 fdb7 	bl	8000ba8 <__aeabi_d2uiz>
 800803a:	4603      	mov	r3, r0
 800803c:	667b      	str	r3, [r7, #100]	; 0x64
	 v_1 = 0.5*j_max*tm*tm;
 800803e:	f04f 0200 	mov.w	r2, #0
 8008042:	4b8c      	ldr	r3, [pc, #560]	; (8008274 <scaraInitScurve+0x704>)
 8008044:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008048:	f7f8 fad6 	bl	80005f8 <__aeabi_dmul>
 800804c:	4603      	mov	r3, r0
 800804e:	460c      	mov	r4, r1
 8008050:	4618      	mov	r0, r3
 8008052:	4621      	mov	r1, r4
 8008054:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8008058:	f7f8 face 	bl	80005f8 <__aeabi_dmul>
 800805c:	4603      	mov	r3, r0
 800805e:	460c      	mov	r4, r1
 8008060:	461a      	mov	r2, r3
 8008062:	4623      	mov	r3, r4
 8008064:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008068:	f7f8 fac6 	bl	80005f8 <__aeabi_dmul>
 800806c:	4603      	mov	r3, r0
 800806e:	460c      	mov	r4, r1
 8008070:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 s_1 = j_max*tm*tm*tm/6;
 8008074:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8008078:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800807c:	f7f8 fabc 	bl	80005f8 <__aeabi_dmul>
 8008080:	4603      	mov	r3, r0
 8008082:	460c      	mov	r4, r1
 8008084:	4618      	mov	r0, r3
 8008086:	4621      	mov	r1, r4
 8008088:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800808c:	f7f8 fab4 	bl	80005f8 <__aeabi_dmul>
 8008090:	4603      	mov	r3, r0
 8008092:	460c      	mov	r4, r1
 8008094:	4618      	mov	r0, r3
 8008096:	4621      	mov	r1, r4
 8008098:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800809c:	f7f8 faac 	bl	80005f8 <__aeabi_dmul>
 80080a0:	4603      	mov	r3, r0
 80080a2:	460c      	mov	r4, r1
 80080a4:	4618      	mov	r0, r3
 80080a6:	4621      	mov	r1, r4
 80080a8:	f04f 0200 	mov.w	r2, #0
 80080ac:	4b72      	ldr	r3, [pc, #456]	; (8008278 <scaraInitScurve+0x708>)
 80080ae:	f7f8 fbcd 	bl	800084c <__aeabi_ddiv>
 80080b2:	4603      	mov	r3, r0
 80080b4:	460c      	mov	r4, r1
 80080b6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	 v_2 = j_max*tm*tm;
 80080ba:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80080be:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80080c2:	f7f8 fa99 	bl	80005f8 <__aeabi_dmul>
 80080c6:	4603      	mov	r3, r0
 80080c8:	460c      	mov	r4, r1
 80080ca:	461a      	mov	r2, r3
 80080cc:	4623      	mov	r3, r4
 80080ce:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80080d2:	f7f8 fa91 	bl	80005f8 <__aeabi_dmul>
 80080d6:	4603      	mov	r3, r0
 80080d8:	460c      	mov	r4, r1
 80080da:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	 s_2 = v_2*tm;
 80080de:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80080e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80080e6:	f7f8 fa87 	bl	80005f8 <__aeabi_dmul>
 80080ea:	4603      	mov	r3, r0
 80080ec:	460c      	mov	r4, r1
 80080ee:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	 v_3 = v_2;
 80080f2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80080f6:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	 s_3 = s_2 + v_2*tc;
 80080fa:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80080fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008102:	f7f8 fa79 	bl	80005f8 <__aeabi_dmul>
 8008106:	4603      	mov	r3, r0
 8008108:	460c      	mov	r4, r1
 800810a:	461a      	mov	r2, r3
 800810c:	4623      	mov	r3, r4
 800810e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008112:	f7f8 f8bb 	bl	800028c <__adddf3>
 8008116:	4603      	mov	r3, r0
 8008118:	460c      	mov	r4, r1
 800811a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	 v_4 = v_1;
 800811e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8008122:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	 s_4 = s_3 + s_2 - s_1;
 8008126:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800812a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800812e:	f7f8 f8ad 	bl	800028c <__adddf3>
 8008132:	4603      	mov	r3, r0
 8008134:	460c      	mov	r4, r1
 8008136:	4618      	mov	r0, r3
 8008138:	4621      	mov	r1, r4
 800813a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800813e:	f7f8 f8a3 	bl	8000288 <__aeabi_dsub>
 8008142:	4603      	mov	r3, r0
 8008144:	460c      	mov	r4, r1
 8008146:	e9c7 3408 	strd	r3, r4, [r7, #32]

	 scurve->Tc = tc;
 800814a:	69fa      	ldr	r2, [r7, #28]
 800814c:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8008150:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	 scurve->Tf = tf;
 8008154:	69fa      	ldr	r2, [r7, #28]
 8008156:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800815a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	 scurve->Tm = tm;
 800815e:	69fa      	ldr	r2, [r7, #28]
 8008160:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8008164:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 scurve->a_design = a_design;
 8008168:	69fa      	ldr	r2, [r7, #28]
 800816a:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800816e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 scurve->v_design = v_design;
 8008172:	69fa      	ldr	r2, [r7, #28]
 8008174:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8008178:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 scurve->v_lim = v_lim;
 800817c:	69fa      	ldr	r2, [r7, #28]
 800817e:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8008182:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 scurve->v0 = v0;
 8008186:	69fa      	ldr	r2, [r7, #28]
 8008188:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800818c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 scurve->v1 = v1;
 8008190:	69fa      	ldr	r2, [r7, #28]
 8008192:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8008196:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 scurve->j_max = j_max;
 800819a:	69fa      	ldr	r2, [r7, #28]
 800819c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80081a0:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 scurve->s0   = q0;
 80081a4:	69fa      	ldr	r2, [r7, #28]
 80081a6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80081aa:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 scurve->s1   = q1;
 80081ae:	69fa      	ldr	r2, [r7, #28]
 80081b0:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 80081b4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 scurve->num_of_phase = no_phases;
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80081be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	 scurve->num_of_sampling = no_sample;
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80081c6:	669a      	str	r2, [r3, #104]	; 0x68
	 scurve->total_s = total_s;
 80081c8:	69fa      	ldr	r2, [r7, #28]
 80081ca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80081ce:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	 scurve->dir = dir;
 80081d2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80081d6:	f7f8 fcbf 	bl	8000b58 <__aeabi_d2iz>
 80081da:	4603      	mov	r3, r0
 80081dc:	b25a      	sxtb	r2, r3
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	701a      	strb	r2, [r3, #0]

	 scurve->a_current = 0;
 80081e2:	69fa      	ldr	r2, [r7, #28]
 80081e4:	f04f 0300 	mov.w	r3, #0
 80081e8:	f04f 0400 	mov.w	r4, #0
 80081ec:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	 scurve->v_current = 0;
 80081f0:	69fa      	ldr	r2, [r7, #28]
 80081f2:	f04f 0300 	mov.w	r3, #0
 80081f6:	f04f 0400 	mov.w	r4, #0
 80081fa:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	 scurve->s_current = 0;
 80081fe:	69fa      	ldr	r2, [r7, #28]
 8008200:	f04f 0300 	mov.w	r3, #0
 8008204:	f04f 0400 	mov.w	r4, #0
 8008208:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	 scurve->v_1 = v_1;
 800820c:	69fa      	ldr	r2, [r7, #28]
 800820e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8008212:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	 scurve->v_2 = v_2;
 8008216:	69fa      	ldr	r2, [r7, #28]
 8008218:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800821c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	 scurve->v_3 = v_3;
 8008220:	69fa      	ldr	r2, [r7, #28]
 8008222:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8008226:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	 scurve->v_4 = v_4;
 800822a:	69fa      	ldr	r2, [r7, #28]
 800822c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008230:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	 scurve->s_1 = s_1;
 8008234:	69fa      	ldr	r2, [r7, #28]
 8008236:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800823a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	 scurve->s_2 = s_2;
 800823e:	69fa      	ldr	r2, [r7, #28]
 8008240:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8008244:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	 scurve->s_3 = s_3;
 8008248:	69fa      	ldr	r2, [r7, #28]
 800824a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800824e:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	 scurve->s_4 = s_4;
 8008252:	69fa      	ldr	r2, [r7, #28]
 8008254:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008258:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

	 return SCARA_STATUS_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	37e8      	adds	r7, #232	; 0xe8
 8008262:	46bd      	mov	sp, r7
 8008264:	bdb0      	pop	{r4, r5, r7, pc}
 8008266:	bf00      	nop
 8008268:	40000000 	.word	0x40000000
 800826c:	3f847ae1 	.word	0x3f847ae1
 8008270:	40100000 	.word	0x40100000
 8008274:	3fe00000 	.word	0x3fe00000
 8008278:	40180000 	.word	0x40180000

0800827c <scaraTestFlowDuty>:

SCARA_StatusTypeDef scaraTestFlowDuty(double time, SCARA_PositionTypeDef *pos_Next, SCARA_PositionTypeDef pos_Current)
{
 800827c:	b082      	sub	sp, #8
 800827e:	b5b0      	push	{r4, r5, r7, lr}
 8008280:	b0e6      	sub	sp, #408	; 0x198
 8008282:	af2e      	add	r7, sp, #184	; 0xb8
 8008284:	ed87 0b02 	vstr	d0, [r7, #8]
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 800828e:	e881 000c 	stmia.w	r1, {r2, r3}
	double current_s;
	SCARA_StatusTypeDef status1;
	SCARA_PositionTypeDef positionCompute;
	current_s = time*myDUTY.task.trajectory_3d.lspb.v_design;
 8008292:	4b2e      	ldr	r3, [pc, #184]	; (800834c <scaraTestFlowDuty+0xd0>)
 8008294:	e9d3 3450 	ldrd	r3, r4, [r3, #320]	; 0x140
 8008298:	461a      	mov	r2, r3
 800829a:	4623      	mov	r3, r4
 800829c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082a0:	f7f8 f9aa 	bl	80005f8 <__aeabi_dmul>
 80082a4:	4603      	mov	r3, r0
 80082a6:	460c      	mov	r4, r1
 80082a8:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
	status1 = scaraFlowLine(&(myDUTY.task.path.line), current_s);
 80082ac:	ed97 0b36 	vldr	d0, [r7, #216]	; 0xd8
 80082b0:	4827      	ldr	r0, [pc, #156]	; (8008350 <scaraTestFlowDuty+0xd4>)
 80082b2:	f000 fbd9 	bl	8008a68 <scaraFlowLine>
 80082b6:	4603      	mov	r3, r0
 80082b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	positionCompute.x = myDUTY.task.path.line.x_current;
 80082bc:	4b23      	ldr	r3, [pc, #140]	; (800834c <scaraTestFlowDuty+0xd0>)
 80082be:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 80082c2:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	positionCompute.y = myDUTY.task.path.line.y_current;
 80082c6:	4b21      	ldr	r3, [pc, #132]	; (800834c <scaraTestFlowDuty+0xd0>)
 80082c8:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80082cc:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	positionCompute.z = myDUTY.task.path.line.z_current;
 80082d0:	4b1e      	ldr	r3, [pc, #120]	; (800834c <scaraTestFlowDuty+0xd0>)
 80082d2:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 80082d6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	positionCompute.roll = myDUTY.task.roll_start + myDUTY.task.trajectory_roll.lspb.v_design*time;
 80082da:	4b1c      	ldr	r3, [pc, #112]	; (800834c <scaraTestFlowDuty+0xd0>)
 80082dc:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80082e0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80082e4:	4b19      	ldr	r3, [pc, #100]	; (800834c <scaraTestFlowDuty+0xd0>)
 80082e6:	e9d3 01b0 	ldrd	r0, r1, [r3, #704]	; 0x2c0
 80082ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80082ee:	f7f8 f983 	bl	80005f8 <__aeabi_dmul>
 80082f2:	4602      	mov	r2, r0
 80082f4:	460b      	mov	r3, r1
 80082f6:	4620      	mov	r0, r4
 80082f8:	4629      	mov	r1, r5
 80082fa:	f7f7 ffc7 	bl	800028c <__adddf3>
 80082fe:	4603      	mov	r3, r0
 8008300:	460c      	mov	r4, r1
 8008302:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 8008306:	f107 0410 	add.w	r4, r7, #16
 800830a:	4668      	mov	r0, sp
 800830c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8008310:	22b8      	movs	r2, #184	; 0xb8
 8008312:	4619      	mov	r1, r3
 8008314:	f00d fca2 	bl	8015c5c <memcpy>
 8008318:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800831c:	cb0c      	ldmia	r3, {r2, r3}
 800831e:	4620      	mov	r0, r4
 8008320:	f7fb fbca 	bl	8003ab8 <kinematicInverse>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d101      	bne.n	800832e <scaraTestFlowDuty+0xb2>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800832a:	2307      	movs	r3, #7
 800832c:	e007      	b.n	800833e <scaraTestFlowDuty+0xc2>
	} else {
		memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800832e:	f107 0310 	add.w	r3, r7, #16
 8008332:	22c0      	movs	r2, #192	; 0xc0
 8008334:	4619      	mov	r1, r3
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f00d fc90 	bl	8015c5c <memcpy>
	}
	return SCARA_STATUS_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	37e0      	adds	r7, #224	; 0xe0
 8008342:	46bd      	mov	sp, r7
 8008344:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8008348:	b002      	add	sp, #8
 800834a:	4770      	bx	lr
 800834c:	20004f28 	.word	0x20004f28
 8008350:	20004f38 	.word	0x20004f38

08008354 <scaraFlowDuty>:

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 8008354:	b082      	sub	sp, #8
 8008356:	b5b0      	push	{r4, r5, r7, lr}
 8008358:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800835c:	af2e      	add	r7, sp, #184	; 0xb8
 800835e:	f107 0108 	add.w	r1, r7, #8
 8008362:	ed81 0b00 	vstr	d0, [r1]
 8008366:	1d39      	adds	r1, r7, #4
 8008368:	6008      	str	r0, [r1, #0]
 800836a:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 800836e:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 8008372:	f107 0210 	add.w	r2, r7, #16
 8008376:	f107 0308 	add.w	r3, r7, #8
 800837a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800837e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 8008382:	4ba9      	ldr	r3, [pc, #676]	; (8008628 <scaraFlowDuty+0x2d4>)
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	f040 815a 	bne.w	8008640 <scaraFlowDuty+0x2ec>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 800838c:	4ba6      	ldr	r3, [pc, #664]	; (8008628 <scaraFlowDuty+0x2d4>)
 800838e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008392:	2b00      	cmp	r3, #0
 8008394:	d12b      	bne.n	80083ee <scaraFlowDuty+0x9a>
//			s = myDUTY.task.trajectory_3d.lspb.s_current;
//			v = myDUTY.task.trajectory_3d.lspb.v_current;
//			angle = myDUTY.task.trajectory_roll.lspb.s_current;
//			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
//			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
			status1 = scaraFlowLSPB1(&(myDUTY.task.trajectory_3d.lspb), time);
 8008396:	f107 0308 	add.w	r3, r7, #8
 800839a:	ed93 0b00 	vldr	d0, [r3]
 800839e:	48a3      	ldr	r0, [pc, #652]	; (800862c <scaraFlowDuty+0x2d8>)
 80083a0:	f000 fc72 	bl	8008c88 <scaraFlowLSPB1>
 80083a4:	4603      	mov	r3, r0
 80083a6:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 80083aa:	4b9f      	ldr	r3, [pc, #636]	; (8008628 <scaraFlowDuty+0x2d4>)
 80083ac:	e9d3 3462 	ldrd	r3, r4, [r3, #392]	; 0x188
 80083b0:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 80083b4:	4b9c      	ldr	r3, [pc, #624]	; (8008628 <scaraFlowDuty+0x2d4>)
 80083b6:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 80083ba:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 80083be:	4b9a      	ldr	r3, [pc, #616]	; (8008628 <scaraFlowDuty+0x2d4>)
 80083c0:	e9d3 34fc 	ldrd	r3, r4, [r3, #1008]	; 0x3f0
 80083c4:	f107 0108 	add.w	r1, r7, #8
 80083c8:	461a      	mov	r2, r3
 80083ca:	4623      	mov	r3, r4
 80083cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083d0:	f7f8 f912 	bl	80005f8 <__aeabi_dmul>
 80083d4:	4603      	mov	r3, r0
 80083d6:	460c      	mov	r4, r1
 80083d8:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 80083dc:	4b92      	ldr	r3, [pc, #584]	; (8008628 <scaraFlowDuty+0x2d4>)
 80083de:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 80083e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			status2 = SCARA_STATUS_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 80083ec:	e063      	b.n	80084b6 <scaraFlowDuty+0x162>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 80083ee:	4b8e      	ldr	r3, [pc, #568]	; (8008628 <scaraFlowDuty+0x2d4>)
 80083f0:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d12d      	bne.n	8008454 <scaraFlowDuty+0x100>
			status1 = scaraFLowScurve(&(myDUTY.task.trajectory_3d.scurve), time);
 80083f8:	f107 0308 	add.w	r3, r7, #8
 80083fc:	ed93 0b00 	vldr	d0, [r3]
 8008400:	488b      	ldr	r0, [pc, #556]	; (8008630 <scaraFlowDuty+0x2dc>)
 8008402:	f000 ff8b 	bl	800931c <scaraFLowScurve>
 8008406:	4603      	mov	r3, r0
 8008408:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve(&(myDUTY.task.trajectory_roll.scurve), time);
 800840c:	f107 0308 	add.w	r3, r7, #8
 8008410:	ed93 0b00 	vldr	d0, [r3]
 8008414:	4887      	ldr	r0, [pc, #540]	; (8008634 <scaraFlowDuty+0x2e0>)
 8008416:	f000 ff81 	bl	800931c <scaraFLowScurve>
 800841a:	4603      	mov	r3, r0
 800841c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8008420:	4b81      	ldr	r3, [pc, #516]	; (8008628 <scaraFlowDuty+0x2d4>)
 8008422:	e9d3 3498 	ldrd	r3, r4, [r3, #608]	; 0x260
 8008426:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			v = myDUTY.task.trajectory_3d.scurve.v_current;
 800842a:	4b7f      	ldr	r3, [pc, #508]	; (8008628 <scaraFlowDuty+0x2d4>)
 800842c:	e9d3 3496 	ldrd	r3, r4, [r3, #600]	; 0x258
 8008430:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			angle = myDUTY.task.trajectory_roll.scurve.s_current;
 8008434:	4b7c      	ldr	r3, [pc, #496]	; (8008628 <scaraFlowDuty+0x2d4>)
 8008436:	e9d3 34f8 	ldrd	r3, r4, [r3, #992]	; 0x3e0
 800843a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			v_angle = myDUTY.task.trajectory_roll.scurve.v_current;
 800843e:	4b7a      	ldr	r3, [pc, #488]	; (8008628 <scaraFlowDuty+0x2d4>)
 8008440:	e9d3 34f6 	ldrd	r3, r4, [r3, #984]	; 0x3d8
 8008444:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
 8008448:	4b77      	ldr	r3, [pc, #476]	; (8008628 <scaraFlowDuty+0x2d4>)
 800844a:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 800844e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8008452:	e030      	b.n	80084b6 <scaraFlowDuty+0x162>
		}else if( DUTY_TRAJECTORY_LINEAR == myDUTY.task.trajectory_3d.trajectory_type){
 8008454:	4b74      	ldr	r3, [pc, #464]	; (8008628 <scaraFlowDuty+0x2d4>)
 8008456:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800845a:	2b02      	cmp	r3, #2
 800845c:	d129      	bne.n	80084b2 <scaraFlowDuty+0x15e>
			s = time*myDUTY.task.trajectory_3d.linear.constant_v;
 800845e:	4b72      	ldr	r3, [pc, #456]	; (8008628 <scaraFlowDuty+0x2d4>)
 8008460:	e9d3 349c 	ldrd	r3, r4, [r3, #624]	; 0x270
 8008464:	f107 0108 	add.w	r1, r7, #8
 8008468:	461a      	mov	r2, r3
 800846a:	4623      	mov	r3, r4
 800846c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008470:	f7f8 f8c2 	bl	80005f8 <__aeabi_dmul>
 8008474:	4603      	mov	r3, r0
 8008476:	460c      	mov	r4, r1
 8008478:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 800847c:	4b6a      	ldr	r3, [pc, #424]	; (8008628 <scaraFlowDuty+0x2d4>)
 800847e:	e9d3 34fc 	ldrd	r3, r4, [r3, #1008]	; 0x3f0
 8008482:	f107 0108 	add.w	r1, r7, #8
 8008486:	461a      	mov	r2, r3
 8008488:	4623      	mov	r3, r4
 800848a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800848e:	f7f8 f8b3 	bl	80005f8 <__aeabi_dmul>
 8008492:	4603      	mov	r3, r0
 8008494:	460c      	mov	r4, r1
 8008496:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 800849a:	4b63      	ldr	r3, [pc, #396]	; (8008628 <scaraFlowDuty+0x2d4>)
 800849c:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 80084a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			status1 = SCARA_STATUS_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 80084aa:	2300      	movs	r3, #0
 80084ac:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 80084b0:	e001      	b.n	80084b6 <scaraFlowDuty+0x162>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 80084b2:	2305      	movs	r3, #5
 80084b4:	e2cd      	b.n	8008a52 <scaraFlowDuty+0x6fe>
		}

		if ( SCARA_STATUS_OK != status1) {
 80084b6:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d002      	beq.n	80084c4 <scaraFlowDuty+0x170>
			return status1;
 80084be:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 80084c2:	e2c6      	b.n	8008a52 <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status2) {
 80084c4:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <scaraFlowDuty+0x17e>
			return status2;
 80084cc:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 80084d0:	e2bf      	b.n	8008a52 <scaraFlowDuty+0x6fe>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 80084d2:	4b55      	ldr	r3, [pc, #340]	; (8008628 <scaraFlowDuty+0x2d4>)
 80084d4:	7a1b      	ldrb	r3, [r3, #8]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d117      	bne.n	800850a <scaraFlowDuty+0x1b6>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 80084da:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 80084de:	4856      	ldr	r0, [pc, #344]	; (8008638 <scaraFlowDuty+0x2e4>)
 80084e0:	f000 fac2 	bl	8008a68 <scaraFlowLine>
 80084e4:	4603      	mov	r3, r0
 80084e6:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.line.x_current;
 80084ea:	4b4f      	ldr	r3, [pc, #316]	; (8008628 <scaraFlowDuty+0x2d4>)
 80084ec:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 80084f0:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			y = myDUTY.task.path.line.y_current;
 80084f4:	4b4c      	ldr	r3, [pc, #304]	; (8008628 <scaraFlowDuty+0x2d4>)
 80084f6:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80084fa:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			z = myDUTY.task.path.line.z_current;
 80084fe:	4b4a      	ldr	r3, [pc, #296]	; (8008628 <scaraFlowDuty+0x2d4>)
 8008500:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8008504:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8008508:	e01d      	b.n	8008546 <scaraFlowDuty+0x1f2>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 800850a:	4b47      	ldr	r3, [pc, #284]	; (8008628 <scaraFlowDuty+0x2d4>)
 800850c:	7a1b      	ldrb	r3, [r3, #8]
 800850e:	2b01      	cmp	r3, #1
 8008510:	d117      	bne.n	8008542 <scaraFlowDuty+0x1ee>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8008512:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 8008516:	4849      	ldr	r0, [pc, #292]	; (800863c <scaraFlowDuty+0x2e8>)
 8008518:	f000 fb2e 	bl	8008b78 <scaraFlowCircle>
 800851c:	4603      	mov	r3, r0
 800851e:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.circle.x_current;
 8008522:	4b41      	ldr	r3, [pc, #260]	; (8008628 <scaraFlowDuty+0x2d4>)
 8008524:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 8008528:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			y = myDUTY.task.path.circle.y_current;
 800852c:	4b3e      	ldr	r3, [pc, #248]	; (8008628 <scaraFlowDuty+0x2d4>)
 800852e:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 8008532:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			z = myDUTY.task.path.circle.z_current;
 8008536:	4b3c      	ldr	r3, [pc, #240]	; (8008628 <scaraFlowDuty+0x2d4>)
 8008538:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
 800853c:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8008540:	e001      	b.n	8008546 <scaraFlowDuty+0x1f2>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 8008542:	2303      	movs	r3, #3
 8008544:	e285      	b.n	8008a52 <scaraFlowDuty+0x6fe>
		}

		positionCompute.x 		= x;
 8008546:	f107 0210 	add.w	r2, r7, #16
 800854a:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800854e:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		positionCompute.y		= y;
 8008552:	f107 0210 	add.w	r2, r7, #16
 8008556:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800855a:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		positionCompute.z 		= z;
 800855e:	f107 0210 	add.w	r2, r7, #16
 8008562:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8008566:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 800856a:	4b2f      	ldr	r3, [pc, #188]	; (8008628 <scaraFlowDuty+0x2d4>)
 800856c:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8008570:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008574:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8008578:	4618      	mov	r0, r3
 800857a:	f7f7 ffd3 	bl	8000524 <__aeabi_i2d>
 800857e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8008582:	f7f8 f839 	bl	80005f8 <__aeabi_dmul>
 8008586:	4602      	mov	r2, r0
 8008588:	460b      	mov	r3, r1
 800858a:	4620      	mov	r0, r4
 800858c:	4629      	mov	r1, r5
 800858e:	f7f7 fe7d 	bl	800028c <__adddf3>
 8008592:	4603      	mov	r3, r0
 8008594:	460c      	mov	r4, r1
 8008596:	f107 0210 	add.w	r2, r7, #16
 800859a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

		positionCompute.q		= s;
 800859e:	f107 0210 	add.w	r2, r7, #16
 80085a2:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80085a6:	e9c2 3400 	strd	r3, r4, [r2]
		positionCompute.q_roll  = angle;
 80085aa:	f107 0210 	add.w	r2, r7, #16
 80085ae:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 80085b2:	e9c2 3402 	strd	r3, r4, [r2, #8]

		positionCompute.v_3d    = v;
 80085b6:	f107 0210 	add.w	r2, r7, #16
 80085ba:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 80085be:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 80085c2:	f107 0210 	add.w	r2, r7, #16
 80085c6:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80085ca:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 80085ce:	4b16      	ldr	r3, [pc, #88]	; (8008628 <scaraFlowDuty+0x2d4>)
 80085d0:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80085d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085d8:	f107 0210 	add.w	r2, r7, #16
 80085dc:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 80085e0:	f107 0210 	add.w	r2, r7, #16
 80085e4:	f107 0308 	add.w	r3, r7, #8
 80085e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085ec:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 80085f0:	f107 0410 	add.w	r4, r7, #16
 80085f4:	4668      	mov	r0, sp
 80085f6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80085fa:	22b8      	movs	r2, #184	; 0xb8
 80085fc:	4619      	mov	r1, r3
 80085fe:	f00d fb2d 	bl	8015c5c <memcpy>
 8008602:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8008606:	cb0c      	ldmia	r3, {r2, r3}
 8008608:	4620      	mov	r0, r4
 800860a:	f7fb fa55 	bl	8003ab8 <kinematicInverse>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d101      	bne.n	8008618 <scaraFlowDuty+0x2c4>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008614:	2307      	movs	r3, #7
 8008616:	e21c      	b.n	8008a52 <scaraFlowDuty+0x6fe>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8008618:	f107 0110 	add.w	r1, r7, #16
 800861c:	1d3b      	adds	r3, r7, #4
 800861e:	22c0      	movs	r2, #192	; 0xc0
 8008620:	6818      	ldr	r0, [r3, #0]
 8008622:	f00d fb1b 	bl	8015c5c <memcpy>
 8008626:	e213      	b.n	8008a50 <scaraFlowDuty+0x6fc>
 8008628:	20004f28 	.word	0x20004f28
 800862c:	20005040 	.word	0x20005040
 8008630:	200050c0 	.word	0x200050c0
 8008634:	20005240 	.word	0x20005240
 8008638:	20004f38 	.word	0x20004f38
 800863c:	20004fa8 	.word	0x20004fa8
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8008640:	4b8b      	ldr	r3, [pc, #556]	; (8008870 <scaraFlowDuty+0x51c>)
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	2b01      	cmp	r3, #1
 8008646:	f040 8201 	bne.w	8008a4c <scaraFlowDuty+0x6f8>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 800864a:	4b89      	ldr	r3, [pc, #548]	; (8008870 <scaraFlowDuty+0x51c>)
 800864c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008650:	2b00      	cmp	r3, #0
 8008652:	d174      	bne.n	800873e <scaraFlowDuty+0x3ea>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 8008654:	f107 0308 	add.w	r3, r7, #8
 8008658:	ed93 0b00 	vldr	d0, [r3]
 800865c:	4885      	ldr	r0, [pc, #532]	; (8008874 <scaraFlowDuty+0x520>)
 800865e:	f000 fcb1 	bl	8008fc4 <scaraFlowLSPB>
 8008662:	4603      	mov	r3, r0
 8008664:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 8008668:	f107 0308 	add.w	r3, r7, #8
 800866c:	ed93 0b00 	vldr	d0, [r3]
 8008670:	4881      	ldr	r0, [pc, #516]	; (8008878 <scaraFlowDuty+0x524>)
 8008672:	f000 fca7 	bl	8008fc4 <scaraFlowLSPB>
 8008676:	4603      	mov	r3, r0
 8008678:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 800867c:	f107 0308 	add.w	r3, r7, #8
 8008680:	ed93 0b00 	vldr	d0, [r3]
 8008684:	487d      	ldr	r0, [pc, #500]	; (800887c <scaraFlowDuty+0x528>)
 8008686:	f000 fc9d 	bl	8008fc4 <scaraFlowLSPB>
 800868a:	4603      	mov	r3, r0
 800868c:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 8008690:	f107 0308 	add.w	r3, r7, #8
 8008694:	ed93 0b00 	vldr	d0, [r3]
 8008698:	4879      	ldr	r0, [pc, #484]	; (8008880 <scaraFlowDuty+0x52c>)
 800869a:	f000 fc93 	bl	8008fc4 <scaraFlowLSPB>
 800869e:	4603      	mov	r3, r0
 80086a0:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 80086a4:	4b72      	ldr	r3, [pc, #456]	; (8008870 <scaraFlowDuty+0x51c>)
 80086a6:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 80086aa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 80086ae:	4b70      	ldr	r3, [pc, #448]	; (8008870 <scaraFlowDuty+0x51c>)
 80086b0:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 80086b4:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 80086b8:	4b6d      	ldr	r3, [pc, #436]	; (8008870 <scaraFlowDuty+0x51c>)
 80086ba:	f893 3720 	ldrb.w	r3, [r3, #1824]	; 0x720
 80086be:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 80086c2:	4b6b      	ldr	r3, [pc, #428]	; (8008870 <scaraFlowDuty+0x51c>)
 80086c4:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
 80086c8:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 80086cc:	4b68      	ldr	r3, [pc, #416]	; (8008870 <scaraFlowDuty+0x51c>)
 80086ce:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80086d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086d6:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 80086da:	4b65      	ldr	r3, [pc, #404]	; (8008870 <scaraFlowDuty+0x51c>)
 80086dc:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 80086e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086e4:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 80086e8:	4b61      	ldr	r3, [pc, #388]	; (8008870 <scaraFlowDuty+0x51c>)
 80086ea:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 80086ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086f2:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 80086f6:	4b5e      	ldr	r3, [pc, #376]	; (8008870 <scaraFlowDuty+0x51c>)
 80086f8:	f603 1318 	addw	r3, r3, #2328	; 0x918
 80086fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008700:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 8008704:	4b5a      	ldr	r3, [pc, #360]	; (8008870 <scaraFlowDuty+0x51c>)
 8008706:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 800870a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800870e:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 8008712:	4b57      	ldr	r3, [pc, #348]	; (8008870 <scaraFlowDuty+0x51c>)
 8008714:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8008718:	e9d3 3400 	ldrd	r3, r4, [r3]
 800871c:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 8008720:	4b53      	ldr	r3, [pc, #332]	; (8008870 <scaraFlowDuty+0x51c>)
 8008722:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8008726:	e9d3 3400 	ldrd	r3, r4, [r3]
 800872a:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 800872e:	4b50      	ldr	r3, [pc, #320]	; (8008870 <scaraFlowDuty+0x51c>)
 8008730:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8008734:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008738:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 800873c:	e07b      	b.n	8008836 <scaraFlowDuty+0x4e2>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 800873e:	4b4c      	ldr	r3, [pc, #304]	; (8008870 <scaraFlowDuty+0x51c>)
 8008740:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008744:	2b01      	cmp	r3, #1
 8008746:	d174      	bne.n	8008832 <scaraFlowDuty+0x4de>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 8008748:	f107 0308 	add.w	r3, r7, #8
 800874c:	ed93 0b00 	vldr	d0, [r3]
 8008750:	484c      	ldr	r0, [pc, #304]	; (8008884 <scaraFlowDuty+0x530>)
 8008752:	f000 fde3 	bl	800931c <scaraFLowScurve>
 8008756:	4603      	mov	r3, r0
 8008758:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 800875c:	f107 0308 	add.w	r3, r7, #8
 8008760:	ed93 0b00 	vldr	d0, [r3]
 8008764:	4848      	ldr	r0, [pc, #288]	; (8008888 <scaraFlowDuty+0x534>)
 8008766:	f000 fdd9 	bl	800931c <scaraFLowScurve>
 800876a:	4603      	mov	r3, r0
 800876c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 8008770:	f107 0308 	add.w	r3, r7, #8
 8008774:	ed93 0b00 	vldr	d0, [r3]
 8008778:	4844      	ldr	r0, [pc, #272]	; (800888c <scaraFlowDuty+0x538>)
 800877a:	f000 fdcf 	bl	800931c <scaraFLowScurve>
 800877e:	4603      	mov	r3, r0
 8008780:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 8008784:	f107 0308 	add.w	r3, r7, #8
 8008788:	ed93 0b00 	vldr	d0, [r3]
 800878c:	4840      	ldr	r0, [pc, #256]	; (8008890 <scaraFlowDuty+0x53c>)
 800878e:	f000 fdc5 	bl	800931c <scaraFLowScurve>
 8008792:	4603      	mov	r3, r0
 8008794:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8008798:	4b35      	ldr	r3, [pc, #212]	; (8008870 <scaraFlowDuty+0x51c>)
 800879a:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 800879e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 80087a2:	4b33      	ldr	r3, [pc, #204]	; (8008870 <scaraFlowDuty+0x51c>)
 80087a4:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 80087a8:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 80087ac:	4b30      	ldr	r3, [pc, #192]	; (8008870 <scaraFlowDuty+0x51c>)
 80087ae:	f893 37a0 	ldrb.w	r3, [r3, #1952]	; 0x7a0
 80087b2:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 80087b6:	4b2e      	ldr	r3, [pc, #184]	; (8008870 <scaraFlowDuty+0x51c>)
 80087b8:	f893 3920 	ldrb.w	r3, [r3, #2336]	; 0x920
 80087bc:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 80087c0:	4b2b      	ldr	r3, [pc, #172]	; (8008870 <scaraFlowDuty+0x51c>)
 80087c2:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 80087c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80087ca:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 80087ce:	4b28      	ldr	r3, [pc, #160]	; (8008870 <scaraFlowDuty+0x51c>)
 80087d0:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 80087d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80087d8:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 80087dc:	4b24      	ldr	r3, [pc, #144]	; (8008870 <scaraFlowDuty+0x51c>)
 80087de:	f603 0368 	addw	r3, r3, #2152	; 0x868
 80087e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80087e6:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 80087ea:	4b21      	ldr	r3, [pc, #132]	; (8008870 <scaraFlowDuty+0x51c>)
 80087ec:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 80087f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80087f4:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

			v0 = myDUTY.joint.trajectory[0].scurve.v_current;
 80087f8:	4b1d      	ldr	r3, [pc, #116]	; (8008870 <scaraFlowDuty+0x51c>)
 80087fa:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 80087fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008802:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
 8008806:	4b1a      	ldr	r3, [pc, #104]	; (8008870 <scaraFlowDuty+0x51c>)
 8008808:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 800880c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008810:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
 8008814:	4b16      	ldr	r3, [pc, #88]	; (8008870 <scaraFlowDuty+0x51c>)
 8008816:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 800881a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800881e:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v3 = myDUTY.joint.trajectory[3].scurve.v_current;
 8008822:	4b13      	ldr	r3, [pc, #76]	; (8008870 <scaraFlowDuty+0x51c>)
 8008824:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8008828:	e9d3 3400 	ldrd	r3, r4, [r3]
 800882c:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8008830:	e001      	b.n	8008836 <scaraFlowDuty+0x4e2>

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8008832:	2305      	movs	r3, #5
 8008834:	e10d      	b.n	8008a52 <scaraFlowDuty+0x6fe>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8008836:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800883a:	2b00      	cmp	r3, #0
 800883c:	d002      	beq.n	8008844 <scaraFlowDuty+0x4f0>
			return status1;
 800883e:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008842:	e106      	b.n	8008a52 <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status2) {
 8008844:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008848:	2b00      	cmp	r3, #0
 800884a:	d002      	beq.n	8008852 <scaraFlowDuty+0x4fe>
			return status2;
 800884c:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008850:	e0ff      	b.n	8008a52 <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status3) {
 8008852:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8008856:	2b00      	cmp	r3, #0
 8008858:	d002      	beq.n	8008860 <scaraFlowDuty+0x50c>
			return status3;
 800885a:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 800885e:	e0f8      	b.n	8008a52 <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status4) {
 8008860:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 8008864:	2b00      	cmp	r3, #0
 8008866:	d015      	beq.n	8008894 <scaraFlowDuty+0x540>
			return status4;
 8008868:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800886c:	e0f1      	b.n	8008a52 <scaraFlowDuty+0x6fe>
 800886e:	bf00      	nop
 8008870:	20004f28 	.word	0x20004f28
 8008874:	20005348 	.word	0x20005348
 8008878:	200054c8 	.word	0x200054c8
 800887c:	20005648 	.word	0x20005648
 8008880:	200057c8 	.word	0x200057c8
 8008884:	200053c8 	.word	0x200053c8
 8008888:	20005548 	.word	0x20005548
 800888c:	200056c8 	.word	0x200056c8
 8008890:	20005848 	.word	0x20005848
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 8008894:	4b73      	ldr	r3, [pc, #460]	; (8008a64 <scaraFlowDuty+0x710>)
 8008896:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 800889a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800889e:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7f7 fe3e 	bl	8000524 <__aeabi_i2d>
 80088a8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80088ac:	f7f7 fea4 	bl	80005f8 <__aeabi_dmul>
 80088b0:	4602      	mov	r2, r0
 80088b2:	460b      	mov	r3, r1
 80088b4:	4620      	mov	r0, r4
 80088b6:	4629      	mov	r1, r5
 80088b8:	f7f7 fce8 	bl	800028c <__adddf3>
 80088bc:	4603      	mov	r3, r0
 80088be:	460c      	mov	r4, r1
 80088c0:	f107 0210 	add.w	r2, r7, #16
 80088c4:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 80088c8:	4b66      	ldr	r3, [pc, #408]	; (8008a64 <scaraFlowDuty+0x710>)
 80088ca:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 80088ce:	e9d3 4500 	ldrd	r4, r5, [r3]
 80088d2:	f997 30d6 	ldrsb.w	r3, [r7, #214]	; 0xd6
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7f7 fe24 	bl	8000524 <__aeabi_i2d>
 80088dc:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80088e0:	f7f7 fe8a 	bl	80005f8 <__aeabi_dmul>
 80088e4:	4602      	mov	r2, r0
 80088e6:	460b      	mov	r3, r1
 80088e8:	4620      	mov	r0, r4
 80088ea:	4629      	mov	r1, r5
 80088ec:	f7f7 fcce 	bl	800028c <__adddf3>
 80088f0:	4603      	mov	r3, r0
 80088f2:	460c      	mov	r4, r1
 80088f4:	f107 0210 	add.w	r2, r7, #16
 80088f8:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 80088fc:	4b59      	ldr	r3, [pc, #356]	; (8008a64 <scaraFlowDuty+0x710>)
 80088fe:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8008902:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008906:	f997 30d5 	ldrsb.w	r3, [r7, #213]	; 0xd5
 800890a:	4618      	mov	r0, r3
 800890c:	f7f7 fe0a 	bl	8000524 <__aeabi_i2d>
 8008910:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8008914:	f7f7 fe70 	bl	80005f8 <__aeabi_dmul>
 8008918:	4602      	mov	r2, r0
 800891a:	460b      	mov	r3, r1
 800891c:	4620      	mov	r0, r4
 800891e:	4629      	mov	r1, r5
 8008920:	f7f7 fcb4 	bl	800028c <__adddf3>
 8008924:	4603      	mov	r3, r0
 8008926:	460c      	mov	r4, r1
 8008928:	f107 0210 	add.w	r2, r7, #16
 800892c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 8008930:	4b4c      	ldr	r3, [pc, #304]	; (8008a64 <scaraFlowDuty+0x710>)
 8008932:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8008936:	e9d3 4500 	ldrd	r4, r5, [r3]
 800893a:	f997 30d4 	ldrsb.w	r3, [r7, #212]	; 0xd4
 800893e:	4618      	mov	r0, r3
 8008940:	f7f7 fdf0 	bl	8000524 <__aeabi_i2d>
 8008944:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8008948:	f7f7 fe56 	bl	80005f8 <__aeabi_dmul>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	4620      	mov	r0, r4
 8008952:	4629      	mov	r1, r5
 8008954:	f7f7 fc9a 	bl	800028c <__adddf3>
 8008958:	4603      	mov	r3, r0
 800895a:	460c      	mov	r4, r1
 800895c:	f107 0210 	add.w	r2, r7, #16
 8008960:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 8008964:	f107 0210 	add.w	r2, r7, #16
 8008968:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800896c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 8008970:	f107 0210 	add.w	r2, r7, #16
 8008974:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8008978:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 800897c:	f107 0210 	add.w	r2, r7, #16
 8008980:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8008984:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 8008988:	f107 0210 	add.w	r2, r7, #16
 800898c:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8008990:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 8008994:	f107 0210 	add.w	r2, r7, #16
 8008998:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800899c:	e9c2 3404 	strd	r3, r4, [r2, #16]
		positionCompute.q_theta2 = s1;
 80089a0:	f107 0210 	add.w	r2, r7, #16
 80089a4:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 80089a8:	e9c2 3406 	strd	r3, r4, [r2, #24]
		positionCompute.q_d3	 = s2;
 80089ac:	f107 0210 	add.w	r2, r7, #16
 80089b0:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80089b4:	e9c2 3408 	strd	r3, r4, [r2, #32]
		positionCompute.q_theta4 = s3;
 80089b8:	f107 0210 	add.w	r2, r7, #16
 80089bc:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 80089c0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 80089c4:	4b27      	ldr	r3, [pc, #156]	; (8008a64 <scaraFlowDuty+0x710>)
 80089c6:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80089ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80089ce:	f107 0210 	add.w	r2, r7, #16
 80089d2:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 80089d6:	f107 0210 	add.w	r2, r7, #16
 80089da:	f107 0308 	add.w	r3, r7, #8
 80089de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80089e2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 80089e6:	f107 0310 	add.w	r3, r7, #16
 80089ea:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80089ee:	f107 0310 	add.w	r3, r7, #16
 80089f2:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 80089f6:	f107 0310 	add.w	r3, r7, #16
 80089fa:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 80089fe:	f107 0310 	add.w	r3, r7, #16
 8008a02:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 8008a06:	eeb0 3a44 	vmov.f32	s6, s8
 8008a0a:	eef0 3a64 	vmov.f32	s7, s9
 8008a0e:	eeb0 2a45 	vmov.f32	s4, s10
 8008a12:	eef0 2a65 	vmov.f32	s5, s11
 8008a16:	eeb0 1a46 	vmov.f32	s2, s12
 8008a1a:	eef0 1a66 	vmov.f32	s3, s13
 8008a1e:	eeb0 0a47 	vmov.f32	s0, s14
 8008a22:	eef0 0a67 	vmov.f32	s1, s15
 8008a26:	f001 fb5f 	bl	800a0e8 <scaraCheckWorkSpace4>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d001      	beq.n	8008a34 <scaraFlowDuty+0x6e0>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008a30:	2307      	movs	r3, #7
 8008a32:	e00e      	b.n	8008a52 <scaraFlowDuty+0x6fe>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8008a34:	f107 0110 	add.w	r1, r7, #16
 8008a38:	1d3b      	adds	r3, r7, #4
 8008a3a:	22c0      	movs	r2, #192	; 0xc0
 8008a3c:	6818      	ldr	r0, [r3, #0]
 8008a3e:	f00d f90d 	bl	8015c5c <memcpy>
		}
		kinematicForward(pos_Next);
 8008a42:	1d3b      	adds	r3, r7, #4
 8008a44:	6818      	ldr	r0, [r3, #0]
 8008a46:	f7fa fefb 	bl	8003840 <kinematicForward>
 8008a4a:	e001      	b.n	8008a50 <scaraFlowDuty+0x6fc>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	e000      	b.n	8008a52 <scaraFlowDuty+0x6fe>
	}

	return SCARA_STATUS_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8008a5e:	b002      	add	sp, #8
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	20004f28 	.word	0x20004f28

08008a68 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 8008a68:	b5b0      	push	{r4, r5, r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8008a7a:	a33d      	add	r3, pc, #244	; (adr r3, 8008b70 <scaraFlowLine+0x108>)
 8008a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a80:	f7f8 f84a 	bl	8000b18 <__aeabi_dcmpgt>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d05a      	beq.n	8008b40 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008a96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a9a:	f7f7 fdad 	bl	80005f8 <__aeabi_dmul>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	4610      	mov	r0, r2
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008aac:	f7f7 fece 	bl	800084c <__aeabi_ddiv>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	f7f7 fbe8 	bl	800028c <__adddf3>
 8008abc:	4603      	mov	r3, r0
 8008abe:	460c      	mov	r4, r1
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ad6:	f7f7 fd8f 	bl	80005f8 <__aeabi_dmul>
 8008ada:	4602      	mov	r2, r0
 8008adc:	460b      	mov	r3, r1
 8008ade:	4610      	mov	r0, r2
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008ae8:	f7f7 feb0 	bl	800084c <__aeabi_ddiv>
 8008aec:	4602      	mov	r2, r0
 8008aee:	460b      	mov	r3, r1
 8008af0:	4620      	mov	r0, r4
 8008af2:	4629      	mov	r1, r5
 8008af4:	f7f7 fbca 	bl	800028c <__adddf3>
 8008af8:	4603      	mov	r3, r0
 8008afa:	460c      	mov	r4, r1
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8008b0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b12:	f7f7 fd71 	bl	80005f8 <__aeabi_dmul>
 8008b16:	4602      	mov	r2, r0
 8008b18:	460b      	mov	r3, r1
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008b24:	f7f7 fe92 	bl	800084c <__aeabi_ddiv>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	4629      	mov	r1, r5
 8008b30:	f7f7 fbac 	bl	800028c <__adddf3>
 8008b34:	4603      	mov	r3, r0
 8008b36:	460c      	mov	r4, r1
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
 8008b3e:	e011      	b.n	8008b64 <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current = line->y1;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current = line->z1;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	47ae147b 	.word	0x47ae147b
 8008b74:	3f847ae1 	.word	0x3f847ae1

08008b78 <scaraFlowCircle>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 8008b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b7c:	b086      	sub	sp, #24
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	60f8      	str	r0, [r7, #12]
 8008b82:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	4623      	mov	r3, r4
 8008b90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b94:	f7f7 fe5a 	bl	800084c <__aeabi_ddiv>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	460c      	mov	r4, r1
 8008b9c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f993 3000 	ldrsb.w	r3, [r3]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7f7 fcb3 	bl	8000524 <__aeabi_i2d>
 8008bbe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008bc2:	f7f7 fd19 	bl	80005f8 <__aeabi_dmul>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	4650      	mov	r0, sl
 8008bcc:	4659      	mov	r1, fp
 8008bce:	f7f7 fb5d 	bl	800028c <__adddf3>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	ec43 2b17 	vmov	d7, r2, r3
 8008bda:	eeb0 0a47 	vmov.f32	s0, s14
 8008bde:	eef0 0a67 	vmov.f32	s1, s15
 8008be2:	f010 fe29 	bl	8019838 <cos>
 8008be6:	ec53 2b10 	vmov	r2, r3, d0
 8008bea:	4640      	mov	r0, r8
 8008bec:	4649      	mov	r1, r9
 8008bee:	f7f7 fd03 	bl	80005f8 <__aeabi_dmul>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	4629      	mov	r1, r5
 8008bfa:	f7f7 fb47 	bl	800028c <__adddf3>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	460c      	mov	r4, r1
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f993 3000 	ldrsb.w	r3, [r3]
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7f7 fc7f 	bl	8000524 <__aeabi_i2d>
 8008c26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008c2a:	f7f7 fce5 	bl	80005f8 <__aeabi_dmul>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	4650      	mov	r0, sl
 8008c34:	4659      	mov	r1, fp
 8008c36:	f7f7 fb29 	bl	800028c <__adddf3>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	ec43 2b17 	vmov	d7, r2, r3
 8008c42:	eeb0 0a47 	vmov.f32	s0, s14
 8008c46:	eef0 0a67 	vmov.f32	s1, s15
 8008c4a:	f010 fe85 	bl	8019958 <sin>
 8008c4e:	ec53 2b10 	vmov	r2, r3, d0
 8008c52:	4640      	mov	r0, r8
 8008c54:	4649      	mov	r1, r9
 8008c56:	f7f7 fccf 	bl	80005f8 <__aeabi_dmul>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	4620      	mov	r0, r4
 8008c60:	4629      	mov	r1, r5
 8008c62:	f7f7 fb13 	bl	800028c <__adddf3>
 8008c66:	4603      	mov	r3, r0
 8008c68:	460c      	mov	r4, r1
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3718      	adds	r7, #24
 8008c82:	46bd      	mov	sp, r7
 8008c84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008c88 <scaraFlowLSPB1>:
SCARA_StatusTypeDef	scaraFlowLSPB1	(Trajectory_LSPB_TypeDef *lspb, double time){
 8008c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c8c:	b08b      	sub	sp, #44	; 0x2c
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	60f8      	str	r0, [r7, #12]
 8008c92:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008c9c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008ca6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8008cb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8008cb4:	f04f 0200 	mov.w	r2, #0
 8008cb8:	f04f 0300 	mov.w	r3, #0
 8008cbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cc0:	f7f7 ff20 	bl	8000b04 <__aeabi_dcmpge>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d05b      	beq.n	8008d82 <scaraFlowLSPB1+0xfa>
 8008cca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008cce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cd2:	f7f7 ff0d 	bl	8000af0 <__aeabi_dcmple>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d052      	beq.n	8008d82 <scaraFlowLSPB1+0xfa>
		lspb->a_current		=	lspb->a_design;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cf8:	f7f7 fc7e 	bl	80005f8 <__aeabi_dmul>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	460b      	mov	r3, r1
 8008d00:	4620      	mov	r0, r4
 8008d02:	4629      	mov	r1, r5
 8008d04:	f7f7 fac2 	bl	800028c <__adddf3>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008d1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d22:	f7f7 fc69 	bl	80005f8 <__aeabi_dmul>
 8008d26:	4602      	mov	r2, r0
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	4629      	mov	r1, r5
 8008d2e:	f7f7 faad 	bl	800028c <__adddf3>
 8008d32:	4603      	mov	r3, r0
 8008d34:	460c      	mov	r4, r1
 8008d36:	4625      	mov	r5, r4
 8008d38:	461c      	mov	r4, r3
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008d40:	f04f 0200 	mov.w	r2, #0
 8008d44:	4b9e      	ldr	r3, [pc, #632]	; (8008fc0 <scaraFlowLSPB1+0x338>)
 8008d46:	f7f7 fc57 	bl	80005f8 <__aeabi_dmul>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	4610      	mov	r0, r2
 8008d50:	4619      	mov	r1, r3
 8008d52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d56:	f7f7 fc4f 	bl	80005f8 <__aeabi_dmul>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	4610      	mov	r0, r2
 8008d60:	4619      	mov	r1, r3
 8008d62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d66:	f7f7 fc47 	bl	80005f8 <__aeabi_dmul>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	4620      	mov	r0, r4
 8008d70:	4629      	mov	r1, r5
 8008d72:	f7f7 fa8b 	bl	800028c <__adddf3>
 8008d76:	4603      	mov	r3, r0
 8008d78:	460c      	mov	r4, r1
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8008d80:	e117      	b.n	8008fb2 <scaraFlowLSPB1+0x32a>
	// Constant velocity
	} else if (ta <= time && time <= td) {
 8008d82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d86:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008d8a:	f7f7 feb1 	bl	8000af0 <__aeabi_dcmple>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d056      	beq.n	8008e42 <scaraFlowLSPB1+0x1ba>
 8008d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d9c:	f7f7 fea8 	bl	8000af0 <__aeabi_dcmple>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d04d      	beq.n	8008e42 <scaraFlowLSPB1+0x1ba>
		lspb->a_current		=	0;
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	f04f 0300 	mov.w	r3, #0
 8008dac:	f04f 0400 	mov.w	r4, #0
 8008db0:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8008dba:	68fa      	ldr	r2, [r7, #12]
 8008dbc:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta*0.5 + lspb->v_design*(time - ta*0.5);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008dcc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008dd0:	f7f7 fc12 	bl	80005f8 <__aeabi_dmul>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	4610      	mov	r0, r2
 8008dda:	4619      	mov	r1, r3
 8008ddc:	f04f 0200 	mov.w	r2, #0
 8008de0:	4b77      	ldr	r3, [pc, #476]	; (8008fc0 <scaraFlowLSPB1+0x338>)
 8008de2:	f7f7 fc09 	bl	80005f8 <__aeabi_dmul>
 8008de6:	4602      	mov	r2, r0
 8008de8:	460b      	mov	r3, r1
 8008dea:	4620      	mov	r0, r4
 8008dec:	4629      	mov	r1, r5
 8008dee:	f7f7 fa4d 	bl	800028c <__adddf3>
 8008df2:	4603      	mov	r3, r0
 8008df4:	460c      	mov	r4, r1
 8008df6:	4698      	mov	r8, r3
 8008df8:	46a1      	mov	r9, r4
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008e00:	f04f 0200 	mov.w	r2, #0
 8008e04:	4b6e      	ldr	r3, [pc, #440]	; (8008fc0 <scaraFlowLSPB1+0x338>)
 8008e06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008e0a:	f7f7 fbf5 	bl	80005f8 <__aeabi_dmul>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	460b      	mov	r3, r1
 8008e12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e16:	f7f7 fa37 	bl	8000288 <__aeabi_dsub>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	4620      	mov	r0, r4
 8008e20:	4629      	mov	r1, r5
 8008e22:	f7f7 fbe9 	bl	80005f8 <__aeabi_dmul>
 8008e26:	4603      	mov	r3, r0
 8008e28:	460c      	mov	r4, r1
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	4623      	mov	r3, r4
 8008e2e:	4640      	mov	r0, r8
 8008e30:	4649      	mov	r1, r9
 8008e32:	f7f7 fa2b 	bl	800028c <__adddf3>
 8008e36:	4603      	mov	r3, r0
 8008e38:	460c      	mov	r4, r1
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8008e40:	e0b7      	b.n	8008fb2 <scaraFlowLSPB1+0x32a>
	// Decelerate
	} else if (td <= time && time <= tf) {
 8008e42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008e4a:	f7f7 fe51 	bl	8000af0 <__aeabi_dcmple>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 809a 	beq.w	8008f8a <scaraFlowLSPB1+0x302>
 8008e56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e5e:	f7f7 fe47 	bl	8000af0 <__aeabi_dcmple>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f000 8090 	beq.w	8008f8a <scaraFlowLSPB1+0x302>
		lspb->a_current		=	-lspb->a_design;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008e70:	4614      	mov	r4, r2
 8008e72:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v_design + lspb->a_design*(td - time);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8008e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e8c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008e90:	f7f7 f9fa 	bl	8000288 <__aeabi_dsub>
 8008e94:	4602      	mov	r2, r0
 8008e96:	460b      	mov	r3, r1
 8008e98:	4640      	mov	r0, r8
 8008e9a:	4649      	mov	r1, r9
 8008e9c:	f7f7 fbac 	bl	80005f8 <__aeabi_dmul>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	f7f7 f9f0 	bl	800028c <__adddf3>
 8008eac:	4603      	mov	r3, r0
 8008eae:	460c      	mov	r4, r1
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8008ec2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ec6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008eca:	f7f7 f9dd 	bl	8000288 <__aeabi_dsub>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4640      	mov	r0, r8
 8008ed4:	4649      	mov	r1, r9
 8008ed6:	f7f7 fb8f 	bl	80005f8 <__aeabi_dmul>
 8008eda:	4602      	mov	r2, r0
 8008edc:	460b      	mov	r3, r1
 8008ede:	4620      	mov	r0, r4
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	f7f7 f9d1 	bl	8000288 <__aeabi_dsub>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	460c      	mov	r4, r1
 8008eea:	461d      	mov	r5, r3
 8008eec:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v0)*(tf - time)*(tf - time)/(2*ta);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8008efa:	461a      	mov	r2, r3
 8008efc:	4623      	mov	r3, r4
 8008efe:	f7f7 f9c3 	bl	8000288 <__aeabi_dsub>
 8008f02:	4603      	mov	r3, r0
 8008f04:	460c      	mov	r4, r1
 8008f06:	4698      	mov	r8, r3
 8008f08:	46a1      	mov	r9, r4
 8008f0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f0e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008f12:	f7f7 f9b9 	bl	8000288 <__aeabi_dsub>
 8008f16:	4603      	mov	r3, r0
 8008f18:	460c      	mov	r4, r1
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	4623      	mov	r3, r4
 8008f1e:	4640      	mov	r0, r8
 8008f20:	4649      	mov	r1, r9
 8008f22:	f7f7 fb69 	bl	80005f8 <__aeabi_dmul>
 8008f26:	4603      	mov	r3, r0
 8008f28:	460c      	mov	r4, r1
 8008f2a:	4698      	mov	r8, r3
 8008f2c:	46a1      	mov	r9, r4
 8008f2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f32:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008f36:	f7f7 f9a7 	bl	8000288 <__aeabi_dsub>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	461a      	mov	r2, r3
 8008f40:	4623      	mov	r3, r4
 8008f42:	4640      	mov	r0, r8
 8008f44:	4649      	mov	r1, r9
 8008f46:	f7f7 fb57 	bl	80005f8 <__aeabi_dmul>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	460c      	mov	r4, r1
 8008f4e:	4698      	mov	r8, r3
 8008f50:	46a1      	mov	r9, r4
 8008f52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008f56:	4602      	mov	r2, r0
 8008f58:	460b      	mov	r3, r1
 8008f5a:	f7f7 f997 	bl	800028c <__adddf3>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	460c      	mov	r4, r1
 8008f62:	461a      	mov	r2, r3
 8008f64:	4623      	mov	r3, r4
 8008f66:	4640      	mov	r0, r8
 8008f68:	4649      	mov	r1, r9
 8008f6a:	f7f7 fc6f 	bl	800084c <__aeabi_ddiv>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	460c      	mov	r4, r1
 8008f72:	461a      	mov	r2, r3
 8008f74:	4623      	mov	r3, r4
 8008f76:	4628      	mov	r0, r5
 8008f78:	4631      	mov	r1, r6
 8008f7a:	f7f7 f985 	bl	8000288 <__aeabi_dsub>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8008f88:	e013      	b.n	8008fb2 <scaraFlowLSPB1+0x32a>
	} else {
		lspb->a_current 	=	0;
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	f04f 0300 	mov.w	r3, #0
 8008f90:	f04f 0400 	mov.w	r4, #0
 8008f94:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	f04f 0300 	mov.w	r3, #0
 8008f9e:	f04f 0400 	mov.w	r4, #0
 8008fa2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 8008fb2:	2300      	movs	r3, #0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	372c      	adds	r7, #44	; 0x2c
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fbe:	bf00      	nop
 8008fc0:	3fe00000 	.word	0x3fe00000

08008fc4 <scaraFlowLSPB>:
/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFlowLSPB		(Trajectory_LSPB_TypeDef *lspb, double time) {
 8008fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008fc8:	b08b      	sub	sp, #44	; 0x2c
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	60f8      	str	r0, [r7, #12]
 8008fce:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008fd8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008fe2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8008fec:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8008ff0:	f04f 0200 	mov.w	r2, #0
 8008ff4:	f04f 0300 	mov.w	r3, #0
 8008ff8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ffc:	f7f7 fd82 	bl	8000b04 <__aeabi_dcmpge>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d05b      	beq.n	80090be <scaraFlowLSPB+0xfa>
 8009006:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800900a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800900e:	f7f7 fd6f 	bl	8000af0 <__aeabi_dcmple>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d052      	beq.n	80090be <scaraFlowLSPB+0xfa>
		lspb->a_current		=	lspb->a_design;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8009030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009034:	f7f7 fae0 	bl	80005f8 <__aeabi_dmul>
 8009038:	4602      	mov	r2, r0
 800903a:	460b      	mov	r3, r1
 800903c:	4620      	mov	r0, r4
 800903e:	4629      	mov	r1, r5
 8009040:	f7f7 f924 	bl	800028c <__adddf3>
 8009044:	4603      	mov	r3, r0
 8009046:	460c      	mov	r4, r1
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800905a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800905e:	f7f7 facb 	bl	80005f8 <__aeabi_dmul>
 8009062:	4602      	mov	r2, r0
 8009064:	460b      	mov	r3, r1
 8009066:	4620      	mov	r0, r4
 8009068:	4629      	mov	r1, r5
 800906a:	f7f7 f90f 	bl	800028c <__adddf3>
 800906e:	4603      	mov	r3, r0
 8009070:	460c      	mov	r4, r1
 8009072:	4625      	mov	r5, r4
 8009074:	461c      	mov	r4, r3
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800907c:	f04f 0200 	mov.w	r2, #0
 8009080:	4ba5      	ldr	r3, [pc, #660]	; (8009318 <scaraFlowLSPB+0x354>)
 8009082:	f7f7 fab9 	bl	80005f8 <__aeabi_dmul>
 8009086:	4602      	mov	r2, r0
 8009088:	460b      	mov	r3, r1
 800908a:	4610      	mov	r0, r2
 800908c:	4619      	mov	r1, r3
 800908e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009092:	f7f7 fab1 	bl	80005f8 <__aeabi_dmul>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	4610      	mov	r0, r2
 800909c:	4619      	mov	r1, r3
 800909e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090a2:	f7f7 faa9 	bl	80005f8 <__aeabi_dmul>
 80090a6:	4602      	mov	r2, r0
 80090a8:	460b      	mov	r3, r1
 80090aa:	4620      	mov	r0, r4
 80090ac:	4629      	mov	r1, r5
 80090ae:	f7f7 f8ed 	bl	800028c <__adddf3>
 80090b2:	4603      	mov	r3, r0
 80090b4:	460c      	mov	r4, r1
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 80090bc:	e125      	b.n	800930a <scaraFlowLSPB+0x346>
	// Constant velocity
	} else if (ta <= time && time <= (tf - td)) {
 80090be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80090c6:	f7f7 fd13 	bl	8000af0 <__aeabi_dcmple>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d05e      	beq.n	800918e <scaraFlowLSPB+0x1ca>
 80090d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80090d8:	f7f7 f8d6 	bl	8000288 <__aeabi_dsub>
 80090dc:	4602      	mov	r2, r0
 80090de:	460b      	mov	r3, r1
 80090e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090e4:	f7f7 fd04 	bl	8000af0 <__aeabi_dcmple>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d04f      	beq.n	800918e <scaraFlowLSPB+0x1ca>
		lspb->a_current		=	0;
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	f04f 0300 	mov.w	r3, #0
 80090f4:	f04f 0400 	mov.w	r4, #0
 80090f8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta/2 + lspb->v_lim*(time - ta/2);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8009114:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009118:	f7f7 fa6e 	bl	80005f8 <__aeabi_dmul>
 800911c:	4602      	mov	r2, r0
 800911e:	460b      	mov	r3, r1
 8009120:	4610      	mov	r0, r2
 8009122:	4619      	mov	r1, r3
 8009124:	f04f 0200 	mov.w	r2, #0
 8009128:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800912c:	f7f7 fb8e 	bl	800084c <__aeabi_ddiv>
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	4620      	mov	r0, r4
 8009136:	4629      	mov	r1, r5
 8009138:	f7f7 f8a8 	bl	800028c <__adddf3>
 800913c:	4603      	mov	r3, r0
 800913e:	460c      	mov	r4, r1
 8009140:	4698      	mov	r8, r3
 8009142:	46a1      	mov	r9, r4
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800914a:	f04f 0200 	mov.w	r2, #0
 800914e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009152:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009156:	f7f7 fb79 	bl	800084c <__aeabi_ddiv>
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009162:	f7f7 f891 	bl	8000288 <__aeabi_dsub>
 8009166:	4602      	mov	r2, r0
 8009168:	460b      	mov	r3, r1
 800916a:	4620      	mov	r0, r4
 800916c:	4629      	mov	r1, r5
 800916e:	f7f7 fa43 	bl	80005f8 <__aeabi_dmul>
 8009172:	4603      	mov	r3, r0
 8009174:	460c      	mov	r4, r1
 8009176:	461a      	mov	r2, r3
 8009178:	4623      	mov	r3, r4
 800917a:	4640      	mov	r0, r8
 800917c:	4649      	mov	r1, r9
 800917e:	f7f7 f885 	bl	800028c <__adddf3>
 8009182:	4603      	mov	r3, r0
 8009184:	460c      	mov	r4, r1
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 800918c:	e0bd      	b.n	800930a <scaraFlowLSPB+0x346>
	// Decelerate
	} else if ((tf - td) <= time && time <= tf) {
 800918e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009192:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009196:	f7f7 f877 	bl	8000288 <__aeabi_dsub>
 800919a:	4602      	mov	r2, r0
 800919c:	460b      	mov	r3, r1
 800919e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091a2:	f7f7 fcaf 	bl	8000b04 <__aeabi_dcmpge>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f000 809a 	beq.w	80092e2 <scaraFlowLSPB+0x31e>
 80091ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80091b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091b6:	f7f7 fc9b 	bl	8000af0 <__aeabi_dcmple>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	f000 8090 	beq.w	80092e2 <scaraFlowLSPB+0x31e>
		lspb->a_current		=	-lspb->a_design;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80091c8:	4614      	mov	r4, r2
 80091ca:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v1 + lspb->a_design*(tf - time);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 80091e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80091e8:	f7f7 f84e 	bl	8000288 <__aeabi_dsub>
 80091ec:	4602      	mov	r2, r0
 80091ee:	460b      	mov	r3, r1
 80091f0:	4640      	mov	r0, r8
 80091f2:	4649      	mov	r1, r9
 80091f4:	f7f7 fa00 	bl	80005f8 <__aeabi_dmul>
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	4620      	mov	r0, r4
 80091fe:	4629      	mov	r1, r5
 8009200:	f7f7 f844 	bl	800028c <__adddf3>
 8009204:	4603      	mov	r3, r0
 8009206:	460c      	mov	r4, r1
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800921a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800921e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009222:	f7f7 f831 	bl	8000288 <__aeabi_dsub>
 8009226:	4602      	mov	r2, r0
 8009228:	460b      	mov	r3, r1
 800922a:	4640      	mov	r0, r8
 800922c:	4649      	mov	r1, r9
 800922e:	f7f7 f9e3 	bl	80005f8 <__aeabi_dmul>
 8009232:	4602      	mov	r2, r0
 8009234:	460b      	mov	r3, r1
 8009236:	4620      	mov	r0, r4
 8009238:	4629      	mov	r1, r5
 800923a:	f7f7 f825 	bl	8000288 <__aeabi_dsub>
 800923e:	4603      	mov	r3, r0
 8009240:	460c      	mov	r4, r1
 8009242:	461d      	mov	r5, r3
 8009244:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v1)*(tf - time)*(tf - time)/(2*td);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8009252:	461a      	mov	r2, r3
 8009254:	4623      	mov	r3, r4
 8009256:	f7f7 f817 	bl	8000288 <__aeabi_dsub>
 800925a:	4603      	mov	r3, r0
 800925c:	460c      	mov	r4, r1
 800925e:	4698      	mov	r8, r3
 8009260:	46a1      	mov	r9, r4
 8009262:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009266:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800926a:	f7f7 f80d 	bl	8000288 <__aeabi_dsub>
 800926e:	4603      	mov	r3, r0
 8009270:	460c      	mov	r4, r1
 8009272:	461a      	mov	r2, r3
 8009274:	4623      	mov	r3, r4
 8009276:	4640      	mov	r0, r8
 8009278:	4649      	mov	r1, r9
 800927a:	f7f7 f9bd 	bl	80005f8 <__aeabi_dmul>
 800927e:	4603      	mov	r3, r0
 8009280:	460c      	mov	r4, r1
 8009282:	4698      	mov	r8, r3
 8009284:	46a1      	mov	r9, r4
 8009286:	e9d7 2300 	ldrd	r2, r3, [r7]
 800928a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800928e:	f7f6 fffb 	bl	8000288 <__aeabi_dsub>
 8009292:	4603      	mov	r3, r0
 8009294:	460c      	mov	r4, r1
 8009296:	461a      	mov	r2, r3
 8009298:	4623      	mov	r3, r4
 800929a:	4640      	mov	r0, r8
 800929c:	4649      	mov	r1, r9
 800929e:	f7f7 f9ab 	bl	80005f8 <__aeabi_dmul>
 80092a2:	4603      	mov	r3, r0
 80092a4:	460c      	mov	r4, r1
 80092a6:	4698      	mov	r8, r3
 80092a8:	46a1      	mov	r9, r4
 80092aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	f7f6 ffeb 	bl	800028c <__adddf3>
 80092b6:	4603      	mov	r3, r0
 80092b8:	460c      	mov	r4, r1
 80092ba:	461a      	mov	r2, r3
 80092bc:	4623      	mov	r3, r4
 80092be:	4640      	mov	r0, r8
 80092c0:	4649      	mov	r1, r9
 80092c2:	f7f7 fac3 	bl	800084c <__aeabi_ddiv>
 80092c6:	4603      	mov	r3, r0
 80092c8:	460c      	mov	r4, r1
 80092ca:	461a      	mov	r2, r3
 80092cc:	4623      	mov	r3, r4
 80092ce:	4628      	mov	r0, r5
 80092d0:	4631      	mov	r1, r6
 80092d2:	f7f6 ffd9 	bl	8000288 <__aeabi_dsub>
 80092d6:	4603      	mov	r3, r0
 80092d8:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 80092e0:	e013      	b.n	800930a <scaraFlowLSPB+0x346>
	} else {
		lspb->a_current 	=	0;
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	f04f 0300 	mov.w	r3, #0
 80092e8:	f04f 0400 	mov.w	r4, #0
 80092ec:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	f04f 0300 	mov.w	r3, #0
 80092f6:	f04f 0400 	mov.w	r4, #0
 80092fa:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	372c      	adds	r7, #44	; 0x2c
 8009310:	46bd      	mov	sp, r7
 8009312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009316:	bf00      	nop
 8009318:	3fe00000 	.word	0x3fe00000

0800931c <scaraFLowScurve>:


/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, double time) {
 800931c:	b5b0      	push	{r4, r5, r7, lr}
 800931e:	b092      	sub	sp, #72	; 0x48
 8009320:	af00      	add	r7, sp, #0
 8009322:	6278      	str	r0, [r7, #36]	; 0x24
 8009324:	ed87 0b06 	vstr	d0, [r7, #24]
	double j_max, tm, tc, t;

	j_max = scurve->j_max;
 8009328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800932e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	tm	  = scurve->Tm;
 8009332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009334:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8009338:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	tc	  = scurve->Tc;
 800933c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8009342:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	 // SCURVE 4 PHASE: tc = 0;
	 if ( 4 == scurve->num_of_phase) {
 8009346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009348:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800934c:	2b04      	cmp	r3, #4
 800934e:	f040 8321 	bne.w	8009994 <scaraFLowScurve+0x678>
		 // Phase 1
		 if ( (0.0f <= time) && ( time < tm)) {
 8009352:	f04f 0200 	mov.w	r2, #0
 8009356:	f04f 0300 	mov.w	r3, #0
 800935a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800935e:	f7f7 fbd1 	bl	8000b04 <__aeabi_dcmpge>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d059      	beq.n	800941c <scaraFLowScurve+0x100>
 8009368:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800936c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009370:	f7f7 fbb4 	bl	8000adc <__aeabi_dcmplt>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d050      	beq.n	800941c <scaraFLowScurve+0x100>
			 t = time;
 800937a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800937e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 8009382:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009386:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800938a:	f7f7 f935 	bl	80005f8 <__aeabi_dmul>
 800938e:	4603      	mov	r3, r0
 8009390:	460c      	mov	r4, r1
 8009392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009394:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 8009398:	f04f 0200 	mov.w	r2, #0
 800939c:	4b93      	ldr	r3, [pc, #588]	; (80095ec <scaraFLowScurve+0x2d0>)
 800939e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80093a2:	f7f7 f929 	bl	80005f8 <__aeabi_dmul>
 80093a6:	4603      	mov	r3, r0
 80093a8:	460c      	mov	r4, r1
 80093aa:	4618      	mov	r0, r3
 80093ac:	4621      	mov	r1, r4
 80093ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093b2:	f7f7 f921 	bl	80005f8 <__aeabi_dmul>
 80093b6:	4603      	mov	r3, r0
 80093b8:	460c      	mov	r4, r1
 80093ba:	4618      	mov	r0, r3
 80093bc:	4621      	mov	r1, r4
 80093be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093c2:	f7f7 f919 	bl	80005f8 <__aeabi_dmul>
 80093c6:	4603      	mov	r3, r0
 80093c8:	460c      	mov	r4, r1
 80093ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093cc:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 80093d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093d4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80093d8:	f7f7 f90e 	bl	80005f8 <__aeabi_dmul>
 80093dc:	4603      	mov	r3, r0
 80093de:	460c      	mov	r4, r1
 80093e0:	4618      	mov	r0, r3
 80093e2:	4621      	mov	r1, r4
 80093e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093e8:	f7f7 f906 	bl	80005f8 <__aeabi_dmul>
 80093ec:	4603      	mov	r3, r0
 80093ee:	460c      	mov	r4, r1
 80093f0:	4618      	mov	r0, r3
 80093f2:	4621      	mov	r1, r4
 80093f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093f8:	f7f7 f8fe 	bl	80005f8 <__aeabi_dmul>
 80093fc:	4603      	mov	r3, r0
 80093fe:	460c      	mov	r4, r1
 8009400:	4618      	mov	r0, r3
 8009402:	4621      	mov	r1, r4
 8009404:	f04f 0200 	mov.w	r2, #0
 8009408:	4b79      	ldr	r3, [pc, #484]	; (80095f0 <scaraFLowScurve+0x2d4>)
 800940a:	f7f7 fa1f 	bl	800084c <__aeabi_ddiv>
 800940e:	4603      	mov	r3, r0
 8009410:	460c      	mov	r4, r1
 8009412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009414:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009418:	f000 be56 	b.w	800a0c8 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 800941c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009420:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009424:	f7f7 fb64 	bl	8000af0 <__aeabi_dcmple>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	f000 80e2 	beq.w	80095f4 <scaraFLowScurve+0x2d8>
 8009430:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	f7f6 ff28 	bl	800028c <__adddf3>
 800943c:	4603      	mov	r3, r0
 800943e:	460c      	mov	r4, r1
 8009440:	461a      	mov	r2, r3
 8009442:	4623      	mov	r3, r4
 8009444:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009448:	f7f7 fb48 	bl	8000adc <__aeabi_dcmplt>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	f000 80d0 	beq.w	80095f4 <scaraFLowScurve+0x2d8>
			 t = time - tm;
 8009454:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009458:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800945c:	f7f6 ff14 	bl	8000288 <__aeabi_dsub>
 8009460:	4603      	mov	r3, r0
 8009462:	460c      	mov	r4, r1
 8009464:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8009468:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800946c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009470:	f7f7 f8c2 	bl	80005f8 <__aeabi_dmul>
 8009474:	4603      	mov	r3, r0
 8009476:	460c      	mov	r4, r1
 8009478:	4625      	mov	r5, r4
 800947a:	461c      	mov	r4, r3
 800947c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009480:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009484:	f7f7 f8b8 	bl	80005f8 <__aeabi_dmul>
 8009488:	4602      	mov	r2, r0
 800948a:	460b      	mov	r3, r1
 800948c:	4620      	mov	r0, r4
 800948e:	4629      	mov	r1, r5
 8009490:	f7f6 fefa 	bl	8000288 <__aeabi_dsub>
 8009494:	4603      	mov	r3, r0
 8009496:	460c      	mov	r4, r1
 8009498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800949a:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 800949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a0:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 80094a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80094a8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80094ac:	f7f7 f8a4 	bl	80005f8 <__aeabi_dmul>
 80094b0:	4602      	mov	r2, r0
 80094b2:	460b      	mov	r3, r1
 80094b4:	4610      	mov	r0, r2
 80094b6:	4619      	mov	r1, r3
 80094b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094bc:	f7f7 f89c 	bl	80005f8 <__aeabi_dmul>
 80094c0:	4602      	mov	r2, r0
 80094c2:	460b      	mov	r3, r1
 80094c4:	4620      	mov	r0, r4
 80094c6:	4629      	mov	r1, r5
 80094c8:	f7f6 fee0 	bl	800028c <__adddf3>
 80094cc:	4603      	mov	r3, r0
 80094ce:	460c      	mov	r4, r1
 80094d0:	4625      	mov	r5, r4
 80094d2:	461c      	mov	r4, r3
 80094d4:	f04f 0200 	mov.w	r2, #0
 80094d8:	4b44      	ldr	r3, [pc, #272]	; (80095ec <scaraFLowScurve+0x2d0>)
 80094da:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80094de:	f7f7 f88b 	bl	80005f8 <__aeabi_dmul>
 80094e2:	4602      	mov	r2, r0
 80094e4:	460b      	mov	r3, r1
 80094e6:	4610      	mov	r0, r2
 80094e8:	4619      	mov	r1, r3
 80094ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094ee:	f7f7 f883 	bl	80005f8 <__aeabi_dmul>
 80094f2:	4602      	mov	r2, r0
 80094f4:	460b      	mov	r3, r1
 80094f6:	4610      	mov	r0, r2
 80094f8:	4619      	mov	r1, r3
 80094fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094fe:	f7f7 f87b 	bl	80005f8 <__aeabi_dmul>
 8009502:	4602      	mov	r2, r0
 8009504:	460b      	mov	r3, r1
 8009506:	4620      	mov	r0, r4
 8009508:	4629      	mov	r1, r5
 800950a:	f7f6 febd 	bl	8000288 <__aeabi_dsub>
 800950e:	4603      	mov	r3, r0
 8009510:	460c      	mov	r4, r1
 8009512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009514:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8009518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951a:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 800951e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009520:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8009524:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009528:	f7f7 f866 	bl	80005f8 <__aeabi_dmul>
 800952c:	4602      	mov	r2, r0
 800952e:	460b      	mov	r3, r1
 8009530:	4620      	mov	r0, r4
 8009532:	4629      	mov	r1, r5
 8009534:	f7f6 feaa 	bl	800028c <__adddf3>
 8009538:	4603      	mov	r3, r0
 800953a:	460c      	mov	r4, r1
 800953c:	4625      	mov	r5, r4
 800953e:	461c      	mov	r4, r3
 8009540:	f04f 0200 	mov.w	r2, #0
 8009544:	4b29      	ldr	r3, [pc, #164]	; (80095ec <scaraFLowScurve+0x2d0>)
 8009546:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800954a:	f7f7 f855 	bl	80005f8 <__aeabi_dmul>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	4610      	mov	r0, r2
 8009554:	4619      	mov	r1, r3
 8009556:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800955a:	f7f7 f84d 	bl	80005f8 <__aeabi_dmul>
 800955e:	4602      	mov	r2, r0
 8009560:	460b      	mov	r3, r1
 8009562:	4610      	mov	r0, r2
 8009564:	4619      	mov	r1, r3
 8009566:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800956a:	f7f7 f845 	bl	80005f8 <__aeabi_dmul>
 800956e:	4602      	mov	r2, r0
 8009570:	460b      	mov	r3, r1
 8009572:	4610      	mov	r0, r2
 8009574:	4619      	mov	r1, r3
 8009576:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800957a:	f7f7 f83d 	bl	80005f8 <__aeabi_dmul>
 800957e:	4602      	mov	r2, r0
 8009580:	460b      	mov	r3, r1
 8009582:	4620      	mov	r0, r4
 8009584:	4629      	mov	r1, r5
 8009586:	f7f6 fe81 	bl	800028c <__adddf3>
 800958a:	4603      	mov	r3, r0
 800958c:	460c      	mov	r4, r1
 800958e:	4625      	mov	r5, r4
 8009590:	461c      	mov	r4, r3
 8009592:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009596:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800959a:	f7f7 f82d 	bl	80005f8 <__aeabi_dmul>
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
 80095a2:	4610      	mov	r0, r2
 80095a4:	4619      	mov	r1, r3
 80095a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095aa:	f7f7 f825 	bl	80005f8 <__aeabi_dmul>
 80095ae:	4602      	mov	r2, r0
 80095b0:	460b      	mov	r3, r1
 80095b2:	4610      	mov	r0, r2
 80095b4:	4619      	mov	r1, r3
 80095b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095ba:	f7f7 f81d 	bl	80005f8 <__aeabi_dmul>
 80095be:	4602      	mov	r2, r0
 80095c0:	460b      	mov	r3, r1
 80095c2:	4610      	mov	r0, r2
 80095c4:	4619      	mov	r1, r3
 80095c6:	f04f 0200 	mov.w	r2, #0
 80095ca:	4b09      	ldr	r3, [pc, #36]	; (80095f0 <scaraFLowScurve+0x2d4>)
 80095cc:	f7f7 f93e 	bl	800084c <__aeabi_ddiv>
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	4620      	mov	r0, r4
 80095d6:	4629      	mov	r1, r5
 80095d8:	f7f6 fe56 	bl	8000288 <__aeabi_dsub>
 80095dc:	4603      	mov	r3, r0
 80095de:	460c      	mov	r4, r1
 80095e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095e2:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80095e6:	f000 bd6f 	b.w	800a0c8 <scaraFLowScurve+0xdac>
 80095ea:	bf00      	nop
 80095ec:	3fe00000 	.word	0x3fe00000
 80095f0:	40180000 	.word	0x40180000
		 // Phase 3: does not exist
		 // Phase 4
		 } else if ( ((2*tm) <= time) && ( time < (3*tm)) ) {
 80095f4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	f7f6 fe46 	bl	800028c <__adddf3>
 8009600:	4603      	mov	r3, r0
 8009602:	460c      	mov	r4, r1
 8009604:	461a      	mov	r2, r3
 8009606:	4623      	mov	r3, r4
 8009608:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800960c:	f7f7 fa7a 	bl	8000b04 <__aeabi_dcmpge>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	f000 80a2 	beq.w	800975c <scaraFLowScurve+0x440>
 8009618:	f04f 0200 	mov.w	r2, #0
 800961c:	4b4c      	ldr	r3, [pc, #304]	; (8009750 <scaraFLowScurve+0x434>)
 800961e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009622:	f7f6 ffe9 	bl	80005f8 <__aeabi_dmul>
 8009626:	4603      	mov	r3, r0
 8009628:	460c      	mov	r4, r1
 800962a:	461a      	mov	r2, r3
 800962c:	4623      	mov	r3, r4
 800962e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009632:	f7f7 fa53 	bl	8000adc <__aeabi_dcmplt>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 808f 	beq.w	800975c <scaraFLowScurve+0x440>
			 t = time - 2*tm;
 800963e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009642:	4602      	mov	r2, r0
 8009644:	460b      	mov	r3, r1
 8009646:	f7f6 fe21 	bl	800028c <__adddf3>
 800964a:	4603      	mov	r3, r0
 800964c:	460c      	mov	r4, r1
 800964e:	461a      	mov	r2, r3
 8009650:	4623      	mov	r3, r4
 8009652:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009656:	f7f6 fe17 	bl	8000288 <__aeabi_dsub>
 800965a:	4603      	mov	r3, r0
 800965c:	460c      	mov	r4, r1
 800965e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 8009662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009664:	613b      	str	r3, [r7, #16]
 8009666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009668:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800966c:	617b      	str	r3, [r7, #20]
 800966e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009672:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009676:	f7f6 ffbf 	bl	80005f8 <__aeabi_dmul>
 800967a:	4603      	mov	r3, r0
 800967c:	460c      	mov	r4, r1
 800967e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009680:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2 - 0.5*j_max*t*t;
 8009684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009686:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 800968a:	f04f 0200 	mov.w	r2, #0
 800968e:	4b31      	ldr	r3, [pc, #196]	; (8009754 <scaraFLowScurve+0x438>)
 8009690:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009694:	f7f6 ffb0 	bl	80005f8 <__aeabi_dmul>
 8009698:	4602      	mov	r2, r0
 800969a:	460b      	mov	r3, r1
 800969c:	4610      	mov	r0, r2
 800969e:	4619      	mov	r1, r3
 80096a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80096a4:	f7f6 ffa8 	bl	80005f8 <__aeabi_dmul>
 80096a8:	4602      	mov	r2, r0
 80096aa:	460b      	mov	r3, r1
 80096ac:	4610      	mov	r0, r2
 80096ae:	4619      	mov	r1, r3
 80096b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80096b4:	f7f6 ffa0 	bl	80005f8 <__aeabi_dmul>
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	4620      	mov	r0, r4
 80096be:	4629      	mov	r1, r5
 80096c0:	f7f6 fde2 	bl	8000288 <__aeabi_dsub>
 80096c4:	4603      	mov	r3, r0
 80096c6:	460c      	mov	r4, r1
 80096c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ca:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t - j_max*t*t*t/6;
 80096ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d0:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 80096d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d6:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80096da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80096de:	f7f6 ff8b 	bl	80005f8 <__aeabi_dmul>
 80096e2:	4602      	mov	r2, r0
 80096e4:	460b      	mov	r3, r1
 80096e6:	4620      	mov	r0, r4
 80096e8:	4629      	mov	r1, r5
 80096ea:	f7f6 fdcf 	bl	800028c <__adddf3>
 80096ee:	4603      	mov	r3, r0
 80096f0:	460c      	mov	r4, r1
 80096f2:	4625      	mov	r5, r4
 80096f4:	461c      	mov	r4, r3
 80096f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80096fa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80096fe:	f7f6 ff7b 	bl	80005f8 <__aeabi_dmul>
 8009702:	4602      	mov	r2, r0
 8009704:	460b      	mov	r3, r1
 8009706:	4610      	mov	r0, r2
 8009708:	4619      	mov	r1, r3
 800970a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800970e:	f7f6 ff73 	bl	80005f8 <__aeabi_dmul>
 8009712:	4602      	mov	r2, r0
 8009714:	460b      	mov	r3, r1
 8009716:	4610      	mov	r0, r2
 8009718:	4619      	mov	r1, r3
 800971a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800971e:	f7f6 ff6b 	bl	80005f8 <__aeabi_dmul>
 8009722:	4602      	mov	r2, r0
 8009724:	460b      	mov	r3, r1
 8009726:	4610      	mov	r0, r2
 8009728:	4619      	mov	r1, r3
 800972a:	f04f 0200 	mov.w	r2, #0
 800972e:	4b0a      	ldr	r3, [pc, #40]	; (8009758 <scaraFLowScurve+0x43c>)
 8009730:	f7f7 f88c 	bl	800084c <__aeabi_ddiv>
 8009734:	4602      	mov	r2, r0
 8009736:	460b      	mov	r3, r1
 8009738:	4620      	mov	r0, r4
 800973a:	4629      	mov	r1, r5
 800973c:	f7f6 fda4 	bl	8000288 <__aeabi_dsub>
 8009740:	4603      	mov	r3, r0
 8009742:	460c      	mov	r4, r1
 8009744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009746:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800974a:	f000 bcbd 	b.w	800a0c8 <scaraFLowScurve+0xdac>
 800974e:	bf00      	nop
 8009750:	40080000 	.word	0x40080000
 8009754:	3fe00000 	.word	0x3fe00000
 8009758:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm) <= time) && ( time < (4*tm)) ) {
 800975c:	f04f 0200 	mov.w	r2, #0
 8009760:	4b88      	ldr	r3, [pc, #544]	; (8009984 <scaraFLowScurve+0x668>)
 8009762:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009766:	f7f6 ff47 	bl	80005f8 <__aeabi_dmul>
 800976a:	4603      	mov	r3, r0
 800976c:	460c      	mov	r4, r1
 800976e:	461a      	mov	r2, r3
 8009770:	4623      	mov	r3, r4
 8009772:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009776:	f7f7 f9c5 	bl	8000b04 <__aeabi_dcmpge>
 800977a:	4603      	mov	r3, r0
 800977c:	2b00      	cmp	r3, #0
 800977e:	f000 80ec 	beq.w	800995a <scaraFLowScurve+0x63e>
 8009782:	f04f 0200 	mov.w	r2, #0
 8009786:	4b80      	ldr	r3, [pc, #512]	; (8009988 <scaraFLowScurve+0x66c>)
 8009788:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800978c:	f7f6 ff34 	bl	80005f8 <__aeabi_dmul>
 8009790:	4603      	mov	r3, r0
 8009792:	460c      	mov	r4, r1
 8009794:	461a      	mov	r2, r3
 8009796:	4623      	mov	r3, r4
 8009798:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800979c:	f7f7 f99e 	bl	8000adc <__aeabi_dcmplt>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f000 80d9 	beq.w	800995a <scaraFLowScurve+0x63e>
			 t = time - 3*tm;
 80097a8:	f04f 0200 	mov.w	r2, #0
 80097ac:	4b75      	ldr	r3, [pc, #468]	; (8009984 <scaraFLowScurve+0x668>)
 80097ae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80097b2:	f7f6 ff21 	bl	80005f8 <__aeabi_dmul>
 80097b6:	4603      	mov	r3, r0
 80097b8:	460c      	mov	r4, r1
 80097ba:	461a      	mov	r2, r3
 80097bc:	4623      	mov	r3, r4
 80097be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80097c2:	f7f6 fd61 	bl	8000288 <__aeabi_dsub>
 80097c6:	4603      	mov	r3, r0
 80097c8:	460c      	mov	r4, r1
 80097ca:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 80097ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097d0:	60bb      	str	r3, [r7, #8]
 80097d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80097d8:	60fb      	str	r3, [r7, #12]
 80097da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80097de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80097e2:	f7f6 ff09 	bl	80005f8 <__aeabi_dmul>
 80097e6:	4603      	mov	r3, r0
 80097e8:	460c      	mov	r4, r1
 80097ea:	4625      	mov	r5, r4
 80097ec:	461c      	mov	r4, r3
 80097ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097f2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80097f6:	f7f6 feff 	bl	80005f8 <__aeabi_dmul>
 80097fa:	4602      	mov	r2, r0
 80097fc:	460b      	mov	r3, r1
 80097fe:	4620      	mov	r0, r4
 8009800:	4629      	mov	r1, r5
 8009802:	f7f6 fd43 	bl	800028c <__adddf3>
 8009806:	4603      	mov	r3, r0
 8009808:	460c      	mov	r4, r1
 800980a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800980c:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 8009810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009812:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8009816:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800981a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800981e:	f7f6 feeb 	bl	80005f8 <__aeabi_dmul>
 8009822:	4602      	mov	r2, r0
 8009824:	460b      	mov	r3, r1
 8009826:	4610      	mov	r0, r2
 8009828:	4619      	mov	r1, r3
 800982a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800982e:	f7f6 fee3 	bl	80005f8 <__aeabi_dmul>
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	4620      	mov	r0, r4
 8009838:	4629      	mov	r1, r5
 800983a:	f7f6 fd25 	bl	8000288 <__aeabi_dsub>
 800983e:	4603      	mov	r3, r0
 8009840:	460c      	mov	r4, r1
 8009842:	4625      	mov	r5, r4
 8009844:	461c      	mov	r4, r3
 8009846:	f04f 0200 	mov.w	r2, #0
 800984a:	4b50      	ldr	r3, [pc, #320]	; (800998c <scaraFLowScurve+0x670>)
 800984c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009850:	f7f6 fed2 	bl	80005f8 <__aeabi_dmul>
 8009854:	4602      	mov	r2, r0
 8009856:	460b      	mov	r3, r1
 8009858:	4610      	mov	r0, r2
 800985a:	4619      	mov	r1, r3
 800985c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009860:	f7f6 feca 	bl	80005f8 <__aeabi_dmul>
 8009864:	4602      	mov	r2, r0
 8009866:	460b      	mov	r3, r1
 8009868:	4610      	mov	r0, r2
 800986a:	4619      	mov	r1, r3
 800986c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009870:	f7f6 fec2 	bl	80005f8 <__aeabi_dmul>
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	4620      	mov	r0, r4
 800987a:	4629      	mov	r1, r5
 800987c:	f7f6 fd06 	bl	800028c <__adddf3>
 8009880:	4603      	mov	r3, r0
 8009882:	460c      	mov	r4, r1
 8009884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009886:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 800988a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988c:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8009890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009892:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8009896:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800989a:	f7f6 fead 	bl	80005f8 <__aeabi_dmul>
 800989e:	4602      	mov	r2, r0
 80098a0:	460b      	mov	r3, r1
 80098a2:	4620      	mov	r0, r4
 80098a4:	4629      	mov	r1, r5
 80098a6:	f7f6 fcf1 	bl	800028c <__adddf3>
 80098aa:	4603      	mov	r3, r0
 80098ac:	460c      	mov	r4, r1
 80098ae:	4625      	mov	r5, r4
 80098b0:	461c      	mov	r4, r3
									- 0.5*j_max*tm*t*t
 80098b2:	f04f 0200 	mov.w	r2, #0
 80098b6:	4b35      	ldr	r3, [pc, #212]	; (800998c <scaraFLowScurve+0x670>)
 80098b8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80098bc:	f7f6 fe9c 	bl	80005f8 <__aeabi_dmul>
 80098c0:	4602      	mov	r2, r0
 80098c2:	460b      	mov	r3, r1
 80098c4:	4610      	mov	r0, r2
 80098c6:	4619      	mov	r1, r3
 80098c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80098cc:	f7f6 fe94 	bl	80005f8 <__aeabi_dmul>
 80098d0:	4602      	mov	r2, r0
 80098d2:	460b      	mov	r3, r1
 80098d4:	4610      	mov	r0, r2
 80098d6:	4619      	mov	r1, r3
 80098d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098dc:	f7f6 fe8c 	bl	80005f8 <__aeabi_dmul>
 80098e0:	4602      	mov	r2, r0
 80098e2:	460b      	mov	r3, r1
 80098e4:	4610      	mov	r0, r2
 80098e6:	4619      	mov	r1, r3
 80098e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098ec:	f7f6 fe84 	bl	80005f8 <__aeabi_dmul>
 80098f0:	4602      	mov	r2, r0
 80098f2:	460b      	mov	r3, r1
 80098f4:	4620      	mov	r0, r4
 80098f6:	4629      	mov	r1, r5
 80098f8:	f7f6 fcc6 	bl	8000288 <__aeabi_dsub>
 80098fc:	4603      	mov	r3, r0
 80098fe:	460c      	mov	r4, r1
 8009900:	4625      	mov	r5, r4
 8009902:	461c      	mov	r4, r3
									+ j_max*t*t*t/6;
 8009904:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009908:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800990c:	f7f6 fe74 	bl	80005f8 <__aeabi_dmul>
 8009910:	4602      	mov	r2, r0
 8009912:	460b      	mov	r3, r1
 8009914:	4610      	mov	r0, r2
 8009916:	4619      	mov	r1, r3
 8009918:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800991c:	f7f6 fe6c 	bl	80005f8 <__aeabi_dmul>
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
 8009924:	4610      	mov	r0, r2
 8009926:	4619      	mov	r1, r3
 8009928:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800992c:	f7f6 fe64 	bl	80005f8 <__aeabi_dmul>
 8009930:	4602      	mov	r2, r0
 8009932:	460b      	mov	r3, r1
 8009934:	4610      	mov	r0, r2
 8009936:	4619      	mov	r1, r3
 8009938:	f04f 0200 	mov.w	r2, #0
 800993c:	4b14      	ldr	r3, [pc, #80]	; (8009990 <scaraFLowScurve+0x674>)
 800993e:	f7f6 ff85 	bl	800084c <__aeabi_ddiv>
 8009942:	4602      	mov	r2, r0
 8009944:	460b      	mov	r3, r1
 8009946:	4620      	mov	r0, r4
 8009948:	4629      	mov	r1, r5
 800994a:	f7f6 fc9f 	bl	800028c <__adddf3>
 800994e:	4603      	mov	r3, r0
 8009950:	460c      	mov	r4, r1
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8009952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009954:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009958:	e3b6      	b.n	800a0c8 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 800995a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800995c:	f04f 0300 	mov.w	r3, #0
 8009960:	f04f 0400 	mov.w	r4, #0
 8009964:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8009968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800996a:	f04f 0300 	mov.w	r3, #0
 800996e:	f04f 0400 	mov.w	r4, #0
 8009972:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8009976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009978:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800997c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800997e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009982:	e3a1      	b.n	800a0c8 <scaraFLowScurve+0xdac>
 8009984:	40080000 	.word	0x40080000
 8009988:	40100000 	.word	0x40100000
 800998c:	3fe00000 	.word	0x3fe00000
 8009990:	40180000 	.word	0x40180000
		 }

	 // SCURVE 5 PHASE: tc > 0
	 } else if ( 5 == scurve->num_of_phase) {
 8009994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009996:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800999a:	2b05      	cmp	r3, #5
 800999c:	f040 8392 	bne.w	800a0c4 <scaraFLowScurve+0xda8>
		 // Phase 1
		 if ( (0 <= time) && ( time < tm)) {
 80099a0:	f04f 0200 	mov.w	r2, #0
 80099a4:	f04f 0300 	mov.w	r3, #0
 80099a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80099ac:	f7f7 f8aa 	bl	8000b04 <__aeabi_dcmpge>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d058      	beq.n	8009a68 <scaraFLowScurve+0x74c>
 80099b6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80099ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80099be:	f7f7 f88d 	bl	8000adc <__aeabi_dcmplt>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d04f      	beq.n	8009a68 <scaraFLowScurve+0x74c>
			 t = time;
 80099c8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80099cc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 80099d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099d4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80099d8:	f7f6 fe0e 	bl	80005f8 <__aeabi_dmul>
 80099dc:	4603      	mov	r3, r0
 80099de:	460c      	mov	r4, r1
 80099e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099e2:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 80099e6:	f04f 0200 	mov.w	r2, #0
 80099ea:	4b91      	ldr	r3, [pc, #580]	; (8009c30 <scaraFLowScurve+0x914>)
 80099ec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80099f0:	f7f6 fe02 	bl	80005f8 <__aeabi_dmul>
 80099f4:	4603      	mov	r3, r0
 80099f6:	460c      	mov	r4, r1
 80099f8:	4618      	mov	r0, r3
 80099fa:	4621      	mov	r1, r4
 80099fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a00:	f7f6 fdfa 	bl	80005f8 <__aeabi_dmul>
 8009a04:	4603      	mov	r3, r0
 8009a06:	460c      	mov	r4, r1
 8009a08:	4618      	mov	r0, r3
 8009a0a:	4621      	mov	r1, r4
 8009a0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a10:	f7f6 fdf2 	bl	80005f8 <__aeabi_dmul>
 8009a14:	4603      	mov	r3, r0
 8009a16:	460c      	mov	r4, r1
 8009a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a1a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 8009a1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a22:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009a26:	f7f6 fde7 	bl	80005f8 <__aeabi_dmul>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	460c      	mov	r4, r1
 8009a2e:	4618      	mov	r0, r3
 8009a30:	4621      	mov	r1, r4
 8009a32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a36:	f7f6 fddf 	bl	80005f8 <__aeabi_dmul>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	4618      	mov	r0, r3
 8009a40:	4621      	mov	r1, r4
 8009a42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a46:	f7f6 fdd7 	bl	80005f8 <__aeabi_dmul>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	460c      	mov	r4, r1
 8009a4e:	4618      	mov	r0, r3
 8009a50:	4621      	mov	r1, r4
 8009a52:	f04f 0200 	mov.w	r2, #0
 8009a56:	4b77      	ldr	r3, [pc, #476]	; (8009c34 <scaraFLowScurve+0x918>)
 8009a58:	f7f6 fef8 	bl	800084c <__aeabi_ddiv>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	460c      	mov	r4, r1
 8009a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a62:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009a66:	e32f      	b.n	800a0c8 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8009a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a6c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009a70:	f7f7 f83e 	bl	8000af0 <__aeabi_dcmple>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f000 80de 	beq.w	8009c38 <scaraFLowScurve+0x91c>
 8009a7c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009a80:	4602      	mov	r2, r0
 8009a82:	460b      	mov	r3, r1
 8009a84:	f7f6 fc02 	bl	800028c <__adddf3>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009a90:	f7f7 f824 	bl	8000adc <__aeabi_dcmplt>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	f000 80ce 	beq.w	8009c38 <scaraFLowScurve+0x91c>
			 t = time - tm;
 8009a9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009aa0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009aa4:	f7f6 fbf0 	bl	8000288 <__aeabi_dsub>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	460c      	mov	r4, r1
 8009aac:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8009ab0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009ab4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009ab8:	f7f6 fd9e 	bl	80005f8 <__aeabi_dmul>
 8009abc:	4603      	mov	r3, r0
 8009abe:	460c      	mov	r4, r1
 8009ac0:	4625      	mov	r5, r4
 8009ac2:	461c      	mov	r4, r3
 8009ac4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ac8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009acc:	f7f6 fd94 	bl	80005f8 <__aeabi_dmul>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	f7f6 fbd6 	bl	8000288 <__aeabi_dsub>
 8009adc:	4603      	mov	r3, r0
 8009ade:	460c      	mov	r4, r1
 8009ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ae2:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 8009ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae8:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8009aec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009af0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009af4:	f7f6 fd80 	bl	80005f8 <__aeabi_dmul>
 8009af8:	4602      	mov	r2, r0
 8009afa:	460b      	mov	r3, r1
 8009afc:	4610      	mov	r0, r2
 8009afe:	4619      	mov	r1, r3
 8009b00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b04:	f7f6 fd78 	bl	80005f8 <__aeabi_dmul>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	4629      	mov	r1, r5
 8009b10:	f7f6 fbbc 	bl	800028c <__adddf3>
 8009b14:	4603      	mov	r3, r0
 8009b16:	460c      	mov	r4, r1
 8009b18:	4625      	mov	r5, r4
 8009b1a:	461c      	mov	r4, r3
 8009b1c:	f04f 0200 	mov.w	r2, #0
 8009b20:	4b43      	ldr	r3, [pc, #268]	; (8009c30 <scaraFLowScurve+0x914>)
 8009b22:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009b26:	f7f6 fd67 	bl	80005f8 <__aeabi_dmul>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	4610      	mov	r0, r2
 8009b30:	4619      	mov	r1, r3
 8009b32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b36:	f7f6 fd5f 	bl	80005f8 <__aeabi_dmul>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	4610      	mov	r0, r2
 8009b40:	4619      	mov	r1, r3
 8009b42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b46:	f7f6 fd57 	bl	80005f8 <__aeabi_dmul>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	4620      	mov	r0, r4
 8009b50:	4629      	mov	r1, r5
 8009b52:	f7f6 fb99 	bl	8000288 <__aeabi_dsub>
 8009b56:	4603      	mov	r3, r0
 8009b58:	460c      	mov	r4, r1
 8009b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b5c:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b68:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8009b6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b70:	f7f6 fd42 	bl	80005f8 <__aeabi_dmul>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	4620      	mov	r0, r4
 8009b7a:	4629      	mov	r1, r5
 8009b7c:	f7f6 fb86 	bl	800028c <__adddf3>
 8009b80:	4603      	mov	r3, r0
 8009b82:	460c      	mov	r4, r1
 8009b84:	4625      	mov	r5, r4
 8009b86:	461c      	mov	r4, r3
 8009b88:	f04f 0200 	mov.w	r2, #0
 8009b8c:	4b28      	ldr	r3, [pc, #160]	; (8009c30 <scaraFLowScurve+0x914>)
 8009b8e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009b92:	f7f6 fd31 	bl	80005f8 <__aeabi_dmul>
 8009b96:	4602      	mov	r2, r0
 8009b98:	460b      	mov	r3, r1
 8009b9a:	4610      	mov	r0, r2
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009ba2:	f7f6 fd29 	bl	80005f8 <__aeabi_dmul>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	460b      	mov	r3, r1
 8009baa:	4610      	mov	r0, r2
 8009bac:	4619      	mov	r1, r3
 8009bae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009bb2:	f7f6 fd21 	bl	80005f8 <__aeabi_dmul>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	460b      	mov	r3, r1
 8009bba:	4610      	mov	r0, r2
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009bc2:	f7f6 fd19 	bl	80005f8 <__aeabi_dmul>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	460b      	mov	r3, r1
 8009bca:	4620      	mov	r0, r4
 8009bcc:	4629      	mov	r1, r5
 8009bce:	f7f6 fb5d 	bl	800028c <__adddf3>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	460c      	mov	r4, r1
 8009bd6:	4625      	mov	r5, r4
 8009bd8:	461c      	mov	r4, r3
 8009bda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009bde:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009be2:	f7f6 fd09 	bl	80005f8 <__aeabi_dmul>
 8009be6:	4602      	mov	r2, r0
 8009be8:	460b      	mov	r3, r1
 8009bea:	4610      	mov	r0, r2
 8009bec:	4619      	mov	r1, r3
 8009bee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009bf2:	f7f6 fd01 	bl	80005f8 <__aeabi_dmul>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	4610      	mov	r0, r2
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c02:	f7f6 fcf9 	bl	80005f8 <__aeabi_dmul>
 8009c06:	4602      	mov	r2, r0
 8009c08:	460b      	mov	r3, r1
 8009c0a:	4610      	mov	r0, r2
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	f04f 0200 	mov.w	r2, #0
 8009c12:	4b08      	ldr	r3, [pc, #32]	; (8009c34 <scaraFLowScurve+0x918>)
 8009c14:	f7f6 fe1a 	bl	800084c <__aeabi_ddiv>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	4629      	mov	r1, r5
 8009c20:	f7f6 fb32 	bl	8000288 <__aeabi_dsub>
 8009c24:	4603      	mov	r3, r0
 8009c26:	460c      	mov	r4, r1
 8009c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c2a:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009c2e:	e24b      	b.n	800a0c8 <scaraFLowScurve+0xdac>
 8009c30:	3fe00000 	.word	0x3fe00000
 8009c34:	40180000 	.word	0x40180000
		 // Phase 3
		 } else if ( ((2*tm) <= time) && ( time < (2*tm + tc)) ) {
 8009c38:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	460b      	mov	r3, r1
 8009c40:	f7f6 fb24 	bl	800028c <__adddf3>
 8009c44:	4602      	mov	r2, r0
 8009c46:	460b      	mov	r3, r1
 8009c48:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009c4c:	f7f6 ff5a 	bl	8000b04 <__aeabi_dcmpge>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d04b      	beq.n	8009cee <scaraFLowScurve+0x9d2>
 8009c56:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	f7f6 fb15 	bl	800028c <__adddf3>
 8009c62:	4602      	mov	r2, r0
 8009c64:	460b      	mov	r3, r1
 8009c66:	4610      	mov	r0, r2
 8009c68:	4619      	mov	r1, r3
 8009c6a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009c6e:	f7f6 fb0d 	bl	800028c <__adddf3>
 8009c72:	4602      	mov	r2, r0
 8009c74:	460b      	mov	r3, r1
 8009c76:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009c7a:	f7f6 ff2f 	bl	8000adc <__aeabi_dcmplt>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d034      	beq.n	8009cee <scaraFLowScurve+0x9d2>
			 t = time - 2*tm;
 8009c84:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009c88:	4602      	mov	r2, r0
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	f7f6 fafe 	bl	800028c <__adddf3>
 8009c90:	4603      	mov	r3, r0
 8009c92:	460c      	mov	r4, r1
 8009c94:	461a      	mov	r2, r3
 8009c96:	4623      	mov	r3, r4
 8009c98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009c9c:	f7f6 faf4 	bl	8000288 <__aeabi_dsub>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	460c      	mov	r4, r1
 8009ca4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	0;
 8009ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009caa:	f04f 0300 	mov.w	r3, #0
 8009cae:	f04f 0400 	mov.w	r4, #0
 8009cb2:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2;
 8009cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb8:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8009cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cbe:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t;
 8009cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc4:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8009cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cca:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8009cce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009cd2:	f7f6 fc91 	bl	80005f8 <__aeabi_dmul>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	460b      	mov	r3, r1
 8009cda:	4620      	mov	r0, r4
 8009cdc:	4629      	mov	r1, r5
 8009cde:	f7f6 fad5 	bl	800028c <__adddf3>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	460c      	mov	r4, r1
 8009ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ce8:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009cec:	e1ec      	b.n	800a0c8 <scaraFLowScurve+0xdac>
		 // Phase 4
		 } else if ( ((2*tm + tc) <= time) && ( time < (3*tm + tc)) ) {
 8009cee:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	f7f6 fac9 	bl	800028c <__adddf3>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	4610      	mov	r0, r2
 8009d00:	4619      	mov	r1, r3
 8009d02:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009d06:	f7f6 fac1 	bl	800028c <__adddf3>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009d12:	f7f6 fef7 	bl	8000b04 <__aeabi_dcmpge>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f000 80af 	beq.w	8009e7c <scaraFLowScurve+0xb60>
 8009d1e:	f04f 0200 	mov.w	r2, #0
 8009d22:	4b53      	ldr	r3, [pc, #332]	; (8009e70 <scaraFLowScurve+0xb54>)
 8009d24:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009d28:	f7f6 fc66 	bl	80005f8 <__aeabi_dmul>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	460b      	mov	r3, r1
 8009d30:	4610      	mov	r0, r2
 8009d32:	4619      	mov	r1, r3
 8009d34:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009d38:	f7f6 faa8 	bl	800028c <__adddf3>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	460b      	mov	r3, r1
 8009d40:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009d44:	f7f6 feca 	bl	8000adc <__aeabi_dcmplt>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f000 8096 	beq.w	8009e7c <scaraFLowScurve+0xb60>
			 t = time - (2*tm + tc);
 8009d50:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009d54:	4602      	mov	r2, r0
 8009d56:	460b      	mov	r3, r1
 8009d58:	f7f6 fa98 	bl	800028c <__adddf3>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	460c      	mov	r4, r1
 8009d60:	4618      	mov	r0, r3
 8009d62:	4621      	mov	r1, r4
 8009d64:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009d68:	f7f6 fa90 	bl	800028c <__adddf3>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	460c      	mov	r4, r1
 8009d70:	461a      	mov	r2, r3
 8009d72:	4623      	mov	r3, r4
 8009d74:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009d78:	f7f6 fa86 	bl	8000288 <__aeabi_dsub>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	460c      	mov	r4, r1
 8009d80:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 8009d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d86:	603b      	str	r3, [r7, #0]
 8009d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d8a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009d8e:	607b      	str	r3, [r7, #4]
 8009d90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d98:	f7f6 fc2e 	bl	80005f8 <__aeabi_dmul>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	460c      	mov	r4, r1
 8009da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009da2:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_3 - 0.5*j_max*t*t;
 8009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da8:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 8009dac:	f04f 0200 	mov.w	r2, #0
 8009db0:	4b30      	ldr	r3, [pc, #192]	; (8009e74 <scaraFLowScurve+0xb58>)
 8009db2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009db6:	f7f6 fc1f 	bl	80005f8 <__aeabi_dmul>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	4610      	mov	r0, r2
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009dc6:	f7f6 fc17 	bl	80005f8 <__aeabi_dmul>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	460b      	mov	r3, r1
 8009dce:	4610      	mov	r0, r2
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009dd6:	f7f6 fc0f 	bl	80005f8 <__aeabi_dmul>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	460b      	mov	r3, r1
 8009dde:	4620      	mov	r0, r4
 8009de0:	4629      	mov	r1, r5
 8009de2:	f7f6 fa51 	bl	8000288 <__aeabi_dsub>
 8009de6:	4603      	mov	r3, r0
 8009de8:	460c      	mov	r4, r1
 8009dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dec:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_3 + scurve->v_3*t - j_max*t*t*t/6;
 8009df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df2:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 8009df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df8:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8009dfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e00:	f7f6 fbfa 	bl	80005f8 <__aeabi_dmul>
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	4620      	mov	r0, r4
 8009e0a:	4629      	mov	r1, r5
 8009e0c:	f7f6 fa3e 	bl	800028c <__adddf3>
 8009e10:	4603      	mov	r3, r0
 8009e12:	460c      	mov	r4, r1
 8009e14:	4625      	mov	r5, r4
 8009e16:	461c      	mov	r4, r3
 8009e18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e1c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009e20:	f7f6 fbea 	bl	80005f8 <__aeabi_dmul>
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	4610      	mov	r0, r2
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e30:	f7f6 fbe2 	bl	80005f8 <__aeabi_dmul>
 8009e34:	4602      	mov	r2, r0
 8009e36:	460b      	mov	r3, r1
 8009e38:	4610      	mov	r0, r2
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e40:	f7f6 fbda 	bl	80005f8 <__aeabi_dmul>
 8009e44:	4602      	mov	r2, r0
 8009e46:	460b      	mov	r3, r1
 8009e48:	4610      	mov	r0, r2
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	f04f 0200 	mov.w	r2, #0
 8009e50:	4b09      	ldr	r3, [pc, #36]	; (8009e78 <scaraFLowScurve+0xb5c>)
 8009e52:	f7f6 fcfb 	bl	800084c <__aeabi_ddiv>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	4629      	mov	r1, r5
 8009e5e:	f7f6 fa13 	bl	8000288 <__aeabi_dsub>
 8009e62:	4603      	mov	r3, r0
 8009e64:	460c      	mov	r4, r1
 8009e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e68:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009e6c:	e12c      	b.n	800a0c8 <scaraFLowScurve+0xdac>
 8009e6e:	bf00      	nop
 8009e70:	40080000 	.word	0x40080000
 8009e74:	3fe00000 	.word	0x3fe00000
 8009e78:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm + tc) <= time) && ( time < (4*tm + tc)) ) {
 8009e7c:	f04f 0200 	mov.w	r2, #0
 8009e80:	4b94      	ldr	r3, [pc, #592]	; (800a0d4 <scaraFLowScurve+0xdb8>)
 8009e82:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009e86:	f7f6 fbb7 	bl	80005f8 <__aeabi_dmul>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	4610      	mov	r0, r2
 8009e90:	4619      	mov	r1, r3
 8009e92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009e96:	f7f6 f9f9 	bl	800028c <__adddf3>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009ea2:	f7f6 fe2f 	bl	8000b04 <__aeabi_dcmpge>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f000 80f6 	beq.w	800a09a <scaraFLowScurve+0xd7e>
 8009eae:	f04f 0200 	mov.w	r2, #0
 8009eb2:	4b89      	ldr	r3, [pc, #548]	; (800a0d8 <scaraFLowScurve+0xdbc>)
 8009eb4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009eb8:	f7f6 fb9e 	bl	80005f8 <__aeabi_dmul>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	4610      	mov	r0, r2
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009ec8:	f7f6 f9e0 	bl	800028c <__adddf3>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	460b      	mov	r3, r1
 8009ed0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009ed4:	f7f6 fe02 	bl	8000adc <__aeabi_dcmplt>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f000 80dd 	beq.w	800a09a <scaraFLowScurve+0xd7e>
			 t = time - (3*tm + tc);
 8009ee0:	f04f 0200 	mov.w	r2, #0
 8009ee4:	4b7b      	ldr	r3, [pc, #492]	; (800a0d4 <scaraFLowScurve+0xdb8>)
 8009ee6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009eea:	f7f6 fb85 	bl	80005f8 <__aeabi_dmul>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	4610      	mov	r0, r2
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009efa:	f7f6 f9c7 	bl	800028c <__adddf3>
 8009efe:	4602      	mov	r2, r0
 8009f00:	460b      	mov	r3, r1
 8009f02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009f06:	f7f6 f9bf 	bl	8000288 <__aeabi_dsub>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 8009f12:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8009f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f16:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8009f1a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009f1e:	4620      	mov	r0, r4
 8009f20:	4629      	mov	r1, r5
 8009f22:	f7f6 fb69 	bl	80005f8 <__aeabi_dmul>
 8009f26:	4603      	mov	r3, r0
 8009f28:	460c      	mov	r4, r1
 8009f2a:	4625      	mov	r5, r4
 8009f2c:	461c      	mov	r4, r3
 8009f2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f32:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009f36:	f7f6 fb5f 	bl	80005f8 <__aeabi_dmul>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	4620      	mov	r0, r4
 8009f40:	4629      	mov	r1, r5
 8009f42:	f7f6 f9a3 	bl	800028c <__adddf3>
 8009f46:	4603      	mov	r3, r0
 8009f48:	460c      	mov	r4, r1
 8009f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f4c:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 8009f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f52:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8009f56:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009f5a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009f5e:	f7f6 fb4b 	bl	80005f8 <__aeabi_dmul>
 8009f62:	4602      	mov	r2, r0
 8009f64:	460b      	mov	r3, r1
 8009f66:	4610      	mov	r0, r2
 8009f68:	4619      	mov	r1, r3
 8009f6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f6e:	f7f6 fb43 	bl	80005f8 <__aeabi_dmul>
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	4620      	mov	r0, r4
 8009f78:	4629      	mov	r1, r5
 8009f7a:	f7f6 f985 	bl	8000288 <__aeabi_dsub>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	460c      	mov	r4, r1
 8009f82:	4625      	mov	r5, r4
 8009f84:	461c      	mov	r4, r3
 8009f86:	f04f 0200 	mov.w	r2, #0
 8009f8a:	4b54      	ldr	r3, [pc, #336]	; (800a0dc <scaraFLowScurve+0xdc0>)
 8009f8c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009f90:	f7f6 fb32 	bl	80005f8 <__aeabi_dmul>
 8009f94:	4602      	mov	r2, r0
 8009f96:	460b      	mov	r3, r1
 8009f98:	4610      	mov	r0, r2
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009fa0:	f7f6 fb2a 	bl	80005f8 <__aeabi_dmul>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	4610      	mov	r0, r2
 8009faa:	4619      	mov	r1, r3
 8009fac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009fb0:	f7f6 fb22 	bl	80005f8 <__aeabi_dmul>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	4620      	mov	r0, r4
 8009fba:	4629      	mov	r1, r5
 8009fbc:	f7f6 f966 	bl	800028c <__adddf3>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fc6:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t - 0.5*j_max*tm*t*t + j_max*t*t*t/6;
 8009fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fcc:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8009fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd2:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8009fd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009fda:	f7f6 fb0d 	bl	80005f8 <__aeabi_dmul>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	f7f6 f951 	bl	800028c <__adddf3>
 8009fea:	4603      	mov	r3, r0
 8009fec:	460c      	mov	r4, r1
 8009fee:	4625      	mov	r5, r4
 8009ff0:	461c      	mov	r4, r3
 8009ff2:	f04f 0200 	mov.w	r2, #0
 8009ff6:	4b39      	ldr	r3, [pc, #228]	; (800a0dc <scaraFLowScurve+0xdc0>)
 8009ff8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009ffc:	f7f6 fafc 	bl	80005f8 <__aeabi_dmul>
 800a000:	4602      	mov	r2, r0
 800a002:	460b      	mov	r3, r1
 800a004:	4610      	mov	r0, r2
 800a006:	4619      	mov	r1, r3
 800a008:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a00c:	f7f6 faf4 	bl	80005f8 <__aeabi_dmul>
 800a010:	4602      	mov	r2, r0
 800a012:	460b      	mov	r3, r1
 800a014:	4610      	mov	r0, r2
 800a016:	4619      	mov	r1, r3
 800a018:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a01c:	f7f6 faec 	bl	80005f8 <__aeabi_dmul>
 800a020:	4602      	mov	r2, r0
 800a022:	460b      	mov	r3, r1
 800a024:	4610      	mov	r0, r2
 800a026:	4619      	mov	r1, r3
 800a028:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a02c:	f7f6 fae4 	bl	80005f8 <__aeabi_dmul>
 800a030:	4602      	mov	r2, r0
 800a032:	460b      	mov	r3, r1
 800a034:	4620      	mov	r0, r4
 800a036:	4629      	mov	r1, r5
 800a038:	f7f6 f926 	bl	8000288 <__aeabi_dsub>
 800a03c:	4603      	mov	r3, r0
 800a03e:	460c      	mov	r4, r1
 800a040:	4625      	mov	r5, r4
 800a042:	461c      	mov	r4, r3
 800a044:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a048:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a04c:	f7f6 fad4 	bl	80005f8 <__aeabi_dmul>
 800a050:	4602      	mov	r2, r0
 800a052:	460b      	mov	r3, r1
 800a054:	4610      	mov	r0, r2
 800a056:	4619      	mov	r1, r3
 800a058:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a05c:	f7f6 facc 	bl	80005f8 <__aeabi_dmul>
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	4610      	mov	r0, r2
 800a066:	4619      	mov	r1, r3
 800a068:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a06c:	f7f6 fac4 	bl	80005f8 <__aeabi_dmul>
 800a070:	4602      	mov	r2, r0
 800a072:	460b      	mov	r3, r1
 800a074:	4610      	mov	r0, r2
 800a076:	4619      	mov	r1, r3
 800a078:	f04f 0200 	mov.w	r2, #0
 800a07c:	4b18      	ldr	r3, [pc, #96]	; (800a0e0 <scaraFLowScurve+0xdc4>)
 800a07e:	f7f6 fbe5 	bl	800084c <__aeabi_ddiv>
 800a082:	4602      	mov	r2, r0
 800a084:	460b      	mov	r3, r1
 800a086:	4620      	mov	r0, r4
 800a088:	4629      	mov	r1, r5
 800a08a:	f7f6 f8ff 	bl	800028c <__adddf3>
 800a08e:	4603      	mov	r3, r0
 800a090:	460c      	mov	r4, r1
 800a092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a094:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800a098:	e016      	b.n	800a0c8 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 800a09a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a09c:	f04f 0300 	mov.w	r3, #0
 800a0a0:	f04f 0400 	mov.w	r4, #0
 800a0a4:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 800a0a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0aa:	f04f 0300 	mov.w	r3, #0
 800a0ae:	f04f 0400 	mov.w	r4, #0
 800a0b2:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 800a0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b8:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800a0bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0be:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800a0c2:	e001      	b.n	800a0c8 <scaraFLowScurve+0xdac>
		 }

	 } else {
		 return SCARA_STATUS_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e000      	b.n	800a0ca <scaraFLowScurve+0xdae>
	 }

	 return SCARA_STATUS_OK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3748      	adds	r7, #72	; 0x48
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bdb0      	pop	{r4, r5, r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	40080000 	.word	0x40080000
 800a0d8:	40100000 	.word	0x40100000
 800a0dc:	3fe00000 	.word	0x3fe00000
 800a0e0:	40180000 	.word	0x40180000
 800a0e4:	00000000 	.word	0x00000000

0800a0e8 <scaraCheckWorkSpace4>:

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b088      	sub	sp, #32
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	ed87 0b06 	vstr	d0, [r7, #24]
 800a0f2:	ed87 1b04 	vstr	d1, [r7, #16]
 800a0f6:	ed87 2b02 	vstr	d2, [r7, #8]
 800a0fa:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0-0.1 || theta1 > LIM_MAX_J0+0.1) {
 800a0fe:	a335      	add	r3, pc, #212	; (adr r3, 800a1d4 <scaraCheckWorkSpace4+0xec>)
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a108:	f7f6 fce8 	bl	8000adc <__aeabi_dcmplt>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d109      	bne.n	800a126 <scaraCheckWorkSpace4+0x3e>
 800a112:	a332      	add	r3, pc, #200	; (adr r3, 800a1dc <scaraCheckWorkSpace4+0xf4>)
 800a114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a118:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a11c:	f7f6 fcfc 	bl	8000b18 <__aeabi_dcmpgt>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d001      	beq.n	800a12a <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a126:	2307      	movs	r3, #7
 800a128:	e043      	b.n	800a1b2 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1-0.1 || theta2 > LIM_MAX_J1+0.1) {
 800a12a:	a32e      	add	r3, pc, #184	; (adr r3, 800a1e4 <scaraCheckWorkSpace4+0xfc>)
 800a12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a130:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a134:	f7f6 fcd2 	bl	8000adc <__aeabi_dcmplt>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d109      	bne.n	800a152 <scaraCheckWorkSpace4+0x6a>
 800a13e:	a32b      	add	r3, pc, #172	; (adr r3, 800a1ec <scaraCheckWorkSpace4+0x104>)
 800a140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a144:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a148:	f7f6 fce6 	bl	8000b18 <__aeabi_dcmpgt>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d001      	beq.n	800a156 <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a152:	2307      	movs	r3, #7
 800a154:	e02d      	b.n	800a1b2 <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 800a156:	f04f 0200 	mov.w	r2, #0
 800a15a:	f04f 0300 	mov.w	r3, #0
 800a15e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a162:	f7f6 fcbb 	bl	8000adc <__aeabi_dcmplt>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d109      	bne.n	800a180 <scaraCheckWorkSpace4+0x98>
 800a16c:	f04f 0200 	mov.w	r2, #0
 800a170:	4b17      	ldr	r3, [pc, #92]	; (800a1d0 <scaraCheckWorkSpace4+0xe8>)
 800a172:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a176:	f7f6 fccf 	bl	8000b18 <__aeabi_dcmpgt>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a180:	2307      	movs	r3, #7
 800a182:	e016      	b.n	800a1b2 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3-0.1 || theta4 > LIM_MAX_J3+0.1) {
 800a184:	a30e      	add	r3, pc, #56	; (adr r3, 800a1c0 <scaraCheckWorkSpace4+0xd8>)
 800a186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a18e:	f7f6 fca5 	bl	8000adc <__aeabi_dcmplt>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d109      	bne.n	800a1ac <scaraCheckWorkSpace4+0xc4>
 800a198:	a30b      	add	r3, pc, #44	; (adr r3, 800a1c8 <scaraCheckWorkSpace4+0xe0>)
 800a19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a1a2:	f7f6 fcb9 	bl	8000b18 <__aeabi_dcmpgt>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d001      	beq.n	800a1b0 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a1ac:	2307      	movs	r3, #7
 800a1ae:	e000      	b.n	800a1b2 <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3720      	adds	r7, #32
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	f3af 8000 	nop.w
 800a1c0:	a7777778 	.word	0xa7777778
 800a1c4:	c0088956 	.word	0xc0088956
 800a1c8:	a7777778 	.word	0xa7777778
 800a1cc:	40088956 	.word	0x40088956
 800a1d0:	40590000 	.word	0x40590000
 800a1d4:	74444445 	.word	0x74444445
 800a1d8:	bff95623 	.word	0xbff95623
 800a1dc:	74444445 	.word	0x74444445
 800a1e0:	3ff95623 	.word	0x3ff95623
 800a1e4:	54cccccd 	.word	0x54cccccd
 800a1e8:	c003a649 	.word	0xc003a649
 800a1ec:	54cccccd 	.word	0x54cccccd
 800a1f0:	4003a649 	.word	0x4003a649
 800a1f4:	00000000 	.word	0x00000000

0800a1f8 <scaraCheckWorkSpace1>:

/* Check limit 1 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace1 (Trajectory_TargetTypeDef target, double value) {
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	4603      	mov	r3, r0
 800a200:	ed87 0b00 	vstr	d0, [r7]
 800a204:	73fb      	strb	r3, [r7, #15]
	if ( TRAJECTORY_J0 == target) {
 800a206:	7bfb      	ldrb	r3, [r7, #15]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d117      	bne.n	800a23c <scaraCheckWorkSpace1+0x44>
		if ( (LIM_MIN_J0 <= value) && ( value <= LIM_MAX_J0)) {
 800a20c:	a33d      	add	r3, pc, #244	; (adr r3, 800a304 <scaraCheckWorkSpace1+0x10c>)
 800a20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a212:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a216:	f7f6 fc75 	bl	8000b04 <__aeabi_dcmpge>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00b      	beq.n	800a238 <scaraCheckWorkSpace1+0x40>
 800a220:	a33a      	add	r3, pc, #232	; (adr r3, 800a30c <scaraCheckWorkSpace1+0x114>)
 800a222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a226:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a22a:	f7f6 fc61 	bl	8000af0 <__aeabi_dcmple>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <scaraCheckWorkSpace1+0x40>
			return SCARA_STATUS_OK;
 800a234:	2300      	movs	r3, #0
 800a236:	e054      	b.n	800a2e2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a238:	2307      	movs	r3, #7
 800a23a:	e052      	b.n	800a2e2 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J1 == target) {
 800a23c:	7bfb      	ldrb	r3, [r7, #15]
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d117      	bne.n	800a272 <scaraCheckWorkSpace1+0x7a>
		if ( (LIM_MIN_J1 <= value) && ( value <= LIM_MAX_J1)) {
 800a242:	a334      	add	r3, pc, #208	; (adr r3, 800a314 <scaraCheckWorkSpace1+0x11c>)
 800a244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a248:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a24c:	f7f6 fc5a 	bl	8000b04 <__aeabi_dcmpge>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00b      	beq.n	800a26e <scaraCheckWorkSpace1+0x76>
 800a256:	a331      	add	r3, pc, #196	; (adr r3, 800a31c <scaraCheckWorkSpace1+0x124>)
 800a258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a260:	f7f6 fc46 	bl	8000af0 <__aeabi_dcmple>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d001      	beq.n	800a26e <scaraCheckWorkSpace1+0x76>
			return SCARA_STATUS_OK;
 800a26a:	2300      	movs	r3, #0
 800a26c:	e039      	b.n	800a2e2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a26e:	2307      	movs	r3, #7
 800a270:	e037      	b.n	800a2e2 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J2 == target) {
 800a272:	7bfb      	ldrb	r3, [r7, #15]
 800a274:	2b02      	cmp	r3, #2
 800a276:	d118      	bne.n	800a2aa <scaraCheckWorkSpace1+0xb2>
		if ( (LIM_MIN_J2 <= value) && ( value <= LIM_MAX_J2)) {
 800a278:	f04f 0200 	mov.w	r2, #0
 800a27c:	f04f 0300 	mov.w	r3, #0
 800a280:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a284:	f7f6 fc3e 	bl	8000b04 <__aeabi_dcmpge>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00b      	beq.n	800a2a6 <scaraCheckWorkSpace1+0xae>
 800a28e:	f04f 0200 	mov.w	r2, #0
 800a292:	4b1b      	ldr	r3, [pc, #108]	; (800a300 <scaraCheckWorkSpace1+0x108>)
 800a294:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a298:	f7f6 fc2a 	bl	8000af0 <__aeabi_dcmple>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d001      	beq.n	800a2a6 <scaraCheckWorkSpace1+0xae>
			return SCARA_STATUS_OK;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	e01d      	b.n	800a2e2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a2a6:	2307      	movs	r3, #7
 800a2a8:	e01b      	b.n	800a2e2 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J3 == target) {
 800a2aa:	7bfb      	ldrb	r3, [r7, #15]
 800a2ac:	2b03      	cmp	r3, #3
 800a2ae:	d117      	bne.n	800a2e0 <scaraCheckWorkSpace1+0xe8>
		if ( (LIM_MIN_J3 <= value) && ( value <= LIM_MAX_J3)) {
 800a2b0:	a30f      	add	r3, pc, #60	; (adr r3, 800a2f0 <scaraCheckWorkSpace1+0xf8>)
 800a2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a2ba:	f7f6 fc23 	bl	8000b04 <__aeabi_dcmpge>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00b      	beq.n	800a2dc <scaraCheckWorkSpace1+0xe4>
 800a2c4:	a30c      	add	r3, pc, #48	; (adr r3, 800a2f8 <scaraCheckWorkSpace1+0x100>)
 800a2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a2ce:	f7f6 fc0f 	bl	8000af0 <__aeabi_dcmple>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d001      	beq.n	800a2dc <scaraCheckWorkSpace1+0xe4>
			return SCARA_STATUS_OK;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	e002      	b.n	800a2e2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a2dc:	2307      	movs	r3, #7
 800a2de:	e000      	b.n	800a2e2 <scaraCheckWorkSpace1+0xea>
		}
	} else {
		return SCARA_STATUS_ERROR;
 800a2e0:	2301      	movs	r3, #1
	}
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	f3af 8000 	nop.w
 800a2f0:	daaaaaab 	.word	0xdaaaaaab
 800a2f4:	c007bc89 	.word	0xc007bc89
 800a2f8:	daaaaaab 	.word	0xdaaaaaab
 800a2fc:	4007bc89 	.word	0x4007bc89
 800a300:	40590000 	.word	0x40590000
 800a304:	daaaaaab 	.word	0xdaaaaaab
 800a308:	bff7bc89 	.word	0xbff7bc89
 800a30c:	daaaaaab 	.word	0xdaaaaaab
 800a310:	3ff7bc89 	.word	0x3ff7bc89
 800a314:	88000000 	.word	0x88000000
 800a318:	c002d97c 	.word	0xc002d97c
 800a31c:	88000000 	.word	0x88000000
 800a320:	4002d97c 	.word	0x4002d97c
 800a324:	00000000 	.word	0x00000000

0800a328 <scaraTestLinearDuty>:

SCARA_StatusTypeDef scaraTestLinearDuty()
{
 800a328:	b5b0      	push	{r4, r5, r7, lr}
 800a32a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800a32e:	af2e      	add	r7, sp, #184	; 0xb8
	int32_t sample_count;
	double run_time = 0;
 800a330:	f04f 0300 	mov.w	r3, #0
 800a334:	f04f 0400 	mov.w	r4, #0
 800a338:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a33c:	463b      	mov	r3, r7
 800a33e:	4a36      	ldr	r2, [pc, #216]	; (800a418 <scaraTestLinearDuty+0xf0>)
 800a340:	4618      	mov	r0, r3
 800a342:	4611      	mov	r1, r2
 800a344:	23c0      	movs	r3, #192	; 0xc0
 800a346:	461a      	mov	r2, r3
 800a348:	f00b fc88 	bl	8015c5c <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800a34c:	4b33      	ldr	r3, [pc, #204]	; (800a41c <scaraTestLinearDuty+0xf4>)
 800a34e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a352:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a356:	a32e      	add	r3, pc, #184	; (adr r3, 800a410 <scaraTestLinearDuty+0xe8>)
 800a358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35c:	f7f6 fa76 	bl	800084c <__aeabi_ddiv>
 800a360:	4603      	mov	r3, r0
 800a362:	460c      	mov	r4, r1
 800a364:	ec44 3b17 	vmov	d7, r3, r4
 800a368:	eeb0 0a47 	vmov.f32	s0, s14
 800a36c:	eef0 0a67 	vmov.f32	s1, s15
 800a370:	f00f f9e2 	bl	8019738 <ceil>
 800a374:	ec54 3b10 	vmov	r3, r4, d0
 800a378:	4618      	mov	r0, r3
 800a37a:	4621      	mov	r1, r4
 800a37c:	f7f6 fbec 	bl	8000b58 <__aeabi_d2iz>
 800a380:	4603      	mov	r3, r0
 800a382:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	for (int32_t i = 1; i < sample_count; i++) {
 800a386:	2301      	movs	r3, #1
 800a388:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a38c:	e032      	b.n	800a3f4 <scaraTestLinearDuty+0xcc>
		run_time += T_SAMPLING;
 800a38e:	a320      	add	r3, pc, #128	; (adr r3, 800a410 <scaraTestLinearDuty+0xe8>)
 800a390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a394:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800a398:	f7f5 ff78 	bl	800028c <__adddf3>
 800a39c:	4603      	mov	r3, r0
 800a39e:	460c      	mov	r4, r1
 800a3a0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
		status = scaraTestFlowDuty(run_time, &test_Next, test_Current);
 800a3a4:	463c      	mov	r4, r7
 800a3a6:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800a3aa:	4668      	mov	r0, sp
 800a3ac:	f104 0308 	add.w	r3, r4, #8
 800a3b0:	22b8      	movs	r2, #184	; 0xb8
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	f00b fc52 	bl	8015c5c <memcpy>
 800a3b8:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a3bc:	4628      	mov	r0, r5
 800a3be:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800a3c2:	f7fd ff5b 	bl	800827c <scaraTestFlowDuty>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		if (status != SCARA_STATUS_OK) {
 800a3cc:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d002      	beq.n	800a3da <scaraTestLinearDuty+0xb2>
			return status;
 800a3d4:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a3d8:	e013      	b.n	800a402 <scaraTestLinearDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 800a3da:	463a      	mov	r2, r7
 800a3dc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800a3e0:	4611      	mov	r1, r2
 800a3e2:	22c0      	movs	r2, #192	; 0xc0
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f00b fc39 	bl	8015c5c <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 800a3ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a3f4:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a3f8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	dbc6      	blt.n	800a38e <scaraTestLinearDuty+0x66>
	}
	return SCARA_STATUS_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800a408:	46bd      	mov	sp, r7
 800a40a:	bdb0      	pop	{r4, r5, r7, pc}
 800a40c:	f3af 8000 	nop.w
 800a410:	40000000 	.word	0x40000000
 800a414:	3f847ae1 	.word	0x3f847ae1
 800a418:	20005ae8 	.word	0x20005ae8
 800a41c:	20004f28 	.word	0x20004f28

0800a420 <scaraTestDuty>:

/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 800a420:	b5b0      	push	{r4, r5, r7, lr}
 800a422:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800a426:	af2e      	add	r7, sp, #184	; 0xb8
	int32_t sample_count;
	double run_time = 0;
 800a428:	f04f 0300 	mov.w	r3, #0
 800a42c:	f04f 0400 	mov.w	r4, #0
 800a430:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a434:	463b      	mov	r3, r7
 800a436:	4a36      	ldr	r2, [pc, #216]	; (800a510 <scaraTestDuty+0xf0>)
 800a438:	4618      	mov	r0, r3
 800a43a:	4611      	mov	r1, r2
 800a43c:	23c0      	movs	r3, #192	; 0xc0
 800a43e:	461a      	mov	r2, r3
 800a440:	f00b fc0c 	bl	8015c5c <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800a444:	4b33      	ldr	r3, [pc, #204]	; (800a514 <scaraTestDuty+0xf4>)
 800a446:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a44a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a44e:	a32e      	add	r3, pc, #184	; (adr r3, 800a508 <scaraTestDuty+0xe8>)
 800a450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a454:	f7f6 f9fa 	bl	800084c <__aeabi_ddiv>
 800a458:	4603      	mov	r3, r0
 800a45a:	460c      	mov	r4, r1
 800a45c:	ec44 3b17 	vmov	d7, r3, r4
 800a460:	eeb0 0a47 	vmov.f32	s0, s14
 800a464:	eef0 0a67 	vmov.f32	s1, s15
 800a468:	f00f f966 	bl	8019738 <ceil>
 800a46c:	ec54 3b10 	vmov	r3, r4, d0
 800a470:	4618      	mov	r0, r3
 800a472:	4621      	mov	r1, r4
 800a474:	f7f6 fb70 	bl	8000b58 <__aeabi_d2iz>
 800a478:	4603      	mov	r3, r0
 800a47a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	for (int32_t i = 1; i < sample_count; i++) {
 800a47e:	2301      	movs	r3, #1
 800a480:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a484:	e032      	b.n	800a4ec <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 800a486:	a320      	add	r3, pc, #128	; (adr r3, 800a508 <scaraTestDuty+0xe8>)
 800a488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800a490:	f7f5 fefc 	bl	800028c <__adddf3>
 800a494:	4603      	mov	r3, r0
 800a496:	460c      	mov	r4, r1
 800a498:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 800a49c:	463c      	mov	r4, r7
 800a49e:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800a4a2:	4668      	mov	r0, sp
 800a4a4:	f104 0308 	add.w	r3, r4, #8
 800a4a8:	22b8      	movs	r2, #184	; 0xb8
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	f00b fbd6 	bl	8015c5c <memcpy>
 800a4b0:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800a4ba:	f7fd ff4b 	bl	8008354 <scaraFlowDuty>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		if (status != SCARA_STATUS_OK) {
 800a4c4:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d002      	beq.n	800a4d2 <scaraTestDuty+0xb2>
			return status;
 800a4cc:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a4d0:	e013      	b.n	800a4fa <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 800a4d2:	463a      	mov	r2, r7
 800a4d4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800a4d8:	4611      	mov	r1, r2
 800a4da:	22c0      	movs	r2, #192	; 0xc0
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f00b fbbd 	bl	8015c5c <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 800a4e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a4ec:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a4f0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	dbc6      	blt.n	800a486 <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800a500:	46bd      	mov	sp, r7
 800a502:	bdb0      	pop	{r4, r5, r7, pc}
 800a504:	f3af 8000 	nop.w
 800a508:	40000000 	.word	0x40000000
 800a50c:	3f847ae1 	.word	0x3f847ae1
 800a510:	20005ae8 	.word	0x20005ae8
 800a514:	20004f28 	.word	0x20004f28

0800a518 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 800a518:	b480      	push	{r7}
 800a51a:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 800a51c:	4b03      	ldr	r3, [pc, #12]	; (800a52c <scaraSetScanFlag+0x14>)
 800a51e:	2201      	movs	r2, #1
 800a520:	70da      	strb	r2, [r3, #3]
}
 800a522:	bf00      	nop
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr
 800a52c:	2000081c 	.word	0x2000081c

0800a530 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	4603      	mov	r3, r0
 800a538:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 800a53a:	4a05      	ldr	r2, [pc, #20]	; (800a550 <scaraSetOutput+0x20>)
 800a53c:	79fb      	ldrb	r3, [r7, #7]
 800a53e:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 800a540:	79fb      	ldrb	r3, [r7, #7]
 800a542:	4618      	mov	r0, r3
 800a544:	f7fa fd48 	bl	8004fd8 <lowlayer_setOutput>
}
 800a548:	bf00      	nop
 800a54a:	3708      	adds	r7, #8
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}
 800a550:	2000081c 	.word	0x2000081c

0800a554 <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	4603      	mov	r3, r0
 800a55c:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 800a55e:	4a04      	ldr	r2, [pc, #16]	; (800a570 <scaraSetDutyState+0x1c>)
 800a560:	79fb      	ldrb	r3, [r7, #7]
 800a562:	7093      	strb	r3, [r2, #2]
}
 800a564:	bf00      	nop
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr
 800a570:	2000081c 	.word	0x2000081c

0800a574 <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	4603      	mov	r3, r0
 800a57c:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 800a57e:	4a04      	ldr	r2, [pc, #16]	; (800a590 <scaraSetMode+0x1c>)
 800a580:	79fb      	ldrb	r3, [r7, #7]
 800a582:	7053      	strb	r3, [r2, #1]
}
 800a584:	bf00      	nop
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	2000081c 	.word	0x2000081c

0800a594 <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	4603      	mov	r3, r0
 800a59c:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 800a59e:	4a04      	ldr	r2, [pc, #16]	; (800a5b0 <scaraSetMethod+0x1c>)
 800a5a0:	79fb      	ldrb	r3, [r7, #7]
 800a5a2:	7013      	strb	r3, [r2, #0]
}
 800a5a4:	bf00      	nop
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr
 800a5b0:	2000081c 	.word	0x2000081c

0800a5b4 <scaraGetPosition>:


void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a5bc:	22c0      	movs	r2, #192	; 0xc0
 800a5be:	4904      	ldr	r1, [pc, #16]	; (800a5d0 <scaraGetPosition+0x1c>)
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f00b fb4b 	bl	8015c5c <memcpy>
}
 800a5c6:	bf00      	nop
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	20005ae8 	.word	0x20005ae8

0800a5d4 <scaraUpdatePosition>:

void				scaraUpdatePosition (SCARA_PositionTypeDef *pos) {
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
	memcpy(&positionNext, pos, sizeof(SCARA_PositionTypeDef));
 800a5dc:	22c0      	movs	r2, #192	; 0xc0
 800a5de:	6879      	ldr	r1, [r7, #4]
 800a5e0:	4803      	ldr	r0, [pc, #12]	; (800a5f0 <scaraUpdatePosition+0x1c>)
 800a5e2:	f00b fb3b 	bl	8015c5c <memcpy>
}
 800a5e6:	bf00      	nop
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	20005c68 	.word	0x20005c68

0800a5f4 <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 800a5f4:	b480      	push	{r7}
 800a5f6:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 800a5f8:	4b03      	ldr	r3, [pc, #12]	; (800a608 <scaraGetMode+0x14>)
 800a5fa:	785b      	ldrb	r3, [r3, #1]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop
 800a608:	2000081c 	.word	0x2000081c

0800a60c <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 800a60c:	b480      	push	{r7}
 800a60e:	af00      	add	r7, sp, #0
	return mySCARA.method;
 800a610:	4b03      	ldr	r3, [pc, #12]	; (800a620 <scaraGetMethod+0x14>)
 800a612:	781b      	ldrb	r3, [r3, #0]
}
 800a614:	4618      	mov	r0, r3
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr
 800a61e:	bf00      	nop
 800a620:	2000081c 	.word	0x2000081c

0800a624 <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 800a624:	b480      	push	{r7}
 800a626:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 800a628:	4b03      	ldr	r3, [pc, #12]	; (800a638 <scaraGetDutyState+0x14>)
 800a62a:	789b      	ldrb	r3, [r3, #2]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr
 800a636:	bf00      	nop
 800a638:	2000081c 	.word	0x2000081c

0800a63c <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 800a63c:	b480      	push	{r7}
 800a63e:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 800a640:	4b03      	ldr	r3, [pc, #12]	; (800a650 <scaraIsScanLimit+0x14>)
 800a642:	78db      	ldrb	r3, [r3, #3]
}
 800a644:	4618      	mov	r0, r3
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop
 800a650:	2000081c 	.word	0x2000081c

0800a654 <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 800a654:	b590      	push	{r4, r7, lr}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total  < run_time) {
 800a65e:	4b0a      	ldr	r3, [pc, #40]	; (800a688 <scaraIsFinish+0x34>)
 800a660:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a664:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a668:	461a      	mov	r2, r3
 800a66a:	4623      	mov	r3, r4
 800a66c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a670:	f7f6 fa52 	bl	8000b18 <__aeabi_dcmpgt>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d001      	beq.n	800a67e <scaraIsFinish+0x2a>
		return TRUE;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e000      	b.n	800a680 <scaraIsFinish+0x2c>
	} else {
		return FALSE;
 800a67e:	2300      	movs	r3, #0
	}
}
 800a680:	4618      	mov	r0, r3
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	bd90      	pop	{r4, r7, pc}
 800a688:	20004f28 	.word	0x20004f28
 800a68c:	00000000 	.word	0x00000000

0800a690 <scaraPosition_packaging>:
						time);
	return lenght_buff;
}

int32_t scaraPosition_packaging(uint8_t *data_packet, SCARA_PositionTypeDef position)
{
 800a690:	b082      	sub	sp, #8
 800a692:	b590      	push	{r4, r7, lr}
 800a694:	b085      	sub	sp, #20
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
 800a69a:	f107 0120 	add.w	r1, r7, #32
 800a69e:	e881 000c 	stmia.w	r1, {r2, r3}
	int32_t cur_ptr = -4;
 800a6a2:	f06f 0303 	mvn.w	r3, #3
 800a6a6:	60fb      	str	r3, [r7, #12]
	Append_Coordinate_Value((int32_t)(position.x*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a6a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a6ac:	a35c      	add	r3, pc, #368	; (adr r3, 800a820 <scaraPosition_packaging+0x190>)
 800a6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b2:	f7f5 ffa1 	bl	80005f8 <__aeabi_dmul>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	460c      	mov	r4, r1
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	4621      	mov	r1, r4
 800a6be:	f7f6 fa4b 	bl	8000b58 <__aeabi_d2iz>
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	3304      	adds	r3, #4
 800a6c6:	60fb      	str	r3, [r7, #12]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	f000 f8aa 	bl	800a828 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.y*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a6d4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800a6d8:	a351      	add	r3, pc, #324	; (adr r3, 800a820 <scaraPosition_packaging+0x190>)
 800a6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6de:	f7f5 ff8b 	bl	80005f8 <__aeabi_dmul>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	460c      	mov	r4, r1
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	4621      	mov	r1, r4
 800a6ea:	f7f6 fa35 	bl	8000b58 <__aeabi_d2iz>
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	3304      	adds	r3, #4
 800a6f2:	60fb      	str	r3, [r7, #12]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	f000 f894 	bl	800a828 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.z*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a700:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a704:	a346      	add	r3, pc, #280	; (adr r3, 800a820 <scaraPosition_packaging+0x190>)
 800a706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70a:	f7f5 ff75 	bl	80005f8 <__aeabi_dmul>
 800a70e:	4603      	mov	r3, r0
 800a710:	460c      	mov	r4, r1
 800a712:	4618      	mov	r0, r3
 800a714:	4621      	mov	r1, r4
 800a716:	f7f6 fa1f 	bl	8000b58 <__aeabi_d2iz>
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	3304      	adds	r3, #4
 800a71e:	60fb      	str	r3, [r7, #12]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	4413      	add	r3, r2
 800a726:	4619      	mov	r1, r3
 800a728:	f000 f87e 	bl	800a828 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.roll*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a72c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a730:	a33b      	add	r3, pc, #236	; (adr r3, 800a820 <scaraPosition_packaging+0x190>)
 800a732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a736:	f7f5 ff5f 	bl	80005f8 <__aeabi_dmul>
 800a73a:	4603      	mov	r3, r0
 800a73c:	460c      	mov	r4, r1
 800a73e:	4618      	mov	r0, r3
 800a740:	4621      	mov	r1, r4
 800a742:	f7f6 fa09 	bl	8000b58 <__aeabi_d2iz>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	3304      	adds	r3, #4
 800a74a:	60fb      	str	r3, [r7, #12]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	4413      	add	r3, r2
 800a752:	4619      	mov	r1, r3
 800a754:	f000 f868 	bl	800a828 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta1*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a758:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800a75c:	a330      	add	r3, pc, #192	; (adr r3, 800a820 <scaraPosition_packaging+0x190>)
 800a75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a762:	f7f5 ff49 	bl	80005f8 <__aeabi_dmul>
 800a766:	4603      	mov	r3, r0
 800a768:	460c      	mov	r4, r1
 800a76a:	4618      	mov	r0, r3
 800a76c:	4621      	mov	r1, r4
 800a76e:	f7f6 f9f3 	bl	8000b58 <__aeabi_d2iz>
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	3304      	adds	r3, #4
 800a776:	60fb      	str	r3, [r7, #12]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	4413      	add	r3, r2
 800a77e:	4619      	mov	r1, r3
 800a780:	f000 f852 	bl	800a828 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta2*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a784:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800a788:	a325      	add	r3, pc, #148	; (adr r3, 800a820 <scaraPosition_packaging+0x190>)
 800a78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78e:	f7f5 ff33 	bl	80005f8 <__aeabi_dmul>
 800a792:	4603      	mov	r3, r0
 800a794:	460c      	mov	r4, r1
 800a796:	4618      	mov	r0, r3
 800a798:	4621      	mov	r1, r4
 800a79a:	f7f6 f9dd 	bl	8000b58 <__aeabi_d2iz>
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	3304      	adds	r3, #4
 800a7a2:	60fb      	str	r3, [r7, #12]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	f000 f83c 	bl	800a828 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.D3*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a7b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a7b4:	a31a      	add	r3, pc, #104	; (adr r3, 800a820 <scaraPosition_packaging+0x190>)
 800a7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ba:	f7f5 ff1d 	bl	80005f8 <__aeabi_dmul>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	460c      	mov	r4, r1
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	4621      	mov	r1, r4
 800a7c6:	f7f6 f9c7 	bl	8000b58 <__aeabi_d2iz>
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	60fb      	str	r3, [r7, #12]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	f000 f826 	bl	800a828 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta4*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a7dc:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800a7e0:	a30f      	add	r3, pc, #60	; (adr r3, 800a820 <scaraPosition_packaging+0x190>)
 800a7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e6:	f7f5 ff07 	bl	80005f8 <__aeabi_dmul>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	460c      	mov	r4, r1
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	4621      	mov	r1, r4
 800a7f2:	f7f6 f9b1 	bl	8000b58 <__aeabi_d2iz>
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	3304      	adds	r3, #4
 800a7fa:	60fb      	str	r3, [r7, #12]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	4413      	add	r3, r2
 800a802:	4619      	mov	r1, r3
 800a804:	f000 f810 	bl	800a828 <Append_Coordinate_Value>
	return cur_ptr + 4;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	3304      	adds	r3, #4
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3714      	adds	r7, #20
 800a810:	46bd      	mov	sp, r7
 800a812:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a816:	b002      	add	sp, #8
 800a818:	4770      	bx	lr
 800a81a:	bf00      	nop
 800a81c:	f3af 8000 	nop.w
 800a820:	00000000 	.word	0x00000000
 800a824:	412e8480 	.word	0x412e8480

0800a828 <Append_Coordinate_Value>:

void Append_Coordinate_Value(int32_t append_value, uint8_t* append_position)
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
	append_position[0] = (uint8_t)(append_value & 0xff);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	b2da      	uxtb	r2, r3
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	701a      	strb	r2, [r3, #0]
	append_position[1] = (uint8_t)(append_value >> 8 & 0xff);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	121a      	asrs	r2, r3, #8
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	3301      	adds	r3, #1
 800a842:	b2d2      	uxtb	r2, r2
 800a844:	701a      	strb	r2, [r3, #0]
	append_position[2] = (uint8_t)(append_value >> 16 & 0xff);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	141a      	asrs	r2, r3, #16
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	3302      	adds	r3, #2
 800a84e:	b2d2      	uxtb	r2, r2
 800a850:	701a      	strb	r2, [r3, #0]
	append_position[3] = (uint8_t)(append_value >> 24 & 0xff);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	161a      	asrs	r2, r3, #24
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	3303      	adds	r3, #3
 800a85a:	b2d2      	uxtb	r2, r2
 800a85c:	701a      	strb	r2, [r3, #0]
}
 800a85e:	bf00      	nop
 800a860:	370c      	adds	r7, #12
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr
 800a86a:	0000      	movs	r0, r0
 800a86c:	0000      	movs	r0, r0
	...

0800a870 <scaraKeyInit1>:
SCARA_StatusTypeDef  scaraKeyInit1(SCARA_KeyTypeDef key, int32_t speed)
{
 800a870:	b590      	push	{r4, r7, lr}
 800a872:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 800a876:	af6c      	add	r7, sp, #432	; 0x1b0
 800a878:	4602      	mov	r2, r0
 800a87a:	463b      	mov	r3, r7
 800a87c:	6019      	str	r1, [r3, #0]
 800a87e:	1dfb      	adds	r3, r7, #7
 800a880:	701a      	strb	r2, [r3, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef status;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 800a882:	f107 0308 	add.w	r3, r7, #8
 800a886:	2201      	movs	r2, #1
 800a888:	731a      	strb	r2, [r3, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800a88a:	f107 0308 	add.w	r3, r7, #8
 800a88e:	2200      	movs	r2, #0
 800a890:	741a      	strb	r2, [r3, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 800a892:	f107 0308 	add.w	r3, r7, #8
 800a896:	2201      	movs	r2, #1
 800a898:	745a      	strb	r2, [r3, #17]
	double v_current = 0;
 800a89a:	f04f 0300 	mov.w	r3, #0
 800a89e:	f04f 0400 	mov.w	r4, #0
 800a8a2:	e9c7 3474 	strd	r3, r4, [r7, #464]	; 0x1d0
	Trajectory_LSPB_TypeDef *lspb;
	if(speed < SHIFT_SPEED_MIN || speed > SHIFT_SPEED_MAX){
 800a8a6:	463b      	mov	r3, r7
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	dd03      	ble.n	800a8b6 <scaraKeyInit1+0x46>
 800a8ae:	463b      	mov	r3, r7
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2b0e      	cmp	r3, #14
 800a8b4:	dd01      	ble.n	800a8ba <scaraKeyInit1+0x4a>
		return SCARA_STATUS_ERROR_PARA;
 800a8b6:	2306      	movs	r3, #6
 800a8b8:	e2c0      	b.n	800ae3c <scaraKeyInit1+0x5cc>
	}
	switch(key){
 800a8ba:	1dfb      	adds	r3, r7, #7
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	2b07      	cmp	r3, #7
 800a8c0:	f200 8298 	bhi.w	800adf4 <scaraKeyInit1+0x584>
 800a8c4:	a201      	add	r2, pc, #4	; (adr r2, 800a8cc <scaraKeyInit1+0x5c>)
 800a8c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ca:	bf00      	nop
 800a8cc:	0800a8ed 	.word	0x0800a8ed
 800a8d0:	0800a98f 	.word	0x0800a98f
 800a8d4:	0800aa35 	.word	0x0800aa35
 800a8d8:	0800aad3 	.word	0x0800aad3
 800a8dc:	0800ab75 	.word	0x0800ab75
 800a8e0:	0800ac13 	.word	0x0800ac13
 800a8e4:	0800acb5 	.word	0x0800acb5
 800a8e8:	0800ad53 	.word	0x0800ad53
		case SCARA_KEY_X_INC:{
			cmd.v_factor = 0;
 800a8ec:	f107 0208 	add.w	r2, r7, #8
 800a8f0:	f04f 0300 	mov.w	r3, #0
 800a8f4:	f04f 0400 	mov.w	r4, #0
 800a8f8:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a8fc:	f107 0308 	add.w	r3, r7, #8
 800a900:	2200      	movs	r2, #0
 800a902:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a904:	f107 0308 	add.w	r3, r7, #8
 800a908:	2200      	movs	r2, #0
 800a90a:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= speed*SHIFT_KEY_S;
 800a90c:	463b      	mov	r3, r7
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	4613      	mov	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4413      	add	r3, r2
 800a916:	4618      	mov	r0, r3
 800a918:	f7f5 fe04 	bl	8000524 <__aeabi_i2d>
 800a91c:	4603      	mov	r3, r0
 800a91e:	460c      	mov	r4, r1
 800a920:	f107 0208 	add.w	r2, r7, #8
 800a924:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800a928:	f107 0208 	add.w	r2, r7, #8
 800a92c:	f04f 0300 	mov.w	r3, #0
 800a930:	f04f 0400 	mov.w	r4, #0
 800a934:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a938:	f107 0208 	add.w	r2, r7, #8
 800a93c:	f04f 0300 	mov.w	r3, #0
 800a940:	f04f 0400 	mov.w	r4, #0
 800a944:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a948:	f107 0208 	add.w	r2, r7, #8
 800a94c:	f04f 0300 	mov.w	r3, #0
 800a950:	f04f 0400 	mov.w	r4, #0
 800a954:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a958:	463b      	mov	r3, r7
 800a95a:	6818      	ldr	r0, [r3, #0]
 800a95c:	f7f5 fde2 	bl	8000524 <__aeabi_i2d>
 800a960:	f20f 43e4 	addw	r3, pc, #1252	; 0x4e4
 800a964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a968:	f7f5 fe46 	bl	80005f8 <__aeabi_dmul>
 800a96c:	4603      	mov	r3, r0
 800a96e:	460c      	mov	r4, r1
 800a970:	4618      	mov	r0, r3
 800a972:	4621      	mov	r1, r4
 800a974:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 800a978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97c:	f7f5 fc86 	bl	800028c <__adddf3>
 800a980:	4603      	mov	r3, r0
 800a982:	460c      	mov	r4, r1
 800a984:	f107 0208 	add.w	r2, r7, #8
 800a988:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800a98c:	e232      	b.n	800adf4 <scaraKeyInit1+0x584>
		case SCARA_KEY_X_DEC:{
			cmd.v_factor = 0;
 800a98e:	f107 0208 	add.w	r2, r7, #8
 800a992:	f04f 0300 	mov.w	r3, #0
 800a996:	f04f 0400 	mov.w	r4, #0
 800a99a:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a99e:	f107 0308 	add.w	r3, r7, #8
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a9a6:	f107 0308 	add.w	r3, r7, #8
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= -speed*SHIFT_KEY_S;
 800a9ae:	463b      	mov	r3, r7
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	079b      	lsls	r3, r3, #30
 800a9b6:	1a9b      	subs	r3, r3, r2
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	1a9b      	subs	r3, r3, r2
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7f5 fdb1 	bl	8000524 <__aeabi_i2d>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	460c      	mov	r4, r1
 800a9c6:	f107 0208 	add.w	r2, r7, #8
 800a9ca:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800a9ce:	f107 0208 	add.w	r2, r7, #8
 800a9d2:	f04f 0300 	mov.w	r3, #0
 800a9d6:	f04f 0400 	mov.w	r4, #0
 800a9da:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a9de:	f107 0208 	add.w	r2, r7, #8
 800a9e2:	f04f 0300 	mov.w	r3, #0
 800a9e6:	f04f 0400 	mov.w	r4, #0
 800a9ea:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a9ee:	f107 0208 	add.w	r2, r7, #8
 800a9f2:	f04f 0300 	mov.w	r3, #0
 800a9f6:	f04f 0400 	mov.w	r4, #0
 800a9fa:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800a9fe:	463b      	mov	r3, r7
 800aa00:	6818      	ldr	r0, [r3, #0]
 800aa02:	f7f5 fd8f 	bl	8000524 <__aeabi_i2d>
 800aa06:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 800aa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0e:	f7f5 fdf3 	bl	80005f8 <__aeabi_dmul>
 800aa12:	4603      	mov	r3, r0
 800aa14:	460c      	mov	r4, r1
 800aa16:	4618      	mov	r0, r3
 800aa18:	4621      	mov	r1, r4
 800aa1a:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 800aa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa22:	f7f5 fc33 	bl	800028c <__adddf3>
 800aa26:	4603      	mov	r3, r0
 800aa28:	460c      	mov	r4, r1
 800aa2a:	f107 0208 	add.w	r2, r7, #8
 800aa2e:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800aa32:	e1df      	b.n	800adf4 <scaraKeyInit1+0x584>
		case SCARA_KEY_Y_INC:{
			cmd.v_factor = 0;
 800aa34:	f107 0208 	add.w	r2, r7, #8
 800aa38:	f04f 0300 	mov.w	r3, #0
 800aa3c:	f04f 0400 	mov.w	r4, #0
 800aa40:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800aa44:	f107 0308 	add.w	r3, r7, #8
 800aa48:	2200      	movs	r2, #0
 800aa4a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aa4c:	f107 0308 	add.w	r3, r7, #8
 800aa50:	2200      	movs	r2, #0
 800aa52:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800aa54:	f107 0208 	add.w	r2, r7, #8
 800aa58:	f04f 0300 	mov.w	r3, #0
 800aa5c:	f04f 0400 	mov.w	r4, #0
 800aa60:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= speed*SHIFT_KEY_S;
 800aa64:	463b      	mov	r3, r7
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	4613      	mov	r3, r2
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	4413      	add	r3, r2
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7f5 fd58 	bl	8000524 <__aeabi_i2d>
 800aa74:	4603      	mov	r3, r0
 800aa76:	460c      	mov	r4, r1
 800aa78:	f107 0208 	add.w	r2, r7, #8
 800aa7c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800aa80:	f107 0208 	add.w	r2, r7, #8
 800aa84:	f04f 0300 	mov.w	r3, #0
 800aa88:	f04f 0400 	mov.w	r4, #0
 800aa8c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800aa90:	f107 0208 	add.w	r2, r7, #8
 800aa94:	f04f 0300 	mov.w	r3, #0
 800aa98:	f04f 0400 	mov.w	r4, #0
 800aa9c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800aaa0:	463b      	mov	r3, r7
 800aaa2:	6818      	ldr	r0, [r3, #0]
 800aaa4:	f7f5 fd3e 	bl	8000524 <__aeabi_i2d>
 800aaa8:	a3e7      	add	r3, pc, #924	; (adr r3, 800ae48 <scaraKeyInit1+0x5d8>)
 800aaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaae:	f7f5 fda3 	bl	80005f8 <__aeabi_dmul>
 800aab2:	4603      	mov	r3, r0
 800aab4:	460c      	mov	r4, r1
 800aab6:	4618      	mov	r0, r3
 800aab8:	4621      	mov	r1, r4
 800aaba:	a3e5      	add	r3, pc, #916	; (adr r3, 800ae50 <scaraKeyInit1+0x5e0>)
 800aabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac0:	f7f5 fbe4 	bl	800028c <__adddf3>
 800aac4:	4603      	mov	r3, r0
 800aac6:	460c      	mov	r4, r1
 800aac8:	f107 0208 	add.w	r2, r7, #8
 800aacc:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800aad0:	e190      	b.n	800adf4 <scaraKeyInit1+0x584>

		case SCARA_KEY_Y_DEC:{
			cmd.v_factor = 0;
 800aad2:	f107 0208 	add.w	r2, r7, #8
 800aad6:	f04f 0300 	mov.w	r3, #0
 800aada:	f04f 0400 	mov.w	r4, #0
 800aade:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800aae2:	f107 0308 	add.w	r3, r7, #8
 800aae6:	2200      	movs	r2, #0
 800aae8:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aaea:	f107 0308 	add.w	r3, r7, #8
 800aaee:	2200      	movs	r2, #0
 800aaf0:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800aaf2:	f107 0208 	add.w	r2, r7, #8
 800aaf6:	f04f 0300 	mov.w	r3, #0
 800aafa:	f04f 0400 	mov.w	r4, #0
 800aafe:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= -speed*SHIFT_KEY_S;
 800ab02:	463b      	mov	r3, r7
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	4613      	mov	r3, r2
 800ab08:	079b      	lsls	r3, r3, #30
 800ab0a:	1a9b      	subs	r3, r3, r2
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	1a9b      	subs	r3, r3, r2
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7f5 fd07 	bl	8000524 <__aeabi_i2d>
 800ab16:	4603      	mov	r3, r0
 800ab18:	460c      	mov	r4, r1
 800ab1a:	f107 0208 	add.w	r2, r7, #8
 800ab1e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ab22:	f107 0208 	add.w	r2, r7, #8
 800ab26:	f04f 0300 	mov.w	r3, #0
 800ab2a:	f04f 0400 	mov.w	r4, #0
 800ab2e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ab32:	f107 0208 	add.w	r2, r7, #8
 800ab36:	f04f 0300 	mov.w	r3, #0
 800ab3a:	f04f 0400 	mov.w	r4, #0
 800ab3e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ab42:	463b      	mov	r3, r7
 800ab44:	6818      	ldr	r0, [r3, #0]
 800ab46:	f7f5 fced 	bl	8000524 <__aeabi_i2d>
 800ab4a:	a3bf      	add	r3, pc, #764	; (adr r3, 800ae48 <scaraKeyInit1+0x5d8>)
 800ab4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab50:	f7f5 fd52 	bl	80005f8 <__aeabi_dmul>
 800ab54:	4603      	mov	r3, r0
 800ab56:	460c      	mov	r4, r1
 800ab58:	4618      	mov	r0, r3
 800ab5a:	4621      	mov	r1, r4
 800ab5c:	a3bc      	add	r3, pc, #752	; (adr r3, 800ae50 <scaraKeyInit1+0x5e0>)
 800ab5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab62:	f7f5 fb93 	bl	800028c <__adddf3>
 800ab66:	4603      	mov	r3, r0
 800ab68:	460c      	mov	r4, r1
 800ab6a:	f107 0208 	add.w	r2, r7, #8
 800ab6e:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ab72:	e13f      	b.n	800adf4 <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_INC:{
			cmd.v_factor = 0;
 800ab74:	f107 0208 	add.w	r2, r7, #8
 800ab78:	f04f 0300 	mov.w	r3, #0
 800ab7c:	f04f 0400 	mov.w	r4, #0
 800ab80:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ab84:	f107 0308 	add.w	r3, r7, #8
 800ab88:	2200      	movs	r2, #0
 800ab8a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ab8c:	f107 0308 	add.w	r3, r7, #8
 800ab90:	2200      	movs	r2, #0
 800ab92:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ab94:	f107 0208 	add.w	r2, r7, #8
 800ab98:	f04f 0300 	mov.w	r3, #0
 800ab9c:	f04f 0400 	mov.w	r4, #0
 800aba0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800aba4:	f107 0208 	add.w	r2, r7, #8
 800aba8:	f04f 0300 	mov.w	r3, #0
 800abac:	f04f 0400 	mov.w	r4, #0
 800abb0:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= speed*SHIFT_KEY_S;
 800abb4:	463b      	mov	r3, r7
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	4613      	mov	r3, r2
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	4413      	add	r3, r2
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7f5 fcb0 	bl	8000524 <__aeabi_i2d>
 800abc4:	4603      	mov	r3, r0
 800abc6:	460c      	mov	r4, r1
 800abc8:	f107 0208 	add.w	r2, r7, #8
 800abcc:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800abd0:	f107 0208 	add.w	r2, r7, #8
 800abd4:	f04f 0300 	mov.w	r3, #0
 800abd8:	f04f 0400 	mov.w	r4, #0
 800abdc:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800abe0:	463b      	mov	r3, r7
 800abe2:	6818      	ldr	r0, [r3, #0]
 800abe4:	f7f5 fc9e 	bl	8000524 <__aeabi_i2d>
 800abe8:	a397      	add	r3, pc, #604	; (adr r3, 800ae48 <scaraKeyInit1+0x5d8>)
 800abea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abee:	f7f5 fd03 	bl	80005f8 <__aeabi_dmul>
 800abf2:	4603      	mov	r3, r0
 800abf4:	460c      	mov	r4, r1
 800abf6:	4618      	mov	r0, r3
 800abf8:	4621      	mov	r1, r4
 800abfa:	a395      	add	r3, pc, #596	; (adr r3, 800ae50 <scaraKeyInit1+0x5e0>)
 800abfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac00:	f7f5 fb44 	bl	800028c <__adddf3>
 800ac04:	4603      	mov	r3, r0
 800ac06:	460c      	mov	r4, r1
 800ac08:	f107 0208 	add.w	r2, r7, #8
 800ac0c:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ac10:	e0f0      	b.n	800adf4 <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_DEC:{
			cmd.v_factor = 0;
 800ac12:	f107 0208 	add.w	r2, r7, #8
 800ac16:	f04f 0300 	mov.w	r3, #0
 800ac1a:	f04f 0400 	mov.w	r4, #0
 800ac1e:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ac22:	f107 0308 	add.w	r3, r7, #8
 800ac26:	2200      	movs	r2, #0
 800ac28:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ac2a:	f107 0308 	add.w	r3, r7, #8
 800ac2e:	2200      	movs	r2, #0
 800ac30:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ac32:	f107 0208 	add.w	r2, r7, #8
 800ac36:	f04f 0300 	mov.w	r3, #0
 800ac3a:	f04f 0400 	mov.w	r4, #0
 800ac3e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ac42:	f107 0208 	add.w	r2, r7, #8
 800ac46:	f04f 0300 	mov.w	r3, #0
 800ac4a:	f04f 0400 	mov.w	r4, #0
 800ac4e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= -speed*SHIFT_KEY_S;
 800ac52:	463b      	mov	r3, r7
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	4613      	mov	r3, r2
 800ac58:	079b      	lsls	r3, r3, #30
 800ac5a:	1a9b      	subs	r3, r3, r2
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	1a9b      	subs	r3, r3, r2
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7f5 fc5f 	bl	8000524 <__aeabi_i2d>
 800ac66:	4603      	mov	r3, r0
 800ac68:	460c      	mov	r4, r1
 800ac6a:	f107 0208 	add.w	r2, r7, #8
 800ac6e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ac72:	f107 0208 	add.w	r2, r7, #8
 800ac76:	f04f 0300 	mov.w	r3, #0
 800ac7a:	f04f 0400 	mov.w	r4, #0
 800ac7e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ac82:	463b      	mov	r3, r7
 800ac84:	6818      	ldr	r0, [r3, #0]
 800ac86:	f7f5 fc4d 	bl	8000524 <__aeabi_i2d>
 800ac8a:	a36f      	add	r3, pc, #444	; (adr r3, 800ae48 <scaraKeyInit1+0x5d8>)
 800ac8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac90:	f7f5 fcb2 	bl	80005f8 <__aeabi_dmul>
 800ac94:	4603      	mov	r3, r0
 800ac96:	460c      	mov	r4, r1
 800ac98:	4618      	mov	r0, r3
 800ac9a:	4621      	mov	r1, r4
 800ac9c:	a36c      	add	r3, pc, #432	; (adr r3, 800ae50 <scaraKeyInit1+0x5e0>)
 800ac9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca2:	f7f5 faf3 	bl	800028c <__adddf3>
 800aca6:	4603      	mov	r3, r0
 800aca8:	460c      	mov	r4, r1
 800acaa:	f107 0208 	add.w	r2, r7, #8
 800acae:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800acb2:	e09f      	b.n	800adf4 <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_INC:{
			cmd.v_factor = 0;
 800acb4:	f107 0208 	add.w	r2, r7, #8
 800acb8:	f04f 0300 	mov.w	r3, #0
 800acbc:	f04f 0400 	mov.w	r4, #0
 800acc0:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800acc4:	f107 0308 	add.w	r3, r7, #8
 800acc8:	2200      	movs	r2, #0
 800acca:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800accc:	f107 0308 	add.w	r3, r7, #8
 800acd0:	2200      	movs	r2, #0
 800acd2:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800acd4:	f107 0208 	add.w	r2, r7, #8
 800acd8:	f04f 0300 	mov.w	r3, #0
 800acdc:	f04f 0400 	mov.w	r4, #0
 800ace0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ace4:	f107 0208 	add.w	r2, r7, #8
 800ace8:	f04f 0300 	mov.w	r3, #0
 800acec:	f04f 0400 	mov.w	r4, #0
 800acf0:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800acf4:	f107 0208 	add.w	r2, r7, #8
 800acf8:	f04f 0300 	mov.w	r3, #0
 800acfc:	f04f 0400 	mov.w	r4, #0
 800ad00:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= speed*SHIFT_KEY_S;
 800ad04:	463b      	mov	r3, r7
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	4613      	mov	r3, r2
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	4413      	add	r3, r2
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7f5 fc08 	bl	8000524 <__aeabi_i2d>
 800ad14:	4603      	mov	r3, r0
 800ad16:	460c      	mov	r4, r1
 800ad18:	f107 0208 	add.w	r2, r7, #8
 800ad1c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ad20:	463b      	mov	r3, r7
 800ad22:	6818      	ldr	r0, [r3, #0]
 800ad24:	f7f5 fbfe 	bl	8000524 <__aeabi_i2d>
 800ad28:	a347      	add	r3, pc, #284	; (adr r3, 800ae48 <scaraKeyInit1+0x5d8>)
 800ad2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2e:	f7f5 fc63 	bl	80005f8 <__aeabi_dmul>
 800ad32:	4603      	mov	r3, r0
 800ad34:	460c      	mov	r4, r1
 800ad36:	4618      	mov	r0, r3
 800ad38:	4621      	mov	r1, r4
 800ad3a:	a345      	add	r3, pc, #276	; (adr r3, 800ae50 <scaraKeyInit1+0x5e0>)
 800ad3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad40:	f7f5 faa4 	bl	800028c <__adddf3>
 800ad44:	4603      	mov	r3, r0
 800ad46:	460c      	mov	r4, r1
 800ad48:	f107 0208 	add.w	r2, r7, #8
 800ad4c:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ad50:	e050      	b.n	800adf4 <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_DEC:{
			cmd.v_factor = 0;
 800ad52:	f107 0208 	add.w	r2, r7, #8
 800ad56:	f04f 0300 	mov.w	r3, #0
 800ad5a:	f04f 0400 	mov.w	r4, #0
 800ad5e:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ad62:	f107 0308 	add.w	r3, r7, #8
 800ad66:	2200      	movs	r2, #0
 800ad68:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ad6a:	f107 0308 	add.w	r3, r7, #8
 800ad6e:	2200      	movs	r2, #0
 800ad70:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ad72:	f107 0208 	add.w	r2, r7, #8
 800ad76:	f04f 0300 	mov.w	r3, #0
 800ad7a:	f04f 0400 	mov.w	r4, #0
 800ad7e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ad82:	f107 0208 	add.w	r2, r7, #8
 800ad86:	f04f 0300 	mov.w	r3, #0
 800ad8a:	f04f 0400 	mov.w	r4, #0
 800ad8e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ad92:	f107 0208 	add.w	r2, r7, #8
 800ad96:	f04f 0300 	mov.w	r3, #0
 800ad9a:	f04f 0400 	mov.w	r4, #0
 800ad9e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= -speed*SHIFT_KEY_S;
 800ada2:	463b      	mov	r3, r7
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	4613      	mov	r3, r2
 800ada8:	079b      	lsls	r3, r3, #30
 800adaa:	1a9b      	subs	r3, r3, r2
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	1a9b      	subs	r3, r3, r2
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7f5 fbb7 	bl	8000524 <__aeabi_i2d>
 800adb6:	4603      	mov	r3, r0
 800adb8:	460c      	mov	r4, r1
 800adba:	f107 0208 	add.w	r2, r7, #8
 800adbe:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800adc2:	463b      	mov	r3, r7
 800adc4:	6818      	ldr	r0, [r3, #0]
 800adc6:	f7f5 fbad 	bl	8000524 <__aeabi_i2d>
 800adca:	a31f      	add	r3, pc, #124	; (adr r3, 800ae48 <scaraKeyInit1+0x5d8>)
 800adcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add0:	f7f5 fc12 	bl	80005f8 <__aeabi_dmul>
 800add4:	4603      	mov	r3, r0
 800add6:	460c      	mov	r4, r1
 800add8:	4618      	mov	r0, r3
 800adda:	4621      	mov	r1, r4
 800addc:	a31c      	add	r3, pc, #112	; (adr r3, 800ae50 <scaraKeyInit1+0x5e0>)
 800adde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade2:	f7f5 fa53 	bl	800028c <__adddf3>
 800ade6:	4603      	mov	r3, r0
 800ade8:	460c      	mov	r4, r1
 800adea:	f107 0208 	add.w	r2, r7, #8
 800adee:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800adf2:	bf00      	nop
	}

	status = scaraInitDuty(cmd);
 800adf4:	f107 0408 	add.w	r4, r7, #8
 800adf8:	4668      	mov	r0, sp
 800adfa:	f104 0310 	add.w	r3, r4, #16
 800adfe:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800ae02:	4619      	mov	r1, r3
 800ae04:	f00a ff2a 	bl	8015c5c <memcpy>
 800ae08:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ae0c:	f7fa fa64 	bl	80052d8 <scaraInitDuty>
 800ae10:	4603      	mov	r3, r0
 800ae12:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
	if (status == SCARA_STATUS_OK) {
 800ae16:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10b      	bne.n	800ae36 <scaraKeyInit1+0x5c6>
		status = scaraTestDuty();
 800ae1e:	f7ff faff 	bl	800a420 <scaraTestDuty>
 800ae22:	4603      	mov	r3, r0
 800ae24:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		if (status != SCARA_STATUS_OK) {
 800ae28:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d005      	beq.n	800ae3c <scaraKeyInit1+0x5cc>
			return status;
 800ae30:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800ae34:	e002      	b.n	800ae3c <scaraKeyInit1+0x5cc>
		// tinh lai run time so vs v hien tai
//		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
//		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
//		return status;
	} else {
		return status;
 800ae36:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800ae3a:	e7ff      	b.n	800ae3c <scaraKeyInit1+0x5cc>
	}
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd90      	pop	{r4, r7, pc}
 800ae46:	bf00      	nop
 800ae48:	9999999a 	.word	0x9999999a
 800ae4c:	3fa99999 	.word	0x3fa99999
 800ae50:	9999999a 	.word	0x9999999a
 800ae54:	3fe99999 	.word	0x3fe99999

0800ae58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ae5e:	2300      	movs	r3, #0
 800ae60:	607b      	str	r3, [r7, #4]
 800ae62:	4b12      	ldr	r3, [pc, #72]	; (800aeac <HAL_MspInit+0x54>)
 800ae64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae66:	4a11      	ldr	r2, [pc, #68]	; (800aeac <HAL_MspInit+0x54>)
 800ae68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae6c:	6453      	str	r3, [r2, #68]	; 0x44
 800ae6e:	4b0f      	ldr	r3, [pc, #60]	; (800aeac <HAL_MspInit+0x54>)
 800ae70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae76:	607b      	str	r3, [r7, #4]
 800ae78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	603b      	str	r3, [r7, #0]
 800ae7e:	4b0b      	ldr	r3, [pc, #44]	; (800aeac <HAL_MspInit+0x54>)
 800ae80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae82:	4a0a      	ldr	r2, [pc, #40]	; (800aeac <HAL_MspInit+0x54>)
 800ae84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae88:	6413      	str	r3, [r2, #64]	; 0x40
 800ae8a:	4b08      	ldr	r3, [pc, #32]	; (800aeac <HAL_MspInit+0x54>)
 800ae8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae92:	603b      	str	r3, [r7, #0]
 800ae94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800ae96:	2200      	movs	r2, #0
 800ae98:	210f      	movs	r1, #15
 800ae9a:	f06f 0001 	mvn.w	r0, #1
 800ae9e:	f000 fbe7 	bl	800b670 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800aea2:	bf00      	nop
 800aea4:	3708      	adds	r7, #8
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	40023800 	.word	0x40023800

0800aeb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b08c      	sub	sp, #48	; 0x30
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800aebc:	2300      	movs	r3, #0
 800aebe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800aec0:	2200      	movs	r2, #0
 800aec2:	6879      	ldr	r1, [r7, #4]
 800aec4:	2036      	movs	r0, #54	; 0x36
 800aec6:	f000 fbd3 	bl	800b670 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800aeca:	2036      	movs	r0, #54	; 0x36
 800aecc:	f000 fbec 	bl	800b6a8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800aed0:	2300      	movs	r3, #0
 800aed2:	60fb      	str	r3, [r7, #12]
 800aed4:	4b1f      	ldr	r3, [pc, #124]	; (800af54 <HAL_InitTick+0xa4>)
 800aed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed8:	4a1e      	ldr	r2, [pc, #120]	; (800af54 <HAL_InitTick+0xa4>)
 800aeda:	f043 0310 	orr.w	r3, r3, #16
 800aede:	6413      	str	r3, [r2, #64]	; 0x40
 800aee0:	4b1c      	ldr	r3, [pc, #112]	; (800af54 <HAL_InitTick+0xa4>)
 800aee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee4:	f003 0310 	and.w	r3, r3, #16
 800aee8:	60fb      	str	r3, [r7, #12]
 800aeea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800aeec:	f107 0210 	add.w	r2, r7, #16
 800aef0:	f107 0314 	add.w	r3, r7, #20
 800aef4:	4611      	mov	r1, r2
 800aef6:	4618      	mov	r0, r3
 800aef8:	f002 ff72 	bl	800dde0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800aefc:	f002 ff48 	bl	800dd90 <HAL_RCC_GetPCLK1Freq>
 800af00:	4603      	mov	r3, r0
 800af02:	005b      	lsls	r3, r3, #1
 800af04:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800af06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af08:	4a13      	ldr	r2, [pc, #76]	; (800af58 <HAL_InitTick+0xa8>)
 800af0a:	fba2 2303 	umull	r2, r3, r2, r3
 800af0e:	0c9b      	lsrs	r3, r3, #18
 800af10:	3b01      	subs	r3, #1
 800af12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800af14:	4b11      	ldr	r3, [pc, #68]	; (800af5c <HAL_InitTick+0xac>)
 800af16:	4a12      	ldr	r2, [pc, #72]	; (800af60 <HAL_InitTick+0xb0>)
 800af18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800af1a:	4b10      	ldr	r3, [pc, #64]	; (800af5c <HAL_InitTick+0xac>)
 800af1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800af20:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800af22:	4a0e      	ldr	r2, [pc, #56]	; (800af5c <HAL_InitTick+0xac>)
 800af24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af26:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800af28:	4b0c      	ldr	r3, [pc, #48]	; (800af5c <HAL_InitTick+0xac>)
 800af2a:	2200      	movs	r2, #0
 800af2c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800af2e:	4b0b      	ldr	r3, [pc, #44]	; (800af5c <HAL_InitTick+0xac>)
 800af30:	2200      	movs	r2, #0
 800af32:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800af34:	4809      	ldr	r0, [pc, #36]	; (800af5c <HAL_InitTick+0xac>)
 800af36:	f002 ff85 	bl	800de44 <HAL_TIM_Base_Init>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d104      	bne.n	800af4a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800af40:	4806      	ldr	r0, [pc, #24]	; (800af5c <HAL_InitTick+0xac>)
 800af42:	f002 ffce 	bl	800dee2 <HAL_TIM_Base_Start_IT>
 800af46:	4603      	mov	r3, r0
 800af48:	e000      	b.n	800af4c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800af4a:	2301      	movs	r3, #1
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3730      	adds	r7, #48	; 0x30
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	40023800 	.word	0x40023800
 800af58:	431bde83 	.word	0x431bde83
 800af5c:	20005d28 	.word	0x20005d28
 800af60:	40001000 	.word	0x40001000

0800af64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800af64:	b480      	push	{r7}
 800af66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800af68:	bf00      	nop
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
	...

0800af74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800af78:	2162      	movs	r1, #98	; 0x62
 800af7a:	4802      	ldr	r0, [pc, #8]	; (800af84 <HardFault_Handler+0x10>)
 800af7c:	f7f6 fd50 	bl	8001a20 <LOG_REPORT>
 800af80:	e7fa      	b.n	800af78 <HardFault_Handler+0x4>
 800af82:	bf00      	nop
 800af84:	0801b370 	.word	0x0801b370

0800af88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800af8c:	2172      	movs	r1, #114	; 0x72
 800af8e:	4802      	ldr	r0, [pc, #8]	; (800af98 <MemManage_Handler+0x10>)
 800af90:	f7f6 fd46 	bl	8001a20 <LOG_REPORT>
 800af94:	e7fa      	b.n	800af8c <MemManage_Handler+0x4>
 800af96:	bf00      	nop
 800af98:	0801b388 	.word	0x0801b388

0800af9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800afa0:	2182      	movs	r1, #130	; 0x82
 800afa2:	4802      	ldr	r0, [pc, #8]	; (800afac <BusFault_Handler+0x10>)
 800afa4:	f7f6 fd3c 	bl	8001a20 <LOG_REPORT>
 800afa8:	e7fa      	b.n	800afa0 <BusFault_Handler+0x4>
 800afaa:	bf00      	nop
 800afac:	0801b39c 	.word	0x0801b39c

0800afb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800afb0:	b480      	push	{r7}
 800afb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800afb4:	e7fe      	b.n	800afb4 <UsageFault_Handler+0x4>

0800afb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800afb6:	b480      	push	{r7}
 800afb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800afba:	bf00      	nop
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800afc8:	4802      	ldr	r0, [pc, #8]	; (800afd4 <DMA1_Stream4_IRQHandler+0x10>)
 800afca:	f000 fca3 	bl	800b914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800afce:	bf00      	nop
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	20005e28 	.word	0x20005e28

0800afd8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800afdc:	4802      	ldr	r0, [pc, #8]	; (800afe8 <UART4_IRQHandler+0x10>)
 800afde:	f003 fc0f 	bl	800e800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800afe2:	bf00      	nop
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	20005de8 	.word	0x20005de8

0800afec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800aff0:	4802      	ldr	r0, [pc, #8]	; (800affc <TIM6_DAC_IRQHandler+0x10>)
 800aff2:	f002 ff9a 	bl	800df2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800aff6:	bf00      	nop
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	20005d28 	.word	0x20005d28

0800b000 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800b004:	4b05      	ldr	r3, [pc, #20]	; (800b01c <TIM7_IRQHandler+0x1c>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2101      	movs	r1, #1
 800b00a:	4618      	mov	r0, r3
 800b00c:	f007 fadc 	bl	80125c8 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800b010:	4803      	ldr	r0, [pc, #12]	; (800b020 <TIM7_IRQHandler+0x20>)
 800b012:	f002 ff8a 	bl	800df2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800b016:	bf00      	nop
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	20004e64 	.word	0x20004e64
 800b020:	20005da8 	.word	0x20005da8

0800b024 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b028:	4802      	ldr	r0, [pc, #8]	; (800b034 <OTG_FS_IRQHandler+0x10>)
 800b02a:	f001 fa43 	bl	800c4b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b02e:	bf00      	nop
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	20006764 	.word	0x20006764

0800b038 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b040:	4b11      	ldr	r3, [pc, #68]	; (800b088 <_sbrk+0x50>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d102      	bne.n	800b04e <_sbrk+0x16>
		heap_end = &end;
 800b048:	4b0f      	ldr	r3, [pc, #60]	; (800b088 <_sbrk+0x50>)
 800b04a:	4a10      	ldr	r2, [pc, #64]	; (800b08c <_sbrk+0x54>)
 800b04c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b04e:	4b0e      	ldr	r3, [pc, #56]	; (800b088 <_sbrk+0x50>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b054:	4b0c      	ldr	r3, [pc, #48]	; (800b088 <_sbrk+0x50>)
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4413      	add	r3, r2
 800b05c:	466a      	mov	r2, sp
 800b05e:	4293      	cmp	r3, r2
 800b060:	d907      	bls.n	800b072 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b062:	f00a fdc1 	bl	8015be8 <__errno>
 800b066:	4602      	mov	r2, r0
 800b068:	230c      	movs	r3, #12
 800b06a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b06c:	f04f 33ff 	mov.w	r3, #4294967295
 800b070:	e006      	b.n	800b080 <_sbrk+0x48>
	}

	heap_end += incr;
 800b072:	4b05      	ldr	r3, [pc, #20]	; (800b088 <_sbrk+0x50>)
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	4413      	add	r3, r2
 800b07a:	4a03      	ldr	r2, [pc, #12]	; (800b088 <_sbrk+0x50>)
 800b07c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b07e:	68fb      	ldr	r3, [r7, #12]
}
 800b080:	4618      	mov	r0, r3
 800b082:	3710      	adds	r7, #16
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	20001000 	.word	0x20001000
 800b08c:	20006b70 	.word	0x20006b70

0800b090 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b090:	b480      	push	{r7}
 800b092:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b094:	4b08      	ldr	r3, [pc, #32]	; (800b0b8 <SystemInit+0x28>)
 800b096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b09a:	4a07      	ldr	r2, [pc, #28]	; (800b0b8 <SystemInit+0x28>)
 800b09c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b0a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b0a4:	4b04      	ldr	r3, [pc, #16]	; (800b0b8 <SystemInit+0x28>)
 800b0a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b0aa:	609a      	str	r2, [r3, #8]
#endif
}
 800b0ac:	bf00      	nop
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr
 800b0b6:	bf00      	nop
 800b0b8:	e000ed00 	.word	0xe000ed00

0800b0bc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b086      	sub	sp, #24
 800b0c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b0c2:	f107 0308 	add.w	r3, r7, #8
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	601a      	str	r2, [r3, #0]
 800b0ca:	605a      	str	r2, [r3, #4]
 800b0cc:	609a      	str	r2, [r3, #8]
 800b0ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b0d0:	463b      	mov	r3, r7
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	601a      	str	r2, [r3, #0]
 800b0d6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800b0d8:	4b1e      	ldr	r3, [pc, #120]	; (800b154 <MX_TIM2_Init+0x98>)
 800b0da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b0de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25000;
 800b0e0:	4b1c      	ldr	r3, [pc, #112]	; (800b154 <MX_TIM2_Init+0x98>)
 800b0e2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800b0e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b0e8:	4b1a      	ldr	r3, [pc, #104]	; (800b154 <MX_TIM2_Init+0x98>)
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800b0ee:	4b19      	ldr	r3, [pc, #100]	; (800b154 <MX_TIM2_Init+0x98>)
 800b0f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b0f6:	4b17      	ldr	r3, [pc, #92]	; (800b154 <MX_TIM2_Init+0x98>)
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b0fc:	4b15      	ldr	r3, [pc, #84]	; (800b154 <MX_TIM2_Init+0x98>)
 800b0fe:	2200      	movs	r2, #0
 800b100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b102:	4814      	ldr	r0, [pc, #80]	; (800b154 <MX_TIM2_Init+0x98>)
 800b104:	f002 fe9e 	bl	800de44 <HAL_TIM_Base_Init>
 800b108:	4603      	mov	r3, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d001      	beq.n	800b112 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800b10e:	f7f8 ff65 	bl	8003fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b116:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b118:	f107 0308 	add.w	r3, r7, #8
 800b11c:	4619      	mov	r1, r3
 800b11e:	480d      	ldr	r0, [pc, #52]	; (800b154 <MX_TIM2_Init+0x98>)
 800b120:	f003 f80b 	bl	800e13a <HAL_TIM_ConfigClockSource>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d001      	beq.n	800b12e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800b12a:	f7f8 ff57 	bl	8003fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b12e:	2300      	movs	r3, #0
 800b130:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b132:	2300      	movs	r3, #0
 800b134:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b136:	463b      	mov	r3, r7
 800b138:	4619      	mov	r1, r3
 800b13a:	4806      	ldr	r0, [pc, #24]	; (800b154 <MX_TIM2_Init+0x98>)
 800b13c:	f003 fa16 	bl	800e56c <HAL_TIMEx_MasterConfigSynchronization>
 800b140:	4603      	mov	r3, r0
 800b142:	2b00      	cmp	r3, #0
 800b144:	d001      	beq.n	800b14a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800b146:	f7f8 ff49 	bl	8003fdc <Error_Handler>
  }

}
 800b14a:	bf00      	nop
 800b14c:	3718      	adds	r7, #24
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	20005d68 	.word	0x20005d68

0800b158 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b15e:	463b      	mov	r3, r7
 800b160:	2200      	movs	r2, #0
 800b162:	601a      	str	r2, [r3, #0]
 800b164:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800b166:	4b15      	ldr	r3, [pc, #84]	; (800b1bc <MX_TIM7_Init+0x64>)
 800b168:	4a15      	ldr	r2, [pc, #84]	; (800b1c0 <MX_TIM7_Init+0x68>)
 800b16a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800b16c:	4b13      	ldr	r3, [pc, #76]	; (800b1bc <MX_TIM7_Init+0x64>)
 800b16e:	2253      	movs	r2, #83	; 0x53
 800b170:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b172:	4b12      	ldr	r3, [pc, #72]	; (800b1bc <MX_TIM7_Init+0x64>)
 800b174:	2200      	movs	r2, #0
 800b176:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800b178:	4b10      	ldr	r3, [pc, #64]	; (800b1bc <MX_TIM7_Init+0x64>)
 800b17a:	f242 720f 	movw	r2, #9999	; 0x270f
 800b17e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b180:	4b0e      	ldr	r3, [pc, #56]	; (800b1bc <MX_TIM7_Init+0x64>)
 800b182:	2200      	movs	r2, #0
 800b184:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b186:	480d      	ldr	r0, [pc, #52]	; (800b1bc <MX_TIM7_Init+0x64>)
 800b188:	f002 fe5c 	bl	800de44 <HAL_TIM_Base_Init>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d001      	beq.n	800b196 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800b192:	f7f8 ff23 	bl	8003fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b196:	2300      	movs	r3, #0
 800b198:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b19a:	2300      	movs	r3, #0
 800b19c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b19e:	463b      	mov	r3, r7
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	4806      	ldr	r0, [pc, #24]	; (800b1bc <MX_TIM7_Init+0x64>)
 800b1a4:	f003 f9e2 	bl	800e56c <HAL_TIMEx_MasterConfigSynchronization>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d001      	beq.n	800b1b2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800b1ae:	f7f8 ff15 	bl	8003fdc <Error_Handler>
  }

}
 800b1b2:	bf00      	nop
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	20005da8 	.word	0x20005da8
 800b1c0:	40001400 	.word	0x40001400

0800b1c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1d4:	d10e      	bne.n	800b1f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	60fb      	str	r3, [r7, #12]
 800b1da:	4b16      	ldr	r3, [pc, #88]	; (800b234 <HAL_TIM_Base_MspInit+0x70>)
 800b1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1de:	4a15      	ldr	r2, [pc, #84]	; (800b234 <HAL_TIM_Base_MspInit+0x70>)
 800b1e0:	f043 0301 	orr.w	r3, r3, #1
 800b1e4:	6413      	str	r3, [r2, #64]	; 0x40
 800b1e6:	4b13      	ldr	r3, [pc, #76]	; (800b234 <HAL_TIM_Base_MspInit+0x70>)
 800b1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ea:	f003 0301 	and.w	r3, r3, #1
 800b1ee:	60fb      	str	r3, [r7, #12]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800b1f2:	e01a      	b.n	800b22a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a0f      	ldr	r2, [pc, #60]	; (800b238 <HAL_TIM_Base_MspInit+0x74>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d115      	bne.n	800b22a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b1fe:	2300      	movs	r3, #0
 800b200:	60bb      	str	r3, [r7, #8]
 800b202:	4b0c      	ldr	r3, [pc, #48]	; (800b234 <HAL_TIM_Base_MspInit+0x70>)
 800b204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b206:	4a0b      	ldr	r2, [pc, #44]	; (800b234 <HAL_TIM_Base_MspInit+0x70>)
 800b208:	f043 0320 	orr.w	r3, r3, #32
 800b20c:	6413      	str	r3, [r2, #64]	; 0x40
 800b20e:	4b09      	ldr	r3, [pc, #36]	; (800b234 <HAL_TIM_Base_MspInit+0x70>)
 800b210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b212:	f003 0320 	and.w	r3, r3, #32
 800b216:	60bb      	str	r3, [r7, #8]
 800b218:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800b21a:	2200      	movs	r2, #0
 800b21c:	2105      	movs	r1, #5
 800b21e:	2037      	movs	r0, #55	; 0x37
 800b220:	f000 fa26 	bl	800b670 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b224:	2037      	movs	r0, #55	; 0x37
 800b226:	f000 fa3f 	bl	800b6a8 <HAL_NVIC_EnableIRQ>
}
 800b22a:	bf00      	nop
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	40023800 	.word	0x40023800
 800b238:	40001400 	.word	0x40001400

0800b23c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800b240:	4b11      	ldr	r3, [pc, #68]	; (800b288 <MX_UART4_Init+0x4c>)
 800b242:	4a12      	ldr	r2, [pc, #72]	; (800b28c <MX_UART4_Init+0x50>)
 800b244:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b246:	4b10      	ldr	r3, [pc, #64]	; (800b288 <MX_UART4_Init+0x4c>)
 800b248:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b24c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b24e:	4b0e      	ldr	r3, [pc, #56]	; (800b288 <MX_UART4_Init+0x4c>)
 800b250:	2200      	movs	r2, #0
 800b252:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b254:	4b0c      	ldr	r3, [pc, #48]	; (800b288 <MX_UART4_Init+0x4c>)
 800b256:	2200      	movs	r2, #0
 800b258:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b25a:	4b0b      	ldr	r3, [pc, #44]	; (800b288 <MX_UART4_Init+0x4c>)
 800b25c:	2200      	movs	r2, #0
 800b25e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b260:	4b09      	ldr	r3, [pc, #36]	; (800b288 <MX_UART4_Init+0x4c>)
 800b262:	220c      	movs	r2, #12
 800b264:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b266:	4b08      	ldr	r3, [pc, #32]	; (800b288 <MX_UART4_Init+0x4c>)
 800b268:	2200      	movs	r2, #0
 800b26a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b26c:	4b06      	ldr	r3, [pc, #24]	; (800b288 <MX_UART4_Init+0x4c>)
 800b26e:	2200      	movs	r2, #0
 800b270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b272:	4805      	ldr	r0, [pc, #20]	; (800b288 <MX_UART4_Init+0x4c>)
 800b274:	f003 fa0a 	bl	800e68c <HAL_UART_Init>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d001      	beq.n	800b282 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800b27e:	f7f8 fead 	bl	8003fdc <Error_Handler>
  }

}
 800b282:	bf00      	nop
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	20005de8 	.word	0x20005de8
 800b28c:	40004c00 	.word	0x40004c00

0800b290 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b08a      	sub	sp, #40	; 0x28
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b298:	f107 0314 	add.w	r3, r7, #20
 800b29c:	2200      	movs	r2, #0
 800b29e:	601a      	str	r2, [r3, #0]
 800b2a0:	605a      	str	r2, [r3, #4]
 800b2a2:	609a      	str	r2, [r3, #8]
 800b2a4:	60da      	str	r2, [r3, #12]
 800b2a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4a34      	ldr	r2, [pc, #208]	; (800b380 <HAL_UART_MspInit+0xf0>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d161      	bne.n	800b376 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	613b      	str	r3, [r7, #16]
 800b2b6:	4b33      	ldr	r3, [pc, #204]	; (800b384 <HAL_UART_MspInit+0xf4>)
 800b2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ba:	4a32      	ldr	r2, [pc, #200]	; (800b384 <HAL_UART_MspInit+0xf4>)
 800b2bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b2c0:	6413      	str	r3, [r2, #64]	; 0x40
 800b2c2:	4b30      	ldr	r3, [pc, #192]	; (800b384 <HAL_UART_MspInit+0xf4>)
 800b2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b2ca:	613b      	str	r3, [r7, #16]
 800b2cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	60fb      	str	r3, [r7, #12]
 800b2d2:	4b2c      	ldr	r3, [pc, #176]	; (800b384 <HAL_UART_MspInit+0xf4>)
 800b2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2d6:	4a2b      	ldr	r2, [pc, #172]	; (800b384 <HAL_UART_MspInit+0xf4>)
 800b2d8:	f043 0301 	orr.w	r3, r3, #1
 800b2dc:	6313      	str	r3, [r2, #48]	; 0x30
 800b2de:	4b29      	ldr	r3, [pc, #164]	; (800b384 <HAL_UART_MspInit+0xf4>)
 800b2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e2:	f003 0301 	and.w	r3, r3, #1
 800b2e6:	60fb      	str	r3, [r7, #12]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b2ea:	2303      	movs	r3, #3
 800b2ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2ee:	2302      	movs	r3, #2
 800b2f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800b2fa:	2308      	movs	r3, #8
 800b2fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2fe:	f107 0314 	add.w	r3, r7, #20
 800b302:	4619      	mov	r1, r3
 800b304:	4820      	ldr	r0, [pc, #128]	; (800b388 <HAL_UART_MspInit+0xf8>)
 800b306:	f000 fd7b 	bl	800be00 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800b30a:	4b20      	ldr	r3, [pc, #128]	; (800b38c <HAL_UART_MspInit+0xfc>)
 800b30c:	4a20      	ldr	r2, [pc, #128]	; (800b390 <HAL_UART_MspInit+0x100>)
 800b30e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800b310:	4b1e      	ldr	r3, [pc, #120]	; (800b38c <HAL_UART_MspInit+0xfc>)
 800b312:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b316:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b318:	4b1c      	ldr	r3, [pc, #112]	; (800b38c <HAL_UART_MspInit+0xfc>)
 800b31a:	2240      	movs	r2, #64	; 0x40
 800b31c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b31e:	4b1b      	ldr	r3, [pc, #108]	; (800b38c <HAL_UART_MspInit+0xfc>)
 800b320:	2200      	movs	r2, #0
 800b322:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b324:	4b19      	ldr	r3, [pc, #100]	; (800b38c <HAL_UART_MspInit+0xfc>)
 800b326:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b32a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b32c:	4b17      	ldr	r3, [pc, #92]	; (800b38c <HAL_UART_MspInit+0xfc>)
 800b32e:	2200      	movs	r2, #0
 800b330:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b332:	4b16      	ldr	r3, [pc, #88]	; (800b38c <HAL_UART_MspInit+0xfc>)
 800b334:	2200      	movs	r2, #0
 800b336:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800b338:	4b14      	ldr	r3, [pc, #80]	; (800b38c <HAL_UART_MspInit+0xfc>)
 800b33a:	2200      	movs	r2, #0
 800b33c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b33e:	4b13      	ldr	r3, [pc, #76]	; (800b38c <HAL_UART_MspInit+0xfc>)
 800b340:	2200      	movs	r2, #0
 800b342:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b344:	4b11      	ldr	r3, [pc, #68]	; (800b38c <HAL_UART_MspInit+0xfc>)
 800b346:	2200      	movs	r2, #0
 800b348:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800b34a:	4810      	ldr	r0, [pc, #64]	; (800b38c <HAL_UART_MspInit+0xfc>)
 800b34c:	f000 f9ba 	bl	800b6c4 <HAL_DMA_Init>
 800b350:	4603      	mov	r3, r0
 800b352:	2b00      	cmp	r3, #0
 800b354:	d001      	beq.n	800b35a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800b356:	f7f8 fe41 	bl	8003fdc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	4a0b      	ldr	r2, [pc, #44]	; (800b38c <HAL_UART_MspInit+0xfc>)
 800b35e:	631a      	str	r2, [r3, #48]	; 0x30
 800b360:	4a0a      	ldr	r2, [pc, #40]	; (800b38c <HAL_UART_MspInit+0xfc>)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800b366:	2200      	movs	r2, #0
 800b368:	2105      	movs	r1, #5
 800b36a:	2034      	movs	r0, #52	; 0x34
 800b36c:	f000 f980 	bl	800b670 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800b370:	2034      	movs	r0, #52	; 0x34
 800b372:	f000 f999 	bl	800b6a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800b376:	bf00      	nop
 800b378:	3728      	adds	r7, #40	; 0x28
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	40004c00 	.word	0x40004c00
 800b384:	40023800 	.word	0x40023800
 800b388:	40020000 	.word	0x40020000
 800b38c:	20005e28 	.word	0x20005e28
 800b390:	40026070 	.word	0x40026070

0800b394 <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a0c      	ldr	r2, [pc, #48]	; (800b3d4 <HAL_UART_TxCpltCallback+0x40>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d112      	bne.n	800b3cc <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800b3a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b3aa:	490b      	ldr	r1, [pc, #44]	; (800b3d8 <HAL_UART_TxCpltCallback+0x44>)
 800b3ac:	480b      	ldr	r0, [pc, #44]	; (800b3dc <HAL_UART_TxCpltCallback+0x48>)
 800b3ae:	f7f8 feb4 	bl	800411a <ringBuff_PopArray>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800b3b6:	89fb      	ldrh	r3, [r7, #14]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d006      	beq.n	800b3ca <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800b3bc:	89fb      	ldrh	r3, [r7, #14]
 800b3be:	461a      	mov	r2, r3
 800b3c0:	4905      	ldr	r1, [pc, #20]	; (800b3d8 <HAL_UART_TxCpltCallback+0x44>)
 800b3c2:	4807      	ldr	r0, [pc, #28]	; (800b3e0 <HAL_UART_TxCpltCallback+0x4c>)
 800b3c4:	f003 f9b0 	bl	800e728 <HAL_UART_Transmit_DMA>
 800b3c8:	e000      	b.n	800b3cc <HAL_UART_TxCpltCallback+0x38>
			return;
 800b3ca:	bf00      	nop
	}
}
 800b3cc:	3710      	adds	r7, #16
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	40004c00 	.word	0x40004c00
 800b3d8:	20004d64 	.word	0x20004d64
 800b3dc:	20000410 	.word	0x20000410
 800b3e0:	20005de8 	.word	0x20005de8

0800b3e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b3e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b41c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b3e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b3ea:	e003      	b.n	800b3f4 <LoopCopyDataInit>

0800b3ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b3ec:	4b0c      	ldr	r3, [pc, #48]	; (800b420 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b3ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b3f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b3f2:	3104      	adds	r1, #4

0800b3f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b3f4:	480b      	ldr	r0, [pc, #44]	; (800b424 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b3f6:	4b0c      	ldr	r3, [pc, #48]	; (800b428 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b3f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b3fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b3fc:	d3f6      	bcc.n	800b3ec <CopyDataInit>
  ldr  r2, =_sbss
 800b3fe:	4a0b      	ldr	r2, [pc, #44]	; (800b42c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b400:	e002      	b.n	800b408 <LoopFillZerobss>

0800b402 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b402:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b404:	f842 3b04 	str.w	r3, [r2], #4

0800b408 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b408:	4b09      	ldr	r3, [pc, #36]	; (800b430 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b40a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b40c:	d3f9      	bcc.n	800b402 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b40e:	f7ff fe3f 	bl	800b090 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b412:	f00a fbef 	bl	8015bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b416:	f7f8 fd4d 	bl	8003eb4 <main>
  bx  lr    
 800b41a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b41c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b420:	0801b908 	.word	0x0801b908
  ldr  r0, =_sdata
 800b424:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b428:	20000b80 	.word	0x20000b80
  ldr  r2, =_sbss
 800b42c:	20000b80 	.word	0x20000b80
  ldr  r3, = _ebss
 800b430:	20006b70 	.word	0x20006b70

0800b434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b434:	e7fe      	b.n	800b434 <ADC_IRQHandler>
	...

0800b438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b43c:	4b0e      	ldr	r3, [pc, #56]	; (800b478 <HAL_Init+0x40>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a0d      	ldr	r2, [pc, #52]	; (800b478 <HAL_Init+0x40>)
 800b442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b446:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b448:	4b0b      	ldr	r3, [pc, #44]	; (800b478 <HAL_Init+0x40>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4a0a      	ldr	r2, [pc, #40]	; (800b478 <HAL_Init+0x40>)
 800b44e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b452:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b454:	4b08      	ldr	r3, [pc, #32]	; (800b478 <HAL_Init+0x40>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4a07      	ldr	r2, [pc, #28]	; (800b478 <HAL_Init+0x40>)
 800b45a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b45e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b460:	2003      	movs	r0, #3
 800b462:	f000 f8fa 	bl	800b65a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b466:	2000      	movs	r0, #0
 800b468:	f7ff fd22 	bl	800aeb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b46c:	f7ff fcf4 	bl	800ae58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b470:	2300      	movs	r3, #0
}
 800b472:	4618      	mov	r0, r3
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	40023c00 	.word	0x40023c00

0800b47c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b47c:	b480      	push	{r7}
 800b47e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b480:	4b06      	ldr	r3, [pc, #24]	; (800b49c <HAL_IncTick+0x20>)
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	461a      	mov	r2, r3
 800b486:	4b06      	ldr	r3, [pc, #24]	; (800b4a0 <HAL_IncTick+0x24>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4413      	add	r3, r2
 800b48c:	4a04      	ldr	r2, [pc, #16]	; (800b4a0 <HAL_IncTick+0x24>)
 800b48e:	6013      	str	r3, [r2, #0]
}
 800b490:	bf00      	nop
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop
 800b49c:	20000830 	.word	0x20000830
 800b4a0:	20005e88 	.word	0x20005e88

0800b4a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	af00      	add	r7, sp, #0
  return uwTick;
 800b4a8:	4b03      	ldr	r3, [pc, #12]	; (800b4b8 <HAL_GetTick+0x14>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	20005e88 	.word	0x20005e88

0800b4bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b4c4:	f7ff ffee 	bl	800b4a4 <HAL_GetTick>
 800b4c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4d4:	d005      	beq.n	800b4e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b4d6:	4b09      	ldr	r3, [pc, #36]	; (800b4fc <HAL_Delay+0x40>)
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	461a      	mov	r2, r3
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	4413      	add	r3, r2
 800b4e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b4e2:	bf00      	nop
 800b4e4:	f7ff ffde 	bl	800b4a4 <HAL_GetTick>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	1ad3      	subs	r3, r2, r3
 800b4ee:	68fa      	ldr	r2, [r7, #12]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d8f7      	bhi.n	800b4e4 <HAL_Delay+0x28>
  {
  }
}
 800b4f4:	bf00      	nop
 800b4f6:	3710      	adds	r7, #16
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}
 800b4fc:	20000830 	.word	0x20000830

0800b500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f003 0307 	and.w	r3, r3, #7
 800b50e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b510:	4b0c      	ldr	r3, [pc, #48]	; (800b544 <__NVIC_SetPriorityGrouping+0x44>)
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b516:	68ba      	ldr	r2, [r7, #8]
 800b518:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b51c:	4013      	ands	r3, r2
 800b51e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b528:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b52c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b532:	4a04      	ldr	r2, [pc, #16]	; (800b544 <__NVIC_SetPriorityGrouping+0x44>)
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	60d3      	str	r3, [r2, #12]
}
 800b538:	bf00      	nop
 800b53a:	3714      	adds	r7, #20
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr
 800b544:	e000ed00 	.word	0xe000ed00

0800b548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b548:	b480      	push	{r7}
 800b54a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b54c:	4b04      	ldr	r3, [pc, #16]	; (800b560 <__NVIC_GetPriorityGrouping+0x18>)
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	0a1b      	lsrs	r3, r3, #8
 800b552:	f003 0307 	and.w	r3, r3, #7
}
 800b556:	4618      	mov	r0, r3
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr
 800b560:	e000ed00 	.word	0xe000ed00

0800b564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b564:	b480      	push	{r7}
 800b566:	b083      	sub	sp, #12
 800b568:	af00      	add	r7, sp, #0
 800b56a:	4603      	mov	r3, r0
 800b56c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b56e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b572:	2b00      	cmp	r3, #0
 800b574:	db0b      	blt.n	800b58e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b576:	79fb      	ldrb	r3, [r7, #7]
 800b578:	f003 021f 	and.w	r2, r3, #31
 800b57c:	4907      	ldr	r1, [pc, #28]	; (800b59c <__NVIC_EnableIRQ+0x38>)
 800b57e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b582:	095b      	lsrs	r3, r3, #5
 800b584:	2001      	movs	r0, #1
 800b586:	fa00 f202 	lsl.w	r2, r0, r2
 800b58a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b58e:	bf00      	nop
 800b590:	370c      	adds	r7, #12
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	e000e100 	.word	0xe000e100

0800b5a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	6039      	str	r1, [r7, #0]
 800b5aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b5ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	db0a      	blt.n	800b5ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	b2da      	uxtb	r2, r3
 800b5b8:	490c      	ldr	r1, [pc, #48]	; (800b5ec <__NVIC_SetPriority+0x4c>)
 800b5ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5be:	0112      	lsls	r2, r2, #4
 800b5c0:	b2d2      	uxtb	r2, r2
 800b5c2:	440b      	add	r3, r1
 800b5c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b5c8:	e00a      	b.n	800b5e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	b2da      	uxtb	r2, r3
 800b5ce:	4908      	ldr	r1, [pc, #32]	; (800b5f0 <__NVIC_SetPriority+0x50>)
 800b5d0:	79fb      	ldrb	r3, [r7, #7]
 800b5d2:	f003 030f 	and.w	r3, r3, #15
 800b5d6:	3b04      	subs	r3, #4
 800b5d8:	0112      	lsls	r2, r2, #4
 800b5da:	b2d2      	uxtb	r2, r2
 800b5dc:	440b      	add	r3, r1
 800b5de:	761a      	strb	r2, [r3, #24]
}
 800b5e0:	bf00      	nop
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr
 800b5ec:	e000e100 	.word	0xe000e100
 800b5f0:	e000ed00 	.word	0xe000ed00

0800b5f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b089      	sub	sp, #36	; 0x24
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f003 0307 	and.w	r3, r3, #7
 800b606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	f1c3 0307 	rsb	r3, r3, #7
 800b60e:	2b04      	cmp	r3, #4
 800b610:	bf28      	it	cs
 800b612:	2304      	movcs	r3, #4
 800b614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	3304      	adds	r3, #4
 800b61a:	2b06      	cmp	r3, #6
 800b61c:	d902      	bls.n	800b624 <NVIC_EncodePriority+0x30>
 800b61e:	69fb      	ldr	r3, [r7, #28]
 800b620:	3b03      	subs	r3, #3
 800b622:	e000      	b.n	800b626 <NVIC_EncodePriority+0x32>
 800b624:	2300      	movs	r3, #0
 800b626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b628:	f04f 32ff 	mov.w	r2, #4294967295
 800b62c:	69bb      	ldr	r3, [r7, #24]
 800b62e:	fa02 f303 	lsl.w	r3, r2, r3
 800b632:	43da      	mvns	r2, r3
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	401a      	ands	r2, r3
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b63c:	f04f 31ff 	mov.w	r1, #4294967295
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	fa01 f303 	lsl.w	r3, r1, r3
 800b646:	43d9      	mvns	r1, r3
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b64c:	4313      	orrs	r3, r2
         );
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3724      	adds	r7, #36	; 0x24
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr

0800b65a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b082      	sub	sp, #8
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f7ff ff4c 	bl	800b500 <__NVIC_SetPriorityGrouping>
}
 800b668:	bf00      	nop
 800b66a:	3708      	adds	r7, #8
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b670:	b580      	push	{r7, lr}
 800b672:	b086      	sub	sp, #24
 800b674:	af00      	add	r7, sp, #0
 800b676:	4603      	mov	r3, r0
 800b678:	60b9      	str	r1, [r7, #8]
 800b67a:	607a      	str	r2, [r7, #4]
 800b67c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b67e:	2300      	movs	r3, #0
 800b680:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b682:	f7ff ff61 	bl	800b548 <__NVIC_GetPriorityGrouping>
 800b686:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	68b9      	ldr	r1, [r7, #8]
 800b68c:	6978      	ldr	r0, [r7, #20]
 800b68e:	f7ff ffb1 	bl	800b5f4 <NVIC_EncodePriority>
 800b692:	4602      	mov	r2, r0
 800b694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b698:	4611      	mov	r1, r2
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7ff ff80 	bl	800b5a0 <__NVIC_SetPriority>
}
 800b6a0:	bf00      	nop
 800b6a2:	3718      	adds	r7, #24
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b6b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7ff ff54 	bl	800b564 <__NVIC_EnableIRQ>
}
 800b6bc:	bf00      	nop
 800b6be:	3708      	adds	r7, #8
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b086      	sub	sp, #24
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b6d0:	f7ff fee8 	bl	800b4a4 <HAL_GetTick>
 800b6d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d101      	bne.n	800b6e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	e099      	b.n	800b814 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2202      	movs	r2, #2
 800b6ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f022 0201 	bic.w	r2, r2, #1
 800b6fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b700:	e00f      	b.n	800b722 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b702:	f7ff fecf 	bl	800b4a4 <HAL_GetTick>
 800b706:	4602      	mov	r2, r0
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	1ad3      	subs	r3, r2, r3
 800b70c:	2b05      	cmp	r3, #5
 800b70e:	d908      	bls.n	800b722 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2220      	movs	r2, #32
 800b714:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2203      	movs	r2, #3
 800b71a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b71e:	2303      	movs	r3, #3
 800b720:	e078      	b.n	800b814 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f003 0301 	and.w	r3, r3, #1
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d1e8      	bne.n	800b702 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b738:	697a      	ldr	r2, [r7, #20]
 800b73a:	4b38      	ldr	r3, [pc, #224]	; (800b81c <HAL_DMA_Init+0x158>)
 800b73c:	4013      	ands	r3, r2
 800b73e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	685a      	ldr	r2, [r3, #4]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b74e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	691b      	ldr	r3, [r3, #16]
 800b754:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b75a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	699b      	ldr	r3, [r3, #24]
 800b760:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b766:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6a1b      	ldr	r3, [r3, #32]
 800b76c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b76e:	697a      	ldr	r2, [r7, #20]
 800b770:	4313      	orrs	r3, r2
 800b772:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b778:	2b04      	cmp	r3, #4
 800b77a:	d107      	bne.n	800b78c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b784:	4313      	orrs	r3, r2
 800b786:	697a      	ldr	r2, [r7, #20]
 800b788:	4313      	orrs	r3, r2
 800b78a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	697a      	ldr	r2, [r7, #20]
 800b792:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	695b      	ldr	r3, [r3, #20]
 800b79a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	f023 0307 	bic.w	r3, r3, #7
 800b7a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a8:	697a      	ldr	r2, [r7, #20]
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b2:	2b04      	cmp	r3, #4
 800b7b4:	d117      	bne.n	800b7e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ba:	697a      	ldr	r2, [r7, #20]
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d00e      	beq.n	800b7e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 fa9f 	bl	800bd0c <DMA_CheckFifoParam>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d008      	beq.n	800b7e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2240      	movs	r2, #64	; 0x40
 800b7d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2201      	movs	r2, #1
 800b7de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e016      	b.n	800b814 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	697a      	ldr	r2, [r7, #20]
 800b7ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 fa56 	bl	800bca0 <DMA_CalcBaseAndBitshift>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7fc:	223f      	movs	r2, #63	; 0x3f
 800b7fe:	409a      	lsls	r2, r3
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2200      	movs	r2, #0
 800b808:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2201      	movs	r2, #1
 800b80e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b812:	2300      	movs	r3, #0
}
 800b814:	4618      	mov	r0, r3
 800b816:	3718      	adds	r7, #24
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	f010803f 	.word	0xf010803f

0800b820 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b086      	sub	sp, #24
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]
 800b82c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b82e:	2300      	movs	r3, #0
 800b830:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b836:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d101      	bne.n	800b846 <HAL_DMA_Start_IT+0x26>
 800b842:	2302      	movs	r3, #2
 800b844:	e040      	b.n	800b8c8 <HAL_DMA_Start_IT+0xa8>
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2201      	movs	r2, #1
 800b84a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b854:	b2db      	uxtb	r3, r3
 800b856:	2b01      	cmp	r3, #1
 800b858:	d12f      	bne.n	800b8ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2202      	movs	r2, #2
 800b85e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2200      	movs	r2, #0
 800b866:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	68b9      	ldr	r1, [r7, #8]
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f000 f9e8 	bl	800bc44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b878:	223f      	movs	r2, #63	; 0x3f
 800b87a:	409a      	lsls	r2, r3
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f042 0216 	orr.w	r2, r2, #22
 800b88e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b894:	2b00      	cmp	r3, #0
 800b896:	d007      	beq.n	800b8a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f042 0208 	orr.w	r2, r2, #8
 800b8a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f042 0201 	orr.w	r2, r2, #1
 800b8b6:	601a      	str	r2, [r3, #0]
 800b8b8:	e005      	b.n	800b8c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b8c2:	2302      	movs	r3, #2
 800b8c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b8c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3718      	adds	r7, #24
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	2b02      	cmp	r3, #2
 800b8e2:	d004      	beq.n	800b8ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2280      	movs	r2, #128	; 0x80
 800b8e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e00c      	b.n	800b908 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2205      	movs	r2, #5
 800b8f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f022 0201 	bic.w	r2, r2, #1
 800b904:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b906:	2300      	movs	r3, #0
}
 800b908:	4618      	mov	r0, r3
 800b90a:	370c      	adds	r7, #12
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b086      	sub	sp, #24
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b91c:	2300      	movs	r3, #0
 800b91e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b920:	4b92      	ldr	r3, [pc, #584]	; (800bb6c <HAL_DMA_IRQHandler+0x258>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a92      	ldr	r2, [pc, #584]	; (800bb70 <HAL_DMA_IRQHandler+0x25c>)
 800b926:	fba2 2303 	umull	r2, r3, r2, r3
 800b92a:	0a9b      	lsrs	r3, r3, #10
 800b92c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b932:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b93e:	2208      	movs	r2, #8
 800b940:	409a      	lsls	r2, r3
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	4013      	ands	r3, r2
 800b946:	2b00      	cmp	r3, #0
 800b948:	d01a      	beq.n	800b980 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f003 0304 	and.w	r3, r3, #4
 800b954:	2b00      	cmp	r3, #0
 800b956:	d013      	beq.n	800b980 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f022 0204 	bic.w	r2, r2, #4
 800b966:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b96c:	2208      	movs	r2, #8
 800b96e:	409a      	lsls	r2, r3
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b978:	f043 0201 	orr.w	r2, r3, #1
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b984:	2201      	movs	r2, #1
 800b986:	409a      	lsls	r2, r3
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	4013      	ands	r3, r2
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d012      	beq.n	800b9b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	695b      	ldr	r3, [r3, #20]
 800b996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00b      	beq.n	800b9b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	409a      	lsls	r2, r3
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9ae:	f043 0202 	orr.w	r2, r3, #2
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9ba:	2204      	movs	r2, #4
 800b9bc:	409a      	lsls	r2, r3
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	4013      	ands	r3, r2
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d012      	beq.n	800b9ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f003 0302 	and.w	r3, r3, #2
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d00b      	beq.n	800b9ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9d8:	2204      	movs	r2, #4
 800b9da:	409a      	lsls	r2, r3
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9e4:	f043 0204 	orr.w	r2, r3, #4
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9f0:	2210      	movs	r2, #16
 800b9f2:	409a      	lsls	r2, r3
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	4013      	ands	r3, r2
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d043      	beq.n	800ba84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f003 0308 	and.w	r3, r3, #8
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d03c      	beq.n	800ba84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba0e:	2210      	movs	r2, #16
 800ba10:	409a      	lsls	r2, r3
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d018      	beq.n	800ba56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d108      	bne.n	800ba44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d024      	beq.n	800ba84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	4798      	blx	r3
 800ba42:	e01f      	b.n	800ba84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d01b      	beq.n	800ba84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	4798      	blx	r3
 800ba54:	e016      	b.n	800ba84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d107      	bne.n	800ba74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f022 0208 	bic.w	r2, r2, #8
 800ba72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d003      	beq.n	800ba84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba88:	2220      	movs	r2, #32
 800ba8a:	409a      	lsls	r2, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	4013      	ands	r3, r2
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	f000 808e 	beq.w	800bbb2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f003 0310 	and.w	r3, r3, #16
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f000 8086 	beq.w	800bbb2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800baaa:	2220      	movs	r2, #32
 800baac:	409a      	lsls	r2, r3
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bab8:	b2db      	uxtb	r3, r3
 800baba:	2b05      	cmp	r3, #5
 800babc:	d136      	bne.n	800bb2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f022 0216 	bic.w	r2, r2, #22
 800bacc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	695a      	ldr	r2, [r3, #20]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800badc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d103      	bne.n	800baee <HAL_DMA_IRQHandler+0x1da>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800baea:	2b00      	cmp	r3, #0
 800baec:	d007      	beq.n	800bafe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f022 0208 	bic.w	r2, r2, #8
 800bafc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb02:	223f      	movs	r2, #63	; 0x3f
 800bb04:	409a      	lsls	r2, r3
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2201      	movs	r2, #1
 800bb16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d07d      	beq.n	800bc1e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	4798      	blx	r3
        }
        return;
 800bb2a:	e078      	b.n	800bc1e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d01c      	beq.n	800bb74 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d108      	bne.n	800bb5a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d030      	beq.n	800bbb2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	4798      	blx	r3
 800bb58:	e02b      	b.n	800bbb2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d027      	beq.n	800bbb2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	4798      	blx	r3
 800bb6a:	e022      	b.n	800bbb2 <HAL_DMA_IRQHandler+0x29e>
 800bb6c:	20000828 	.word	0x20000828
 800bb70:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d10f      	bne.n	800bba2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	681a      	ldr	r2, [r3, #0]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f022 0210 	bic.w	r2, r2, #16
 800bb90:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2200      	movs	r2, #0
 800bb96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d003      	beq.n	800bbb2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d032      	beq.n	800bc20 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbbe:	f003 0301 	and.w	r3, r3, #1
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d022      	beq.n	800bc0c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2205      	movs	r2, #5
 800bbca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f022 0201 	bic.w	r2, r2, #1
 800bbdc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	60bb      	str	r3, [r7, #8]
 800bbe4:	697a      	ldr	r2, [r7, #20]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d307      	bcc.n	800bbfa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f003 0301 	and.w	r3, r3, #1
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d1f2      	bne.n	800bbde <HAL_DMA_IRQHandler+0x2ca>
 800bbf8:	e000      	b.n	800bbfc <HAL_DMA_IRQHandler+0x2e8>
          break;
 800bbfa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2201      	movs	r2, #1
 800bc08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d005      	beq.n	800bc20 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	4798      	blx	r3
 800bc1c:	e000      	b.n	800bc20 <HAL_DMA_IRQHandler+0x30c>
        return;
 800bc1e:	bf00      	nop
    }
  }
}
 800bc20:	3718      	adds	r7, #24
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop

0800bc28 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bc36:	b2db      	uxtb	r3, r3
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b085      	sub	sp, #20
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	60f8      	str	r0, [r7, #12]
 800bc4c:	60b9      	str	r1, [r7, #8]
 800bc4e:	607a      	str	r2, [r7, #4]
 800bc50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	681a      	ldr	r2, [r3, #0]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bc60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	683a      	ldr	r2, [r7, #0]
 800bc68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	689b      	ldr	r3, [r3, #8]
 800bc6e:	2b40      	cmp	r3, #64	; 0x40
 800bc70:	d108      	bne.n	800bc84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	68ba      	ldr	r2, [r7, #8]
 800bc80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800bc82:	e007      	b.n	800bc94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	68ba      	ldr	r2, [r7, #8]
 800bc8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	60da      	str	r2, [r3, #12]
}
 800bc94:	bf00      	nop
 800bc96:	3714      	adds	r7, #20
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	3b10      	subs	r3, #16
 800bcb0:	4a14      	ldr	r2, [pc, #80]	; (800bd04 <DMA_CalcBaseAndBitshift+0x64>)
 800bcb2:	fba2 2303 	umull	r2, r3, r2, r3
 800bcb6:	091b      	lsrs	r3, r3, #4
 800bcb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bcba:	4a13      	ldr	r2, [pc, #76]	; (800bd08 <DMA_CalcBaseAndBitshift+0x68>)
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	4413      	add	r3, r2
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2b03      	cmp	r3, #3
 800bccc:	d909      	bls.n	800bce2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bcd6:	f023 0303 	bic.w	r3, r3, #3
 800bcda:	1d1a      	adds	r2, r3, #4
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	659a      	str	r2, [r3, #88]	; 0x58
 800bce0:	e007      	b.n	800bcf2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bcea:	f023 0303 	bic.w	r3, r3, #3
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3714      	adds	r7, #20
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr
 800bd02:	bf00      	nop
 800bd04:	aaaaaaab 	.word	0xaaaaaaab
 800bd08:	0801b418 	.word	0x0801b418

0800bd0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b085      	sub	sp, #20
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd14:	2300      	movs	r3, #0
 800bd16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	699b      	ldr	r3, [r3, #24]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d11f      	bne.n	800bd66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	2b03      	cmp	r3, #3
 800bd2a:	d855      	bhi.n	800bdd8 <DMA_CheckFifoParam+0xcc>
 800bd2c:	a201      	add	r2, pc, #4	; (adr r2, 800bd34 <DMA_CheckFifoParam+0x28>)
 800bd2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd32:	bf00      	nop
 800bd34:	0800bd45 	.word	0x0800bd45
 800bd38:	0800bd57 	.word	0x0800bd57
 800bd3c:	0800bd45 	.word	0x0800bd45
 800bd40:	0800bdd9 	.word	0x0800bdd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d045      	beq.n	800bddc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800bd50:	2301      	movs	r3, #1
 800bd52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bd54:	e042      	b.n	800bddc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bd5e:	d13f      	bne.n	800bde0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800bd60:	2301      	movs	r3, #1
 800bd62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bd64:	e03c      	b.n	800bde0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	699b      	ldr	r3, [r3, #24]
 800bd6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd6e:	d121      	bne.n	800bdb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	2b03      	cmp	r3, #3
 800bd74:	d836      	bhi.n	800bde4 <DMA_CheckFifoParam+0xd8>
 800bd76:	a201      	add	r2, pc, #4	; (adr r2, 800bd7c <DMA_CheckFifoParam+0x70>)
 800bd78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd7c:	0800bd8d 	.word	0x0800bd8d
 800bd80:	0800bd93 	.word	0x0800bd93
 800bd84:	0800bd8d 	.word	0x0800bd8d
 800bd88:	0800bda5 	.word	0x0800bda5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	73fb      	strb	r3, [r7, #15]
      break;
 800bd90:	e02f      	b.n	800bdf2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d024      	beq.n	800bde8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bda2:	e021      	b.n	800bde8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bdac:	d11e      	bne.n	800bdec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800bdb2:	e01b      	b.n	800bdec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	2b02      	cmp	r3, #2
 800bdb8:	d902      	bls.n	800bdc0 <DMA_CheckFifoParam+0xb4>
 800bdba:	2b03      	cmp	r3, #3
 800bdbc:	d003      	beq.n	800bdc6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800bdbe:	e018      	b.n	800bdf2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	73fb      	strb	r3, [r7, #15]
      break;
 800bdc4:	e015      	b.n	800bdf2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d00e      	beq.n	800bdf0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	73fb      	strb	r3, [r7, #15]
      break;
 800bdd6:	e00b      	b.n	800bdf0 <DMA_CheckFifoParam+0xe4>
      break;
 800bdd8:	bf00      	nop
 800bdda:	e00a      	b.n	800bdf2 <DMA_CheckFifoParam+0xe6>
      break;
 800bddc:	bf00      	nop
 800bdde:	e008      	b.n	800bdf2 <DMA_CheckFifoParam+0xe6>
      break;
 800bde0:	bf00      	nop
 800bde2:	e006      	b.n	800bdf2 <DMA_CheckFifoParam+0xe6>
      break;
 800bde4:	bf00      	nop
 800bde6:	e004      	b.n	800bdf2 <DMA_CheckFifoParam+0xe6>
      break;
 800bde8:	bf00      	nop
 800bdea:	e002      	b.n	800bdf2 <DMA_CheckFifoParam+0xe6>
      break;   
 800bdec:	bf00      	nop
 800bdee:	e000      	b.n	800bdf2 <DMA_CheckFifoParam+0xe6>
      break;
 800bdf0:	bf00      	nop
    }
  } 
  
  return status; 
 800bdf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3714      	adds	r7, #20
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800be00:	b480      	push	{r7}
 800be02:	b089      	sub	sp, #36	; 0x24
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800be0a:	2300      	movs	r3, #0
 800be0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800be0e:	2300      	movs	r3, #0
 800be10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800be12:	2300      	movs	r3, #0
 800be14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800be16:	2300      	movs	r3, #0
 800be18:	61fb      	str	r3, [r7, #28]
 800be1a:	e16b      	b.n	800c0f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800be1c:	2201      	movs	r2, #1
 800be1e:	69fb      	ldr	r3, [r7, #28]
 800be20:	fa02 f303 	lsl.w	r3, r2, r3
 800be24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	697a      	ldr	r2, [r7, #20]
 800be2c:	4013      	ands	r3, r2
 800be2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800be30:	693a      	ldr	r2, [r7, #16]
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	429a      	cmp	r2, r3
 800be36:	f040 815a 	bne.w	800c0ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d00b      	beq.n	800be5a <HAL_GPIO_Init+0x5a>
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	2b02      	cmp	r3, #2
 800be48:	d007      	beq.n	800be5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800be4e:	2b11      	cmp	r3, #17
 800be50:	d003      	beq.n	800be5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	2b12      	cmp	r3, #18
 800be58:	d130      	bne.n	800bebc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	689b      	ldr	r3, [r3, #8]
 800be5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	005b      	lsls	r3, r3, #1
 800be64:	2203      	movs	r2, #3
 800be66:	fa02 f303 	lsl.w	r3, r2, r3
 800be6a:	43db      	mvns	r3, r3
 800be6c:	69ba      	ldr	r2, [r7, #24]
 800be6e:	4013      	ands	r3, r2
 800be70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	68da      	ldr	r2, [r3, #12]
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	005b      	lsls	r3, r3, #1
 800be7a:	fa02 f303 	lsl.w	r3, r2, r3
 800be7e:	69ba      	ldr	r2, [r7, #24]
 800be80:	4313      	orrs	r3, r2
 800be82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	69ba      	ldr	r2, [r7, #24]
 800be88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800be90:	2201      	movs	r2, #1
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	fa02 f303 	lsl.w	r3, r2, r3
 800be98:	43db      	mvns	r3, r3
 800be9a:	69ba      	ldr	r2, [r7, #24]
 800be9c:	4013      	ands	r3, r2
 800be9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	091b      	lsrs	r3, r3, #4
 800bea6:	f003 0201 	and.w	r2, r3, #1
 800beaa:	69fb      	ldr	r3, [r7, #28]
 800beac:	fa02 f303 	lsl.w	r3, r2, r3
 800beb0:	69ba      	ldr	r2, [r7, #24]
 800beb2:	4313      	orrs	r3, r2
 800beb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	69ba      	ldr	r2, [r7, #24]
 800beba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800bec2:	69fb      	ldr	r3, [r7, #28]
 800bec4:	005b      	lsls	r3, r3, #1
 800bec6:	2203      	movs	r2, #3
 800bec8:	fa02 f303 	lsl.w	r3, r2, r3
 800becc:	43db      	mvns	r3, r3
 800bece:	69ba      	ldr	r2, [r7, #24]
 800bed0:	4013      	ands	r3, r2
 800bed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	689a      	ldr	r2, [r3, #8]
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	005b      	lsls	r3, r3, #1
 800bedc:	fa02 f303 	lsl.w	r3, r2, r3
 800bee0:	69ba      	ldr	r2, [r7, #24]
 800bee2:	4313      	orrs	r3, r2
 800bee4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	69ba      	ldr	r2, [r7, #24]
 800beea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	2b02      	cmp	r3, #2
 800bef2:	d003      	beq.n	800befc <HAL_GPIO_Init+0xfc>
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	2b12      	cmp	r3, #18
 800befa:	d123      	bne.n	800bf44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	08da      	lsrs	r2, r3, #3
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	3208      	adds	r2, #8
 800bf04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	f003 0307 	and.w	r3, r3, #7
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	220f      	movs	r2, #15
 800bf14:	fa02 f303 	lsl.w	r3, r2, r3
 800bf18:	43db      	mvns	r3, r3
 800bf1a:	69ba      	ldr	r2, [r7, #24]
 800bf1c:	4013      	ands	r3, r2
 800bf1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	691a      	ldr	r2, [r3, #16]
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	f003 0307 	and.w	r3, r3, #7
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf30:	69ba      	ldr	r2, [r7, #24]
 800bf32:	4313      	orrs	r3, r2
 800bf34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800bf36:	69fb      	ldr	r3, [r7, #28]
 800bf38:	08da      	lsrs	r2, r3, #3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	3208      	adds	r2, #8
 800bf3e:	69b9      	ldr	r1, [r7, #24]
 800bf40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800bf4a:	69fb      	ldr	r3, [r7, #28]
 800bf4c:	005b      	lsls	r3, r3, #1
 800bf4e:	2203      	movs	r2, #3
 800bf50:	fa02 f303 	lsl.w	r3, r2, r3
 800bf54:	43db      	mvns	r3, r3
 800bf56:	69ba      	ldr	r2, [r7, #24]
 800bf58:	4013      	ands	r3, r2
 800bf5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	f003 0203 	and.w	r2, r3, #3
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	005b      	lsls	r3, r3, #1
 800bf68:	fa02 f303 	lsl.w	r3, r2, r3
 800bf6c:	69ba      	ldr	r2, [r7, #24]
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	69ba      	ldr	r2, [r7, #24]
 800bf76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f000 80b4 	beq.w	800c0ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bf86:	2300      	movs	r3, #0
 800bf88:	60fb      	str	r3, [r7, #12]
 800bf8a:	4b5f      	ldr	r3, [pc, #380]	; (800c108 <HAL_GPIO_Init+0x308>)
 800bf8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf8e:	4a5e      	ldr	r2, [pc, #376]	; (800c108 <HAL_GPIO_Init+0x308>)
 800bf90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bf94:	6453      	str	r3, [r2, #68]	; 0x44
 800bf96:	4b5c      	ldr	r3, [pc, #368]	; (800c108 <HAL_GPIO_Init+0x308>)
 800bf98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf9e:	60fb      	str	r3, [r7, #12]
 800bfa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bfa2:	4a5a      	ldr	r2, [pc, #360]	; (800c10c <HAL_GPIO_Init+0x30c>)
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	089b      	lsrs	r3, r3, #2
 800bfa8:	3302      	adds	r3, #2
 800bfaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	f003 0303 	and.w	r3, r3, #3
 800bfb6:	009b      	lsls	r3, r3, #2
 800bfb8:	220f      	movs	r2, #15
 800bfba:	fa02 f303 	lsl.w	r3, r2, r3
 800bfbe:	43db      	mvns	r3, r3
 800bfc0:	69ba      	ldr	r2, [r7, #24]
 800bfc2:	4013      	ands	r3, r2
 800bfc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4a51      	ldr	r2, [pc, #324]	; (800c110 <HAL_GPIO_Init+0x310>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d02b      	beq.n	800c026 <HAL_GPIO_Init+0x226>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	4a50      	ldr	r2, [pc, #320]	; (800c114 <HAL_GPIO_Init+0x314>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d025      	beq.n	800c022 <HAL_GPIO_Init+0x222>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	4a4f      	ldr	r2, [pc, #316]	; (800c118 <HAL_GPIO_Init+0x318>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d01f      	beq.n	800c01e <HAL_GPIO_Init+0x21e>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	4a4e      	ldr	r2, [pc, #312]	; (800c11c <HAL_GPIO_Init+0x31c>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d019      	beq.n	800c01a <HAL_GPIO_Init+0x21a>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	4a4d      	ldr	r2, [pc, #308]	; (800c120 <HAL_GPIO_Init+0x320>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d013      	beq.n	800c016 <HAL_GPIO_Init+0x216>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	4a4c      	ldr	r2, [pc, #304]	; (800c124 <HAL_GPIO_Init+0x324>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d00d      	beq.n	800c012 <HAL_GPIO_Init+0x212>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	4a4b      	ldr	r2, [pc, #300]	; (800c128 <HAL_GPIO_Init+0x328>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d007      	beq.n	800c00e <HAL_GPIO_Init+0x20e>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	4a4a      	ldr	r2, [pc, #296]	; (800c12c <HAL_GPIO_Init+0x32c>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d101      	bne.n	800c00a <HAL_GPIO_Init+0x20a>
 800c006:	2307      	movs	r3, #7
 800c008:	e00e      	b.n	800c028 <HAL_GPIO_Init+0x228>
 800c00a:	2308      	movs	r3, #8
 800c00c:	e00c      	b.n	800c028 <HAL_GPIO_Init+0x228>
 800c00e:	2306      	movs	r3, #6
 800c010:	e00a      	b.n	800c028 <HAL_GPIO_Init+0x228>
 800c012:	2305      	movs	r3, #5
 800c014:	e008      	b.n	800c028 <HAL_GPIO_Init+0x228>
 800c016:	2304      	movs	r3, #4
 800c018:	e006      	b.n	800c028 <HAL_GPIO_Init+0x228>
 800c01a:	2303      	movs	r3, #3
 800c01c:	e004      	b.n	800c028 <HAL_GPIO_Init+0x228>
 800c01e:	2302      	movs	r3, #2
 800c020:	e002      	b.n	800c028 <HAL_GPIO_Init+0x228>
 800c022:	2301      	movs	r3, #1
 800c024:	e000      	b.n	800c028 <HAL_GPIO_Init+0x228>
 800c026:	2300      	movs	r3, #0
 800c028:	69fa      	ldr	r2, [r7, #28]
 800c02a:	f002 0203 	and.w	r2, r2, #3
 800c02e:	0092      	lsls	r2, r2, #2
 800c030:	4093      	lsls	r3, r2
 800c032:	69ba      	ldr	r2, [r7, #24]
 800c034:	4313      	orrs	r3, r2
 800c036:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c038:	4934      	ldr	r1, [pc, #208]	; (800c10c <HAL_GPIO_Init+0x30c>)
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	089b      	lsrs	r3, r3, #2
 800c03e:	3302      	adds	r3, #2
 800c040:	69ba      	ldr	r2, [r7, #24]
 800c042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c046:	4b3a      	ldr	r3, [pc, #232]	; (800c130 <HAL_GPIO_Init+0x330>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	43db      	mvns	r3, r3
 800c050:	69ba      	ldr	r2, [r7, #24]
 800c052:	4013      	ands	r3, r2
 800c054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d003      	beq.n	800c06a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800c062:	69ba      	ldr	r2, [r7, #24]
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	4313      	orrs	r3, r2
 800c068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c06a:	4a31      	ldr	r2, [pc, #196]	; (800c130 <HAL_GPIO_Init+0x330>)
 800c06c:	69bb      	ldr	r3, [r7, #24]
 800c06e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c070:	4b2f      	ldr	r3, [pc, #188]	; (800c130 <HAL_GPIO_Init+0x330>)
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	43db      	mvns	r3, r3
 800c07a:	69ba      	ldr	r2, [r7, #24]
 800c07c:	4013      	ands	r3, r2
 800c07e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d003      	beq.n	800c094 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800c08c:	69ba      	ldr	r2, [r7, #24]
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	4313      	orrs	r3, r2
 800c092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c094:	4a26      	ldr	r2, [pc, #152]	; (800c130 <HAL_GPIO_Init+0x330>)
 800c096:	69bb      	ldr	r3, [r7, #24]
 800c098:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c09a:	4b25      	ldr	r3, [pc, #148]	; (800c130 <HAL_GPIO_Init+0x330>)
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	43db      	mvns	r3, r3
 800c0a4:	69ba      	ldr	r2, [r7, #24]
 800c0a6:	4013      	ands	r3, r2
 800c0a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d003      	beq.n	800c0be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c0b6:	69ba      	ldr	r2, [r7, #24]
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c0be:	4a1c      	ldr	r2, [pc, #112]	; (800c130 <HAL_GPIO_Init+0x330>)
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c0c4:	4b1a      	ldr	r3, [pc, #104]	; (800c130 <HAL_GPIO_Init+0x330>)
 800c0c6:	68db      	ldr	r3, [r3, #12]
 800c0c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	43db      	mvns	r3, r3
 800c0ce:	69ba      	ldr	r2, [r7, #24]
 800c0d0:	4013      	ands	r3, r2
 800c0d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d003      	beq.n	800c0e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c0e0:	69ba      	ldr	r2, [r7, #24]
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c0e8:	4a11      	ldr	r2, [pc, #68]	; (800c130 <HAL_GPIO_Init+0x330>)
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c0ee:	69fb      	ldr	r3, [r7, #28]
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	61fb      	str	r3, [r7, #28]
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	2b0f      	cmp	r3, #15
 800c0f8:	f67f ae90 	bls.w	800be1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c0fc:	bf00      	nop
 800c0fe:	3724      	adds	r7, #36	; 0x24
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr
 800c108:	40023800 	.word	0x40023800
 800c10c:	40013800 	.word	0x40013800
 800c110:	40020000 	.word	0x40020000
 800c114:	40020400 	.word	0x40020400
 800c118:	40020800 	.word	0x40020800
 800c11c:	40020c00 	.word	0x40020c00
 800c120:	40021000 	.word	0x40021000
 800c124:	40021400 	.word	0x40021400
 800c128:	40021800 	.word	0x40021800
 800c12c:	40021c00 	.word	0x40021c00
 800c130:	40013c00 	.word	0x40013c00

0800c134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c134:	b480      	push	{r7}
 800c136:	b083      	sub	sp, #12
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	460b      	mov	r3, r1
 800c13e:	807b      	strh	r3, [r7, #2]
 800c140:	4613      	mov	r3, r2
 800c142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c144:	787b      	ldrb	r3, [r7, #1]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d003      	beq.n	800c152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c14a:	887a      	ldrh	r2, [r7, #2]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c150:	e003      	b.n	800c15a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c152:	887b      	ldrh	r3, [r7, #2]
 800c154:	041a      	lsls	r2, r3, #16
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	619a      	str	r2, [r3, #24]
}
 800c15a:	bf00      	nop
 800c15c:	370c      	adds	r7, #12
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr
	...

0800c168 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d101      	bne.n	800c17e <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800c17a:	2301      	movs	r3, #1
 800c17c:	e043      	b.n	800c206 <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c184:	b2db      	uxtb	r3, r3
 800c186:	2b00      	cmp	r3, #0
 800c188:	d106      	bne.n	800c198 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2200      	movs	r2, #0
 800c18e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800c192:	68f8      	ldr	r0, [r7, #12]
 800c194:	f7f7 fa92 	bl	80036bc <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	3308      	adds	r3, #8
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	4610      	mov	r0, r2
 800c1a4:	f003 f97e 	bl	800f4a4 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	6818      	ldr	r0, [r3, #0]
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	689b      	ldr	r3, [r3, #8]
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	68b9      	ldr	r1, [r7, #8]
 800c1b4:	f003 f9c8 	bl	800f548 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	6858      	ldr	r0, [r3, #4]
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	689a      	ldr	r2, [r3, #8]
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1c4:	6879      	ldr	r1, [r7, #4]
 800c1c6:	f003 f9fd 	bl	800f5c4 <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	68fa      	ldr	r2, [r7, #12]
 800c1d0:	6892      	ldr	r2, [r2, #8]
 800c1d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	68fa      	ldr	r2, [r7, #12]
 800c1dc:	6892      	ldr	r2, [r2, #8]
 800c1de:	f041 0101 	orr.w	r1, r1, #1
 800c1e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	695b      	ldr	r3, [r3, #20]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d103      	bne.n	800c1f6 <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800c1ee:	4b08      	ldr	r3, [pc, #32]	; (800c210 <HAL_NOR_Init+0xa8>)
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	601a      	str	r2, [r3, #0]
 800c1f4:	e002      	b.n	800c1fc <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800c1f6:	4b06      	ldr	r3, [pc, #24]	; (800c210 <HAL_NOR_Init+0xa8>)
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2201      	movs	r2, #1
 800c200:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800c204:	2300      	movs	r3, #0
}
 800c206:	4618      	mov	r0, r3
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
 800c20e:	bf00      	nop
 800c210:	20001004 	.word	0x20001004

0800c214 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c214:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c216:	b08f      	sub	sp, #60	; 0x3c
 800c218:	af0a      	add	r7, sp, #40	; 0x28
 800c21a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d101      	bne.n	800c226 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c222:	2301      	movs	r3, #1
 800c224:	e10f      	b.n	800c446 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800c232:	b2db      	uxtb	r3, r3
 800c234:	2b00      	cmp	r3, #0
 800c236:	d106      	bne.n	800c246 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f009 f9d5 	bl	80155f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2203      	movs	r2, #3
 800c24a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c256:	2b00      	cmp	r3, #0
 800c258:	d102      	bne.n	800c260 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4618      	mov	r0, r3
 800c266:	f003 fb02 	bl	800f86e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	603b      	str	r3, [r7, #0]
 800c270:	687e      	ldr	r6, [r7, #4]
 800c272:	466d      	mov	r5, sp
 800c274:	f106 0410 	add.w	r4, r6, #16
 800c278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c27a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c27c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c27e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c280:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c284:	e885 0003 	stmia.w	r5, {r0, r1}
 800c288:	1d33      	adds	r3, r6, #4
 800c28a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c28c:	6838      	ldr	r0, [r7, #0]
 800c28e:	f003 f9d9 	bl	800f644 <USB_CoreInit>
 800c292:	4603      	mov	r3, r0
 800c294:	2b00      	cmp	r3, #0
 800c296:	d005      	beq.n	800c2a4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2202      	movs	r2, #2
 800c29c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e0d0      	b.n	800c446 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2100      	movs	r1, #0
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f003 faf0 	bl	800f890 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	73fb      	strb	r3, [r7, #15]
 800c2b4:	e04a      	b.n	800c34c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c2b6:	7bfa      	ldrb	r2, [r7, #15]
 800c2b8:	6879      	ldr	r1, [r7, #4]
 800c2ba:	4613      	mov	r3, r2
 800c2bc:	00db      	lsls	r3, r3, #3
 800c2be:	1a9b      	subs	r3, r3, r2
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	440b      	add	r3, r1
 800c2c4:	333d      	adds	r3, #61	; 0x3d
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c2ca:	7bfa      	ldrb	r2, [r7, #15]
 800c2cc:	6879      	ldr	r1, [r7, #4]
 800c2ce:	4613      	mov	r3, r2
 800c2d0:	00db      	lsls	r3, r3, #3
 800c2d2:	1a9b      	subs	r3, r3, r2
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	440b      	add	r3, r1
 800c2d8:	333c      	adds	r3, #60	; 0x3c
 800c2da:	7bfa      	ldrb	r2, [r7, #15]
 800c2dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c2de:	7bfa      	ldrb	r2, [r7, #15]
 800c2e0:	7bfb      	ldrb	r3, [r7, #15]
 800c2e2:	b298      	uxth	r0, r3
 800c2e4:	6879      	ldr	r1, [r7, #4]
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	00db      	lsls	r3, r3, #3
 800c2ea:	1a9b      	subs	r3, r3, r2
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	440b      	add	r3, r1
 800c2f0:	3342      	adds	r3, #66	; 0x42
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c2f6:	7bfa      	ldrb	r2, [r7, #15]
 800c2f8:	6879      	ldr	r1, [r7, #4]
 800c2fa:	4613      	mov	r3, r2
 800c2fc:	00db      	lsls	r3, r3, #3
 800c2fe:	1a9b      	subs	r3, r3, r2
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	440b      	add	r3, r1
 800c304:	333f      	adds	r3, #63	; 0x3f
 800c306:	2200      	movs	r2, #0
 800c308:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c30a:	7bfa      	ldrb	r2, [r7, #15]
 800c30c:	6879      	ldr	r1, [r7, #4]
 800c30e:	4613      	mov	r3, r2
 800c310:	00db      	lsls	r3, r3, #3
 800c312:	1a9b      	subs	r3, r3, r2
 800c314:	009b      	lsls	r3, r3, #2
 800c316:	440b      	add	r3, r1
 800c318:	3344      	adds	r3, #68	; 0x44
 800c31a:	2200      	movs	r2, #0
 800c31c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c31e:	7bfa      	ldrb	r2, [r7, #15]
 800c320:	6879      	ldr	r1, [r7, #4]
 800c322:	4613      	mov	r3, r2
 800c324:	00db      	lsls	r3, r3, #3
 800c326:	1a9b      	subs	r3, r3, r2
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	440b      	add	r3, r1
 800c32c:	3348      	adds	r3, #72	; 0x48
 800c32e:	2200      	movs	r2, #0
 800c330:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c332:	7bfa      	ldrb	r2, [r7, #15]
 800c334:	6879      	ldr	r1, [r7, #4]
 800c336:	4613      	mov	r3, r2
 800c338:	00db      	lsls	r3, r3, #3
 800c33a:	1a9b      	subs	r3, r3, r2
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	440b      	add	r3, r1
 800c340:	3350      	adds	r3, #80	; 0x50
 800c342:	2200      	movs	r2, #0
 800c344:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c346:	7bfb      	ldrb	r3, [r7, #15]
 800c348:	3301      	adds	r3, #1
 800c34a:	73fb      	strb	r3, [r7, #15]
 800c34c:	7bfa      	ldrb	r2, [r7, #15]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	429a      	cmp	r2, r3
 800c354:	d3af      	bcc.n	800c2b6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c356:	2300      	movs	r3, #0
 800c358:	73fb      	strb	r3, [r7, #15]
 800c35a:	e044      	b.n	800c3e6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c35c:	7bfa      	ldrb	r2, [r7, #15]
 800c35e:	6879      	ldr	r1, [r7, #4]
 800c360:	4613      	mov	r3, r2
 800c362:	00db      	lsls	r3, r3, #3
 800c364:	1a9b      	subs	r3, r3, r2
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	440b      	add	r3, r1
 800c36a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c36e:	2200      	movs	r2, #0
 800c370:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c372:	7bfa      	ldrb	r2, [r7, #15]
 800c374:	6879      	ldr	r1, [r7, #4]
 800c376:	4613      	mov	r3, r2
 800c378:	00db      	lsls	r3, r3, #3
 800c37a:	1a9b      	subs	r3, r3, r2
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	440b      	add	r3, r1
 800c380:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c384:	7bfa      	ldrb	r2, [r7, #15]
 800c386:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c388:	7bfa      	ldrb	r2, [r7, #15]
 800c38a:	6879      	ldr	r1, [r7, #4]
 800c38c:	4613      	mov	r3, r2
 800c38e:	00db      	lsls	r3, r3, #3
 800c390:	1a9b      	subs	r3, r3, r2
 800c392:	009b      	lsls	r3, r3, #2
 800c394:	440b      	add	r3, r1
 800c396:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c39a:	2200      	movs	r2, #0
 800c39c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c39e:	7bfa      	ldrb	r2, [r7, #15]
 800c3a0:	6879      	ldr	r1, [r7, #4]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	00db      	lsls	r3, r3, #3
 800c3a6:	1a9b      	subs	r3, r3, r2
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	440b      	add	r3, r1
 800c3ac:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c3b4:	7bfa      	ldrb	r2, [r7, #15]
 800c3b6:	6879      	ldr	r1, [r7, #4]
 800c3b8:	4613      	mov	r3, r2
 800c3ba:	00db      	lsls	r3, r3, #3
 800c3bc:	1a9b      	subs	r3, r3, r2
 800c3be:	009b      	lsls	r3, r3, #2
 800c3c0:	440b      	add	r3, r1
 800c3c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c3ca:	7bfa      	ldrb	r2, [r7, #15]
 800c3cc:	6879      	ldr	r1, [r7, #4]
 800c3ce:	4613      	mov	r3, r2
 800c3d0:	00db      	lsls	r3, r3, #3
 800c3d2:	1a9b      	subs	r3, r3, r2
 800c3d4:	009b      	lsls	r3, r3, #2
 800c3d6:	440b      	add	r3, r1
 800c3d8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c3dc:	2200      	movs	r2, #0
 800c3de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c3e0:	7bfb      	ldrb	r3, [r7, #15]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	73fb      	strb	r3, [r7, #15]
 800c3e6:	7bfa      	ldrb	r2, [r7, #15]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d3b5      	bcc.n	800c35c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	603b      	str	r3, [r7, #0]
 800c3f6:	687e      	ldr	r6, [r7, #4]
 800c3f8:	466d      	mov	r5, sp
 800c3fa:	f106 0410 	add.w	r4, r6, #16
 800c3fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c406:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c40a:	e885 0003 	stmia.w	r5, {r0, r1}
 800c40e:	1d33      	adds	r3, r6, #4
 800c410:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c412:	6838      	ldr	r0, [r7, #0]
 800c414:	f003 fa66 	bl	800f8e4 <USB_DevInit>
 800c418:	4603      	mov	r3, r0
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d005      	beq.n	800c42a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2202      	movs	r2, #2
 800c422:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c426:	2301      	movs	r3, #1
 800c428:	e00d      	b.n	800c446 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2200      	movs	r2, #0
 800c42e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2201      	movs	r2, #1
 800c436:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4618      	mov	r0, r3
 800c440:	f004 faae 	bl	80109a0 <USB_DevDisconnect>

  return HAL_OK;
 800c444:	2300      	movs	r3, #0
}
 800c446:	4618      	mov	r0, r3
 800c448:	3714      	adds	r7, #20
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c44e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c44e:	b580      	push	{r7, lr}
 800c450:	b084      	sub	sp, #16
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c462:	2b01      	cmp	r3, #1
 800c464:	d101      	bne.n	800c46a <HAL_PCD_Start+0x1c>
 800c466:	2302      	movs	r3, #2
 800c468:	e020      	b.n	800c4ac <HAL_PCD_Start+0x5e>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2201      	movs	r2, #1
 800c46e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c476:	2b01      	cmp	r3, #1
 800c478:	d109      	bne.n	800c48e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c47e:	2b01      	cmp	r3, #1
 800c480:	d005      	beq.n	800c48e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c486:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	4618      	mov	r0, r3
 800c494:	f003 f9da 	bl	800f84c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4618      	mov	r0, r3
 800c49e:	f004 fa5e 	bl	801095e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c4aa:	2300      	movs	r3, #0
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3710      	adds	r7, #16
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c4b4:	b590      	push	{r4, r7, lr}
 800c4b6:	b08d      	sub	sp, #52	; 0x34
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4c2:	6a3b      	ldr	r3, [r7, #32]
 800c4c4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f004 fb1c 	bl	8010b08 <USB_GetMode>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	f040 839d 	bne.w	800cc12 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f004 fa80 	bl	80109e2 <USB_ReadInterrupts>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	f000 8393 	beq.w	800cc10 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f004 fa77 	bl	80109e2 <USB_ReadInterrupts>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	f003 0302 	and.w	r3, r3, #2
 800c4fa:	2b02      	cmp	r3, #2
 800c4fc:	d107      	bne.n	800c50e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	695a      	ldr	r2, [r3, #20]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f002 0202 	and.w	r2, r2, #2
 800c50c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4618      	mov	r0, r3
 800c514:	f004 fa65 	bl	80109e2 <USB_ReadInterrupts>
 800c518:	4603      	mov	r3, r0
 800c51a:	f003 0310 	and.w	r3, r3, #16
 800c51e:	2b10      	cmp	r3, #16
 800c520:	d161      	bne.n	800c5e6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	699a      	ldr	r2, [r3, #24]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f022 0210 	bic.w	r2, r2, #16
 800c530:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800c532:	6a3b      	ldr	r3, [r7, #32]
 800c534:	6a1b      	ldr	r3, [r3, #32]
 800c536:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c538:	69bb      	ldr	r3, [r7, #24]
 800c53a:	f003 020f 	and.w	r2, r3, #15
 800c53e:	4613      	mov	r3, r2
 800c540:	00db      	lsls	r3, r3, #3
 800c542:	1a9b      	subs	r3, r3, r2
 800c544:	009b      	lsls	r3, r3, #2
 800c546:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c54a:	687a      	ldr	r2, [r7, #4]
 800c54c:	4413      	add	r3, r2
 800c54e:	3304      	adds	r3, #4
 800c550:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c552:	69bb      	ldr	r3, [r7, #24]
 800c554:	0c5b      	lsrs	r3, r3, #17
 800c556:	f003 030f 	and.w	r3, r3, #15
 800c55a:	2b02      	cmp	r3, #2
 800c55c:	d124      	bne.n	800c5a8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c55e:	69ba      	ldr	r2, [r7, #24]
 800c560:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800c564:	4013      	ands	r3, r2
 800c566:	2b00      	cmp	r3, #0
 800c568:	d035      	beq.n	800c5d6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	091b      	lsrs	r3, r3, #4
 800c572:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c574:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c578:	b29b      	uxth	r3, r3
 800c57a:	461a      	mov	r2, r3
 800c57c:	6a38      	ldr	r0, [r7, #32]
 800c57e:	f004 f8cb 	bl	8010718 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	68da      	ldr	r2, [r3, #12]
 800c586:	69bb      	ldr	r3, [r7, #24]
 800c588:	091b      	lsrs	r3, r3, #4
 800c58a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c58e:	441a      	add	r2, r3
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	699a      	ldr	r2, [r3, #24]
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	091b      	lsrs	r3, r3, #4
 800c59c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c5a0:	441a      	add	r2, r3
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	619a      	str	r2, [r3, #24]
 800c5a6:	e016      	b.n	800c5d6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c5a8:	69bb      	ldr	r3, [r7, #24]
 800c5aa:	0c5b      	lsrs	r3, r3, #17
 800c5ac:	f003 030f 	and.w	r3, r3, #15
 800c5b0:	2b06      	cmp	r3, #6
 800c5b2:	d110      	bne.n	800c5d6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c5ba:	2208      	movs	r2, #8
 800c5bc:	4619      	mov	r1, r3
 800c5be:	6a38      	ldr	r0, [r7, #32]
 800c5c0:	f004 f8aa 	bl	8010718 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	699a      	ldr	r2, [r3, #24]
 800c5c8:	69bb      	ldr	r3, [r7, #24]
 800c5ca:	091b      	lsrs	r3, r3, #4
 800c5cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c5d0:	441a      	add	r2, r3
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	699a      	ldr	r2, [r3, #24]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f042 0210 	orr.w	r2, r2, #16
 800c5e4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f004 f9f9 	bl	80109e2 <USB_ReadInterrupts>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c5f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c5fa:	d16e      	bne.n	800c6da <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4618      	mov	r0, r3
 800c606:	f004 f9ff 	bl	8010a08 <USB_ReadDevAllOutEpInterrupt>
 800c60a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800c60c:	e062      	b.n	800c6d4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c610:	f003 0301 	and.w	r3, r3, #1
 800c614:	2b00      	cmp	r3, #0
 800c616:	d057      	beq.n	800c6c8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c61e:	b2d2      	uxtb	r2, r2
 800c620:	4611      	mov	r1, r2
 800c622:	4618      	mov	r0, r3
 800c624:	f004 fa24 	bl	8010a70 <USB_ReadDevOutEPInterrupt>
 800c628:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	f003 0301 	and.w	r3, r3, #1
 800c630:	2b00      	cmp	r3, #0
 800c632:	d00c      	beq.n	800c64e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c636:	015a      	lsls	r2, r3, #5
 800c638:	69fb      	ldr	r3, [r7, #28]
 800c63a:	4413      	add	r3, r2
 800c63c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c640:	461a      	mov	r2, r3
 800c642:	2301      	movs	r3, #1
 800c644:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c646:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 fdb1 	bl	800d1b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	f003 0308 	and.w	r3, r3, #8
 800c654:	2b00      	cmp	r3, #0
 800c656:	d00c      	beq.n	800c672 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65a:	015a      	lsls	r2, r3, #5
 800c65c:	69fb      	ldr	r3, [r7, #28]
 800c65e:	4413      	add	r3, r2
 800c660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c664:	461a      	mov	r2, r3
 800c666:	2308      	movs	r3, #8
 800c668:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c66a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 feab 	bl	800d3c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	f003 0310 	and.w	r3, r3, #16
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d008      	beq.n	800c68e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67e:	015a      	lsls	r2, r3, #5
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	4413      	add	r3, r2
 800c684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c688:	461a      	mov	r2, r3
 800c68a:	2310      	movs	r3, #16
 800c68c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	f003 0320 	and.w	r3, r3, #32
 800c694:	2b00      	cmp	r3, #0
 800c696:	d008      	beq.n	800c6aa <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69a:	015a      	lsls	r2, r3, #5
 800c69c:	69fb      	ldr	r3, [r7, #28]
 800c69e:	4413      	add	r3, r2
 800c6a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	2320      	movs	r3, #32
 800c6a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d009      	beq.n	800c6c8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b6:	015a      	lsls	r2, r3, #5
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	4413      	add	r3, r2
 800c6bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c6c6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d0:	085b      	lsrs	r3, r3, #1
 800c6d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d199      	bne.n	800c60e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f004 f97f 	bl	80109e2 <USB_ReadInterrupts>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c6ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c6ee:	f040 80c0 	bne.w	800c872 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f004 f9a0 	bl	8010a3c <USB_ReadDevAllInEpInterrupt>
 800c6fc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800c6fe:	2300      	movs	r3, #0
 800c700:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800c702:	e0b2      	b.n	800c86a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c706:	f003 0301 	and.w	r3, r3, #1
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	f000 80a7 	beq.w	800c85e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c716:	b2d2      	uxtb	r2, r2
 800c718:	4611      	mov	r1, r2
 800c71a:	4618      	mov	r0, r3
 800c71c:	f004 f9c6 	bl	8010aac <USB_ReadDevInEPInterrupt>
 800c720:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	f003 0301 	and.w	r3, r3, #1
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d057      	beq.n	800c7dc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72e:	f003 030f 	and.w	r3, r3, #15
 800c732:	2201      	movs	r2, #1
 800c734:	fa02 f303 	lsl.w	r3, r2, r3
 800c738:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	43db      	mvns	r3, r3
 800c746:	69f9      	ldr	r1, [r7, #28]
 800c748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c74c:	4013      	ands	r3, r2
 800c74e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c752:	015a      	lsls	r2, r3, #5
 800c754:	69fb      	ldr	r3, [r7, #28]
 800c756:	4413      	add	r3, r2
 800c758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c75c:	461a      	mov	r2, r3
 800c75e:	2301      	movs	r3, #1
 800c760:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	691b      	ldr	r3, [r3, #16]
 800c766:	2b01      	cmp	r3, #1
 800c768:	d132      	bne.n	800c7d0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c76a:	6879      	ldr	r1, [r7, #4]
 800c76c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c76e:	4613      	mov	r3, r2
 800c770:	00db      	lsls	r3, r3, #3
 800c772:	1a9b      	subs	r3, r3, r2
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	440b      	add	r3, r1
 800c778:	3348      	adds	r3, #72	; 0x48
 800c77a:	6819      	ldr	r1, [r3, #0]
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c780:	4613      	mov	r3, r2
 800c782:	00db      	lsls	r3, r3, #3
 800c784:	1a9b      	subs	r3, r3, r2
 800c786:	009b      	lsls	r3, r3, #2
 800c788:	4403      	add	r3, r0
 800c78a:	3344      	adds	r3, #68	; 0x44
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4419      	add	r1, r3
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c794:	4613      	mov	r3, r2
 800c796:	00db      	lsls	r3, r3, #3
 800c798:	1a9b      	subs	r3, r3, r2
 800c79a:	009b      	lsls	r3, r3, #2
 800c79c:	4403      	add	r3, r0
 800c79e:	3348      	adds	r3, #72	; 0x48
 800c7a0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d113      	bne.n	800c7d0 <HAL_PCD_IRQHandler+0x31c>
 800c7a8:	6879      	ldr	r1, [r7, #4]
 800c7aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7ac:	4613      	mov	r3, r2
 800c7ae:	00db      	lsls	r3, r3, #3
 800c7b0:	1a9b      	subs	r3, r3, r2
 800c7b2:	009b      	lsls	r3, r3, #2
 800c7b4:	440b      	add	r3, r1
 800c7b6:	3350      	adds	r3, #80	; 0x50
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d108      	bne.n	800c7d0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6818      	ldr	r0, [r3, #0]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	2101      	movs	r1, #1
 800c7cc:	f004 f9ce 	bl	8010b6c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d2:	b2db      	uxtb	r3, r3
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f008 ff8b 	bl	80156f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	f003 0308 	and.w	r3, r3, #8
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d008      	beq.n	800c7f8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e8:	015a      	lsls	r2, r3, #5
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	2308      	movs	r3, #8
 800c7f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	f003 0310 	and.w	r3, r3, #16
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d008      	beq.n	800c814 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c804:	015a      	lsls	r2, r3, #5
 800c806:	69fb      	ldr	r3, [r7, #28]
 800c808:	4413      	add	r3, r2
 800c80a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c80e:	461a      	mov	r2, r3
 800c810:	2310      	movs	r3, #16
 800c812:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d008      	beq.n	800c830 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c820:	015a      	lsls	r2, r3, #5
 800c822:	69fb      	ldr	r3, [r7, #28]
 800c824:	4413      	add	r3, r2
 800c826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c82a:	461a      	mov	r2, r3
 800c82c:	2340      	movs	r3, #64	; 0x40
 800c82e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	f003 0302 	and.w	r3, r3, #2
 800c836:	2b00      	cmp	r3, #0
 800c838:	d008      	beq.n	800c84c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83c:	015a      	lsls	r2, r3, #5
 800c83e:	69fb      	ldr	r3, [r7, #28]
 800c840:	4413      	add	r3, r2
 800c842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c846:	461a      	mov	r2, r3
 800c848:	2302      	movs	r3, #2
 800c84a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c852:	2b00      	cmp	r3, #0
 800c854:	d003      	beq.n	800c85e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c856:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f000 fc1b 	bl	800d094 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c860:	3301      	adds	r3, #1
 800c862:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c866:	085b      	lsrs	r3, r3, #1
 800c868:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	f47f af49 	bne.w	800c704 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4618      	mov	r0, r3
 800c878:	f004 f8b3 	bl	80109e2 <USB_ReadInterrupts>
 800c87c:	4603      	mov	r3, r0
 800c87e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c882:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c886:	d122      	bne.n	800c8ce <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c888:	69fb      	ldr	r3, [r7, #28]
 800c88a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	69fa      	ldr	r2, [r7, #28]
 800c892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c896:	f023 0301 	bic.w	r3, r3, #1
 800c89a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800c8a2:	2b01      	cmp	r3, #1
 800c8a4:	d108      	bne.n	800c8b8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c8ae:	2100      	movs	r1, #0
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f000 fe27 	bl	800d504 <HAL_PCDEx_LPM_Callback>
 800c8b6:	e002      	b.n	800c8be <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f008 ff91 	bl	80157e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	695a      	ldr	r2, [r3, #20]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800c8cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f004 f885 	bl	80109e2 <USB_ReadInterrupts>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c8de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c8e2:	d112      	bne.n	800c90a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c8e4:	69fb      	ldr	r3, [r7, #28]
 800c8e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8ea:	689b      	ldr	r3, [r3, #8]
 800c8ec:	f003 0301 	and.w	r3, r3, #1
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	d102      	bne.n	800c8fa <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f008 ff4d 	bl	8015794 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	695a      	ldr	r2, [r3, #20]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800c908:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4618      	mov	r0, r3
 800c910:	f004 f867 	bl	80109e2 <USB_ReadInterrupts>
 800c914:	4603      	mov	r3, r0
 800c916:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c91a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c91e:	f040 80c7 	bne.w	800cab0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c922:	69fb      	ldr	r3, [r7, #28]
 800c924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	69fa      	ldr	r2, [r7, #28]
 800c92c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c930:	f023 0301 	bic.w	r3, r3, #1
 800c934:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	2110      	movs	r1, #16
 800c93c:	4618      	mov	r0, r3
 800c93e:	f003 f935 	bl	800fbac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c942:	2300      	movs	r3, #0
 800c944:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c946:	e056      	b.n	800c9f6 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94a:	015a      	lsls	r2, r3, #5
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	4413      	add	r3, r2
 800c950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c954:	461a      	mov	r2, r3
 800c956:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c95a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c95e:	015a      	lsls	r2, r3, #5
 800c960:	69fb      	ldr	r3, [r7, #28]
 800c962:	4413      	add	r3, r2
 800c964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c96c:	0151      	lsls	r1, r2, #5
 800c96e:	69fa      	ldr	r2, [r7, #28]
 800c970:	440a      	add	r2, r1
 800c972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c976:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c97a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97e:	015a      	lsls	r2, r3, #5
 800c980:	69fb      	ldr	r3, [r7, #28]
 800c982:	4413      	add	r3, r2
 800c984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c98c:	0151      	lsls	r1, r2, #5
 800c98e:	69fa      	ldr	r2, [r7, #28]
 800c990:	440a      	add	r2, r1
 800c992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c996:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c99a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99e:	015a      	lsls	r2, r3, #5
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	4413      	add	r3, r2
 800c9a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9a8:	461a      	mov	r2, r3
 800c9aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c9ae:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b2:	015a      	lsls	r2, r3, #5
 800c9b4:	69fb      	ldr	r3, [r7, #28]
 800c9b6:	4413      	add	r3, r2
 800c9b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9c0:	0151      	lsls	r1, r2, #5
 800c9c2:	69fa      	ldr	r2, [r7, #28]
 800c9c4:	440a      	add	r2, r1
 800c9c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c9ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d2:	015a      	lsls	r2, r3, #5
 800c9d4:	69fb      	ldr	r3, [r7, #28]
 800c9d6:	4413      	add	r3, r2
 800c9d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9e0:	0151      	lsls	r1, r2, #5
 800c9e2:	69fa      	ldr	r2, [r7, #28]
 800c9e4:	440a      	add	r2, r1
 800c9e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c9ee:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d3a3      	bcc.n	800c948 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800ca00:	69fb      	ldr	r3, [r7, #28]
 800ca02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca06:	69db      	ldr	r3, [r3, #28]
 800ca08:	69fa      	ldr	r2, [r7, #28]
 800ca0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca0e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800ca12:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d016      	beq.n	800ca4a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca26:	69fa      	ldr	r2, [r7, #28]
 800ca28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca2c:	f043 030b 	orr.w	r3, r3, #11
 800ca30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800ca34:	69fb      	ldr	r3, [r7, #28]
 800ca36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca3c:	69fa      	ldr	r2, [r7, #28]
 800ca3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca42:	f043 030b 	orr.w	r3, r3, #11
 800ca46:	6453      	str	r3, [r2, #68]	; 0x44
 800ca48:	e015      	b.n	800ca76 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800ca4a:	69fb      	ldr	r3, [r7, #28]
 800ca4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca50:	695b      	ldr	r3, [r3, #20]
 800ca52:	69fa      	ldr	r2, [r7, #28]
 800ca54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ca5c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800ca60:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca68:	691b      	ldr	r3, [r3, #16]
 800ca6a:	69fa      	ldr	r2, [r7, #28]
 800ca6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca70:	f043 030b 	orr.w	r3, r3, #11
 800ca74:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800ca76:	69fb      	ldr	r3, [r7, #28]
 800ca78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	69fa      	ldr	r2, [r7, #28]
 800ca80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca84:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ca88:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6818      	ldr	r0, [r3, #0]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	691b      	ldr	r3, [r3, #16]
 800ca92:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	f004 f866 	bl	8010b6c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	695a      	ldr	r2, [r3, #20]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800caae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4618      	mov	r0, r3
 800cab6:	f003 ff94 	bl	80109e2 <USB_ReadInterrupts>
 800caba:	4603      	mov	r3, r0
 800cabc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cac4:	d124      	bne.n	800cb10 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4618      	mov	r0, r3
 800cacc:	f004 f82a 	bl	8010b24 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4618      	mov	r0, r3
 800cad6:	f003 f8ca 	bl	800fc6e <USB_GetDevSpeed>
 800cada:	4603      	mov	r3, r0
 800cadc:	461a      	mov	r2, r3
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681c      	ldr	r4, [r3, #0]
 800cae6:	f001 f947 	bl	800dd78 <HAL_RCC_GetHCLKFreq>
 800caea:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	461a      	mov	r2, r3
 800caf4:	4620      	mov	r0, r4
 800caf6:	f002 fe07 	bl	800f708 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f008 fe21 	bl	8015742 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	695a      	ldr	r2, [r3, #20]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800cb0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4618      	mov	r0, r3
 800cb16:	f003 ff64 	bl	80109e2 <USB_ReadInterrupts>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	f003 0308 	and.w	r3, r3, #8
 800cb20:	2b08      	cmp	r3, #8
 800cb22:	d10a      	bne.n	800cb3a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f008 fdfe 	bl	8015726 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	695a      	ldr	r2, [r3, #20]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f002 0208 	and.w	r2, r2, #8
 800cb38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f003 ff4f 	bl	80109e2 <USB_ReadInterrupts>
 800cb44:	4603      	mov	r3, r0
 800cb46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cb4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb4e:	d10f      	bne.n	800cb70 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800cb50:	2300      	movs	r3, #0
 800cb52:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800cb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	4619      	mov	r1, r3
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f008 fe60 	bl	8015820 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	695a      	ldr	r2, [r3, #20]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800cb6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4618      	mov	r0, r3
 800cb76:	f003 ff34 	bl	80109e2 <USB_ReadInterrupts>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cb80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cb84:	d10f      	bne.n	800cba6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800cb86:	2300      	movs	r3, #0
 800cb88:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800cb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	4619      	mov	r1, r3
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f008 fe33 	bl	80157fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	695a      	ldr	r2, [r3, #20]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800cba4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f003 ff19 	bl	80109e2 <USB_ReadInterrupts>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cbb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbba:	d10a      	bne.n	800cbd2 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f008 fe41 	bl	8015844 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	695a      	ldr	r2, [r3, #20]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800cbd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f003 ff03 	bl	80109e2 <USB_ReadInterrupts>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	f003 0304 	and.w	r3, r3, #4
 800cbe2:	2b04      	cmp	r3, #4
 800cbe4:	d115      	bne.n	800cc12 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800cbee:	69bb      	ldr	r3, [r7, #24]
 800cbf0:	f003 0304 	and.w	r3, r3, #4
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d002      	beq.n	800cbfe <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f008 fe31 	bl	8015860 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	6859      	ldr	r1, [r3, #4]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	69ba      	ldr	r2, [r7, #24]
 800cc0a:	430a      	orrs	r2, r1
 800cc0c:	605a      	str	r2, [r3, #4]
 800cc0e:	e000      	b.n	800cc12 <HAL_PCD_IRQHandler+0x75e>
      return;
 800cc10:	bf00      	nop
    }
  }
}
 800cc12:	3734      	adds	r7, #52	; 0x34
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd90      	pop	{r4, r7, pc}

0800cc18 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	460b      	mov	r3, r1
 800cc22:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cc2a:	2b01      	cmp	r3, #1
 800cc2c:	d101      	bne.n	800cc32 <HAL_PCD_SetAddress+0x1a>
 800cc2e:	2302      	movs	r3, #2
 800cc30:	e013      	b.n	800cc5a <HAL_PCD_SetAddress+0x42>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2201      	movs	r2, #1
 800cc36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	78fa      	ldrb	r2, [r7, #3]
 800cc3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	78fa      	ldrb	r2, [r7, #3]
 800cc48:	4611      	mov	r1, r2
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f003 fe61 	bl	8010912 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2200      	movs	r2, #0
 800cc54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cc58:	2300      	movs	r3, #0
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3708      	adds	r7, #8
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}

0800cc62 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800cc62:	b580      	push	{r7, lr}
 800cc64:	b084      	sub	sp, #16
 800cc66:	af00      	add	r7, sp, #0
 800cc68:	6078      	str	r0, [r7, #4]
 800cc6a:	4608      	mov	r0, r1
 800cc6c:	4611      	mov	r1, r2
 800cc6e:	461a      	mov	r2, r3
 800cc70:	4603      	mov	r3, r0
 800cc72:	70fb      	strb	r3, [r7, #3]
 800cc74:	460b      	mov	r3, r1
 800cc76:	803b      	strh	r3, [r7, #0]
 800cc78:	4613      	mov	r3, r2
 800cc7a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cc80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	da0f      	bge.n	800cca8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cc88:	78fb      	ldrb	r3, [r7, #3]
 800cc8a:	f003 020f 	and.w	r2, r3, #15
 800cc8e:	4613      	mov	r3, r2
 800cc90:	00db      	lsls	r3, r3, #3
 800cc92:	1a9b      	subs	r3, r3, r2
 800cc94:	009b      	lsls	r3, r3, #2
 800cc96:	3338      	adds	r3, #56	; 0x38
 800cc98:	687a      	ldr	r2, [r7, #4]
 800cc9a:	4413      	add	r3, r2
 800cc9c:	3304      	adds	r3, #4
 800cc9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	2201      	movs	r2, #1
 800cca4:	705a      	strb	r2, [r3, #1]
 800cca6:	e00f      	b.n	800ccc8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cca8:	78fb      	ldrb	r3, [r7, #3]
 800ccaa:	f003 020f 	and.w	r2, r3, #15
 800ccae:	4613      	mov	r3, r2
 800ccb0:	00db      	lsls	r3, r3, #3
 800ccb2:	1a9b      	subs	r3, r3, r2
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	3304      	adds	r3, #4
 800ccc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ccc8:	78fb      	ldrb	r3, [r7, #3]
 800ccca:	f003 030f 	and.w	r3, r3, #15
 800ccce:	b2da      	uxtb	r2, r3
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800ccd4:	883a      	ldrh	r2, [r7, #0]
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	78ba      	ldrb	r2, [r7, #2]
 800ccde:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	785b      	ldrb	r3, [r3, #1]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d004      	beq.n	800ccf2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	b29a      	uxth	r2, r3
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ccf2:	78bb      	ldrb	r3, [r7, #2]
 800ccf4:	2b02      	cmp	r3, #2
 800ccf6:	d102      	bne.n	800ccfe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d101      	bne.n	800cd0c <HAL_PCD_EP_Open+0xaa>
 800cd08:	2302      	movs	r3, #2
 800cd0a:	e00e      	b.n	800cd2a <HAL_PCD_EP_Open+0xc8>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2201      	movs	r2, #1
 800cd10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	68f9      	ldr	r1, [r7, #12]
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f002 ffcc 	bl	800fcb8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2200      	movs	r2, #0
 800cd24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800cd28:	7afb      	ldrb	r3, [r7, #11]
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3710      	adds	r7, #16
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}

0800cd32 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cd32:	b580      	push	{r7, lr}
 800cd34:	b084      	sub	sp, #16
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	6078      	str	r0, [r7, #4]
 800cd3a:	460b      	mov	r3, r1
 800cd3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cd3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	da0f      	bge.n	800cd66 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cd46:	78fb      	ldrb	r3, [r7, #3]
 800cd48:	f003 020f 	and.w	r2, r3, #15
 800cd4c:	4613      	mov	r3, r2
 800cd4e:	00db      	lsls	r3, r3, #3
 800cd50:	1a9b      	subs	r3, r3, r2
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	3338      	adds	r3, #56	; 0x38
 800cd56:	687a      	ldr	r2, [r7, #4]
 800cd58:	4413      	add	r3, r2
 800cd5a:	3304      	adds	r3, #4
 800cd5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2201      	movs	r2, #1
 800cd62:	705a      	strb	r2, [r3, #1]
 800cd64:	e00f      	b.n	800cd86 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cd66:	78fb      	ldrb	r3, [r7, #3]
 800cd68:	f003 020f 	and.w	r2, r3, #15
 800cd6c:	4613      	mov	r3, r2
 800cd6e:	00db      	lsls	r3, r3, #3
 800cd70:	1a9b      	subs	r3, r3, r2
 800cd72:	009b      	lsls	r3, r3, #2
 800cd74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cd78:	687a      	ldr	r2, [r7, #4]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	3304      	adds	r3, #4
 800cd7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	2200      	movs	r2, #0
 800cd84:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800cd86:	78fb      	ldrb	r3, [r7, #3]
 800cd88:	f003 030f 	and.w	r3, r3, #15
 800cd8c:	b2da      	uxtb	r2, r3
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d101      	bne.n	800cda0 <HAL_PCD_EP_Close+0x6e>
 800cd9c:	2302      	movs	r3, #2
 800cd9e:	e00e      	b.n	800cdbe <HAL_PCD_EP_Close+0x8c>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2201      	movs	r2, #1
 800cda4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	68f9      	ldr	r1, [r7, #12]
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f003 f80a 	bl	800fdc8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800cdbc:	2300      	movs	r3, #0
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3710      	adds	r7, #16
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}

0800cdc6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cdc6:	b580      	push	{r7, lr}
 800cdc8:	b086      	sub	sp, #24
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	60f8      	str	r0, [r7, #12]
 800cdce:	607a      	str	r2, [r7, #4]
 800cdd0:	603b      	str	r3, [r7, #0]
 800cdd2:	460b      	mov	r3, r1
 800cdd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cdd6:	7afb      	ldrb	r3, [r7, #11]
 800cdd8:	f003 020f 	and.w	r2, r3, #15
 800cddc:	4613      	mov	r3, r2
 800cdde:	00db      	lsls	r3, r3, #3
 800cde0:	1a9b      	subs	r3, r3, r2
 800cde2:	009b      	lsls	r3, r3, #2
 800cde4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cde8:	68fa      	ldr	r2, [r7, #12]
 800cdea:	4413      	add	r3, r2
 800cdec:	3304      	adds	r3, #4
 800cdee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	683a      	ldr	r2, [r7, #0]
 800cdfa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	2200      	movs	r2, #0
 800ce06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ce08:	7afb      	ldrb	r3, [r7, #11]
 800ce0a:	f003 030f 	and.w	r3, r3, #15
 800ce0e:	b2da      	uxtb	r2, r3
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	691b      	ldr	r3, [r3, #16]
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	d102      	bne.n	800ce22 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ce22:	7afb      	ldrb	r3, [r7, #11]
 800ce24:	f003 030f 	and.w	r3, r3, #15
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d109      	bne.n	800ce40 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	6818      	ldr	r0, [r3, #0]
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	691b      	ldr	r3, [r3, #16]
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	461a      	mov	r2, r3
 800ce38:	6979      	ldr	r1, [r7, #20]
 800ce3a:	f003 fae5 	bl	8010408 <USB_EP0StartXfer>
 800ce3e:	e008      	b.n	800ce52 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	6818      	ldr	r0, [r3, #0]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	691b      	ldr	r3, [r3, #16]
 800ce48:	b2db      	uxtb	r3, r3
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	6979      	ldr	r1, [r7, #20]
 800ce4e:	f003 f897 	bl	800ff80 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ce52:	2300      	movs	r3, #0
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3718      	adds	r7, #24
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}

0800ce5c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b083      	sub	sp, #12
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	460b      	mov	r3, r1
 800ce66:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ce68:	78fb      	ldrb	r3, [r7, #3]
 800ce6a:	f003 020f 	and.w	r2, r3, #15
 800ce6e:	6879      	ldr	r1, [r7, #4]
 800ce70:	4613      	mov	r3, r2
 800ce72:	00db      	lsls	r3, r3, #3
 800ce74:	1a9b      	subs	r3, r3, r2
 800ce76:	009b      	lsls	r3, r3, #2
 800ce78:	440b      	add	r3, r1
 800ce7a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800ce7e:	681b      	ldr	r3, [r3, #0]
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	370c      	adds	r7, #12
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr

0800ce8c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b086      	sub	sp, #24
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	607a      	str	r2, [r7, #4]
 800ce96:	603b      	str	r3, [r7, #0]
 800ce98:	460b      	mov	r3, r1
 800ce9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce9c:	7afb      	ldrb	r3, [r7, #11]
 800ce9e:	f003 020f 	and.w	r2, r3, #15
 800cea2:	4613      	mov	r3, r2
 800cea4:	00db      	lsls	r3, r3, #3
 800cea6:	1a9b      	subs	r3, r3, r2
 800cea8:	009b      	lsls	r3, r3, #2
 800ceaa:	3338      	adds	r3, #56	; 0x38
 800ceac:	68fa      	ldr	r2, [r7, #12]
 800ceae:	4413      	add	r3, r2
 800ceb0:	3304      	adds	r3, #4
 800ceb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	687a      	ldr	r2, [r7, #4]
 800ceb8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	683a      	ldr	r2, [r7, #0]
 800cebe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	2200      	movs	r2, #0
 800cec4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	2201      	movs	r2, #1
 800ceca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cecc:	7afb      	ldrb	r3, [r7, #11]
 800cece:	f003 030f 	and.w	r3, r3, #15
 800ced2:	b2da      	uxtb	r2, r3
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	691b      	ldr	r3, [r3, #16]
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d102      	bne.n	800cee6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cee6:	7afb      	ldrb	r3, [r7, #11]
 800cee8:	f003 030f 	and.w	r3, r3, #15
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d109      	bne.n	800cf04 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	6818      	ldr	r0, [r3, #0]
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	691b      	ldr	r3, [r3, #16]
 800cef8:	b2db      	uxtb	r3, r3
 800cefa:	461a      	mov	r2, r3
 800cefc:	6979      	ldr	r1, [r7, #20]
 800cefe:	f003 fa83 	bl	8010408 <USB_EP0StartXfer>
 800cf02:	e008      	b.n	800cf16 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	6818      	ldr	r0, [r3, #0]
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	691b      	ldr	r3, [r3, #16]
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	461a      	mov	r2, r3
 800cf10:	6979      	ldr	r1, [r7, #20]
 800cf12:	f003 f835 	bl	800ff80 <USB_EPStartXfer>
  }

  return HAL_OK;
 800cf16:	2300      	movs	r3, #0
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3718      	adds	r7, #24
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	460b      	mov	r3, r1
 800cf2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800cf2c:	78fb      	ldrb	r3, [r7, #3]
 800cf2e:	f003 020f 	and.w	r2, r3, #15
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d901      	bls.n	800cf3e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	e050      	b.n	800cfe0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cf3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	da0f      	bge.n	800cf66 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cf46:	78fb      	ldrb	r3, [r7, #3]
 800cf48:	f003 020f 	and.w	r2, r3, #15
 800cf4c:	4613      	mov	r3, r2
 800cf4e:	00db      	lsls	r3, r3, #3
 800cf50:	1a9b      	subs	r3, r3, r2
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	3338      	adds	r3, #56	; 0x38
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	4413      	add	r3, r2
 800cf5a:	3304      	adds	r3, #4
 800cf5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2201      	movs	r2, #1
 800cf62:	705a      	strb	r2, [r3, #1]
 800cf64:	e00d      	b.n	800cf82 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800cf66:	78fa      	ldrb	r2, [r7, #3]
 800cf68:	4613      	mov	r3, r2
 800cf6a:	00db      	lsls	r3, r3, #3
 800cf6c:	1a9b      	subs	r3, r3, r2
 800cf6e:	009b      	lsls	r3, r3, #2
 800cf70:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	4413      	add	r3, r2
 800cf78:	3304      	adds	r3, #4
 800cf7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2201      	movs	r2, #1
 800cf86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cf88:	78fb      	ldrb	r3, [r7, #3]
 800cf8a:	f003 030f 	and.w	r3, r3, #15
 800cf8e:	b2da      	uxtb	r2, r3
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d101      	bne.n	800cfa2 <HAL_PCD_EP_SetStall+0x82>
 800cf9e:	2302      	movs	r3, #2
 800cfa0:	e01e      	b.n	800cfe0 <HAL_PCD_EP_SetStall+0xc0>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	68f9      	ldr	r1, [r7, #12]
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f003 fbda 	bl	801076a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cfb6:	78fb      	ldrb	r3, [r7, #3]
 800cfb8:	f003 030f 	and.w	r3, r3, #15
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d10a      	bne.n	800cfd6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6818      	ldr	r0, [r3, #0]
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	691b      	ldr	r3, [r3, #16]
 800cfc8:	b2d9      	uxtb	r1, r3
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	f003 fdcb 	bl	8010b6c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cfde:	2300      	movs	r3, #0
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3710      	adds	r7, #16
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	460b      	mov	r3, r1
 800cff2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800cff4:	78fb      	ldrb	r3, [r7, #3]
 800cff6:	f003 020f 	and.w	r2, r3, #15
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	429a      	cmp	r2, r3
 800d000:	d901      	bls.n	800d006 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800d002:	2301      	movs	r3, #1
 800d004:	e042      	b.n	800d08c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	da0f      	bge.n	800d02e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d00e:	78fb      	ldrb	r3, [r7, #3]
 800d010:	f003 020f 	and.w	r2, r3, #15
 800d014:	4613      	mov	r3, r2
 800d016:	00db      	lsls	r3, r3, #3
 800d018:	1a9b      	subs	r3, r3, r2
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	3338      	adds	r3, #56	; 0x38
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	4413      	add	r3, r2
 800d022:	3304      	adds	r3, #4
 800d024:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	2201      	movs	r2, #1
 800d02a:	705a      	strb	r2, [r3, #1]
 800d02c:	e00f      	b.n	800d04e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d02e:	78fb      	ldrb	r3, [r7, #3]
 800d030:	f003 020f 	and.w	r2, r3, #15
 800d034:	4613      	mov	r3, r2
 800d036:	00db      	lsls	r3, r3, #3
 800d038:	1a9b      	subs	r3, r3, r2
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	4413      	add	r3, r2
 800d044:	3304      	adds	r3, #4
 800d046:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2200      	movs	r2, #0
 800d04c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2200      	movs	r2, #0
 800d052:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d054:	78fb      	ldrb	r3, [r7, #3]
 800d056:	f003 030f 	and.w	r3, r3, #15
 800d05a:	b2da      	uxtb	r2, r3
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d066:	2b01      	cmp	r3, #1
 800d068:	d101      	bne.n	800d06e <HAL_PCD_EP_ClrStall+0x86>
 800d06a:	2302      	movs	r3, #2
 800d06c:	e00e      	b.n	800d08c <HAL_PCD_EP_ClrStall+0xa4>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2201      	movs	r2, #1
 800d072:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	68f9      	ldr	r1, [r7, #12]
 800d07c:	4618      	mov	r0, r3
 800d07e:	f003 fbe2 	bl	8010846 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2200      	movs	r2, #0
 800d086:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d08a:	2300      	movs	r3, #0
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3710      	adds	r7, #16
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b08a      	sub	sp, #40	; 0x28
 800d098:	af02      	add	r7, sp, #8
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d0a8:	683a      	ldr	r2, [r7, #0]
 800d0aa:	4613      	mov	r3, r2
 800d0ac:	00db      	lsls	r3, r3, #3
 800d0ae:	1a9b      	subs	r3, r3, r2
 800d0b0:	009b      	lsls	r3, r3, #2
 800d0b2:	3338      	adds	r3, #56	; 0x38
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	4413      	add	r3, r2
 800d0b8:	3304      	adds	r3, #4
 800d0ba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	699a      	ldr	r2, [r3, #24]
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	695b      	ldr	r3, [r3, #20]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d901      	bls.n	800d0cc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	e06c      	b.n	800d1a6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	695a      	ldr	r2, [r3, #20]
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	699b      	ldr	r3, [r3, #24]
 800d0d4:	1ad3      	subs	r3, r2, r3
 800d0d6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	689b      	ldr	r3, [r3, #8]
 800d0dc:	69fa      	ldr	r2, [r7, #28]
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d902      	bls.n	800d0e8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	689b      	ldr	r3, [r3, #8]
 800d0e6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	3303      	adds	r3, #3
 800d0ec:	089b      	lsrs	r3, r3, #2
 800d0ee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d0f0:	e02b      	b.n	800d14a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	695a      	ldr	r2, [r3, #20]
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	699b      	ldr	r3, [r3, #24]
 800d0fa:	1ad3      	subs	r3, r2, r3
 800d0fc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	689b      	ldr	r3, [r3, #8]
 800d102:	69fa      	ldr	r2, [r7, #28]
 800d104:	429a      	cmp	r2, r3
 800d106:	d902      	bls.n	800d10e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	689b      	ldr	r3, [r3, #8]
 800d10c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d10e:	69fb      	ldr	r3, [r7, #28]
 800d110:	3303      	adds	r3, #3
 800d112:	089b      	lsrs	r3, r3, #2
 800d114:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	68d9      	ldr	r1, [r3, #12]
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	b2da      	uxtb	r2, r3
 800d11e:	69fb      	ldr	r3, [r7, #28]
 800d120:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d126:	b2db      	uxtb	r3, r3
 800d128:	9300      	str	r3, [sp, #0]
 800d12a:	4603      	mov	r3, r0
 800d12c:	6978      	ldr	r0, [r7, #20]
 800d12e:	f003 fabe 	bl	80106ae <USB_WritePacket>

    ep->xfer_buff  += len;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	68da      	ldr	r2, [r3, #12]
 800d136:	69fb      	ldr	r3, [r7, #28]
 800d138:	441a      	add	r2, r3
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	699a      	ldr	r2, [r3, #24]
 800d142:	69fb      	ldr	r3, [r7, #28]
 800d144:	441a      	add	r2, r3
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	015a      	lsls	r2, r3, #5
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	4413      	add	r3, r2
 800d152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d156:	699b      	ldr	r3, [r3, #24]
 800d158:	b29b      	uxth	r3, r3
 800d15a:	69ba      	ldr	r2, [r7, #24]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d809      	bhi.n	800d174 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	699a      	ldr	r2, [r3, #24]
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d168:	429a      	cmp	r2, r3
 800d16a:	d203      	bcs.n	800d174 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	695b      	ldr	r3, [r3, #20]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d1be      	bne.n	800d0f2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	695a      	ldr	r2, [r3, #20]
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	699b      	ldr	r3, [r3, #24]
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d811      	bhi.n	800d1a4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	f003 030f 	and.w	r3, r3, #15
 800d186:	2201      	movs	r2, #1
 800d188:	fa02 f303 	lsl.w	r3, r2, r3
 800d18c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	43db      	mvns	r3, r3
 800d19a:	6939      	ldr	r1, [r7, #16]
 800d19c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d1a0:	4013      	ands	r3, r2
 800d1a2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800d1a4:	2300      	movs	r3, #0
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3720      	adds	r7, #32
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
	...

0800d1b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b086      	sub	sp, #24
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	333c      	adds	r3, #60	; 0x3c
 800d1c8:	3304      	adds	r3, #4
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	015a      	lsls	r2, r3, #5
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	4413      	add	r3, r2
 800d1d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1da:	689b      	ldr	r3, [r3, #8]
 800d1dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	691b      	ldr	r3, [r3, #16]
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	f040 80a0 	bne.w	800d328 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	f003 0308 	and.w	r3, r3, #8
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d015      	beq.n	800d21e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	4a72      	ldr	r2, [pc, #456]	; (800d3c0 <PCD_EP_OutXfrComplete_int+0x210>)
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	f240 80dd 	bls.w	800d3b6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d202:	2b00      	cmp	r3, #0
 800d204:	f000 80d7 	beq.w	800d3b6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	015a      	lsls	r2, r3, #5
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	4413      	add	r3, r2
 800d210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d214:	461a      	mov	r2, r3
 800d216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d21a:	6093      	str	r3, [r2, #8]
 800d21c:	e0cb      	b.n	800d3b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	f003 0320 	and.w	r3, r3, #32
 800d224:	2b00      	cmp	r3, #0
 800d226:	d009      	beq.n	800d23c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	015a      	lsls	r2, r3, #5
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	4413      	add	r3, r2
 800d230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d234:	461a      	mov	r2, r3
 800d236:	2320      	movs	r3, #32
 800d238:	6093      	str	r3, [r2, #8]
 800d23a:	e0bc      	b.n	800d3b6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d242:	2b00      	cmp	r3, #0
 800d244:	f040 80b7 	bne.w	800d3b6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	4a5d      	ldr	r2, [pc, #372]	; (800d3c0 <PCD_EP_OutXfrComplete_int+0x210>)
 800d24c:	4293      	cmp	r3, r2
 800d24e:	d90f      	bls.n	800d270 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d256:	2b00      	cmp	r3, #0
 800d258:	d00a      	beq.n	800d270 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	015a      	lsls	r2, r3, #5
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	4413      	add	r3, r2
 800d262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d266:	461a      	mov	r2, r3
 800d268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d26c:	6093      	str	r3, [r2, #8]
 800d26e:	e0a2      	b.n	800d3b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800d270:	6879      	ldr	r1, [r7, #4]
 800d272:	683a      	ldr	r2, [r7, #0]
 800d274:	4613      	mov	r3, r2
 800d276:	00db      	lsls	r3, r3, #3
 800d278:	1a9b      	subs	r3, r3, r2
 800d27a:	009b      	lsls	r3, r3, #2
 800d27c:	440b      	add	r3, r1
 800d27e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d282:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	0159      	lsls	r1, r3, #5
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	440b      	add	r3, r1
 800d28c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d290:	691b      	ldr	r3, [r3, #16]
 800d292:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800d296:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	683a      	ldr	r2, [r7, #0]
 800d29c:	4613      	mov	r3, r2
 800d29e:	00db      	lsls	r3, r3, #3
 800d2a0:	1a9b      	subs	r3, r3, r2
 800d2a2:	009b      	lsls	r3, r3, #2
 800d2a4:	4403      	add	r3, r0
 800d2a6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d2aa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800d2ac:	6879      	ldr	r1, [r7, #4]
 800d2ae:	683a      	ldr	r2, [r7, #0]
 800d2b0:	4613      	mov	r3, r2
 800d2b2:	00db      	lsls	r3, r3, #3
 800d2b4:	1a9b      	subs	r3, r3, r2
 800d2b6:	009b      	lsls	r3, r3, #2
 800d2b8:	440b      	add	r3, r1
 800d2ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d2be:	6819      	ldr	r1, [r3, #0]
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	683a      	ldr	r2, [r7, #0]
 800d2c4:	4613      	mov	r3, r2
 800d2c6:	00db      	lsls	r3, r3, #3
 800d2c8:	1a9b      	subs	r3, r3, r2
 800d2ca:	009b      	lsls	r3, r3, #2
 800d2cc:	4403      	add	r3, r0
 800d2ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	4419      	add	r1, r3
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	683a      	ldr	r2, [r7, #0]
 800d2da:	4613      	mov	r3, r2
 800d2dc:	00db      	lsls	r3, r3, #3
 800d2de:	1a9b      	subs	r3, r3, r2
 800d2e0:	009b      	lsls	r3, r3, #2
 800d2e2:	4403      	add	r3, r0
 800d2e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d2e8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d114      	bne.n	800d31a <PCD_EP_OutXfrComplete_int+0x16a>
 800d2f0:	6879      	ldr	r1, [r7, #4]
 800d2f2:	683a      	ldr	r2, [r7, #0]
 800d2f4:	4613      	mov	r3, r2
 800d2f6:	00db      	lsls	r3, r3, #3
 800d2f8:	1a9b      	subs	r3, r3, r2
 800d2fa:	009b      	lsls	r3, r3, #2
 800d2fc:	440b      	add	r3, r1
 800d2fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d108      	bne.n	800d31a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6818      	ldr	r0, [r3, #0]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d312:	461a      	mov	r2, r3
 800d314:	2101      	movs	r1, #1
 800d316:	f003 fc29 	bl	8010b6c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	b2db      	uxtb	r3, r3
 800d31e:	4619      	mov	r1, r3
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f008 f9cb 	bl	80156bc <HAL_PCD_DataOutStageCallback>
 800d326:	e046      	b.n	800d3b6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	4a26      	ldr	r2, [pc, #152]	; (800d3c4 <PCD_EP_OutXfrComplete_int+0x214>)
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d124      	bne.n	800d37a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d336:	2b00      	cmp	r3, #0
 800d338:	d00a      	beq.n	800d350 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	015a      	lsls	r2, r3, #5
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	4413      	add	r3, r2
 800d342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d346:	461a      	mov	r2, r3
 800d348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d34c:	6093      	str	r3, [r2, #8]
 800d34e:	e032      	b.n	800d3b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	f003 0320 	and.w	r3, r3, #32
 800d356:	2b00      	cmp	r3, #0
 800d358:	d008      	beq.n	800d36c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	015a      	lsls	r2, r3, #5
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	4413      	add	r3, r2
 800d362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d366:	461a      	mov	r2, r3
 800d368:	2320      	movs	r3, #32
 800d36a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	4619      	mov	r1, r3
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f008 f9a2 	bl	80156bc <HAL_PCD_DataOutStageCallback>
 800d378:	e01d      	b.n	800d3b6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d114      	bne.n	800d3aa <PCD_EP_OutXfrComplete_int+0x1fa>
 800d380:	6879      	ldr	r1, [r7, #4]
 800d382:	683a      	ldr	r2, [r7, #0]
 800d384:	4613      	mov	r3, r2
 800d386:	00db      	lsls	r3, r3, #3
 800d388:	1a9b      	subs	r3, r3, r2
 800d38a:	009b      	lsls	r3, r3, #2
 800d38c:	440b      	add	r3, r1
 800d38e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d108      	bne.n	800d3aa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6818      	ldr	r0, [r3, #0]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d3a2:	461a      	mov	r2, r3
 800d3a4:	2100      	movs	r1, #0
 800d3a6:	f003 fbe1 	bl	8010b6c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f008 f983 	bl	80156bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d3b6:	2300      	movs	r3, #0
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3718      	adds	r7, #24
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	4f54300a 	.word	0x4f54300a
 800d3c4:	4f54310a 	.word	0x4f54310a

0800d3c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b086      	sub	sp, #24
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	333c      	adds	r3, #60	; 0x3c
 800d3e0:	3304      	adds	r3, #4
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	015a      	lsls	r2, r3, #5
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	4413      	add	r3, r2
 800d3ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3f2:	689b      	ldr	r3, [r3, #8]
 800d3f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	4a15      	ldr	r2, [pc, #84]	; (800d450 <PCD_EP_OutSetupPacket_int+0x88>)
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	d90e      	bls.n	800d41c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d404:	2b00      	cmp	r3, #0
 800d406:	d009      	beq.n	800d41c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	015a      	lsls	r2, r3, #5
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	4413      	add	r3, r2
 800d410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d414:	461a      	mov	r2, r3
 800d416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d41a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f008 f93b 	bl	8015698 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	4a0a      	ldr	r2, [pc, #40]	; (800d450 <PCD_EP_OutSetupPacket_int+0x88>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d90c      	bls.n	800d444 <PCD_EP_OutSetupPacket_int+0x7c>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	691b      	ldr	r3, [r3, #16]
 800d42e:	2b01      	cmp	r3, #1
 800d430:	d108      	bne.n	800d444 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6818      	ldr	r0, [r3, #0]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d43c:	461a      	mov	r2, r3
 800d43e:	2101      	movs	r1, #1
 800d440:	f003 fb94 	bl	8010b6c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d444:	2300      	movs	r3, #0
}
 800d446:	4618      	mov	r0, r3
 800d448:	3718      	adds	r7, #24
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	4f54300a 	.word	0x4f54300a

0800d454 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d454:	b480      	push	{r7}
 800d456:	b085      	sub	sp, #20
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	460b      	mov	r3, r1
 800d45e:	70fb      	strb	r3, [r7, #3]
 800d460:	4613      	mov	r3, r2
 800d462:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d46a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d46c:	78fb      	ldrb	r3, [r7, #3]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d107      	bne.n	800d482 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d472:	883b      	ldrh	r3, [r7, #0]
 800d474:	0419      	lsls	r1, r3, #16
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	68ba      	ldr	r2, [r7, #8]
 800d47c:	430a      	orrs	r2, r1
 800d47e:	629a      	str	r2, [r3, #40]	; 0x28
 800d480:	e028      	b.n	800d4d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d488:	0c1b      	lsrs	r3, r3, #16
 800d48a:	68ba      	ldr	r2, [r7, #8]
 800d48c:	4413      	add	r3, r2
 800d48e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d490:	2300      	movs	r3, #0
 800d492:	73fb      	strb	r3, [r7, #15]
 800d494:	e00d      	b.n	800d4b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	7bfb      	ldrb	r3, [r7, #15]
 800d49c:	3340      	adds	r3, #64	; 0x40
 800d49e:	009b      	lsls	r3, r3, #2
 800d4a0:	4413      	add	r3, r2
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	0c1b      	lsrs	r3, r3, #16
 800d4a6:	68ba      	ldr	r2, [r7, #8]
 800d4a8:	4413      	add	r3, r2
 800d4aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d4ac:	7bfb      	ldrb	r3, [r7, #15]
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	73fb      	strb	r3, [r7, #15]
 800d4b2:	7bfa      	ldrb	r2, [r7, #15]
 800d4b4:	78fb      	ldrb	r3, [r7, #3]
 800d4b6:	3b01      	subs	r3, #1
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d3ec      	bcc.n	800d496 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d4bc:	883b      	ldrh	r3, [r7, #0]
 800d4be:	0418      	lsls	r0, r3, #16
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6819      	ldr	r1, [r3, #0]
 800d4c4:	78fb      	ldrb	r3, [r7, #3]
 800d4c6:	3b01      	subs	r3, #1
 800d4c8:	68ba      	ldr	r2, [r7, #8]
 800d4ca:	4302      	orrs	r2, r0
 800d4cc:	3340      	adds	r3, #64	; 0x40
 800d4ce:	009b      	lsls	r3, r3, #2
 800d4d0:	440b      	add	r3, r1
 800d4d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d4d4:	2300      	movs	r3, #0
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3714      	adds	r7, #20
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr

0800d4e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d4e2:	b480      	push	{r7}
 800d4e4:	b083      	sub	sp, #12
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
 800d4ea:	460b      	mov	r3, r1
 800d4ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	887a      	ldrh	r2, [r7, #2]
 800d4f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800d4f6:	2300      	movs	r3, #0
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	370c      	adds	r7, #12
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr

0800d504 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d504:	b480      	push	{r7}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	460b      	mov	r3, r1
 800d50e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d510:	bf00      	nop
 800d512:	370c      	adds	r7, #12
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr

0800d51c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b086      	sub	sp, #24
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d101      	bne.n	800d52e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d52a:	2301      	movs	r3, #1
 800d52c:	e25b      	b.n	800d9e6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f003 0301 	and.w	r3, r3, #1
 800d536:	2b00      	cmp	r3, #0
 800d538:	d075      	beq.n	800d626 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d53a:	4ba3      	ldr	r3, [pc, #652]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d53c:	689b      	ldr	r3, [r3, #8]
 800d53e:	f003 030c 	and.w	r3, r3, #12
 800d542:	2b04      	cmp	r3, #4
 800d544:	d00c      	beq.n	800d560 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d546:	4ba0      	ldr	r3, [pc, #640]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d548:	689b      	ldr	r3, [r3, #8]
 800d54a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d54e:	2b08      	cmp	r3, #8
 800d550:	d112      	bne.n	800d578 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d552:	4b9d      	ldr	r3, [pc, #628]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d554:	685b      	ldr	r3, [r3, #4]
 800d556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d55a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d55e:	d10b      	bne.n	800d578 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d560:	4b99      	ldr	r3, [pc, #612]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d05b      	beq.n	800d624 <HAL_RCC_OscConfig+0x108>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	685b      	ldr	r3, [r3, #4]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d157      	bne.n	800d624 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d574:	2301      	movs	r3, #1
 800d576:	e236      	b.n	800d9e6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d580:	d106      	bne.n	800d590 <HAL_RCC_OscConfig+0x74>
 800d582:	4b91      	ldr	r3, [pc, #580]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	4a90      	ldr	r2, [pc, #576]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d58c:	6013      	str	r3, [r2, #0]
 800d58e:	e01d      	b.n	800d5cc <HAL_RCC_OscConfig+0xb0>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	685b      	ldr	r3, [r3, #4]
 800d594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d598:	d10c      	bne.n	800d5b4 <HAL_RCC_OscConfig+0x98>
 800d59a:	4b8b      	ldr	r3, [pc, #556]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	4a8a      	ldr	r2, [pc, #552]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d5a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d5a4:	6013      	str	r3, [r2, #0]
 800d5a6:	4b88      	ldr	r3, [pc, #544]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4a87      	ldr	r2, [pc, #540]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d5ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d5b0:	6013      	str	r3, [r2, #0]
 800d5b2:	e00b      	b.n	800d5cc <HAL_RCC_OscConfig+0xb0>
 800d5b4:	4b84      	ldr	r3, [pc, #528]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	4a83      	ldr	r2, [pc, #524]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d5ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d5be:	6013      	str	r3, [r2, #0]
 800d5c0:	4b81      	ldr	r3, [pc, #516]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	4a80      	ldr	r2, [pc, #512]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d5c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d5ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d013      	beq.n	800d5fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d5d4:	f7fd ff66 	bl	800b4a4 <HAL_GetTick>
 800d5d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d5da:	e008      	b.n	800d5ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d5dc:	f7fd ff62 	bl	800b4a4 <HAL_GetTick>
 800d5e0:	4602      	mov	r2, r0
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	1ad3      	subs	r3, r2, r3
 800d5e6:	2b64      	cmp	r3, #100	; 0x64
 800d5e8:	d901      	bls.n	800d5ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d5ea:	2303      	movs	r3, #3
 800d5ec:	e1fb      	b.n	800d9e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d5ee:	4b76      	ldr	r3, [pc, #472]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d0f0      	beq.n	800d5dc <HAL_RCC_OscConfig+0xc0>
 800d5fa:	e014      	b.n	800d626 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d5fc:	f7fd ff52 	bl	800b4a4 <HAL_GetTick>
 800d600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d602:	e008      	b.n	800d616 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d604:	f7fd ff4e 	bl	800b4a4 <HAL_GetTick>
 800d608:	4602      	mov	r2, r0
 800d60a:	693b      	ldr	r3, [r7, #16]
 800d60c:	1ad3      	subs	r3, r2, r3
 800d60e:	2b64      	cmp	r3, #100	; 0x64
 800d610:	d901      	bls.n	800d616 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d612:	2303      	movs	r3, #3
 800d614:	e1e7      	b.n	800d9e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d616:	4b6c      	ldr	r3, [pc, #432]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d1f0      	bne.n	800d604 <HAL_RCC_OscConfig+0xe8>
 800d622:	e000      	b.n	800d626 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f003 0302 	and.w	r3, r3, #2
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d063      	beq.n	800d6fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d632:	4b65      	ldr	r3, [pc, #404]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d634:	689b      	ldr	r3, [r3, #8]
 800d636:	f003 030c 	and.w	r3, r3, #12
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d00b      	beq.n	800d656 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d63e:	4b62      	ldr	r3, [pc, #392]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d640:	689b      	ldr	r3, [r3, #8]
 800d642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d646:	2b08      	cmp	r3, #8
 800d648:	d11c      	bne.n	800d684 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d64a:	4b5f      	ldr	r3, [pc, #380]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d64c:	685b      	ldr	r3, [r3, #4]
 800d64e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d652:	2b00      	cmp	r3, #0
 800d654:	d116      	bne.n	800d684 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d656:	4b5c      	ldr	r3, [pc, #368]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f003 0302 	and.w	r3, r3, #2
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d005      	beq.n	800d66e <HAL_RCC_OscConfig+0x152>
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	68db      	ldr	r3, [r3, #12]
 800d666:	2b01      	cmp	r3, #1
 800d668:	d001      	beq.n	800d66e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d66a:	2301      	movs	r3, #1
 800d66c:	e1bb      	b.n	800d9e6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d66e:	4b56      	ldr	r3, [pc, #344]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	691b      	ldr	r3, [r3, #16]
 800d67a:	00db      	lsls	r3, r3, #3
 800d67c:	4952      	ldr	r1, [pc, #328]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d67e:	4313      	orrs	r3, r2
 800d680:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d682:	e03a      	b.n	800d6fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	68db      	ldr	r3, [r3, #12]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d020      	beq.n	800d6ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d68c:	4b4f      	ldr	r3, [pc, #316]	; (800d7cc <HAL_RCC_OscConfig+0x2b0>)
 800d68e:	2201      	movs	r2, #1
 800d690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d692:	f7fd ff07 	bl	800b4a4 <HAL_GetTick>
 800d696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d698:	e008      	b.n	800d6ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d69a:	f7fd ff03 	bl	800b4a4 <HAL_GetTick>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	1ad3      	subs	r3, r2, r3
 800d6a4:	2b02      	cmp	r3, #2
 800d6a6:	d901      	bls.n	800d6ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d6a8:	2303      	movs	r3, #3
 800d6aa:	e19c      	b.n	800d9e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d6ac:	4b46      	ldr	r3, [pc, #280]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f003 0302 	and.w	r3, r3, #2
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d0f0      	beq.n	800d69a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d6b8:	4b43      	ldr	r3, [pc, #268]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	691b      	ldr	r3, [r3, #16]
 800d6c4:	00db      	lsls	r3, r3, #3
 800d6c6:	4940      	ldr	r1, [pc, #256]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	600b      	str	r3, [r1, #0]
 800d6cc:	e015      	b.n	800d6fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d6ce:	4b3f      	ldr	r3, [pc, #252]	; (800d7cc <HAL_RCC_OscConfig+0x2b0>)
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d6d4:	f7fd fee6 	bl	800b4a4 <HAL_GetTick>
 800d6d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d6da:	e008      	b.n	800d6ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d6dc:	f7fd fee2 	bl	800b4a4 <HAL_GetTick>
 800d6e0:	4602      	mov	r2, r0
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	1ad3      	subs	r3, r2, r3
 800d6e6:	2b02      	cmp	r3, #2
 800d6e8:	d901      	bls.n	800d6ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d6ea:	2303      	movs	r3, #3
 800d6ec:	e17b      	b.n	800d9e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d6ee:	4b36      	ldr	r3, [pc, #216]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f003 0302 	and.w	r3, r3, #2
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d1f0      	bne.n	800d6dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	f003 0308 	and.w	r3, r3, #8
 800d702:	2b00      	cmp	r3, #0
 800d704:	d030      	beq.n	800d768 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	695b      	ldr	r3, [r3, #20]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d016      	beq.n	800d73c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d70e:	4b30      	ldr	r3, [pc, #192]	; (800d7d0 <HAL_RCC_OscConfig+0x2b4>)
 800d710:	2201      	movs	r2, #1
 800d712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d714:	f7fd fec6 	bl	800b4a4 <HAL_GetTick>
 800d718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d71a:	e008      	b.n	800d72e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d71c:	f7fd fec2 	bl	800b4a4 <HAL_GetTick>
 800d720:	4602      	mov	r2, r0
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	1ad3      	subs	r3, r2, r3
 800d726:	2b02      	cmp	r3, #2
 800d728:	d901      	bls.n	800d72e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d72a:	2303      	movs	r3, #3
 800d72c:	e15b      	b.n	800d9e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d72e:	4b26      	ldr	r3, [pc, #152]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d732:	f003 0302 	and.w	r3, r3, #2
 800d736:	2b00      	cmp	r3, #0
 800d738:	d0f0      	beq.n	800d71c <HAL_RCC_OscConfig+0x200>
 800d73a:	e015      	b.n	800d768 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d73c:	4b24      	ldr	r3, [pc, #144]	; (800d7d0 <HAL_RCC_OscConfig+0x2b4>)
 800d73e:	2200      	movs	r2, #0
 800d740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d742:	f7fd feaf 	bl	800b4a4 <HAL_GetTick>
 800d746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d748:	e008      	b.n	800d75c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d74a:	f7fd feab 	bl	800b4a4 <HAL_GetTick>
 800d74e:	4602      	mov	r2, r0
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	1ad3      	subs	r3, r2, r3
 800d754:	2b02      	cmp	r3, #2
 800d756:	d901      	bls.n	800d75c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d758:	2303      	movs	r3, #3
 800d75a:	e144      	b.n	800d9e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d75c:	4b1a      	ldr	r3, [pc, #104]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d75e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d760:	f003 0302 	and.w	r3, r3, #2
 800d764:	2b00      	cmp	r3, #0
 800d766:	d1f0      	bne.n	800d74a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f003 0304 	and.w	r3, r3, #4
 800d770:	2b00      	cmp	r3, #0
 800d772:	f000 80a0 	beq.w	800d8b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d776:	2300      	movs	r3, #0
 800d778:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d77a:	4b13      	ldr	r3, [pc, #76]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d77e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d782:	2b00      	cmp	r3, #0
 800d784:	d10f      	bne.n	800d7a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d786:	2300      	movs	r3, #0
 800d788:	60bb      	str	r3, [r7, #8]
 800d78a:	4b0f      	ldr	r3, [pc, #60]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d78e:	4a0e      	ldr	r2, [pc, #56]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d794:	6413      	str	r3, [r2, #64]	; 0x40
 800d796:	4b0c      	ldr	r3, [pc, #48]	; (800d7c8 <HAL_RCC_OscConfig+0x2ac>)
 800d798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d79a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d79e:	60bb      	str	r3, [r7, #8]
 800d7a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d7a6:	4b0b      	ldr	r3, [pc, #44]	; (800d7d4 <HAL_RCC_OscConfig+0x2b8>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d121      	bne.n	800d7f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d7b2:	4b08      	ldr	r3, [pc, #32]	; (800d7d4 <HAL_RCC_OscConfig+0x2b8>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4a07      	ldr	r2, [pc, #28]	; (800d7d4 <HAL_RCC_OscConfig+0x2b8>)
 800d7b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d7bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d7be:	f7fd fe71 	bl	800b4a4 <HAL_GetTick>
 800d7c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d7c4:	e011      	b.n	800d7ea <HAL_RCC_OscConfig+0x2ce>
 800d7c6:	bf00      	nop
 800d7c8:	40023800 	.word	0x40023800
 800d7cc:	42470000 	.word	0x42470000
 800d7d0:	42470e80 	.word	0x42470e80
 800d7d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d7d8:	f7fd fe64 	bl	800b4a4 <HAL_GetTick>
 800d7dc:	4602      	mov	r2, r0
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	1ad3      	subs	r3, r2, r3
 800d7e2:	2b02      	cmp	r3, #2
 800d7e4:	d901      	bls.n	800d7ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d7e6:	2303      	movs	r3, #3
 800d7e8:	e0fd      	b.n	800d9e6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d7ea:	4b81      	ldr	r3, [pc, #516]	; (800d9f0 <HAL_RCC_OscConfig+0x4d4>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d0f0      	beq.n	800d7d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	689b      	ldr	r3, [r3, #8]
 800d7fa:	2b01      	cmp	r3, #1
 800d7fc:	d106      	bne.n	800d80c <HAL_RCC_OscConfig+0x2f0>
 800d7fe:	4b7d      	ldr	r3, [pc, #500]	; (800d9f4 <HAL_RCC_OscConfig+0x4d8>)
 800d800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d802:	4a7c      	ldr	r2, [pc, #496]	; (800d9f4 <HAL_RCC_OscConfig+0x4d8>)
 800d804:	f043 0301 	orr.w	r3, r3, #1
 800d808:	6713      	str	r3, [r2, #112]	; 0x70
 800d80a:	e01c      	b.n	800d846 <HAL_RCC_OscConfig+0x32a>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	689b      	ldr	r3, [r3, #8]
 800d810:	2b05      	cmp	r3, #5
 800d812:	d10c      	bne.n	800d82e <HAL_RCC_OscConfig+0x312>
 800d814:	4b77      	ldr	r3, [pc, #476]	; (800d9f4 <HAL_RCC_OscConfig+0x4d8>)
 800d816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d818:	4a76      	ldr	r2, [pc, #472]	; (800d9f4 <HAL_RCC_OscConfig+0x4d8>)
 800d81a:	f043 0304 	orr.w	r3, r3, #4
 800d81e:	6713      	str	r3, [r2, #112]	; 0x70
 800d820:	4b74      	ldr	r3, [pc, #464]	; (800d9f4 <HAL_RCC_OscConfig+0x4d8>)
 800d822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d824:	4a73      	ldr	r2, [pc, #460]	; (800d9f4 <HAL_RCC_OscConfig+0x4d8>)
 800d826:	f043 0301 	orr.w	r3, r3, #1
 800d82a:	6713      	str	r3, [r2, #112]	; 0x70
 800d82c:	e00b      	b.n	800d846 <HAL_RCC_OscConfig+0x32a>
 800d82e:	4b71      	ldr	r3, [pc, #452]	; (800d9f4 <HAL_RCC_OscConfig+0x4d8>)
 800d830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d832:	4a70      	ldr	r2, [pc, #448]	; (800d9f4 <HAL_RCC_OscConfig+0x4d8>)
 800d834:	f023 0301 	bic.w	r3, r3, #1
 800d838:	6713      	str	r3, [r2, #112]	; 0x70
 800d83a:	4b6e      	ldr	r3, [pc, #440]	; (800d9f4 <HAL_RCC_OscConfig+0x4d8>)
 800d83c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d83e:	4a6d      	ldr	r2, [pc, #436]	; (800d9f4 <HAL_RCC_OscConfig+0x4d8>)
 800d840:	f023 0304 	bic.w	r3, r3, #4
 800d844:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	689b      	ldr	r3, [r3, #8]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d015      	beq.n	800d87a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d84e:	f7fd fe29 	bl	800b4a4 <HAL_GetTick>
 800d852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d854:	e00a      	b.n	800d86c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d856:	f7fd fe25 	bl	800b4a4 <HAL_GetTick>
 800d85a:	4602      	mov	r2, r0
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	1ad3      	subs	r3, r2, r3
 800d860:	f241 3288 	movw	r2, #5000	; 0x1388
 800d864:	4293      	cmp	r3, r2
 800d866:	d901      	bls.n	800d86c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d868:	2303      	movs	r3, #3
 800d86a:	e0bc      	b.n	800d9e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d86c:	4b61      	ldr	r3, [pc, #388]	; (800d9f4 <HAL_RCC_OscConfig+0x4d8>)
 800d86e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d870:	f003 0302 	and.w	r3, r3, #2
 800d874:	2b00      	cmp	r3, #0
 800d876:	d0ee      	beq.n	800d856 <HAL_RCC_OscConfig+0x33a>
 800d878:	e014      	b.n	800d8a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d87a:	f7fd fe13 	bl	800b4a4 <HAL_GetTick>
 800d87e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d880:	e00a      	b.n	800d898 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d882:	f7fd fe0f 	bl	800b4a4 <HAL_GetTick>
 800d886:	4602      	mov	r2, r0
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	1ad3      	subs	r3, r2, r3
 800d88c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d890:	4293      	cmp	r3, r2
 800d892:	d901      	bls.n	800d898 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800d894:	2303      	movs	r3, #3
 800d896:	e0a6      	b.n	800d9e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d898:	4b56      	ldr	r3, [pc, #344]	; (800d9f4 <HAL_RCC_OscConfig+0x4d8>)
 800d89a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d89c:	f003 0302 	and.w	r3, r3, #2
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d1ee      	bne.n	800d882 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d8a4:	7dfb      	ldrb	r3, [r7, #23]
 800d8a6:	2b01      	cmp	r3, #1
 800d8a8:	d105      	bne.n	800d8b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d8aa:	4b52      	ldr	r3, [pc, #328]	; (800d9f4 <HAL_RCC_OscConfig+0x4d8>)
 800d8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ae:	4a51      	ldr	r2, [pc, #324]	; (800d9f4 <HAL_RCC_OscConfig+0x4d8>)
 800d8b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d8b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	699b      	ldr	r3, [r3, #24]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	f000 8092 	beq.w	800d9e4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d8c0:	4b4c      	ldr	r3, [pc, #304]	; (800d9f4 <HAL_RCC_OscConfig+0x4d8>)
 800d8c2:	689b      	ldr	r3, [r3, #8]
 800d8c4:	f003 030c 	and.w	r3, r3, #12
 800d8c8:	2b08      	cmp	r3, #8
 800d8ca:	d05c      	beq.n	800d986 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	699b      	ldr	r3, [r3, #24]
 800d8d0:	2b02      	cmp	r3, #2
 800d8d2:	d141      	bne.n	800d958 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d8d4:	4b48      	ldr	r3, [pc, #288]	; (800d9f8 <HAL_RCC_OscConfig+0x4dc>)
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d8da:	f7fd fde3 	bl	800b4a4 <HAL_GetTick>
 800d8de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d8e0:	e008      	b.n	800d8f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d8e2:	f7fd fddf 	bl	800b4a4 <HAL_GetTick>
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	1ad3      	subs	r3, r2, r3
 800d8ec:	2b02      	cmp	r3, #2
 800d8ee:	d901      	bls.n	800d8f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800d8f0:	2303      	movs	r3, #3
 800d8f2:	e078      	b.n	800d9e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d8f4:	4b3f      	ldr	r3, [pc, #252]	; (800d9f4 <HAL_RCC_OscConfig+0x4d8>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d1f0      	bne.n	800d8e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	69da      	ldr	r2, [r3, #28]
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6a1b      	ldr	r3, [r3, #32]
 800d908:	431a      	orrs	r2, r3
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d90e:	019b      	lsls	r3, r3, #6
 800d910:	431a      	orrs	r2, r3
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d916:	085b      	lsrs	r3, r3, #1
 800d918:	3b01      	subs	r3, #1
 800d91a:	041b      	lsls	r3, r3, #16
 800d91c:	431a      	orrs	r2, r3
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d922:	061b      	lsls	r3, r3, #24
 800d924:	4933      	ldr	r1, [pc, #204]	; (800d9f4 <HAL_RCC_OscConfig+0x4d8>)
 800d926:	4313      	orrs	r3, r2
 800d928:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d92a:	4b33      	ldr	r3, [pc, #204]	; (800d9f8 <HAL_RCC_OscConfig+0x4dc>)
 800d92c:	2201      	movs	r2, #1
 800d92e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d930:	f7fd fdb8 	bl	800b4a4 <HAL_GetTick>
 800d934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d936:	e008      	b.n	800d94a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d938:	f7fd fdb4 	bl	800b4a4 <HAL_GetTick>
 800d93c:	4602      	mov	r2, r0
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	1ad3      	subs	r3, r2, r3
 800d942:	2b02      	cmp	r3, #2
 800d944:	d901      	bls.n	800d94a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800d946:	2303      	movs	r3, #3
 800d948:	e04d      	b.n	800d9e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d94a:	4b2a      	ldr	r3, [pc, #168]	; (800d9f4 <HAL_RCC_OscConfig+0x4d8>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d952:	2b00      	cmp	r3, #0
 800d954:	d0f0      	beq.n	800d938 <HAL_RCC_OscConfig+0x41c>
 800d956:	e045      	b.n	800d9e4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d958:	4b27      	ldr	r3, [pc, #156]	; (800d9f8 <HAL_RCC_OscConfig+0x4dc>)
 800d95a:	2200      	movs	r2, #0
 800d95c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d95e:	f7fd fda1 	bl	800b4a4 <HAL_GetTick>
 800d962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d964:	e008      	b.n	800d978 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d966:	f7fd fd9d 	bl	800b4a4 <HAL_GetTick>
 800d96a:	4602      	mov	r2, r0
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	1ad3      	subs	r3, r2, r3
 800d970:	2b02      	cmp	r3, #2
 800d972:	d901      	bls.n	800d978 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800d974:	2303      	movs	r3, #3
 800d976:	e036      	b.n	800d9e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d978:	4b1e      	ldr	r3, [pc, #120]	; (800d9f4 <HAL_RCC_OscConfig+0x4d8>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d980:	2b00      	cmp	r3, #0
 800d982:	d1f0      	bne.n	800d966 <HAL_RCC_OscConfig+0x44a>
 800d984:	e02e      	b.n	800d9e4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	699b      	ldr	r3, [r3, #24]
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	d101      	bne.n	800d992 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800d98e:	2301      	movs	r3, #1
 800d990:	e029      	b.n	800d9e6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d992:	4b18      	ldr	r3, [pc, #96]	; (800d9f4 <HAL_RCC_OscConfig+0x4d8>)
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	69db      	ldr	r3, [r3, #28]
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d11c      	bne.n	800d9e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d115      	bne.n	800d9e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d9b4:	68fa      	ldr	r2, [r7, #12]
 800d9b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d9ba:	4013      	ands	r3, r2
 800d9bc:	687a      	ldr	r2, [r7, #4]
 800d9be:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d9c0:	4293      	cmp	r3, r2
 800d9c2:	d10d      	bne.n	800d9e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d106      	bne.n	800d9e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d001      	beq.n	800d9e4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	e000      	b.n	800d9e6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800d9e4:	2300      	movs	r3, #0
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3718      	adds	r7, #24
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
 800d9ee:	bf00      	nop
 800d9f0:	40007000 	.word	0x40007000
 800d9f4:	40023800 	.word	0x40023800
 800d9f8:	42470060 	.word	0x42470060

0800d9fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d101      	bne.n	800da10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800da0c:	2301      	movs	r3, #1
 800da0e:	e0cc      	b.n	800dbaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800da10:	4b68      	ldr	r3, [pc, #416]	; (800dbb4 <HAL_RCC_ClockConfig+0x1b8>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f003 030f 	and.w	r3, r3, #15
 800da18:	683a      	ldr	r2, [r7, #0]
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d90c      	bls.n	800da38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800da1e:	4b65      	ldr	r3, [pc, #404]	; (800dbb4 <HAL_RCC_ClockConfig+0x1b8>)
 800da20:	683a      	ldr	r2, [r7, #0]
 800da22:	b2d2      	uxtb	r2, r2
 800da24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800da26:	4b63      	ldr	r3, [pc, #396]	; (800dbb4 <HAL_RCC_ClockConfig+0x1b8>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f003 030f 	and.w	r3, r3, #15
 800da2e:	683a      	ldr	r2, [r7, #0]
 800da30:	429a      	cmp	r2, r3
 800da32:	d001      	beq.n	800da38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800da34:	2301      	movs	r3, #1
 800da36:	e0b8      	b.n	800dbaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f003 0302 	and.w	r3, r3, #2
 800da40:	2b00      	cmp	r3, #0
 800da42:	d020      	beq.n	800da86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	f003 0304 	and.w	r3, r3, #4
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d005      	beq.n	800da5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800da50:	4b59      	ldr	r3, [pc, #356]	; (800dbb8 <HAL_RCC_ClockConfig+0x1bc>)
 800da52:	689b      	ldr	r3, [r3, #8]
 800da54:	4a58      	ldr	r2, [pc, #352]	; (800dbb8 <HAL_RCC_ClockConfig+0x1bc>)
 800da56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800da5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	f003 0308 	and.w	r3, r3, #8
 800da64:	2b00      	cmp	r3, #0
 800da66:	d005      	beq.n	800da74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800da68:	4b53      	ldr	r3, [pc, #332]	; (800dbb8 <HAL_RCC_ClockConfig+0x1bc>)
 800da6a:	689b      	ldr	r3, [r3, #8]
 800da6c:	4a52      	ldr	r2, [pc, #328]	; (800dbb8 <HAL_RCC_ClockConfig+0x1bc>)
 800da6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800da72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800da74:	4b50      	ldr	r3, [pc, #320]	; (800dbb8 <HAL_RCC_ClockConfig+0x1bc>)
 800da76:	689b      	ldr	r3, [r3, #8]
 800da78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	689b      	ldr	r3, [r3, #8]
 800da80:	494d      	ldr	r1, [pc, #308]	; (800dbb8 <HAL_RCC_ClockConfig+0x1bc>)
 800da82:	4313      	orrs	r3, r2
 800da84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	f003 0301 	and.w	r3, r3, #1
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d044      	beq.n	800db1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	685b      	ldr	r3, [r3, #4]
 800da96:	2b01      	cmp	r3, #1
 800da98:	d107      	bne.n	800daaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800da9a:	4b47      	ldr	r3, [pc, #284]	; (800dbb8 <HAL_RCC_ClockConfig+0x1bc>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d119      	bne.n	800dada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800daa6:	2301      	movs	r3, #1
 800daa8:	e07f      	b.n	800dbaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	685b      	ldr	r3, [r3, #4]
 800daae:	2b02      	cmp	r3, #2
 800dab0:	d003      	beq.n	800daba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dab6:	2b03      	cmp	r3, #3
 800dab8:	d107      	bne.n	800daca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800daba:	4b3f      	ldr	r3, [pc, #252]	; (800dbb8 <HAL_RCC_ClockConfig+0x1bc>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d109      	bne.n	800dada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dac6:	2301      	movs	r3, #1
 800dac8:	e06f      	b.n	800dbaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800daca:	4b3b      	ldr	r3, [pc, #236]	; (800dbb8 <HAL_RCC_ClockConfig+0x1bc>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	f003 0302 	and.w	r3, r3, #2
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d101      	bne.n	800dada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dad6:	2301      	movs	r3, #1
 800dad8:	e067      	b.n	800dbaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dada:	4b37      	ldr	r3, [pc, #220]	; (800dbb8 <HAL_RCC_ClockConfig+0x1bc>)
 800dadc:	689b      	ldr	r3, [r3, #8]
 800dade:	f023 0203 	bic.w	r2, r3, #3
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	4934      	ldr	r1, [pc, #208]	; (800dbb8 <HAL_RCC_ClockConfig+0x1bc>)
 800dae8:	4313      	orrs	r3, r2
 800daea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800daec:	f7fd fcda 	bl	800b4a4 <HAL_GetTick>
 800daf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800daf2:	e00a      	b.n	800db0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800daf4:	f7fd fcd6 	bl	800b4a4 <HAL_GetTick>
 800daf8:	4602      	mov	r2, r0
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	1ad3      	subs	r3, r2, r3
 800dafe:	f241 3288 	movw	r2, #5000	; 0x1388
 800db02:	4293      	cmp	r3, r2
 800db04:	d901      	bls.n	800db0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800db06:	2303      	movs	r3, #3
 800db08:	e04f      	b.n	800dbaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800db0a:	4b2b      	ldr	r3, [pc, #172]	; (800dbb8 <HAL_RCC_ClockConfig+0x1bc>)
 800db0c:	689b      	ldr	r3, [r3, #8]
 800db0e:	f003 020c 	and.w	r2, r3, #12
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	685b      	ldr	r3, [r3, #4]
 800db16:	009b      	lsls	r3, r3, #2
 800db18:	429a      	cmp	r2, r3
 800db1a:	d1eb      	bne.n	800daf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800db1c:	4b25      	ldr	r3, [pc, #148]	; (800dbb4 <HAL_RCC_ClockConfig+0x1b8>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f003 030f 	and.w	r3, r3, #15
 800db24:	683a      	ldr	r2, [r7, #0]
 800db26:	429a      	cmp	r2, r3
 800db28:	d20c      	bcs.n	800db44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800db2a:	4b22      	ldr	r3, [pc, #136]	; (800dbb4 <HAL_RCC_ClockConfig+0x1b8>)
 800db2c:	683a      	ldr	r2, [r7, #0]
 800db2e:	b2d2      	uxtb	r2, r2
 800db30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800db32:	4b20      	ldr	r3, [pc, #128]	; (800dbb4 <HAL_RCC_ClockConfig+0x1b8>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	f003 030f 	and.w	r3, r3, #15
 800db3a:	683a      	ldr	r2, [r7, #0]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d001      	beq.n	800db44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800db40:	2301      	movs	r3, #1
 800db42:	e032      	b.n	800dbaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f003 0304 	and.w	r3, r3, #4
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d008      	beq.n	800db62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800db50:	4b19      	ldr	r3, [pc, #100]	; (800dbb8 <HAL_RCC_ClockConfig+0x1bc>)
 800db52:	689b      	ldr	r3, [r3, #8]
 800db54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	68db      	ldr	r3, [r3, #12]
 800db5c:	4916      	ldr	r1, [pc, #88]	; (800dbb8 <HAL_RCC_ClockConfig+0x1bc>)
 800db5e:	4313      	orrs	r3, r2
 800db60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f003 0308 	and.w	r3, r3, #8
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d009      	beq.n	800db82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800db6e:	4b12      	ldr	r3, [pc, #72]	; (800dbb8 <HAL_RCC_ClockConfig+0x1bc>)
 800db70:	689b      	ldr	r3, [r3, #8]
 800db72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	691b      	ldr	r3, [r3, #16]
 800db7a:	00db      	lsls	r3, r3, #3
 800db7c:	490e      	ldr	r1, [pc, #56]	; (800dbb8 <HAL_RCC_ClockConfig+0x1bc>)
 800db7e:	4313      	orrs	r3, r2
 800db80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800db82:	f000 f821 	bl	800dbc8 <HAL_RCC_GetSysClockFreq>
 800db86:	4601      	mov	r1, r0
 800db88:	4b0b      	ldr	r3, [pc, #44]	; (800dbb8 <HAL_RCC_ClockConfig+0x1bc>)
 800db8a:	689b      	ldr	r3, [r3, #8]
 800db8c:	091b      	lsrs	r3, r3, #4
 800db8e:	f003 030f 	and.w	r3, r3, #15
 800db92:	4a0a      	ldr	r2, [pc, #40]	; (800dbbc <HAL_RCC_ClockConfig+0x1c0>)
 800db94:	5cd3      	ldrb	r3, [r2, r3]
 800db96:	fa21 f303 	lsr.w	r3, r1, r3
 800db9a:	4a09      	ldr	r2, [pc, #36]	; (800dbc0 <HAL_RCC_ClockConfig+0x1c4>)
 800db9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800db9e:	4b09      	ldr	r3, [pc, #36]	; (800dbc4 <HAL_RCC_ClockConfig+0x1c8>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7fd f984 	bl	800aeb0 <HAL_InitTick>

  return HAL_OK;
 800dba8:	2300      	movs	r3, #0
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3710      	adds	r7, #16
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}
 800dbb2:	bf00      	nop
 800dbb4:	40023c00 	.word	0x40023c00
 800dbb8:	40023800 	.word	0x40023800
 800dbbc:	0801b400 	.word	0x0801b400
 800dbc0:	20000828 	.word	0x20000828
 800dbc4:	2000082c 	.word	0x2000082c

0800dbc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbca:	b085      	sub	sp, #20
 800dbcc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	607b      	str	r3, [r7, #4]
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	60fb      	str	r3, [r7, #12]
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dbde:	4b63      	ldr	r3, [pc, #396]	; (800dd6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dbe0:	689b      	ldr	r3, [r3, #8]
 800dbe2:	f003 030c 	and.w	r3, r3, #12
 800dbe6:	2b04      	cmp	r3, #4
 800dbe8:	d007      	beq.n	800dbfa <HAL_RCC_GetSysClockFreq+0x32>
 800dbea:	2b08      	cmp	r3, #8
 800dbec:	d008      	beq.n	800dc00 <HAL_RCC_GetSysClockFreq+0x38>
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	f040 80b4 	bne.w	800dd5c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800dbf4:	4b5e      	ldr	r3, [pc, #376]	; (800dd70 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800dbf6:	60bb      	str	r3, [r7, #8]
       break;
 800dbf8:	e0b3      	b.n	800dd62 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800dbfa:	4b5e      	ldr	r3, [pc, #376]	; (800dd74 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800dbfc:	60bb      	str	r3, [r7, #8]
      break;
 800dbfe:	e0b0      	b.n	800dd62 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dc00:	4b5a      	ldr	r3, [pc, #360]	; (800dd6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc08:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800dc0a:	4b58      	ldr	r3, [pc, #352]	; (800dd6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dc0c:	685b      	ldr	r3, [r3, #4]
 800dc0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d04a      	beq.n	800dcac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dc16:	4b55      	ldr	r3, [pc, #340]	; (800dd6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dc18:	685b      	ldr	r3, [r3, #4]
 800dc1a:	099b      	lsrs	r3, r3, #6
 800dc1c:	f04f 0400 	mov.w	r4, #0
 800dc20:	f240 11ff 	movw	r1, #511	; 0x1ff
 800dc24:	f04f 0200 	mov.w	r2, #0
 800dc28:	ea03 0501 	and.w	r5, r3, r1
 800dc2c:	ea04 0602 	and.w	r6, r4, r2
 800dc30:	4629      	mov	r1, r5
 800dc32:	4632      	mov	r2, r6
 800dc34:	f04f 0300 	mov.w	r3, #0
 800dc38:	f04f 0400 	mov.w	r4, #0
 800dc3c:	0154      	lsls	r4, r2, #5
 800dc3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800dc42:	014b      	lsls	r3, r1, #5
 800dc44:	4619      	mov	r1, r3
 800dc46:	4622      	mov	r2, r4
 800dc48:	1b49      	subs	r1, r1, r5
 800dc4a:	eb62 0206 	sbc.w	r2, r2, r6
 800dc4e:	f04f 0300 	mov.w	r3, #0
 800dc52:	f04f 0400 	mov.w	r4, #0
 800dc56:	0194      	lsls	r4, r2, #6
 800dc58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800dc5c:	018b      	lsls	r3, r1, #6
 800dc5e:	1a5b      	subs	r3, r3, r1
 800dc60:	eb64 0402 	sbc.w	r4, r4, r2
 800dc64:	f04f 0100 	mov.w	r1, #0
 800dc68:	f04f 0200 	mov.w	r2, #0
 800dc6c:	00e2      	lsls	r2, r4, #3
 800dc6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800dc72:	00d9      	lsls	r1, r3, #3
 800dc74:	460b      	mov	r3, r1
 800dc76:	4614      	mov	r4, r2
 800dc78:	195b      	adds	r3, r3, r5
 800dc7a:	eb44 0406 	adc.w	r4, r4, r6
 800dc7e:	f04f 0100 	mov.w	r1, #0
 800dc82:	f04f 0200 	mov.w	r2, #0
 800dc86:	0262      	lsls	r2, r4, #9
 800dc88:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800dc8c:	0259      	lsls	r1, r3, #9
 800dc8e:	460b      	mov	r3, r1
 800dc90:	4614      	mov	r4, r2
 800dc92:	4618      	mov	r0, r3
 800dc94:	4621      	mov	r1, r4
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f04f 0400 	mov.w	r4, #0
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	4623      	mov	r3, r4
 800dca0:	f7f2 fff2 	bl	8000c88 <__aeabi_uldivmod>
 800dca4:	4603      	mov	r3, r0
 800dca6:	460c      	mov	r4, r1
 800dca8:	60fb      	str	r3, [r7, #12]
 800dcaa:	e049      	b.n	800dd40 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dcac:	4b2f      	ldr	r3, [pc, #188]	; (800dd6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	099b      	lsrs	r3, r3, #6
 800dcb2:	f04f 0400 	mov.w	r4, #0
 800dcb6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800dcba:	f04f 0200 	mov.w	r2, #0
 800dcbe:	ea03 0501 	and.w	r5, r3, r1
 800dcc2:	ea04 0602 	and.w	r6, r4, r2
 800dcc6:	4629      	mov	r1, r5
 800dcc8:	4632      	mov	r2, r6
 800dcca:	f04f 0300 	mov.w	r3, #0
 800dcce:	f04f 0400 	mov.w	r4, #0
 800dcd2:	0154      	lsls	r4, r2, #5
 800dcd4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800dcd8:	014b      	lsls	r3, r1, #5
 800dcda:	4619      	mov	r1, r3
 800dcdc:	4622      	mov	r2, r4
 800dcde:	1b49      	subs	r1, r1, r5
 800dce0:	eb62 0206 	sbc.w	r2, r2, r6
 800dce4:	f04f 0300 	mov.w	r3, #0
 800dce8:	f04f 0400 	mov.w	r4, #0
 800dcec:	0194      	lsls	r4, r2, #6
 800dcee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800dcf2:	018b      	lsls	r3, r1, #6
 800dcf4:	1a5b      	subs	r3, r3, r1
 800dcf6:	eb64 0402 	sbc.w	r4, r4, r2
 800dcfa:	f04f 0100 	mov.w	r1, #0
 800dcfe:	f04f 0200 	mov.w	r2, #0
 800dd02:	00e2      	lsls	r2, r4, #3
 800dd04:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800dd08:	00d9      	lsls	r1, r3, #3
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	4614      	mov	r4, r2
 800dd0e:	195b      	adds	r3, r3, r5
 800dd10:	eb44 0406 	adc.w	r4, r4, r6
 800dd14:	f04f 0100 	mov.w	r1, #0
 800dd18:	f04f 0200 	mov.w	r2, #0
 800dd1c:	02a2      	lsls	r2, r4, #10
 800dd1e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800dd22:	0299      	lsls	r1, r3, #10
 800dd24:	460b      	mov	r3, r1
 800dd26:	4614      	mov	r4, r2
 800dd28:	4618      	mov	r0, r3
 800dd2a:	4621      	mov	r1, r4
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f04f 0400 	mov.w	r4, #0
 800dd32:	461a      	mov	r2, r3
 800dd34:	4623      	mov	r3, r4
 800dd36:	f7f2 ffa7 	bl	8000c88 <__aeabi_uldivmod>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	460c      	mov	r4, r1
 800dd3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800dd40:	4b0a      	ldr	r3, [pc, #40]	; (800dd6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	0c1b      	lsrs	r3, r3, #16
 800dd46:	f003 0303 	and.w	r3, r3, #3
 800dd4a:	3301      	adds	r3, #1
 800dd4c:	005b      	lsls	r3, r3, #1
 800dd4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800dd50:	68fa      	ldr	r2, [r7, #12]
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd58:	60bb      	str	r3, [r7, #8]
      break;
 800dd5a:	e002      	b.n	800dd62 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800dd5c:	4b04      	ldr	r3, [pc, #16]	; (800dd70 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800dd5e:	60bb      	str	r3, [r7, #8]
      break;
 800dd60:	bf00      	nop
    }
  }
  return sysclockfreq;
 800dd62:	68bb      	ldr	r3, [r7, #8]
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3714      	adds	r7, #20
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd6c:	40023800 	.word	0x40023800
 800dd70:	00f42400 	.word	0x00f42400
 800dd74:	007a1200 	.word	0x007a1200

0800dd78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dd7c:	4b03      	ldr	r3, [pc, #12]	; (800dd8c <HAL_RCC_GetHCLKFreq+0x14>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	46bd      	mov	sp, r7
 800dd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd88:	4770      	bx	lr
 800dd8a:	bf00      	nop
 800dd8c:	20000828 	.word	0x20000828

0800dd90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800dd94:	f7ff fff0 	bl	800dd78 <HAL_RCC_GetHCLKFreq>
 800dd98:	4601      	mov	r1, r0
 800dd9a:	4b05      	ldr	r3, [pc, #20]	; (800ddb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800dd9c:	689b      	ldr	r3, [r3, #8]
 800dd9e:	0a9b      	lsrs	r3, r3, #10
 800dda0:	f003 0307 	and.w	r3, r3, #7
 800dda4:	4a03      	ldr	r2, [pc, #12]	; (800ddb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dda6:	5cd3      	ldrb	r3, [r2, r3]
 800dda8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	bd80      	pop	{r7, pc}
 800ddb0:	40023800 	.word	0x40023800
 800ddb4:	0801b410 	.word	0x0801b410

0800ddb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ddbc:	f7ff ffdc 	bl	800dd78 <HAL_RCC_GetHCLKFreq>
 800ddc0:	4601      	mov	r1, r0
 800ddc2:	4b05      	ldr	r3, [pc, #20]	; (800ddd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ddc4:	689b      	ldr	r3, [r3, #8]
 800ddc6:	0b5b      	lsrs	r3, r3, #13
 800ddc8:	f003 0307 	and.w	r3, r3, #7
 800ddcc:	4a03      	ldr	r2, [pc, #12]	; (800dddc <HAL_RCC_GetPCLK2Freq+0x24>)
 800ddce:	5cd3      	ldrb	r3, [r2, r3]
 800ddd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	40023800 	.word	0x40023800
 800dddc:	0801b410 	.word	0x0801b410

0800dde0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b083      	sub	sp, #12
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	220f      	movs	r2, #15
 800ddee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ddf0:	4b12      	ldr	r3, [pc, #72]	; (800de3c <HAL_RCC_GetClockConfig+0x5c>)
 800ddf2:	689b      	ldr	r3, [r3, #8]
 800ddf4:	f003 0203 	and.w	r2, r3, #3
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ddfc:	4b0f      	ldr	r3, [pc, #60]	; (800de3c <HAL_RCC_GetClockConfig+0x5c>)
 800ddfe:	689b      	ldr	r3, [r3, #8]
 800de00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800de08:	4b0c      	ldr	r3, [pc, #48]	; (800de3c <HAL_RCC_GetClockConfig+0x5c>)
 800de0a:	689b      	ldr	r3, [r3, #8]
 800de0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800de14:	4b09      	ldr	r3, [pc, #36]	; (800de3c <HAL_RCC_GetClockConfig+0x5c>)
 800de16:	689b      	ldr	r3, [r3, #8]
 800de18:	08db      	lsrs	r3, r3, #3
 800de1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800de22:	4b07      	ldr	r3, [pc, #28]	; (800de40 <HAL_RCC_GetClockConfig+0x60>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f003 020f 	and.w	r2, r3, #15
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	601a      	str	r2, [r3, #0]
}
 800de2e:	bf00      	nop
 800de30:	370c      	adds	r7, #12
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr
 800de3a:	bf00      	nop
 800de3c:	40023800 	.word	0x40023800
 800de40:	40023c00 	.word	0x40023c00

0800de44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d101      	bne.n	800de56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800de52:	2301      	movs	r3, #1
 800de54:	e01d      	b.n	800de92 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d106      	bne.n	800de70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2200      	movs	r2, #0
 800de66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f7fd f9aa 	bl	800b1c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2202      	movs	r2, #2
 800de74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	3304      	adds	r3, #4
 800de80:	4619      	mov	r1, r3
 800de82:	4610      	mov	r0, r2
 800de84:	f000 fa38 	bl	800e2f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2201      	movs	r2, #1
 800de8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800de90:	2300      	movs	r3, #0
}
 800de92:	4618      	mov	r0, r3
 800de94:	3708      	adds	r7, #8
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800de9a:	b480      	push	{r7}
 800de9c:	b085      	sub	sp, #20
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2202      	movs	r2, #2
 800dea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	689b      	ldr	r3, [r3, #8]
 800deb0:	f003 0307 	and.w	r3, r3, #7
 800deb4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2b06      	cmp	r3, #6
 800deba:	d007      	beq.n	800decc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	681a      	ldr	r2, [r3, #0]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f042 0201 	orr.w	r2, r2, #1
 800deca:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2201      	movs	r2, #1
 800ded0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ded4:	2300      	movs	r3, #0
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3714      	adds	r7, #20
 800deda:	46bd      	mov	sp, r7
 800dedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee0:	4770      	bx	lr

0800dee2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dee2:	b480      	push	{r7}
 800dee4:	b085      	sub	sp, #20
 800dee6:	af00      	add	r7, sp, #0
 800dee8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	68da      	ldr	r2, [r3, #12]
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	f042 0201 	orr.w	r2, r2, #1
 800def8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	689b      	ldr	r3, [r3, #8]
 800df00:	f003 0307 	and.w	r3, r3, #7
 800df04:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	2b06      	cmp	r3, #6
 800df0a:	d007      	beq.n	800df1c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	f042 0201 	orr.w	r2, r2, #1
 800df1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800df1c:	2300      	movs	r3, #0
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3714      	adds	r7, #20
 800df22:	46bd      	mov	sp, r7
 800df24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df28:	4770      	bx	lr

0800df2a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800df2a:	b580      	push	{r7, lr}
 800df2c:	b082      	sub	sp, #8
 800df2e:	af00      	add	r7, sp, #0
 800df30:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	691b      	ldr	r3, [r3, #16]
 800df38:	f003 0302 	and.w	r3, r3, #2
 800df3c:	2b02      	cmp	r3, #2
 800df3e:	d122      	bne.n	800df86 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	68db      	ldr	r3, [r3, #12]
 800df46:	f003 0302 	and.w	r3, r3, #2
 800df4a:	2b02      	cmp	r3, #2
 800df4c:	d11b      	bne.n	800df86 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f06f 0202 	mvn.w	r2, #2
 800df56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2201      	movs	r2, #1
 800df5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	699b      	ldr	r3, [r3, #24]
 800df64:	f003 0303 	and.w	r3, r3, #3
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d003      	beq.n	800df74 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f000 f9a5 	bl	800e2bc <HAL_TIM_IC_CaptureCallback>
 800df72:	e005      	b.n	800df80 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f000 f997 	bl	800e2a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f000 f9a8 	bl	800e2d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2200      	movs	r2, #0
 800df84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	691b      	ldr	r3, [r3, #16]
 800df8c:	f003 0304 	and.w	r3, r3, #4
 800df90:	2b04      	cmp	r3, #4
 800df92:	d122      	bne.n	800dfda <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	68db      	ldr	r3, [r3, #12]
 800df9a:	f003 0304 	and.w	r3, r3, #4
 800df9e:	2b04      	cmp	r3, #4
 800dfa0:	d11b      	bne.n	800dfda <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	f06f 0204 	mvn.w	r2, #4
 800dfaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2202      	movs	r2, #2
 800dfb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	699b      	ldr	r3, [r3, #24]
 800dfb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d003      	beq.n	800dfc8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f000 f97b 	bl	800e2bc <HAL_TIM_IC_CaptureCallback>
 800dfc6:	e005      	b.n	800dfd4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f000 f96d 	bl	800e2a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f000 f97e 	bl	800e2d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	691b      	ldr	r3, [r3, #16]
 800dfe0:	f003 0308 	and.w	r3, r3, #8
 800dfe4:	2b08      	cmp	r3, #8
 800dfe6:	d122      	bne.n	800e02e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	68db      	ldr	r3, [r3, #12]
 800dfee:	f003 0308 	and.w	r3, r3, #8
 800dff2:	2b08      	cmp	r3, #8
 800dff4:	d11b      	bne.n	800e02e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f06f 0208 	mvn.w	r2, #8
 800dffe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2204      	movs	r2, #4
 800e004:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	69db      	ldr	r3, [r3, #28]
 800e00c:	f003 0303 	and.w	r3, r3, #3
 800e010:	2b00      	cmp	r3, #0
 800e012:	d003      	beq.n	800e01c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f000 f951 	bl	800e2bc <HAL_TIM_IC_CaptureCallback>
 800e01a:	e005      	b.n	800e028 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f000 f943 	bl	800e2a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f000 f954 	bl	800e2d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2200      	movs	r2, #0
 800e02c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	691b      	ldr	r3, [r3, #16]
 800e034:	f003 0310 	and.w	r3, r3, #16
 800e038:	2b10      	cmp	r3, #16
 800e03a:	d122      	bne.n	800e082 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	68db      	ldr	r3, [r3, #12]
 800e042:	f003 0310 	and.w	r3, r3, #16
 800e046:	2b10      	cmp	r3, #16
 800e048:	d11b      	bne.n	800e082 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f06f 0210 	mvn.w	r2, #16
 800e052:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2208      	movs	r2, #8
 800e058:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	69db      	ldr	r3, [r3, #28]
 800e060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e064:	2b00      	cmp	r3, #0
 800e066:	d003      	beq.n	800e070 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f000 f927 	bl	800e2bc <HAL_TIM_IC_CaptureCallback>
 800e06e:	e005      	b.n	800e07c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f000 f919 	bl	800e2a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f000 f92a 	bl	800e2d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2200      	movs	r2, #0
 800e080:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	691b      	ldr	r3, [r3, #16]
 800e088:	f003 0301 	and.w	r3, r3, #1
 800e08c:	2b01      	cmp	r3, #1
 800e08e:	d10e      	bne.n	800e0ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	68db      	ldr	r3, [r3, #12]
 800e096:	f003 0301 	and.w	r3, r3, #1
 800e09a:	2b01      	cmp	r3, #1
 800e09c:	d107      	bne.n	800e0ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	f06f 0201 	mvn.w	r2, #1
 800e0a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f7f5 ff85 	bl	8003fb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	691b      	ldr	r3, [r3, #16]
 800e0b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0b8:	2b80      	cmp	r3, #128	; 0x80
 800e0ba:	d10e      	bne.n	800e0da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	68db      	ldr	r3, [r3, #12]
 800e0c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0c6:	2b80      	cmp	r3, #128	; 0x80
 800e0c8:	d107      	bne.n	800e0da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e0d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f000 facf 	bl	800e678 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	691b      	ldr	r3, [r3, #16]
 800e0e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0e4:	2b40      	cmp	r3, #64	; 0x40
 800e0e6:	d10e      	bne.n	800e106 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	68db      	ldr	r3, [r3, #12]
 800e0ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0f2:	2b40      	cmp	r3, #64	; 0x40
 800e0f4:	d107      	bne.n	800e106 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e0fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f000 f8ef 	bl	800e2e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	691b      	ldr	r3, [r3, #16]
 800e10c:	f003 0320 	and.w	r3, r3, #32
 800e110:	2b20      	cmp	r3, #32
 800e112:	d10e      	bne.n	800e132 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	68db      	ldr	r3, [r3, #12]
 800e11a:	f003 0320 	and.w	r3, r3, #32
 800e11e:	2b20      	cmp	r3, #32
 800e120:	d107      	bne.n	800e132 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f06f 0220 	mvn.w	r2, #32
 800e12a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f000 fa99 	bl	800e664 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e132:	bf00      	nop
 800e134:	3708      	adds	r7, #8
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}

0800e13a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e13a:	b580      	push	{r7, lr}
 800e13c:	b084      	sub	sp, #16
 800e13e:	af00      	add	r7, sp, #0
 800e140:	6078      	str	r0, [r7, #4]
 800e142:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e14a:	2b01      	cmp	r3, #1
 800e14c:	d101      	bne.n	800e152 <HAL_TIM_ConfigClockSource+0x18>
 800e14e:	2302      	movs	r3, #2
 800e150:	e0a6      	b.n	800e2a0 <HAL_TIM_ConfigClockSource+0x166>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2201      	movs	r2, #1
 800e156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2202      	movs	r2, #2
 800e15e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	689b      	ldr	r3, [r3, #8]
 800e168:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e170:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e178:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	68fa      	ldr	r2, [r7, #12]
 800e180:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	2b40      	cmp	r3, #64	; 0x40
 800e188:	d067      	beq.n	800e25a <HAL_TIM_ConfigClockSource+0x120>
 800e18a:	2b40      	cmp	r3, #64	; 0x40
 800e18c:	d80b      	bhi.n	800e1a6 <HAL_TIM_ConfigClockSource+0x6c>
 800e18e:	2b10      	cmp	r3, #16
 800e190:	d073      	beq.n	800e27a <HAL_TIM_ConfigClockSource+0x140>
 800e192:	2b10      	cmp	r3, #16
 800e194:	d802      	bhi.n	800e19c <HAL_TIM_ConfigClockSource+0x62>
 800e196:	2b00      	cmp	r3, #0
 800e198:	d06f      	beq.n	800e27a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e19a:	e078      	b.n	800e28e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e19c:	2b20      	cmp	r3, #32
 800e19e:	d06c      	beq.n	800e27a <HAL_TIM_ConfigClockSource+0x140>
 800e1a0:	2b30      	cmp	r3, #48	; 0x30
 800e1a2:	d06a      	beq.n	800e27a <HAL_TIM_ConfigClockSource+0x140>
      break;
 800e1a4:	e073      	b.n	800e28e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e1a6:	2b70      	cmp	r3, #112	; 0x70
 800e1a8:	d00d      	beq.n	800e1c6 <HAL_TIM_ConfigClockSource+0x8c>
 800e1aa:	2b70      	cmp	r3, #112	; 0x70
 800e1ac:	d804      	bhi.n	800e1b8 <HAL_TIM_ConfigClockSource+0x7e>
 800e1ae:	2b50      	cmp	r3, #80	; 0x50
 800e1b0:	d033      	beq.n	800e21a <HAL_TIM_ConfigClockSource+0xe0>
 800e1b2:	2b60      	cmp	r3, #96	; 0x60
 800e1b4:	d041      	beq.n	800e23a <HAL_TIM_ConfigClockSource+0x100>
      break;
 800e1b6:	e06a      	b.n	800e28e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e1b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e1bc:	d066      	beq.n	800e28c <HAL_TIM_ConfigClockSource+0x152>
 800e1be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e1c2:	d017      	beq.n	800e1f4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800e1c4:	e063      	b.n	800e28e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6818      	ldr	r0, [r3, #0]
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	6899      	ldr	r1, [r3, #8]
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	685a      	ldr	r2, [r3, #4]
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	68db      	ldr	r3, [r3, #12]
 800e1d6:	f000 f9a9 	bl	800e52c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	689b      	ldr	r3, [r3, #8]
 800e1e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e1e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	68fa      	ldr	r2, [r7, #12]
 800e1f0:	609a      	str	r2, [r3, #8]
      break;
 800e1f2:	e04c      	b.n	800e28e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	6818      	ldr	r0, [r3, #0]
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	6899      	ldr	r1, [r3, #8]
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	685a      	ldr	r2, [r3, #4]
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	68db      	ldr	r3, [r3, #12]
 800e204:	f000 f992 	bl	800e52c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	689a      	ldr	r2, [r3, #8]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e216:	609a      	str	r2, [r3, #8]
      break;
 800e218:	e039      	b.n	800e28e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6818      	ldr	r0, [r3, #0]
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	6859      	ldr	r1, [r3, #4]
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	68db      	ldr	r3, [r3, #12]
 800e226:	461a      	mov	r2, r3
 800e228:	f000 f906 	bl	800e438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	2150      	movs	r1, #80	; 0x50
 800e232:	4618      	mov	r0, r3
 800e234:	f000 f95f 	bl	800e4f6 <TIM_ITRx_SetConfig>
      break;
 800e238:	e029      	b.n	800e28e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	6818      	ldr	r0, [r3, #0]
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	6859      	ldr	r1, [r3, #4]
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	68db      	ldr	r3, [r3, #12]
 800e246:	461a      	mov	r2, r3
 800e248:	f000 f925 	bl	800e496 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	2160      	movs	r1, #96	; 0x60
 800e252:	4618      	mov	r0, r3
 800e254:	f000 f94f 	bl	800e4f6 <TIM_ITRx_SetConfig>
      break;
 800e258:	e019      	b.n	800e28e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6818      	ldr	r0, [r3, #0]
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	6859      	ldr	r1, [r3, #4]
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	68db      	ldr	r3, [r3, #12]
 800e266:	461a      	mov	r2, r3
 800e268:	f000 f8e6 	bl	800e438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	2140      	movs	r1, #64	; 0x40
 800e272:	4618      	mov	r0, r3
 800e274:	f000 f93f 	bl	800e4f6 <TIM_ITRx_SetConfig>
      break;
 800e278:	e009      	b.n	800e28e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681a      	ldr	r2, [r3, #0]
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	4619      	mov	r1, r3
 800e284:	4610      	mov	r0, r2
 800e286:	f000 f936 	bl	800e4f6 <TIM_ITRx_SetConfig>
      break;
 800e28a:	e000      	b.n	800e28e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800e28c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2201      	movs	r2, #1
 800e292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2200      	movs	r2, #0
 800e29a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e29e:	2300      	movs	r3, #0
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3710      	adds	r7, #16
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}

0800e2a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b083      	sub	sp, #12
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e2b0:	bf00      	nop
 800e2b2:	370c      	adds	r7, #12
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ba:	4770      	bx	lr

0800e2bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b083      	sub	sp, #12
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e2c4:	bf00      	nop
 800e2c6:	370c      	adds	r7, #12
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ce:	4770      	bx	lr

0800e2d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	b083      	sub	sp, #12
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e2d8:	bf00      	nop
 800e2da:	370c      	adds	r7, #12
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e2:	4770      	bx	lr

0800e2e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	b083      	sub	sp, #12
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e2ec:	bf00      	nop
 800e2ee:	370c      	adds	r7, #12
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr

0800e2f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b085      	sub	sp, #20
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	4a40      	ldr	r2, [pc, #256]	; (800e40c <TIM_Base_SetConfig+0x114>)
 800e30c:	4293      	cmp	r3, r2
 800e30e:	d013      	beq.n	800e338 <TIM_Base_SetConfig+0x40>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e316:	d00f      	beq.n	800e338 <TIM_Base_SetConfig+0x40>
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	4a3d      	ldr	r2, [pc, #244]	; (800e410 <TIM_Base_SetConfig+0x118>)
 800e31c:	4293      	cmp	r3, r2
 800e31e:	d00b      	beq.n	800e338 <TIM_Base_SetConfig+0x40>
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	4a3c      	ldr	r2, [pc, #240]	; (800e414 <TIM_Base_SetConfig+0x11c>)
 800e324:	4293      	cmp	r3, r2
 800e326:	d007      	beq.n	800e338 <TIM_Base_SetConfig+0x40>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	4a3b      	ldr	r2, [pc, #236]	; (800e418 <TIM_Base_SetConfig+0x120>)
 800e32c:	4293      	cmp	r3, r2
 800e32e:	d003      	beq.n	800e338 <TIM_Base_SetConfig+0x40>
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	4a3a      	ldr	r2, [pc, #232]	; (800e41c <TIM_Base_SetConfig+0x124>)
 800e334:	4293      	cmp	r3, r2
 800e336:	d108      	bne.n	800e34a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e33e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	685b      	ldr	r3, [r3, #4]
 800e344:	68fa      	ldr	r2, [r7, #12]
 800e346:	4313      	orrs	r3, r2
 800e348:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	4a2f      	ldr	r2, [pc, #188]	; (800e40c <TIM_Base_SetConfig+0x114>)
 800e34e:	4293      	cmp	r3, r2
 800e350:	d02b      	beq.n	800e3aa <TIM_Base_SetConfig+0xb2>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e358:	d027      	beq.n	800e3aa <TIM_Base_SetConfig+0xb2>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	4a2c      	ldr	r2, [pc, #176]	; (800e410 <TIM_Base_SetConfig+0x118>)
 800e35e:	4293      	cmp	r3, r2
 800e360:	d023      	beq.n	800e3aa <TIM_Base_SetConfig+0xb2>
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	4a2b      	ldr	r2, [pc, #172]	; (800e414 <TIM_Base_SetConfig+0x11c>)
 800e366:	4293      	cmp	r3, r2
 800e368:	d01f      	beq.n	800e3aa <TIM_Base_SetConfig+0xb2>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	4a2a      	ldr	r2, [pc, #168]	; (800e418 <TIM_Base_SetConfig+0x120>)
 800e36e:	4293      	cmp	r3, r2
 800e370:	d01b      	beq.n	800e3aa <TIM_Base_SetConfig+0xb2>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	4a29      	ldr	r2, [pc, #164]	; (800e41c <TIM_Base_SetConfig+0x124>)
 800e376:	4293      	cmp	r3, r2
 800e378:	d017      	beq.n	800e3aa <TIM_Base_SetConfig+0xb2>
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	4a28      	ldr	r2, [pc, #160]	; (800e420 <TIM_Base_SetConfig+0x128>)
 800e37e:	4293      	cmp	r3, r2
 800e380:	d013      	beq.n	800e3aa <TIM_Base_SetConfig+0xb2>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	4a27      	ldr	r2, [pc, #156]	; (800e424 <TIM_Base_SetConfig+0x12c>)
 800e386:	4293      	cmp	r3, r2
 800e388:	d00f      	beq.n	800e3aa <TIM_Base_SetConfig+0xb2>
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	4a26      	ldr	r2, [pc, #152]	; (800e428 <TIM_Base_SetConfig+0x130>)
 800e38e:	4293      	cmp	r3, r2
 800e390:	d00b      	beq.n	800e3aa <TIM_Base_SetConfig+0xb2>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	4a25      	ldr	r2, [pc, #148]	; (800e42c <TIM_Base_SetConfig+0x134>)
 800e396:	4293      	cmp	r3, r2
 800e398:	d007      	beq.n	800e3aa <TIM_Base_SetConfig+0xb2>
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	4a24      	ldr	r2, [pc, #144]	; (800e430 <TIM_Base_SetConfig+0x138>)
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	d003      	beq.n	800e3aa <TIM_Base_SetConfig+0xb2>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	4a23      	ldr	r2, [pc, #140]	; (800e434 <TIM_Base_SetConfig+0x13c>)
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d108      	bne.n	800e3bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e3b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	68db      	ldr	r3, [r3, #12]
 800e3b6:	68fa      	ldr	r2, [r7, #12]
 800e3b8:	4313      	orrs	r3, r2
 800e3ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	695b      	ldr	r3, [r3, #20]
 800e3c6:	4313      	orrs	r3, r2
 800e3c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	68fa      	ldr	r2, [r7, #12]
 800e3ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	689a      	ldr	r2, [r3, #8]
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	4a0a      	ldr	r2, [pc, #40]	; (800e40c <TIM_Base_SetConfig+0x114>)
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	d003      	beq.n	800e3f0 <TIM_Base_SetConfig+0xf8>
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	4a0c      	ldr	r2, [pc, #48]	; (800e41c <TIM_Base_SetConfig+0x124>)
 800e3ec:	4293      	cmp	r3, r2
 800e3ee:	d103      	bne.n	800e3f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	691a      	ldr	r2, [r3, #16]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	615a      	str	r2, [r3, #20]
}
 800e3fe:	bf00      	nop
 800e400:	3714      	adds	r7, #20
 800e402:	46bd      	mov	sp, r7
 800e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e408:	4770      	bx	lr
 800e40a:	bf00      	nop
 800e40c:	40010000 	.word	0x40010000
 800e410:	40000400 	.word	0x40000400
 800e414:	40000800 	.word	0x40000800
 800e418:	40000c00 	.word	0x40000c00
 800e41c:	40010400 	.word	0x40010400
 800e420:	40014000 	.word	0x40014000
 800e424:	40014400 	.word	0x40014400
 800e428:	40014800 	.word	0x40014800
 800e42c:	40001800 	.word	0x40001800
 800e430:	40001c00 	.word	0x40001c00
 800e434:	40002000 	.word	0x40002000

0800e438 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e438:	b480      	push	{r7}
 800e43a:	b087      	sub	sp, #28
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	60b9      	str	r1, [r7, #8]
 800e442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	6a1b      	ldr	r3, [r3, #32]
 800e448:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	6a1b      	ldr	r3, [r3, #32]
 800e44e:	f023 0201 	bic.w	r2, r3, #1
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	699b      	ldr	r3, [r3, #24]
 800e45a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	011b      	lsls	r3, r3, #4
 800e468:	693a      	ldr	r2, [r7, #16]
 800e46a:	4313      	orrs	r3, r2
 800e46c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	f023 030a 	bic.w	r3, r3, #10
 800e474:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e476:	697a      	ldr	r2, [r7, #20]
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	4313      	orrs	r3, r2
 800e47c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	693a      	ldr	r2, [r7, #16]
 800e482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	697a      	ldr	r2, [r7, #20]
 800e488:	621a      	str	r2, [r3, #32]
}
 800e48a:	bf00      	nop
 800e48c:	371c      	adds	r7, #28
 800e48e:	46bd      	mov	sp, r7
 800e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e494:	4770      	bx	lr

0800e496 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e496:	b480      	push	{r7}
 800e498:	b087      	sub	sp, #28
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	60f8      	str	r0, [r7, #12]
 800e49e:	60b9      	str	r1, [r7, #8]
 800e4a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	6a1b      	ldr	r3, [r3, #32]
 800e4a6:	f023 0210 	bic.w	r2, r3, #16
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	699b      	ldr	r3, [r3, #24]
 800e4b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	6a1b      	ldr	r3, [r3, #32]
 800e4b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e4c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	031b      	lsls	r3, r3, #12
 800e4c6:	697a      	ldr	r2, [r7, #20]
 800e4c8:	4313      	orrs	r3, r2
 800e4ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e4d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	011b      	lsls	r3, r3, #4
 800e4d8:	693a      	ldr	r2, [r7, #16]
 800e4da:	4313      	orrs	r3, r2
 800e4dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	697a      	ldr	r2, [r7, #20]
 800e4e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	693a      	ldr	r2, [r7, #16]
 800e4e8:	621a      	str	r2, [r3, #32]
}
 800e4ea:	bf00      	nop
 800e4ec:	371c      	adds	r7, #28
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f4:	4770      	bx	lr

0800e4f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e4f6:	b480      	push	{r7}
 800e4f8:	b085      	sub	sp, #20
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	6078      	str	r0, [r7, #4]
 800e4fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	689b      	ldr	r3, [r3, #8]
 800e504:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e50c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e50e:	683a      	ldr	r2, [r7, #0]
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	4313      	orrs	r3, r2
 800e514:	f043 0307 	orr.w	r3, r3, #7
 800e518:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	68fa      	ldr	r2, [r7, #12]
 800e51e:	609a      	str	r2, [r3, #8]
}
 800e520:	bf00      	nop
 800e522:	3714      	adds	r7, #20
 800e524:	46bd      	mov	sp, r7
 800e526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52a:	4770      	bx	lr

0800e52c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e52c:	b480      	push	{r7}
 800e52e:	b087      	sub	sp, #28
 800e530:	af00      	add	r7, sp, #0
 800e532:	60f8      	str	r0, [r7, #12]
 800e534:	60b9      	str	r1, [r7, #8]
 800e536:	607a      	str	r2, [r7, #4]
 800e538:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	689b      	ldr	r3, [r3, #8]
 800e53e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e546:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	021a      	lsls	r2, r3, #8
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	431a      	orrs	r2, r3
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	4313      	orrs	r3, r2
 800e554:	697a      	ldr	r2, [r7, #20]
 800e556:	4313      	orrs	r3, r2
 800e558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	697a      	ldr	r2, [r7, #20]
 800e55e:	609a      	str	r2, [r3, #8]
}
 800e560:	bf00      	nop
 800e562:	371c      	adds	r7, #28
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr

0800e56c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b085      	sub	sp, #20
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e57c:	2b01      	cmp	r3, #1
 800e57e:	d101      	bne.n	800e584 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e580:	2302      	movs	r3, #2
 800e582:	e05a      	b.n	800e63a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2201      	movs	r2, #1
 800e588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2202      	movs	r2, #2
 800e590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	689b      	ldr	r3, [r3, #8]
 800e5a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e5aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	68fa      	ldr	r2, [r7, #12]
 800e5b2:	4313      	orrs	r3, r2
 800e5b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	68fa      	ldr	r2, [r7, #12]
 800e5bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	4a21      	ldr	r2, [pc, #132]	; (800e648 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e5c4:	4293      	cmp	r3, r2
 800e5c6:	d022      	beq.n	800e60e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5d0:	d01d      	beq.n	800e60e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	4a1d      	ldr	r2, [pc, #116]	; (800e64c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e5d8:	4293      	cmp	r3, r2
 800e5da:	d018      	beq.n	800e60e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4a1b      	ldr	r2, [pc, #108]	; (800e650 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e5e2:	4293      	cmp	r3, r2
 800e5e4:	d013      	beq.n	800e60e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	4a1a      	ldr	r2, [pc, #104]	; (800e654 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	d00e      	beq.n	800e60e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	4a18      	ldr	r2, [pc, #96]	; (800e658 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d009      	beq.n	800e60e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	4a17      	ldr	r2, [pc, #92]	; (800e65c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e600:	4293      	cmp	r3, r2
 800e602:	d004      	beq.n	800e60e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4a15      	ldr	r2, [pc, #84]	; (800e660 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e60a:	4293      	cmp	r3, r2
 800e60c:	d10c      	bne.n	800e628 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e614:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	68ba      	ldr	r2, [r7, #8]
 800e61c:	4313      	orrs	r3, r2
 800e61e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	68ba      	ldr	r2, [r7, #8]
 800e626:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2201      	movs	r2, #1
 800e62c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2200      	movs	r2, #0
 800e634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e638:	2300      	movs	r3, #0
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3714      	adds	r7, #20
 800e63e:	46bd      	mov	sp, r7
 800e640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e644:	4770      	bx	lr
 800e646:	bf00      	nop
 800e648:	40010000 	.word	0x40010000
 800e64c:	40000400 	.word	0x40000400
 800e650:	40000800 	.word	0x40000800
 800e654:	40000c00 	.word	0x40000c00
 800e658:	40010400 	.word	0x40010400
 800e65c:	40014000 	.word	0x40014000
 800e660:	40001800 	.word	0x40001800

0800e664 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e664:	b480      	push	{r7}
 800e666:	b083      	sub	sp, #12
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e66c:	bf00      	nop
 800e66e:	370c      	adds	r7, #12
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr

0800e678 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e678:	b480      	push	{r7}
 800e67a:	b083      	sub	sp, #12
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e680:	bf00      	nop
 800e682:	370c      	adds	r7, #12
 800e684:	46bd      	mov	sp, r7
 800e686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68a:	4770      	bx	lr

0800e68c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d101      	bne.n	800e69e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e69a:	2301      	movs	r3, #1
 800e69c:	e03f      	b.n	800e71e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e6a4:	b2db      	uxtb	r3, r3
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d106      	bne.n	800e6b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f7fc fdec 	bl	800b290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2224      	movs	r2, #36	; 0x24
 800e6bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	68da      	ldr	r2, [r3, #12]
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e6ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f000 fb6b 	bl	800edac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	691a      	ldr	r2, [r3, #16]
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e6e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	695a      	ldr	r2, [r3, #20]
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e6f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	68da      	ldr	r2, [r3, #12]
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e704:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2200      	movs	r2, #0
 800e70a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2220      	movs	r2, #32
 800e710:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2220      	movs	r2, #32
 800e718:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800e71c:	2300      	movs	r3, #0
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3708      	adds	r7, #8
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
	...

0800e728 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b086      	sub	sp, #24
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	60b9      	str	r1, [r7, #8]
 800e732:	4613      	mov	r3, r2
 800e734:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e73c:	b2db      	uxtb	r3, r3
 800e73e:	2b20      	cmp	r3, #32
 800e740:	d153      	bne.n	800e7ea <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d002      	beq.n	800e74e <HAL_UART_Transmit_DMA+0x26>
 800e748:	88fb      	ldrh	r3, [r7, #6]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d101      	bne.n	800e752 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e74e:	2301      	movs	r3, #1
 800e750:	e04c      	b.n	800e7ec <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e758:	2b01      	cmp	r3, #1
 800e75a:	d101      	bne.n	800e760 <HAL_UART_Transmit_DMA+0x38>
 800e75c:	2302      	movs	r3, #2
 800e75e:	e045      	b.n	800e7ec <HAL_UART_Transmit_DMA+0xc4>
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2201      	movs	r2, #1
 800e764:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800e768:	68ba      	ldr	r2, [r7, #8]
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	88fa      	ldrh	r2, [r7, #6]
 800e772:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	88fa      	ldrh	r2, [r7, #6]
 800e778:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	2200      	movs	r2, #0
 800e77e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2221      	movs	r2, #33	; 0x21
 800e784:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e78c:	4a19      	ldr	r2, [pc, #100]	; (800e7f4 <HAL_UART_Transmit_DMA+0xcc>)
 800e78e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e794:	4a18      	ldr	r2, [pc, #96]	; (800e7f8 <HAL_UART_Transmit_DMA+0xd0>)
 800e796:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e79c:	4a17      	ldr	r2, [pc, #92]	; (800e7fc <HAL_UART_Transmit_DMA+0xd4>)
 800e79e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800e7a8:	f107 0308 	add.w	r3, r7, #8
 800e7ac:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	6819      	ldr	r1, [r3, #0]
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	3304      	adds	r3, #4
 800e7bc:	461a      	mov	r2, r3
 800e7be:	88fb      	ldrh	r3, [r7, #6]
 800e7c0:	f7fd f82e 	bl	800b820 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e7cc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	695a      	ldr	r2, [r3, #20]
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e7e4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	e000      	b.n	800e7ec <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800e7ea:	2302      	movs	r3, #2
  }
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3718      	adds	r7, #24
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	0800ea3d 	.word	0x0800ea3d
 800e7f8:	0800ea8f 	.word	0x0800ea8f
 800e7fc:	0800eaab 	.word	0x0800eaab

0800e800 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b088      	sub	sp, #32
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	68db      	ldr	r3, [r3, #12]
 800e816:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	695b      	ldr	r3, [r3, #20]
 800e81e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800e820:	2300      	movs	r3, #0
 800e822:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800e824:	2300      	movs	r3, #0
 800e826:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e828:	69fb      	ldr	r3, [r7, #28]
 800e82a:	f003 030f 	and.w	r3, r3, #15
 800e82e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d10d      	bne.n	800e852 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e836:	69fb      	ldr	r3, [r7, #28]
 800e838:	f003 0320 	and.w	r3, r3, #32
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d008      	beq.n	800e852 <HAL_UART_IRQHandler+0x52>
 800e840:	69bb      	ldr	r3, [r7, #24]
 800e842:	f003 0320 	and.w	r3, r3, #32
 800e846:	2b00      	cmp	r3, #0
 800e848:	d003      	beq.n	800e852 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f000 fa2d 	bl	800ecaa <UART_Receive_IT>
      return;
 800e850:	e0d1      	b.n	800e9f6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e852:	693b      	ldr	r3, [r7, #16]
 800e854:	2b00      	cmp	r3, #0
 800e856:	f000 80b0 	beq.w	800e9ba <HAL_UART_IRQHandler+0x1ba>
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	f003 0301 	and.w	r3, r3, #1
 800e860:	2b00      	cmp	r3, #0
 800e862:	d105      	bne.n	800e870 <HAL_UART_IRQHandler+0x70>
 800e864:	69bb      	ldr	r3, [r7, #24]
 800e866:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	f000 80a5 	beq.w	800e9ba <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e870:	69fb      	ldr	r3, [r7, #28]
 800e872:	f003 0301 	and.w	r3, r3, #1
 800e876:	2b00      	cmp	r3, #0
 800e878:	d00a      	beq.n	800e890 <HAL_UART_IRQHandler+0x90>
 800e87a:	69bb      	ldr	r3, [r7, #24]
 800e87c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e880:	2b00      	cmp	r3, #0
 800e882:	d005      	beq.n	800e890 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e888:	f043 0201 	orr.w	r2, r3, #1
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e890:	69fb      	ldr	r3, [r7, #28]
 800e892:	f003 0304 	and.w	r3, r3, #4
 800e896:	2b00      	cmp	r3, #0
 800e898:	d00a      	beq.n	800e8b0 <HAL_UART_IRQHandler+0xb0>
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	f003 0301 	and.w	r3, r3, #1
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d005      	beq.n	800e8b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8a8:	f043 0202 	orr.w	r2, r3, #2
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e8b0:	69fb      	ldr	r3, [r7, #28]
 800e8b2:	f003 0302 	and.w	r3, r3, #2
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d00a      	beq.n	800e8d0 <HAL_UART_IRQHandler+0xd0>
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	f003 0301 	and.w	r3, r3, #1
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d005      	beq.n	800e8d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8c8:	f043 0204 	orr.w	r2, r3, #4
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800e8d0:	69fb      	ldr	r3, [r7, #28]
 800e8d2:	f003 0308 	and.w	r3, r3, #8
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d00f      	beq.n	800e8fa <HAL_UART_IRQHandler+0xfa>
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	f003 0320 	and.w	r3, r3, #32
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d104      	bne.n	800e8ee <HAL_UART_IRQHandler+0xee>
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	f003 0301 	and.w	r3, r3, #1
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d005      	beq.n	800e8fa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8f2:	f043 0208 	orr.w	r2, r3, #8
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d078      	beq.n	800e9f4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e902:	69fb      	ldr	r3, [r7, #28]
 800e904:	f003 0320 	and.w	r3, r3, #32
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d007      	beq.n	800e91c <HAL_UART_IRQHandler+0x11c>
 800e90c:	69bb      	ldr	r3, [r7, #24]
 800e90e:	f003 0320 	and.w	r3, r3, #32
 800e912:	2b00      	cmp	r3, #0
 800e914:	d002      	beq.n	800e91c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f000 f9c7 	bl	800ecaa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	695b      	ldr	r3, [r3, #20]
 800e922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e926:	2b40      	cmp	r3, #64	; 0x40
 800e928:	bf0c      	ite	eq
 800e92a:	2301      	moveq	r3, #1
 800e92c:	2300      	movne	r3, #0
 800e92e:	b2db      	uxtb	r3, r3
 800e930:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e936:	f003 0308 	and.w	r3, r3, #8
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d102      	bne.n	800e944 <HAL_UART_IRQHandler+0x144>
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d031      	beq.n	800e9a8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f000 f910 	bl	800eb6a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	695b      	ldr	r3, [r3, #20]
 800e950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e954:	2b40      	cmp	r3, #64	; 0x40
 800e956:	d123      	bne.n	800e9a0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	695a      	ldr	r2, [r3, #20]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e966:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d013      	beq.n	800e998 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e974:	4a21      	ldr	r2, [pc, #132]	; (800e9fc <HAL_UART_IRQHandler+0x1fc>)
 800e976:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e97c:	4618      	mov	r0, r3
 800e97e:	f7fc ffa7 	bl	800b8d0 <HAL_DMA_Abort_IT>
 800e982:	4603      	mov	r3, r0
 800e984:	2b00      	cmp	r3, #0
 800e986:	d016      	beq.n	800e9b6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e98c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e992:	4610      	mov	r0, r2
 800e994:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e996:	e00e      	b.n	800e9b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f000 f845 	bl	800ea28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e99e:	e00a      	b.n	800e9b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f000 f841 	bl	800ea28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e9a6:	e006      	b.n	800e9b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f000 f83d 	bl	800ea28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800e9b4:	e01e      	b.n	800e9f4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e9b6:	bf00      	nop
    return;
 800e9b8:	e01c      	b.n	800e9f4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e9ba:	69fb      	ldr	r3, [r7, #28]
 800e9bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d008      	beq.n	800e9d6 <HAL_UART_IRQHandler+0x1d6>
 800e9c4:	69bb      	ldr	r3, [r7, #24]
 800e9c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d003      	beq.n	800e9d6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f000 f8fd 	bl	800ebce <UART_Transmit_IT>
    return;
 800e9d4:	e00f      	b.n	800e9f6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e9d6:	69fb      	ldr	r3, [r7, #28]
 800e9d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d00a      	beq.n	800e9f6 <HAL_UART_IRQHandler+0x1f6>
 800e9e0:	69bb      	ldr	r3, [r7, #24]
 800e9e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d005      	beq.n	800e9f6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f000 f945 	bl	800ec7a <UART_EndTransmit_IT>
    return;
 800e9f0:	bf00      	nop
 800e9f2:	e000      	b.n	800e9f6 <HAL_UART_IRQHandler+0x1f6>
    return;
 800e9f4:	bf00      	nop
  }
}
 800e9f6:	3720      	adds	r7, #32
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}
 800e9fc:	0800eba7 	.word	0x0800eba7

0800ea00 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b083      	sub	sp, #12
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ea08:	bf00      	nop
 800ea0a:	370c      	adds	r7, #12
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr

0800ea14 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ea14:	b480      	push	{r7}
 800ea16:	b083      	sub	sp, #12
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ea1c:	bf00      	nop
 800ea1e:	370c      	adds	r7, #12
 800ea20:	46bd      	mov	sp, r7
 800ea22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea26:	4770      	bx	lr

0800ea28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ea28:	b480      	push	{r7}
 800ea2a:	b083      	sub	sp, #12
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ea30:	bf00      	nop
 800ea32:	370c      	adds	r7, #12
 800ea34:	46bd      	mov	sp, r7
 800ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3a:	4770      	bx	lr

0800ea3c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b084      	sub	sp, #16
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea48:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d113      	bne.n	800ea80 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	695a      	ldr	r2, [r3, #20]
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ea6c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	68da      	ldr	r2, [r3, #12]
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea7c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ea7e:	e002      	b.n	800ea86 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800ea80:	68f8      	ldr	r0, [r7, #12]
 800ea82:	f7fc fc87 	bl	800b394 <HAL_UART_TxCpltCallback>
}
 800ea86:	bf00      	nop
 800ea88:	3710      	adds	r7, #16
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}

0800ea8e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ea8e:	b580      	push	{r7, lr}
 800ea90:	b084      	sub	sp, #16
 800ea92:	af00      	add	r7, sp, #0
 800ea94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea9a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ea9c:	68f8      	ldr	r0, [r7, #12]
 800ea9e:	f7ff ffaf 	bl	800ea00 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eaa2:	bf00      	nop
 800eaa4:	3710      	adds	r7, #16
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}

0800eaaa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800eaaa:	b580      	push	{r7, lr}
 800eaac:	b084      	sub	sp, #16
 800eaae:	af00      	add	r7, sp, #0
 800eab0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800eab2:	2300      	movs	r3, #0
 800eab4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	695b      	ldr	r3, [r3, #20]
 800eac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eac6:	2b80      	cmp	r3, #128	; 0x80
 800eac8:	bf0c      	ite	eq
 800eaca:	2301      	moveq	r3, #1
 800eacc:	2300      	movne	r3, #0
 800eace:	b2db      	uxtb	r3, r3
 800ead0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ead8:	b2db      	uxtb	r3, r3
 800eada:	2b21      	cmp	r3, #33	; 0x21
 800eadc:	d108      	bne.n	800eaf0 <UART_DMAError+0x46>
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d005      	beq.n	800eaf0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	2200      	movs	r2, #0
 800eae8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800eaea:	68b8      	ldr	r0, [r7, #8]
 800eaec:	f000 f827 	bl	800eb3e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	695b      	ldr	r3, [r3, #20]
 800eaf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eafa:	2b40      	cmp	r3, #64	; 0x40
 800eafc:	bf0c      	ite	eq
 800eafe:	2301      	moveq	r3, #1
 800eb00:	2300      	movne	r3, #0
 800eb02:	b2db      	uxtb	r3, r3
 800eb04:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	2b22      	cmp	r3, #34	; 0x22
 800eb10:	d108      	bne.n	800eb24 <UART_DMAError+0x7a>
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d005      	beq.n	800eb24 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800eb1e:	68b8      	ldr	r0, [r7, #8]
 800eb20:	f000 f823 	bl	800eb6a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb28:	f043 0210 	orr.w	r2, r3, #16
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb30:	68b8      	ldr	r0, [r7, #8]
 800eb32:	f7ff ff79 	bl	800ea28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb36:	bf00      	nop
 800eb38:	3710      	adds	r7, #16
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}

0800eb3e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800eb3e:	b480      	push	{r7}
 800eb40:	b083      	sub	sp, #12
 800eb42:	af00      	add	r7, sp, #0
 800eb44:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	68da      	ldr	r2, [r3, #12]
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800eb54:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2220      	movs	r2, #32
 800eb5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800eb5e:	bf00      	nop
 800eb60:	370c      	adds	r7, #12
 800eb62:	46bd      	mov	sp, r7
 800eb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb68:	4770      	bx	lr

0800eb6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eb6a:	b480      	push	{r7}
 800eb6c:	b083      	sub	sp, #12
 800eb6e:	af00      	add	r7, sp, #0
 800eb70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	68da      	ldr	r2, [r3, #12]
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800eb80:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	695a      	ldr	r2, [r3, #20]
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	f022 0201 	bic.w	r2, r2, #1
 800eb90:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2220      	movs	r2, #32
 800eb96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800eb9a:	bf00      	nop
 800eb9c:	370c      	adds	r7, #12
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba4:	4770      	bx	lr

0800eba6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eba6:	b580      	push	{r7, lr}
 800eba8:	b084      	sub	sp, #16
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ebc0:	68f8      	ldr	r0, [r7, #12]
 800ebc2:	f7ff ff31 	bl	800ea28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebc6:	bf00      	nop
 800ebc8:	3710      	adds	r7, #16
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}

0800ebce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ebce:	b480      	push	{r7}
 800ebd0:	b085      	sub	sp, #20
 800ebd2:	af00      	add	r7, sp, #0
 800ebd4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ebdc:	b2db      	uxtb	r3, r3
 800ebde:	2b21      	cmp	r3, #33	; 0x21
 800ebe0:	d144      	bne.n	800ec6c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	689b      	ldr	r3, [r3, #8]
 800ebe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebea:	d11a      	bne.n	800ec22 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6a1b      	ldr	r3, [r3, #32]
 800ebf0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	881b      	ldrh	r3, [r3, #0]
 800ebf6:	461a      	mov	r2, r3
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ec00:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	691b      	ldr	r3, [r3, #16]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d105      	bne.n	800ec16 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6a1b      	ldr	r3, [r3, #32]
 800ec0e:	1c9a      	adds	r2, r3, #2
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	621a      	str	r2, [r3, #32]
 800ec14:	e00e      	b.n	800ec34 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6a1b      	ldr	r3, [r3, #32]
 800ec1a:	1c5a      	adds	r2, r3, #1
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	621a      	str	r2, [r3, #32]
 800ec20:	e008      	b.n	800ec34 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6a1b      	ldr	r3, [r3, #32]
 800ec26:	1c59      	adds	r1, r3, #1
 800ec28:	687a      	ldr	r2, [r7, #4]
 800ec2a:	6211      	str	r1, [r2, #32]
 800ec2c:	781a      	ldrb	r2, [r3, #0]
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ec38:	b29b      	uxth	r3, r3
 800ec3a:	3b01      	subs	r3, #1
 800ec3c:	b29b      	uxth	r3, r3
 800ec3e:	687a      	ldr	r2, [r7, #4]
 800ec40:	4619      	mov	r1, r3
 800ec42:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d10f      	bne.n	800ec68 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	68da      	ldr	r2, [r3, #12]
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ec56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	68da      	ldr	r2, [r3, #12]
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	e000      	b.n	800ec6e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ec6c:	2302      	movs	r3, #2
  }
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3714      	adds	r7, #20
 800ec72:	46bd      	mov	sp, r7
 800ec74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec78:	4770      	bx	lr

0800ec7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ec7a:	b580      	push	{r7, lr}
 800ec7c:	b082      	sub	sp, #8
 800ec7e:	af00      	add	r7, sp, #0
 800ec80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	68da      	ldr	r2, [r3, #12]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2220      	movs	r2, #32
 800ec96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f7fc fb7a 	bl	800b394 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800eca0:	2300      	movs	r3, #0
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	3708      	adds	r7, #8
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}

0800ecaa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ecaa:	b580      	push	{r7, lr}
 800ecac:	b084      	sub	sp, #16
 800ecae:	af00      	add	r7, sp, #0
 800ecb0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ecb8:	b2db      	uxtb	r3, r3
 800ecba:	2b22      	cmp	r3, #34	; 0x22
 800ecbc:	d171      	bne.n	800eda2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	689b      	ldr	r3, [r3, #8]
 800ecc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ecc6:	d123      	bne.n	800ed10 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eccc:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	691b      	ldr	r3, [r3, #16]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d10e      	bne.n	800ecf4 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	685b      	ldr	r3, [r3, #4]
 800ecdc:	b29b      	uxth	r3, r3
 800ecde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ece2:	b29a      	uxth	r2, r3
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecec:	1c9a      	adds	r2, r3, #2
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	629a      	str	r2, [r3, #40]	; 0x28
 800ecf2:	e029      	b.n	800ed48 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	685b      	ldr	r3, [r3, #4]
 800ecfa:	b29b      	uxth	r3, r3
 800ecfc:	b2db      	uxtb	r3, r3
 800ecfe:	b29a      	uxth	r2, r3
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed08:	1c5a      	adds	r2, r3, #1
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	629a      	str	r2, [r3, #40]	; 0x28
 800ed0e:	e01b      	b.n	800ed48 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	691b      	ldr	r3, [r3, #16]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d10a      	bne.n	800ed2e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	6858      	ldr	r0, [r3, #4]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed22:	1c59      	adds	r1, r3, #1
 800ed24:	687a      	ldr	r2, [r7, #4]
 800ed26:	6291      	str	r1, [r2, #40]	; 0x28
 800ed28:	b2c2      	uxtb	r2, r0
 800ed2a:	701a      	strb	r2, [r3, #0]
 800ed2c:	e00c      	b.n	800ed48 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	b2da      	uxtb	r2, r3
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed3a:	1c58      	adds	r0, r3, #1
 800ed3c:	6879      	ldr	r1, [r7, #4]
 800ed3e:	6288      	str	r0, [r1, #40]	; 0x28
 800ed40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ed44:	b2d2      	uxtb	r2, r2
 800ed46:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ed4c:	b29b      	uxth	r3, r3
 800ed4e:	3b01      	subs	r3, #1
 800ed50:	b29b      	uxth	r3, r3
 800ed52:	687a      	ldr	r2, [r7, #4]
 800ed54:	4619      	mov	r1, r3
 800ed56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d120      	bne.n	800ed9e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	68da      	ldr	r2, [r3, #12]
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	f022 0220 	bic.w	r2, r2, #32
 800ed6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	68da      	ldr	r2, [r3, #12]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ed7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	695a      	ldr	r2, [r3, #20]
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f022 0201 	bic.w	r2, r2, #1
 800ed8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2220      	movs	r2, #32
 800ed90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f7ff fe3d 	bl	800ea14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	e002      	b.n	800eda4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	e000      	b.n	800eda4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800eda2:	2302      	movs	r3, #2
  }
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3710      	adds	r7, #16
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}

0800edac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800edac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edb0:	b085      	sub	sp, #20
 800edb2:	af00      	add	r7, sp, #0
 800edb4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	691b      	ldr	r3, [r3, #16]
 800edbc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	68da      	ldr	r2, [r3, #12]
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	430a      	orrs	r2, r1
 800edca:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	689a      	ldr	r2, [r3, #8]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	691b      	ldr	r3, [r3, #16]
 800edd4:	431a      	orrs	r2, r3
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	695b      	ldr	r3, [r3, #20]
 800edda:	431a      	orrs	r2, r3
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	69db      	ldr	r3, [r3, #28]
 800ede0:	4313      	orrs	r3, r2
 800ede2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	68db      	ldr	r3, [r3, #12]
 800edea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800edee:	f023 030c 	bic.w	r3, r3, #12
 800edf2:	687a      	ldr	r2, [r7, #4]
 800edf4:	6812      	ldr	r2, [r2, #0]
 800edf6:	68f9      	ldr	r1, [r7, #12]
 800edf8:	430b      	orrs	r3, r1
 800edfa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	695b      	ldr	r3, [r3, #20]
 800ee02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	699a      	ldr	r2, [r3, #24]
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	430a      	orrs	r2, r1
 800ee10:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	69db      	ldr	r3, [r3, #28]
 800ee16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee1a:	f040 818b 	bne.w	800f134 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	4ac1      	ldr	r2, [pc, #772]	; (800f128 <UART_SetConfig+0x37c>)
 800ee24:	4293      	cmp	r3, r2
 800ee26:	d005      	beq.n	800ee34 <UART_SetConfig+0x88>
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4abf      	ldr	r2, [pc, #764]	; (800f12c <UART_SetConfig+0x380>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	f040 80bd 	bne.w	800efae <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ee34:	f7fe ffc0 	bl	800ddb8 <HAL_RCC_GetPCLK2Freq>
 800ee38:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	461d      	mov	r5, r3
 800ee3e:	f04f 0600 	mov.w	r6, #0
 800ee42:	46a8      	mov	r8, r5
 800ee44:	46b1      	mov	r9, r6
 800ee46:	eb18 0308 	adds.w	r3, r8, r8
 800ee4a:	eb49 0409 	adc.w	r4, r9, r9
 800ee4e:	4698      	mov	r8, r3
 800ee50:	46a1      	mov	r9, r4
 800ee52:	eb18 0805 	adds.w	r8, r8, r5
 800ee56:	eb49 0906 	adc.w	r9, r9, r6
 800ee5a:	f04f 0100 	mov.w	r1, #0
 800ee5e:	f04f 0200 	mov.w	r2, #0
 800ee62:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ee66:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ee6a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ee6e:	4688      	mov	r8, r1
 800ee70:	4691      	mov	r9, r2
 800ee72:	eb18 0005 	adds.w	r0, r8, r5
 800ee76:	eb49 0106 	adc.w	r1, r9, r6
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	685b      	ldr	r3, [r3, #4]
 800ee7e:	461d      	mov	r5, r3
 800ee80:	f04f 0600 	mov.w	r6, #0
 800ee84:	196b      	adds	r3, r5, r5
 800ee86:	eb46 0406 	adc.w	r4, r6, r6
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	4623      	mov	r3, r4
 800ee8e:	f7f1 fefb 	bl	8000c88 <__aeabi_uldivmod>
 800ee92:	4603      	mov	r3, r0
 800ee94:	460c      	mov	r4, r1
 800ee96:	461a      	mov	r2, r3
 800ee98:	4ba5      	ldr	r3, [pc, #660]	; (800f130 <UART_SetConfig+0x384>)
 800ee9a:	fba3 2302 	umull	r2, r3, r3, r2
 800ee9e:	095b      	lsrs	r3, r3, #5
 800eea0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	461d      	mov	r5, r3
 800eea8:	f04f 0600 	mov.w	r6, #0
 800eeac:	46a9      	mov	r9, r5
 800eeae:	46b2      	mov	sl, r6
 800eeb0:	eb19 0309 	adds.w	r3, r9, r9
 800eeb4:	eb4a 040a 	adc.w	r4, sl, sl
 800eeb8:	4699      	mov	r9, r3
 800eeba:	46a2      	mov	sl, r4
 800eebc:	eb19 0905 	adds.w	r9, r9, r5
 800eec0:	eb4a 0a06 	adc.w	sl, sl, r6
 800eec4:	f04f 0100 	mov.w	r1, #0
 800eec8:	f04f 0200 	mov.w	r2, #0
 800eecc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eed0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800eed4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800eed8:	4689      	mov	r9, r1
 800eeda:	4692      	mov	sl, r2
 800eedc:	eb19 0005 	adds.w	r0, r9, r5
 800eee0:	eb4a 0106 	adc.w	r1, sl, r6
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	685b      	ldr	r3, [r3, #4]
 800eee8:	461d      	mov	r5, r3
 800eeea:	f04f 0600 	mov.w	r6, #0
 800eeee:	196b      	adds	r3, r5, r5
 800eef0:	eb46 0406 	adc.w	r4, r6, r6
 800eef4:	461a      	mov	r2, r3
 800eef6:	4623      	mov	r3, r4
 800eef8:	f7f1 fec6 	bl	8000c88 <__aeabi_uldivmod>
 800eefc:	4603      	mov	r3, r0
 800eefe:	460c      	mov	r4, r1
 800ef00:	461a      	mov	r2, r3
 800ef02:	4b8b      	ldr	r3, [pc, #556]	; (800f130 <UART_SetConfig+0x384>)
 800ef04:	fba3 1302 	umull	r1, r3, r3, r2
 800ef08:	095b      	lsrs	r3, r3, #5
 800ef0a:	2164      	movs	r1, #100	; 0x64
 800ef0c:	fb01 f303 	mul.w	r3, r1, r3
 800ef10:	1ad3      	subs	r3, r2, r3
 800ef12:	00db      	lsls	r3, r3, #3
 800ef14:	3332      	adds	r3, #50	; 0x32
 800ef16:	4a86      	ldr	r2, [pc, #536]	; (800f130 <UART_SetConfig+0x384>)
 800ef18:	fba2 2303 	umull	r2, r3, r2, r3
 800ef1c:	095b      	lsrs	r3, r3, #5
 800ef1e:	005b      	lsls	r3, r3, #1
 800ef20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ef24:	4498      	add	r8, r3
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	461d      	mov	r5, r3
 800ef2a:	f04f 0600 	mov.w	r6, #0
 800ef2e:	46a9      	mov	r9, r5
 800ef30:	46b2      	mov	sl, r6
 800ef32:	eb19 0309 	adds.w	r3, r9, r9
 800ef36:	eb4a 040a 	adc.w	r4, sl, sl
 800ef3a:	4699      	mov	r9, r3
 800ef3c:	46a2      	mov	sl, r4
 800ef3e:	eb19 0905 	adds.w	r9, r9, r5
 800ef42:	eb4a 0a06 	adc.w	sl, sl, r6
 800ef46:	f04f 0100 	mov.w	r1, #0
 800ef4a:	f04f 0200 	mov.w	r2, #0
 800ef4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ef52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ef56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ef5a:	4689      	mov	r9, r1
 800ef5c:	4692      	mov	sl, r2
 800ef5e:	eb19 0005 	adds.w	r0, r9, r5
 800ef62:	eb4a 0106 	adc.w	r1, sl, r6
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	461d      	mov	r5, r3
 800ef6c:	f04f 0600 	mov.w	r6, #0
 800ef70:	196b      	adds	r3, r5, r5
 800ef72:	eb46 0406 	adc.w	r4, r6, r6
 800ef76:	461a      	mov	r2, r3
 800ef78:	4623      	mov	r3, r4
 800ef7a:	f7f1 fe85 	bl	8000c88 <__aeabi_uldivmod>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	460c      	mov	r4, r1
 800ef82:	461a      	mov	r2, r3
 800ef84:	4b6a      	ldr	r3, [pc, #424]	; (800f130 <UART_SetConfig+0x384>)
 800ef86:	fba3 1302 	umull	r1, r3, r3, r2
 800ef8a:	095b      	lsrs	r3, r3, #5
 800ef8c:	2164      	movs	r1, #100	; 0x64
 800ef8e:	fb01 f303 	mul.w	r3, r1, r3
 800ef92:	1ad3      	subs	r3, r2, r3
 800ef94:	00db      	lsls	r3, r3, #3
 800ef96:	3332      	adds	r3, #50	; 0x32
 800ef98:	4a65      	ldr	r2, [pc, #404]	; (800f130 <UART_SetConfig+0x384>)
 800ef9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ef9e:	095b      	lsrs	r3, r3, #5
 800efa0:	f003 0207 	and.w	r2, r3, #7
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	4442      	add	r2, r8
 800efaa:	609a      	str	r2, [r3, #8]
 800efac:	e26f      	b.n	800f48e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800efae:	f7fe feef 	bl	800dd90 <HAL_RCC_GetPCLK1Freq>
 800efb2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	461d      	mov	r5, r3
 800efb8:	f04f 0600 	mov.w	r6, #0
 800efbc:	46a8      	mov	r8, r5
 800efbe:	46b1      	mov	r9, r6
 800efc0:	eb18 0308 	adds.w	r3, r8, r8
 800efc4:	eb49 0409 	adc.w	r4, r9, r9
 800efc8:	4698      	mov	r8, r3
 800efca:	46a1      	mov	r9, r4
 800efcc:	eb18 0805 	adds.w	r8, r8, r5
 800efd0:	eb49 0906 	adc.w	r9, r9, r6
 800efd4:	f04f 0100 	mov.w	r1, #0
 800efd8:	f04f 0200 	mov.w	r2, #0
 800efdc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800efe0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800efe4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800efe8:	4688      	mov	r8, r1
 800efea:	4691      	mov	r9, r2
 800efec:	eb18 0005 	adds.w	r0, r8, r5
 800eff0:	eb49 0106 	adc.w	r1, r9, r6
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	685b      	ldr	r3, [r3, #4]
 800eff8:	461d      	mov	r5, r3
 800effa:	f04f 0600 	mov.w	r6, #0
 800effe:	196b      	adds	r3, r5, r5
 800f000:	eb46 0406 	adc.w	r4, r6, r6
 800f004:	461a      	mov	r2, r3
 800f006:	4623      	mov	r3, r4
 800f008:	f7f1 fe3e 	bl	8000c88 <__aeabi_uldivmod>
 800f00c:	4603      	mov	r3, r0
 800f00e:	460c      	mov	r4, r1
 800f010:	461a      	mov	r2, r3
 800f012:	4b47      	ldr	r3, [pc, #284]	; (800f130 <UART_SetConfig+0x384>)
 800f014:	fba3 2302 	umull	r2, r3, r3, r2
 800f018:	095b      	lsrs	r3, r3, #5
 800f01a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	461d      	mov	r5, r3
 800f022:	f04f 0600 	mov.w	r6, #0
 800f026:	46a9      	mov	r9, r5
 800f028:	46b2      	mov	sl, r6
 800f02a:	eb19 0309 	adds.w	r3, r9, r9
 800f02e:	eb4a 040a 	adc.w	r4, sl, sl
 800f032:	4699      	mov	r9, r3
 800f034:	46a2      	mov	sl, r4
 800f036:	eb19 0905 	adds.w	r9, r9, r5
 800f03a:	eb4a 0a06 	adc.w	sl, sl, r6
 800f03e:	f04f 0100 	mov.w	r1, #0
 800f042:	f04f 0200 	mov.w	r2, #0
 800f046:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f04a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f04e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f052:	4689      	mov	r9, r1
 800f054:	4692      	mov	sl, r2
 800f056:	eb19 0005 	adds.w	r0, r9, r5
 800f05a:	eb4a 0106 	adc.w	r1, sl, r6
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	685b      	ldr	r3, [r3, #4]
 800f062:	461d      	mov	r5, r3
 800f064:	f04f 0600 	mov.w	r6, #0
 800f068:	196b      	adds	r3, r5, r5
 800f06a:	eb46 0406 	adc.w	r4, r6, r6
 800f06e:	461a      	mov	r2, r3
 800f070:	4623      	mov	r3, r4
 800f072:	f7f1 fe09 	bl	8000c88 <__aeabi_uldivmod>
 800f076:	4603      	mov	r3, r0
 800f078:	460c      	mov	r4, r1
 800f07a:	461a      	mov	r2, r3
 800f07c:	4b2c      	ldr	r3, [pc, #176]	; (800f130 <UART_SetConfig+0x384>)
 800f07e:	fba3 1302 	umull	r1, r3, r3, r2
 800f082:	095b      	lsrs	r3, r3, #5
 800f084:	2164      	movs	r1, #100	; 0x64
 800f086:	fb01 f303 	mul.w	r3, r1, r3
 800f08a:	1ad3      	subs	r3, r2, r3
 800f08c:	00db      	lsls	r3, r3, #3
 800f08e:	3332      	adds	r3, #50	; 0x32
 800f090:	4a27      	ldr	r2, [pc, #156]	; (800f130 <UART_SetConfig+0x384>)
 800f092:	fba2 2303 	umull	r2, r3, r2, r3
 800f096:	095b      	lsrs	r3, r3, #5
 800f098:	005b      	lsls	r3, r3, #1
 800f09a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f09e:	4498      	add	r8, r3
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	461d      	mov	r5, r3
 800f0a4:	f04f 0600 	mov.w	r6, #0
 800f0a8:	46a9      	mov	r9, r5
 800f0aa:	46b2      	mov	sl, r6
 800f0ac:	eb19 0309 	adds.w	r3, r9, r9
 800f0b0:	eb4a 040a 	adc.w	r4, sl, sl
 800f0b4:	4699      	mov	r9, r3
 800f0b6:	46a2      	mov	sl, r4
 800f0b8:	eb19 0905 	adds.w	r9, r9, r5
 800f0bc:	eb4a 0a06 	adc.w	sl, sl, r6
 800f0c0:	f04f 0100 	mov.w	r1, #0
 800f0c4:	f04f 0200 	mov.w	r2, #0
 800f0c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f0cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f0d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f0d4:	4689      	mov	r9, r1
 800f0d6:	4692      	mov	sl, r2
 800f0d8:	eb19 0005 	adds.w	r0, r9, r5
 800f0dc:	eb4a 0106 	adc.w	r1, sl, r6
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	685b      	ldr	r3, [r3, #4]
 800f0e4:	461d      	mov	r5, r3
 800f0e6:	f04f 0600 	mov.w	r6, #0
 800f0ea:	196b      	adds	r3, r5, r5
 800f0ec:	eb46 0406 	adc.w	r4, r6, r6
 800f0f0:	461a      	mov	r2, r3
 800f0f2:	4623      	mov	r3, r4
 800f0f4:	f7f1 fdc8 	bl	8000c88 <__aeabi_uldivmod>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	460c      	mov	r4, r1
 800f0fc:	461a      	mov	r2, r3
 800f0fe:	4b0c      	ldr	r3, [pc, #48]	; (800f130 <UART_SetConfig+0x384>)
 800f100:	fba3 1302 	umull	r1, r3, r3, r2
 800f104:	095b      	lsrs	r3, r3, #5
 800f106:	2164      	movs	r1, #100	; 0x64
 800f108:	fb01 f303 	mul.w	r3, r1, r3
 800f10c:	1ad3      	subs	r3, r2, r3
 800f10e:	00db      	lsls	r3, r3, #3
 800f110:	3332      	adds	r3, #50	; 0x32
 800f112:	4a07      	ldr	r2, [pc, #28]	; (800f130 <UART_SetConfig+0x384>)
 800f114:	fba2 2303 	umull	r2, r3, r2, r3
 800f118:	095b      	lsrs	r3, r3, #5
 800f11a:	f003 0207 	and.w	r2, r3, #7
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	4442      	add	r2, r8
 800f124:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f126:	e1b2      	b.n	800f48e <UART_SetConfig+0x6e2>
 800f128:	40011000 	.word	0x40011000
 800f12c:	40011400 	.word	0x40011400
 800f130:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	4ad7      	ldr	r2, [pc, #860]	; (800f498 <UART_SetConfig+0x6ec>)
 800f13a:	4293      	cmp	r3, r2
 800f13c:	d005      	beq.n	800f14a <UART_SetConfig+0x39e>
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	4ad6      	ldr	r2, [pc, #856]	; (800f49c <UART_SetConfig+0x6f0>)
 800f144:	4293      	cmp	r3, r2
 800f146:	f040 80d1 	bne.w	800f2ec <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f14a:	f7fe fe35 	bl	800ddb8 <HAL_RCC_GetPCLK2Freq>
 800f14e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	469a      	mov	sl, r3
 800f154:	f04f 0b00 	mov.w	fp, #0
 800f158:	46d0      	mov	r8, sl
 800f15a:	46d9      	mov	r9, fp
 800f15c:	eb18 0308 	adds.w	r3, r8, r8
 800f160:	eb49 0409 	adc.w	r4, r9, r9
 800f164:	4698      	mov	r8, r3
 800f166:	46a1      	mov	r9, r4
 800f168:	eb18 080a 	adds.w	r8, r8, sl
 800f16c:	eb49 090b 	adc.w	r9, r9, fp
 800f170:	f04f 0100 	mov.w	r1, #0
 800f174:	f04f 0200 	mov.w	r2, #0
 800f178:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f17c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f180:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f184:	4688      	mov	r8, r1
 800f186:	4691      	mov	r9, r2
 800f188:	eb1a 0508 	adds.w	r5, sl, r8
 800f18c:	eb4b 0609 	adc.w	r6, fp, r9
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	685b      	ldr	r3, [r3, #4]
 800f194:	4619      	mov	r1, r3
 800f196:	f04f 0200 	mov.w	r2, #0
 800f19a:	f04f 0300 	mov.w	r3, #0
 800f19e:	f04f 0400 	mov.w	r4, #0
 800f1a2:	0094      	lsls	r4, r2, #2
 800f1a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f1a8:	008b      	lsls	r3, r1, #2
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	4623      	mov	r3, r4
 800f1ae:	4628      	mov	r0, r5
 800f1b0:	4631      	mov	r1, r6
 800f1b2:	f7f1 fd69 	bl	8000c88 <__aeabi_uldivmod>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	460c      	mov	r4, r1
 800f1ba:	461a      	mov	r2, r3
 800f1bc:	4bb8      	ldr	r3, [pc, #736]	; (800f4a0 <UART_SetConfig+0x6f4>)
 800f1be:	fba3 2302 	umull	r2, r3, r3, r2
 800f1c2:	095b      	lsrs	r3, r3, #5
 800f1c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	469b      	mov	fp, r3
 800f1cc:	f04f 0c00 	mov.w	ip, #0
 800f1d0:	46d9      	mov	r9, fp
 800f1d2:	46e2      	mov	sl, ip
 800f1d4:	eb19 0309 	adds.w	r3, r9, r9
 800f1d8:	eb4a 040a 	adc.w	r4, sl, sl
 800f1dc:	4699      	mov	r9, r3
 800f1de:	46a2      	mov	sl, r4
 800f1e0:	eb19 090b 	adds.w	r9, r9, fp
 800f1e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f1e8:	f04f 0100 	mov.w	r1, #0
 800f1ec:	f04f 0200 	mov.w	r2, #0
 800f1f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f1f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f1f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f1fc:	4689      	mov	r9, r1
 800f1fe:	4692      	mov	sl, r2
 800f200:	eb1b 0509 	adds.w	r5, fp, r9
 800f204:	eb4c 060a 	adc.w	r6, ip, sl
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	4619      	mov	r1, r3
 800f20e:	f04f 0200 	mov.w	r2, #0
 800f212:	f04f 0300 	mov.w	r3, #0
 800f216:	f04f 0400 	mov.w	r4, #0
 800f21a:	0094      	lsls	r4, r2, #2
 800f21c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f220:	008b      	lsls	r3, r1, #2
 800f222:	461a      	mov	r2, r3
 800f224:	4623      	mov	r3, r4
 800f226:	4628      	mov	r0, r5
 800f228:	4631      	mov	r1, r6
 800f22a:	f7f1 fd2d 	bl	8000c88 <__aeabi_uldivmod>
 800f22e:	4603      	mov	r3, r0
 800f230:	460c      	mov	r4, r1
 800f232:	461a      	mov	r2, r3
 800f234:	4b9a      	ldr	r3, [pc, #616]	; (800f4a0 <UART_SetConfig+0x6f4>)
 800f236:	fba3 1302 	umull	r1, r3, r3, r2
 800f23a:	095b      	lsrs	r3, r3, #5
 800f23c:	2164      	movs	r1, #100	; 0x64
 800f23e:	fb01 f303 	mul.w	r3, r1, r3
 800f242:	1ad3      	subs	r3, r2, r3
 800f244:	011b      	lsls	r3, r3, #4
 800f246:	3332      	adds	r3, #50	; 0x32
 800f248:	4a95      	ldr	r2, [pc, #596]	; (800f4a0 <UART_SetConfig+0x6f4>)
 800f24a:	fba2 2303 	umull	r2, r3, r2, r3
 800f24e:	095b      	lsrs	r3, r3, #5
 800f250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f254:	4498      	add	r8, r3
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	469b      	mov	fp, r3
 800f25a:	f04f 0c00 	mov.w	ip, #0
 800f25e:	46d9      	mov	r9, fp
 800f260:	46e2      	mov	sl, ip
 800f262:	eb19 0309 	adds.w	r3, r9, r9
 800f266:	eb4a 040a 	adc.w	r4, sl, sl
 800f26a:	4699      	mov	r9, r3
 800f26c:	46a2      	mov	sl, r4
 800f26e:	eb19 090b 	adds.w	r9, r9, fp
 800f272:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f276:	f04f 0100 	mov.w	r1, #0
 800f27a:	f04f 0200 	mov.w	r2, #0
 800f27e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f282:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f286:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f28a:	4689      	mov	r9, r1
 800f28c:	4692      	mov	sl, r2
 800f28e:	eb1b 0509 	adds.w	r5, fp, r9
 800f292:	eb4c 060a 	adc.w	r6, ip, sl
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	685b      	ldr	r3, [r3, #4]
 800f29a:	4619      	mov	r1, r3
 800f29c:	f04f 0200 	mov.w	r2, #0
 800f2a0:	f04f 0300 	mov.w	r3, #0
 800f2a4:	f04f 0400 	mov.w	r4, #0
 800f2a8:	0094      	lsls	r4, r2, #2
 800f2aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f2ae:	008b      	lsls	r3, r1, #2
 800f2b0:	461a      	mov	r2, r3
 800f2b2:	4623      	mov	r3, r4
 800f2b4:	4628      	mov	r0, r5
 800f2b6:	4631      	mov	r1, r6
 800f2b8:	f7f1 fce6 	bl	8000c88 <__aeabi_uldivmod>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	460c      	mov	r4, r1
 800f2c0:	461a      	mov	r2, r3
 800f2c2:	4b77      	ldr	r3, [pc, #476]	; (800f4a0 <UART_SetConfig+0x6f4>)
 800f2c4:	fba3 1302 	umull	r1, r3, r3, r2
 800f2c8:	095b      	lsrs	r3, r3, #5
 800f2ca:	2164      	movs	r1, #100	; 0x64
 800f2cc:	fb01 f303 	mul.w	r3, r1, r3
 800f2d0:	1ad3      	subs	r3, r2, r3
 800f2d2:	011b      	lsls	r3, r3, #4
 800f2d4:	3332      	adds	r3, #50	; 0x32
 800f2d6:	4a72      	ldr	r2, [pc, #456]	; (800f4a0 <UART_SetConfig+0x6f4>)
 800f2d8:	fba2 2303 	umull	r2, r3, r2, r3
 800f2dc:	095b      	lsrs	r3, r3, #5
 800f2de:	f003 020f 	and.w	r2, r3, #15
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	4442      	add	r2, r8
 800f2e8:	609a      	str	r2, [r3, #8]
 800f2ea:	e0d0      	b.n	800f48e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f2ec:	f7fe fd50 	bl	800dd90 <HAL_RCC_GetPCLK1Freq>
 800f2f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	469a      	mov	sl, r3
 800f2f6:	f04f 0b00 	mov.w	fp, #0
 800f2fa:	46d0      	mov	r8, sl
 800f2fc:	46d9      	mov	r9, fp
 800f2fe:	eb18 0308 	adds.w	r3, r8, r8
 800f302:	eb49 0409 	adc.w	r4, r9, r9
 800f306:	4698      	mov	r8, r3
 800f308:	46a1      	mov	r9, r4
 800f30a:	eb18 080a 	adds.w	r8, r8, sl
 800f30e:	eb49 090b 	adc.w	r9, r9, fp
 800f312:	f04f 0100 	mov.w	r1, #0
 800f316:	f04f 0200 	mov.w	r2, #0
 800f31a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f31e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f322:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f326:	4688      	mov	r8, r1
 800f328:	4691      	mov	r9, r2
 800f32a:	eb1a 0508 	adds.w	r5, sl, r8
 800f32e:	eb4b 0609 	adc.w	r6, fp, r9
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	685b      	ldr	r3, [r3, #4]
 800f336:	4619      	mov	r1, r3
 800f338:	f04f 0200 	mov.w	r2, #0
 800f33c:	f04f 0300 	mov.w	r3, #0
 800f340:	f04f 0400 	mov.w	r4, #0
 800f344:	0094      	lsls	r4, r2, #2
 800f346:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f34a:	008b      	lsls	r3, r1, #2
 800f34c:	461a      	mov	r2, r3
 800f34e:	4623      	mov	r3, r4
 800f350:	4628      	mov	r0, r5
 800f352:	4631      	mov	r1, r6
 800f354:	f7f1 fc98 	bl	8000c88 <__aeabi_uldivmod>
 800f358:	4603      	mov	r3, r0
 800f35a:	460c      	mov	r4, r1
 800f35c:	461a      	mov	r2, r3
 800f35e:	4b50      	ldr	r3, [pc, #320]	; (800f4a0 <UART_SetConfig+0x6f4>)
 800f360:	fba3 2302 	umull	r2, r3, r3, r2
 800f364:	095b      	lsrs	r3, r3, #5
 800f366:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	469b      	mov	fp, r3
 800f36e:	f04f 0c00 	mov.w	ip, #0
 800f372:	46d9      	mov	r9, fp
 800f374:	46e2      	mov	sl, ip
 800f376:	eb19 0309 	adds.w	r3, r9, r9
 800f37a:	eb4a 040a 	adc.w	r4, sl, sl
 800f37e:	4699      	mov	r9, r3
 800f380:	46a2      	mov	sl, r4
 800f382:	eb19 090b 	adds.w	r9, r9, fp
 800f386:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f38a:	f04f 0100 	mov.w	r1, #0
 800f38e:	f04f 0200 	mov.w	r2, #0
 800f392:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f396:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f39a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f39e:	4689      	mov	r9, r1
 800f3a0:	4692      	mov	sl, r2
 800f3a2:	eb1b 0509 	adds.w	r5, fp, r9
 800f3a6:	eb4c 060a 	adc.w	r6, ip, sl
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	4619      	mov	r1, r3
 800f3b0:	f04f 0200 	mov.w	r2, #0
 800f3b4:	f04f 0300 	mov.w	r3, #0
 800f3b8:	f04f 0400 	mov.w	r4, #0
 800f3bc:	0094      	lsls	r4, r2, #2
 800f3be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f3c2:	008b      	lsls	r3, r1, #2
 800f3c4:	461a      	mov	r2, r3
 800f3c6:	4623      	mov	r3, r4
 800f3c8:	4628      	mov	r0, r5
 800f3ca:	4631      	mov	r1, r6
 800f3cc:	f7f1 fc5c 	bl	8000c88 <__aeabi_uldivmod>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	460c      	mov	r4, r1
 800f3d4:	461a      	mov	r2, r3
 800f3d6:	4b32      	ldr	r3, [pc, #200]	; (800f4a0 <UART_SetConfig+0x6f4>)
 800f3d8:	fba3 1302 	umull	r1, r3, r3, r2
 800f3dc:	095b      	lsrs	r3, r3, #5
 800f3de:	2164      	movs	r1, #100	; 0x64
 800f3e0:	fb01 f303 	mul.w	r3, r1, r3
 800f3e4:	1ad3      	subs	r3, r2, r3
 800f3e6:	011b      	lsls	r3, r3, #4
 800f3e8:	3332      	adds	r3, #50	; 0x32
 800f3ea:	4a2d      	ldr	r2, [pc, #180]	; (800f4a0 <UART_SetConfig+0x6f4>)
 800f3ec:	fba2 2303 	umull	r2, r3, r2, r3
 800f3f0:	095b      	lsrs	r3, r3, #5
 800f3f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f3f6:	4498      	add	r8, r3
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	469b      	mov	fp, r3
 800f3fc:	f04f 0c00 	mov.w	ip, #0
 800f400:	46d9      	mov	r9, fp
 800f402:	46e2      	mov	sl, ip
 800f404:	eb19 0309 	adds.w	r3, r9, r9
 800f408:	eb4a 040a 	adc.w	r4, sl, sl
 800f40c:	4699      	mov	r9, r3
 800f40e:	46a2      	mov	sl, r4
 800f410:	eb19 090b 	adds.w	r9, r9, fp
 800f414:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f418:	f04f 0100 	mov.w	r1, #0
 800f41c:	f04f 0200 	mov.w	r2, #0
 800f420:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f424:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f428:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f42c:	4689      	mov	r9, r1
 800f42e:	4692      	mov	sl, r2
 800f430:	eb1b 0509 	adds.w	r5, fp, r9
 800f434:	eb4c 060a 	adc.w	r6, ip, sl
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	685b      	ldr	r3, [r3, #4]
 800f43c:	4619      	mov	r1, r3
 800f43e:	f04f 0200 	mov.w	r2, #0
 800f442:	f04f 0300 	mov.w	r3, #0
 800f446:	f04f 0400 	mov.w	r4, #0
 800f44a:	0094      	lsls	r4, r2, #2
 800f44c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f450:	008b      	lsls	r3, r1, #2
 800f452:	461a      	mov	r2, r3
 800f454:	4623      	mov	r3, r4
 800f456:	4628      	mov	r0, r5
 800f458:	4631      	mov	r1, r6
 800f45a:	f7f1 fc15 	bl	8000c88 <__aeabi_uldivmod>
 800f45e:	4603      	mov	r3, r0
 800f460:	460c      	mov	r4, r1
 800f462:	461a      	mov	r2, r3
 800f464:	4b0e      	ldr	r3, [pc, #56]	; (800f4a0 <UART_SetConfig+0x6f4>)
 800f466:	fba3 1302 	umull	r1, r3, r3, r2
 800f46a:	095b      	lsrs	r3, r3, #5
 800f46c:	2164      	movs	r1, #100	; 0x64
 800f46e:	fb01 f303 	mul.w	r3, r1, r3
 800f472:	1ad3      	subs	r3, r2, r3
 800f474:	011b      	lsls	r3, r3, #4
 800f476:	3332      	adds	r3, #50	; 0x32
 800f478:	4a09      	ldr	r2, [pc, #36]	; (800f4a0 <UART_SetConfig+0x6f4>)
 800f47a:	fba2 2303 	umull	r2, r3, r2, r3
 800f47e:	095b      	lsrs	r3, r3, #5
 800f480:	f003 020f 	and.w	r2, r3, #15
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	4442      	add	r2, r8
 800f48a:	609a      	str	r2, [r3, #8]
}
 800f48c:	e7ff      	b.n	800f48e <UART_SetConfig+0x6e2>
 800f48e:	bf00      	nop
 800f490:	3714      	adds	r7, #20
 800f492:	46bd      	mov	sp, r7
 800f494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f498:	40011000 	.word	0x40011000
 800f49c:	40011400 	.word	0x40011400
 800f4a0:	51eb851f 	.word	0x51eb851f

0800f4a4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800f4a4:	b480      	push	{r7}
 800f4a6:	b085      	sub	sp, #20
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	681a      	ldr	r2, [r3, #0]
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4bc:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800f4be:	68fa      	ldr	r2, [r7, #12]
 800f4c0:	4b20      	ldr	r3, [pc, #128]	; (800f544 <FSMC_NORSRAM_Init+0xa0>)
 800f4c2:	4013      	ands	r3, r2
 800f4c4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f4ce:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800f4d4:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800f4da:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800f4e0:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800f4e6:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800f4ec:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800f4f2:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800f4f8:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800f4fe:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800f504:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800f50a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800f510:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f512:	68fa      	ldr	r2, [r7, #12]
 800f514:	4313      	orrs	r3, r2
 800f516:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	689b      	ldr	r3, [r3, #8]
 800f51c:	2b08      	cmp	r3, #8
 800f51e:	d103      	bne.n	800f528 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f526:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	681a      	ldr	r2, [r3, #0]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	68f9      	ldr	r1, [r7, #12]
 800f530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f534:	2300      	movs	r3, #0
}
 800f536:	4618      	mov	r0, r3
 800f538:	3714      	adds	r7, #20
 800f53a:	46bd      	mov	sp, r7
 800f53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f540:	4770      	bx	lr
 800f542:	bf00      	nop
 800f544:	fff00080 	.word	0xfff00080

0800f548 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f548:	b480      	push	{r7}
 800f54a:	b087      	sub	sp, #28
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	60f8      	str	r0, [r7, #12]
 800f550:	60b9      	str	r1, [r7, #8]
 800f552:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800f554:	2300      	movs	r3, #0
 800f556:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	1c5a      	adds	r2, r3, #1
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f562:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800f56a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	685b      	ldr	r3, [r3, #4]
 800f574:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f576:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	689b      	ldr	r3, [r3, #8]
 800f57c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f57e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	68db      	ldr	r3, [r3, #12]
 800f584:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800f586:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	691b      	ldr	r3, [r3, #16]
 800f58c:	3b01      	subs	r3, #1
 800f58e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f590:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	695b      	ldr	r3, [r3, #20]
 800f596:	3b02      	subs	r3, #2
 800f598:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f59a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f5a0:	4313      	orrs	r3, r2
 800f5a2:	697a      	ldr	r2, [r7, #20]
 800f5a4:	4313      	orrs	r3, r2
 800f5a6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	1c5a      	adds	r2, r3, #1
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	6979      	ldr	r1, [r7, #20]
 800f5b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f5b4:	2300      	movs	r3, #0
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	371c      	adds	r7, #28
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c0:	4770      	bx	lr
	...

0800f5c4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b087      	sub	sp, #28
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	60f8      	str	r0, [r7, #12]
 800f5cc:	60b9      	str	r1, [r7, #8]
 800f5ce:	607a      	str	r2, [r7, #4]
 800f5d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f5dc:	d122      	bne.n	800f624 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	687a      	ldr	r2, [r7, #4]
 800f5e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5e6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800f5e8:	697a      	ldr	r2, [r7, #20]
 800f5ea:	4b15      	ldr	r3, [pc, #84]	; (800f640 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800f5ec:	4013      	ands	r3, r2
 800f5ee:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	685b      	ldr	r3, [r3, #4]
 800f5f8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f5fa:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	689b      	ldr	r3, [r3, #8]
 800f600:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f602:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	68db      	ldr	r3, [r3, #12]
 800f608:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800f60a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f610:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f612:	697a      	ldr	r2, [r7, #20]
 800f614:	4313      	orrs	r3, r2
 800f616:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	687a      	ldr	r2, [r7, #4]
 800f61c:	6979      	ldr	r1, [r7, #20]
 800f61e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f622:	e005      	b.n	800f630 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	687a      	ldr	r2, [r7, #4]
 800f628:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f62c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800f630:	2300      	movs	r3, #0
}
 800f632:	4618      	mov	r0, r3
 800f634:	371c      	adds	r7, #28
 800f636:	46bd      	mov	sp, r7
 800f638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63c:	4770      	bx	lr
 800f63e:	bf00      	nop
 800f640:	cff00000 	.word	0xcff00000

0800f644 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f644:	b084      	sub	sp, #16
 800f646:	b580      	push	{r7, lr}
 800f648:	b084      	sub	sp, #16
 800f64a:	af00      	add	r7, sp, #0
 800f64c:	6078      	str	r0, [r7, #4]
 800f64e:	f107 001c 	add.w	r0, r7, #28
 800f652:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f658:	2b01      	cmp	r3, #1
 800f65a:	d122      	bne.n	800f6a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f660:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	68db      	ldr	r3, [r3, #12]
 800f66c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f674:	687a      	ldr	r2, [r7, #4]
 800f676:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	68db      	ldr	r3, [r3, #12]
 800f67c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f686:	2b01      	cmp	r3, #1
 800f688:	d105      	bne.n	800f696 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	68db      	ldr	r3, [r3, #12]
 800f68e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f001 fac6 	bl	8010c28 <USB_CoreReset>
 800f69c:	4603      	mov	r3, r0
 800f69e:	73fb      	strb	r3, [r7, #15]
 800f6a0:	e01a      	b.n	800f6d8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	68db      	ldr	r3, [r3, #12]
 800f6a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f001 faba 	bl	8010c28 <USB_CoreReset>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f6b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d106      	bne.n	800f6cc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	639a      	str	r2, [r3, #56]	; 0x38
 800f6ca:	e005      	b.n	800f6d8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6da:	2b01      	cmp	r3, #1
 800f6dc:	d10b      	bne.n	800f6f6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	689b      	ldr	r3, [r3, #8]
 800f6e2:	f043 0206 	orr.w	r2, r3, #6
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	689b      	ldr	r3, [r3, #8]
 800f6ee:	f043 0220 	orr.w	r2, r3, #32
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f6f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3710      	adds	r7, #16
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f702:	b004      	add	sp, #16
 800f704:	4770      	bx	lr
	...

0800f708 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f708:	b480      	push	{r7}
 800f70a:	b087      	sub	sp, #28
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	60f8      	str	r0, [r7, #12]
 800f710:	60b9      	str	r1, [r7, #8]
 800f712:	4613      	mov	r3, r2
 800f714:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f716:	79fb      	ldrb	r3, [r7, #7]
 800f718:	2b02      	cmp	r3, #2
 800f71a:	d165      	bne.n	800f7e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	4a41      	ldr	r2, [pc, #260]	; (800f824 <USB_SetTurnaroundTime+0x11c>)
 800f720:	4293      	cmp	r3, r2
 800f722:	d906      	bls.n	800f732 <USB_SetTurnaroundTime+0x2a>
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	4a40      	ldr	r2, [pc, #256]	; (800f828 <USB_SetTurnaroundTime+0x120>)
 800f728:	4293      	cmp	r3, r2
 800f72a:	d802      	bhi.n	800f732 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f72c:	230f      	movs	r3, #15
 800f72e:	617b      	str	r3, [r7, #20]
 800f730:	e062      	b.n	800f7f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	4a3c      	ldr	r2, [pc, #240]	; (800f828 <USB_SetTurnaroundTime+0x120>)
 800f736:	4293      	cmp	r3, r2
 800f738:	d906      	bls.n	800f748 <USB_SetTurnaroundTime+0x40>
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	4a3b      	ldr	r2, [pc, #236]	; (800f82c <USB_SetTurnaroundTime+0x124>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d802      	bhi.n	800f748 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f742:	230e      	movs	r3, #14
 800f744:	617b      	str	r3, [r7, #20]
 800f746:	e057      	b.n	800f7f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	4a38      	ldr	r2, [pc, #224]	; (800f82c <USB_SetTurnaroundTime+0x124>)
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d906      	bls.n	800f75e <USB_SetTurnaroundTime+0x56>
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	4a37      	ldr	r2, [pc, #220]	; (800f830 <USB_SetTurnaroundTime+0x128>)
 800f754:	4293      	cmp	r3, r2
 800f756:	d802      	bhi.n	800f75e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f758:	230d      	movs	r3, #13
 800f75a:	617b      	str	r3, [r7, #20]
 800f75c:	e04c      	b.n	800f7f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	4a33      	ldr	r2, [pc, #204]	; (800f830 <USB_SetTurnaroundTime+0x128>)
 800f762:	4293      	cmp	r3, r2
 800f764:	d906      	bls.n	800f774 <USB_SetTurnaroundTime+0x6c>
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	4a32      	ldr	r2, [pc, #200]	; (800f834 <USB_SetTurnaroundTime+0x12c>)
 800f76a:	4293      	cmp	r3, r2
 800f76c:	d802      	bhi.n	800f774 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f76e:	230c      	movs	r3, #12
 800f770:	617b      	str	r3, [r7, #20]
 800f772:	e041      	b.n	800f7f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	4a2f      	ldr	r2, [pc, #188]	; (800f834 <USB_SetTurnaroundTime+0x12c>)
 800f778:	4293      	cmp	r3, r2
 800f77a:	d906      	bls.n	800f78a <USB_SetTurnaroundTime+0x82>
 800f77c:	68bb      	ldr	r3, [r7, #8]
 800f77e:	4a2e      	ldr	r2, [pc, #184]	; (800f838 <USB_SetTurnaroundTime+0x130>)
 800f780:	4293      	cmp	r3, r2
 800f782:	d802      	bhi.n	800f78a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f784:	230b      	movs	r3, #11
 800f786:	617b      	str	r3, [r7, #20]
 800f788:	e036      	b.n	800f7f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	4a2a      	ldr	r2, [pc, #168]	; (800f838 <USB_SetTurnaroundTime+0x130>)
 800f78e:	4293      	cmp	r3, r2
 800f790:	d906      	bls.n	800f7a0 <USB_SetTurnaroundTime+0x98>
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	4a29      	ldr	r2, [pc, #164]	; (800f83c <USB_SetTurnaroundTime+0x134>)
 800f796:	4293      	cmp	r3, r2
 800f798:	d802      	bhi.n	800f7a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f79a:	230a      	movs	r3, #10
 800f79c:	617b      	str	r3, [r7, #20]
 800f79e:	e02b      	b.n	800f7f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	4a26      	ldr	r2, [pc, #152]	; (800f83c <USB_SetTurnaroundTime+0x134>)
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	d906      	bls.n	800f7b6 <USB_SetTurnaroundTime+0xae>
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	4a25      	ldr	r2, [pc, #148]	; (800f840 <USB_SetTurnaroundTime+0x138>)
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	d802      	bhi.n	800f7b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f7b0:	2309      	movs	r3, #9
 800f7b2:	617b      	str	r3, [r7, #20]
 800f7b4:	e020      	b.n	800f7f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f7b6:	68bb      	ldr	r3, [r7, #8]
 800f7b8:	4a21      	ldr	r2, [pc, #132]	; (800f840 <USB_SetTurnaroundTime+0x138>)
 800f7ba:	4293      	cmp	r3, r2
 800f7bc:	d906      	bls.n	800f7cc <USB_SetTurnaroundTime+0xc4>
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	4a20      	ldr	r2, [pc, #128]	; (800f844 <USB_SetTurnaroundTime+0x13c>)
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d802      	bhi.n	800f7cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f7c6:	2308      	movs	r3, #8
 800f7c8:	617b      	str	r3, [r7, #20]
 800f7ca:	e015      	b.n	800f7f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f7cc:	68bb      	ldr	r3, [r7, #8]
 800f7ce:	4a1d      	ldr	r2, [pc, #116]	; (800f844 <USB_SetTurnaroundTime+0x13c>)
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	d906      	bls.n	800f7e2 <USB_SetTurnaroundTime+0xda>
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	4a1c      	ldr	r2, [pc, #112]	; (800f848 <USB_SetTurnaroundTime+0x140>)
 800f7d8:	4293      	cmp	r3, r2
 800f7da:	d802      	bhi.n	800f7e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f7dc:	2307      	movs	r3, #7
 800f7de:	617b      	str	r3, [r7, #20]
 800f7e0:	e00a      	b.n	800f7f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f7e2:	2306      	movs	r3, #6
 800f7e4:	617b      	str	r3, [r7, #20]
 800f7e6:	e007      	b.n	800f7f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f7e8:	79fb      	ldrb	r3, [r7, #7]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d102      	bne.n	800f7f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f7ee:	2309      	movs	r3, #9
 800f7f0:	617b      	str	r3, [r7, #20]
 800f7f2:	e001      	b.n	800f7f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f7f4:	2309      	movs	r3, #9
 800f7f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	68db      	ldr	r3, [r3, #12]
 800f7fc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	68da      	ldr	r2, [r3, #12]
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	029b      	lsls	r3, r3, #10
 800f80c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f810:	431a      	orrs	r2, r3
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f816:	2300      	movs	r3, #0
}
 800f818:	4618      	mov	r0, r3
 800f81a:	371c      	adds	r7, #28
 800f81c:	46bd      	mov	sp, r7
 800f81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f822:	4770      	bx	lr
 800f824:	00d8acbf 	.word	0x00d8acbf
 800f828:	00e4e1bf 	.word	0x00e4e1bf
 800f82c:	00f423ff 	.word	0x00f423ff
 800f830:	0106737f 	.word	0x0106737f
 800f834:	011a499f 	.word	0x011a499f
 800f838:	01312cff 	.word	0x01312cff
 800f83c:	014ca43f 	.word	0x014ca43f
 800f840:	016e35ff 	.word	0x016e35ff
 800f844:	01a6ab1f 	.word	0x01a6ab1f
 800f848:	01e847ff 	.word	0x01e847ff

0800f84c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f84c:	b480      	push	{r7}
 800f84e:	b083      	sub	sp, #12
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	689b      	ldr	r3, [r3, #8]
 800f858:	f043 0201 	orr.w	r2, r3, #1
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f860:	2300      	movs	r3, #0
}
 800f862:	4618      	mov	r0, r3
 800f864:	370c      	adds	r7, #12
 800f866:	46bd      	mov	sp, r7
 800f868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86c:	4770      	bx	lr

0800f86e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f86e:	b480      	push	{r7}
 800f870:	b083      	sub	sp, #12
 800f872:	af00      	add	r7, sp, #0
 800f874:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	689b      	ldr	r3, [r3, #8]
 800f87a:	f023 0201 	bic.w	r2, r3, #1
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f882:	2300      	movs	r3, #0
}
 800f884:	4618      	mov	r0, r3
 800f886:	370c      	adds	r7, #12
 800f888:	46bd      	mov	sp, r7
 800f88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88e:	4770      	bx	lr

0800f890 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b082      	sub	sp, #8
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	460b      	mov	r3, r1
 800f89a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	68db      	ldr	r3, [r3, #12]
 800f8a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f8a8:	78fb      	ldrb	r3, [r7, #3]
 800f8aa:	2b01      	cmp	r3, #1
 800f8ac:	d106      	bne.n	800f8bc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	68db      	ldr	r3, [r3, #12]
 800f8b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	60da      	str	r2, [r3, #12]
 800f8ba:	e00b      	b.n	800f8d4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800f8bc:	78fb      	ldrb	r3, [r7, #3]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d106      	bne.n	800f8d0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	68db      	ldr	r3, [r3, #12]
 800f8c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	60da      	str	r2, [r3, #12]
 800f8ce:	e001      	b.n	800f8d4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	e003      	b.n	800f8dc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800f8d4:	2032      	movs	r0, #50	; 0x32
 800f8d6:	f7fb fdf1 	bl	800b4bc <HAL_Delay>

  return HAL_OK;
 800f8da:	2300      	movs	r3, #0
}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3708      	adds	r7, #8
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f8e4:	b084      	sub	sp, #16
 800f8e6:	b580      	push	{r7, lr}
 800f8e8:	b086      	sub	sp, #24
 800f8ea:	af00      	add	r7, sp, #0
 800f8ec:	6078      	str	r0, [r7, #4]
 800f8ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f8f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f8fe:	2300      	movs	r3, #0
 800f900:	613b      	str	r3, [r7, #16]
 800f902:	e009      	b.n	800f918 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f904:	687a      	ldr	r2, [r7, #4]
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	3340      	adds	r3, #64	; 0x40
 800f90a:	009b      	lsls	r3, r3, #2
 800f90c:	4413      	add	r3, r2
 800f90e:	2200      	movs	r2, #0
 800f910:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f912:	693b      	ldr	r3, [r7, #16]
 800f914:	3301      	adds	r3, #1
 800f916:	613b      	str	r3, [r7, #16]
 800f918:	693b      	ldr	r3, [r7, #16]
 800f91a:	2b0e      	cmp	r3, #14
 800f91c:	d9f2      	bls.n	800f904 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f91e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f920:	2b00      	cmp	r3, #0
 800f922:	d11c      	bne.n	800f95e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f92a:	685b      	ldr	r3, [r3, #4]
 800f92c:	68fa      	ldr	r2, [r7, #12]
 800f92e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f932:	f043 0302 	orr.w	r3, r3, #2
 800f936:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f93c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f948:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f954:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	639a      	str	r2, [r3, #56]	; 0x38
 800f95c:	e00b      	b.n	800f976 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f962:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f96e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f97c:	461a      	mov	r2, r3
 800f97e:	2300      	movs	r3, #0
 800f980:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f988:	4619      	mov	r1, r3
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f990:	461a      	mov	r2, r3
 800f992:	680b      	ldr	r3, [r1, #0]
 800f994:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f998:	2b01      	cmp	r3, #1
 800f99a:	d10c      	bne.n	800f9b6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d104      	bne.n	800f9ac <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f9a2:	2100      	movs	r1, #0
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f000 f949 	bl	800fc3c <USB_SetDevSpeed>
 800f9aa:	e008      	b.n	800f9be <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f9ac:	2101      	movs	r1, #1
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f000 f944 	bl	800fc3c <USB_SetDevSpeed>
 800f9b4:	e003      	b.n	800f9be <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f9b6:	2103      	movs	r1, #3
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f000 f93f 	bl	800fc3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f9be:	2110      	movs	r1, #16
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f000 f8f3 	bl	800fbac <USB_FlushTxFifo>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d001      	beq.n	800f9d0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f000 f911 	bl	800fbf8 <USB_FlushRxFifo>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d001      	beq.n	800f9e0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800f9dc:	2301      	movs	r3, #1
 800f9de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9e6:	461a      	mov	r2, r3
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9fe:	461a      	mov	r2, r3
 800fa00:	2300      	movs	r3, #0
 800fa02:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa04:	2300      	movs	r3, #0
 800fa06:	613b      	str	r3, [r7, #16]
 800fa08:	e043      	b.n	800fa92 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fa0a:	693b      	ldr	r3, [r7, #16]
 800fa0c:	015a      	lsls	r2, r3, #5
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	4413      	add	r3, r2
 800fa12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fa1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fa20:	d118      	bne.n	800fa54 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800fa22:	693b      	ldr	r3, [r7, #16]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d10a      	bne.n	800fa3e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fa28:	693b      	ldr	r3, [r7, #16]
 800fa2a:	015a      	lsls	r2, r3, #5
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	4413      	add	r3, r2
 800fa30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa34:	461a      	mov	r2, r3
 800fa36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fa3a:	6013      	str	r3, [r2, #0]
 800fa3c:	e013      	b.n	800fa66 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fa3e:	693b      	ldr	r3, [r7, #16]
 800fa40:	015a      	lsls	r2, r3, #5
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	4413      	add	r3, r2
 800fa46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa4a:	461a      	mov	r2, r3
 800fa4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fa50:	6013      	str	r3, [r2, #0]
 800fa52:	e008      	b.n	800fa66 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	015a      	lsls	r2, r3, #5
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	4413      	add	r3, r2
 800fa5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa60:	461a      	mov	r2, r3
 800fa62:	2300      	movs	r3, #0
 800fa64:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fa66:	693b      	ldr	r3, [r7, #16]
 800fa68:	015a      	lsls	r2, r3, #5
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	4413      	add	r3, r2
 800fa6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa72:	461a      	mov	r2, r3
 800fa74:	2300      	movs	r3, #0
 800fa76:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fa78:	693b      	ldr	r3, [r7, #16]
 800fa7a:	015a      	lsls	r2, r3, #5
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	4413      	add	r3, r2
 800fa80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa84:	461a      	mov	r2, r3
 800fa86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fa8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa8c:	693b      	ldr	r3, [r7, #16]
 800fa8e:	3301      	adds	r3, #1
 800fa90:	613b      	str	r3, [r7, #16]
 800fa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa94:	693a      	ldr	r2, [r7, #16]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d3b7      	bcc.n	800fa0a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	613b      	str	r3, [r7, #16]
 800fa9e:	e043      	b.n	800fb28 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	015a      	lsls	r2, r3, #5
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	4413      	add	r3, r2
 800faa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fab2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fab6:	d118      	bne.n	800faea <USB_DevInit+0x206>
    {
      if (i == 0U)
 800fab8:	693b      	ldr	r3, [r7, #16]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d10a      	bne.n	800fad4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fabe:	693b      	ldr	r3, [r7, #16]
 800fac0:	015a      	lsls	r2, r3, #5
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	4413      	add	r3, r2
 800fac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800faca:	461a      	mov	r2, r3
 800facc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fad0:	6013      	str	r3, [r2, #0]
 800fad2:	e013      	b.n	800fafc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	015a      	lsls	r2, r3, #5
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	4413      	add	r3, r2
 800fadc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fae0:	461a      	mov	r2, r3
 800fae2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fae6:	6013      	str	r3, [r2, #0]
 800fae8:	e008      	b.n	800fafc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800faea:	693b      	ldr	r3, [r7, #16]
 800faec:	015a      	lsls	r2, r3, #5
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	4413      	add	r3, r2
 800faf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800faf6:	461a      	mov	r2, r3
 800faf8:	2300      	movs	r3, #0
 800fafa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fafc:	693b      	ldr	r3, [r7, #16]
 800fafe:	015a      	lsls	r2, r3, #5
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	4413      	add	r3, r2
 800fb04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb08:	461a      	mov	r2, r3
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fb0e:	693b      	ldr	r3, [r7, #16]
 800fb10:	015a      	lsls	r2, r3, #5
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	4413      	add	r3, r2
 800fb16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb1a:	461a      	mov	r2, r3
 800fb1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fb20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fb22:	693b      	ldr	r3, [r7, #16]
 800fb24:	3301      	adds	r3, #1
 800fb26:	613b      	str	r3, [r7, #16]
 800fb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb2a:	693a      	ldr	r2, [r7, #16]
 800fb2c:	429a      	cmp	r2, r3
 800fb2e:	d3b7      	bcc.n	800faa0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb36:	691b      	ldr	r3, [r3, #16]
 800fb38:	68fa      	ldr	r2, [r7, #12]
 800fb3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fb3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fb42:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2200      	movs	r2, #0
 800fb48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fb50:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d105      	bne.n	800fb64 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	699b      	ldr	r3, [r3, #24]
 800fb5c:	f043 0210 	orr.w	r2, r3, #16
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	699a      	ldr	r2, [r3, #24]
 800fb68:	4b0f      	ldr	r3, [pc, #60]	; (800fba8 <USB_DevInit+0x2c4>)
 800fb6a:	4313      	orrs	r3, r2
 800fb6c:	687a      	ldr	r2, [r7, #4]
 800fb6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fb70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d005      	beq.n	800fb82 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	699b      	ldr	r3, [r3, #24]
 800fb7a:	f043 0208 	orr.w	r2, r3, #8
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fb82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb84:	2b01      	cmp	r3, #1
 800fb86:	d107      	bne.n	800fb98 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	699b      	ldr	r3, [r3, #24]
 800fb8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fb90:	f043 0304 	orr.w	r3, r3, #4
 800fb94:	687a      	ldr	r2, [r7, #4]
 800fb96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fb98:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3718      	adds	r7, #24
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fba4:	b004      	add	sp, #16
 800fba6:	4770      	bx	lr
 800fba8:	803c3800 	.word	0x803c3800

0800fbac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fbac:	b480      	push	{r7}
 800fbae:	b085      	sub	sp, #20
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	019b      	lsls	r3, r3, #6
 800fbbe:	f043 0220 	orr.w	r2, r3, #32
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	3301      	adds	r3, #1
 800fbca:	60fb      	str	r3, [r7, #12]
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	4a09      	ldr	r2, [pc, #36]	; (800fbf4 <USB_FlushTxFifo+0x48>)
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	d901      	bls.n	800fbd8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800fbd4:	2303      	movs	r3, #3
 800fbd6:	e006      	b.n	800fbe6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	691b      	ldr	r3, [r3, #16]
 800fbdc:	f003 0320 	and.w	r3, r3, #32
 800fbe0:	2b20      	cmp	r3, #32
 800fbe2:	d0f0      	beq.n	800fbc6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800fbe4:	2300      	movs	r3, #0
}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	3714      	adds	r7, #20
 800fbea:	46bd      	mov	sp, r7
 800fbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf0:	4770      	bx	lr
 800fbf2:	bf00      	nop
 800fbf4:	00030d40 	.word	0x00030d40

0800fbf8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fbf8:	b480      	push	{r7}
 800fbfa:	b085      	sub	sp, #20
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800fc00:	2300      	movs	r3, #0
 800fc02:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2210      	movs	r2, #16
 800fc08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	3301      	adds	r3, #1
 800fc0e:	60fb      	str	r3, [r7, #12]
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	4a09      	ldr	r2, [pc, #36]	; (800fc38 <USB_FlushRxFifo+0x40>)
 800fc14:	4293      	cmp	r3, r2
 800fc16:	d901      	bls.n	800fc1c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800fc18:	2303      	movs	r3, #3
 800fc1a:	e006      	b.n	800fc2a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	691b      	ldr	r3, [r3, #16]
 800fc20:	f003 0310 	and.w	r3, r3, #16
 800fc24:	2b10      	cmp	r3, #16
 800fc26:	d0f0      	beq.n	800fc0a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800fc28:	2300      	movs	r3, #0
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3714      	adds	r7, #20
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc34:	4770      	bx	lr
 800fc36:	bf00      	nop
 800fc38:	00030d40 	.word	0x00030d40

0800fc3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	b085      	sub	sp, #20
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	460b      	mov	r3, r1
 800fc46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc52:	681a      	ldr	r2, [r3, #0]
 800fc54:	78fb      	ldrb	r3, [r7, #3]
 800fc56:	68f9      	ldr	r1, [r7, #12]
 800fc58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc5c:	4313      	orrs	r3, r2
 800fc5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fc60:	2300      	movs	r3, #0
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	3714      	adds	r7, #20
 800fc66:	46bd      	mov	sp, r7
 800fc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6c:	4770      	bx	lr

0800fc6e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fc6e:	b480      	push	{r7}
 800fc70:	b087      	sub	sp, #28
 800fc72:	af00      	add	r7, sp, #0
 800fc74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fc7a:	693b      	ldr	r3, [r7, #16]
 800fc7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc80:	689b      	ldr	r3, [r3, #8]
 800fc82:	f003 0306 	and.w	r3, r3, #6
 800fc86:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d102      	bne.n	800fc94 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fc8e:	2300      	movs	r3, #0
 800fc90:	75fb      	strb	r3, [r7, #23]
 800fc92:	e00a      	b.n	800fcaa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	2b02      	cmp	r3, #2
 800fc98:	d002      	beq.n	800fca0 <USB_GetDevSpeed+0x32>
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	2b06      	cmp	r3, #6
 800fc9e:	d102      	bne.n	800fca6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fca0:	2302      	movs	r3, #2
 800fca2:	75fb      	strb	r3, [r7, #23]
 800fca4:	e001      	b.n	800fcaa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fca6:	230f      	movs	r3, #15
 800fca8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fcaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	371c      	adds	r7, #28
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb6:	4770      	bx	lr

0800fcb8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fcb8:	b480      	push	{r7}
 800fcba:	b085      	sub	sp, #20
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	781b      	ldrb	r3, [r3, #0]
 800fcca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	785b      	ldrb	r3, [r3, #1]
 800fcd0:	2b01      	cmp	r3, #1
 800fcd2:	d13a      	bne.n	800fd4a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcda:	69da      	ldr	r2, [r3, #28]
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	781b      	ldrb	r3, [r3, #0]
 800fce0:	f003 030f 	and.w	r3, r3, #15
 800fce4:	2101      	movs	r1, #1
 800fce6:	fa01 f303 	lsl.w	r3, r1, r3
 800fcea:	b29b      	uxth	r3, r3
 800fcec:	68f9      	ldr	r1, [r7, #12]
 800fcee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fcf2:	4313      	orrs	r3, r2
 800fcf4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	015a      	lsls	r2, r3, #5
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	4413      	add	r3, r2
 800fcfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d155      	bne.n	800fdb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	015a      	lsls	r2, r3, #5
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	4413      	add	r3, r2
 800fd14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd18:	681a      	ldr	r2, [r3, #0]
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	689b      	ldr	r3, [r3, #8]
 800fd1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	78db      	ldrb	r3, [r3, #3]
 800fd26:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fd28:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	059b      	lsls	r3, r3, #22
 800fd2e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fd30:	4313      	orrs	r3, r2
 800fd32:	68ba      	ldr	r2, [r7, #8]
 800fd34:	0151      	lsls	r1, r2, #5
 800fd36:	68fa      	ldr	r2, [r7, #12]
 800fd38:	440a      	add	r2, r1
 800fd3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fd46:	6013      	str	r3, [r2, #0]
 800fd48:	e036      	b.n	800fdb8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd50:	69da      	ldr	r2, [r3, #28]
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	f003 030f 	and.w	r3, r3, #15
 800fd5a:	2101      	movs	r1, #1
 800fd5c:	fa01 f303 	lsl.w	r3, r1, r3
 800fd60:	041b      	lsls	r3, r3, #16
 800fd62:	68f9      	ldr	r1, [r7, #12]
 800fd64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd68:	4313      	orrs	r3, r2
 800fd6a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	015a      	lsls	r2, r3, #5
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	4413      	add	r3, r2
 800fd74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d11a      	bne.n	800fdb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	015a      	lsls	r2, r3, #5
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	4413      	add	r3, r2
 800fd8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd8e:	681a      	ldr	r2, [r3, #0]
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	689b      	ldr	r3, [r3, #8]
 800fd94:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	78db      	ldrb	r3, [r3, #3]
 800fd9c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fd9e:	430b      	orrs	r3, r1
 800fda0:	4313      	orrs	r3, r2
 800fda2:	68ba      	ldr	r2, [r7, #8]
 800fda4:	0151      	lsls	r1, r2, #5
 800fda6:	68fa      	ldr	r2, [r7, #12]
 800fda8:	440a      	add	r2, r1
 800fdaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fdb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fdb6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fdb8:	2300      	movs	r3, #0
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3714      	adds	r7, #20
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc4:	4770      	bx	lr
	...

0800fdc8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fdc8:	b480      	push	{r7}
 800fdca:	b085      	sub	sp, #20
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
 800fdd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	781b      	ldrb	r3, [r3, #0]
 800fdda:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	785b      	ldrb	r3, [r3, #1]
 800fde0:	2b01      	cmp	r3, #1
 800fde2:	d161      	bne.n	800fea8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	015a      	lsls	r2, r3, #5
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	4413      	add	r3, r2
 800fdec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fdf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fdfa:	d11f      	bne.n	800fe3c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	015a      	lsls	r2, r3, #5
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	4413      	add	r3, r2
 800fe04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	68ba      	ldr	r2, [r7, #8]
 800fe0c:	0151      	lsls	r1, r2, #5
 800fe0e:	68fa      	ldr	r2, [r7, #12]
 800fe10:	440a      	add	r2, r1
 800fe12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fe1a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	015a      	lsls	r2, r3, #5
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	4413      	add	r3, r2
 800fe24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	68ba      	ldr	r2, [r7, #8]
 800fe2c:	0151      	lsls	r1, r2, #5
 800fe2e:	68fa      	ldr	r2, [r7, #12]
 800fe30:	440a      	add	r2, r1
 800fe32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	f003 030f 	and.w	r3, r3, #15
 800fe4c:	2101      	movs	r1, #1
 800fe4e:	fa01 f303 	lsl.w	r3, r1, r3
 800fe52:	b29b      	uxth	r3, r3
 800fe54:	43db      	mvns	r3, r3
 800fe56:	68f9      	ldr	r1, [r7, #12]
 800fe58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe5c:	4013      	ands	r3, r2
 800fe5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe66:	69da      	ldr	r2, [r3, #28]
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	781b      	ldrb	r3, [r3, #0]
 800fe6c:	f003 030f 	and.w	r3, r3, #15
 800fe70:	2101      	movs	r1, #1
 800fe72:	fa01 f303 	lsl.w	r3, r1, r3
 800fe76:	b29b      	uxth	r3, r3
 800fe78:	43db      	mvns	r3, r3
 800fe7a:	68f9      	ldr	r1, [r7, #12]
 800fe7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe80:	4013      	ands	r3, r2
 800fe82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	015a      	lsls	r2, r3, #5
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	4413      	add	r3, r2
 800fe8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe90:	681a      	ldr	r2, [r3, #0]
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	0159      	lsls	r1, r3, #5
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	440b      	add	r3, r1
 800fe9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe9e:	4619      	mov	r1, r3
 800fea0:	4b35      	ldr	r3, [pc, #212]	; (800ff78 <USB_DeactivateEndpoint+0x1b0>)
 800fea2:	4013      	ands	r3, r2
 800fea4:	600b      	str	r3, [r1, #0]
 800fea6:	e060      	b.n	800ff6a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	015a      	lsls	r2, r3, #5
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	4413      	add	r3, r2
 800feb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800feba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800febe:	d11f      	bne.n	800ff00 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fec0:	68bb      	ldr	r3, [r7, #8]
 800fec2:	015a      	lsls	r2, r3, #5
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	4413      	add	r3, r2
 800fec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	68ba      	ldr	r2, [r7, #8]
 800fed0:	0151      	lsls	r1, r2, #5
 800fed2:	68fa      	ldr	r2, [r7, #12]
 800fed4:	440a      	add	r2, r1
 800fed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800feda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fede:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	015a      	lsls	r2, r3, #5
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	4413      	add	r3, r2
 800fee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	68ba      	ldr	r2, [r7, #8]
 800fef0:	0151      	lsls	r1, r2, #5
 800fef2:	68fa      	ldr	r2, [r7, #12]
 800fef4:	440a      	add	r2, r1
 800fef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fefa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fefe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	781b      	ldrb	r3, [r3, #0]
 800ff0c:	f003 030f 	and.w	r3, r3, #15
 800ff10:	2101      	movs	r1, #1
 800ff12:	fa01 f303 	lsl.w	r3, r1, r3
 800ff16:	041b      	lsls	r3, r3, #16
 800ff18:	43db      	mvns	r3, r3
 800ff1a:	68f9      	ldr	r1, [r7, #12]
 800ff1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff20:	4013      	ands	r3, r2
 800ff22:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff2a:	69da      	ldr	r2, [r3, #28]
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	781b      	ldrb	r3, [r3, #0]
 800ff30:	f003 030f 	and.w	r3, r3, #15
 800ff34:	2101      	movs	r1, #1
 800ff36:	fa01 f303 	lsl.w	r3, r1, r3
 800ff3a:	041b      	lsls	r3, r3, #16
 800ff3c:	43db      	mvns	r3, r3
 800ff3e:	68f9      	ldr	r1, [r7, #12]
 800ff40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff44:	4013      	ands	r3, r2
 800ff46:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	015a      	lsls	r2, r3, #5
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	4413      	add	r3, r2
 800ff50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff54:	681a      	ldr	r2, [r3, #0]
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	0159      	lsls	r1, r3, #5
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	440b      	add	r3, r1
 800ff5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff62:	4619      	mov	r1, r3
 800ff64:	4b05      	ldr	r3, [pc, #20]	; (800ff7c <USB_DeactivateEndpoint+0x1b4>)
 800ff66:	4013      	ands	r3, r2
 800ff68:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ff6a:	2300      	movs	r3, #0
}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	3714      	adds	r7, #20
 800ff70:	46bd      	mov	sp, r7
 800ff72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff76:	4770      	bx	lr
 800ff78:	ec337800 	.word	0xec337800
 800ff7c:	eff37800 	.word	0xeff37800

0800ff80 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b08a      	sub	sp, #40	; 0x28
 800ff84:	af02      	add	r7, sp, #8
 800ff86:	60f8      	str	r0, [r7, #12]
 800ff88:	60b9      	str	r1, [r7, #8]
 800ff8a:	4613      	mov	r3, r2
 800ff8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	781b      	ldrb	r3, [r3, #0]
 800ff96:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	785b      	ldrb	r3, [r3, #1]
 800ff9c:	2b01      	cmp	r3, #1
 800ff9e:	f040 815c 	bne.w	801025a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	695b      	ldr	r3, [r3, #20]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d132      	bne.n	8010010 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ffaa:	69bb      	ldr	r3, [r7, #24]
 800ffac:	015a      	lsls	r2, r3, #5
 800ffae:	69fb      	ldr	r3, [r7, #28]
 800ffb0:	4413      	add	r3, r2
 800ffb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffb6:	691b      	ldr	r3, [r3, #16]
 800ffb8:	69ba      	ldr	r2, [r7, #24]
 800ffba:	0151      	lsls	r1, r2, #5
 800ffbc:	69fa      	ldr	r2, [r7, #28]
 800ffbe:	440a      	add	r2, r1
 800ffc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ffc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ffcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ffce:	69bb      	ldr	r3, [r7, #24]
 800ffd0:	015a      	lsls	r2, r3, #5
 800ffd2:	69fb      	ldr	r3, [r7, #28]
 800ffd4:	4413      	add	r3, r2
 800ffd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffda:	691b      	ldr	r3, [r3, #16]
 800ffdc:	69ba      	ldr	r2, [r7, #24]
 800ffde:	0151      	lsls	r1, r2, #5
 800ffe0:	69fa      	ldr	r2, [r7, #28]
 800ffe2:	440a      	add	r2, r1
 800ffe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffe8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ffec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ffee:	69bb      	ldr	r3, [r7, #24]
 800fff0:	015a      	lsls	r2, r3, #5
 800fff2:	69fb      	ldr	r3, [r7, #28]
 800fff4:	4413      	add	r3, r2
 800fff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fffa:	691b      	ldr	r3, [r3, #16]
 800fffc:	69ba      	ldr	r2, [r7, #24]
 800fffe:	0151      	lsls	r1, r2, #5
 8010000:	69fa      	ldr	r2, [r7, #28]
 8010002:	440a      	add	r2, r1
 8010004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010008:	0cdb      	lsrs	r3, r3, #19
 801000a:	04db      	lsls	r3, r3, #19
 801000c:	6113      	str	r3, [r2, #16]
 801000e:	e074      	b.n	80100fa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010010:	69bb      	ldr	r3, [r7, #24]
 8010012:	015a      	lsls	r2, r3, #5
 8010014:	69fb      	ldr	r3, [r7, #28]
 8010016:	4413      	add	r3, r2
 8010018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801001c:	691b      	ldr	r3, [r3, #16]
 801001e:	69ba      	ldr	r2, [r7, #24]
 8010020:	0151      	lsls	r1, r2, #5
 8010022:	69fa      	ldr	r2, [r7, #28]
 8010024:	440a      	add	r2, r1
 8010026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801002a:	0cdb      	lsrs	r3, r3, #19
 801002c:	04db      	lsls	r3, r3, #19
 801002e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010030:	69bb      	ldr	r3, [r7, #24]
 8010032:	015a      	lsls	r2, r3, #5
 8010034:	69fb      	ldr	r3, [r7, #28]
 8010036:	4413      	add	r3, r2
 8010038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801003c:	691b      	ldr	r3, [r3, #16]
 801003e:	69ba      	ldr	r2, [r7, #24]
 8010040:	0151      	lsls	r1, r2, #5
 8010042:	69fa      	ldr	r2, [r7, #28]
 8010044:	440a      	add	r2, r1
 8010046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801004a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801004e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010052:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8010054:	69bb      	ldr	r3, [r7, #24]
 8010056:	015a      	lsls	r2, r3, #5
 8010058:	69fb      	ldr	r3, [r7, #28]
 801005a:	4413      	add	r3, r2
 801005c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010060:	691a      	ldr	r2, [r3, #16]
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	6959      	ldr	r1, [r3, #20]
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	689b      	ldr	r3, [r3, #8]
 801006a:	440b      	add	r3, r1
 801006c:	1e59      	subs	r1, r3, #1
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	689b      	ldr	r3, [r3, #8]
 8010072:	fbb1 f3f3 	udiv	r3, r1, r3
 8010076:	04d9      	lsls	r1, r3, #19
 8010078:	4b9d      	ldr	r3, [pc, #628]	; (80102f0 <USB_EPStartXfer+0x370>)
 801007a:	400b      	ands	r3, r1
 801007c:	69b9      	ldr	r1, [r7, #24]
 801007e:	0148      	lsls	r0, r1, #5
 8010080:	69f9      	ldr	r1, [r7, #28]
 8010082:	4401      	add	r1, r0
 8010084:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010088:	4313      	orrs	r3, r2
 801008a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801008c:	69bb      	ldr	r3, [r7, #24]
 801008e:	015a      	lsls	r2, r3, #5
 8010090:	69fb      	ldr	r3, [r7, #28]
 8010092:	4413      	add	r3, r2
 8010094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010098:	691a      	ldr	r2, [r3, #16]
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	695b      	ldr	r3, [r3, #20]
 801009e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80100a2:	69b9      	ldr	r1, [r7, #24]
 80100a4:	0148      	lsls	r0, r1, #5
 80100a6:	69f9      	ldr	r1, [r7, #28]
 80100a8:	4401      	add	r1, r0
 80100aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80100ae:	4313      	orrs	r3, r2
 80100b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	78db      	ldrb	r3, [r3, #3]
 80100b6:	2b01      	cmp	r3, #1
 80100b8:	d11f      	bne.n	80100fa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80100ba:	69bb      	ldr	r3, [r7, #24]
 80100bc:	015a      	lsls	r2, r3, #5
 80100be:	69fb      	ldr	r3, [r7, #28]
 80100c0:	4413      	add	r3, r2
 80100c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100c6:	691b      	ldr	r3, [r3, #16]
 80100c8:	69ba      	ldr	r2, [r7, #24]
 80100ca:	0151      	lsls	r1, r2, #5
 80100cc:	69fa      	ldr	r2, [r7, #28]
 80100ce:	440a      	add	r2, r1
 80100d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80100d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80100da:	69bb      	ldr	r3, [r7, #24]
 80100dc:	015a      	lsls	r2, r3, #5
 80100de:	69fb      	ldr	r3, [r7, #28]
 80100e0:	4413      	add	r3, r2
 80100e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100e6:	691b      	ldr	r3, [r3, #16]
 80100e8:	69ba      	ldr	r2, [r7, #24]
 80100ea:	0151      	lsls	r1, r2, #5
 80100ec:	69fa      	ldr	r2, [r7, #28]
 80100ee:	440a      	add	r2, r1
 80100f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80100f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80100fa:	79fb      	ldrb	r3, [r7, #7]
 80100fc:	2b01      	cmp	r3, #1
 80100fe:	d14b      	bne.n	8010198 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	691b      	ldr	r3, [r3, #16]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d009      	beq.n	801011c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010108:	69bb      	ldr	r3, [r7, #24]
 801010a:	015a      	lsls	r2, r3, #5
 801010c:	69fb      	ldr	r3, [r7, #28]
 801010e:	4413      	add	r3, r2
 8010110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010114:	461a      	mov	r2, r3
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	691b      	ldr	r3, [r3, #16]
 801011a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801011c:	68bb      	ldr	r3, [r7, #8]
 801011e:	78db      	ldrb	r3, [r3, #3]
 8010120:	2b01      	cmp	r3, #1
 8010122:	d128      	bne.n	8010176 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010124:	69fb      	ldr	r3, [r7, #28]
 8010126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801012a:	689b      	ldr	r3, [r3, #8]
 801012c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010130:	2b00      	cmp	r3, #0
 8010132:	d110      	bne.n	8010156 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010134:	69bb      	ldr	r3, [r7, #24]
 8010136:	015a      	lsls	r2, r3, #5
 8010138:	69fb      	ldr	r3, [r7, #28]
 801013a:	4413      	add	r3, r2
 801013c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	69ba      	ldr	r2, [r7, #24]
 8010144:	0151      	lsls	r1, r2, #5
 8010146:	69fa      	ldr	r2, [r7, #28]
 8010148:	440a      	add	r2, r1
 801014a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801014e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010152:	6013      	str	r3, [r2, #0]
 8010154:	e00f      	b.n	8010176 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010156:	69bb      	ldr	r3, [r7, #24]
 8010158:	015a      	lsls	r2, r3, #5
 801015a:	69fb      	ldr	r3, [r7, #28]
 801015c:	4413      	add	r3, r2
 801015e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	69ba      	ldr	r2, [r7, #24]
 8010166:	0151      	lsls	r1, r2, #5
 8010168:	69fa      	ldr	r2, [r7, #28]
 801016a:	440a      	add	r2, r1
 801016c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010174:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010176:	69bb      	ldr	r3, [r7, #24]
 8010178:	015a      	lsls	r2, r3, #5
 801017a:	69fb      	ldr	r3, [r7, #28]
 801017c:	4413      	add	r3, r2
 801017e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	69ba      	ldr	r2, [r7, #24]
 8010186:	0151      	lsls	r1, r2, #5
 8010188:	69fa      	ldr	r2, [r7, #28]
 801018a:	440a      	add	r2, r1
 801018c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010190:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010194:	6013      	str	r3, [r2, #0]
 8010196:	e12f      	b.n	80103f8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010198:	69bb      	ldr	r3, [r7, #24]
 801019a:	015a      	lsls	r2, r3, #5
 801019c:	69fb      	ldr	r3, [r7, #28]
 801019e:	4413      	add	r3, r2
 80101a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	69ba      	ldr	r2, [r7, #24]
 80101a8:	0151      	lsls	r1, r2, #5
 80101aa:	69fa      	ldr	r2, [r7, #28]
 80101ac:	440a      	add	r2, r1
 80101ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80101b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	78db      	ldrb	r3, [r3, #3]
 80101bc:	2b01      	cmp	r3, #1
 80101be:	d015      	beq.n	80101ec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	695b      	ldr	r3, [r3, #20]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	f000 8117 	beq.w	80103f8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80101ca:	69fb      	ldr	r3, [r7, #28]
 80101cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80101d2:	68bb      	ldr	r3, [r7, #8]
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	f003 030f 	and.w	r3, r3, #15
 80101da:	2101      	movs	r1, #1
 80101dc:	fa01 f303 	lsl.w	r3, r1, r3
 80101e0:	69f9      	ldr	r1, [r7, #28]
 80101e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80101e6:	4313      	orrs	r3, r2
 80101e8:	634b      	str	r3, [r1, #52]	; 0x34
 80101ea:	e105      	b.n	80103f8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80101ec:	69fb      	ldr	r3, [r7, #28]
 80101ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101f2:	689b      	ldr	r3, [r3, #8]
 80101f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d110      	bne.n	801021e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80101fc:	69bb      	ldr	r3, [r7, #24]
 80101fe:	015a      	lsls	r2, r3, #5
 8010200:	69fb      	ldr	r3, [r7, #28]
 8010202:	4413      	add	r3, r2
 8010204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	69ba      	ldr	r2, [r7, #24]
 801020c:	0151      	lsls	r1, r2, #5
 801020e:	69fa      	ldr	r2, [r7, #28]
 8010210:	440a      	add	r2, r1
 8010212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010216:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801021a:	6013      	str	r3, [r2, #0]
 801021c:	e00f      	b.n	801023e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801021e:	69bb      	ldr	r3, [r7, #24]
 8010220:	015a      	lsls	r2, r3, #5
 8010222:	69fb      	ldr	r3, [r7, #28]
 8010224:	4413      	add	r3, r2
 8010226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	69ba      	ldr	r2, [r7, #24]
 801022e:	0151      	lsls	r1, r2, #5
 8010230:	69fa      	ldr	r2, [r7, #28]
 8010232:	440a      	add	r2, r1
 8010234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801023c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	68d9      	ldr	r1, [r3, #12]
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	781a      	ldrb	r2, [r3, #0]
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	695b      	ldr	r3, [r3, #20]
 801024a:	b298      	uxth	r0, r3
 801024c:	79fb      	ldrb	r3, [r7, #7]
 801024e:	9300      	str	r3, [sp, #0]
 8010250:	4603      	mov	r3, r0
 8010252:	68f8      	ldr	r0, [r7, #12]
 8010254:	f000 fa2b 	bl	80106ae <USB_WritePacket>
 8010258:	e0ce      	b.n	80103f8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801025a:	69bb      	ldr	r3, [r7, #24]
 801025c:	015a      	lsls	r2, r3, #5
 801025e:	69fb      	ldr	r3, [r7, #28]
 8010260:	4413      	add	r3, r2
 8010262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010266:	691b      	ldr	r3, [r3, #16]
 8010268:	69ba      	ldr	r2, [r7, #24]
 801026a:	0151      	lsls	r1, r2, #5
 801026c:	69fa      	ldr	r2, [r7, #28]
 801026e:	440a      	add	r2, r1
 8010270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010274:	0cdb      	lsrs	r3, r3, #19
 8010276:	04db      	lsls	r3, r3, #19
 8010278:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801027a:	69bb      	ldr	r3, [r7, #24]
 801027c:	015a      	lsls	r2, r3, #5
 801027e:	69fb      	ldr	r3, [r7, #28]
 8010280:	4413      	add	r3, r2
 8010282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010286:	691b      	ldr	r3, [r3, #16]
 8010288:	69ba      	ldr	r2, [r7, #24]
 801028a:	0151      	lsls	r1, r2, #5
 801028c:	69fa      	ldr	r2, [r7, #28]
 801028e:	440a      	add	r2, r1
 8010290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010294:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010298:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801029c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	695b      	ldr	r3, [r3, #20]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d126      	bne.n	80102f4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80102a6:	69bb      	ldr	r3, [r7, #24]
 80102a8:	015a      	lsls	r2, r3, #5
 80102aa:	69fb      	ldr	r3, [r7, #28]
 80102ac:	4413      	add	r3, r2
 80102ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102b2:	691a      	ldr	r2, [r3, #16]
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	689b      	ldr	r3, [r3, #8]
 80102b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80102bc:	69b9      	ldr	r1, [r7, #24]
 80102be:	0148      	lsls	r0, r1, #5
 80102c0:	69f9      	ldr	r1, [r7, #28]
 80102c2:	4401      	add	r1, r0
 80102c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80102c8:	4313      	orrs	r3, r2
 80102ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80102cc:	69bb      	ldr	r3, [r7, #24]
 80102ce:	015a      	lsls	r2, r3, #5
 80102d0:	69fb      	ldr	r3, [r7, #28]
 80102d2:	4413      	add	r3, r2
 80102d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102d8:	691b      	ldr	r3, [r3, #16]
 80102da:	69ba      	ldr	r2, [r7, #24]
 80102dc:	0151      	lsls	r1, r2, #5
 80102de:	69fa      	ldr	r2, [r7, #28]
 80102e0:	440a      	add	r2, r1
 80102e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80102ea:	6113      	str	r3, [r2, #16]
 80102ec:	e036      	b.n	801035c <USB_EPStartXfer+0x3dc>
 80102ee:	bf00      	nop
 80102f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	695a      	ldr	r2, [r3, #20]
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	689b      	ldr	r3, [r3, #8]
 80102fc:	4413      	add	r3, r2
 80102fe:	1e5a      	subs	r2, r3, #1
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	689b      	ldr	r3, [r3, #8]
 8010304:	fbb2 f3f3 	udiv	r3, r2, r3
 8010308:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801030a:	69bb      	ldr	r3, [r7, #24]
 801030c:	015a      	lsls	r2, r3, #5
 801030e:	69fb      	ldr	r3, [r7, #28]
 8010310:	4413      	add	r3, r2
 8010312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010316:	691a      	ldr	r2, [r3, #16]
 8010318:	8afb      	ldrh	r3, [r7, #22]
 801031a:	04d9      	lsls	r1, r3, #19
 801031c:	4b39      	ldr	r3, [pc, #228]	; (8010404 <USB_EPStartXfer+0x484>)
 801031e:	400b      	ands	r3, r1
 8010320:	69b9      	ldr	r1, [r7, #24]
 8010322:	0148      	lsls	r0, r1, #5
 8010324:	69f9      	ldr	r1, [r7, #28]
 8010326:	4401      	add	r1, r0
 8010328:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801032c:	4313      	orrs	r3, r2
 801032e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8010330:	69bb      	ldr	r3, [r7, #24]
 8010332:	015a      	lsls	r2, r3, #5
 8010334:	69fb      	ldr	r3, [r7, #28]
 8010336:	4413      	add	r3, r2
 8010338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801033c:	691a      	ldr	r2, [r3, #16]
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	689b      	ldr	r3, [r3, #8]
 8010342:	8af9      	ldrh	r1, [r7, #22]
 8010344:	fb01 f303 	mul.w	r3, r1, r3
 8010348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801034c:	69b9      	ldr	r1, [r7, #24]
 801034e:	0148      	lsls	r0, r1, #5
 8010350:	69f9      	ldr	r1, [r7, #28]
 8010352:	4401      	add	r1, r0
 8010354:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010358:	4313      	orrs	r3, r2
 801035a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801035c:	79fb      	ldrb	r3, [r7, #7]
 801035e:	2b01      	cmp	r3, #1
 8010360:	d10d      	bne.n	801037e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	68db      	ldr	r3, [r3, #12]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d009      	beq.n	801037e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	68d9      	ldr	r1, [r3, #12]
 801036e:	69bb      	ldr	r3, [r7, #24]
 8010370:	015a      	lsls	r2, r3, #5
 8010372:	69fb      	ldr	r3, [r7, #28]
 8010374:	4413      	add	r3, r2
 8010376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801037a:	460a      	mov	r2, r1
 801037c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	78db      	ldrb	r3, [r3, #3]
 8010382:	2b01      	cmp	r3, #1
 8010384:	d128      	bne.n	80103d8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010386:	69fb      	ldr	r3, [r7, #28]
 8010388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801038c:	689b      	ldr	r3, [r3, #8]
 801038e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010392:	2b00      	cmp	r3, #0
 8010394:	d110      	bne.n	80103b8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010396:	69bb      	ldr	r3, [r7, #24]
 8010398:	015a      	lsls	r2, r3, #5
 801039a:	69fb      	ldr	r3, [r7, #28]
 801039c:	4413      	add	r3, r2
 801039e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	69ba      	ldr	r2, [r7, #24]
 80103a6:	0151      	lsls	r1, r2, #5
 80103a8:	69fa      	ldr	r2, [r7, #28]
 80103aa:	440a      	add	r2, r1
 80103ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80103b4:	6013      	str	r3, [r2, #0]
 80103b6:	e00f      	b.n	80103d8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80103b8:	69bb      	ldr	r3, [r7, #24]
 80103ba:	015a      	lsls	r2, r3, #5
 80103bc:	69fb      	ldr	r3, [r7, #28]
 80103be:	4413      	add	r3, r2
 80103c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	69ba      	ldr	r2, [r7, #24]
 80103c8:	0151      	lsls	r1, r2, #5
 80103ca:	69fa      	ldr	r2, [r7, #28]
 80103cc:	440a      	add	r2, r1
 80103ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80103d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80103d8:	69bb      	ldr	r3, [r7, #24]
 80103da:	015a      	lsls	r2, r3, #5
 80103dc:	69fb      	ldr	r3, [r7, #28]
 80103de:	4413      	add	r3, r2
 80103e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	69ba      	ldr	r2, [r7, #24]
 80103e8:	0151      	lsls	r1, r2, #5
 80103ea:	69fa      	ldr	r2, [r7, #28]
 80103ec:	440a      	add	r2, r1
 80103ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80103f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80103f8:	2300      	movs	r3, #0
}
 80103fa:	4618      	mov	r0, r3
 80103fc:	3720      	adds	r7, #32
 80103fe:	46bd      	mov	sp, r7
 8010400:	bd80      	pop	{r7, pc}
 8010402:	bf00      	nop
 8010404:	1ff80000 	.word	0x1ff80000

08010408 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010408:	b480      	push	{r7}
 801040a:	b087      	sub	sp, #28
 801040c:	af00      	add	r7, sp, #0
 801040e:	60f8      	str	r0, [r7, #12]
 8010410:	60b9      	str	r1, [r7, #8]
 8010412:	4613      	mov	r3, r2
 8010414:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	781b      	ldrb	r3, [r3, #0]
 801041e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010420:	68bb      	ldr	r3, [r7, #8]
 8010422:	785b      	ldrb	r3, [r3, #1]
 8010424:	2b01      	cmp	r3, #1
 8010426:	f040 80cd 	bne.w	80105c4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	695b      	ldr	r3, [r3, #20]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d132      	bne.n	8010498 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010432:	693b      	ldr	r3, [r7, #16]
 8010434:	015a      	lsls	r2, r3, #5
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	4413      	add	r3, r2
 801043a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801043e:	691b      	ldr	r3, [r3, #16]
 8010440:	693a      	ldr	r2, [r7, #16]
 8010442:	0151      	lsls	r1, r2, #5
 8010444:	697a      	ldr	r2, [r7, #20]
 8010446:	440a      	add	r2, r1
 8010448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801044c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010450:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010454:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010456:	693b      	ldr	r3, [r7, #16]
 8010458:	015a      	lsls	r2, r3, #5
 801045a:	697b      	ldr	r3, [r7, #20]
 801045c:	4413      	add	r3, r2
 801045e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010462:	691b      	ldr	r3, [r3, #16]
 8010464:	693a      	ldr	r2, [r7, #16]
 8010466:	0151      	lsls	r1, r2, #5
 8010468:	697a      	ldr	r2, [r7, #20]
 801046a:	440a      	add	r2, r1
 801046c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010470:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010474:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	015a      	lsls	r2, r3, #5
 801047a:	697b      	ldr	r3, [r7, #20]
 801047c:	4413      	add	r3, r2
 801047e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010482:	691b      	ldr	r3, [r3, #16]
 8010484:	693a      	ldr	r2, [r7, #16]
 8010486:	0151      	lsls	r1, r2, #5
 8010488:	697a      	ldr	r2, [r7, #20]
 801048a:	440a      	add	r2, r1
 801048c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010490:	0cdb      	lsrs	r3, r3, #19
 8010492:	04db      	lsls	r3, r3, #19
 8010494:	6113      	str	r3, [r2, #16]
 8010496:	e04e      	b.n	8010536 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010498:	693b      	ldr	r3, [r7, #16]
 801049a:	015a      	lsls	r2, r3, #5
 801049c:	697b      	ldr	r3, [r7, #20]
 801049e:	4413      	add	r3, r2
 80104a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104a4:	691b      	ldr	r3, [r3, #16]
 80104a6:	693a      	ldr	r2, [r7, #16]
 80104a8:	0151      	lsls	r1, r2, #5
 80104aa:	697a      	ldr	r2, [r7, #20]
 80104ac:	440a      	add	r2, r1
 80104ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104b2:	0cdb      	lsrs	r3, r3, #19
 80104b4:	04db      	lsls	r3, r3, #19
 80104b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80104b8:	693b      	ldr	r3, [r7, #16]
 80104ba:	015a      	lsls	r2, r3, #5
 80104bc:	697b      	ldr	r3, [r7, #20]
 80104be:	4413      	add	r3, r2
 80104c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104c4:	691b      	ldr	r3, [r3, #16]
 80104c6:	693a      	ldr	r2, [r7, #16]
 80104c8:	0151      	lsls	r1, r2, #5
 80104ca:	697a      	ldr	r2, [r7, #20]
 80104cc:	440a      	add	r2, r1
 80104ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80104d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80104da:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	695a      	ldr	r2, [r3, #20]
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	689b      	ldr	r3, [r3, #8]
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d903      	bls.n	80104f0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80104e8:	68bb      	ldr	r3, [r7, #8]
 80104ea:	689a      	ldr	r2, [r3, #8]
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	015a      	lsls	r2, r3, #5
 80104f4:	697b      	ldr	r3, [r7, #20]
 80104f6:	4413      	add	r3, r2
 80104f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104fc:	691b      	ldr	r3, [r3, #16]
 80104fe:	693a      	ldr	r2, [r7, #16]
 8010500:	0151      	lsls	r1, r2, #5
 8010502:	697a      	ldr	r2, [r7, #20]
 8010504:	440a      	add	r2, r1
 8010506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801050a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801050e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010510:	693b      	ldr	r3, [r7, #16]
 8010512:	015a      	lsls	r2, r3, #5
 8010514:	697b      	ldr	r3, [r7, #20]
 8010516:	4413      	add	r3, r2
 8010518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801051c:	691a      	ldr	r2, [r3, #16]
 801051e:	68bb      	ldr	r3, [r7, #8]
 8010520:	695b      	ldr	r3, [r3, #20]
 8010522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010526:	6939      	ldr	r1, [r7, #16]
 8010528:	0148      	lsls	r0, r1, #5
 801052a:	6979      	ldr	r1, [r7, #20]
 801052c:	4401      	add	r1, r0
 801052e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010532:	4313      	orrs	r3, r2
 8010534:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010536:	79fb      	ldrb	r3, [r7, #7]
 8010538:	2b01      	cmp	r3, #1
 801053a:	d11e      	bne.n	801057a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801053c:	68bb      	ldr	r3, [r7, #8]
 801053e:	691b      	ldr	r3, [r3, #16]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d009      	beq.n	8010558 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	015a      	lsls	r2, r3, #5
 8010548:	697b      	ldr	r3, [r7, #20]
 801054a:	4413      	add	r3, r2
 801054c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010550:	461a      	mov	r2, r3
 8010552:	68bb      	ldr	r3, [r7, #8]
 8010554:	691b      	ldr	r3, [r3, #16]
 8010556:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010558:	693b      	ldr	r3, [r7, #16]
 801055a:	015a      	lsls	r2, r3, #5
 801055c:	697b      	ldr	r3, [r7, #20]
 801055e:	4413      	add	r3, r2
 8010560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	693a      	ldr	r2, [r7, #16]
 8010568:	0151      	lsls	r1, r2, #5
 801056a:	697a      	ldr	r2, [r7, #20]
 801056c:	440a      	add	r2, r1
 801056e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010572:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010576:	6013      	str	r3, [r2, #0]
 8010578:	e092      	b.n	80106a0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801057a:	693b      	ldr	r3, [r7, #16]
 801057c:	015a      	lsls	r2, r3, #5
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	4413      	add	r3, r2
 8010582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	693a      	ldr	r2, [r7, #16]
 801058a:	0151      	lsls	r1, r2, #5
 801058c:	697a      	ldr	r2, [r7, #20]
 801058e:	440a      	add	r2, r1
 8010590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010594:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010598:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	695b      	ldr	r3, [r3, #20]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d07e      	beq.n	80106a0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80105a2:	697b      	ldr	r3, [r7, #20]
 80105a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	f003 030f 	and.w	r3, r3, #15
 80105b2:	2101      	movs	r1, #1
 80105b4:	fa01 f303 	lsl.w	r3, r1, r3
 80105b8:	6979      	ldr	r1, [r7, #20]
 80105ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80105be:	4313      	orrs	r3, r2
 80105c0:	634b      	str	r3, [r1, #52]	; 0x34
 80105c2:	e06d      	b.n	80106a0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80105c4:	693b      	ldr	r3, [r7, #16]
 80105c6:	015a      	lsls	r2, r3, #5
 80105c8:	697b      	ldr	r3, [r7, #20]
 80105ca:	4413      	add	r3, r2
 80105cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105d0:	691b      	ldr	r3, [r3, #16]
 80105d2:	693a      	ldr	r2, [r7, #16]
 80105d4:	0151      	lsls	r1, r2, #5
 80105d6:	697a      	ldr	r2, [r7, #20]
 80105d8:	440a      	add	r2, r1
 80105da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80105de:	0cdb      	lsrs	r3, r3, #19
 80105e0:	04db      	lsls	r3, r3, #19
 80105e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80105e4:	693b      	ldr	r3, [r7, #16]
 80105e6:	015a      	lsls	r2, r3, #5
 80105e8:	697b      	ldr	r3, [r7, #20]
 80105ea:	4413      	add	r3, r2
 80105ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105f0:	691b      	ldr	r3, [r3, #16]
 80105f2:	693a      	ldr	r2, [r7, #16]
 80105f4:	0151      	lsls	r1, r2, #5
 80105f6:	697a      	ldr	r2, [r7, #20]
 80105f8:	440a      	add	r2, r1
 80105fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80105fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010602:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010606:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	695b      	ldr	r3, [r3, #20]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d003      	beq.n	8010618 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	689a      	ldr	r2, [r3, #8]
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010618:	693b      	ldr	r3, [r7, #16]
 801061a:	015a      	lsls	r2, r3, #5
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	4413      	add	r3, r2
 8010620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010624:	691b      	ldr	r3, [r3, #16]
 8010626:	693a      	ldr	r2, [r7, #16]
 8010628:	0151      	lsls	r1, r2, #5
 801062a:	697a      	ldr	r2, [r7, #20]
 801062c:	440a      	add	r2, r1
 801062e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010632:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010636:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8010638:	693b      	ldr	r3, [r7, #16]
 801063a:	015a      	lsls	r2, r3, #5
 801063c:	697b      	ldr	r3, [r7, #20]
 801063e:	4413      	add	r3, r2
 8010640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010644:	691a      	ldr	r2, [r3, #16]
 8010646:	68bb      	ldr	r3, [r7, #8]
 8010648:	689b      	ldr	r3, [r3, #8]
 801064a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801064e:	6939      	ldr	r1, [r7, #16]
 8010650:	0148      	lsls	r0, r1, #5
 8010652:	6979      	ldr	r1, [r7, #20]
 8010654:	4401      	add	r1, r0
 8010656:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801065a:	4313      	orrs	r3, r2
 801065c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801065e:	79fb      	ldrb	r3, [r7, #7]
 8010660:	2b01      	cmp	r3, #1
 8010662:	d10d      	bne.n	8010680 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	68db      	ldr	r3, [r3, #12]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d009      	beq.n	8010680 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	68d9      	ldr	r1, [r3, #12]
 8010670:	693b      	ldr	r3, [r7, #16]
 8010672:	015a      	lsls	r2, r3, #5
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	4413      	add	r3, r2
 8010678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801067c:	460a      	mov	r2, r1
 801067e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	015a      	lsls	r2, r3, #5
 8010684:	697b      	ldr	r3, [r7, #20]
 8010686:	4413      	add	r3, r2
 8010688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	693a      	ldr	r2, [r7, #16]
 8010690:	0151      	lsls	r1, r2, #5
 8010692:	697a      	ldr	r2, [r7, #20]
 8010694:	440a      	add	r2, r1
 8010696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801069a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801069e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80106a0:	2300      	movs	r3, #0
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	371c      	adds	r7, #28
 80106a6:	46bd      	mov	sp, r7
 80106a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ac:	4770      	bx	lr

080106ae <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80106ae:	b480      	push	{r7}
 80106b0:	b089      	sub	sp, #36	; 0x24
 80106b2:	af00      	add	r7, sp, #0
 80106b4:	60f8      	str	r0, [r7, #12]
 80106b6:	60b9      	str	r1, [r7, #8]
 80106b8:	4611      	mov	r1, r2
 80106ba:	461a      	mov	r2, r3
 80106bc:	460b      	mov	r3, r1
 80106be:	71fb      	strb	r3, [r7, #7]
 80106c0:	4613      	mov	r3, r2
 80106c2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80106cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d11a      	bne.n	801070a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80106d4:	88bb      	ldrh	r3, [r7, #4]
 80106d6:	3303      	adds	r3, #3
 80106d8:	089b      	lsrs	r3, r3, #2
 80106da:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80106dc:	2300      	movs	r3, #0
 80106de:	61bb      	str	r3, [r7, #24]
 80106e0:	e00f      	b.n	8010702 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80106e2:	79fb      	ldrb	r3, [r7, #7]
 80106e4:	031a      	lsls	r2, r3, #12
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	4413      	add	r3, r2
 80106ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106ee:	461a      	mov	r2, r3
 80106f0:	69fb      	ldr	r3, [r7, #28]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80106f6:	69fb      	ldr	r3, [r7, #28]
 80106f8:	3304      	adds	r3, #4
 80106fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80106fc:	69bb      	ldr	r3, [r7, #24]
 80106fe:	3301      	adds	r3, #1
 8010700:	61bb      	str	r3, [r7, #24]
 8010702:	69ba      	ldr	r2, [r7, #24]
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	429a      	cmp	r2, r3
 8010708:	d3eb      	bcc.n	80106e2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801070a:	2300      	movs	r3, #0
}
 801070c:	4618      	mov	r0, r3
 801070e:	3724      	adds	r7, #36	; 0x24
 8010710:	46bd      	mov	sp, r7
 8010712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010716:	4770      	bx	lr

08010718 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010718:	b480      	push	{r7}
 801071a:	b089      	sub	sp, #36	; 0x24
 801071c:	af00      	add	r7, sp, #0
 801071e:	60f8      	str	r0, [r7, #12]
 8010720:	60b9      	str	r1, [r7, #8]
 8010722:	4613      	mov	r3, r2
 8010724:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 801072e:	88fb      	ldrh	r3, [r7, #6]
 8010730:	3303      	adds	r3, #3
 8010732:	089b      	lsrs	r3, r3, #2
 8010734:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8010736:	2300      	movs	r3, #0
 8010738:	61bb      	str	r3, [r7, #24]
 801073a:	e00b      	b.n	8010754 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801073c:	697b      	ldr	r3, [r7, #20]
 801073e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010742:	681a      	ldr	r2, [r3, #0]
 8010744:	69fb      	ldr	r3, [r7, #28]
 8010746:	601a      	str	r2, [r3, #0]
    pDest++;
 8010748:	69fb      	ldr	r3, [r7, #28]
 801074a:	3304      	adds	r3, #4
 801074c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801074e:	69bb      	ldr	r3, [r7, #24]
 8010750:	3301      	adds	r3, #1
 8010752:	61bb      	str	r3, [r7, #24]
 8010754:	69ba      	ldr	r2, [r7, #24]
 8010756:	693b      	ldr	r3, [r7, #16]
 8010758:	429a      	cmp	r2, r3
 801075a:	d3ef      	bcc.n	801073c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 801075c:	69fb      	ldr	r3, [r7, #28]
}
 801075e:	4618      	mov	r0, r3
 8010760:	3724      	adds	r7, #36	; 0x24
 8010762:	46bd      	mov	sp, r7
 8010764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010768:	4770      	bx	lr

0801076a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801076a:	b480      	push	{r7}
 801076c:	b085      	sub	sp, #20
 801076e:	af00      	add	r7, sp, #0
 8010770:	6078      	str	r0, [r7, #4]
 8010772:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	781b      	ldrb	r3, [r3, #0]
 801077c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	785b      	ldrb	r3, [r3, #1]
 8010782:	2b01      	cmp	r3, #1
 8010784:	d12c      	bne.n	80107e0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	015a      	lsls	r2, r3, #5
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	4413      	add	r3, r2
 801078e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	2b00      	cmp	r3, #0
 8010796:	db12      	blt.n	80107be <USB_EPSetStall+0x54>
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d00f      	beq.n	80107be <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	015a      	lsls	r2, r3, #5
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	4413      	add	r3, r2
 80107a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	68ba      	ldr	r2, [r7, #8]
 80107ae:	0151      	lsls	r1, r2, #5
 80107b0:	68fa      	ldr	r2, [r7, #12]
 80107b2:	440a      	add	r2, r1
 80107b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80107bc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	015a      	lsls	r2, r3, #5
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	4413      	add	r3, r2
 80107c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	68ba      	ldr	r2, [r7, #8]
 80107ce:	0151      	lsls	r1, r2, #5
 80107d0:	68fa      	ldr	r2, [r7, #12]
 80107d2:	440a      	add	r2, r1
 80107d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80107dc:	6013      	str	r3, [r2, #0]
 80107de:	e02b      	b.n	8010838 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	015a      	lsls	r2, r3, #5
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	4413      	add	r3, r2
 80107e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	db12      	blt.n	8010818 <USB_EPSetStall+0xae>
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d00f      	beq.n	8010818 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	015a      	lsls	r2, r3, #5
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	4413      	add	r3, r2
 8010800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	68ba      	ldr	r2, [r7, #8]
 8010808:	0151      	lsls	r1, r2, #5
 801080a:	68fa      	ldr	r2, [r7, #12]
 801080c:	440a      	add	r2, r1
 801080e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010812:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010816:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010818:	68bb      	ldr	r3, [r7, #8]
 801081a:	015a      	lsls	r2, r3, #5
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	4413      	add	r3, r2
 8010820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	68ba      	ldr	r2, [r7, #8]
 8010828:	0151      	lsls	r1, r2, #5
 801082a:	68fa      	ldr	r2, [r7, #12]
 801082c:	440a      	add	r2, r1
 801082e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010832:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010836:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010838:	2300      	movs	r3, #0
}
 801083a:	4618      	mov	r0, r3
 801083c:	3714      	adds	r7, #20
 801083e:	46bd      	mov	sp, r7
 8010840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010844:	4770      	bx	lr

08010846 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010846:	b480      	push	{r7}
 8010848:	b085      	sub	sp, #20
 801084a:	af00      	add	r7, sp, #0
 801084c:	6078      	str	r0, [r7, #4]
 801084e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	781b      	ldrb	r3, [r3, #0]
 8010858:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	785b      	ldrb	r3, [r3, #1]
 801085e:	2b01      	cmp	r3, #1
 8010860:	d128      	bne.n	80108b4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	015a      	lsls	r2, r3, #5
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	4413      	add	r3, r2
 801086a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	68ba      	ldr	r2, [r7, #8]
 8010872:	0151      	lsls	r1, r2, #5
 8010874:	68fa      	ldr	r2, [r7, #12]
 8010876:	440a      	add	r2, r1
 8010878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801087c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010880:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	78db      	ldrb	r3, [r3, #3]
 8010886:	2b03      	cmp	r3, #3
 8010888:	d003      	beq.n	8010892 <USB_EPClearStall+0x4c>
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	78db      	ldrb	r3, [r3, #3]
 801088e:	2b02      	cmp	r3, #2
 8010890:	d138      	bne.n	8010904 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010892:	68bb      	ldr	r3, [r7, #8]
 8010894:	015a      	lsls	r2, r3, #5
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	4413      	add	r3, r2
 801089a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	68ba      	ldr	r2, [r7, #8]
 80108a2:	0151      	lsls	r1, r2, #5
 80108a4:	68fa      	ldr	r2, [r7, #12]
 80108a6:	440a      	add	r2, r1
 80108a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80108b0:	6013      	str	r3, [r2, #0]
 80108b2:	e027      	b.n	8010904 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	015a      	lsls	r2, r3, #5
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	4413      	add	r3, r2
 80108bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	68ba      	ldr	r2, [r7, #8]
 80108c4:	0151      	lsls	r1, r2, #5
 80108c6:	68fa      	ldr	r2, [r7, #12]
 80108c8:	440a      	add	r2, r1
 80108ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80108ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80108d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	78db      	ldrb	r3, [r3, #3]
 80108d8:	2b03      	cmp	r3, #3
 80108da:	d003      	beq.n	80108e4 <USB_EPClearStall+0x9e>
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	78db      	ldrb	r3, [r3, #3]
 80108e0:	2b02      	cmp	r3, #2
 80108e2:	d10f      	bne.n	8010904 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	015a      	lsls	r2, r3, #5
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	4413      	add	r3, r2
 80108ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	68ba      	ldr	r2, [r7, #8]
 80108f4:	0151      	lsls	r1, r2, #5
 80108f6:	68fa      	ldr	r2, [r7, #12]
 80108f8:	440a      	add	r2, r1
 80108fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80108fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010902:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010904:	2300      	movs	r3, #0
}
 8010906:	4618      	mov	r0, r3
 8010908:	3714      	adds	r7, #20
 801090a:	46bd      	mov	sp, r7
 801090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010910:	4770      	bx	lr

08010912 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010912:	b480      	push	{r7}
 8010914:	b085      	sub	sp, #20
 8010916:	af00      	add	r7, sp, #0
 8010918:	6078      	str	r0, [r7, #4]
 801091a:	460b      	mov	r3, r1
 801091c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	68fa      	ldr	r2, [r7, #12]
 801092c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010930:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010934:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801093c:	681a      	ldr	r2, [r3, #0]
 801093e:	78fb      	ldrb	r3, [r7, #3]
 8010940:	011b      	lsls	r3, r3, #4
 8010942:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010946:	68f9      	ldr	r1, [r7, #12]
 8010948:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801094c:	4313      	orrs	r3, r2
 801094e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010950:	2300      	movs	r3, #0
}
 8010952:	4618      	mov	r0, r3
 8010954:	3714      	adds	r7, #20
 8010956:	46bd      	mov	sp, r7
 8010958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095c:	4770      	bx	lr

0801095e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801095e:	b480      	push	{r7}
 8010960:	b085      	sub	sp, #20
 8010962:	af00      	add	r7, sp, #0
 8010964:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	68fa      	ldr	r2, [r7, #12]
 8010974:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010978:	f023 0303 	bic.w	r3, r3, #3
 801097c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010984:	685b      	ldr	r3, [r3, #4]
 8010986:	68fa      	ldr	r2, [r7, #12]
 8010988:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801098c:	f023 0302 	bic.w	r3, r3, #2
 8010990:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010992:	2300      	movs	r3, #0
}
 8010994:	4618      	mov	r0, r3
 8010996:	3714      	adds	r7, #20
 8010998:	46bd      	mov	sp, r7
 801099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099e:	4770      	bx	lr

080109a0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80109a0:	b480      	push	{r7}
 80109a2:	b085      	sub	sp, #20
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	68fa      	ldr	r2, [r7, #12]
 80109b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80109ba:	f023 0303 	bic.w	r3, r3, #3
 80109be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109c6:	685b      	ldr	r3, [r3, #4]
 80109c8:	68fa      	ldr	r2, [r7, #12]
 80109ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80109ce:	f043 0302 	orr.w	r3, r3, #2
 80109d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80109d4:	2300      	movs	r3, #0
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	3714      	adds	r7, #20
 80109da:	46bd      	mov	sp, r7
 80109dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e0:	4770      	bx	lr

080109e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80109e2:	b480      	push	{r7}
 80109e4:	b085      	sub	sp, #20
 80109e6:	af00      	add	r7, sp, #0
 80109e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	695b      	ldr	r3, [r3, #20]
 80109ee:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	699b      	ldr	r3, [r3, #24]
 80109f4:	68fa      	ldr	r2, [r7, #12]
 80109f6:	4013      	ands	r3, r2
 80109f8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80109fa:	68fb      	ldr	r3, [r7, #12]
}
 80109fc:	4618      	mov	r0, r3
 80109fe:	3714      	adds	r7, #20
 8010a00:	46bd      	mov	sp, r7
 8010a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a06:	4770      	bx	lr

08010a08 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010a08:	b480      	push	{r7}
 8010a0a:	b085      	sub	sp, #20
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a1a:	699b      	ldr	r3, [r3, #24]
 8010a1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a24:	69db      	ldr	r3, [r3, #28]
 8010a26:	68ba      	ldr	r2, [r7, #8]
 8010a28:	4013      	ands	r3, r2
 8010a2a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	0c1b      	lsrs	r3, r3, #16
}
 8010a30:	4618      	mov	r0, r3
 8010a32:	3714      	adds	r7, #20
 8010a34:	46bd      	mov	sp, r7
 8010a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3a:	4770      	bx	lr

08010a3c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010a3c:	b480      	push	{r7}
 8010a3e:	b085      	sub	sp, #20
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a4e:	699b      	ldr	r3, [r3, #24]
 8010a50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a58:	69db      	ldr	r3, [r3, #28]
 8010a5a:	68ba      	ldr	r2, [r7, #8]
 8010a5c:	4013      	ands	r3, r2
 8010a5e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010a60:	68bb      	ldr	r3, [r7, #8]
 8010a62:	b29b      	uxth	r3, r3
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	3714      	adds	r7, #20
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6e:	4770      	bx	lr

08010a70 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010a70:	b480      	push	{r7}
 8010a72:	b085      	sub	sp, #20
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
 8010a78:	460b      	mov	r3, r1
 8010a7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010a80:	78fb      	ldrb	r3, [r7, #3]
 8010a82:	015a      	lsls	r2, r3, #5
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	4413      	add	r3, r2
 8010a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a8c:	689b      	ldr	r3, [r3, #8]
 8010a8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a96:	695b      	ldr	r3, [r3, #20]
 8010a98:	68ba      	ldr	r2, [r7, #8]
 8010a9a:	4013      	ands	r3, r2
 8010a9c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010a9e:	68bb      	ldr	r3, [r7, #8]
}
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	3714      	adds	r7, #20
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aaa:	4770      	bx	lr

08010aac <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010aac:	b480      	push	{r7}
 8010aae:	b087      	sub	sp, #28
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
 8010ab4:	460b      	mov	r3, r1
 8010ab6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ac2:	691b      	ldr	r3, [r3, #16]
 8010ac4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010ac6:	697b      	ldr	r3, [r7, #20]
 8010ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ace:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010ad0:	78fb      	ldrb	r3, [r7, #3]
 8010ad2:	f003 030f 	and.w	r3, r3, #15
 8010ad6:	68fa      	ldr	r2, [r7, #12]
 8010ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8010adc:	01db      	lsls	r3, r3, #7
 8010ade:	b2db      	uxtb	r3, r3
 8010ae0:	693a      	ldr	r2, [r7, #16]
 8010ae2:	4313      	orrs	r3, r2
 8010ae4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010ae6:	78fb      	ldrb	r3, [r7, #3]
 8010ae8:	015a      	lsls	r2, r3, #5
 8010aea:	697b      	ldr	r3, [r7, #20]
 8010aec:	4413      	add	r3, r2
 8010aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010af2:	689b      	ldr	r3, [r3, #8]
 8010af4:	693a      	ldr	r2, [r7, #16]
 8010af6:	4013      	ands	r3, r2
 8010af8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010afa:	68bb      	ldr	r3, [r7, #8]
}
 8010afc:	4618      	mov	r0, r3
 8010afe:	371c      	adds	r7, #28
 8010b00:	46bd      	mov	sp, r7
 8010b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b06:	4770      	bx	lr

08010b08 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010b08:	b480      	push	{r7}
 8010b0a:	b083      	sub	sp, #12
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	695b      	ldr	r3, [r3, #20]
 8010b14:	f003 0301 	and.w	r3, r3, #1
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	370c      	adds	r7, #12
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b22:	4770      	bx	lr

08010b24 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010b24:	b480      	push	{r7}
 8010b26:	b085      	sub	sp, #20
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	68fa      	ldr	r2, [r7, #12]
 8010b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b3e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010b42:	f023 0307 	bic.w	r3, r3, #7
 8010b46:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b4e:	685b      	ldr	r3, [r3, #4]
 8010b50:	68fa      	ldr	r2, [r7, #12]
 8010b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010b5a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010b5c:	2300      	movs	r3, #0
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	3714      	adds	r7, #20
 8010b62:	46bd      	mov	sp, r7
 8010b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b68:	4770      	bx	lr
	...

08010b6c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010b6c:	b480      	push	{r7}
 8010b6e:	b087      	sub	sp, #28
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	60f8      	str	r0, [r7, #12]
 8010b74:	460b      	mov	r3, r1
 8010b76:	607a      	str	r2, [r7, #4]
 8010b78:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	333c      	adds	r3, #60	; 0x3c
 8010b82:	3304      	adds	r3, #4
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010b88:	693b      	ldr	r3, [r7, #16]
 8010b8a:	4a26      	ldr	r2, [pc, #152]	; (8010c24 <USB_EP0_OutStart+0xb8>)
 8010b8c:	4293      	cmp	r3, r2
 8010b8e:	d90a      	bls.n	8010ba6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010ba0:	d101      	bne.n	8010ba6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	e037      	b.n	8010c16 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010ba6:	697b      	ldr	r3, [r7, #20]
 8010ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bac:	461a      	mov	r2, r3
 8010bae:	2300      	movs	r3, #0
 8010bb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bb8:	691b      	ldr	r3, [r3, #16]
 8010bba:	697a      	ldr	r2, [r7, #20]
 8010bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010bc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bcc:	691b      	ldr	r3, [r3, #16]
 8010bce:	697a      	ldr	r2, [r7, #20]
 8010bd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bd4:	f043 0318 	orr.w	r3, r3, #24
 8010bd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010bda:	697b      	ldr	r3, [r7, #20]
 8010bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010be0:	691b      	ldr	r3, [r3, #16]
 8010be2:	697a      	ldr	r2, [r7, #20]
 8010be4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010be8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010bec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010bee:	7afb      	ldrb	r3, [r7, #11]
 8010bf0:	2b01      	cmp	r3, #1
 8010bf2:	d10f      	bne.n	8010c14 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010bf4:	697b      	ldr	r3, [r7, #20]
 8010bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010c00:	697b      	ldr	r3, [r7, #20]
 8010c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	697a      	ldr	r2, [r7, #20]
 8010c0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c0e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010c12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010c14:	2300      	movs	r3, #0
}
 8010c16:	4618      	mov	r0, r3
 8010c18:	371c      	adds	r7, #28
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c20:	4770      	bx	lr
 8010c22:	bf00      	nop
 8010c24:	4f54300a 	.word	0x4f54300a

08010c28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010c28:	b480      	push	{r7}
 8010c2a:	b085      	sub	sp, #20
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010c30:	2300      	movs	r3, #0
 8010c32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	3301      	adds	r3, #1
 8010c38:	60fb      	str	r3, [r7, #12]
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	4a13      	ldr	r2, [pc, #76]	; (8010c8c <USB_CoreReset+0x64>)
 8010c3e:	4293      	cmp	r3, r2
 8010c40:	d901      	bls.n	8010c46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010c42:	2303      	movs	r3, #3
 8010c44:	e01b      	b.n	8010c7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	691b      	ldr	r3, [r3, #16]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	daf2      	bge.n	8010c34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	691b      	ldr	r3, [r3, #16]
 8010c56:	f043 0201 	orr.w	r2, r3, #1
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	3301      	adds	r3, #1
 8010c62:	60fb      	str	r3, [r7, #12]
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	4a09      	ldr	r2, [pc, #36]	; (8010c8c <USB_CoreReset+0x64>)
 8010c68:	4293      	cmp	r3, r2
 8010c6a:	d901      	bls.n	8010c70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010c6c:	2303      	movs	r3, #3
 8010c6e:	e006      	b.n	8010c7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	691b      	ldr	r3, [r3, #16]
 8010c74:	f003 0301 	and.w	r3, r3, #1
 8010c78:	2b01      	cmp	r3, #1
 8010c7a:	d0f0      	beq.n	8010c5e <USB_CoreReset+0x36>

  return HAL_OK;
 8010c7c:	2300      	movs	r3, #0
}
 8010c7e:	4618      	mov	r0, r3
 8010c80:	3714      	adds	r7, #20
 8010c82:	46bd      	mov	sp, r7
 8010c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c88:	4770      	bx	lr
 8010c8a:	bf00      	nop
 8010c8c:	00030d40 	.word	0x00030d40

08010c90 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b084      	sub	sp, #16
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
 8010c98:	460b      	mov	r3, r1
 8010c9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010c9c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010ca0:	f004 ffcc 	bl	8015c3c <malloc>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d105      	bne.n	8010cba <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010cb6:	2302      	movs	r3, #2
 8010cb8:	e066      	b.n	8010d88 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	68fa      	ldr	r2, [r7, #12]
 8010cbe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	7c1b      	ldrb	r3, [r3, #16]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d119      	bne.n	8010cfe <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010cca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010cce:	2202      	movs	r2, #2
 8010cd0:	2181      	movs	r1, #129	; 0x81
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f004 fe39 	bl	801594a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	2201      	movs	r2, #1
 8010cdc:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010cde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010ce2:	2202      	movs	r2, #2
 8010ce4:	2101      	movs	r1, #1
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f004 fe2f 	bl	801594a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2201      	movs	r2, #1
 8010cf0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2210      	movs	r2, #16
 8010cf8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8010cfc:	e016      	b.n	8010d2c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010cfe:	2340      	movs	r3, #64	; 0x40
 8010d00:	2202      	movs	r2, #2
 8010d02:	2181      	movs	r1, #129	; 0x81
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f004 fe20 	bl	801594a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2201      	movs	r2, #1
 8010d0e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010d10:	2340      	movs	r3, #64	; 0x40
 8010d12:	2202      	movs	r2, #2
 8010d14:	2101      	movs	r1, #1
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f004 fe17 	bl	801594a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2201      	movs	r2, #1
 8010d20:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	2210      	movs	r2, #16
 8010d28:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010d2c:	2308      	movs	r3, #8
 8010d2e:	2203      	movs	r2, #3
 8010d30:	2182      	movs	r1, #130	; 0x82
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f004 fe09 	bl	801594a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2201      	movs	r2, #1
 8010d3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	2200      	movs	r2, #0
 8010d56:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	7c1b      	ldrb	r3, [r3, #16]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d109      	bne.n	8010d76 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010d6c:	2101      	movs	r1, #1
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f004 feda 	bl	8015b28 <USBD_LL_PrepareReceive>
 8010d74:	e007      	b.n	8010d86 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010d7c:	2340      	movs	r3, #64	; 0x40
 8010d7e:	2101      	movs	r1, #1
 8010d80:	6878      	ldr	r0, [r7, #4]
 8010d82:	f004 fed1 	bl	8015b28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010d86:	2300      	movs	r3, #0
}
 8010d88:	4618      	mov	r0, r3
 8010d8a:	3710      	adds	r7, #16
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd80      	pop	{r7, pc}

08010d90 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b084      	sub	sp, #16
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
 8010d98:	460b      	mov	r3, r1
 8010d9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010da0:	2181      	movs	r1, #129	; 0x81
 8010da2:	6878      	ldr	r0, [r7, #4]
 8010da4:	f004 fdf7 	bl	8015996 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2200      	movs	r2, #0
 8010dac:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010dae:	2101      	movs	r1, #1
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f004 fdf0 	bl	8015996 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	2200      	movs	r2, #0
 8010dba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010dbe:	2182      	movs	r1, #130	; 0x82
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f004 fde8 	bl	8015996 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2200      	movs	r2, #0
 8010dca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d00e      	beq.n	8010dfe <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010de6:	685b      	ldr	r3, [r3, #4]
 8010de8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010df0:	4618      	mov	r0, r3
 8010df2:	f004 ff2b 	bl	8015c4c <free>
    pdev->pClassData = NULL;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	2200      	movs	r2, #0
 8010dfa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8010dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	3710      	adds	r7, #16
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}

08010e08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b086      	sub	sp, #24
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e18:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8010e1e:	2300      	movs	r3, #0
 8010e20:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8010e22:	2300      	movs	r3, #0
 8010e24:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	781b      	ldrb	r3, [r3, #0]
 8010e2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d03a      	beq.n	8010ea8 <USBD_CDC_Setup+0xa0>
 8010e32:	2b20      	cmp	r3, #32
 8010e34:	f040 8097 	bne.w	8010f66 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	88db      	ldrh	r3, [r3, #6]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d029      	beq.n	8010e94 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	781b      	ldrb	r3, [r3, #0]
 8010e44:	b25b      	sxtb	r3, r3
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	da11      	bge.n	8010e6e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010e50:	689b      	ldr	r3, [r3, #8]
 8010e52:	683a      	ldr	r2, [r7, #0]
 8010e54:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8010e56:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010e58:	683a      	ldr	r2, [r7, #0]
 8010e5a:	88d2      	ldrh	r2, [r2, #6]
 8010e5c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010e5e:	6939      	ldr	r1, [r7, #16]
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	88db      	ldrh	r3, [r3, #6]
 8010e64:	461a      	mov	r2, r3
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	f001 fa9d 	bl	80123a6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8010e6c:	e082      	b.n	8010f74 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	785a      	ldrb	r2, [r3, #1]
 8010e72:	693b      	ldr	r3, [r7, #16]
 8010e74:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	88db      	ldrh	r3, [r3, #6]
 8010e7c:	b2da      	uxtb	r2, r3
 8010e7e:	693b      	ldr	r3, [r7, #16]
 8010e80:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010e84:	6939      	ldr	r1, [r7, #16]
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	88db      	ldrh	r3, [r3, #6]
 8010e8a:	461a      	mov	r2, r3
 8010e8c:	6878      	ldr	r0, [r7, #4]
 8010e8e:	f001 fab6 	bl	80123fe <USBD_CtlPrepareRx>
    break;
 8010e92:	e06f      	b.n	8010f74 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010e9a:	689b      	ldr	r3, [r3, #8]
 8010e9c:	683a      	ldr	r2, [r7, #0]
 8010e9e:	7850      	ldrb	r0, [r2, #1]
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	6839      	ldr	r1, [r7, #0]
 8010ea4:	4798      	blx	r3
    break;
 8010ea6:	e065      	b.n	8010f74 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	785b      	ldrb	r3, [r3, #1]
 8010eac:	2b0b      	cmp	r3, #11
 8010eae:	d84f      	bhi.n	8010f50 <USBD_CDC_Setup+0x148>
 8010eb0:	a201      	add	r2, pc, #4	; (adr r2, 8010eb8 <USBD_CDC_Setup+0xb0>)
 8010eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eb6:	bf00      	nop
 8010eb8:	08010ee9 	.word	0x08010ee9
 8010ebc:	08010f5f 	.word	0x08010f5f
 8010ec0:	08010f51 	.word	0x08010f51
 8010ec4:	08010f51 	.word	0x08010f51
 8010ec8:	08010f51 	.word	0x08010f51
 8010ecc:	08010f51 	.word	0x08010f51
 8010ed0:	08010f51 	.word	0x08010f51
 8010ed4:	08010f51 	.word	0x08010f51
 8010ed8:	08010f51 	.word	0x08010f51
 8010edc:	08010f51 	.word	0x08010f51
 8010ee0:	08010f11 	.word	0x08010f11
 8010ee4:	08010f39 	.word	0x08010f39
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010eee:	2b03      	cmp	r3, #3
 8010ef0:	d107      	bne.n	8010f02 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010ef2:	f107 030c 	add.w	r3, r7, #12
 8010ef6:	2202      	movs	r2, #2
 8010ef8:	4619      	mov	r1, r3
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f001 fa53 	bl	80123a6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010f00:	e030      	b.n	8010f64 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8010f02:	6839      	ldr	r1, [r7, #0]
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	f001 f9dd 	bl	80122c4 <USBD_CtlError>
        ret = USBD_FAIL;
 8010f0a:	2303      	movs	r3, #3
 8010f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8010f0e:	e029      	b.n	8010f64 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f16:	2b03      	cmp	r3, #3
 8010f18:	d107      	bne.n	8010f2a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010f1a:	f107 030f 	add.w	r3, r7, #15
 8010f1e:	2201      	movs	r2, #1
 8010f20:	4619      	mov	r1, r3
 8010f22:	6878      	ldr	r0, [r7, #4]
 8010f24:	f001 fa3f 	bl	80123a6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010f28:	e01c      	b.n	8010f64 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8010f2a:	6839      	ldr	r1, [r7, #0]
 8010f2c:	6878      	ldr	r0, [r7, #4]
 8010f2e:	f001 f9c9 	bl	80122c4 <USBD_CtlError>
        ret = USBD_FAIL;
 8010f32:	2303      	movs	r3, #3
 8010f34:	75fb      	strb	r3, [r7, #23]
      break;
 8010f36:	e015      	b.n	8010f64 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f3e:	2b03      	cmp	r3, #3
 8010f40:	d00f      	beq.n	8010f62 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8010f42:	6839      	ldr	r1, [r7, #0]
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f001 f9bd 	bl	80122c4 <USBD_CtlError>
        ret = USBD_FAIL;
 8010f4a:	2303      	movs	r3, #3
 8010f4c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8010f4e:	e008      	b.n	8010f62 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8010f50:	6839      	ldr	r1, [r7, #0]
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f001 f9b6 	bl	80122c4 <USBD_CtlError>
      ret = USBD_FAIL;
 8010f58:	2303      	movs	r3, #3
 8010f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8010f5c:	e002      	b.n	8010f64 <USBD_CDC_Setup+0x15c>
      break;
 8010f5e:	bf00      	nop
 8010f60:	e008      	b.n	8010f74 <USBD_CDC_Setup+0x16c>
      break;
 8010f62:	bf00      	nop
    }
    break;
 8010f64:	e006      	b.n	8010f74 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8010f66:	6839      	ldr	r1, [r7, #0]
 8010f68:	6878      	ldr	r0, [r7, #4]
 8010f6a:	f001 f9ab 	bl	80122c4 <USBD_CtlError>
    ret = USBD_FAIL;
 8010f6e:	2303      	movs	r3, #3
 8010f70:	75fb      	strb	r3, [r7, #23]
    break;
 8010f72:	bf00      	nop
  }

  return (uint8_t)ret;
 8010f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f76:	4618      	mov	r0, r3
 8010f78:	3718      	adds	r7, #24
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bd80      	pop	{r7, pc}
 8010f7e:	bf00      	nop

08010f80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b084      	sub	sp, #16
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
 8010f88:	460b      	mov	r3, r1
 8010f8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010f92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d101      	bne.n	8010fa2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010f9e:	2303      	movs	r3, #3
 8010fa0:	e049      	b.n	8011036 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010fa8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010faa:	78fa      	ldrb	r2, [r7, #3]
 8010fac:	6879      	ldr	r1, [r7, #4]
 8010fae:	4613      	mov	r3, r2
 8010fb0:	009b      	lsls	r3, r3, #2
 8010fb2:	4413      	add	r3, r2
 8010fb4:	009b      	lsls	r3, r3, #2
 8010fb6:	440b      	add	r3, r1
 8010fb8:	3318      	adds	r3, #24
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d029      	beq.n	8011014 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010fc0:	78fa      	ldrb	r2, [r7, #3]
 8010fc2:	6879      	ldr	r1, [r7, #4]
 8010fc4:	4613      	mov	r3, r2
 8010fc6:	009b      	lsls	r3, r3, #2
 8010fc8:	4413      	add	r3, r2
 8010fca:	009b      	lsls	r3, r3, #2
 8010fcc:	440b      	add	r3, r1
 8010fce:	3318      	adds	r3, #24
 8010fd0:	681a      	ldr	r2, [r3, #0]
 8010fd2:	78f9      	ldrb	r1, [r7, #3]
 8010fd4:	68f8      	ldr	r0, [r7, #12]
 8010fd6:	460b      	mov	r3, r1
 8010fd8:	00db      	lsls	r3, r3, #3
 8010fda:	1a5b      	subs	r3, r3, r1
 8010fdc:	009b      	lsls	r3, r3, #2
 8010fde:	4403      	add	r3, r0
 8010fe0:	3344      	adds	r3, #68	; 0x44
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	fbb2 f1f3 	udiv	r1, r2, r3
 8010fe8:	fb03 f301 	mul.w	r3, r3, r1
 8010fec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d110      	bne.n	8011014 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8010ff2:	78fa      	ldrb	r2, [r7, #3]
 8010ff4:	6879      	ldr	r1, [r7, #4]
 8010ff6:	4613      	mov	r3, r2
 8010ff8:	009b      	lsls	r3, r3, #2
 8010ffa:	4413      	add	r3, r2
 8010ffc:	009b      	lsls	r3, r3, #2
 8010ffe:	440b      	add	r3, r1
 8011000:	3318      	adds	r3, #24
 8011002:	2200      	movs	r2, #0
 8011004:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011006:	78f9      	ldrb	r1, [r7, #3]
 8011008:	2300      	movs	r3, #0
 801100a:	2200      	movs	r2, #0
 801100c:	6878      	ldr	r0, [r7, #4]
 801100e:	f004 fd6a 	bl	8015ae6 <USBD_LL_Transmit>
 8011012:	e00f      	b.n	8011034 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011014:	68bb      	ldr	r3, [r7, #8]
 8011016:	2200      	movs	r2, #0
 8011018:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011022:	691b      	ldr	r3, [r3, #16]
 8011024:	68ba      	ldr	r2, [r7, #8]
 8011026:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801102a:	68ba      	ldr	r2, [r7, #8]
 801102c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011030:	78fa      	ldrb	r2, [r7, #3]
 8011032:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8011034:	2300      	movs	r3, #0
}
 8011036:	4618      	mov	r0, r3
 8011038:	3710      	adds	r7, #16
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}

0801103e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801103e:	b580      	push	{r7, lr}
 8011040:	b084      	sub	sp, #16
 8011042:	af00      	add	r7, sp, #0
 8011044:	6078      	str	r0, [r7, #4]
 8011046:	460b      	mov	r3, r1
 8011048:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011050:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011058:	2b00      	cmp	r3, #0
 801105a:	d101      	bne.n	8011060 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801105c:	2303      	movs	r3, #3
 801105e:	e015      	b.n	801108c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011060:	78fb      	ldrb	r3, [r7, #3]
 8011062:	4619      	mov	r1, r3
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f004 fd80 	bl	8015b6a <USBD_LL_GetRxDataSize>
 801106a:	4602      	mov	r2, r0
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011078:	68db      	ldr	r3, [r3, #12]
 801107a:	68fa      	ldr	r2, [r7, #12]
 801107c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011080:	68fa      	ldr	r2, [r7, #12]
 8011082:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011086:	4611      	mov	r1, r2
 8011088:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801108a:	2300      	movs	r3, #0
}
 801108c:	4618      	mov	r0, r3
 801108e:	3710      	adds	r7, #16
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}

08011094 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b084      	sub	sp, #16
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110a2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d015      	beq.n	80110da <USBD_CDC_EP0_RxReady+0x46>
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80110b4:	2bff      	cmp	r3, #255	; 0xff
 80110b6:	d010      	beq.n	80110da <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80110be:	689b      	ldr	r3, [r3, #8]
 80110c0:	68fa      	ldr	r2, [r7, #12]
 80110c2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80110c6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80110c8:	68fa      	ldr	r2, [r7, #12]
 80110ca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80110ce:	b292      	uxth	r2, r2
 80110d0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	22ff      	movs	r2, #255	; 0xff
 80110d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80110da:	2300      	movs	r3, #0
}
 80110dc:	4618      	mov	r0, r3
 80110de:	3710      	adds	r7, #16
 80110e0:	46bd      	mov	sp, r7
 80110e2:	bd80      	pop	{r7, pc}

080110e4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80110e4:	b480      	push	{r7}
 80110e6:	b083      	sub	sp, #12
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	2243      	movs	r2, #67	; 0x43
 80110f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80110f2:	4b03      	ldr	r3, [pc, #12]	; (8011100 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80110f4:	4618      	mov	r0, r3
 80110f6:	370c      	adds	r7, #12
 80110f8:	46bd      	mov	sp, r7
 80110fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fe:	4770      	bx	lr
 8011100:	200008bc 	.word	0x200008bc

08011104 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011104:	b480      	push	{r7}
 8011106:	b083      	sub	sp, #12
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2243      	movs	r2, #67	; 0x43
 8011110:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8011112:	4b03      	ldr	r3, [pc, #12]	; (8011120 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011114:	4618      	mov	r0, r3
 8011116:	370c      	adds	r7, #12
 8011118:	46bd      	mov	sp, r7
 801111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111e:	4770      	bx	lr
 8011120:	20000878 	.word	0x20000878

08011124 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011124:	b480      	push	{r7}
 8011126:	b083      	sub	sp, #12
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2243      	movs	r2, #67	; 0x43
 8011130:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8011132:	4b03      	ldr	r3, [pc, #12]	; (8011140 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011134:	4618      	mov	r0, r3
 8011136:	370c      	adds	r7, #12
 8011138:	46bd      	mov	sp, r7
 801113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113e:	4770      	bx	lr
 8011140:	20000900 	.word	0x20000900

08011144 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011144:	b480      	push	{r7}
 8011146:	b083      	sub	sp, #12
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	220a      	movs	r2, #10
 8011150:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011152:	4b03      	ldr	r3, [pc, #12]	; (8011160 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011154:	4618      	mov	r0, r3
 8011156:	370c      	adds	r7, #12
 8011158:	46bd      	mov	sp, r7
 801115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115e:	4770      	bx	lr
 8011160:	20000834 	.word	0x20000834

08011164 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011164:	b480      	push	{r7}
 8011166:	b083      	sub	sp, #12
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
 801116c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d101      	bne.n	8011178 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011174:	2303      	movs	r3, #3
 8011176:	e004      	b.n	8011182 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	683a      	ldr	r2, [r7, #0]
 801117c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011180:	2300      	movs	r3, #0
}
 8011182:	4618      	mov	r0, r3
 8011184:	370c      	adds	r7, #12
 8011186:	46bd      	mov	sp, r7
 8011188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118c:	4770      	bx	lr

0801118e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801118e:	b480      	push	{r7}
 8011190:	b087      	sub	sp, #28
 8011192:	af00      	add	r7, sp, #0
 8011194:	60f8      	str	r0, [r7, #12]
 8011196:	60b9      	str	r1, [r7, #8]
 8011198:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111a0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80111a2:	697b      	ldr	r3, [r7, #20]
 80111a4:	68ba      	ldr	r2, [r7, #8]
 80111a6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80111aa:	697b      	ldr	r3, [r7, #20]
 80111ac:	687a      	ldr	r2, [r7, #4]
 80111ae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80111b2:	2300      	movs	r3, #0
}
 80111b4:	4618      	mov	r0, r3
 80111b6:	371c      	adds	r7, #28
 80111b8:	46bd      	mov	sp, r7
 80111ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111be:	4770      	bx	lr

080111c0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80111c0:	b480      	push	{r7}
 80111c2:	b085      	sub	sp, #20
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
 80111c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111d0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	683a      	ldr	r2, [r7, #0]
 80111d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80111da:	2300      	movs	r3, #0
}
 80111dc:	4618      	mov	r0, r3
 80111de:	3714      	adds	r7, #20
 80111e0:	46bd      	mov	sp, r7
 80111e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e6:	4770      	bx	lr

080111e8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b084      	sub	sp, #16
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111f6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80111f8:	2301      	movs	r3, #1
 80111fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011202:	2b00      	cmp	r3, #0
 8011204:	d101      	bne.n	801120a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011206:	2303      	movs	r3, #3
 8011208:	e01a      	b.n	8011240 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 801120a:	68bb      	ldr	r3, [r7, #8]
 801120c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011210:	2b00      	cmp	r3, #0
 8011212:	d114      	bne.n	801123e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011214:	68bb      	ldr	r3, [r7, #8]
 8011216:	2201      	movs	r2, #1
 8011218:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801121c:	68bb      	ldr	r3, [r7, #8]
 801121e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801122c:	68bb      	ldr	r3, [r7, #8]
 801122e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011232:	2181      	movs	r1, #129	; 0x81
 8011234:	6878      	ldr	r0, [r7, #4]
 8011236:	f004 fc56 	bl	8015ae6 <USBD_LL_Transmit>

    ret = USBD_OK;
 801123a:	2300      	movs	r3, #0
 801123c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801123e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011240:	4618      	mov	r0, r3
 8011242:	3710      	adds	r7, #16
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}

08011248 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b084      	sub	sp, #16
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011256:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801125e:	2b00      	cmp	r3, #0
 8011260:	d101      	bne.n	8011266 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011262:	2303      	movs	r3, #3
 8011264:	e016      	b.n	8011294 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	7c1b      	ldrb	r3, [r3, #16]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d109      	bne.n	8011282 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011278:	2101      	movs	r1, #1
 801127a:	6878      	ldr	r0, [r7, #4]
 801127c:	f004 fc54 	bl	8015b28 <USBD_LL_PrepareReceive>
 8011280:	e007      	b.n	8011292 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011288:	2340      	movs	r3, #64	; 0x40
 801128a:	2101      	movs	r1, #1
 801128c:	6878      	ldr	r0, [r7, #4]
 801128e:	f004 fc4b 	bl	8015b28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011292:	2300      	movs	r3, #0
}
 8011294:	4618      	mov	r0, r3
 8011296:	3710      	adds	r7, #16
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}

0801129c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b086      	sub	sp, #24
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	60f8      	str	r0, [r7, #12]
 80112a4:	60b9      	str	r1, [r7, #8]
 80112a6:	4613      	mov	r3, r2
 80112a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d101      	bne.n	80112b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80112b0:	2303      	movs	r3, #3
 80112b2:	e025      	b.n	8011300 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d003      	beq.n	80112c6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	2200      	movs	r2, #0
 80112c2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d003      	beq.n	80112d8 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	2200      	movs	r2, #0
 80112d4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80112d8:	68bb      	ldr	r3, [r7, #8]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d003      	beq.n	80112e6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	68ba      	ldr	r2, [r7, #8]
 80112e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	2201      	movs	r2, #1
 80112ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	79fa      	ldrb	r2, [r7, #7]
 80112f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80112f4:	68f8      	ldr	r0, [r7, #12]
 80112f6:	f004 fac1 	bl	801587c <USBD_LL_Init>
 80112fa:	4603      	mov	r3, r0
 80112fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80112fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8011300:	4618      	mov	r0, r3
 8011302:	3718      	adds	r7, #24
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}

08011308 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b084      	sub	sp, #16
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
 8011310:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011312:	2300      	movs	r3, #0
 8011314:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d101      	bne.n	8011320 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801131c:	2303      	movs	r3, #3
 801131e:	e010      	b.n	8011342 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	683a      	ldr	r2, [r7, #0]
 8011324:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011330:	f107 020e 	add.w	r2, r7, #14
 8011334:	4610      	mov	r0, r2
 8011336:	4798      	blx	r3
 8011338:	4602      	mov	r2, r0
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8011340:	2300      	movs	r3, #0
}
 8011342:	4618      	mov	r0, r3
 8011344:	3710      	adds	r7, #16
 8011346:	46bd      	mov	sp, r7
 8011348:	bd80      	pop	{r7, pc}

0801134a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801134a:	b580      	push	{r7, lr}
 801134c:	b082      	sub	sp, #8
 801134e:	af00      	add	r7, sp, #0
 8011350:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011352:	6878      	ldr	r0, [r7, #4]
 8011354:	f004 fade 	bl	8015914 <USBD_LL_Start>
 8011358:	4603      	mov	r3, r0
}
 801135a:	4618      	mov	r0, r3
 801135c:	3708      	adds	r7, #8
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}

08011362 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011362:	b480      	push	{r7}
 8011364:	b083      	sub	sp, #12
 8011366:	af00      	add	r7, sp, #0
 8011368:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801136a:	2300      	movs	r3, #0
}
 801136c:	4618      	mov	r0, r3
 801136e:	370c      	adds	r7, #12
 8011370:	46bd      	mov	sp, r7
 8011372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011376:	4770      	bx	lr

08011378 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b084      	sub	sp, #16
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
 8011380:	460b      	mov	r3, r1
 8011382:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011384:	2303      	movs	r3, #3
 8011386:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801138e:	2b00      	cmp	r3, #0
 8011390:	d009      	beq.n	80113a6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	78fa      	ldrb	r2, [r7, #3]
 801139c:	4611      	mov	r1, r2
 801139e:	6878      	ldr	r0, [r7, #4]
 80113a0:	4798      	blx	r3
 80113a2:	4603      	mov	r3, r0
 80113a4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80113a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80113a8:	4618      	mov	r0, r3
 80113aa:	3710      	adds	r7, #16
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}

080113b0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b082      	sub	sp, #8
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	460b      	mov	r3, r1
 80113ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d007      	beq.n	80113d6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113cc:	685b      	ldr	r3, [r3, #4]
 80113ce:	78fa      	ldrb	r2, [r7, #3]
 80113d0:	4611      	mov	r1, r2
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	4798      	blx	r3
  }

  return USBD_OK;
 80113d6:	2300      	movs	r3, #0
}
 80113d8:	4618      	mov	r0, r3
 80113da:	3708      	adds	r7, #8
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}

080113e0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b084      	sub	sp, #16
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
 80113e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80113f0:	6839      	ldr	r1, [r7, #0]
 80113f2:	4618      	mov	r0, r3
 80113f4:	f000 ff2c 	bl	8012250 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2201      	movs	r2, #1
 80113fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011406:	461a      	mov	r2, r3
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011414:	f003 031f 	and.w	r3, r3, #31
 8011418:	2b01      	cmp	r3, #1
 801141a:	d00e      	beq.n	801143a <USBD_LL_SetupStage+0x5a>
 801141c:	2b01      	cmp	r3, #1
 801141e:	d302      	bcc.n	8011426 <USBD_LL_SetupStage+0x46>
 8011420:	2b02      	cmp	r3, #2
 8011422:	d014      	beq.n	801144e <USBD_LL_SetupStage+0x6e>
 8011424:	e01d      	b.n	8011462 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801142c:	4619      	mov	r1, r3
 801142e:	6878      	ldr	r0, [r7, #4]
 8011430:	f000 fa18 	bl	8011864 <USBD_StdDevReq>
 8011434:	4603      	mov	r3, r0
 8011436:	73fb      	strb	r3, [r7, #15]
      break;
 8011438:	e020      	b.n	801147c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011440:	4619      	mov	r1, r3
 8011442:	6878      	ldr	r0, [r7, #4]
 8011444:	f000 fa7c 	bl	8011940 <USBD_StdItfReq>
 8011448:	4603      	mov	r3, r0
 801144a:	73fb      	strb	r3, [r7, #15]
      break;
 801144c:	e016      	b.n	801147c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011454:	4619      	mov	r1, r3
 8011456:	6878      	ldr	r0, [r7, #4]
 8011458:	f000 fab8 	bl	80119cc <USBD_StdEPReq>
 801145c:	4603      	mov	r3, r0
 801145e:	73fb      	strb	r3, [r7, #15]
      break;
 8011460:	e00c      	b.n	801147c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011468:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801146c:	b2db      	uxtb	r3, r3
 801146e:	4619      	mov	r1, r3
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f004 faaf 	bl	80159d4 <USBD_LL_StallEP>
 8011476:	4603      	mov	r3, r0
 8011478:	73fb      	strb	r3, [r7, #15]
      break;
 801147a:	bf00      	nop
  }

  return ret;
 801147c:	7bfb      	ldrb	r3, [r7, #15]
}
 801147e:	4618      	mov	r0, r3
 8011480:	3710      	adds	r7, #16
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}

08011486 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011486:	b580      	push	{r7, lr}
 8011488:	b086      	sub	sp, #24
 801148a:	af00      	add	r7, sp, #0
 801148c:	60f8      	str	r0, [r7, #12]
 801148e:	460b      	mov	r3, r1
 8011490:	607a      	str	r2, [r7, #4]
 8011492:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011494:	7afb      	ldrb	r3, [r7, #11]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d137      	bne.n	801150a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80114a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80114a8:	2b03      	cmp	r3, #3
 80114aa:	d14a      	bne.n	8011542 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80114ac:	693b      	ldr	r3, [r7, #16]
 80114ae:	689a      	ldr	r2, [r3, #8]
 80114b0:	693b      	ldr	r3, [r7, #16]
 80114b2:	68db      	ldr	r3, [r3, #12]
 80114b4:	429a      	cmp	r2, r3
 80114b6:	d913      	bls.n	80114e0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80114b8:	693b      	ldr	r3, [r7, #16]
 80114ba:	689a      	ldr	r2, [r3, #8]
 80114bc:	693b      	ldr	r3, [r7, #16]
 80114be:	68db      	ldr	r3, [r3, #12]
 80114c0:	1ad2      	subs	r2, r2, r3
 80114c2:	693b      	ldr	r3, [r7, #16]
 80114c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80114c6:	693b      	ldr	r3, [r7, #16]
 80114c8:	68da      	ldr	r2, [r3, #12]
 80114ca:	693b      	ldr	r3, [r7, #16]
 80114cc:	689b      	ldr	r3, [r3, #8]
 80114ce:	4293      	cmp	r3, r2
 80114d0:	bf28      	it	cs
 80114d2:	4613      	movcs	r3, r2
 80114d4:	461a      	mov	r2, r3
 80114d6:	6879      	ldr	r1, [r7, #4]
 80114d8:	68f8      	ldr	r0, [r7, #12]
 80114da:	f000 ffad 	bl	8012438 <USBD_CtlContinueRx>
 80114de:	e030      	b.n	8011542 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114e6:	691b      	ldr	r3, [r3, #16]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d00a      	beq.n	8011502 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80114f2:	2b03      	cmp	r3, #3
 80114f4:	d105      	bne.n	8011502 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114fc:	691b      	ldr	r3, [r3, #16]
 80114fe:	68f8      	ldr	r0, [r7, #12]
 8011500:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8011502:	68f8      	ldr	r0, [r7, #12]
 8011504:	f000 ffa9 	bl	801245a <USBD_CtlSendStatus>
 8011508:	e01b      	b.n	8011542 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011510:	699b      	ldr	r3, [r3, #24]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d013      	beq.n	801153e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 801151c:	2b03      	cmp	r3, #3
 801151e:	d10e      	bne.n	801153e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011526:	699b      	ldr	r3, [r3, #24]
 8011528:	7afa      	ldrb	r2, [r7, #11]
 801152a:	4611      	mov	r1, r2
 801152c:	68f8      	ldr	r0, [r7, #12]
 801152e:	4798      	blx	r3
 8011530:	4603      	mov	r3, r0
 8011532:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011534:	7dfb      	ldrb	r3, [r7, #23]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d003      	beq.n	8011542 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 801153a:	7dfb      	ldrb	r3, [r7, #23]
 801153c:	e002      	b.n	8011544 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801153e:	2303      	movs	r3, #3
 8011540:	e000      	b.n	8011544 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8011542:	2300      	movs	r3, #0
}
 8011544:	4618      	mov	r0, r3
 8011546:	3718      	adds	r7, #24
 8011548:	46bd      	mov	sp, r7
 801154a:	bd80      	pop	{r7, pc}

0801154c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b086      	sub	sp, #24
 8011550:	af00      	add	r7, sp, #0
 8011552:	60f8      	str	r0, [r7, #12]
 8011554:	460b      	mov	r3, r1
 8011556:	607a      	str	r2, [r7, #4]
 8011558:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801155a:	7afb      	ldrb	r3, [r7, #11]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d16a      	bne.n	8011636 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	3314      	adds	r3, #20
 8011564:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801156c:	2b02      	cmp	r3, #2
 801156e:	d155      	bne.n	801161c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8011570:	693b      	ldr	r3, [r7, #16]
 8011572:	689a      	ldr	r2, [r3, #8]
 8011574:	693b      	ldr	r3, [r7, #16]
 8011576:	68db      	ldr	r3, [r3, #12]
 8011578:	429a      	cmp	r2, r3
 801157a:	d914      	bls.n	80115a6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801157c:	693b      	ldr	r3, [r7, #16]
 801157e:	689a      	ldr	r2, [r3, #8]
 8011580:	693b      	ldr	r3, [r7, #16]
 8011582:	68db      	ldr	r3, [r3, #12]
 8011584:	1ad2      	subs	r2, r2, r3
 8011586:	693b      	ldr	r3, [r7, #16]
 8011588:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801158a:	693b      	ldr	r3, [r7, #16]
 801158c:	689b      	ldr	r3, [r3, #8]
 801158e:	461a      	mov	r2, r3
 8011590:	6879      	ldr	r1, [r7, #4]
 8011592:	68f8      	ldr	r0, [r7, #12]
 8011594:	f000 ff22 	bl	80123dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011598:	2300      	movs	r3, #0
 801159a:	2200      	movs	r2, #0
 801159c:	2100      	movs	r1, #0
 801159e:	68f8      	ldr	r0, [r7, #12]
 80115a0:	f004 fac2 	bl	8015b28 <USBD_LL_PrepareReceive>
 80115a4:	e03a      	b.n	801161c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80115a6:	693b      	ldr	r3, [r7, #16]
 80115a8:	68da      	ldr	r2, [r3, #12]
 80115aa:	693b      	ldr	r3, [r7, #16]
 80115ac:	689b      	ldr	r3, [r3, #8]
 80115ae:	429a      	cmp	r2, r3
 80115b0:	d11c      	bne.n	80115ec <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80115b2:	693b      	ldr	r3, [r7, #16]
 80115b4:	685a      	ldr	r2, [r3, #4]
 80115b6:	693b      	ldr	r3, [r7, #16]
 80115b8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80115ba:	429a      	cmp	r2, r3
 80115bc:	d316      	bcc.n	80115ec <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80115be:	693b      	ldr	r3, [r7, #16]
 80115c0:	685a      	ldr	r2, [r3, #4]
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d20f      	bcs.n	80115ec <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80115cc:	2200      	movs	r2, #0
 80115ce:	2100      	movs	r1, #0
 80115d0:	68f8      	ldr	r0, [r7, #12]
 80115d2:	f000 ff03 	bl	80123dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	2200      	movs	r2, #0
 80115da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80115de:	2300      	movs	r3, #0
 80115e0:	2200      	movs	r2, #0
 80115e2:	2100      	movs	r1, #0
 80115e4:	68f8      	ldr	r0, [r7, #12]
 80115e6:	f004 fa9f 	bl	8015b28 <USBD_LL_PrepareReceive>
 80115ea:	e017      	b.n	801161c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115f2:	68db      	ldr	r3, [r3, #12]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d00a      	beq.n	801160e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80115fe:	2b03      	cmp	r3, #3
 8011600:	d105      	bne.n	801160e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011608:	68db      	ldr	r3, [r3, #12]
 801160a:	68f8      	ldr	r0, [r7, #12]
 801160c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801160e:	2180      	movs	r1, #128	; 0x80
 8011610:	68f8      	ldr	r0, [r7, #12]
 8011612:	f004 f9df 	bl	80159d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011616:	68f8      	ldr	r0, [r7, #12]
 8011618:	f000 ff32 	bl	8012480 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011622:	2b01      	cmp	r3, #1
 8011624:	d123      	bne.n	801166e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011626:	68f8      	ldr	r0, [r7, #12]
 8011628:	f7ff fe9b 	bl	8011362 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	2200      	movs	r2, #0
 8011630:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011634:	e01b      	b.n	801166e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801163c:	695b      	ldr	r3, [r3, #20]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d013      	beq.n	801166a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011648:	2b03      	cmp	r3, #3
 801164a:	d10e      	bne.n	801166a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011652:	695b      	ldr	r3, [r3, #20]
 8011654:	7afa      	ldrb	r2, [r7, #11]
 8011656:	4611      	mov	r1, r2
 8011658:	68f8      	ldr	r0, [r7, #12]
 801165a:	4798      	blx	r3
 801165c:	4603      	mov	r3, r0
 801165e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011660:	7dfb      	ldrb	r3, [r7, #23]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d003      	beq.n	801166e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8011666:	7dfb      	ldrb	r3, [r7, #23]
 8011668:	e002      	b.n	8011670 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801166a:	2303      	movs	r3, #3
 801166c:	e000      	b.n	8011670 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 801166e:	2300      	movs	r3, #0
}
 8011670:	4618      	mov	r0, r3
 8011672:	3718      	adds	r7, #24
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}

08011678 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b082      	sub	sp, #8
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	2201      	movs	r2, #1
 8011684:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	2200      	movs	r2, #0
 801168c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	2200      	movs	r2, #0
 8011694:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	2200      	movs	r2, #0
 801169a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d009      	beq.n	80116bc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116ae:	685b      	ldr	r3, [r3, #4]
 80116b0:	687a      	ldr	r2, [r7, #4]
 80116b2:	6852      	ldr	r2, [r2, #4]
 80116b4:	b2d2      	uxtb	r2, r2
 80116b6:	4611      	mov	r1, r2
 80116b8:	6878      	ldr	r0, [r7, #4]
 80116ba:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80116bc:	2340      	movs	r3, #64	; 0x40
 80116be:	2200      	movs	r2, #0
 80116c0:	2100      	movs	r1, #0
 80116c2:	6878      	ldr	r0, [r7, #4]
 80116c4:	f004 f941 	bl	801594a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2201      	movs	r2, #1
 80116cc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2240      	movs	r2, #64	; 0x40
 80116d4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80116d8:	2340      	movs	r3, #64	; 0x40
 80116da:	2200      	movs	r2, #0
 80116dc:	2180      	movs	r1, #128	; 0x80
 80116de:	6878      	ldr	r0, [r7, #4]
 80116e0:	f004 f933 	bl	801594a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	2201      	movs	r2, #1
 80116e8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	2240      	movs	r2, #64	; 0x40
 80116ee:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80116f0:	2300      	movs	r3, #0
}
 80116f2:	4618      	mov	r0, r3
 80116f4:	3708      	adds	r7, #8
 80116f6:	46bd      	mov	sp, r7
 80116f8:	bd80      	pop	{r7, pc}

080116fa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80116fa:	b480      	push	{r7}
 80116fc:	b083      	sub	sp, #12
 80116fe:	af00      	add	r7, sp, #0
 8011700:	6078      	str	r0, [r7, #4]
 8011702:	460b      	mov	r3, r1
 8011704:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	78fa      	ldrb	r2, [r7, #3]
 801170a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801170c:	2300      	movs	r3, #0
}
 801170e:	4618      	mov	r0, r3
 8011710:	370c      	adds	r7, #12
 8011712:	46bd      	mov	sp, r7
 8011714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011718:	4770      	bx	lr

0801171a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801171a:	b480      	push	{r7}
 801171c:	b083      	sub	sp, #12
 801171e:	af00      	add	r7, sp, #0
 8011720:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	2204      	movs	r2, #4
 8011732:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011736:	2300      	movs	r3, #0
}
 8011738:	4618      	mov	r0, r3
 801173a:	370c      	adds	r7, #12
 801173c:	46bd      	mov	sp, r7
 801173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011742:	4770      	bx	lr

08011744 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011744:	b480      	push	{r7}
 8011746:	b083      	sub	sp, #12
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011752:	2b04      	cmp	r3, #4
 8011754:	d105      	bne.n	8011762 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011762:	2300      	movs	r3, #0
}
 8011764:	4618      	mov	r0, r3
 8011766:	370c      	adds	r7, #12
 8011768:	46bd      	mov	sp, r7
 801176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176e:	4770      	bx	lr

08011770 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b082      	sub	sp, #8
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801177e:	2b03      	cmp	r3, #3
 8011780:	d10b      	bne.n	801179a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011788:	69db      	ldr	r3, [r3, #28]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d005      	beq.n	801179a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011794:	69db      	ldr	r3, [r3, #28]
 8011796:	6878      	ldr	r0, [r7, #4]
 8011798:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801179a:	2300      	movs	r3, #0
}
 801179c:	4618      	mov	r0, r3
 801179e:	3708      	adds	r7, #8
 80117a0:	46bd      	mov	sp, r7
 80117a2:	bd80      	pop	{r7, pc}

080117a4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80117a4:	b480      	push	{r7}
 80117a6:	b083      	sub	sp, #12
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
 80117ac:	460b      	mov	r3, r1
 80117ae:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80117b0:	2300      	movs	r3, #0
}
 80117b2:	4618      	mov	r0, r3
 80117b4:	370c      	adds	r7, #12
 80117b6:	46bd      	mov	sp, r7
 80117b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117bc:	4770      	bx	lr

080117be <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80117be:	b480      	push	{r7}
 80117c0:	b083      	sub	sp, #12
 80117c2:	af00      	add	r7, sp, #0
 80117c4:	6078      	str	r0, [r7, #4]
 80117c6:	460b      	mov	r3, r1
 80117c8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80117ca:	2300      	movs	r3, #0
}
 80117cc:	4618      	mov	r0, r3
 80117ce:	370c      	adds	r7, #12
 80117d0:	46bd      	mov	sp, r7
 80117d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d6:	4770      	bx	lr

080117d8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80117d8:	b480      	push	{r7}
 80117da:	b083      	sub	sp, #12
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80117e0:	2300      	movs	r3, #0
}
 80117e2:	4618      	mov	r0, r3
 80117e4:	370c      	adds	r7, #12
 80117e6:	46bd      	mov	sp, r7
 80117e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ec:	4770      	bx	lr

080117ee <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80117ee:	b580      	push	{r7, lr}
 80117f0:	b082      	sub	sp, #8
 80117f2:	af00      	add	r7, sp, #0
 80117f4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	2201      	movs	r2, #1
 80117fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011804:	2b00      	cmp	r3, #0
 8011806:	d009      	beq.n	801181c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801180e:	685b      	ldr	r3, [r3, #4]
 8011810:	687a      	ldr	r2, [r7, #4]
 8011812:	6852      	ldr	r2, [r2, #4]
 8011814:	b2d2      	uxtb	r2, r2
 8011816:	4611      	mov	r1, r2
 8011818:	6878      	ldr	r0, [r7, #4]
 801181a:	4798      	blx	r3
  }

  return USBD_OK;
 801181c:	2300      	movs	r3, #0
}
 801181e:	4618      	mov	r0, r3
 8011820:	3708      	adds	r7, #8
 8011822:	46bd      	mov	sp, r7
 8011824:	bd80      	pop	{r7, pc}

08011826 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011826:	b480      	push	{r7}
 8011828:	b087      	sub	sp, #28
 801182a:	af00      	add	r7, sp, #0
 801182c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011832:	697b      	ldr	r3, [r7, #20]
 8011834:	781b      	ldrb	r3, [r3, #0]
 8011836:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011838:	697b      	ldr	r3, [r7, #20]
 801183a:	3301      	adds	r3, #1
 801183c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801183e:	697b      	ldr	r3, [r7, #20]
 8011840:	781b      	ldrb	r3, [r3, #0]
 8011842:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011844:	8a3b      	ldrh	r3, [r7, #16]
 8011846:	021b      	lsls	r3, r3, #8
 8011848:	b21a      	sxth	r2, r3
 801184a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801184e:	4313      	orrs	r3, r2
 8011850:	b21b      	sxth	r3, r3
 8011852:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011854:	89fb      	ldrh	r3, [r7, #14]
}
 8011856:	4618      	mov	r0, r3
 8011858:	371c      	adds	r7, #28
 801185a:	46bd      	mov	sp, r7
 801185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011860:	4770      	bx	lr
	...

08011864 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b084      	sub	sp, #16
 8011868:	af00      	add	r7, sp, #0
 801186a:	6078      	str	r0, [r7, #4]
 801186c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801186e:	2300      	movs	r3, #0
 8011870:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	781b      	ldrb	r3, [r3, #0]
 8011876:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801187a:	2b20      	cmp	r3, #32
 801187c:	d004      	beq.n	8011888 <USBD_StdDevReq+0x24>
 801187e:	2b40      	cmp	r3, #64	; 0x40
 8011880:	d002      	beq.n	8011888 <USBD_StdDevReq+0x24>
 8011882:	2b00      	cmp	r3, #0
 8011884:	d00a      	beq.n	801189c <USBD_StdDevReq+0x38>
 8011886:	e050      	b.n	801192a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801188e:	689b      	ldr	r3, [r3, #8]
 8011890:	6839      	ldr	r1, [r7, #0]
 8011892:	6878      	ldr	r0, [r7, #4]
 8011894:	4798      	blx	r3
 8011896:	4603      	mov	r3, r0
 8011898:	73fb      	strb	r3, [r7, #15]
    break;
 801189a:	e04b      	b.n	8011934 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	785b      	ldrb	r3, [r3, #1]
 80118a0:	2b09      	cmp	r3, #9
 80118a2:	d83c      	bhi.n	801191e <USBD_StdDevReq+0xba>
 80118a4:	a201      	add	r2, pc, #4	; (adr r2, 80118ac <USBD_StdDevReq+0x48>)
 80118a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118aa:	bf00      	nop
 80118ac:	08011901 	.word	0x08011901
 80118b0:	08011915 	.word	0x08011915
 80118b4:	0801191f 	.word	0x0801191f
 80118b8:	0801190b 	.word	0x0801190b
 80118bc:	0801191f 	.word	0x0801191f
 80118c0:	080118df 	.word	0x080118df
 80118c4:	080118d5 	.word	0x080118d5
 80118c8:	0801191f 	.word	0x0801191f
 80118cc:	080118f7 	.word	0x080118f7
 80118d0:	080118e9 	.word	0x080118e9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80118d4:	6839      	ldr	r1, [r7, #0]
 80118d6:	6878      	ldr	r0, [r7, #4]
 80118d8:	f000 f9ce 	bl	8011c78 <USBD_GetDescriptor>
      break;
 80118dc:	e024      	b.n	8011928 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80118de:	6839      	ldr	r1, [r7, #0]
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	f000 fb33 	bl	8011f4c <USBD_SetAddress>
      break;
 80118e6:	e01f      	b.n	8011928 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80118e8:	6839      	ldr	r1, [r7, #0]
 80118ea:	6878      	ldr	r0, [r7, #4]
 80118ec:	f000 fb70 	bl	8011fd0 <USBD_SetConfig>
 80118f0:	4603      	mov	r3, r0
 80118f2:	73fb      	strb	r3, [r7, #15]
      break;
 80118f4:	e018      	b.n	8011928 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80118f6:	6839      	ldr	r1, [r7, #0]
 80118f8:	6878      	ldr	r0, [r7, #4]
 80118fa:	f000 fc0d 	bl	8012118 <USBD_GetConfig>
      break;
 80118fe:	e013      	b.n	8011928 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8011900:	6839      	ldr	r1, [r7, #0]
 8011902:	6878      	ldr	r0, [r7, #4]
 8011904:	f000 fc3c 	bl	8012180 <USBD_GetStatus>
      break;
 8011908:	e00e      	b.n	8011928 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 801190a:	6839      	ldr	r1, [r7, #0]
 801190c:	6878      	ldr	r0, [r7, #4]
 801190e:	f000 fc6a 	bl	80121e6 <USBD_SetFeature>
      break;
 8011912:	e009      	b.n	8011928 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8011914:	6839      	ldr	r1, [r7, #0]
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f000 fc79 	bl	801220e <USBD_ClrFeature>
      break;
 801191c:	e004      	b.n	8011928 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 801191e:	6839      	ldr	r1, [r7, #0]
 8011920:	6878      	ldr	r0, [r7, #4]
 8011922:	f000 fccf 	bl	80122c4 <USBD_CtlError>
      break;
 8011926:	bf00      	nop
    }
    break;
 8011928:	e004      	b.n	8011934 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 801192a:	6839      	ldr	r1, [r7, #0]
 801192c:	6878      	ldr	r0, [r7, #4]
 801192e:	f000 fcc9 	bl	80122c4 <USBD_CtlError>
    break;
 8011932:	bf00      	nop
  }

  return ret;
 8011934:	7bfb      	ldrb	r3, [r7, #15]
}
 8011936:	4618      	mov	r0, r3
 8011938:	3710      	adds	r7, #16
 801193a:	46bd      	mov	sp, r7
 801193c:	bd80      	pop	{r7, pc}
 801193e:	bf00      	nop

08011940 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b084      	sub	sp, #16
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
 8011948:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801194a:	2300      	movs	r3, #0
 801194c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801194e:	683b      	ldr	r3, [r7, #0]
 8011950:	781b      	ldrb	r3, [r3, #0]
 8011952:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011956:	2b20      	cmp	r3, #32
 8011958:	d003      	beq.n	8011962 <USBD_StdItfReq+0x22>
 801195a:	2b40      	cmp	r3, #64	; 0x40
 801195c:	d001      	beq.n	8011962 <USBD_StdItfReq+0x22>
 801195e:	2b00      	cmp	r3, #0
 8011960:	d12a      	bne.n	80119b8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011968:	3b01      	subs	r3, #1
 801196a:	2b02      	cmp	r3, #2
 801196c:	d81d      	bhi.n	80119aa <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801196e:	683b      	ldr	r3, [r7, #0]
 8011970:	889b      	ldrh	r3, [r3, #4]
 8011972:	b2db      	uxtb	r3, r3
 8011974:	2b01      	cmp	r3, #1
 8011976:	d813      	bhi.n	80119a0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801197e:	689b      	ldr	r3, [r3, #8]
 8011980:	6839      	ldr	r1, [r7, #0]
 8011982:	6878      	ldr	r0, [r7, #4]
 8011984:	4798      	blx	r3
 8011986:	4603      	mov	r3, r0
 8011988:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	88db      	ldrh	r3, [r3, #6]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d110      	bne.n	80119b4 <USBD_StdItfReq+0x74>
 8011992:	7bfb      	ldrb	r3, [r7, #15]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d10d      	bne.n	80119b4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8011998:	6878      	ldr	r0, [r7, #4]
 801199a:	f000 fd5e 	bl	801245a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 801199e:	e009      	b.n	80119b4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80119a0:	6839      	ldr	r1, [r7, #0]
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f000 fc8e 	bl	80122c4 <USBD_CtlError>
      break;
 80119a8:	e004      	b.n	80119b4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80119aa:	6839      	ldr	r1, [r7, #0]
 80119ac:	6878      	ldr	r0, [r7, #4]
 80119ae:	f000 fc89 	bl	80122c4 <USBD_CtlError>
      break;
 80119b2:	e000      	b.n	80119b6 <USBD_StdItfReq+0x76>
      break;
 80119b4:	bf00      	nop
    }
    break;
 80119b6:	e004      	b.n	80119c2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80119b8:	6839      	ldr	r1, [r7, #0]
 80119ba:	6878      	ldr	r0, [r7, #4]
 80119bc:	f000 fc82 	bl	80122c4 <USBD_CtlError>
    break;
 80119c0:	bf00      	nop
  }

  return ret;
 80119c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80119c4:	4618      	mov	r0, r3
 80119c6:	3710      	adds	r7, #16
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}

080119cc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b084      	sub	sp, #16
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
 80119d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80119d6:	2300      	movs	r3, #0
 80119d8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	889b      	ldrh	r3, [r3, #4]
 80119de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	781b      	ldrb	r3, [r3, #0]
 80119e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80119e8:	2b20      	cmp	r3, #32
 80119ea:	d004      	beq.n	80119f6 <USBD_StdEPReq+0x2a>
 80119ec:	2b40      	cmp	r3, #64	; 0x40
 80119ee:	d002      	beq.n	80119f6 <USBD_StdEPReq+0x2a>
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d00a      	beq.n	8011a0a <USBD_StdEPReq+0x3e>
 80119f4:	e135      	b.n	8011c62 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119fc:	689b      	ldr	r3, [r3, #8]
 80119fe:	6839      	ldr	r1, [r7, #0]
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	4798      	blx	r3
 8011a04:	4603      	mov	r3, r0
 8011a06:	73fb      	strb	r3, [r7, #15]
    break;
 8011a08:	e130      	b.n	8011c6c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011a0a:	683b      	ldr	r3, [r7, #0]
 8011a0c:	785b      	ldrb	r3, [r3, #1]
 8011a0e:	2b01      	cmp	r3, #1
 8011a10:	d03e      	beq.n	8011a90 <USBD_StdEPReq+0xc4>
 8011a12:	2b03      	cmp	r3, #3
 8011a14:	d002      	beq.n	8011a1c <USBD_StdEPReq+0x50>
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d077      	beq.n	8011b0a <USBD_StdEPReq+0x13e>
 8011a1a:	e11c      	b.n	8011c56 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a22:	2b02      	cmp	r3, #2
 8011a24:	d002      	beq.n	8011a2c <USBD_StdEPReq+0x60>
 8011a26:	2b03      	cmp	r3, #3
 8011a28:	d015      	beq.n	8011a56 <USBD_StdEPReq+0x8a>
 8011a2a:	e02b      	b.n	8011a84 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011a2c:	7bbb      	ldrb	r3, [r7, #14]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d00c      	beq.n	8011a4c <USBD_StdEPReq+0x80>
 8011a32:	7bbb      	ldrb	r3, [r7, #14]
 8011a34:	2b80      	cmp	r3, #128	; 0x80
 8011a36:	d009      	beq.n	8011a4c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011a38:	7bbb      	ldrb	r3, [r7, #14]
 8011a3a:	4619      	mov	r1, r3
 8011a3c:	6878      	ldr	r0, [r7, #4]
 8011a3e:	f003 ffc9 	bl	80159d4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011a42:	2180      	movs	r1, #128	; 0x80
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f003 ffc5 	bl	80159d4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011a4a:	e020      	b.n	8011a8e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8011a4c:	6839      	ldr	r1, [r7, #0]
 8011a4e:	6878      	ldr	r0, [r7, #4]
 8011a50:	f000 fc38 	bl	80122c4 <USBD_CtlError>
        break;
 8011a54:	e01b      	b.n	8011a8e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	885b      	ldrh	r3, [r3, #2]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d10e      	bne.n	8011a7c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011a5e:	7bbb      	ldrb	r3, [r7, #14]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d00b      	beq.n	8011a7c <USBD_StdEPReq+0xb0>
 8011a64:	7bbb      	ldrb	r3, [r7, #14]
 8011a66:	2b80      	cmp	r3, #128	; 0x80
 8011a68:	d008      	beq.n	8011a7c <USBD_StdEPReq+0xb0>
 8011a6a:	683b      	ldr	r3, [r7, #0]
 8011a6c:	88db      	ldrh	r3, [r3, #6]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d104      	bne.n	8011a7c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8011a72:	7bbb      	ldrb	r3, [r7, #14]
 8011a74:	4619      	mov	r1, r3
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	f003 ffac 	bl	80159d4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8011a7c:	6878      	ldr	r0, [r7, #4]
 8011a7e:	f000 fcec 	bl	801245a <USBD_CtlSendStatus>

        break;
 8011a82:	e004      	b.n	8011a8e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8011a84:	6839      	ldr	r1, [r7, #0]
 8011a86:	6878      	ldr	r0, [r7, #4]
 8011a88:	f000 fc1c 	bl	80122c4 <USBD_CtlError>
        break;
 8011a8c:	bf00      	nop
      }
      break;
 8011a8e:	e0e7      	b.n	8011c60 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a96:	2b02      	cmp	r3, #2
 8011a98:	d002      	beq.n	8011aa0 <USBD_StdEPReq+0xd4>
 8011a9a:	2b03      	cmp	r3, #3
 8011a9c:	d015      	beq.n	8011aca <USBD_StdEPReq+0xfe>
 8011a9e:	e02d      	b.n	8011afc <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011aa0:	7bbb      	ldrb	r3, [r7, #14]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d00c      	beq.n	8011ac0 <USBD_StdEPReq+0xf4>
 8011aa6:	7bbb      	ldrb	r3, [r7, #14]
 8011aa8:	2b80      	cmp	r3, #128	; 0x80
 8011aaa:	d009      	beq.n	8011ac0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011aac:	7bbb      	ldrb	r3, [r7, #14]
 8011aae:	4619      	mov	r1, r3
 8011ab0:	6878      	ldr	r0, [r7, #4]
 8011ab2:	f003 ff8f 	bl	80159d4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011ab6:	2180      	movs	r1, #128	; 0x80
 8011ab8:	6878      	ldr	r0, [r7, #4]
 8011aba:	f003 ff8b 	bl	80159d4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011abe:	e023      	b.n	8011b08 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8011ac0:	6839      	ldr	r1, [r7, #0]
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	f000 fbfe 	bl	80122c4 <USBD_CtlError>
        break;
 8011ac8:	e01e      	b.n	8011b08 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011aca:	683b      	ldr	r3, [r7, #0]
 8011acc:	885b      	ldrh	r3, [r3, #2]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d119      	bne.n	8011b06 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8011ad2:	7bbb      	ldrb	r3, [r7, #14]
 8011ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d004      	beq.n	8011ae6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011adc:	7bbb      	ldrb	r3, [r7, #14]
 8011ade:	4619      	mov	r1, r3
 8011ae0:	6878      	ldr	r0, [r7, #4]
 8011ae2:	f003 ff96 	bl	8015a12 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	f000 fcb7 	bl	801245a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011af2:	689b      	ldr	r3, [r3, #8]
 8011af4:	6839      	ldr	r1, [r7, #0]
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	4798      	blx	r3
        }
        break;
 8011afa:	e004      	b.n	8011b06 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8011afc:	6839      	ldr	r1, [r7, #0]
 8011afe:	6878      	ldr	r0, [r7, #4]
 8011b00:	f000 fbe0 	bl	80122c4 <USBD_CtlError>
        break;
 8011b04:	e000      	b.n	8011b08 <USBD_StdEPReq+0x13c>
        break;
 8011b06:	bf00      	nop
      }
      break;
 8011b08:	e0aa      	b.n	8011c60 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b10:	2b02      	cmp	r3, #2
 8011b12:	d002      	beq.n	8011b1a <USBD_StdEPReq+0x14e>
 8011b14:	2b03      	cmp	r3, #3
 8011b16:	d032      	beq.n	8011b7e <USBD_StdEPReq+0x1b2>
 8011b18:	e097      	b.n	8011c4a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011b1a:	7bbb      	ldrb	r3, [r7, #14]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d007      	beq.n	8011b30 <USBD_StdEPReq+0x164>
 8011b20:	7bbb      	ldrb	r3, [r7, #14]
 8011b22:	2b80      	cmp	r3, #128	; 0x80
 8011b24:	d004      	beq.n	8011b30 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8011b26:	6839      	ldr	r1, [r7, #0]
 8011b28:	6878      	ldr	r0, [r7, #4]
 8011b2a:	f000 fbcb 	bl	80122c4 <USBD_CtlError>
          break;
 8011b2e:	e091      	b.n	8011c54 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011b30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	da0b      	bge.n	8011b50 <USBD_StdEPReq+0x184>
 8011b38:	7bbb      	ldrb	r3, [r7, #14]
 8011b3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011b3e:	4613      	mov	r3, r2
 8011b40:	009b      	lsls	r3, r3, #2
 8011b42:	4413      	add	r3, r2
 8011b44:	009b      	lsls	r3, r3, #2
 8011b46:	3310      	adds	r3, #16
 8011b48:	687a      	ldr	r2, [r7, #4]
 8011b4a:	4413      	add	r3, r2
 8011b4c:	3304      	adds	r3, #4
 8011b4e:	e00b      	b.n	8011b68 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011b50:	7bbb      	ldrb	r3, [r7, #14]
 8011b52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011b56:	4613      	mov	r3, r2
 8011b58:	009b      	lsls	r3, r3, #2
 8011b5a:	4413      	add	r3, r2
 8011b5c:	009b      	lsls	r3, r3, #2
 8011b5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011b62:	687a      	ldr	r2, [r7, #4]
 8011b64:	4413      	add	r3, r2
 8011b66:	3304      	adds	r3, #4
 8011b68:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8011b6a:	68bb      	ldr	r3, [r7, #8]
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011b70:	68bb      	ldr	r3, [r7, #8]
 8011b72:	2202      	movs	r2, #2
 8011b74:	4619      	mov	r1, r3
 8011b76:	6878      	ldr	r0, [r7, #4]
 8011b78:	f000 fc15 	bl	80123a6 <USBD_CtlSendData>
        break;
 8011b7c:	e06a      	b.n	8011c54 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8011b7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	da11      	bge.n	8011baa <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011b86:	7bbb      	ldrb	r3, [r7, #14]
 8011b88:	f003 020f 	and.w	r2, r3, #15
 8011b8c:	6879      	ldr	r1, [r7, #4]
 8011b8e:	4613      	mov	r3, r2
 8011b90:	009b      	lsls	r3, r3, #2
 8011b92:	4413      	add	r3, r2
 8011b94:	009b      	lsls	r3, r3, #2
 8011b96:	440b      	add	r3, r1
 8011b98:	3324      	adds	r3, #36	; 0x24
 8011b9a:	881b      	ldrh	r3, [r3, #0]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d117      	bne.n	8011bd0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8011ba0:	6839      	ldr	r1, [r7, #0]
 8011ba2:	6878      	ldr	r0, [r7, #4]
 8011ba4:	f000 fb8e 	bl	80122c4 <USBD_CtlError>
            break;
 8011ba8:	e054      	b.n	8011c54 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011baa:	7bbb      	ldrb	r3, [r7, #14]
 8011bac:	f003 020f 	and.w	r2, r3, #15
 8011bb0:	6879      	ldr	r1, [r7, #4]
 8011bb2:	4613      	mov	r3, r2
 8011bb4:	009b      	lsls	r3, r3, #2
 8011bb6:	4413      	add	r3, r2
 8011bb8:	009b      	lsls	r3, r3, #2
 8011bba:	440b      	add	r3, r1
 8011bbc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011bc0:	881b      	ldrh	r3, [r3, #0]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d104      	bne.n	8011bd0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8011bc6:	6839      	ldr	r1, [r7, #0]
 8011bc8:	6878      	ldr	r0, [r7, #4]
 8011bca:	f000 fb7b 	bl	80122c4 <USBD_CtlError>
            break;
 8011bce:	e041      	b.n	8011c54 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011bd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	da0b      	bge.n	8011bf0 <USBD_StdEPReq+0x224>
 8011bd8:	7bbb      	ldrb	r3, [r7, #14]
 8011bda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011bde:	4613      	mov	r3, r2
 8011be0:	009b      	lsls	r3, r3, #2
 8011be2:	4413      	add	r3, r2
 8011be4:	009b      	lsls	r3, r3, #2
 8011be6:	3310      	adds	r3, #16
 8011be8:	687a      	ldr	r2, [r7, #4]
 8011bea:	4413      	add	r3, r2
 8011bec:	3304      	adds	r3, #4
 8011bee:	e00b      	b.n	8011c08 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011bf0:	7bbb      	ldrb	r3, [r7, #14]
 8011bf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011bf6:	4613      	mov	r3, r2
 8011bf8:	009b      	lsls	r3, r3, #2
 8011bfa:	4413      	add	r3, r2
 8011bfc:	009b      	lsls	r3, r3, #2
 8011bfe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011c02:	687a      	ldr	r2, [r7, #4]
 8011c04:	4413      	add	r3, r2
 8011c06:	3304      	adds	r3, #4
 8011c08:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011c0a:	7bbb      	ldrb	r3, [r7, #14]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d002      	beq.n	8011c16 <USBD_StdEPReq+0x24a>
 8011c10:	7bbb      	ldrb	r3, [r7, #14]
 8011c12:	2b80      	cmp	r3, #128	; 0x80
 8011c14:	d103      	bne.n	8011c1e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8011c16:	68bb      	ldr	r3, [r7, #8]
 8011c18:	2200      	movs	r2, #0
 8011c1a:	601a      	str	r2, [r3, #0]
 8011c1c:	e00e      	b.n	8011c3c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011c1e:	7bbb      	ldrb	r3, [r7, #14]
 8011c20:	4619      	mov	r1, r3
 8011c22:	6878      	ldr	r0, [r7, #4]
 8011c24:	f003 ff14 	bl	8015a50 <USBD_LL_IsStallEP>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d003      	beq.n	8011c36 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8011c2e:	68bb      	ldr	r3, [r7, #8]
 8011c30:	2201      	movs	r2, #1
 8011c32:	601a      	str	r2, [r3, #0]
 8011c34:	e002      	b.n	8011c3c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8011c36:	68bb      	ldr	r3, [r7, #8]
 8011c38:	2200      	movs	r2, #0
 8011c3a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	2202      	movs	r2, #2
 8011c40:	4619      	mov	r1, r3
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f000 fbaf 	bl	80123a6 <USBD_CtlSendData>
          break;
 8011c48:	e004      	b.n	8011c54 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8011c4a:	6839      	ldr	r1, [r7, #0]
 8011c4c:	6878      	ldr	r0, [r7, #4]
 8011c4e:	f000 fb39 	bl	80122c4 <USBD_CtlError>
        break;
 8011c52:	bf00      	nop
      }
      break;
 8011c54:	e004      	b.n	8011c60 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8011c56:	6839      	ldr	r1, [r7, #0]
 8011c58:	6878      	ldr	r0, [r7, #4]
 8011c5a:	f000 fb33 	bl	80122c4 <USBD_CtlError>
      break;
 8011c5e:	bf00      	nop
    }
    break;
 8011c60:	e004      	b.n	8011c6c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8011c62:	6839      	ldr	r1, [r7, #0]
 8011c64:	6878      	ldr	r0, [r7, #4]
 8011c66:	f000 fb2d 	bl	80122c4 <USBD_CtlError>
    break;
 8011c6a:	bf00      	nop
  }

  return ret;
 8011c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	3710      	adds	r7, #16
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd80      	pop	{r7, pc}
	...

08011c78 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b084      	sub	sp, #16
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011c82:	2300      	movs	r3, #0
 8011c84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011c86:	2300      	movs	r3, #0
 8011c88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011c8e:	683b      	ldr	r3, [r7, #0]
 8011c90:	885b      	ldrh	r3, [r3, #2]
 8011c92:	0a1b      	lsrs	r3, r3, #8
 8011c94:	b29b      	uxth	r3, r3
 8011c96:	3b01      	subs	r3, #1
 8011c98:	2b06      	cmp	r3, #6
 8011c9a:	f200 8128 	bhi.w	8011eee <USBD_GetDescriptor+0x276>
 8011c9e:	a201      	add	r2, pc, #4	; (adr r2, 8011ca4 <USBD_GetDescriptor+0x2c>)
 8011ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ca4:	08011cc1 	.word	0x08011cc1
 8011ca8:	08011cd9 	.word	0x08011cd9
 8011cac:	08011d19 	.word	0x08011d19
 8011cb0:	08011eef 	.word	0x08011eef
 8011cb4:	08011eef 	.word	0x08011eef
 8011cb8:	08011e8f 	.word	0x08011e8f
 8011cbc:	08011ebb 	.word	0x08011ebb
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	687a      	ldr	r2, [r7, #4]
 8011cca:	7c12      	ldrb	r2, [r2, #16]
 8011ccc:	f107 0108 	add.w	r1, r7, #8
 8011cd0:	4610      	mov	r0, r2
 8011cd2:	4798      	blx	r3
 8011cd4:	60f8      	str	r0, [r7, #12]
    break;
 8011cd6:	e112      	b.n	8011efe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	7c1b      	ldrb	r3, [r3, #16]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d10d      	bne.n	8011cfc <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ce8:	f107 0208 	add.w	r2, r7, #8
 8011cec:	4610      	mov	r0, r2
 8011cee:	4798      	blx	r3
 8011cf0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	3301      	adds	r3, #1
 8011cf6:	2202      	movs	r2, #2
 8011cf8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8011cfa:	e100      	b.n	8011efe <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d04:	f107 0208 	add.w	r2, r7, #8
 8011d08:	4610      	mov	r0, r2
 8011d0a:	4798      	blx	r3
 8011d0c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	3301      	adds	r3, #1
 8011d12:	2202      	movs	r2, #2
 8011d14:	701a      	strb	r2, [r3, #0]
    break;
 8011d16:	e0f2      	b.n	8011efe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	885b      	ldrh	r3, [r3, #2]
 8011d1c:	b2db      	uxtb	r3, r3
 8011d1e:	2b05      	cmp	r3, #5
 8011d20:	f200 80ac 	bhi.w	8011e7c <USBD_GetDescriptor+0x204>
 8011d24:	a201      	add	r2, pc, #4	; (adr r2, 8011d2c <USBD_GetDescriptor+0xb4>)
 8011d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d2a:	bf00      	nop
 8011d2c:	08011d45 	.word	0x08011d45
 8011d30:	08011d79 	.word	0x08011d79
 8011d34:	08011dad 	.word	0x08011dad
 8011d38:	08011de1 	.word	0x08011de1
 8011d3c:	08011e15 	.word	0x08011e15
 8011d40:	08011e49 	.word	0x08011e49
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d4a:	685b      	ldr	r3, [r3, #4]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d00b      	beq.n	8011d68 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d56:	685b      	ldr	r3, [r3, #4]
 8011d58:	687a      	ldr	r2, [r7, #4]
 8011d5a:	7c12      	ldrb	r2, [r2, #16]
 8011d5c:	f107 0108 	add.w	r1, r7, #8
 8011d60:	4610      	mov	r0, r2
 8011d62:	4798      	blx	r3
 8011d64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011d66:	e091      	b.n	8011e8c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011d68:	6839      	ldr	r1, [r7, #0]
 8011d6a:	6878      	ldr	r0, [r7, #4]
 8011d6c:	f000 faaa 	bl	80122c4 <USBD_CtlError>
        err++;
 8011d70:	7afb      	ldrb	r3, [r7, #11]
 8011d72:	3301      	adds	r3, #1
 8011d74:	72fb      	strb	r3, [r7, #11]
      break;
 8011d76:	e089      	b.n	8011e8c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d7e:	689b      	ldr	r3, [r3, #8]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d00b      	beq.n	8011d9c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d8a:	689b      	ldr	r3, [r3, #8]
 8011d8c:	687a      	ldr	r2, [r7, #4]
 8011d8e:	7c12      	ldrb	r2, [r2, #16]
 8011d90:	f107 0108 	add.w	r1, r7, #8
 8011d94:	4610      	mov	r0, r2
 8011d96:	4798      	blx	r3
 8011d98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011d9a:	e077      	b.n	8011e8c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011d9c:	6839      	ldr	r1, [r7, #0]
 8011d9e:	6878      	ldr	r0, [r7, #4]
 8011da0:	f000 fa90 	bl	80122c4 <USBD_CtlError>
        err++;
 8011da4:	7afb      	ldrb	r3, [r7, #11]
 8011da6:	3301      	adds	r3, #1
 8011da8:	72fb      	strb	r3, [r7, #11]
      break;
 8011daa:	e06f      	b.n	8011e8c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011db2:	68db      	ldr	r3, [r3, #12]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d00b      	beq.n	8011dd0 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011dbe:	68db      	ldr	r3, [r3, #12]
 8011dc0:	687a      	ldr	r2, [r7, #4]
 8011dc2:	7c12      	ldrb	r2, [r2, #16]
 8011dc4:	f107 0108 	add.w	r1, r7, #8
 8011dc8:	4610      	mov	r0, r2
 8011dca:	4798      	blx	r3
 8011dcc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011dce:	e05d      	b.n	8011e8c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011dd0:	6839      	ldr	r1, [r7, #0]
 8011dd2:	6878      	ldr	r0, [r7, #4]
 8011dd4:	f000 fa76 	bl	80122c4 <USBD_CtlError>
        err++;
 8011dd8:	7afb      	ldrb	r3, [r7, #11]
 8011dda:	3301      	adds	r3, #1
 8011ddc:	72fb      	strb	r3, [r7, #11]
      break;
 8011dde:	e055      	b.n	8011e8c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011de6:	691b      	ldr	r3, [r3, #16]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d00b      	beq.n	8011e04 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011df2:	691b      	ldr	r3, [r3, #16]
 8011df4:	687a      	ldr	r2, [r7, #4]
 8011df6:	7c12      	ldrb	r2, [r2, #16]
 8011df8:	f107 0108 	add.w	r1, r7, #8
 8011dfc:	4610      	mov	r0, r2
 8011dfe:	4798      	blx	r3
 8011e00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e02:	e043      	b.n	8011e8c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011e04:	6839      	ldr	r1, [r7, #0]
 8011e06:	6878      	ldr	r0, [r7, #4]
 8011e08:	f000 fa5c 	bl	80122c4 <USBD_CtlError>
        err++;
 8011e0c:	7afb      	ldrb	r3, [r7, #11]
 8011e0e:	3301      	adds	r3, #1
 8011e10:	72fb      	strb	r3, [r7, #11]
      break;
 8011e12:	e03b      	b.n	8011e8c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e1a:	695b      	ldr	r3, [r3, #20]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d00b      	beq.n	8011e38 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e26:	695b      	ldr	r3, [r3, #20]
 8011e28:	687a      	ldr	r2, [r7, #4]
 8011e2a:	7c12      	ldrb	r2, [r2, #16]
 8011e2c:	f107 0108 	add.w	r1, r7, #8
 8011e30:	4610      	mov	r0, r2
 8011e32:	4798      	blx	r3
 8011e34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e36:	e029      	b.n	8011e8c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011e38:	6839      	ldr	r1, [r7, #0]
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f000 fa42 	bl	80122c4 <USBD_CtlError>
        err++;
 8011e40:	7afb      	ldrb	r3, [r7, #11]
 8011e42:	3301      	adds	r3, #1
 8011e44:	72fb      	strb	r3, [r7, #11]
      break;
 8011e46:	e021      	b.n	8011e8c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e4e:	699b      	ldr	r3, [r3, #24]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d00b      	beq.n	8011e6c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e5a:	699b      	ldr	r3, [r3, #24]
 8011e5c:	687a      	ldr	r2, [r7, #4]
 8011e5e:	7c12      	ldrb	r2, [r2, #16]
 8011e60:	f107 0108 	add.w	r1, r7, #8
 8011e64:	4610      	mov	r0, r2
 8011e66:	4798      	blx	r3
 8011e68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e6a:	e00f      	b.n	8011e8c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011e6c:	6839      	ldr	r1, [r7, #0]
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f000 fa28 	bl	80122c4 <USBD_CtlError>
        err++;
 8011e74:	7afb      	ldrb	r3, [r7, #11]
 8011e76:	3301      	adds	r3, #1
 8011e78:	72fb      	strb	r3, [r7, #11]
      break;
 8011e7a:	e007      	b.n	8011e8c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8011e7c:	6839      	ldr	r1, [r7, #0]
 8011e7e:	6878      	ldr	r0, [r7, #4]
 8011e80:	f000 fa20 	bl	80122c4 <USBD_CtlError>
      err++;
 8011e84:	7afb      	ldrb	r3, [r7, #11]
 8011e86:	3301      	adds	r3, #1
 8011e88:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8011e8a:	bf00      	nop
    }
    break;
 8011e8c:	e037      	b.n	8011efe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	7c1b      	ldrb	r3, [r3, #16]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d109      	bne.n	8011eaa <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e9e:	f107 0208 	add.w	r2, r7, #8
 8011ea2:	4610      	mov	r0, r2
 8011ea4:	4798      	blx	r3
 8011ea6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011ea8:	e029      	b.n	8011efe <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011eaa:	6839      	ldr	r1, [r7, #0]
 8011eac:	6878      	ldr	r0, [r7, #4]
 8011eae:	f000 fa09 	bl	80122c4 <USBD_CtlError>
      err++;
 8011eb2:	7afb      	ldrb	r3, [r7, #11]
 8011eb4:	3301      	adds	r3, #1
 8011eb6:	72fb      	strb	r3, [r7, #11]
    break;
 8011eb8:	e021      	b.n	8011efe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	7c1b      	ldrb	r3, [r3, #16]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d10d      	bne.n	8011ede <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011eca:	f107 0208 	add.w	r2, r7, #8
 8011ece:	4610      	mov	r0, r2
 8011ed0:	4798      	blx	r3
 8011ed2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	3301      	adds	r3, #1
 8011ed8:	2207      	movs	r2, #7
 8011eda:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011edc:	e00f      	b.n	8011efe <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011ede:	6839      	ldr	r1, [r7, #0]
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f000 f9ef 	bl	80122c4 <USBD_CtlError>
      err++;
 8011ee6:	7afb      	ldrb	r3, [r7, #11]
 8011ee8:	3301      	adds	r3, #1
 8011eea:	72fb      	strb	r3, [r7, #11]
    break;
 8011eec:	e007      	b.n	8011efe <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8011eee:	6839      	ldr	r1, [r7, #0]
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f000 f9e7 	bl	80122c4 <USBD_CtlError>
    err++;
 8011ef6:	7afb      	ldrb	r3, [r7, #11]
 8011ef8:	3301      	adds	r3, #1
 8011efa:	72fb      	strb	r3, [r7, #11]
    break;
 8011efc:	bf00      	nop
  }

  if (err != 0U)
 8011efe:	7afb      	ldrb	r3, [r7, #11]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d11e      	bne.n	8011f42 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	88db      	ldrh	r3, [r3, #6]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d016      	beq.n	8011f3a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8011f0c:	893b      	ldrh	r3, [r7, #8]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d00e      	beq.n	8011f30 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	88da      	ldrh	r2, [r3, #6]
 8011f16:	893b      	ldrh	r3, [r7, #8]
 8011f18:	4293      	cmp	r3, r2
 8011f1a:	bf28      	it	cs
 8011f1c:	4613      	movcs	r3, r2
 8011f1e:	b29b      	uxth	r3, r3
 8011f20:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8011f22:	893b      	ldrh	r3, [r7, #8]
 8011f24:	461a      	mov	r2, r3
 8011f26:	68f9      	ldr	r1, [r7, #12]
 8011f28:	6878      	ldr	r0, [r7, #4]
 8011f2a:	f000 fa3c 	bl	80123a6 <USBD_CtlSendData>
 8011f2e:	e009      	b.n	8011f44 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8011f30:	6839      	ldr	r1, [r7, #0]
 8011f32:	6878      	ldr	r0, [r7, #4]
 8011f34:	f000 f9c6 	bl	80122c4 <USBD_CtlError>
 8011f38:	e004      	b.n	8011f44 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8011f3a:	6878      	ldr	r0, [r7, #4]
 8011f3c:	f000 fa8d 	bl	801245a <USBD_CtlSendStatus>
 8011f40:	e000      	b.n	8011f44 <USBD_GetDescriptor+0x2cc>
    return;
 8011f42:	bf00      	nop
    }
  }
}
 8011f44:	3710      	adds	r7, #16
 8011f46:	46bd      	mov	sp, r7
 8011f48:	bd80      	pop	{r7, pc}
 8011f4a:	bf00      	nop

08011f4c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b084      	sub	sp, #16
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
 8011f54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	889b      	ldrh	r3, [r3, #4]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d130      	bne.n	8011fc0 <USBD_SetAddress+0x74>
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	88db      	ldrh	r3, [r3, #6]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d12c      	bne.n	8011fc0 <USBD_SetAddress+0x74>
 8011f66:	683b      	ldr	r3, [r7, #0]
 8011f68:	885b      	ldrh	r3, [r3, #2]
 8011f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8011f6c:	d828      	bhi.n	8011fc0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011f6e:	683b      	ldr	r3, [r7, #0]
 8011f70:	885b      	ldrh	r3, [r3, #2]
 8011f72:	b2db      	uxtb	r3, r3
 8011f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f80:	2b03      	cmp	r3, #3
 8011f82:	d104      	bne.n	8011f8e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8011f84:	6839      	ldr	r1, [r7, #0]
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f000 f99c 	bl	80122c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f8c:	e01c      	b.n	8011fc8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	7bfa      	ldrb	r2, [r7, #15]
 8011f92:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011f96:	7bfb      	ldrb	r3, [r7, #15]
 8011f98:	4619      	mov	r1, r3
 8011f9a:	6878      	ldr	r0, [r7, #4]
 8011f9c:	f003 fd84 	bl	8015aa8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011fa0:	6878      	ldr	r0, [r7, #4]
 8011fa2:	f000 fa5a 	bl	801245a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011fa6:	7bfb      	ldrb	r3, [r7, #15]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d004      	beq.n	8011fb6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2202      	movs	r2, #2
 8011fb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fb4:	e008      	b.n	8011fc8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	2201      	movs	r2, #1
 8011fba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fbe:	e003      	b.n	8011fc8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011fc0:	6839      	ldr	r1, [r7, #0]
 8011fc2:	6878      	ldr	r0, [r7, #4]
 8011fc4:	f000 f97e 	bl	80122c4 <USBD_CtlError>
  }
}
 8011fc8:	bf00      	nop
 8011fca:	3710      	adds	r7, #16
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	bd80      	pop	{r7, pc}

08011fd0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b084      	sub	sp, #16
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
 8011fd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011fda:	2300      	movs	r3, #0
 8011fdc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	885b      	ldrh	r3, [r3, #2]
 8011fe2:	b2da      	uxtb	r2, r3
 8011fe4:	4b4b      	ldr	r3, [pc, #300]	; (8012114 <USBD_SetConfig+0x144>)
 8011fe6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011fe8:	4b4a      	ldr	r3, [pc, #296]	; (8012114 <USBD_SetConfig+0x144>)
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	2b01      	cmp	r3, #1
 8011fee:	d905      	bls.n	8011ffc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011ff0:	6839      	ldr	r1, [r7, #0]
 8011ff2:	6878      	ldr	r0, [r7, #4]
 8011ff4:	f000 f966 	bl	80122c4 <USBD_CtlError>
    return USBD_FAIL;
 8011ff8:	2303      	movs	r3, #3
 8011ffa:	e087      	b.n	801210c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012002:	2b02      	cmp	r3, #2
 8012004:	d002      	beq.n	801200c <USBD_SetConfig+0x3c>
 8012006:	2b03      	cmp	r3, #3
 8012008:	d025      	beq.n	8012056 <USBD_SetConfig+0x86>
 801200a:	e071      	b.n	80120f0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 801200c:	4b41      	ldr	r3, [pc, #260]	; (8012114 <USBD_SetConfig+0x144>)
 801200e:	781b      	ldrb	r3, [r3, #0]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d01c      	beq.n	801204e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8012014:	4b3f      	ldr	r3, [pc, #252]	; (8012114 <USBD_SetConfig+0x144>)
 8012016:	781b      	ldrb	r3, [r3, #0]
 8012018:	461a      	mov	r2, r3
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 801201e:	4b3d      	ldr	r3, [pc, #244]	; (8012114 <USBD_SetConfig+0x144>)
 8012020:	781b      	ldrb	r3, [r3, #0]
 8012022:	4619      	mov	r1, r3
 8012024:	6878      	ldr	r0, [r7, #4]
 8012026:	f7ff f9a7 	bl	8011378 <USBD_SetClassConfig>
 801202a:	4603      	mov	r3, r0
 801202c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 801202e:	7bfb      	ldrb	r3, [r7, #15]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d004      	beq.n	801203e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8012034:	6839      	ldr	r1, [r7, #0]
 8012036:	6878      	ldr	r0, [r7, #4]
 8012038:	f000 f944 	bl	80122c4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801203c:	e065      	b.n	801210a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 801203e:	6878      	ldr	r0, [r7, #4]
 8012040:	f000 fa0b 	bl	801245a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	2203      	movs	r2, #3
 8012048:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801204c:	e05d      	b.n	801210a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 801204e:	6878      	ldr	r0, [r7, #4]
 8012050:	f000 fa03 	bl	801245a <USBD_CtlSendStatus>
    break;
 8012054:	e059      	b.n	801210a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8012056:	4b2f      	ldr	r3, [pc, #188]	; (8012114 <USBD_SetConfig+0x144>)
 8012058:	781b      	ldrb	r3, [r3, #0]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d112      	bne.n	8012084 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	2202      	movs	r2, #2
 8012062:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8012066:	4b2b      	ldr	r3, [pc, #172]	; (8012114 <USBD_SetConfig+0x144>)
 8012068:	781b      	ldrb	r3, [r3, #0]
 801206a:	461a      	mov	r2, r3
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012070:	4b28      	ldr	r3, [pc, #160]	; (8012114 <USBD_SetConfig+0x144>)
 8012072:	781b      	ldrb	r3, [r3, #0]
 8012074:	4619      	mov	r1, r3
 8012076:	6878      	ldr	r0, [r7, #4]
 8012078:	f7ff f99a 	bl	80113b0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f000 f9ec 	bl	801245a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8012082:	e042      	b.n	801210a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8012084:	4b23      	ldr	r3, [pc, #140]	; (8012114 <USBD_SetConfig+0x144>)
 8012086:	781b      	ldrb	r3, [r3, #0]
 8012088:	461a      	mov	r2, r3
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	685b      	ldr	r3, [r3, #4]
 801208e:	429a      	cmp	r2, r3
 8012090:	d02a      	beq.n	80120e8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	685b      	ldr	r3, [r3, #4]
 8012096:	b2db      	uxtb	r3, r3
 8012098:	4619      	mov	r1, r3
 801209a:	6878      	ldr	r0, [r7, #4]
 801209c:	f7ff f988 	bl	80113b0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80120a0:	4b1c      	ldr	r3, [pc, #112]	; (8012114 <USBD_SetConfig+0x144>)
 80120a2:	781b      	ldrb	r3, [r3, #0]
 80120a4:	461a      	mov	r2, r3
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80120aa:	4b1a      	ldr	r3, [pc, #104]	; (8012114 <USBD_SetConfig+0x144>)
 80120ac:	781b      	ldrb	r3, [r3, #0]
 80120ae:	4619      	mov	r1, r3
 80120b0:	6878      	ldr	r0, [r7, #4]
 80120b2:	f7ff f961 	bl	8011378 <USBD_SetClassConfig>
 80120b6:	4603      	mov	r3, r0
 80120b8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80120ba:	7bfb      	ldrb	r3, [r7, #15]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d00f      	beq.n	80120e0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80120c0:	6839      	ldr	r1, [r7, #0]
 80120c2:	6878      	ldr	r0, [r7, #4]
 80120c4:	f000 f8fe 	bl	80122c4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	685b      	ldr	r3, [r3, #4]
 80120cc:	b2db      	uxtb	r3, r3
 80120ce:	4619      	mov	r1, r3
 80120d0:	6878      	ldr	r0, [r7, #4]
 80120d2:	f7ff f96d 	bl	80113b0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	2202      	movs	r2, #2
 80120da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80120de:	e014      	b.n	801210a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f000 f9ba 	bl	801245a <USBD_CtlSendStatus>
    break;
 80120e6:	e010      	b.n	801210a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80120e8:	6878      	ldr	r0, [r7, #4]
 80120ea:	f000 f9b6 	bl	801245a <USBD_CtlSendStatus>
    break;
 80120ee:	e00c      	b.n	801210a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80120f0:	6839      	ldr	r1, [r7, #0]
 80120f2:	6878      	ldr	r0, [r7, #4]
 80120f4:	f000 f8e6 	bl	80122c4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80120f8:	4b06      	ldr	r3, [pc, #24]	; (8012114 <USBD_SetConfig+0x144>)
 80120fa:	781b      	ldrb	r3, [r3, #0]
 80120fc:	4619      	mov	r1, r3
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	f7ff f956 	bl	80113b0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8012104:	2303      	movs	r3, #3
 8012106:	73fb      	strb	r3, [r7, #15]
    break;
 8012108:	bf00      	nop
  }

  return ret;
 801210a:	7bfb      	ldrb	r3, [r7, #15]
}
 801210c:	4618      	mov	r0, r3
 801210e:	3710      	adds	r7, #16
 8012110:	46bd      	mov	sp, r7
 8012112:	bd80      	pop	{r7, pc}
 8012114:	20001008 	.word	0x20001008

08012118 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b082      	sub	sp, #8
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
 8012120:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012122:	683b      	ldr	r3, [r7, #0]
 8012124:	88db      	ldrh	r3, [r3, #6]
 8012126:	2b01      	cmp	r3, #1
 8012128:	d004      	beq.n	8012134 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801212a:	6839      	ldr	r1, [r7, #0]
 801212c:	6878      	ldr	r0, [r7, #4]
 801212e:	f000 f8c9 	bl	80122c4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8012132:	e021      	b.n	8012178 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801213a:	2b01      	cmp	r3, #1
 801213c:	db17      	blt.n	801216e <USBD_GetConfig+0x56>
 801213e:	2b02      	cmp	r3, #2
 8012140:	dd02      	ble.n	8012148 <USBD_GetConfig+0x30>
 8012142:	2b03      	cmp	r3, #3
 8012144:	d00b      	beq.n	801215e <USBD_GetConfig+0x46>
 8012146:	e012      	b.n	801216e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	2200      	movs	r2, #0
 801214c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	3308      	adds	r3, #8
 8012152:	2201      	movs	r2, #1
 8012154:	4619      	mov	r1, r3
 8012156:	6878      	ldr	r0, [r7, #4]
 8012158:	f000 f925 	bl	80123a6 <USBD_CtlSendData>
      break;
 801215c:	e00c      	b.n	8012178 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	3304      	adds	r3, #4
 8012162:	2201      	movs	r2, #1
 8012164:	4619      	mov	r1, r3
 8012166:	6878      	ldr	r0, [r7, #4]
 8012168:	f000 f91d 	bl	80123a6 <USBD_CtlSendData>
      break;
 801216c:	e004      	b.n	8012178 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 801216e:	6839      	ldr	r1, [r7, #0]
 8012170:	6878      	ldr	r0, [r7, #4]
 8012172:	f000 f8a7 	bl	80122c4 <USBD_CtlError>
      break;
 8012176:	bf00      	nop
}
 8012178:	bf00      	nop
 801217a:	3708      	adds	r7, #8
 801217c:	46bd      	mov	sp, r7
 801217e:	bd80      	pop	{r7, pc}

08012180 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b082      	sub	sp, #8
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
 8012188:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012190:	3b01      	subs	r3, #1
 8012192:	2b02      	cmp	r3, #2
 8012194:	d81e      	bhi.n	80121d4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8012196:	683b      	ldr	r3, [r7, #0]
 8012198:	88db      	ldrh	r3, [r3, #6]
 801219a:	2b02      	cmp	r3, #2
 801219c:	d004      	beq.n	80121a8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 801219e:	6839      	ldr	r1, [r7, #0]
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f000 f88f 	bl	80122c4 <USBD_CtlError>
      break;
 80121a6:	e01a      	b.n	80121de <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	2201      	movs	r2, #1
 80121ac:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d005      	beq.n	80121c4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	68db      	ldr	r3, [r3, #12]
 80121bc:	f043 0202 	orr.w	r2, r3, #2
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	330c      	adds	r3, #12
 80121c8:	2202      	movs	r2, #2
 80121ca:	4619      	mov	r1, r3
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f000 f8ea 	bl	80123a6 <USBD_CtlSendData>
    break;
 80121d2:	e004      	b.n	80121de <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80121d4:	6839      	ldr	r1, [r7, #0]
 80121d6:	6878      	ldr	r0, [r7, #4]
 80121d8:	f000 f874 	bl	80122c4 <USBD_CtlError>
    break;
 80121dc:	bf00      	nop
  }
}
 80121de:	bf00      	nop
 80121e0:	3708      	adds	r7, #8
 80121e2:	46bd      	mov	sp, r7
 80121e4:	bd80      	pop	{r7, pc}

080121e6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121e6:	b580      	push	{r7, lr}
 80121e8:	b082      	sub	sp, #8
 80121ea:	af00      	add	r7, sp, #0
 80121ec:	6078      	str	r0, [r7, #4]
 80121ee:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	885b      	ldrh	r3, [r3, #2]
 80121f4:	2b01      	cmp	r3, #1
 80121f6:	d106      	bne.n	8012206 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	2201      	movs	r2, #1
 80121fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012200:	6878      	ldr	r0, [r7, #4]
 8012202:	f000 f92a 	bl	801245a <USBD_CtlSendStatus>
  }
}
 8012206:	bf00      	nop
 8012208:	3708      	adds	r7, #8
 801220a:	46bd      	mov	sp, r7
 801220c:	bd80      	pop	{r7, pc}

0801220e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801220e:	b580      	push	{r7, lr}
 8012210:	b082      	sub	sp, #8
 8012212:	af00      	add	r7, sp, #0
 8012214:	6078      	str	r0, [r7, #4]
 8012216:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801221e:	3b01      	subs	r3, #1
 8012220:	2b02      	cmp	r3, #2
 8012222:	d80b      	bhi.n	801223c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012224:	683b      	ldr	r3, [r7, #0]
 8012226:	885b      	ldrh	r3, [r3, #2]
 8012228:	2b01      	cmp	r3, #1
 801222a:	d10c      	bne.n	8012246 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2200      	movs	r2, #0
 8012230:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012234:	6878      	ldr	r0, [r7, #4]
 8012236:	f000 f910 	bl	801245a <USBD_CtlSendStatus>
      }
      break;
 801223a:	e004      	b.n	8012246 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801223c:	6839      	ldr	r1, [r7, #0]
 801223e:	6878      	ldr	r0, [r7, #4]
 8012240:	f000 f840 	bl	80122c4 <USBD_CtlError>
      break;
 8012244:	e000      	b.n	8012248 <USBD_ClrFeature+0x3a>
      break;
 8012246:	bf00      	nop
  }
}
 8012248:	bf00      	nop
 801224a:	3708      	adds	r7, #8
 801224c:	46bd      	mov	sp, r7
 801224e:	bd80      	pop	{r7, pc}

08012250 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b084      	sub	sp, #16
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
 8012258:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801225a:	683b      	ldr	r3, [r7, #0]
 801225c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	781a      	ldrb	r2, [r3, #0]
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	3301      	adds	r3, #1
 801226a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	781a      	ldrb	r2, [r3, #0]
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	3301      	adds	r3, #1
 8012278:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801227a:	68f8      	ldr	r0, [r7, #12]
 801227c:	f7ff fad3 	bl	8011826 <SWAPBYTE>
 8012280:	4603      	mov	r3, r0
 8012282:	461a      	mov	r2, r3
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	3301      	adds	r3, #1
 801228c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	3301      	adds	r3, #1
 8012292:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012294:	68f8      	ldr	r0, [r7, #12]
 8012296:	f7ff fac6 	bl	8011826 <SWAPBYTE>
 801229a:	4603      	mov	r3, r0
 801229c:	461a      	mov	r2, r3
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	3301      	adds	r3, #1
 80122a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	3301      	adds	r3, #1
 80122ac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80122ae:	68f8      	ldr	r0, [r7, #12]
 80122b0:	f7ff fab9 	bl	8011826 <SWAPBYTE>
 80122b4:	4603      	mov	r3, r0
 80122b6:	461a      	mov	r2, r3
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	80da      	strh	r2, [r3, #6]
}
 80122bc:	bf00      	nop
 80122be:	3710      	adds	r7, #16
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}

080122c4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b082      	sub	sp, #8
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
 80122cc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80122ce:	2180      	movs	r1, #128	; 0x80
 80122d0:	6878      	ldr	r0, [r7, #4]
 80122d2:	f003 fb7f 	bl	80159d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80122d6:	2100      	movs	r1, #0
 80122d8:	6878      	ldr	r0, [r7, #4]
 80122da:	f003 fb7b 	bl	80159d4 <USBD_LL_StallEP>
}
 80122de:	bf00      	nop
 80122e0:	3708      	adds	r7, #8
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}

080122e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80122e6:	b580      	push	{r7, lr}
 80122e8:	b086      	sub	sp, #24
 80122ea:	af00      	add	r7, sp, #0
 80122ec:	60f8      	str	r0, [r7, #12]
 80122ee:	60b9      	str	r1, [r7, #8]
 80122f0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80122f2:	2300      	movs	r3, #0
 80122f4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d036      	beq.n	801236a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012300:	6938      	ldr	r0, [r7, #16]
 8012302:	f000 f836 	bl	8012372 <USBD_GetLen>
 8012306:	4603      	mov	r3, r0
 8012308:	3301      	adds	r3, #1
 801230a:	b29b      	uxth	r3, r3
 801230c:	005b      	lsls	r3, r3, #1
 801230e:	b29a      	uxth	r2, r3
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012314:	7dfb      	ldrb	r3, [r7, #23]
 8012316:	68ba      	ldr	r2, [r7, #8]
 8012318:	4413      	add	r3, r2
 801231a:	687a      	ldr	r2, [r7, #4]
 801231c:	7812      	ldrb	r2, [r2, #0]
 801231e:	701a      	strb	r2, [r3, #0]
  idx++;
 8012320:	7dfb      	ldrb	r3, [r7, #23]
 8012322:	3301      	adds	r3, #1
 8012324:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012326:	7dfb      	ldrb	r3, [r7, #23]
 8012328:	68ba      	ldr	r2, [r7, #8]
 801232a:	4413      	add	r3, r2
 801232c:	2203      	movs	r2, #3
 801232e:	701a      	strb	r2, [r3, #0]
  idx++;
 8012330:	7dfb      	ldrb	r3, [r7, #23]
 8012332:	3301      	adds	r3, #1
 8012334:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012336:	e013      	b.n	8012360 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012338:	7dfb      	ldrb	r3, [r7, #23]
 801233a:	68ba      	ldr	r2, [r7, #8]
 801233c:	4413      	add	r3, r2
 801233e:	693a      	ldr	r2, [r7, #16]
 8012340:	7812      	ldrb	r2, [r2, #0]
 8012342:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012344:	693b      	ldr	r3, [r7, #16]
 8012346:	3301      	adds	r3, #1
 8012348:	613b      	str	r3, [r7, #16]
    idx++;
 801234a:	7dfb      	ldrb	r3, [r7, #23]
 801234c:	3301      	adds	r3, #1
 801234e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012350:	7dfb      	ldrb	r3, [r7, #23]
 8012352:	68ba      	ldr	r2, [r7, #8]
 8012354:	4413      	add	r3, r2
 8012356:	2200      	movs	r2, #0
 8012358:	701a      	strb	r2, [r3, #0]
    idx++;
 801235a:	7dfb      	ldrb	r3, [r7, #23]
 801235c:	3301      	adds	r3, #1
 801235e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012360:	693b      	ldr	r3, [r7, #16]
 8012362:	781b      	ldrb	r3, [r3, #0]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d1e7      	bne.n	8012338 <USBD_GetString+0x52>
 8012368:	e000      	b.n	801236c <USBD_GetString+0x86>
    return;
 801236a:	bf00      	nop
  }
}
 801236c:	3718      	adds	r7, #24
 801236e:	46bd      	mov	sp, r7
 8012370:	bd80      	pop	{r7, pc}

08012372 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012372:	b480      	push	{r7}
 8012374:	b085      	sub	sp, #20
 8012376:	af00      	add	r7, sp, #0
 8012378:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801237a:	2300      	movs	r3, #0
 801237c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012382:	e005      	b.n	8012390 <USBD_GetLen+0x1e>
  {
    len++;
 8012384:	7bfb      	ldrb	r3, [r7, #15]
 8012386:	3301      	adds	r3, #1
 8012388:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801238a:	68bb      	ldr	r3, [r7, #8]
 801238c:	3301      	adds	r3, #1
 801238e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012390:	68bb      	ldr	r3, [r7, #8]
 8012392:	781b      	ldrb	r3, [r3, #0]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d1f5      	bne.n	8012384 <USBD_GetLen+0x12>
  }

  return len;
 8012398:	7bfb      	ldrb	r3, [r7, #15]
}
 801239a:	4618      	mov	r0, r3
 801239c:	3714      	adds	r7, #20
 801239e:	46bd      	mov	sp, r7
 80123a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a4:	4770      	bx	lr

080123a6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80123a6:	b580      	push	{r7, lr}
 80123a8:	b084      	sub	sp, #16
 80123aa:	af00      	add	r7, sp, #0
 80123ac:	60f8      	str	r0, [r7, #12]
 80123ae:	60b9      	str	r1, [r7, #8]
 80123b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	2202      	movs	r2, #2
 80123b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	687a      	ldr	r2, [r7, #4]
 80123be:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	687a      	ldr	r2, [r7, #4]
 80123c4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	68ba      	ldr	r2, [r7, #8]
 80123ca:	2100      	movs	r1, #0
 80123cc:	68f8      	ldr	r0, [r7, #12]
 80123ce:	f003 fb8a 	bl	8015ae6 <USBD_LL_Transmit>

  return USBD_OK;
 80123d2:	2300      	movs	r3, #0
}
 80123d4:	4618      	mov	r0, r3
 80123d6:	3710      	adds	r7, #16
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}

080123dc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b084      	sub	sp, #16
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	60f8      	str	r0, [r7, #12]
 80123e4:	60b9      	str	r1, [r7, #8]
 80123e6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	68ba      	ldr	r2, [r7, #8]
 80123ec:	2100      	movs	r1, #0
 80123ee:	68f8      	ldr	r0, [r7, #12]
 80123f0:	f003 fb79 	bl	8015ae6 <USBD_LL_Transmit>

  return USBD_OK;
 80123f4:	2300      	movs	r3, #0
}
 80123f6:	4618      	mov	r0, r3
 80123f8:	3710      	adds	r7, #16
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}

080123fe <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80123fe:	b580      	push	{r7, lr}
 8012400:	b084      	sub	sp, #16
 8012402:	af00      	add	r7, sp, #0
 8012404:	60f8      	str	r0, [r7, #12]
 8012406:	60b9      	str	r1, [r7, #8]
 8012408:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	2203      	movs	r2, #3
 801240e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	687a      	ldr	r2, [r7, #4]
 8012416:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	687a      	ldr	r2, [r7, #4]
 801241e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	68ba      	ldr	r2, [r7, #8]
 8012426:	2100      	movs	r1, #0
 8012428:	68f8      	ldr	r0, [r7, #12]
 801242a:	f003 fb7d 	bl	8015b28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801242e:	2300      	movs	r3, #0
}
 8012430:	4618      	mov	r0, r3
 8012432:	3710      	adds	r7, #16
 8012434:	46bd      	mov	sp, r7
 8012436:	bd80      	pop	{r7, pc}

08012438 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b084      	sub	sp, #16
 801243c:	af00      	add	r7, sp, #0
 801243e:	60f8      	str	r0, [r7, #12]
 8012440:	60b9      	str	r1, [r7, #8]
 8012442:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	68ba      	ldr	r2, [r7, #8]
 8012448:	2100      	movs	r1, #0
 801244a:	68f8      	ldr	r0, [r7, #12]
 801244c:	f003 fb6c 	bl	8015b28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012450:	2300      	movs	r3, #0
}
 8012452:	4618      	mov	r0, r3
 8012454:	3710      	adds	r7, #16
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}

0801245a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801245a:	b580      	push	{r7, lr}
 801245c:	b082      	sub	sp, #8
 801245e:	af00      	add	r7, sp, #0
 8012460:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	2204      	movs	r2, #4
 8012466:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801246a:	2300      	movs	r3, #0
 801246c:	2200      	movs	r2, #0
 801246e:	2100      	movs	r1, #0
 8012470:	6878      	ldr	r0, [r7, #4]
 8012472:	f003 fb38 	bl	8015ae6 <USBD_LL_Transmit>

  return USBD_OK;
 8012476:	2300      	movs	r3, #0
}
 8012478:	4618      	mov	r0, r3
 801247a:	3708      	adds	r7, #8
 801247c:	46bd      	mov	sp, r7
 801247e:	bd80      	pop	{r7, pc}

08012480 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b082      	sub	sp, #8
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2205      	movs	r2, #5
 801248c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012490:	2300      	movs	r3, #0
 8012492:	2200      	movs	r2, #0
 8012494:	2100      	movs	r1, #0
 8012496:	6878      	ldr	r0, [r7, #4]
 8012498:	f003 fb46 	bl	8015b28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801249c:	2300      	movs	r3, #0
}
 801249e:	4618      	mov	r0, r3
 80124a0:	3708      	adds	r7, #8
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}

080124a6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80124a6:	b480      	push	{r7}
 80124a8:	b085      	sub	sp, #20
 80124aa:	af00      	add	r7, sp, #0
 80124ac:	4603      	mov	r3, r0
 80124ae:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80124b0:	2300      	movs	r3, #0
 80124b2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80124b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80124b8:	2b84      	cmp	r3, #132	; 0x84
 80124ba:	d005      	beq.n	80124c8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80124bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	4413      	add	r3, r2
 80124c4:	3303      	adds	r3, #3
 80124c6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80124c8:	68fb      	ldr	r3, [r7, #12]
}
 80124ca:	4618      	mov	r0, r3
 80124cc:	3714      	adds	r7, #20
 80124ce:	46bd      	mov	sp, r7
 80124d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d4:	4770      	bx	lr

080124d6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80124d6:	b480      	push	{r7}
 80124d8:	b083      	sub	sp, #12
 80124da:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80124dc:	f3ef 8305 	mrs	r3, IPSR
 80124e0:	607b      	str	r3, [r7, #4]
  return(result);
 80124e2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	bf14      	ite	ne
 80124e8:	2301      	movne	r3, #1
 80124ea:	2300      	moveq	r3, #0
 80124ec:	b2db      	uxtb	r3, r3
}
 80124ee:	4618      	mov	r0, r3
 80124f0:	370c      	adds	r7, #12
 80124f2:	46bd      	mov	sp, r7
 80124f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f8:	4770      	bx	lr

080124fa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80124fa:	b580      	push	{r7, lr}
 80124fc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80124fe:	f001 fb31 	bl	8013b64 <vTaskStartScheduler>
  
  return osOK;
 8012502:	2300      	movs	r3, #0
}
 8012504:	4618      	mov	r0, r3
 8012506:	bd80      	pop	{r7, pc}

08012508 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801250a:	b089      	sub	sp, #36	; 0x24
 801250c:	af04      	add	r7, sp, #16
 801250e:	6078      	str	r0, [r7, #4]
 8012510:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	695b      	ldr	r3, [r3, #20]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d020      	beq.n	801255c <osThreadCreate+0x54>
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	699b      	ldr	r3, [r3, #24]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d01c      	beq.n	801255c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	685c      	ldr	r4, [r3, #4]
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	681d      	ldr	r5, [r3, #0]
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	691e      	ldr	r6, [r3, #16]
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012534:	4618      	mov	r0, r3
 8012536:	f7ff ffb6 	bl	80124a6 <makeFreeRtosPriority>
 801253a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	695b      	ldr	r3, [r3, #20]
 8012540:	687a      	ldr	r2, [r7, #4]
 8012542:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012544:	9202      	str	r2, [sp, #8]
 8012546:	9301      	str	r3, [sp, #4]
 8012548:	9100      	str	r1, [sp, #0]
 801254a:	683b      	ldr	r3, [r7, #0]
 801254c:	4632      	mov	r2, r6
 801254e:	4629      	mov	r1, r5
 8012550:	4620      	mov	r0, r4
 8012552:	f001 f944 	bl	80137de <xTaskCreateStatic>
 8012556:	4603      	mov	r3, r0
 8012558:	60fb      	str	r3, [r7, #12]
 801255a:	e01c      	b.n	8012596 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	685c      	ldr	r4, [r3, #4]
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012568:	b29e      	uxth	r6, r3
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012570:	4618      	mov	r0, r3
 8012572:	f7ff ff98 	bl	80124a6 <makeFreeRtosPriority>
 8012576:	4602      	mov	r2, r0
 8012578:	f107 030c 	add.w	r3, r7, #12
 801257c:	9301      	str	r3, [sp, #4]
 801257e:	9200      	str	r2, [sp, #0]
 8012580:	683b      	ldr	r3, [r7, #0]
 8012582:	4632      	mov	r2, r6
 8012584:	4629      	mov	r1, r5
 8012586:	4620      	mov	r0, r4
 8012588:	f001 f983 	bl	8013892 <xTaskCreate>
 801258c:	4603      	mov	r3, r0
 801258e:	2b01      	cmp	r3, #1
 8012590:	d001      	beq.n	8012596 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8012592:	2300      	movs	r3, #0
 8012594:	e000      	b.n	8012598 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012596:	68fb      	ldr	r3, [r7, #12]
}
 8012598:	4618      	mov	r0, r3
 801259a:	3714      	adds	r7, #20
 801259c:	46bd      	mov	sp, r7
 801259e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080125a0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b084      	sub	sp, #16
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d001      	beq.n	80125b6 <osDelay+0x16>
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	e000      	b.n	80125b8 <osDelay+0x18>
 80125b6:	2301      	movs	r3, #1
 80125b8:	4618      	mov	r0, r3
 80125ba:	f001 fa9f 	bl	8013afc <vTaskDelay>
  
  return osOK;
 80125be:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80125c0:	4618      	mov	r0, r3
 80125c2:	3710      	adds	r7, #16
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd80      	pop	{r7, pc}

080125c8 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b086      	sub	sp, #24
 80125cc:	af02      	add	r7, sp, #8
 80125ce:	6078      	str	r0, [r7, #4]
 80125d0:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80125d2:	2300      	movs	r3, #0
 80125d4:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80125d6:	2300      	movs	r3, #0
 80125d8:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80125da:	f7ff ff7c 	bl	80124d6 <inHandlerMode>
 80125de:	4603      	mov	r3, r0
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d01c      	beq.n	801261e <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80125e4:	6839      	ldr	r1, [r7, #0]
 80125e6:	f107 0208 	add.w	r2, r7, #8
 80125ea:	f107 030c 	add.w	r3, r7, #12
 80125ee:	9300      	str	r3, [sp, #0]
 80125f0:	4613      	mov	r3, r2
 80125f2:	2201      	movs	r2, #1
 80125f4:	6878      	ldr	r0, [r7, #4]
 80125f6:	f002 f857 	bl	80146a8 <xTaskGenericNotifyFromISR>
 80125fa:	4603      	mov	r3, r0
 80125fc:	2b01      	cmp	r3, #1
 80125fe:	d002      	beq.n	8012606 <osSignalSet+0x3e>
      return 0x80000000;
 8012600:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012604:	e019      	b.n	801263a <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d015      	beq.n	8012638 <osSignalSet+0x70>
 801260c:	4b0d      	ldr	r3, [pc, #52]	; (8012644 <osSignalSet+0x7c>)
 801260e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012612:	601a      	str	r2, [r3, #0]
 8012614:	f3bf 8f4f 	dsb	sy
 8012618:	f3bf 8f6f 	isb	sy
 801261c:	e00c      	b.n	8012638 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 801261e:	6839      	ldr	r1, [r7, #0]
 8012620:	f107 0308 	add.w	r3, r7, #8
 8012624:	2201      	movs	r2, #1
 8012626:	6878      	ldr	r0, [r7, #4]
 8012628:	f001 ff8c 	bl	8014544 <xTaskGenericNotify>
 801262c:	4603      	mov	r3, r0
 801262e:	2b01      	cmp	r3, #1
 8012630:	d002      	beq.n	8012638 <osSignalSet+0x70>
    return 0x80000000;
 8012632:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012636:	e000      	b.n	801263a <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8012638:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 801263a:	4618      	mov	r0, r3
 801263c:	3710      	adds	r7, #16
 801263e:	46bd      	mov	sp, r7
 8012640:	bd80      	pop	{r7, pc}
 8012642:	bf00      	nop
 8012644:	e000ed04 	.word	0xe000ed04

08012648 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8012648:	b590      	push	{r4, r7, lr}
 801264a:	b089      	sub	sp, #36	; 0x24
 801264c:	af00      	add	r7, sp, #0
 801264e:	60f8      	str	r0, [r7, #12]
 8012650:	60b9      	str	r1, [r7, #8]
 8012652:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8012654:	2300      	movs	r3, #0
 8012656:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8012658:	2300      	movs	r3, #0
 801265a:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012662:	d103      	bne.n	801266c <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8012664:	f04f 33ff 	mov.w	r3, #4294967295
 8012668:	61fb      	str	r3, [r7, #28]
 801266a:	e009      	b.n	8012680 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d006      	beq.n	8012680 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8012676:	69fb      	ldr	r3, [r7, #28]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d101      	bne.n	8012680 <osSignalWait+0x38>
      ticks = 1;
 801267c:	2301      	movs	r3, #1
 801267e:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8012680:	f7ff ff29 	bl	80124d6 <inHandlerMode>
 8012684:	4603      	mov	r3, r0
 8012686:	2b00      	cmp	r3, #0
 8012688:	d002      	beq.n	8012690 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 801268a:	2382      	movs	r3, #130	; 0x82
 801268c:	613b      	str	r3, [r7, #16]
 801268e:	e01b      	b.n	80126c8 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8012690:	68b9      	ldr	r1, [r7, #8]
 8012692:	f107 0310 	add.w	r3, r7, #16
 8012696:	1d1a      	adds	r2, r3, #4
 8012698:	69fb      	ldr	r3, [r7, #28]
 801269a:	2000      	movs	r0, #0
 801269c:	f001 fef8 	bl	8014490 <xTaskNotifyWait>
 80126a0:	4603      	mov	r3, r0
 80126a2:	2b01      	cmp	r3, #1
 80126a4:	d008      	beq.n	80126b8 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80126a6:	69fb      	ldr	r3, [r7, #28]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d102      	bne.n	80126b2 <osSignalWait+0x6a>
 80126ac:	2300      	movs	r3, #0
 80126ae:	613b      	str	r3, [r7, #16]
 80126b0:	e00a      	b.n	80126c8 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80126b2:	2340      	movs	r3, #64	; 0x40
 80126b4:	613b      	str	r3, [r7, #16]
 80126b6:	e007      	b.n	80126c8 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80126b8:	697b      	ldr	r3, [r7, #20]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	da02      	bge.n	80126c4 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80126be:	2386      	movs	r3, #134	; 0x86
 80126c0:	613b      	str	r3, [r7, #16]
 80126c2:	e001      	b.n	80126c8 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80126c4:	2308      	movs	r3, #8
 80126c6:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	461c      	mov	r4, r3
 80126cc:	f107 0310 	add.w	r3, r7, #16
 80126d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80126d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80126d8:	68f8      	ldr	r0, [r7, #12]
 80126da:	3724      	adds	r7, #36	; 0x24
 80126dc:	46bd      	mov	sp, r7
 80126de:	bd90      	pop	{r4, r7, pc}

080126e0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b082      	sub	sp, #8
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	685b      	ldr	r3, [r3, #4]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d007      	beq.n	8012700 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	685b      	ldr	r3, [r3, #4]
 80126f4:	4619      	mov	r1, r3
 80126f6:	2001      	movs	r0, #1
 80126f8:	f000 fc5f 	bl	8012fba <xQueueCreateMutexStatic>
 80126fc:	4603      	mov	r3, r0
 80126fe:	e003      	b.n	8012708 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012700:	2001      	movs	r0, #1
 8012702:	f000 fc42 	bl	8012f8a <xQueueCreateMutex>
 8012706:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012708:	4618      	mov	r0, r3
 801270a:	3708      	adds	r7, #8
 801270c:	46bd      	mov	sp, r7
 801270e:	bd80      	pop	{r7, pc}

08012710 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b086      	sub	sp, #24
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	685b      	ldr	r3, [r3, #4]
 801271c:	3303      	adds	r3, #3
 801271e:	f023 0303 	bic.w	r3, r3, #3
 8012722:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8012724:	2014      	movs	r0, #20
 8012726:	f002 fb3b 	bl	8014da0 <pvPortMalloc>
 801272a:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 801272c:	697b      	ldr	r3, [r7, #20]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d046      	beq.n	80127c0 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681a      	ldr	r2, [r3, #0]
 8012736:	697b      	ldr	r3, [r7, #20]
 8012738:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 801273a:	68fa      	ldr	r2, [r7, #12]
 801273c:	697b      	ldr	r3, [r7, #20]
 801273e:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8012740:	697b      	ldr	r3, [r7, #20]
 8012742:	2200      	movs	r2, #0
 8012744:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	4618      	mov	r0, r3
 801274c:	f002 fb28 	bl	8014da0 <pvPortMalloc>
 8012750:	4602      	mov	r2, r0
 8012752:	697b      	ldr	r3, [r7, #20]
 8012754:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8012756:	697b      	ldr	r3, [r7, #20]
 8012758:	685b      	ldr	r3, [r3, #4]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d02b      	beq.n	80127b6 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	68fa      	ldr	r2, [r7, #12]
 8012764:	fb02 f303 	mul.w	r3, r2, r3
 8012768:	4618      	mov	r0, r3
 801276a:	f002 fb19 	bl	8014da0 <pvPortMalloc>
 801276e:	4602      	mov	r2, r0
 8012770:	697b      	ldr	r3, [r7, #20]
 8012772:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8012774:	697b      	ldr	r3, [r7, #20]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d011      	beq.n	80127a0 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 801277c:	2300      	movs	r3, #0
 801277e:	613b      	str	r3, [r7, #16]
 8012780:	e008      	b.n	8012794 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8012782:	697b      	ldr	r3, [r7, #20]
 8012784:	685a      	ldr	r2, [r3, #4]
 8012786:	693b      	ldr	r3, [r7, #16]
 8012788:	4413      	add	r3, r2
 801278a:	2200      	movs	r2, #0
 801278c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 801278e:	693b      	ldr	r3, [r7, #16]
 8012790:	3301      	adds	r3, #1
 8012792:	613b      	str	r3, [r7, #16]
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	693a      	ldr	r2, [r7, #16]
 801279a:	429a      	cmp	r2, r3
 801279c:	d3f1      	bcc.n	8012782 <osPoolCreate+0x72>
 801279e:	e00f      	b.n	80127c0 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80127a0:	697b      	ldr	r3, [r7, #20]
 80127a2:	685b      	ldr	r3, [r3, #4]
 80127a4:	4618      	mov	r0, r3
 80127a6:	f002 fbbd 	bl	8014f24 <vPortFree>
        vPortFree(thePool);
 80127aa:	6978      	ldr	r0, [r7, #20]
 80127ac:	f002 fbba 	bl	8014f24 <vPortFree>
        thePool = NULL;
 80127b0:	2300      	movs	r3, #0
 80127b2:	617b      	str	r3, [r7, #20]
 80127b4:	e004      	b.n	80127c0 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80127b6:	6978      	ldr	r0, [r7, #20]
 80127b8:	f002 fbb4 	bl	8014f24 <vPortFree>
      thePool = NULL;
 80127bc:	2300      	movs	r3, #0
 80127be:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80127c0:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80127c2:	4618      	mov	r0, r3
 80127c4:	3718      	adds	r7, #24
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}

080127ca <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80127ca:	b580      	push	{r7, lr}
 80127cc:	b08a      	sub	sp, #40	; 0x28
 80127ce:	af00      	add	r7, sp, #0
 80127d0:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 80127d2:	2300      	movs	r3, #0
 80127d4:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 80127d6:	2300      	movs	r3, #0
 80127d8:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 80127da:	f7ff fe7c 	bl	80124d6 <inHandlerMode>
 80127de:	4603      	mov	r3, r0
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d00e      	beq.n	8012802 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80127e4:	f3ef 8211 	mrs	r2, BASEPRI
 80127e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127ec:	f383 8811 	msr	BASEPRI, r3
 80127f0:	f3bf 8f6f 	isb	sy
 80127f4:	f3bf 8f4f 	dsb	sy
 80127f8:	617a      	str	r2, [r7, #20]
 80127fa:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80127fc:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80127fe:	627b      	str	r3, [r7, #36]	; 0x24
 8012800:	e001      	b.n	8012806 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8012802:	f002 f9b3 	bl	8014b6c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8012806:	2300      	movs	r3, #0
 8012808:	61fb      	str	r3, [r7, #28]
 801280a:	e029      	b.n	8012860 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	691a      	ldr	r2, [r3, #16]
 8012810:	69fb      	ldr	r3, [r7, #28]
 8012812:	4413      	add	r3, r2
 8012814:	687a      	ldr	r2, [r7, #4]
 8012816:	6892      	ldr	r2, [r2, #8]
 8012818:	fbb3 f1f2 	udiv	r1, r3, r2
 801281c:	fb02 f201 	mul.w	r2, r2, r1
 8012820:	1a9b      	subs	r3, r3, r2
 8012822:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	685a      	ldr	r2, [r3, #4]
 8012828:	69bb      	ldr	r3, [r7, #24]
 801282a:	4413      	add	r3, r2
 801282c:	781b      	ldrb	r3, [r3, #0]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d113      	bne.n	801285a <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	685a      	ldr	r2, [r3, #4]
 8012836:	69bb      	ldr	r3, [r7, #24]
 8012838:	4413      	add	r3, r2
 801283a:	2201      	movs	r2, #1
 801283c:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	4619      	mov	r1, r3
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	68db      	ldr	r3, [r3, #12]
 8012848:	69ba      	ldr	r2, [r7, #24]
 801284a:	fb02 f303 	mul.w	r3, r2, r3
 801284e:	440b      	add	r3, r1
 8012850:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	69ba      	ldr	r2, [r7, #24]
 8012856:	611a      	str	r2, [r3, #16]
      break;
 8012858:	e007      	b.n	801286a <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 801285a:	69fb      	ldr	r3, [r7, #28]
 801285c:	3301      	adds	r3, #1
 801285e:	61fb      	str	r3, [r7, #28]
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	689b      	ldr	r3, [r3, #8]
 8012864:	69fa      	ldr	r2, [r7, #28]
 8012866:	429a      	cmp	r2, r3
 8012868:	d3d0      	bcc.n	801280c <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 801286a:	f7ff fe34 	bl	80124d6 <inHandlerMode>
 801286e:	4603      	mov	r3, r0
 8012870:	2b00      	cmp	r3, #0
 8012872:	d005      	beq.n	8012880 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8012874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012876:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	f383 8811 	msr	BASEPRI, r3
 801287e:	e001      	b.n	8012884 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8012880:	f002 f9a2 	bl	8014bc8 <vPortExitCritical>
  }
  
  return p;
 8012884:	6a3b      	ldr	r3, [r7, #32]
}
 8012886:	4618      	mov	r0, r3
 8012888:	3728      	adds	r7, #40	; 0x28
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}

0801288e <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 801288e:	b480      	push	{r7}
 8012890:	b085      	sub	sp, #20
 8012892:	af00      	add	r7, sp, #0
 8012894:	6078      	str	r0, [r7, #4]
 8012896:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d101      	bne.n	80128a2 <osPoolFree+0x14>
    return osErrorParameter;
 801289e:	2380      	movs	r3, #128	; 0x80
 80128a0:	e030      	b.n	8012904 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80128a2:	683b      	ldr	r3, [r7, #0]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d101      	bne.n	80128ac <osPoolFree+0x1e>
    return osErrorParameter;
 80128a8:	2380      	movs	r3, #128	; 0x80
 80128aa:	e02b      	b.n	8012904 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	683a      	ldr	r2, [r7, #0]
 80128b2:	429a      	cmp	r2, r3
 80128b4:	d201      	bcs.n	80128ba <osPoolFree+0x2c>
    return osErrorParameter;
 80128b6:	2380      	movs	r3, #128	; 0x80
 80128b8:	e024      	b.n	8012904 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	687a      	ldr	r2, [r7, #4]
 80128be:	6812      	ldr	r2, [r2, #0]
 80128c0:	1a9b      	subs	r3, r3, r2
 80128c2:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	68da      	ldr	r2, [r3, #12]
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80128ce:	fb02 f201 	mul.w	r2, r2, r1
 80128d2:	1a9b      	subs	r3, r3, r2
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d001      	beq.n	80128dc <osPoolFree+0x4e>
    return osErrorParameter;
 80128d8:	2380      	movs	r3, #128	; 0x80
 80128da:	e013      	b.n	8012904 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	68db      	ldr	r3, [r3, #12]
 80128e0:	68fa      	ldr	r2, [r7, #12]
 80128e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80128e6:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	689b      	ldr	r3, [r3, #8]
 80128ec:	68fa      	ldr	r2, [r7, #12]
 80128ee:	429a      	cmp	r2, r3
 80128f0:	d301      	bcc.n	80128f6 <osPoolFree+0x68>
    return osErrorParameter;
 80128f2:	2380      	movs	r3, #128	; 0x80
 80128f4:	e006      	b.n	8012904 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	685a      	ldr	r2, [r3, #4]
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	4413      	add	r3, r2
 80128fe:	2200      	movs	r2, #0
 8012900:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8012902:	2300      	movs	r3, #0
}
 8012904:	4618      	mov	r0, r3
 8012906:	3714      	adds	r7, #20
 8012908:	46bd      	mov	sp, r7
 801290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290e:	4770      	bx	lr

08012910 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8012910:	b590      	push	{r4, r7, lr}
 8012912:	b087      	sub	sp, #28
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
 8012918:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	60fb      	str	r3, [r7, #12]
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	685b      	ldr	r3, [r3, #4]
 8012924:	613b      	str	r3, [r7, #16]
 8012926:	2300      	movs	r3, #0
 8012928:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	689c      	ldr	r4, [r3, #8]
 801292e:	200c      	movs	r0, #12
 8012930:	f002 fa36 	bl	8014da0 <pvPortMalloc>
 8012934:	4603      	mov	r3, r0
 8012936:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	689b      	ldr	r3, [r3, #8]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d101      	bne.n	8012946 <osMailCreate+0x36>
    return NULL;
 8012942:	2300      	movs	r3, #0
 8012944:	e038      	b.n	80129b8 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	689b      	ldr	r3, [r3, #8]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	687a      	ldr	r2, [r7, #4]
 801294e:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	6818      	ldr	r0, [r3, #0]
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	689b      	ldr	r3, [r3, #8]
 8012958:	681c      	ldr	r4, [r3, #0]
 801295a:	2200      	movs	r2, #0
 801295c:	2104      	movs	r1, #4
 801295e:	f000 fa9c 	bl	8012e9a <xQueueGenericCreate>
 8012962:	4603      	mov	r3, r0
 8012964:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	689b      	ldr	r3, [r3, #8]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	685b      	ldr	r3, [r3, #4]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d107      	bne.n	8012982 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	689b      	ldr	r3, [r3, #8]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	4618      	mov	r0, r3
 801297a:	f002 fad3 	bl	8014f24 <vPortFree>
    return NULL;
 801297e:	2300      	movs	r3, #0
 8012980:	e01a      	b.n	80129b8 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	689b      	ldr	r3, [r3, #8]
 8012986:	681c      	ldr	r4, [r3, #0]
 8012988:	f107 030c 	add.w	r3, r7, #12
 801298c:	4618      	mov	r0, r3
 801298e:	f7ff febf 	bl	8012710 <osPoolCreate>
 8012992:	4603      	mov	r3, r0
 8012994:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	689b      	ldr	r3, [r3, #8]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	689b      	ldr	r3, [r3, #8]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d107      	bne.n	80129b2 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	689b      	ldr	r3, [r3, #8]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	4618      	mov	r0, r3
 80129aa:	f002 fabb 	bl	8014f24 <vPortFree>
    return NULL;
 80129ae:	2300      	movs	r3, #0
 80129b0:	e002      	b.n	80129b8 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	689b      	ldr	r3, [r3, #8]
 80129b6:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 80129b8:	4618      	mov	r0, r3
 80129ba:	371c      	adds	r7, #28
 80129bc:	46bd      	mov	sp, r7
 80129be:	bd90      	pop	{r4, r7, pc}

080129c0 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b084      	sub	sp, #16
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
 80129c8:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d101      	bne.n	80129d4 <osMailAlloc+0x14>
    return NULL;
 80129d0:	2300      	movs	r3, #0
 80129d2:	e006      	b.n	80129e2 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	689b      	ldr	r3, [r3, #8]
 80129d8:	4618      	mov	r0, r3
 80129da:	f7ff fef6 	bl	80127ca <osPoolAlloc>
 80129de:	60f8      	str	r0, [r7, #12]
  
  return p;
 80129e0:	68fb      	ldr	r3, [r7, #12]
}
 80129e2:	4618      	mov	r0, r3
 80129e4:	3710      	adds	r7, #16
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}
	...

080129ec <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 80129ec:	b580      	push	{r7, lr}
 80129ee:	b084      	sub	sp, #16
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	6078      	str	r0, [r7, #4]
 80129f4:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d101      	bne.n	8012a00 <osMailPut+0x14>
    return osErrorParameter;
 80129fc:	2380      	movs	r3, #128	; 0x80
 80129fe:	e02c      	b.n	8012a5a <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8012a00:	2300      	movs	r3, #0
 8012a02:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8012a04:	f7ff fd67 	bl	80124d6 <inHandlerMode>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d018      	beq.n	8012a40 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	6858      	ldr	r0, [r3, #4]
 8012a12:	f107 020c 	add.w	r2, r7, #12
 8012a16:	4639      	mov	r1, r7
 8012a18:	2300      	movs	r3, #0
 8012a1a:	f000 fbe3 	bl	80131e4 <xQueueGenericSendFromISR>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	2b01      	cmp	r3, #1
 8012a22:	d001      	beq.n	8012a28 <osMailPut+0x3c>
      return osErrorOS;
 8012a24:	23ff      	movs	r3, #255	; 0xff
 8012a26:	e018      	b.n	8012a5a <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d014      	beq.n	8012a58 <osMailPut+0x6c>
 8012a2e:	4b0d      	ldr	r3, [pc, #52]	; (8012a64 <osMailPut+0x78>)
 8012a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a34:	601a      	str	r2, [r3, #0]
 8012a36:	f3bf 8f4f 	dsb	sy
 8012a3a:	f3bf 8f6f 	isb	sy
 8012a3e:	e00b      	b.n	8012a58 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	6858      	ldr	r0, [r3, #4]
 8012a44:	4639      	mov	r1, r7
 8012a46:	2300      	movs	r3, #0
 8012a48:	2200      	movs	r2, #0
 8012a4a:	f000 fad1 	bl	8012ff0 <xQueueGenericSend>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	2b01      	cmp	r3, #1
 8012a52:	d001      	beq.n	8012a58 <osMailPut+0x6c>
      return osErrorOS;
 8012a54:	23ff      	movs	r3, #255	; 0xff
 8012a56:	e000      	b.n	8012a5a <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8012a58:	2300      	movs	r3, #0
}
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	3710      	adds	r7, #16
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd80      	pop	{r7, pc}
 8012a62:	bf00      	nop
 8012a64:	e000ed04 	.word	0xe000ed04

08012a68 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8012a68:	b590      	push	{r4, r7, lr}
 8012a6a:	b08b      	sub	sp, #44	; 0x2c
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	60f8      	str	r0, [r7, #12]
 8012a70:	60b9      	str	r1, [r7, #8]
 8012a72:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8012a78:	68bb      	ldr	r3, [r7, #8]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d10a      	bne.n	8012a94 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8012a7e:	2380      	movs	r3, #128	; 0x80
 8012a80:	617b      	str	r3, [r7, #20]
    return event;
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	461c      	mov	r4, r3
 8012a86:	f107 0314 	add.w	r3, r7, #20
 8012a8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012a8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012a92:	e056      	b.n	8012b42 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012a94:	2300      	movs	r3, #0
 8012a96:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012a98:	2300      	movs	r3, #0
 8012a9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012aa2:	d103      	bne.n	8012aac <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8012aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8012aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8012aaa:	e009      	b.n	8012ac0 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d006      	beq.n	8012ac0 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8012ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d101      	bne.n	8012ac0 <osMailGet+0x58>
      ticks = 1;
 8012abc:	2301      	movs	r3, #1
 8012abe:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012ac0:	f7ff fd09 	bl	80124d6 <inHandlerMode>
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d01d      	beq.n	8012b06 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	6858      	ldr	r0, [r3, #4]
 8012ace:	f107 0220 	add.w	r2, r7, #32
 8012ad2:	f107 0314 	add.w	r3, r7, #20
 8012ad6:	3304      	adds	r3, #4
 8012ad8:	4619      	mov	r1, r3
 8012ada:	f000 fcf3 	bl	80134c4 <xQueueReceiveFromISR>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	2b01      	cmp	r3, #1
 8012ae2:	d102      	bne.n	8012aea <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8012ae4:	2320      	movs	r3, #32
 8012ae6:	617b      	str	r3, [r7, #20]
 8012ae8:	e001      	b.n	8012aee <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8012aea:	2300      	movs	r3, #0
 8012aec:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012aee:	6a3b      	ldr	r3, [r7, #32]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d01e      	beq.n	8012b32 <osMailGet+0xca>
 8012af4:	4b15      	ldr	r3, [pc, #84]	; (8012b4c <osMailGet+0xe4>)
 8012af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012afa:	601a      	str	r2, [r3, #0]
 8012afc:	f3bf 8f4f 	dsb	sy
 8012b00:	f3bf 8f6f 	isb	sy
 8012b04:	e015      	b.n	8012b32 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8012b06:	68bb      	ldr	r3, [r7, #8]
 8012b08:	6858      	ldr	r0, [r3, #4]
 8012b0a:	f107 0314 	add.w	r3, r7, #20
 8012b0e:	3304      	adds	r3, #4
 8012b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b12:	4619      	mov	r1, r3
 8012b14:	f000 fbfa 	bl	801330c <xQueueReceive>
 8012b18:	4603      	mov	r3, r0
 8012b1a:	2b01      	cmp	r3, #1
 8012b1c:	d102      	bne.n	8012b24 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8012b1e:	2320      	movs	r3, #32
 8012b20:	617b      	str	r3, [r7, #20]
 8012b22:	e006      	b.n	8012b32 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d101      	bne.n	8012b2e <osMailGet+0xc6>
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	e000      	b.n	8012b30 <osMailGet+0xc8>
 8012b2e:	2340      	movs	r3, #64	; 0x40
 8012b30:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	461c      	mov	r4, r3
 8012b36:	f107 0314 	add.w	r3, r7, #20
 8012b3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012b3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012b42:	68f8      	ldr	r0, [r7, #12]
 8012b44:	372c      	adds	r7, #44	; 0x2c
 8012b46:	46bd      	mov	sp, r7
 8012b48:	bd90      	pop	{r4, r7, pc}
 8012b4a:	bf00      	nop
 8012b4c:	e000ed04 	.word	0xe000ed04

08012b50 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b082      	sub	sp, #8
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
 8012b58:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d101      	bne.n	8012b64 <osMailFree+0x14>
    return osErrorParameter;
 8012b60:	2380      	movs	r3, #128	; 0x80
 8012b62:	e006      	b.n	8012b72 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	689b      	ldr	r3, [r3, #8]
 8012b68:	6839      	ldr	r1, [r7, #0]
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	f7ff fe8f 	bl	801288e <osPoolFree>
 8012b70:	4603      	mov	r3, r0
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	3708      	adds	r7, #8
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bd80      	pop	{r7, pc}

08012b7a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012b7a:	b480      	push	{r7}
 8012b7c:	b083      	sub	sp, #12
 8012b7e:	af00      	add	r7, sp, #0
 8012b80:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	f103 0208 	add.w	r2, r3, #8
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8012b92:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	f103 0208 	add.w	r2, r3, #8
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	f103 0208 	add.w	r2, r3, #8
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2200      	movs	r2, #0
 8012bac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012bae:	bf00      	nop
 8012bb0:	370c      	adds	r7, #12
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb8:	4770      	bx	lr

08012bba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012bba:	b480      	push	{r7}
 8012bbc:	b083      	sub	sp, #12
 8012bbe:	af00      	add	r7, sp, #0
 8012bc0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012bc8:	bf00      	nop
 8012bca:	370c      	adds	r7, #12
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd2:	4770      	bx	lr

08012bd4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012bd4:	b480      	push	{r7}
 8012bd6:	b085      	sub	sp, #20
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
 8012bdc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	685b      	ldr	r3, [r3, #4]
 8012be2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	68fa      	ldr	r2, [r7, #12]
 8012be8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	689a      	ldr	r2, [r3, #8]
 8012bee:	683b      	ldr	r3, [r7, #0]
 8012bf0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	689b      	ldr	r3, [r3, #8]
 8012bf6:	683a      	ldr	r2, [r7, #0]
 8012bf8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	683a      	ldr	r2, [r7, #0]
 8012bfe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	687a      	ldr	r2, [r7, #4]
 8012c04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	1c5a      	adds	r2, r3, #1
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	601a      	str	r2, [r3, #0]
}
 8012c10:	bf00      	nop
 8012c12:	3714      	adds	r7, #20
 8012c14:	46bd      	mov	sp, r7
 8012c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1a:	4770      	bx	lr

08012c1c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012c1c:	b480      	push	{r7}
 8012c1e:	b085      	sub	sp, #20
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	6078      	str	r0, [r7, #4]
 8012c24:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012c26:	683b      	ldr	r3, [r7, #0]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c32:	d103      	bne.n	8012c3c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	691b      	ldr	r3, [r3, #16]
 8012c38:	60fb      	str	r3, [r7, #12]
 8012c3a:	e00c      	b.n	8012c56 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	3308      	adds	r3, #8
 8012c40:	60fb      	str	r3, [r7, #12]
 8012c42:	e002      	b.n	8012c4a <vListInsert+0x2e>
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	685b      	ldr	r3, [r3, #4]
 8012c48:	60fb      	str	r3, [r7, #12]
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	685b      	ldr	r3, [r3, #4]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	68ba      	ldr	r2, [r7, #8]
 8012c52:	429a      	cmp	r2, r3
 8012c54:	d2f6      	bcs.n	8012c44 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	685a      	ldr	r2, [r3, #4]
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012c5e:	683b      	ldr	r3, [r7, #0]
 8012c60:	685b      	ldr	r3, [r3, #4]
 8012c62:	683a      	ldr	r2, [r7, #0]
 8012c64:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012c66:	683b      	ldr	r3, [r7, #0]
 8012c68:	68fa      	ldr	r2, [r7, #12]
 8012c6a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	683a      	ldr	r2, [r7, #0]
 8012c70:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012c72:	683b      	ldr	r3, [r7, #0]
 8012c74:	687a      	ldr	r2, [r7, #4]
 8012c76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	1c5a      	adds	r2, r3, #1
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	601a      	str	r2, [r3, #0]
}
 8012c82:	bf00      	nop
 8012c84:	3714      	adds	r7, #20
 8012c86:	46bd      	mov	sp, r7
 8012c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8c:	4770      	bx	lr

08012c8e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012c8e:	b480      	push	{r7}
 8012c90:	b085      	sub	sp, #20
 8012c92:	af00      	add	r7, sp, #0
 8012c94:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	691b      	ldr	r3, [r3, #16]
 8012c9a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	685b      	ldr	r3, [r3, #4]
 8012ca0:	687a      	ldr	r2, [r7, #4]
 8012ca2:	6892      	ldr	r2, [r2, #8]
 8012ca4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	689b      	ldr	r3, [r3, #8]
 8012caa:	687a      	ldr	r2, [r7, #4]
 8012cac:	6852      	ldr	r2, [r2, #4]
 8012cae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	685b      	ldr	r3, [r3, #4]
 8012cb4:	687a      	ldr	r2, [r7, #4]
 8012cb6:	429a      	cmp	r2, r3
 8012cb8:	d103      	bne.n	8012cc2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	689a      	ldr	r2, [r3, #8]
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	1e5a      	subs	r2, r3, #1
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	681b      	ldr	r3, [r3, #0]
}
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	3714      	adds	r7, #20
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce0:	4770      	bx	lr
	...

08012ce4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b084      	sub	sp, #16
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
 8012cec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d109      	bne.n	8012d0c <xQueueGenericReset+0x28>
	__asm volatile
 8012cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cfc:	f383 8811 	msr	BASEPRI, r3
 8012d00:	f3bf 8f6f 	isb	sy
 8012d04:	f3bf 8f4f 	dsb	sy
 8012d08:	60bb      	str	r3, [r7, #8]
 8012d0a:	e7fe      	b.n	8012d0a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8012d0c:	f001 ff2e 	bl	8014b6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	681a      	ldr	r2, [r3, #0]
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d18:	68f9      	ldr	r1, [r7, #12]
 8012d1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012d1c:	fb01 f303 	mul.w	r3, r1, r3
 8012d20:	441a      	add	r2, r3
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	2200      	movs	r2, #0
 8012d2a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	681a      	ldr	r2, [r3, #0]
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	681a      	ldr	r2, [r3, #0]
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d3c:	3b01      	subs	r3, #1
 8012d3e:	68f9      	ldr	r1, [r7, #12]
 8012d40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012d42:	fb01 f303 	mul.w	r3, r1, r3
 8012d46:	441a      	add	r2, r3
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	22ff      	movs	r2, #255	; 0xff
 8012d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	22ff      	movs	r2, #255	; 0xff
 8012d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012d5c:	683b      	ldr	r3, [r7, #0]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d114      	bne.n	8012d8c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	691b      	ldr	r3, [r3, #16]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d01a      	beq.n	8012da0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	3310      	adds	r3, #16
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f001 f936 	bl	8013fe0 <xTaskRemoveFromEventList>
 8012d74:	4603      	mov	r3, r0
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d012      	beq.n	8012da0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012d7a:	4b0d      	ldr	r3, [pc, #52]	; (8012db0 <xQueueGenericReset+0xcc>)
 8012d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d80:	601a      	str	r2, [r3, #0]
 8012d82:	f3bf 8f4f 	dsb	sy
 8012d86:	f3bf 8f6f 	isb	sy
 8012d8a:	e009      	b.n	8012da0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	3310      	adds	r3, #16
 8012d90:	4618      	mov	r0, r3
 8012d92:	f7ff fef2 	bl	8012b7a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	3324      	adds	r3, #36	; 0x24
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	f7ff feed 	bl	8012b7a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012da0:	f001 ff12 	bl	8014bc8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012da4:	2301      	movs	r3, #1
}
 8012da6:	4618      	mov	r0, r3
 8012da8:	3710      	adds	r7, #16
 8012daa:	46bd      	mov	sp, r7
 8012dac:	bd80      	pop	{r7, pc}
 8012dae:	bf00      	nop
 8012db0:	e000ed04 	.word	0xe000ed04

08012db4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b08e      	sub	sp, #56	; 0x38
 8012db8:	af02      	add	r7, sp, #8
 8012dba:	60f8      	str	r0, [r7, #12]
 8012dbc:	60b9      	str	r1, [r7, #8]
 8012dbe:	607a      	str	r2, [r7, #4]
 8012dc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d109      	bne.n	8012ddc <xQueueGenericCreateStatic+0x28>
 8012dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dcc:	f383 8811 	msr	BASEPRI, r3
 8012dd0:	f3bf 8f6f 	isb	sy
 8012dd4:	f3bf 8f4f 	dsb	sy
 8012dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8012dda:	e7fe      	b.n	8012dda <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012ddc:	683b      	ldr	r3, [r7, #0]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d109      	bne.n	8012df6 <xQueueGenericCreateStatic+0x42>
 8012de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012de6:	f383 8811 	msr	BASEPRI, r3
 8012dea:	f3bf 8f6f 	isb	sy
 8012dee:	f3bf 8f4f 	dsb	sy
 8012df2:	627b      	str	r3, [r7, #36]	; 0x24
 8012df4:	e7fe      	b.n	8012df4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d002      	beq.n	8012e02 <xQueueGenericCreateStatic+0x4e>
 8012dfc:	68bb      	ldr	r3, [r7, #8]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d001      	beq.n	8012e06 <xQueueGenericCreateStatic+0x52>
 8012e02:	2301      	movs	r3, #1
 8012e04:	e000      	b.n	8012e08 <xQueueGenericCreateStatic+0x54>
 8012e06:	2300      	movs	r3, #0
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d109      	bne.n	8012e20 <xQueueGenericCreateStatic+0x6c>
 8012e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e10:	f383 8811 	msr	BASEPRI, r3
 8012e14:	f3bf 8f6f 	isb	sy
 8012e18:	f3bf 8f4f 	dsb	sy
 8012e1c:	623b      	str	r3, [r7, #32]
 8012e1e:	e7fe      	b.n	8012e1e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d102      	bne.n	8012e2c <xQueueGenericCreateStatic+0x78>
 8012e26:	68bb      	ldr	r3, [r7, #8]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d101      	bne.n	8012e30 <xQueueGenericCreateStatic+0x7c>
 8012e2c:	2301      	movs	r3, #1
 8012e2e:	e000      	b.n	8012e32 <xQueueGenericCreateStatic+0x7e>
 8012e30:	2300      	movs	r3, #0
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d109      	bne.n	8012e4a <xQueueGenericCreateStatic+0x96>
 8012e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e3a:	f383 8811 	msr	BASEPRI, r3
 8012e3e:	f3bf 8f6f 	isb	sy
 8012e42:	f3bf 8f4f 	dsb	sy
 8012e46:	61fb      	str	r3, [r7, #28]
 8012e48:	e7fe      	b.n	8012e48 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012e4a:	2348      	movs	r3, #72	; 0x48
 8012e4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012e4e:	697b      	ldr	r3, [r7, #20]
 8012e50:	2b48      	cmp	r3, #72	; 0x48
 8012e52:	d009      	beq.n	8012e68 <xQueueGenericCreateStatic+0xb4>
 8012e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e58:	f383 8811 	msr	BASEPRI, r3
 8012e5c:	f3bf 8f6f 	isb	sy
 8012e60:	f3bf 8f4f 	dsb	sy
 8012e64:	61bb      	str	r3, [r7, #24]
 8012e66:	e7fe      	b.n	8012e66 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012e68:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d00d      	beq.n	8012e90 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e76:	2201      	movs	r2, #1
 8012e78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012e7c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e82:	9300      	str	r3, [sp, #0]
 8012e84:	4613      	mov	r3, r2
 8012e86:	687a      	ldr	r2, [r7, #4]
 8012e88:	68b9      	ldr	r1, [r7, #8]
 8012e8a:	68f8      	ldr	r0, [r7, #12]
 8012e8c:	f000 f844 	bl	8012f18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012e92:	4618      	mov	r0, r3
 8012e94:	3730      	adds	r7, #48	; 0x30
 8012e96:	46bd      	mov	sp, r7
 8012e98:	bd80      	pop	{r7, pc}

08012e9a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012e9a:	b580      	push	{r7, lr}
 8012e9c:	b08a      	sub	sp, #40	; 0x28
 8012e9e:	af02      	add	r7, sp, #8
 8012ea0:	60f8      	str	r0, [r7, #12]
 8012ea2:	60b9      	str	r1, [r7, #8]
 8012ea4:	4613      	mov	r3, r2
 8012ea6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d109      	bne.n	8012ec2 <xQueueGenericCreate+0x28>
 8012eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eb2:	f383 8811 	msr	BASEPRI, r3
 8012eb6:	f3bf 8f6f 	isb	sy
 8012eba:	f3bf 8f4f 	dsb	sy
 8012ebe:	613b      	str	r3, [r7, #16]
 8012ec0:	e7fe      	b.n	8012ec0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012ec2:	68bb      	ldr	r3, [r7, #8]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d102      	bne.n	8012ece <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012ec8:	2300      	movs	r3, #0
 8012eca:	61fb      	str	r3, [r7, #28]
 8012ecc:	e004      	b.n	8012ed8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	68ba      	ldr	r2, [r7, #8]
 8012ed2:	fb02 f303 	mul.w	r3, r2, r3
 8012ed6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012ed8:	69fb      	ldr	r3, [r7, #28]
 8012eda:	3348      	adds	r3, #72	; 0x48
 8012edc:	4618      	mov	r0, r3
 8012ede:	f001 ff5f 	bl	8014da0 <pvPortMalloc>
 8012ee2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012ee4:	69bb      	ldr	r3, [r7, #24]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d011      	beq.n	8012f0e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012eea:	69bb      	ldr	r3, [r7, #24]
 8012eec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012eee:	697b      	ldr	r3, [r7, #20]
 8012ef0:	3348      	adds	r3, #72	; 0x48
 8012ef2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012ef4:	69bb      	ldr	r3, [r7, #24]
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012efc:	79fa      	ldrb	r2, [r7, #7]
 8012efe:	69bb      	ldr	r3, [r7, #24]
 8012f00:	9300      	str	r3, [sp, #0]
 8012f02:	4613      	mov	r3, r2
 8012f04:	697a      	ldr	r2, [r7, #20]
 8012f06:	68b9      	ldr	r1, [r7, #8]
 8012f08:	68f8      	ldr	r0, [r7, #12]
 8012f0a:	f000 f805 	bl	8012f18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012f0e:	69bb      	ldr	r3, [r7, #24]
	}
 8012f10:	4618      	mov	r0, r3
 8012f12:	3720      	adds	r7, #32
 8012f14:	46bd      	mov	sp, r7
 8012f16:	bd80      	pop	{r7, pc}

08012f18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b084      	sub	sp, #16
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	60f8      	str	r0, [r7, #12]
 8012f20:	60b9      	str	r1, [r7, #8]
 8012f22:	607a      	str	r2, [r7, #4]
 8012f24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012f26:	68bb      	ldr	r3, [r7, #8]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d103      	bne.n	8012f34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012f2c:	69bb      	ldr	r3, [r7, #24]
 8012f2e:	69ba      	ldr	r2, [r7, #24]
 8012f30:	601a      	str	r2, [r3, #0]
 8012f32:	e002      	b.n	8012f3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012f34:	69bb      	ldr	r3, [r7, #24]
 8012f36:	687a      	ldr	r2, [r7, #4]
 8012f38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012f3a:	69bb      	ldr	r3, [r7, #24]
 8012f3c:	68fa      	ldr	r2, [r7, #12]
 8012f3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012f40:	69bb      	ldr	r3, [r7, #24]
 8012f42:	68ba      	ldr	r2, [r7, #8]
 8012f44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012f46:	2101      	movs	r1, #1
 8012f48:	69b8      	ldr	r0, [r7, #24]
 8012f4a:	f7ff fecb 	bl	8012ce4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012f4e:	bf00      	nop
 8012f50:	3710      	adds	r7, #16
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bd80      	pop	{r7, pc}

08012f56 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8012f56:	b580      	push	{r7, lr}
 8012f58:	b082      	sub	sp, #8
 8012f5a:	af00      	add	r7, sp, #0
 8012f5c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d00e      	beq.n	8012f82 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	2200      	movs	r2, #0
 8012f68:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	2200      	movs	r2, #0
 8012f74:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012f76:	2300      	movs	r3, #0
 8012f78:	2200      	movs	r2, #0
 8012f7a:	2100      	movs	r1, #0
 8012f7c:	6878      	ldr	r0, [r7, #4]
 8012f7e:	f000 f837 	bl	8012ff0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012f82:	bf00      	nop
 8012f84:	3708      	adds	r7, #8
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bd80      	pop	{r7, pc}

08012f8a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8012f8a:	b580      	push	{r7, lr}
 8012f8c:	b086      	sub	sp, #24
 8012f8e:	af00      	add	r7, sp, #0
 8012f90:	4603      	mov	r3, r0
 8012f92:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012f94:	2301      	movs	r3, #1
 8012f96:	617b      	str	r3, [r7, #20]
 8012f98:	2300      	movs	r3, #0
 8012f9a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012f9c:	79fb      	ldrb	r3, [r7, #7]
 8012f9e:	461a      	mov	r2, r3
 8012fa0:	6939      	ldr	r1, [r7, #16]
 8012fa2:	6978      	ldr	r0, [r7, #20]
 8012fa4:	f7ff ff79 	bl	8012e9a <xQueueGenericCreate>
 8012fa8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012faa:	68f8      	ldr	r0, [r7, #12]
 8012fac:	f7ff ffd3 	bl	8012f56 <prvInitialiseMutex>

		return xNewQueue;
 8012fb0:	68fb      	ldr	r3, [r7, #12]
	}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3718      	adds	r7, #24
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	bd80      	pop	{r7, pc}

08012fba <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8012fba:	b580      	push	{r7, lr}
 8012fbc:	b088      	sub	sp, #32
 8012fbe:	af02      	add	r7, sp, #8
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	6039      	str	r1, [r7, #0]
 8012fc4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012fc6:	2301      	movs	r3, #1
 8012fc8:	617b      	str	r3, [r7, #20]
 8012fca:	2300      	movs	r3, #0
 8012fcc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8012fce:	79fb      	ldrb	r3, [r7, #7]
 8012fd0:	9300      	str	r3, [sp, #0]
 8012fd2:	683b      	ldr	r3, [r7, #0]
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	6939      	ldr	r1, [r7, #16]
 8012fd8:	6978      	ldr	r0, [r7, #20]
 8012fda:	f7ff feeb 	bl	8012db4 <xQueueGenericCreateStatic>
 8012fde:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012fe0:	68f8      	ldr	r0, [r7, #12]
 8012fe2:	f7ff ffb8 	bl	8012f56 <prvInitialiseMutex>

		return xNewQueue;
 8012fe6:	68fb      	ldr	r3, [r7, #12]
	}
 8012fe8:	4618      	mov	r0, r3
 8012fea:	3718      	adds	r7, #24
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd80      	pop	{r7, pc}

08012ff0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b08e      	sub	sp, #56	; 0x38
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	60f8      	str	r0, [r7, #12]
 8012ff8:	60b9      	str	r1, [r7, #8]
 8012ffa:	607a      	str	r2, [r7, #4]
 8012ffc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012ffe:	2300      	movs	r3, #0
 8013000:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013008:	2b00      	cmp	r3, #0
 801300a:	d109      	bne.n	8013020 <xQueueGenericSend+0x30>
 801300c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013010:	f383 8811 	msr	BASEPRI, r3
 8013014:	f3bf 8f6f 	isb	sy
 8013018:	f3bf 8f4f 	dsb	sy
 801301c:	62bb      	str	r3, [r7, #40]	; 0x28
 801301e:	e7fe      	b.n	801301e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013020:	68bb      	ldr	r3, [r7, #8]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d103      	bne.n	801302e <xQueueGenericSend+0x3e>
 8013026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801302a:	2b00      	cmp	r3, #0
 801302c:	d101      	bne.n	8013032 <xQueueGenericSend+0x42>
 801302e:	2301      	movs	r3, #1
 8013030:	e000      	b.n	8013034 <xQueueGenericSend+0x44>
 8013032:	2300      	movs	r3, #0
 8013034:	2b00      	cmp	r3, #0
 8013036:	d109      	bne.n	801304c <xQueueGenericSend+0x5c>
 8013038:	f04f 0350 	mov.w	r3, #80	; 0x50
 801303c:	f383 8811 	msr	BASEPRI, r3
 8013040:	f3bf 8f6f 	isb	sy
 8013044:	f3bf 8f4f 	dsb	sy
 8013048:	627b      	str	r3, [r7, #36]	; 0x24
 801304a:	e7fe      	b.n	801304a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801304c:	683b      	ldr	r3, [r7, #0]
 801304e:	2b02      	cmp	r3, #2
 8013050:	d103      	bne.n	801305a <xQueueGenericSend+0x6a>
 8013052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013056:	2b01      	cmp	r3, #1
 8013058:	d101      	bne.n	801305e <xQueueGenericSend+0x6e>
 801305a:	2301      	movs	r3, #1
 801305c:	e000      	b.n	8013060 <xQueueGenericSend+0x70>
 801305e:	2300      	movs	r3, #0
 8013060:	2b00      	cmp	r3, #0
 8013062:	d109      	bne.n	8013078 <xQueueGenericSend+0x88>
 8013064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013068:	f383 8811 	msr	BASEPRI, r3
 801306c:	f3bf 8f6f 	isb	sy
 8013070:	f3bf 8f4f 	dsb	sy
 8013074:	623b      	str	r3, [r7, #32]
 8013076:	e7fe      	b.n	8013076 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013078:	f001 f968 	bl	801434c <xTaskGetSchedulerState>
 801307c:	4603      	mov	r3, r0
 801307e:	2b00      	cmp	r3, #0
 8013080:	d102      	bne.n	8013088 <xQueueGenericSend+0x98>
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d101      	bne.n	801308c <xQueueGenericSend+0x9c>
 8013088:	2301      	movs	r3, #1
 801308a:	e000      	b.n	801308e <xQueueGenericSend+0x9e>
 801308c:	2300      	movs	r3, #0
 801308e:	2b00      	cmp	r3, #0
 8013090:	d109      	bne.n	80130a6 <xQueueGenericSend+0xb6>
 8013092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013096:	f383 8811 	msr	BASEPRI, r3
 801309a:	f3bf 8f6f 	isb	sy
 801309e:	f3bf 8f4f 	dsb	sy
 80130a2:	61fb      	str	r3, [r7, #28]
 80130a4:	e7fe      	b.n	80130a4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80130a6:	f001 fd61 	bl	8014b6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80130aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80130ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130b2:	429a      	cmp	r2, r3
 80130b4:	d302      	bcc.n	80130bc <xQueueGenericSend+0xcc>
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	2b02      	cmp	r3, #2
 80130ba:	d129      	bne.n	8013110 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80130bc:	683a      	ldr	r2, [r7, #0]
 80130be:	68b9      	ldr	r1, [r7, #8]
 80130c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130c2:	f000 fa7c 	bl	80135be <prvCopyDataToQueue>
 80130c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80130c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d010      	beq.n	80130f2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80130d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130d2:	3324      	adds	r3, #36	; 0x24
 80130d4:	4618      	mov	r0, r3
 80130d6:	f000 ff83 	bl	8013fe0 <xTaskRemoveFromEventList>
 80130da:	4603      	mov	r3, r0
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d013      	beq.n	8013108 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80130e0:	4b3f      	ldr	r3, [pc, #252]	; (80131e0 <xQueueGenericSend+0x1f0>)
 80130e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130e6:	601a      	str	r2, [r3, #0]
 80130e8:	f3bf 8f4f 	dsb	sy
 80130ec:	f3bf 8f6f 	isb	sy
 80130f0:	e00a      	b.n	8013108 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80130f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d007      	beq.n	8013108 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80130f8:	4b39      	ldr	r3, [pc, #228]	; (80131e0 <xQueueGenericSend+0x1f0>)
 80130fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130fe:	601a      	str	r2, [r3, #0]
 8013100:	f3bf 8f4f 	dsb	sy
 8013104:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013108:	f001 fd5e 	bl	8014bc8 <vPortExitCritical>
				return pdPASS;
 801310c:	2301      	movs	r3, #1
 801310e:	e063      	b.n	80131d8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d103      	bne.n	801311e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013116:	f001 fd57 	bl	8014bc8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801311a:	2300      	movs	r3, #0
 801311c:	e05c      	b.n	80131d8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801311e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013120:	2b00      	cmp	r3, #0
 8013122:	d106      	bne.n	8013132 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013124:	f107 0314 	add.w	r3, r7, #20
 8013128:	4618      	mov	r0, r3
 801312a:	f000 ffbb 	bl	80140a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801312e:	2301      	movs	r3, #1
 8013130:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013132:	f001 fd49 	bl	8014bc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013136:	f000 fd73 	bl	8013c20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801313a:	f001 fd17 	bl	8014b6c <vPortEnterCritical>
 801313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013140:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013144:	b25b      	sxtb	r3, r3
 8013146:	f1b3 3fff 	cmp.w	r3, #4294967295
 801314a:	d103      	bne.n	8013154 <xQueueGenericSend+0x164>
 801314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801314e:	2200      	movs	r2, #0
 8013150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801315a:	b25b      	sxtb	r3, r3
 801315c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013160:	d103      	bne.n	801316a <xQueueGenericSend+0x17a>
 8013162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013164:	2200      	movs	r2, #0
 8013166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801316a:	f001 fd2d 	bl	8014bc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801316e:	1d3a      	adds	r2, r7, #4
 8013170:	f107 0314 	add.w	r3, r7, #20
 8013174:	4611      	mov	r1, r2
 8013176:	4618      	mov	r0, r3
 8013178:	f000 ffaa 	bl	80140d0 <xTaskCheckForTimeOut>
 801317c:	4603      	mov	r3, r0
 801317e:	2b00      	cmp	r3, #0
 8013180:	d124      	bne.n	80131cc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013182:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013184:	f000 fb13 	bl	80137ae <prvIsQueueFull>
 8013188:	4603      	mov	r3, r0
 801318a:	2b00      	cmp	r3, #0
 801318c:	d018      	beq.n	80131c0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801318e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013190:	3310      	adds	r3, #16
 8013192:	687a      	ldr	r2, [r7, #4]
 8013194:	4611      	mov	r1, r2
 8013196:	4618      	mov	r0, r3
 8013198:	f000 fefe 	bl	8013f98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801319c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801319e:	f000 fa9e 	bl	80136de <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80131a2:	f000 fd4b 	bl	8013c3c <xTaskResumeAll>
 80131a6:	4603      	mov	r3, r0
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	f47f af7c 	bne.w	80130a6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80131ae:	4b0c      	ldr	r3, [pc, #48]	; (80131e0 <xQueueGenericSend+0x1f0>)
 80131b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131b4:	601a      	str	r2, [r3, #0]
 80131b6:	f3bf 8f4f 	dsb	sy
 80131ba:	f3bf 8f6f 	isb	sy
 80131be:	e772      	b.n	80130a6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80131c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131c2:	f000 fa8c 	bl	80136de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80131c6:	f000 fd39 	bl	8013c3c <xTaskResumeAll>
 80131ca:	e76c      	b.n	80130a6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80131cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131ce:	f000 fa86 	bl	80136de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80131d2:	f000 fd33 	bl	8013c3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80131d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80131d8:	4618      	mov	r0, r3
 80131da:	3738      	adds	r7, #56	; 0x38
 80131dc:	46bd      	mov	sp, r7
 80131de:	bd80      	pop	{r7, pc}
 80131e0:	e000ed04 	.word	0xe000ed04

080131e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80131e4:	b580      	push	{r7, lr}
 80131e6:	b08e      	sub	sp, #56	; 0x38
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	60f8      	str	r0, [r7, #12]
 80131ec:	60b9      	str	r1, [r7, #8]
 80131ee:	607a      	str	r2, [r7, #4]
 80131f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80131f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d109      	bne.n	8013210 <xQueueGenericSendFromISR+0x2c>
 80131fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013200:	f383 8811 	msr	BASEPRI, r3
 8013204:	f3bf 8f6f 	isb	sy
 8013208:	f3bf 8f4f 	dsb	sy
 801320c:	627b      	str	r3, [r7, #36]	; 0x24
 801320e:	e7fe      	b.n	801320e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013210:	68bb      	ldr	r3, [r7, #8]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d103      	bne.n	801321e <xQueueGenericSendFromISR+0x3a>
 8013216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801321a:	2b00      	cmp	r3, #0
 801321c:	d101      	bne.n	8013222 <xQueueGenericSendFromISR+0x3e>
 801321e:	2301      	movs	r3, #1
 8013220:	e000      	b.n	8013224 <xQueueGenericSendFromISR+0x40>
 8013222:	2300      	movs	r3, #0
 8013224:	2b00      	cmp	r3, #0
 8013226:	d109      	bne.n	801323c <xQueueGenericSendFromISR+0x58>
 8013228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801322c:	f383 8811 	msr	BASEPRI, r3
 8013230:	f3bf 8f6f 	isb	sy
 8013234:	f3bf 8f4f 	dsb	sy
 8013238:	623b      	str	r3, [r7, #32]
 801323a:	e7fe      	b.n	801323a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801323c:	683b      	ldr	r3, [r7, #0]
 801323e:	2b02      	cmp	r3, #2
 8013240:	d103      	bne.n	801324a <xQueueGenericSendFromISR+0x66>
 8013242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013246:	2b01      	cmp	r3, #1
 8013248:	d101      	bne.n	801324e <xQueueGenericSendFromISR+0x6a>
 801324a:	2301      	movs	r3, #1
 801324c:	e000      	b.n	8013250 <xQueueGenericSendFromISR+0x6c>
 801324e:	2300      	movs	r3, #0
 8013250:	2b00      	cmp	r3, #0
 8013252:	d109      	bne.n	8013268 <xQueueGenericSendFromISR+0x84>
 8013254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013258:	f383 8811 	msr	BASEPRI, r3
 801325c:	f3bf 8f6f 	isb	sy
 8013260:	f3bf 8f4f 	dsb	sy
 8013264:	61fb      	str	r3, [r7, #28]
 8013266:	e7fe      	b.n	8013266 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013268:	f001 fd5c 	bl	8014d24 <vPortValidateInterruptPriority>
	__asm volatile
 801326c:	f3ef 8211 	mrs	r2, BASEPRI
 8013270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013274:	f383 8811 	msr	BASEPRI, r3
 8013278:	f3bf 8f6f 	isb	sy
 801327c:	f3bf 8f4f 	dsb	sy
 8013280:	61ba      	str	r2, [r7, #24]
 8013282:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013284:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013286:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801328a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801328e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013290:	429a      	cmp	r2, r3
 8013292:	d302      	bcc.n	801329a <xQueueGenericSendFromISR+0xb6>
 8013294:	683b      	ldr	r3, [r7, #0]
 8013296:	2b02      	cmp	r3, #2
 8013298:	d12c      	bne.n	80132f4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801329c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80132a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80132a4:	683a      	ldr	r2, [r7, #0]
 80132a6:	68b9      	ldr	r1, [r7, #8]
 80132a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80132aa:	f000 f988 	bl	80135be <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80132ae:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80132b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132b6:	d112      	bne.n	80132de <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80132b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d016      	beq.n	80132ee <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80132c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132c2:	3324      	adds	r3, #36	; 0x24
 80132c4:	4618      	mov	r0, r3
 80132c6:	f000 fe8b 	bl	8013fe0 <xTaskRemoveFromEventList>
 80132ca:	4603      	mov	r3, r0
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d00e      	beq.n	80132ee <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d00b      	beq.n	80132ee <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	2201      	movs	r2, #1
 80132da:	601a      	str	r2, [r3, #0]
 80132dc:	e007      	b.n	80132ee <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80132de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80132e2:	3301      	adds	r3, #1
 80132e4:	b2db      	uxtb	r3, r3
 80132e6:	b25a      	sxtb	r2, r3
 80132e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80132ee:	2301      	movs	r3, #1
 80132f0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80132f2:	e001      	b.n	80132f8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80132f4:	2300      	movs	r3, #0
 80132f6:	637b      	str	r3, [r7, #52]	; 0x34
 80132f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132fa:	613b      	str	r3, [r7, #16]
	__asm volatile
 80132fc:	693b      	ldr	r3, [r7, #16]
 80132fe:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013304:	4618      	mov	r0, r3
 8013306:	3738      	adds	r7, #56	; 0x38
 8013308:	46bd      	mov	sp, r7
 801330a:	bd80      	pop	{r7, pc}

0801330c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b08c      	sub	sp, #48	; 0x30
 8013310:	af00      	add	r7, sp, #0
 8013312:	60f8      	str	r0, [r7, #12]
 8013314:	60b9      	str	r1, [r7, #8]
 8013316:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013318:	2300      	movs	r3, #0
 801331a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013322:	2b00      	cmp	r3, #0
 8013324:	d109      	bne.n	801333a <xQueueReceive+0x2e>
	__asm volatile
 8013326:	f04f 0350 	mov.w	r3, #80	; 0x50
 801332a:	f383 8811 	msr	BASEPRI, r3
 801332e:	f3bf 8f6f 	isb	sy
 8013332:	f3bf 8f4f 	dsb	sy
 8013336:	623b      	str	r3, [r7, #32]
 8013338:	e7fe      	b.n	8013338 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801333a:	68bb      	ldr	r3, [r7, #8]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d103      	bne.n	8013348 <xQueueReceive+0x3c>
 8013340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013344:	2b00      	cmp	r3, #0
 8013346:	d101      	bne.n	801334c <xQueueReceive+0x40>
 8013348:	2301      	movs	r3, #1
 801334a:	e000      	b.n	801334e <xQueueReceive+0x42>
 801334c:	2300      	movs	r3, #0
 801334e:	2b00      	cmp	r3, #0
 8013350:	d109      	bne.n	8013366 <xQueueReceive+0x5a>
 8013352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013356:	f383 8811 	msr	BASEPRI, r3
 801335a:	f3bf 8f6f 	isb	sy
 801335e:	f3bf 8f4f 	dsb	sy
 8013362:	61fb      	str	r3, [r7, #28]
 8013364:	e7fe      	b.n	8013364 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013366:	f000 fff1 	bl	801434c <xTaskGetSchedulerState>
 801336a:	4603      	mov	r3, r0
 801336c:	2b00      	cmp	r3, #0
 801336e:	d102      	bne.n	8013376 <xQueueReceive+0x6a>
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d101      	bne.n	801337a <xQueueReceive+0x6e>
 8013376:	2301      	movs	r3, #1
 8013378:	e000      	b.n	801337c <xQueueReceive+0x70>
 801337a:	2300      	movs	r3, #0
 801337c:	2b00      	cmp	r3, #0
 801337e:	d109      	bne.n	8013394 <xQueueReceive+0x88>
 8013380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013384:	f383 8811 	msr	BASEPRI, r3
 8013388:	f3bf 8f6f 	isb	sy
 801338c:	f3bf 8f4f 	dsb	sy
 8013390:	61bb      	str	r3, [r7, #24]
 8013392:	e7fe      	b.n	8013392 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013394:	f001 fbea 	bl	8014b6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801339c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d01f      	beq.n	80133e4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80133a4:	68b9      	ldr	r1, [r7, #8]
 80133a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133a8:	f000 f973 	bl	8013692 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80133ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ae:	1e5a      	subs	r2, r3, #1
 80133b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80133b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b6:	691b      	ldr	r3, [r3, #16]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d00f      	beq.n	80133dc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80133bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133be:	3310      	adds	r3, #16
 80133c0:	4618      	mov	r0, r3
 80133c2:	f000 fe0d 	bl	8013fe0 <xTaskRemoveFromEventList>
 80133c6:	4603      	mov	r3, r0
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d007      	beq.n	80133dc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80133cc:	4b3c      	ldr	r3, [pc, #240]	; (80134c0 <xQueueReceive+0x1b4>)
 80133ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133d2:	601a      	str	r2, [r3, #0]
 80133d4:	f3bf 8f4f 	dsb	sy
 80133d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80133dc:	f001 fbf4 	bl	8014bc8 <vPortExitCritical>
				return pdPASS;
 80133e0:	2301      	movs	r3, #1
 80133e2:	e069      	b.n	80134b8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d103      	bne.n	80133f2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80133ea:	f001 fbed 	bl	8014bc8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80133ee:	2300      	movs	r3, #0
 80133f0:	e062      	b.n	80134b8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80133f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d106      	bne.n	8013406 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80133f8:	f107 0310 	add.w	r3, r7, #16
 80133fc:	4618      	mov	r0, r3
 80133fe:	f000 fe51 	bl	80140a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013402:	2301      	movs	r3, #1
 8013404:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013406:	f001 fbdf 	bl	8014bc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801340a:	f000 fc09 	bl	8013c20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801340e:	f001 fbad 	bl	8014b6c <vPortEnterCritical>
 8013412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013414:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013418:	b25b      	sxtb	r3, r3
 801341a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801341e:	d103      	bne.n	8013428 <xQueueReceive+0x11c>
 8013420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013422:	2200      	movs	r2, #0
 8013424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801342a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801342e:	b25b      	sxtb	r3, r3
 8013430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013434:	d103      	bne.n	801343e <xQueueReceive+0x132>
 8013436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013438:	2200      	movs	r2, #0
 801343a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801343e:	f001 fbc3 	bl	8014bc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013442:	1d3a      	adds	r2, r7, #4
 8013444:	f107 0310 	add.w	r3, r7, #16
 8013448:	4611      	mov	r1, r2
 801344a:	4618      	mov	r0, r3
 801344c:	f000 fe40 	bl	80140d0 <xTaskCheckForTimeOut>
 8013450:	4603      	mov	r3, r0
 8013452:	2b00      	cmp	r3, #0
 8013454:	d123      	bne.n	801349e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013456:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013458:	f000 f993 	bl	8013782 <prvIsQueueEmpty>
 801345c:	4603      	mov	r3, r0
 801345e:	2b00      	cmp	r3, #0
 8013460:	d017      	beq.n	8013492 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013464:	3324      	adds	r3, #36	; 0x24
 8013466:	687a      	ldr	r2, [r7, #4]
 8013468:	4611      	mov	r1, r2
 801346a:	4618      	mov	r0, r3
 801346c:	f000 fd94 	bl	8013f98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013472:	f000 f934 	bl	80136de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013476:	f000 fbe1 	bl	8013c3c <xTaskResumeAll>
 801347a:	4603      	mov	r3, r0
 801347c:	2b00      	cmp	r3, #0
 801347e:	d189      	bne.n	8013394 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8013480:	4b0f      	ldr	r3, [pc, #60]	; (80134c0 <xQueueReceive+0x1b4>)
 8013482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013486:	601a      	str	r2, [r3, #0]
 8013488:	f3bf 8f4f 	dsb	sy
 801348c:	f3bf 8f6f 	isb	sy
 8013490:	e780      	b.n	8013394 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013494:	f000 f923 	bl	80136de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013498:	f000 fbd0 	bl	8013c3c <xTaskResumeAll>
 801349c:	e77a      	b.n	8013394 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801349e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134a0:	f000 f91d 	bl	80136de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80134a4:	f000 fbca 	bl	8013c3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80134a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134aa:	f000 f96a 	bl	8013782 <prvIsQueueEmpty>
 80134ae:	4603      	mov	r3, r0
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	f43f af6f 	beq.w	8013394 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80134b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80134b8:	4618      	mov	r0, r3
 80134ba:	3730      	adds	r7, #48	; 0x30
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}
 80134c0:	e000ed04 	.word	0xe000ed04

080134c4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b08e      	sub	sp, #56	; 0x38
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	60f8      	str	r0, [r7, #12]
 80134cc:	60b9      	str	r1, [r7, #8]
 80134ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80134d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d109      	bne.n	80134ee <xQueueReceiveFromISR+0x2a>
 80134da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134de:	f383 8811 	msr	BASEPRI, r3
 80134e2:	f3bf 8f6f 	isb	sy
 80134e6:	f3bf 8f4f 	dsb	sy
 80134ea:	623b      	str	r3, [r7, #32]
 80134ec:	e7fe      	b.n	80134ec <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80134ee:	68bb      	ldr	r3, [r7, #8]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d103      	bne.n	80134fc <xQueueReceiveFromISR+0x38>
 80134f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d101      	bne.n	8013500 <xQueueReceiveFromISR+0x3c>
 80134fc:	2301      	movs	r3, #1
 80134fe:	e000      	b.n	8013502 <xQueueReceiveFromISR+0x3e>
 8013500:	2300      	movs	r3, #0
 8013502:	2b00      	cmp	r3, #0
 8013504:	d109      	bne.n	801351a <xQueueReceiveFromISR+0x56>
 8013506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801350a:	f383 8811 	msr	BASEPRI, r3
 801350e:	f3bf 8f6f 	isb	sy
 8013512:	f3bf 8f4f 	dsb	sy
 8013516:	61fb      	str	r3, [r7, #28]
 8013518:	e7fe      	b.n	8013518 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801351a:	f001 fc03 	bl	8014d24 <vPortValidateInterruptPriority>
	__asm volatile
 801351e:	f3ef 8211 	mrs	r2, BASEPRI
 8013522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013526:	f383 8811 	msr	BASEPRI, r3
 801352a:	f3bf 8f6f 	isb	sy
 801352e:	f3bf 8f4f 	dsb	sy
 8013532:	61ba      	str	r2, [r7, #24]
 8013534:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013536:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013538:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801353c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801353e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013542:	2b00      	cmp	r3, #0
 8013544:	d02f      	beq.n	80135a6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801354c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013550:	68b9      	ldr	r1, [r7, #8]
 8013552:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013554:	f000 f89d 	bl	8013692 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801355a:	1e5a      	subs	r2, r3, #1
 801355c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801355e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013560:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013568:	d112      	bne.n	8013590 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801356a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801356c:	691b      	ldr	r3, [r3, #16]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d016      	beq.n	80135a0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013574:	3310      	adds	r3, #16
 8013576:	4618      	mov	r0, r3
 8013578:	f000 fd32 	bl	8013fe0 <xTaskRemoveFromEventList>
 801357c:	4603      	mov	r3, r0
 801357e:	2b00      	cmp	r3, #0
 8013580:	d00e      	beq.n	80135a0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d00b      	beq.n	80135a0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	2201      	movs	r2, #1
 801358c:	601a      	str	r2, [r3, #0]
 801358e:	e007      	b.n	80135a0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013594:	3301      	adds	r3, #1
 8013596:	b2db      	uxtb	r3, r3
 8013598:	b25a      	sxtb	r2, r3
 801359a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801359c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80135a0:	2301      	movs	r3, #1
 80135a2:	637b      	str	r3, [r7, #52]	; 0x34
 80135a4:	e001      	b.n	80135aa <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80135a6:	2300      	movs	r3, #0
 80135a8:	637b      	str	r3, [r7, #52]	; 0x34
 80135aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 80135ae:	693b      	ldr	r3, [r7, #16]
 80135b0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80135b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80135b6:	4618      	mov	r0, r3
 80135b8:	3738      	adds	r7, #56	; 0x38
 80135ba:	46bd      	mov	sp, r7
 80135bc:	bd80      	pop	{r7, pc}

080135be <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80135be:	b580      	push	{r7, lr}
 80135c0:	b086      	sub	sp, #24
 80135c2:	af00      	add	r7, sp, #0
 80135c4:	60f8      	str	r0, [r7, #12]
 80135c6:	60b9      	str	r1, [r7, #8]
 80135c8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80135ca:	2300      	movs	r3, #0
 80135cc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135d2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d10d      	bne.n	80135f8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d14d      	bne.n	8013680 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	689b      	ldr	r3, [r3, #8]
 80135e8:	4618      	mov	r0, r3
 80135ea:	f000 fecd 	bl	8014388 <xTaskPriorityDisinherit>
 80135ee:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	2200      	movs	r2, #0
 80135f4:	609a      	str	r2, [r3, #8]
 80135f6:	e043      	b.n	8013680 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d119      	bne.n	8013632 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	6858      	ldr	r0, [r3, #4]
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013606:	461a      	mov	r2, r3
 8013608:	68b9      	ldr	r1, [r7, #8]
 801360a:	f002 fb27 	bl	8015c5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	685a      	ldr	r2, [r3, #4]
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013616:	441a      	add	r2, r3
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	685a      	ldr	r2, [r3, #4]
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	689b      	ldr	r3, [r3, #8]
 8013624:	429a      	cmp	r2, r3
 8013626:	d32b      	bcc.n	8013680 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	681a      	ldr	r2, [r3, #0]
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	605a      	str	r2, [r3, #4]
 8013630:	e026      	b.n	8013680 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	68d8      	ldr	r0, [r3, #12]
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801363a:	461a      	mov	r2, r3
 801363c:	68b9      	ldr	r1, [r7, #8]
 801363e:	f002 fb0d 	bl	8015c5c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	68da      	ldr	r2, [r3, #12]
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801364a:	425b      	negs	r3, r3
 801364c:	441a      	add	r2, r3
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	68da      	ldr	r2, [r3, #12]
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	429a      	cmp	r2, r3
 801365c:	d207      	bcs.n	801366e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	689a      	ldr	r2, [r3, #8]
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013666:	425b      	negs	r3, r3
 8013668:	441a      	add	r2, r3
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	2b02      	cmp	r3, #2
 8013672:	d105      	bne.n	8013680 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013674:	693b      	ldr	r3, [r7, #16]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d002      	beq.n	8013680 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801367a:	693b      	ldr	r3, [r7, #16]
 801367c:	3b01      	subs	r3, #1
 801367e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013680:	693b      	ldr	r3, [r7, #16]
 8013682:	1c5a      	adds	r2, r3, #1
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013688:	697b      	ldr	r3, [r7, #20]
}
 801368a:	4618      	mov	r0, r3
 801368c:	3718      	adds	r7, #24
 801368e:	46bd      	mov	sp, r7
 8013690:	bd80      	pop	{r7, pc}

08013692 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013692:	b580      	push	{r7, lr}
 8013694:	b082      	sub	sp, #8
 8013696:	af00      	add	r7, sp, #0
 8013698:	6078      	str	r0, [r7, #4]
 801369a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d018      	beq.n	80136d6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	68da      	ldr	r2, [r3, #12]
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136ac:	441a      	add	r2, r3
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	68da      	ldr	r2, [r3, #12]
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	689b      	ldr	r3, [r3, #8]
 80136ba:	429a      	cmp	r2, r3
 80136bc:	d303      	bcc.n	80136c6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	681a      	ldr	r2, [r3, #0]
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	68d9      	ldr	r1, [r3, #12]
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136ce:	461a      	mov	r2, r3
 80136d0:	6838      	ldr	r0, [r7, #0]
 80136d2:	f002 fac3 	bl	8015c5c <memcpy>
	}
}
 80136d6:	bf00      	nop
 80136d8:	3708      	adds	r7, #8
 80136da:	46bd      	mov	sp, r7
 80136dc:	bd80      	pop	{r7, pc}

080136de <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80136de:	b580      	push	{r7, lr}
 80136e0:	b084      	sub	sp, #16
 80136e2:	af00      	add	r7, sp, #0
 80136e4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80136e6:	f001 fa41 	bl	8014b6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80136f0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80136f2:	e011      	b.n	8013718 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d012      	beq.n	8013722 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	3324      	adds	r3, #36	; 0x24
 8013700:	4618      	mov	r0, r3
 8013702:	f000 fc6d 	bl	8013fe0 <xTaskRemoveFromEventList>
 8013706:	4603      	mov	r3, r0
 8013708:	2b00      	cmp	r3, #0
 801370a:	d001      	beq.n	8013710 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801370c:	f000 fd40 	bl	8014190 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013710:	7bfb      	ldrb	r3, [r7, #15]
 8013712:	3b01      	subs	r3, #1
 8013714:	b2db      	uxtb	r3, r3
 8013716:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801371c:	2b00      	cmp	r3, #0
 801371e:	dce9      	bgt.n	80136f4 <prvUnlockQueue+0x16>
 8013720:	e000      	b.n	8013724 <prvUnlockQueue+0x46>
					break;
 8013722:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	22ff      	movs	r2, #255	; 0xff
 8013728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801372c:	f001 fa4c 	bl	8014bc8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013730:	f001 fa1c 	bl	8014b6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801373a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801373c:	e011      	b.n	8013762 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	691b      	ldr	r3, [r3, #16]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d012      	beq.n	801376c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	3310      	adds	r3, #16
 801374a:	4618      	mov	r0, r3
 801374c:	f000 fc48 	bl	8013fe0 <xTaskRemoveFromEventList>
 8013750:	4603      	mov	r3, r0
 8013752:	2b00      	cmp	r3, #0
 8013754:	d001      	beq.n	801375a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013756:	f000 fd1b 	bl	8014190 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801375a:	7bbb      	ldrb	r3, [r7, #14]
 801375c:	3b01      	subs	r3, #1
 801375e:	b2db      	uxtb	r3, r3
 8013760:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013762:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013766:	2b00      	cmp	r3, #0
 8013768:	dce9      	bgt.n	801373e <prvUnlockQueue+0x60>
 801376a:	e000      	b.n	801376e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801376c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	22ff      	movs	r2, #255	; 0xff
 8013772:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013776:	f001 fa27 	bl	8014bc8 <vPortExitCritical>
}
 801377a:	bf00      	nop
 801377c:	3710      	adds	r7, #16
 801377e:	46bd      	mov	sp, r7
 8013780:	bd80      	pop	{r7, pc}

08013782 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013782:	b580      	push	{r7, lr}
 8013784:	b084      	sub	sp, #16
 8013786:	af00      	add	r7, sp, #0
 8013788:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801378a:	f001 f9ef 	bl	8014b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013792:	2b00      	cmp	r3, #0
 8013794:	d102      	bne.n	801379c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013796:	2301      	movs	r3, #1
 8013798:	60fb      	str	r3, [r7, #12]
 801379a:	e001      	b.n	80137a0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801379c:	2300      	movs	r3, #0
 801379e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80137a0:	f001 fa12 	bl	8014bc8 <vPortExitCritical>

	return xReturn;
 80137a4:	68fb      	ldr	r3, [r7, #12]
}
 80137a6:	4618      	mov	r0, r3
 80137a8:	3710      	adds	r7, #16
 80137aa:	46bd      	mov	sp, r7
 80137ac:	bd80      	pop	{r7, pc}

080137ae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80137ae:	b580      	push	{r7, lr}
 80137b0:	b084      	sub	sp, #16
 80137b2:	af00      	add	r7, sp, #0
 80137b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80137b6:	f001 f9d9 	bl	8014b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80137c2:	429a      	cmp	r2, r3
 80137c4:	d102      	bne.n	80137cc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80137c6:	2301      	movs	r3, #1
 80137c8:	60fb      	str	r3, [r7, #12]
 80137ca:	e001      	b.n	80137d0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80137cc:	2300      	movs	r3, #0
 80137ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80137d0:	f001 f9fa 	bl	8014bc8 <vPortExitCritical>

	return xReturn;
 80137d4:	68fb      	ldr	r3, [r7, #12]
}
 80137d6:	4618      	mov	r0, r3
 80137d8:	3710      	adds	r7, #16
 80137da:	46bd      	mov	sp, r7
 80137dc:	bd80      	pop	{r7, pc}

080137de <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80137de:	b580      	push	{r7, lr}
 80137e0:	b08e      	sub	sp, #56	; 0x38
 80137e2:	af04      	add	r7, sp, #16
 80137e4:	60f8      	str	r0, [r7, #12]
 80137e6:	60b9      	str	r1, [r7, #8]
 80137e8:	607a      	str	r2, [r7, #4]
 80137ea:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80137ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d109      	bne.n	8013806 <xTaskCreateStatic+0x28>
	__asm volatile
 80137f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137f6:	f383 8811 	msr	BASEPRI, r3
 80137fa:	f3bf 8f6f 	isb	sy
 80137fe:	f3bf 8f4f 	dsb	sy
 8013802:	623b      	str	r3, [r7, #32]
 8013804:	e7fe      	b.n	8013804 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8013806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013808:	2b00      	cmp	r3, #0
 801380a:	d109      	bne.n	8013820 <xTaskCreateStatic+0x42>
 801380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013810:	f383 8811 	msr	BASEPRI, r3
 8013814:	f3bf 8f6f 	isb	sy
 8013818:	f3bf 8f4f 	dsb	sy
 801381c:	61fb      	str	r3, [r7, #28]
 801381e:	e7fe      	b.n	801381e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013820:	2354      	movs	r3, #84	; 0x54
 8013822:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013824:	693b      	ldr	r3, [r7, #16]
 8013826:	2b54      	cmp	r3, #84	; 0x54
 8013828:	d009      	beq.n	801383e <xTaskCreateStatic+0x60>
 801382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801382e:	f383 8811 	msr	BASEPRI, r3
 8013832:	f3bf 8f6f 	isb	sy
 8013836:	f3bf 8f4f 	dsb	sy
 801383a:	61bb      	str	r3, [r7, #24]
 801383c:	e7fe      	b.n	801383c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801383e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013842:	2b00      	cmp	r3, #0
 8013844:	d01e      	beq.n	8013884 <xTaskCreateStatic+0xa6>
 8013846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013848:	2b00      	cmp	r3, #0
 801384a:	d01b      	beq.n	8013884 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801384c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801384e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013852:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013854:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013858:	2202      	movs	r2, #2
 801385a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801385e:	2300      	movs	r3, #0
 8013860:	9303      	str	r3, [sp, #12]
 8013862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013864:	9302      	str	r3, [sp, #8]
 8013866:	f107 0314 	add.w	r3, r7, #20
 801386a:	9301      	str	r3, [sp, #4]
 801386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801386e:	9300      	str	r3, [sp, #0]
 8013870:	683b      	ldr	r3, [r7, #0]
 8013872:	687a      	ldr	r2, [r7, #4]
 8013874:	68b9      	ldr	r1, [r7, #8]
 8013876:	68f8      	ldr	r0, [r7, #12]
 8013878:	f000 f850 	bl	801391c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801387c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801387e:	f000 f8d3 	bl	8013a28 <prvAddNewTaskToReadyList>
 8013882:	e001      	b.n	8013888 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8013884:	2300      	movs	r3, #0
 8013886:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013888:	697b      	ldr	r3, [r7, #20]
	}
 801388a:	4618      	mov	r0, r3
 801388c:	3728      	adds	r7, #40	; 0x28
 801388e:	46bd      	mov	sp, r7
 8013890:	bd80      	pop	{r7, pc}

08013892 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013892:	b580      	push	{r7, lr}
 8013894:	b08c      	sub	sp, #48	; 0x30
 8013896:	af04      	add	r7, sp, #16
 8013898:	60f8      	str	r0, [r7, #12]
 801389a:	60b9      	str	r1, [r7, #8]
 801389c:	603b      	str	r3, [r7, #0]
 801389e:	4613      	mov	r3, r2
 80138a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80138a2:	88fb      	ldrh	r3, [r7, #6]
 80138a4:	009b      	lsls	r3, r3, #2
 80138a6:	4618      	mov	r0, r3
 80138a8:	f001 fa7a 	bl	8014da0 <pvPortMalloc>
 80138ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80138ae:	697b      	ldr	r3, [r7, #20]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d00e      	beq.n	80138d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80138b4:	2054      	movs	r0, #84	; 0x54
 80138b6:	f001 fa73 	bl	8014da0 <pvPortMalloc>
 80138ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80138bc:	69fb      	ldr	r3, [r7, #28]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d003      	beq.n	80138ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80138c2:	69fb      	ldr	r3, [r7, #28]
 80138c4:	697a      	ldr	r2, [r7, #20]
 80138c6:	631a      	str	r2, [r3, #48]	; 0x30
 80138c8:	e005      	b.n	80138d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80138ca:	6978      	ldr	r0, [r7, #20]
 80138cc:	f001 fb2a 	bl	8014f24 <vPortFree>
 80138d0:	e001      	b.n	80138d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80138d2:	2300      	movs	r3, #0
 80138d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80138d6:	69fb      	ldr	r3, [r7, #28]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d017      	beq.n	801390c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80138dc:	69fb      	ldr	r3, [r7, #28]
 80138de:	2200      	movs	r2, #0
 80138e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80138e4:	88fa      	ldrh	r2, [r7, #6]
 80138e6:	2300      	movs	r3, #0
 80138e8:	9303      	str	r3, [sp, #12]
 80138ea:	69fb      	ldr	r3, [r7, #28]
 80138ec:	9302      	str	r3, [sp, #8]
 80138ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138f0:	9301      	str	r3, [sp, #4]
 80138f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138f4:	9300      	str	r3, [sp, #0]
 80138f6:	683b      	ldr	r3, [r7, #0]
 80138f8:	68b9      	ldr	r1, [r7, #8]
 80138fa:	68f8      	ldr	r0, [r7, #12]
 80138fc:	f000 f80e 	bl	801391c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013900:	69f8      	ldr	r0, [r7, #28]
 8013902:	f000 f891 	bl	8013a28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013906:	2301      	movs	r3, #1
 8013908:	61bb      	str	r3, [r7, #24]
 801390a:	e002      	b.n	8013912 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801390c:	f04f 33ff 	mov.w	r3, #4294967295
 8013910:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013912:	69bb      	ldr	r3, [r7, #24]
	}
 8013914:	4618      	mov	r0, r3
 8013916:	3720      	adds	r7, #32
 8013918:	46bd      	mov	sp, r7
 801391a:	bd80      	pop	{r7, pc}

0801391c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801391c:	b580      	push	{r7, lr}
 801391e:	b088      	sub	sp, #32
 8013920:	af00      	add	r7, sp, #0
 8013922:	60f8      	str	r0, [r7, #12]
 8013924:	60b9      	str	r1, [r7, #8]
 8013926:	607a      	str	r2, [r7, #4]
 8013928:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801392c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013934:	3b01      	subs	r3, #1
 8013936:	009b      	lsls	r3, r3, #2
 8013938:	4413      	add	r3, r2
 801393a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801393c:	69bb      	ldr	r3, [r7, #24]
 801393e:	f023 0307 	bic.w	r3, r3, #7
 8013942:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013944:	69bb      	ldr	r3, [r7, #24]
 8013946:	f003 0307 	and.w	r3, r3, #7
 801394a:	2b00      	cmp	r3, #0
 801394c:	d009      	beq.n	8013962 <prvInitialiseNewTask+0x46>
 801394e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013952:	f383 8811 	msr	BASEPRI, r3
 8013956:	f3bf 8f6f 	isb	sy
 801395a:	f3bf 8f4f 	dsb	sy
 801395e:	617b      	str	r3, [r7, #20]
 8013960:	e7fe      	b.n	8013960 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013962:	68bb      	ldr	r3, [r7, #8]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d01f      	beq.n	80139a8 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013968:	2300      	movs	r3, #0
 801396a:	61fb      	str	r3, [r7, #28]
 801396c:	e012      	b.n	8013994 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801396e:	68ba      	ldr	r2, [r7, #8]
 8013970:	69fb      	ldr	r3, [r7, #28]
 8013972:	4413      	add	r3, r2
 8013974:	7819      	ldrb	r1, [r3, #0]
 8013976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013978:	69fb      	ldr	r3, [r7, #28]
 801397a:	4413      	add	r3, r2
 801397c:	3334      	adds	r3, #52	; 0x34
 801397e:	460a      	mov	r2, r1
 8013980:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013982:	68ba      	ldr	r2, [r7, #8]
 8013984:	69fb      	ldr	r3, [r7, #28]
 8013986:	4413      	add	r3, r2
 8013988:	781b      	ldrb	r3, [r3, #0]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d006      	beq.n	801399c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801398e:	69fb      	ldr	r3, [r7, #28]
 8013990:	3301      	adds	r3, #1
 8013992:	61fb      	str	r3, [r7, #28]
 8013994:	69fb      	ldr	r3, [r7, #28]
 8013996:	2b0f      	cmp	r3, #15
 8013998:	d9e9      	bls.n	801396e <prvInitialiseNewTask+0x52>
 801399a:	e000      	b.n	801399e <prvInitialiseNewTask+0x82>
			{
				break;
 801399c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139a0:	2200      	movs	r2, #0
 80139a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80139a6:	e003      	b.n	80139b0 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80139a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139aa:	2200      	movs	r2, #0
 80139ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80139b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139b2:	2b06      	cmp	r3, #6
 80139b4:	d901      	bls.n	80139ba <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80139b6:	2306      	movs	r3, #6
 80139b8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80139ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139be:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80139c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139c4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80139c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139c8:	2200      	movs	r2, #0
 80139ca:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80139cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139ce:	3304      	adds	r3, #4
 80139d0:	4618      	mov	r0, r3
 80139d2:	f7ff f8f2 	bl	8012bba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80139d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139d8:	3318      	adds	r3, #24
 80139da:	4618      	mov	r0, r3
 80139dc:	f7ff f8ed 	bl	8012bba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80139e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80139e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139e8:	f1c3 0207 	rsb	r2, r3, #7
 80139ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80139f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139f4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80139f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139f8:	2200      	movs	r2, #0
 80139fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80139fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139fe:	2200      	movs	r2, #0
 8013a00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013a04:	683a      	ldr	r2, [r7, #0]
 8013a06:	68f9      	ldr	r1, [r7, #12]
 8013a08:	69b8      	ldr	r0, [r7, #24]
 8013a0a:	f000 ff8b 	bl	8014924 <pxPortInitialiseStack>
 8013a0e:	4602      	mov	r2, r0
 8013a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d002      	beq.n	8013a20 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a20:	bf00      	nop
 8013a22:	3720      	adds	r7, #32
 8013a24:	46bd      	mov	sp, r7
 8013a26:	bd80      	pop	{r7, pc}

08013a28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b082      	sub	sp, #8
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013a30:	f001 f89c 	bl	8014b6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013a34:	4b2a      	ldr	r3, [pc, #168]	; (8013ae0 <prvAddNewTaskToReadyList+0xb8>)
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	3301      	adds	r3, #1
 8013a3a:	4a29      	ldr	r2, [pc, #164]	; (8013ae0 <prvAddNewTaskToReadyList+0xb8>)
 8013a3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013a3e:	4b29      	ldr	r3, [pc, #164]	; (8013ae4 <prvAddNewTaskToReadyList+0xbc>)
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d109      	bne.n	8013a5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013a46:	4a27      	ldr	r2, [pc, #156]	; (8013ae4 <prvAddNewTaskToReadyList+0xbc>)
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013a4c:	4b24      	ldr	r3, [pc, #144]	; (8013ae0 <prvAddNewTaskToReadyList+0xb8>)
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	2b01      	cmp	r3, #1
 8013a52:	d110      	bne.n	8013a76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013a54:	f000 fbc0 	bl	80141d8 <prvInitialiseTaskLists>
 8013a58:	e00d      	b.n	8013a76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013a5a:	4b23      	ldr	r3, [pc, #140]	; (8013ae8 <prvAddNewTaskToReadyList+0xc0>)
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d109      	bne.n	8013a76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013a62:	4b20      	ldr	r3, [pc, #128]	; (8013ae4 <prvAddNewTaskToReadyList+0xbc>)
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a6c:	429a      	cmp	r2, r3
 8013a6e:	d802      	bhi.n	8013a76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013a70:	4a1c      	ldr	r2, [pc, #112]	; (8013ae4 <prvAddNewTaskToReadyList+0xbc>)
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013a76:	4b1d      	ldr	r3, [pc, #116]	; (8013aec <prvAddNewTaskToReadyList+0xc4>)
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	3301      	adds	r3, #1
 8013a7c:	4a1b      	ldr	r2, [pc, #108]	; (8013aec <prvAddNewTaskToReadyList+0xc4>)
 8013a7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a84:	2201      	movs	r2, #1
 8013a86:	409a      	lsls	r2, r3
 8013a88:	4b19      	ldr	r3, [pc, #100]	; (8013af0 <prvAddNewTaskToReadyList+0xc8>)
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	4313      	orrs	r3, r2
 8013a8e:	4a18      	ldr	r2, [pc, #96]	; (8013af0 <prvAddNewTaskToReadyList+0xc8>)
 8013a90:	6013      	str	r3, [r2, #0]
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a96:	4613      	mov	r3, r2
 8013a98:	009b      	lsls	r3, r3, #2
 8013a9a:	4413      	add	r3, r2
 8013a9c:	009b      	lsls	r3, r3, #2
 8013a9e:	4a15      	ldr	r2, [pc, #84]	; (8013af4 <prvAddNewTaskToReadyList+0xcc>)
 8013aa0:	441a      	add	r2, r3
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	3304      	adds	r3, #4
 8013aa6:	4619      	mov	r1, r3
 8013aa8:	4610      	mov	r0, r2
 8013aaa:	f7ff f893 	bl	8012bd4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013aae:	f001 f88b 	bl	8014bc8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013ab2:	4b0d      	ldr	r3, [pc, #52]	; (8013ae8 <prvAddNewTaskToReadyList+0xc0>)
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d00e      	beq.n	8013ad8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013aba:	4b0a      	ldr	r3, [pc, #40]	; (8013ae4 <prvAddNewTaskToReadyList+0xbc>)
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ac4:	429a      	cmp	r2, r3
 8013ac6:	d207      	bcs.n	8013ad8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013ac8:	4b0b      	ldr	r3, [pc, #44]	; (8013af8 <prvAddNewTaskToReadyList+0xd0>)
 8013aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ace:	601a      	str	r2, [r3, #0]
 8013ad0:	f3bf 8f4f 	dsb	sy
 8013ad4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013ad8:	bf00      	nop
 8013ada:	3708      	adds	r7, #8
 8013adc:	46bd      	mov	sp, r7
 8013ade:	bd80      	pop	{r7, pc}
 8013ae0:	2000110c 	.word	0x2000110c
 8013ae4:	2000100c 	.word	0x2000100c
 8013ae8:	20001118 	.word	0x20001118
 8013aec:	20001128 	.word	0x20001128
 8013af0:	20001114 	.word	0x20001114
 8013af4:	20001010 	.word	0x20001010
 8013af8:	e000ed04 	.word	0xe000ed04

08013afc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b084      	sub	sp, #16
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013b04:	2300      	movs	r3, #0
 8013b06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d016      	beq.n	8013b3c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013b0e:	4b13      	ldr	r3, [pc, #76]	; (8013b5c <vTaskDelay+0x60>)
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d009      	beq.n	8013b2a <vTaskDelay+0x2e>
 8013b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b1a:	f383 8811 	msr	BASEPRI, r3
 8013b1e:	f3bf 8f6f 	isb	sy
 8013b22:	f3bf 8f4f 	dsb	sy
 8013b26:	60bb      	str	r3, [r7, #8]
 8013b28:	e7fe      	b.n	8013b28 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8013b2a:	f000 f879 	bl	8013c20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013b2e:	2100      	movs	r1, #0
 8013b30:	6878      	ldr	r0, [r7, #4]
 8013b32:	f000 fe91 	bl	8014858 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013b36:	f000 f881 	bl	8013c3c <xTaskResumeAll>
 8013b3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d107      	bne.n	8013b52 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8013b42:	4b07      	ldr	r3, [pc, #28]	; (8013b60 <vTaskDelay+0x64>)
 8013b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b48:	601a      	str	r2, [r3, #0]
 8013b4a:	f3bf 8f4f 	dsb	sy
 8013b4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013b52:	bf00      	nop
 8013b54:	3710      	adds	r7, #16
 8013b56:	46bd      	mov	sp, r7
 8013b58:	bd80      	pop	{r7, pc}
 8013b5a:	bf00      	nop
 8013b5c:	20001134 	.word	0x20001134
 8013b60:	e000ed04 	.word	0xe000ed04

08013b64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b08a      	sub	sp, #40	; 0x28
 8013b68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013b6e:	2300      	movs	r3, #0
 8013b70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013b72:	463a      	mov	r2, r7
 8013b74:	1d39      	adds	r1, r7, #4
 8013b76:	f107 0308 	add.w	r3, r7, #8
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f7ee f82c 	bl	8001bd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013b80:	6839      	ldr	r1, [r7, #0]
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	68ba      	ldr	r2, [r7, #8]
 8013b86:	9202      	str	r2, [sp, #8]
 8013b88:	9301      	str	r3, [sp, #4]
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	9300      	str	r3, [sp, #0]
 8013b8e:	2300      	movs	r3, #0
 8013b90:	460a      	mov	r2, r1
 8013b92:	491d      	ldr	r1, [pc, #116]	; (8013c08 <vTaskStartScheduler+0xa4>)
 8013b94:	481d      	ldr	r0, [pc, #116]	; (8013c0c <vTaskStartScheduler+0xa8>)
 8013b96:	f7ff fe22 	bl	80137de <xTaskCreateStatic>
 8013b9a:	4602      	mov	r2, r0
 8013b9c:	4b1c      	ldr	r3, [pc, #112]	; (8013c10 <vTaskStartScheduler+0xac>)
 8013b9e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013ba0:	4b1b      	ldr	r3, [pc, #108]	; (8013c10 <vTaskStartScheduler+0xac>)
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d002      	beq.n	8013bae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013ba8:	2301      	movs	r3, #1
 8013baa:	617b      	str	r3, [r7, #20]
 8013bac:	e001      	b.n	8013bb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013bae:	2300      	movs	r3, #0
 8013bb0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013bb2:	697b      	ldr	r3, [r7, #20]
 8013bb4:	2b01      	cmp	r3, #1
 8013bb6:	d115      	bne.n	8013be4 <vTaskStartScheduler+0x80>
 8013bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bbc:	f383 8811 	msr	BASEPRI, r3
 8013bc0:	f3bf 8f6f 	isb	sy
 8013bc4:	f3bf 8f4f 	dsb	sy
 8013bc8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013bca:	4b12      	ldr	r3, [pc, #72]	; (8013c14 <vTaskStartScheduler+0xb0>)
 8013bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8013bd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013bd2:	4b11      	ldr	r3, [pc, #68]	; (8013c18 <vTaskStartScheduler+0xb4>)
 8013bd4:	2201      	movs	r2, #1
 8013bd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013bd8:	4b10      	ldr	r3, [pc, #64]	; (8013c1c <vTaskStartScheduler+0xb8>)
 8013bda:	2200      	movs	r2, #0
 8013bdc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013bde:	f000 ff27 	bl	8014a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013be2:	e00d      	b.n	8013c00 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013be4:	697b      	ldr	r3, [r7, #20]
 8013be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bea:	d109      	bne.n	8013c00 <vTaskStartScheduler+0x9c>
 8013bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bf0:	f383 8811 	msr	BASEPRI, r3
 8013bf4:	f3bf 8f6f 	isb	sy
 8013bf8:	f3bf 8f4f 	dsb	sy
 8013bfc:	60fb      	str	r3, [r7, #12]
 8013bfe:	e7fe      	b.n	8013bfe <vTaskStartScheduler+0x9a>
}
 8013c00:	bf00      	nop
 8013c02:	3718      	adds	r7, #24
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}
 8013c08:	0801b3ac 	.word	0x0801b3ac
 8013c0c:	080141a9 	.word	0x080141a9
 8013c10:	20001130 	.word	0x20001130
 8013c14:	2000112c 	.word	0x2000112c
 8013c18:	20001118 	.word	0x20001118
 8013c1c:	20001110 	.word	0x20001110

08013c20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013c20:	b480      	push	{r7}
 8013c22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013c24:	4b04      	ldr	r3, [pc, #16]	; (8013c38 <vTaskSuspendAll+0x18>)
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	3301      	adds	r3, #1
 8013c2a:	4a03      	ldr	r2, [pc, #12]	; (8013c38 <vTaskSuspendAll+0x18>)
 8013c2c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013c2e:	bf00      	nop
 8013c30:	46bd      	mov	sp, r7
 8013c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c36:	4770      	bx	lr
 8013c38:	20001134 	.word	0x20001134

08013c3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b084      	sub	sp, #16
 8013c40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013c42:	2300      	movs	r3, #0
 8013c44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013c46:	2300      	movs	r3, #0
 8013c48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013c4a:	4b41      	ldr	r3, [pc, #260]	; (8013d50 <xTaskResumeAll+0x114>)
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d109      	bne.n	8013c66 <xTaskResumeAll+0x2a>
 8013c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c56:	f383 8811 	msr	BASEPRI, r3
 8013c5a:	f3bf 8f6f 	isb	sy
 8013c5e:	f3bf 8f4f 	dsb	sy
 8013c62:	603b      	str	r3, [r7, #0]
 8013c64:	e7fe      	b.n	8013c64 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013c66:	f000 ff81 	bl	8014b6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013c6a:	4b39      	ldr	r3, [pc, #228]	; (8013d50 <xTaskResumeAll+0x114>)
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	3b01      	subs	r3, #1
 8013c70:	4a37      	ldr	r2, [pc, #220]	; (8013d50 <xTaskResumeAll+0x114>)
 8013c72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013c74:	4b36      	ldr	r3, [pc, #216]	; (8013d50 <xTaskResumeAll+0x114>)
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d161      	bne.n	8013d40 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013c7c:	4b35      	ldr	r3, [pc, #212]	; (8013d54 <xTaskResumeAll+0x118>)
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d05d      	beq.n	8013d40 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013c84:	e02e      	b.n	8013ce4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c86:	4b34      	ldr	r3, [pc, #208]	; (8013d58 <xTaskResumeAll+0x11c>)
 8013c88:	68db      	ldr	r3, [r3, #12]
 8013c8a:	68db      	ldr	r3, [r3, #12]
 8013c8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	3318      	adds	r3, #24
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7fe fffb 	bl	8012c8e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	3304      	adds	r3, #4
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f7fe fff6 	bl	8012c8e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ca6:	2201      	movs	r2, #1
 8013ca8:	409a      	lsls	r2, r3
 8013caa:	4b2c      	ldr	r3, [pc, #176]	; (8013d5c <xTaskResumeAll+0x120>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	4313      	orrs	r3, r2
 8013cb0:	4a2a      	ldr	r2, [pc, #168]	; (8013d5c <xTaskResumeAll+0x120>)
 8013cb2:	6013      	str	r3, [r2, #0]
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cb8:	4613      	mov	r3, r2
 8013cba:	009b      	lsls	r3, r3, #2
 8013cbc:	4413      	add	r3, r2
 8013cbe:	009b      	lsls	r3, r3, #2
 8013cc0:	4a27      	ldr	r2, [pc, #156]	; (8013d60 <xTaskResumeAll+0x124>)
 8013cc2:	441a      	add	r2, r3
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	3304      	adds	r3, #4
 8013cc8:	4619      	mov	r1, r3
 8013cca:	4610      	mov	r0, r2
 8013ccc:	f7fe ff82 	bl	8012bd4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cd4:	4b23      	ldr	r3, [pc, #140]	; (8013d64 <xTaskResumeAll+0x128>)
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	d302      	bcc.n	8013ce4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8013cde:	4b22      	ldr	r3, [pc, #136]	; (8013d68 <xTaskResumeAll+0x12c>)
 8013ce0:	2201      	movs	r2, #1
 8013ce2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013ce4:	4b1c      	ldr	r3, [pc, #112]	; (8013d58 <xTaskResumeAll+0x11c>)
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d1cc      	bne.n	8013c86 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d001      	beq.n	8013cf6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013cf2:	f000 fb0b 	bl	801430c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013cf6:	4b1d      	ldr	r3, [pc, #116]	; (8013d6c <xTaskResumeAll+0x130>)
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d010      	beq.n	8013d24 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013d02:	f000 f837 	bl	8013d74 <xTaskIncrementTick>
 8013d06:	4603      	mov	r3, r0
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d002      	beq.n	8013d12 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8013d0c:	4b16      	ldr	r3, [pc, #88]	; (8013d68 <xTaskResumeAll+0x12c>)
 8013d0e:	2201      	movs	r2, #1
 8013d10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	3b01      	subs	r3, #1
 8013d16:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d1f1      	bne.n	8013d02 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8013d1e:	4b13      	ldr	r3, [pc, #76]	; (8013d6c <xTaskResumeAll+0x130>)
 8013d20:	2200      	movs	r2, #0
 8013d22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013d24:	4b10      	ldr	r3, [pc, #64]	; (8013d68 <xTaskResumeAll+0x12c>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d009      	beq.n	8013d40 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013d2c:	2301      	movs	r3, #1
 8013d2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013d30:	4b0f      	ldr	r3, [pc, #60]	; (8013d70 <xTaskResumeAll+0x134>)
 8013d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d36:	601a      	str	r2, [r3, #0]
 8013d38:	f3bf 8f4f 	dsb	sy
 8013d3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013d40:	f000 ff42 	bl	8014bc8 <vPortExitCritical>

	return xAlreadyYielded;
 8013d44:	68bb      	ldr	r3, [r7, #8]
}
 8013d46:	4618      	mov	r0, r3
 8013d48:	3710      	adds	r7, #16
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	bd80      	pop	{r7, pc}
 8013d4e:	bf00      	nop
 8013d50:	20001134 	.word	0x20001134
 8013d54:	2000110c 	.word	0x2000110c
 8013d58:	200010cc 	.word	0x200010cc
 8013d5c:	20001114 	.word	0x20001114
 8013d60:	20001010 	.word	0x20001010
 8013d64:	2000100c 	.word	0x2000100c
 8013d68:	20001120 	.word	0x20001120
 8013d6c:	2000111c 	.word	0x2000111c
 8013d70:	e000ed04 	.word	0xe000ed04

08013d74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013d74:	b580      	push	{r7, lr}
 8013d76:	b086      	sub	sp, #24
 8013d78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013d7e:	4b4e      	ldr	r3, [pc, #312]	; (8013eb8 <xTaskIncrementTick+0x144>)
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	f040 8087 	bne.w	8013e96 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013d88:	4b4c      	ldr	r3, [pc, #304]	; (8013ebc <xTaskIncrementTick+0x148>)
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	3301      	adds	r3, #1
 8013d8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013d90:	4a4a      	ldr	r2, [pc, #296]	; (8013ebc <xTaskIncrementTick+0x148>)
 8013d92:	693b      	ldr	r3, [r7, #16]
 8013d94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013d96:	693b      	ldr	r3, [r7, #16]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d11f      	bne.n	8013ddc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8013d9c:	4b48      	ldr	r3, [pc, #288]	; (8013ec0 <xTaskIncrementTick+0x14c>)
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d009      	beq.n	8013dba <xTaskIncrementTick+0x46>
 8013da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013daa:	f383 8811 	msr	BASEPRI, r3
 8013dae:	f3bf 8f6f 	isb	sy
 8013db2:	f3bf 8f4f 	dsb	sy
 8013db6:	603b      	str	r3, [r7, #0]
 8013db8:	e7fe      	b.n	8013db8 <xTaskIncrementTick+0x44>
 8013dba:	4b41      	ldr	r3, [pc, #260]	; (8013ec0 <xTaskIncrementTick+0x14c>)
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	60fb      	str	r3, [r7, #12]
 8013dc0:	4b40      	ldr	r3, [pc, #256]	; (8013ec4 <xTaskIncrementTick+0x150>)
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	4a3e      	ldr	r2, [pc, #248]	; (8013ec0 <xTaskIncrementTick+0x14c>)
 8013dc6:	6013      	str	r3, [r2, #0]
 8013dc8:	4a3e      	ldr	r2, [pc, #248]	; (8013ec4 <xTaskIncrementTick+0x150>)
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	6013      	str	r3, [r2, #0]
 8013dce:	4b3e      	ldr	r3, [pc, #248]	; (8013ec8 <xTaskIncrementTick+0x154>)
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	3301      	adds	r3, #1
 8013dd4:	4a3c      	ldr	r2, [pc, #240]	; (8013ec8 <xTaskIncrementTick+0x154>)
 8013dd6:	6013      	str	r3, [r2, #0]
 8013dd8:	f000 fa98 	bl	801430c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013ddc:	4b3b      	ldr	r3, [pc, #236]	; (8013ecc <xTaskIncrementTick+0x158>)
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	693a      	ldr	r2, [r7, #16]
 8013de2:	429a      	cmp	r2, r3
 8013de4:	d348      	bcc.n	8013e78 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013de6:	4b36      	ldr	r3, [pc, #216]	; (8013ec0 <xTaskIncrementTick+0x14c>)
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d104      	bne.n	8013dfa <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013df0:	4b36      	ldr	r3, [pc, #216]	; (8013ecc <xTaskIncrementTick+0x158>)
 8013df2:	f04f 32ff 	mov.w	r2, #4294967295
 8013df6:	601a      	str	r2, [r3, #0]
					break;
 8013df8:	e03e      	b.n	8013e78 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013dfa:	4b31      	ldr	r3, [pc, #196]	; (8013ec0 <xTaskIncrementTick+0x14c>)
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	68db      	ldr	r3, [r3, #12]
 8013e00:	68db      	ldr	r3, [r3, #12]
 8013e02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013e04:	68bb      	ldr	r3, [r7, #8]
 8013e06:	685b      	ldr	r3, [r3, #4]
 8013e08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013e0a:	693a      	ldr	r2, [r7, #16]
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	429a      	cmp	r2, r3
 8013e10:	d203      	bcs.n	8013e1a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013e12:	4a2e      	ldr	r2, [pc, #184]	; (8013ecc <xTaskIncrementTick+0x158>)
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013e18:	e02e      	b.n	8013e78 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013e1a:	68bb      	ldr	r3, [r7, #8]
 8013e1c:	3304      	adds	r3, #4
 8013e1e:	4618      	mov	r0, r3
 8013e20:	f7fe ff35 	bl	8012c8e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013e24:	68bb      	ldr	r3, [r7, #8]
 8013e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d004      	beq.n	8013e36 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013e2c:	68bb      	ldr	r3, [r7, #8]
 8013e2e:	3318      	adds	r3, #24
 8013e30:	4618      	mov	r0, r3
 8013e32:	f7fe ff2c 	bl	8012c8e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013e36:	68bb      	ldr	r3, [r7, #8]
 8013e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e3a:	2201      	movs	r2, #1
 8013e3c:	409a      	lsls	r2, r3
 8013e3e:	4b24      	ldr	r3, [pc, #144]	; (8013ed0 <xTaskIncrementTick+0x15c>)
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	4313      	orrs	r3, r2
 8013e44:	4a22      	ldr	r2, [pc, #136]	; (8013ed0 <xTaskIncrementTick+0x15c>)
 8013e46:	6013      	str	r3, [r2, #0]
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e4c:	4613      	mov	r3, r2
 8013e4e:	009b      	lsls	r3, r3, #2
 8013e50:	4413      	add	r3, r2
 8013e52:	009b      	lsls	r3, r3, #2
 8013e54:	4a1f      	ldr	r2, [pc, #124]	; (8013ed4 <xTaskIncrementTick+0x160>)
 8013e56:	441a      	add	r2, r3
 8013e58:	68bb      	ldr	r3, [r7, #8]
 8013e5a:	3304      	adds	r3, #4
 8013e5c:	4619      	mov	r1, r3
 8013e5e:	4610      	mov	r0, r2
 8013e60:	f7fe feb8 	bl	8012bd4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013e64:	68bb      	ldr	r3, [r7, #8]
 8013e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e68:	4b1b      	ldr	r3, [pc, #108]	; (8013ed8 <xTaskIncrementTick+0x164>)
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e6e:	429a      	cmp	r2, r3
 8013e70:	d3b9      	bcc.n	8013de6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8013e72:	2301      	movs	r3, #1
 8013e74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013e76:	e7b6      	b.n	8013de6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013e78:	4b17      	ldr	r3, [pc, #92]	; (8013ed8 <xTaskIncrementTick+0x164>)
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e7e:	4915      	ldr	r1, [pc, #84]	; (8013ed4 <xTaskIncrementTick+0x160>)
 8013e80:	4613      	mov	r3, r2
 8013e82:	009b      	lsls	r3, r3, #2
 8013e84:	4413      	add	r3, r2
 8013e86:	009b      	lsls	r3, r3, #2
 8013e88:	440b      	add	r3, r1
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	2b01      	cmp	r3, #1
 8013e8e:	d907      	bls.n	8013ea0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8013e90:	2301      	movs	r3, #1
 8013e92:	617b      	str	r3, [r7, #20]
 8013e94:	e004      	b.n	8013ea0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013e96:	4b11      	ldr	r3, [pc, #68]	; (8013edc <xTaskIncrementTick+0x168>)
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	3301      	adds	r3, #1
 8013e9c:	4a0f      	ldr	r2, [pc, #60]	; (8013edc <xTaskIncrementTick+0x168>)
 8013e9e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013ea0:	4b0f      	ldr	r3, [pc, #60]	; (8013ee0 <xTaskIncrementTick+0x16c>)
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d001      	beq.n	8013eac <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8013ea8:	2301      	movs	r3, #1
 8013eaa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013eac:	697b      	ldr	r3, [r7, #20]
}
 8013eae:	4618      	mov	r0, r3
 8013eb0:	3718      	adds	r7, #24
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}
 8013eb6:	bf00      	nop
 8013eb8:	20001134 	.word	0x20001134
 8013ebc:	20001110 	.word	0x20001110
 8013ec0:	200010c4 	.word	0x200010c4
 8013ec4:	200010c8 	.word	0x200010c8
 8013ec8:	20001124 	.word	0x20001124
 8013ecc:	2000112c 	.word	0x2000112c
 8013ed0:	20001114 	.word	0x20001114
 8013ed4:	20001010 	.word	0x20001010
 8013ed8:	2000100c 	.word	0x2000100c
 8013edc:	2000111c 	.word	0x2000111c
 8013ee0:	20001120 	.word	0x20001120

08013ee4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013ee4:	b480      	push	{r7}
 8013ee6:	b087      	sub	sp, #28
 8013ee8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013eea:	4b26      	ldr	r3, [pc, #152]	; (8013f84 <vTaskSwitchContext+0xa0>)
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d003      	beq.n	8013efa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013ef2:	4b25      	ldr	r3, [pc, #148]	; (8013f88 <vTaskSwitchContext+0xa4>)
 8013ef4:	2201      	movs	r2, #1
 8013ef6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013ef8:	e03e      	b.n	8013f78 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8013efa:	4b23      	ldr	r3, [pc, #140]	; (8013f88 <vTaskSwitchContext+0xa4>)
 8013efc:	2200      	movs	r2, #0
 8013efe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f00:	4b22      	ldr	r3, [pc, #136]	; (8013f8c <vTaskSwitchContext+0xa8>)
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	fab3 f383 	clz	r3, r3
 8013f0c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013f0e:	7afb      	ldrb	r3, [r7, #11]
 8013f10:	f1c3 031f 	rsb	r3, r3, #31
 8013f14:	617b      	str	r3, [r7, #20]
 8013f16:	491e      	ldr	r1, [pc, #120]	; (8013f90 <vTaskSwitchContext+0xac>)
 8013f18:	697a      	ldr	r2, [r7, #20]
 8013f1a:	4613      	mov	r3, r2
 8013f1c:	009b      	lsls	r3, r3, #2
 8013f1e:	4413      	add	r3, r2
 8013f20:	009b      	lsls	r3, r3, #2
 8013f22:	440b      	add	r3, r1
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d109      	bne.n	8013f3e <vTaskSwitchContext+0x5a>
	__asm volatile
 8013f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f2e:	f383 8811 	msr	BASEPRI, r3
 8013f32:	f3bf 8f6f 	isb	sy
 8013f36:	f3bf 8f4f 	dsb	sy
 8013f3a:	607b      	str	r3, [r7, #4]
 8013f3c:	e7fe      	b.n	8013f3c <vTaskSwitchContext+0x58>
 8013f3e:	697a      	ldr	r2, [r7, #20]
 8013f40:	4613      	mov	r3, r2
 8013f42:	009b      	lsls	r3, r3, #2
 8013f44:	4413      	add	r3, r2
 8013f46:	009b      	lsls	r3, r3, #2
 8013f48:	4a11      	ldr	r2, [pc, #68]	; (8013f90 <vTaskSwitchContext+0xac>)
 8013f4a:	4413      	add	r3, r2
 8013f4c:	613b      	str	r3, [r7, #16]
 8013f4e:	693b      	ldr	r3, [r7, #16]
 8013f50:	685b      	ldr	r3, [r3, #4]
 8013f52:	685a      	ldr	r2, [r3, #4]
 8013f54:	693b      	ldr	r3, [r7, #16]
 8013f56:	605a      	str	r2, [r3, #4]
 8013f58:	693b      	ldr	r3, [r7, #16]
 8013f5a:	685a      	ldr	r2, [r3, #4]
 8013f5c:	693b      	ldr	r3, [r7, #16]
 8013f5e:	3308      	adds	r3, #8
 8013f60:	429a      	cmp	r2, r3
 8013f62:	d104      	bne.n	8013f6e <vTaskSwitchContext+0x8a>
 8013f64:	693b      	ldr	r3, [r7, #16]
 8013f66:	685b      	ldr	r3, [r3, #4]
 8013f68:	685a      	ldr	r2, [r3, #4]
 8013f6a:	693b      	ldr	r3, [r7, #16]
 8013f6c:	605a      	str	r2, [r3, #4]
 8013f6e:	693b      	ldr	r3, [r7, #16]
 8013f70:	685b      	ldr	r3, [r3, #4]
 8013f72:	68db      	ldr	r3, [r3, #12]
 8013f74:	4a07      	ldr	r2, [pc, #28]	; (8013f94 <vTaskSwitchContext+0xb0>)
 8013f76:	6013      	str	r3, [r2, #0]
}
 8013f78:	bf00      	nop
 8013f7a:	371c      	adds	r7, #28
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f82:	4770      	bx	lr
 8013f84:	20001134 	.word	0x20001134
 8013f88:	20001120 	.word	0x20001120
 8013f8c:	20001114 	.word	0x20001114
 8013f90:	20001010 	.word	0x20001010
 8013f94:	2000100c 	.word	0x2000100c

08013f98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b084      	sub	sp, #16
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
 8013fa0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d109      	bne.n	8013fbc <vTaskPlaceOnEventList+0x24>
 8013fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fac:	f383 8811 	msr	BASEPRI, r3
 8013fb0:	f3bf 8f6f 	isb	sy
 8013fb4:	f3bf 8f4f 	dsb	sy
 8013fb8:	60fb      	str	r3, [r7, #12]
 8013fba:	e7fe      	b.n	8013fba <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013fbc:	4b07      	ldr	r3, [pc, #28]	; (8013fdc <vTaskPlaceOnEventList+0x44>)
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	3318      	adds	r3, #24
 8013fc2:	4619      	mov	r1, r3
 8013fc4:	6878      	ldr	r0, [r7, #4]
 8013fc6:	f7fe fe29 	bl	8012c1c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013fca:	2101      	movs	r1, #1
 8013fcc:	6838      	ldr	r0, [r7, #0]
 8013fce:	f000 fc43 	bl	8014858 <prvAddCurrentTaskToDelayedList>
}
 8013fd2:	bf00      	nop
 8013fd4:	3710      	adds	r7, #16
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	bd80      	pop	{r7, pc}
 8013fda:	bf00      	nop
 8013fdc:	2000100c 	.word	0x2000100c

08013fe0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b086      	sub	sp, #24
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	68db      	ldr	r3, [r3, #12]
 8013fec:	68db      	ldr	r3, [r3, #12]
 8013fee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013ff0:	693b      	ldr	r3, [r7, #16]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d109      	bne.n	801400a <xTaskRemoveFromEventList+0x2a>
 8013ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ffa:	f383 8811 	msr	BASEPRI, r3
 8013ffe:	f3bf 8f6f 	isb	sy
 8014002:	f3bf 8f4f 	dsb	sy
 8014006:	60fb      	str	r3, [r7, #12]
 8014008:	e7fe      	b.n	8014008 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801400a:	693b      	ldr	r3, [r7, #16]
 801400c:	3318      	adds	r3, #24
 801400e:	4618      	mov	r0, r3
 8014010:	f7fe fe3d 	bl	8012c8e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014014:	4b1d      	ldr	r3, [pc, #116]	; (801408c <xTaskRemoveFromEventList+0xac>)
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	2b00      	cmp	r3, #0
 801401a:	d11c      	bne.n	8014056 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801401c:	693b      	ldr	r3, [r7, #16]
 801401e:	3304      	adds	r3, #4
 8014020:	4618      	mov	r0, r3
 8014022:	f7fe fe34 	bl	8012c8e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014026:	693b      	ldr	r3, [r7, #16]
 8014028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801402a:	2201      	movs	r2, #1
 801402c:	409a      	lsls	r2, r3
 801402e:	4b18      	ldr	r3, [pc, #96]	; (8014090 <xTaskRemoveFromEventList+0xb0>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	4313      	orrs	r3, r2
 8014034:	4a16      	ldr	r2, [pc, #88]	; (8014090 <xTaskRemoveFromEventList+0xb0>)
 8014036:	6013      	str	r3, [r2, #0]
 8014038:	693b      	ldr	r3, [r7, #16]
 801403a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801403c:	4613      	mov	r3, r2
 801403e:	009b      	lsls	r3, r3, #2
 8014040:	4413      	add	r3, r2
 8014042:	009b      	lsls	r3, r3, #2
 8014044:	4a13      	ldr	r2, [pc, #76]	; (8014094 <xTaskRemoveFromEventList+0xb4>)
 8014046:	441a      	add	r2, r3
 8014048:	693b      	ldr	r3, [r7, #16]
 801404a:	3304      	adds	r3, #4
 801404c:	4619      	mov	r1, r3
 801404e:	4610      	mov	r0, r2
 8014050:	f7fe fdc0 	bl	8012bd4 <vListInsertEnd>
 8014054:	e005      	b.n	8014062 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014056:	693b      	ldr	r3, [r7, #16]
 8014058:	3318      	adds	r3, #24
 801405a:	4619      	mov	r1, r3
 801405c:	480e      	ldr	r0, [pc, #56]	; (8014098 <xTaskRemoveFromEventList+0xb8>)
 801405e:	f7fe fdb9 	bl	8012bd4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014062:	693b      	ldr	r3, [r7, #16]
 8014064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014066:	4b0d      	ldr	r3, [pc, #52]	; (801409c <xTaskRemoveFromEventList+0xbc>)
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801406c:	429a      	cmp	r2, r3
 801406e:	d905      	bls.n	801407c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014070:	2301      	movs	r3, #1
 8014072:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014074:	4b0a      	ldr	r3, [pc, #40]	; (80140a0 <xTaskRemoveFromEventList+0xc0>)
 8014076:	2201      	movs	r2, #1
 8014078:	601a      	str	r2, [r3, #0]
 801407a:	e001      	b.n	8014080 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 801407c:	2300      	movs	r3, #0
 801407e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014080:	697b      	ldr	r3, [r7, #20]
}
 8014082:	4618      	mov	r0, r3
 8014084:	3718      	adds	r7, #24
 8014086:	46bd      	mov	sp, r7
 8014088:	bd80      	pop	{r7, pc}
 801408a:	bf00      	nop
 801408c:	20001134 	.word	0x20001134
 8014090:	20001114 	.word	0x20001114
 8014094:	20001010 	.word	0x20001010
 8014098:	200010cc 	.word	0x200010cc
 801409c:	2000100c 	.word	0x2000100c
 80140a0:	20001120 	.word	0x20001120

080140a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80140a4:	b480      	push	{r7}
 80140a6:	b083      	sub	sp, #12
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80140ac:	4b06      	ldr	r3, [pc, #24]	; (80140c8 <vTaskInternalSetTimeOutState+0x24>)
 80140ae:	681a      	ldr	r2, [r3, #0]
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80140b4:	4b05      	ldr	r3, [pc, #20]	; (80140cc <vTaskInternalSetTimeOutState+0x28>)
 80140b6:	681a      	ldr	r2, [r3, #0]
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	605a      	str	r2, [r3, #4]
}
 80140bc:	bf00      	nop
 80140be:	370c      	adds	r7, #12
 80140c0:	46bd      	mov	sp, r7
 80140c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c6:	4770      	bx	lr
 80140c8:	20001124 	.word	0x20001124
 80140cc:	20001110 	.word	0x20001110

080140d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b088      	sub	sp, #32
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	6078      	str	r0, [r7, #4]
 80140d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d109      	bne.n	80140f4 <xTaskCheckForTimeOut+0x24>
 80140e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140e4:	f383 8811 	msr	BASEPRI, r3
 80140e8:	f3bf 8f6f 	isb	sy
 80140ec:	f3bf 8f4f 	dsb	sy
 80140f0:	613b      	str	r3, [r7, #16]
 80140f2:	e7fe      	b.n	80140f2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80140f4:	683b      	ldr	r3, [r7, #0]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d109      	bne.n	801410e <xTaskCheckForTimeOut+0x3e>
 80140fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140fe:	f383 8811 	msr	BASEPRI, r3
 8014102:	f3bf 8f6f 	isb	sy
 8014106:	f3bf 8f4f 	dsb	sy
 801410a:	60fb      	str	r3, [r7, #12]
 801410c:	e7fe      	b.n	801410c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801410e:	f000 fd2d 	bl	8014b6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014112:	4b1d      	ldr	r3, [pc, #116]	; (8014188 <xTaskCheckForTimeOut+0xb8>)
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	685b      	ldr	r3, [r3, #4]
 801411c:	69ba      	ldr	r2, [r7, #24]
 801411e:	1ad3      	subs	r3, r2, r3
 8014120:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014122:	683b      	ldr	r3, [r7, #0]
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	f1b3 3fff 	cmp.w	r3, #4294967295
 801412a:	d102      	bne.n	8014132 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801412c:	2300      	movs	r3, #0
 801412e:	61fb      	str	r3, [r7, #28]
 8014130:	e023      	b.n	801417a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	681a      	ldr	r2, [r3, #0]
 8014136:	4b15      	ldr	r3, [pc, #84]	; (801418c <xTaskCheckForTimeOut+0xbc>)
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	429a      	cmp	r2, r3
 801413c:	d007      	beq.n	801414e <xTaskCheckForTimeOut+0x7e>
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	685b      	ldr	r3, [r3, #4]
 8014142:	69ba      	ldr	r2, [r7, #24]
 8014144:	429a      	cmp	r2, r3
 8014146:	d302      	bcc.n	801414e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014148:	2301      	movs	r3, #1
 801414a:	61fb      	str	r3, [r7, #28]
 801414c:	e015      	b.n	801417a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801414e:	683b      	ldr	r3, [r7, #0]
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	697a      	ldr	r2, [r7, #20]
 8014154:	429a      	cmp	r2, r3
 8014156:	d20b      	bcs.n	8014170 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014158:	683b      	ldr	r3, [r7, #0]
 801415a:	681a      	ldr	r2, [r3, #0]
 801415c:	697b      	ldr	r3, [r7, #20]
 801415e:	1ad2      	subs	r2, r2, r3
 8014160:	683b      	ldr	r3, [r7, #0]
 8014162:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014164:	6878      	ldr	r0, [r7, #4]
 8014166:	f7ff ff9d 	bl	80140a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801416a:	2300      	movs	r3, #0
 801416c:	61fb      	str	r3, [r7, #28]
 801416e:	e004      	b.n	801417a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8014170:	683b      	ldr	r3, [r7, #0]
 8014172:	2200      	movs	r2, #0
 8014174:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014176:	2301      	movs	r3, #1
 8014178:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801417a:	f000 fd25 	bl	8014bc8 <vPortExitCritical>

	return xReturn;
 801417e:	69fb      	ldr	r3, [r7, #28]
}
 8014180:	4618      	mov	r0, r3
 8014182:	3720      	adds	r7, #32
 8014184:	46bd      	mov	sp, r7
 8014186:	bd80      	pop	{r7, pc}
 8014188:	20001110 	.word	0x20001110
 801418c:	20001124 	.word	0x20001124

08014190 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014190:	b480      	push	{r7}
 8014192:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014194:	4b03      	ldr	r3, [pc, #12]	; (80141a4 <vTaskMissedYield+0x14>)
 8014196:	2201      	movs	r2, #1
 8014198:	601a      	str	r2, [r3, #0]
}
 801419a:	bf00      	nop
 801419c:	46bd      	mov	sp, r7
 801419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a2:	4770      	bx	lr
 80141a4:	20001120 	.word	0x20001120

080141a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b082      	sub	sp, #8
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80141b0:	f000 f852 	bl	8014258 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80141b4:	4b06      	ldr	r3, [pc, #24]	; (80141d0 <prvIdleTask+0x28>)
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	2b01      	cmp	r3, #1
 80141ba:	d9f9      	bls.n	80141b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80141bc:	4b05      	ldr	r3, [pc, #20]	; (80141d4 <prvIdleTask+0x2c>)
 80141be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80141c2:	601a      	str	r2, [r3, #0]
 80141c4:	f3bf 8f4f 	dsb	sy
 80141c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80141cc:	e7f0      	b.n	80141b0 <prvIdleTask+0x8>
 80141ce:	bf00      	nop
 80141d0:	20001010 	.word	0x20001010
 80141d4:	e000ed04 	.word	0xe000ed04

080141d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b082      	sub	sp, #8
 80141dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80141de:	2300      	movs	r3, #0
 80141e0:	607b      	str	r3, [r7, #4]
 80141e2:	e00c      	b.n	80141fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80141e4:	687a      	ldr	r2, [r7, #4]
 80141e6:	4613      	mov	r3, r2
 80141e8:	009b      	lsls	r3, r3, #2
 80141ea:	4413      	add	r3, r2
 80141ec:	009b      	lsls	r3, r3, #2
 80141ee:	4a12      	ldr	r2, [pc, #72]	; (8014238 <prvInitialiseTaskLists+0x60>)
 80141f0:	4413      	add	r3, r2
 80141f2:	4618      	mov	r0, r3
 80141f4:	f7fe fcc1 	bl	8012b7a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	3301      	adds	r3, #1
 80141fc:	607b      	str	r3, [r7, #4]
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	2b06      	cmp	r3, #6
 8014202:	d9ef      	bls.n	80141e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014204:	480d      	ldr	r0, [pc, #52]	; (801423c <prvInitialiseTaskLists+0x64>)
 8014206:	f7fe fcb8 	bl	8012b7a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801420a:	480d      	ldr	r0, [pc, #52]	; (8014240 <prvInitialiseTaskLists+0x68>)
 801420c:	f7fe fcb5 	bl	8012b7a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014210:	480c      	ldr	r0, [pc, #48]	; (8014244 <prvInitialiseTaskLists+0x6c>)
 8014212:	f7fe fcb2 	bl	8012b7a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014216:	480c      	ldr	r0, [pc, #48]	; (8014248 <prvInitialiseTaskLists+0x70>)
 8014218:	f7fe fcaf 	bl	8012b7a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801421c:	480b      	ldr	r0, [pc, #44]	; (801424c <prvInitialiseTaskLists+0x74>)
 801421e:	f7fe fcac 	bl	8012b7a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014222:	4b0b      	ldr	r3, [pc, #44]	; (8014250 <prvInitialiseTaskLists+0x78>)
 8014224:	4a05      	ldr	r2, [pc, #20]	; (801423c <prvInitialiseTaskLists+0x64>)
 8014226:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014228:	4b0a      	ldr	r3, [pc, #40]	; (8014254 <prvInitialiseTaskLists+0x7c>)
 801422a:	4a05      	ldr	r2, [pc, #20]	; (8014240 <prvInitialiseTaskLists+0x68>)
 801422c:	601a      	str	r2, [r3, #0]
}
 801422e:	bf00      	nop
 8014230:	3708      	adds	r7, #8
 8014232:	46bd      	mov	sp, r7
 8014234:	bd80      	pop	{r7, pc}
 8014236:	bf00      	nop
 8014238:	20001010 	.word	0x20001010
 801423c:	2000109c 	.word	0x2000109c
 8014240:	200010b0 	.word	0x200010b0
 8014244:	200010cc 	.word	0x200010cc
 8014248:	200010e0 	.word	0x200010e0
 801424c:	200010f8 	.word	0x200010f8
 8014250:	200010c4 	.word	0x200010c4
 8014254:	200010c8 	.word	0x200010c8

08014258 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b082      	sub	sp, #8
 801425c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801425e:	e019      	b.n	8014294 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014260:	f000 fc84 	bl	8014b6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014264:	4b0f      	ldr	r3, [pc, #60]	; (80142a4 <prvCheckTasksWaitingTermination+0x4c>)
 8014266:	68db      	ldr	r3, [r3, #12]
 8014268:	68db      	ldr	r3, [r3, #12]
 801426a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	3304      	adds	r3, #4
 8014270:	4618      	mov	r0, r3
 8014272:	f7fe fd0c 	bl	8012c8e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014276:	4b0c      	ldr	r3, [pc, #48]	; (80142a8 <prvCheckTasksWaitingTermination+0x50>)
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	3b01      	subs	r3, #1
 801427c:	4a0a      	ldr	r2, [pc, #40]	; (80142a8 <prvCheckTasksWaitingTermination+0x50>)
 801427e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014280:	4b0a      	ldr	r3, [pc, #40]	; (80142ac <prvCheckTasksWaitingTermination+0x54>)
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	3b01      	subs	r3, #1
 8014286:	4a09      	ldr	r2, [pc, #36]	; (80142ac <prvCheckTasksWaitingTermination+0x54>)
 8014288:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801428a:	f000 fc9d 	bl	8014bc8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801428e:	6878      	ldr	r0, [r7, #4]
 8014290:	f000 f80e 	bl	80142b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014294:	4b05      	ldr	r3, [pc, #20]	; (80142ac <prvCheckTasksWaitingTermination+0x54>)
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d1e1      	bne.n	8014260 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801429c:	bf00      	nop
 801429e:	3708      	adds	r7, #8
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}
 80142a4:	200010e0 	.word	0x200010e0
 80142a8:	2000110c 	.word	0x2000110c
 80142ac:	200010f4 	.word	0x200010f4

080142b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b084      	sub	sp, #16
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d108      	bne.n	80142d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142c6:	4618      	mov	r0, r3
 80142c8:	f000 fe2c 	bl	8014f24 <vPortFree>
				vPortFree( pxTCB );
 80142cc:	6878      	ldr	r0, [r7, #4]
 80142ce:	f000 fe29 	bl	8014f24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80142d2:	e017      	b.n	8014304 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80142da:	2b01      	cmp	r3, #1
 80142dc:	d103      	bne.n	80142e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80142de:	6878      	ldr	r0, [r7, #4]
 80142e0:	f000 fe20 	bl	8014f24 <vPortFree>
	}
 80142e4:	e00e      	b.n	8014304 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80142ec:	2b02      	cmp	r3, #2
 80142ee:	d009      	beq.n	8014304 <prvDeleteTCB+0x54>
 80142f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142f4:	f383 8811 	msr	BASEPRI, r3
 80142f8:	f3bf 8f6f 	isb	sy
 80142fc:	f3bf 8f4f 	dsb	sy
 8014300:	60fb      	str	r3, [r7, #12]
 8014302:	e7fe      	b.n	8014302 <prvDeleteTCB+0x52>
	}
 8014304:	bf00      	nop
 8014306:	3710      	adds	r7, #16
 8014308:	46bd      	mov	sp, r7
 801430a:	bd80      	pop	{r7, pc}

0801430c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801430c:	b480      	push	{r7}
 801430e:	b083      	sub	sp, #12
 8014310:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014312:	4b0c      	ldr	r3, [pc, #48]	; (8014344 <prvResetNextTaskUnblockTime+0x38>)
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d104      	bne.n	8014326 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801431c:	4b0a      	ldr	r3, [pc, #40]	; (8014348 <prvResetNextTaskUnblockTime+0x3c>)
 801431e:	f04f 32ff 	mov.w	r2, #4294967295
 8014322:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014324:	e008      	b.n	8014338 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014326:	4b07      	ldr	r3, [pc, #28]	; (8014344 <prvResetNextTaskUnblockTime+0x38>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	68db      	ldr	r3, [r3, #12]
 801432c:	68db      	ldr	r3, [r3, #12]
 801432e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	685b      	ldr	r3, [r3, #4]
 8014334:	4a04      	ldr	r2, [pc, #16]	; (8014348 <prvResetNextTaskUnblockTime+0x3c>)
 8014336:	6013      	str	r3, [r2, #0]
}
 8014338:	bf00      	nop
 801433a:	370c      	adds	r7, #12
 801433c:	46bd      	mov	sp, r7
 801433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014342:	4770      	bx	lr
 8014344:	200010c4 	.word	0x200010c4
 8014348:	2000112c 	.word	0x2000112c

0801434c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801434c:	b480      	push	{r7}
 801434e:	b083      	sub	sp, #12
 8014350:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014352:	4b0b      	ldr	r3, [pc, #44]	; (8014380 <xTaskGetSchedulerState+0x34>)
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d102      	bne.n	8014360 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801435a:	2301      	movs	r3, #1
 801435c:	607b      	str	r3, [r7, #4]
 801435e:	e008      	b.n	8014372 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014360:	4b08      	ldr	r3, [pc, #32]	; (8014384 <xTaskGetSchedulerState+0x38>)
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d102      	bne.n	801436e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014368:	2302      	movs	r3, #2
 801436a:	607b      	str	r3, [r7, #4]
 801436c:	e001      	b.n	8014372 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801436e:	2300      	movs	r3, #0
 8014370:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014372:	687b      	ldr	r3, [r7, #4]
	}
 8014374:	4618      	mov	r0, r3
 8014376:	370c      	adds	r7, #12
 8014378:	46bd      	mov	sp, r7
 801437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437e:	4770      	bx	lr
 8014380:	20001118 	.word	0x20001118
 8014384:	20001134 	.word	0x20001134

08014388 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014388:	b580      	push	{r7, lr}
 801438a:	b086      	sub	sp, #24
 801438c:	af00      	add	r7, sp, #0
 801438e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014394:	2300      	movs	r3, #0
 8014396:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d06c      	beq.n	8014478 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801439e:	4b39      	ldr	r3, [pc, #228]	; (8014484 <xTaskPriorityDisinherit+0xfc>)
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	693a      	ldr	r2, [r7, #16]
 80143a4:	429a      	cmp	r2, r3
 80143a6:	d009      	beq.n	80143bc <xTaskPriorityDisinherit+0x34>
 80143a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143ac:	f383 8811 	msr	BASEPRI, r3
 80143b0:	f3bf 8f6f 	isb	sy
 80143b4:	f3bf 8f4f 	dsb	sy
 80143b8:	60fb      	str	r3, [r7, #12]
 80143ba:	e7fe      	b.n	80143ba <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80143bc:	693b      	ldr	r3, [r7, #16]
 80143be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d109      	bne.n	80143d8 <xTaskPriorityDisinherit+0x50>
 80143c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143c8:	f383 8811 	msr	BASEPRI, r3
 80143cc:	f3bf 8f6f 	isb	sy
 80143d0:	f3bf 8f4f 	dsb	sy
 80143d4:	60bb      	str	r3, [r7, #8]
 80143d6:	e7fe      	b.n	80143d6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80143d8:	693b      	ldr	r3, [r7, #16]
 80143da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80143dc:	1e5a      	subs	r2, r3, #1
 80143de:	693b      	ldr	r3, [r7, #16]
 80143e0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80143e2:	693b      	ldr	r3, [r7, #16]
 80143e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143e6:	693b      	ldr	r3, [r7, #16]
 80143e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143ea:	429a      	cmp	r2, r3
 80143ec:	d044      	beq.n	8014478 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80143ee:	693b      	ldr	r3, [r7, #16]
 80143f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d140      	bne.n	8014478 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80143f6:	693b      	ldr	r3, [r7, #16]
 80143f8:	3304      	adds	r3, #4
 80143fa:	4618      	mov	r0, r3
 80143fc:	f7fe fc47 	bl	8012c8e <uxListRemove>
 8014400:	4603      	mov	r3, r0
 8014402:	2b00      	cmp	r3, #0
 8014404:	d115      	bne.n	8014432 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014406:	693b      	ldr	r3, [r7, #16]
 8014408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801440a:	491f      	ldr	r1, [pc, #124]	; (8014488 <xTaskPriorityDisinherit+0x100>)
 801440c:	4613      	mov	r3, r2
 801440e:	009b      	lsls	r3, r3, #2
 8014410:	4413      	add	r3, r2
 8014412:	009b      	lsls	r3, r3, #2
 8014414:	440b      	add	r3, r1
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d10a      	bne.n	8014432 <xTaskPriorityDisinherit+0xaa>
 801441c:	693b      	ldr	r3, [r7, #16]
 801441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014420:	2201      	movs	r2, #1
 8014422:	fa02 f303 	lsl.w	r3, r2, r3
 8014426:	43da      	mvns	r2, r3
 8014428:	4b18      	ldr	r3, [pc, #96]	; (801448c <xTaskPriorityDisinherit+0x104>)
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	4013      	ands	r3, r2
 801442e:	4a17      	ldr	r2, [pc, #92]	; (801448c <xTaskPriorityDisinherit+0x104>)
 8014430:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014432:	693b      	ldr	r3, [r7, #16]
 8014434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014436:	693b      	ldr	r3, [r7, #16]
 8014438:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801443a:	693b      	ldr	r3, [r7, #16]
 801443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801443e:	f1c3 0207 	rsb	r2, r3, #7
 8014442:	693b      	ldr	r3, [r7, #16]
 8014444:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014446:	693b      	ldr	r3, [r7, #16]
 8014448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801444a:	2201      	movs	r2, #1
 801444c:	409a      	lsls	r2, r3
 801444e:	4b0f      	ldr	r3, [pc, #60]	; (801448c <xTaskPriorityDisinherit+0x104>)
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	4313      	orrs	r3, r2
 8014454:	4a0d      	ldr	r2, [pc, #52]	; (801448c <xTaskPriorityDisinherit+0x104>)
 8014456:	6013      	str	r3, [r2, #0]
 8014458:	693b      	ldr	r3, [r7, #16]
 801445a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801445c:	4613      	mov	r3, r2
 801445e:	009b      	lsls	r3, r3, #2
 8014460:	4413      	add	r3, r2
 8014462:	009b      	lsls	r3, r3, #2
 8014464:	4a08      	ldr	r2, [pc, #32]	; (8014488 <xTaskPriorityDisinherit+0x100>)
 8014466:	441a      	add	r2, r3
 8014468:	693b      	ldr	r3, [r7, #16]
 801446a:	3304      	adds	r3, #4
 801446c:	4619      	mov	r1, r3
 801446e:	4610      	mov	r0, r2
 8014470:	f7fe fbb0 	bl	8012bd4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014474:	2301      	movs	r3, #1
 8014476:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014478:	697b      	ldr	r3, [r7, #20]
	}
 801447a:	4618      	mov	r0, r3
 801447c:	3718      	adds	r7, #24
 801447e:	46bd      	mov	sp, r7
 8014480:	bd80      	pop	{r7, pc}
 8014482:	bf00      	nop
 8014484:	2000100c 	.word	0x2000100c
 8014488:	20001010 	.word	0x20001010
 801448c:	20001114 	.word	0x20001114

08014490 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8014490:	b580      	push	{r7, lr}
 8014492:	b086      	sub	sp, #24
 8014494:	af00      	add	r7, sp, #0
 8014496:	60f8      	str	r0, [r7, #12]
 8014498:	60b9      	str	r1, [r7, #8]
 801449a:	607a      	str	r2, [r7, #4]
 801449c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801449e:	f000 fb65 	bl	8014b6c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80144a2:	4b26      	ldr	r3, [pc, #152]	; (801453c <xTaskNotifyWait+0xac>)
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80144aa:	b2db      	uxtb	r3, r3
 80144ac:	2b02      	cmp	r3, #2
 80144ae:	d01a      	beq.n	80144e6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80144b0:	4b22      	ldr	r3, [pc, #136]	; (801453c <xTaskNotifyWait+0xac>)
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80144b6:	68fa      	ldr	r2, [r7, #12]
 80144b8:	43d2      	mvns	r2, r2
 80144ba:	400a      	ands	r2, r1
 80144bc:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80144be:	4b1f      	ldr	r3, [pc, #124]	; (801453c <xTaskNotifyWait+0xac>)
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	2201      	movs	r2, #1
 80144c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80144c8:	683b      	ldr	r3, [r7, #0]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d00b      	beq.n	80144e6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80144ce:	2101      	movs	r1, #1
 80144d0:	6838      	ldr	r0, [r7, #0]
 80144d2:	f000 f9c1 	bl	8014858 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80144d6:	4b1a      	ldr	r3, [pc, #104]	; (8014540 <xTaskNotifyWait+0xb0>)
 80144d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144dc:	601a      	str	r2, [r3, #0]
 80144de:	f3bf 8f4f 	dsb	sy
 80144e2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80144e6:	f000 fb6f 	bl	8014bc8 <vPortExitCritical>

		taskENTER_CRITICAL();
 80144ea:	f000 fb3f 	bl	8014b6c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d004      	beq.n	80144fe <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80144f4:	4b11      	ldr	r3, [pc, #68]	; (801453c <xTaskNotifyWait+0xac>)
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80144fe:	4b0f      	ldr	r3, [pc, #60]	; (801453c <xTaskNotifyWait+0xac>)
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014506:	b2db      	uxtb	r3, r3
 8014508:	2b02      	cmp	r3, #2
 801450a:	d002      	beq.n	8014512 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801450c:	2300      	movs	r3, #0
 801450e:	617b      	str	r3, [r7, #20]
 8014510:	e008      	b.n	8014524 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8014512:	4b0a      	ldr	r3, [pc, #40]	; (801453c <xTaskNotifyWait+0xac>)
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014518:	68ba      	ldr	r2, [r7, #8]
 801451a:	43d2      	mvns	r2, r2
 801451c:	400a      	ands	r2, r1
 801451e:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8014520:	2301      	movs	r3, #1
 8014522:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014524:	4b05      	ldr	r3, [pc, #20]	; (801453c <xTaskNotifyWait+0xac>)
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	2200      	movs	r2, #0
 801452a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 801452e:	f000 fb4b 	bl	8014bc8 <vPortExitCritical>

		return xReturn;
 8014532:	697b      	ldr	r3, [r7, #20]
	}
 8014534:	4618      	mov	r0, r3
 8014536:	3718      	adds	r7, #24
 8014538:	46bd      	mov	sp, r7
 801453a:	bd80      	pop	{r7, pc}
 801453c:	2000100c 	.word	0x2000100c
 8014540:	e000ed04 	.word	0xe000ed04

08014544 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8014544:	b580      	push	{r7, lr}
 8014546:	b08a      	sub	sp, #40	; 0x28
 8014548:	af00      	add	r7, sp, #0
 801454a:	60f8      	str	r0, [r7, #12]
 801454c:	60b9      	str	r1, [r7, #8]
 801454e:	603b      	str	r3, [r7, #0]
 8014550:	4613      	mov	r3, r2
 8014552:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8014554:	2301      	movs	r3, #1
 8014556:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d109      	bne.n	8014572 <xTaskGenericNotify+0x2e>
 801455e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014562:	f383 8811 	msr	BASEPRI, r3
 8014566:	f3bf 8f6f 	isb	sy
 801456a:	f3bf 8f4f 	dsb	sy
 801456e:	61bb      	str	r3, [r7, #24]
 8014570:	e7fe      	b.n	8014570 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8014576:	f000 faf9 	bl	8014b6c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801457a:	683b      	ldr	r3, [r7, #0]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d003      	beq.n	8014588 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014580:	6a3b      	ldr	r3, [r7, #32]
 8014582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014584:	683b      	ldr	r3, [r7, #0]
 8014586:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014588:	6a3b      	ldr	r3, [r7, #32]
 801458a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801458e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014590:	6a3b      	ldr	r3, [r7, #32]
 8014592:	2202      	movs	r2, #2
 8014594:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014598:	79fb      	ldrb	r3, [r7, #7]
 801459a:	2b04      	cmp	r3, #4
 801459c:	d827      	bhi.n	80145ee <xTaskGenericNotify+0xaa>
 801459e:	a201      	add	r2, pc, #4	; (adr r2, 80145a4 <xTaskGenericNotify+0x60>)
 80145a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145a4:	0801460d 	.word	0x0801460d
 80145a8:	080145b9 	.word	0x080145b9
 80145ac:	080145c7 	.word	0x080145c7
 80145b0:	080145d3 	.word	0x080145d3
 80145b4:	080145db 	.word	0x080145db
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80145b8:	6a3b      	ldr	r3, [r7, #32]
 80145ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80145bc:	68bb      	ldr	r3, [r7, #8]
 80145be:	431a      	orrs	r2, r3
 80145c0:	6a3b      	ldr	r3, [r7, #32]
 80145c2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80145c4:	e025      	b.n	8014612 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80145c6:	6a3b      	ldr	r3, [r7, #32]
 80145c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80145ca:	1c5a      	adds	r2, r3, #1
 80145cc:	6a3b      	ldr	r3, [r7, #32]
 80145ce:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80145d0:	e01f      	b.n	8014612 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80145d2:	6a3b      	ldr	r3, [r7, #32]
 80145d4:	68ba      	ldr	r2, [r7, #8]
 80145d6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80145d8:	e01b      	b.n	8014612 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80145da:	7ffb      	ldrb	r3, [r7, #31]
 80145dc:	2b02      	cmp	r3, #2
 80145de:	d003      	beq.n	80145e8 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80145e0:	6a3b      	ldr	r3, [r7, #32]
 80145e2:	68ba      	ldr	r2, [r7, #8]
 80145e4:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80145e6:	e014      	b.n	8014612 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 80145e8:	2300      	movs	r3, #0
 80145ea:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80145ec:	e011      	b.n	8014612 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80145ee:	6a3b      	ldr	r3, [r7, #32]
 80145f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80145f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145f6:	d00b      	beq.n	8014610 <xTaskGenericNotify+0xcc>
 80145f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145fc:	f383 8811 	msr	BASEPRI, r3
 8014600:	f3bf 8f6f 	isb	sy
 8014604:	f3bf 8f4f 	dsb	sy
 8014608:	617b      	str	r3, [r7, #20]
 801460a:	e7fe      	b.n	801460a <xTaskGenericNotify+0xc6>
					break;
 801460c:	bf00      	nop
 801460e:	e000      	b.n	8014612 <xTaskGenericNotify+0xce>

					break;
 8014610:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014612:	7ffb      	ldrb	r3, [r7, #31]
 8014614:	2b01      	cmp	r3, #1
 8014616:	d138      	bne.n	801468a <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014618:	6a3b      	ldr	r3, [r7, #32]
 801461a:	3304      	adds	r3, #4
 801461c:	4618      	mov	r0, r3
 801461e:	f7fe fb36 	bl	8012c8e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8014622:	6a3b      	ldr	r3, [r7, #32]
 8014624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014626:	2201      	movs	r2, #1
 8014628:	409a      	lsls	r2, r3
 801462a:	4b1b      	ldr	r3, [pc, #108]	; (8014698 <xTaskGenericNotify+0x154>)
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	4313      	orrs	r3, r2
 8014630:	4a19      	ldr	r2, [pc, #100]	; (8014698 <xTaskGenericNotify+0x154>)
 8014632:	6013      	str	r3, [r2, #0]
 8014634:	6a3b      	ldr	r3, [r7, #32]
 8014636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014638:	4613      	mov	r3, r2
 801463a:	009b      	lsls	r3, r3, #2
 801463c:	4413      	add	r3, r2
 801463e:	009b      	lsls	r3, r3, #2
 8014640:	4a16      	ldr	r2, [pc, #88]	; (801469c <xTaskGenericNotify+0x158>)
 8014642:	441a      	add	r2, r3
 8014644:	6a3b      	ldr	r3, [r7, #32]
 8014646:	3304      	adds	r3, #4
 8014648:	4619      	mov	r1, r3
 801464a:	4610      	mov	r0, r2
 801464c:	f7fe fac2 	bl	8012bd4 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014650:	6a3b      	ldr	r3, [r7, #32]
 8014652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014654:	2b00      	cmp	r3, #0
 8014656:	d009      	beq.n	801466c <xTaskGenericNotify+0x128>
 8014658:	f04f 0350 	mov.w	r3, #80	; 0x50
 801465c:	f383 8811 	msr	BASEPRI, r3
 8014660:	f3bf 8f6f 	isb	sy
 8014664:	f3bf 8f4f 	dsb	sy
 8014668:	613b      	str	r3, [r7, #16]
 801466a:	e7fe      	b.n	801466a <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801466c:	6a3b      	ldr	r3, [r7, #32]
 801466e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014670:	4b0b      	ldr	r3, [pc, #44]	; (80146a0 <xTaskGenericNotify+0x15c>)
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014676:	429a      	cmp	r2, r3
 8014678:	d907      	bls.n	801468a <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801467a:	4b0a      	ldr	r3, [pc, #40]	; (80146a4 <xTaskGenericNotify+0x160>)
 801467c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014680:	601a      	str	r2, [r3, #0]
 8014682:	f3bf 8f4f 	dsb	sy
 8014686:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801468a:	f000 fa9d 	bl	8014bc8 <vPortExitCritical>

		return xReturn;
 801468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014690:	4618      	mov	r0, r3
 8014692:	3728      	adds	r7, #40	; 0x28
 8014694:	46bd      	mov	sp, r7
 8014696:	bd80      	pop	{r7, pc}
 8014698:	20001114 	.word	0x20001114
 801469c:	20001010 	.word	0x20001010
 80146a0:	2000100c 	.word	0x2000100c
 80146a4:	e000ed04 	.word	0xe000ed04

080146a8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b08e      	sub	sp, #56	; 0x38
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	60f8      	str	r0, [r7, #12]
 80146b0:	60b9      	str	r1, [r7, #8]
 80146b2:	603b      	str	r3, [r7, #0]
 80146b4:	4613      	mov	r3, r2
 80146b6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80146b8:	2301      	movs	r3, #1
 80146ba:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d109      	bne.n	80146d6 <xTaskGenericNotifyFromISR+0x2e>
 80146c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146c6:	f383 8811 	msr	BASEPRI, r3
 80146ca:	f3bf 8f6f 	isb	sy
 80146ce:	f3bf 8f4f 	dsb	sy
 80146d2:	627b      	str	r3, [r7, #36]	; 0x24
 80146d4:	e7fe      	b.n	80146d4 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80146d6:	f000 fb25 	bl	8014d24 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80146de:	f3ef 8211 	mrs	r2, BASEPRI
 80146e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146e6:	f383 8811 	msr	BASEPRI, r3
 80146ea:	f3bf 8f6f 	isb	sy
 80146ee:	f3bf 8f4f 	dsb	sy
 80146f2:	623a      	str	r2, [r7, #32]
 80146f4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80146f6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80146f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80146fa:	683b      	ldr	r3, [r7, #0]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d003      	beq.n	8014708 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014702:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014704:	683b      	ldr	r3, [r7, #0]
 8014706:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801470a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801470e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014714:	2202      	movs	r2, #2
 8014716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 801471a:	79fb      	ldrb	r3, [r7, #7]
 801471c:	2b04      	cmp	r3, #4
 801471e:	d829      	bhi.n	8014774 <xTaskGenericNotifyFromISR+0xcc>
 8014720:	a201      	add	r2, pc, #4	; (adr r2, 8014728 <xTaskGenericNotifyFromISR+0x80>)
 8014722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014726:	bf00      	nop
 8014728:	08014793 	.word	0x08014793
 801472c:	0801473d 	.word	0x0801473d
 8014730:	0801474b 	.word	0x0801474b
 8014734:	08014757 	.word	0x08014757
 8014738:	0801475f 	.word	0x0801475f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801473e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014740:	68bb      	ldr	r3, [r7, #8]
 8014742:	431a      	orrs	r2, r3
 8014744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014746:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014748:	e026      	b.n	8014798 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801474c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801474e:	1c5a      	adds	r2, r3, #1
 8014750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014752:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014754:	e020      	b.n	8014798 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014758:	68ba      	ldr	r2, [r7, #8]
 801475a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801475c:	e01c      	b.n	8014798 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801475e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014762:	2b02      	cmp	r3, #2
 8014764:	d003      	beq.n	801476e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014768:	68ba      	ldr	r2, [r7, #8]
 801476a:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801476c:	e014      	b.n	8014798 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 801476e:	2300      	movs	r3, #0
 8014770:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8014772:	e011      	b.n	8014798 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014778:	f1b3 3fff 	cmp.w	r3, #4294967295
 801477c:	d00b      	beq.n	8014796 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 801477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014782:	f383 8811 	msr	BASEPRI, r3
 8014786:	f3bf 8f6f 	isb	sy
 801478a:	f3bf 8f4f 	dsb	sy
 801478e:	61bb      	str	r3, [r7, #24]
 8014790:	e7fe      	b.n	8014790 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8014792:	bf00      	nop
 8014794:	e000      	b.n	8014798 <xTaskGenericNotifyFromISR+0xf0>
					break;
 8014796:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014798:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801479c:	2b01      	cmp	r3, #1
 801479e:	d144      	bne.n	801482a <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80147a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d009      	beq.n	80147bc <xTaskGenericNotifyFromISR+0x114>
 80147a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147ac:	f383 8811 	msr	BASEPRI, r3
 80147b0:	f3bf 8f6f 	isb	sy
 80147b4:	f3bf 8f4f 	dsb	sy
 80147b8:	617b      	str	r3, [r7, #20]
 80147ba:	e7fe      	b.n	80147ba <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80147bc:	4b20      	ldr	r3, [pc, #128]	; (8014840 <xTaskGenericNotifyFromISR+0x198>)
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d11c      	bne.n	80147fe <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80147c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147c6:	3304      	adds	r3, #4
 80147c8:	4618      	mov	r0, r3
 80147ca:	f7fe fa60 	bl	8012c8e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80147ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147d2:	2201      	movs	r2, #1
 80147d4:	409a      	lsls	r2, r3
 80147d6:	4b1b      	ldr	r3, [pc, #108]	; (8014844 <xTaskGenericNotifyFromISR+0x19c>)
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	4313      	orrs	r3, r2
 80147dc:	4a19      	ldr	r2, [pc, #100]	; (8014844 <xTaskGenericNotifyFromISR+0x19c>)
 80147de:	6013      	str	r3, [r2, #0]
 80147e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147e4:	4613      	mov	r3, r2
 80147e6:	009b      	lsls	r3, r3, #2
 80147e8:	4413      	add	r3, r2
 80147ea:	009b      	lsls	r3, r3, #2
 80147ec:	4a16      	ldr	r2, [pc, #88]	; (8014848 <xTaskGenericNotifyFromISR+0x1a0>)
 80147ee:	441a      	add	r2, r3
 80147f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147f2:	3304      	adds	r3, #4
 80147f4:	4619      	mov	r1, r3
 80147f6:	4610      	mov	r0, r2
 80147f8:	f7fe f9ec 	bl	8012bd4 <vListInsertEnd>
 80147fc:	e005      	b.n	801480a <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80147fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014800:	3318      	adds	r3, #24
 8014802:	4619      	mov	r1, r3
 8014804:	4811      	ldr	r0, [pc, #68]	; (801484c <xTaskGenericNotifyFromISR+0x1a4>)
 8014806:	f7fe f9e5 	bl	8012bd4 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801480c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801480e:	4b10      	ldr	r3, [pc, #64]	; (8014850 <xTaskGenericNotifyFromISR+0x1a8>)
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014814:	429a      	cmp	r2, r3
 8014816:	d908      	bls.n	801482a <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8014818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801481a:	2b00      	cmp	r3, #0
 801481c:	d002      	beq.n	8014824 <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801481e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014820:	2201      	movs	r2, #1
 8014822:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8014824:	4b0b      	ldr	r3, [pc, #44]	; (8014854 <xTaskGenericNotifyFromISR+0x1ac>)
 8014826:	2201      	movs	r2, #1
 8014828:	601a      	str	r2, [r3, #0]
 801482a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801482c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801482e:	693b      	ldr	r3, [r7, #16]
 8014830:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8014834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8014836:	4618      	mov	r0, r3
 8014838:	3738      	adds	r7, #56	; 0x38
 801483a:	46bd      	mov	sp, r7
 801483c:	bd80      	pop	{r7, pc}
 801483e:	bf00      	nop
 8014840:	20001134 	.word	0x20001134
 8014844:	20001114 	.word	0x20001114
 8014848:	20001010 	.word	0x20001010
 801484c:	200010cc 	.word	0x200010cc
 8014850:	2000100c 	.word	0x2000100c
 8014854:	20001120 	.word	0x20001120

08014858 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b084      	sub	sp, #16
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]
 8014860:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014862:	4b29      	ldr	r3, [pc, #164]	; (8014908 <prvAddCurrentTaskToDelayedList+0xb0>)
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014868:	4b28      	ldr	r3, [pc, #160]	; (801490c <prvAddCurrentTaskToDelayedList+0xb4>)
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	3304      	adds	r3, #4
 801486e:	4618      	mov	r0, r3
 8014870:	f7fe fa0d 	bl	8012c8e <uxListRemove>
 8014874:	4603      	mov	r3, r0
 8014876:	2b00      	cmp	r3, #0
 8014878:	d10b      	bne.n	8014892 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801487a:	4b24      	ldr	r3, [pc, #144]	; (801490c <prvAddCurrentTaskToDelayedList+0xb4>)
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014880:	2201      	movs	r2, #1
 8014882:	fa02 f303 	lsl.w	r3, r2, r3
 8014886:	43da      	mvns	r2, r3
 8014888:	4b21      	ldr	r3, [pc, #132]	; (8014910 <prvAddCurrentTaskToDelayedList+0xb8>)
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	4013      	ands	r3, r2
 801488e:	4a20      	ldr	r2, [pc, #128]	; (8014910 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014890:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014898:	d10a      	bne.n	80148b0 <prvAddCurrentTaskToDelayedList+0x58>
 801489a:	683b      	ldr	r3, [r7, #0]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d007      	beq.n	80148b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80148a0:	4b1a      	ldr	r3, [pc, #104]	; (801490c <prvAddCurrentTaskToDelayedList+0xb4>)
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	3304      	adds	r3, #4
 80148a6:	4619      	mov	r1, r3
 80148a8:	481a      	ldr	r0, [pc, #104]	; (8014914 <prvAddCurrentTaskToDelayedList+0xbc>)
 80148aa:	f7fe f993 	bl	8012bd4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80148ae:	e026      	b.n	80148fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80148b0:	68fa      	ldr	r2, [r7, #12]
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	4413      	add	r3, r2
 80148b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80148b8:	4b14      	ldr	r3, [pc, #80]	; (801490c <prvAddCurrentTaskToDelayedList+0xb4>)
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	68ba      	ldr	r2, [r7, #8]
 80148be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80148c0:	68ba      	ldr	r2, [r7, #8]
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	429a      	cmp	r2, r3
 80148c6:	d209      	bcs.n	80148dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80148c8:	4b13      	ldr	r3, [pc, #76]	; (8014918 <prvAddCurrentTaskToDelayedList+0xc0>)
 80148ca:	681a      	ldr	r2, [r3, #0]
 80148cc:	4b0f      	ldr	r3, [pc, #60]	; (801490c <prvAddCurrentTaskToDelayedList+0xb4>)
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	3304      	adds	r3, #4
 80148d2:	4619      	mov	r1, r3
 80148d4:	4610      	mov	r0, r2
 80148d6:	f7fe f9a1 	bl	8012c1c <vListInsert>
}
 80148da:	e010      	b.n	80148fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80148dc:	4b0f      	ldr	r3, [pc, #60]	; (801491c <prvAddCurrentTaskToDelayedList+0xc4>)
 80148de:	681a      	ldr	r2, [r3, #0]
 80148e0:	4b0a      	ldr	r3, [pc, #40]	; (801490c <prvAddCurrentTaskToDelayedList+0xb4>)
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	3304      	adds	r3, #4
 80148e6:	4619      	mov	r1, r3
 80148e8:	4610      	mov	r0, r2
 80148ea:	f7fe f997 	bl	8012c1c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80148ee:	4b0c      	ldr	r3, [pc, #48]	; (8014920 <prvAddCurrentTaskToDelayedList+0xc8>)
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	68ba      	ldr	r2, [r7, #8]
 80148f4:	429a      	cmp	r2, r3
 80148f6:	d202      	bcs.n	80148fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80148f8:	4a09      	ldr	r2, [pc, #36]	; (8014920 <prvAddCurrentTaskToDelayedList+0xc8>)
 80148fa:	68bb      	ldr	r3, [r7, #8]
 80148fc:	6013      	str	r3, [r2, #0]
}
 80148fe:	bf00      	nop
 8014900:	3710      	adds	r7, #16
 8014902:	46bd      	mov	sp, r7
 8014904:	bd80      	pop	{r7, pc}
 8014906:	bf00      	nop
 8014908:	20001110 	.word	0x20001110
 801490c:	2000100c 	.word	0x2000100c
 8014910:	20001114 	.word	0x20001114
 8014914:	200010f8 	.word	0x200010f8
 8014918:	200010c8 	.word	0x200010c8
 801491c:	200010c4 	.word	0x200010c4
 8014920:	2000112c 	.word	0x2000112c

08014924 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014924:	b480      	push	{r7}
 8014926:	b085      	sub	sp, #20
 8014928:	af00      	add	r7, sp, #0
 801492a:	60f8      	str	r0, [r7, #12]
 801492c:	60b9      	str	r1, [r7, #8]
 801492e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	3b04      	subs	r3, #4
 8014934:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801493c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	3b04      	subs	r3, #4
 8014942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014944:	68bb      	ldr	r3, [r7, #8]
 8014946:	f023 0201 	bic.w	r2, r3, #1
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	3b04      	subs	r3, #4
 8014952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014954:	4a0c      	ldr	r2, [pc, #48]	; (8014988 <pxPortInitialiseStack+0x64>)
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	3b14      	subs	r3, #20
 801495e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014960:	687a      	ldr	r2, [r7, #4]
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	3b04      	subs	r3, #4
 801496a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	f06f 0202 	mvn.w	r2, #2
 8014972:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	3b20      	subs	r3, #32
 8014978:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801497a:	68fb      	ldr	r3, [r7, #12]
}
 801497c:	4618      	mov	r0, r3
 801497e:	3714      	adds	r7, #20
 8014980:	46bd      	mov	sp, r7
 8014982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014986:	4770      	bx	lr
 8014988:	0801498d 	.word	0x0801498d

0801498c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801498c:	b480      	push	{r7}
 801498e:	b085      	sub	sp, #20
 8014990:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014992:	2300      	movs	r3, #0
 8014994:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014996:	4b11      	ldr	r3, [pc, #68]	; (80149dc <prvTaskExitError+0x50>)
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801499e:	d009      	beq.n	80149b4 <prvTaskExitError+0x28>
	__asm volatile
 80149a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149a4:	f383 8811 	msr	BASEPRI, r3
 80149a8:	f3bf 8f6f 	isb	sy
 80149ac:	f3bf 8f4f 	dsb	sy
 80149b0:	60fb      	str	r3, [r7, #12]
 80149b2:	e7fe      	b.n	80149b2 <prvTaskExitError+0x26>
 80149b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149b8:	f383 8811 	msr	BASEPRI, r3
 80149bc:	f3bf 8f6f 	isb	sy
 80149c0:	f3bf 8f4f 	dsb	sy
 80149c4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80149c6:	bf00      	nop
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d0fc      	beq.n	80149c8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80149ce:	bf00      	nop
 80149d0:	3714      	adds	r7, #20
 80149d2:	46bd      	mov	sp, r7
 80149d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d8:	4770      	bx	lr
 80149da:	bf00      	nop
 80149dc:	20000944 	.word	0x20000944

080149e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80149e0:	4b07      	ldr	r3, [pc, #28]	; (8014a00 <pxCurrentTCBConst2>)
 80149e2:	6819      	ldr	r1, [r3, #0]
 80149e4:	6808      	ldr	r0, [r1, #0]
 80149e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149ea:	f380 8809 	msr	PSP, r0
 80149ee:	f3bf 8f6f 	isb	sy
 80149f2:	f04f 0000 	mov.w	r0, #0
 80149f6:	f380 8811 	msr	BASEPRI, r0
 80149fa:	4770      	bx	lr
 80149fc:	f3af 8000 	nop.w

08014a00 <pxCurrentTCBConst2>:
 8014a00:	2000100c 	.word	0x2000100c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014a04:	bf00      	nop
 8014a06:	bf00      	nop

08014a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014a08:	4808      	ldr	r0, [pc, #32]	; (8014a2c <prvPortStartFirstTask+0x24>)
 8014a0a:	6800      	ldr	r0, [r0, #0]
 8014a0c:	6800      	ldr	r0, [r0, #0]
 8014a0e:	f380 8808 	msr	MSP, r0
 8014a12:	f04f 0000 	mov.w	r0, #0
 8014a16:	f380 8814 	msr	CONTROL, r0
 8014a1a:	b662      	cpsie	i
 8014a1c:	b661      	cpsie	f
 8014a1e:	f3bf 8f4f 	dsb	sy
 8014a22:	f3bf 8f6f 	isb	sy
 8014a26:	df00      	svc	0
 8014a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014a2a:	bf00      	nop
 8014a2c:	e000ed08 	.word	0xe000ed08

08014a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b086      	sub	sp, #24
 8014a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014a36:	4b44      	ldr	r3, [pc, #272]	; (8014b48 <xPortStartScheduler+0x118>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	4a44      	ldr	r2, [pc, #272]	; (8014b4c <xPortStartScheduler+0x11c>)
 8014a3c:	4293      	cmp	r3, r2
 8014a3e:	d109      	bne.n	8014a54 <xPortStartScheduler+0x24>
 8014a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a44:	f383 8811 	msr	BASEPRI, r3
 8014a48:	f3bf 8f6f 	isb	sy
 8014a4c:	f3bf 8f4f 	dsb	sy
 8014a50:	613b      	str	r3, [r7, #16]
 8014a52:	e7fe      	b.n	8014a52 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014a54:	4b3c      	ldr	r3, [pc, #240]	; (8014b48 <xPortStartScheduler+0x118>)
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	4a3d      	ldr	r2, [pc, #244]	; (8014b50 <xPortStartScheduler+0x120>)
 8014a5a:	4293      	cmp	r3, r2
 8014a5c:	d109      	bne.n	8014a72 <xPortStartScheduler+0x42>
 8014a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a62:	f383 8811 	msr	BASEPRI, r3
 8014a66:	f3bf 8f6f 	isb	sy
 8014a6a:	f3bf 8f4f 	dsb	sy
 8014a6e:	60fb      	str	r3, [r7, #12]
 8014a70:	e7fe      	b.n	8014a70 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014a72:	4b38      	ldr	r3, [pc, #224]	; (8014b54 <xPortStartScheduler+0x124>)
 8014a74:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014a76:	697b      	ldr	r3, [r7, #20]
 8014a78:	781b      	ldrb	r3, [r3, #0]
 8014a7a:	b2db      	uxtb	r3, r3
 8014a7c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014a7e:	697b      	ldr	r3, [r7, #20]
 8014a80:	22ff      	movs	r2, #255	; 0xff
 8014a82:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014a84:	697b      	ldr	r3, [r7, #20]
 8014a86:	781b      	ldrb	r3, [r3, #0]
 8014a88:	b2db      	uxtb	r3, r3
 8014a8a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014a8c:	78fb      	ldrb	r3, [r7, #3]
 8014a8e:	b2db      	uxtb	r3, r3
 8014a90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014a94:	b2da      	uxtb	r2, r3
 8014a96:	4b30      	ldr	r3, [pc, #192]	; (8014b58 <xPortStartScheduler+0x128>)
 8014a98:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014a9a:	4b30      	ldr	r3, [pc, #192]	; (8014b5c <xPortStartScheduler+0x12c>)
 8014a9c:	2207      	movs	r2, #7
 8014a9e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014aa0:	e009      	b.n	8014ab6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8014aa2:	4b2e      	ldr	r3, [pc, #184]	; (8014b5c <xPortStartScheduler+0x12c>)
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	3b01      	subs	r3, #1
 8014aa8:	4a2c      	ldr	r2, [pc, #176]	; (8014b5c <xPortStartScheduler+0x12c>)
 8014aaa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014aac:	78fb      	ldrb	r3, [r7, #3]
 8014aae:	b2db      	uxtb	r3, r3
 8014ab0:	005b      	lsls	r3, r3, #1
 8014ab2:	b2db      	uxtb	r3, r3
 8014ab4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014ab6:	78fb      	ldrb	r3, [r7, #3]
 8014ab8:	b2db      	uxtb	r3, r3
 8014aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014abe:	2b80      	cmp	r3, #128	; 0x80
 8014ac0:	d0ef      	beq.n	8014aa2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014ac2:	4b26      	ldr	r3, [pc, #152]	; (8014b5c <xPortStartScheduler+0x12c>)
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	f1c3 0307 	rsb	r3, r3, #7
 8014aca:	2b04      	cmp	r3, #4
 8014acc:	d009      	beq.n	8014ae2 <xPortStartScheduler+0xb2>
 8014ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ad2:	f383 8811 	msr	BASEPRI, r3
 8014ad6:	f3bf 8f6f 	isb	sy
 8014ada:	f3bf 8f4f 	dsb	sy
 8014ade:	60bb      	str	r3, [r7, #8]
 8014ae0:	e7fe      	b.n	8014ae0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014ae2:	4b1e      	ldr	r3, [pc, #120]	; (8014b5c <xPortStartScheduler+0x12c>)
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	021b      	lsls	r3, r3, #8
 8014ae8:	4a1c      	ldr	r2, [pc, #112]	; (8014b5c <xPortStartScheduler+0x12c>)
 8014aea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014aec:	4b1b      	ldr	r3, [pc, #108]	; (8014b5c <xPortStartScheduler+0x12c>)
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014af4:	4a19      	ldr	r2, [pc, #100]	; (8014b5c <xPortStartScheduler+0x12c>)
 8014af6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	b2da      	uxtb	r2, r3
 8014afc:	697b      	ldr	r3, [r7, #20]
 8014afe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014b00:	4b17      	ldr	r3, [pc, #92]	; (8014b60 <xPortStartScheduler+0x130>)
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	4a16      	ldr	r2, [pc, #88]	; (8014b60 <xPortStartScheduler+0x130>)
 8014b06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014b0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014b0c:	4b14      	ldr	r3, [pc, #80]	; (8014b60 <xPortStartScheduler+0x130>)
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	4a13      	ldr	r2, [pc, #76]	; (8014b60 <xPortStartScheduler+0x130>)
 8014b12:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014b16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014b18:	f000 f8d6 	bl	8014cc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014b1c:	4b11      	ldr	r3, [pc, #68]	; (8014b64 <xPortStartScheduler+0x134>)
 8014b1e:	2200      	movs	r2, #0
 8014b20:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014b22:	f000 f8f5 	bl	8014d10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014b26:	4b10      	ldr	r3, [pc, #64]	; (8014b68 <xPortStartScheduler+0x138>)
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	4a0f      	ldr	r2, [pc, #60]	; (8014b68 <xPortStartScheduler+0x138>)
 8014b2c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014b30:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014b32:	f7ff ff69 	bl	8014a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014b36:	f7ff f9d5 	bl	8013ee4 <vTaskSwitchContext>
	prvTaskExitError();
 8014b3a:	f7ff ff27 	bl	801498c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014b3e:	2300      	movs	r3, #0
}
 8014b40:	4618      	mov	r0, r3
 8014b42:	3718      	adds	r7, #24
 8014b44:	46bd      	mov	sp, r7
 8014b46:	bd80      	pop	{r7, pc}
 8014b48:	e000ed00 	.word	0xe000ed00
 8014b4c:	410fc271 	.word	0x410fc271
 8014b50:	410fc270 	.word	0x410fc270
 8014b54:	e000e400 	.word	0xe000e400
 8014b58:	20001138 	.word	0x20001138
 8014b5c:	2000113c 	.word	0x2000113c
 8014b60:	e000ed20 	.word	0xe000ed20
 8014b64:	20000944 	.word	0x20000944
 8014b68:	e000ef34 	.word	0xe000ef34

08014b6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014b6c:	b480      	push	{r7}
 8014b6e:	b083      	sub	sp, #12
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b76:	f383 8811 	msr	BASEPRI, r3
 8014b7a:	f3bf 8f6f 	isb	sy
 8014b7e:	f3bf 8f4f 	dsb	sy
 8014b82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014b84:	4b0e      	ldr	r3, [pc, #56]	; (8014bc0 <vPortEnterCritical+0x54>)
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	3301      	adds	r3, #1
 8014b8a:	4a0d      	ldr	r2, [pc, #52]	; (8014bc0 <vPortEnterCritical+0x54>)
 8014b8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014b8e:	4b0c      	ldr	r3, [pc, #48]	; (8014bc0 <vPortEnterCritical+0x54>)
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	2b01      	cmp	r3, #1
 8014b94:	d10e      	bne.n	8014bb4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014b96:	4b0b      	ldr	r3, [pc, #44]	; (8014bc4 <vPortEnterCritical+0x58>)
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	b2db      	uxtb	r3, r3
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d009      	beq.n	8014bb4 <vPortEnterCritical+0x48>
 8014ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ba4:	f383 8811 	msr	BASEPRI, r3
 8014ba8:	f3bf 8f6f 	isb	sy
 8014bac:	f3bf 8f4f 	dsb	sy
 8014bb0:	603b      	str	r3, [r7, #0]
 8014bb2:	e7fe      	b.n	8014bb2 <vPortEnterCritical+0x46>
	}
}
 8014bb4:	bf00      	nop
 8014bb6:	370c      	adds	r7, #12
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bbe:	4770      	bx	lr
 8014bc0:	20000944 	.word	0x20000944
 8014bc4:	e000ed04 	.word	0xe000ed04

08014bc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014bc8:	b480      	push	{r7}
 8014bca:	b083      	sub	sp, #12
 8014bcc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014bce:	4b11      	ldr	r3, [pc, #68]	; (8014c14 <vPortExitCritical+0x4c>)
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d109      	bne.n	8014bea <vPortExitCritical+0x22>
 8014bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bda:	f383 8811 	msr	BASEPRI, r3
 8014bde:	f3bf 8f6f 	isb	sy
 8014be2:	f3bf 8f4f 	dsb	sy
 8014be6:	607b      	str	r3, [r7, #4]
 8014be8:	e7fe      	b.n	8014be8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8014bea:	4b0a      	ldr	r3, [pc, #40]	; (8014c14 <vPortExitCritical+0x4c>)
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	3b01      	subs	r3, #1
 8014bf0:	4a08      	ldr	r2, [pc, #32]	; (8014c14 <vPortExitCritical+0x4c>)
 8014bf2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014bf4:	4b07      	ldr	r3, [pc, #28]	; (8014c14 <vPortExitCritical+0x4c>)
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d104      	bne.n	8014c06 <vPortExitCritical+0x3e>
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014c00:	683b      	ldr	r3, [r7, #0]
 8014c02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014c06:	bf00      	nop
 8014c08:	370c      	adds	r7, #12
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c10:	4770      	bx	lr
 8014c12:	bf00      	nop
 8014c14:	20000944 	.word	0x20000944
	...

08014c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014c20:	f3ef 8009 	mrs	r0, PSP
 8014c24:	f3bf 8f6f 	isb	sy
 8014c28:	4b15      	ldr	r3, [pc, #84]	; (8014c80 <pxCurrentTCBConst>)
 8014c2a:	681a      	ldr	r2, [r3, #0]
 8014c2c:	f01e 0f10 	tst.w	lr, #16
 8014c30:	bf08      	it	eq
 8014c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c3a:	6010      	str	r0, [r2, #0]
 8014c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014c44:	f380 8811 	msr	BASEPRI, r0
 8014c48:	f3bf 8f4f 	dsb	sy
 8014c4c:	f3bf 8f6f 	isb	sy
 8014c50:	f7ff f948 	bl	8013ee4 <vTaskSwitchContext>
 8014c54:	f04f 0000 	mov.w	r0, #0
 8014c58:	f380 8811 	msr	BASEPRI, r0
 8014c5c:	bc09      	pop	{r0, r3}
 8014c5e:	6819      	ldr	r1, [r3, #0]
 8014c60:	6808      	ldr	r0, [r1, #0]
 8014c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c66:	f01e 0f10 	tst.w	lr, #16
 8014c6a:	bf08      	it	eq
 8014c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014c70:	f380 8809 	msr	PSP, r0
 8014c74:	f3bf 8f6f 	isb	sy
 8014c78:	4770      	bx	lr
 8014c7a:	bf00      	nop
 8014c7c:	f3af 8000 	nop.w

08014c80 <pxCurrentTCBConst>:
 8014c80:	2000100c 	.word	0x2000100c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014c84:	bf00      	nop
 8014c86:	bf00      	nop

08014c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014c88:	b580      	push	{r7, lr}
 8014c8a:	b082      	sub	sp, #8
 8014c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8014c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c92:	f383 8811 	msr	BASEPRI, r3
 8014c96:	f3bf 8f6f 	isb	sy
 8014c9a:	f3bf 8f4f 	dsb	sy
 8014c9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014ca0:	f7ff f868 	bl	8013d74 <xTaskIncrementTick>
 8014ca4:	4603      	mov	r3, r0
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d003      	beq.n	8014cb2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014caa:	4b06      	ldr	r3, [pc, #24]	; (8014cc4 <SysTick_Handler+0x3c>)
 8014cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014cb0:	601a      	str	r2, [r3, #0]
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014cb6:	683b      	ldr	r3, [r7, #0]
 8014cb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8014cbc:	bf00      	nop
 8014cbe:	3708      	adds	r7, #8
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	bd80      	pop	{r7, pc}
 8014cc4:	e000ed04 	.word	0xe000ed04

08014cc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014cc8:	b480      	push	{r7}
 8014cca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014ccc:	4b0b      	ldr	r3, [pc, #44]	; (8014cfc <vPortSetupTimerInterrupt+0x34>)
 8014cce:	2200      	movs	r2, #0
 8014cd0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014cd2:	4b0b      	ldr	r3, [pc, #44]	; (8014d00 <vPortSetupTimerInterrupt+0x38>)
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014cd8:	4b0a      	ldr	r3, [pc, #40]	; (8014d04 <vPortSetupTimerInterrupt+0x3c>)
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	4a0a      	ldr	r2, [pc, #40]	; (8014d08 <vPortSetupTimerInterrupt+0x40>)
 8014cde:	fba2 2303 	umull	r2, r3, r2, r3
 8014ce2:	099b      	lsrs	r3, r3, #6
 8014ce4:	4a09      	ldr	r2, [pc, #36]	; (8014d0c <vPortSetupTimerInterrupt+0x44>)
 8014ce6:	3b01      	subs	r3, #1
 8014ce8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014cea:	4b04      	ldr	r3, [pc, #16]	; (8014cfc <vPortSetupTimerInterrupt+0x34>)
 8014cec:	2207      	movs	r2, #7
 8014cee:	601a      	str	r2, [r3, #0]
}
 8014cf0:	bf00      	nop
 8014cf2:	46bd      	mov	sp, r7
 8014cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf8:	4770      	bx	lr
 8014cfa:	bf00      	nop
 8014cfc:	e000e010 	.word	0xe000e010
 8014d00:	e000e018 	.word	0xe000e018
 8014d04:	20000828 	.word	0x20000828
 8014d08:	10624dd3 	.word	0x10624dd3
 8014d0c:	e000e014 	.word	0xe000e014

08014d10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014d10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014d20 <vPortEnableVFP+0x10>
 8014d14:	6801      	ldr	r1, [r0, #0]
 8014d16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014d1a:	6001      	str	r1, [r0, #0]
 8014d1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014d1e:	bf00      	nop
 8014d20:	e000ed88 	.word	0xe000ed88

08014d24 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014d24:	b480      	push	{r7}
 8014d26:	b085      	sub	sp, #20
 8014d28:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014d2a:	f3ef 8305 	mrs	r3, IPSR
 8014d2e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	2b0f      	cmp	r3, #15
 8014d34:	d913      	bls.n	8014d5e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014d36:	4a16      	ldr	r2, [pc, #88]	; (8014d90 <vPortValidateInterruptPriority+0x6c>)
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	4413      	add	r3, r2
 8014d3c:	781b      	ldrb	r3, [r3, #0]
 8014d3e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014d40:	4b14      	ldr	r3, [pc, #80]	; (8014d94 <vPortValidateInterruptPriority+0x70>)
 8014d42:	781b      	ldrb	r3, [r3, #0]
 8014d44:	7afa      	ldrb	r2, [r7, #11]
 8014d46:	429a      	cmp	r2, r3
 8014d48:	d209      	bcs.n	8014d5e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8014d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d4e:	f383 8811 	msr	BASEPRI, r3
 8014d52:	f3bf 8f6f 	isb	sy
 8014d56:	f3bf 8f4f 	dsb	sy
 8014d5a:	607b      	str	r3, [r7, #4]
 8014d5c:	e7fe      	b.n	8014d5c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014d5e:	4b0e      	ldr	r3, [pc, #56]	; (8014d98 <vPortValidateInterruptPriority+0x74>)
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014d66:	4b0d      	ldr	r3, [pc, #52]	; (8014d9c <vPortValidateInterruptPriority+0x78>)
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	429a      	cmp	r2, r3
 8014d6c:	d909      	bls.n	8014d82 <vPortValidateInterruptPriority+0x5e>
 8014d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d72:	f383 8811 	msr	BASEPRI, r3
 8014d76:	f3bf 8f6f 	isb	sy
 8014d7a:	f3bf 8f4f 	dsb	sy
 8014d7e:	603b      	str	r3, [r7, #0]
 8014d80:	e7fe      	b.n	8014d80 <vPortValidateInterruptPriority+0x5c>
	}
 8014d82:	bf00      	nop
 8014d84:	3714      	adds	r7, #20
 8014d86:	46bd      	mov	sp, r7
 8014d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8c:	4770      	bx	lr
 8014d8e:	bf00      	nop
 8014d90:	e000e3f0 	.word	0xe000e3f0
 8014d94:	20001138 	.word	0x20001138
 8014d98:	e000ed0c 	.word	0xe000ed0c
 8014d9c:	2000113c 	.word	0x2000113c

08014da0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b08a      	sub	sp, #40	; 0x28
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014da8:	2300      	movs	r3, #0
 8014daa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014dac:	f7fe ff38 	bl	8013c20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014db0:	4b57      	ldr	r3, [pc, #348]	; (8014f10 <pvPortMalloc+0x170>)
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d101      	bne.n	8014dbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014db8:	f000 f90c 	bl	8014fd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014dbc:	4b55      	ldr	r3, [pc, #340]	; (8014f14 <pvPortMalloc+0x174>)
 8014dbe:	681a      	ldr	r2, [r3, #0]
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	4013      	ands	r3, r2
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	f040 808c 	bne.w	8014ee2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d01c      	beq.n	8014e0a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8014dd0:	2208      	movs	r2, #8
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	4413      	add	r3, r2
 8014dd6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	f003 0307 	and.w	r3, r3, #7
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d013      	beq.n	8014e0a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	f023 0307 	bic.w	r3, r3, #7
 8014de8:	3308      	adds	r3, #8
 8014dea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	f003 0307 	and.w	r3, r3, #7
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d009      	beq.n	8014e0a <pvPortMalloc+0x6a>
 8014df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dfa:	f383 8811 	msr	BASEPRI, r3
 8014dfe:	f3bf 8f6f 	isb	sy
 8014e02:	f3bf 8f4f 	dsb	sy
 8014e06:	617b      	str	r3, [r7, #20]
 8014e08:	e7fe      	b.n	8014e08 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d068      	beq.n	8014ee2 <pvPortMalloc+0x142>
 8014e10:	4b41      	ldr	r3, [pc, #260]	; (8014f18 <pvPortMalloc+0x178>)
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	687a      	ldr	r2, [r7, #4]
 8014e16:	429a      	cmp	r2, r3
 8014e18:	d863      	bhi.n	8014ee2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014e1a:	4b40      	ldr	r3, [pc, #256]	; (8014f1c <pvPortMalloc+0x17c>)
 8014e1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014e1e:	4b3f      	ldr	r3, [pc, #252]	; (8014f1c <pvPortMalloc+0x17c>)
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014e24:	e004      	b.n	8014e30 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8014e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e32:	685b      	ldr	r3, [r3, #4]
 8014e34:	687a      	ldr	r2, [r7, #4]
 8014e36:	429a      	cmp	r2, r3
 8014e38:	d903      	bls.n	8014e42 <pvPortMalloc+0xa2>
 8014e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d1f1      	bne.n	8014e26 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014e42:	4b33      	ldr	r3, [pc, #204]	; (8014f10 <pvPortMalloc+0x170>)
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e48:	429a      	cmp	r2, r3
 8014e4a:	d04a      	beq.n	8014ee2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014e4c:	6a3b      	ldr	r3, [r7, #32]
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	2208      	movs	r2, #8
 8014e52:	4413      	add	r3, r2
 8014e54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e58:	681a      	ldr	r2, [r3, #0]
 8014e5a:	6a3b      	ldr	r3, [r7, #32]
 8014e5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e60:	685a      	ldr	r2, [r3, #4]
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	1ad2      	subs	r2, r2, r3
 8014e66:	2308      	movs	r3, #8
 8014e68:	005b      	lsls	r3, r3, #1
 8014e6a:	429a      	cmp	r2, r3
 8014e6c:	d91e      	bls.n	8014eac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	4413      	add	r3, r2
 8014e74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014e76:	69bb      	ldr	r3, [r7, #24]
 8014e78:	f003 0307 	and.w	r3, r3, #7
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d009      	beq.n	8014e94 <pvPortMalloc+0xf4>
 8014e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e84:	f383 8811 	msr	BASEPRI, r3
 8014e88:	f3bf 8f6f 	isb	sy
 8014e8c:	f3bf 8f4f 	dsb	sy
 8014e90:	613b      	str	r3, [r7, #16]
 8014e92:	e7fe      	b.n	8014e92 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e96:	685a      	ldr	r2, [r3, #4]
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	1ad2      	subs	r2, r2, r3
 8014e9c:	69bb      	ldr	r3, [r7, #24]
 8014e9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ea2:	687a      	ldr	r2, [r7, #4]
 8014ea4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014ea6:	69b8      	ldr	r0, [r7, #24]
 8014ea8:	f000 f8f6 	bl	8015098 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014eac:	4b1a      	ldr	r3, [pc, #104]	; (8014f18 <pvPortMalloc+0x178>)
 8014eae:	681a      	ldr	r2, [r3, #0]
 8014eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eb2:	685b      	ldr	r3, [r3, #4]
 8014eb4:	1ad3      	subs	r3, r2, r3
 8014eb6:	4a18      	ldr	r2, [pc, #96]	; (8014f18 <pvPortMalloc+0x178>)
 8014eb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014eba:	4b17      	ldr	r3, [pc, #92]	; (8014f18 <pvPortMalloc+0x178>)
 8014ebc:	681a      	ldr	r2, [r3, #0]
 8014ebe:	4b18      	ldr	r3, [pc, #96]	; (8014f20 <pvPortMalloc+0x180>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	429a      	cmp	r2, r3
 8014ec4:	d203      	bcs.n	8014ece <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014ec6:	4b14      	ldr	r3, [pc, #80]	; (8014f18 <pvPortMalloc+0x178>)
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	4a15      	ldr	r2, [pc, #84]	; (8014f20 <pvPortMalloc+0x180>)
 8014ecc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ed0:	685a      	ldr	r2, [r3, #4]
 8014ed2:	4b10      	ldr	r3, [pc, #64]	; (8014f14 <pvPortMalloc+0x174>)
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	431a      	orrs	r2, r3
 8014ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ede:	2200      	movs	r2, #0
 8014ee0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014ee2:	f7fe feab 	bl	8013c3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014ee6:	69fb      	ldr	r3, [r7, #28]
 8014ee8:	f003 0307 	and.w	r3, r3, #7
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d009      	beq.n	8014f04 <pvPortMalloc+0x164>
 8014ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ef4:	f383 8811 	msr	BASEPRI, r3
 8014ef8:	f3bf 8f6f 	isb	sy
 8014efc:	f3bf 8f4f 	dsb	sy
 8014f00:	60fb      	str	r3, [r7, #12]
 8014f02:	e7fe      	b.n	8014f02 <pvPortMalloc+0x162>
	return pvReturn;
 8014f04:	69fb      	ldr	r3, [r7, #28]
}
 8014f06:	4618      	mov	r0, r3
 8014f08:	3728      	adds	r7, #40	; 0x28
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	bd80      	pop	{r7, pc}
 8014f0e:	bf00      	nop
 8014f10:	20004d48 	.word	0x20004d48
 8014f14:	20004d54 	.word	0x20004d54
 8014f18:	20004d4c 	.word	0x20004d4c
 8014f1c:	20004d40 	.word	0x20004d40
 8014f20:	20004d50 	.word	0x20004d50

08014f24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	b086      	sub	sp, #24
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d046      	beq.n	8014fc4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014f36:	2308      	movs	r3, #8
 8014f38:	425b      	negs	r3, r3
 8014f3a:	697a      	ldr	r2, [r7, #20]
 8014f3c:	4413      	add	r3, r2
 8014f3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014f40:	697b      	ldr	r3, [r7, #20]
 8014f42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014f44:	693b      	ldr	r3, [r7, #16]
 8014f46:	685a      	ldr	r2, [r3, #4]
 8014f48:	4b20      	ldr	r3, [pc, #128]	; (8014fcc <vPortFree+0xa8>)
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	4013      	ands	r3, r2
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d109      	bne.n	8014f66 <vPortFree+0x42>
 8014f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f56:	f383 8811 	msr	BASEPRI, r3
 8014f5a:	f3bf 8f6f 	isb	sy
 8014f5e:	f3bf 8f4f 	dsb	sy
 8014f62:	60fb      	str	r3, [r7, #12]
 8014f64:	e7fe      	b.n	8014f64 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014f66:	693b      	ldr	r3, [r7, #16]
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d009      	beq.n	8014f82 <vPortFree+0x5e>
 8014f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f72:	f383 8811 	msr	BASEPRI, r3
 8014f76:	f3bf 8f6f 	isb	sy
 8014f7a:	f3bf 8f4f 	dsb	sy
 8014f7e:	60bb      	str	r3, [r7, #8]
 8014f80:	e7fe      	b.n	8014f80 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014f82:	693b      	ldr	r3, [r7, #16]
 8014f84:	685a      	ldr	r2, [r3, #4]
 8014f86:	4b11      	ldr	r3, [pc, #68]	; (8014fcc <vPortFree+0xa8>)
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	4013      	ands	r3, r2
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d019      	beq.n	8014fc4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014f90:	693b      	ldr	r3, [r7, #16]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d115      	bne.n	8014fc4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014f98:	693b      	ldr	r3, [r7, #16]
 8014f9a:	685a      	ldr	r2, [r3, #4]
 8014f9c:	4b0b      	ldr	r3, [pc, #44]	; (8014fcc <vPortFree+0xa8>)
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	43db      	mvns	r3, r3
 8014fa2:	401a      	ands	r2, r3
 8014fa4:	693b      	ldr	r3, [r7, #16]
 8014fa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014fa8:	f7fe fe3a 	bl	8013c20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014fac:	693b      	ldr	r3, [r7, #16]
 8014fae:	685a      	ldr	r2, [r3, #4]
 8014fb0:	4b07      	ldr	r3, [pc, #28]	; (8014fd0 <vPortFree+0xac>)
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	4413      	add	r3, r2
 8014fb6:	4a06      	ldr	r2, [pc, #24]	; (8014fd0 <vPortFree+0xac>)
 8014fb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014fba:	6938      	ldr	r0, [r7, #16]
 8014fbc:	f000 f86c 	bl	8015098 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014fc0:	f7fe fe3c 	bl	8013c3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014fc4:	bf00      	nop
 8014fc6:	3718      	adds	r7, #24
 8014fc8:	46bd      	mov	sp, r7
 8014fca:	bd80      	pop	{r7, pc}
 8014fcc:	20004d54 	.word	0x20004d54
 8014fd0:	20004d4c 	.word	0x20004d4c

08014fd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014fd4:	b480      	push	{r7}
 8014fd6:	b085      	sub	sp, #20
 8014fd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014fda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8014fde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014fe0:	4b27      	ldr	r3, [pc, #156]	; (8015080 <prvHeapInit+0xac>)
 8014fe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	f003 0307 	and.w	r3, r3, #7
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d00c      	beq.n	8015008 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	3307      	adds	r3, #7
 8014ff2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	f023 0307 	bic.w	r3, r3, #7
 8014ffa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014ffc:	68ba      	ldr	r2, [r7, #8]
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	1ad3      	subs	r3, r2, r3
 8015002:	4a1f      	ldr	r2, [pc, #124]	; (8015080 <prvHeapInit+0xac>)
 8015004:	4413      	add	r3, r2
 8015006:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801500c:	4a1d      	ldr	r2, [pc, #116]	; (8015084 <prvHeapInit+0xb0>)
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015012:	4b1c      	ldr	r3, [pc, #112]	; (8015084 <prvHeapInit+0xb0>)
 8015014:	2200      	movs	r2, #0
 8015016:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	68ba      	ldr	r2, [r7, #8]
 801501c:	4413      	add	r3, r2
 801501e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015020:	2208      	movs	r2, #8
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	1a9b      	subs	r3, r3, r2
 8015026:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	f023 0307 	bic.w	r3, r3, #7
 801502e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	4a15      	ldr	r2, [pc, #84]	; (8015088 <prvHeapInit+0xb4>)
 8015034:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015036:	4b14      	ldr	r3, [pc, #80]	; (8015088 <prvHeapInit+0xb4>)
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	2200      	movs	r2, #0
 801503c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801503e:	4b12      	ldr	r3, [pc, #72]	; (8015088 <prvHeapInit+0xb4>)
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	2200      	movs	r2, #0
 8015044:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801504a:	683b      	ldr	r3, [r7, #0]
 801504c:	68fa      	ldr	r2, [r7, #12]
 801504e:	1ad2      	subs	r2, r2, r3
 8015050:	683b      	ldr	r3, [r7, #0]
 8015052:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015054:	4b0c      	ldr	r3, [pc, #48]	; (8015088 <prvHeapInit+0xb4>)
 8015056:	681a      	ldr	r2, [r3, #0]
 8015058:	683b      	ldr	r3, [r7, #0]
 801505a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801505c:	683b      	ldr	r3, [r7, #0]
 801505e:	685b      	ldr	r3, [r3, #4]
 8015060:	4a0a      	ldr	r2, [pc, #40]	; (801508c <prvHeapInit+0xb8>)
 8015062:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015064:	683b      	ldr	r3, [r7, #0]
 8015066:	685b      	ldr	r3, [r3, #4]
 8015068:	4a09      	ldr	r2, [pc, #36]	; (8015090 <prvHeapInit+0xbc>)
 801506a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801506c:	4b09      	ldr	r3, [pc, #36]	; (8015094 <prvHeapInit+0xc0>)
 801506e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015072:	601a      	str	r2, [r3, #0]
}
 8015074:	bf00      	nop
 8015076:	3714      	adds	r7, #20
 8015078:	46bd      	mov	sp, r7
 801507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801507e:	4770      	bx	lr
 8015080:	20001140 	.word	0x20001140
 8015084:	20004d40 	.word	0x20004d40
 8015088:	20004d48 	.word	0x20004d48
 801508c:	20004d50 	.word	0x20004d50
 8015090:	20004d4c 	.word	0x20004d4c
 8015094:	20004d54 	.word	0x20004d54

08015098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015098:	b480      	push	{r7}
 801509a:	b085      	sub	sp, #20
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80150a0:	4b28      	ldr	r3, [pc, #160]	; (8015144 <prvInsertBlockIntoFreeList+0xac>)
 80150a2:	60fb      	str	r3, [r7, #12]
 80150a4:	e002      	b.n	80150ac <prvInsertBlockIntoFreeList+0x14>
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	60fb      	str	r3, [r7, #12]
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	687a      	ldr	r2, [r7, #4]
 80150b2:	429a      	cmp	r2, r3
 80150b4:	d8f7      	bhi.n	80150a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	685b      	ldr	r3, [r3, #4]
 80150be:	68ba      	ldr	r2, [r7, #8]
 80150c0:	4413      	add	r3, r2
 80150c2:	687a      	ldr	r2, [r7, #4]
 80150c4:	429a      	cmp	r2, r3
 80150c6:	d108      	bne.n	80150da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	685a      	ldr	r2, [r3, #4]
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	685b      	ldr	r3, [r3, #4]
 80150d0:	441a      	add	r2, r3
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	685b      	ldr	r3, [r3, #4]
 80150e2:	68ba      	ldr	r2, [r7, #8]
 80150e4:	441a      	add	r2, r3
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	429a      	cmp	r2, r3
 80150ec:	d118      	bne.n	8015120 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	681a      	ldr	r2, [r3, #0]
 80150f2:	4b15      	ldr	r3, [pc, #84]	; (8015148 <prvInsertBlockIntoFreeList+0xb0>)
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	429a      	cmp	r2, r3
 80150f8:	d00d      	beq.n	8015116 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	685a      	ldr	r2, [r3, #4]
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	685b      	ldr	r3, [r3, #4]
 8015104:	441a      	add	r2, r3
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	681a      	ldr	r2, [r3, #0]
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	601a      	str	r2, [r3, #0]
 8015114:	e008      	b.n	8015128 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015116:	4b0c      	ldr	r3, [pc, #48]	; (8015148 <prvInsertBlockIntoFreeList+0xb0>)
 8015118:	681a      	ldr	r2, [r3, #0]
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	601a      	str	r2, [r3, #0]
 801511e:	e003      	b.n	8015128 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	681a      	ldr	r2, [r3, #0]
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015128:	68fa      	ldr	r2, [r7, #12]
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	429a      	cmp	r2, r3
 801512e:	d002      	beq.n	8015136 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	687a      	ldr	r2, [r7, #4]
 8015134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015136:	bf00      	nop
 8015138:	3714      	adds	r7, #20
 801513a:	46bd      	mov	sp, r7
 801513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015140:	4770      	bx	lr
 8015142:	bf00      	nop
 8015144:	20004d40 	.word	0x20004d40
 8015148:	20004d48 	.word	0x20004d48

0801514c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801514c:	b580      	push	{r7, lr}
 801514e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015150:	2200      	movs	r2, #0
 8015152:	4912      	ldr	r1, [pc, #72]	; (801519c <MX_USB_DEVICE_Init+0x50>)
 8015154:	4812      	ldr	r0, [pc, #72]	; (80151a0 <MX_USB_DEVICE_Init+0x54>)
 8015156:	f7fc f8a1 	bl	801129c <USBD_Init>
 801515a:	4603      	mov	r3, r0
 801515c:	2b00      	cmp	r3, #0
 801515e:	d001      	beq.n	8015164 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015160:	f7ee ff3c 	bl	8003fdc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015164:	490f      	ldr	r1, [pc, #60]	; (80151a4 <MX_USB_DEVICE_Init+0x58>)
 8015166:	480e      	ldr	r0, [pc, #56]	; (80151a0 <MX_USB_DEVICE_Init+0x54>)
 8015168:	f7fc f8ce 	bl	8011308 <USBD_RegisterClass>
 801516c:	4603      	mov	r3, r0
 801516e:	2b00      	cmp	r3, #0
 8015170:	d001      	beq.n	8015176 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015172:	f7ee ff33 	bl	8003fdc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015176:	490c      	ldr	r1, [pc, #48]	; (80151a8 <MX_USB_DEVICE_Init+0x5c>)
 8015178:	4809      	ldr	r0, [pc, #36]	; (80151a0 <MX_USB_DEVICE_Init+0x54>)
 801517a:	f7fb fff3 	bl	8011164 <USBD_CDC_RegisterInterface>
 801517e:	4603      	mov	r3, r0
 8015180:	2b00      	cmp	r3, #0
 8015182:	d001      	beq.n	8015188 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015184:	f7ee ff2a 	bl	8003fdc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015188:	4805      	ldr	r0, [pc, #20]	; (80151a0 <MX_USB_DEVICE_Init+0x54>)
 801518a:	f7fc f8de 	bl	801134a <USBD_Start>
 801518e:	4603      	mov	r3, r0
 8015190:	2b00      	cmp	r3, #0
 8015192:	d001      	beq.n	8015198 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015194:	f7ee ff22 	bl	8003fdc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015198:	bf00      	nop
 801519a:	bd80      	pop	{r7, pc}
 801519c:	2000095c 	.word	0x2000095c
 80151a0:	20005e8c 	.word	0x20005e8c
 80151a4:	20000840 	.word	0x20000840
 80151a8:	20000948 	.word	0x20000948

080151ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80151ac:	b580      	push	{r7, lr}
 80151ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80151b0:	2200      	movs	r2, #0
 80151b2:	4905      	ldr	r1, [pc, #20]	; (80151c8 <CDC_Init_FS+0x1c>)
 80151b4:	4805      	ldr	r0, [pc, #20]	; (80151cc <CDC_Init_FS+0x20>)
 80151b6:	f7fb ffea 	bl	801118e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80151ba:	4905      	ldr	r1, [pc, #20]	; (80151d0 <CDC_Init_FS+0x24>)
 80151bc:	4803      	ldr	r0, [pc, #12]	; (80151cc <CDC_Init_FS+0x20>)
 80151be:	f7fb ffff 	bl	80111c0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80151c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80151c4:	4618      	mov	r0, r3
 80151c6:	bd80      	pop	{r7, pc}
 80151c8:	2000635c 	.word	0x2000635c
 80151cc:	20005e8c 	.word	0x20005e8c
 80151d0:	2000615c 	.word	0x2000615c

080151d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80151d4:	b480      	push	{r7}
 80151d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80151d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80151da:	4618      	mov	r0, r3
 80151dc:	46bd      	mov	sp, r7
 80151de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e2:	4770      	bx	lr

080151e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80151e4:	b480      	push	{r7}
 80151e6:	b083      	sub	sp, #12
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	4603      	mov	r3, r0
 80151ec:	6039      	str	r1, [r7, #0]
 80151ee:	71fb      	strb	r3, [r7, #7]
 80151f0:	4613      	mov	r3, r2
 80151f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80151f4:	79fb      	ldrb	r3, [r7, #7]
 80151f6:	2b23      	cmp	r3, #35	; 0x23
 80151f8:	f200 808c 	bhi.w	8015314 <CDC_Control_FS+0x130>
 80151fc:	a201      	add	r2, pc, #4	; (adr r2, 8015204 <CDC_Control_FS+0x20>)
 80151fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015202:	bf00      	nop
 8015204:	08015315 	.word	0x08015315
 8015208:	08015315 	.word	0x08015315
 801520c:	08015315 	.word	0x08015315
 8015210:	08015315 	.word	0x08015315
 8015214:	08015315 	.word	0x08015315
 8015218:	08015315 	.word	0x08015315
 801521c:	08015315 	.word	0x08015315
 8015220:	08015315 	.word	0x08015315
 8015224:	08015315 	.word	0x08015315
 8015228:	08015315 	.word	0x08015315
 801522c:	08015315 	.word	0x08015315
 8015230:	08015315 	.word	0x08015315
 8015234:	08015315 	.word	0x08015315
 8015238:	08015315 	.word	0x08015315
 801523c:	08015315 	.word	0x08015315
 8015240:	08015315 	.word	0x08015315
 8015244:	08015315 	.word	0x08015315
 8015248:	08015315 	.word	0x08015315
 801524c:	08015315 	.word	0x08015315
 8015250:	08015315 	.word	0x08015315
 8015254:	08015315 	.word	0x08015315
 8015258:	08015315 	.word	0x08015315
 801525c:	08015315 	.word	0x08015315
 8015260:	08015315 	.word	0x08015315
 8015264:	08015315 	.word	0x08015315
 8015268:	08015315 	.word	0x08015315
 801526c:	08015315 	.word	0x08015315
 8015270:	08015315 	.word	0x08015315
 8015274:	08015315 	.word	0x08015315
 8015278:	08015315 	.word	0x08015315
 801527c:	08015315 	.word	0x08015315
 8015280:	08015315 	.word	0x08015315
 8015284:	08015295 	.word	0x08015295
 8015288:	080152cf 	.word	0x080152cf
 801528c:	08015315 	.word	0x08015315
 8015290:	08015315 	.word	0x08015315
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 8015294:	683b      	ldr	r3, [r7, #0]
 8015296:	781a      	ldrb	r2, [r3, #0]
 8015298:	4b22      	ldr	r3, [pc, #136]	; (8015324 <CDC_Control_FS+0x140>)
 801529a:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 801529c:	683b      	ldr	r3, [r7, #0]
 801529e:	785a      	ldrb	r2, [r3, #1]
 80152a0:	4b20      	ldr	r3, [pc, #128]	; (8015324 <CDC_Control_FS+0x140>)
 80152a2:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 80152a4:	683b      	ldr	r3, [r7, #0]
 80152a6:	789a      	ldrb	r2, [r3, #2]
 80152a8:	4b1e      	ldr	r3, [pc, #120]	; (8015324 <CDC_Control_FS+0x140>)
 80152aa:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 80152ac:	683b      	ldr	r3, [r7, #0]
 80152ae:	78da      	ldrb	r2, [r3, #3]
 80152b0:	4b1c      	ldr	r3, [pc, #112]	; (8015324 <CDC_Control_FS+0x140>)
 80152b2:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 80152b4:	683b      	ldr	r3, [r7, #0]
 80152b6:	791a      	ldrb	r2, [r3, #4]
 80152b8:	4b1a      	ldr	r3, [pc, #104]	; (8015324 <CDC_Control_FS+0x140>)
 80152ba:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 80152bc:	683b      	ldr	r3, [r7, #0]
 80152be:	795a      	ldrb	r2, [r3, #5]
 80152c0:	4b18      	ldr	r3, [pc, #96]	; (8015324 <CDC_Control_FS+0x140>)
 80152c2:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 80152c4:	683b      	ldr	r3, [r7, #0]
 80152c6:	799a      	ldrb	r2, [r3, #6]
 80152c8:	4b16      	ldr	r3, [pc, #88]	; (8015324 <CDC_Control_FS+0x140>)
 80152ca:	719a      	strb	r2, [r3, #6]
    	break;
 80152cc:	e023      	b.n	8015316 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 80152ce:	4b15      	ldr	r3, [pc, #84]	; (8015324 <CDC_Control_FS+0x140>)
 80152d0:	781a      	ldrb	r2, [r3, #0]
 80152d2:	683b      	ldr	r3, [r7, #0]
 80152d4:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 80152d6:	683b      	ldr	r3, [r7, #0]
 80152d8:	3301      	adds	r3, #1
 80152da:	4a12      	ldr	r2, [pc, #72]	; (8015324 <CDC_Control_FS+0x140>)
 80152dc:	7852      	ldrb	r2, [r2, #1]
 80152de:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 80152e0:	683b      	ldr	r3, [r7, #0]
 80152e2:	3302      	adds	r3, #2
 80152e4:	4a0f      	ldr	r2, [pc, #60]	; (8015324 <CDC_Control_FS+0x140>)
 80152e6:	7892      	ldrb	r2, [r2, #2]
 80152e8:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 80152ea:	683b      	ldr	r3, [r7, #0]
 80152ec:	3303      	adds	r3, #3
 80152ee:	4a0d      	ldr	r2, [pc, #52]	; (8015324 <CDC_Control_FS+0x140>)
 80152f0:	78d2      	ldrb	r2, [r2, #3]
 80152f2:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 80152f4:	683b      	ldr	r3, [r7, #0]
 80152f6:	3304      	adds	r3, #4
 80152f8:	4a0a      	ldr	r2, [pc, #40]	; (8015324 <CDC_Control_FS+0x140>)
 80152fa:	7912      	ldrb	r2, [r2, #4]
 80152fc:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 80152fe:	683b      	ldr	r3, [r7, #0]
 8015300:	3305      	adds	r3, #5
 8015302:	4a08      	ldr	r2, [pc, #32]	; (8015324 <CDC_Control_FS+0x140>)
 8015304:	7952      	ldrb	r2, [r2, #5]
 8015306:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 8015308:	683b      	ldr	r3, [r7, #0]
 801530a:	3306      	adds	r3, #6
 801530c:	4a05      	ldr	r2, [pc, #20]	; (8015324 <CDC_Control_FS+0x140>)
 801530e:	7992      	ldrb	r2, [r2, #6]
 8015310:	701a      	strb	r2, [r3, #0]
    break;
 8015312:	e000      	b.n	8015316 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015314:	bf00      	nop
  }

  return (USBD_OK);
 8015316:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015318:	4618      	mov	r0, r3
 801531a:	370c      	adds	r7, #12
 801531c:	46bd      	mov	sp, r7
 801531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015322:	4770      	bx	lr
 8015324:	2000655c 	.word	0x2000655c

08015328 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b082      	sub	sp, #8
 801532c:	af00      	add	r7, sp, #0
 801532e:	6078      	str	r0, [r7, #4]
 8015330:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 8015332:	683b      	ldr	r3, [r7, #0]
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	b29b      	uxth	r3, r3
 8015338:	461a      	mov	r2, r3
 801533a:	6879      	ldr	r1, [r7, #4]
 801533c:	4807      	ldr	r0, [pc, #28]	; (801535c <CDC_Receive_FS+0x34>)
 801533e:	f7ee fec4 	bl	80040ca <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015342:	6879      	ldr	r1, [r7, #4]
 8015344:	4806      	ldr	r0, [pc, #24]	; (8015360 <CDC_Receive_FS+0x38>)
 8015346:	f7fb ff3b 	bl	80111c0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801534a:	4805      	ldr	r0, [pc, #20]	; (8015360 <CDC_Receive_FS+0x38>)
 801534c:	f7fb ff7c 	bl	8011248 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015350:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015352:	4618      	mov	r0, r3
 8015354:	3708      	adds	r7, #8
 8015356:	46bd      	mov	sp, r7
 8015358:	bd80      	pop	{r7, pc}
 801535a:	bf00      	nop
 801535c:	20000004 	.word	0x20000004
 8015360:	20005e8c 	.word	0x20005e8c

08015364 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015364:	b580      	push	{r7, lr}
 8015366:	b084      	sub	sp, #16
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
 801536c:	460b      	mov	r3, r1
 801536e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015370:	2300      	movs	r3, #0
 8015372:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015374:	4b0d      	ldr	r3, [pc, #52]	; (80153ac <CDC_Transmit_FS+0x48>)
 8015376:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801537a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801537c:	68bb      	ldr	r3, [r7, #8]
 801537e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015382:	2b00      	cmp	r3, #0
 8015384:	d001      	beq.n	801538a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015386:	2301      	movs	r3, #1
 8015388:	e00b      	b.n	80153a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801538a:	887b      	ldrh	r3, [r7, #2]
 801538c:	461a      	mov	r2, r3
 801538e:	6879      	ldr	r1, [r7, #4]
 8015390:	4806      	ldr	r0, [pc, #24]	; (80153ac <CDC_Transmit_FS+0x48>)
 8015392:	f7fb fefc 	bl	801118e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015396:	4805      	ldr	r0, [pc, #20]	; (80153ac <CDC_Transmit_FS+0x48>)
 8015398:	f7fb ff26 	bl	80111e8 <USBD_CDC_TransmitPacket>
 801539c:	4603      	mov	r3, r0
 801539e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80153a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80153a2:	4618      	mov	r0, r3
 80153a4:	3710      	adds	r7, #16
 80153a6:	46bd      	mov	sp, r7
 80153a8:	bd80      	pop	{r7, pc}
 80153aa:	bf00      	nop
 80153ac:	20005e8c 	.word	0x20005e8c

080153b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80153b0:	b480      	push	{r7}
 80153b2:	b087      	sub	sp, #28
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	60f8      	str	r0, [r7, #12]
 80153b8:	60b9      	str	r1, [r7, #8]
 80153ba:	4613      	mov	r3, r2
 80153bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80153be:	2300      	movs	r3, #0
 80153c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80153c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80153c6:	4618      	mov	r0, r3
 80153c8:	371c      	adds	r7, #28
 80153ca:	46bd      	mov	sp, r7
 80153cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d0:	4770      	bx	lr
	...

080153d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153d4:	b480      	push	{r7}
 80153d6:	b083      	sub	sp, #12
 80153d8:	af00      	add	r7, sp, #0
 80153da:	4603      	mov	r3, r0
 80153dc:	6039      	str	r1, [r7, #0]
 80153de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80153e0:	683b      	ldr	r3, [r7, #0]
 80153e2:	2212      	movs	r2, #18
 80153e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80153e6:	4b03      	ldr	r3, [pc, #12]	; (80153f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80153e8:	4618      	mov	r0, r3
 80153ea:	370c      	adds	r7, #12
 80153ec:	46bd      	mov	sp, r7
 80153ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f2:	4770      	bx	lr
 80153f4:	20000978 	.word	0x20000978

080153f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153f8:	b480      	push	{r7}
 80153fa:	b083      	sub	sp, #12
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	4603      	mov	r3, r0
 8015400:	6039      	str	r1, [r7, #0]
 8015402:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015404:	683b      	ldr	r3, [r7, #0]
 8015406:	2204      	movs	r2, #4
 8015408:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801540a:	4b03      	ldr	r3, [pc, #12]	; (8015418 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801540c:	4618      	mov	r0, r3
 801540e:	370c      	adds	r7, #12
 8015410:	46bd      	mov	sp, r7
 8015412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015416:	4770      	bx	lr
 8015418:	2000098c 	.word	0x2000098c

0801541c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801541c:	b580      	push	{r7, lr}
 801541e:	b082      	sub	sp, #8
 8015420:	af00      	add	r7, sp, #0
 8015422:	4603      	mov	r3, r0
 8015424:	6039      	str	r1, [r7, #0]
 8015426:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015428:	79fb      	ldrb	r3, [r7, #7]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d105      	bne.n	801543a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801542e:	683a      	ldr	r2, [r7, #0]
 8015430:	4907      	ldr	r1, [pc, #28]	; (8015450 <USBD_FS_ProductStrDescriptor+0x34>)
 8015432:	4808      	ldr	r0, [pc, #32]	; (8015454 <USBD_FS_ProductStrDescriptor+0x38>)
 8015434:	f7fc ff57 	bl	80122e6 <USBD_GetString>
 8015438:	e004      	b.n	8015444 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801543a:	683a      	ldr	r2, [r7, #0]
 801543c:	4904      	ldr	r1, [pc, #16]	; (8015450 <USBD_FS_ProductStrDescriptor+0x34>)
 801543e:	4805      	ldr	r0, [pc, #20]	; (8015454 <USBD_FS_ProductStrDescriptor+0x38>)
 8015440:	f7fc ff51 	bl	80122e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015444:	4b02      	ldr	r3, [pc, #8]	; (8015450 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015446:	4618      	mov	r0, r3
 8015448:	3708      	adds	r7, #8
 801544a:	46bd      	mov	sp, r7
 801544c:	bd80      	pop	{r7, pc}
 801544e:	bf00      	nop
 8015450:	20006564 	.word	0x20006564
 8015454:	0801b3b4 	.word	0x0801b3b4

08015458 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015458:	b580      	push	{r7, lr}
 801545a:	b082      	sub	sp, #8
 801545c:	af00      	add	r7, sp, #0
 801545e:	4603      	mov	r3, r0
 8015460:	6039      	str	r1, [r7, #0]
 8015462:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015464:	683a      	ldr	r2, [r7, #0]
 8015466:	4904      	ldr	r1, [pc, #16]	; (8015478 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015468:	4804      	ldr	r0, [pc, #16]	; (801547c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801546a:	f7fc ff3c 	bl	80122e6 <USBD_GetString>
  return USBD_StrDesc;
 801546e:	4b02      	ldr	r3, [pc, #8]	; (8015478 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015470:	4618      	mov	r0, r3
 8015472:	3708      	adds	r7, #8
 8015474:	46bd      	mov	sp, r7
 8015476:	bd80      	pop	{r7, pc}
 8015478:	20006564 	.word	0x20006564
 801547c:	0801b3cc 	.word	0x0801b3cc

08015480 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015480:	b580      	push	{r7, lr}
 8015482:	b082      	sub	sp, #8
 8015484:	af00      	add	r7, sp, #0
 8015486:	4603      	mov	r3, r0
 8015488:	6039      	str	r1, [r7, #0]
 801548a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801548c:	683b      	ldr	r3, [r7, #0]
 801548e:	221a      	movs	r2, #26
 8015490:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015492:	f000 f843 	bl	801551c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015496:	4b02      	ldr	r3, [pc, #8]	; (80154a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015498:	4618      	mov	r0, r3
 801549a:	3708      	adds	r7, #8
 801549c:	46bd      	mov	sp, r7
 801549e:	bd80      	pop	{r7, pc}
 80154a0:	20000990 	.word	0x20000990

080154a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b082      	sub	sp, #8
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	4603      	mov	r3, r0
 80154ac:	6039      	str	r1, [r7, #0]
 80154ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80154b0:	79fb      	ldrb	r3, [r7, #7]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d105      	bne.n	80154c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80154b6:	683a      	ldr	r2, [r7, #0]
 80154b8:	4907      	ldr	r1, [pc, #28]	; (80154d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80154ba:	4808      	ldr	r0, [pc, #32]	; (80154dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80154bc:	f7fc ff13 	bl	80122e6 <USBD_GetString>
 80154c0:	e004      	b.n	80154cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80154c2:	683a      	ldr	r2, [r7, #0]
 80154c4:	4904      	ldr	r1, [pc, #16]	; (80154d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80154c6:	4805      	ldr	r0, [pc, #20]	; (80154dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80154c8:	f7fc ff0d 	bl	80122e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80154cc:	4b02      	ldr	r3, [pc, #8]	; (80154d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80154ce:	4618      	mov	r0, r3
 80154d0:	3708      	adds	r7, #8
 80154d2:	46bd      	mov	sp, r7
 80154d4:	bd80      	pop	{r7, pc}
 80154d6:	bf00      	nop
 80154d8:	20006564 	.word	0x20006564
 80154dc:	0801b3e0 	.word	0x0801b3e0

080154e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b082      	sub	sp, #8
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	4603      	mov	r3, r0
 80154e8:	6039      	str	r1, [r7, #0]
 80154ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80154ec:	79fb      	ldrb	r3, [r7, #7]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d105      	bne.n	80154fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80154f2:	683a      	ldr	r2, [r7, #0]
 80154f4:	4907      	ldr	r1, [pc, #28]	; (8015514 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80154f6:	4808      	ldr	r0, [pc, #32]	; (8015518 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80154f8:	f7fc fef5 	bl	80122e6 <USBD_GetString>
 80154fc:	e004      	b.n	8015508 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80154fe:	683a      	ldr	r2, [r7, #0]
 8015500:	4904      	ldr	r1, [pc, #16]	; (8015514 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015502:	4805      	ldr	r0, [pc, #20]	; (8015518 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015504:	f7fc feef 	bl	80122e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015508:	4b02      	ldr	r3, [pc, #8]	; (8015514 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801550a:	4618      	mov	r0, r3
 801550c:	3708      	adds	r7, #8
 801550e:	46bd      	mov	sp, r7
 8015510:	bd80      	pop	{r7, pc}
 8015512:	bf00      	nop
 8015514:	20006564 	.word	0x20006564
 8015518:	0801b3ec 	.word	0x0801b3ec

0801551c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b084      	sub	sp, #16
 8015520:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015522:	4b0f      	ldr	r3, [pc, #60]	; (8015560 <Get_SerialNum+0x44>)
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015528:	4b0e      	ldr	r3, [pc, #56]	; (8015564 <Get_SerialNum+0x48>)
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801552e:	4b0e      	ldr	r3, [pc, #56]	; (8015568 <Get_SerialNum+0x4c>)
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015534:	68fa      	ldr	r2, [r7, #12]
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	4413      	add	r3, r2
 801553a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d009      	beq.n	8015556 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015542:	2208      	movs	r2, #8
 8015544:	4909      	ldr	r1, [pc, #36]	; (801556c <Get_SerialNum+0x50>)
 8015546:	68f8      	ldr	r0, [r7, #12]
 8015548:	f000 f814 	bl	8015574 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801554c:	2204      	movs	r2, #4
 801554e:	4908      	ldr	r1, [pc, #32]	; (8015570 <Get_SerialNum+0x54>)
 8015550:	68b8      	ldr	r0, [r7, #8]
 8015552:	f000 f80f 	bl	8015574 <IntToUnicode>
  }
}
 8015556:	bf00      	nop
 8015558:	3710      	adds	r7, #16
 801555a:	46bd      	mov	sp, r7
 801555c:	bd80      	pop	{r7, pc}
 801555e:	bf00      	nop
 8015560:	1fff7a10 	.word	0x1fff7a10
 8015564:	1fff7a14 	.word	0x1fff7a14
 8015568:	1fff7a18 	.word	0x1fff7a18
 801556c:	20000992 	.word	0x20000992
 8015570:	200009a2 	.word	0x200009a2

08015574 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015574:	b480      	push	{r7}
 8015576:	b087      	sub	sp, #28
 8015578:	af00      	add	r7, sp, #0
 801557a:	60f8      	str	r0, [r7, #12]
 801557c:	60b9      	str	r1, [r7, #8]
 801557e:	4613      	mov	r3, r2
 8015580:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015582:	2300      	movs	r3, #0
 8015584:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015586:	2300      	movs	r3, #0
 8015588:	75fb      	strb	r3, [r7, #23]
 801558a:	e027      	b.n	80155dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	0f1b      	lsrs	r3, r3, #28
 8015590:	2b09      	cmp	r3, #9
 8015592:	d80b      	bhi.n	80155ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	0f1b      	lsrs	r3, r3, #28
 8015598:	b2da      	uxtb	r2, r3
 801559a:	7dfb      	ldrb	r3, [r7, #23]
 801559c:	005b      	lsls	r3, r3, #1
 801559e:	4619      	mov	r1, r3
 80155a0:	68bb      	ldr	r3, [r7, #8]
 80155a2:	440b      	add	r3, r1
 80155a4:	3230      	adds	r2, #48	; 0x30
 80155a6:	b2d2      	uxtb	r2, r2
 80155a8:	701a      	strb	r2, [r3, #0]
 80155aa:	e00a      	b.n	80155c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	0f1b      	lsrs	r3, r3, #28
 80155b0:	b2da      	uxtb	r2, r3
 80155b2:	7dfb      	ldrb	r3, [r7, #23]
 80155b4:	005b      	lsls	r3, r3, #1
 80155b6:	4619      	mov	r1, r3
 80155b8:	68bb      	ldr	r3, [r7, #8]
 80155ba:	440b      	add	r3, r1
 80155bc:	3237      	adds	r2, #55	; 0x37
 80155be:	b2d2      	uxtb	r2, r2
 80155c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	011b      	lsls	r3, r3, #4
 80155c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80155c8:	7dfb      	ldrb	r3, [r7, #23]
 80155ca:	005b      	lsls	r3, r3, #1
 80155cc:	3301      	adds	r3, #1
 80155ce:	68ba      	ldr	r2, [r7, #8]
 80155d0:	4413      	add	r3, r2
 80155d2:	2200      	movs	r2, #0
 80155d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80155d6:	7dfb      	ldrb	r3, [r7, #23]
 80155d8:	3301      	adds	r3, #1
 80155da:	75fb      	strb	r3, [r7, #23]
 80155dc:	7dfa      	ldrb	r2, [r7, #23]
 80155de:	79fb      	ldrb	r3, [r7, #7]
 80155e0:	429a      	cmp	r2, r3
 80155e2:	d3d3      	bcc.n	801558c <IntToUnicode+0x18>
  }
}
 80155e4:	bf00      	nop
 80155e6:	371c      	adds	r7, #28
 80155e8:	46bd      	mov	sp, r7
 80155ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ee:	4770      	bx	lr

080155f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b08a      	sub	sp, #40	; 0x28
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80155f8:	f107 0314 	add.w	r3, r7, #20
 80155fc:	2200      	movs	r2, #0
 80155fe:	601a      	str	r2, [r3, #0]
 8015600:	605a      	str	r2, [r3, #4]
 8015602:	609a      	str	r2, [r3, #8]
 8015604:	60da      	str	r2, [r3, #12]
 8015606:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015610:	d13a      	bne.n	8015688 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015612:	2300      	movs	r3, #0
 8015614:	613b      	str	r3, [r7, #16]
 8015616:	4b1e      	ldr	r3, [pc, #120]	; (8015690 <HAL_PCD_MspInit+0xa0>)
 8015618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801561a:	4a1d      	ldr	r2, [pc, #116]	; (8015690 <HAL_PCD_MspInit+0xa0>)
 801561c:	f043 0301 	orr.w	r3, r3, #1
 8015620:	6313      	str	r3, [r2, #48]	; 0x30
 8015622:	4b1b      	ldr	r3, [pc, #108]	; (8015690 <HAL_PCD_MspInit+0xa0>)
 8015624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015626:	f003 0301 	and.w	r3, r3, #1
 801562a:	613b      	str	r3, [r7, #16]
 801562c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801562e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015634:	2302      	movs	r3, #2
 8015636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015638:	2300      	movs	r3, #0
 801563a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801563c:	2303      	movs	r3, #3
 801563e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015640:	230a      	movs	r3, #10
 8015642:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015644:	f107 0314 	add.w	r3, r7, #20
 8015648:	4619      	mov	r1, r3
 801564a:	4812      	ldr	r0, [pc, #72]	; (8015694 <HAL_PCD_MspInit+0xa4>)
 801564c:	f7f6 fbd8 	bl	800be00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015650:	4b0f      	ldr	r3, [pc, #60]	; (8015690 <HAL_PCD_MspInit+0xa0>)
 8015652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015654:	4a0e      	ldr	r2, [pc, #56]	; (8015690 <HAL_PCD_MspInit+0xa0>)
 8015656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801565a:	6353      	str	r3, [r2, #52]	; 0x34
 801565c:	2300      	movs	r3, #0
 801565e:	60fb      	str	r3, [r7, #12]
 8015660:	4b0b      	ldr	r3, [pc, #44]	; (8015690 <HAL_PCD_MspInit+0xa0>)
 8015662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015664:	4a0a      	ldr	r2, [pc, #40]	; (8015690 <HAL_PCD_MspInit+0xa0>)
 8015666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801566a:	6453      	str	r3, [r2, #68]	; 0x44
 801566c:	4b08      	ldr	r3, [pc, #32]	; (8015690 <HAL_PCD_MspInit+0xa0>)
 801566e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015674:	60fb      	str	r3, [r7, #12]
 8015676:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015678:	2200      	movs	r2, #0
 801567a:	2105      	movs	r1, #5
 801567c:	2043      	movs	r0, #67	; 0x43
 801567e:	f7f5 fff7 	bl	800b670 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015682:	2043      	movs	r0, #67	; 0x43
 8015684:	f7f6 f810 	bl	800b6a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015688:	bf00      	nop
 801568a:	3728      	adds	r7, #40	; 0x28
 801568c:	46bd      	mov	sp, r7
 801568e:	bd80      	pop	{r7, pc}
 8015690:	40023800 	.word	0x40023800
 8015694:	40020000 	.word	0x40020000

08015698 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b082      	sub	sp, #8
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80156ac:	4619      	mov	r1, r3
 80156ae:	4610      	mov	r0, r2
 80156b0:	f7fb fe96 	bl	80113e0 <USBD_LL_SetupStage>
}
 80156b4:	bf00      	nop
 80156b6:	3708      	adds	r7, #8
 80156b8:	46bd      	mov	sp, r7
 80156ba:	bd80      	pop	{r7, pc}

080156bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b082      	sub	sp, #8
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	6078      	str	r0, [r7, #4]
 80156c4:	460b      	mov	r3, r1
 80156c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80156ce:	78fa      	ldrb	r2, [r7, #3]
 80156d0:	6879      	ldr	r1, [r7, #4]
 80156d2:	4613      	mov	r3, r2
 80156d4:	00db      	lsls	r3, r3, #3
 80156d6:	1a9b      	subs	r3, r3, r2
 80156d8:	009b      	lsls	r3, r3, #2
 80156da:	440b      	add	r3, r1
 80156dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80156e0:	681a      	ldr	r2, [r3, #0]
 80156e2:	78fb      	ldrb	r3, [r7, #3]
 80156e4:	4619      	mov	r1, r3
 80156e6:	f7fb fece 	bl	8011486 <USBD_LL_DataOutStage>
}
 80156ea:	bf00      	nop
 80156ec:	3708      	adds	r7, #8
 80156ee:	46bd      	mov	sp, r7
 80156f0:	bd80      	pop	{r7, pc}

080156f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156f2:	b580      	push	{r7, lr}
 80156f4:	b082      	sub	sp, #8
 80156f6:	af00      	add	r7, sp, #0
 80156f8:	6078      	str	r0, [r7, #4]
 80156fa:	460b      	mov	r3, r1
 80156fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015704:	78fa      	ldrb	r2, [r7, #3]
 8015706:	6879      	ldr	r1, [r7, #4]
 8015708:	4613      	mov	r3, r2
 801570a:	00db      	lsls	r3, r3, #3
 801570c:	1a9b      	subs	r3, r3, r2
 801570e:	009b      	lsls	r3, r3, #2
 8015710:	440b      	add	r3, r1
 8015712:	3348      	adds	r3, #72	; 0x48
 8015714:	681a      	ldr	r2, [r3, #0]
 8015716:	78fb      	ldrb	r3, [r7, #3]
 8015718:	4619      	mov	r1, r3
 801571a:	f7fb ff17 	bl	801154c <USBD_LL_DataInStage>
}
 801571e:	bf00      	nop
 8015720:	3708      	adds	r7, #8
 8015722:	46bd      	mov	sp, r7
 8015724:	bd80      	pop	{r7, pc}

08015726 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015726:	b580      	push	{r7, lr}
 8015728:	b082      	sub	sp, #8
 801572a:	af00      	add	r7, sp, #0
 801572c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015734:	4618      	mov	r0, r3
 8015736:	f7fc f81b 	bl	8011770 <USBD_LL_SOF>
}
 801573a:	bf00      	nop
 801573c:	3708      	adds	r7, #8
 801573e:	46bd      	mov	sp, r7
 8015740:	bd80      	pop	{r7, pc}

08015742 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015742:	b580      	push	{r7, lr}
 8015744:	b084      	sub	sp, #16
 8015746:	af00      	add	r7, sp, #0
 8015748:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801574a:	2301      	movs	r3, #1
 801574c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	68db      	ldr	r3, [r3, #12]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d102      	bne.n	801575c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015756:	2300      	movs	r3, #0
 8015758:	73fb      	strb	r3, [r7, #15]
 801575a:	e008      	b.n	801576e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	68db      	ldr	r3, [r3, #12]
 8015760:	2b02      	cmp	r3, #2
 8015762:	d102      	bne.n	801576a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015764:	2301      	movs	r3, #1
 8015766:	73fb      	strb	r3, [r7, #15]
 8015768:	e001      	b.n	801576e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801576a:	f7ee fc37 	bl	8003fdc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015774:	7bfa      	ldrb	r2, [r7, #15]
 8015776:	4611      	mov	r1, r2
 8015778:	4618      	mov	r0, r3
 801577a:	f7fb ffbe 	bl	80116fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015784:	4618      	mov	r0, r3
 8015786:	f7fb ff77 	bl	8011678 <USBD_LL_Reset>
}
 801578a:	bf00      	nop
 801578c:	3710      	adds	r7, #16
 801578e:	46bd      	mov	sp, r7
 8015790:	bd80      	pop	{r7, pc}
	...

08015794 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015794:	b580      	push	{r7, lr}
 8015796:	b082      	sub	sp, #8
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80157a2:	4618      	mov	r0, r3
 80157a4:	f7fb ffb9 	bl	801171a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	687a      	ldr	r2, [r7, #4]
 80157b4:	6812      	ldr	r2, [r2, #0]
 80157b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80157ba:	f043 0301 	orr.w	r3, r3, #1
 80157be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	6a1b      	ldr	r3, [r3, #32]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d005      	beq.n	80157d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80157c8:	4b04      	ldr	r3, [pc, #16]	; (80157dc <HAL_PCD_SuspendCallback+0x48>)
 80157ca:	691b      	ldr	r3, [r3, #16]
 80157cc:	4a03      	ldr	r2, [pc, #12]	; (80157dc <HAL_PCD_SuspendCallback+0x48>)
 80157ce:	f043 0306 	orr.w	r3, r3, #6
 80157d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80157d4:	bf00      	nop
 80157d6:	3708      	adds	r7, #8
 80157d8:	46bd      	mov	sp, r7
 80157da:	bd80      	pop	{r7, pc}
 80157dc:	e000ed00 	.word	0xe000ed00

080157e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b082      	sub	sp, #8
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80157ee:	4618      	mov	r0, r3
 80157f0:	f7fb ffa8 	bl	8011744 <USBD_LL_Resume>
}
 80157f4:	bf00      	nop
 80157f6:	3708      	adds	r7, #8
 80157f8:	46bd      	mov	sp, r7
 80157fa:	bd80      	pop	{r7, pc}

080157fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b082      	sub	sp, #8
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
 8015804:	460b      	mov	r3, r1
 8015806:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801580e:	78fa      	ldrb	r2, [r7, #3]
 8015810:	4611      	mov	r1, r2
 8015812:	4618      	mov	r0, r3
 8015814:	f7fb ffd3 	bl	80117be <USBD_LL_IsoOUTIncomplete>
}
 8015818:	bf00      	nop
 801581a:	3708      	adds	r7, #8
 801581c:	46bd      	mov	sp, r7
 801581e:	bd80      	pop	{r7, pc}

08015820 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015820:	b580      	push	{r7, lr}
 8015822:	b082      	sub	sp, #8
 8015824:	af00      	add	r7, sp, #0
 8015826:	6078      	str	r0, [r7, #4]
 8015828:	460b      	mov	r3, r1
 801582a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015832:	78fa      	ldrb	r2, [r7, #3]
 8015834:	4611      	mov	r1, r2
 8015836:	4618      	mov	r0, r3
 8015838:	f7fb ffb4 	bl	80117a4 <USBD_LL_IsoINIncomplete>
}
 801583c:	bf00      	nop
 801583e:	3708      	adds	r7, #8
 8015840:	46bd      	mov	sp, r7
 8015842:	bd80      	pop	{r7, pc}

08015844 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b082      	sub	sp, #8
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015852:	4618      	mov	r0, r3
 8015854:	f7fb ffc0 	bl	80117d8 <USBD_LL_DevConnected>
}
 8015858:	bf00      	nop
 801585a:	3708      	adds	r7, #8
 801585c:	46bd      	mov	sp, r7
 801585e:	bd80      	pop	{r7, pc}

08015860 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b082      	sub	sp, #8
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801586e:	4618      	mov	r0, r3
 8015870:	f7fb ffbd 	bl	80117ee <USBD_LL_DevDisconnected>
}
 8015874:	bf00      	nop
 8015876:	3708      	adds	r7, #8
 8015878:	46bd      	mov	sp, r7
 801587a:	bd80      	pop	{r7, pc}

0801587c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801587c:	b580      	push	{r7, lr}
 801587e:	b082      	sub	sp, #8
 8015880:	af00      	add	r7, sp, #0
 8015882:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	781b      	ldrb	r3, [r3, #0]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d13c      	bne.n	8015906 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801588c:	4a20      	ldr	r2, [pc, #128]	; (8015910 <USBD_LL_Init+0x94>)
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	4a1e      	ldr	r2, [pc, #120]	; (8015910 <USBD_LL_Init+0x94>)
 8015898:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801589c:	4b1c      	ldr	r3, [pc, #112]	; (8015910 <USBD_LL_Init+0x94>)
 801589e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80158a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80158a4:	4b1a      	ldr	r3, [pc, #104]	; (8015910 <USBD_LL_Init+0x94>)
 80158a6:	2204      	movs	r2, #4
 80158a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80158aa:	4b19      	ldr	r3, [pc, #100]	; (8015910 <USBD_LL_Init+0x94>)
 80158ac:	2202      	movs	r2, #2
 80158ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80158b0:	4b17      	ldr	r3, [pc, #92]	; (8015910 <USBD_LL_Init+0x94>)
 80158b2:	2200      	movs	r2, #0
 80158b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80158b6:	4b16      	ldr	r3, [pc, #88]	; (8015910 <USBD_LL_Init+0x94>)
 80158b8:	2202      	movs	r2, #2
 80158ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80158bc:	4b14      	ldr	r3, [pc, #80]	; (8015910 <USBD_LL_Init+0x94>)
 80158be:	2200      	movs	r2, #0
 80158c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80158c2:	4b13      	ldr	r3, [pc, #76]	; (8015910 <USBD_LL_Init+0x94>)
 80158c4:	2200      	movs	r2, #0
 80158c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80158c8:	4b11      	ldr	r3, [pc, #68]	; (8015910 <USBD_LL_Init+0x94>)
 80158ca:	2200      	movs	r2, #0
 80158cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80158ce:	4b10      	ldr	r3, [pc, #64]	; (8015910 <USBD_LL_Init+0x94>)
 80158d0:	2200      	movs	r2, #0
 80158d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80158d4:	4b0e      	ldr	r3, [pc, #56]	; (8015910 <USBD_LL_Init+0x94>)
 80158d6:	2200      	movs	r2, #0
 80158d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80158da:	480d      	ldr	r0, [pc, #52]	; (8015910 <USBD_LL_Init+0x94>)
 80158dc:	f7f6 fc9a 	bl	800c214 <HAL_PCD_Init>
 80158e0:	4603      	mov	r3, r0
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d001      	beq.n	80158ea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80158e6:	f7ee fb79 	bl	8003fdc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80158ea:	2180      	movs	r1, #128	; 0x80
 80158ec:	4808      	ldr	r0, [pc, #32]	; (8015910 <USBD_LL_Init+0x94>)
 80158ee:	f7f7 fdf8 	bl	800d4e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80158f2:	2240      	movs	r2, #64	; 0x40
 80158f4:	2100      	movs	r1, #0
 80158f6:	4806      	ldr	r0, [pc, #24]	; (8015910 <USBD_LL_Init+0x94>)
 80158f8:	f7f7 fdac 	bl	800d454 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80158fc:	2280      	movs	r2, #128	; 0x80
 80158fe:	2101      	movs	r1, #1
 8015900:	4803      	ldr	r0, [pc, #12]	; (8015910 <USBD_LL_Init+0x94>)
 8015902:	f7f7 fda7 	bl	800d454 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015906:	2300      	movs	r3, #0
}
 8015908:	4618      	mov	r0, r3
 801590a:	3708      	adds	r7, #8
 801590c:	46bd      	mov	sp, r7
 801590e:	bd80      	pop	{r7, pc}
 8015910:	20006764 	.word	0x20006764

08015914 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b084      	sub	sp, #16
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801591c:	2300      	movs	r3, #0
 801591e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015920:	2300      	movs	r3, #0
 8015922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801592a:	4618      	mov	r0, r3
 801592c:	f7f6 fd8f 	bl	800c44e <HAL_PCD_Start>
 8015930:	4603      	mov	r3, r0
 8015932:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015934:	7bfb      	ldrb	r3, [r7, #15]
 8015936:	4618      	mov	r0, r3
 8015938:	f000 f92a 	bl	8015b90 <USBD_Get_USB_Status>
 801593c:	4603      	mov	r3, r0
 801593e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015940:	7bbb      	ldrb	r3, [r7, #14]
}
 8015942:	4618      	mov	r0, r3
 8015944:	3710      	adds	r7, #16
 8015946:	46bd      	mov	sp, r7
 8015948:	bd80      	pop	{r7, pc}

0801594a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801594a:	b580      	push	{r7, lr}
 801594c:	b084      	sub	sp, #16
 801594e:	af00      	add	r7, sp, #0
 8015950:	6078      	str	r0, [r7, #4]
 8015952:	4608      	mov	r0, r1
 8015954:	4611      	mov	r1, r2
 8015956:	461a      	mov	r2, r3
 8015958:	4603      	mov	r3, r0
 801595a:	70fb      	strb	r3, [r7, #3]
 801595c:	460b      	mov	r3, r1
 801595e:	70bb      	strb	r3, [r7, #2]
 8015960:	4613      	mov	r3, r2
 8015962:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015964:	2300      	movs	r3, #0
 8015966:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015968:	2300      	movs	r3, #0
 801596a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015972:	78bb      	ldrb	r3, [r7, #2]
 8015974:	883a      	ldrh	r2, [r7, #0]
 8015976:	78f9      	ldrb	r1, [r7, #3]
 8015978:	f7f7 f973 	bl	800cc62 <HAL_PCD_EP_Open>
 801597c:	4603      	mov	r3, r0
 801597e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015980:	7bfb      	ldrb	r3, [r7, #15]
 8015982:	4618      	mov	r0, r3
 8015984:	f000 f904 	bl	8015b90 <USBD_Get_USB_Status>
 8015988:	4603      	mov	r3, r0
 801598a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801598c:	7bbb      	ldrb	r3, [r7, #14]
}
 801598e:	4618      	mov	r0, r3
 8015990:	3710      	adds	r7, #16
 8015992:	46bd      	mov	sp, r7
 8015994:	bd80      	pop	{r7, pc}

08015996 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015996:	b580      	push	{r7, lr}
 8015998:	b084      	sub	sp, #16
 801599a:	af00      	add	r7, sp, #0
 801599c:	6078      	str	r0, [r7, #4]
 801599e:	460b      	mov	r3, r1
 80159a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159a2:	2300      	movs	r3, #0
 80159a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159a6:	2300      	movs	r3, #0
 80159a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80159b0:	78fa      	ldrb	r2, [r7, #3]
 80159b2:	4611      	mov	r1, r2
 80159b4:	4618      	mov	r0, r3
 80159b6:	f7f7 f9bc 	bl	800cd32 <HAL_PCD_EP_Close>
 80159ba:	4603      	mov	r3, r0
 80159bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159be:	7bfb      	ldrb	r3, [r7, #15]
 80159c0:	4618      	mov	r0, r3
 80159c2:	f000 f8e5 	bl	8015b90 <USBD_Get_USB_Status>
 80159c6:	4603      	mov	r3, r0
 80159c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80159ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80159cc:	4618      	mov	r0, r3
 80159ce:	3710      	adds	r7, #16
 80159d0:	46bd      	mov	sp, r7
 80159d2:	bd80      	pop	{r7, pc}

080159d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b084      	sub	sp, #16
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
 80159dc:	460b      	mov	r3, r1
 80159de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159e0:	2300      	movs	r3, #0
 80159e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159e4:	2300      	movs	r3, #0
 80159e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80159ee:	78fa      	ldrb	r2, [r7, #3]
 80159f0:	4611      	mov	r1, r2
 80159f2:	4618      	mov	r0, r3
 80159f4:	f7f7 fa94 	bl	800cf20 <HAL_PCD_EP_SetStall>
 80159f8:	4603      	mov	r3, r0
 80159fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159fc:	7bfb      	ldrb	r3, [r7, #15]
 80159fe:	4618      	mov	r0, r3
 8015a00:	f000 f8c6 	bl	8015b90 <USBD_Get_USB_Status>
 8015a04:	4603      	mov	r3, r0
 8015a06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a08:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	3710      	adds	r7, #16
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	bd80      	pop	{r7, pc}

08015a12 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a12:	b580      	push	{r7, lr}
 8015a14:	b084      	sub	sp, #16
 8015a16:	af00      	add	r7, sp, #0
 8015a18:	6078      	str	r0, [r7, #4]
 8015a1a:	460b      	mov	r3, r1
 8015a1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a1e:	2300      	movs	r3, #0
 8015a20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a22:	2300      	movs	r3, #0
 8015a24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015a2c:	78fa      	ldrb	r2, [r7, #3]
 8015a2e:	4611      	mov	r1, r2
 8015a30:	4618      	mov	r0, r3
 8015a32:	f7f7 fad9 	bl	800cfe8 <HAL_PCD_EP_ClrStall>
 8015a36:	4603      	mov	r3, r0
 8015a38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a3a:	7bfb      	ldrb	r3, [r7, #15]
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	f000 f8a7 	bl	8015b90 <USBD_Get_USB_Status>
 8015a42:	4603      	mov	r3, r0
 8015a44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a46:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a48:	4618      	mov	r0, r3
 8015a4a:	3710      	adds	r7, #16
 8015a4c:	46bd      	mov	sp, r7
 8015a4e:	bd80      	pop	{r7, pc}

08015a50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a50:	b480      	push	{r7}
 8015a52:	b085      	sub	sp, #20
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
 8015a58:	460b      	mov	r3, r1
 8015a5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015a62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015a64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	da0b      	bge.n	8015a84 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015a6c:	78fb      	ldrb	r3, [r7, #3]
 8015a6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015a72:	68f9      	ldr	r1, [r7, #12]
 8015a74:	4613      	mov	r3, r2
 8015a76:	00db      	lsls	r3, r3, #3
 8015a78:	1a9b      	subs	r3, r3, r2
 8015a7a:	009b      	lsls	r3, r3, #2
 8015a7c:	440b      	add	r3, r1
 8015a7e:	333e      	adds	r3, #62	; 0x3e
 8015a80:	781b      	ldrb	r3, [r3, #0]
 8015a82:	e00b      	b.n	8015a9c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015a84:	78fb      	ldrb	r3, [r7, #3]
 8015a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015a8a:	68f9      	ldr	r1, [r7, #12]
 8015a8c:	4613      	mov	r3, r2
 8015a8e:	00db      	lsls	r3, r3, #3
 8015a90:	1a9b      	subs	r3, r3, r2
 8015a92:	009b      	lsls	r3, r3, #2
 8015a94:	440b      	add	r3, r1
 8015a96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015a9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	3714      	adds	r7, #20
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa6:	4770      	bx	lr

08015aa8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b084      	sub	sp, #16
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	6078      	str	r0, [r7, #4]
 8015ab0:	460b      	mov	r3, r1
 8015ab2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ab8:	2300      	movs	r3, #0
 8015aba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015ac2:	78fa      	ldrb	r2, [r7, #3]
 8015ac4:	4611      	mov	r1, r2
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	f7f7 f8a6 	bl	800cc18 <HAL_PCD_SetAddress>
 8015acc:	4603      	mov	r3, r0
 8015ace:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ad0:	7bfb      	ldrb	r3, [r7, #15]
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	f000 f85c 	bl	8015b90 <USBD_Get_USB_Status>
 8015ad8:	4603      	mov	r3, r0
 8015ada:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015adc:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ade:	4618      	mov	r0, r3
 8015ae0:	3710      	adds	r7, #16
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	bd80      	pop	{r7, pc}

08015ae6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015ae6:	b580      	push	{r7, lr}
 8015ae8:	b086      	sub	sp, #24
 8015aea:	af00      	add	r7, sp, #0
 8015aec:	60f8      	str	r0, [r7, #12]
 8015aee:	607a      	str	r2, [r7, #4]
 8015af0:	603b      	str	r3, [r7, #0]
 8015af2:	460b      	mov	r3, r1
 8015af4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015af6:	2300      	movs	r3, #0
 8015af8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015afa:	2300      	movs	r3, #0
 8015afc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015b04:	7af9      	ldrb	r1, [r7, #11]
 8015b06:	683b      	ldr	r3, [r7, #0]
 8015b08:	687a      	ldr	r2, [r7, #4]
 8015b0a:	f7f7 f9bf 	bl	800ce8c <HAL_PCD_EP_Transmit>
 8015b0e:	4603      	mov	r3, r0
 8015b10:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b12:	7dfb      	ldrb	r3, [r7, #23]
 8015b14:	4618      	mov	r0, r3
 8015b16:	f000 f83b 	bl	8015b90 <USBD_Get_USB_Status>
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015b1e:	7dbb      	ldrb	r3, [r7, #22]
}
 8015b20:	4618      	mov	r0, r3
 8015b22:	3718      	adds	r7, #24
 8015b24:	46bd      	mov	sp, r7
 8015b26:	bd80      	pop	{r7, pc}

08015b28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	b086      	sub	sp, #24
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	60f8      	str	r0, [r7, #12]
 8015b30:	607a      	str	r2, [r7, #4]
 8015b32:	603b      	str	r3, [r7, #0]
 8015b34:	460b      	mov	r3, r1
 8015b36:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b38:	2300      	movs	r3, #0
 8015b3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015b46:	7af9      	ldrb	r1, [r7, #11]
 8015b48:	683b      	ldr	r3, [r7, #0]
 8015b4a:	687a      	ldr	r2, [r7, #4]
 8015b4c:	f7f7 f93b 	bl	800cdc6 <HAL_PCD_EP_Receive>
 8015b50:	4603      	mov	r3, r0
 8015b52:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b54:	7dfb      	ldrb	r3, [r7, #23]
 8015b56:	4618      	mov	r0, r3
 8015b58:	f000 f81a 	bl	8015b90 <USBD_Get_USB_Status>
 8015b5c:	4603      	mov	r3, r0
 8015b5e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015b60:	7dbb      	ldrb	r3, [r7, #22]
}
 8015b62:	4618      	mov	r0, r3
 8015b64:	3718      	adds	r7, #24
 8015b66:	46bd      	mov	sp, r7
 8015b68:	bd80      	pop	{r7, pc}

08015b6a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b6a:	b580      	push	{r7, lr}
 8015b6c:	b082      	sub	sp, #8
 8015b6e:	af00      	add	r7, sp, #0
 8015b70:	6078      	str	r0, [r7, #4]
 8015b72:	460b      	mov	r3, r1
 8015b74:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015b7c:	78fa      	ldrb	r2, [r7, #3]
 8015b7e:	4611      	mov	r1, r2
 8015b80:	4618      	mov	r0, r3
 8015b82:	f7f7 f96b 	bl	800ce5c <HAL_PCD_EP_GetRxCount>
 8015b86:	4603      	mov	r3, r0
}
 8015b88:	4618      	mov	r0, r3
 8015b8a:	3708      	adds	r7, #8
 8015b8c:	46bd      	mov	sp, r7
 8015b8e:	bd80      	pop	{r7, pc}

08015b90 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015b90:	b480      	push	{r7}
 8015b92:	b085      	sub	sp, #20
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	4603      	mov	r3, r0
 8015b98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015b9e:	79fb      	ldrb	r3, [r7, #7]
 8015ba0:	2b03      	cmp	r3, #3
 8015ba2:	d817      	bhi.n	8015bd4 <USBD_Get_USB_Status+0x44>
 8015ba4:	a201      	add	r2, pc, #4	; (adr r2, 8015bac <USBD_Get_USB_Status+0x1c>)
 8015ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015baa:	bf00      	nop
 8015bac:	08015bbd 	.word	0x08015bbd
 8015bb0:	08015bc3 	.word	0x08015bc3
 8015bb4:	08015bc9 	.word	0x08015bc9
 8015bb8:	08015bcf 	.word	0x08015bcf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8015bc0:	e00b      	b.n	8015bda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015bc2:	2303      	movs	r3, #3
 8015bc4:	73fb      	strb	r3, [r7, #15]
    break;
 8015bc6:	e008      	b.n	8015bda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015bc8:	2301      	movs	r3, #1
 8015bca:	73fb      	strb	r3, [r7, #15]
    break;
 8015bcc:	e005      	b.n	8015bda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015bce:	2303      	movs	r3, #3
 8015bd0:	73fb      	strb	r3, [r7, #15]
    break;
 8015bd2:	e002      	b.n	8015bda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015bd4:	2303      	movs	r3, #3
 8015bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8015bd8:	bf00      	nop
  }
  return usb_status;
 8015bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8015bdc:	4618      	mov	r0, r3
 8015bde:	3714      	adds	r7, #20
 8015be0:	46bd      	mov	sp, r7
 8015be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be6:	4770      	bx	lr

08015be8 <__errno>:
 8015be8:	4b01      	ldr	r3, [pc, #4]	; (8015bf0 <__errno+0x8>)
 8015bea:	6818      	ldr	r0, [r3, #0]
 8015bec:	4770      	bx	lr
 8015bee:	bf00      	nop
 8015bf0:	200009ac 	.word	0x200009ac

08015bf4 <__libc_init_array>:
 8015bf4:	b570      	push	{r4, r5, r6, lr}
 8015bf6:	4e0d      	ldr	r6, [pc, #52]	; (8015c2c <__libc_init_array+0x38>)
 8015bf8:	4c0d      	ldr	r4, [pc, #52]	; (8015c30 <__libc_init_array+0x3c>)
 8015bfa:	1ba4      	subs	r4, r4, r6
 8015bfc:	10a4      	asrs	r4, r4, #2
 8015bfe:	2500      	movs	r5, #0
 8015c00:	42a5      	cmp	r5, r4
 8015c02:	d109      	bne.n	8015c18 <__libc_init_array+0x24>
 8015c04:	4e0b      	ldr	r6, [pc, #44]	; (8015c34 <__libc_init_array+0x40>)
 8015c06:	4c0c      	ldr	r4, [pc, #48]	; (8015c38 <__libc_init_array+0x44>)
 8015c08:	f005 fa8c 	bl	801b124 <_init>
 8015c0c:	1ba4      	subs	r4, r4, r6
 8015c0e:	10a4      	asrs	r4, r4, #2
 8015c10:	2500      	movs	r5, #0
 8015c12:	42a5      	cmp	r5, r4
 8015c14:	d105      	bne.n	8015c22 <__libc_init_array+0x2e>
 8015c16:	bd70      	pop	{r4, r5, r6, pc}
 8015c18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015c1c:	4798      	blx	r3
 8015c1e:	3501      	adds	r5, #1
 8015c20:	e7ee      	b.n	8015c00 <__libc_init_array+0xc>
 8015c22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015c26:	4798      	blx	r3
 8015c28:	3501      	adds	r5, #1
 8015c2a:	e7f2      	b.n	8015c12 <__libc_init_array+0x1e>
 8015c2c:	0801b900 	.word	0x0801b900
 8015c30:	0801b900 	.word	0x0801b900
 8015c34:	0801b900 	.word	0x0801b900
 8015c38:	0801b904 	.word	0x0801b904

08015c3c <malloc>:
 8015c3c:	4b02      	ldr	r3, [pc, #8]	; (8015c48 <malloc+0xc>)
 8015c3e:	4601      	mov	r1, r0
 8015c40:	6818      	ldr	r0, [r3, #0]
 8015c42:	f000 b885 	b.w	8015d50 <_malloc_r>
 8015c46:	bf00      	nop
 8015c48:	200009ac 	.word	0x200009ac

08015c4c <free>:
 8015c4c:	4b02      	ldr	r3, [pc, #8]	; (8015c58 <free+0xc>)
 8015c4e:	4601      	mov	r1, r0
 8015c50:	6818      	ldr	r0, [r3, #0]
 8015c52:	f000 b82f 	b.w	8015cb4 <_free_r>
 8015c56:	bf00      	nop
 8015c58:	200009ac 	.word	0x200009ac

08015c5c <memcpy>:
 8015c5c:	b510      	push	{r4, lr}
 8015c5e:	1e43      	subs	r3, r0, #1
 8015c60:	440a      	add	r2, r1
 8015c62:	4291      	cmp	r1, r2
 8015c64:	d100      	bne.n	8015c68 <memcpy+0xc>
 8015c66:	bd10      	pop	{r4, pc}
 8015c68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015c6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015c70:	e7f7      	b.n	8015c62 <memcpy+0x6>

08015c72 <memmove>:
 8015c72:	4288      	cmp	r0, r1
 8015c74:	b510      	push	{r4, lr}
 8015c76:	eb01 0302 	add.w	r3, r1, r2
 8015c7a:	d807      	bhi.n	8015c8c <memmove+0x1a>
 8015c7c:	1e42      	subs	r2, r0, #1
 8015c7e:	4299      	cmp	r1, r3
 8015c80:	d00a      	beq.n	8015c98 <memmove+0x26>
 8015c82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015c86:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015c8a:	e7f8      	b.n	8015c7e <memmove+0xc>
 8015c8c:	4283      	cmp	r3, r0
 8015c8e:	d9f5      	bls.n	8015c7c <memmove+0xa>
 8015c90:	1881      	adds	r1, r0, r2
 8015c92:	1ad2      	subs	r2, r2, r3
 8015c94:	42d3      	cmn	r3, r2
 8015c96:	d100      	bne.n	8015c9a <memmove+0x28>
 8015c98:	bd10      	pop	{r4, pc}
 8015c9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015c9e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015ca2:	e7f7      	b.n	8015c94 <memmove+0x22>

08015ca4 <memset>:
 8015ca4:	4402      	add	r2, r0
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	4293      	cmp	r3, r2
 8015caa:	d100      	bne.n	8015cae <memset+0xa>
 8015cac:	4770      	bx	lr
 8015cae:	f803 1b01 	strb.w	r1, [r3], #1
 8015cb2:	e7f9      	b.n	8015ca8 <memset+0x4>

08015cb4 <_free_r>:
 8015cb4:	b538      	push	{r3, r4, r5, lr}
 8015cb6:	4605      	mov	r5, r0
 8015cb8:	2900      	cmp	r1, #0
 8015cba:	d045      	beq.n	8015d48 <_free_r+0x94>
 8015cbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015cc0:	1f0c      	subs	r4, r1, #4
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	bfb8      	it	lt
 8015cc6:	18e4      	addlt	r4, r4, r3
 8015cc8:	f002 ff86 	bl	8018bd8 <__malloc_lock>
 8015ccc:	4a1f      	ldr	r2, [pc, #124]	; (8015d4c <_free_r+0x98>)
 8015cce:	6813      	ldr	r3, [r2, #0]
 8015cd0:	4610      	mov	r0, r2
 8015cd2:	b933      	cbnz	r3, 8015ce2 <_free_r+0x2e>
 8015cd4:	6063      	str	r3, [r4, #4]
 8015cd6:	6014      	str	r4, [r2, #0]
 8015cd8:	4628      	mov	r0, r5
 8015cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015cde:	f002 bf7c 	b.w	8018bda <__malloc_unlock>
 8015ce2:	42a3      	cmp	r3, r4
 8015ce4:	d90c      	bls.n	8015d00 <_free_r+0x4c>
 8015ce6:	6821      	ldr	r1, [r4, #0]
 8015ce8:	1862      	adds	r2, r4, r1
 8015cea:	4293      	cmp	r3, r2
 8015cec:	bf04      	itt	eq
 8015cee:	681a      	ldreq	r2, [r3, #0]
 8015cf0:	685b      	ldreq	r3, [r3, #4]
 8015cf2:	6063      	str	r3, [r4, #4]
 8015cf4:	bf04      	itt	eq
 8015cf6:	1852      	addeq	r2, r2, r1
 8015cf8:	6022      	streq	r2, [r4, #0]
 8015cfa:	6004      	str	r4, [r0, #0]
 8015cfc:	e7ec      	b.n	8015cd8 <_free_r+0x24>
 8015cfe:	4613      	mov	r3, r2
 8015d00:	685a      	ldr	r2, [r3, #4]
 8015d02:	b10a      	cbz	r2, 8015d08 <_free_r+0x54>
 8015d04:	42a2      	cmp	r2, r4
 8015d06:	d9fa      	bls.n	8015cfe <_free_r+0x4a>
 8015d08:	6819      	ldr	r1, [r3, #0]
 8015d0a:	1858      	adds	r0, r3, r1
 8015d0c:	42a0      	cmp	r0, r4
 8015d0e:	d10b      	bne.n	8015d28 <_free_r+0x74>
 8015d10:	6820      	ldr	r0, [r4, #0]
 8015d12:	4401      	add	r1, r0
 8015d14:	1858      	adds	r0, r3, r1
 8015d16:	4282      	cmp	r2, r0
 8015d18:	6019      	str	r1, [r3, #0]
 8015d1a:	d1dd      	bne.n	8015cd8 <_free_r+0x24>
 8015d1c:	6810      	ldr	r0, [r2, #0]
 8015d1e:	6852      	ldr	r2, [r2, #4]
 8015d20:	605a      	str	r2, [r3, #4]
 8015d22:	4401      	add	r1, r0
 8015d24:	6019      	str	r1, [r3, #0]
 8015d26:	e7d7      	b.n	8015cd8 <_free_r+0x24>
 8015d28:	d902      	bls.n	8015d30 <_free_r+0x7c>
 8015d2a:	230c      	movs	r3, #12
 8015d2c:	602b      	str	r3, [r5, #0]
 8015d2e:	e7d3      	b.n	8015cd8 <_free_r+0x24>
 8015d30:	6820      	ldr	r0, [r4, #0]
 8015d32:	1821      	adds	r1, r4, r0
 8015d34:	428a      	cmp	r2, r1
 8015d36:	bf04      	itt	eq
 8015d38:	6811      	ldreq	r1, [r2, #0]
 8015d3a:	6852      	ldreq	r2, [r2, #4]
 8015d3c:	6062      	str	r2, [r4, #4]
 8015d3e:	bf04      	itt	eq
 8015d40:	1809      	addeq	r1, r1, r0
 8015d42:	6021      	streq	r1, [r4, #0]
 8015d44:	605c      	str	r4, [r3, #4]
 8015d46:	e7c7      	b.n	8015cd8 <_free_r+0x24>
 8015d48:	bd38      	pop	{r3, r4, r5, pc}
 8015d4a:	bf00      	nop
 8015d4c:	20004d58 	.word	0x20004d58

08015d50 <_malloc_r>:
 8015d50:	b570      	push	{r4, r5, r6, lr}
 8015d52:	1ccd      	adds	r5, r1, #3
 8015d54:	f025 0503 	bic.w	r5, r5, #3
 8015d58:	3508      	adds	r5, #8
 8015d5a:	2d0c      	cmp	r5, #12
 8015d5c:	bf38      	it	cc
 8015d5e:	250c      	movcc	r5, #12
 8015d60:	2d00      	cmp	r5, #0
 8015d62:	4606      	mov	r6, r0
 8015d64:	db01      	blt.n	8015d6a <_malloc_r+0x1a>
 8015d66:	42a9      	cmp	r1, r5
 8015d68:	d903      	bls.n	8015d72 <_malloc_r+0x22>
 8015d6a:	230c      	movs	r3, #12
 8015d6c:	6033      	str	r3, [r6, #0]
 8015d6e:	2000      	movs	r0, #0
 8015d70:	bd70      	pop	{r4, r5, r6, pc}
 8015d72:	f002 ff31 	bl	8018bd8 <__malloc_lock>
 8015d76:	4a21      	ldr	r2, [pc, #132]	; (8015dfc <_malloc_r+0xac>)
 8015d78:	6814      	ldr	r4, [r2, #0]
 8015d7a:	4621      	mov	r1, r4
 8015d7c:	b991      	cbnz	r1, 8015da4 <_malloc_r+0x54>
 8015d7e:	4c20      	ldr	r4, [pc, #128]	; (8015e00 <_malloc_r+0xb0>)
 8015d80:	6823      	ldr	r3, [r4, #0]
 8015d82:	b91b      	cbnz	r3, 8015d8c <_malloc_r+0x3c>
 8015d84:	4630      	mov	r0, r6
 8015d86:	f000 fe7b 	bl	8016a80 <_sbrk_r>
 8015d8a:	6020      	str	r0, [r4, #0]
 8015d8c:	4629      	mov	r1, r5
 8015d8e:	4630      	mov	r0, r6
 8015d90:	f000 fe76 	bl	8016a80 <_sbrk_r>
 8015d94:	1c43      	adds	r3, r0, #1
 8015d96:	d124      	bne.n	8015de2 <_malloc_r+0x92>
 8015d98:	230c      	movs	r3, #12
 8015d9a:	6033      	str	r3, [r6, #0]
 8015d9c:	4630      	mov	r0, r6
 8015d9e:	f002 ff1c 	bl	8018bda <__malloc_unlock>
 8015da2:	e7e4      	b.n	8015d6e <_malloc_r+0x1e>
 8015da4:	680b      	ldr	r3, [r1, #0]
 8015da6:	1b5b      	subs	r3, r3, r5
 8015da8:	d418      	bmi.n	8015ddc <_malloc_r+0x8c>
 8015daa:	2b0b      	cmp	r3, #11
 8015dac:	d90f      	bls.n	8015dce <_malloc_r+0x7e>
 8015dae:	600b      	str	r3, [r1, #0]
 8015db0:	50cd      	str	r5, [r1, r3]
 8015db2:	18cc      	adds	r4, r1, r3
 8015db4:	4630      	mov	r0, r6
 8015db6:	f002 ff10 	bl	8018bda <__malloc_unlock>
 8015dba:	f104 000b 	add.w	r0, r4, #11
 8015dbe:	1d23      	adds	r3, r4, #4
 8015dc0:	f020 0007 	bic.w	r0, r0, #7
 8015dc4:	1ac3      	subs	r3, r0, r3
 8015dc6:	d0d3      	beq.n	8015d70 <_malloc_r+0x20>
 8015dc8:	425a      	negs	r2, r3
 8015dca:	50e2      	str	r2, [r4, r3]
 8015dcc:	e7d0      	b.n	8015d70 <_malloc_r+0x20>
 8015dce:	428c      	cmp	r4, r1
 8015dd0:	684b      	ldr	r3, [r1, #4]
 8015dd2:	bf16      	itet	ne
 8015dd4:	6063      	strne	r3, [r4, #4]
 8015dd6:	6013      	streq	r3, [r2, #0]
 8015dd8:	460c      	movne	r4, r1
 8015dda:	e7eb      	b.n	8015db4 <_malloc_r+0x64>
 8015ddc:	460c      	mov	r4, r1
 8015dde:	6849      	ldr	r1, [r1, #4]
 8015de0:	e7cc      	b.n	8015d7c <_malloc_r+0x2c>
 8015de2:	1cc4      	adds	r4, r0, #3
 8015de4:	f024 0403 	bic.w	r4, r4, #3
 8015de8:	42a0      	cmp	r0, r4
 8015dea:	d005      	beq.n	8015df8 <_malloc_r+0xa8>
 8015dec:	1a21      	subs	r1, r4, r0
 8015dee:	4630      	mov	r0, r6
 8015df0:	f000 fe46 	bl	8016a80 <_sbrk_r>
 8015df4:	3001      	adds	r0, #1
 8015df6:	d0cf      	beq.n	8015d98 <_malloc_r+0x48>
 8015df8:	6025      	str	r5, [r4, #0]
 8015dfa:	e7db      	b.n	8015db4 <_malloc_r+0x64>
 8015dfc:	20004d58 	.word	0x20004d58
 8015e00:	20004d5c 	.word	0x20004d5c

08015e04 <__cvt>:
 8015e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015e08:	ec55 4b10 	vmov	r4, r5, d0
 8015e0c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015e0e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015e12:	2d00      	cmp	r5, #0
 8015e14:	460e      	mov	r6, r1
 8015e16:	4691      	mov	r9, r2
 8015e18:	4619      	mov	r1, r3
 8015e1a:	bfb8      	it	lt
 8015e1c:	4622      	movlt	r2, r4
 8015e1e:	462b      	mov	r3, r5
 8015e20:	f027 0720 	bic.w	r7, r7, #32
 8015e24:	bfbb      	ittet	lt
 8015e26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015e2a:	461d      	movlt	r5, r3
 8015e2c:	2300      	movge	r3, #0
 8015e2e:	232d      	movlt	r3, #45	; 0x2d
 8015e30:	bfb8      	it	lt
 8015e32:	4614      	movlt	r4, r2
 8015e34:	2f46      	cmp	r7, #70	; 0x46
 8015e36:	700b      	strb	r3, [r1, #0]
 8015e38:	d004      	beq.n	8015e44 <__cvt+0x40>
 8015e3a:	2f45      	cmp	r7, #69	; 0x45
 8015e3c:	d100      	bne.n	8015e40 <__cvt+0x3c>
 8015e3e:	3601      	adds	r6, #1
 8015e40:	2102      	movs	r1, #2
 8015e42:	e000      	b.n	8015e46 <__cvt+0x42>
 8015e44:	2103      	movs	r1, #3
 8015e46:	ab03      	add	r3, sp, #12
 8015e48:	9301      	str	r3, [sp, #4]
 8015e4a:	ab02      	add	r3, sp, #8
 8015e4c:	9300      	str	r3, [sp, #0]
 8015e4e:	4632      	mov	r2, r6
 8015e50:	4653      	mov	r3, sl
 8015e52:	ec45 4b10 	vmov	d0, r4, r5
 8015e56:	f001 fdbb 	bl	80179d0 <_dtoa_r>
 8015e5a:	2f47      	cmp	r7, #71	; 0x47
 8015e5c:	4680      	mov	r8, r0
 8015e5e:	d102      	bne.n	8015e66 <__cvt+0x62>
 8015e60:	f019 0f01 	tst.w	r9, #1
 8015e64:	d026      	beq.n	8015eb4 <__cvt+0xb0>
 8015e66:	2f46      	cmp	r7, #70	; 0x46
 8015e68:	eb08 0906 	add.w	r9, r8, r6
 8015e6c:	d111      	bne.n	8015e92 <__cvt+0x8e>
 8015e6e:	f898 3000 	ldrb.w	r3, [r8]
 8015e72:	2b30      	cmp	r3, #48	; 0x30
 8015e74:	d10a      	bne.n	8015e8c <__cvt+0x88>
 8015e76:	2200      	movs	r2, #0
 8015e78:	2300      	movs	r3, #0
 8015e7a:	4620      	mov	r0, r4
 8015e7c:	4629      	mov	r1, r5
 8015e7e:	f7ea fe23 	bl	8000ac8 <__aeabi_dcmpeq>
 8015e82:	b918      	cbnz	r0, 8015e8c <__cvt+0x88>
 8015e84:	f1c6 0601 	rsb	r6, r6, #1
 8015e88:	f8ca 6000 	str.w	r6, [sl]
 8015e8c:	f8da 3000 	ldr.w	r3, [sl]
 8015e90:	4499      	add	r9, r3
 8015e92:	2200      	movs	r2, #0
 8015e94:	2300      	movs	r3, #0
 8015e96:	4620      	mov	r0, r4
 8015e98:	4629      	mov	r1, r5
 8015e9a:	f7ea fe15 	bl	8000ac8 <__aeabi_dcmpeq>
 8015e9e:	b938      	cbnz	r0, 8015eb0 <__cvt+0xac>
 8015ea0:	2230      	movs	r2, #48	; 0x30
 8015ea2:	9b03      	ldr	r3, [sp, #12]
 8015ea4:	454b      	cmp	r3, r9
 8015ea6:	d205      	bcs.n	8015eb4 <__cvt+0xb0>
 8015ea8:	1c59      	adds	r1, r3, #1
 8015eaa:	9103      	str	r1, [sp, #12]
 8015eac:	701a      	strb	r2, [r3, #0]
 8015eae:	e7f8      	b.n	8015ea2 <__cvt+0x9e>
 8015eb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8015eb4:	9b03      	ldr	r3, [sp, #12]
 8015eb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015eb8:	eba3 0308 	sub.w	r3, r3, r8
 8015ebc:	4640      	mov	r0, r8
 8015ebe:	6013      	str	r3, [r2, #0]
 8015ec0:	b004      	add	sp, #16
 8015ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015ec6 <__exponent>:
 8015ec6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015ec8:	2900      	cmp	r1, #0
 8015eca:	4604      	mov	r4, r0
 8015ecc:	bfba      	itte	lt
 8015ece:	4249      	neglt	r1, r1
 8015ed0:	232d      	movlt	r3, #45	; 0x2d
 8015ed2:	232b      	movge	r3, #43	; 0x2b
 8015ed4:	2909      	cmp	r1, #9
 8015ed6:	f804 2b02 	strb.w	r2, [r4], #2
 8015eda:	7043      	strb	r3, [r0, #1]
 8015edc:	dd20      	ble.n	8015f20 <__exponent+0x5a>
 8015ede:	f10d 0307 	add.w	r3, sp, #7
 8015ee2:	461f      	mov	r7, r3
 8015ee4:	260a      	movs	r6, #10
 8015ee6:	fb91 f5f6 	sdiv	r5, r1, r6
 8015eea:	fb06 1115 	mls	r1, r6, r5, r1
 8015eee:	3130      	adds	r1, #48	; 0x30
 8015ef0:	2d09      	cmp	r5, #9
 8015ef2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015ef6:	f103 32ff 	add.w	r2, r3, #4294967295
 8015efa:	4629      	mov	r1, r5
 8015efc:	dc09      	bgt.n	8015f12 <__exponent+0x4c>
 8015efe:	3130      	adds	r1, #48	; 0x30
 8015f00:	3b02      	subs	r3, #2
 8015f02:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015f06:	42bb      	cmp	r3, r7
 8015f08:	4622      	mov	r2, r4
 8015f0a:	d304      	bcc.n	8015f16 <__exponent+0x50>
 8015f0c:	1a10      	subs	r0, r2, r0
 8015f0e:	b003      	add	sp, #12
 8015f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f12:	4613      	mov	r3, r2
 8015f14:	e7e7      	b.n	8015ee6 <__exponent+0x20>
 8015f16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f1a:	f804 2b01 	strb.w	r2, [r4], #1
 8015f1e:	e7f2      	b.n	8015f06 <__exponent+0x40>
 8015f20:	2330      	movs	r3, #48	; 0x30
 8015f22:	4419      	add	r1, r3
 8015f24:	7083      	strb	r3, [r0, #2]
 8015f26:	1d02      	adds	r2, r0, #4
 8015f28:	70c1      	strb	r1, [r0, #3]
 8015f2a:	e7ef      	b.n	8015f0c <__exponent+0x46>

08015f2c <_printf_float>:
 8015f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f30:	b08d      	sub	sp, #52	; 0x34
 8015f32:	460c      	mov	r4, r1
 8015f34:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015f38:	4616      	mov	r6, r2
 8015f3a:	461f      	mov	r7, r3
 8015f3c:	4605      	mov	r5, r0
 8015f3e:	f002 fe2b 	bl	8018b98 <_localeconv_r>
 8015f42:	6803      	ldr	r3, [r0, #0]
 8015f44:	9304      	str	r3, [sp, #16]
 8015f46:	4618      	mov	r0, r3
 8015f48:	f7ea f942 	bl	80001d0 <strlen>
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8015f50:	f8d8 3000 	ldr.w	r3, [r8]
 8015f54:	9005      	str	r0, [sp, #20]
 8015f56:	3307      	adds	r3, #7
 8015f58:	f023 0307 	bic.w	r3, r3, #7
 8015f5c:	f103 0208 	add.w	r2, r3, #8
 8015f60:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015f64:	f8d4 b000 	ldr.w	fp, [r4]
 8015f68:	f8c8 2000 	str.w	r2, [r8]
 8015f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f70:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015f74:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015f78:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015f7c:	9307      	str	r3, [sp, #28]
 8015f7e:	f8cd 8018 	str.w	r8, [sp, #24]
 8015f82:	f04f 32ff 	mov.w	r2, #4294967295
 8015f86:	4ba7      	ldr	r3, [pc, #668]	; (8016224 <_printf_float+0x2f8>)
 8015f88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015f8c:	f7ea fdce 	bl	8000b2c <__aeabi_dcmpun>
 8015f90:	bb70      	cbnz	r0, 8015ff0 <_printf_float+0xc4>
 8015f92:	f04f 32ff 	mov.w	r2, #4294967295
 8015f96:	4ba3      	ldr	r3, [pc, #652]	; (8016224 <_printf_float+0x2f8>)
 8015f98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015f9c:	f7ea fda8 	bl	8000af0 <__aeabi_dcmple>
 8015fa0:	bb30      	cbnz	r0, 8015ff0 <_printf_float+0xc4>
 8015fa2:	2200      	movs	r2, #0
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	4640      	mov	r0, r8
 8015fa8:	4649      	mov	r1, r9
 8015faa:	f7ea fd97 	bl	8000adc <__aeabi_dcmplt>
 8015fae:	b110      	cbz	r0, 8015fb6 <_printf_float+0x8a>
 8015fb0:	232d      	movs	r3, #45	; 0x2d
 8015fb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015fb6:	4a9c      	ldr	r2, [pc, #624]	; (8016228 <_printf_float+0x2fc>)
 8015fb8:	4b9c      	ldr	r3, [pc, #624]	; (801622c <_printf_float+0x300>)
 8015fba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015fbe:	bf8c      	ite	hi
 8015fc0:	4690      	movhi	r8, r2
 8015fc2:	4698      	movls	r8, r3
 8015fc4:	2303      	movs	r3, #3
 8015fc6:	f02b 0204 	bic.w	r2, fp, #4
 8015fca:	6123      	str	r3, [r4, #16]
 8015fcc:	6022      	str	r2, [r4, #0]
 8015fce:	f04f 0900 	mov.w	r9, #0
 8015fd2:	9700      	str	r7, [sp, #0]
 8015fd4:	4633      	mov	r3, r6
 8015fd6:	aa0b      	add	r2, sp, #44	; 0x2c
 8015fd8:	4621      	mov	r1, r4
 8015fda:	4628      	mov	r0, r5
 8015fdc:	f000 f9e6 	bl	80163ac <_printf_common>
 8015fe0:	3001      	adds	r0, #1
 8015fe2:	f040 808d 	bne.w	8016100 <_printf_float+0x1d4>
 8015fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8015fea:	b00d      	add	sp, #52	; 0x34
 8015fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ff0:	4642      	mov	r2, r8
 8015ff2:	464b      	mov	r3, r9
 8015ff4:	4640      	mov	r0, r8
 8015ff6:	4649      	mov	r1, r9
 8015ff8:	f7ea fd98 	bl	8000b2c <__aeabi_dcmpun>
 8015ffc:	b110      	cbz	r0, 8016004 <_printf_float+0xd8>
 8015ffe:	4a8c      	ldr	r2, [pc, #560]	; (8016230 <_printf_float+0x304>)
 8016000:	4b8c      	ldr	r3, [pc, #560]	; (8016234 <_printf_float+0x308>)
 8016002:	e7da      	b.n	8015fba <_printf_float+0x8e>
 8016004:	6861      	ldr	r1, [r4, #4]
 8016006:	1c4b      	adds	r3, r1, #1
 8016008:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801600c:	a80a      	add	r0, sp, #40	; 0x28
 801600e:	d13e      	bne.n	801608e <_printf_float+0x162>
 8016010:	2306      	movs	r3, #6
 8016012:	6063      	str	r3, [r4, #4]
 8016014:	2300      	movs	r3, #0
 8016016:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801601a:	ab09      	add	r3, sp, #36	; 0x24
 801601c:	9300      	str	r3, [sp, #0]
 801601e:	ec49 8b10 	vmov	d0, r8, r9
 8016022:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016026:	6022      	str	r2, [r4, #0]
 8016028:	f8cd a004 	str.w	sl, [sp, #4]
 801602c:	6861      	ldr	r1, [r4, #4]
 801602e:	4628      	mov	r0, r5
 8016030:	f7ff fee8 	bl	8015e04 <__cvt>
 8016034:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8016038:	2b47      	cmp	r3, #71	; 0x47
 801603a:	4680      	mov	r8, r0
 801603c:	d109      	bne.n	8016052 <_printf_float+0x126>
 801603e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016040:	1cd8      	adds	r0, r3, #3
 8016042:	db02      	blt.n	801604a <_printf_float+0x11e>
 8016044:	6862      	ldr	r2, [r4, #4]
 8016046:	4293      	cmp	r3, r2
 8016048:	dd47      	ble.n	80160da <_printf_float+0x1ae>
 801604a:	f1aa 0a02 	sub.w	sl, sl, #2
 801604e:	fa5f fa8a 	uxtb.w	sl, sl
 8016052:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8016056:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016058:	d824      	bhi.n	80160a4 <_printf_float+0x178>
 801605a:	3901      	subs	r1, #1
 801605c:	4652      	mov	r2, sl
 801605e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016062:	9109      	str	r1, [sp, #36]	; 0x24
 8016064:	f7ff ff2f 	bl	8015ec6 <__exponent>
 8016068:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801606a:	1813      	adds	r3, r2, r0
 801606c:	2a01      	cmp	r2, #1
 801606e:	4681      	mov	r9, r0
 8016070:	6123      	str	r3, [r4, #16]
 8016072:	dc02      	bgt.n	801607a <_printf_float+0x14e>
 8016074:	6822      	ldr	r2, [r4, #0]
 8016076:	07d1      	lsls	r1, r2, #31
 8016078:	d501      	bpl.n	801607e <_printf_float+0x152>
 801607a:	3301      	adds	r3, #1
 801607c:	6123      	str	r3, [r4, #16]
 801607e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016082:	2b00      	cmp	r3, #0
 8016084:	d0a5      	beq.n	8015fd2 <_printf_float+0xa6>
 8016086:	232d      	movs	r3, #45	; 0x2d
 8016088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801608c:	e7a1      	b.n	8015fd2 <_printf_float+0xa6>
 801608e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8016092:	f000 8177 	beq.w	8016384 <_printf_float+0x458>
 8016096:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801609a:	d1bb      	bne.n	8016014 <_printf_float+0xe8>
 801609c:	2900      	cmp	r1, #0
 801609e:	d1b9      	bne.n	8016014 <_printf_float+0xe8>
 80160a0:	2301      	movs	r3, #1
 80160a2:	e7b6      	b.n	8016012 <_printf_float+0xe6>
 80160a4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80160a8:	d119      	bne.n	80160de <_printf_float+0x1b2>
 80160aa:	2900      	cmp	r1, #0
 80160ac:	6863      	ldr	r3, [r4, #4]
 80160ae:	dd0c      	ble.n	80160ca <_printf_float+0x19e>
 80160b0:	6121      	str	r1, [r4, #16]
 80160b2:	b913      	cbnz	r3, 80160ba <_printf_float+0x18e>
 80160b4:	6822      	ldr	r2, [r4, #0]
 80160b6:	07d2      	lsls	r2, r2, #31
 80160b8:	d502      	bpl.n	80160c0 <_printf_float+0x194>
 80160ba:	3301      	adds	r3, #1
 80160bc:	440b      	add	r3, r1
 80160be:	6123      	str	r3, [r4, #16]
 80160c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160c2:	65a3      	str	r3, [r4, #88]	; 0x58
 80160c4:	f04f 0900 	mov.w	r9, #0
 80160c8:	e7d9      	b.n	801607e <_printf_float+0x152>
 80160ca:	b913      	cbnz	r3, 80160d2 <_printf_float+0x1a6>
 80160cc:	6822      	ldr	r2, [r4, #0]
 80160ce:	07d0      	lsls	r0, r2, #31
 80160d0:	d501      	bpl.n	80160d6 <_printf_float+0x1aa>
 80160d2:	3302      	adds	r3, #2
 80160d4:	e7f3      	b.n	80160be <_printf_float+0x192>
 80160d6:	2301      	movs	r3, #1
 80160d8:	e7f1      	b.n	80160be <_printf_float+0x192>
 80160da:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80160de:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80160e2:	4293      	cmp	r3, r2
 80160e4:	db05      	blt.n	80160f2 <_printf_float+0x1c6>
 80160e6:	6822      	ldr	r2, [r4, #0]
 80160e8:	6123      	str	r3, [r4, #16]
 80160ea:	07d1      	lsls	r1, r2, #31
 80160ec:	d5e8      	bpl.n	80160c0 <_printf_float+0x194>
 80160ee:	3301      	adds	r3, #1
 80160f0:	e7e5      	b.n	80160be <_printf_float+0x192>
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	bfd4      	ite	le
 80160f6:	f1c3 0302 	rsble	r3, r3, #2
 80160fa:	2301      	movgt	r3, #1
 80160fc:	4413      	add	r3, r2
 80160fe:	e7de      	b.n	80160be <_printf_float+0x192>
 8016100:	6823      	ldr	r3, [r4, #0]
 8016102:	055a      	lsls	r2, r3, #21
 8016104:	d407      	bmi.n	8016116 <_printf_float+0x1ea>
 8016106:	6923      	ldr	r3, [r4, #16]
 8016108:	4642      	mov	r2, r8
 801610a:	4631      	mov	r1, r6
 801610c:	4628      	mov	r0, r5
 801610e:	47b8      	blx	r7
 8016110:	3001      	adds	r0, #1
 8016112:	d12b      	bne.n	801616c <_printf_float+0x240>
 8016114:	e767      	b.n	8015fe6 <_printf_float+0xba>
 8016116:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801611a:	f240 80dc 	bls.w	80162d6 <_printf_float+0x3aa>
 801611e:	2200      	movs	r2, #0
 8016120:	2300      	movs	r3, #0
 8016122:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016126:	f7ea fccf 	bl	8000ac8 <__aeabi_dcmpeq>
 801612a:	2800      	cmp	r0, #0
 801612c:	d033      	beq.n	8016196 <_printf_float+0x26a>
 801612e:	2301      	movs	r3, #1
 8016130:	4a41      	ldr	r2, [pc, #260]	; (8016238 <_printf_float+0x30c>)
 8016132:	4631      	mov	r1, r6
 8016134:	4628      	mov	r0, r5
 8016136:	47b8      	blx	r7
 8016138:	3001      	adds	r0, #1
 801613a:	f43f af54 	beq.w	8015fe6 <_printf_float+0xba>
 801613e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016142:	429a      	cmp	r2, r3
 8016144:	db02      	blt.n	801614c <_printf_float+0x220>
 8016146:	6823      	ldr	r3, [r4, #0]
 8016148:	07d8      	lsls	r0, r3, #31
 801614a:	d50f      	bpl.n	801616c <_printf_float+0x240>
 801614c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016150:	4631      	mov	r1, r6
 8016152:	4628      	mov	r0, r5
 8016154:	47b8      	blx	r7
 8016156:	3001      	adds	r0, #1
 8016158:	f43f af45 	beq.w	8015fe6 <_printf_float+0xba>
 801615c:	f04f 0800 	mov.w	r8, #0
 8016160:	f104 091a 	add.w	r9, r4, #26
 8016164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016166:	3b01      	subs	r3, #1
 8016168:	4543      	cmp	r3, r8
 801616a:	dc09      	bgt.n	8016180 <_printf_float+0x254>
 801616c:	6823      	ldr	r3, [r4, #0]
 801616e:	079b      	lsls	r3, r3, #30
 8016170:	f100 8103 	bmi.w	801637a <_printf_float+0x44e>
 8016174:	68e0      	ldr	r0, [r4, #12]
 8016176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016178:	4298      	cmp	r0, r3
 801617a:	bfb8      	it	lt
 801617c:	4618      	movlt	r0, r3
 801617e:	e734      	b.n	8015fea <_printf_float+0xbe>
 8016180:	2301      	movs	r3, #1
 8016182:	464a      	mov	r2, r9
 8016184:	4631      	mov	r1, r6
 8016186:	4628      	mov	r0, r5
 8016188:	47b8      	blx	r7
 801618a:	3001      	adds	r0, #1
 801618c:	f43f af2b 	beq.w	8015fe6 <_printf_float+0xba>
 8016190:	f108 0801 	add.w	r8, r8, #1
 8016194:	e7e6      	b.n	8016164 <_printf_float+0x238>
 8016196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016198:	2b00      	cmp	r3, #0
 801619a:	dc2b      	bgt.n	80161f4 <_printf_float+0x2c8>
 801619c:	2301      	movs	r3, #1
 801619e:	4a26      	ldr	r2, [pc, #152]	; (8016238 <_printf_float+0x30c>)
 80161a0:	4631      	mov	r1, r6
 80161a2:	4628      	mov	r0, r5
 80161a4:	47b8      	blx	r7
 80161a6:	3001      	adds	r0, #1
 80161a8:	f43f af1d 	beq.w	8015fe6 <_printf_float+0xba>
 80161ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161ae:	b923      	cbnz	r3, 80161ba <_printf_float+0x28e>
 80161b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161b2:	b913      	cbnz	r3, 80161ba <_printf_float+0x28e>
 80161b4:	6823      	ldr	r3, [r4, #0]
 80161b6:	07d9      	lsls	r1, r3, #31
 80161b8:	d5d8      	bpl.n	801616c <_printf_float+0x240>
 80161ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80161be:	4631      	mov	r1, r6
 80161c0:	4628      	mov	r0, r5
 80161c2:	47b8      	blx	r7
 80161c4:	3001      	adds	r0, #1
 80161c6:	f43f af0e 	beq.w	8015fe6 <_printf_float+0xba>
 80161ca:	f04f 0900 	mov.w	r9, #0
 80161ce:	f104 0a1a 	add.w	sl, r4, #26
 80161d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161d4:	425b      	negs	r3, r3
 80161d6:	454b      	cmp	r3, r9
 80161d8:	dc01      	bgt.n	80161de <_printf_float+0x2b2>
 80161da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161dc:	e794      	b.n	8016108 <_printf_float+0x1dc>
 80161de:	2301      	movs	r3, #1
 80161e0:	4652      	mov	r2, sl
 80161e2:	4631      	mov	r1, r6
 80161e4:	4628      	mov	r0, r5
 80161e6:	47b8      	blx	r7
 80161e8:	3001      	adds	r0, #1
 80161ea:	f43f aefc 	beq.w	8015fe6 <_printf_float+0xba>
 80161ee:	f109 0901 	add.w	r9, r9, #1
 80161f2:	e7ee      	b.n	80161d2 <_printf_float+0x2a6>
 80161f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80161f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80161f8:	429a      	cmp	r2, r3
 80161fa:	bfa8      	it	ge
 80161fc:	461a      	movge	r2, r3
 80161fe:	2a00      	cmp	r2, #0
 8016200:	4691      	mov	r9, r2
 8016202:	dd07      	ble.n	8016214 <_printf_float+0x2e8>
 8016204:	4613      	mov	r3, r2
 8016206:	4631      	mov	r1, r6
 8016208:	4642      	mov	r2, r8
 801620a:	4628      	mov	r0, r5
 801620c:	47b8      	blx	r7
 801620e:	3001      	adds	r0, #1
 8016210:	f43f aee9 	beq.w	8015fe6 <_printf_float+0xba>
 8016214:	f104 031a 	add.w	r3, r4, #26
 8016218:	f04f 0b00 	mov.w	fp, #0
 801621c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016220:	9306      	str	r3, [sp, #24]
 8016222:	e015      	b.n	8016250 <_printf_float+0x324>
 8016224:	7fefffff 	.word	0x7fefffff
 8016228:	0801b424 	.word	0x0801b424
 801622c:	0801b420 	.word	0x0801b420
 8016230:	0801b42c 	.word	0x0801b42c
 8016234:	0801b428 	.word	0x0801b428
 8016238:	0801b430 	.word	0x0801b430
 801623c:	2301      	movs	r3, #1
 801623e:	9a06      	ldr	r2, [sp, #24]
 8016240:	4631      	mov	r1, r6
 8016242:	4628      	mov	r0, r5
 8016244:	47b8      	blx	r7
 8016246:	3001      	adds	r0, #1
 8016248:	f43f aecd 	beq.w	8015fe6 <_printf_float+0xba>
 801624c:	f10b 0b01 	add.w	fp, fp, #1
 8016250:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8016254:	ebaa 0309 	sub.w	r3, sl, r9
 8016258:	455b      	cmp	r3, fp
 801625a:	dcef      	bgt.n	801623c <_printf_float+0x310>
 801625c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016260:	429a      	cmp	r2, r3
 8016262:	44d0      	add	r8, sl
 8016264:	db15      	blt.n	8016292 <_printf_float+0x366>
 8016266:	6823      	ldr	r3, [r4, #0]
 8016268:	07da      	lsls	r2, r3, #31
 801626a:	d412      	bmi.n	8016292 <_printf_float+0x366>
 801626c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801626e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016270:	eba3 020a 	sub.w	r2, r3, sl
 8016274:	eba3 0a01 	sub.w	sl, r3, r1
 8016278:	4592      	cmp	sl, r2
 801627a:	bfa8      	it	ge
 801627c:	4692      	movge	sl, r2
 801627e:	f1ba 0f00 	cmp.w	sl, #0
 8016282:	dc0e      	bgt.n	80162a2 <_printf_float+0x376>
 8016284:	f04f 0800 	mov.w	r8, #0
 8016288:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801628c:	f104 091a 	add.w	r9, r4, #26
 8016290:	e019      	b.n	80162c6 <_printf_float+0x39a>
 8016292:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016296:	4631      	mov	r1, r6
 8016298:	4628      	mov	r0, r5
 801629a:	47b8      	blx	r7
 801629c:	3001      	adds	r0, #1
 801629e:	d1e5      	bne.n	801626c <_printf_float+0x340>
 80162a0:	e6a1      	b.n	8015fe6 <_printf_float+0xba>
 80162a2:	4653      	mov	r3, sl
 80162a4:	4642      	mov	r2, r8
 80162a6:	4631      	mov	r1, r6
 80162a8:	4628      	mov	r0, r5
 80162aa:	47b8      	blx	r7
 80162ac:	3001      	adds	r0, #1
 80162ae:	d1e9      	bne.n	8016284 <_printf_float+0x358>
 80162b0:	e699      	b.n	8015fe6 <_printf_float+0xba>
 80162b2:	2301      	movs	r3, #1
 80162b4:	464a      	mov	r2, r9
 80162b6:	4631      	mov	r1, r6
 80162b8:	4628      	mov	r0, r5
 80162ba:	47b8      	blx	r7
 80162bc:	3001      	adds	r0, #1
 80162be:	f43f ae92 	beq.w	8015fe6 <_printf_float+0xba>
 80162c2:	f108 0801 	add.w	r8, r8, #1
 80162c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80162ca:	1a9b      	subs	r3, r3, r2
 80162cc:	eba3 030a 	sub.w	r3, r3, sl
 80162d0:	4543      	cmp	r3, r8
 80162d2:	dcee      	bgt.n	80162b2 <_printf_float+0x386>
 80162d4:	e74a      	b.n	801616c <_printf_float+0x240>
 80162d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80162d8:	2a01      	cmp	r2, #1
 80162da:	dc01      	bgt.n	80162e0 <_printf_float+0x3b4>
 80162dc:	07db      	lsls	r3, r3, #31
 80162de:	d53a      	bpl.n	8016356 <_printf_float+0x42a>
 80162e0:	2301      	movs	r3, #1
 80162e2:	4642      	mov	r2, r8
 80162e4:	4631      	mov	r1, r6
 80162e6:	4628      	mov	r0, r5
 80162e8:	47b8      	blx	r7
 80162ea:	3001      	adds	r0, #1
 80162ec:	f43f ae7b 	beq.w	8015fe6 <_printf_float+0xba>
 80162f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80162f4:	4631      	mov	r1, r6
 80162f6:	4628      	mov	r0, r5
 80162f8:	47b8      	blx	r7
 80162fa:	3001      	adds	r0, #1
 80162fc:	f108 0801 	add.w	r8, r8, #1
 8016300:	f43f ae71 	beq.w	8015fe6 <_printf_float+0xba>
 8016304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016306:	2200      	movs	r2, #0
 8016308:	f103 3aff 	add.w	sl, r3, #4294967295
 801630c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016310:	2300      	movs	r3, #0
 8016312:	f7ea fbd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8016316:	b9c8      	cbnz	r0, 801634c <_printf_float+0x420>
 8016318:	4653      	mov	r3, sl
 801631a:	4642      	mov	r2, r8
 801631c:	4631      	mov	r1, r6
 801631e:	4628      	mov	r0, r5
 8016320:	47b8      	blx	r7
 8016322:	3001      	adds	r0, #1
 8016324:	d10e      	bne.n	8016344 <_printf_float+0x418>
 8016326:	e65e      	b.n	8015fe6 <_printf_float+0xba>
 8016328:	2301      	movs	r3, #1
 801632a:	4652      	mov	r2, sl
 801632c:	4631      	mov	r1, r6
 801632e:	4628      	mov	r0, r5
 8016330:	47b8      	blx	r7
 8016332:	3001      	adds	r0, #1
 8016334:	f43f ae57 	beq.w	8015fe6 <_printf_float+0xba>
 8016338:	f108 0801 	add.w	r8, r8, #1
 801633c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801633e:	3b01      	subs	r3, #1
 8016340:	4543      	cmp	r3, r8
 8016342:	dcf1      	bgt.n	8016328 <_printf_float+0x3fc>
 8016344:	464b      	mov	r3, r9
 8016346:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801634a:	e6de      	b.n	801610a <_printf_float+0x1de>
 801634c:	f04f 0800 	mov.w	r8, #0
 8016350:	f104 0a1a 	add.w	sl, r4, #26
 8016354:	e7f2      	b.n	801633c <_printf_float+0x410>
 8016356:	2301      	movs	r3, #1
 8016358:	e7df      	b.n	801631a <_printf_float+0x3ee>
 801635a:	2301      	movs	r3, #1
 801635c:	464a      	mov	r2, r9
 801635e:	4631      	mov	r1, r6
 8016360:	4628      	mov	r0, r5
 8016362:	47b8      	blx	r7
 8016364:	3001      	adds	r0, #1
 8016366:	f43f ae3e 	beq.w	8015fe6 <_printf_float+0xba>
 801636a:	f108 0801 	add.w	r8, r8, #1
 801636e:	68e3      	ldr	r3, [r4, #12]
 8016370:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016372:	1a9b      	subs	r3, r3, r2
 8016374:	4543      	cmp	r3, r8
 8016376:	dcf0      	bgt.n	801635a <_printf_float+0x42e>
 8016378:	e6fc      	b.n	8016174 <_printf_float+0x248>
 801637a:	f04f 0800 	mov.w	r8, #0
 801637e:	f104 0919 	add.w	r9, r4, #25
 8016382:	e7f4      	b.n	801636e <_printf_float+0x442>
 8016384:	2900      	cmp	r1, #0
 8016386:	f43f ae8b 	beq.w	80160a0 <_printf_float+0x174>
 801638a:	2300      	movs	r3, #0
 801638c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8016390:	ab09      	add	r3, sp, #36	; 0x24
 8016392:	9300      	str	r3, [sp, #0]
 8016394:	ec49 8b10 	vmov	d0, r8, r9
 8016398:	6022      	str	r2, [r4, #0]
 801639a:	f8cd a004 	str.w	sl, [sp, #4]
 801639e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80163a2:	4628      	mov	r0, r5
 80163a4:	f7ff fd2e 	bl	8015e04 <__cvt>
 80163a8:	4680      	mov	r8, r0
 80163aa:	e648      	b.n	801603e <_printf_float+0x112>

080163ac <_printf_common>:
 80163ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163b0:	4691      	mov	r9, r2
 80163b2:	461f      	mov	r7, r3
 80163b4:	688a      	ldr	r2, [r1, #8]
 80163b6:	690b      	ldr	r3, [r1, #16]
 80163b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80163bc:	4293      	cmp	r3, r2
 80163be:	bfb8      	it	lt
 80163c0:	4613      	movlt	r3, r2
 80163c2:	f8c9 3000 	str.w	r3, [r9]
 80163c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80163ca:	4606      	mov	r6, r0
 80163cc:	460c      	mov	r4, r1
 80163ce:	b112      	cbz	r2, 80163d6 <_printf_common+0x2a>
 80163d0:	3301      	adds	r3, #1
 80163d2:	f8c9 3000 	str.w	r3, [r9]
 80163d6:	6823      	ldr	r3, [r4, #0]
 80163d8:	0699      	lsls	r1, r3, #26
 80163da:	bf42      	ittt	mi
 80163dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80163e0:	3302      	addmi	r3, #2
 80163e2:	f8c9 3000 	strmi.w	r3, [r9]
 80163e6:	6825      	ldr	r5, [r4, #0]
 80163e8:	f015 0506 	ands.w	r5, r5, #6
 80163ec:	d107      	bne.n	80163fe <_printf_common+0x52>
 80163ee:	f104 0a19 	add.w	sl, r4, #25
 80163f2:	68e3      	ldr	r3, [r4, #12]
 80163f4:	f8d9 2000 	ldr.w	r2, [r9]
 80163f8:	1a9b      	subs	r3, r3, r2
 80163fa:	42ab      	cmp	r3, r5
 80163fc:	dc28      	bgt.n	8016450 <_printf_common+0xa4>
 80163fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016402:	6822      	ldr	r2, [r4, #0]
 8016404:	3300      	adds	r3, #0
 8016406:	bf18      	it	ne
 8016408:	2301      	movne	r3, #1
 801640a:	0692      	lsls	r2, r2, #26
 801640c:	d42d      	bmi.n	801646a <_printf_common+0xbe>
 801640e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016412:	4639      	mov	r1, r7
 8016414:	4630      	mov	r0, r6
 8016416:	47c0      	blx	r8
 8016418:	3001      	adds	r0, #1
 801641a:	d020      	beq.n	801645e <_printf_common+0xb2>
 801641c:	6823      	ldr	r3, [r4, #0]
 801641e:	68e5      	ldr	r5, [r4, #12]
 8016420:	f8d9 2000 	ldr.w	r2, [r9]
 8016424:	f003 0306 	and.w	r3, r3, #6
 8016428:	2b04      	cmp	r3, #4
 801642a:	bf08      	it	eq
 801642c:	1aad      	subeq	r5, r5, r2
 801642e:	68a3      	ldr	r3, [r4, #8]
 8016430:	6922      	ldr	r2, [r4, #16]
 8016432:	bf0c      	ite	eq
 8016434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016438:	2500      	movne	r5, #0
 801643a:	4293      	cmp	r3, r2
 801643c:	bfc4      	itt	gt
 801643e:	1a9b      	subgt	r3, r3, r2
 8016440:	18ed      	addgt	r5, r5, r3
 8016442:	f04f 0900 	mov.w	r9, #0
 8016446:	341a      	adds	r4, #26
 8016448:	454d      	cmp	r5, r9
 801644a:	d11a      	bne.n	8016482 <_printf_common+0xd6>
 801644c:	2000      	movs	r0, #0
 801644e:	e008      	b.n	8016462 <_printf_common+0xb6>
 8016450:	2301      	movs	r3, #1
 8016452:	4652      	mov	r2, sl
 8016454:	4639      	mov	r1, r7
 8016456:	4630      	mov	r0, r6
 8016458:	47c0      	blx	r8
 801645a:	3001      	adds	r0, #1
 801645c:	d103      	bne.n	8016466 <_printf_common+0xba>
 801645e:	f04f 30ff 	mov.w	r0, #4294967295
 8016462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016466:	3501      	adds	r5, #1
 8016468:	e7c3      	b.n	80163f2 <_printf_common+0x46>
 801646a:	18e1      	adds	r1, r4, r3
 801646c:	1c5a      	adds	r2, r3, #1
 801646e:	2030      	movs	r0, #48	; 0x30
 8016470:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016474:	4422      	add	r2, r4
 8016476:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801647a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801647e:	3302      	adds	r3, #2
 8016480:	e7c5      	b.n	801640e <_printf_common+0x62>
 8016482:	2301      	movs	r3, #1
 8016484:	4622      	mov	r2, r4
 8016486:	4639      	mov	r1, r7
 8016488:	4630      	mov	r0, r6
 801648a:	47c0      	blx	r8
 801648c:	3001      	adds	r0, #1
 801648e:	d0e6      	beq.n	801645e <_printf_common+0xb2>
 8016490:	f109 0901 	add.w	r9, r9, #1
 8016494:	e7d8      	b.n	8016448 <_printf_common+0x9c>
	...

08016498 <_printf_i>:
 8016498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801649c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80164a0:	460c      	mov	r4, r1
 80164a2:	7e09      	ldrb	r1, [r1, #24]
 80164a4:	b085      	sub	sp, #20
 80164a6:	296e      	cmp	r1, #110	; 0x6e
 80164a8:	4617      	mov	r7, r2
 80164aa:	4606      	mov	r6, r0
 80164ac:	4698      	mov	r8, r3
 80164ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80164b0:	f000 80b3 	beq.w	801661a <_printf_i+0x182>
 80164b4:	d822      	bhi.n	80164fc <_printf_i+0x64>
 80164b6:	2963      	cmp	r1, #99	; 0x63
 80164b8:	d036      	beq.n	8016528 <_printf_i+0x90>
 80164ba:	d80a      	bhi.n	80164d2 <_printf_i+0x3a>
 80164bc:	2900      	cmp	r1, #0
 80164be:	f000 80b9 	beq.w	8016634 <_printf_i+0x19c>
 80164c2:	2958      	cmp	r1, #88	; 0x58
 80164c4:	f000 8083 	beq.w	80165ce <_printf_i+0x136>
 80164c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80164cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80164d0:	e032      	b.n	8016538 <_printf_i+0xa0>
 80164d2:	2964      	cmp	r1, #100	; 0x64
 80164d4:	d001      	beq.n	80164da <_printf_i+0x42>
 80164d6:	2969      	cmp	r1, #105	; 0x69
 80164d8:	d1f6      	bne.n	80164c8 <_printf_i+0x30>
 80164da:	6820      	ldr	r0, [r4, #0]
 80164dc:	6813      	ldr	r3, [r2, #0]
 80164de:	0605      	lsls	r5, r0, #24
 80164e0:	f103 0104 	add.w	r1, r3, #4
 80164e4:	d52a      	bpl.n	801653c <_printf_i+0xa4>
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	6011      	str	r1, [r2, #0]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	da03      	bge.n	80164f6 <_printf_i+0x5e>
 80164ee:	222d      	movs	r2, #45	; 0x2d
 80164f0:	425b      	negs	r3, r3
 80164f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80164f6:	486f      	ldr	r0, [pc, #444]	; (80166b4 <_printf_i+0x21c>)
 80164f8:	220a      	movs	r2, #10
 80164fa:	e039      	b.n	8016570 <_printf_i+0xd8>
 80164fc:	2973      	cmp	r1, #115	; 0x73
 80164fe:	f000 809d 	beq.w	801663c <_printf_i+0x1a4>
 8016502:	d808      	bhi.n	8016516 <_printf_i+0x7e>
 8016504:	296f      	cmp	r1, #111	; 0x6f
 8016506:	d020      	beq.n	801654a <_printf_i+0xb2>
 8016508:	2970      	cmp	r1, #112	; 0x70
 801650a:	d1dd      	bne.n	80164c8 <_printf_i+0x30>
 801650c:	6823      	ldr	r3, [r4, #0]
 801650e:	f043 0320 	orr.w	r3, r3, #32
 8016512:	6023      	str	r3, [r4, #0]
 8016514:	e003      	b.n	801651e <_printf_i+0x86>
 8016516:	2975      	cmp	r1, #117	; 0x75
 8016518:	d017      	beq.n	801654a <_printf_i+0xb2>
 801651a:	2978      	cmp	r1, #120	; 0x78
 801651c:	d1d4      	bne.n	80164c8 <_printf_i+0x30>
 801651e:	2378      	movs	r3, #120	; 0x78
 8016520:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016524:	4864      	ldr	r0, [pc, #400]	; (80166b8 <_printf_i+0x220>)
 8016526:	e055      	b.n	80165d4 <_printf_i+0x13c>
 8016528:	6813      	ldr	r3, [r2, #0]
 801652a:	1d19      	adds	r1, r3, #4
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	6011      	str	r1, [r2, #0]
 8016530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016534:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016538:	2301      	movs	r3, #1
 801653a:	e08c      	b.n	8016656 <_printf_i+0x1be>
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	6011      	str	r1, [r2, #0]
 8016540:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016544:	bf18      	it	ne
 8016546:	b21b      	sxthne	r3, r3
 8016548:	e7cf      	b.n	80164ea <_printf_i+0x52>
 801654a:	6813      	ldr	r3, [r2, #0]
 801654c:	6825      	ldr	r5, [r4, #0]
 801654e:	1d18      	adds	r0, r3, #4
 8016550:	6010      	str	r0, [r2, #0]
 8016552:	0628      	lsls	r0, r5, #24
 8016554:	d501      	bpl.n	801655a <_printf_i+0xc2>
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	e002      	b.n	8016560 <_printf_i+0xc8>
 801655a:	0668      	lsls	r0, r5, #25
 801655c:	d5fb      	bpl.n	8016556 <_printf_i+0xbe>
 801655e:	881b      	ldrh	r3, [r3, #0]
 8016560:	4854      	ldr	r0, [pc, #336]	; (80166b4 <_printf_i+0x21c>)
 8016562:	296f      	cmp	r1, #111	; 0x6f
 8016564:	bf14      	ite	ne
 8016566:	220a      	movne	r2, #10
 8016568:	2208      	moveq	r2, #8
 801656a:	2100      	movs	r1, #0
 801656c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016570:	6865      	ldr	r5, [r4, #4]
 8016572:	60a5      	str	r5, [r4, #8]
 8016574:	2d00      	cmp	r5, #0
 8016576:	f2c0 8095 	blt.w	80166a4 <_printf_i+0x20c>
 801657a:	6821      	ldr	r1, [r4, #0]
 801657c:	f021 0104 	bic.w	r1, r1, #4
 8016580:	6021      	str	r1, [r4, #0]
 8016582:	2b00      	cmp	r3, #0
 8016584:	d13d      	bne.n	8016602 <_printf_i+0x16a>
 8016586:	2d00      	cmp	r5, #0
 8016588:	f040 808e 	bne.w	80166a8 <_printf_i+0x210>
 801658c:	4665      	mov	r5, ip
 801658e:	2a08      	cmp	r2, #8
 8016590:	d10b      	bne.n	80165aa <_printf_i+0x112>
 8016592:	6823      	ldr	r3, [r4, #0]
 8016594:	07db      	lsls	r3, r3, #31
 8016596:	d508      	bpl.n	80165aa <_printf_i+0x112>
 8016598:	6923      	ldr	r3, [r4, #16]
 801659a:	6862      	ldr	r2, [r4, #4]
 801659c:	429a      	cmp	r2, r3
 801659e:	bfde      	ittt	le
 80165a0:	2330      	movle	r3, #48	; 0x30
 80165a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80165a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80165aa:	ebac 0305 	sub.w	r3, ip, r5
 80165ae:	6123      	str	r3, [r4, #16]
 80165b0:	f8cd 8000 	str.w	r8, [sp]
 80165b4:	463b      	mov	r3, r7
 80165b6:	aa03      	add	r2, sp, #12
 80165b8:	4621      	mov	r1, r4
 80165ba:	4630      	mov	r0, r6
 80165bc:	f7ff fef6 	bl	80163ac <_printf_common>
 80165c0:	3001      	adds	r0, #1
 80165c2:	d14d      	bne.n	8016660 <_printf_i+0x1c8>
 80165c4:	f04f 30ff 	mov.w	r0, #4294967295
 80165c8:	b005      	add	sp, #20
 80165ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80165ce:	4839      	ldr	r0, [pc, #228]	; (80166b4 <_printf_i+0x21c>)
 80165d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80165d4:	6813      	ldr	r3, [r2, #0]
 80165d6:	6821      	ldr	r1, [r4, #0]
 80165d8:	1d1d      	adds	r5, r3, #4
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	6015      	str	r5, [r2, #0]
 80165de:	060a      	lsls	r2, r1, #24
 80165e0:	d50b      	bpl.n	80165fa <_printf_i+0x162>
 80165e2:	07ca      	lsls	r2, r1, #31
 80165e4:	bf44      	itt	mi
 80165e6:	f041 0120 	orrmi.w	r1, r1, #32
 80165ea:	6021      	strmi	r1, [r4, #0]
 80165ec:	b91b      	cbnz	r3, 80165f6 <_printf_i+0x15e>
 80165ee:	6822      	ldr	r2, [r4, #0]
 80165f0:	f022 0220 	bic.w	r2, r2, #32
 80165f4:	6022      	str	r2, [r4, #0]
 80165f6:	2210      	movs	r2, #16
 80165f8:	e7b7      	b.n	801656a <_printf_i+0xd2>
 80165fa:	064d      	lsls	r5, r1, #25
 80165fc:	bf48      	it	mi
 80165fe:	b29b      	uxthmi	r3, r3
 8016600:	e7ef      	b.n	80165e2 <_printf_i+0x14a>
 8016602:	4665      	mov	r5, ip
 8016604:	fbb3 f1f2 	udiv	r1, r3, r2
 8016608:	fb02 3311 	mls	r3, r2, r1, r3
 801660c:	5cc3      	ldrb	r3, [r0, r3]
 801660e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016612:	460b      	mov	r3, r1
 8016614:	2900      	cmp	r1, #0
 8016616:	d1f5      	bne.n	8016604 <_printf_i+0x16c>
 8016618:	e7b9      	b.n	801658e <_printf_i+0xf6>
 801661a:	6813      	ldr	r3, [r2, #0]
 801661c:	6825      	ldr	r5, [r4, #0]
 801661e:	6961      	ldr	r1, [r4, #20]
 8016620:	1d18      	adds	r0, r3, #4
 8016622:	6010      	str	r0, [r2, #0]
 8016624:	0628      	lsls	r0, r5, #24
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	d501      	bpl.n	801662e <_printf_i+0x196>
 801662a:	6019      	str	r1, [r3, #0]
 801662c:	e002      	b.n	8016634 <_printf_i+0x19c>
 801662e:	066a      	lsls	r2, r5, #25
 8016630:	d5fb      	bpl.n	801662a <_printf_i+0x192>
 8016632:	8019      	strh	r1, [r3, #0]
 8016634:	2300      	movs	r3, #0
 8016636:	6123      	str	r3, [r4, #16]
 8016638:	4665      	mov	r5, ip
 801663a:	e7b9      	b.n	80165b0 <_printf_i+0x118>
 801663c:	6813      	ldr	r3, [r2, #0]
 801663e:	1d19      	adds	r1, r3, #4
 8016640:	6011      	str	r1, [r2, #0]
 8016642:	681d      	ldr	r5, [r3, #0]
 8016644:	6862      	ldr	r2, [r4, #4]
 8016646:	2100      	movs	r1, #0
 8016648:	4628      	mov	r0, r5
 801664a:	f7e9 fdc9 	bl	80001e0 <memchr>
 801664e:	b108      	cbz	r0, 8016654 <_printf_i+0x1bc>
 8016650:	1b40      	subs	r0, r0, r5
 8016652:	6060      	str	r0, [r4, #4]
 8016654:	6863      	ldr	r3, [r4, #4]
 8016656:	6123      	str	r3, [r4, #16]
 8016658:	2300      	movs	r3, #0
 801665a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801665e:	e7a7      	b.n	80165b0 <_printf_i+0x118>
 8016660:	6923      	ldr	r3, [r4, #16]
 8016662:	462a      	mov	r2, r5
 8016664:	4639      	mov	r1, r7
 8016666:	4630      	mov	r0, r6
 8016668:	47c0      	blx	r8
 801666a:	3001      	adds	r0, #1
 801666c:	d0aa      	beq.n	80165c4 <_printf_i+0x12c>
 801666e:	6823      	ldr	r3, [r4, #0]
 8016670:	079b      	lsls	r3, r3, #30
 8016672:	d413      	bmi.n	801669c <_printf_i+0x204>
 8016674:	68e0      	ldr	r0, [r4, #12]
 8016676:	9b03      	ldr	r3, [sp, #12]
 8016678:	4298      	cmp	r0, r3
 801667a:	bfb8      	it	lt
 801667c:	4618      	movlt	r0, r3
 801667e:	e7a3      	b.n	80165c8 <_printf_i+0x130>
 8016680:	2301      	movs	r3, #1
 8016682:	464a      	mov	r2, r9
 8016684:	4639      	mov	r1, r7
 8016686:	4630      	mov	r0, r6
 8016688:	47c0      	blx	r8
 801668a:	3001      	adds	r0, #1
 801668c:	d09a      	beq.n	80165c4 <_printf_i+0x12c>
 801668e:	3501      	adds	r5, #1
 8016690:	68e3      	ldr	r3, [r4, #12]
 8016692:	9a03      	ldr	r2, [sp, #12]
 8016694:	1a9b      	subs	r3, r3, r2
 8016696:	42ab      	cmp	r3, r5
 8016698:	dcf2      	bgt.n	8016680 <_printf_i+0x1e8>
 801669a:	e7eb      	b.n	8016674 <_printf_i+0x1dc>
 801669c:	2500      	movs	r5, #0
 801669e:	f104 0919 	add.w	r9, r4, #25
 80166a2:	e7f5      	b.n	8016690 <_printf_i+0x1f8>
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d1ac      	bne.n	8016602 <_printf_i+0x16a>
 80166a8:	7803      	ldrb	r3, [r0, #0]
 80166aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80166ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80166b2:	e76c      	b.n	801658e <_printf_i+0xf6>
 80166b4:	0801b432 	.word	0x0801b432
 80166b8:	0801b443 	.word	0x0801b443

080166bc <_scanf_float>:
 80166bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166c0:	469a      	mov	sl, r3
 80166c2:	688b      	ldr	r3, [r1, #8]
 80166c4:	4616      	mov	r6, r2
 80166c6:	1e5a      	subs	r2, r3, #1
 80166c8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80166cc:	b087      	sub	sp, #28
 80166ce:	bf83      	ittte	hi
 80166d0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80166d4:	189b      	addhi	r3, r3, r2
 80166d6:	9301      	strhi	r3, [sp, #4]
 80166d8:	2300      	movls	r3, #0
 80166da:	bf86      	itte	hi
 80166dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80166e0:	608b      	strhi	r3, [r1, #8]
 80166e2:	9301      	strls	r3, [sp, #4]
 80166e4:	680b      	ldr	r3, [r1, #0]
 80166e6:	4688      	mov	r8, r1
 80166e8:	f04f 0b00 	mov.w	fp, #0
 80166ec:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80166f0:	f848 3b1c 	str.w	r3, [r8], #28
 80166f4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80166f8:	4607      	mov	r7, r0
 80166fa:	460c      	mov	r4, r1
 80166fc:	4645      	mov	r5, r8
 80166fe:	465a      	mov	r2, fp
 8016700:	46d9      	mov	r9, fp
 8016702:	f8cd b008 	str.w	fp, [sp, #8]
 8016706:	68a1      	ldr	r1, [r4, #8]
 8016708:	b181      	cbz	r1, 801672c <_scanf_float+0x70>
 801670a:	6833      	ldr	r3, [r6, #0]
 801670c:	781b      	ldrb	r3, [r3, #0]
 801670e:	2b49      	cmp	r3, #73	; 0x49
 8016710:	d071      	beq.n	80167f6 <_scanf_float+0x13a>
 8016712:	d84d      	bhi.n	80167b0 <_scanf_float+0xf4>
 8016714:	2b39      	cmp	r3, #57	; 0x39
 8016716:	d840      	bhi.n	801679a <_scanf_float+0xde>
 8016718:	2b31      	cmp	r3, #49	; 0x31
 801671a:	f080 8088 	bcs.w	801682e <_scanf_float+0x172>
 801671e:	2b2d      	cmp	r3, #45	; 0x2d
 8016720:	f000 8090 	beq.w	8016844 <_scanf_float+0x188>
 8016724:	d815      	bhi.n	8016752 <_scanf_float+0x96>
 8016726:	2b2b      	cmp	r3, #43	; 0x2b
 8016728:	f000 808c 	beq.w	8016844 <_scanf_float+0x188>
 801672c:	f1b9 0f00 	cmp.w	r9, #0
 8016730:	d003      	beq.n	801673a <_scanf_float+0x7e>
 8016732:	6823      	ldr	r3, [r4, #0]
 8016734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016738:	6023      	str	r3, [r4, #0]
 801673a:	3a01      	subs	r2, #1
 801673c:	2a01      	cmp	r2, #1
 801673e:	f200 80ea 	bhi.w	8016916 <_scanf_float+0x25a>
 8016742:	4545      	cmp	r5, r8
 8016744:	f200 80dc 	bhi.w	8016900 <_scanf_float+0x244>
 8016748:	2601      	movs	r6, #1
 801674a:	4630      	mov	r0, r6
 801674c:	b007      	add	sp, #28
 801674e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016752:	2b2e      	cmp	r3, #46	; 0x2e
 8016754:	f000 809f 	beq.w	8016896 <_scanf_float+0x1da>
 8016758:	2b30      	cmp	r3, #48	; 0x30
 801675a:	d1e7      	bne.n	801672c <_scanf_float+0x70>
 801675c:	6820      	ldr	r0, [r4, #0]
 801675e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8016762:	d064      	beq.n	801682e <_scanf_float+0x172>
 8016764:	9b01      	ldr	r3, [sp, #4]
 8016766:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801676a:	6020      	str	r0, [r4, #0]
 801676c:	f109 0901 	add.w	r9, r9, #1
 8016770:	b11b      	cbz	r3, 801677a <_scanf_float+0xbe>
 8016772:	3b01      	subs	r3, #1
 8016774:	3101      	adds	r1, #1
 8016776:	9301      	str	r3, [sp, #4]
 8016778:	60a1      	str	r1, [r4, #8]
 801677a:	68a3      	ldr	r3, [r4, #8]
 801677c:	3b01      	subs	r3, #1
 801677e:	60a3      	str	r3, [r4, #8]
 8016780:	6923      	ldr	r3, [r4, #16]
 8016782:	3301      	adds	r3, #1
 8016784:	6123      	str	r3, [r4, #16]
 8016786:	6873      	ldr	r3, [r6, #4]
 8016788:	3b01      	subs	r3, #1
 801678a:	2b00      	cmp	r3, #0
 801678c:	6073      	str	r3, [r6, #4]
 801678e:	f340 80ac 	ble.w	80168ea <_scanf_float+0x22e>
 8016792:	6833      	ldr	r3, [r6, #0]
 8016794:	3301      	adds	r3, #1
 8016796:	6033      	str	r3, [r6, #0]
 8016798:	e7b5      	b.n	8016706 <_scanf_float+0x4a>
 801679a:	2b45      	cmp	r3, #69	; 0x45
 801679c:	f000 8085 	beq.w	80168aa <_scanf_float+0x1ee>
 80167a0:	2b46      	cmp	r3, #70	; 0x46
 80167a2:	d06a      	beq.n	801687a <_scanf_float+0x1be>
 80167a4:	2b41      	cmp	r3, #65	; 0x41
 80167a6:	d1c1      	bne.n	801672c <_scanf_float+0x70>
 80167a8:	2a01      	cmp	r2, #1
 80167aa:	d1bf      	bne.n	801672c <_scanf_float+0x70>
 80167ac:	2202      	movs	r2, #2
 80167ae:	e046      	b.n	801683e <_scanf_float+0x182>
 80167b0:	2b65      	cmp	r3, #101	; 0x65
 80167b2:	d07a      	beq.n	80168aa <_scanf_float+0x1ee>
 80167b4:	d818      	bhi.n	80167e8 <_scanf_float+0x12c>
 80167b6:	2b54      	cmp	r3, #84	; 0x54
 80167b8:	d066      	beq.n	8016888 <_scanf_float+0x1cc>
 80167ba:	d811      	bhi.n	80167e0 <_scanf_float+0x124>
 80167bc:	2b4e      	cmp	r3, #78	; 0x4e
 80167be:	d1b5      	bne.n	801672c <_scanf_float+0x70>
 80167c0:	2a00      	cmp	r2, #0
 80167c2:	d146      	bne.n	8016852 <_scanf_float+0x196>
 80167c4:	f1b9 0f00 	cmp.w	r9, #0
 80167c8:	d145      	bne.n	8016856 <_scanf_float+0x19a>
 80167ca:	6821      	ldr	r1, [r4, #0]
 80167cc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80167d0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80167d4:	d13f      	bne.n	8016856 <_scanf_float+0x19a>
 80167d6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80167da:	6021      	str	r1, [r4, #0]
 80167dc:	2201      	movs	r2, #1
 80167de:	e02e      	b.n	801683e <_scanf_float+0x182>
 80167e0:	2b59      	cmp	r3, #89	; 0x59
 80167e2:	d01e      	beq.n	8016822 <_scanf_float+0x166>
 80167e4:	2b61      	cmp	r3, #97	; 0x61
 80167e6:	e7de      	b.n	80167a6 <_scanf_float+0xea>
 80167e8:	2b6e      	cmp	r3, #110	; 0x6e
 80167ea:	d0e9      	beq.n	80167c0 <_scanf_float+0x104>
 80167ec:	d815      	bhi.n	801681a <_scanf_float+0x15e>
 80167ee:	2b66      	cmp	r3, #102	; 0x66
 80167f0:	d043      	beq.n	801687a <_scanf_float+0x1be>
 80167f2:	2b69      	cmp	r3, #105	; 0x69
 80167f4:	d19a      	bne.n	801672c <_scanf_float+0x70>
 80167f6:	f1bb 0f00 	cmp.w	fp, #0
 80167fa:	d138      	bne.n	801686e <_scanf_float+0x1b2>
 80167fc:	f1b9 0f00 	cmp.w	r9, #0
 8016800:	d197      	bne.n	8016732 <_scanf_float+0x76>
 8016802:	6821      	ldr	r1, [r4, #0]
 8016804:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016808:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801680c:	d195      	bne.n	801673a <_scanf_float+0x7e>
 801680e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016812:	6021      	str	r1, [r4, #0]
 8016814:	f04f 0b01 	mov.w	fp, #1
 8016818:	e011      	b.n	801683e <_scanf_float+0x182>
 801681a:	2b74      	cmp	r3, #116	; 0x74
 801681c:	d034      	beq.n	8016888 <_scanf_float+0x1cc>
 801681e:	2b79      	cmp	r3, #121	; 0x79
 8016820:	d184      	bne.n	801672c <_scanf_float+0x70>
 8016822:	f1bb 0f07 	cmp.w	fp, #7
 8016826:	d181      	bne.n	801672c <_scanf_float+0x70>
 8016828:	f04f 0b08 	mov.w	fp, #8
 801682c:	e007      	b.n	801683e <_scanf_float+0x182>
 801682e:	eb12 0f0b 	cmn.w	r2, fp
 8016832:	f47f af7b 	bne.w	801672c <_scanf_float+0x70>
 8016836:	6821      	ldr	r1, [r4, #0]
 8016838:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 801683c:	6021      	str	r1, [r4, #0]
 801683e:	702b      	strb	r3, [r5, #0]
 8016840:	3501      	adds	r5, #1
 8016842:	e79a      	b.n	801677a <_scanf_float+0xbe>
 8016844:	6821      	ldr	r1, [r4, #0]
 8016846:	0608      	lsls	r0, r1, #24
 8016848:	f57f af70 	bpl.w	801672c <_scanf_float+0x70>
 801684c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016850:	e7f4      	b.n	801683c <_scanf_float+0x180>
 8016852:	2a02      	cmp	r2, #2
 8016854:	d047      	beq.n	80168e6 <_scanf_float+0x22a>
 8016856:	f1bb 0f01 	cmp.w	fp, #1
 801685a:	d003      	beq.n	8016864 <_scanf_float+0x1a8>
 801685c:	f1bb 0f04 	cmp.w	fp, #4
 8016860:	f47f af64 	bne.w	801672c <_scanf_float+0x70>
 8016864:	f10b 0b01 	add.w	fp, fp, #1
 8016868:	fa5f fb8b 	uxtb.w	fp, fp
 801686c:	e7e7      	b.n	801683e <_scanf_float+0x182>
 801686e:	f1bb 0f03 	cmp.w	fp, #3
 8016872:	d0f7      	beq.n	8016864 <_scanf_float+0x1a8>
 8016874:	f1bb 0f05 	cmp.w	fp, #5
 8016878:	e7f2      	b.n	8016860 <_scanf_float+0x1a4>
 801687a:	f1bb 0f02 	cmp.w	fp, #2
 801687e:	f47f af55 	bne.w	801672c <_scanf_float+0x70>
 8016882:	f04f 0b03 	mov.w	fp, #3
 8016886:	e7da      	b.n	801683e <_scanf_float+0x182>
 8016888:	f1bb 0f06 	cmp.w	fp, #6
 801688c:	f47f af4e 	bne.w	801672c <_scanf_float+0x70>
 8016890:	f04f 0b07 	mov.w	fp, #7
 8016894:	e7d3      	b.n	801683e <_scanf_float+0x182>
 8016896:	6821      	ldr	r1, [r4, #0]
 8016898:	0588      	lsls	r0, r1, #22
 801689a:	f57f af47 	bpl.w	801672c <_scanf_float+0x70>
 801689e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80168a2:	6021      	str	r1, [r4, #0]
 80168a4:	f8cd 9008 	str.w	r9, [sp, #8]
 80168a8:	e7c9      	b.n	801683e <_scanf_float+0x182>
 80168aa:	6821      	ldr	r1, [r4, #0]
 80168ac:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80168b0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80168b4:	d006      	beq.n	80168c4 <_scanf_float+0x208>
 80168b6:	0548      	lsls	r0, r1, #21
 80168b8:	f57f af38 	bpl.w	801672c <_scanf_float+0x70>
 80168bc:	f1b9 0f00 	cmp.w	r9, #0
 80168c0:	f43f af3b 	beq.w	801673a <_scanf_float+0x7e>
 80168c4:	0588      	lsls	r0, r1, #22
 80168c6:	bf58      	it	pl
 80168c8:	9802      	ldrpl	r0, [sp, #8]
 80168ca:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80168ce:	bf58      	it	pl
 80168d0:	eba9 0000 	subpl.w	r0, r9, r0
 80168d4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80168d8:	bf58      	it	pl
 80168da:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80168de:	6021      	str	r1, [r4, #0]
 80168e0:	f04f 0900 	mov.w	r9, #0
 80168e4:	e7ab      	b.n	801683e <_scanf_float+0x182>
 80168e6:	2203      	movs	r2, #3
 80168e8:	e7a9      	b.n	801683e <_scanf_float+0x182>
 80168ea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80168ee:	9205      	str	r2, [sp, #20]
 80168f0:	4631      	mov	r1, r6
 80168f2:	4638      	mov	r0, r7
 80168f4:	4798      	blx	r3
 80168f6:	9a05      	ldr	r2, [sp, #20]
 80168f8:	2800      	cmp	r0, #0
 80168fa:	f43f af04 	beq.w	8016706 <_scanf_float+0x4a>
 80168fe:	e715      	b.n	801672c <_scanf_float+0x70>
 8016900:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016904:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016908:	4632      	mov	r2, r6
 801690a:	4638      	mov	r0, r7
 801690c:	4798      	blx	r3
 801690e:	6923      	ldr	r3, [r4, #16]
 8016910:	3b01      	subs	r3, #1
 8016912:	6123      	str	r3, [r4, #16]
 8016914:	e715      	b.n	8016742 <_scanf_float+0x86>
 8016916:	f10b 33ff 	add.w	r3, fp, #4294967295
 801691a:	2b06      	cmp	r3, #6
 801691c:	d80a      	bhi.n	8016934 <_scanf_float+0x278>
 801691e:	f1bb 0f02 	cmp.w	fp, #2
 8016922:	d968      	bls.n	80169f6 <_scanf_float+0x33a>
 8016924:	f1ab 0b03 	sub.w	fp, fp, #3
 8016928:	fa5f fb8b 	uxtb.w	fp, fp
 801692c:	eba5 0b0b 	sub.w	fp, r5, fp
 8016930:	455d      	cmp	r5, fp
 8016932:	d14b      	bne.n	80169cc <_scanf_float+0x310>
 8016934:	6823      	ldr	r3, [r4, #0]
 8016936:	05da      	lsls	r2, r3, #23
 8016938:	d51f      	bpl.n	801697a <_scanf_float+0x2be>
 801693a:	055b      	lsls	r3, r3, #21
 801693c:	d468      	bmi.n	8016a10 <_scanf_float+0x354>
 801693e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016942:	6923      	ldr	r3, [r4, #16]
 8016944:	2965      	cmp	r1, #101	; 0x65
 8016946:	f103 33ff 	add.w	r3, r3, #4294967295
 801694a:	f105 3bff 	add.w	fp, r5, #4294967295
 801694e:	6123      	str	r3, [r4, #16]
 8016950:	d00d      	beq.n	801696e <_scanf_float+0x2b2>
 8016952:	2945      	cmp	r1, #69	; 0x45
 8016954:	d00b      	beq.n	801696e <_scanf_float+0x2b2>
 8016956:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801695a:	4632      	mov	r2, r6
 801695c:	4638      	mov	r0, r7
 801695e:	4798      	blx	r3
 8016960:	6923      	ldr	r3, [r4, #16]
 8016962:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8016966:	3b01      	subs	r3, #1
 8016968:	f1a5 0b02 	sub.w	fp, r5, #2
 801696c:	6123      	str	r3, [r4, #16]
 801696e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016972:	4632      	mov	r2, r6
 8016974:	4638      	mov	r0, r7
 8016976:	4798      	blx	r3
 8016978:	465d      	mov	r5, fp
 801697a:	6826      	ldr	r6, [r4, #0]
 801697c:	f016 0610 	ands.w	r6, r6, #16
 8016980:	d17a      	bne.n	8016a78 <_scanf_float+0x3bc>
 8016982:	702e      	strb	r6, [r5, #0]
 8016984:	6823      	ldr	r3, [r4, #0]
 8016986:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801698a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801698e:	d142      	bne.n	8016a16 <_scanf_float+0x35a>
 8016990:	9b02      	ldr	r3, [sp, #8]
 8016992:	eba9 0303 	sub.w	r3, r9, r3
 8016996:	425a      	negs	r2, r3
 8016998:	2b00      	cmp	r3, #0
 801699a:	d149      	bne.n	8016a30 <_scanf_float+0x374>
 801699c:	2200      	movs	r2, #0
 801699e:	4641      	mov	r1, r8
 80169a0:	4638      	mov	r0, r7
 80169a2:	f000 fee9 	bl	8017778 <_strtod_r>
 80169a6:	6825      	ldr	r5, [r4, #0]
 80169a8:	f8da 3000 	ldr.w	r3, [sl]
 80169ac:	f015 0f02 	tst.w	r5, #2
 80169b0:	f103 0204 	add.w	r2, r3, #4
 80169b4:	ec59 8b10 	vmov	r8, r9, d0
 80169b8:	f8ca 2000 	str.w	r2, [sl]
 80169bc:	d043      	beq.n	8016a46 <_scanf_float+0x38a>
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	e9c3 8900 	strd	r8, r9, [r3]
 80169c4:	68e3      	ldr	r3, [r4, #12]
 80169c6:	3301      	adds	r3, #1
 80169c8:	60e3      	str	r3, [r4, #12]
 80169ca:	e6be      	b.n	801674a <_scanf_float+0x8e>
 80169cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80169d0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80169d4:	4632      	mov	r2, r6
 80169d6:	4638      	mov	r0, r7
 80169d8:	4798      	blx	r3
 80169da:	6923      	ldr	r3, [r4, #16]
 80169dc:	3b01      	subs	r3, #1
 80169de:	6123      	str	r3, [r4, #16]
 80169e0:	e7a6      	b.n	8016930 <_scanf_float+0x274>
 80169e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80169e6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80169ea:	4632      	mov	r2, r6
 80169ec:	4638      	mov	r0, r7
 80169ee:	4798      	blx	r3
 80169f0:	6923      	ldr	r3, [r4, #16]
 80169f2:	3b01      	subs	r3, #1
 80169f4:	6123      	str	r3, [r4, #16]
 80169f6:	4545      	cmp	r5, r8
 80169f8:	d8f3      	bhi.n	80169e2 <_scanf_float+0x326>
 80169fa:	e6a5      	b.n	8016748 <_scanf_float+0x8c>
 80169fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a00:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016a04:	4632      	mov	r2, r6
 8016a06:	4638      	mov	r0, r7
 8016a08:	4798      	blx	r3
 8016a0a:	6923      	ldr	r3, [r4, #16]
 8016a0c:	3b01      	subs	r3, #1
 8016a0e:	6123      	str	r3, [r4, #16]
 8016a10:	4545      	cmp	r5, r8
 8016a12:	d8f3      	bhi.n	80169fc <_scanf_float+0x340>
 8016a14:	e698      	b.n	8016748 <_scanf_float+0x8c>
 8016a16:	9b03      	ldr	r3, [sp, #12]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d0bf      	beq.n	801699c <_scanf_float+0x2e0>
 8016a1c:	9904      	ldr	r1, [sp, #16]
 8016a1e:	230a      	movs	r3, #10
 8016a20:	4632      	mov	r2, r6
 8016a22:	3101      	adds	r1, #1
 8016a24:	4638      	mov	r0, r7
 8016a26:	f000 ff33 	bl	8017890 <_strtol_r>
 8016a2a:	9b03      	ldr	r3, [sp, #12]
 8016a2c:	9d04      	ldr	r5, [sp, #16]
 8016a2e:	1ac2      	subs	r2, r0, r3
 8016a30:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016a34:	429d      	cmp	r5, r3
 8016a36:	bf28      	it	cs
 8016a38:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016a3c:	490f      	ldr	r1, [pc, #60]	; (8016a7c <_scanf_float+0x3c0>)
 8016a3e:	4628      	mov	r0, r5
 8016a40:	f000 f868 	bl	8016b14 <siprintf>
 8016a44:	e7aa      	b.n	801699c <_scanf_float+0x2e0>
 8016a46:	f015 0504 	ands.w	r5, r5, #4
 8016a4a:	d1b8      	bne.n	80169be <_scanf_float+0x302>
 8016a4c:	681f      	ldr	r7, [r3, #0]
 8016a4e:	ee10 2a10 	vmov	r2, s0
 8016a52:	464b      	mov	r3, r9
 8016a54:	ee10 0a10 	vmov	r0, s0
 8016a58:	4649      	mov	r1, r9
 8016a5a:	f7ea f867 	bl	8000b2c <__aeabi_dcmpun>
 8016a5e:	b128      	cbz	r0, 8016a6c <_scanf_float+0x3b0>
 8016a60:	4628      	mov	r0, r5
 8016a62:	f000 f81d 	bl	8016aa0 <nanf>
 8016a66:	ed87 0a00 	vstr	s0, [r7]
 8016a6a:	e7ab      	b.n	80169c4 <_scanf_float+0x308>
 8016a6c:	4640      	mov	r0, r8
 8016a6e:	4649      	mov	r1, r9
 8016a70:	f7ea f8ba 	bl	8000be8 <__aeabi_d2f>
 8016a74:	6038      	str	r0, [r7, #0]
 8016a76:	e7a5      	b.n	80169c4 <_scanf_float+0x308>
 8016a78:	2600      	movs	r6, #0
 8016a7a:	e666      	b.n	801674a <_scanf_float+0x8e>
 8016a7c:	0801b454 	.word	0x0801b454

08016a80 <_sbrk_r>:
 8016a80:	b538      	push	{r3, r4, r5, lr}
 8016a82:	4c06      	ldr	r4, [pc, #24]	; (8016a9c <_sbrk_r+0x1c>)
 8016a84:	2300      	movs	r3, #0
 8016a86:	4605      	mov	r5, r0
 8016a88:	4608      	mov	r0, r1
 8016a8a:	6023      	str	r3, [r4, #0]
 8016a8c:	f7f4 fad4 	bl	800b038 <_sbrk>
 8016a90:	1c43      	adds	r3, r0, #1
 8016a92:	d102      	bne.n	8016a9a <_sbrk_r+0x1a>
 8016a94:	6823      	ldr	r3, [r4, #0]
 8016a96:	b103      	cbz	r3, 8016a9a <_sbrk_r+0x1a>
 8016a98:	602b      	str	r3, [r5, #0]
 8016a9a:	bd38      	pop	{r3, r4, r5, pc}
 8016a9c:	20006b6c 	.word	0x20006b6c

08016aa0 <nanf>:
 8016aa0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016aa8 <nanf+0x8>
 8016aa4:	4770      	bx	lr
 8016aa6:	bf00      	nop
 8016aa8:	7fc00000 	.word	0x7fc00000

08016aac <sniprintf>:
 8016aac:	b40c      	push	{r2, r3}
 8016aae:	b530      	push	{r4, r5, lr}
 8016ab0:	4b17      	ldr	r3, [pc, #92]	; (8016b10 <sniprintf+0x64>)
 8016ab2:	1e0c      	subs	r4, r1, #0
 8016ab4:	b09d      	sub	sp, #116	; 0x74
 8016ab6:	681d      	ldr	r5, [r3, #0]
 8016ab8:	da08      	bge.n	8016acc <sniprintf+0x20>
 8016aba:	238b      	movs	r3, #139	; 0x8b
 8016abc:	602b      	str	r3, [r5, #0]
 8016abe:	f04f 30ff 	mov.w	r0, #4294967295
 8016ac2:	b01d      	add	sp, #116	; 0x74
 8016ac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016ac8:	b002      	add	sp, #8
 8016aca:	4770      	bx	lr
 8016acc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016ad0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016ad4:	bf14      	ite	ne
 8016ad6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016ada:	4623      	moveq	r3, r4
 8016adc:	9304      	str	r3, [sp, #16]
 8016ade:	9307      	str	r3, [sp, #28]
 8016ae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016ae4:	9002      	str	r0, [sp, #8]
 8016ae6:	9006      	str	r0, [sp, #24]
 8016ae8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016aec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016aee:	ab21      	add	r3, sp, #132	; 0x84
 8016af0:	a902      	add	r1, sp, #8
 8016af2:	4628      	mov	r0, r5
 8016af4:	9301      	str	r3, [sp, #4]
 8016af6:	f002 fcd9 	bl	80194ac <_svfiprintf_r>
 8016afa:	1c43      	adds	r3, r0, #1
 8016afc:	bfbc      	itt	lt
 8016afe:	238b      	movlt	r3, #139	; 0x8b
 8016b00:	602b      	strlt	r3, [r5, #0]
 8016b02:	2c00      	cmp	r4, #0
 8016b04:	d0dd      	beq.n	8016ac2 <sniprintf+0x16>
 8016b06:	9b02      	ldr	r3, [sp, #8]
 8016b08:	2200      	movs	r2, #0
 8016b0a:	701a      	strb	r2, [r3, #0]
 8016b0c:	e7d9      	b.n	8016ac2 <sniprintf+0x16>
 8016b0e:	bf00      	nop
 8016b10:	200009ac 	.word	0x200009ac

08016b14 <siprintf>:
 8016b14:	b40e      	push	{r1, r2, r3}
 8016b16:	b500      	push	{lr}
 8016b18:	b09c      	sub	sp, #112	; 0x70
 8016b1a:	ab1d      	add	r3, sp, #116	; 0x74
 8016b1c:	9002      	str	r0, [sp, #8]
 8016b1e:	9006      	str	r0, [sp, #24]
 8016b20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016b24:	4809      	ldr	r0, [pc, #36]	; (8016b4c <siprintf+0x38>)
 8016b26:	9107      	str	r1, [sp, #28]
 8016b28:	9104      	str	r1, [sp, #16]
 8016b2a:	4909      	ldr	r1, [pc, #36]	; (8016b50 <siprintf+0x3c>)
 8016b2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b30:	9105      	str	r1, [sp, #20]
 8016b32:	6800      	ldr	r0, [r0, #0]
 8016b34:	9301      	str	r3, [sp, #4]
 8016b36:	a902      	add	r1, sp, #8
 8016b38:	f002 fcb8 	bl	80194ac <_svfiprintf_r>
 8016b3c:	9b02      	ldr	r3, [sp, #8]
 8016b3e:	2200      	movs	r2, #0
 8016b40:	701a      	strb	r2, [r3, #0]
 8016b42:	b01c      	add	sp, #112	; 0x70
 8016b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8016b48:	b003      	add	sp, #12
 8016b4a:	4770      	bx	lr
 8016b4c:	200009ac 	.word	0x200009ac
 8016b50:	ffff0208 	.word	0xffff0208

08016b54 <sulp>:
 8016b54:	b570      	push	{r4, r5, r6, lr}
 8016b56:	4604      	mov	r4, r0
 8016b58:	460d      	mov	r5, r1
 8016b5a:	ec45 4b10 	vmov	d0, r4, r5
 8016b5e:	4616      	mov	r6, r2
 8016b60:	f002 fb08 	bl	8019174 <__ulp>
 8016b64:	ec51 0b10 	vmov	r0, r1, d0
 8016b68:	b17e      	cbz	r6, 8016b8a <sulp+0x36>
 8016b6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016b6e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	dd09      	ble.n	8016b8a <sulp+0x36>
 8016b76:	051b      	lsls	r3, r3, #20
 8016b78:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016b7c:	2400      	movs	r4, #0
 8016b7e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016b82:	4622      	mov	r2, r4
 8016b84:	462b      	mov	r3, r5
 8016b86:	f7e9 fd37 	bl	80005f8 <__aeabi_dmul>
 8016b8a:	bd70      	pop	{r4, r5, r6, pc}
 8016b8c:	0000      	movs	r0, r0
	...

08016b90 <_strtod_l>:
 8016b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b94:	461f      	mov	r7, r3
 8016b96:	b0a1      	sub	sp, #132	; 0x84
 8016b98:	2300      	movs	r3, #0
 8016b9a:	4681      	mov	r9, r0
 8016b9c:	4638      	mov	r0, r7
 8016b9e:	460e      	mov	r6, r1
 8016ba0:	9217      	str	r2, [sp, #92]	; 0x5c
 8016ba2:	931c      	str	r3, [sp, #112]	; 0x70
 8016ba4:	f001 fff5 	bl	8018b92 <__localeconv_l>
 8016ba8:	4680      	mov	r8, r0
 8016baa:	6800      	ldr	r0, [r0, #0]
 8016bac:	f7e9 fb10 	bl	80001d0 <strlen>
 8016bb0:	f04f 0a00 	mov.w	sl, #0
 8016bb4:	4604      	mov	r4, r0
 8016bb6:	f04f 0b00 	mov.w	fp, #0
 8016bba:	961b      	str	r6, [sp, #108]	; 0x6c
 8016bbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016bbe:	781a      	ldrb	r2, [r3, #0]
 8016bc0:	2a0d      	cmp	r2, #13
 8016bc2:	d832      	bhi.n	8016c2a <_strtod_l+0x9a>
 8016bc4:	2a09      	cmp	r2, #9
 8016bc6:	d236      	bcs.n	8016c36 <_strtod_l+0xa6>
 8016bc8:	2a00      	cmp	r2, #0
 8016bca:	d03e      	beq.n	8016c4a <_strtod_l+0xba>
 8016bcc:	2300      	movs	r3, #0
 8016bce:	930d      	str	r3, [sp, #52]	; 0x34
 8016bd0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016bd2:	782b      	ldrb	r3, [r5, #0]
 8016bd4:	2b30      	cmp	r3, #48	; 0x30
 8016bd6:	f040 80ac 	bne.w	8016d32 <_strtod_l+0x1a2>
 8016bda:	786b      	ldrb	r3, [r5, #1]
 8016bdc:	2b58      	cmp	r3, #88	; 0x58
 8016bde:	d001      	beq.n	8016be4 <_strtod_l+0x54>
 8016be0:	2b78      	cmp	r3, #120	; 0x78
 8016be2:	d167      	bne.n	8016cb4 <_strtod_l+0x124>
 8016be4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016be6:	9301      	str	r3, [sp, #4]
 8016be8:	ab1c      	add	r3, sp, #112	; 0x70
 8016bea:	9300      	str	r3, [sp, #0]
 8016bec:	9702      	str	r7, [sp, #8]
 8016bee:	ab1d      	add	r3, sp, #116	; 0x74
 8016bf0:	4a88      	ldr	r2, [pc, #544]	; (8016e14 <_strtod_l+0x284>)
 8016bf2:	a91b      	add	r1, sp, #108	; 0x6c
 8016bf4:	4648      	mov	r0, r9
 8016bf6:	f001 fcf2 	bl	80185de <__gethex>
 8016bfa:	f010 0407 	ands.w	r4, r0, #7
 8016bfe:	4606      	mov	r6, r0
 8016c00:	d005      	beq.n	8016c0e <_strtod_l+0x7e>
 8016c02:	2c06      	cmp	r4, #6
 8016c04:	d12b      	bne.n	8016c5e <_strtod_l+0xce>
 8016c06:	3501      	adds	r5, #1
 8016c08:	2300      	movs	r3, #0
 8016c0a:	951b      	str	r5, [sp, #108]	; 0x6c
 8016c0c:	930d      	str	r3, [sp, #52]	; 0x34
 8016c0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	f040 859a 	bne.w	801774a <_strtod_l+0xbba>
 8016c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016c18:	b1e3      	cbz	r3, 8016c54 <_strtod_l+0xc4>
 8016c1a:	4652      	mov	r2, sl
 8016c1c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016c20:	ec43 2b10 	vmov	d0, r2, r3
 8016c24:	b021      	add	sp, #132	; 0x84
 8016c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c2a:	2a2b      	cmp	r2, #43	; 0x2b
 8016c2c:	d015      	beq.n	8016c5a <_strtod_l+0xca>
 8016c2e:	2a2d      	cmp	r2, #45	; 0x2d
 8016c30:	d004      	beq.n	8016c3c <_strtod_l+0xac>
 8016c32:	2a20      	cmp	r2, #32
 8016c34:	d1ca      	bne.n	8016bcc <_strtod_l+0x3c>
 8016c36:	3301      	adds	r3, #1
 8016c38:	931b      	str	r3, [sp, #108]	; 0x6c
 8016c3a:	e7bf      	b.n	8016bbc <_strtod_l+0x2c>
 8016c3c:	2201      	movs	r2, #1
 8016c3e:	920d      	str	r2, [sp, #52]	; 0x34
 8016c40:	1c5a      	adds	r2, r3, #1
 8016c42:	921b      	str	r2, [sp, #108]	; 0x6c
 8016c44:	785b      	ldrb	r3, [r3, #1]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d1c2      	bne.n	8016bd0 <_strtod_l+0x40>
 8016c4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016c4c:	961b      	str	r6, [sp, #108]	; 0x6c
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	f040 8579 	bne.w	8017746 <_strtod_l+0xbb6>
 8016c54:	4652      	mov	r2, sl
 8016c56:	465b      	mov	r3, fp
 8016c58:	e7e2      	b.n	8016c20 <_strtod_l+0x90>
 8016c5a:	2200      	movs	r2, #0
 8016c5c:	e7ef      	b.n	8016c3e <_strtod_l+0xae>
 8016c5e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016c60:	b13a      	cbz	r2, 8016c72 <_strtod_l+0xe2>
 8016c62:	2135      	movs	r1, #53	; 0x35
 8016c64:	a81e      	add	r0, sp, #120	; 0x78
 8016c66:	f002 fb7d 	bl	8019364 <__copybits>
 8016c6a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016c6c:	4648      	mov	r0, r9
 8016c6e:	f001 ffe9 	bl	8018c44 <_Bfree>
 8016c72:	3c01      	subs	r4, #1
 8016c74:	2c04      	cmp	r4, #4
 8016c76:	d806      	bhi.n	8016c86 <_strtod_l+0xf6>
 8016c78:	e8df f004 	tbb	[pc, r4]
 8016c7c:	1714030a 	.word	0x1714030a
 8016c80:	0a          	.byte	0x0a
 8016c81:	00          	.byte	0x00
 8016c82:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016c86:	0730      	lsls	r0, r6, #28
 8016c88:	d5c1      	bpl.n	8016c0e <_strtod_l+0x7e>
 8016c8a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016c8e:	e7be      	b.n	8016c0e <_strtod_l+0x7e>
 8016c90:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016c94:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016c96:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016c9a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016c9e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016ca2:	e7f0      	b.n	8016c86 <_strtod_l+0xf6>
 8016ca4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016e18 <_strtod_l+0x288>
 8016ca8:	e7ed      	b.n	8016c86 <_strtod_l+0xf6>
 8016caa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016cae:	f04f 3aff 	mov.w	sl, #4294967295
 8016cb2:	e7e8      	b.n	8016c86 <_strtod_l+0xf6>
 8016cb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016cb6:	1c5a      	adds	r2, r3, #1
 8016cb8:	921b      	str	r2, [sp, #108]	; 0x6c
 8016cba:	785b      	ldrb	r3, [r3, #1]
 8016cbc:	2b30      	cmp	r3, #48	; 0x30
 8016cbe:	d0f9      	beq.n	8016cb4 <_strtod_l+0x124>
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d0a4      	beq.n	8016c0e <_strtod_l+0x7e>
 8016cc4:	2301      	movs	r3, #1
 8016cc6:	2500      	movs	r5, #0
 8016cc8:	9306      	str	r3, [sp, #24]
 8016cca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ccc:	9308      	str	r3, [sp, #32]
 8016cce:	9507      	str	r5, [sp, #28]
 8016cd0:	9505      	str	r5, [sp, #20]
 8016cd2:	220a      	movs	r2, #10
 8016cd4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016cd6:	7807      	ldrb	r7, [r0, #0]
 8016cd8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016cdc:	b2d9      	uxtb	r1, r3
 8016cde:	2909      	cmp	r1, #9
 8016ce0:	d929      	bls.n	8016d36 <_strtod_l+0x1a6>
 8016ce2:	4622      	mov	r2, r4
 8016ce4:	f8d8 1000 	ldr.w	r1, [r8]
 8016ce8:	f002 fcd8 	bl	801969c <strncmp>
 8016cec:	2800      	cmp	r0, #0
 8016cee:	d031      	beq.n	8016d54 <_strtod_l+0x1c4>
 8016cf0:	2000      	movs	r0, #0
 8016cf2:	9c05      	ldr	r4, [sp, #20]
 8016cf4:	9004      	str	r0, [sp, #16]
 8016cf6:	463b      	mov	r3, r7
 8016cf8:	4602      	mov	r2, r0
 8016cfa:	2b65      	cmp	r3, #101	; 0x65
 8016cfc:	d001      	beq.n	8016d02 <_strtod_l+0x172>
 8016cfe:	2b45      	cmp	r3, #69	; 0x45
 8016d00:	d114      	bne.n	8016d2c <_strtod_l+0x19c>
 8016d02:	b924      	cbnz	r4, 8016d0e <_strtod_l+0x17e>
 8016d04:	b910      	cbnz	r0, 8016d0c <_strtod_l+0x17c>
 8016d06:	9b06      	ldr	r3, [sp, #24]
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d09e      	beq.n	8016c4a <_strtod_l+0xba>
 8016d0c:	2400      	movs	r4, #0
 8016d0e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016d10:	1c73      	adds	r3, r6, #1
 8016d12:	931b      	str	r3, [sp, #108]	; 0x6c
 8016d14:	7873      	ldrb	r3, [r6, #1]
 8016d16:	2b2b      	cmp	r3, #43	; 0x2b
 8016d18:	d078      	beq.n	8016e0c <_strtod_l+0x27c>
 8016d1a:	2b2d      	cmp	r3, #45	; 0x2d
 8016d1c:	d070      	beq.n	8016e00 <_strtod_l+0x270>
 8016d1e:	f04f 0c00 	mov.w	ip, #0
 8016d22:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016d26:	2f09      	cmp	r7, #9
 8016d28:	d97c      	bls.n	8016e24 <_strtod_l+0x294>
 8016d2a:	961b      	str	r6, [sp, #108]	; 0x6c
 8016d2c:	f04f 0e00 	mov.w	lr, #0
 8016d30:	e09a      	b.n	8016e68 <_strtod_l+0x2d8>
 8016d32:	2300      	movs	r3, #0
 8016d34:	e7c7      	b.n	8016cc6 <_strtod_l+0x136>
 8016d36:	9905      	ldr	r1, [sp, #20]
 8016d38:	2908      	cmp	r1, #8
 8016d3a:	bfdd      	ittte	le
 8016d3c:	9907      	ldrle	r1, [sp, #28]
 8016d3e:	fb02 3301 	mlale	r3, r2, r1, r3
 8016d42:	9307      	strle	r3, [sp, #28]
 8016d44:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016d48:	9b05      	ldr	r3, [sp, #20]
 8016d4a:	3001      	adds	r0, #1
 8016d4c:	3301      	adds	r3, #1
 8016d4e:	9305      	str	r3, [sp, #20]
 8016d50:	901b      	str	r0, [sp, #108]	; 0x6c
 8016d52:	e7bf      	b.n	8016cd4 <_strtod_l+0x144>
 8016d54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016d56:	191a      	adds	r2, r3, r4
 8016d58:	921b      	str	r2, [sp, #108]	; 0x6c
 8016d5a:	9a05      	ldr	r2, [sp, #20]
 8016d5c:	5d1b      	ldrb	r3, [r3, r4]
 8016d5e:	2a00      	cmp	r2, #0
 8016d60:	d037      	beq.n	8016dd2 <_strtod_l+0x242>
 8016d62:	9c05      	ldr	r4, [sp, #20]
 8016d64:	4602      	mov	r2, r0
 8016d66:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016d6a:	2909      	cmp	r1, #9
 8016d6c:	d913      	bls.n	8016d96 <_strtod_l+0x206>
 8016d6e:	2101      	movs	r1, #1
 8016d70:	9104      	str	r1, [sp, #16]
 8016d72:	e7c2      	b.n	8016cfa <_strtod_l+0x16a>
 8016d74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016d76:	1c5a      	adds	r2, r3, #1
 8016d78:	921b      	str	r2, [sp, #108]	; 0x6c
 8016d7a:	785b      	ldrb	r3, [r3, #1]
 8016d7c:	3001      	adds	r0, #1
 8016d7e:	2b30      	cmp	r3, #48	; 0x30
 8016d80:	d0f8      	beq.n	8016d74 <_strtod_l+0x1e4>
 8016d82:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016d86:	2a08      	cmp	r2, #8
 8016d88:	f200 84e4 	bhi.w	8017754 <_strtod_l+0xbc4>
 8016d8c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016d8e:	9208      	str	r2, [sp, #32]
 8016d90:	4602      	mov	r2, r0
 8016d92:	2000      	movs	r0, #0
 8016d94:	4604      	mov	r4, r0
 8016d96:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016d9a:	f100 0101 	add.w	r1, r0, #1
 8016d9e:	d012      	beq.n	8016dc6 <_strtod_l+0x236>
 8016da0:	440a      	add	r2, r1
 8016da2:	eb00 0c04 	add.w	ip, r0, r4
 8016da6:	4621      	mov	r1, r4
 8016da8:	270a      	movs	r7, #10
 8016daa:	458c      	cmp	ip, r1
 8016dac:	d113      	bne.n	8016dd6 <_strtod_l+0x246>
 8016dae:	1821      	adds	r1, r4, r0
 8016db0:	2908      	cmp	r1, #8
 8016db2:	f104 0401 	add.w	r4, r4, #1
 8016db6:	4404      	add	r4, r0
 8016db8:	dc19      	bgt.n	8016dee <_strtod_l+0x25e>
 8016dba:	9b07      	ldr	r3, [sp, #28]
 8016dbc:	210a      	movs	r1, #10
 8016dbe:	fb01 e303 	mla	r3, r1, r3, lr
 8016dc2:	9307      	str	r3, [sp, #28]
 8016dc4:	2100      	movs	r1, #0
 8016dc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016dc8:	1c58      	adds	r0, r3, #1
 8016dca:	901b      	str	r0, [sp, #108]	; 0x6c
 8016dcc:	785b      	ldrb	r3, [r3, #1]
 8016dce:	4608      	mov	r0, r1
 8016dd0:	e7c9      	b.n	8016d66 <_strtod_l+0x1d6>
 8016dd2:	9805      	ldr	r0, [sp, #20]
 8016dd4:	e7d3      	b.n	8016d7e <_strtod_l+0x1ee>
 8016dd6:	2908      	cmp	r1, #8
 8016dd8:	f101 0101 	add.w	r1, r1, #1
 8016ddc:	dc03      	bgt.n	8016de6 <_strtod_l+0x256>
 8016dde:	9b07      	ldr	r3, [sp, #28]
 8016de0:	437b      	muls	r3, r7
 8016de2:	9307      	str	r3, [sp, #28]
 8016de4:	e7e1      	b.n	8016daa <_strtod_l+0x21a>
 8016de6:	2910      	cmp	r1, #16
 8016de8:	bfd8      	it	le
 8016dea:	437d      	mulle	r5, r7
 8016dec:	e7dd      	b.n	8016daa <_strtod_l+0x21a>
 8016dee:	2c10      	cmp	r4, #16
 8016df0:	bfdc      	itt	le
 8016df2:	210a      	movle	r1, #10
 8016df4:	fb01 e505 	mlale	r5, r1, r5, lr
 8016df8:	e7e4      	b.n	8016dc4 <_strtod_l+0x234>
 8016dfa:	2301      	movs	r3, #1
 8016dfc:	9304      	str	r3, [sp, #16]
 8016dfe:	e781      	b.n	8016d04 <_strtod_l+0x174>
 8016e00:	f04f 0c01 	mov.w	ip, #1
 8016e04:	1cb3      	adds	r3, r6, #2
 8016e06:	931b      	str	r3, [sp, #108]	; 0x6c
 8016e08:	78b3      	ldrb	r3, [r6, #2]
 8016e0a:	e78a      	b.n	8016d22 <_strtod_l+0x192>
 8016e0c:	f04f 0c00 	mov.w	ip, #0
 8016e10:	e7f8      	b.n	8016e04 <_strtod_l+0x274>
 8016e12:	bf00      	nop
 8016e14:	0801b45c 	.word	0x0801b45c
 8016e18:	7ff00000 	.word	0x7ff00000
 8016e1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e1e:	1c5f      	adds	r7, r3, #1
 8016e20:	971b      	str	r7, [sp, #108]	; 0x6c
 8016e22:	785b      	ldrb	r3, [r3, #1]
 8016e24:	2b30      	cmp	r3, #48	; 0x30
 8016e26:	d0f9      	beq.n	8016e1c <_strtod_l+0x28c>
 8016e28:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016e2c:	2f08      	cmp	r7, #8
 8016e2e:	f63f af7d 	bhi.w	8016d2c <_strtod_l+0x19c>
 8016e32:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016e36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e38:	930a      	str	r3, [sp, #40]	; 0x28
 8016e3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e3c:	1c5f      	adds	r7, r3, #1
 8016e3e:	971b      	str	r7, [sp, #108]	; 0x6c
 8016e40:	785b      	ldrb	r3, [r3, #1]
 8016e42:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016e46:	f1b8 0f09 	cmp.w	r8, #9
 8016e4a:	d937      	bls.n	8016ebc <_strtod_l+0x32c>
 8016e4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016e4e:	1a7f      	subs	r7, r7, r1
 8016e50:	2f08      	cmp	r7, #8
 8016e52:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016e56:	dc37      	bgt.n	8016ec8 <_strtod_l+0x338>
 8016e58:	45be      	cmp	lr, r7
 8016e5a:	bfa8      	it	ge
 8016e5c:	46be      	movge	lr, r7
 8016e5e:	f1bc 0f00 	cmp.w	ip, #0
 8016e62:	d001      	beq.n	8016e68 <_strtod_l+0x2d8>
 8016e64:	f1ce 0e00 	rsb	lr, lr, #0
 8016e68:	2c00      	cmp	r4, #0
 8016e6a:	d151      	bne.n	8016f10 <_strtod_l+0x380>
 8016e6c:	2800      	cmp	r0, #0
 8016e6e:	f47f aece 	bne.w	8016c0e <_strtod_l+0x7e>
 8016e72:	9a06      	ldr	r2, [sp, #24]
 8016e74:	2a00      	cmp	r2, #0
 8016e76:	f47f aeca 	bne.w	8016c0e <_strtod_l+0x7e>
 8016e7a:	9a04      	ldr	r2, [sp, #16]
 8016e7c:	2a00      	cmp	r2, #0
 8016e7e:	f47f aee4 	bne.w	8016c4a <_strtod_l+0xba>
 8016e82:	2b4e      	cmp	r3, #78	; 0x4e
 8016e84:	d027      	beq.n	8016ed6 <_strtod_l+0x346>
 8016e86:	dc21      	bgt.n	8016ecc <_strtod_l+0x33c>
 8016e88:	2b49      	cmp	r3, #73	; 0x49
 8016e8a:	f47f aede 	bne.w	8016c4a <_strtod_l+0xba>
 8016e8e:	49a0      	ldr	r1, [pc, #640]	; (8017110 <_strtod_l+0x580>)
 8016e90:	a81b      	add	r0, sp, #108	; 0x6c
 8016e92:	f001 fdd7 	bl	8018a44 <__match>
 8016e96:	2800      	cmp	r0, #0
 8016e98:	f43f aed7 	beq.w	8016c4a <_strtod_l+0xba>
 8016e9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e9e:	499d      	ldr	r1, [pc, #628]	; (8017114 <_strtod_l+0x584>)
 8016ea0:	3b01      	subs	r3, #1
 8016ea2:	a81b      	add	r0, sp, #108	; 0x6c
 8016ea4:	931b      	str	r3, [sp, #108]	; 0x6c
 8016ea6:	f001 fdcd 	bl	8018a44 <__match>
 8016eaa:	b910      	cbnz	r0, 8016eb2 <_strtod_l+0x322>
 8016eac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016eae:	3301      	adds	r3, #1
 8016eb0:	931b      	str	r3, [sp, #108]	; 0x6c
 8016eb2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8017128 <_strtod_l+0x598>
 8016eb6:	f04f 0a00 	mov.w	sl, #0
 8016eba:	e6a8      	b.n	8016c0e <_strtod_l+0x7e>
 8016ebc:	210a      	movs	r1, #10
 8016ebe:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016ec2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016ec6:	e7b8      	b.n	8016e3a <_strtod_l+0x2aa>
 8016ec8:	46be      	mov	lr, r7
 8016eca:	e7c8      	b.n	8016e5e <_strtod_l+0x2ce>
 8016ecc:	2b69      	cmp	r3, #105	; 0x69
 8016ece:	d0de      	beq.n	8016e8e <_strtod_l+0x2fe>
 8016ed0:	2b6e      	cmp	r3, #110	; 0x6e
 8016ed2:	f47f aeba 	bne.w	8016c4a <_strtod_l+0xba>
 8016ed6:	4990      	ldr	r1, [pc, #576]	; (8017118 <_strtod_l+0x588>)
 8016ed8:	a81b      	add	r0, sp, #108	; 0x6c
 8016eda:	f001 fdb3 	bl	8018a44 <__match>
 8016ede:	2800      	cmp	r0, #0
 8016ee0:	f43f aeb3 	beq.w	8016c4a <_strtod_l+0xba>
 8016ee4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ee6:	781b      	ldrb	r3, [r3, #0]
 8016ee8:	2b28      	cmp	r3, #40	; 0x28
 8016eea:	d10e      	bne.n	8016f0a <_strtod_l+0x37a>
 8016eec:	aa1e      	add	r2, sp, #120	; 0x78
 8016eee:	498b      	ldr	r1, [pc, #556]	; (801711c <_strtod_l+0x58c>)
 8016ef0:	a81b      	add	r0, sp, #108	; 0x6c
 8016ef2:	f001 fdbb 	bl	8018a6c <__hexnan>
 8016ef6:	2805      	cmp	r0, #5
 8016ef8:	d107      	bne.n	8016f0a <_strtod_l+0x37a>
 8016efa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016efc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016f00:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016f04:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016f08:	e681      	b.n	8016c0e <_strtod_l+0x7e>
 8016f0a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8017130 <_strtod_l+0x5a0>
 8016f0e:	e7d2      	b.n	8016eb6 <_strtod_l+0x326>
 8016f10:	ebae 0302 	sub.w	r3, lr, r2
 8016f14:	9306      	str	r3, [sp, #24]
 8016f16:	9b05      	ldr	r3, [sp, #20]
 8016f18:	9807      	ldr	r0, [sp, #28]
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	bf08      	it	eq
 8016f1e:	4623      	moveq	r3, r4
 8016f20:	2c10      	cmp	r4, #16
 8016f22:	9305      	str	r3, [sp, #20]
 8016f24:	46a0      	mov	r8, r4
 8016f26:	bfa8      	it	ge
 8016f28:	f04f 0810 	movge.w	r8, #16
 8016f2c:	f7e9 faea 	bl	8000504 <__aeabi_ui2d>
 8016f30:	2c09      	cmp	r4, #9
 8016f32:	4682      	mov	sl, r0
 8016f34:	468b      	mov	fp, r1
 8016f36:	dc13      	bgt.n	8016f60 <_strtod_l+0x3d0>
 8016f38:	9b06      	ldr	r3, [sp, #24]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	f43f ae67 	beq.w	8016c0e <_strtod_l+0x7e>
 8016f40:	9b06      	ldr	r3, [sp, #24]
 8016f42:	dd7a      	ble.n	801703a <_strtod_l+0x4aa>
 8016f44:	2b16      	cmp	r3, #22
 8016f46:	dc61      	bgt.n	801700c <_strtod_l+0x47c>
 8016f48:	4a75      	ldr	r2, [pc, #468]	; (8017120 <_strtod_l+0x590>)
 8016f4a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016f4e:	e9de 0100 	ldrd	r0, r1, [lr]
 8016f52:	4652      	mov	r2, sl
 8016f54:	465b      	mov	r3, fp
 8016f56:	f7e9 fb4f 	bl	80005f8 <__aeabi_dmul>
 8016f5a:	4682      	mov	sl, r0
 8016f5c:	468b      	mov	fp, r1
 8016f5e:	e656      	b.n	8016c0e <_strtod_l+0x7e>
 8016f60:	4b6f      	ldr	r3, [pc, #444]	; (8017120 <_strtod_l+0x590>)
 8016f62:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016f66:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016f6a:	f7e9 fb45 	bl	80005f8 <__aeabi_dmul>
 8016f6e:	4606      	mov	r6, r0
 8016f70:	4628      	mov	r0, r5
 8016f72:	460f      	mov	r7, r1
 8016f74:	f7e9 fac6 	bl	8000504 <__aeabi_ui2d>
 8016f78:	4602      	mov	r2, r0
 8016f7a:	460b      	mov	r3, r1
 8016f7c:	4630      	mov	r0, r6
 8016f7e:	4639      	mov	r1, r7
 8016f80:	f7e9 f984 	bl	800028c <__adddf3>
 8016f84:	2c0f      	cmp	r4, #15
 8016f86:	4682      	mov	sl, r0
 8016f88:	468b      	mov	fp, r1
 8016f8a:	ddd5      	ble.n	8016f38 <_strtod_l+0x3a8>
 8016f8c:	9b06      	ldr	r3, [sp, #24]
 8016f8e:	eba4 0808 	sub.w	r8, r4, r8
 8016f92:	4498      	add	r8, r3
 8016f94:	f1b8 0f00 	cmp.w	r8, #0
 8016f98:	f340 8096 	ble.w	80170c8 <_strtod_l+0x538>
 8016f9c:	f018 030f 	ands.w	r3, r8, #15
 8016fa0:	d00a      	beq.n	8016fb8 <_strtod_l+0x428>
 8016fa2:	495f      	ldr	r1, [pc, #380]	; (8017120 <_strtod_l+0x590>)
 8016fa4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016fa8:	4652      	mov	r2, sl
 8016faa:	465b      	mov	r3, fp
 8016fac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016fb0:	f7e9 fb22 	bl	80005f8 <__aeabi_dmul>
 8016fb4:	4682      	mov	sl, r0
 8016fb6:	468b      	mov	fp, r1
 8016fb8:	f038 080f 	bics.w	r8, r8, #15
 8016fbc:	d073      	beq.n	80170a6 <_strtod_l+0x516>
 8016fbe:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016fc2:	dd47      	ble.n	8017054 <_strtod_l+0x4c4>
 8016fc4:	2400      	movs	r4, #0
 8016fc6:	46a0      	mov	r8, r4
 8016fc8:	9407      	str	r4, [sp, #28]
 8016fca:	9405      	str	r4, [sp, #20]
 8016fcc:	2322      	movs	r3, #34	; 0x22
 8016fce:	f8df b158 	ldr.w	fp, [pc, #344]	; 8017128 <_strtod_l+0x598>
 8016fd2:	f8c9 3000 	str.w	r3, [r9]
 8016fd6:	f04f 0a00 	mov.w	sl, #0
 8016fda:	9b07      	ldr	r3, [sp, #28]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	f43f ae16 	beq.w	8016c0e <_strtod_l+0x7e>
 8016fe2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016fe4:	4648      	mov	r0, r9
 8016fe6:	f001 fe2d 	bl	8018c44 <_Bfree>
 8016fea:	9905      	ldr	r1, [sp, #20]
 8016fec:	4648      	mov	r0, r9
 8016fee:	f001 fe29 	bl	8018c44 <_Bfree>
 8016ff2:	4641      	mov	r1, r8
 8016ff4:	4648      	mov	r0, r9
 8016ff6:	f001 fe25 	bl	8018c44 <_Bfree>
 8016ffa:	9907      	ldr	r1, [sp, #28]
 8016ffc:	4648      	mov	r0, r9
 8016ffe:	f001 fe21 	bl	8018c44 <_Bfree>
 8017002:	4621      	mov	r1, r4
 8017004:	4648      	mov	r0, r9
 8017006:	f001 fe1d 	bl	8018c44 <_Bfree>
 801700a:	e600      	b.n	8016c0e <_strtod_l+0x7e>
 801700c:	9a06      	ldr	r2, [sp, #24]
 801700e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8017012:	4293      	cmp	r3, r2
 8017014:	dbba      	blt.n	8016f8c <_strtod_l+0x3fc>
 8017016:	4d42      	ldr	r5, [pc, #264]	; (8017120 <_strtod_l+0x590>)
 8017018:	f1c4 040f 	rsb	r4, r4, #15
 801701c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8017020:	4652      	mov	r2, sl
 8017022:	465b      	mov	r3, fp
 8017024:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017028:	f7e9 fae6 	bl	80005f8 <__aeabi_dmul>
 801702c:	9b06      	ldr	r3, [sp, #24]
 801702e:	1b1c      	subs	r4, r3, r4
 8017030:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8017034:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017038:	e78d      	b.n	8016f56 <_strtod_l+0x3c6>
 801703a:	f113 0f16 	cmn.w	r3, #22
 801703e:	dba5      	blt.n	8016f8c <_strtod_l+0x3fc>
 8017040:	4a37      	ldr	r2, [pc, #220]	; (8017120 <_strtod_l+0x590>)
 8017042:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8017046:	e9d2 2300 	ldrd	r2, r3, [r2]
 801704a:	4650      	mov	r0, sl
 801704c:	4659      	mov	r1, fp
 801704e:	f7e9 fbfd 	bl	800084c <__aeabi_ddiv>
 8017052:	e782      	b.n	8016f5a <_strtod_l+0x3ca>
 8017054:	2300      	movs	r3, #0
 8017056:	4e33      	ldr	r6, [pc, #204]	; (8017124 <_strtod_l+0x594>)
 8017058:	ea4f 1828 	mov.w	r8, r8, asr #4
 801705c:	4650      	mov	r0, sl
 801705e:	4659      	mov	r1, fp
 8017060:	461d      	mov	r5, r3
 8017062:	f1b8 0f01 	cmp.w	r8, #1
 8017066:	dc21      	bgt.n	80170ac <_strtod_l+0x51c>
 8017068:	b10b      	cbz	r3, 801706e <_strtod_l+0x4de>
 801706a:	4682      	mov	sl, r0
 801706c:	468b      	mov	fp, r1
 801706e:	4b2d      	ldr	r3, [pc, #180]	; (8017124 <_strtod_l+0x594>)
 8017070:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8017074:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8017078:	4652      	mov	r2, sl
 801707a:	465b      	mov	r3, fp
 801707c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017080:	f7e9 faba 	bl	80005f8 <__aeabi_dmul>
 8017084:	4b28      	ldr	r3, [pc, #160]	; (8017128 <_strtod_l+0x598>)
 8017086:	460a      	mov	r2, r1
 8017088:	400b      	ands	r3, r1
 801708a:	4928      	ldr	r1, [pc, #160]	; (801712c <_strtod_l+0x59c>)
 801708c:	428b      	cmp	r3, r1
 801708e:	4682      	mov	sl, r0
 8017090:	d898      	bhi.n	8016fc4 <_strtod_l+0x434>
 8017092:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8017096:	428b      	cmp	r3, r1
 8017098:	bf86      	itte	hi
 801709a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8017134 <_strtod_l+0x5a4>
 801709e:	f04f 3aff 	movhi.w	sl, #4294967295
 80170a2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80170a6:	2300      	movs	r3, #0
 80170a8:	9304      	str	r3, [sp, #16]
 80170aa:	e077      	b.n	801719c <_strtod_l+0x60c>
 80170ac:	f018 0f01 	tst.w	r8, #1
 80170b0:	d006      	beq.n	80170c0 <_strtod_l+0x530>
 80170b2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80170b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170ba:	f7e9 fa9d 	bl	80005f8 <__aeabi_dmul>
 80170be:	2301      	movs	r3, #1
 80170c0:	3501      	adds	r5, #1
 80170c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80170c6:	e7cc      	b.n	8017062 <_strtod_l+0x4d2>
 80170c8:	d0ed      	beq.n	80170a6 <_strtod_l+0x516>
 80170ca:	f1c8 0800 	rsb	r8, r8, #0
 80170ce:	f018 020f 	ands.w	r2, r8, #15
 80170d2:	d00a      	beq.n	80170ea <_strtod_l+0x55a>
 80170d4:	4b12      	ldr	r3, [pc, #72]	; (8017120 <_strtod_l+0x590>)
 80170d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80170da:	4650      	mov	r0, sl
 80170dc:	4659      	mov	r1, fp
 80170de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170e2:	f7e9 fbb3 	bl	800084c <__aeabi_ddiv>
 80170e6:	4682      	mov	sl, r0
 80170e8:	468b      	mov	fp, r1
 80170ea:	ea5f 1828 	movs.w	r8, r8, asr #4
 80170ee:	d0da      	beq.n	80170a6 <_strtod_l+0x516>
 80170f0:	f1b8 0f1f 	cmp.w	r8, #31
 80170f4:	dd20      	ble.n	8017138 <_strtod_l+0x5a8>
 80170f6:	2400      	movs	r4, #0
 80170f8:	46a0      	mov	r8, r4
 80170fa:	9407      	str	r4, [sp, #28]
 80170fc:	9405      	str	r4, [sp, #20]
 80170fe:	2322      	movs	r3, #34	; 0x22
 8017100:	f04f 0a00 	mov.w	sl, #0
 8017104:	f04f 0b00 	mov.w	fp, #0
 8017108:	f8c9 3000 	str.w	r3, [r9]
 801710c:	e765      	b.n	8016fda <_strtod_l+0x44a>
 801710e:	bf00      	nop
 8017110:	0801b425 	.word	0x0801b425
 8017114:	0801b4b3 	.word	0x0801b4b3
 8017118:	0801b42d 	.word	0x0801b42d
 801711c:	0801b470 	.word	0x0801b470
 8017120:	0801b4f0 	.word	0x0801b4f0
 8017124:	0801b4c8 	.word	0x0801b4c8
 8017128:	7ff00000 	.word	0x7ff00000
 801712c:	7ca00000 	.word	0x7ca00000
 8017130:	fff80000 	.word	0xfff80000
 8017134:	7fefffff 	.word	0x7fefffff
 8017138:	f018 0310 	ands.w	r3, r8, #16
 801713c:	bf18      	it	ne
 801713e:	236a      	movne	r3, #106	; 0x6a
 8017140:	4da0      	ldr	r5, [pc, #640]	; (80173c4 <_strtod_l+0x834>)
 8017142:	9304      	str	r3, [sp, #16]
 8017144:	4650      	mov	r0, sl
 8017146:	4659      	mov	r1, fp
 8017148:	2300      	movs	r3, #0
 801714a:	f1b8 0f00 	cmp.w	r8, #0
 801714e:	f300 810a 	bgt.w	8017366 <_strtod_l+0x7d6>
 8017152:	b10b      	cbz	r3, 8017158 <_strtod_l+0x5c8>
 8017154:	4682      	mov	sl, r0
 8017156:	468b      	mov	fp, r1
 8017158:	9b04      	ldr	r3, [sp, #16]
 801715a:	b1bb      	cbz	r3, 801718c <_strtod_l+0x5fc>
 801715c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8017160:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017164:	2b00      	cmp	r3, #0
 8017166:	4659      	mov	r1, fp
 8017168:	dd10      	ble.n	801718c <_strtod_l+0x5fc>
 801716a:	2b1f      	cmp	r3, #31
 801716c:	f340 8107 	ble.w	801737e <_strtod_l+0x7ee>
 8017170:	2b34      	cmp	r3, #52	; 0x34
 8017172:	bfde      	ittt	le
 8017174:	3b20      	suble	r3, #32
 8017176:	f04f 32ff 	movle.w	r2, #4294967295
 801717a:	fa02 f303 	lslle.w	r3, r2, r3
 801717e:	f04f 0a00 	mov.w	sl, #0
 8017182:	bfcc      	ite	gt
 8017184:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017188:	ea03 0b01 	andle.w	fp, r3, r1
 801718c:	2200      	movs	r2, #0
 801718e:	2300      	movs	r3, #0
 8017190:	4650      	mov	r0, sl
 8017192:	4659      	mov	r1, fp
 8017194:	f7e9 fc98 	bl	8000ac8 <__aeabi_dcmpeq>
 8017198:	2800      	cmp	r0, #0
 801719a:	d1ac      	bne.n	80170f6 <_strtod_l+0x566>
 801719c:	9b07      	ldr	r3, [sp, #28]
 801719e:	9300      	str	r3, [sp, #0]
 80171a0:	9a05      	ldr	r2, [sp, #20]
 80171a2:	9908      	ldr	r1, [sp, #32]
 80171a4:	4623      	mov	r3, r4
 80171a6:	4648      	mov	r0, r9
 80171a8:	f001 fd9e 	bl	8018ce8 <__s2b>
 80171ac:	9007      	str	r0, [sp, #28]
 80171ae:	2800      	cmp	r0, #0
 80171b0:	f43f af08 	beq.w	8016fc4 <_strtod_l+0x434>
 80171b4:	9a06      	ldr	r2, [sp, #24]
 80171b6:	9b06      	ldr	r3, [sp, #24]
 80171b8:	2a00      	cmp	r2, #0
 80171ba:	f1c3 0300 	rsb	r3, r3, #0
 80171be:	bfa8      	it	ge
 80171c0:	2300      	movge	r3, #0
 80171c2:	930e      	str	r3, [sp, #56]	; 0x38
 80171c4:	2400      	movs	r4, #0
 80171c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80171ca:	9316      	str	r3, [sp, #88]	; 0x58
 80171cc:	46a0      	mov	r8, r4
 80171ce:	9b07      	ldr	r3, [sp, #28]
 80171d0:	4648      	mov	r0, r9
 80171d2:	6859      	ldr	r1, [r3, #4]
 80171d4:	f001 fd02 	bl	8018bdc <_Balloc>
 80171d8:	9005      	str	r0, [sp, #20]
 80171da:	2800      	cmp	r0, #0
 80171dc:	f43f aef6 	beq.w	8016fcc <_strtod_l+0x43c>
 80171e0:	9b07      	ldr	r3, [sp, #28]
 80171e2:	691a      	ldr	r2, [r3, #16]
 80171e4:	3202      	adds	r2, #2
 80171e6:	f103 010c 	add.w	r1, r3, #12
 80171ea:	0092      	lsls	r2, r2, #2
 80171ec:	300c      	adds	r0, #12
 80171ee:	f7fe fd35 	bl	8015c5c <memcpy>
 80171f2:	aa1e      	add	r2, sp, #120	; 0x78
 80171f4:	a91d      	add	r1, sp, #116	; 0x74
 80171f6:	ec4b ab10 	vmov	d0, sl, fp
 80171fa:	4648      	mov	r0, r9
 80171fc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8017200:	f002 f82e 	bl	8019260 <__d2b>
 8017204:	901c      	str	r0, [sp, #112]	; 0x70
 8017206:	2800      	cmp	r0, #0
 8017208:	f43f aee0 	beq.w	8016fcc <_strtod_l+0x43c>
 801720c:	2101      	movs	r1, #1
 801720e:	4648      	mov	r0, r9
 8017210:	f001 fdf6 	bl	8018e00 <__i2b>
 8017214:	4680      	mov	r8, r0
 8017216:	2800      	cmp	r0, #0
 8017218:	f43f aed8 	beq.w	8016fcc <_strtod_l+0x43c>
 801721c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801721e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017220:	2e00      	cmp	r6, #0
 8017222:	bfab      	itete	ge
 8017224:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8017226:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8017228:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801722a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801722c:	bfac      	ite	ge
 801722e:	18f7      	addge	r7, r6, r3
 8017230:	1b9d      	sublt	r5, r3, r6
 8017232:	9b04      	ldr	r3, [sp, #16]
 8017234:	1af6      	subs	r6, r6, r3
 8017236:	4416      	add	r6, r2
 8017238:	4b63      	ldr	r3, [pc, #396]	; (80173c8 <_strtod_l+0x838>)
 801723a:	3e01      	subs	r6, #1
 801723c:	429e      	cmp	r6, r3
 801723e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017242:	f280 80af 	bge.w	80173a4 <_strtod_l+0x814>
 8017246:	1b9b      	subs	r3, r3, r6
 8017248:	2b1f      	cmp	r3, #31
 801724a:	eba2 0203 	sub.w	r2, r2, r3
 801724e:	f04f 0101 	mov.w	r1, #1
 8017252:	f300 809b 	bgt.w	801738c <_strtod_l+0x7fc>
 8017256:	fa01 f303 	lsl.w	r3, r1, r3
 801725a:	930f      	str	r3, [sp, #60]	; 0x3c
 801725c:	2300      	movs	r3, #0
 801725e:	930a      	str	r3, [sp, #40]	; 0x28
 8017260:	18be      	adds	r6, r7, r2
 8017262:	9b04      	ldr	r3, [sp, #16]
 8017264:	42b7      	cmp	r7, r6
 8017266:	4415      	add	r5, r2
 8017268:	441d      	add	r5, r3
 801726a:	463b      	mov	r3, r7
 801726c:	bfa8      	it	ge
 801726e:	4633      	movge	r3, r6
 8017270:	42ab      	cmp	r3, r5
 8017272:	bfa8      	it	ge
 8017274:	462b      	movge	r3, r5
 8017276:	2b00      	cmp	r3, #0
 8017278:	bfc2      	ittt	gt
 801727a:	1af6      	subgt	r6, r6, r3
 801727c:	1aed      	subgt	r5, r5, r3
 801727e:	1aff      	subgt	r7, r7, r3
 8017280:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017282:	b1bb      	cbz	r3, 80172b4 <_strtod_l+0x724>
 8017284:	4641      	mov	r1, r8
 8017286:	461a      	mov	r2, r3
 8017288:	4648      	mov	r0, r9
 801728a:	f001 fe59 	bl	8018f40 <__pow5mult>
 801728e:	4680      	mov	r8, r0
 8017290:	2800      	cmp	r0, #0
 8017292:	f43f ae9b 	beq.w	8016fcc <_strtod_l+0x43c>
 8017296:	4601      	mov	r1, r0
 8017298:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801729a:	4648      	mov	r0, r9
 801729c:	f001 fdb9 	bl	8018e12 <__multiply>
 80172a0:	900c      	str	r0, [sp, #48]	; 0x30
 80172a2:	2800      	cmp	r0, #0
 80172a4:	f43f ae92 	beq.w	8016fcc <_strtod_l+0x43c>
 80172a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80172aa:	4648      	mov	r0, r9
 80172ac:	f001 fcca 	bl	8018c44 <_Bfree>
 80172b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80172b2:	931c      	str	r3, [sp, #112]	; 0x70
 80172b4:	2e00      	cmp	r6, #0
 80172b6:	dc7a      	bgt.n	80173ae <_strtod_l+0x81e>
 80172b8:	9b06      	ldr	r3, [sp, #24]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	dd08      	ble.n	80172d0 <_strtod_l+0x740>
 80172be:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80172c0:	9905      	ldr	r1, [sp, #20]
 80172c2:	4648      	mov	r0, r9
 80172c4:	f001 fe3c 	bl	8018f40 <__pow5mult>
 80172c8:	9005      	str	r0, [sp, #20]
 80172ca:	2800      	cmp	r0, #0
 80172cc:	f43f ae7e 	beq.w	8016fcc <_strtod_l+0x43c>
 80172d0:	2d00      	cmp	r5, #0
 80172d2:	dd08      	ble.n	80172e6 <_strtod_l+0x756>
 80172d4:	462a      	mov	r2, r5
 80172d6:	9905      	ldr	r1, [sp, #20]
 80172d8:	4648      	mov	r0, r9
 80172da:	f001 fe7f 	bl	8018fdc <__lshift>
 80172de:	9005      	str	r0, [sp, #20]
 80172e0:	2800      	cmp	r0, #0
 80172e2:	f43f ae73 	beq.w	8016fcc <_strtod_l+0x43c>
 80172e6:	2f00      	cmp	r7, #0
 80172e8:	dd08      	ble.n	80172fc <_strtod_l+0x76c>
 80172ea:	4641      	mov	r1, r8
 80172ec:	463a      	mov	r2, r7
 80172ee:	4648      	mov	r0, r9
 80172f0:	f001 fe74 	bl	8018fdc <__lshift>
 80172f4:	4680      	mov	r8, r0
 80172f6:	2800      	cmp	r0, #0
 80172f8:	f43f ae68 	beq.w	8016fcc <_strtod_l+0x43c>
 80172fc:	9a05      	ldr	r2, [sp, #20]
 80172fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017300:	4648      	mov	r0, r9
 8017302:	f001 fed9 	bl	80190b8 <__mdiff>
 8017306:	4604      	mov	r4, r0
 8017308:	2800      	cmp	r0, #0
 801730a:	f43f ae5f 	beq.w	8016fcc <_strtod_l+0x43c>
 801730e:	68c3      	ldr	r3, [r0, #12]
 8017310:	930c      	str	r3, [sp, #48]	; 0x30
 8017312:	2300      	movs	r3, #0
 8017314:	60c3      	str	r3, [r0, #12]
 8017316:	4641      	mov	r1, r8
 8017318:	f001 feb4 	bl	8019084 <__mcmp>
 801731c:	2800      	cmp	r0, #0
 801731e:	da55      	bge.n	80173cc <_strtod_l+0x83c>
 8017320:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017322:	b9e3      	cbnz	r3, 801735e <_strtod_l+0x7ce>
 8017324:	f1ba 0f00 	cmp.w	sl, #0
 8017328:	d119      	bne.n	801735e <_strtod_l+0x7ce>
 801732a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801732e:	b9b3      	cbnz	r3, 801735e <_strtod_l+0x7ce>
 8017330:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017334:	0d1b      	lsrs	r3, r3, #20
 8017336:	051b      	lsls	r3, r3, #20
 8017338:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801733c:	d90f      	bls.n	801735e <_strtod_l+0x7ce>
 801733e:	6963      	ldr	r3, [r4, #20]
 8017340:	b913      	cbnz	r3, 8017348 <_strtod_l+0x7b8>
 8017342:	6923      	ldr	r3, [r4, #16]
 8017344:	2b01      	cmp	r3, #1
 8017346:	dd0a      	ble.n	801735e <_strtod_l+0x7ce>
 8017348:	4621      	mov	r1, r4
 801734a:	2201      	movs	r2, #1
 801734c:	4648      	mov	r0, r9
 801734e:	f001 fe45 	bl	8018fdc <__lshift>
 8017352:	4641      	mov	r1, r8
 8017354:	4604      	mov	r4, r0
 8017356:	f001 fe95 	bl	8019084 <__mcmp>
 801735a:	2800      	cmp	r0, #0
 801735c:	dc67      	bgt.n	801742e <_strtod_l+0x89e>
 801735e:	9b04      	ldr	r3, [sp, #16]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d171      	bne.n	8017448 <_strtod_l+0x8b8>
 8017364:	e63d      	b.n	8016fe2 <_strtod_l+0x452>
 8017366:	f018 0f01 	tst.w	r8, #1
 801736a:	d004      	beq.n	8017376 <_strtod_l+0x7e6>
 801736c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017370:	f7e9 f942 	bl	80005f8 <__aeabi_dmul>
 8017374:	2301      	movs	r3, #1
 8017376:	ea4f 0868 	mov.w	r8, r8, asr #1
 801737a:	3508      	adds	r5, #8
 801737c:	e6e5      	b.n	801714a <_strtod_l+0x5ba>
 801737e:	f04f 32ff 	mov.w	r2, #4294967295
 8017382:	fa02 f303 	lsl.w	r3, r2, r3
 8017386:	ea03 0a0a 	and.w	sl, r3, sl
 801738a:	e6ff      	b.n	801718c <_strtod_l+0x5fc>
 801738c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8017390:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8017394:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8017398:	36e2      	adds	r6, #226	; 0xe2
 801739a:	fa01 f306 	lsl.w	r3, r1, r6
 801739e:	930a      	str	r3, [sp, #40]	; 0x28
 80173a0:	910f      	str	r1, [sp, #60]	; 0x3c
 80173a2:	e75d      	b.n	8017260 <_strtod_l+0x6d0>
 80173a4:	2300      	movs	r3, #0
 80173a6:	930a      	str	r3, [sp, #40]	; 0x28
 80173a8:	2301      	movs	r3, #1
 80173aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80173ac:	e758      	b.n	8017260 <_strtod_l+0x6d0>
 80173ae:	4632      	mov	r2, r6
 80173b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80173b2:	4648      	mov	r0, r9
 80173b4:	f001 fe12 	bl	8018fdc <__lshift>
 80173b8:	901c      	str	r0, [sp, #112]	; 0x70
 80173ba:	2800      	cmp	r0, #0
 80173bc:	f47f af7c 	bne.w	80172b8 <_strtod_l+0x728>
 80173c0:	e604      	b.n	8016fcc <_strtod_l+0x43c>
 80173c2:	bf00      	nop
 80173c4:	0801b488 	.word	0x0801b488
 80173c8:	fffffc02 	.word	0xfffffc02
 80173cc:	465d      	mov	r5, fp
 80173ce:	f040 8086 	bne.w	80174de <_strtod_l+0x94e>
 80173d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80173d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80173d8:	b32a      	cbz	r2, 8017426 <_strtod_l+0x896>
 80173da:	4aaf      	ldr	r2, [pc, #700]	; (8017698 <_strtod_l+0xb08>)
 80173dc:	4293      	cmp	r3, r2
 80173de:	d153      	bne.n	8017488 <_strtod_l+0x8f8>
 80173e0:	9b04      	ldr	r3, [sp, #16]
 80173e2:	4650      	mov	r0, sl
 80173e4:	b1d3      	cbz	r3, 801741c <_strtod_l+0x88c>
 80173e6:	4aad      	ldr	r2, [pc, #692]	; (801769c <_strtod_l+0xb0c>)
 80173e8:	402a      	ands	r2, r5
 80173ea:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80173ee:	f04f 31ff 	mov.w	r1, #4294967295
 80173f2:	d816      	bhi.n	8017422 <_strtod_l+0x892>
 80173f4:	0d12      	lsrs	r2, r2, #20
 80173f6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80173fa:	fa01 f303 	lsl.w	r3, r1, r3
 80173fe:	4298      	cmp	r0, r3
 8017400:	d142      	bne.n	8017488 <_strtod_l+0x8f8>
 8017402:	4ba7      	ldr	r3, [pc, #668]	; (80176a0 <_strtod_l+0xb10>)
 8017404:	429d      	cmp	r5, r3
 8017406:	d102      	bne.n	801740e <_strtod_l+0x87e>
 8017408:	3001      	adds	r0, #1
 801740a:	f43f addf 	beq.w	8016fcc <_strtod_l+0x43c>
 801740e:	4ba3      	ldr	r3, [pc, #652]	; (801769c <_strtod_l+0xb0c>)
 8017410:	402b      	ands	r3, r5
 8017412:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8017416:	f04f 0a00 	mov.w	sl, #0
 801741a:	e7a0      	b.n	801735e <_strtod_l+0x7ce>
 801741c:	f04f 33ff 	mov.w	r3, #4294967295
 8017420:	e7ed      	b.n	80173fe <_strtod_l+0x86e>
 8017422:	460b      	mov	r3, r1
 8017424:	e7eb      	b.n	80173fe <_strtod_l+0x86e>
 8017426:	bb7b      	cbnz	r3, 8017488 <_strtod_l+0x8f8>
 8017428:	f1ba 0f00 	cmp.w	sl, #0
 801742c:	d12c      	bne.n	8017488 <_strtod_l+0x8f8>
 801742e:	9904      	ldr	r1, [sp, #16]
 8017430:	4a9a      	ldr	r2, [pc, #616]	; (801769c <_strtod_l+0xb0c>)
 8017432:	465b      	mov	r3, fp
 8017434:	b1f1      	cbz	r1, 8017474 <_strtod_l+0x8e4>
 8017436:	ea02 010b 	and.w	r1, r2, fp
 801743a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801743e:	dc19      	bgt.n	8017474 <_strtod_l+0x8e4>
 8017440:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017444:	f77f ae5b 	ble.w	80170fe <_strtod_l+0x56e>
 8017448:	4a96      	ldr	r2, [pc, #600]	; (80176a4 <_strtod_l+0xb14>)
 801744a:	2300      	movs	r3, #0
 801744c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8017450:	4650      	mov	r0, sl
 8017452:	4659      	mov	r1, fp
 8017454:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017458:	f7e9 f8ce 	bl	80005f8 <__aeabi_dmul>
 801745c:	4682      	mov	sl, r0
 801745e:	468b      	mov	fp, r1
 8017460:	2900      	cmp	r1, #0
 8017462:	f47f adbe 	bne.w	8016fe2 <_strtod_l+0x452>
 8017466:	2800      	cmp	r0, #0
 8017468:	f47f adbb 	bne.w	8016fe2 <_strtod_l+0x452>
 801746c:	2322      	movs	r3, #34	; 0x22
 801746e:	f8c9 3000 	str.w	r3, [r9]
 8017472:	e5b6      	b.n	8016fe2 <_strtod_l+0x452>
 8017474:	4013      	ands	r3, r2
 8017476:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801747a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801747e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017482:	f04f 3aff 	mov.w	sl, #4294967295
 8017486:	e76a      	b.n	801735e <_strtod_l+0x7ce>
 8017488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801748a:	b193      	cbz	r3, 80174b2 <_strtod_l+0x922>
 801748c:	422b      	tst	r3, r5
 801748e:	f43f af66 	beq.w	801735e <_strtod_l+0x7ce>
 8017492:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017494:	9a04      	ldr	r2, [sp, #16]
 8017496:	4650      	mov	r0, sl
 8017498:	4659      	mov	r1, fp
 801749a:	b173      	cbz	r3, 80174ba <_strtod_l+0x92a>
 801749c:	f7ff fb5a 	bl	8016b54 <sulp>
 80174a0:	4602      	mov	r2, r0
 80174a2:	460b      	mov	r3, r1
 80174a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80174a8:	f7e8 fef0 	bl	800028c <__adddf3>
 80174ac:	4682      	mov	sl, r0
 80174ae:	468b      	mov	fp, r1
 80174b0:	e755      	b.n	801735e <_strtod_l+0x7ce>
 80174b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80174b4:	ea13 0f0a 	tst.w	r3, sl
 80174b8:	e7e9      	b.n	801748e <_strtod_l+0x8fe>
 80174ba:	f7ff fb4b 	bl	8016b54 <sulp>
 80174be:	4602      	mov	r2, r0
 80174c0:	460b      	mov	r3, r1
 80174c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80174c6:	f7e8 fedf 	bl	8000288 <__aeabi_dsub>
 80174ca:	2200      	movs	r2, #0
 80174cc:	2300      	movs	r3, #0
 80174ce:	4682      	mov	sl, r0
 80174d0:	468b      	mov	fp, r1
 80174d2:	f7e9 faf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80174d6:	2800      	cmp	r0, #0
 80174d8:	f47f ae11 	bne.w	80170fe <_strtod_l+0x56e>
 80174dc:	e73f      	b.n	801735e <_strtod_l+0x7ce>
 80174de:	4641      	mov	r1, r8
 80174e0:	4620      	mov	r0, r4
 80174e2:	f001 ff0c 	bl	80192fe <__ratio>
 80174e6:	ec57 6b10 	vmov	r6, r7, d0
 80174ea:	2200      	movs	r2, #0
 80174ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80174f0:	ee10 0a10 	vmov	r0, s0
 80174f4:	4639      	mov	r1, r7
 80174f6:	f7e9 fafb 	bl	8000af0 <__aeabi_dcmple>
 80174fa:	2800      	cmp	r0, #0
 80174fc:	d077      	beq.n	80175ee <_strtod_l+0xa5e>
 80174fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017500:	2b00      	cmp	r3, #0
 8017502:	d04a      	beq.n	801759a <_strtod_l+0xa0a>
 8017504:	4b68      	ldr	r3, [pc, #416]	; (80176a8 <_strtod_l+0xb18>)
 8017506:	2200      	movs	r2, #0
 8017508:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801750c:	4f66      	ldr	r7, [pc, #408]	; (80176a8 <_strtod_l+0xb18>)
 801750e:	2600      	movs	r6, #0
 8017510:	4b62      	ldr	r3, [pc, #392]	; (801769c <_strtod_l+0xb0c>)
 8017512:	402b      	ands	r3, r5
 8017514:	930f      	str	r3, [sp, #60]	; 0x3c
 8017516:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017518:	4b64      	ldr	r3, [pc, #400]	; (80176ac <_strtod_l+0xb1c>)
 801751a:	429a      	cmp	r2, r3
 801751c:	f040 80ce 	bne.w	80176bc <_strtod_l+0xb2c>
 8017520:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017524:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017528:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801752c:	ec4b ab10 	vmov	d0, sl, fp
 8017530:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8017534:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017538:	f001 fe1c 	bl	8019174 <__ulp>
 801753c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017540:	ec53 2b10 	vmov	r2, r3, d0
 8017544:	f7e9 f858 	bl	80005f8 <__aeabi_dmul>
 8017548:	4652      	mov	r2, sl
 801754a:	465b      	mov	r3, fp
 801754c:	f7e8 fe9e 	bl	800028c <__adddf3>
 8017550:	460b      	mov	r3, r1
 8017552:	4952      	ldr	r1, [pc, #328]	; (801769c <_strtod_l+0xb0c>)
 8017554:	4a56      	ldr	r2, [pc, #344]	; (80176b0 <_strtod_l+0xb20>)
 8017556:	4019      	ands	r1, r3
 8017558:	4291      	cmp	r1, r2
 801755a:	4682      	mov	sl, r0
 801755c:	d95b      	bls.n	8017616 <_strtod_l+0xa86>
 801755e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017560:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017564:	4293      	cmp	r3, r2
 8017566:	d103      	bne.n	8017570 <_strtod_l+0x9e0>
 8017568:	9b08      	ldr	r3, [sp, #32]
 801756a:	3301      	adds	r3, #1
 801756c:	f43f ad2e 	beq.w	8016fcc <_strtod_l+0x43c>
 8017570:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80176a0 <_strtod_l+0xb10>
 8017574:	f04f 3aff 	mov.w	sl, #4294967295
 8017578:	991c      	ldr	r1, [sp, #112]	; 0x70
 801757a:	4648      	mov	r0, r9
 801757c:	f001 fb62 	bl	8018c44 <_Bfree>
 8017580:	9905      	ldr	r1, [sp, #20]
 8017582:	4648      	mov	r0, r9
 8017584:	f001 fb5e 	bl	8018c44 <_Bfree>
 8017588:	4641      	mov	r1, r8
 801758a:	4648      	mov	r0, r9
 801758c:	f001 fb5a 	bl	8018c44 <_Bfree>
 8017590:	4621      	mov	r1, r4
 8017592:	4648      	mov	r0, r9
 8017594:	f001 fb56 	bl	8018c44 <_Bfree>
 8017598:	e619      	b.n	80171ce <_strtod_l+0x63e>
 801759a:	f1ba 0f00 	cmp.w	sl, #0
 801759e:	d11a      	bne.n	80175d6 <_strtod_l+0xa46>
 80175a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80175a4:	b9eb      	cbnz	r3, 80175e2 <_strtod_l+0xa52>
 80175a6:	2200      	movs	r2, #0
 80175a8:	4b3f      	ldr	r3, [pc, #252]	; (80176a8 <_strtod_l+0xb18>)
 80175aa:	4630      	mov	r0, r6
 80175ac:	4639      	mov	r1, r7
 80175ae:	f7e9 fa95 	bl	8000adc <__aeabi_dcmplt>
 80175b2:	b9c8      	cbnz	r0, 80175e8 <_strtod_l+0xa58>
 80175b4:	4630      	mov	r0, r6
 80175b6:	4639      	mov	r1, r7
 80175b8:	2200      	movs	r2, #0
 80175ba:	4b3e      	ldr	r3, [pc, #248]	; (80176b4 <_strtod_l+0xb24>)
 80175bc:	f7e9 f81c 	bl	80005f8 <__aeabi_dmul>
 80175c0:	4606      	mov	r6, r0
 80175c2:	460f      	mov	r7, r1
 80175c4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80175c8:	9618      	str	r6, [sp, #96]	; 0x60
 80175ca:	9319      	str	r3, [sp, #100]	; 0x64
 80175cc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80175d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80175d4:	e79c      	b.n	8017510 <_strtod_l+0x980>
 80175d6:	f1ba 0f01 	cmp.w	sl, #1
 80175da:	d102      	bne.n	80175e2 <_strtod_l+0xa52>
 80175dc:	2d00      	cmp	r5, #0
 80175de:	f43f ad8e 	beq.w	80170fe <_strtod_l+0x56e>
 80175e2:	2200      	movs	r2, #0
 80175e4:	4b34      	ldr	r3, [pc, #208]	; (80176b8 <_strtod_l+0xb28>)
 80175e6:	e78f      	b.n	8017508 <_strtod_l+0x978>
 80175e8:	2600      	movs	r6, #0
 80175ea:	4f32      	ldr	r7, [pc, #200]	; (80176b4 <_strtod_l+0xb24>)
 80175ec:	e7ea      	b.n	80175c4 <_strtod_l+0xa34>
 80175ee:	4b31      	ldr	r3, [pc, #196]	; (80176b4 <_strtod_l+0xb24>)
 80175f0:	4630      	mov	r0, r6
 80175f2:	4639      	mov	r1, r7
 80175f4:	2200      	movs	r2, #0
 80175f6:	f7e8 ffff 	bl	80005f8 <__aeabi_dmul>
 80175fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80175fc:	4606      	mov	r6, r0
 80175fe:	460f      	mov	r7, r1
 8017600:	b933      	cbnz	r3, 8017610 <_strtod_l+0xa80>
 8017602:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017606:	9010      	str	r0, [sp, #64]	; 0x40
 8017608:	9311      	str	r3, [sp, #68]	; 0x44
 801760a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801760e:	e7df      	b.n	80175d0 <_strtod_l+0xa40>
 8017610:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8017614:	e7f9      	b.n	801760a <_strtod_l+0xa7a>
 8017616:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801761a:	9b04      	ldr	r3, [sp, #16]
 801761c:	2b00      	cmp	r3, #0
 801761e:	d1ab      	bne.n	8017578 <_strtod_l+0x9e8>
 8017620:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017624:	0d1b      	lsrs	r3, r3, #20
 8017626:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017628:	051b      	lsls	r3, r3, #20
 801762a:	429a      	cmp	r2, r3
 801762c:	465d      	mov	r5, fp
 801762e:	d1a3      	bne.n	8017578 <_strtod_l+0x9e8>
 8017630:	4639      	mov	r1, r7
 8017632:	4630      	mov	r0, r6
 8017634:	f7e9 fa90 	bl	8000b58 <__aeabi_d2iz>
 8017638:	f7e8 ff74 	bl	8000524 <__aeabi_i2d>
 801763c:	460b      	mov	r3, r1
 801763e:	4602      	mov	r2, r0
 8017640:	4639      	mov	r1, r7
 8017642:	4630      	mov	r0, r6
 8017644:	f7e8 fe20 	bl	8000288 <__aeabi_dsub>
 8017648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801764a:	4606      	mov	r6, r0
 801764c:	460f      	mov	r7, r1
 801764e:	b933      	cbnz	r3, 801765e <_strtod_l+0xace>
 8017650:	f1ba 0f00 	cmp.w	sl, #0
 8017654:	d103      	bne.n	801765e <_strtod_l+0xace>
 8017656:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801765a:	2d00      	cmp	r5, #0
 801765c:	d06d      	beq.n	801773a <_strtod_l+0xbaa>
 801765e:	a30a      	add	r3, pc, #40	; (adr r3, 8017688 <_strtod_l+0xaf8>)
 8017660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017664:	4630      	mov	r0, r6
 8017666:	4639      	mov	r1, r7
 8017668:	f7e9 fa38 	bl	8000adc <__aeabi_dcmplt>
 801766c:	2800      	cmp	r0, #0
 801766e:	f47f acb8 	bne.w	8016fe2 <_strtod_l+0x452>
 8017672:	a307      	add	r3, pc, #28	; (adr r3, 8017690 <_strtod_l+0xb00>)
 8017674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017678:	4630      	mov	r0, r6
 801767a:	4639      	mov	r1, r7
 801767c:	f7e9 fa4c 	bl	8000b18 <__aeabi_dcmpgt>
 8017680:	2800      	cmp	r0, #0
 8017682:	f43f af79 	beq.w	8017578 <_strtod_l+0x9e8>
 8017686:	e4ac      	b.n	8016fe2 <_strtod_l+0x452>
 8017688:	94a03595 	.word	0x94a03595
 801768c:	3fdfffff 	.word	0x3fdfffff
 8017690:	35afe535 	.word	0x35afe535
 8017694:	3fe00000 	.word	0x3fe00000
 8017698:	000fffff 	.word	0x000fffff
 801769c:	7ff00000 	.word	0x7ff00000
 80176a0:	7fefffff 	.word	0x7fefffff
 80176a4:	39500000 	.word	0x39500000
 80176a8:	3ff00000 	.word	0x3ff00000
 80176ac:	7fe00000 	.word	0x7fe00000
 80176b0:	7c9fffff 	.word	0x7c9fffff
 80176b4:	3fe00000 	.word	0x3fe00000
 80176b8:	bff00000 	.word	0xbff00000
 80176bc:	9b04      	ldr	r3, [sp, #16]
 80176be:	b333      	cbz	r3, 801770e <_strtod_l+0xb7e>
 80176c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80176c2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80176c6:	d822      	bhi.n	801770e <_strtod_l+0xb7e>
 80176c8:	a327      	add	r3, pc, #156	; (adr r3, 8017768 <_strtod_l+0xbd8>)
 80176ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176ce:	4630      	mov	r0, r6
 80176d0:	4639      	mov	r1, r7
 80176d2:	f7e9 fa0d 	bl	8000af0 <__aeabi_dcmple>
 80176d6:	b1a0      	cbz	r0, 8017702 <_strtod_l+0xb72>
 80176d8:	4639      	mov	r1, r7
 80176da:	4630      	mov	r0, r6
 80176dc:	f7e9 fa64 	bl	8000ba8 <__aeabi_d2uiz>
 80176e0:	2800      	cmp	r0, #0
 80176e2:	bf08      	it	eq
 80176e4:	2001      	moveq	r0, #1
 80176e6:	f7e8 ff0d 	bl	8000504 <__aeabi_ui2d>
 80176ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80176ec:	4606      	mov	r6, r0
 80176ee:	460f      	mov	r7, r1
 80176f0:	bb03      	cbnz	r3, 8017734 <_strtod_l+0xba4>
 80176f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80176f6:	9012      	str	r0, [sp, #72]	; 0x48
 80176f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80176fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80176fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017704:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017706:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801770a:	1a9b      	subs	r3, r3, r2
 801770c:	930b      	str	r3, [sp, #44]	; 0x2c
 801770e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8017712:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8017716:	f001 fd2d 	bl	8019174 <__ulp>
 801771a:	4650      	mov	r0, sl
 801771c:	ec53 2b10 	vmov	r2, r3, d0
 8017720:	4659      	mov	r1, fp
 8017722:	f7e8 ff69 	bl	80005f8 <__aeabi_dmul>
 8017726:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801772a:	f7e8 fdaf 	bl	800028c <__adddf3>
 801772e:	4682      	mov	sl, r0
 8017730:	468b      	mov	fp, r1
 8017732:	e772      	b.n	801761a <_strtod_l+0xa8a>
 8017734:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017738:	e7df      	b.n	80176fa <_strtod_l+0xb6a>
 801773a:	a30d      	add	r3, pc, #52	; (adr r3, 8017770 <_strtod_l+0xbe0>)
 801773c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017740:	f7e9 f9cc 	bl	8000adc <__aeabi_dcmplt>
 8017744:	e79c      	b.n	8017680 <_strtod_l+0xaf0>
 8017746:	2300      	movs	r3, #0
 8017748:	930d      	str	r3, [sp, #52]	; 0x34
 801774a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801774c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801774e:	6013      	str	r3, [r2, #0]
 8017750:	f7ff ba61 	b.w	8016c16 <_strtod_l+0x86>
 8017754:	2b65      	cmp	r3, #101	; 0x65
 8017756:	f04f 0200 	mov.w	r2, #0
 801775a:	f43f ab4e 	beq.w	8016dfa <_strtod_l+0x26a>
 801775e:	2101      	movs	r1, #1
 8017760:	4614      	mov	r4, r2
 8017762:	9104      	str	r1, [sp, #16]
 8017764:	f7ff bacb 	b.w	8016cfe <_strtod_l+0x16e>
 8017768:	ffc00000 	.word	0xffc00000
 801776c:	41dfffff 	.word	0x41dfffff
 8017770:	94a03595 	.word	0x94a03595
 8017774:	3fcfffff 	.word	0x3fcfffff

08017778 <_strtod_r>:
 8017778:	4b05      	ldr	r3, [pc, #20]	; (8017790 <_strtod_r+0x18>)
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	b410      	push	{r4}
 801777e:	6a1b      	ldr	r3, [r3, #32]
 8017780:	4c04      	ldr	r4, [pc, #16]	; (8017794 <_strtod_r+0x1c>)
 8017782:	2b00      	cmp	r3, #0
 8017784:	bf08      	it	eq
 8017786:	4623      	moveq	r3, r4
 8017788:	f85d 4b04 	ldr.w	r4, [sp], #4
 801778c:	f7ff ba00 	b.w	8016b90 <_strtod_l>
 8017790:	200009ac 	.word	0x200009ac
 8017794:	20000a10 	.word	0x20000a10

08017798 <_strtol_l.isra.0>:
 8017798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801779c:	4680      	mov	r8, r0
 801779e:	4689      	mov	r9, r1
 80177a0:	4692      	mov	sl, r2
 80177a2:	461e      	mov	r6, r3
 80177a4:	460f      	mov	r7, r1
 80177a6:	463d      	mov	r5, r7
 80177a8:	9808      	ldr	r0, [sp, #32]
 80177aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80177ae:	f001 f9ed 	bl	8018b8c <__locale_ctype_ptr_l>
 80177b2:	4420      	add	r0, r4
 80177b4:	7843      	ldrb	r3, [r0, #1]
 80177b6:	f013 0308 	ands.w	r3, r3, #8
 80177ba:	d132      	bne.n	8017822 <_strtol_l.isra.0+0x8a>
 80177bc:	2c2d      	cmp	r4, #45	; 0x2d
 80177be:	d132      	bne.n	8017826 <_strtol_l.isra.0+0x8e>
 80177c0:	787c      	ldrb	r4, [r7, #1]
 80177c2:	1cbd      	adds	r5, r7, #2
 80177c4:	2201      	movs	r2, #1
 80177c6:	2e00      	cmp	r6, #0
 80177c8:	d05d      	beq.n	8017886 <_strtol_l.isra.0+0xee>
 80177ca:	2e10      	cmp	r6, #16
 80177cc:	d109      	bne.n	80177e2 <_strtol_l.isra.0+0x4a>
 80177ce:	2c30      	cmp	r4, #48	; 0x30
 80177d0:	d107      	bne.n	80177e2 <_strtol_l.isra.0+0x4a>
 80177d2:	782b      	ldrb	r3, [r5, #0]
 80177d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80177d8:	2b58      	cmp	r3, #88	; 0x58
 80177da:	d14f      	bne.n	801787c <_strtol_l.isra.0+0xe4>
 80177dc:	786c      	ldrb	r4, [r5, #1]
 80177de:	2610      	movs	r6, #16
 80177e0:	3502      	adds	r5, #2
 80177e2:	2a00      	cmp	r2, #0
 80177e4:	bf14      	ite	ne
 80177e6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80177ea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80177ee:	2700      	movs	r7, #0
 80177f0:	fbb1 fcf6 	udiv	ip, r1, r6
 80177f4:	4638      	mov	r0, r7
 80177f6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80177fa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80177fe:	2b09      	cmp	r3, #9
 8017800:	d817      	bhi.n	8017832 <_strtol_l.isra.0+0x9a>
 8017802:	461c      	mov	r4, r3
 8017804:	42a6      	cmp	r6, r4
 8017806:	dd23      	ble.n	8017850 <_strtol_l.isra.0+0xb8>
 8017808:	1c7b      	adds	r3, r7, #1
 801780a:	d007      	beq.n	801781c <_strtol_l.isra.0+0x84>
 801780c:	4584      	cmp	ip, r0
 801780e:	d31c      	bcc.n	801784a <_strtol_l.isra.0+0xb2>
 8017810:	d101      	bne.n	8017816 <_strtol_l.isra.0+0x7e>
 8017812:	45a6      	cmp	lr, r4
 8017814:	db19      	blt.n	801784a <_strtol_l.isra.0+0xb2>
 8017816:	fb00 4006 	mla	r0, r0, r6, r4
 801781a:	2701      	movs	r7, #1
 801781c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017820:	e7eb      	b.n	80177fa <_strtol_l.isra.0+0x62>
 8017822:	462f      	mov	r7, r5
 8017824:	e7bf      	b.n	80177a6 <_strtol_l.isra.0+0xe>
 8017826:	2c2b      	cmp	r4, #43	; 0x2b
 8017828:	bf04      	itt	eq
 801782a:	1cbd      	addeq	r5, r7, #2
 801782c:	787c      	ldrbeq	r4, [r7, #1]
 801782e:	461a      	mov	r2, r3
 8017830:	e7c9      	b.n	80177c6 <_strtol_l.isra.0+0x2e>
 8017832:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8017836:	2b19      	cmp	r3, #25
 8017838:	d801      	bhi.n	801783e <_strtol_l.isra.0+0xa6>
 801783a:	3c37      	subs	r4, #55	; 0x37
 801783c:	e7e2      	b.n	8017804 <_strtol_l.isra.0+0x6c>
 801783e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017842:	2b19      	cmp	r3, #25
 8017844:	d804      	bhi.n	8017850 <_strtol_l.isra.0+0xb8>
 8017846:	3c57      	subs	r4, #87	; 0x57
 8017848:	e7dc      	b.n	8017804 <_strtol_l.isra.0+0x6c>
 801784a:	f04f 37ff 	mov.w	r7, #4294967295
 801784e:	e7e5      	b.n	801781c <_strtol_l.isra.0+0x84>
 8017850:	1c7b      	adds	r3, r7, #1
 8017852:	d108      	bne.n	8017866 <_strtol_l.isra.0+0xce>
 8017854:	2322      	movs	r3, #34	; 0x22
 8017856:	f8c8 3000 	str.w	r3, [r8]
 801785a:	4608      	mov	r0, r1
 801785c:	f1ba 0f00 	cmp.w	sl, #0
 8017860:	d107      	bne.n	8017872 <_strtol_l.isra.0+0xda>
 8017862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017866:	b102      	cbz	r2, 801786a <_strtol_l.isra.0+0xd2>
 8017868:	4240      	negs	r0, r0
 801786a:	f1ba 0f00 	cmp.w	sl, #0
 801786e:	d0f8      	beq.n	8017862 <_strtol_l.isra.0+0xca>
 8017870:	b10f      	cbz	r7, 8017876 <_strtol_l.isra.0+0xde>
 8017872:	f105 39ff 	add.w	r9, r5, #4294967295
 8017876:	f8ca 9000 	str.w	r9, [sl]
 801787a:	e7f2      	b.n	8017862 <_strtol_l.isra.0+0xca>
 801787c:	2430      	movs	r4, #48	; 0x30
 801787e:	2e00      	cmp	r6, #0
 8017880:	d1af      	bne.n	80177e2 <_strtol_l.isra.0+0x4a>
 8017882:	2608      	movs	r6, #8
 8017884:	e7ad      	b.n	80177e2 <_strtol_l.isra.0+0x4a>
 8017886:	2c30      	cmp	r4, #48	; 0x30
 8017888:	d0a3      	beq.n	80177d2 <_strtol_l.isra.0+0x3a>
 801788a:	260a      	movs	r6, #10
 801788c:	e7a9      	b.n	80177e2 <_strtol_l.isra.0+0x4a>
	...

08017890 <_strtol_r>:
 8017890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017892:	4c06      	ldr	r4, [pc, #24]	; (80178ac <_strtol_r+0x1c>)
 8017894:	4d06      	ldr	r5, [pc, #24]	; (80178b0 <_strtol_r+0x20>)
 8017896:	6824      	ldr	r4, [r4, #0]
 8017898:	6a24      	ldr	r4, [r4, #32]
 801789a:	2c00      	cmp	r4, #0
 801789c:	bf08      	it	eq
 801789e:	462c      	moveq	r4, r5
 80178a0:	9400      	str	r4, [sp, #0]
 80178a2:	f7ff ff79 	bl	8017798 <_strtol_l.isra.0>
 80178a6:	b003      	add	sp, #12
 80178a8:	bd30      	pop	{r4, r5, pc}
 80178aa:	bf00      	nop
 80178ac:	200009ac 	.word	0x200009ac
 80178b0:	20000a10 	.word	0x20000a10

080178b4 <quorem>:
 80178b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178b8:	6903      	ldr	r3, [r0, #16]
 80178ba:	690c      	ldr	r4, [r1, #16]
 80178bc:	42a3      	cmp	r3, r4
 80178be:	4680      	mov	r8, r0
 80178c0:	f2c0 8082 	blt.w	80179c8 <quorem+0x114>
 80178c4:	3c01      	subs	r4, #1
 80178c6:	f101 0714 	add.w	r7, r1, #20
 80178ca:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80178ce:	f100 0614 	add.w	r6, r0, #20
 80178d2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80178d6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80178da:	eb06 030c 	add.w	r3, r6, ip
 80178de:	3501      	adds	r5, #1
 80178e0:	eb07 090c 	add.w	r9, r7, ip
 80178e4:	9301      	str	r3, [sp, #4]
 80178e6:	fbb0 f5f5 	udiv	r5, r0, r5
 80178ea:	b395      	cbz	r5, 8017952 <quorem+0x9e>
 80178ec:	f04f 0a00 	mov.w	sl, #0
 80178f0:	4638      	mov	r0, r7
 80178f2:	46b6      	mov	lr, r6
 80178f4:	46d3      	mov	fp, sl
 80178f6:	f850 2b04 	ldr.w	r2, [r0], #4
 80178fa:	b293      	uxth	r3, r2
 80178fc:	fb05 a303 	mla	r3, r5, r3, sl
 8017900:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017904:	b29b      	uxth	r3, r3
 8017906:	ebab 0303 	sub.w	r3, fp, r3
 801790a:	0c12      	lsrs	r2, r2, #16
 801790c:	f8de b000 	ldr.w	fp, [lr]
 8017910:	fb05 a202 	mla	r2, r5, r2, sl
 8017914:	fa13 f38b 	uxtah	r3, r3, fp
 8017918:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801791c:	fa1f fb82 	uxth.w	fp, r2
 8017920:	f8de 2000 	ldr.w	r2, [lr]
 8017924:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017928:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801792c:	b29b      	uxth	r3, r3
 801792e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017932:	4581      	cmp	r9, r0
 8017934:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017938:	f84e 3b04 	str.w	r3, [lr], #4
 801793c:	d2db      	bcs.n	80178f6 <quorem+0x42>
 801793e:	f856 300c 	ldr.w	r3, [r6, ip]
 8017942:	b933      	cbnz	r3, 8017952 <quorem+0x9e>
 8017944:	9b01      	ldr	r3, [sp, #4]
 8017946:	3b04      	subs	r3, #4
 8017948:	429e      	cmp	r6, r3
 801794a:	461a      	mov	r2, r3
 801794c:	d330      	bcc.n	80179b0 <quorem+0xfc>
 801794e:	f8c8 4010 	str.w	r4, [r8, #16]
 8017952:	4640      	mov	r0, r8
 8017954:	f001 fb96 	bl	8019084 <__mcmp>
 8017958:	2800      	cmp	r0, #0
 801795a:	db25      	blt.n	80179a8 <quorem+0xf4>
 801795c:	3501      	adds	r5, #1
 801795e:	4630      	mov	r0, r6
 8017960:	f04f 0c00 	mov.w	ip, #0
 8017964:	f857 2b04 	ldr.w	r2, [r7], #4
 8017968:	f8d0 e000 	ldr.w	lr, [r0]
 801796c:	b293      	uxth	r3, r2
 801796e:	ebac 0303 	sub.w	r3, ip, r3
 8017972:	0c12      	lsrs	r2, r2, #16
 8017974:	fa13 f38e 	uxtah	r3, r3, lr
 8017978:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801797c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017980:	b29b      	uxth	r3, r3
 8017982:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017986:	45b9      	cmp	r9, r7
 8017988:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801798c:	f840 3b04 	str.w	r3, [r0], #4
 8017990:	d2e8      	bcs.n	8017964 <quorem+0xb0>
 8017992:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8017996:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801799a:	b92a      	cbnz	r2, 80179a8 <quorem+0xf4>
 801799c:	3b04      	subs	r3, #4
 801799e:	429e      	cmp	r6, r3
 80179a0:	461a      	mov	r2, r3
 80179a2:	d30b      	bcc.n	80179bc <quorem+0x108>
 80179a4:	f8c8 4010 	str.w	r4, [r8, #16]
 80179a8:	4628      	mov	r0, r5
 80179aa:	b003      	add	sp, #12
 80179ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179b0:	6812      	ldr	r2, [r2, #0]
 80179b2:	3b04      	subs	r3, #4
 80179b4:	2a00      	cmp	r2, #0
 80179b6:	d1ca      	bne.n	801794e <quorem+0x9a>
 80179b8:	3c01      	subs	r4, #1
 80179ba:	e7c5      	b.n	8017948 <quorem+0x94>
 80179bc:	6812      	ldr	r2, [r2, #0]
 80179be:	3b04      	subs	r3, #4
 80179c0:	2a00      	cmp	r2, #0
 80179c2:	d1ef      	bne.n	80179a4 <quorem+0xf0>
 80179c4:	3c01      	subs	r4, #1
 80179c6:	e7ea      	b.n	801799e <quorem+0xea>
 80179c8:	2000      	movs	r0, #0
 80179ca:	e7ee      	b.n	80179aa <quorem+0xf6>
 80179cc:	0000      	movs	r0, r0
	...

080179d0 <_dtoa_r>:
 80179d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179d4:	ec57 6b10 	vmov	r6, r7, d0
 80179d8:	b097      	sub	sp, #92	; 0x5c
 80179da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80179dc:	9106      	str	r1, [sp, #24]
 80179de:	4604      	mov	r4, r0
 80179e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80179e2:	9312      	str	r3, [sp, #72]	; 0x48
 80179e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80179e8:	e9cd 6700 	strd	r6, r7, [sp]
 80179ec:	b93d      	cbnz	r5, 80179fe <_dtoa_r+0x2e>
 80179ee:	2010      	movs	r0, #16
 80179f0:	f7fe f924 	bl	8015c3c <malloc>
 80179f4:	6260      	str	r0, [r4, #36]	; 0x24
 80179f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80179fa:	6005      	str	r5, [r0, #0]
 80179fc:	60c5      	str	r5, [r0, #12]
 80179fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017a00:	6819      	ldr	r1, [r3, #0]
 8017a02:	b151      	cbz	r1, 8017a1a <_dtoa_r+0x4a>
 8017a04:	685a      	ldr	r2, [r3, #4]
 8017a06:	604a      	str	r2, [r1, #4]
 8017a08:	2301      	movs	r3, #1
 8017a0a:	4093      	lsls	r3, r2
 8017a0c:	608b      	str	r3, [r1, #8]
 8017a0e:	4620      	mov	r0, r4
 8017a10:	f001 f918 	bl	8018c44 <_Bfree>
 8017a14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017a16:	2200      	movs	r2, #0
 8017a18:	601a      	str	r2, [r3, #0]
 8017a1a:	1e3b      	subs	r3, r7, #0
 8017a1c:	bfbb      	ittet	lt
 8017a1e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017a22:	9301      	strlt	r3, [sp, #4]
 8017a24:	2300      	movge	r3, #0
 8017a26:	2201      	movlt	r2, #1
 8017a28:	bfac      	ite	ge
 8017a2a:	f8c8 3000 	strge.w	r3, [r8]
 8017a2e:	f8c8 2000 	strlt.w	r2, [r8]
 8017a32:	4baf      	ldr	r3, [pc, #700]	; (8017cf0 <_dtoa_r+0x320>)
 8017a34:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017a38:	ea33 0308 	bics.w	r3, r3, r8
 8017a3c:	d114      	bne.n	8017a68 <_dtoa_r+0x98>
 8017a3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017a40:	f242 730f 	movw	r3, #9999	; 0x270f
 8017a44:	6013      	str	r3, [r2, #0]
 8017a46:	9b00      	ldr	r3, [sp, #0]
 8017a48:	b923      	cbnz	r3, 8017a54 <_dtoa_r+0x84>
 8017a4a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8017a4e:	2800      	cmp	r0, #0
 8017a50:	f000 8542 	beq.w	80184d8 <_dtoa_r+0xb08>
 8017a54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017a56:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8017d04 <_dtoa_r+0x334>
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	f000 8544 	beq.w	80184e8 <_dtoa_r+0xb18>
 8017a60:	f10b 0303 	add.w	r3, fp, #3
 8017a64:	f000 bd3e 	b.w	80184e4 <_dtoa_r+0xb14>
 8017a68:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017a6c:	2200      	movs	r2, #0
 8017a6e:	2300      	movs	r3, #0
 8017a70:	4630      	mov	r0, r6
 8017a72:	4639      	mov	r1, r7
 8017a74:	f7e9 f828 	bl	8000ac8 <__aeabi_dcmpeq>
 8017a78:	4681      	mov	r9, r0
 8017a7a:	b168      	cbz	r0, 8017a98 <_dtoa_r+0xc8>
 8017a7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017a7e:	2301      	movs	r3, #1
 8017a80:	6013      	str	r3, [r2, #0]
 8017a82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	f000 8524 	beq.w	80184d2 <_dtoa_r+0xb02>
 8017a8a:	4b9a      	ldr	r3, [pc, #616]	; (8017cf4 <_dtoa_r+0x324>)
 8017a8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017a8e:	f103 3bff 	add.w	fp, r3, #4294967295
 8017a92:	6013      	str	r3, [r2, #0]
 8017a94:	f000 bd28 	b.w	80184e8 <_dtoa_r+0xb18>
 8017a98:	aa14      	add	r2, sp, #80	; 0x50
 8017a9a:	a915      	add	r1, sp, #84	; 0x54
 8017a9c:	ec47 6b10 	vmov	d0, r6, r7
 8017aa0:	4620      	mov	r0, r4
 8017aa2:	f001 fbdd 	bl	8019260 <__d2b>
 8017aa6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017aaa:	9004      	str	r0, [sp, #16]
 8017aac:	2d00      	cmp	r5, #0
 8017aae:	d07c      	beq.n	8017baa <_dtoa_r+0x1da>
 8017ab0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017ab4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017ab8:	46b2      	mov	sl, r6
 8017aba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8017abe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017ac2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8017ac6:	2200      	movs	r2, #0
 8017ac8:	4b8b      	ldr	r3, [pc, #556]	; (8017cf8 <_dtoa_r+0x328>)
 8017aca:	4650      	mov	r0, sl
 8017acc:	4659      	mov	r1, fp
 8017ace:	f7e8 fbdb 	bl	8000288 <__aeabi_dsub>
 8017ad2:	a381      	add	r3, pc, #516	; (adr r3, 8017cd8 <_dtoa_r+0x308>)
 8017ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ad8:	f7e8 fd8e 	bl	80005f8 <__aeabi_dmul>
 8017adc:	a380      	add	r3, pc, #512	; (adr r3, 8017ce0 <_dtoa_r+0x310>)
 8017ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ae2:	f7e8 fbd3 	bl	800028c <__adddf3>
 8017ae6:	4606      	mov	r6, r0
 8017ae8:	4628      	mov	r0, r5
 8017aea:	460f      	mov	r7, r1
 8017aec:	f7e8 fd1a 	bl	8000524 <__aeabi_i2d>
 8017af0:	a37d      	add	r3, pc, #500	; (adr r3, 8017ce8 <_dtoa_r+0x318>)
 8017af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017af6:	f7e8 fd7f 	bl	80005f8 <__aeabi_dmul>
 8017afa:	4602      	mov	r2, r0
 8017afc:	460b      	mov	r3, r1
 8017afe:	4630      	mov	r0, r6
 8017b00:	4639      	mov	r1, r7
 8017b02:	f7e8 fbc3 	bl	800028c <__adddf3>
 8017b06:	4606      	mov	r6, r0
 8017b08:	460f      	mov	r7, r1
 8017b0a:	f7e9 f825 	bl	8000b58 <__aeabi_d2iz>
 8017b0e:	2200      	movs	r2, #0
 8017b10:	4682      	mov	sl, r0
 8017b12:	2300      	movs	r3, #0
 8017b14:	4630      	mov	r0, r6
 8017b16:	4639      	mov	r1, r7
 8017b18:	f7e8 ffe0 	bl	8000adc <__aeabi_dcmplt>
 8017b1c:	b148      	cbz	r0, 8017b32 <_dtoa_r+0x162>
 8017b1e:	4650      	mov	r0, sl
 8017b20:	f7e8 fd00 	bl	8000524 <__aeabi_i2d>
 8017b24:	4632      	mov	r2, r6
 8017b26:	463b      	mov	r3, r7
 8017b28:	f7e8 ffce 	bl	8000ac8 <__aeabi_dcmpeq>
 8017b2c:	b908      	cbnz	r0, 8017b32 <_dtoa_r+0x162>
 8017b2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017b32:	f1ba 0f16 	cmp.w	sl, #22
 8017b36:	d859      	bhi.n	8017bec <_dtoa_r+0x21c>
 8017b38:	4970      	ldr	r1, [pc, #448]	; (8017cfc <_dtoa_r+0x32c>)
 8017b3a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017b3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017b42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017b46:	f7e8 ffe7 	bl	8000b18 <__aeabi_dcmpgt>
 8017b4a:	2800      	cmp	r0, #0
 8017b4c:	d050      	beq.n	8017bf0 <_dtoa_r+0x220>
 8017b4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017b52:	2300      	movs	r3, #0
 8017b54:	930f      	str	r3, [sp, #60]	; 0x3c
 8017b56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017b58:	1b5d      	subs	r5, r3, r5
 8017b5a:	f1b5 0801 	subs.w	r8, r5, #1
 8017b5e:	bf49      	itett	mi
 8017b60:	f1c5 0301 	rsbmi	r3, r5, #1
 8017b64:	2300      	movpl	r3, #0
 8017b66:	9305      	strmi	r3, [sp, #20]
 8017b68:	f04f 0800 	movmi.w	r8, #0
 8017b6c:	bf58      	it	pl
 8017b6e:	9305      	strpl	r3, [sp, #20]
 8017b70:	f1ba 0f00 	cmp.w	sl, #0
 8017b74:	db3e      	blt.n	8017bf4 <_dtoa_r+0x224>
 8017b76:	2300      	movs	r3, #0
 8017b78:	44d0      	add	r8, sl
 8017b7a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017b7e:	9307      	str	r3, [sp, #28]
 8017b80:	9b06      	ldr	r3, [sp, #24]
 8017b82:	2b09      	cmp	r3, #9
 8017b84:	f200 8090 	bhi.w	8017ca8 <_dtoa_r+0x2d8>
 8017b88:	2b05      	cmp	r3, #5
 8017b8a:	bfc4      	itt	gt
 8017b8c:	3b04      	subgt	r3, #4
 8017b8e:	9306      	strgt	r3, [sp, #24]
 8017b90:	9b06      	ldr	r3, [sp, #24]
 8017b92:	f1a3 0302 	sub.w	r3, r3, #2
 8017b96:	bfcc      	ite	gt
 8017b98:	2500      	movgt	r5, #0
 8017b9a:	2501      	movle	r5, #1
 8017b9c:	2b03      	cmp	r3, #3
 8017b9e:	f200 808f 	bhi.w	8017cc0 <_dtoa_r+0x2f0>
 8017ba2:	e8df f003 	tbb	[pc, r3]
 8017ba6:	7f7d      	.short	0x7f7d
 8017ba8:	7131      	.short	0x7131
 8017baa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017bae:	441d      	add	r5, r3
 8017bb0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8017bb4:	2820      	cmp	r0, #32
 8017bb6:	dd13      	ble.n	8017be0 <_dtoa_r+0x210>
 8017bb8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017bbc:	9b00      	ldr	r3, [sp, #0]
 8017bbe:	fa08 f800 	lsl.w	r8, r8, r0
 8017bc2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8017bc6:	fa23 f000 	lsr.w	r0, r3, r0
 8017bca:	ea48 0000 	orr.w	r0, r8, r0
 8017bce:	f7e8 fc99 	bl	8000504 <__aeabi_ui2d>
 8017bd2:	2301      	movs	r3, #1
 8017bd4:	4682      	mov	sl, r0
 8017bd6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017bda:	3d01      	subs	r5, #1
 8017bdc:	9313      	str	r3, [sp, #76]	; 0x4c
 8017bde:	e772      	b.n	8017ac6 <_dtoa_r+0xf6>
 8017be0:	9b00      	ldr	r3, [sp, #0]
 8017be2:	f1c0 0020 	rsb	r0, r0, #32
 8017be6:	fa03 f000 	lsl.w	r0, r3, r0
 8017bea:	e7f0      	b.n	8017bce <_dtoa_r+0x1fe>
 8017bec:	2301      	movs	r3, #1
 8017bee:	e7b1      	b.n	8017b54 <_dtoa_r+0x184>
 8017bf0:	900f      	str	r0, [sp, #60]	; 0x3c
 8017bf2:	e7b0      	b.n	8017b56 <_dtoa_r+0x186>
 8017bf4:	9b05      	ldr	r3, [sp, #20]
 8017bf6:	eba3 030a 	sub.w	r3, r3, sl
 8017bfa:	9305      	str	r3, [sp, #20]
 8017bfc:	f1ca 0300 	rsb	r3, sl, #0
 8017c00:	9307      	str	r3, [sp, #28]
 8017c02:	2300      	movs	r3, #0
 8017c04:	930e      	str	r3, [sp, #56]	; 0x38
 8017c06:	e7bb      	b.n	8017b80 <_dtoa_r+0x1b0>
 8017c08:	2301      	movs	r3, #1
 8017c0a:	930a      	str	r3, [sp, #40]	; 0x28
 8017c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	dd59      	ble.n	8017cc6 <_dtoa_r+0x2f6>
 8017c12:	9302      	str	r3, [sp, #8]
 8017c14:	4699      	mov	r9, r3
 8017c16:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017c18:	2200      	movs	r2, #0
 8017c1a:	6072      	str	r2, [r6, #4]
 8017c1c:	2204      	movs	r2, #4
 8017c1e:	f102 0014 	add.w	r0, r2, #20
 8017c22:	4298      	cmp	r0, r3
 8017c24:	6871      	ldr	r1, [r6, #4]
 8017c26:	d953      	bls.n	8017cd0 <_dtoa_r+0x300>
 8017c28:	4620      	mov	r0, r4
 8017c2a:	f000 ffd7 	bl	8018bdc <_Balloc>
 8017c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017c30:	6030      	str	r0, [r6, #0]
 8017c32:	f1b9 0f0e 	cmp.w	r9, #14
 8017c36:	f8d3 b000 	ldr.w	fp, [r3]
 8017c3a:	f200 80e6 	bhi.w	8017e0a <_dtoa_r+0x43a>
 8017c3e:	2d00      	cmp	r5, #0
 8017c40:	f000 80e3 	beq.w	8017e0a <_dtoa_r+0x43a>
 8017c44:	ed9d 7b00 	vldr	d7, [sp]
 8017c48:	f1ba 0f00 	cmp.w	sl, #0
 8017c4c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017c50:	dd74      	ble.n	8017d3c <_dtoa_r+0x36c>
 8017c52:	4a2a      	ldr	r2, [pc, #168]	; (8017cfc <_dtoa_r+0x32c>)
 8017c54:	f00a 030f 	and.w	r3, sl, #15
 8017c58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017c5c:	ed93 7b00 	vldr	d7, [r3]
 8017c60:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017c64:	06f0      	lsls	r0, r6, #27
 8017c66:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017c6a:	d565      	bpl.n	8017d38 <_dtoa_r+0x368>
 8017c6c:	4b24      	ldr	r3, [pc, #144]	; (8017d00 <_dtoa_r+0x330>)
 8017c6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017c72:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017c76:	f7e8 fde9 	bl	800084c <__aeabi_ddiv>
 8017c7a:	e9cd 0100 	strd	r0, r1, [sp]
 8017c7e:	f006 060f 	and.w	r6, r6, #15
 8017c82:	2503      	movs	r5, #3
 8017c84:	4f1e      	ldr	r7, [pc, #120]	; (8017d00 <_dtoa_r+0x330>)
 8017c86:	e04c      	b.n	8017d22 <_dtoa_r+0x352>
 8017c88:	2301      	movs	r3, #1
 8017c8a:	930a      	str	r3, [sp, #40]	; 0x28
 8017c8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017c8e:	4453      	add	r3, sl
 8017c90:	f103 0901 	add.w	r9, r3, #1
 8017c94:	9302      	str	r3, [sp, #8]
 8017c96:	464b      	mov	r3, r9
 8017c98:	2b01      	cmp	r3, #1
 8017c9a:	bfb8      	it	lt
 8017c9c:	2301      	movlt	r3, #1
 8017c9e:	e7ba      	b.n	8017c16 <_dtoa_r+0x246>
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	e7b2      	b.n	8017c0a <_dtoa_r+0x23a>
 8017ca4:	2300      	movs	r3, #0
 8017ca6:	e7f0      	b.n	8017c8a <_dtoa_r+0x2ba>
 8017ca8:	2501      	movs	r5, #1
 8017caa:	2300      	movs	r3, #0
 8017cac:	9306      	str	r3, [sp, #24]
 8017cae:	950a      	str	r5, [sp, #40]	; 0x28
 8017cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8017cb4:	9302      	str	r3, [sp, #8]
 8017cb6:	4699      	mov	r9, r3
 8017cb8:	2200      	movs	r2, #0
 8017cba:	2312      	movs	r3, #18
 8017cbc:	920b      	str	r2, [sp, #44]	; 0x2c
 8017cbe:	e7aa      	b.n	8017c16 <_dtoa_r+0x246>
 8017cc0:	2301      	movs	r3, #1
 8017cc2:	930a      	str	r3, [sp, #40]	; 0x28
 8017cc4:	e7f4      	b.n	8017cb0 <_dtoa_r+0x2e0>
 8017cc6:	2301      	movs	r3, #1
 8017cc8:	9302      	str	r3, [sp, #8]
 8017cca:	4699      	mov	r9, r3
 8017ccc:	461a      	mov	r2, r3
 8017cce:	e7f5      	b.n	8017cbc <_dtoa_r+0x2ec>
 8017cd0:	3101      	adds	r1, #1
 8017cd2:	6071      	str	r1, [r6, #4]
 8017cd4:	0052      	lsls	r2, r2, #1
 8017cd6:	e7a2      	b.n	8017c1e <_dtoa_r+0x24e>
 8017cd8:	636f4361 	.word	0x636f4361
 8017cdc:	3fd287a7 	.word	0x3fd287a7
 8017ce0:	8b60c8b3 	.word	0x8b60c8b3
 8017ce4:	3fc68a28 	.word	0x3fc68a28
 8017ce8:	509f79fb 	.word	0x509f79fb
 8017cec:	3fd34413 	.word	0x3fd34413
 8017cf0:	7ff00000 	.word	0x7ff00000
 8017cf4:	0801b431 	.word	0x0801b431
 8017cf8:	3ff80000 	.word	0x3ff80000
 8017cfc:	0801b4f0 	.word	0x0801b4f0
 8017d00:	0801b4c8 	.word	0x0801b4c8
 8017d04:	0801b4b9 	.word	0x0801b4b9
 8017d08:	07f1      	lsls	r1, r6, #31
 8017d0a:	d508      	bpl.n	8017d1e <_dtoa_r+0x34e>
 8017d0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017d14:	f7e8 fc70 	bl	80005f8 <__aeabi_dmul>
 8017d18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017d1c:	3501      	adds	r5, #1
 8017d1e:	1076      	asrs	r6, r6, #1
 8017d20:	3708      	adds	r7, #8
 8017d22:	2e00      	cmp	r6, #0
 8017d24:	d1f0      	bne.n	8017d08 <_dtoa_r+0x338>
 8017d26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017d2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d2e:	f7e8 fd8d 	bl	800084c <__aeabi_ddiv>
 8017d32:	e9cd 0100 	strd	r0, r1, [sp]
 8017d36:	e01a      	b.n	8017d6e <_dtoa_r+0x39e>
 8017d38:	2502      	movs	r5, #2
 8017d3a:	e7a3      	b.n	8017c84 <_dtoa_r+0x2b4>
 8017d3c:	f000 80a0 	beq.w	8017e80 <_dtoa_r+0x4b0>
 8017d40:	f1ca 0600 	rsb	r6, sl, #0
 8017d44:	4b9f      	ldr	r3, [pc, #636]	; (8017fc4 <_dtoa_r+0x5f4>)
 8017d46:	4fa0      	ldr	r7, [pc, #640]	; (8017fc8 <_dtoa_r+0x5f8>)
 8017d48:	f006 020f 	and.w	r2, r6, #15
 8017d4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017d58:	f7e8 fc4e 	bl	80005f8 <__aeabi_dmul>
 8017d5c:	e9cd 0100 	strd	r0, r1, [sp]
 8017d60:	1136      	asrs	r6, r6, #4
 8017d62:	2300      	movs	r3, #0
 8017d64:	2502      	movs	r5, #2
 8017d66:	2e00      	cmp	r6, #0
 8017d68:	d17f      	bne.n	8017e6a <_dtoa_r+0x49a>
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d1e1      	bne.n	8017d32 <_dtoa_r+0x362>
 8017d6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	f000 8087 	beq.w	8017e84 <_dtoa_r+0x4b4>
 8017d76:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017d7a:	2200      	movs	r2, #0
 8017d7c:	4b93      	ldr	r3, [pc, #588]	; (8017fcc <_dtoa_r+0x5fc>)
 8017d7e:	4630      	mov	r0, r6
 8017d80:	4639      	mov	r1, r7
 8017d82:	f7e8 feab 	bl	8000adc <__aeabi_dcmplt>
 8017d86:	2800      	cmp	r0, #0
 8017d88:	d07c      	beq.n	8017e84 <_dtoa_r+0x4b4>
 8017d8a:	f1b9 0f00 	cmp.w	r9, #0
 8017d8e:	d079      	beq.n	8017e84 <_dtoa_r+0x4b4>
 8017d90:	9b02      	ldr	r3, [sp, #8]
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	dd35      	ble.n	8017e02 <_dtoa_r+0x432>
 8017d96:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017d9a:	9308      	str	r3, [sp, #32]
 8017d9c:	4639      	mov	r1, r7
 8017d9e:	2200      	movs	r2, #0
 8017da0:	4b8b      	ldr	r3, [pc, #556]	; (8017fd0 <_dtoa_r+0x600>)
 8017da2:	4630      	mov	r0, r6
 8017da4:	f7e8 fc28 	bl	80005f8 <__aeabi_dmul>
 8017da8:	e9cd 0100 	strd	r0, r1, [sp]
 8017dac:	9f02      	ldr	r7, [sp, #8]
 8017dae:	3501      	adds	r5, #1
 8017db0:	4628      	mov	r0, r5
 8017db2:	f7e8 fbb7 	bl	8000524 <__aeabi_i2d>
 8017db6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017dba:	f7e8 fc1d 	bl	80005f8 <__aeabi_dmul>
 8017dbe:	2200      	movs	r2, #0
 8017dc0:	4b84      	ldr	r3, [pc, #528]	; (8017fd4 <_dtoa_r+0x604>)
 8017dc2:	f7e8 fa63 	bl	800028c <__adddf3>
 8017dc6:	4605      	mov	r5, r0
 8017dc8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017dcc:	2f00      	cmp	r7, #0
 8017dce:	d15d      	bne.n	8017e8c <_dtoa_r+0x4bc>
 8017dd0:	2200      	movs	r2, #0
 8017dd2:	4b81      	ldr	r3, [pc, #516]	; (8017fd8 <_dtoa_r+0x608>)
 8017dd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017dd8:	f7e8 fa56 	bl	8000288 <__aeabi_dsub>
 8017ddc:	462a      	mov	r2, r5
 8017dde:	4633      	mov	r3, r6
 8017de0:	e9cd 0100 	strd	r0, r1, [sp]
 8017de4:	f7e8 fe98 	bl	8000b18 <__aeabi_dcmpgt>
 8017de8:	2800      	cmp	r0, #0
 8017dea:	f040 8288 	bne.w	80182fe <_dtoa_r+0x92e>
 8017dee:	462a      	mov	r2, r5
 8017df0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017df4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017df8:	f7e8 fe70 	bl	8000adc <__aeabi_dcmplt>
 8017dfc:	2800      	cmp	r0, #0
 8017dfe:	f040 827c 	bne.w	80182fa <_dtoa_r+0x92a>
 8017e02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017e06:	e9cd 2300 	strd	r2, r3, [sp]
 8017e0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	f2c0 8150 	blt.w	80180b2 <_dtoa_r+0x6e2>
 8017e12:	f1ba 0f0e 	cmp.w	sl, #14
 8017e16:	f300 814c 	bgt.w	80180b2 <_dtoa_r+0x6e2>
 8017e1a:	4b6a      	ldr	r3, [pc, #424]	; (8017fc4 <_dtoa_r+0x5f4>)
 8017e1c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017e20:	ed93 7b00 	vldr	d7, [r3]
 8017e24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017e2c:	f280 80d8 	bge.w	8017fe0 <_dtoa_r+0x610>
 8017e30:	f1b9 0f00 	cmp.w	r9, #0
 8017e34:	f300 80d4 	bgt.w	8017fe0 <_dtoa_r+0x610>
 8017e38:	f040 825e 	bne.w	80182f8 <_dtoa_r+0x928>
 8017e3c:	2200      	movs	r2, #0
 8017e3e:	4b66      	ldr	r3, [pc, #408]	; (8017fd8 <_dtoa_r+0x608>)
 8017e40:	ec51 0b17 	vmov	r0, r1, d7
 8017e44:	f7e8 fbd8 	bl	80005f8 <__aeabi_dmul>
 8017e48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017e4c:	f7e8 fe5a 	bl	8000b04 <__aeabi_dcmpge>
 8017e50:	464f      	mov	r7, r9
 8017e52:	464e      	mov	r6, r9
 8017e54:	2800      	cmp	r0, #0
 8017e56:	f040 8234 	bne.w	80182c2 <_dtoa_r+0x8f2>
 8017e5a:	2331      	movs	r3, #49	; 0x31
 8017e5c:	f10b 0501 	add.w	r5, fp, #1
 8017e60:	f88b 3000 	strb.w	r3, [fp]
 8017e64:	f10a 0a01 	add.w	sl, sl, #1
 8017e68:	e22f      	b.n	80182ca <_dtoa_r+0x8fa>
 8017e6a:	07f2      	lsls	r2, r6, #31
 8017e6c:	d505      	bpl.n	8017e7a <_dtoa_r+0x4aa>
 8017e6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017e72:	f7e8 fbc1 	bl	80005f8 <__aeabi_dmul>
 8017e76:	3501      	adds	r5, #1
 8017e78:	2301      	movs	r3, #1
 8017e7a:	1076      	asrs	r6, r6, #1
 8017e7c:	3708      	adds	r7, #8
 8017e7e:	e772      	b.n	8017d66 <_dtoa_r+0x396>
 8017e80:	2502      	movs	r5, #2
 8017e82:	e774      	b.n	8017d6e <_dtoa_r+0x39e>
 8017e84:	f8cd a020 	str.w	sl, [sp, #32]
 8017e88:	464f      	mov	r7, r9
 8017e8a:	e791      	b.n	8017db0 <_dtoa_r+0x3e0>
 8017e8c:	4b4d      	ldr	r3, [pc, #308]	; (8017fc4 <_dtoa_r+0x5f4>)
 8017e8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017e92:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8017e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d047      	beq.n	8017f2c <_dtoa_r+0x55c>
 8017e9c:	4602      	mov	r2, r0
 8017e9e:	460b      	mov	r3, r1
 8017ea0:	2000      	movs	r0, #0
 8017ea2:	494e      	ldr	r1, [pc, #312]	; (8017fdc <_dtoa_r+0x60c>)
 8017ea4:	f7e8 fcd2 	bl	800084c <__aeabi_ddiv>
 8017ea8:	462a      	mov	r2, r5
 8017eaa:	4633      	mov	r3, r6
 8017eac:	f7e8 f9ec 	bl	8000288 <__aeabi_dsub>
 8017eb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017eb4:	465d      	mov	r5, fp
 8017eb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017eba:	f7e8 fe4d 	bl	8000b58 <__aeabi_d2iz>
 8017ebe:	4606      	mov	r6, r0
 8017ec0:	f7e8 fb30 	bl	8000524 <__aeabi_i2d>
 8017ec4:	4602      	mov	r2, r0
 8017ec6:	460b      	mov	r3, r1
 8017ec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ecc:	f7e8 f9dc 	bl	8000288 <__aeabi_dsub>
 8017ed0:	3630      	adds	r6, #48	; 0x30
 8017ed2:	f805 6b01 	strb.w	r6, [r5], #1
 8017ed6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017eda:	e9cd 0100 	strd	r0, r1, [sp]
 8017ede:	f7e8 fdfd 	bl	8000adc <__aeabi_dcmplt>
 8017ee2:	2800      	cmp	r0, #0
 8017ee4:	d163      	bne.n	8017fae <_dtoa_r+0x5de>
 8017ee6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017eea:	2000      	movs	r0, #0
 8017eec:	4937      	ldr	r1, [pc, #220]	; (8017fcc <_dtoa_r+0x5fc>)
 8017eee:	f7e8 f9cb 	bl	8000288 <__aeabi_dsub>
 8017ef2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017ef6:	f7e8 fdf1 	bl	8000adc <__aeabi_dcmplt>
 8017efa:	2800      	cmp	r0, #0
 8017efc:	f040 80b7 	bne.w	801806e <_dtoa_r+0x69e>
 8017f00:	eba5 030b 	sub.w	r3, r5, fp
 8017f04:	429f      	cmp	r7, r3
 8017f06:	f77f af7c 	ble.w	8017e02 <_dtoa_r+0x432>
 8017f0a:	2200      	movs	r2, #0
 8017f0c:	4b30      	ldr	r3, [pc, #192]	; (8017fd0 <_dtoa_r+0x600>)
 8017f0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017f12:	f7e8 fb71 	bl	80005f8 <__aeabi_dmul>
 8017f16:	2200      	movs	r2, #0
 8017f18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017f1c:	4b2c      	ldr	r3, [pc, #176]	; (8017fd0 <_dtoa_r+0x600>)
 8017f1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017f22:	f7e8 fb69 	bl	80005f8 <__aeabi_dmul>
 8017f26:	e9cd 0100 	strd	r0, r1, [sp]
 8017f2a:	e7c4      	b.n	8017eb6 <_dtoa_r+0x4e6>
 8017f2c:	462a      	mov	r2, r5
 8017f2e:	4633      	mov	r3, r6
 8017f30:	f7e8 fb62 	bl	80005f8 <__aeabi_dmul>
 8017f34:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017f38:	eb0b 0507 	add.w	r5, fp, r7
 8017f3c:	465e      	mov	r6, fp
 8017f3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017f42:	f7e8 fe09 	bl	8000b58 <__aeabi_d2iz>
 8017f46:	4607      	mov	r7, r0
 8017f48:	f7e8 faec 	bl	8000524 <__aeabi_i2d>
 8017f4c:	3730      	adds	r7, #48	; 0x30
 8017f4e:	4602      	mov	r2, r0
 8017f50:	460b      	mov	r3, r1
 8017f52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017f56:	f7e8 f997 	bl	8000288 <__aeabi_dsub>
 8017f5a:	f806 7b01 	strb.w	r7, [r6], #1
 8017f5e:	42ae      	cmp	r6, r5
 8017f60:	e9cd 0100 	strd	r0, r1, [sp]
 8017f64:	f04f 0200 	mov.w	r2, #0
 8017f68:	d126      	bne.n	8017fb8 <_dtoa_r+0x5e8>
 8017f6a:	4b1c      	ldr	r3, [pc, #112]	; (8017fdc <_dtoa_r+0x60c>)
 8017f6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017f70:	f7e8 f98c 	bl	800028c <__adddf3>
 8017f74:	4602      	mov	r2, r0
 8017f76:	460b      	mov	r3, r1
 8017f78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017f7c:	f7e8 fdcc 	bl	8000b18 <__aeabi_dcmpgt>
 8017f80:	2800      	cmp	r0, #0
 8017f82:	d174      	bne.n	801806e <_dtoa_r+0x69e>
 8017f84:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017f88:	2000      	movs	r0, #0
 8017f8a:	4914      	ldr	r1, [pc, #80]	; (8017fdc <_dtoa_r+0x60c>)
 8017f8c:	f7e8 f97c 	bl	8000288 <__aeabi_dsub>
 8017f90:	4602      	mov	r2, r0
 8017f92:	460b      	mov	r3, r1
 8017f94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017f98:	f7e8 fda0 	bl	8000adc <__aeabi_dcmplt>
 8017f9c:	2800      	cmp	r0, #0
 8017f9e:	f43f af30 	beq.w	8017e02 <_dtoa_r+0x432>
 8017fa2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017fa6:	2b30      	cmp	r3, #48	; 0x30
 8017fa8:	f105 32ff 	add.w	r2, r5, #4294967295
 8017fac:	d002      	beq.n	8017fb4 <_dtoa_r+0x5e4>
 8017fae:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017fb2:	e04a      	b.n	801804a <_dtoa_r+0x67a>
 8017fb4:	4615      	mov	r5, r2
 8017fb6:	e7f4      	b.n	8017fa2 <_dtoa_r+0x5d2>
 8017fb8:	4b05      	ldr	r3, [pc, #20]	; (8017fd0 <_dtoa_r+0x600>)
 8017fba:	f7e8 fb1d 	bl	80005f8 <__aeabi_dmul>
 8017fbe:	e9cd 0100 	strd	r0, r1, [sp]
 8017fc2:	e7bc      	b.n	8017f3e <_dtoa_r+0x56e>
 8017fc4:	0801b4f0 	.word	0x0801b4f0
 8017fc8:	0801b4c8 	.word	0x0801b4c8
 8017fcc:	3ff00000 	.word	0x3ff00000
 8017fd0:	40240000 	.word	0x40240000
 8017fd4:	401c0000 	.word	0x401c0000
 8017fd8:	40140000 	.word	0x40140000
 8017fdc:	3fe00000 	.word	0x3fe00000
 8017fe0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017fe4:	465d      	mov	r5, fp
 8017fe6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017fea:	4630      	mov	r0, r6
 8017fec:	4639      	mov	r1, r7
 8017fee:	f7e8 fc2d 	bl	800084c <__aeabi_ddiv>
 8017ff2:	f7e8 fdb1 	bl	8000b58 <__aeabi_d2iz>
 8017ff6:	4680      	mov	r8, r0
 8017ff8:	f7e8 fa94 	bl	8000524 <__aeabi_i2d>
 8017ffc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018000:	f7e8 fafa 	bl	80005f8 <__aeabi_dmul>
 8018004:	4602      	mov	r2, r0
 8018006:	460b      	mov	r3, r1
 8018008:	4630      	mov	r0, r6
 801800a:	4639      	mov	r1, r7
 801800c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8018010:	f7e8 f93a 	bl	8000288 <__aeabi_dsub>
 8018014:	f805 6b01 	strb.w	r6, [r5], #1
 8018018:	eba5 060b 	sub.w	r6, r5, fp
 801801c:	45b1      	cmp	r9, r6
 801801e:	4602      	mov	r2, r0
 8018020:	460b      	mov	r3, r1
 8018022:	d139      	bne.n	8018098 <_dtoa_r+0x6c8>
 8018024:	f7e8 f932 	bl	800028c <__adddf3>
 8018028:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801802c:	4606      	mov	r6, r0
 801802e:	460f      	mov	r7, r1
 8018030:	f7e8 fd72 	bl	8000b18 <__aeabi_dcmpgt>
 8018034:	b9c8      	cbnz	r0, 801806a <_dtoa_r+0x69a>
 8018036:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801803a:	4630      	mov	r0, r6
 801803c:	4639      	mov	r1, r7
 801803e:	f7e8 fd43 	bl	8000ac8 <__aeabi_dcmpeq>
 8018042:	b110      	cbz	r0, 801804a <_dtoa_r+0x67a>
 8018044:	f018 0f01 	tst.w	r8, #1
 8018048:	d10f      	bne.n	801806a <_dtoa_r+0x69a>
 801804a:	9904      	ldr	r1, [sp, #16]
 801804c:	4620      	mov	r0, r4
 801804e:	f000 fdf9 	bl	8018c44 <_Bfree>
 8018052:	2300      	movs	r3, #0
 8018054:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018056:	702b      	strb	r3, [r5, #0]
 8018058:	f10a 0301 	add.w	r3, sl, #1
 801805c:	6013      	str	r3, [r2, #0]
 801805e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018060:	2b00      	cmp	r3, #0
 8018062:	f000 8241 	beq.w	80184e8 <_dtoa_r+0xb18>
 8018066:	601d      	str	r5, [r3, #0]
 8018068:	e23e      	b.n	80184e8 <_dtoa_r+0xb18>
 801806a:	f8cd a020 	str.w	sl, [sp, #32]
 801806e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018072:	2a39      	cmp	r2, #57	; 0x39
 8018074:	f105 33ff 	add.w	r3, r5, #4294967295
 8018078:	d108      	bne.n	801808c <_dtoa_r+0x6bc>
 801807a:	459b      	cmp	fp, r3
 801807c:	d10a      	bne.n	8018094 <_dtoa_r+0x6c4>
 801807e:	9b08      	ldr	r3, [sp, #32]
 8018080:	3301      	adds	r3, #1
 8018082:	9308      	str	r3, [sp, #32]
 8018084:	2330      	movs	r3, #48	; 0x30
 8018086:	f88b 3000 	strb.w	r3, [fp]
 801808a:	465b      	mov	r3, fp
 801808c:	781a      	ldrb	r2, [r3, #0]
 801808e:	3201      	adds	r2, #1
 8018090:	701a      	strb	r2, [r3, #0]
 8018092:	e78c      	b.n	8017fae <_dtoa_r+0x5de>
 8018094:	461d      	mov	r5, r3
 8018096:	e7ea      	b.n	801806e <_dtoa_r+0x69e>
 8018098:	2200      	movs	r2, #0
 801809a:	4b9b      	ldr	r3, [pc, #620]	; (8018308 <_dtoa_r+0x938>)
 801809c:	f7e8 faac 	bl	80005f8 <__aeabi_dmul>
 80180a0:	2200      	movs	r2, #0
 80180a2:	2300      	movs	r3, #0
 80180a4:	4606      	mov	r6, r0
 80180a6:	460f      	mov	r7, r1
 80180a8:	f7e8 fd0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80180ac:	2800      	cmp	r0, #0
 80180ae:	d09a      	beq.n	8017fe6 <_dtoa_r+0x616>
 80180b0:	e7cb      	b.n	801804a <_dtoa_r+0x67a>
 80180b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80180b4:	2a00      	cmp	r2, #0
 80180b6:	f000 808b 	beq.w	80181d0 <_dtoa_r+0x800>
 80180ba:	9a06      	ldr	r2, [sp, #24]
 80180bc:	2a01      	cmp	r2, #1
 80180be:	dc6e      	bgt.n	801819e <_dtoa_r+0x7ce>
 80180c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80180c2:	2a00      	cmp	r2, #0
 80180c4:	d067      	beq.n	8018196 <_dtoa_r+0x7c6>
 80180c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80180ca:	9f07      	ldr	r7, [sp, #28]
 80180cc:	9d05      	ldr	r5, [sp, #20]
 80180ce:	9a05      	ldr	r2, [sp, #20]
 80180d0:	2101      	movs	r1, #1
 80180d2:	441a      	add	r2, r3
 80180d4:	4620      	mov	r0, r4
 80180d6:	9205      	str	r2, [sp, #20]
 80180d8:	4498      	add	r8, r3
 80180da:	f000 fe91 	bl	8018e00 <__i2b>
 80180de:	4606      	mov	r6, r0
 80180e0:	2d00      	cmp	r5, #0
 80180e2:	dd0c      	ble.n	80180fe <_dtoa_r+0x72e>
 80180e4:	f1b8 0f00 	cmp.w	r8, #0
 80180e8:	dd09      	ble.n	80180fe <_dtoa_r+0x72e>
 80180ea:	4545      	cmp	r5, r8
 80180ec:	9a05      	ldr	r2, [sp, #20]
 80180ee:	462b      	mov	r3, r5
 80180f0:	bfa8      	it	ge
 80180f2:	4643      	movge	r3, r8
 80180f4:	1ad2      	subs	r2, r2, r3
 80180f6:	9205      	str	r2, [sp, #20]
 80180f8:	1aed      	subs	r5, r5, r3
 80180fa:	eba8 0803 	sub.w	r8, r8, r3
 80180fe:	9b07      	ldr	r3, [sp, #28]
 8018100:	b1eb      	cbz	r3, 801813e <_dtoa_r+0x76e>
 8018102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018104:	2b00      	cmp	r3, #0
 8018106:	d067      	beq.n	80181d8 <_dtoa_r+0x808>
 8018108:	b18f      	cbz	r7, 801812e <_dtoa_r+0x75e>
 801810a:	4631      	mov	r1, r6
 801810c:	463a      	mov	r2, r7
 801810e:	4620      	mov	r0, r4
 8018110:	f000 ff16 	bl	8018f40 <__pow5mult>
 8018114:	9a04      	ldr	r2, [sp, #16]
 8018116:	4601      	mov	r1, r0
 8018118:	4606      	mov	r6, r0
 801811a:	4620      	mov	r0, r4
 801811c:	f000 fe79 	bl	8018e12 <__multiply>
 8018120:	9904      	ldr	r1, [sp, #16]
 8018122:	9008      	str	r0, [sp, #32]
 8018124:	4620      	mov	r0, r4
 8018126:	f000 fd8d 	bl	8018c44 <_Bfree>
 801812a:	9b08      	ldr	r3, [sp, #32]
 801812c:	9304      	str	r3, [sp, #16]
 801812e:	9b07      	ldr	r3, [sp, #28]
 8018130:	1bda      	subs	r2, r3, r7
 8018132:	d004      	beq.n	801813e <_dtoa_r+0x76e>
 8018134:	9904      	ldr	r1, [sp, #16]
 8018136:	4620      	mov	r0, r4
 8018138:	f000 ff02 	bl	8018f40 <__pow5mult>
 801813c:	9004      	str	r0, [sp, #16]
 801813e:	2101      	movs	r1, #1
 8018140:	4620      	mov	r0, r4
 8018142:	f000 fe5d 	bl	8018e00 <__i2b>
 8018146:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018148:	4607      	mov	r7, r0
 801814a:	2b00      	cmp	r3, #0
 801814c:	f000 81d0 	beq.w	80184f0 <_dtoa_r+0xb20>
 8018150:	461a      	mov	r2, r3
 8018152:	4601      	mov	r1, r0
 8018154:	4620      	mov	r0, r4
 8018156:	f000 fef3 	bl	8018f40 <__pow5mult>
 801815a:	9b06      	ldr	r3, [sp, #24]
 801815c:	2b01      	cmp	r3, #1
 801815e:	4607      	mov	r7, r0
 8018160:	dc40      	bgt.n	80181e4 <_dtoa_r+0x814>
 8018162:	9b00      	ldr	r3, [sp, #0]
 8018164:	2b00      	cmp	r3, #0
 8018166:	d139      	bne.n	80181dc <_dtoa_r+0x80c>
 8018168:	9b01      	ldr	r3, [sp, #4]
 801816a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801816e:	2b00      	cmp	r3, #0
 8018170:	d136      	bne.n	80181e0 <_dtoa_r+0x810>
 8018172:	9b01      	ldr	r3, [sp, #4]
 8018174:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018178:	0d1b      	lsrs	r3, r3, #20
 801817a:	051b      	lsls	r3, r3, #20
 801817c:	b12b      	cbz	r3, 801818a <_dtoa_r+0x7ba>
 801817e:	9b05      	ldr	r3, [sp, #20]
 8018180:	3301      	adds	r3, #1
 8018182:	9305      	str	r3, [sp, #20]
 8018184:	f108 0801 	add.w	r8, r8, #1
 8018188:	2301      	movs	r3, #1
 801818a:	9307      	str	r3, [sp, #28]
 801818c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801818e:	2b00      	cmp	r3, #0
 8018190:	d12a      	bne.n	80181e8 <_dtoa_r+0x818>
 8018192:	2001      	movs	r0, #1
 8018194:	e030      	b.n	80181f8 <_dtoa_r+0x828>
 8018196:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018198:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801819c:	e795      	b.n	80180ca <_dtoa_r+0x6fa>
 801819e:	9b07      	ldr	r3, [sp, #28]
 80181a0:	f109 37ff 	add.w	r7, r9, #4294967295
 80181a4:	42bb      	cmp	r3, r7
 80181a6:	bfbf      	itttt	lt
 80181a8:	9b07      	ldrlt	r3, [sp, #28]
 80181aa:	9707      	strlt	r7, [sp, #28]
 80181ac:	1afa      	sublt	r2, r7, r3
 80181ae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80181b0:	bfbb      	ittet	lt
 80181b2:	189b      	addlt	r3, r3, r2
 80181b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80181b6:	1bdf      	subge	r7, r3, r7
 80181b8:	2700      	movlt	r7, #0
 80181ba:	f1b9 0f00 	cmp.w	r9, #0
 80181be:	bfb5      	itete	lt
 80181c0:	9b05      	ldrlt	r3, [sp, #20]
 80181c2:	9d05      	ldrge	r5, [sp, #20]
 80181c4:	eba3 0509 	sublt.w	r5, r3, r9
 80181c8:	464b      	movge	r3, r9
 80181ca:	bfb8      	it	lt
 80181cc:	2300      	movlt	r3, #0
 80181ce:	e77e      	b.n	80180ce <_dtoa_r+0x6fe>
 80181d0:	9f07      	ldr	r7, [sp, #28]
 80181d2:	9d05      	ldr	r5, [sp, #20]
 80181d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80181d6:	e783      	b.n	80180e0 <_dtoa_r+0x710>
 80181d8:	9a07      	ldr	r2, [sp, #28]
 80181da:	e7ab      	b.n	8018134 <_dtoa_r+0x764>
 80181dc:	2300      	movs	r3, #0
 80181de:	e7d4      	b.n	801818a <_dtoa_r+0x7ba>
 80181e0:	9b00      	ldr	r3, [sp, #0]
 80181e2:	e7d2      	b.n	801818a <_dtoa_r+0x7ba>
 80181e4:	2300      	movs	r3, #0
 80181e6:	9307      	str	r3, [sp, #28]
 80181e8:	693b      	ldr	r3, [r7, #16]
 80181ea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80181ee:	6918      	ldr	r0, [r3, #16]
 80181f0:	f000 fdb8 	bl	8018d64 <__hi0bits>
 80181f4:	f1c0 0020 	rsb	r0, r0, #32
 80181f8:	4440      	add	r0, r8
 80181fa:	f010 001f 	ands.w	r0, r0, #31
 80181fe:	d047      	beq.n	8018290 <_dtoa_r+0x8c0>
 8018200:	f1c0 0320 	rsb	r3, r0, #32
 8018204:	2b04      	cmp	r3, #4
 8018206:	dd3b      	ble.n	8018280 <_dtoa_r+0x8b0>
 8018208:	9b05      	ldr	r3, [sp, #20]
 801820a:	f1c0 001c 	rsb	r0, r0, #28
 801820e:	4403      	add	r3, r0
 8018210:	9305      	str	r3, [sp, #20]
 8018212:	4405      	add	r5, r0
 8018214:	4480      	add	r8, r0
 8018216:	9b05      	ldr	r3, [sp, #20]
 8018218:	2b00      	cmp	r3, #0
 801821a:	dd05      	ble.n	8018228 <_dtoa_r+0x858>
 801821c:	461a      	mov	r2, r3
 801821e:	9904      	ldr	r1, [sp, #16]
 8018220:	4620      	mov	r0, r4
 8018222:	f000 fedb 	bl	8018fdc <__lshift>
 8018226:	9004      	str	r0, [sp, #16]
 8018228:	f1b8 0f00 	cmp.w	r8, #0
 801822c:	dd05      	ble.n	801823a <_dtoa_r+0x86a>
 801822e:	4639      	mov	r1, r7
 8018230:	4642      	mov	r2, r8
 8018232:	4620      	mov	r0, r4
 8018234:	f000 fed2 	bl	8018fdc <__lshift>
 8018238:	4607      	mov	r7, r0
 801823a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801823c:	b353      	cbz	r3, 8018294 <_dtoa_r+0x8c4>
 801823e:	4639      	mov	r1, r7
 8018240:	9804      	ldr	r0, [sp, #16]
 8018242:	f000 ff1f 	bl	8019084 <__mcmp>
 8018246:	2800      	cmp	r0, #0
 8018248:	da24      	bge.n	8018294 <_dtoa_r+0x8c4>
 801824a:	2300      	movs	r3, #0
 801824c:	220a      	movs	r2, #10
 801824e:	9904      	ldr	r1, [sp, #16]
 8018250:	4620      	mov	r0, r4
 8018252:	f000 fd0e 	bl	8018c72 <__multadd>
 8018256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018258:	9004      	str	r0, [sp, #16]
 801825a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801825e:	2b00      	cmp	r3, #0
 8018260:	f000 814d 	beq.w	80184fe <_dtoa_r+0xb2e>
 8018264:	2300      	movs	r3, #0
 8018266:	4631      	mov	r1, r6
 8018268:	220a      	movs	r2, #10
 801826a:	4620      	mov	r0, r4
 801826c:	f000 fd01 	bl	8018c72 <__multadd>
 8018270:	9b02      	ldr	r3, [sp, #8]
 8018272:	2b00      	cmp	r3, #0
 8018274:	4606      	mov	r6, r0
 8018276:	dc4f      	bgt.n	8018318 <_dtoa_r+0x948>
 8018278:	9b06      	ldr	r3, [sp, #24]
 801827a:	2b02      	cmp	r3, #2
 801827c:	dd4c      	ble.n	8018318 <_dtoa_r+0x948>
 801827e:	e011      	b.n	80182a4 <_dtoa_r+0x8d4>
 8018280:	d0c9      	beq.n	8018216 <_dtoa_r+0x846>
 8018282:	9a05      	ldr	r2, [sp, #20]
 8018284:	331c      	adds	r3, #28
 8018286:	441a      	add	r2, r3
 8018288:	9205      	str	r2, [sp, #20]
 801828a:	441d      	add	r5, r3
 801828c:	4498      	add	r8, r3
 801828e:	e7c2      	b.n	8018216 <_dtoa_r+0x846>
 8018290:	4603      	mov	r3, r0
 8018292:	e7f6      	b.n	8018282 <_dtoa_r+0x8b2>
 8018294:	f1b9 0f00 	cmp.w	r9, #0
 8018298:	dc38      	bgt.n	801830c <_dtoa_r+0x93c>
 801829a:	9b06      	ldr	r3, [sp, #24]
 801829c:	2b02      	cmp	r3, #2
 801829e:	dd35      	ble.n	801830c <_dtoa_r+0x93c>
 80182a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80182a4:	9b02      	ldr	r3, [sp, #8]
 80182a6:	b963      	cbnz	r3, 80182c2 <_dtoa_r+0x8f2>
 80182a8:	4639      	mov	r1, r7
 80182aa:	2205      	movs	r2, #5
 80182ac:	4620      	mov	r0, r4
 80182ae:	f000 fce0 	bl	8018c72 <__multadd>
 80182b2:	4601      	mov	r1, r0
 80182b4:	4607      	mov	r7, r0
 80182b6:	9804      	ldr	r0, [sp, #16]
 80182b8:	f000 fee4 	bl	8019084 <__mcmp>
 80182bc:	2800      	cmp	r0, #0
 80182be:	f73f adcc 	bgt.w	8017e5a <_dtoa_r+0x48a>
 80182c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80182c4:	465d      	mov	r5, fp
 80182c6:	ea6f 0a03 	mvn.w	sl, r3
 80182ca:	f04f 0900 	mov.w	r9, #0
 80182ce:	4639      	mov	r1, r7
 80182d0:	4620      	mov	r0, r4
 80182d2:	f000 fcb7 	bl	8018c44 <_Bfree>
 80182d6:	2e00      	cmp	r6, #0
 80182d8:	f43f aeb7 	beq.w	801804a <_dtoa_r+0x67a>
 80182dc:	f1b9 0f00 	cmp.w	r9, #0
 80182e0:	d005      	beq.n	80182ee <_dtoa_r+0x91e>
 80182e2:	45b1      	cmp	r9, r6
 80182e4:	d003      	beq.n	80182ee <_dtoa_r+0x91e>
 80182e6:	4649      	mov	r1, r9
 80182e8:	4620      	mov	r0, r4
 80182ea:	f000 fcab 	bl	8018c44 <_Bfree>
 80182ee:	4631      	mov	r1, r6
 80182f0:	4620      	mov	r0, r4
 80182f2:	f000 fca7 	bl	8018c44 <_Bfree>
 80182f6:	e6a8      	b.n	801804a <_dtoa_r+0x67a>
 80182f8:	2700      	movs	r7, #0
 80182fa:	463e      	mov	r6, r7
 80182fc:	e7e1      	b.n	80182c2 <_dtoa_r+0x8f2>
 80182fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8018302:	463e      	mov	r6, r7
 8018304:	e5a9      	b.n	8017e5a <_dtoa_r+0x48a>
 8018306:	bf00      	nop
 8018308:	40240000 	.word	0x40240000
 801830c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801830e:	f8cd 9008 	str.w	r9, [sp, #8]
 8018312:	2b00      	cmp	r3, #0
 8018314:	f000 80fa 	beq.w	801850c <_dtoa_r+0xb3c>
 8018318:	2d00      	cmp	r5, #0
 801831a:	dd05      	ble.n	8018328 <_dtoa_r+0x958>
 801831c:	4631      	mov	r1, r6
 801831e:	462a      	mov	r2, r5
 8018320:	4620      	mov	r0, r4
 8018322:	f000 fe5b 	bl	8018fdc <__lshift>
 8018326:	4606      	mov	r6, r0
 8018328:	9b07      	ldr	r3, [sp, #28]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d04c      	beq.n	80183c8 <_dtoa_r+0x9f8>
 801832e:	6871      	ldr	r1, [r6, #4]
 8018330:	4620      	mov	r0, r4
 8018332:	f000 fc53 	bl	8018bdc <_Balloc>
 8018336:	6932      	ldr	r2, [r6, #16]
 8018338:	3202      	adds	r2, #2
 801833a:	4605      	mov	r5, r0
 801833c:	0092      	lsls	r2, r2, #2
 801833e:	f106 010c 	add.w	r1, r6, #12
 8018342:	300c      	adds	r0, #12
 8018344:	f7fd fc8a 	bl	8015c5c <memcpy>
 8018348:	2201      	movs	r2, #1
 801834a:	4629      	mov	r1, r5
 801834c:	4620      	mov	r0, r4
 801834e:	f000 fe45 	bl	8018fdc <__lshift>
 8018352:	9b00      	ldr	r3, [sp, #0]
 8018354:	f8cd b014 	str.w	fp, [sp, #20]
 8018358:	f003 0301 	and.w	r3, r3, #1
 801835c:	46b1      	mov	r9, r6
 801835e:	9307      	str	r3, [sp, #28]
 8018360:	4606      	mov	r6, r0
 8018362:	4639      	mov	r1, r7
 8018364:	9804      	ldr	r0, [sp, #16]
 8018366:	f7ff faa5 	bl	80178b4 <quorem>
 801836a:	4649      	mov	r1, r9
 801836c:	4605      	mov	r5, r0
 801836e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018372:	9804      	ldr	r0, [sp, #16]
 8018374:	f000 fe86 	bl	8019084 <__mcmp>
 8018378:	4632      	mov	r2, r6
 801837a:	9000      	str	r0, [sp, #0]
 801837c:	4639      	mov	r1, r7
 801837e:	4620      	mov	r0, r4
 8018380:	f000 fe9a 	bl	80190b8 <__mdiff>
 8018384:	68c3      	ldr	r3, [r0, #12]
 8018386:	4602      	mov	r2, r0
 8018388:	bb03      	cbnz	r3, 80183cc <_dtoa_r+0x9fc>
 801838a:	4601      	mov	r1, r0
 801838c:	9008      	str	r0, [sp, #32]
 801838e:	9804      	ldr	r0, [sp, #16]
 8018390:	f000 fe78 	bl	8019084 <__mcmp>
 8018394:	9a08      	ldr	r2, [sp, #32]
 8018396:	4603      	mov	r3, r0
 8018398:	4611      	mov	r1, r2
 801839a:	4620      	mov	r0, r4
 801839c:	9308      	str	r3, [sp, #32]
 801839e:	f000 fc51 	bl	8018c44 <_Bfree>
 80183a2:	9b08      	ldr	r3, [sp, #32]
 80183a4:	b9a3      	cbnz	r3, 80183d0 <_dtoa_r+0xa00>
 80183a6:	9a06      	ldr	r2, [sp, #24]
 80183a8:	b992      	cbnz	r2, 80183d0 <_dtoa_r+0xa00>
 80183aa:	9a07      	ldr	r2, [sp, #28]
 80183ac:	b982      	cbnz	r2, 80183d0 <_dtoa_r+0xa00>
 80183ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80183b2:	d029      	beq.n	8018408 <_dtoa_r+0xa38>
 80183b4:	9b00      	ldr	r3, [sp, #0]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	dd01      	ble.n	80183be <_dtoa_r+0x9ee>
 80183ba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80183be:	9b05      	ldr	r3, [sp, #20]
 80183c0:	1c5d      	adds	r5, r3, #1
 80183c2:	f883 8000 	strb.w	r8, [r3]
 80183c6:	e782      	b.n	80182ce <_dtoa_r+0x8fe>
 80183c8:	4630      	mov	r0, r6
 80183ca:	e7c2      	b.n	8018352 <_dtoa_r+0x982>
 80183cc:	2301      	movs	r3, #1
 80183ce:	e7e3      	b.n	8018398 <_dtoa_r+0x9c8>
 80183d0:	9a00      	ldr	r2, [sp, #0]
 80183d2:	2a00      	cmp	r2, #0
 80183d4:	db04      	blt.n	80183e0 <_dtoa_r+0xa10>
 80183d6:	d125      	bne.n	8018424 <_dtoa_r+0xa54>
 80183d8:	9a06      	ldr	r2, [sp, #24]
 80183da:	bb1a      	cbnz	r2, 8018424 <_dtoa_r+0xa54>
 80183dc:	9a07      	ldr	r2, [sp, #28]
 80183de:	bb0a      	cbnz	r2, 8018424 <_dtoa_r+0xa54>
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	ddec      	ble.n	80183be <_dtoa_r+0x9ee>
 80183e4:	2201      	movs	r2, #1
 80183e6:	9904      	ldr	r1, [sp, #16]
 80183e8:	4620      	mov	r0, r4
 80183ea:	f000 fdf7 	bl	8018fdc <__lshift>
 80183ee:	4639      	mov	r1, r7
 80183f0:	9004      	str	r0, [sp, #16]
 80183f2:	f000 fe47 	bl	8019084 <__mcmp>
 80183f6:	2800      	cmp	r0, #0
 80183f8:	dc03      	bgt.n	8018402 <_dtoa_r+0xa32>
 80183fa:	d1e0      	bne.n	80183be <_dtoa_r+0x9ee>
 80183fc:	f018 0f01 	tst.w	r8, #1
 8018400:	d0dd      	beq.n	80183be <_dtoa_r+0x9ee>
 8018402:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018406:	d1d8      	bne.n	80183ba <_dtoa_r+0x9ea>
 8018408:	9b05      	ldr	r3, [sp, #20]
 801840a:	9a05      	ldr	r2, [sp, #20]
 801840c:	1c5d      	adds	r5, r3, #1
 801840e:	2339      	movs	r3, #57	; 0x39
 8018410:	7013      	strb	r3, [r2, #0]
 8018412:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018416:	2b39      	cmp	r3, #57	; 0x39
 8018418:	f105 32ff 	add.w	r2, r5, #4294967295
 801841c:	d04f      	beq.n	80184be <_dtoa_r+0xaee>
 801841e:	3301      	adds	r3, #1
 8018420:	7013      	strb	r3, [r2, #0]
 8018422:	e754      	b.n	80182ce <_dtoa_r+0x8fe>
 8018424:	9a05      	ldr	r2, [sp, #20]
 8018426:	2b00      	cmp	r3, #0
 8018428:	f102 0501 	add.w	r5, r2, #1
 801842c:	dd06      	ble.n	801843c <_dtoa_r+0xa6c>
 801842e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018432:	d0e9      	beq.n	8018408 <_dtoa_r+0xa38>
 8018434:	f108 0801 	add.w	r8, r8, #1
 8018438:	9b05      	ldr	r3, [sp, #20]
 801843a:	e7c2      	b.n	80183c2 <_dtoa_r+0x9f2>
 801843c:	9a02      	ldr	r2, [sp, #8]
 801843e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8018442:	eba5 030b 	sub.w	r3, r5, fp
 8018446:	4293      	cmp	r3, r2
 8018448:	d021      	beq.n	801848e <_dtoa_r+0xabe>
 801844a:	2300      	movs	r3, #0
 801844c:	220a      	movs	r2, #10
 801844e:	9904      	ldr	r1, [sp, #16]
 8018450:	4620      	mov	r0, r4
 8018452:	f000 fc0e 	bl	8018c72 <__multadd>
 8018456:	45b1      	cmp	r9, r6
 8018458:	9004      	str	r0, [sp, #16]
 801845a:	f04f 0300 	mov.w	r3, #0
 801845e:	f04f 020a 	mov.w	r2, #10
 8018462:	4649      	mov	r1, r9
 8018464:	4620      	mov	r0, r4
 8018466:	d105      	bne.n	8018474 <_dtoa_r+0xaa4>
 8018468:	f000 fc03 	bl	8018c72 <__multadd>
 801846c:	4681      	mov	r9, r0
 801846e:	4606      	mov	r6, r0
 8018470:	9505      	str	r5, [sp, #20]
 8018472:	e776      	b.n	8018362 <_dtoa_r+0x992>
 8018474:	f000 fbfd 	bl	8018c72 <__multadd>
 8018478:	4631      	mov	r1, r6
 801847a:	4681      	mov	r9, r0
 801847c:	2300      	movs	r3, #0
 801847e:	220a      	movs	r2, #10
 8018480:	4620      	mov	r0, r4
 8018482:	f000 fbf6 	bl	8018c72 <__multadd>
 8018486:	4606      	mov	r6, r0
 8018488:	e7f2      	b.n	8018470 <_dtoa_r+0xaa0>
 801848a:	f04f 0900 	mov.w	r9, #0
 801848e:	2201      	movs	r2, #1
 8018490:	9904      	ldr	r1, [sp, #16]
 8018492:	4620      	mov	r0, r4
 8018494:	f000 fda2 	bl	8018fdc <__lshift>
 8018498:	4639      	mov	r1, r7
 801849a:	9004      	str	r0, [sp, #16]
 801849c:	f000 fdf2 	bl	8019084 <__mcmp>
 80184a0:	2800      	cmp	r0, #0
 80184a2:	dcb6      	bgt.n	8018412 <_dtoa_r+0xa42>
 80184a4:	d102      	bne.n	80184ac <_dtoa_r+0xadc>
 80184a6:	f018 0f01 	tst.w	r8, #1
 80184aa:	d1b2      	bne.n	8018412 <_dtoa_r+0xa42>
 80184ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80184b0:	2b30      	cmp	r3, #48	; 0x30
 80184b2:	f105 32ff 	add.w	r2, r5, #4294967295
 80184b6:	f47f af0a 	bne.w	80182ce <_dtoa_r+0x8fe>
 80184ba:	4615      	mov	r5, r2
 80184bc:	e7f6      	b.n	80184ac <_dtoa_r+0xadc>
 80184be:	4593      	cmp	fp, r2
 80184c0:	d105      	bne.n	80184ce <_dtoa_r+0xafe>
 80184c2:	2331      	movs	r3, #49	; 0x31
 80184c4:	f10a 0a01 	add.w	sl, sl, #1
 80184c8:	f88b 3000 	strb.w	r3, [fp]
 80184cc:	e6ff      	b.n	80182ce <_dtoa_r+0x8fe>
 80184ce:	4615      	mov	r5, r2
 80184d0:	e79f      	b.n	8018412 <_dtoa_r+0xa42>
 80184d2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018538 <_dtoa_r+0xb68>
 80184d6:	e007      	b.n	80184e8 <_dtoa_r+0xb18>
 80184d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80184da:	f8df b060 	ldr.w	fp, [pc, #96]	; 801853c <_dtoa_r+0xb6c>
 80184de:	b11b      	cbz	r3, 80184e8 <_dtoa_r+0xb18>
 80184e0:	f10b 0308 	add.w	r3, fp, #8
 80184e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80184e6:	6013      	str	r3, [r2, #0]
 80184e8:	4658      	mov	r0, fp
 80184ea:	b017      	add	sp, #92	; 0x5c
 80184ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184f0:	9b06      	ldr	r3, [sp, #24]
 80184f2:	2b01      	cmp	r3, #1
 80184f4:	f77f ae35 	ble.w	8018162 <_dtoa_r+0x792>
 80184f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80184fa:	9307      	str	r3, [sp, #28]
 80184fc:	e649      	b.n	8018192 <_dtoa_r+0x7c2>
 80184fe:	9b02      	ldr	r3, [sp, #8]
 8018500:	2b00      	cmp	r3, #0
 8018502:	dc03      	bgt.n	801850c <_dtoa_r+0xb3c>
 8018504:	9b06      	ldr	r3, [sp, #24]
 8018506:	2b02      	cmp	r3, #2
 8018508:	f73f aecc 	bgt.w	80182a4 <_dtoa_r+0x8d4>
 801850c:	465d      	mov	r5, fp
 801850e:	4639      	mov	r1, r7
 8018510:	9804      	ldr	r0, [sp, #16]
 8018512:	f7ff f9cf 	bl	80178b4 <quorem>
 8018516:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801851a:	f805 8b01 	strb.w	r8, [r5], #1
 801851e:	9a02      	ldr	r2, [sp, #8]
 8018520:	eba5 030b 	sub.w	r3, r5, fp
 8018524:	429a      	cmp	r2, r3
 8018526:	ddb0      	ble.n	801848a <_dtoa_r+0xaba>
 8018528:	2300      	movs	r3, #0
 801852a:	220a      	movs	r2, #10
 801852c:	9904      	ldr	r1, [sp, #16]
 801852e:	4620      	mov	r0, r4
 8018530:	f000 fb9f 	bl	8018c72 <__multadd>
 8018534:	9004      	str	r0, [sp, #16]
 8018536:	e7ea      	b.n	801850e <_dtoa_r+0xb3e>
 8018538:	0801b430 	.word	0x0801b430
 801853c:	0801b4b0 	.word	0x0801b4b0

08018540 <rshift>:
 8018540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018542:	6906      	ldr	r6, [r0, #16]
 8018544:	114b      	asrs	r3, r1, #5
 8018546:	429e      	cmp	r6, r3
 8018548:	f100 0414 	add.w	r4, r0, #20
 801854c:	dd30      	ble.n	80185b0 <rshift+0x70>
 801854e:	f011 011f 	ands.w	r1, r1, #31
 8018552:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8018556:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801855a:	d108      	bne.n	801856e <rshift+0x2e>
 801855c:	4621      	mov	r1, r4
 801855e:	42b2      	cmp	r2, r6
 8018560:	460b      	mov	r3, r1
 8018562:	d211      	bcs.n	8018588 <rshift+0x48>
 8018564:	f852 3b04 	ldr.w	r3, [r2], #4
 8018568:	f841 3b04 	str.w	r3, [r1], #4
 801856c:	e7f7      	b.n	801855e <rshift+0x1e>
 801856e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8018572:	f1c1 0c20 	rsb	ip, r1, #32
 8018576:	40cd      	lsrs	r5, r1
 8018578:	3204      	adds	r2, #4
 801857a:	4623      	mov	r3, r4
 801857c:	42b2      	cmp	r2, r6
 801857e:	4617      	mov	r7, r2
 8018580:	d30c      	bcc.n	801859c <rshift+0x5c>
 8018582:	601d      	str	r5, [r3, #0]
 8018584:	b105      	cbz	r5, 8018588 <rshift+0x48>
 8018586:	3304      	adds	r3, #4
 8018588:	1b1a      	subs	r2, r3, r4
 801858a:	42a3      	cmp	r3, r4
 801858c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018590:	bf08      	it	eq
 8018592:	2300      	moveq	r3, #0
 8018594:	6102      	str	r2, [r0, #16]
 8018596:	bf08      	it	eq
 8018598:	6143      	streq	r3, [r0, #20]
 801859a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801859c:	683f      	ldr	r7, [r7, #0]
 801859e:	fa07 f70c 	lsl.w	r7, r7, ip
 80185a2:	433d      	orrs	r5, r7
 80185a4:	f843 5b04 	str.w	r5, [r3], #4
 80185a8:	f852 5b04 	ldr.w	r5, [r2], #4
 80185ac:	40cd      	lsrs	r5, r1
 80185ae:	e7e5      	b.n	801857c <rshift+0x3c>
 80185b0:	4623      	mov	r3, r4
 80185b2:	e7e9      	b.n	8018588 <rshift+0x48>

080185b4 <__hexdig_fun>:
 80185b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80185b8:	2b09      	cmp	r3, #9
 80185ba:	d802      	bhi.n	80185c2 <__hexdig_fun+0xe>
 80185bc:	3820      	subs	r0, #32
 80185be:	b2c0      	uxtb	r0, r0
 80185c0:	4770      	bx	lr
 80185c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80185c6:	2b05      	cmp	r3, #5
 80185c8:	d801      	bhi.n	80185ce <__hexdig_fun+0x1a>
 80185ca:	3847      	subs	r0, #71	; 0x47
 80185cc:	e7f7      	b.n	80185be <__hexdig_fun+0xa>
 80185ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80185d2:	2b05      	cmp	r3, #5
 80185d4:	d801      	bhi.n	80185da <__hexdig_fun+0x26>
 80185d6:	3827      	subs	r0, #39	; 0x27
 80185d8:	e7f1      	b.n	80185be <__hexdig_fun+0xa>
 80185da:	2000      	movs	r0, #0
 80185dc:	4770      	bx	lr

080185de <__gethex>:
 80185de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185e2:	b08b      	sub	sp, #44	; 0x2c
 80185e4:	468a      	mov	sl, r1
 80185e6:	9002      	str	r0, [sp, #8]
 80185e8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80185ea:	9306      	str	r3, [sp, #24]
 80185ec:	4690      	mov	r8, r2
 80185ee:	f000 fad0 	bl	8018b92 <__localeconv_l>
 80185f2:	6803      	ldr	r3, [r0, #0]
 80185f4:	9303      	str	r3, [sp, #12]
 80185f6:	4618      	mov	r0, r3
 80185f8:	f7e7 fdea 	bl	80001d0 <strlen>
 80185fc:	9b03      	ldr	r3, [sp, #12]
 80185fe:	9001      	str	r0, [sp, #4]
 8018600:	4403      	add	r3, r0
 8018602:	f04f 0b00 	mov.w	fp, #0
 8018606:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801860a:	9307      	str	r3, [sp, #28]
 801860c:	f8da 3000 	ldr.w	r3, [sl]
 8018610:	3302      	adds	r3, #2
 8018612:	461f      	mov	r7, r3
 8018614:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018618:	2830      	cmp	r0, #48	; 0x30
 801861a:	d06c      	beq.n	80186f6 <__gethex+0x118>
 801861c:	f7ff ffca 	bl	80185b4 <__hexdig_fun>
 8018620:	4604      	mov	r4, r0
 8018622:	2800      	cmp	r0, #0
 8018624:	d16a      	bne.n	80186fc <__gethex+0x11e>
 8018626:	9a01      	ldr	r2, [sp, #4]
 8018628:	9903      	ldr	r1, [sp, #12]
 801862a:	4638      	mov	r0, r7
 801862c:	f001 f836 	bl	801969c <strncmp>
 8018630:	2800      	cmp	r0, #0
 8018632:	d166      	bne.n	8018702 <__gethex+0x124>
 8018634:	9b01      	ldr	r3, [sp, #4]
 8018636:	5cf8      	ldrb	r0, [r7, r3]
 8018638:	18fe      	adds	r6, r7, r3
 801863a:	f7ff ffbb 	bl	80185b4 <__hexdig_fun>
 801863e:	2800      	cmp	r0, #0
 8018640:	d062      	beq.n	8018708 <__gethex+0x12a>
 8018642:	4633      	mov	r3, r6
 8018644:	7818      	ldrb	r0, [r3, #0]
 8018646:	2830      	cmp	r0, #48	; 0x30
 8018648:	461f      	mov	r7, r3
 801864a:	f103 0301 	add.w	r3, r3, #1
 801864e:	d0f9      	beq.n	8018644 <__gethex+0x66>
 8018650:	f7ff ffb0 	bl	80185b4 <__hexdig_fun>
 8018654:	fab0 f580 	clz	r5, r0
 8018658:	096d      	lsrs	r5, r5, #5
 801865a:	4634      	mov	r4, r6
 801865c:	f04f 0b01 	mov.w	fp, #1
 8018660:	463a      	mov	r2, r7
 8018662:	4616      	mov	r6, r2
 8018664:	3201      	adds	r2, #1
 8018666:	7830      	ldrb	r0, [r6, #0]
 8018668:	f7ff ffa4 	bl	80185b4 <__hexdig_fun>
 801866c:	2800      	cmp	r0, #0
 801866e:	d1f8      	bne.n	8018662 <__gethex+0x84>
 8018670:	9a01      	ldr	r2, [sp, #4]
 8018672:	9903      	ldr	r1, [sp, #12]
 8018674:	4630      	mov	r0, r6
 8018676:	f001 f811 	bl	801969c <strncmp>
 801867a:	b950      	cbnz	r0, 8018692 <__gethex+0xb4>
 801867c:	b954      	cbnz	r4, 8018694 <__gethex+0xb6>
 801867e:	9b01      	ldr	r3, [sp, #4]
 8018680:	18f4      	adds	r4, r6, r3
 8018682:	4622      	mov	r2, r4
 8018684:	4616      	mov	r6, r2
 8018686:	3201      	adds	r2, #1
 8018688:	7830      	ldrb	r0, [r6, #0]
 801868a:	f7ff ff93 	bl	80185b4 <__hexdig_fun>
 801868e:	2800      	cmp	r0, #0
 8018690:	d1f8      	bne.n	8018684 <__gethex+0xa6>
 8018692:	b10c      	cbz	r4, 8018698 <__gethex+0xba>
 8018694:	1ba4      	subs	r4, r4, r6
 8018696:	00a4      	lsls	r4, r4, #2
 8018698:	7833      	ldrb	r3, [r6, #0]
 801869a:	2b50      	cmp	r3, #80	; 0x50
 801869c:	d001      	beq.n	80186a2 <__gethex+0xc4>
 801869e:	2b70      	cmp	r3, #112	; 0x70
 80186a0:	d140      	bne.n	8018724 <__gethex+0x146>
 80186a2:	7873      	ldrb	r3, [r6, #1]
 80186a4:	2b2b      	cmp	r3, #43	; 0x2b
 80186a6:	d031      	beq.n	801870c <__gethex+0x12e>
 80186a8:	2b2d      	cmp	r3, #45	; 0x2d
 80186aa:	d033      	beq.n	8018714 <__gethex+0x136>
 80186ac:	1c71      	adds	r1, r6, #1
 80186ae:	f04f 0900 	mov.w	r9, #0
 80186b2:	7808      	ldrb	r0, [r1, #0]
 80186b4:	f7ff ff7e 	bl	80185b4 <__hexdig_fun>
 80186b8:	1e43      	subs	r3, r0, #1
 80186ba:	b2db      	uxtb	r3, r3
 80186bc:	2b18      	cmp	r3, #24
 80186be:	d831      	bhi.n	8018724 <__gethex+0x146>
 80186c0:	f1a0 0210 	sub.w	r2, r0, #16
 80186c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80186c8:	f7ff ff74 	bl	80185b4 <__hexdig_fun>
 80186cc:	1e43      	subs	r3, r0, #1
 80186ce:	b2db      	uxtb	r3, r3
 80186d0:	2b18      	cmp	r3, #24
 80186d2:	d922      	bls.n	801871a <__gethex+0x13c>
 80186d4:	f1b9 0f00 	cmp.w	r9, #0
 80186d8:	d000      	beq.n	80186dc <__gethex+0xfe>
 80186da:	4252      	negs	r2, r2
 80186dc:	4414      	add	r4, r2
 80186de:	f8ca 1000 	str.w	r1, [sl]
 80186e2:	b30d      	cbz	r5, 8018728 <__gethex+0x14a>
 80186e4:	f1bb 0f00 	cmp.w	fp, #0
 80186e8:	bf0c      	ite	eq
 80186ea:	2706      	moveq	r7, #6
 80186ec:	2700      	movne	r7, #0
 80186ee:	4638      	mov	r0, r7
 80186f0:	b00b      	add	sp, #44	; 0x2c
 80186f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186f6:	f10b 0b01 	add.w	fp, fp, #1
 80186fa:	e78a      	b.n	8018612 <__gethex+0x34>
 80186fc:	2500      	movs	r5, #0
 80186fe:	462c      	mov	r4, r5
 8018700:	e7ae      	b.n	8018660 <__gethex+0x82>
 8018702:	463e      	mov	r6, r7
 8018704:	2501      	movs	r5, #1
 8018706:	e7c7      	b.n	8018698 <__gethex+0xba>
 8018708:	4604      	mov	r4, r0
 801870a:	e7fb      	b.n	8018704 <__gethex+0x126>
 801870c:	f04f 0900 	mov.w	r9, #0
 8018710:	1cb1      	adds	r1, r6, #2
 8018712:	e7ce      	b.n	80186b2 <__gethex+0xd4>
 8018714:	f04f 0901 	mov.w	r9, #1
 8018718:	e7fa      	b.n	8018710 <__gethex+0x132>
 801871a:	230a      	movs	r3, #10
 801871c:	fb03 0202 	mla	r2, r3, r2, r0
 8018720:	3a10      	subs	r2, #16
 8018722:	e7cf      	b.n	80186c4 <__gethex+0xe6>
 8018724:	4631      	mov	r1, r6
 8018726:	e7da      	b.n	80186de <__gethex+0x100>
 8018728:	1bf3      	subs	r3, r6, r7
 801872a:	3b01      	subs	r3, #1
 801872c:	4629      	mov	r1, r5
 801872e:	2b07      	cmp	r3, #7
 8018730:	dc49      	bgt.n	80187c6 <__gethex+0x1e8>
 8018732:	9802      	ldr	r0, [sp, #8]
 8018734:	f000 fa52 	bl	8018bdc <_Balloc>
 8018738:	9b01      	ldr	r3, [sp, #4]
 801873a:	f100 0914 	add.w	r9, r0, #20
 801873e:	f04f 0b00 	mov.w	fp, #0
 8018742:	f1c3 0301 	rsb	r3, r3, #1
 8018746:	4605      	mov	r5, r0
 8018748:	f8cd 9010 	str.w	r9, [sp, #16]
 801874c:	46da      	mov	sl, fp
 801874e:	9308      	str	r3, [sp, #32]
 8018750:	42b7      	cmp	r7, r6
 8018752:	d33b      	bcc.n	80187cc <__gethex+0x1ee>
 8018754:	9804      	ldr	r0, [sp, #16]
 8018756:	f840 ab04 	str.w	sl, [r0], #4
 801875a:	eba0 0009 	sub.w	r0, r0, r9
 801875e:	1080      	asrs	r0, r0, #2
 8018760:	6128      	str	r0, [r5, #16]
 8018762:	0147      	lsls	r7, r0, #5
 8018764:	4650      	mov	r0, sl
 8018766:	f000 fafd 	bl	8018d64 <__hi0bits>
 801876a:	f8d8 6000 	ldr.w	r6, [r8]
 801876e:	1a3f      	subs	r7, r7, r0
 8018770:	42b7      	cmp	r7, r6
 8018772:	dd64      	ble.n	801883e <__gethex+0x260>
 8018774:	1bbf      	subs	r7, r7, r6
 8018776:	4639      	mov	r1, r7
 8018778:	4628      	mov	r0, r5
 801877a:	f000 fe0d 	bl	8019398 <__any_on>
 801877e:	4682      	mov	sl, r0
 8018780:	b178      	cbz	r0, 80187a2 <__gethex+0x1c4>
 8018782:	1e7b      	subs	r3, r7, #1
 8018784:	1159      	asrs	r1, r3, #5
 8018786:	f003 021f 	and.w	r2, r3, #31
 801878a:	f04f 0a01 	mov.w	sl, #1
 801878e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018792:	fa0a f202 	lsl.w	r2, sl, r2
 8018796:	420a      	tst	r2, r1
 8018798:	d003      	beq.n	80187a2 <__gethex+0x1c4>
 801879a:	4553      	cmp	r3, sl
 801879c:	dc46      	bgt.n	801882c <__gethex+0x24e>
 801879e:	f04f 0a02 	mov.w	sl, #2
 80187a2:	4639      	mov	r1, r7
 80187a4:	4628      	mov	r0, r5
 80187a6:	f7ff fecb 	bl	8018540 <rshift>
 80187aa:	443c      	add	r4, r7
 80187ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80187b0:	42a3      	cmp	r3, r4
 80187b2:	da52      	bge.n	801885a <__gethex+0x27c>
 80187b4:	4629      	mov	r1, r5
 80187b6:	9802      	ldr	r0, [sp, #8]
 80187b8:	f000 fa44 	bl	8018c44 <_Bfree>
 80187bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80187be:	2300      	movs	r3, #0
 80187c0:	6013      	str	r3, [r2, #0]
 80187c2:	27a3      	movs	r7, #163	; 0xa3
 80187c4:	e793      	b.n	80186ee <__gethex+0x110>
 80187c6:	3101      	adds	r1, #1
 80187c8:	105b      	asrs	r3, r3, #1
 80187ca:	e7b0      	b.n	801872e <__gethex+0x150>
 80187cc:	1e73      	subs	r3, r6, #1
 80187ce:	9305      	str	r3, [sp, #20]
 80187d0:	9a07      	ldr	r2, [sp, #28]
 80187d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80187d6:	4293      	cmp	r3, r2
 80187d8:	d018      	beq.n	801880c <__gethex+0x22e>
 80187da:	f1bb 0f20 	cmp.w	fp, #32
 80187de:	d107      	bne.n	80187f0 <__gethex+0x212>
 80187e0:	9b04      	ldr	r3, [sp, #16]
 80187e2:	f8c3 a000 	str.w	sl, [r3]
 80187e6:	3304      	adds	r3, #4
 80187e8:	f04f 0a00 	mov.w	sl, #0
 80187ec:	9304      	str	r3, [sp, #16]
 80187ee:	46d3      	mov	fp, sl
 80187f0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80187f4:	f7ff fede 	bl	80185b4 <__hexdig_fun>
 80187f8:	f000 000f 	and.w	r0, r0, #15
 80187fc:	fa00 f00b 	lsl.w	r0, r0, fp
 8018800:	ea4a 0a00 	orr.w	sl, sl, r0
 8018804:	f10b 0b04 	add.w	fp, fp, #4
 8018808:	9b05      	ldr	r3, [sp, #20]
 801880a:	e00d      	b.n	8018828 <__gethex+0x24a>
 801880c:	9b05      	ldr	r3, [sp, #20]
 801880e:	9a08      	ldr	r2, [sp, #32]
 8018810:	4413      	add	r3, r2
 8018812:	42bb      	cmp	r3, r7
 8018814:	d3e1      	bcc.n	80187da <__gethex+0x1fc>
 8018816:	4618      	mov	r0, r3
 8018818:	9a01      	ldr	r2, [sp, #4]
 801881a:	9903      	ldr	r1, [sp, #12]
 801881c:	9309      	str	r3, [sp, #36]	; 0x24
 801881e:	f000 ff3d 	bl	801969c <strncmp>
 8018822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018824:	2800      	cmp	r0, #0
 8018826:	d1d8      	bne.n	80187da <__gethex+0x1fc>
 8018828:	461e      	mov	r6, r3
 801882a:	e791      	b.n	8018750 <__gethex+0x172>
 801882c:	1eb9      	subs	r1, r7, #2
 801882e:	4628      	mov	r0, r5
 8018830:	f000 fdb2 	bl	8019398 <__any_on>
 8018834:	2800      	cmp	r0, #0
 8018836:	d0b2      	beq.n	801879e <__gethex+0x1c0>
 8018838:	f04f 0a03 	mov.w	sl, #3
 801883c:	e7b1      	b.n	80187a2 <__gethex+0x1c4>
 801883e:	da09      	bge.n	8018854 <__gethex+0x276>
 8018840:	1bf7      	subs	r7, r6, r7
 8018842:	4629      	mov	r1, r5
 8018844:	463a      	mov	r2, r7
 8018846:	9802      	ldr	r0, [sp, #8]
 8018848:	f000 fbc8 	bl	8018fdc <__lshift>
 801884c:	1be4      	subs	r4, r4, r7
 801884e:	4605      	mov	r5, r0
 8018850:	f100 0914 	add.w	r9, r0, #20
 8018854:	f04f 0a00 	mov.w	sl, #0
 8018858:	e7a8      	b.n	80187ac <__gethex+0x1ce>
 801885a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801885e:	42a0      	cmp	r0, r4
 8018860:	dd6a      	ble.n	8018938 <__gethex+0x35a>
 8018862:	1b04      	subs	r4, r0, r4
 8018864:	42a6      	cmp	r6, r4
 8018866:	dc2e      	bgt.n	80188c6 <__gethex+0x2e8>
 8018868:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801886c:	2b02      	cmp	r3, #2
 801886e:	d022      	beq.n	80188b6 <__gethex+0x2d8>
 8018870:	2b03      	cmp	r3, #3
 8018872:	d024      	beq.n	80188be <__gethex+0x2e0>
 8018874:	2b01      	cmp	r3, #1
 8018876:	d115      	bne.n	80188a4 <__gethex+0x2c6>
 8018878:	42a6      	cmp	r6, r4
 801887a:	d113      	bne.n	80188a4 <__gethex+0x2c6>
 801887c:	2e01      	cmp	r6, #1
 801887e:	dc0b      	bgt.n	8018898 <__gethex+0x2ba>
 8018880:	9a06      	ldr	r2, [sp, #24]
 8018882:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018886:	6013      	str	r3, [r2, #0]
 8018888:	2301      	movs	r3, #1
 801888a:	612b      	str	r3, [r5, #16]
 801888c:	f8c9 3000 	str.w	r3, [r9]
 8018890:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018892:	2762      	movs	r7, #98	; 0x62
 8018894:	601d      	str	r5, [r3, #0]
 8018896:	e72a      	b.n	80186ee <__gethex+0x110>
 8018898:	1e71      	subs	r1, r6, #1
 801889a:	4628      	mov	r0, r5
 801889c:	f000 fd7c 	bl	8019398 <__any_on>
 80188a0:	2800      	cmp	r0, #0
 80188a2:	d1ed      	bne.n	8018880 <__gethex+0x2a2>
 80188a4:	4629      	mov	r1, r5
 80188a6:	9802      	ldr	r0, [sp, #8]
 80188a8:	f000 f9cc 	bl	8018c44 <_Bfree>
 80188ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80188ae:	2300      	movs	r3, #0
 80188b0:	6013      	str	r3, [r2, #0]
 80188b2:	2750      	movs	r7, #80	; 0x50
 80188b4:	e71b      	b.n	80186ee <__gethex+0x110>
 80188b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d0e1      	beq.n	8018880 <__gethex+0x2a2>
 80188bc:	e7f2      	b.n	80188a4 <__gethex+0x2c6>
 80188be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d1dd      	bne.n	8018880 <__gethex+0x2a2>
 80188c4:	e7ee      	b.n	80188a4 <__gethex+0x2c6>
 80188c6:	1e67      	subs	r7, r4, #1
 80188c8:	f1ba 0f00 	cmp.w	sl, #0
 80188cc:	d131      	bne.n	8018932 <__gethex+0x354>
 80188ce:	b127      	cbz	r7, 80188da <__gethex+0x2fc>
 80188d0:	4639      	mov	r1, r7
 80188d2:	4628      	mov	r0, r5
 80188d4:	f000 fd60 	bl	8019398 <__any_on>
 80188d8:	4682      	mov	sl, r0
 80188da:	117a      	asrs	r2, r7, #5
 80188dc:	2301      	movs	r3, #1
 80188de:	f007 071f 	and.w	r7, r7, #31
 80188e2:	fa03 f707 	lsl.w	r7, r3, r7
 80188e6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80188ea:	4621      	mov	r1, r4
 80188ec:	421f      	tst	r7, r3
 80188ee:	4628      	mov	r0, r5
 80188f0:	bf18      	it	ne
 80188f2:	f04a 0a02 	orrne.w	sl, sl, #2
 80188f6:	1b36      	subs	r6, r6, r4
 80188f8:	f7ff fe22 	bl	8018540 <rshift>
 80188fc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018900:	2702      	movs	r7, #2
 8018902:	f1ba 0f00 	cmp.w	sl, #0
 8018906:	d048      	beq.n	801899a <__gethex+0x3bc>
 8018908:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801890c:	2b02      	cmp	r3, #2
 801890e:	d015      	beq.n	801893c <__gethex+0x35e>
 8018910:	2b03      	cmp	r3, #3
 8018912:	d017      	beq.n	8018944 <__gethex+0x366>
 8018914:	2b01      	cmp	r3, #1
 8018916:	d109      	bne.n	801892c <__gethex+0x34e>
 8018918:	f01a 0f02 	tst.w	sl, #2
 801891c:	d006      	beq.n	801892c <__gethex+0x34e>
 801891e:	f8d9 3000 	ldr.w	r3, [r9]
 8018922:	ea4a 0a03 	orr.w	sl, sl, r3
 8018926:	f01a 0f01 	tst.w	sl, #1
 801892a:	d10e      	bne.n	801894a <__gethex+0x36c>
 801892c:	f047 0710 	orr.w	r7, r7, #16
 8018930:	e033      	b.n	801899a <__gethex+0x3bc>
 8018932:	f04f 0a01 	mov.w	sl, #1
 8018936:	e7d0      	b.n	80188da <__gethex+0x2fc>
 8018938:	2701      	movs	r7, #1
 801893a:	e7e2      	b.n	8018902 <__gethex+0x324>
 801893c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801893e:	f1c3 0301 	rsb	r3, r3, #1
 8018942:	9315      	str	r3, [sp, #84]	; 0x54
 8018944:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018946:	2b00      	cmp	r3, #0
 8018948:	d0f0      	beq.n	801892c <__gethex+0x34e>
 801894a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801894e:	f105 0314 	add.w	r3, r5, #20
 8018952:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8018956:	eb03 010a 	add.w	r1, r3, sl
 801895a:	f04f 0c00 	mov.w	ip, #0
 801895e:	4618      	mov	r0, r3
 8018960:	f853 2b04 	ldr.w	r2, [r3], #4
 8018964:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018968:	d01c      	beq.n	80189a4 <__gethex+0x3c6>
 801896a:	3201      	adds	r2, #1
 801896c:	6002      	str	r2, [r0, #0]
 801896e:	2f02      	cmp	r7, #2
 8018970:	f105 0314 	add.w	r3, r5, #20
 8018974:	d138      	bne.n	80189e8 <__gethex+0x40a>
 8018976:	f8d8 2000 	ldr.w	r2, [r8]
 801897a:	3a01      	subs	r2, #1
 801897c:	42b2      	cmp	r2, r6
 801897e:	d10a      	bne.n	8018996 <__gethex+0x3b8>
 8018980:	1171      	asrs	r1, r6, #5
 8018982:	2201      	movs	r2, #1
 8018984:	f006 061f 	and.w	r6, r6, #31
 8018988:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801898c:	fa02 f606 	lsl.w	r6, r2, r6
 8018990:	421e      	tst	r6, r3
 8018992:	bf18      	it	ne
 8018994:	4617      	movne	r7, r2
 8018996:	f047 0720 	orr.w	r7, r7, #32
 801899a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801899c:	601d      	str	r5, [r3, #0]
 801899e:	9b06      	ldr	r3, [sp, #24]
 80189a0:	601c      	str	r4, [r3, #0]
 80189a2:	e6a4      	b.n	80186ee <__gethex+0x110>
 80189a4:	4299      	cmp	r1, r3
 80189a6:	f843 cc04 	str.w	ip, [r3, #-4]
 80189aa:	d8d8      	bhi.n	801895e <__gethex+0x380>
 80189ac:	68ab      	ldr	r3, [r5, #8]
 80189ae:	4599      	cmp	r9, r3
 80189b0:	db12      	blt.n	80189d8 <__gethex+0x3fa>
 80189b2:	6869      	ldr	r1, [r5, #4]
 80189b4:	9802      	ldr	r0, [sp, #8]
 80189b6:	3101      	adds	r1, #1
 80189b8:	f000 f910 	bl	8018bdc <_Balloc>
 80189bc:	692a      	ldr	r2, [r5, #16]
 80189be:	3202      	adds	r2, #2
 80189c0:	f105 010c 	add.w	r1, r5, #12
 80189c4:	4683      	mov	fp, r0
 80189c6:	0092      	lsls	r2, r2, #2
 80189c8:	300c      	adds	r0, #12
 80189ca:	f7fd f947 	bl	8015c5c <memcpy>
 80189ce:	4629      	mov	r1, r5
 80189d0:	9802      	ldr	r0, [sp, #8]
 80189d2:	f000 f937 	bl	8018c44 <_Bfree>
 80189d6:	465d      	mov	r5, fp
 80189d8:	692b      	ldr	r3, [r5, #16]
 80189da:	1c5a      	adds	r2, r3, #1
 80189dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80189e0:	612a      	str	r2, [r5, #16]
 80189e2:	2201      	movs	r2, #1
 80189e4:	615a      	str	r2, [r3, #20]
 80189e6:	e7c2      	b.n	801896e <__gethex+0x390>
 80189e8:	692a      	ldr	r2, [r5, #16]
 80189ea:	454a      	cmp	r2, r9
 80189ec:	dd0b      	ble.n	8018a06 <__gethex+0x428>
 80189ee:	2101      	movs	r1, #1
 80189f0:	4628      	mov	r0, r5
 80189f2:	f7ff fda5 	bl	8018540 <rshift>
 80189f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80189fa:	3401      	adds	r4, #1
 80189fc:	42a3      	cmp	r3, r4
 80189fe:	f6ff aed9 	blt.w	80187b4 <__gethex+0x1d6>
 8018a02:	2701      	movs	r7, #1
 8018a04:	e7c7      	b.n	8018996 <__gethex+0x3b8>
 8018a06:	f016 061f 	ands.w	r6, r6, #31
 8018a0a:	d0fa      	beq.n	8018a02 <__gethex+0x424>
 8018a0c:	449a      	add	sl, r3
 8018a0e:	f1c6 0620 	rsb	r6, r6, #32
 8018a12:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018a16:	f000 f9a5 	bl	8018d64 <__hi0bits>
 8018a1a:	42b0      	cmp	r0, r6
 8018a1c:	dbe7      	blt.n	80189ee <__gethex+0x410>
 8018a1e:	e7f0      	b.n	8018a02 <__gethex+0x424>

08018a20 <L_shift>:
 8018a20:	f1c2 0208 	rsb	r2, r2, #8
 8018a24:	0092      	lsls	r2, r2, #2
 8018a26:	b570      	push	{r4, r5, r6, lr}
 8018a28:	f1c2 0620 	rsb	r6, r2, #32
 8018a2c:	6843      	ldr	r3, [r0, #4]
 8018a2e:	6804      	ldr	r4, [r0, #0]
 8018a30:	fa03 f506 	lsl.w	r5, r3, r6
 8018a34:	432c      	orrs	r4, r5
 8018a36:	40d3      	lsrs	r3, r2
 8018a38:	6004      	str	r4, [r0, #0]
 8018a3a:	f840 3f04 	str.w	r3, [r0, #4]!
 8018a3e:	4288      	cmp	r0, r1
 8018a40:	d3f4      	bcc.n	8018a2c <L_shift+0xc>
 8018a42:	bd70      	pop	{r4, r5, r6, pc}

08018a44 <__match>:
 8018a44:	b530      	push	{r4, r5, lr}
 8018a46:	6803      	ldr	r3, [r0, #0]
 8018a48:	3301      	adds	r3, #1
 8018a4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018a4e:	b914      	cbnz	r4, 8018a56 <__match+0x12>
 8018a50:	6003      	str	r3, [r0, #0]
 8018a52:	2001      	movs	r0, #1
 8018a54:	bd30      	pop	{r4, r5, pc}
 8018a56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018a5a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018a5e:	2d19      	cmp	r5, #25
 8018a60:	bf98      	it	ls
 8018a62:	3220      	addls	r2, #32
 8018a64:	42a2      	cmp	r2, r4
 8018a66:	d0f0      	beq.n	8018a4a <__match+0x6>
 8018a68:	2000      	movs	r0, #0
 8018a6a:	e7f3      	b.n	8018a54 <__match+0x10>

08018a6c <__hexnan>:
 8018a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a70:	680b      	ldr	r3, [r1, #0]
 8018a72:	6801      	ldr	r1, [r0, #0]
 8018a74:	115f      	asrs	r7, r3, #5
 8018a76:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8018a7a:	f013 031f 	ands.w	r3, r3, #31
 8018a7e:	b087      	sub	sp, #28
 8018a80:	bf18      	it	ne
 8018a82:	3704      	addne	r7, #4
 8018a84:	2500      	movs	r5, #0
 8018a86:	1f3e      	subs	r6, r7, #4
 8018a88:	4682      	mov	sl, r0
 8018a8a:	4690      	mov	r8, r2
 8018a8c:	9301      	str	r3, [sp, #4]
 8018a8e:	f847 5c04 	str.w	r5, [r7, #-4]
 8018a92:	46b1      	mov	r9, r6
 8018a94:	4634      	mov	r4, r6
 8018a96:	9502      	str	r5, [sp, #8]
 8018a98:	46ab      	mov	fp, r5
 8018a9a:	784a      	ldrb	r2, [r1, #1]
 8018a9c:	1c4b      	adds	r3, r1, #1
 8018a9e:	9303      	str	r3, [sp, #12]
 8018aa0:	b342      	cbz	r2, 8018af4 <__hexnan+0x88>
 8018aa2:	4610      	mov	r0, r2
 8018aa4:	9105      	str	r1, [sp, #20]
 8018aa6:	9204      	str	r2, [sp, #16]
 8018aa8:	f7ff fd84 	bl	80185b4 <__hexdig_fun>
 8018aac:	2800      	cmp	r0, #0
 8018aae:	d143      	bne.n	8018b38 <__hexnan+0xcc>
 8018ab0:	9a04      	ldr	r2, [sp, #16]
 8018ab2:	9905      	ldr	r1, [sp, #20]
 8018ab4:	2a20      	cmp	r2, #32
 8018ab6:	d818      	bhi.n	8018aea <__hexnan+0x7e>
 8018ab8:	9b02      	ldr	r3, [sp, #8]
 8018aba:	459b      	cmp	fp, r3
 8018abc:	dd13      	ble.n	8018ae6 <__hexnan+0x7a>
 8018abe:	454c      	cmp	r4, r9
 8018ac0:	d206      	bcs.n	8018ad0 <__hexnan+0x64>
 8018ac2:	2d07      	cmp	r5, #7
 8018ac4:	dc04      	bgt.n	8018ad0 <__hexnan+0x64>
 8018ac6:	462a      	mov	r2, r5
 8018ac8:	4649      	mov	r1, r9
 8018aca:	4620      	mov	r0, r4
 8018acc:	f7ff ffa8 	bl	8018a20 <L_shift>
 8018ad0:	4544      	cmp	r4, r8
 8018ad2:	d944      	bls.n	8018b5e <__hexnan+0xf2>
 8018ad4:	2300      	movs	r3, #0
 8018ad6:	f1a4 0904 	sub.w	r9, r4, #4
 8018ada:	f844 3c04 	str.w	r3, [r4, #-4]
 8018ade:	f8cd b008 	str.w	fp, [sp, #8]
 8018ae2:	464c      	mov	r4, r9
 8018ae4:	461d      	mov	r5, r3
 8018ae6:	9903      	ldr	r1, [sp, #12]
 8018ae8:	e7d7      	b.n	8018a9a <__hexnan+0x2e>
 8018aea:	2a29      	cmp	r2, #41	; 0x29
 8018aec:	d14a      	bne.n	8018b84 <__hexnan+0x118>
 8018aee:	3102      	adds	r1, #2
 8018af0:	f8ca 1000 	str.w	r1, [sl]
 8018af4:	f1bb 0f00 	cmp.w	fp, #0
 8018af8:	d044      	beq.n	8018b84 <__hexnan+0x118>
 8018afa:	454c      	cmp	r4, r9
 8018afc:	d206      	bcs.n	8018b0c <__hexnan+0xa0>
 8018afe:	2d07      	cmp	r5, #7
 8018b00:	dc04      	bgt.n	8018b0c <__hexnan+0xa0>
 8018b02:	462a      	mov	r2, r5
 8018b04:	4649      	mov	r1, r9
 8018b06:	4620      	mov	r0, r4
 8018b08:	f7ff ff8a 	bl	8018a20 <L_shift>
 8018b0c:	4544      	cmp	r4, r8
 8018b0e:	d928      	bls.n	8018b62 <__hexnan+0xf6>
 8018b10:	4643      	mov	r3, r8
 8018b12:	f854 2b04 	ldr.w	r2, [r4], #4
 8018b16:	f843 2b04 	str.w	r2, [r3], #4
 8018b1a:	42a6      	cmp	r6, r4
 8018b1c:	d2f9      	bcs.n	8018b12 <__hexnan+0xa6>
 8018b1e:	2200      	movs	r2, #0
 8018b20:	f843 2b04 	str.w	r2, [r3], #4
 8018b24:	429e      	cmp	r6, r3
 8018b26:	d2fb      	bcs.n	8018b20 <__hexnan+0xb4>
 8018b28:	6833      	ldr	r3, [r6, #0]
 8018b2a:	b91b      	cbnz	r3, 8018b34 <__hexnan+0xc8>
 8018b2c:	4546      	cmp	r6, r8
 8018b2e:	d127      	bne.n	8018b80 <__hexnan+0x114>
 8018b30:	2301      	movs	r3, #1
 8018b32:	6033      	str	r3, [r6, #0]
 8018b34:	2005      	movs	r0, #5
 8018b36:	e026      	b.n	8018b86 <__hexnan+0x11a>
 8018b38:	3501      	adds	r5, #1
 8018b3a:	2d08      	cmp	r5, #8
 8018b3c:	f10b 0b01 	add.w	fp, fp, #1
 8018b40:	dd06      	ble.n	8018b50 <__hexnan+0xe4>
 8018b42:	4544      	cmp	r4, r8
 8018b44:	d9cf      	bls.n	8018ae6 <__hexnan+0x7a>
 8018b46:	2300      	movs	r3, #0
 8018b48:	f844 3c04 	str.w	r3, [r4, #-4]
 8018b4c:	2501      	movs	r5, #1
 8018b4e:	3c04      	subs	r4, #4
 8018b50:	6822      	ldr	r2, [r4, #0]
 8018b52:	f000 000f 	and.w	r0, r0, #15
 8018b56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018b5a:	6020      	str	r0, [r4, #0]
 8018b5c:	e7c3      	b.n	8018ae6 <__hexnan+0x7a>
 8018b5e:	2508      	movs	r5, #8
 8018b60:	e7c1      	b.n	8018ae6 <__hexnan+0x7a>
 8018b62:	9b01      	ldr	r3, [sp, #4]
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d0df      	beq.n	8018b28 <__hexnan+0xbc>
 8018b68:	f04f 32ff 	mov.w	r2, #4294967295
 8018b6c:	f1c3 0320 	rsb	r3, r3, #32
 8018b70:	fa22 f303 	lsr.w	r3, r2, r3
 8018b74:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018b78:	401a      	ands	r2, r3
 8018b7a:	f847 2c04 	str.w	r2, [r7, #-4]
 8018b7e:	e7d3      	b.n	8018b28 <__hexnan+0xbc>
 8018b80:	3e04      	subs	r6, #4
 8018b82:	e7d1      	b.n	8018b28 <__hexnan+0xbc>
 8018b84:	2004      	movs	r0, #4
 8018b86:	b007      	add	sp, #28
 8018b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018b8c <__locale_ctype_ptr_l>:
 8018b8c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018b90:	4770      	bx	lr

08018b92 <__localeconv_l>:
 8018b92:	30f0      	adds	r0, #240	; 0xf0
 8018b94:	4770      	bx	lr
	...

08018b98 <_localeconv_r>:
 8018b98:	4b04      	ldr	r3, [pc, #16]	; (8018bac <_localeconv_r+0x14>)
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	6a18      	ldr	r0, [r3, #32]
 8018b9e:	4b04      	ldr	r3, [pc, #16]	; (8018bb0 <_localeconv_r+0x18>)
 8018ba0:	2800      	cmp	r0, #0
 8018ba2:	bf08      	it	eq
 8018ba4:	4618      	moveq	r0, r3
 8018ba6:	30f0      	adds	r0, #240	; 0xf0
 8018ba8:	4770      	bx	lr
 8018baa:	bf00      	nop
 8018bac:	200009ac 	.word	0x200009ac
 8018bb0:	20000a10 	.word	0x20000a10

08018bb4 <__ascii_mbtowc>:
 8018bb4:	b082      	sub	sp, #8
 8018bb6:	b901      	cbnz	r1, 8018bba <__ascii_mbtowc+0x6>
 8018bb8:	a901      	add	r1, sp, #4
 8018bba:	b142      	cbz	r2, 8018bce <__ascii_mbtowc+0x1a>
 8018bbc:	b14b      	cbz	r3, 8018bd2 <__ascii_mbtowc+0x1e>
 8018bbe:	7813      	ldrb	r3, [r2, #0]
 8018bc0:	600b      	str	r3, [r1, #0]
 8018bc2:	7812      	ldrb	r2, [r2, #0]
 8018bc4:	1c10      	adds	r0, r2, #0
 8018bc6:	bf18      	it	ne
 8018bc8:	2001      	movne	r0, #1
 8018bca:	b002      	add	sp, #8
 8018bcc:	4770      	bx	lr
 8018bce:	4610      	mov	r0, r2
 8018bd0:	e7fb      	b.n	8018bca <__ascii_mbtowc+0x16>
 8018bd2:	f06f 0001 	mvn.w	r0, #1
 8018bd6:	e7f8      	b.n	8018bca <__ascii_mbtowc+0x16>

08018bd8 <__malloc_lock>:
 8018bd8:	4770      	bx	lr

08018bda <__malloc_unlock>:
 8018bda:	4770      	bx	lr

08018bdc <_Balloc>:
 8018bdc:	b570      	push	{r4, r5, r6, lr}
 8018bde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018be0:	4604      	mov	r4, r0
 8018be2:	460e      	mov	r6, r1
 8018be4:	b93d      	cbnz	r5, 8018bf6 <_Balloc+0x1a>
 8018be6:	2010      	movs	r0, #16
 8018be8:	f7fd f828 	bl	8015c3c <malloc>
 8018bec:	6260      	str	r0, [r4, #36]	; 0x24
 8018bee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018bf2:	6005      	str	r5, [r0, #0]
 8018bf4:	60c5      	str	r5, [r0, #12]
 8018bf6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018bf8:	68eb      	ldr	r3, [r5, #12]
 8018bfa:	b183      	cbz	r3, 8018c1e <_Balloc+0x42>
 8018bfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018bfe:	68db      	ldr	r3, [r3, #12]
 8018c00:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018c04:	b9b8      	cbnz	r0, 8018c36 <_Balloc+0x5a>
 8018c06:	2101      	movs	r1, #1
 8018c08:	fa01 f506 	lsl.w	r5, r1, r6
 8018c0c:	1d6a      	adds	r2, r5, #5
 8018c0e:	0092      	lsls	r2, r2, #2
 8018c10:	4620      	mov	r0, r4
 8018c12:	f000 fbe2 	bl	80193da <_calloc_r>
 8018c16:	b160      	cbz	r0, 8018c32 <_Balloc+0x56>
 8018c18:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018c1c:	e00e      	b.n	8018c3c <_Balloc+0x60>
 8018c1e:	2221      	movs	r2, #33	; 0x21
 8018c20:	2104      	movs	r1, #4
 8018c22:	4620      	mov	r0, r4
 8018c24:	f000 fbd9 	bl	80193da <_calloc_r>
 8018c28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018c2a:	60e8      	str	r0, [r5, #12]
 8018c2c:	68db      	ldr	r3, [r3, #12]
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	d1e4      	bne.n	8018bfc <_Balloc+0x20>
 8018c32:	2000      	movs	r0, #0
 8018c34:	bd70      	pop	{r4, r5, r6, pc}
 8018c36:	6802      	ldr	r2, [r0, #0]
 8018c38:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018c3c:	2300      	movs	r3, #0
 8018c3e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018c42:	e7f7      	b.n	8018c34 <_Balloc+0x58>

08018c44 <_Bfree>:
 8018c44:	b570      	push	{r4, r5, r6, lr}
 8018c46:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018c48:	4606      	mov	r6, r0
 8018c4a:	460d      	mov	r5, r1
 8018c4c:	b93c      	cbnz	r4, 8018c5e <_Bfree+0x1a>
 8018c4e:	2010      	movs	r0, #16
 8018c50:	f7fc fff4 	bl	8015c3c <malloc>
 8018c54:	6270      	str	r0, [r6, #36]	; 0x24
 8018c56:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018c5a:	6004      	str	r4, [r0, #0]
 8018c5c:	60c4      	str	r4, [r0, #12]
 8018c5e:	b13d      	cbz	r5, 8018c70 <_Bfree+0x2c>
 8018c60:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018c62:	686a      	ldr	r2, [r5, #4]
 8018c64:	68db      	ldr	r3, [r3, #12]
 8018c66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018c6a:	6029      	str	r1, [r5, #0]
 8018c6c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018c70:	bd70      	pop	{r4, r5, r6, pc}

08018c72 <__multadd>:
 8018c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c76:	690d      	ldr	r5, [r1, #16]
 8018c78:	461f      	mov	r7, r3
 8018c7a:	4606      	mov	r6, r0
 8018c7c:	460c      	mov	r4, r1
 8018c7e:	f101 0c14 	add.w	ip, r1, #20
 8018c82:	2300      	movs	r3, #0
 8018c84:	f8dc 0000 	ldr.w	r0, [ip]
 8018c88:	b281      	uxth	r1, r0
 8018c8a:	fb02 7101 	mla	r1, r2, r1, r7
 8018c8e:	0c0f      	lsrs	r7, r1, #16
 8018c90:	0c00      	lsrs	r0, r0, #16
 8018c92:	fb02 7000 	mla	r0, r2, r0, r7
 8018c96:	b289      	uxth	r1, r1
 8018c98:	3301      	adds	r3, #1
 8018c9a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018c9e:	429d      	cmp	r5, r3
 8018ca0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018ca4:	f84c 1b04 	str.w	r1, [ip], #4
 8018ca8:	dcec      	bgt.n	8018c84 <__multadd+0x12>
 8018caa:	b1d7      	cbz	r7, 8018ce2 <__multadd+0x70>
 8018cac:	68a3      	ldr	r3, [r4, #8]
 8018cae:	42ab      	cmp	r3, r5
 8018cb0:	dc12      	bgt.n	8018cd8 <__multadd+0x66>
 8018cb2:	6861      	ldr	r1, [r4, #4]
 8018cb4:	4630      	mov	r0, r6
 8018cb6:	3101      	adds	r1, #1
 8018cb8:	f7ff ff90 	bl	8018bdc <_Balloc>
 8018cbc:	6922      	ldr	r2, [r4, #16]
 8018cbe:	3202      	adds	r2, #2
 8018cc0:	f104 010c 	add.w	r1, r4, #12
 8018cc4:	4680      	mov	r8, r0
 8018cc6:	0092      	lsls	r2, r2, #2
 8018cc8:	300c      	adds	r0, #12
 8018cca:	f7fc ffc7 	bl	8015c5c <memcpy>
 8018cce:	4621      	mov	r1, r4
 8018cd0:	4630      	mov	r0, r6
 8018cd2:	f7ff ffb7 	bl	8018c44 <_Bfree>
 8018cd6:	4644      	mov	r4, r8
 8018cd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018cdc:	3501      	adds	r5, #1
 8018cde:	615f      	str	r7, [r3, #20]
 8018ce0:	6125      	str	r5, [r4, #16]
 8018ce2:	4620      	mov	r0, r4
 8018ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018ce8 <__s2b>:
 8018ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018cec:	460c      	mov	r4, r1
 8018cee:	4615      	mov	r5, r2
 8018cf0:	461f      	mov	r7, r3
 8018cf2:	2209      	movs	r2, #9
 8018cf4:	3308      	adds	r3, #8
 8018cf6:	4606      	mov	r6, r0
 8018cf8:	fb93 f3f2 	sdiv	r3, r3, r2
 8018cfc:	2100      	movs	r1, #0
 8018cfe:	2201      	movs	r2, #1
 8018d00:	429a      	cmp	r2, r3
 8018d02:	db20      	blt.n	8018d46 <__s2b+0x5e>
 8018d04:	4630      	mov	r0, r6
 8018d06:	f7ff ff69 	bl	8018bdc <_Balloc>
 8018d0a:	9b08      	ldr	r3, [sp, #32]
 8018d0c:	6143      	str	r3, [r0, #20]
 8018d0e:	2d09      	cmp	r5, #9
 8018d10:	f04f 0301 	mov.w	r3, #1
 8018d14:	6103      	str	r3, [r0, #16]
 8018d16:	dd19      	ble.n	8018d4c <__s2b+0x64>
 8018d18:	f104 0809 	add.w	r8, r4, #9
 8018d1c:	46c1      	mov	r9, r8
 8018d1e:	442c      	add	r4, r5
 8018d20:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018d24:	4601      	mov	r1, r0
 8018d26:	3b30      	subs	r3, #48	; 0x30
 8018d28:	220a      	movs	r2, #10
 8018d2a:	4630      	mov	r0, r6
 8018d2c:	f7ff ffa1 	bl	8018c72 <__multadd>
 8018d30:	45a1      	cmp	r9, r4
 8018d32:	d1f5      	bne.n	8018d20 <__s2b+0x38>
 8018d34:	eb08 0405 	add.w	r4, r8, r5
 8018d38:	3c08      	subs	r4, #8
 8018d3a:	1b2d      	subs	r5, r5, r4
 8018d3c:	1963      	adds	r3, r4, r5
 8018d3e:	42bb      	cmp	r3, r7
 8018d40:	db07      	blt.n	8018d52 <__s2b+0x6a>
 8018d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018d46:	0052      	lsls	r2, r2, #1
 8018d48:	3101      	adds	r1, #1
 8018d4a:	e7d9      	b.n	8018d00 <__s2b+0x18>
 8018d4c:	340a      	adds	r4, #10
 8018d4e:	2509      	movs	r5, #9
 8018d50:	e7f3      	b.n	8018d3a <__s2b+0x52>
 8018d52:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018d56:	4601      	mov	r1, r0
 8018d58:	3b30      	subs	r3, #48	; 0x30
 8018d5a:	220a      	movs	r2, #10
 8018d5c:	4630      	mov	r0, r6
 8018d5e:	f7ff ff88 	bl	8018c72 <__multadd>
 8018d62:	e7eb      	b.n	8018d3c <__s2b+0x54>

08018d64 <__hi0bits>:
 8018d64:	0c02      	lsrs	r2, r0, #16
 8018d66:	0412      	lsls	r2, r2, #16
 8018d68:	4603      	mov	r3, r0
 8018d6a:	b9b2      	cbnz	r2, 8018d9a <__hi0bits+0x36>
 8018d6c:	0403      	lsls	r3, r0, #16
 8018d6e:	2010      	movs	r0, #16
 8018d70:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018d74:	bf04      	itt	eq
 8018d76:	021b      	lsleq	r3, r3, #8
 8018d78:	3008      	addeq	r0, #8
 8018d7a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018d7e:	bf04      	itt	eq
 8018d80:	011b      	lsleq	r3, r3, #4
 8018d82:	3004      	addeq	r0, #4
 8018d84:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018d88:	bf04      	itt	eq
 8018d8a:	009b      	lsleq	r3, r3, #2
 8018d8c:	3002      	addeq	r0, #2
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	db06      	blt.n	8018da0 <__hi0bits+0x3c>
 8018d92:	005b      	lsls	r3, r3, #1
 8018d94:	d503      	bpl.n	8018d9e <__hi0bits+0x3a>
 8018d96:	3001      	adds	r0, #1
 8018d98:	4770      	bx	lr
 8018d9a:	2000      	movs	r0, #0
 8018d9c:	e7e8      	b.n	8018d70 <__hi0bits+0xc>
 8018d9e:	2020      	movs	r0, #32
 8018da0:	4770      	bx	lr

08018da2 <__lo0bits>:
 8018da2:	6803      	ldr	r3, [r0, #0]
 8018da4:	f013 0207 	ands.w	r2, r3, #7
 8018da8:	4601      	mov	r1, r0
 8018daa:	d00b      	beq.n	8018dc4 <__lo0bits+0x22>
 8018dac:	07da      	lsls	r2, r3, #31
 8018dae:	d423      	bmi.n	8018df8 <__lo0bits+0x56>
 8018db0:	0798      	lsls	r0, r3, #30
 8018db2:	bf49      	itett	mi
 8018db4:	085b      	lsrmi	r3, r3, #1
 8018db6:	089b      	lsrpl	r3, r3, #2
 8018db8:	2001      	movmi	r0, #1
 8018dba:	600b      	strmi	r3, [r1, #0]
 8018dbc:	bf5c      	itt	pl
 8018dbe:	600b      	strpl	r3, [r1, #0]
 8018dc0:	2002      	movpl	r0, #2
 8018dc2:	4770      	bx	lr
 8018dc4:	b298      	uxth	r0, r3
 8018dc6:	b9a8      	cbnz	r0, 8018df4 <__lo0bits+0x52>
 8018dc8:	0c1b      	lsrs	r3, r3, #16
 8018dca:	2010      	movs	r0, #16
 8018dcc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018dd0:	bf04      	itt	eq
 8018dd2:	0a1b      	lsreq	r3, r3, #8
 8018dd4:	3008      	addeq	r0, #8
 8018dd6:	071a      	lsls	r2, r3, #28
 8018dd8:	bf04      	itt	eq
 8018dda:	091b      	lsreq	r3, r3, #4
 8018ddc:	3004      	addeq	r0, #4
 8018dde:	079a      	lsls	r2, r3, #30
 8018de0:	bf04      	itt	eq
 8018de2:	089b      	lsreq	r3, r3, #2
 8018de4:	3002      	addeq	r0, #2
 8018de6:	07da      	lsls	r2, r3, #31
 8018de8:	d402      	bmi.n	8018df0 <__lo0bits+0x4e>
 8018dea:	085b      	lsrs	r3, r3, #1
 8018dec:	d006      	beq.n	8018dfc <__lo0bits+0x5a>
 8018dee:	3001      	adds	r0, #1
 8018df0:	600b      	str	r3, [r1, #0]
 8018df2:	4770      	bx	lr
 8018df4:	4610      	mov	r0, r2
 8018df6:	e7e9      	b.n	8018dcc <__lo0bits+0x2a>
 8018df8:	2000      	movs	r0, #0
 8018dfa:	4770      	bx	lr
 8018dfc:	2020      	movs	r0, #32
 8018dfe:	4770      	bx	lr

08018e00 <__i2b>:
 8018e00:	b510      	push	{r4, lr}
 8018e02:	460c      	mov	r4, r1
 8018e04:	2101      	movs	r1, #1
 8018e06:	f7ff fee9 	bl	8018bdc <_Balloc>
 8018e0a:	2201      	movs	r2, #1
 8018e0c:	6144      	str	r4, [r0, #20]
 8018e0e:	6102      	str	r2, [r0, #16]
 8018e10:	bd10      	pop	{r4, pc}

08018e12 <__multiply>:
 8018e12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e16:	4614      	mov	r4, r2
 8018e18:	690a      	ldr	r2, [r1, #16]
 8018e1a:	6923      	ldr	r3, [r4, #16]
 8018e1c:	429a      	cmp	r2, r3
 8018e1e:	bfb8      	it	lt
 8018e20:	460b      	movlt	r3, r1
 8018e22:	4688      	mov	r8, r1
 8018e24:	bfbc      	itt	lt
 8018e26:	46a0      	movlt	r8, r4
 8018e28:	461c      	movlt	r4, r3
 8018e2a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018e2e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018e32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018e36:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018e3a:	eb07 0609 	add.w	r6, r7, r9
 8018e3e:	42b3      	cmp	r3, r6
 8018e40:	bfb8      	it	lt
 8018e42:	3101      	addlt	r1, #1
 8018e44:	f7ff feca 	bl	8018bdc <_Balloc>
 8018e48:	f100 0514 	add.w	r5, r0, #20
 8018e4c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018e50:	462b      	mov	r3, r5
 8018e52:	2200      	movs	r2, #0
 8018e54:	4573      	cmp	r3, lr
 8018e56:	d316      	bcc.n	8018e86 <__multiply+0x74>
 8018e58:	f104 0214 	add.w	r2, r4, #20
 8018e5c:	f108 0114 	add.w	r1, r8, #20
 8018e60:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018e64:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018e68:	9300      	str	r3, [sp, #0]
 8018e6a:	9b00      	ldr	r3, [sp, #0]
 8018e6c:	9201      	str	r2, [sp, #4]
 8018e6e:	4293      	cmp	r3, r2
 8018e70:	d80c      	bhi.n	8018e8c <__multiply+0x7a>
 8018e72:	2e00      	cmp	r6, #0
 8018e74:	dd03      	ble.n	8018e7e <__multiply+0x6c>
 8018e76:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	d05d      	beq.n	8018f3a <__multiply+0x128>
 8018e7e:	6106      	str	r6, [r0, #16]
 8018e80:	b003      	add	sp, #12
 8018e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e86:	f843 2b04 	str.w	r2, [r3], #4
 8018e8a:	e7e3      	b.n	8018e54 <__multiply+0x42>
 8018e8c:	f8b2 b000 	ldrh.w	fp, [r2]
 8018e90:	f1bb 0f00 	cmp.w	fp, #0
 8018e94:	d023      	beq.n	8018ede <__multiply+0xcc>
 8018e96:	4689      	mov	r9, r1
 8018e98:	46ac      	mov	ip, r5
 8018e9a:	f04f 0800 	mov.w	r8, #0
 8018e9e:	f859 4b04 	ldr.w	r4, [r9], #4
 8018ea2:	f8dc a000 	ldr.w	sl, [ip]
 8018ea6:	b2a3      	uxth	r3, r4
 8018ea8:	fa1f fa8a 	uxth.w	sl, sl
 8018eac:	fb0b a303 	mla	r3, fp, r3, sl
 8018eb0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018eb4:	f8dc 4000 	ldr.w	r4, [ip]
 8018eb8:	4443      	add	r3, r8
 8018eba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018ebe:	fb0b 840a 	mla	r4, fp, sl, r8
 8018ec2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018ec6:	46e2      	mov	sl, ip
 8018ec8:	b29b      	uxth	r3, r3
 8018eca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018ece:	454f      	cmp	r7, r9
 8018ed0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018ed4:	f84a 3b04 	str.w	r3, [sl], #4
 8018ed8:	d82b      	bhi.n	8018f32 <__multiply+0x120>
 8018eda:	f8cc 8004 	str.w	r8, [ip, #4]
 8018ede:	9b01      	ldr	r3, [sp, #4]
 8018ee0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018ee4:	3204      	adds	r2, #4
 8018ee6:	f1ba 0f00 	cmp.w	sl, #0
 8018eea:	d020      	beq.n	8018f2e <__multiply+0x11c>
 8018eec:	682b      	ldr	r3, [r5, #0]
 8018eee:	4689      	mov	r9, r1
 8018ef0:	46a8      	mov	r8, r5
 8018ef2:	f04f 0b00 	mov.w	fp, #0
 8018ef6:	f8b9 c000 	ldrh.w	ip, [r9]
 8018efa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018efe:	fb0a 440c 	mla	r4, sl, ip, r4
 8018f02:	445c      	add	r4, fp
 8018f04:	46c4      	mov	ip, r8
 8018f06:	b29b      	uxth	r3, r3
 8018f08:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018f0c:	f84c 3b04 	str.w	r3, [ip], #4
 8018f10:	f859 3b04 	ldr.w	r3, [r9], #4
 8018f14:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018f18:	0c1b      	lsrs	r3, r3, #16
 8018f1a:	fb0a b303 	mla	r3, sl, r3, fp
 8018f1e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018f22:	454f      	cmp	r7, r9
 8018f24:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018f28:	d805      	bhi.n	8018f36 <__multiply+0x124>
 8018f2a:	f8c8 3004 	str.w	r3, [r8, #4]
 8018f2e:	3504      	adds	r5, #4
 8018f30:	e79b      	b.n	8018e6a <__multiply+0x58>
 8018f32:	46d4      	mov	ip, sl
 8018f34:	e7b3      	b.n	8018e9e <__multiply+0x8c>
 8018f36:	46e0      	mov	r8, ip
 8018f38:	e7dd      	b.n	8018ef6 <__multiply+0xe4>
 8018f3a:	3e01      	subs	r6, #1
 8018f3c:	e799      	b.n	8018e72 <__multiply+0x60>
	...

08018f40 <__pow5mult>:
 8018f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f44:	4615      	mov	r5, r2
 8018f46:	f012 0203 	ands.w	r2, r2, #3
 8018f4a:	4606      	mov	r6, r0
 8018f4c:	460f      	mov	r7, r1
 8018f4e:	d007      	beq.n	8018f60 <__pow5mult+0x20>
 8018f50:	3a01      	subs	r2, #1
 8018f52:	4c21      	ldr	r4, [pc, #132]	; (8018fd8 <__pow5mult+0x98>)
 8018f54:	2300      	movs	r3, #0
 8018f56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018f5a:	f7ff fe8a 	bl	8018c72 <__multadd>
 8018f5e:	4607      	mov	r7, r0
 8018f60:	10ad      	asrs	r5, r5, #2
 8018f62:	d035      	beq.n	8018fd0 <__pow5mult+0x90>
 8018f64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018f66:	b93c      	cbnz	r4, 8018f78 <__pow5mult+0x38>
 8018f68:	2010      	movs	r0, #16
 8018f6a:	f7fc fe67 	bl	8015c3c <malloc>
 8018f6e:	6270      	str	r0, [r6, #36]	; 0x24
 8018f70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018f74:	6004      	str	r4, [r0, #0]
 8018f76:	60c4      	str	r4, [r0, #12]
 8018f78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018f7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018f80:	b94c      	cbnz	r4, 8018f96 <__pow5mult+0x56>
 8018f82:	f240 2171 	movw	r1, #625	; 0x271
 8018f86:	4630      	mov	r0, r6
 8018f88:	f7ff ff3a 	bl	8018e00 <__i2b>
 8018f8c:	2300      	movs	r3, #0
 8018f8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8018f92:	4604      	mov	r4, r0
 8018f94:	6003      	str	r3, [r0, #0]
 8018f96:	f04f 0800 	mov.w	r8, #0
 8018f9a:	07eb      	lsls	r3, r5, #31
 8018f9c:	d50a      	bpl.n	8018fb4 <__pow5mult+0x74>
 8018f9e:	4639      	mov	r1, r7
 8018fa0:	4622      	mov	r2, r4
 8018fa2:	4630      	mov	r0, r6
 8018fa4:	f7ff ff35 	bl	8018e12 <__multiply>
 8018fa8:	4639      	mov	r1, r7
 8018faa:	4681      	mov	r9, r0
 8018fac:	4630      	mov	r0, r6
 8018fae:	f7ff fe49 	bl	8018c44 <_Bfree>
 8018fb2:	464f      	mov	r7, r9
 8018fb4:	106d      	asrs	r5, r5, #1
 8018fb6:	d00b      	beq.n	8018fd0 <__pow5mult+0x90>
 8018fb8:	6820      	ldr	r0, [r4, #0]
 8018fba:	b938      	cbnz	r0, 8018fcc <__pow5mult+0x8c>
 8018fbc:	4622      	mov	r2, r4
 8018fbe:	4621      	mov	r1, r4
 8018fc0:	4630      	mov	r0, r6
 8018fc2:	f7ff ff26 	bl	8018e12 <__multiply>
 8018fc6:	6020      	str	r0, [r4, #0]
 8018fc8:	f8c0 8000 	str.w	r8, [r0]
 8018fcc:	4604      	mov	r4, r0
 8018fce:	e7e4      	b.n	8018f9a <__pow5mult+0x5a>
 8018fd0:	4638      	mov	r0, r7
 8018fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018fd6:	bf00      	nop
 8018fd8:	0801b5b8 	.word	0x0801b5b8

08018fdc <__lshift>:
 8018fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fe0:	460c      	mov	r4, r1
 8018fe2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018fe6:	6923      	ldr	r3, [r4, #16]
 8018fe8:	6849      	ldr	r1, [r1, #4]
 8018fea:	eb0a 0903 	add.w	r9, sl, r3
 8018fee:	68a3      	ldr	r3, [r4, #8]
 8018ff0:	4607      	mov	r7, r0
 8018ff2:	4616      	mov	r6, r2
 8018ff4:	f109 0501 	add.w	r5, r9, #1
 8018ff8:	42ab      	cmp	r3, r5
 8018ffa:	db32      	blt.n	8019062 <__lshift+0x86>
 8018ffc:	4638      	mov	r0, r7
 8018ffe:	f7ff fded 	bl	8018bdc <_Balloc>
 8019002:	2300      	movs	r3, #0
 8019004:	4680      	mov	r8, r0
 8019006:	f100 0114 	add.w	r1, r0, #20
 801900a:	461a      	mov	r2, r3
 801900c:	4553      	cmp	r3, sl
 801900e:	db2b      	blt.n	8019068 <__lshift+0x8c>
 8019010:	6920      	ldr	r0, [r4, #16]
 8019012:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019016:	f104 0314 	add.w	r3, r4, #20
 801901a:	f016 021f 	ands.w	r2, r6, #31
 801901e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019022:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019026:	d025      	beq.n	8019074 <__lshift+0x98>
 8019028:	f1c2 0e20 	rsb	lr, r2, #32
 801902c:	2000      	movs	r0, #0
 801902e:	681e      	ldr	r6, [r3, #0]
 8019030:	468a      	mov	sl, r1
 8019032:	4096      	lsls	r6, r2
 8019034:	4330      	orrs	r0, r6
 8019036:	f84a 0b04 	str.w	r0, [sl], #4
 801903a:	f853 0b04 	ldr.w	r0, [r3], #4
 801903e:	459c      	cmp	ip, r3
 8019040:	fa20 f00e 	lsr.w	r0, r0, lr
 8019044:	d814      	bhi.n	8019070 <__lshift+0x94>
 8019046:	6048      	str	r0, [r1, #4]
 8019048:	b108      	cbz	r0, 801904e <__lshift+0x72>
 801904a:	f109 0502 	add.w	r5, r9, #2
 801904e:	3d01      	subs	r5, #1
 8019050:	4638      	mov	r0, r7
 8019052:	f8c8 5010 	str.w	r5, [r8, #16]
 8019056:	4621      	mov	r1, r4
 8019058:	f7ff fdf4 	bl	8018c44 <_Bfree>
 801905c:	4640      	mov	r0, r8
 801905e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019062:	3101      	adds	r1, #1
 8019064:	005b      	lsls	r3, r3, #1
 8019066:	e7c7      	b.n	8018ff8 <__lshift+0x1c>
 8019068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801906c:	3301      	adds	r3, #1
 801906e:	e7cd      	b.n	801900c <__lshift+0x30>
 8019070:	4651      	mov	r1, sl
 8019072:	e7dc      	b.n	801902e <__lshift+0x52>
 8019074:	3904      	subs	r1, #4
 8019076:	f853 2b04 	ldr.w	r2, [r3], #4
 801907a:	f841 2f04 	str.w	r2, [r1, #4]!
 801907e:	459c      	cmp	ip, r3
 8019080:	d8f9      	bhi.n	8019076 <__lshift+0x9a>
 8019082:	e7e4      	b.n	801904e <__lshift+0x72>

08019084 <__mcmp>:
 8019084:	6903      	ldr	r3, [r0, #16]
 8019086:	690a      	ldr	r2, [r1, #16]
 8019088:	1a9b      	subs	r3, r3, r2
 801908a:	b530      	push	{r4, r5, lr}
 801908c:	d10c      	bne.n	80190a8 <__mcmp+0x24>
 801908e:	0092      	lsls	r2, r2, #2
 8019090:	3014      	adds	r0, #20
 8019092:	3114      	adds	r1, #20
 8019094:	1884      	adds	r4, r0, r2
 8019096:	4411      	add	r1, r2
 8019098:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801909c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80190a0:	4295      	cmp	r5, r2
 80190a2:	d003      	beq.n	80190ac <__mcmp+0x28>
 80190a4:	d305      	bcc.n	80190b2 <__mcmp+0x2e>
 80190a6:	2301      	movs	r3, #1
 80190a8:	4618      	mov	r0, r3
 80190aa:	bd30      	pop	{r4, r5, pc}
 80190ac:	42a0      	cmp	r0, r4
 80190ae:	d3f3      	bcc.n	8019098 <__mcmp+0x14>
 80190b0:	e7fa      	b.n	80190a8 <__mcmp+0x24>
 80190b2:	f04f 33ff 	mov.w	r3, #4294967295
 80190b6:	e7f7      	b.n	80190a8 <__mcmp+0x24>

080190b8 <__mdiff>:
 80190b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190bc:	460d      	mov	r5, r1
 80190be:	4607      	mov	r7, r0
 80190c0:	4611      	mov	r1, r2
 80190c2:	4628      	mov	r0, r5
 80190c4:	4614      	mov	r4, r2
 80190c6:	f7ff ffdd 	bl	8019084 <__mcmp>
 80190ca:	1e06      	subs	r6, r0, #0
 80190cc:	d108      	bne.n	80190e0 <__mdiff+0x28>
 80190ce:	4631      	mov	r1, r6
 80190d0:	4638      	mov	r0, r7
 80190d2:	f7ff fd83 	bl	8018bdc <_Balloc>
 80190d6:	2301      	movs	r3, #1
 80190d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80190dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190e0:	bfa4      	itt	ge
 80190e2:	4623      	movge	r3, r4
 80190e4:	462c      	movge	r4, r5
 80190e6:	4638      	mov	r0, r7
 80190e8:	6861      	ldr	r1, [r4, #4]
 80190ea:	bfa6      	itte	ge
 80190ec:	461d      	movge	r5, r3
 80190ee:	2600      	movge	r6, #0
 80190f0:	2601      	movlt	r6, #1
 80190f2:	f7ff fd73 	bl	8018bdc <_Balloc>
 80190f6:	692b      	ldr	r3, [r5, #16]
 80190f8:	60c6      	str	r6, [r0, #12]
 80190fa:	6926      	ldr	r6, [r4, #16]
 80190fc:	f105 0914 	add.w	r9, r5, #20
 8019100:	f104 0214 	add.w	r2, r4, #20
 8019104:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8019108:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801910c:	f100 0514 	add.w	r5, r0, #20
 8019110:	f04f 0e00 	mov.w	lr, #0
 8019114:	f852 ab04 	ldr.w	sl, [r2], #4
 8019118:	f859 4b04 	ldr.w	r4, [r9], #4
 801911c:	fa1e f18a 	uxtah	r1, lr, sl
 8019120:	b2a3      	uxth	r3, r4
 8019122:	1ac9      	subs	r1, r1, r3
 8019124:	0c23      	lsrs	r3, r4, #16
 8019126:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801912a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801912e:	b289      	uxth	r1, r1
 8019130:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8019134:	45c8      	cmp	r8, r9
 8019136:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801913a:	4694      	mov	ip, r2
 801913c:	f845 3b04 	str.w	r3, [r5], #4
 8019140:	d8e8      	bhi.n	8019114 <__mdiff+0x5c>
 8019142:	45bc      	cmp	ip, r7
 8019144:	d304      	bcc.n	8019150 <__mdiff+0x98>
 8019146:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801914a:	b183      	cbz	r3, 801916e <__mdiff+0xb6>
 801914c:	6106      	str	r6, [r0, #16]
 801914e:	e7c5      	b.n	80190dc <__mdiff+0x24>
 8019150:	f85c 1b04 	ldr.w	r1, [ip], #4
 8019154:	fa1e f381 	uxtah	r3, lr, r1
 8019158:	141a      	asrs	r2, r3, #16
 801915a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801915e:	b29b      	uxth	r3, r3
 8019160:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019164:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8019168:	f845 3b04 	str.w	r3, [r5], #4
 801916c:	e7e9      	b.n	8019142 <__mdiff+0x8a>
 801916e:	3e01      	subs	r6, #1
 8019170:	e7e9      	b.n	8019146 <__mdiff+0x8e>
	...

08019174 <__ulp>:
 8019174:	4b12      	ldr	r3, [pc, #72]	; (80191c0 <__ulp+0x4c>)
 8019176:	ee10 2a90 	vmov	r2, s1
 801917a:	401a      	ands	r2, r3
 801917c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8019180:	2b00      	cmp	r3, #0
 8019182:	dd04      	ble.n	801918e <__ulp+0x1a>
 8019184:	2000      	movs	r0, #0
 8019186:	4619      	mov	r1, r3
 8019188:	ec41 0b10 	vmov	d0, r0, r1
 801918c:	4770      	bx	lr
 801918e:	425b      	negs	r3, r3
 8019190:	151b      	asrs	r3, r3, #20
 8019192:	2b13      	cmp	r3, #19
 8019194:	f04f 0000 	mov.w	r0, #0
 8019198:	f04f 0100 	mov.w	r1, #0
 801919c:	dc04      	bgt.n	80191a8 <__ulp+0x34>
 801919e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80191a2:	fa42 f103 	asr.w	r1, r2, r3
 80191a6:	e7ef      	b.n	8019188 <__ulp+0x14>
 80191a8:	3b14      	subs	r3, #20
 80191aa:	2b1e      	cmp	r3, #30
 80191ac:	f04f 0201 	mov.w	r2, #1
 80191b0:	bfda      	itte	le
 80191b2:	f1c3 031f 	rsble	r3, r3, #31
 80191b6:	fa02 f303 	lslle.w	r3, r2, r3
 80191ba:	4613      	movgt	r3, r2
 80191bc:	4618      	mov	r0, r3
 80191be:	e7e3      	b.n	8019188 <__ulp+0x14>
 80191c0:	7ff00000 	.word	0x7ff00000

080191c4 <__b2d>:
 80191c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191c6:	6905      	ldr	r5, [r0, #16]
 80191c8:	f100 0714 	add.w	r7, r0, #20
 80191cc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80191d0:	1f2e      	subs	r6, r5, #4
 80191d2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80191d6:	4620      	mov	r0, r4
 80191d8:	f7ff fdc4 	bl	8018d64 <__hi0bits>
 80191dc:	f1c0 0320 	rsb	r3, r0, #32
 80191e0:	280a      	cmp	r0, #10
 80191e2:	600b      	str	r3, [r1, #0]
 80191e4:	f8df c074 	ldr.w	ip, [pc, #116]	; 801925c <__b2d+0x98>
 80191e8:	dc14      	bgt.n	8019214 <__b2d+0x50>
 80191ea:	f1c0 0e0b 	rsb	lr, r0, #11
 80191ee:	fa24 f10e 	lsr.w	r1, r4, lr
 80191f2:	42b7      	cmp	r7, r6
 80191f4:	ea41 030c 	orr.w	r3, r1, ip
 80191f8:	bf34      	ite	cc
 80191fa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80191fe:	2100      	movcs	r1, #0
 8019200:	3015      	adds	r0, #21
 8019202:	fa04 f000 	lsl.w	r0, r4, r0
 8019206:	fa21 f10e 	lsr.w	r1, r1, lr
 801920a:	ea40 0201 	orr.w	r2, r0, r1
 801920e:	ec43 2b10 	vmov	d0, r2, r3
 8019212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019214:	42b7      	cmp	r7, r6
 8019216:	bf3a      	itte	cc
 8019218:	f1a5 0608 	subcc.w	r6, r5, #8
 801921c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019220:	2100      	movcs	r1, #0
 8019222:	380b      	subs	r0, #11
 8019224:	d015      	beq.n	8019252 <__b2d+0x8e>
 8019226:	4084      	lsls	r4, r0
 8019228:	f1c0 0520 	rsb	r5, r0, #32
 801922c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8019230:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8019234:	42be      	cmp	r6, r7
 8019236:	fa21 fc05 	lsr.w	ip, r1, r5
 801923a:	ea44 030c 	orr.w	r3, r4, ip
 801923e:	bf8c      	ite	hi
 8019240:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019244:	2400      	movls	r4, #0
 8019246:	fa01 f000 	lsl.w	r0, r1, r0
 801924a:	40ec      	lsrs	r4, r5
 801924c:	ea40 0204 	orr.w	r2, r0, r4
 8019250:	e7dd      	b.n	801920e <__b2d+0x4a>
 8019252:	ea44 030c 	orr.w	r3, r4, ip
 8019256:	460a      	mov	r2, r1
 8019258:	e7d9      	b.n	801920e <__b2d+0x4a>
 801925a:	bf00      	nop
 801925c:	3ff00000 	.word	0x3ff00000

08019260 <__d2b>:
 8019260:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019264:	460e      	mov	r6, r1
 8019266:	2101      	movs	r1, #1
 8019268:	ec59 8b10 	vmov	r8, r9, d0
 801926c:	4615      	mov	r5, r2
 801926e:	f7ff fcb5 	bl	8018bdc <_Balloc>
 8019272:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8019276:	4607      	mov	r7, r0
 8019278:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801927c:	bb34      	cbnz	r4, 80192cc <__d2b+0x6c>
 801927e:	9301      	str	r3, [sp, #4]
 8019280:	f1b8 0300 	subs.w	r3, r8, #0
 8019284:	d027      	beq.n	80192d6 <__d2b+0x76>
 8019286:	a802      	add	r0, sp, #8
 8019288:	f840 3d08 	str.w	r3, [r0, #-8]!
 801928c:	f7ff fd89 	bl	8018da2 <__lo0bits>
 8019290:	9900      	ldr	r1, [sp, #0]
 8019292:	b1f0      	cbz	r0, 80192d2 <__d2b+0x72>
 8019294:	9a01      	ldr	r2, [sp, #4]
 8019296:	f1c0 0320 	rsb	r3, r0, #32
 801929a:	fa02 f303 	lsl.w	r3, r2, r3
 801929e:	430b      	orrs	r3, r1
 80192a0:	40c2      	lsrs	r2, r0
 80192a2:	617b      	str	r3, [r7, #20]
 80192a4:	9201      	str	r2, [sp, #4]
 80192a6:	9b01      	ldr	r3, [sp, #4]
 80192a8:	61bb      	str	r3, [r7, #24]
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	bf14      	ite	ne
 80192ae:	2102      	movne	r1, #2
 80192b0:	2101      	moveq	r1, #1
 80192b2:	6139      	str	r1, [r7, #16]
 80192b4:	b1c4      	cbz	r4, 80192e8 <__d2b+0x88>
 80192b6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80192ba:	4404      	add	r4, r0
 80192bc:	6034      	str	r4, [r6, #0]
 80192be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80192c2:	6028      	str	r0, [r5, #0]
 80192c4:	4638      	mov	r0, r7
 80192c6:	b003      	add	sp, #12
 80192c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80192cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80192d0:	e7d5      	b.n	801927e <__d2b+0x1e>
 80192d2:	6179      	str	r1, [r7, #20]
 80192d4:	e7e7      	b.n	80192a6 <__d2b+0x46>
 80192d6:	a801      	add	r0, sp, #4
 80192d8:	f7ff fd63 	bl	8018da2 <__lo0bits>
 80192dc:	9b01      	ldr	r3, [sp, #4]
 80192de:	617b      	str	r3, [r7, #20]
 80192e0:	2101      	movs	r1, #1
 80192e2:	6139      	str	r1, [r7, #16]
 80192e4:	3020      	adds	r0, #32
 80192e6:	e7e5      	b.n	80192b4 <__d2b+0x54>
 80192e8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80192ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80192f0:	6030      	str	r0, [r6, #0]
 80192f2:	6918      	ldr	r0, [r3, #16]
 80192f4:	f7ff fd36 	bl	8018d64 <__hi0bits>
 80192f8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80192fc:	e7e1      	b.n	80192c2 <__d2b+0x62>

080192fe <__ratio>:
 80192fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019302:	4688      	mov	r8, r1
 8019304:	4669      	mov	r1, sp
 8019306:	4681      	mov	r9, r0
 8019308:	f7ff ff5c 	bl	80191c4 <__b2d>
 801930c:	a901      	add	r1, sp, #4
 801930e:	4640      	mov	r0, r8
 8019310:	ec57 6b10 	vmov	r6, r7, d0
 8019314:	f7ff ff56 	bl	80191c4 <__b2d>
 8019318:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801931c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019320:	eba3 0c02 	sub.w	ip, r3, r2
 8019324:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019328:	1a9b      	subs	r3, r3, r2
 801932a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801932e:	ec5b ab10 	vmov	sl, fp, d0
 8019332:	2b00      	cmp	r3, #0
 8019334:	bfce      	itee	gt
 8019336:	463a      	movgt	r2, r7
 8019338:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801933c:	465a      	movle	r2, fp
 801933e:	4659      	mov	r1, fp
 8019340:	463d      	mov	r5, r7
 8019342:	bfd4      	ite	le
 8019344:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8019348:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801934c:	4630      	mov	r0, r6
 801934e:	ee10 2a10 	vmov	r2, s0
 8019352:	460b      	mov	r3, r1
 8019354:	4629      	mov	r1, r5
 8019356:	f7e7 fa79 	bl	800084c <__aeabi_ddiv>
 801935a:	ec41 0b10 	vmov	d0, r0, r1
 801935e:	b003      	add	sp, #12
 8019360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019364 <__copybits>:
 8019364:	3901      	subs	r1, #1
 8019366:	b510      	push	{r4, lr}
 8019368:	1149      	asrs	r1, r1, #5
 801936a:	6914      	ldr	r4, [r2, #16]
 801936c:	3101      	adds	r1, #1
 801936e:	f102 0314 	add.w	r3, r2, #20
 8019372:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019376:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801937a:	42a3      	cmp	r3, r4
 801937c:	4602      	mov	r2, r0
 801937e:	d303      	bcc.n	8019388 <__copybits+0x24>
 8019380:	2300      	movs	r3, #0
 8019382:	428a      	cmp	r2, r1
 8019384:	d305      	bcc.n	8019392 <__copybits+0x2e>
 8019386:	bd10      	pop	{r4, pc}
 8019388:	f853 2b04 	ldr.w	r2, [r3], #4
 801938c:	f840 2b04 	str.w	r2, [r0], #4
 8019390:	e7f3      	b.n	801937a <__copybits+0x16>
 8019392:	f842 3b04 	str.w	r3, [r2], #4
 8019396:	e7f4      	b.n	8019382 <__copybits+0x1e>

08019398 <__any_on>:
 8019398:	f100 0214 	add.w	r2, r0, #20
 801939c:	6900      	ldr	r0, [r0, #16]
 801939e:	114b      	asrs	r3, r1, #5
 80193a0:	4298      	cmp	r0, r3
 80193a2:	b510      	push	{r4, lr}
 80193a4:	db11      	blt.n	80193ca <__any_on+0x32>
 80193a6:	dd0a      	ble.n	80193be <__any_on+0x26>
 80193a8:	f011 011f 	ands.w	r1, r1, #31
 80193ac:	d007      	beq.n	80193be <__any_on+0x26>
 80193ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80193b2:	fa24 f001 	lsr.w	r0, r4, r1
 80193b6:	fa00 f101 	lsl.w	r1, r0, r1
 80193ba:	428c      	cmp	r4, r1
 80193bc:	d10b      	bne.n	80193d6 <__any_on+0x3e>
 80193be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80193c2:	4293      	cmp	r3, r2
 80193c4:	d803      	bhi.n	80193ce <__any_on+0x36>
 80193c6:	2000      	movs	r0, #0
 80193c8:	bd10      	pop	{r4, pc}
 80193ca:	4603      	mov	r3, r0
 80193cc:	e7f7      	b.n	80193be <__any_on+0x26>
 80193ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80193d2:	2900      	cmp	r1, #0
 80193d4:	d0f5      	beq.n	80193c2 <__any_on+0x2a>
 80193d6:	2001      	movs	r0, #1
 80193d8:	e7f6      	b.n	80193c8 <__any_on+0x30>

080193da <_calloc_r>:
 80193da:	b538      	push	{r3, r4, r5, lr}
 80193dc:	fb02 f401 	mul.w	r4, r2, r1
 80193e0:	4621      	mov	r1, r4
 80193e2:	f7fc fcb5 	bl	8015d50 <_malloc_r>
 80193e6:	4605      	mov	r5, r0
 80193e8:	b118      	cbz	r0, 80193f2 <_calloc_r+0x18>
 80193ea:	4622      	mov	r2, r4
 80193ec:	2100      	movs	r1, #0
 80193ee:	f7fc fc59 	bl	8015ca4 <memset>
 80193f2:	4628      	mov	r0, r5
 80193f4:	bd38      	pop	{r3, r4, r5, pc}

080193f6 <__ssputs_r>:
 80193f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80193fa:	688e      	ldr	r6, [r1, #8]
 80193fc:	429e      	cmp	r6, r3
 80193fe:	4682      	mov	sl, r0
 8019400:	460c      	mov	r4, r1
 8019402:	4690      	mov	r8, r2
 8019404:	4699      	mov	r9, r3
 8019406:	d837      	bhi.n	8019478 <__ssputs_r+0x82>
 8019408:	898a      	ldrh	r2, [r1, #12]
 801940a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801940e:	d031      	beq.n	8019474 <__ssputs_r+0x7e>
 8019410:	6825      	ldr	r5, [r4, #0]
 8019412:	6909      	ldr	r1, [r1, #16]
 8019414:	1a6f      	subs	r7, r5, r1
 8019416:	6965      	ldr	r5, [r4, #20]
 8019418:	2302      	movs	r3, #2
 801941a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801941e:	fb95 f5f3 	sdiv	r5, r5, r3
 8019422:	f109 0301 	add.w	r3, r9, #1
 8019426:	443b      	add	r3, r7
 8019428:	429d      	cmp	r5, r3
 801942a:	bf38      	it	cc
 801942c:	461d      	movcc	r5, r3
 801942e:	0553      	lsls	r3, r2, #21
 8019430:	d530      	bpl.n	8019494 <__ssputs_r+0x9e>
 8019432:	4629      	mov	r1, r5
 8019434:	f7fc fc8c 	bl	8015d50 <_malloc_r>
 8019438:	4606      	mov	r6, r0
 801943a:	b950      	cbnz	r0, 8019452 <__ssputs_r+0x5c>
 801943c:	230c      	movs	r3, #12
 801943e:	f8ca 3000 	str.w	r3, [sl]
 8019442:	89a3      	ldrh	r3, [r4, #12]
 8019444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019448:	81a3      	strh	r3, [r4, #12]
 801944a:	f04f 30ff 	mov.w	r0, #4294967295
 801944e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019452:	463a      	mov	r2, r7
 8019454:	6921      	ldr	r1, [r4, #16]
 8019456:	f7fc fc01 	bl	8015c5c <memcpy>
 801945a:	89a3      	ldrh	r3, [r4, #12]
 801945c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019464:	81a3      	strh	r3, [r4, #12]
 8019466:	6126      	str	r6, [r4, #16]
 8019468:	6165      	str	r5, [r4, #20]
 801946a:	443e      	add	r6, r7
 801946c:	1bed      	subs	r5, r5, r7
 801946e:	6026      	str	r6, [r4, #0]
 8019470:	60a5      	str	r5, [r4, #8]
 8019472:	464e      	mov	r6, r9
 8019474:	454e      	cmp	r6, r9
 8019476:	d900      	bls.n	801947a <__ssputs_r+0x84>
 8019478:	464e      	mov	r6, r9
 801947a:	4632      	mov	r2, r6
 801947c:	4641      	mov	r1, r8
 801947e:	6820      	ldr	r0, [r4, #0]
 8019480:	f7fc fbf7 	bl	8015c72 <memmove>
 8019484:	68a3      	ldr	r3, [r4, #8]
 8019486:	1b9b      	subs	r3, r3, r6
 8019488:	60a3      	str	r3, [r4, #8]
 801948a:	6823      	ldr	r3, [r4, #0]
 801948c:	441e      	add	r6, r3
 801948e:	6026      	str	r6, [r4, #0]
 8019490:	2000      	movs	r0, #0
 8019492:	e7dc      	b.n	801944e <__ssputs_r+0x58>
 8019494:	462a      	mov	r2, r5
 8019496:	f000 f920 	bl	80196da <_realloc_r>
 801949a:	4606      	mov	r6, r0
 801949c:	2800      	cmp	r0, #0
 801949e:	d1e2      	bne.n	8019466 <__ssputs_r+0x70>
 80194a0:	6921      	ldr	r1, [r4, #16]
 80194a2:	4650      	mov	r0, sl
 80194a4:	f7fc fc06 	bl	8015cb4 <_free_r>
 80194a8:	e7c8      	b.n	801943c <__ssputs_r+0x46>
	...

080194ac <_svfiprintf_r>:
 80194ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194b0:	461d      	mov	r5, r3
 80194b2:	898b      	ldrh	r3, [r1, #12]
 80194b4:	061f      	lsls	r7, r3, #24
 80194b6:	b09d      	sub	sp, #116	; 0x74
 80194b8:	4680      	mov	r8, r0
 80194ba:	460c      	mov	r4, r1
 80194bc:	4616      	mov	r6, r2
 80194be:	d50f      	bpl.n	80194e0 <_svfiprintf_r+0x34>
 80194c0:	690b      	ldr	r3, [r1, #16]
 80194c2:	b96b      	cbnz	r3, 80194e0 <_svfiprintf_r+0x34>
 80194c4:	2140      	movs	r1, #64	; 0x40
 80194c6:	f7fc fc43 	bl	8015d50 <_malloc_r>
 80194ca:	6020      	str	r0, [r4, #0]
 80194cc:	6120      	str	r0, [r4, #16]
 80194ce:	b928      	cbnz	r0, 80194dc <_svfiprintf_r+0x30>
 80194d0:	230c      	movs	r3, #12
 80194d2:	f8c8 3000 	str.w	r3, [r8]
 80194d6:	f04f 30ff 	mov.w	r0, #4294967295
 80194da:	e0c8      	b.n	801966e <_svfiprintf_r+0x1c2>
 80194dc:	2340      	movs	r3, #64	; 0x40
 80194de:	6163      	str	r3, [r4, #20]
 80194e0:	2300      	movs	r3, #0
 80194e2:	9309      	str	r3, [sp, #36]	; 0x24
 80194e4:	2320      	movs	r3, #32
 80194e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80194ea:	2330      	movs	r3, #48	; 0x30
 80194ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80194f0:	9503      	str	r5, [sp, #12]
 80194f2:	f04f 0b01 	mov.w	fp, #1
 80194f6:	4637      	mov	r7, r6
 80194f8:	463d      	mov	r5, r7
 80194fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80194fe:	b10b      	cbz	r3, 8019504 <_svfiprintf_r+0x58>
 8019500:	2b25      	cmp	r3, #37	; 0x25
 8019502:	d13e      	bne.n	8019582 <_svfiprintf_r+0xd6>
 8019504:	ebb7 0a06 	subs.w	sl, r7, r6
 8019508:	d00b      	beq.n	8019522 <_svfiprintf_r+0x76>
 801950a:	4653      	mov	r3, sl
 801950c:	4632      	mov	r2, r6
 801950e:	4621      	mov	r1, r4
 8019510:	4640      	mov	r0, r8
 8019512:	f7ff ff70 	bl	80193f6 <__ssputs_r>
 8019516:	3001      	adds	r0, #1
 8019518:	f000 80a4 	beq.w	8019664 <_svfiprintf_r+0x1b8>
 801951c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801951e:	4453      	add	r3, sl
 8019520:	9309      	str	r3, [sp, #36]	; 0x24
 8019522:	783b      	ldrb	r3, [r7, #0]
 8019524:	2b00      	cmp	r3, #0
 8019526:	f000 809d 	beq.w	8019664 <_svfiprintf_r+0x1b8>
 801952a:	2300      	movs	r3, #0
 801952c:	f04f 32ff 	mov.w	r2, #4294967295
 8019530:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019534:	9304      	str	r3, [sp, #16]
 8019536:	9307      	str	r3, [sp, #28]
 8019538:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801953c:	931a      	str	r3, [sp, #104]	; 0x68
 801953e:	462f      	mov	r7, r5
 8019540:	2205      	movs	r2, #5
 8019542:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019546:	4850      	ldr	r0, [pc, #320]	; (8019688 <_svfiprintf_r+0x1dc>)
 8019548:	f7e6 fe4a 	bl	80001e0 <memchr>
 801954c:	9b04      	ldr	r3, [sp, #16]
 801954e:	b9d0      	cbnz	r0, 8019586 <_svfiprintf_r+0xda>
 8019550:	06d9      	lsls	r1, r3, #27
 8019552:	bf44      	itt	mi
 8019554:	2220      	movmi	r2, #32
 8019556:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801955a:	071a      	lsls	r2, r3, #28
 801955c:	bf44      	itt	mi
 801955e:	222b      	movmi	r2, #43	; 0x2b
 8019560:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019564:	782a      	ldrb	r2, [r5, #0]
 8019566:	2a2a      	cmp	r2, #42	; 0x2a
 8019568:	d015      	beq.n	8019596 <_svfiprintf_r+0xea>
 801956a:	9a07      	ldr	r2, [sp, #28]
 801956c:	462f      	mov	r7, r5
 801956e:	2000      	movs	r0, #0
 8019570:	250a      	movs	r5, #10
 8019572:	4639      	mov	r1, r7
 8019574:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019578:	3b30      	subs	r3, #48	; 0x30
 801957a:	2b09      	cmp	r3, #9
 801957c:	d94d      	bls.n	801961a <_svfiprintf_r+0x16e>
 801957e:	b1b8      	cbz	r0, 80195b0 <_svfiprintf_r+0x104>
 8019580:	e00f      	b.n	80195a2 <_svfiprintf_r+0xf6>
 8019582:	462f      	mov	r7, r5
 8019584:	e7b8      	b.n	80194f8 <_svfiprintf_r+0x4c>
 8019586:	4a40      	ldr	r2, [pc, #256]	; (8019688 <_svfiprintf_r+0x1dc>)
 8019588:	1a80      	subs	r0, r0, r2
 801958a:	fa0b f000 	lsl.w	r0, fp, r0
 801958e:	4318      	orrs	r0, r3
 8019590:	9004      	str	r0, [sp, #16]
 8019592:	463d      	mov	r5, r7
 8019594:	e7d3      	b.n	801953e <_svfiprintf_r+0x92>
 8019596:	9a03      	ldr	r2, [sp, #12]
 8019598:	1d11      	adds	r1, r2, #4
 801959a:	6812      	ldr	r2, [r2, #0]
 801959c:	9103      	str	r1, [sp, #12]
 801959e:	2a00      	cmp	r2, #0
 80195a0:	db01      	blt.n	80195a6 <_svfiprintf_r+0xfa>
 80195a2:	9207      	str	r2, [sp, #28]
 80195a4:	e004      	b.n	80195b0 <_svfiprintf_r+0x104>
 80195a6:	4252      	negs	r2, r2
 80195a8:	f043 0302 	orr.w	r3, r3, #2
 80195ac:	9207      	str	r2, [sp, #28]
 80195ae:	9304      	str	r3, [sp, #16]
 80195b0:	783b      	ldrb	r3, [r7, #0]
 80195b2:	2b2e      	cmp	r3, #46	; 0x2e
 80195b4:	d10c      	bne.n	80195d0 <_svfiprintf_r+0x124>
 80195b6:	787b      	ldrb	r3, [r7, #1]
 80195b8:	2b2a      	cmp	r3, #42	; 0x2a
 80195ba:	d133      	bne.n	8019624 <_svfiprintf_r+0x178>
 80195bc:	9b03      	ldr	r3, [sp, #12]
 80195be:	1d1a      	adds	r2, r3, #4
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	9203      	str	r2, [sp, #12]
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	bfb8      	it	lt
 80195c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80195cc:	3702      	adds	r7, #2
 80195ce:	9305      	str	r3, [sp, #20]
 80195d0:	4d2e      	ldr	r5, [pc, #184]	; (801968c <_svfiprintf_r+0x1e0>)
 80195d2:	7839      	ldrb	r1, [r7, #0]
 80195d4:	2203      	movs	r2, #3
 80195d6:	4628      	mov	r0, r5
 80195d8:	f7e6 fe02 	bl	80001e0 <memchr>
 80195dc:	b138      	cbz	r0, 80195ee <_svfiprintf_r+0x142>
 80195de:	2340      	movs	r3, #64	; 0x40
 80195e0:	1b40      	subs	r0, r0, r5
 80195e2:	fa03 f000 	lsl.w	r0, r3, r0
 80195e6:	9b04      	ldr	r3, [sp, #16]
 80195e8:	4303      	orrs	r3, r0
 80195ea:	3701      	adds	r7, #1
 80195ec:	9304      	str	r3, [sp, #16]
 80195ee:	7839      	ldrb	r1, [r7, #0]
 80195f0:	4827      	ldr	r0, [pc, #156]	; (8019690 <_svfiprintf_r+0x1e4>)
 80195f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80195f6:	2206      	movs	r2, #6
 80195f8:	1c7e      	adds	r6, r7, #1
 80195fa:	f7e6 fdf1 	bl	80001e0 <memchr>
 80195fe:	2800      	cmp	r0, #0
 8019600:	d038      	beq.n	8019674 <_svfiprintf_r+0x1c8>
 8019602:	4b24      	ldr	r3, [pc, #144]	; (8019694 <_svfiprintf_r+0x1e8>)
 8019604:	bb13      	cbnz	r3, 801964c <_svfiprintf_r+0x1a0>
 8019606:	9b03      	ldr	r3, [sp, #12]
 8019608:	3307      	adds	r3, #7
 801960a:	f023 0307 	bic.w	r3, r3, #7
 801960e:	3308      	adds	r3, #8
 8019610:	9303      	str	r3, [sp, #12]
 8019612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019614:	444b      	add	r3, r9
 8019616:	9309      	str	r3, [sp, #36]	; 0x24
 8019618:	e76d      	b.n	80194f6 <_svfiprintf_r+0x4a>
 801961a:	fb05 3202 	mla	r2, r5, r2, r3
 801961e:	2001      	movs	r0, #1
 8019620:	460f      	mov	r7, r1
 8019622:	e7a6      	b.n	8019572 <_svfiprintf_r+0xc6>
 8019624:	2300      	movs	r3, #0
 8019626:	3701      	adds	r7, #1
 8019628:	9305      	str	r3, [sp, #20]
 801962a:	4619      	mov	r1, r3
 801962c:	250a      	movs	r5, #10
 801962e:	4638      	mov	r0, r7
 8019630:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019634:	3a30      	subs	r2, #48	; 0x30
 8019636:	2a09      	cmp	r2, #9
 8019638:	d903      	bls.n	8019642 <_svfiprintf_r+0x196>
 801963a:	2b00      	cmp	r3, #0
 801963c:	d0c8      	beq.n	80195d0 <_svfiprintf_r+0x124>
 801963e:	9105      	str	r1, [sp, #20]
 8019640:	e7c6      	b.n	80195d0 <_svfiprintf_r+0x124>
 8019642:	fb05 2101 	mla	r1, r5, r1, r2
 8019646:	2301      	movs	r3, #1
 8019648:	4607      	mov	r7, r0
 801964a:	e7f0      	b.n	801962e <_svfiprintf_r+0x182>
 801964c:	ab03      	add	r3, sp, #12
 801964e:	9300      	str	r3, [sp, #0]
 8019650:	4622      	mov	r2, r4
 8019652:	4b11      	ldr	r3, [pc, #68]	; (8019698 <_svfiprintf_r+0x1ec>)
 8019654:	a904      	add	r1, sp, #16
 8019656:	4640      	mov	r0, r8
 8019658:	f7fc fc68 	bl	8015f2c <_printf_float>
 801965c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019660:	4681      	mov	r9, r0
 8019662:	d1d6      	bne.n	8019612 <_svfiprintf_r+0x166>
 8019664:	89a3      	ldrh	r3, [r4, #12]
 8019666:	065b      	lsls	r3, r3, #25
 8019668:	f53f af35 	bmi.w	80194d6 <_svfiprintf_r+0x2a>
 801966c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801966e:	b01d      	add	sp, #116	; 0x74
 8019670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019674:	ab03      	add	r3, sp, #12
 8019676:	9300      	str	r3, [sp, #0]
 8019678:	4622      	mov	r2, r4
 801967a:	4b07      	ldr	r3, [pc, #28]	; (8019698 <_svfiprintf_r+0x1ec>)
 801967c:	a904      	add	r1, sp, #16
 801967e:	4640      	mov	r0, r8
 8019680:	f7fc ff0a 	bl	8016498 <_printf_i>
 8019684:	e7ea      	b.n	801965c <_svfiprintf_r+0x1b0>
 8019686:	bf00      	nop
 8019688:	0801b5c4 	.word	0x0801b5c4
 801968c:	0801b5ca 	.word	0x0801b5ca
 8019690:	0801b5ce 	.word	0x0801b5ce
 8019694:	08015f2d 	.word	0x08015f2d
 8019698:	080193f7 	.word	0x080193f7

0801969c <strncmp>:
 801969c:	b510      	push	{r4, lr}
 801969e:	b16a      	cbz	r2, 80196bc <strncmp+0x20>
 80196a0:	3901      	subs	r1, #1
 80196a2:	1884      	adds	r4, r0, r2
 80196a4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80196a8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80196ac:	4293      	cmp	r3, r2
 80196ae:	d103      	bne.n	80196b8 <strncmp+0x1c>
 80196b0:	42a0      	cmp	r0, r4
 80196b2:	d001      	beq.n	80196b8 <strncmp+0x1c>
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d1f5      	bne.n	80196a4 <strncmp+0x8>
 80196b8:	1a98      	subs	r0, r3, r2
 80196ba:	bd10      	pop	{r4, pc}
 80196bc:	4610      	mov	r0, r2
 80196be:	e7fc      	b.n	80196ba <strncmp+0x1e>

080196c0 <__ascii_wctomb>:
 80196c0:	b149      	cbz	r1, 80196d6 <__ascii_wctomb+0x16>
 80196c2:	2aff      	cmp	r2, #255	; 0xff
 80196c4:	bf85      	ittet	hi
 80196c6:	238a      	movhi	r3, #138	; 0x8a
 80196c8:	6003      	strhi	r3, [r0, #0]
 80196ca:	700a      	strbls	r2, [r1, #0]
 80196cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80196d0:	bf98      	it	ls
 80196d2:	2001      	movls	r0, #1
 80196d4:	4770      	bx	lr
 80196d6:	4608      	mov	r0, r1
 80196d8:	4770      	bx	lr

080196da <_realloc_r>:
 80196da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196dc:	4607      	mov	r7, r0
 80196de:	4614      	mov	r4, r2
 80196e0:	460e      	mov	r6, r1
 80196e2:	b921      	cbnz	r1, 80196ee <_realloc_r+0x14>
 80196e4:	4611      	mov	r1, r2
 80196e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80196ea:	f7fc bb31 	b.w	8015d50 <_malloc_r>
 80196ee:	b922      	cbnz	r2, 80196fa <_realloc_r+0x20>
 80196f0:	f7fc fae0 	bl	8015cb4 <_free_r>
 80196f4:	4625      	mov	r5, r4
 80196f6:	4628      	mov	r0, r5
 80196f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196fa:	f000 f814 	bl	8019726 <_malloc_usable_size_r>
 80196fe:	42a0      	cmp	r0, r4
 8019700:	d20f      	bcs.n	8019722 <_realloc_r+0x48>
 8019702:	4621      	mov	r1, r4
 8019704:	4638      	mov	r0, r7
 8019706:	f7fc fb23 	bl	8015d50 <_malloc_r>
 801970a:	4605      	mov	r5, r0
 801970c:	2800      	cmp	r0, #0
 801970e:	d0f2      	beq.n	80196f6 <_realloc_r+0x1c>
 8019710:	4631      	mov	r1, r6
 8019712:	4622      	mov	r2, r4
 8019714:	f7fc faa2 	bl	8015c5c <memcpy>
 8019718:	4631      	mov	r1, r6
 801971a:	4638      	mov	r0, r7
 801971c:	f7fc faca 	bl	8015cb4 <_free_r>
 8019720:	e7e9      	b.n	80196f6 <_realloc_r+0x1c>
 8019722:	4635      	mov	r5, r6
 8019724:	e7e7      	b.n	80196f6 <_realloc_r+0x1c>

08019726 <_malloc_usable_size_r>:
 8019726:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801972a:	1f18      	subs	r0, r3, #4
 801972c:	2b00      	cmp	r3, #0
 801972e:	bfbc      	itt	lt
 8019730:	580b      	ldrlt	r3, [r1, r0]
 8019732:	18c0      	addlt	r0, r0, r3
 8019734:	4770      	bx	lr
	...

08019738 <ceil>:
 8019738:	ec51 0b10 	vmov	r0, r1, d0
 801973c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019740:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8019744:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8019748:	2e13      	cmp	r6, #19
 801974a:	460c      	mov	r4, r1
 801974c:	ee10 5a10 	vmov	r5, s0
 8019750:	4680      	mov	r8, r0
 8019752:	dc30      	bgt.n	80197b6 <ceil+0x7e>
 8019754:	2e00      	cmp	r6, #0
 8019756:	da12      	bge.n	801977e <ceil+0x46>
 8019758:	a333      	add	r3, pc, #204	; (adr r3, 8019828 <ceil+0xf0>)
 801975a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801975e:	f7e6 fd95 	bl	800028c <__adddf3>
 8019762:	2200      	movs	r2, #0
 8019764:	2300      	movs	r3, #0
 8019766:	f7e7 f9d7 	bl	8000b18 <__aeabi_dcmpgt>
 801976a:	b128      	cbz	r0, 8019778 <ceil+0x40>
 801976c:	2c00      	cmp	r4, #0
 801976e:	db55      	blt.n	801981c <ceil+0xe4>
 8019770:	432c      	orrs	r4, r5
 8019772:	d057      	beq.n	8019824 <ceil+0xec>
 8019774:	4c2e      	ldr	r4, [pc, #184]	; (8019830 <ceil+0xf8>)
 8019776:	2500      	movs	r5, #0
 8019778:	4621      	mov	r1, r4
 801977a:	4628      	mov	r0, r5
 801977c:	e025      	b.n	80197ca <ceil+0x92>
 801977e:	4f2d      	ldr	r7, [pc, #180]	; (8019834 <ceil+0xfc>)
 8019780:	4137      	asrs	r7, r6
 8019782:	ea01 0307 	and.w	r3, r1, r7
 8019786:	4303      	orrs	r3, r0
 8019788:	d01f      	beq.n	80197ca <ceil+0x92>
 801978a:	a327      	add	r3, pc, #156	; (adr r3, 8019828 <ceil+0xf0>)
 801978c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019790:	f7e6 fd7c 	bl	800028c <__adddf3>
 8019794:	2200      	movs	r2, #0
 8019796:	2300      	movs	r3, #0
 8019798:	f7e7 f9be 	bl	8000b18 <__aeabi_dcmpgt>
 801979c:	2800      	cmp	r0, #0
 801979e:	d0eb      	beq.n	8019778 <ceil+0x40>
 80197a0:	2c00      	cmp	r4, #0
 80197a2:	bfc2      	ittt	gt
 80197a4:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80197a8:	fa43 f606 	asrgt.w	r6, r3, r6
 80197ac:	19a4      	addgt	r4, r4, r6
 80197ae:	ea24 0407 	bic.w	r4, r4, r7
 80197b2:	2500      	movs	r5, #0
 80197b4:	e7e0      	b.n	8019778 <ceil+0x40>
 80197b6:	2e33      	cmp	r6, #51	; 0x33
 80197b8:	dd0b      	ble.n	80197d2 <ceil+0x9a>
 80197ba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80197be:	d104      	bne.n	80197ca <ceil+0x92>
 80197c0:	ee10 2a10 	vmov	r2, s0
 80197c4:	460b      	mov	r3, r1
 80197c6:	f7e6 fd61 	bl	800028c <__adddf3>
 80197ca:	ec41 0b10 	vmov	d0, r0, r1
 80197ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197d2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80197d6:	f04f 33ff 	mov.w	r3, #4294967295
 80197da:	fa23 f707 	lsr.w	r7, r3, r7
 80197de:	4207      	tst	r7, r0
 80197e0:	d0f3      	beq.n	80197ca <ceil+0x92>
 80197e2:	a311      	add	r3, pc, #68	; (adr r3, 8019828 <ceil+0xf0>)
 80197e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197e8:	f7e6 fd50 	bl	800028c <__adddf3>
 80197ec:	2200      	movs	r2, #0
 80197ee:	2300      	movs	r3, #0
 80197f0:	f7e7 f992 	bl	8000b18 <__aeabi_dcmpgt>
 80197f4:	2800      	cmp	r0, #0
 80197f6:	d0bf      	beq.n	8019778 <ceil+0x40>
 80197f8:	2c00      	cmp	r4, #0
 80197fa:	dd02      	ble.n	8019802 <ceil+0xca>
 80197fc:	2e14      	cmp	r6, #20
 80197fe:	d103      	bne.n	8019808 <ceil+0xd0>
 8019800:	3401      	adds	r4, #1
 8019802:	ea25 0507 	bic.w	r5, r5, r7
 8019806:	e7b7      	b.n	8019778 <ceil+0x40>
 8019808:	2301      	movs	r3, #1
 801980a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801980e:	fa03 f606 	lsl.w	r6, r3, r6
 8019812:	4435      	add	r5, r6
 8019814:	4545      	cmp	r5, r8
 8019816:	bf38      	it	cc
 8019818:	18e4      	addcc	r4, r4, r3
 801981a:	e7f2      	b.n	8019802 <ceil+0xca>
 801981c:	2500      	movs	r5, #0
 801981e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019822:	e7a9      	b.n	8019778 <ceil+0x40>
 8019824:	4625      	mov	r5, r4
 8019826:	e7a7      	b.n	8019778 <ceil+0x40>
 8019828:	8800759c 	.word	0x8800759c
 801982c:	7e37e43c 	.word	0x7e37e43c
 8019830:	3ff00000 	.word	0x3ff00000
 8019834:	000fffff 	.word	0x000fffff

08019838 <cos>:
 8019838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801983a:	ec51 0b10 	vmov	r0, r1, d0
 801983e:	4a1e      	ldr	r2, [pc, #120]	; (80198b8 <cos+0x80>)
 8019840:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019844:	4293      	cmp	r3, r2
 8019846:	dc06      	bgt.n	8019856 <cos+0x1e>
 8019848:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80198b0 <cos+0x78>
 801984c:	f000 fcec 	bl	801a228 <__kernel_cos>
 8019850:	ec51 0b10 	vmov	r0, r1, d0
 8019854:	e007      	b.n	8019866 <cos+0x2e>
 8019856:	4a19      	ldr	r2, [pc, #100]	; (80198bc <cos+0x84>)
 8019858:	4293      	cmp	r3, r2
 801985a:	dd09      	ble.n	8019870 <cos+0x38>
 801985c:	ee10 2a10 	vmov	r2, s0
 8019860:	460b      	mov	r3, r1
 8019862:	f7e6 fd11 	bl	8000288 <__aeabi_dsub>
 8019866:	ec41 0b10 	vmov	d0, r0, r1
 801986a:	b005      	add	sp, #20
 801986c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019870:	4668      	mov	r0, sp
 8019872:	f000 fa35 	bl	8019ce0 <__ieee754_rem_pio2>
 8019876:	f000 0003 	and.w	r0, r0, #3
 801987a:	2801      	cmp	r0, #1
 801987c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019880:	ed9d 0b00 	vldr	d0, [sp]
 8019884:	d007      	beq.n	8019896 <cos+0x5e>
 8019886:	2802      	cmp	r0, #2
 8019888:	d00e      	beq.n	80198a8 <cos+0x70>
 801988a:	2800      	cmp	r0, #0
 801988c:	d0de      	beq.n	801984c <cos+0x14>
 801988e:	2001      	movs	r0, #1
 8019890:	f001 f8d2 	bl	801aa38 <__kernel_sin>
 8019894:	e7dc      	b.n	8019850 <cos+0x18>
 8019896:	f001 f8cf 	bl	801aa38 <__kernel_sin>
 801989a:	ec53 2b10 	vmov	r2, r3, d0
 801989e:	ee10 0a10 	vmov	r0, s0
 80198a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80198a6:	e7de      	b.n	8019866 <cos+0x2e>
 80198a8:	f000 fcbe 	bl	801a228 <__kernel_cos>
 80198ac:	e7f5      	b.n	801989a <cos+0x62>
 80198ae:	bf00      	nop
	...
 80198b8:	3fe921fb 	.word	0x3fe921fb
 80198bc:	7fefffff 	.word	0x7fefffff

080198c0 <round>:
 80198c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198c2:	ec57 6b10 	vmov	r6, r7, d0
 80198c6:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80198ca:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80198ce:	2c13      	cmp	r4, #19
 80198d0:	463b      	mov	r3, r7
 80198d2:	463d      	mov	r5, r7
 80198d4:	dc17      	bgt.n	8019906 <round+0x46>
 80198d6:	2c00      	cmp	r4, #0
 80198d8:	da09      	bge.n	80198ee <round+0x2e>
 80198da:	3401      	adds	r4, #1
 80198dc:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80198e0:	d103      	bne.n	80198ea <round+0x2a>
 80198e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80198e6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80198ea:	2100      	movs	r1, #0
 80198ec:	e02c      	b.n	8019948 <round+0x88>
 80198ee:	4a18      	ldr	r2, [pc, #96]	; (8019950 <round+0x90>)
 80198f0:	4122      	asrs	r2, r4
 80198f2:	4217      	tst	r7, r2
 80198f4:	d100      	bne.n	80198f8 <round+0x38>
 80198f6:	b19e      	cbz	r6, 8019920 <round+0x60>
 80198f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80198fc:	4123      	asrs	r3, r4
 80198fe:	442b      	add	r3, r5
 8019900:	ea23 0302 	bic.w	r3, r3, r2
 8019904:	e7f1      	b.n	80198ea <round+0x2a>
 8019906:	2c33      	cmp	r4, #51	; 0x33
 8019908:	dd0d      	ble.n	8019926 <round+0x66>
 801990a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801990e:	d107      	bne.n	8019920 <round+0x60>
 8019910:	4630      	mov	r0, r6
 8019912:	4639      	mov	r1, r7
 8019914:	ee10 2a10 	vmov	r2, s0
 8019918:	f7e6 fcb8 	bl	800028c <__adddf3>
 801991c:	4606      	mov	r6, r0
 801991e:	460f      	mov	r7, r1
 8019920:	ec47 6b10 	vmov	d0, r6, r7
 8019924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019926:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 801992a:	f04f 30ff 	mov.w	r0, #4294967295
 801992e:	40d0      	lsrs	r0, r2
 8019930:	4206      	tst	r6, r0
 8019932:	d0f5      	beq.n	8019920 <round+0x60>
 8019934:	2201      	movs	r2, #1
 8019936:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801993a:	fa02 f404 	lsl.w	r4, r2, r4
 801993e:	1931      	adds	r1, r6, r4
 8019940:	bf28      	it	cs
 8019942:	189b      	addcs	r3, r3, r2
 8019944:	ea21 0100 	bic.w	r1, r1, r0
 8019948:	461f      	mov	r7, r3
 801994a:	460e      	mov	r6, r1
 801994c:	e7e8      	b.n	8019920 <round+0x60>
 801994e:	bf00      	nop
 8019950:	000fffff 	.word	0x000fffff
 8019954:	00000000 	.word	0x00000000

08019958 <sin>:
 8019958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801995a:	ec51 0b10 	vmov	r0, r1, d0
 801995e:	4a20      	ldr	r2, [pc, #128]	; (80199e0 <sin+0x88>)
 8019960:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019964:	4293      	cmp	r3, r2
 8019966:	dc07      	bgt.n	8019978 <sin+0x20>
 8019968:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80199d8 <sin+0x80>
 801996c:	2000      	movs	r0, #0
 801996e:	f001 f863 	bl	801aa38 <__kernel_sin>
 8019972:	ec51 0b10 	vmov	r0, r1, d0
 8019976:	e007      	b.n	8019988 <sin+0x30>
 8019978:	4a1a      	ldr	r2, [pc, #104]	; (80199e4 <sin+0x8c>)
 801997a:	4293      	cmp	r3, r2
 801997c:	dd09      	ble.n	8019992 <sin+0x3a>
 801997e:	ee10 2a10 	vmov	r2, s0
 8019982:	460b      	mov	r3, r1
 8019984:	f7e6 fc80 	bl	8000288 <__aeabi_dsub>
 8019988:	ec41 0b10 	vmov	d0, r0, r1
 801998c:	b005      	add	sp, #20
 801998e:	f85d fb04 	ldr.w	pc, [sp], #4
 8019992:	4668      	mov	r0, sp
 8019994:	f000 f9a4 	bl	8019ce0 <__ieee754_rem_pio2>
 8019998:	f000 0003 	and.w	r0, r0, #3
 801999c:	2801      	cmp	r0, #1
 801999e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80199a2:	ed9d 0b00 	vldr	d0, [sp]
 80199a6:	d004      	beq.n	80199b2 <sin+0x5a>
 80199a8:	2802      	cmp	r0, #2
 80199aa:	d005      	beq.n	80199b8 <sin+0x60>
 80199ac:	b970      	cbnz	r0, 80199cc <sin+0x74>
 80199ae:	2001      	movs	r0, #1
 80199b0:	e7dd      	b.n	801996e <sin+0x16>
 80199b2:	f000 fc39 	bl	801a228 <__kernel_cos>
 80199b6:	e7dc      	b.n	8019972 <sin+0x1a>
 80199b8:	2001      	movs	r0, #1
 80199ba:	f001 f83d 	bl	801aa38 <__kernel_sin>
 80199be:	ec53 2b10 	vmov	r2, r3, d0
 80199c2:	ee10 0a10 	vmov	r0, s0
 80199c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80199ca:	e7dd      	b.n	8019988 <sin+0x30>
 80199cc:	f000 fc2c 	bl	801a228 <__kernel_cos>
 80199d0:	e7f5      	b.n	80199be <sin+0x66>
 80199d2:	bf00      	nop
 80199d4:	f3af 8000 	nop.w
	...
 80199e0:	3fe921fb 	.word	0x3fe921fb
 80199e4:	7fefffff 	.word	0x7fefffff

080199e8 <ceilf>:
 80199e8:	ee10 3a10 	vmov	r3, s0
 80199ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80199f0:	0dca      	lsrs	r2, r1, #23
 80199f2:	3a7f      	subs	r2, #127	; 0x7f
 80199f4:	2a16      	cmp	r2, #22
 80199f6:	dc2a      	bgt.n	8019a4e <ceilf+0x66>
 80199f8:	2a00      	cmp	r2, #0
 80199fa:	da11      	bge.n	8019a20 <ceilf+0x38>
 80199fc:	eddf 7a18 	vldr	s15, [pc, #96]	; 8019a60 <ceilf+0x78>
 8019a00:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019a04:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a0c:	dd05      	ble.n	8019a1a <ceilf+0x32>
 8019a0e:	2b00      	cmp	r3, #0
 8019a10:	db23      	blt.n	8019a5a <ceilf+0x72>
 8019a12:	2900      	cmp	r1, #0
 8019a14:	bf18      	it	ne
 8019a16:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8019a1a:	ee00 3a10 	vmov	s0, r3
 8019a1e:	4770      	bx	lr
 8019a20:	4910      	ldr	r1, [pc, #64]	; (8019a64 <ceilf+0x7c>)
 8019a22:	4111      	asrs	r1, r2
 8019a24:	420b      	tst	r3, r1
 8019a26:	d0fa      	beq.n	8019a1e <ceilf+0x36>
 8019a28:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8019a60 <ceilf+0x78>
 8019a2c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019a30:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a38:	ddef      	ble.n	8019a1a <ceilf+0x32>
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	bfc2      	ittt	gt
 8019a3e:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8019a42:	fa40 f202 	asrgt.w	r2, r0, r2
 8019a46:	189b      	addgt	r3, r3, r2
 8019a48:	ea23 0301 	bic.w	r3, r3, r1
 8019a4c:	e7e5      	b.n	8019a1a <ceilf+0x32>
 8019a4e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019a52:	d3e4      	bcc.n	8019a1e <ceilf+0x36>
 8019a54:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019a58:	4770      	bx	lr
 8019a5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8019a5e:	e7dc      	b.n	8019a1a <ceilf+0x32>
 8019a60:	7149f2ca 	.word	0x7149f2ca
 8019a64:	007fffff 	.word	0x007fffff

08019a68 <atan2>:
 8019a68:	f000 b85a 	b.w	8019b20 <__ieee754_atan2>

08019a6c <sqrt>:
 8019a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019a70:	ed2d 8b02 	vpush	{d8}
 8019a74:	b08b      	sub	sp, #44	; 0x2c
 8019a76:	ec55 4b10 	vmov	r4, r5, d0
 8019a7a:	f000 fb23 	bl	801a0c4 <__ieee754_sqrt>
 8019a7e:	4b26      	ldr	r3, [pc, #152]	; (8019b18 <sqrt+0xac>)
 8019a80:	eeb0 8a40 	vmov.f32	s16, s0
 8019a84:	eef0 8a60 	vmov.f32	s17, s1
 8019a88:	f993 6000 	ldrsb.w	r6, [r3]
 8019a8c:	1c73      	adds	r3, r6, #1
 8019a8e:	d02a      	beq.n	8019ae6 <sqrt+0x7a>
 8019a90:	4622      	mov	r2, r4
 8019a92:	462b      	mov	r3, r5
 8019a94:	4620      	mov	r0, r4
 8019a96:	4629      	mov	r1, r5
 8019a98:	f7e7 f848 	bl	8000b2c <__aeabi_dcmpun>
 8019a9c:	4607      	mov	r7, r0
 8019a9e:	bb10      	cbnz	r0, 8019ae6 <sqrt+0x7a>
 8019aa0:	f04f 0800 	mov.w	r8, #0
 8019aa4:	f04f 0900 	mov.w	r9, #0
 8019aa8:	4642      	mov	r2, r8
 8019aaa:	464b      	mov	r3, r9
 8019aac:	4620      	mov	r0, r4
 8019aae:	4629      	mov	r1, r5
 8019ab0:	f7e7 f814 	bl	8000adc <__aeabi_dcmplt>
 8019ab4:	b1b8      	cbz	r0, 8019ae6 <sqrt+0x7a>
 8019ab6:	2301      	movs	r3, #1
 8019ab8:	9300      	str	r3, [sp, #0]
 8019aba:	4b18      	ldr	r3, [pc, #96]	; (8019b1c <sqrt+0xb0>)
 8019abc:	9301      	str	r3, [sp, #4]
 8019abe:	9708      	str	r7, [sp, #32]
 8019ac0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8019ac4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8019ac8:	b9b6      	cbnz	r6, 8019af8 <sqrt+0x8c>
 8019aca:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8019ace:	4668      	mov	r0, sp
 8019ad0:	f001 fa9e 	bl	801b010 <matherr>
 8019ad4:	b1d0      	cbz	r0, 8019b0c <sqrt+0xa0>
 8019ad6:	9b08      	ldr	r3, [sp, #32]
 8019ad8:	b11b      	cbz	r3, 8019ae2 <sqrt+0x76>
 8019ada:	f7fc f885 	bl	8015be8 <__errno>
 8019ade:	9b08      	ldr	r3, [sp, #32]
 8019ae0:	6003      	str	r3, [r0, #0]
 8019ae2:	ed9d 8b06 	vldr	d8, [sp, #24]
 8019ae6:	eeb0 0a48 	vmov.f32	s0, s16
 8019aea:	eef0 0a68 	vmov.f32	s1, s17
 8019aee:	b00b      	add	sp, #44	; 0x2c
 8019af0:	ecbd 8b02 	vpop	{d8}
 8019af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019af8:	4642      	mov	r2, r8
 8019afa:	464b      	mov	r3, r9
 8019afc:	4640      	mov	r0, r8
 8019afe:	4649      	mov	r1, r9
 8019b00:	f7e6 fea4 	bl	800084c <__aeabi_ddiv>
 8019b04:	2e02      	cmp	r6, #2
 8019b06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019b0a:	d1e0      	bne.n	8019ace <sqrt+0x62>
 8019b0c:	f7fc f86c 	bl	8015be8 <__errno>
 8019b10:	2321      	movs	r3, #33	; 0x21
 8019b12:	6003      	str	r3, [r0, #0]
 8019b14:	e7df      	b.n	8019ad6 <sqrt+0x6a>
 8019b16:	bf00      	nop
 8019b18:	20000b7c 	.word	0x20000b7c
 8019b1c:	0801b6d6 	.word	0x0801b6d6

08019b20 <__ieee754_atan2>:
 8019b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b24:	ec57 6b11 	vmov	r6, r7, d1
 8019b28:	4273      	negs	r3, r6
 8019b2a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8019b2e:	4333      	orrs	r3, r6
 8019b30:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8019cd8 <__ieee754_atan2+0x1b8>
 8019b34:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8019b38:	4573      	cmp	r3, lr
 8019b3a:	ec51 0b10 	vmov	r0, r1, d0
 8019b3e:	ee11 8a10 	vmov	r8, s2
 8019b42:	d80a      	bhi.n	8019b5a <__ieee754_atan2+0x3a>
 8019b44:	4244      	negs	r4, r0
 8019b46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019b4a:	4304      	orrs	r4, r0
 8019b4c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8019b50:	4574      	cmp	r4, lr
 8019b52:	468c      	mov	ip, r1
 8019b54:	ee10 9a10 	vmov	r9, s0
 8019b58:	d907      	bls.n	8019b6a <__ieee754_atan2+0x4a>
 8019b5a:	4632      	mov	r2, r6
 8019b5c:	463b      	mov	r3, r7
 8019b5e:	f7e6 fb95 	bl	800028c <__adddf3>
 8019b62:	ec41 0b10 	vmov	d0, r0, r1
 8019b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b6a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8019b6e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019b72:	4334      	orrs	r4, r6
 8019b74:	d103      	bne.n	8019b7e <__ieee754_atan2+0x5e>
 8019b76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b7a:	f001 b819 	b.w	801abb0 <atan>
 8019b7e:	17bc      	asrs	r4, r7, #30
 8019b80:	f004 0402 	and.w	r4, r4, #2
 8019b84:	ea53 0909 	orrs.w	r9, r3, r9
 8019b88:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8019b8c:	d107      	bne.n	8019b9e <__ieee754_atan2+0x7e>
 8019b8e:	2c02      	cmp	r4, #2
 8019b90:	d073      	beq.n	8019c7a <__ieee754_atan2+0x15a>
 8019b92:	2c03      	cmp	r4, #3
 8019b94:	d1e5      	bne.n	8019b62 <__ieee754_atan2+0x42>
 8019b96:	a13e      	add	r1, pc, #248	; (adr r1, 8019c90 <__ieee754_atan2+0x170>)
 8019b98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019b9c:	e7e1      	b.n	8019b62 <__ieee754_atan2+0x42>
 8019b9e:	ea52 0808 	orrs.w	r8, r2, r8
 8019ba2:	d106      	bne.n	8019bb2 <__ieee754_atan2+0x92>
 8019ba4:	f1bc 0f00 	cmp.w	ip, #0
 8019ba8:	da6b      	bge.n	8019c82 <__ieee754_atan2+0x162>
 8019baa:	a13b      	add	r1, pc, #236	; (adr r1, 8019c98 <__ieee754_atan2+0x178>)
 8019bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019bb0:	e7d7      	b.n	8019b62 <__ieee754_atan2+0x42>
 8019bb2:	4572      	cmp	r2, lr
 8019bb4:	d120      	bne.n	8019bf8 <__ieee754_atan2+0xd8>
 8019bb6:	4293      	cmp	r3, r2
 8019bb8:	d111      	bne.n	8019bde <__ieee754_atan2+0xbe>
 8019bba:	2c02      	cmp	r4, #2
 8019bbc:	d007      	beq.n	8019bce <__ieee754_atan2+0xae>
 8019bbe:	2c03      	cmp	r4, #3
 8019bc0:	d009      	beq.n	8019bd6 <__ieee754_atan2+0xb6>
 8019bc2:	2c01      	cmp	r4, #1
 8019bc4:	d155      	bne.n	8019c72 <__ieee754_atan2+0x152>
 8019bc6:	a136      	add	r1, pc, #216	; (adr r1, 8019ca0 <__ieee754_atan2+0x180>)
 8019bc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019bcc:	e7c9      	b.n	8019b62 <__ieee754_atan2+0x42>
 8019bce:	a136      	add	r1, pc, #216	; (adr r1, 8019ca8 <__ieee754_atan2+0x188>)
 8019bd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019bd4:	e7c5      	b.n	8019b62 <__ieee754_atan2+0x42>
 8019bd6:	a136      	add	r1, pc, #216	; (adr r1, 8019cb0 <__ieee754_atan2+0x190>)
 8019bd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019bdc:	e7c1      	b.n	8019b62 <__ieee754_atan2+0x42>
 8019bde:	2c02      	cmp	r4, #2
 8019be0:	d04b      	beq.n	8019c7a <__ieee754_atan2+0x15a>
 8019be2:	2c03      	cmp	r4, #3
 8019be4:	d0d7      	beq.n	8019b96 <__ieee754_atan2+0x76>
 8019be6:	2c01      	cmp	r4, #1
 8019be8:	f04f 0000 	mov.w	r0, #0
 8019bec:	d102      	bne.n	8019bf4 <__ieee754_atan2+0xd4>
 8019bee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019bf2:	e7b6      	b.n	8019b62 <__ieee754_atan2+0x42>
 8019bf4:	2100      	movs	r1, #0
 8019bf6:	e7b4      	b.n	8019b62 <__ieee754_atan2+0x42>
 8019bf8:	4573      	cmp	r3, lr
 8019bfa:	d0d3      	beq.n	8019ba4 <__ieee754_atan2+0x84>
 8019bfc:	1a9b      	subs	r3, r3, r2
 8019bfe:	151b      	asrs	r3, r3, #20
 8019c00:	2b3c      	cmp	r3, #60	; 0x3c
 8019c02:	dc1e      	bgt.n	8019c42 <__ieee754_atan2+0x122>
 8019c04:	2f00      	cmp	r7, #0
 8019c06:	da01      	bge.n	8019c0c <__ieee754_atan2+0xec>
 8019c08:	333c      	adds	r3, #60	; 0x3c
 8019c0a:	db1e      	blt.n	8019c4a <__ieee754_atan2+0x12a>
 8019c0c:	4632      	mov	r2, r6
 8019c0e:	463b      	mov	r3, r7
 8019c10:	f7e6 fe1c 	bl	800084c <__aeabi_ddiv>
 8019c14:	ec41 0b10 	vmov	d0, r0, r1
 8019c18:	f001 f96a 	bl	801aef0 <fabs>
 8019c1c:	f000 ffc8 	bl	801abb0 <atan>
 8019c20:	ec51 0b10 	vmov	r0, r1, d0
 8019c24:	2c01      	cmp	r4, #1
 8019c26:	d013      	beq.n	8019c50 <__ieee754_atan2+0x130>
 8019c28:	2c02      	cmp	r4, #2
 8019c2a:	d015      	beq.n	8019c58 <__ieee754_atan2+0x138>
 8019c2c:	2c00      	cmp	r4, #0
 8019c2e:	d098      	beq.n	8019b62 <__ieee754_atan2+0x42>
 8019c30:	a321      	add	r3, pc, #132	; (adr r3, 8019cb8 <__ieee754_atan2+0x198>)
 8019c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c36:	f7e6 fb27 	bl	8000288 <__aeabi_dsub>
 8019c3a:	a321      	add	r3, pc, #132	; (adr r3, 8019cc0 <__ieee754_atan2+0x1a0>)
 8019c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c40:	e014      	b.n	8019c6c <__ieee754_atan2+0x14c>
 8019c42:	a121      	add	r1, pc, #132	; (adr r1, 8019cc8 <__ieee754_atan2+0x1a8>)
 8019c44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019c48:	e7ec      	b.n	8019c24 <__ieee754_atan2+0x104>
 8019c4a:	2000      	movs	r0, #0
 8019c4c:	2100      	movs	r1, #0
 8019c4e:	e7e9      	b.n	8019c24 <__ieee754_atan2+0x104>
 8019c50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019c54:	4619      	mov	r1, r3
 8019c56:	e784      	b.n	8019b62 <__ieee754_atan2+0x42>
 8019c58:	a317      	add	r3, pc, #92	; (adr r3, 8019cb8 <__ieee754_atan2+0x198>)
 8019c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c5e:	f7e6 fb13 	bl	8000288 <__aeabi_dsub>
 8019c62:	4602      	mov	r2, r0
 8019c64:	460b      	mov	r3, r1
 8019c66:	a116      	add	r1, pc, #88	; (adr r1, 8019cc0 <__ieee754_atan2+0x1a0>)
 8019c68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019c6c:	f7e6 fb0c 	bl	8000288 <__aeabi_dsub>
 8019c70:	e777      	b.n	8019b62 <__ieee754_atan2+0x42>
 8019c72:	a117      	add	r1, pc, #92	; (adr r1, 8019cd0 <__ieee754_atan2+0x1b0>)
 8019c74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019c78:	e773      	b.n	8019b62 <__ieee754_atan2+0x42>
 8019c7a:	a111      	add	r1, pc, #68	; (adr r1, 8019cc0 <__ieee754_atan2+0x1a0>)
 8019c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019c80:	e76f      	b.n	8019b62 <__ieee754_atan2+0x42>
 8019c82:	a111      	add	r1, pc, #68	; (adr r1, 8019cc8 <__ieee754_atan2+0x1a8>)
 8019c84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019c88:	e76b      	b.n	8019b62 <__ieee754_atan2+0x42>
 8019c8a:	bf00      	nop
 8019c8c:	f3af 8000 	nop.w
 8019c90:	54442d18 	.word	0x54442d18
 8019c94:	c00921fb 	.word	0xc00921fb
 8019c98:	54442d18 	.word	0x54442d18
 8019c9c:	bff921fb 	.word	0xbff921fb
 8019ca0:	54442d18 	.word	0x54442d18
 8019ca4:	bfe921fb 	.word	0xbfe921fb
 8019ca8:	7f3321d2 	.word	0x7f3321d2
 8019cac:	4002d97c 	.word	0x4002d97c
 8019cb0:	7f3321d2 	.word	0x7f3321d2
 8019cb4:	c002d97c 	.word	0xc002d97c
 8019cb8:	33145c07 	.word	0x33145c07
 8019cbc:	3ca1a626 	.word	0x3ca1a626
 8019cc0:	54442d18 	.word	0x54442d18
 8019cc4:	400921fb 	.word	0x400921fb
 8019cc8:	54442d18 	.word	0x54442d18
 8019ccc:	3ff921fb 	.word	0x3ff921fb
 8019cd0:	54442d18 	.word	0x54442d18
 8019cd4:	3fe921fb 	.word	0x3fe921fb
 8019cd8:	7ff00000 	.word	0x7ff00000
 8019cdc:	00000000 	.word	0x00000000

08019ce0 <__ieee754_rem_pio2>:
 8019ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ce4:	ec57 6b10 	vmov	r6, r7, d0
 8019ce8:	4bc3      	ldr	r3, [pc, #780]	; (8019ff8 <__ieee754_rem_pio2+0x318>)
 8019cea:	b08d      	sub	sp, #52	; 0x34
 8019cec:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8019cf0:	4598      	cmp	r8, r3
 8019cf2:	4604      	mov	r4, r0
 8019cf4:	9704      	str	r7, [sp, #16]
 8019cf6:	dc07      	bgt.n	8019d08 <__ieee754_rem_pio2+0x28>
 8019cf8:	2200      	movs	r2, #0
 8019cfa:	2300      	movs	r3, #0
 8019cfc:	ed84 0b00 	vstr	d0, [r4]
 8019d00:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019d04:	2500      	movs	r5, #0
 8019d06:	e027      	b.n	8019d58 <__ieee754_rem_pio2+0x78>
 8019d08:	4bbc      	ldr	r3, [pc, #752]	; (8019ffc <__ieee754_rem_pio2+0x31c>)
 8019d0a:	4598      	cmp	r8, r3
 8019d0c:	dc75      	bgt.n	8019dfa <__ieee754_rem_pio2+0x11a>
 8019d0e:	9b04      	ldr	r3, [sp, #16]
 8019d10:	4dbb      	ldr	r5, [pc, #748]	; (801a000 <__ieee754_rem_pio2+0x320>)
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	ee10 0a10 	vmov	r0, s0
 8019d18:	a3a9      	add	r3, pc, #676	; (adr r3, 8019fc0 <__ieee754_rem_pio2+0x2e0>)
 8019d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d1e:	4639      	mov	r1, r7
 8019d20:	dd36      	ble.n	8019d90 <__ieee754_rem_pio2+0xb0>
 8019d22:	f7e6 fab1 	bl	8000288 <__aeabi_dsub>
 8019d26:	45a8      	cmp	r8, r5
 8019d28:	4606      	mov	r6, r0
 8019d2a:	460f      	mov	r7, r1
 8019d2c:	d018      	beq.n	8019d60 <__ieee754_rem_pio2+0x80>
 8019d2e:	a3a6      	add	r3, pc, #664	; (adr r3, 8019fc8 <__ieee754_rem_pio2+0x2e8>)
 8019d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d34:	f7e6 faa8 	bl	8000288 <__aeabi_dsub>
 8019d38:	4602      	mov	r2, r0
 8019d3a:	460b      	mov	r3, r1
 8019d3c:	e9c4 2300 	strd	r2, r3, [r4]
 8019d40:	4630      	mov	r0, r6
 8019d42:	4639      	mov	r1, r7
 8019d44:	f7e6 faa0 	bl	8000288 <__aeabi_dsub>
 8019d48:	a39f      	add	r3, pc, #636	; (adr r3, 8019fc8 <__ieee754_rem_pio2+0x2e8>)
 8019d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d4e:	f7e6 fa9b 	bl	8000288 <__aeabi_dsub>
 8019d52:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019d56:	2501      	movs	r5, #1
 8019d58:	4628      	mov	r0, r5
 8019d5a:	b00d      	add	sp, #52	; 0x34
 8019d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d60:	a39b      	add	r3, pc, #620	; (adr r3, 8019fd0 <__ieee754_rem_pio2+0x2f0>)
 8019d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d66:	f7e6 fa8f 	bl	8000288 <__aeabi_dsub>
 8019d6a:	a39b      	add	r3, pc, #620	; (adr r3, 8019fd8 <__ieee754_rem_pio2+0x2f8>)
 8019d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d70:	4606      	mov	r6, r0
 8019d72:	460f      	mov	r7, r1
 8019d74:	f7e6 fa88 	bl	8000288 <__aeabi_dsub>
 8019d78:	4602      	mov	r2, r0
 8019d7a:	460b      	mov	r3, r1
 8019d7c:	e9c4 2300 	strd	r2, r3, [r4]
 8019d80:	4630      	mov	r0, r6
 8019d82:	4639      	mov	r1, r7
 8019d84:	f7e6 fa80 	bl	8000288 <__aeabi_dsub>
 8019d88:	a393      	add	r3, pc, #588	; (adr r3, 8019fd8 <__ieee754_rem_pio2+0x2f8>)
 8019d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d8e:	e7de      	b.n	8019d4e <__ieee754_rem_pio2+0x6e>
 8019d90:	f7e6 fa7c 	bl	800028c <__adddf3>
 8019d94:	45a8      	cmp	r8, r5
 8019d96:	4606      	mov	r6, r0
 8019d98:	460f      	mov	r7, r1
 8019d9a:	d016      	beq.n	8019dca <__ieee754_rem_pio2+0xea>
 8019d9c:	a38a      	add	r3, pc, #552	; (adr r3, 8019fc8 <__ieee754_rem_pio2+0x2e8>)
 8019d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019da2:	f7e6 fa73 	bl	800028c <__adddf3>
 8019da6:	4602      	mov	r2, r0
 8019da8:	460b      	mov	r3, r1
 8019daa:	e9c4 2300 	strd	r2, r3, [r4]
 8019dae:	4630      	mov	r0, r6
 8019db0:	4639      	mov	r1, r7
 8019db2:	f7e6 fa69 	bl	8000288 <__aeabi_dsub>
 8019db6:	a384      	add	r3, pc, #528	; (adr r3, 8019fc8 <__ieee754_rem_pio2+0x2e8>)
 8019db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dbc:	f7e6 fa66 	bl	800028c <__adddf3>
 8019dc0:	f04f 35ff 	mov.w	r5, #4294967295
 8019dc4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019dc8:	e7c6      	b.n	8019d58 <__ieee754_rem_pio2+0x78>
 8019dca:	a381      	add	r3, pc, #516	; (adr r3, 8019fd0 <__ieee754_rem_pio2+0x2f0>)
 8019dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dd0:	f7e6 fa5c 	bl	800028c <__adddf3>
 8019dd4:	a380      	add	r3, pc, #512	; (adr r3, 8019fd8 <__ieee754_rem_pio2+0x2f8>)
 8019dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dda:	4606      	mov	r6, r0
 8019ddc:	460f      	mov	r7, r1
 8019dde:	f7e6 fa55 	bl	800028c <__adddf3>
 8019de2:	4602      	mov	r2, r0
 8019de4:	460b      	mov	r3, r1
 8019de6:	e9c4 2300 	strd	r2, r3, [r4]
 8019dea:	4630      	mov	r0, r6
 8019dec:	4639      	mov	r1, r7
 8019dee:	f7e6 fa4b 	bl	8000288 <__aeabi_dsub>
 8019df2:	a379      	add	r3, pc, #484	; (adr r3, 8019fd8 <__ieee754_rem_pio2+0x2f8>)
 8019df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019df8:	e7e0      	b.n	8019dbc <__ieee754_rem_pio2+0xdc>
 8019dfa:	4b82      	ldr	r3, [pc, #520]	; (801a004 <__ieee754_rem_pio2+0x324>)
 8019dfc:	4598      	cmp	r8, r3
 8019dfe:	f300 80d0 	bgt.w	8019fa2 <__ieee754_rem_pio2+0x2c2>
 8019e02:	f001 f875 	bl	801aef0 <fabs>
 8019e06:	ec57 6b10 	vmov	r6, r7, d0
 8019e0a:	ee10 0a10 	vmov	r0, s0
 8019e0e:	a374      	add	r3, pc, #464	; (adr r3, 8019fe0 <__ieee754_rem_pio2+0x300>)
 8019e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e14:	4639      	mov	r1, r7
 8019e16:	f7e6 fbef 	bl	80005f8 <__aeabi_dmul>
 8019e1a:	2200      	movs	r2, #0
 8019e1c:	4b7a      	ldr	r3, [pc, #488]	; (801a008 <__ieee754_rem_pio2+0x328>)
 8019e1e:	f7e6 fa35 	bl	800028c <__adddf3>
 8019e22:	f7e6 fe99 	bl	8000b58 <__aeabi_d2iz>
 8019e26:	4605      	mov	r5, r0
 8019e28:	f7e6 fb7c 	bl	8000524 <__aeabi_i2d>
 8019e2c:	a364      	add	r3, pc, #400	; (adr r3, 8019fc0 <__ieee754_rem_pio2+0x2e0>)
 8019e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019e36:	f7e6 fbdf 	bl	80005f8 <__aeabi_dmul>
 8019e3a:	4602      	mov	r2, r0
 8019e3c:	460b      	mov	r3, r1
 8019e3e:	4630      	mov	r0, r6
 8019e40:	4639      	mov	r1, r7
 8019e42:	f7e6 fa21 	bl	8000288 <__aeabi_dsub>
 8019e46:	a360      	add	r3, pc, #384	; (adr r3, 8019fc8 <__ieee754_rem_pio2+0x2e8>)
 8019e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e4c:	4682      	mov	sl, r0
 8019e4e:	468b      	mov	fp, r1
 8019e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019e54:	f7e6 fbd0 	bl	80005f8 <__aeabi_dmul>
 8019e58:	2d1f      	cmp	r5, #31
 8019e5a:	4606      	mov	r6, r0
 8019e5c:	460f      	mov	r7, r1
 8019e5e:	dc0c      	bgt.n	8019e7a <__ieee754_rem_pio2+0x19a>
 8019e60:	1e6a      	subs	r2, r5, #1
 8019e62:	4b6a      	ldr	r3, [pc, #424]	; (801a00c <__ieee754_rem_pio2+0x32c>)
 8019e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019e68:	4543      	cmp	r3, r8
 8019e6a:	d006      	beq.n	8019e7a <__ieee754_rem_pio2+0x19a>
 8019e6c:	4632      	mov	r2, r6
 8019e6e:	463b      	mov	r3, r7
 8019e70:	4650      	mov	r0, sl
 8019e72:	4659      	mov	r1, fp
 8019e74:	f7e6 fa08 	bl	8000288 <__aeabi_dsub>
 8019e78:	e00e      	b.n	8019e98 <__ieee754_rem_pio2+0x1b8>
 8019e7a:	4632      	mov	r2, r6
 8019e7c:	463b      	mov	r3, r7
 8019e7e:	4650      	mov	r0, sl
 8019e80:	4659      	mov	r1, fp
 8019e82:	f7e6 fa01 	bl	8000288 <__aeabi_dsub>
 8019e86:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019e8a:	9305      	str	r3, [sp, #20]
 8019e8c:	9a05      	ldr	r2, [sp, #20]
 8019e8e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019e92:	1ad3      	subs	r3, r2, r3
 8019e94:	2b10      	cmp	r3, #16
 8019e96:	dc02      	bgt.n	8019e9e <__ieee754_rem_pio2+0x1be>
 8019e98:	e9c4 0100 	strd	r0, r1, [r4]
 8019e9c:	e039      	b.n	8019f12 <__ieee754_rem_pio2+0x232>
 8019e9e:	a34c      	add	r3, pc, #304	; (adr r3, 8019fd0 <__ieee754_rem_pio2+0x2f0>)
 8019ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ea4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019ea8:	f7e6 fba6 	bl	80005f8 <__aeabi_dmul>
 8019eac:	4606      	mov	r6, r0
 8019eae:	460f      	mov	r7, r1
 8019eb0:	4602      	mov	r2, r0
 8019eb2:	460b      	mov	r3, r1
 8019eb4:	4650      	mov	r0, sl
 8019eb6:	4659      	mov	r1, fp
 8019eb8:	f7e6 f9e6 	bl	8000288 <__aeabi_dsub>
 8019ebc:	4602      	mov	r2, r0
 8019ebe:	460b      	mov	r3, r1
 8019ec0:	4680      	mov	r8, r0
 8019ec2:	4689      	mov	r9, r1
 8019ec4:	4650      	mov	r0, sl
 8019ec6:	4659      	mov	r1, fp
 8019ec8:	f7e6 f9de 	bl	8000288 <__aeabi_dsub>
 8019ecc:	4632      	mov	r2, r6
 8019ece:	463b      	mov	r3, r7
 8019ed0:	f7e6 f9da 	bl	8000288 <__aeabi_dsub>
 8019ed4:	a340      	add	r3, pc, #256	; (adr r3, 8019fd8 <__ieee754_rem_pio2+0x2f8>)
 8019ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eda:	4606      	mov	r6, r0
 8019edc:	460f      	mov	r7, r1
 8019ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019ee2:	f7e6 fb89 	bl	80005f8 <__aeabi_dmul>
 8019ee6:	4632      	mov	r2, r6
 8019ee8:	463b      	mov	r3, r7
 8019eea:	f7e6 f9cd 	bl	8000288 <__aeabi_dsub>
 8019eee:	4602      	mov	r2, r0
 8019ef0:	460b      	mov	r3, r1
 8019ef2:	4606      	mov	r6, r0
 8019ef4:	460f      	mov	r7, r1
 8019ef6:	4640      	mov	r0, r8
 8019ef8:	4649      	mov	r1, r9
 8019efa:	f7e6 f9c5 	bl	8000288 <__aeabi_dsub>
 8019efe:	9a05      	ldr	r2, [sp, #20]
 8019f00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019f04:	1ad3      	subs	r3, r2, r3
 8019f06:	2b31      	cmp	r3, #49	; 0x31
 8019f08:	dc20      	bgt.n	8019f4c <__ieee754_rem_pio2+0x26c>
 8019f0a:	e9c4 0100 	strd	r0, r1, [r4]
 8019f0e:	46c2      	mov	sl, r8
 8019f10:	46cb      	mov	fp, r9
 8019f12:	e9d4 8900 	ldrd	r8, r9, [r4]
 8019f16:	4650      	mov	r0, sl
 8019f18:	4642      	mov	r2, r8
 8019f1a:	464b      	mov	r3, r9
 8019f1c:	4659      	mov	r1, fp
 8019f1e:	f7e6 f9b3 	bl	8000288 <__aeabi_dsub>
 8019f22:	463b      	mov	r3, r7
 8019f24:	4632      	mov	r2, r6
 8019f26:	f7e6 f9af 	bl	8000288 <__aeabi_dsub>
 8019f2a:	9b04      	ldr	r3, [sp, #16]
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019f32:	f6bf af11 	bge.w	8019d58 <__ieee754_rem_pio2+0x78>
 8019f36:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8019f3a:	6063      	str	r3, [r4, #4]
 8019f3c:	f8c4 8000 	str.w	r8, [r4]
 8019f40:	60a0      	str	r0, [r4, #8]
 8019f42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019f46:	60e3      	str	r3, [r4, #12]
 8019f48:	426d      	negs	r5, r5
 8019f4a:	e705      	b.n	8019d58 <__ieee754_rem_pio2+0x78>
 8019f4c:	a326      	add	r3, pc, #152	; (adr r3, 8019fe8 <__ieee754_rem_pio2+0x308>)
 8019f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019f56:	f7e6 fb4f 	bl	80005f8 <__aeabi_dmul>
 8019f5a:	4606      	mov	r6, r0
 8019f5c:	460f      	mov	r7, r1
 8019f5e:	4602      	mov	r2, r0
 8019f60:	460b      	mov	r3, r1
 8019f62:	4640      	mov	r0, r8
 8019f64:	4649      	mov	r1, r9
 8019f66:	f7e6 f98f 	bl	8000288 <__aeabi_dsub>
 8019f6a:	4602      	mov	r2, r0
 8019f6c:	460b      	mov	r3, r1
 8019f6e:	4682      	mov	sl, r0
 8019f70:	468b      	mov	fp, r1
 8019f72:	4640      	mov	r0, r8
 8019f74:	4649      	mov	r1, r9
 8019f76:	f7e6 f987 	bl	8000288 <__aeabi_dsub>
 8019f7a:	4632      	mov	r2, r6
 8019f7c:	463b      	mov	r3, r7
 8019f7e:	f7e6 f983 	bl	8000288 <__aeabi_dsub>
 8019f82:	a31b      	add	r3, pc, #108	; (adr r3, 8019ff0 <__ieee754_rem_pio2+0x310>)
 8019f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f88:	4606      	mov	r6, r0
 8019f8a:	460f      	mov	r7, r1
 8019f8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019f90:	f7e6 fb32 	bl	80005f8 <__aeabi_dmul>
 8019f94:	4632      	mov	r2, r6
 8019f96:	463b      	mov	r3, r7
 8019f98:	f7e6 f976 	bl	8000288 <__aeabi_dsub>
 8019f9c:	4606      	mov	r6, r0
 8019f9e:	460f      	mov	r7, r1
 8019fa0:	e764      	b.n	8019e6c <__ieee754_rem_pio2+0x18c>
 8019fa2:	4b1b      	ldr	r3, [pc, #108]	; (801a010 <__ieee754_rem_pio2+0x330>)
 8019fa4:	4598      	cmp	r8, r3
 8019fa6:	dd35      	ble.n	801a014 <__ieee754_rem_pio2+0x334>
 8019fa8:	ee10 2a10 	vmov	r2, s0
 8019fac:	463b      	mov	r3, r7
 8019fae:	4630      	mov	r0, r6
 8019fb0:	4639      	mov	r1, r7
 8019fb2:	f7e6 f969 	bl	8000288 <__aeabi_dsub>
 8019fb6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019fba:	e9c4 0100 	strd	r0, r1, [r4]
 8019fbe:	e6a1      	b.n	8019d04 <__ieee754_rem_pio2+0x24>
 8019fc0:	54400000 	.word	0x54400000
 8019fc4:	3ff921fb 	.word	0x3ff921fb
 8019fc8:	1a626331 	.word	0x1a626331
 8019fcc:	3dd0b461 	.word	0x3dd0b461
 8019fd0:	1a600000 	.word	0x1a600000
 8019fd4:	3dd0b461 	.word	0x3dd0b461
 8019fd8:	2e037073 	.word	0x2e037073
 8019fdc:	3ba3198a 	.word	0x3ba3198a
 8019fe0:	6dc9c883 	.word	0x6dc9c883
 8019fe4:	3fe45f30 	.word	0x3fe45f30
 8019fe8:	2e000000 	.word	0x2e000000
 8019fec:	3ba3198a 	.word	0x3ba3198a
 8019ff0:	252049c1 	.word	0x252049c1
 8019ff4:	397b839a 	.word	0x397b839a
 8019ff8:	3fe921fb 	.word	0x3fe921fb
 8019ffc:	4002d97b 	.word	0x4002d97b
 801a000:	3ff921fb 	.word	0x3ff921fb
 801a004:	413921fb 	.word	0x413921fb
 801a008:	3fe00000 	.word	0x3fe00000
 801a00c:	0801b6dc 	.word	0x0801b6dc
 801a010:	7fefffff 	.word	0x7fefffff
 801a014:	ea4f 5528 	mov.w	r5, r8, asr #20
 801a018:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801a01c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801a020:	4630      	mov	r0, r6
 801a022:	460f      	mov	r7, r1
 801a024:	f7e6 fd98 	bl	8000b58 <__aeabi_d2iz>
 801a028:	f7e6 fa7c 	bl	8000524 <__aeabi_i2d>
 801a02c:	4602      	mov	r2, r0
 801a02e:	460b      	mov	r3, r1
 801a030:	4630      	mov	r0, r6
 801a032:	4639      	mov	r1, r7
 801a034:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a038:	f7e6 f926 	bl	8000288 <__aeabi_dsub>
 801a03c:	2200      	movs	r2, #0
 801a03e:	4b1f      	ldr	r3, [pc, #124]	; (801a0bc <__ieee754_rem_pio2+0x3dc>)
 801a040:	f7e6 fada 	bl	80005f8 <__aeabi_dmul>
 801a044:	460f      	mov	r7, r1
 801a046:	4606      	mov	r6, r0
 801a048:	f7e6 fd86 	bl	8000b58 <__aeabi_d2iz>
 801a04c:	f7e6 fa6a 	bl	8000524 <__aeabi_i2d>
 801a050:	4602      	mov	r2, r0
 801a052:	460b      	mov	r3, r1
 801a054:	4630      	mov	r0, r6
 801a056:	4639      	mov	r1, r7
 801a058:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a05c:	f7e6 f914 	bl	8000288 <__aeabi_dsub>
 801a060:	2200      	movs	r2, #0
 801a062:	4b16      	ldr	r3, [pc, #88]	; (801a0bc <__ieee754_rem_pio2+0x3dc>)
 801a064:	f7e6 fac8 	bl	80005f8 <__aeabi_dmul>
 801a068:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801a06c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 801a070:	f04f 0803 	mov.w	r8, #3
 801a074:	2600      	movs	r6, #0
 801a076:	2700      	movs	r7, #0
 801a078:	4632      	mov	r2, r6
 801a07a:	463b      	mov	r3, r7
 801a07c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801a080:	f108 3aff 	add.w	sl, r8, #4294967295
 801a084:	f7e6 fd20 	bl	8000ac8 <__aeabi_dcmpeq>
 801a088:	b9b0      	cbnz	r0, 801a0b8 <__ieee754_rem_pio2+0x3d8>
 801a08a:	4b0d      	ldr	r3, [pc, #52]	; (801a0c0 <__ieee754_rem_pio2+0x3e0>)
 801a08c:	9301      	str	r3, [sp, #4]
 801a08e:	2302      	movs	r3, #2
 801a090:	9300      	str	r3, [sp, #0]
 801a092:	462a      	mov	r2, r5
 801a094:	4643      	mov	r3, r8
 801a096:	4621      	mov	r1, r4
 801a098:	a806      	add	r0, sp, #24
 801a09a:	f000 f98d 	bl	801a3b8 <__kernel_rem_pio2>
 801a09e:	9b04      	ldr	r3, [sp, #16]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	4605      	mov	r5, r0
 801a0a4:	f6bf ae58 	bge.w	8019d58 <__ieee754_rem_pio2+0x78>
 801a0a8:	6863      	ldr	r3, [r4, #4]
 801a0aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a0ae:	6063      	str	r3, [r4, #4]
 801a0b0:	68e3      	ldr	r3, [r4, #12]
 801a0b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a0b6:	e746      	b.n	8019f46 <__ieee754_rem_pio2+0x266>
 801a0b8:	46d0      	mov	r8, sl
 801a0ba:	e7dd      	b.n	801a078 <__ieee754_rem_pio2+0x398>
 801a0bc:	41700000 	.word	0x41700000
 801a0c0:	0801b75c 	.word	0x0801b75c

0801a0c4 <__ieee754_sqrt>:
 801a0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0c8:	4955      	ldr	r1, [pc, #340]	; (801a220 <__ieee754_sqrt+0x15c>)
 801a0ca:	ec55 4b10 	vmov	r4, r5, d0
 801a0ce:	43a9      	bics	r1, r5
 801a0d0:	462b      	mov	r3, r5
 801a0d2:	462a      	mov	r2, r5
 801a0d4:	d112      	bne.n	801a0fc <__ieee754_sqrt+0x38>
 801a0d6:	ee10 2a10 	vmov	r2, s0
 801a0da:	ee10 0a10 	vmov	r0, s0
 801a0de:	4629      	mov	r1, r5
 801a0e0:	f7e6 fa8a 	bl	80005f8 <__aeabi_dmul>
 801a0e4:	4602      	mov	r2, r0
 801a0e6:	460b      	mov	r3, r1
 801a0e8:	4620      	mov	r0, r4
 801a0ea:	4629      	mov	r1, r5
 801a0ec:	f7e6 f8ce 	bl	800028c <__adddf3>
 801a0f0:	4604      	mov	r4, r0
 801a0f2:	460d      	mov	r5, r1
 801a0f4:	ec45 4b10 	vmov	d0, r4, r5
 801a0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0fc:	2d00      	cmp	r5, #0
 801a0fe:	ee10 0a10 	vmov	r0, s0
 801a102:	4621      	mov	r1, r4
 801a104:	dc0f      	bgt.n	801a126 <__ieee754_sqrt+0x62>
 801a106:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a10a:	4330      	orrs	r0, r6
 801a10c:	d0f2      	beq.n	801a0f4 <__ieee754_sqrt+0x30>
 801a10e:	b155      	cbz	r5, 801a126 <__ieee754_sqrt+0x62>
 801a110:	ee10 2a10 	vmov	r2, s0
 801a114:	4620      	mov	r0, r4
 801a116:	4629      	mov	r1, r5
 801a118:	f7e6 f8b6 	bl	8000288 <__aeabi_dsub>
 801a11c:	4602      	mov	r2, r0
 801a11e:	460b      	mov	r3, r1
 801a120:	f7e6 fb94 	bl	800084c <__aeabi_ddiv>
 801a124:	e7e4      	b.n	801a0f0 <__ieee754_sqrt+0x2c>
 801a126:	151b      	asrs	r3, r3, #20
 801a128:	d073      	beq.n	801a212 <__ieee754_sqrt+0x14e>
 801a12a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a12e:	07dd      	lsls	r5, r3, #31
 801a130:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801a134:	bf48      	it	mi
 801a136:	0fc8      	lsrmi	r0, r1, #31
 801a138:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801a13c:	bf44      	itt	mi
 801a13e:	0049      	lslmi	r1, r1, #1
 801a140:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801a144:	2500      	movs	r5, #0
 801a146:	1058      	asrs	r0, r3, #1
 801a148:	0fcb      	lsrs	r3, r1, #31
 801a14a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801a14e:	0049      	lsls	r1, r1, #1
 801a150:	2316      	movs	r3, #22
 801a152:	462c      	mov	r4, r5
 801a154:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801a158:	19a7      	adds	r7, r4, r6
 801a15a:	4297      	cmp	r7, r2
 801a15c:	bfde      	ittt	le
 801a15e:	19bc      	addle	r4, r7, r6
 801a160:	1bd2      	suble	r2, r2, r7
 801a162:	19ad      	addle	r5, r5, r6
 801a164:	0fcf      	lsrs	r7, r1, #31
 801a166:	3b01      	subs	r3, #1
 801a168:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801a16c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a170:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a174:	d1f0      	bne.n	801a158 <__ieee754_sqrt+0x94>
 801a176:	f04f 0c20 	mov.w	ip, #32
 801a17a:	469e      	mov	lr, r3
 801a17c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801a180:	42a2      	cmp	r2, r4
 801a182:	eb06 070e 	add.w	r7, r6, lr
 801a186:	dc02      	bgt.n	801a18e <__ieee754_sqrt+0xca>
 801a188:	d112      	bne.n	801a1b0 <__ieee754_sqrt+0xec>
 801a18a:	428f      	cmp	r7, r1
 801a18c:	d810      	bhi.n	801a1b0 <__ieee754_sqrt+0xec>
 801a18e:	2f00      	cmp	r7, #0
 801a190:	eb07 0e06 	add.w	lr, r7, r6
 801a194:	da42      	bge.n	801a21c <__ieee754_sqrt+0x158>
 801a196:	f1be 0f00 	cmp.w	lr, #0
 801a19a:	db3f      	blt.n	801a21c <__ieee754_sqrt+0x158>
 801a19c:	f104 0801 	add.w	r8, r4, #1
 801a1a0:	1b12      	subs	r2, r2, r4
 801a1a2:	428f      	cmp	r7, r1
 801a1a4:	bf88      	it	hi
 801a1a6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a1aa:	1bc9      	subs	r1, r1, r7
 801a1ac:	4433      	add	r3, r6
 801a1ae:	4644      	mov	r4, r8
 801a1b0:	0052      	lsls	r2, r2, #1
 801a1b2:	f1bc 0c01 	subs.w	ip, ip, #1
 801a1b6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801a1ba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a1be:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a1c2:	d1dd      	bne.n	801a180 <__ieee754_sqrt+0xbc>
 801a1c4:	430a      	orrs	r2, r1
 801a1c6:	d006      	beq.n	801a1d6 <__ieee754_sqrt+0x112>
 801a1c8:	1c5c      	adds	r4, r3, #1
 801a1ca:	bf13      	iteet	ne
 801a1cc:	3301      	addne	r3, #1
 801a1ce:	3501      	addeq	r5, #1
 801a1d0:	4663      	moveq	r3, ip
 801a1d2:	f023 0301 	bicne.w	r3, r3, #1
 801a1d6:	106a      	asrs	r2, r5, #1
 801a1d8:	085b      	lsrs	r3, r3, #1
 801a1da:	07e9      	lsls	r1, r5, #31
 801a1dc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801a1e0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801a1e4:	bf48      	it	mi
 801a1e6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801a1ea:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801a1ee:	461c      	mov	r4, r3
 801a1f0:	e780      	b.n	801a0f4 <__ieee754_sqrt+0x30>
 801a1f2:	0aca      	lsrs	r2, r1, #11
 801a1f4:	3815      	subs	r0, #21
 801a1f6:	0549      	lsls	r1, r1, #21
 801a1f8:	2a00      	cmp	r2, #0
 801a1fa:	d0fa      	beq.n	801a1f2 <__ieee754_sqrt+0x12e>
 801a1fc:	02d6      	lsls	r6, r2, #11
 801a1fe:	d50a      	bpl.n	801a216 <__ieee754_sqrt+0x152>
 801a200:	f1c3 0420 	rsb	r4, r3, #32
 801a204:	fa21 f404 	lsr.w	r4, r1, r4
 801a208:	1e5d      	subs	r5, r3, #1
 801a20a:	4099      	lsls	r1, r3
 801a20c:	4322      	orrs	r2, r4
 801a20e:	1b43      	subs	r3, r0, r5
 801a210:	e78b      	b.n	801a12a <__ieee754_sqrt+0x66>
 801a212:	4618      	mov	r0, r3
 801a214:	e7f0      	b.n	801a1f8 <__ieee754_sqrt+0x134>
 801a216:	0052      	lsls	r2, r2, #1
 801a218:	3301      	adds	r3, #1
 801a21a:	e7ef      	b.n	801a1fc <__ieee754_sqrt+0x138>
 801a21c:	46a0      	mov	r8, r4
 801a21e:	e7bf      	b.n	801a1a0 <__ieee754_sqrt+0xdc>
 801a220:	7ff00000 	.word	0x7ff00000
 801a224:	00000000 	.word	0x00000000

0801a228 <__kernel_cos>:
 801a228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a22c:	ec59 8b10 	vmov	r8, r9, d0
 801a230:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801a234:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 801a238:	ed2d 8b02 	vpush	{d8}
 801a23c:	eeb0 8a41 	vmov.f32	s16, s2
 801a240:	eef0 8a61 	vmov.f32	s17, s3
 801a244:	da07      	bge.n	801a256 <__kernel_cos+0x2e>
 801a246:	ee10 0a10 	vmov	r0, s0
 801a24a:	4649      	mov	r1, r9
 801a24c:	f7e6 fc84 	bl	8000b58 <__aeabi_d2iz>
 801a250:	2800      	cmp	r0, #0
 801a252:	f000 8089 	beq.w	801a368 <__kernel_cos+0x140>
 801a256:	4642      	mov	r2, r8
 801a258:	464b      	mov	r3, r9
 801a25a:	4640      	mov	r0, r8
 801a25c:	4649      	mov	r1, r9
 801a25e:	f7e6 f9cb 	bl	80005f8 <__aeabi_dmul>
 801a262:	2200      	movs	r2, #0
 801a264:	4b4e      	ldr	r3, [pc, #312]	; (801a3a0 <__kernel_cos+0x178>)
 801a266:	4604      	mov	r4, r0
 801a268:	460d      	mov	r5, r1
 801a26a:	f7e6 f9c5 	bl	80005f8 <__aeabi_dmul>
 801a26e:	a340      	add	r3, pc, #256	; (adr r3, 801a370 <__kernel_cos+0x148>)
 801a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a274:	4682      	mov	sl, r0
 801a276:	468b      	mov	fp, r1
 801a278:	4620      	mov	r0, r4
 801a27a:	4629      	mov	r1, r5
 801a27c:	f7e6 f9bc 	bl	80005f8 <__aeabi_dmul>
 801a280:	a33d      	add	r3, pc, #244	; (adr r3, 801a378 <__kernel_cos+0x150>)
 801a282:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a286:	f7e6 f801 	bl	800028c <__adddf3>
 801a28a:	4622      	mov	r2, r4
 801a28c:	462b      	mov	r3, r5
 801a28e:	f7e6 f9b3 	bl	80005f8 <__aeabi_dmul>
 801a292:	a33b      	add	r3, pc, #236	; (adr r3, 801a380 <__kernel_cos+0x158>)
 801a294:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a298:	f7e5 fff6 	bl	8000288 <__aeabi_dsub>
 801a29c:	4622      	mov	r2, r4
 801a29e:	462b      	mov	r3, r5
 801a2a0:	f7e6 f9aa 	bl	80005f8 <__aeabi_dmul>
 801a2a4:	a338      	add	r3, pc, #224	; (adr r3, 801a388 <__kernel_cos+0x160>)
 801a2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2aa:	f7e5 ffef 	bl	800028c <__adddf3>
 801a2ae:	4622      	mov	r2, r4
 801a2b0:	462b      	mov	r3, r5
 801a2b2:	f7e6 f9a1 	bl	80005f8 <__aeabi_dmul>
 801a2b6:	a336      	add	r3, pc, #216	; (adr r3, 801a390 <__kernel_cos+0x168>)
 801a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2bc:	f7e5 ffe4 	bl	8000288 <__aeabi_dsub>
 801a2c0:	4622      	mov	r2, r4
 801a2c2:	462b      	mov	r3, r5
 801a2c4:	f7e6 f998 	bl	80005f8 <__aeabi_dmul>
 801a2c8:	a333      	add	r3, pc, #204	; (adr r3, 801a398 <__kernel_cos+0x170>)
 801a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2ce:	f7e5 ffdd 	bl	800028c <__adddf3>
 801a2d2:	4622      	mov	r2, r4
 801a2d4:	462b      	mov	r3, r5
 801a2d6:	f7e6 f98f 	bl	80005f8 <__aeabi_dmul>
 801a2da:	4622      	mov	r2, r4
 801a2dc:	462b      	mov	r3, r5
 801a2de:	f7e6 f98b 	bl	80005f8 <__aeabi_dmul>
 801a2e2:	ec53 2b18 	vmov	r2, r3, d8
 801a2e6:	4604      	mov	r4, r0
 801a2e8:	460d      	mov	r5, r1
 801a2ea:	4640      	mov	r0, r8
 801a2ec:	4649      	mov	r1, r9
 801a2ee:	f7e6 f983 	bl	80005f8 <__aeabi_dmul>
 801a2f2:	460b      	mov	r3, r1
 801a2f4:	4602      	mov	r2, r0
 801a2f6:	4629      	mov	r1, r5
 801a2f8:	4620      	mov	r0, r4
 801a2fa:	f7e5 ffc5 	bl	8000288 <__aeabi_dsub>
 801a2fe:	4b29      	ldr	r3, [pc, #164]	; (801a3a4 <__kernel_cos+0x17c>)
 801a300:	429e      	cmp	r6, r3
 801a302:	4680      	mov	r8, r0
 801a304:	4689      	mov	r9, r1
 801a306:	dc11      	bgt.n	801a32c <__kernel_cos+0x104>
 801a308:	4602      	mov	r2, r0
 801a30a:	460b      	mov	r3, r1
 801a30c:	4650      	mov	r0, sl
 801a30e:	4659      	mov	r1, fp
 801a310:	f7e5 ffba 	bl	8000288 <__aeabi_dsub>
 801a314:	460b      	mov	r3, r1
 801a316:	4924      	ldr	r1, [pc, #144]	; (801a3a8 <__kernel_cos+0x180>)
 801a318:	4602      	mov	r2, r0
 801a31a:	2000      	movs	r0, #0
 801a31c:	f7e5 ffb4 	bl	8000288 <__aeabi_dsub>
 801a320:	ecbd 8b02 	vpop	{d8}
 801a324:	ec41 0b10 	vmov	d0, r0, r1
 801a328:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a32c:	4b1f      	ldr	r3, [pc, #124]	; (801a3ac <__kernel_cos+0x184>)
 801a32e:	491e      	ldr	r1, [pc, #120]	; (801a3a8 <__kernel_cos+0x180>)
 801a330:	429e      	cmp	r6, r3
 801a332:	bfcc      	ite	gt
 801a334:	4d1e      	ldrgt	r5, [pc, #120]	; (801a3b0 <__kernel_cos+0x188>)
 801a336:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801a33a:	2400      	movs	r4, #0
 801a33c:	4622      	mov	r2, r4
 801a33e:	462b      	mov	r3, r5
 801a340:	2000      	movs	r0, #0
 801a342:	f7e5 ffa1 	bl	8000288 <__aeabi_dsub>
 801a346:	4622      	mov	r2, r4
 801a348:	4606      	mov	r6, r0
 801a34a:	460f      	mov	r7, r1
 801a34c:	462b      	mov	r3, r5
 801a34e:	4650      	mov	r0, sl
 801a350:	4659      	mov	r1, fp
 801a352:	f7e5 ff99 	bl	8000288 <__aeabi_dsub>
 801a356:	4642      	mov	r2, r8
 801a358:	464b      	mov	r3, r9
 801a35a:	f7e5 ff95 	bl	8000288 <__aeabi_dsub>
 801a35e:	4602      	mov	r2, r0
 801a360:	460b      	mov	r3, r1
 801a362:	4630      	mov	r0, r6
 801a364:	4639      	mov	r1, r7
 801a366:	e7d9      	b.n	801a31c <__kernel_cos+0xf4>
 801a368:	2000      	movs	r0, #0
 801a36a:	490f      	ldr	r1, [pc, #60]	; (801a3a8 <__kernel_cos+0x180>)
 801a36c:	e7d8      	b.n	801a320 <__kernel_cos+0xf8>
 801a36e:	bf00      	nop
 801a370:	be8838d4 	.word	0xbe8838d4
 801a374:	bda8fae9 	.word	0xbda8fae9
 801a378:	bdb4b1c4 	.word	0xbdb4b1c4
 801a37c:	3e21ee9e 	.word	0x3e21ee9e
 801a380:	809c52ad 	.word	0x809c52ad
 801a384:	3e927e4f 	.word	0x3e927e4f
 801a388:	19cb1590 	.word	0x19cb1590
 801a38c:	3efa01a0 	.word	0x3efa01a0
 801a390:	16c15177 	.word	0x16c15177
 801a394:	3f56c16c 	.word	0x3f56c16c
 801a398:	5555554c 	.word	0x5555554c
 801a39c:	3fa55555 	.word	0x3fa55555
 801a3a0:	3fe00000 	.word	0x3fe00000
 801a3a4:	3fd33332 	.word	0x3fd33332
 801a3a8:	3ff00000 	.word	0x3ff00000
 801a3ac:	3fe90000 	.word	0x3fe90000
 801a3b0:	3fd20000 	.word	0x3fd20000
 801a3b4:	00000000 	.word	0x00000000

0801a3b8 <__kernel_rem_pio2>:
 801a3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3bc:	ed2d 8b02 	vpush	{d8}
 801a3c0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801a3c4:	1ed4      	subs	r4, r2, #3
 801a3c6:	9308      	str	r3, [sp, #32]
 801a3c8:	9101      	str	r1, [sp, #4]
 801a3ca:	4bc5      	ldr	r3, [pc, #788]	; (801a6e0 <__kernel_rem_pio2+0x328>)
 801a3cc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801a3ce:	9009      	str	r0, [sp, #36]	; 0x24
 801a3d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a3d4:	9304      	str	r3, [sp, #16]
 801a3d6:	9b08      	ldr	r3, [sp, #32]
 801a3d8:	3b01      	subs	r3, #1
 801a3da:	9307      	str	r3, [sp, #28]
 801a3dc:	2318      	movs	r3, #24
 801a3de:	fb94 f4f3 	sdiv	r4, r4, r3
 801a3e2:	f06f 0317 	mvn.w	r3, #23
 801a3e6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801a3ea:	fb04 3303 	mla	r3, r4, r3, r3
 801a3ee:	eb03 0a02 	add.w	sl, r3, r2
 801a3f2:	9b04      	ldr	r3, [sp, #16]
 801a3f4:	9a07      	ldr	r2, [sp, #28]
 801a3f6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801a6d0 <__kernel_rem_pio2+0x318>
 801a3fa:	eb03 0802 	add.w	r8, r3, r2
 801a3fe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a400:	1aa7      	subs	r7, r4, r2
 801a402:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801a406:	ae22      	add	r6, sp, #136	; 0x88
 801a408:	2500      	movs	r5, #0
 801a40a:	4545      	cmp	r5, r8
 801a40c:	dd13      	ble.n	801a436 <__kernel_rem_pio2+0x7e>
 801a40e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801a6d0 <__kernel_rem_pio2+0x318>
 801a412:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801a416:	2600      	movs	r6, #0
 801a418:	9b04      	ldr	r3, [sp, #16]
 801a41a:	429e      	cmp	r6, r3
 801a41c:	dc32      	bgt.n	801a484 <__kernel_rem_pio2+0xcc>
 801a41e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a420:	9302      	str	r3, [sp, #8]
 801a422:	9b08      	ldr	r3, [sp, #32]
 801a424:	199d      	adds	r5, r3, r6
 801a426:	ab22      	add	r3, sp, #136	; 0x88
 801a428:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a42c:	9306      	str	r3, [sp, #24]
 801a42e:	ec59 8b18 	vmov	r8, r9, d8
 801a432:	2700      	movs	r7, #0
 801a434:	e01f      	b.n	801a476 <__kernel_rem_pio2+0xbe>
 801a436:	42ef      	cmn	r7, r5
 801a438:	d407      	bmi.n	801a44a <__kernel_rem_pio2+0x92>
 801a43a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801a43e:	f7e6 f871 	bl	8000524 <__aeabi_i2d>
 801a442:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a446:	3501      	adds	r5, #1
 801a448:	e7df      	b.n	801a40a <__kernel_rem_pio2+0x52>
 801a44a:	ec51 0b18 	vmov	r0, r1, d8
 801a44e:	e7f8      	b.n	801a442 <__kernel_rem_pio2+0x8a>
 801a450:	9906      	ldr	r1, [sp, #24]
 801a452:	9d02      	ldr	r5, [sp, #8]
 801a454:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801a458:	9106      	str	r1, [sp, #24]
 801a45a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801a45e:	9502      	str	r5, [sp, #8]
 801a460:	f7e6 f8ca 	bl	80005f8 <__aeabi_dmul>
 801a464:	4602      	mov	r2, r0
 801a466:	460b      	mov	r3, r1
 801a468:	4640      	mov	r0, r8
 801a46a:	4649      	mov	r1, r9
 801a46c:	f7e5 ff0e 	bl	800028c <__adddf3>
 801a470:	3701      	adds	r7, #1
 801a472:	4680      	mov	r8, r0
 801a474:	4689      	mov	r9, r1
 801a476:	9b07      	ldr	r3, [sp, #28]
 801a478:	429f      	cmp	r7, r3
 801a47a:	dde9      	ble.n	801a450 <__kernel_rem_pio2+0x98>
 801a47c:	e8eb 8902 	strd	r8, r9, [fp], #8
 801a480:	3601      	adds	r6, #1
 801a482:	e7c9      	b.n	801a418 <__kernel_rem_pio2+0x60>
 801a484:	9b04      	ldr	r3, [sp, #16]
 801a486:	aa0e      	add	r2, sp, #56	; 0x38
 801a488:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a48c:	930c      	str	r3, [sp, #48]	; 0x30
 801a48e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a490:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a494:	9c04      	ldr	r4, [sp, #16]
 801a496:	930b      	str	r3, [sp, #44]	; 0x2c
 801a498:	ab9a      	add	r3, sp, #616	; 0x268
 801a49a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801a49e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a4a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a4a6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801a4aa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801a4ae:	ab9a      	add	r3, sp, #616	; 0x268
 801a4b0:	445b      	add	r3, fp
 801a4b2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801a4b6:	2500      	movs	r5, #0
 801a4b8:	1b63      	subs	r3, r4, r5
 801a4ba:	2b00      	cmp	r3, #0
 801a4bc:	dc78      	bgt.n	801a5b0 <__kernel_rem_pio2+0x1f8>
 801a4be:	4650      	mov	r0, sl
 801a4c0:	ec49 8b10 	vmov	d0, r8, r9
 801a4c4:	f000 fda8 	bl	801b018 <scalbn>
 801a4c8:	ec57 6b10 	vmov	r6, r7, d0
 801a4cc:	2200      	movs	r2, #0
 801a4ce:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801a4d2:	ee10 0a10 	vmov	r0, s0
 801a4d6:	4639      	mov	r1, r7
 801a4d8:	f7e6 f88e 	bl	80005f8 <__aeabi_dmul>
 801a4dc:	ec41 0b10 	vmov	d0, r0, r1
 801a4e0:	f000 fd12 	bl	801af08 <floor>
 801a4e4:	2200      	movs	r2, #0
 801a4e6:	ec51 0b10 	vmov	r0, r1, d0
 801a4ea:	4b7e      	ldr	r3, [pc, #504]	; (801a6e4 <__kernel_rem_pio2+0x32c>)
 801a4ec:	f7e6 f884 	bl	80005f8 <__aeabi_dmul>
 801a4f0:	4602      	mov	r2, r0
 801a4f2:	460b      	mov	r3, r1
 801a4f4:	4630      	mov	r0, r6
 801a4f6:	4639      	mov	r1, r7
 801a4f8:	f7e5 fec6 	bl	8000288 <__aeabi_dsub>
 801a4fc:	460f      	mov	r7, r1
 801a4fe:	4606      	mov	r6, r0
 801a500:	f7e6 fb2a 	bl	8000b58 <__aeabi_d2iz>
 801a504:	9006      	str	r0, [sp, #24]
 801a506:	f7e6 f80d 	bl	8000524 <__aeabi_i2d>
 801a50a:	4602      	mov	r2, r0
 801a50c:	460b      	mov	r3, r1
 801a50e:	4630      	mov	r0, r6
 801a510:	4639      	mov	r1, r7
 801a512:	f7e5 feb9 	bl	8000288 <__aeabi_dsub>
 801a516:	f1ba 0f00 	cmp.w	sl, #0
 801a51a:	4606      	mov	r6, r0
 801a51c:	460f      	mov	r7, r1
 801a51e:	dd6c      	ble.n	801a5fa <__kernel_rem_pio2+0x242>
 801a520:	1e62      	subs	r2, r4, #1
 801a522:	ab0e      	add	r3, sp, #56	; 0x38
 801a524:	f1ca 0118 	rsb	r1, sl, #24
 801a528:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a52c:	9d06      	ldr	r5, [sp, #24]
 801a52e:	fa40 f301 	asr.w	r3, r0, r1
 801a532:	441d      	add	r5, r3
 801a534:	408b      	lsls	r3, r1
 801a536:	1ac0      	subs	r0, r0, r3
 801a538:	ab0e      	add	r3, sp, #56	; 0x38
 801a53a:	9506      	str	r5, [sp, #24]
 801a53c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801a540:	f1ca 0317 	rsb	r3, sl, #23
 801a544:	fa40 f303 	asr.w	r3, r0, r3
 801a548:	9302      	str	r3, [sp, #8]
 801a54a:	9b02      	ldr	r3, [sp, #8]
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	dd62      	ble.n	801a616 <__kernel_rem_pio2+0x25e>
 801a550:	9b06      	ldr	r3, [sp, #24]
 801a552:	2200      	movs	r2, #0
 801a554:	3301      	adds	r3, #1
 801a556:	9306      	str	r3, [sp, #24]
 801a558:	4615      	mov	r5, r2
 801a55a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801a55e:	4294      	cmp	r4, r2
 801a560:	f300 8095 	bgt.w	801a68e <__kernel_rem_pio2+0x2d6>
 801a564:	f1ba 0f00 	cmp.w	sl, #0
 801a568:	dd07      	ble.n	801a57a <__kernel_rem_pio2+0x1c2>
 801a56a:	f1ba 0f01 	cmp.w	sl, #1
 801a56e:	f000 80a2 	beq.w	801a6b6 <__kernel_rem_pio2+0x2fe>
 801a572:	f1ba 0f02 	cmp.w	sl, #2
 801a576:	f000 80c1 	beq.w	801a6fc <__kernel_rem_pio2+0x344>
 801a57a:	9b02      	ldr	r3, [sp, #8]
 801a57c:	2b02      	cmp	r3, #2
 801a57e:	d14a      	bne.n	801a616 <__kernel_rem_pio2+0x25e>
 801a580:	4632      	mov	r2, r6
 801a582:	463b      	mov	r3, r7
 801a584:	2000      	movs	r0, #0
 801a586:	4958      	ldr	r1, [pc, #352]	; (801a6e8 <__kernel_rem_pio2+0x330>)
 801a588:	f7e5 fe7e 	bl	8000288 <__aeabi_dsub>
 801a58c:	4606      	mov	r6, r0
 801a58e:	460f      	mov	r7, r1
 801a590:	2d00      	cmp	r5, #0
 801a592:	d040      	beq.n	801a616 <__kernel_rem_pio2+0x25e>
 801a594:	4650      	mov	r0, sl
 801a596:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801a6d8 <__kernel_rem_pio2+0x320>
 801a59a:	f000 fd3d 	bl	801b018 <scalbn>
 801a59e:	4630      	mov	r0, r6
 801a5a0:	4639      	mov	r1, r7
 801a5a2:	ec53 2b10 	vmov	r2, r3, d0
 801a5a6:	f7e5 fe6f 	bl	8000288 <__aeabi_dsub>
 801a5aa:	4606      	mov	r6, r0
 801a5ac:	460f      	mov	r7, r1
 801a5ae:	e032      	b.n	801a616 <__kernel_rem_pio2+0x25e>
 801a5b0:	2200      	movs	r2, #0
 801a5b2:	4b4e      	ldr	r3, [pc, #312]	; (801a6ec <__kernel_rem_pio2+0x334>)
 801a5b4:	4640      	mov	r0, r8
 801a5b6:	4649      	mov	r1, r9
 801a5b8:	f7e6 f81e 	bl	80005f8 <__aeabi_dmul>
 801a5bc:	f7e6 facc 	bl	8000b58 <__aeabi_d2iz>
 801a5c0:	f7e5 ffb0 	bl	8000524 <__aeabi_i2d>
 801a5c4:	2200      	movs	r2, #0
 801a5c6:	4b4a      	ldr	r3, [pc, #296]	; (801a6f0 <__kernel_rem_pio2+0x338>)
 801a5c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a5cc:	f7e6 f814 	bl	80005f8 <__aeabi_dmul>
 801a5d0:	4602      	mov	r2, r0
 801a5d2:	460b      	mov	r3, r1
 801a5d4:	4640      	mov	r0, r8
 801a5d6:	4649      	mov	r1, r9
 801a5d8:	f7e5 fe56 	bl	8000288 <__aeabi_dsub>
 801a5dc:	f7e6 fabc 	bl	8000b58 <__aeabi_d2iz>
 801a5e0:	ab0e      	add	r3, sp, #56	; 0x38
 801a5e2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801a5e6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801a5ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a5ee:	f7e5 fe4d 	bl	800028c <__adddf3>
 801a5f2:	3501      	adds	r5, #1
 801a5f4:	4680      	mov	r8, r0
 801a5f6:	4689      	mov	r9, r1
 801a5f8:	e75e      	b.n	801a4b8 <__kernel_rem_pio2+0x100>
 801a5fa:	d105      	bne.n	801a608 <__kernel_rem_pio2+0x250>
 801a5fc:	1e63      	subs	r3, r4, #1
 801a5fe:	aa0e      	add	r2, sp, #56	; 0x38
 801a600:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a604:	15c3      	asrs	r3, r0, #23
 801a606:	e79f      	b.n	801a548 <__kernel_rem_pio2+0x190>
 801a608:	2200      	movs	r2, #0
 801a60a:	4b3a      	ldr	r3, [pc, #232]	; (801a6f4 <__kernel_rem_pio2+0x33c>)
 801a60c:	f7e6 fa7a 	bl	8000b04 <__aeabi_dcmpge>
 801a610:	2800      	cmp	r0, #0
 801a612:	d139      	bne.n	801a688 <__kernel_rem_pio2+0x2d0>
 801a614:	9002      	str	r0, [sp, #8]
 801a616:	2200      	movs	r2, #0
 801a618:	2300      	movs	r3, #0
 801a61a:	4630      	mov	r0, r6
 801a61c:	4639      	mov	r1, r7
 801a61e:	f7e6 fa53 	bl	8000ac8 <__aeabi_dcmpeq>
 801a622:	2800      	cmp	r0, #0
 801a624:	f000 80c7 	beq.w	801a7b6 <__kernel_rem_pio2+0x3fe>
 801a628:	1e65      	subs	r5, r4, #1
 801a62a:	462b      	mov	r3, r5
 801a62c:	2200      	movs	r2, #0
 801a62e:	9904      	ldr	r1, [sp, #16]
 801a630:	428b      	cmp	r3, r1
 801a632:	da6a      	bge.n	801a70a <__kernel_rem_pio2+0x352>
 801a634:	2a00      	cmp	r2, #0
 801a636:	f000 8088 	beq.w	801a74a <__kernel_rem_pio2+0x392>
 801a63a:	ab0e      	add	r3, sp, #56	; 0x38
 801a63c:	f1aa 0a18 	sub.w	sl, sl, #24
 801a640:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801a644:	2b00      	cmp	r3, #0
 801a646:	f000 80b4 	beq.w	801a7b2 <__kernel_rem_pio2+0x3fa>
 801a64a:	4650      	mov	r0, sl
 801a64c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801a6d8 <__kernel_rem_pio2+0x320>
 801a650:	f000 fce2 	bl	801b018 <scalbn>
 801a654:	00ec      	lsls	r4, r5, #3
 801a656:	ab72      	add	r3, sp, #456	; 0x1c8
 801a658:	191e      	adds	r6, r3, r4
 801a65a:	ec59 8b10 	vmov	r8, r9, d0
 801a65e:	f106 0a08 	add.w	sl, r6, #8
 801a662:	462f      	mov	r7, r5
 801a664:	2f00      	cmp	r7, #0
 801a666:	f280 80df 	bge.w	801a828 <__kernel_rem_pio2+0x470>
 801a66a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801a6d0 <__kernel_rem_pio2+0x318>
 801a66e:	f04f 0a00 	mov.w	sl, #0
 801a672:	eba5 030a 	sub.w	r3, r5, sl
 801a676:	2b00      	cmp	r3, #0
 801a678:	f2c0 810a 	blt.w	801a890 <__kernel_rem_pio2+0x4d8>
 801a67c:	f8df b078 	ldr.w	fp, [pc, #120]	; 801a6f8 <__kernel_rem_pio2+0x340>
 801a680:	ec59 8b18 	vmov	r8, r9, d8
 801a684:	2700      	movs	r7, #0
 801a686:	e0f5      	b.n	801a874 <__kernel_rem_pio2+0x4bc>
 801a688:	2302      	movs	r3, #2
 801a68a:	9302      	str	r3, [sp, #8]
 801a68c:	e760      	b.n	801a550 <__kernel_rem_pio2+0x198>
 801a68e:	ab0e      	add	r3, sp, #56	; 0x38
 801a690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a694:	b94d      	cbnz	r5, 801a6aa <__kernel_rem_pio2+0x2f2>
 801a696:	b12b      	cbz	r3, 801a6a4 <__kernel_rem_pio2+0x2ec>
 801a698:	a80e      	add	r0, sp, #56	; 0x38
 801a69a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801a69e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a6a2:	2301      	movs	r3, #1
 801a6a4:	3201      	adds	r2, #1
 801a6a6:	461d      	mov	r5, r3
 801a6a8:	e759      	b.n	801a55e <__kernel_rem_pio2+0x1a6>
 801a6aa:	a80e      	add	r0, sp, #56	; 0x38
 801a6ac:	1acb      	subs	r3, r1, r3
 801a6ae:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a6b2:	462b      	mov	r3, r5
 801a6b4:	e7f6      	b.n	801a6a4 <__kernel_rem_pio2+0x2ec>
 801a6b6:	1e62      	subs	r2, r4, #1
 801a6b8:	ab0e      	add	r3, sp, #56	; 0x38
 801a6ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a6be:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a6c2:	a90e      	add	r1, sp, #56	; 0x38
 801a6c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a6c8:	e757      	b.n	801a57a <__kernel_rem_pio2+0x1c2>
 801a6ca:	bf00      	nop
 801a6cc:	f3af 8000 	nop.w
	...
 801a6dc:	3ff00000 	.word	0x3ff00000
 801a6e0:	0801b8a8 	.word	0x0801b8a8
 801a6e4:	40200000 	.word	0x40200000
 801a6e8:	3ff00000 	.word	0x3ff00000
 801a6ec:	3e700000 	.word	0x3e700000
 801a6f0:	41700000 	.word	0x41700000
 801a6f4:	3fe00000 	.word	0x3fe00000
 801a6f8:	0801b868 	.word	0x0801b868
 801a6fc:	1e62      	subs	r2, r4, #1
 801a6fe:	ab0e      	add	r3, sp, #56	; 0x38
 801a700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a704:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a708:	e7db      	b.n	801a6c2 <__kernel_rem_pio2+0x30a>
 801a70a:	a90e      	add	r1, sp, #56	; 0x38
 801a70c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801a710:	3b01      	subs	r3, #1
 801a712:	430a      	orrs	r2, r1
 801a714:	e78b      	b.n	801a62e <__kernel_rem_pio2+0x276>
 801a716:	3301      	adds	r3, #1
 801a718:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801a71c:	2900      	cmp	r1, #0
 801a71e:	d0fa      	beq.n	801a716 <__kernel_rem_pio2+0x35e>
 801a720:	9a08      	ldr	r2, [sp, #32]
 801a722:	4422      	add	r2, r4
 801a724:	00d2      	lsls	r2, r2, #3
 801a726:	a922      	add	r1, sp, #136	; 0x88
 801a728:	18e3      	adds	r3, r4, r3
 801a72a:	9206      	str	r2, [sp, #24]
 801a72c:	440a      	add	r2, r1
 801a72e:	9302      	str	r3, [sp, #8]
 801a730:	f10b 0108 	add.w	r1, fp, #8
 801a734:	f102 0308 	add.w	r3, r2, #8
 801a738:	1c66      	adds	r6, r4, #1
 801a73a:	910a      	str	r1, [sp, #40]	; 0x28
 801a73c:	2500      	movs	r5, #0
 801a73e:	930d      	str	r3, [sp, #52]	; 0x34
 801a740:	9b02      	ldr	r3, [sp, #8]
 801a742:	42b3      	cmp	r3, r6
 801a744:	da04      	bge.n	801a750 <__kernel_rem_pio2+0x398>
 801a746:	461c      	mov	r4, r3
 801a748:	e6a6      	b.n	801a498 <__kernel_rem_pio2+0xe0>
 801a74a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a74c:	2301      	movs	r3, #1
 801a74e:	e7e3      	b.n	801a718 <__kernel_rem_pio2+0x360>
 801a750:	9b06      	ldr	r3, [sp, #24]
 801a752:	18ef      	adds	r7, r5, r3
 801a754:	ab22      	add	r3, sp, #136	; 0x88
 801a756:	441f      	add	r7, r3
 801a758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a75a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801a75e:	f7e5 fee1 	bl	8000524 <__aeabi_i2d>
 801a762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a764:	461c      	mov	r4, r3
 801a766:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a768:	e9c7 0100 	strd	r0, r1, [r7]
 801a76c:	eb03 0b05 	add.w	fp, r3, r5
 801a770:	2700      	movs	r7, #0
 801a772:	f04f 0800 	mov.w	r8, #0
 801a776:	f04f 0900 	mov.w	r9, #0
 801a77a:	9b07      	ldr	r3, [sp, #28]
 801a77c:	429f      	cmp	r7, r3
 801a77e:	dd08      	ble.n	801a792 <__kernel_rem_pio2+0x3da>
 801a780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a782:	aa72      	add	r2, sp, #456	; 0x1c8
 801a784:	18eb      	adds	r3, r5, r3
 801a786:	4413      	add	r3, r2
 801a788:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801a78c:	3601      	adds	r6, #1
 801a78e:	3508      	adds	r5, #8
 801a790:	e7d6      	b.n	801a740 <__kernel_rem_pio2+0x388>
 801a792:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801a796:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801a79a:	f7e5 ff2d 	bl	80005f8 <__aeabi_dmul>
 801a79e:	4602      	mov	r2, r0
 801a7a0:	460b      	mov	r3, r1
 801a7a2:	4640      	mov	r0, r8
 801a7a4:	4649      	mov	r1, r9
 801a7a6:	f7e5 fd71 	bl	800028c <__adddf3>
 801a7aa:	3701      	adds	r7, #1
 801a7ac:	4680      	mov	r8, r0
 801a7ae:	4689      	mov	r9, r1
 801a7b0:	e7e3      	b.n	801a77a <__kernel_rem_pio2+0x3c2>
 801a7b2:	3d01      	subs	r5, #1
 801a7b4:	e741      	b.n	801a63a <__kernel_rem_pio2+0x282>
 801a7b6:	f1ca 0000 	rsb	r0, sl, #0
 801a7ba:	ec47 6b10 	vmov	d0, r6, r7
 801a7be:	f000 fc2b 	bl	801b018 <scalbn>
 801a7c2:	ec57 6b10 	vmov	r6, r7, d0
 801a7c6:	2200      	movs	r2, #0
 801a7c8:	4b99      	ldr	r3, [pc, #612]	; (801aa30 <__kernel_rem_pio2+0x678>)
 801a7ca:	ee10 0a10 	vmov	r0, s0
 801a7ce:	4639      	mov	r1, r7
 801a7d0:	f7e6 f998 	bl	8000b04 <__aeabi_dcmpge>
 801a7d4:	b1f8      	cbz	r0, 801a816 <__kernel_rem_pio2+0x45e>
 801a7d6:	2200      	movs	r2, #0
 801a7d8:	4b96      	ldr	r3, [pc, #600]	; (801aa34 <__kernel_rem_pio2+0x67c>)
 801a7da:	4630      	mov	r0, r6
 801a7dc:	4639      	mov	r1, r7
 801a7de:	f7e5 ff0b 	bl	80005f8 <__aeabi_dmul>
 801a7e2:	f7e6 f9b9 	bl	8000b58 <__aeabi_d2iz>
 801a7e6:	4680      	mov	r8, r0
 801a7e8:	f7e5 fe9c 	bl	8000524 <__aeabi_i2d>
 801a7ec:	2200      	movs	r2, #0
 801a7ee:	4b90      	ldr	r3, [pc, #576]	; (801aa30 <__kernel_rem_pio2+0x678>)
 801a7f0:	f7e5 ff02 	bl	80005f8 <__aeabi_dmul>
 801a7f4:	460b      	mov	r3, r1
 801a7f6:	4602      	mov	r2, r0
 801a7f8:	4639      	mov	r1, r7
 801a7fa:	4630      	mov	r0, r6
 801a7fc:	f7e5 fd44 	bl	8000288 <__aeabi_dsub>
 801a800:	f7e6 f9aa 	bl	8000b58 <__aeabi_d2iz>
 801a804:	1c65      	adds	r5, r4, #1
 801a806:	ab0e      	add	r3, sp, #56	; 0x38
 801a808:	f10a 0a18 	add.w	sl, sl, #24
 801a80c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a810:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801a814:	e719      	b.n	801a64a <__kernel_rem_pio2+0x292>
 801a816:	4630      	mov	r0, r6
 801a818:	4639      	mov	r1, r7
 801a81a:	f7e6 f99d 	bl	8000b58 <__aeabi_d2iz>
 801a81e:	ab0e      	add	r3, sp, #56	; 0x38
 801a820:	4625      	mov	r5, r4
 801a822:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a826:	e710      	b.n	801a64a <__kernel_rem_pio2+0x292>
 801a828:	ab0e      	add	r3, sp, #56	; 0x38
 801a82a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801a82e:	f7e5 fe79 	bl	8000524 <__aeabi_i2d>
 801a832:	4642      	mov	r2, r8
 801a834:	464b      	mov	r3, r9
 801a836:	f7e5 fedf 	bl	80005f8 <__aeabi_dmul>
 801a83a:	2200      	movs	r2, #0
 801a83c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801a840:	4b7c      	ldr	r3, [pc, #496]	; (801aa34 <__kernel_rem_pio2+0x67c>)
 801a842:	4640      	mov	r0, r8
 801a844:	4649      	mov	r1, r9
 801a846:	f7e5 fed7 	bl	80005f8 <__aeabi_dmul>
 801a84a:	3f01      	subs	r7, #1
 801a84c:	4680      	mov	r8, r0
 801a84e:	4689      	mov	r9, r1
 801a850:	e708      	b.n	801a664 <__kernel_rem_pio2+0x2ac>
 801a852:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801a856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a85a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801a85e:	f7e5 fecb 	bl	80005f8 <__aeabi_dmul>
 801a862:	4602      	mov	r2, r0
 801a864:	460b      	mov	r3, r1
 801a866:	4640      	mov	r0, r8
 801a868:	4649      	mov	r1, r9
 801a86a:	f7e5 fd0f 	bl	800028c <__adddf3>
 801a86e:	3701      	adds	r7, #1
 801a870:	4680      	mov	r8, r0
 801a872:	4689      	mov	r9, r1
 801a874:	9b04      	ldr	r3, [sp, #16]
 801a876:	429f      	cmp	r7, r3
 801a878:	dc01      	bgt.n	801a87e <__kernel_rem_pio2+0x4c6>
 801a87a:	45ba      	cmp	sl, r7
 801a87c:	dae9      	bge.n	801a852 <__kernel_rem_pio2+0x49a>
 801a87e:	ab4a      	add	r3, sp, #296	; 0x128
 801a880:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a884:	e9c3 8900 	strd	r8, r9, [r3]
 801a888:	f10a 0a01 	add.w	sl, sl, #1
 801a88c:	3e08      	subs	r6, #8
 801a88e:	e6f0      	b.n	801a672 <__kernel_rem_pio2+0x2ba>
 801a890:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801a892:	2b03      	cmp	r3, #3
 801a894:	d85b      	bhi.n	801a94e <__kernel_rem_pio2+0x596>
 801a896:	e8df f003 	tbb	[pc, r3]
 801a89a:	264a      	.short	0x264a
 801a89c:	0226      	.short	0x0226
 801a89e:	ab9a      	add	r3, sp, #616	; 0x268
 801a8a0:	441c      	add	r4, r3
 801a8a2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801a8a6:	46a2      	mov	sl, r4
 801a8a8:	46ab      	mov	fp, r5
 801a8aa:	f1bb 0f00 	cmp.w	fp, #0
 801a8ae:	dc6c      	bgt.n	801a98a <__kernel_rem_pio2+0x5d2>
 801a8b0:	46a2      	mov	sl, r4
 801a8b2:	46ab      	mov	fp, r5
 801a8b4:	f1bb 0f01 	cmp.w	fp, #1
 801a8b8:	f300 8086 	bgt.w	801a9c8 <__kernel_rem_pio2+0x610>
 801a8bc:	2000      	movs	r0, #0
 801a8be:	2100      	movs	r1, #0
 801a8c0:	2d01      	cmp	r5, #1
 801a8c2:	f300 80a0 	bgt.w	801aa06 <__kernel_rem_pio2+0x64e>
 801a8c6:	9b02      	ldr	r3, [sp, #8]
 801a8c8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801a8cc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	f040 809e 	bne.w	801aa12 <__kernel_rem_pio2+0x65a>
 801a8d6:	9b01      	ldr	r3, [sp, #4]
 801a8d8:	e9c3 7800 	strd	r7, r8, [r3]
 801a8dc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801a8e0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801a8e4:	e033      	b.n	801a94e <__kernel_rem_pio2+0x596>
 801a8e6:	3408      	adds	r4, #8
 801a8e8:	ab4a      	add	r3, sp, #296	; 0x128
 801a8ea:	441c      	add	r4, r3
 801a8ec:	462e      	mov	r6, r5
 801a8ee:	2000      	movs	r0, #0
 801a8f0:	2100      	movs	r1, #0
 801a8f2:	2e00      	cmp	r6, #0
 801a8f4:	da3a      	bge.n	801a96c <__kernel_rem_pio2+0x5b4>
 801a8f6:	9b02      	ldr	r3, [sp, #8]
 801a8f8:	2b00      	cmp	r3, #0
 801a8fa:	d03d      	beq.n	801a978 <__kernel_rem_pio2+0x5c0>
 801a8fc:	4602      	mov	r2, r0
 801a8fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a902:	9c01      	ldr	r4, [sp, #4]
 801a904:	e9c4 2300 	strd	r2, r3, [r4]
 801a908:	4602      	mov	r2, r0
 801a90a:	460b      	mov	r3, r1
 801a90c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801a910:	f7e5 fcba 	bl	8000288 <__aeabi_dsub>
 801a914:	ae4c      	add	r6, sp, #304	; 0x130
 801a916:	2401      	movs	r4, #1
 801a918:	42a5      	cmp	r5, r4
 801a91a:	da30      	bge.n	801a97e <__kernel_rem_pio2+0x5c6>
 801a91c:	9b02      	ldr	r3, [sp, #8]
 801a91e:	b113      	cbz	r3, 801a926 <__kernel_rem_pio2+0x56e>
 801a920:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a924:	4619      	mov	r1, r3
 801a926:	9b01      	ldr	r3, [sp, #4]
 801a928:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801a92c:	e00f      	b.n	801a94e <__kernel_rem_pio2+0x596>
 801a92e:	ab9a      	add	r3, sp, #616	; 0x268
 801a930:	441c      	add	r4, r3
 801a932:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801a936:	2000      	movs	r0, #0
 801a938:	2100      	movs	r1, #0
 801a93a:	2d00      	cmp	r5, #0
 801a93c:	da10      	bge.n	801a960 <__kernel_rem_pio2+0x5a8>
 801a93e:	9b02      	ldr	r3, [sp, #8]
 801a940:	b113      	cbz	r3, 801a948 <__kernel_rem_pio2+0x590>
 801a942:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a946:	4619      	mov	r1, r3
 801a948:	9b01      	ldr	r3, [sp, #4]
 801a94a:	e9c3 0100 	strd	r0, r1, [r3]
 801a94e:	9b06      	ldr	r3, [sp, #24]
 801a950:	f003 0007 	and.w	r0, r3, #7
 801a954:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801a958:	ecbd 8b02 	vpop	{d8}
 801a95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a960:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a964:	f7e5 fc92 	bl	800028c <__adddf3>
 801a968:	3d01      	subs	r5, #1
 801a96a:	e7e6      	b.n	801a93a <__kernel_rem_pio2+0x582>
 801a96c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a970:	f7e5 fc8c 	bl	800028c <__adddf3>
 801a974:	3e01      	subs	r6, #1
 801a976:	e7bc      	b.n	801a8f2 <__kernel_rem_pio2+0x53a>
 801a978:	4602      	mov	r2, r0
 801a97a:	460b      	mov	r3, r1
 801a97c:	e7c1      	b.n	801a902 <__kernel_rem_pio2+0x54a>
 801a97e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801a982:	f7e5 fc83 	bl	800028c <__adddf3>
 801a986:	3401      	adds	r4, #1
 801a988:	e7c6      	b.n	801a918 <__kernel_rem_pio2+0x560>
 801a98a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801a98e:	ed3a 7b02 	vldmdb	sl!, {d7}
 801a992:	4640      	mov	r0, r8
 801a994:	ec53 2b17 	vmov	r2, r3, d7
 801a998:	4649      	mov	r1, r9
 801a99a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a99e:	f7e5 fc75 	bl	800028c <__adddf3>
 801a9a2:	4602      	mov	r2, r0
 801a9a4:	460b      	mov	r3, r1
 801a9a6:	4606      	mov	r6, r0
 801a9a8:	460f      	mov	r7, r1
 801a9aa:	4640      	mov	r0, r8
 801a9ac:	4649      	mov	r1, r9
 801a9ae:	f7e5 fc6b 	bl	8000288 <__aeabi_dsub>
 801a9b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a9b6:	f7e5 fc69 	bl	800028c <__adddf3>
 801a9ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a9be:	e9ca 0100 	strd	r0, r1, [sl]
 801a9c2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801a9c6:	e770      	b.n	801a8aa <__kernel_rem_pio2+0x4f2>
 801a9c8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801a9cc:	ed3a 7b02 	vldmdb	sl!, {d7}
 801a9d0:	4630      	mov	r0, r6
 801a9d2:	ec53 2b17 	vmov	r2, r3, d7
 801a9d6:	4639      	mov	r1, r7
 801a9d8:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a9dc:	f7e5 fc56 	bl	800028c <__adddf3>
 801a9e0:	4602      	mov	r2, r0
 801a9e2:	460b      	mov	r3, r1
 801a9e4:	4680      	mov	r8, r0
 801a9e6:	4689      	mov	r9, r1
 801a9e8:	4630      	mov	r0, r6
 801a9ea:	4639      	mov	r1, r7
 801a9ec:	f7e5 fc4c 	bl	8000288 <__aeabi_dsub>
 801a9f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a9f4:	f7e5 fc4a 	bl	800028c <__adddf3>
 801a9f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a9fc:	e9ca 0100 	strd	r0, r1, [sl]
 801aa00:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801aa04:	e756      	b.n	801a8b4 <__kernel_rem_pio2+0x4fc>
 801aa06:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801aa0a:	f7e5 fc3f 	bl	800028c <__adddf3>
 801aa0e:	3d01      	subs	r5, #1
 801aa10:	e756      	b.n	801a8c0 <__kernel_rem_pio2+0x508>
 801aa12:	9b01      	ldr	r3, [sp, #4]
 801aa14:	9a01      	ldr	r2, [sp, #4]
 801aa16:	601f      	str	r7, [r3, #0]
 801aa18:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801aa1c:	605c      	str	r4, [r3, #4]
 801aa1e:	609d      	str	r5, [r3, #8]
 801aa20:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801aa24:	60d3      	str	r3, [r2, #12]
 801aa26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aa2a:	6110      	str	r0, [r2, #16]
 801aa2c:	6153      	str	r3, [r2, #20]
 801aa2e:	e78e      	b.n	801a94e <__kernel_rem_pio2+0x596>
 801aa30:	41700000 	.word	0x41700000
 801aa34:	3e700000 	.word	0x3e700000

0801aa38 <__kernel_sin>:
 801aa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa3c:	ec55 4b10 	vmov	r4, r5, d0
 801aa40:	b085      	sub	sp, #20
 801aa42:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801aa46:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801aa4a:	ed8d 1b00 	vstr	d1, [sp]
 801aa4e:	9002      	str	r0, [sp, #8]
 801aa50:	da06      	bge.n	801aa60 <__kernel_sin+0x28>
 801aa52:	ee10 0a10 	vmov	r0, s0
 801aa56:	4629      	mov	r1, r5
 801aa58:	f7e6 f87e 	bl	8000b58 <__aeabi_d2iz>
 801aa5c:	2800      	cmp	r0, #0
 801aa5e:	d051      	beq.n	801ab04 <__kernel_sin+0xcc>
 801aa60:	4622      	mov	r2, r4
 801aa62:	462b      	mov	r3, r5
 801aa64:	4620      	mov	r0, r4
 801aa66:	4629      	mov	r1, r5
 801aa68:	f7e5 fdc6 	bl	80005f8 <__aeabi_dmul>
 801aa6c:	4682      	mov	sl, r0
 801aa6e:	468b      	mov	fp, r1
 801aa70:	4602      	mov	r2, r0
 801aa72:	460b      	mov	r3, r1
 801aa74:	4620      	mov	r0, r4
 801aa76:	4629      	mov	r1, r5
 801aa78:	f7e5 fdbe 	bl	80005f8 <__aeabi_dmul>
 801aa7c:	a341      	add	r3, pc, #260	; (adr r3, 801ab84 <__kernel_sin+0x14c>)
 801aa7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa82:	4680      	mov	r8, r0
 801aa84:	4689      	mov	r9, r1
 801aa86:	4650      	mov	r0, sl
 801aa88:	4659      	mov	r1, fp
 801aa8a:	f7e5 fdb5 	bl	80005f8 <__aeabi_dmul>
 801aa8e:	a33f      	add	r3, pc, #252	; (adr r3, 801ab8c <__kernel_sin+0x154>)
 801aa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa94:	f7e5 fbf8 	bl	8000288 <__aeabi_dsub>
 801aa98:	4652      	mov	r2, sl
 801aa9a:	465b      	mov	r3, fp
 801aa9c:	f7e5 fdac 	bl	80005f8 <__aeabi_dmul>
 801aaa0:	a33c      	add	r3, pc, #240	; (adr r3, 801ab94 <__kernel_sin+0x15c>)
 801aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaa6:	f7e5 fbf1 	bl	800028c <__adddf3>
 801aaaa:	4652      	mov	r2, sl
 801aaac:	465b      	mov	r3, fp
 801aaae:	f7e5 fda3 	bl	80005f8 <__aeabi_dmul>
 801aab2:	a33a      	add	r3, pc, #232	; (adr r3, 801ab9c <__kernel_sin+0x164>)
 801aab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aab8:	f7e5 fbe6 	bl	8000288 <__aeabi_dsub>
 801aabc:	4652      	mov	r2, sl
 801aabe:	465b      	mov	r3, fp
 801aac0:	f7e5 fd9a 	bl	80005f8 <__aeabi_dmul>
 801aac4:	a337      	add	r3, pc, #220	; (adr r3, 801aba4 <__kernel_sin+0x16c>)
 801aac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaca:	f7e5 fbdf 	bl	800028c <__adddf3>
 801aace:	9b02      	ldr	r3, [sp, #8]
 801aad0:	4606      	mov	r6, r0
 801aad2:	460f      	mov	r7, r1
 801aad4:	b9db      	cbnz	r3, 801ab0e <__kernel_sin+0xd6>
 801aad6:	4602      	mov	r2, r0
 801aad8:	460b      	mov	r3, r1
 801aada:	4650      	mov	r0, sl
 801aadc:	4659      	mov	r1, fp
 801aade:	f7e5 fd8b 	bl	80005f8 <__aeabi_dmul>
 801aae2:	a325      	add	r3, pc, #148	; (adr r3, 801ab78 <__kernel_sin+0x140>)
 801aae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aae8:	f7e5 fbce 	bl	8000288 <__aeabi_dsub>
 801aaec:	4642      	mov	r2, r8
 801aaee:	464b      	mov	r3, r9
 801aaf0:	f7e5 fd82 	bl	80005f8 <__aeabi_dmul>
 801aaf4:	4602      	mov	r2, r0
 801aaf6:	460b      	mov	r3, r1
 801aaf8:	4620      	mov	r0, r4
 801aafa:	4629      	mov	r1, r5
 801aafc:	f7e5 fbc6 	bl	800028c <__adddf3>
 801ab00:	4604      	mov	r4, r0
 801ab02:	460d      	mov	r5, r1
 801ab04:	ec45 4b10 	vmov	d0, r4, r5
 801ab08:	b005      	add	sp, #20
 801ab0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab0e:	2200      	movs	r2, #0
 801ab10:	4b1b      	ldr	r3, [pc, #108]	; (801ab80 <__kernel_sin+0x148>)
 801ab12:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ab16:	f7e5 fd6f 	bl	80005f8 <__aeabi_dmul>
 801ab1a:	4632      	mov	r2, r6
 801ab1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ab20:	463b      	mov	r3, r7
 801ab22:	4640      	mov	r0, r8
 801ab24:	4649      	mov	r1, r9
 801ab26:	f7e5 fd67 	bl	80005f8 <__aeabi_dmul>
 801ab2a:	4602      	mov	r2, r0
 801ab2c:	460b      	mov	r3, r1
 801ab2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ab32:	f7e5 fba9 	bl	8000288 <__aeabi_dsub>
 801ab36:	4652      	mov	r2, sl
 801ab38:	465b      	mov	r3, fp
 801ab3a:	f7e5 fd5d 	bl	80005f8 <__aeabi_dmul>
 801ab3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ab42:	f7e5 fba1 	bl	8000288 <__aeabi_dsub>
 801ab46:	a30c      	add	r3, pc, #48	; (adr r3, 801ab78 <__kernel_sin+0x140>)
 801ab48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab4c:	4606      	mov	r6, r0
 801ab4e:	460f      	mov	r7, r1
 801ab50:	4640      	mov	r0, r8
 801ab52:	4649      	mov	r1, r9
 801ab54:	f7e5 fd50 	bl	80005f8 <__aeabi_dmul>
 801ab58:	4602      	mov	r2, r0
 801ab5a:	460b      	mov	r3, r1
 801ab5c:	4630      	mov	r0, r6
 801ab5e:	4639      	mov	r1, r7
 801ab60:	f7e5 fb94 	bl	800028c <__adddf3>
 801ab64:	4602      	mov	r2, r0
 801ab66:	460b      	mov	r3, r1
 801ab68:	4620      	mov	r0, r4
 801ab6a:	4629      	mov	r1, r5
 801ab6c:	f7e5 fb8c 	bl	8000288 <__aeabi_dsub>
 801ab70:	e7c6      	b.n	801ab00 <__kernel_sin+0xc8>
 801ab72:	bf00      	nop
 801ab74:	f3af 8000 	nop.w
 801ab78:	55555549 	.word	0x55555549
 801ab7c:	3fc55555 	.word	0x3fc55555
 801ab80:	3fe00000 	.word	0x3fe00000
 801ab84:	5acfd57c 	.word	0x5acfd57c
 801ab88:	3de5d93a 	.word	0x3de5d93a
 801ab8c:	8a2b9ceb 	.word	0x8a2b9ceb
 801ab90:	3e5ae5e6 	.word	0x3e5ae5e6
 801ab94:	57b1fe7d 	.word	0x57b1fe7d
 801ab98:	3ec71de3 	.word	0x3ec71de3
 801ab9c:	19c161d5 	.word	0x19c161d5
 801aba0:	3f2a01a0 	.word	0x3f2a01a0
 801aba4:	1110f8a6 	.word	0x1110f8a6
 801aba8:	3f811111 	.word	0x3f811111
 801abac:	00000000 	.word	0x00000000

0801abb0 <atan>:
 801abb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abb4:	ec55 4b10 	vmov	r4, r5, d0
 801abb8:	4bc3      	ldr	r3, [pc, #780]	; (801aec8 <atan+0x318>)
 801abba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801abbe:	429e      	cmp	r6, r3
 801abc0:	46ab      	mov	fp, r5
 801abc2:	dd18      	ble.n	801abf6 <atan+0x46>
 801abc4:	4bc1      	ldr	r3, [pc, #772]	; (801aecc <atan+0x31c>)
 801abc6:	429e      	cmp	r6, r3
 801abc8:	dc01      	bgt.n	801abce <atan+0x1e>
 801abca:	d109      	bne.n	801abe0 <atan+0x30>
 801abcc:	b144      	cbz	r4, 801abe0 <atan+0x30>
 801abce:	4622      	mov	r2, r4
 801abd0:	462b      	mov	r3, r5
 801abd2:	4620      	mov	r0, r4
 801abd4:	4629      	mov	r1, r5
 801abd6:	f7e5 fb59 	bl	800028c <__adddf3>
 801abda:	4604      	mov	r4, r0
 801abdc:	460d      	mov	r5, r1
 801abde:	e006      	b.n	801abee <atan+0x3e>
 801abe0:	f1bb 0f00 	cmp.w	fp, #0
 801abe4:	f340 8131 	ble.w	801ae4a <atan+0x29a>
 801abe8:	a59b      	add	r5, pc, #620	; (adr r5, 801ae58 <atan+0x2a8>)
 801abea:	e9d5 4500 	ldrd	r4, r5, [r5]
 801abee:	ec45 4b10 	vmov	d0, r4, r5
 801abf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abf6:	4bb6      	ldr	r3, [pc, #728]	; (801aed0 <atan+0x320>)
 801abf8:	429e      	cmp	r6, r3
 801abfa:	dc14      	bgt.n	801ac26 <atan+0x76>
 801abfc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801ac00:	429e      	cmp	r6, r3
 801ac02:	dc0d      	bgt.n	801ac20 <atan+0x70>
 801ac04:	a396      	add	r3, pc, #600	; (adr r3, 801ae60 <atan+0x2b0>)
 801ac06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac0a:	ee10 0a10 	vmov	r0, s0
 801ac0e:	4629      	mov	r1, r5
 801ac10:	f7e5 fb3c 	bl	800028c <__adddf3>
 801ac14:	2200      	movs	r2, #0
 801ac16:	4baf      	ldr	r3, [pc, #700]	; (801aed4 <atan+0x324>)
 801ac18:	f7e5 ff7e 	bl	8000b18 <__aeabi_dcmpgt>
 801ac1c:	2800      	cmp	r0, #0
 801ac1e:	d1e6      	bne.n	801abee <atan+0x3e>
 801ac20:	f04f 3aff 	mov.w	sl, #4294967295
 801ac24:	e02b      	b.n	801ac7e <atan+0xce>
 801ac26:	f000 f963 	bl	801aef0 <fabs>
 801ac2a:	4bab      	ldr	r3, [pc, #684]	; (801aed8 <atan+0x328>)
 801ac2c:	429e      	cmp	r6, r3
 801ac2e:	ec55 4b10 	vmov	r4, r5, d0
 801ac32:	f300 80bf 	bgt.w	801adb4 <atan+0x204>
 801ac36:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801ac3a:	429e      	cmp	r6, r3
 801ac3c:	f300 80a0 	bgt.w	801ad80 <atan+0x1d0>
 801ac40:	ee10 2a10 	vmov	r2, s0
 801ac44:	ee10 0a10 	vmov	r0, s0
 801ac48:	462b      	mov	r3, r5
 801ac4a:	4629      	mov	r1, r5
 801ac4c:	f7e5 fb1e 	bl	800028c <__adddf3>
 801ac50:	2200      	movs	r2, #0
 801ac52:	4ba0      	ldr	r3, [pc, #640]	; (801aed4 <atan+0x324>)
 801ac54:	f7e5 fb18 	bl	8000288 <__aeabi_dsub>
 801ac58:	2200      	movs	r2, #0
 801ac5a:	4606      	mov	r6, r0
 801ac5c:	460f      	mov	r7, r1
 801ac5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ac62:	4620      	mov	r0, r4
 801ac64:	4629      	mov	r1, r5
 801ac66:	f7e5 fb11 	bl	800028c <__adddf3>
 801ac6a:	4602      	mov	r2, r0
 801ac6c:	460b      	mov	r3, r1
 801ac6e:	4630      	mov	r0, r6
 801ac70:	4639      	mov	r1, r7
 801ac72:	f7e5 fdeb 	bl	800084c <__aeabi_ddiv>
 801ac76:	f04f 0a00 	mov.w	sl, #0
 801ac7a:	4604      	mov	r4, r0
 801ac7c:	460d      	mov	r5, r1
 801ac7e:	4622      	mov	r2, r4
 801ac80:	462b      	mov	r3, r5
 801ac82:	4620      	mov	r0, r4
 801ac84:	4629      	mov	r1, r5
 801ac86:	f7e5 fcb7 	bl	80005f8 <__aeabi_dmul>
 801ac8a:	4602      	mov	r2, r0
 801ac8c:	460b      	mov	r3, r1
 801ac8e:	4680      	mov	r8, r0
 801ac90:	4689      	mov	r9, r1
 801ac92:	f7e5 fcb1 	bl	80005f8 <__aeabi_dmul>
 801ac96:	a374      	add	r3, pc, #464	; (adr r3, 801ae68 <atan+0x2b8>)
 801ac98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac9c:	4606      	mov	r6, r0
 801ac9e:	460f      	mov	r7, r1
 801aca0:	f7e5 fcaa 	bl	80005f8 <__aeabi_dmul>
 801aca4:	a372      	add	r3, pc, #456	; (adr r3, 801ae70 <atan+0x2c0>)
 801aca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acaa:	f7e5 faef 	bl	800028c <__adddf3>
 801acae:	4632      	mov	r2, r6
 801acb0:	463b      	mov	r3, r7
 801acb2:	f7e5 fca1 	bl	80005f8 <__aeabi_dmul>
 801acb6:	a370      	add	r3, pc, #448	; (adr r3, 801ae78 <atan+0x2c8>)
 801acb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acbc:	f7e5 fae6 	bl	800028c <__adddf3>
 801acc0:	4632      	mov	r2, r6
 801acc2:	463b      	mov	r3, r7
 801acc4:	f7e5 fc98 	bl	80005f8 <__aeabi_dmul>
 801acc8:	a36d      	add	r3, pc, #436	; (adr r3, 801ae80 <atan+0x2d0>)
 801acca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acce:	f7e5 fadd 	bl	800028c <__adddf3>
 801acd2:	4632      	mov	r2, r6
 801acd4:	463b      	mov	r3, r7
 801acd6:	f7e5 fc8f 	bl	80005f8 <__aeabi_dmul>
 801acda:	a36b      	add	r3, pc, #428	; (adr r3, 801ae88 <atan+0x2d8>)
 801acdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ace0:	f7e5 fad4 	bl	800028c <__adddf3>
 801ace4:	4632      	mov	r2, r6
 801ace6:	463b      	mov	r3, r7
 801ace8:	f7e5 fc86 	bl	80005f8 <__aeabi_dmul>
 801acec:	a368      	add	r3, pc, #416	; (adr r3, 801ae90 <atan+0x2e0>)
 801acee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acf2:	f7e5 facb 	bl	800028c <__adddf3>
 801acf6:	4642      	mov	r2, r8
 801acf8:	464b      	mov	r3, r9
 801acfa:	f7e5 fc7d 	bl	80005f8 <__aeabi_dmul>
 801acfe:	a366      	add	r3, pc, #408	; (adr r3, 801ae98 <atan+0x2e8>)
 801ad00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad04:	4680      	mov	r8, r0
 801ad06:	4689      	mov	r9, r1
 801ad08:	4630      	mov	r0, r6
 801ad0a:	4639      	mov	r1, r7
 801ad0c:	f7e5 fc74 	bl	80005f8 <__aeabi_dmul>
 801ad10:	a363      	add	r3, pc, #396	; (adr r3, 801aea0 <atan+0x2f0>)
 801ad12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad16:	f7e5 fab7 	bl	8000288 <__aeabi_dsub>
 801ad1a:	4632      	mov	r2, r6
 801ad1c:	463b      	mov	r3, r7
 801ad1e:	f7e5 fc6b 	bl	80005f8 <__aeabi_dmul>
 801ad22:	a361      	add	r3, pc, #388	; (adr r3, 801aea8 <atan+0x2f8>)
 801ad24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad28:	f7e5 faae 	bl	8000288 <__aeabi_dsub>
 801ad2c:	4632      	mov	r2, r6
 801ad2e:	463b      	mov	r3, r7
 801ad30:	f7e5 fc62 	bl	80005f8 <__aeabi_dmul>
 801ad34:	a35e      	add	r3, pc, #376	; (adr r3, 801aeb0 <atan+0x300>)
 801ad36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad3a:	f7e5 faa5 	bl	8000288 <__aeabi_dsub>
 801ad3e:	4632      	mov	r2, r6
 801ad40:	463b      	mov	r3, r7
 801ad42:	f7e5 fc59 	bl	80005f8 <__aeabi_dmul>
 801ad46:	a35c      	add	r3, pc, #368	; (adr r3, 801aeb8 <atan+0x308>)
 801ad48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad4c:	f7e5 fa9c 	bl	8000288 <__aeabi_dsub>
 801ad50:	4632      	mov	r2, r6
 801ad52:	463b      	mov	r3, r7
 801ad54:	f7e5 fc50 	bl	80005f8 <__aeabi_dmul>
 801ad58:	4602      	mov	r2, r0
 801ad5a:	460b      	mov	r3, r1
 801ad5c:	4640      	mov	r0, r8
 801ad5e:	4649      	mov	r1, r9
 801ad60:	f7e5 fa94 	bl	800028c <__adddf3>
 801ad64:	4622      	mov	r2, r4
 801ad66:	462b      	mov	r3, r5
 801ad68:	f7e5 fc46 	bl	80005f8 <__aeabi_dmul>
 801ad6c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801ad70:	4602      	mov	r2, r0
 801ad72:	460b      	mov	r3, r1
 801ad74:	d14b      	bne.n	801ae0e <atan+0x25e>
 801ad76:	4620      	mov	r0, r4
 801ad78:	4629      	mov	r1, r5
 801ad7a:	f7e5 fa85 	bl	8000288 <__aeabi_dsub>
 801ad7e:	e72c      	b.n	801abda <atan+0x2a>
 801ad80:	ee10 0a10 	vmov	r0, s0
 801ad84:	2200      	movs	r2, #0
 801ad86:	4b53      	ldr	r3, [pc, #332]	; (801aed4 <atan+0x324>)
 801ad88:	4629      	mov	r1, r5
 801ad8a:	f7e5 fa7d 	bl	8000288 <__aeabi_dsub>
 801ad8e:	2200      	movs	r2, #0
 801ad90:	4606      	mov	r6, r0
 801ad92:	460f      	mov	r7, r1
 801ad94:	4b4f      	ldr	r3, [pc, #316]	; (801aed4 <atan+0x324>)
 801ad96:	4620      	mov	r0, r4
 801ad98:	4629      	mov	r1, r5
 801ad9a:	f7e5 fa77 	bl	800028c <__adddf3>
 801ad9e:	4602      	mov	r2, r0
 801ada0:	460b      	mov	r3, r1
 801ada2:	4630      	mov	r0, r6
 801ada4:	4639      	mov	r1, r7
 801ada6:	f7e5 fd51 	bl	800084c <__aeabi_ddiv>
 801adaa:	f04f 0a01 	mov.w	sl, #1
 801adae:	4604      	mov	r4, r0
 801adb0:	460d      	mov	r5, r1
 801adb2:	e764      	b.n	801ac7e <atan+0xce>
 801adb4:	4b49      	ldr	r3, [pc, #292]	; (801aedc <atan+0x32c>)
 801adb6:	429e      	cmp	r6, r3
 801adb8:	dc1d      	bgt.n	801adf6 <atan+0x246>
 801adba:	ee10 0a10 	vmov	r0, s0
 801adbe:	2200      	movs	r2, #0
 801adc0:	4b47      	ldr	r3, [pc, #284]	; (801aee0 <atan+0x330>)
 801adc2:	4629      	mov	r1, r5
 801adc4:	f7e5 fa60 	bl	8000288 <__aeabi_dsub>
 801adc8:	2200      	movs	r2, #0
 801adca:	4606      	mov	r6, r0
 801adcc:	460f      	mov	r7, r1
 801adce:	4b44      	ldr	r3, [pc, #272]	; (801aee0 <atan+0x330>)
 801add0:	4620      	mov	r0, r4
 801add2:	4629      	mov	r1, r5
 801add4:	f7e5 fc10 	bl	80005f8 <__aeabi_dmul>
 801add8:	2200      	movs	r2, #0
 801adda:	4b3e      	ldr	r3, [pc, #248]	; (801aed4 <atan+0x324>)
 801addc:	f7e5 fa56 	bl	800028c <__adddf3>
 801ade0:	4602      	mov	r2, r0
 801ade2:	460b      	mov	r3, r1
 801ade4:	4630      	mov	r0, r6
 801ade6:	4639      	mov	r1, r7
 801ade8:	f7e5 fd30 	bl	800084c <__aeabi_ddiv>
 801adec:	f04f 0a02 	mov.w	sl, #2
 801adf0:	4604      	mov	r4, r0
 801adf2:	460d      	mov	r5, r1
 801adf4:	e743      	b.n	801ac7e <atan+0xce>
 801adf6:	462b      	mov	r3, r5
 801adf8:	ee10 2a10 	vmov	r2, s0
 801adfc:	2000      	movs	r0, #0
 801adfe:	4939      	ldr	r1, [pc, #228]	; (801aee4 <atan+0x334>)
 801ae00:	f7e5 fd24 	bl	800084c <__aeabi_ddiv>
 801ae04:	f04f 0a03 	mov.w	sl, #3
 801ae08:	4604      	mov	r4, r0
 801ae0a:	460d      	mov	r5, r1
 801ae0c:	e737      	b.n	801ac7e <atan+0xce>
 801ae0e:	4b36      	ldr	r3, [pc, #216]	; (801aee8 <atan+0x338>)
 801ae10:	4e36      	ldr	r6, [pc, #216]	; (801aeec <atan+0x33c>)
 801ae12:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801ae16:	4456      	add	r6, sl
 801ae18:	449a      	add	sl, r3
 801ae1a:	e9da 2300 	ldrd	r2, r3, [sl]
 801ae1e:	f7e5 fa33 	bl	8000288 <__aeabi_dsub>
 801ae22:	4622      	mov	r2, r4
 801ae24:	462b      	mov	r3, r5
 801ae26:	f7e5 fa2f 	bl	8000288 <__aeabi_dsub>
 801ae2a:	4602      	mov	r2, r0
 801ae2c:	460b      	mov	r3, r1
 801ae2e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801ae32:	f7e5 fa29 	bl	8000288 <__aeabi_dsub>
 801ae36:	f1bb 0f00 	cmp.w	fp, #0
 801ae3a:	4604      	mov	r4, r0
 801ae3c:	460d      	mov	r5, r1
 801ae3e:	f6bf aed6 	bge.w	801abee <atan+0x3e>
 801ae42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ae46:	461d      	mov	r5, r3
 801ae48:	e6d1      	b.n	801abee <atan+0x3e>
 801ae4a:	a51d      	add	r5, pc, #116	; (adr r5, 801aec0 <atan+0x310>)
 801ae4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ae50:	e6cd      	b.n	801abee <atan+0x3e>
 801ae52:	bf00      	nop
 801ae54:	f3af 8000 	nop.w
 801ae58:	54442d18 	.word	0x54442d18
 801ae5c:	3ff921fb 	.word	0x3ff921fb
 801ae60:	8800759c 	.word	0x8800759c
 801ae64:	7e37e43c 	.word	0x7e37e43c
 801ae68:	e322da11 	.word	0xe322da11
 801ae6c:	3f90ad3a 	.word	0x3f90ad3a
 801ae70:	24760deb 	.word	0x24760deb
 801ae74:	3fa97b4b 	.word	0x3fa97b4b
 801ae78:	a0d03d51 	.word	0xa0d03d51
 801ae7c:	3fb10d66 	.word	0x3fb10d66
 801ae80:	c54c206e 	.word	0xc54c206e
 801ae84:	3fb745cd 	.word	0x3fb745cd
 801ae88:	920083ff 	.word	0x920083ff
 801ae8c:	3fc24924 	.word	0x3fc24924
 801ae90:	5555550d 	.word	0x5555550d
 801ae94:	3fd55555 	.word	0x3fd55555
 801ae98:	2c6a6c2f 	.word	0x2c6a6c2f
 801ae9c:	bfa2b444 	.word	0xbfa2b444
 801aea0:	52defd9a 	.word	0x52defd9a
 801aea4:	3fadde2d 	.word	0x3fadde2d
 801aea8:	af749a6d 	.word	0xaf749a6d
 801aeac:	3fb3b0f2 	.word	0x3fb3b0f2
 801aeb0:	fe231671 	.word	0xfe231671
 801aeb4:	3fbc71c6 	.word	0x3fbc71c6
 801aeb8:	9998ebc4 	.word	0x9998ebc4
 801aebc:	3fc99999 	.word	0x3fc99999
 801aec0:	54442d18 	.word	0x54442d18
 801aec4:	bff921fb 	.word	0xbff921fb
 801aec8:	440fffff 	.word	0x440fffff
 801aecc:	7ff00000 	.word	0x7ff00000
 801aed0:	3fdbffff 	.word	0x3fdbffff
 801aed4:	3ff00000 	.word	0x3ff00000
 801aed8:	3ff2ffff 	.word	0x3ff2ffff
 801aedc:	40037fff 	.word	0x40037fff
 801aee0:	3ff80000 	.word	0x3ff80000
 801aee4:	bff00000 	.word	0xbff00000
 801aee8:	0801b8d8 	.word	0x0801b8d8
 801aeec:	0801b8b8 	.word	0x0801b8b8

0801aef0 <fabs>:
 801aef0:	ec51 0b10 	vmov	r0, r1, d0
 801aef4:	ee10 2a10 	vmov	r2, s0
 801aef8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801aefc:	ec43 2b10 	vmov	d0, r2, r3
 801af00:	4770      	bx	lr
 801af02:	0000      	movs	r0, r0
 801af04:	0000      	movs	r0, r0
	...

0801af08 <floor>:
 801af08:	ec51 0b10 	vmov	r0, r1, d0
 801af0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af10:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801af14:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801af18:	2e13      	cmp	r6, #19
 801af1a:	460c      	mov	r4, r1
 801af1c:	ee10 5a10 	vmov	r5, s0
 801af20:	4680      	mov	r8, r0
 801af22:	dc34      	bgt.n	801af8e <floor+0x86>
 801af24:	2e00      	cmp	r6, #0
 801af26:	da16      	bge.n	801af56 <floor+0x4e>
 801af28:	a335      	add	r3, pc, #212	; (adr r3, 801b000 <floor+0xf8>)
 801af2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af2e:	f7e5 f9ad 	bl	800028c <__adddf3>
 801af32:	2200      	movs	r2, #0
 801af34:	2300      	movs	r3, #0
 801af36:	f7e5 fdef 	bl	8000b18 <__aeabi_dcmpgt>
 801af3a:	b148      	cbz	r0, 801af50 <floor+0x48>
 801af3c:	2c00      	cmp	r4, #0
 801af3e:	da59      	bge.n	801aff4 <floor+0xec>
 801af40:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801af44:	4a30      	ldr	r2, [pc, #192]	; (801b008 <floor+0x100>)
 801af46:	432b      	orrs	r3, r5
 801af48:	2500      	movs	r5, #0
 801af4a:	42ab      	cmp	r3, r5
 801af4c:	bf18      	it	ne
 801af4e:	4614      	movne	r4, r2
 801af50:	4621      	mov	r1, r4
 801af52:	4628      	mov	r0, r5
 801af54:	e025      	b.n	801afa2 <floor+0x9a>
 801af56:	4f2d      	ldr	r7, [pc, #180]	; (801b00c <floor+0x104>)
 801af58:	4137      	asrs	r7, r6
 801af5a:	ea01 0307 	and.w	r3, r1, r7
 801af5e:	4303      	orrs	r3, r0
 801af60:	d01f      	beq.n	801afa2 <floor+0x9a>
 801af62:	a327      	add	r3, pc, #156	; (adr r3, 801b000 <floor+0xf8>)
 801af64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af68:	f7e5 f990 	bl	800028c <__adddf3>
 801af6c:	2200      	movs	r2, #0
 801af6e:	2300      	movs	r3, #0
 801af70:	f7e5 fdd2 	bl	8000b18 <__aeabi_dcmpgt>
 801af74:	2800      	cmp	r0, #0
 801af76:	d0eb      	beq.n	801af50 <floor+0x48>
 801af78:	2c00      	cmp	r4, #0
 801af7a:	bfbe      	ittt	lt
 801af7c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801af80:	fa43 f606 	asrlt.w	r6, r3, r6
 801af84:	19a4      	addlt	r4, r4, r6
 801af86:	ea24 0407 	bic.w	r4, r4, r7
 801af8a:	2500      	movs	r5, #0
 801af8c:	e7e0      	b.n	801af50 <floor+0x48>
 801af8e:	2e33      	cmp	r6, #51	; 0x33
 801af90:	dd0b      	ble.n	801afaa <floor+0xa2>
 801af92:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801af96:	d104      	bne.n	801afa2 <floor+0x9a>
 801af98:	ee10 2a10 	vmov	r2, s0
 801af9c:	460b      	mov	r3, r1
 801af9e:	f7e5 f975 	bl	800028c <__adddf3>
 801afa2:	ec41 0b10 	vmov	d0, r0, r1
 801afa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801afaa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801afae:	f04f 33ff 	mov.w	r3, #4294967295
 801afb2:	fa23 f707 	lsr.w	r7, r3, r7
 801afb6:	4207      	tst	r7, r0
 801afb8:	d0f3      	beq.n	801afa2 <floor+0x9a>
 801afba:	a311      	add	r3, pc, #68	; (adr r3, 801b000 <floor+0xf8>)
 801afbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afc0:	f7e5 f964 	bl	800028c <__adddf3>
 801afc4:	2200      	movs	r2, #0
 801afc6:	2300      	movs	r3, #0
 801afc8:	f7e5 fda6 	bl	8000b18 <__aeabi_dcmpgt>
 801afcc:	2800      	cmp	r0, #0
 801afce:	d0bf      	beq.n	801af50 <floor+0x48>
 801afd0:	2c00      	cmp	r4, #0
 801afd2:	da02      	bge.n	801afda <floor+0xd2>
 801afd4:	2e14      	cmp	r6, #20
 801afd6:	d103      	bne.n	801afe0 <floor+0xd8>
 801afd8:	3401      	adds	r4, #1
 801afda:	ea25 0507 	bic.w	r5, r5, r7
 801afde:	e7b7      	b.n	801af50 <floor+0x48>
 801afe0:	2301      	movs	r3, #1
 801afe2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801afe6:	fa03 f606 	lsl.w	r6, r3, r6
 801afea:	4435      	add	r5, r6
 801afec:	4545      	cmp	r5, r8
 801afee:	bf38      	it	cc
 801aff0:	18e4      	addcc	r4, r4, r3
 801aff2:	e7f2      	b.n	801afda <floor+0xd2>
 801aff4:	2500      	movs	r5, #0
 801aff6:	462c      	mov	r4, r5
 801aff8:	e7aa      	b.n	801af50 <floor+0x48>
 801affa:	bf00      	nop
 801affc:	f3af 8000 	nop.w
 801b000:	8800759c 	.word	0x8800759c
 801b004:	7e37e43c 	.word	0x7e37e43c
 801b008:	bff00000 	.word	0xbff00000
 801b00c:	000fffff 	.word	0x000fffff

0801b010 <matherr>:
 801b010:	2000      	movs	r0, #0
 801b012:	4770      	bx	lr
 801b014:	0000      	movs	r0, r0
	...

0801b018 <scalbn>:
 801b018:	b570      	push	{r4, r5, r6, lr}
 801b01a:	ec55 4b10 	vmov	r4, r5, d0
 801b01e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801b022:	4606      	mov	r6, r0
 801b024:	462b      	mov	r3, r5
 801b026:	b9aa      	cbnz	r2, 801b054 <scalbn+0x3c>
 801b028:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b02c:	4323      	orrs	r3, r4
 801b02e:	d03b      	beq.n	801b0a8 <scalbn+0x90>
 801b030:	4b31      	ldr	r3, [pc, #196]	; (801b0f8 <scalbn+0xe0>)
 801b032:	4629      	mov	r1, r5
 801b034:	2200      	movs	r2, #0
 801b036:	ee10 0a10 	vmov	r0, s0
 801b03a:	f7e5 fadd 	bl	80005f8 <__aeabi_dmul>
 801b03e:	4b2f      	ldr	r3, [pc, #188]	; (801b0fc <scalbn+0xe4>)
 801b040:	429e      	cmp	r6, r3
 801b042:	4604      	mov	r4, r0
 801b044:	460d      	mov	r5, r1
 801b046:	da12      	bge.n	801b06e <scalbn+0x56>
 801b048:	a327      	add	r3, pc, #156	; (adr r3, 801b0e8 <scalbn+0xd0>)
 801b04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b04e:	f7e5 fad3 	bl	80005f8 <__aeabi_dmul>
 801b052:	e009      	b.n	801b068 <scalbn+0x50>
 801b054:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801b058:	428a      	cmp	r2, r1
 801b05a:	d10c      	bne.n	801b076 <scalbn+0x5e>
 801b05c:	ee10 2a10 	vmov	r2, s0
 801b060:	4620      	mov	r0, r4
 801b062:	4629      	mov	r1, r5
 801b064:	f7e5 f912 	bl	800028c <__adddf3>
 801b068:	4604      	mov	r4, r0
 801b06a:	460d      	mov	r5, r1
 801b06c:	e01c      	b.n	801b0a8 <scalbn+0x90>
 801b06e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b072:	460b      	mov	r3, r1
 801b074:	3a36      	subs	r2, #54	; 0x36
 801b076:	4432      	add	r2, r6
 801b078:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b07c:	428a      	cmp	r2, r1
 801b07e:	dd0b      	ble.n	801b098 <scalbn+0x80>
 801b080:	ec45 4b11 	vmov	d1, r4, r5
 801b084:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801b0f0 <scalbn+0xd8>
 801b088:	f000 f83c 	bl	801b104 <copysign>
 801b08c:	a318      	add	r3, pc, #96	; (adr r3, 801b0f0 <scalbn+0xd8>)
 801b08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b092:	ec51 0b10 	vmov	r0, r1, d0
 801b096:	e7da      	b.n	801b04e <scalbn+0x36>
 801b098:	2a00      	cmp	r2, #0
 801b09a:	dd08      	ble.n	801b0ae <scalbn+0x96>
 801b09c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b0a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b0a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b0a8:	ec45 4b10 	vmov	d0, r4, r5
 801b0ac:	bd70      	pop	{r4, r5, r6, pc}
 801b0ae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b0b2:	da0d      	bge.n	801b0d0 <scalbn+0xb8>
 801b0b4:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b0b8:	429e      	cmp	r6, r3
 801b0ba:	ec45 4b11 	vmov	d1, r4, r5
 801b0be:	dce1      	bgt.n	801b084 <scalbn+0x6c>
 801b0c0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801b0e8 <scalbn+0xd0>
 801b0c4:	f000 f81e 	bl	801b104 <copysign>
 801b0c8:	a307      	add	r3, pc, #28	; (adr r3, 801b0e8 <scalbn+0xd0>)
 801b0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0ce:	e7e0      	b.n	801b092 <scalbn+0x7a>
 801b0d0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b0d4:	3236      	adds	r2, #54	; 0x36
 801b0d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b0da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b0de:	4620      	mov	r0, r4
 801b0e0:	4629      	mov	r1, r5
 801b0e2:	2200      	movs	r2, #0
 801b0e4:	4b06      	ldr	r3, [pc, #24]	; (801b100 <scalbn+0xe8>)
 801b0e6:	e7b2      	b.n	801b04e <scalbn+0x36>
 801b0e8:	c2f8f359 	.word	0xc2f8f359
 801b0ec:	01a56e1f 	.word	0x01a56e1f
 801b0f0:	8800759c 	.word	0x8800759c
 801b0f4:	7e37e43c 	.word	0x7e37e43c
 801b0f8:	43500000 	.word	0x43500000
 801b0fc:	ffff3cb0 	.word	0xffff3cb0
 801b100:	3c900000 	.word	0x3c900000

0801b104 <copysign>:
 801b104:	ec51 0b10 	vmov	r0, r1, d0
 801b108:	ee11 0a90 	vmov	r0, s3
 801b10c:	ee10 2a10 	vmov	r2, s0
 801b110:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b114:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801b118:	ea41 0300 	orr.w	r3, r1, r0
 801b11c:	ec43 2b10 	vmov	d0, r2, r3
 801b120:	4770      	bx	lr
	...

0801b124 <_init>:
 801b124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b126:	bf00      	nop
 801b128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b12a:	bc08      	pop	{r3}
 801b12c:	469e      	mov	lr, r3
 801b12e:	4770      	bx	lr

0801b130 <_fini>:
 801b130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b132:	bf00      	nop
 801b134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b136:	bc08      	pop	{r3}
 801b138:	469e      	mov	lr, r3
 801b13a:	4770      	bx	lr
